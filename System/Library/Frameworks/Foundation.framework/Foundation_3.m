unint64_t AttributedString.Guts.findRun(at:)@<X0>(unint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42[48];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  v4 = *(void *)(v2 + 64);
  v5 = result >> 11;
  if (v4) {
    v6 = *(void *)(v2 + 80);
  }
  else {
    v6 = 0LL;
  }
  if (v6 < v5)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  v7 = *(void *)(v2 + 72);
  v8 = *(void *)(v2 + 88);
  v41 = result >> 11;
  if (!v4 || (v5 < *(void *)(v2 + 80) ? (v9 = *(unsigned __int16 *)(v4 + 16) == 0) : (v9 = 1), v9))
  {
    v10 = swift_unknownObjectRetain_n();
    v11 = specialized Rope._endPath.getter(v10);
    result = swift_unknownObjectRelease();
    v12 = 0LL;
    v5 = 0LL;
    if (v4) {
      goto LABEL_12;
    }
    v14 = v8;
    v15 = 0LL;
LABEL_48:
    v31 = v41 - v5;
    if (!__OFSUB__(v41, v5))
    {
      v32 = *(_OWORD *)(v2 + 32);
      v43 = *(_OWORD *)(v2 + 16);
      v44 = v32;
      v45 = *(_OWORD *)(v2 + 48);
      result = BigString.utf8.getter();
      if (!__OFSUB__(0LL, v5))
      {
        v33 = BigString.UTF8View.index(_:offsetBy:)();
        v35 = v34;
        v37 = v36;
        v39 = v38;
        result = outlined release of Locale((uint64_t)v42);
        *a2 = v14;
        a2[1] = v11;
        a2[2] = v12;
        a2[3] = v15;
        a2[4] = v31;
        a2[5] = v33;
        a2[6] = v35;
        a2[7] = v37;
        a2[8] = v39;
        return result;
      }

      goto LABEL_59;
    }

LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  v40 = *(void *)(v2 + 88);
  v16 = *(unsigned __int8 *)(v4 + 18);
  if (!*(_BYTE *)(v4 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v12 = v4;
    v25 = *(unsigned __int16 *)(v4 + 16);
    if (!*(_WORD *)(v4 + 16)) {
      goto LABEL_45;
    }
LABEL_34:
    v26 = *(void *)(v12 + 24);
    v20 = __OFSUB__(v5, v26);
    v27 = v5 - v26;
    if (v20) {
      goto LABEL_62;
    }
    if (__OFADD__(v27, 1LL))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }

    if (v27 + 1 < 1)
    {
      v25 = 0LL;
      goto LABEL_46;
    }

    if ((_DWORD)v25 == 1)
    {
      v5 = v27;
      goto LABEL_45;
    }

    v28 = (uint64_t *)(v12 + 48);
    v29 = 1LL;
    while (1)
    {
      v30 = *v28;
      v28 += 3;
      v5 = v27 - v30;
      if (__OFSUB__(v27, v30)) {
        break;
      }
      if (__OFADD__(v5, 1LL)) {
        goto LABEL_61;
      }
      if (v5 + 1 < 1)
      {
        v25 = v29;
        v5 = v27;
        goto LABEL_46;
      }

      ++v29;
      v27 = v5;
      if (v25 == v29) {
        goto LABEL_45;
      }
    }

    v155[0] = v51;
    lazy protocol witness table accessor for type Int and conformance Int();
    v85 = String.init<A>(_:radix:uppercase:)();
    v87 = v102;
    goto LABEL_59;
  }

  if (EnumCaseMultiPayload != 1)
  {
    v53 = (uint64_t)v151;
    outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)v151,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
    v150 = type metadata accessor for ICUPercentNumberFormatter();
    v54 = v53 + *(int *)(v6 + 36);
    v55 = *(void *)(v53 + 8);
    ObjectType = swift_getObjectType();
    v57 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 472);
    swift_unknownObjectRetain();
    v58 = v57(ObjectType, v55);
    v60 = v59;
    swift_unknownObjectRelease();
    v61 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v55 + 464);
    swift_unknownObjectRetain();
    v61(v154, ObjectType, v55);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v154,  (uint64_t)v155,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with copy of ICUNumberFormatter.Signature( v54,  (uint64_t)v5,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    v62 = (uint64_t *)&v5[*(int *)(v3 + 20)];
    *v62 = v58;
    v62[1] = v60;
    outlined init with take of LocalePreferences?( (uint64_t)v155,  (uint64_t)&v5[*(int *)(v3 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    v63 = static ICUPercentNumberFormatter._create(with:)((uint64_t)v5);
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v5,  type metadata accessor for ICUPercentNumberFormatter.Signature);
    v64 = v152;
    if (!v63) {
      goto LABEL_62;
    }
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v65 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1895F8858](v65);
    LODWORD(v154[0]) = 0;
    v88 = unumf_resultToString();
    if (LODWORD(v154[0]) != 15)
    {
      v85 = specialized String.init(_utf16:)((uint64_t)(&v139 - 8), v88);
      v87 = v95;
      goto LABEL_46;
    }

    v89 = v88 + 1;
    if (!__OFADD__((_DWORD)v88, 1))
    {
      if (v89 < 0)
      {
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }

      if (v89 < 513 || (v88 = swift_stdlib_isStackAllocationSafe(), (v88 & 1) != 0))
      {
        MEMORY[0x1895F8858](v88);
        v91 = (char *)&v139 - v90;
        LODWORD(v153[0]) = 0;
        v92 = unumf_resultToString();
        if (SLODWORD(v153[0]) <= 0 && v92 > 0)
        {
          v85 = specialized String.init(_utf16:)((uint64_t)v91, v92);
          v87 = v93;
          goto LABEL_46;
        }

    v71 = (v60 - 1) & v60;
    v72 = v61;
    v54 = __clz(__rbit64(v60)) + (v61 << 6);
LABEL_31:
    v55 = *(void *)(v29 + 48);
    v56 = v74;
    v69 = *(void *)(v73 + 72) * v54;
    outlined init with copy of ICUNumberFormatter.Signature( v55 + v69,  v74,  type metadata accessor for ICUNumberFormatter.Signature);
    v57 = 8 * v54;
    v58 = *(void *)(*(void *)(v29 + 56) + 8 * v54);
    outlined init with take of ICUNumberFormatter.Signature( v56,  *(void *)(v40 + 48) + v69,  type metadata accessor for ICUNumberFormatter.Signature);
    *(void *)(*(void *)(v40 + 56) + v57) = v58;
    swift_retain();
    v53 = v71;
    v50 = v72;
  }

  v62 = v59 + 9;
  if (v62 >= v67) {
    goto LABEL_59;
  }
  v63 = v10;
  v60 = *(void *)&v68[8 * v62];
  if (v60)
  {
    v61 = v62;
    goto LABEL_58;
  }

  while (1)
  {
    v61 = v62 + 1;
    if (__OFADD__(v62, 1LL)) {
      break;
    }
    v19 = (char *)v75;
    v32 = (unint64_t)v76;
    v10 = v63;
    if (v61 >= v67) {
      goto LABEL_59;
    }
    v60 = *(void *)&v68[8 * v61];
    ++v62;
    if (v60) {
      goto LABEL_58;
    }
  }

  *a1 = a4;
  a1[1] = a5;
  a1[2] = a6;
  a1[3] = a7;
  a1[4] = v19;
  return v13;
}

    v53 = (v62 - 1) & v62;
    v93 = v63;
    v55 = __clz(__rbit64(v62)) + (v63 << 6);
LABEL_35:
    v56 = 16 * v55;
    v57 = (uint64_t *)(*(void *)(v18 + 48) + v56);
    v59 = *v57;
    v58 = v57[1];
    v91 = *(_OWORD *)(*(void *)(v18 + 56) + v56);
    v60 = (void *)(*(void *)(v25 + 48) + v56);
    *v60 = v59;
    v60[1] = v58;
    *(_OWORD *)(*(void *)(v25 + 56) + v56) = v91;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v91, *((unint64_t *)&v91 + 1));
    v50 = v93;
  }

  v64 = v50 + 8;
  v62 = *(void *)(v87 + 8 * v64);
  if (v62)
  {
    v63 = v50 + 8;
    goto LABEL_58;
  }

  while (1)
  {
    v63 = v64 + 1;
    if (__OFADD__(v64, 1LL)) {
      break;
    }
    v62 = *(void *)(v87 + 8 * v63);
    ++v64;
    if (v62) {
      goto LABEL_58;
    }
  }

  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_59:
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  v80 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  v81 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v80, sel_initWithDomain_code_userInfo_, v81, 512, _NativeDictionary.bridged()());
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_willThrow();
}

  __break(1u);
LABEL_59:
  v56 = (void *)swift_allocError();
  swift_willThrow();
  v62 = v56;
  v57 = v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {
    _StringGuts.grow(_:)(30LL);
    v58._countAndFlagsBits = 0xD00000000000001BLL;
    v58._object = (void *)0x80000001839C8CD0LL;
    String.append(_:)(v58);
    _print_unlocked<A, B>(_:_:)();
    v59._countAndFlagsBits = 39LL;
    v59._object = (void *)0xE100000000000000LL;
    String.append(_:)(v59);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_61;
  }

          swift_release();
          return v63;
        }
      }
    }

            __break(1u);
LABEL_59:
            __break(1u);
            goto LABEL_60;
          }

  v63 = v210;
  LOBYTE(v206) = v210 == 0x7FFFFFFFFFFFFFFFLL;
  if (v210 == 0x7FFFFFFFFFFFFFFFLL) {
    v63 = 0LL;
  }
  v210 = v63;
  if (!v212) {
    goto LABEL_63;
  }
LABEL_61:
  v60 = *(void *)&v231[9];
  if ((BYTE8(v231[9]) & 1) != 0)
  {
    v64 = 1;
    goto LABEL_65;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    v56 = (v47 - 1) & v47;
    v61 = v48;
    v42 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_31:
    v43 = *(void *)(v57 + 72) * v42;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v17 + 48) + v43,  v41,  type metadata accessor for ICUNumberFormatter.Signature);
    v44 = 8 * v42;
    v45 = *(void *)(*(void *)(v17 + 56) + 8 * v42);
    outlined init with take of ICUNumberFormatter.Signature( v41,  *(void *)(v27 + 48) + v43,  type metadata accessor for ICUNumberFormatter.Signature);
    *(void *)(*(void *)(v27 + 56) + v44) = v45;
    swift_retain();
    v37 = v61;
    v40 = v56;
  }

  v49 = v46 + 9;
  if (v49 >= v54) {
    goto LABEL_59;
  }
  v47 = *(void *)&v55[8 * v49];
  if (v47)
  {
    v48 = v49;
    goto LABEL_58;
  }

  while (1)
  {
    v48 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      break;
    }
    v16 = (unint64_t)v59;
    if (v48 >= v54) {
      goto LABEL_59;
    }
    v47 = *(void *)&v55[8 * v48];
    ++v49;
    if (v47) {
      goto LABEL_58;
    }
  }

    swift_once();
    goto LABEL_13;
  }

  if (one-time initialization token for lineSeparators != -1) {
    swift_once();
  }
  v19 = &static String.lineSeparators;
LABEL_17:
  v78 = *v19;
  swift_bridgeObjectRetain();
  if ((a1 & 1) == 0)
  {
    v20 = 0LL;
    v21 = 0LL;
    v22 = 0LL;
    v23 = 2LL;
LABEL_21:
    v24 = v79;
    goto LABEL_22;
  }

  if (v8 == v17)
  {
LABEL_20:
    v20 = v6;
    v21 = v80;
    v22 = v81;
    v23 = v82;
    goto LABEL_21;
  }

  v63 = BigString.UTF8View.index(before:)();
  v65 = v47;
  v21 = v48;
  v67 = v49;
  v24 = v79;
  if (v8 >= v79) {
    goto LABEL_45;
  }
  v50 = v3[1];
  v93[0] = *v3;
  v93[1] = v50;
  v93[2] = v3[2];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v93, (uint64_t)v94);
  outlined retain of Locale((uint64_t)v94);
  v51 = BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v3);
  if (v51 != 10)
  {
    v24 = v79;
LABEL_45:
    v20 = v63;
    v23 = v65;
    v22 = v67;
    goto LABEL_46;
  }

  outlined retain of Locale((uint64_t)v94);
  v20 = v63;
  v23 = v65;
  v22 = v67;
  v52 = BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v3);
  if (v52 != 13)
  {
LABEL_38:
    v24 = v79;
    goto LABEL_46;
  }

  if (v17 < v63 >> 10)
  {
    v20 = BigString.UTF8View.index(before:)();
    v21 = v53;
    v22 = v54;
    v23 = v55;
    goto LABEL_38;
  }

  v24 = v79;
  if (v82 != 2)
  {
    v20 = v6;
    v21 = v80;
    v22 = v81;
    v23 = v82;
    goto LABEL_22;
  }

          Hasher._combine(_:)(0);
          if (v44) {
            goto LABEL_54;
          }
          goto LABEL_59;
        }

          Hasher._combine(_:)(0);
          v52 = v101;
          if (v101) {
            goto LABEL_54;
          }
          goto LABEL_59;
        }

          v29 = v17 >> 16;
          if ((a10 & 0x2000000000000000LL) != 0)
          {
            v50 = a9;
            v51 = a10 & 0xFFFFFFFFFFFFFFLL;
            v30 = *((unsigned __int8 *)&v50 + v29);
          }

          else
          {
            result = (a10 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((a9 & 0x1000000000000000LL) == 0) {
              result = _StringObject.sharedUTF8.getter();
            }
            v30 = *(unsigned __int8 *)(result + v29);
          }

          v31 = (char)v30;
          v32 = __clz(v30 ^ 0xFF) - 24;
          if (v31 >= 0) {
            LOBYTE(v32) = 1;
          }
          v17 = ((v29 + v32) << 16) | 5;
LABEL_68:
          if ((v26 & 0xC) != v48 && (v26 & 1) != 0)
          {
            if (v42 <= v26 >> 16) {
              goto LABEL_95;
            }
LABEL_76:
            if ((a4 & 0x1000000000000000LL) == 0) {
              goto LABEL_77;
            }
            goto LABEL_86;
          }

          if ((v26 & 0xC) == v48)
          {
            result = _StringGuts._slowEnsureMatchingEncoding(_:)(v26, a3, a4);
            v26 = result;
          }

          if (v42 <= v26 >> 16) {
            goto LABEL_96;
          }
          if ((v26 & 1) != 0) {
            goto LABEL_76;
          }
          result = _StringGuts.scalarAlignSlow(_:)(v26, a3, a4);
          v26 = v26 & 0xC | result & 0xFFFFFFFFFFFFFFF3LL | 1;
          if ((a4 & 0x1000000000000000LL) == 0)
          {
LABEL_77:
            v33 = v26 >> 16;
            if ((a4 & 0x2000000000000000LL) != 0)
            {
              v50 = a3;
              v51 = a4 & 0xFFFFFFFFFFFFFFLL;
              v34 = *((unsigned __int8 *)&v50 + v33);
            }

            else
            {
              result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
              if ((a3 & 0x1000000000000000LL) == 0) {
                result = _StringObject.sharedUTF8.getter();
              }
              v34 = *(unsigned __int8 *)(result + v33);
            }

            v35 = (char)v34;
            v36 = __clz(v34 ^ 0xFF) - 24;
            if (v35 >= 0) {
              LOBYTE(v36) = 1;
            }
            v26 = ((v33 + v36) << 16) | 5;
            goto LABEL_87;
          }

          v25 = (v29 - 1) & v29;
          v28 = __clz(__rbit64(v29)) + (v21 << 6);
        }

        v31 = *(char *)(*(void *)(v1 + 48) + v28);
        if (v31 < 5)
        {
          v77 = qword_1837C3E98[v31];
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          static Duration.* infix<A>(_:_:)();
        }

        else
        {
          v32 = v31 - 5;
          if (v32 > 2u) {
            goto LABEL_156;
          }
          static Duration.interval(fractionalSecondsLength:)(3LL * v32 + 3);
        }

        static Duration.zero.getter();
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          v33 = static Duration.zero.getter();
          MEMORY[0x186E1D11C](v33);
        }

        v1 = v76;
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          *(unint64_t *)((char *)v75 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v28;
          v13 = __OFADD__(v73++, 1LL);
          if (v13)
          {
            __break(1u);
            goto LABEL_72;
          }
        }
      }
    }
  }

  v72 = (uint64_t)&v72;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  v75 = (unint64_t *)((char *)&v72 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v75, v3);
  v73 = 0LL;
  v4 = 0LL;
  v5 = v1 + 56;
  v6 = 1LL << *(_BYTE *)(v1 + 32);
  v7 = -1LL;
  if (v6 < 64) {
    v7 = ~(-1LL << v6);
  }
  v8 = v7 & *(void *)(v1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v4 << 6);
LABEL_22:
    v16 = *(char *)(*(void *)(v1 + 48) + v12);
    if (v16 < 5)
    {
      v77 = qword_1837C3E98[v16];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      static Duration.* infix<A>(_:_:)();
    }

    else
    {
      v17 = v16 - 5;
      if (v17 > 2u) {
        goto LABEL_154;
      }
      static Duration.interval(fractionalSecondsLength:)(3LL * v17 + 3);
    }

    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v18 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v18);
    }

    v10 = static Duration.< infix(_:_:)();
    v1 = v76;
    if ((v10 & 1) != 0)
    {
      *(unint64_t *)((char *)v75 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      v13 = __OFADD__(v73++, 1LL);
      if (v13)
      {
        __break(1u);
        goto LABEL_35;
      }
    }
  }

  v13 = __OFADD__(v4++, 1LL);
  if (v13) {
    goto LABEL_146;
  }
  if (v4 >= v9) {
    goto LABEL_35;
  }
  v14 = *(void *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_21:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_22;
  }

  v15 = v4 + 1;
  if (v4 + 1 >= v9) {
    goto LABEL_35;
  }
  v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_20;
  }
  v15 = v4 + 2;
  if (v4 + 2 >= v9) {
    goto LABEL_35;
  }
  v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_20;
  }
  v15 = v4 + 3;
  if (v4 + 3 >= v9) {
    goto LABEL_35;
  }
  v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_20;
  }
  v15 = v4 + 4;
  if (v4 + 4 >= v9) {
    goto LABEL_35;
  }
  v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_20:
    v4 = v15;
    goto LABEL_21;
  }

  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      goto LABEL_150;
    }
    if (v4 >= v9) {
      break;
    }
    v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }

          v34 = (unint64_t)(v3 + 19);
          v35 = (char *)(v3 + 20);
          *(void *)&v210 = v17;
          goto LABEL_59;
        }

              __break(1u);
              goto LABEL_59;
            }

            __break(1u);
            goto LABEL_58;
          case 1:
            if (v6 > 0x11) {
              return;
            }
            if (((1 << v6) & 0x20A04) != 0)
            {
              v15 = *a1;
              v11 = 1;
              goto LABEL_43;
            }

            if (((1 << v6) & 0x508) == 0) {
              return;
            }
            v15 = *a1;
            v14 = 1;
            goto LABEL_52;
          case 2:
            switch(*a1)
            {
              case 3:
              case 8:
              case 10:
                v15 = *a1;
                v11 = 2;
                goto LABEL_43;
              case 11:
                v15 = 11;
                v13 = 2;
                goto LABEL_54;
              default:
                return;
            }

            return;
          case 9:
            if (v6 > 0xB) {
              return;
            }
            if (((1 << v6) & 0x508) != 0)
            {
              v15 = *a1;
              v12 = 9;
              goto LABEL_51;
            }

            if (((1 << v6) & 0x804) != 0)
            {
              v15 = *a1;
              v13 = 9;
LABEL_54:
              v14 = v13;
              v16 = v7;
              _CalendarICU._locked_algorithmC(smaller:larger:at:)(&v15, &v14, (uint64_t *)&v16);
            }

            return;
          case 0xA:
            if (v6 == 3)
            {
              v16 = v7;
              _CalendarICU._locked_algorithmD(at:)((uint64_t *)&v16);
            }

            return;
          case 0xC:
            if (v6 > 0xB) {
              return;
            }
            if (((1 << v6) & 0xA04) != 0)
            {
              v15 = *a1;
              v11 = 12;
LABEL_43:
              v14 = v11;
              v16 = v7;
              _CalendarICU._locked_algorithmA(smaller:larger:at:)(&v15, &v14, (uint64_t *)&v16);
            }

            else if (((1 << v6) & 0x108) != 0)
            {
              v15 = *a1;
              v12 = 12;
LABEL_51:
              v14 = v12;
LABEL_52:
              v16 = v7;
              _CalendarICU._locked_algorithmB(smaller:larger:at:)(&v15, &v14, &v16);
            }

            return;
          default:
            return;
        }
    }
  }

                    if (!v20)
                    {
                      v2 = MEMORY[0x18961AFF0];
                      goto LABEL_128;
                    }

                    if (v20 == *(void *)(v2 + 16))
                    {
                      swift_retain();
                      goto LABEL_128;
                    }

                    v93 = v1;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
                    v32 = static _DictionaryStorage.allocate(capacity:)();
                    v61 = 0LL;
                    v94 = v19;
                    v62 = *v19;
                    v63 = v32 + 64;
                    while (1)
                    {
                      if (v62)
                      {
                        v69 = __clz(__rbit64(v62));
                        v62 &= v62 - 1;
                        v70 = v61;
                        v71 = v69 | (v61 << 6);
                      }

                      else
                      {
                        v72 = v61 + 1;
                        if (__OFADD__(v61, 1LL)) {
                          goto LABEL_136;
                        }
                        if (v72 >= v95) {
                          goto LABEL_127;
                        }
                        v19 = v94;
                        v73 = v94[v72];
                        v74 = v61 + 1;
                        if (!v73)
                        {
                          v74 = v61 + 2;
                          if (v61 + 2 >= v95) {
                            goto LABEL_130;
                          }
                          v73 = v94[v74];
                          if (!v73)
                          {
                            v74 = v61 + 3;
                            if (v61 + 3 >= v95) {
                              goto LABEL_130;
                            }
                            v73 = v94[v74];
                            if (!v73)
                            {
                              v74 = v61 + 4;
                              if (v61 + 4 >= v95) {
                                goto LABEL_130;
                              }
                              v73 = v94[v74];
                              if (!v73)
                              {
                                v74 = v61 + 5;
                                if (v61 + 5 >= v95) {
                                  goto LABEL_130;
                                }
                                v73 = v94[v74];
                                if (!v73)
                                {
                                  v75 = v61 + 6;
                                  if (v61 + 6 >= v95) {
                                    goto LABEL_130;
                                  }
                                  v73 = v94[v75];
                                  if (!v73)
                                  {
                                    while (1)
                                    {
                                      v74 = v75 + 1;
                                      if (__OFADD__(v75, 1LL)) {
                                        goto LABEL_139;
                                      }
                                      if (v74 >= v95) {
                                        break;
                                      }
                                      v73 = v94[v74];
                                      ++v75;
                                      if (v73) {
                                        goto LABEL_117;
                                      }
                                    }

          v28 = (v32 - 1) & v32;
          v30 = __clz(__rbit64(v32)) + (v24 << 6);
        }

        v34 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v30);
        v35 = *v34;
        v36 = v34[1];
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v1 + 56) + 72 * v30, (uint64_t)v110);
        *(void *)&v105 = v35;
        *((void *)&v105 + 1) = v36;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v110, (uint64_t)&v106);
        *(void *)&v99 = v35;
        *((void *)&v99 + 1) = v36;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)&v100);
        v37 = v104;
        if (v104
          && *(void *)(v104 + 16)
          && (Hasher.init(_seed:)(),
              Hasher._combine(_:)(0LL),
              v38 = Hasher._finalize()(),
              v39 = -1LL << *(_BYTE *)(v37 + 32),
              v40 = v38 & ~v39,
              ((*(void *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v40) & 1) != 0))
        {
          v41 = ~v39;
          while (*(void *)(*(void *)(v37 + 48) + 16 * v40 + 8))
          {
            v40 = (v40 + 1) & v41;
            if (((*(void *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v40) & 1) == 0) {
              goto LABEL_42;
            }
          }

          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRelease();
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)v94 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v30;
          v22 = __OFADD__(v95++, 1LL);
          v1 = v98;
          if (v22)
          {
            __break(1u);
            goto LABEL_69;
          }
        }

        else
        {
LABEL_42:
          swift_bridgeObjectRetain_n();
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
          swift_bridgeObjectRelease();
          v1 = v98;
        }
      }
    }
  }

  v92[1] = v92;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  v94 = (void *)((char *)v92 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v94, v3);
  v4 = 0LL;
  v5 = *(void *)(v1 + 64);
  v95 = 0LL;
  v96 = v1 + 64;
  v6 = 1LL << *(_BYTE *)(v1 + 32);
  if (v6 < 64) {
    v7 = ~(-1LL << v6);
  }
  else {
    v7 = -1LL;
  }
  v8 = v7 & v5;
  v97 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_24;
    }

    v11 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_137;
    }
    if (v11 >= v97) {
      goto LABEL_34;
    }
    v12 = *(void *)(v96 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v97) {
        goto LABEL_34;
      }
      v12 = *(void *)(v96 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v97) {
          goto LABEL_34;
        }
        v12 = *(void *)(v96 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }

        v47 = v26;
        goto LABEL_59;
      }

      v45 = 1LL;
      v26 = v47;
    }

  swift_bridgeObjectRelease();
  v70 = HIBYTE(v62) & 0xF;
  if ((v62 & 0x2000000000000000LL) == 0) {
    v70 = v60 & 0xFFFFFFFFFFFFLL;
  }
  if (v70 && (v71 = objc_msgSend((id)v9, sel_URLByDeletingPathExtension)) != 0)
  {
    v72 = v71;
    URL.init(reference:)(v71, v103);

    v73 = *(id *)&v103[0];
    URL.init(reference:)(v73, v103);

    swift_release();
    result = swift_release();
    v74 = *(_OWORD *)((char *)v103 + 8);
    *(void *)object = *(void *)&v103[0];
    *(_OWORD *)(object + 8) = v74;
  }

  else
  {
    *(void *)object = v9;
    *(void *)(object + 8) = v4;
    *(void *)(object + 16) = v6;
    v75 = (id)v9;
    swift_retain();
    return swift_retain();
  }

  return result;
}

        v39 = v5 + v3;
        v3 = (uint64_t)v43;
        v5 = v39 - (void)v43;
        goto LABEL_3;
      }

      ++v8;
      v7 += 0x100000000LL;
      if (v5 == v8) {
        return v2;
      }
    }

    v10 = (unsigned __int8 *)(v3 + v8);
    v11 = (_BYTE *)(v3 + v8 + 1);
    if ((_DWORD)v8) {
      goto LABEL_14;
    }
  }

  return v2;
}

      v26 = v6 - 2;
      if (v24 >= v6 - 2)
      {
        v30 = 1;
      }

      else
      {
        v27 = &a1[v24];
        do
        {
          if ((unint64_t)v6 >= 4
            && v24 < v6 - 4
            && *v27 == 47
            && a1[v24 + 1] == 46
            && a1[v24 + 2] == 46
            && a1[v24 + 3] == 47)
          {
            memmove(v27 + 1, v27 + 4, 2 * (v6 - v24) - 8);
            v12 = v48;
            v6 = *v48 - 3;
            *v48 = v6;
            v28 = v24 - 1;
          }

          else
          {
            v28 = v24;
          }

          if (v6 >= 3 && v28 == v6 - 3 && a1[v28] == 47)
          {
            v29 = &a1[v28];
            if (v29[1] == 46 && v29[2] == 46)
            {
              v6 -= 2LL;
              *v12 = v6;
            }
          }

          v26 = v6 - 2;
          v30 = v6 > 2;
          if (v6 < 3) {
            break;
          }
          v31 = v28 + 1;
          if (v31 >= v26) {
            break;
          }
        }

        while (v24 == v31);
      }

      if (v30 && v24 < v6)
      {
        while (v24 + 1 < v26)
        {
          v32 = 0LL;
          v33 = &a1[v24 + 3];
          v34 = 2 * (v6 - 5 - v24);
          while (*(v33 - 2) != 47)
          {
            ++v33;
            ++v32;
            v34 -= 2LL;
            if (!(1 - v26 + v24 + v32)) {
              goto LABEL_96;
            }
          }

          v35 = v24 + v32 + 1;
          if (v6 >= 4 && v35 < v6 - 4 && *(v33 - 1) == 46 && *v33 == 46 && v33[1] == 47)
          {
            *v12 = v6 - v32 - 4;
            v37 = v12;
            memmove(&v20[v24], v33 + 2, v34);
            v6 = *v37;
            break;
          }

          if (!(v24 + v32 + 4 - v6) && a1[v6 - 3] == 47 && a1[v6 - 2] == 46 && a1[v6 - 1] == 46)
          {
            *v12 = v24 + 1;
            v6 = v24 + 1;
            break;
          }

          v24 += v32 + 1;
          if (v35 >= v6) {
            break;
          }
        }
      }

  *(void *)(a1 + 96) = *(void *)(a1 + 64);
  result = *(void *)(a1 + 112) + *(void *)(a1 + 104);
  *(void *)(a1 + 40) = result;
  return result;
}

  *v23 = 0;
  v32 = strtod_l(v22, &v39, 0LL);
  if (v21) {
    free(v21);
  }
  if (v39 == v22) {
    return 0LL;
  }
  *a4 += (unint64_t)&v39[v35 + v34 + v33 - (void)v22];
  if (a3) {
    *a3 = v32;
  }
  return 1LL;
}

void *AttributedString.Guts.getUniformValue<A>(in:key:)@<X0>( void *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v5 = v4;
  uint64_t v139 = a2;
  uint64_t v140 = a3;
  uint64_t v172 = 0LL;
  __int128 v170 = 0u;
  __int128 v171 = 0u;
  __int128 v168 = 0u;
  __int128 v169 = 0u;
  uint64_t v6 = *result >> 11;
  uint64_t v7 = v4[8];
  uint64_t v8 = v5[10];
  if (v7) {
    uint64_t v9 = v5[10];
  }
  else {
    uint64_t v9 = 0LL;
  }
  if (v9 < v6) {
    goto LABEL_320;
  }
  unint64_t v10 = result[4];
  uint64_t v11 = v5[9];
  uint64_t v12 = v5[11];
  v145 = v5;
  uint64_t v136 = a4;
  if (v7)
  {
    if (v6 < v8 && *(_WORD *)(v7 + 16) != 0)
    {
      uint64_t v147 = v12;
      unint64_t v148 = v11;
      uint64_t v146 = v10;
      uint64_t v27 = *(unsigned __int8 *)(v7 + 18);
      if (*(_BYTE *)(v7 + 18))
      {
        swift_unknownObjectRetain_n();
        result = (void *)swift_retain_n();
        uint64_t v16 = v6;
        uint64_t v121 = v7;
        while (1)
        {
          uint64_t v123 = *(unsigned __int16 *)(v121 + 16);
          if (!*(_WORD *)(v121 + 16)) {
            goto LABEL_223;
          }
          uint64_t v124 = *(void *)(v121 + 40);
          uint64_t v125 = v16 - v124;
          if (__OFSUB__(v16, v124)) {
            goto LABEL_308;
          }
          if (__OFADD__(v125, 1LL))
          {
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
LABEL_311:
            __break(1u);
LABEL_312:
            __break(1u);
LABEL_313:
            __break(1u);
LABEL_314:
            __break(1u);
LABEL_315:
            __break(1u);
LABEL_316:
            __break(1u);
LABEL_317:
            __break(1u);
LABEL_318:
            __break(1u);
LABEL_319:
            __break(1u);
LABEL_320:
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            __break(1u);
            goto LABEL_323;
          }

          if (v125 + 1 <= 0)
          {
            uint64_t v123 = 0LL;
          }

          else
          {
            if ((_DWORD)v123 == 1)
            {
              v16 -= v124;
LABEL_223:
              if (v16) {
                goto LABEL_307;
              }
              goto LABEL_224;
            }

            uint64_t v126 = *(void *)(v121 + 64);
            BOOL v35 = __OFSUB__(v125, v126);
            uint64_t v127 = v125 - v126;
            if (v35) {
              goto LABEL_318;
            }
            if (__OFADD__(v127, 1LL)) {
              goto LABEL_319;
            }
            if (v127 + 1 >= 1)
            {
              if ((_DWORD)v123 != 2)
              {
                v128 = (void *)(v121 + 88);
                uint64_t v129 = 2LL;
                while (1)
                {
                  if (v123 == v129) {
                    goto LABEL_297;
                  }
                  uint64_t v16 = v127 - *v128;
                  if (__OFSUB__(v127, *v128)) {
                    goto LABEL_298;
                  }
                  if (__OFADD__(v16, 1LL)) {
                    goto LABEL_299;
                  }
                  if (v16 + 1 < 1) {
                    break;
                  }
                  ++v129;
                  v128 += 3;
                  uint64_t v127 = v16;
                  if (v123 == v129) {
                    goto LABEL_223;
                  }
                }

                uint64_t v123 = v129;
                uint64_t v16 = v127;
                goto LABEL_224;
              }

              uint64_t v16 = v127;
              goto LABEL_223;
            }

            uint64_t v123 = 1LL;
            uint64_t v16 = v125;
          }

LABEL_224:
          char v122 = (4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C;
          uint64_t v27 = ((-15LL << v122) - 1) & v27 | (v123 << v122);
          uint64_t v15 = *(void *)(v121 + 24 + 24 * v123);
          swift_unknownObjectRetain();
          result = (void *)swift_unknownObjectRelease();
          uint64_t v121 = v15;
          if (!*(_BYTE *)(v15 + 18)) {
            goto LABEL_248;
          }
        }
      }

      swift_unknownObjectRetain_n();
      result = (void *)swift_retain_n();
      uint64_t v16 = v6;
      uint64_t v15 = v7;
LABEL_248:
      uint64_t v130 = *(unsigned __int16 *)(v15 + 16);
      if (*(_WORD *)(v15 + 16))
      {
        uint64_t v131 = *(void *)(v15 + 24);
        uint64_t v132 = v16 - v131;
        uint64_t v12 = v147;
        uint64_t v11 = v148;
        if (__OFSUB__(v16, v131)) {
          goto LABEL_337;
        }
        if (__OFADD__(v132, 1LL)) {
          goto LABEL_338;
        }
        if (v132 + 1 <= 0)
        {
          uint64_t v130 = 0LL;
          goto LABEL_280;
        }

        if ((_DWORD)v130 == 1)
        {
          v16 -= v131;
        }

        else
        {
          uint64_t v134 = *(void *)(v15 + 48);
          BOOL v35 = __OFSUB__(v132, v134);
          uint64_t v31 = v132 - v134;
          if (v35) {
            goto LABEL_341;
          }
          if (__OFADD__(v31, 1LL)) {
            goto LABEL_342;
          }
          if (v31 + 1 < 1)
          {
            uint64_t v130 = 1LL;
            uint64_t v16 = v132;
            goto LABEL_280;
          }

          if ((_DWORD)v130 != 2)
          {
            v135 = (void *)(v15 + 72);
            uint64_t v36 = 2LL;
            while (v130 != v36)
            {
              uint64_t v16 = v31 - *v135;
              if (__OFSUB__(v31, *v135)) {
                goto LABEL_330;
              }
              if (__OFADD__(v16, 1LL)) {
                goto LABEL_331;
              }
              if (v16 + 1 < 1) {
                goto LABEL_279;
              }
              ++v36;
              v135 += 3;
              uint64_t v31 = v16;
              if (v130 == v36) {
                goto LABEL_255;
              }
            }

            goto LABEL_329;
          }

          uint64_t v16 = v31;
        }
      }

      else
      {
        uint64_t v12 = v147;
        uint64_t v11 = v148;
      }

                  __break(1u);
LABEL_225:
                  __break(1u);
LABEL_226:
                  __break(1u);
LABEL_227:
                  __break(1u);
LABEL_228:
                  __break(1u);
LABEL_229:
                  __break(1u);
                  goto LABEL_230;
                }

  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
  return result;
}

                __break(1u);
                JUMPOUT(0x1833DF6ACLL);
              }

LABEL_255:
      if (!v16) {
        goto LABEL_280;
      }
      __break(1u);
LABEL_257:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v154);
      goto LABEL_260;
    }
  }

  swift_retain_n();
  unint64_t v14 = swift_unknownObjectRetain_n();
  unint64_t v148 = specialized Rope._endPath.getter(v14);
  swift_unknownObjectRelease();
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  if (!v7) {
    goto LABEL_281;
  }
LABEL_12:
  swift_unknownObjectRetain();
  uint64_t v17 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v148, v15, v7, v11);
  swift_release();
  result = (void *)swift_unknownObjectRelease_n();
  uint64_t v11 = v6 - v16;
  if (__OFSUB__(v6, v16))
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }

                      __break(1u);
LABEL_256:
                      __break(1u);
LABEL_257:
                      __break(1u);
                      goto LABEL_258;
                    }

            outlined destroy of Any?( (uint64_t)v414,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?( (uint64_t)v415,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v361);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v366);
            outlined destroy of Any?( (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v378,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            v191 = v227;
            v221 = v356;
            if ((v228 & 1) == 0) {
              goto LABEL_287;
            }
LABEL_256:
            v226 += 2;
            ++v225;
            if (v229 == v198)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              uint64_t v20 = v348;
              v192 = *(void *)(v348 + 64);
              v195 = *(void **)(v348 + 88);
              v340 = v325;
              v191 = v346;
              v368 = (unint64_t)v346;
              v369 = v337;
              v160 = v324;
              v351 = v337;
              v370 = v324;
              v199 = v339;
              uint64_t v33 = __OFADD__(v338++, 1LL);
              if (!v33) {
                goto LABEL_223;
              }
              __break(1u);
LABEL_285:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v366);
LABEL_286:
              outlined destroy of Any?( (uint64_t)&v368,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?( (uint64_t)&v378,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_287:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              uint64_t v20 = v348;
              v199 = v339;
              v160 = v341;
              v202 = v351;
              goto LABEL_288;
            }
          }
        }

        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
LABEL_288:
        if (v332 != *(void *)(v20 + 88)) {
          goto LABEL_390;
        }
        if (v160)
        {
          v248 = *(void *)(v160 + 24 * ((v202 >> ((4 * *(_BYTE *)(v160 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          v249 = *(void *)(v20 + 64);
          swift_unknownObjectRetain();
          v248 = specialized Rope._Node.subscript.getter(v202, v249);
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v250 = &v340[v248];
        if (__OFADD__(v340, v248)) {
          goto LABEL_391;
        }
        v251 = v199[1];
        v415[0] = *v199;
        v415[1] = v251;
        v415[2] = v199[2];
        BigString.utf8.getter();
        result = v311;
        if (__OFSUB__(v250, (unint64_t)v311 >> 11))
        {
LABEL_392:
          __break(1u);
LABEL_393:
          __break(1u);
          goto LABEL_394;
        }

        v252 = BigString.UTF8View.index(_:offsetBy:)();
        v254 = v253;
        v256 = v255;
        v258 = v257;
        result = outlined release of Locale((uint64_t)v405);
        if (v331 >= v252 >> 10) {
          v259 = v252;
        }
        else {
          v259 = v323;
        }
        if (v331 >= v252 >> 10) {
          v260 = v254;
        }
        else {
          v260 = v322;
        }
        v261 = v199;
        if (v331 >= v252 >> 10) {
          v262 = v256;
        }
        else {
          v262 = v321;
        }
        if (v331 >= v252 >> 10) {
          v263 = v258;
        }
        else {
          v263 = v320;
        }
        v264 = *v261;
        v265 = v261[1];
        v414[2] = v261[2];
        v414[1] = v265;
        v414[0] = v264;
        v266 = v334;
        if (v259 >> 10 < v334) {
          goto LABEL_393;
        }
        *(void *)&v378 = v352;
        *((void *)&v378 + 1) = v345;
        *(void *)&v379 = v344;
        *((void *)&v379 + 1) = v343;
        *(void *)&v380 = v259;
        *((void *)&v380 + 1) = v260;
        *(void *)&v381 = v262;
        *((void *)&v381 + 1) = v263;
        v267 = v191[2];
        if (v267 && v334 != v259 >> 10)
        {
          swift_bridgeObjectRetain();
          outlined retain of Locale((uint64_t)v414);
          v268 = 5LL;
          v269 = v267;
          while (v191[v268])
          {
            swift_bridgeObjectRelease();
            v268 += 2LL;
            if (!--v269)
            {
              swift_bridgeObjectRelease();
              goto LABEL_316;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v406);
          v366[0] = v352;
          v366[1] = v345;
          v366[2] = v344;
          v366[3] = v343;
          v366[4] = v352;
          v366[5] = v345;
          v366[6] = v344;
          v366[7] = v343;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v366, &v368);
          result = outlined release of Locale((uint64_t)&v407);
          if (v375 != 2)
          {
            v259 = v372;
            if (v266 > v372 >> 10) {
              goto LABEL_417;
            }
            v260 = v373;
            v262 = v374;
            v263 = v375;
          }

  if (!v323)
  {
LABEL_260:
    v210 = a5;
    static TimeZone.gmt.getter(__dst);
    tv_nsec = *((void *)&__dst[0] + 1);
    tv_sec = *(void *)&__dst[0];
    goto LABEL_220;
  }

  if ((v309 & 1) == 0)
  {
    uint64_t v40 = __OFSUB__(0LL, v323);
    v323 = -v323;
    if (v40) {
      goto LABEL_281;
    }
  }

  TimeZone.init(secondsFromGMT:)(v323, &__tp);
  tv_sec = __tp.tv_sec;
  if (!__tp.tv_sec)
  {
    __dst[0] = *(_OWORD *)&v337._nsError._domain;
    __dst[1] = v338;
    *(void *)&__dst[2] = v339;
    v333._time = static Date.now.getter((double *)&v337);
    v334 = Date.ISO8601FormatStyle.format(_:)(v333);
    v335._countAndFlagsBits = a1;
    v335._object = a2;
    parseError(_:exampleFormattedString:)(&v337, v335, (Swift::String_optional)v334);
    swift_bridgeObjectRelease();
    goto LABEL_216;
  }

  tv_nsec = __tp.tv_nsec;
LABEL_219:
  v210 = a5;
LABEL_220:
  *(void *)&__dst[0] = tv_sec;
  *((void *)&__dst[0] + 1) = tv_nsec;
  DateComponents.timeZone.setter((uint64_t *)__dst);
LABEL_130:
  v211 = (char *)((char *)v337._nsError._reserved - (char *)a3);
  result = memcpy(v210 + 1, __src, 0x11AuLL);
  *v210 = v211;
  return result;
}

LABEL_13:
  uint64_t v146 = v10 >> 11;
  v138 = (__int128 *)((char *)&v156 + 8);
  uint64_t v18 = v17;
  for (i = v6; ; uint64_t v6 = i)
  {
    uint64_t v20 = v5[8];
    uint64_t v147 = v12;
    if (v6 != v146)
    {
      if (v20) {
        uint64_t v29 = v5[10];
      }
      else {
        uint64_t v29 = 0LL;
      }
      goto LABEL_85;
    }

    uint64_t v21 = v5[10];
    if (v20) {
      uint64_t v22 = v5[10];
    }
    else {
      uint64_t v22 = 0LL;
    }
    if (v22 < v6) {
      goto LABEL_302;
    }
    if (v20) {
      break;
    }
    uint64_t v27 = 0LL;
LABEL_83:
    uint64_t v29 = v6 - v27;
    if (__OFSUB__(v6, v27)) {
      goto LABEL_303;
    }
    v5 = v145;
LABEL_85:
    if (v11 == v29)
    {
      swift_release();
      return (void *)outlined init with take of LocalePreferences?( (uint64_t)&v168,  v136,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    }

    if (v12 != v5[11]) {
      goto LABEL_287;
    }
    if (v15)
    {
      v45 = (void *)(v15 + 24 * ((v148 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v46 = v45[4];
      uint64_t v47 = v45[5];
      unint64_t v48 = v45[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v142 = v47;
      v143 = (uint64_t *)v46;
    }

    else
    {
      v137 = 0LL;
      uint64_t v49 = v11;
      uint64_t v50 = v6;
      uint64_t v51 = v18;
      v52 = v145;
      uint64_t v53 = v145[8];
      swift_unknownObjectRetain();
      unint64_t v54 = v148;
      specialized Rope._Node.subscript.getter(v148, v53);
      v143 = (uint64_t *)v55;
      uint64_t v57 = v56;
      result = (void *)swift_unknownObjectRelease();
      if (v12 != v52[11]) {
        goto LABEL_310;
      }
      uint64_t v142 = v57;
      uint64_t v58 = v52[8];
      swift_unknownObjectRetain();
      unint64_t v48 = specialized Rope._Node.subscript.getter(v54, v58);
      uint64_t v12 = v147;
      swift_unknownObjectRelease();
      uint64_t v18 = v51;
      uint64_t v6 = v50;
      uint64_t v11 = v49;
      uint64_t v15 = (uint64_t)v137;
    }

    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
    int64_t v59 = v11 + v48;
    if (__OFADD__(v11, v48)) {
      goto LABEL_288;
    }
    if (v146 >= v11) {
      uint64_t v60 = v11;
    }
    else {
      uint64_t v60 = v146;
    }
    if (v11 < v6) {
      uint64_t v60 = v6;
    }
    if (v59 <= v6) {
      unint64_t v61 = v6;
    }
    else {
      unint64_t v61 = v11 + v48;
    }
    if (v146 >= v59) {
      unint64_t v62 = v61;
    }
    else {
      unint64_t v62 = v146;
    }
    if (v60 == v62) {
      goto LABEL_289;
    }
    v5 = v145;
    uint64_t v63 = v145[8];
    uint64_t v64 = v145[11];
    *(void *)&__int128 v154 = v12;
    *((void *)&v154 + 1) = v148;
    *(void *)&__int128 v155 = v15;
    BOOL v35 = __OFADD__(v18++, 1LL);
    if (v35) {
      goto LABEL_290;
    }
    if (v12 != v64) {
      goto LABEL_291;
    }
    if (v15)
    {
      unint64_t v65 = *(void *)(v15 + 24 * ((v148 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }

    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v65 = specialized Rope._Node.subscript.getter(v148, v63);
    }

    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
    BOOL v35 = __OFADD__(v11, v65);
    v11 += v65;
    if (v35) {
      goto LABEL_292;
    }
    if (v63)
    {
      unint64_t v66 = ((-15LL << ((4 * *(_BYTE *)(v63 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v63 + 18) | ((unint64_t)*(unsigned __int16 *)(v63 + 16) << ((4 * *(_BYTE *)(v63 + 18) + 8) & 0x3C));
      result = (void *)swift_unknownObjectRetain();
    }

    else
    {
      unint64_t v66 = 0LL;
    }

    uint64_t v67 = v147;
    if (v148 >= v66) {
      goto LABEL_293;
    }
    if (v15)
    {
      char v68 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
      unint64_t v69 = ((v148 >> v68) & 0xF) + 1;
      if (v69 < *(unsigned __int16 *)(v15 + 16))
      {
        unint64_t v70 = (v69 << v68) | ((-15LL << v68) - 1) & v148;
        result = (void *)swift_unknownObjectRelease_n();
        goto LABEL_122;
      }
    }

    int v71 = *(unsigned __int8 *)(v63 + 18);
    char v72 = (4 * v71 + 8) & 0x3C;
    *(void *)&__int128 v163 = (v148 >> v72) & 0xF;
    if (v71)
    {
      swift_unknownObjectRetain();
      char v73 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v63 + 24,  (uint64_t *)&v163,  (uint64_t)&v154,  v63,  v71);
      result = (void *)swift_unknownObjectRelease();
      if ((v73 & 1) != 0)
      {
        result = (void *)swift_unknownObjectRelease_n();
        unint64_t v70 = *((void *)&v154 + 1);
        goto LABEL_122;
      }
    }

    else
    {
      unint64_t v74 = ((v148 >> v72) & 0xF) + 1;
      if (v74 < *(unsigned __int16 *)(v63 + 16))
      {
        unint64_t v70 = (v74 << v72) | ((-15LL << v72) - 1) & v148;
        *((void *)&v154 + 1) = v70;
        result = (void *)swift_unknownObjectRelease_n();
        *(void *)&__int128 v155 = v63;
LABEL_122:
        uint64_t v75 = v146;
        if (v11 < v146) {
          goto LABEL_123;
        }
        goto LABEL_128;
      }
    }

    if (v63)
    {
      int v76 = *(unsigned __int8 *)(v63 + 18);
      uint64_t v77 = *(unsigned __int16 *)(v63 + 16);
      result = (void *)swift_unknownObjectRelease_n();
      unint64_t v70 = ((-15LL << ((4 * v76 + 8) & 0x3C)) - 1) & v76 | (unint64_t)(v77 << ((4 * v76 + 8) & 0x3C));
    }

    else
    {
      unint64_t v70 = 0LL;
    }

    uint64_t v75 = v146;
    *(void *)&__int128 v154 = v67;
    *((void *)&v154 + 1) = v70;
    *(void *)&__int128 v155 = 0LL;
    if (v11 < v146)
    {
LABEL_123:
      unint64_t v148 = v70;
      uint64_t v12 = v154;
      uint64_t v15 = v155;
      swift_release();
      goto LABEL_189;
    }

  swift_bridgeObjectRetain();
  return v1;
}

    uint64_t v129 = a6;
    char v122 = 1;
    uint64_t v123 = a8;
    uint64_t v21 = a10;
    goto LABEL_14;
  }

  if ((a6 & 1) == 0)
  {
    uint64_t v21 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(a11, a1, a2, a3, a4, a10);
    if ((v112 & 1) != 0) {
      return 0LL;
    }
    uint64_t v20 = v21;
    uint64_t v129 = a6;
    char v122 = 0;
    uint64_t v123 = a8;
    if ((a8 & 1) == 0) {
      uint64_t v21 = a10;
    }
    goto LABEL_15;
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v11[7] = v9;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

  *(double *)&result = 0.0;
  return result;
}

  unint64_t v14 = URL.ParseStrategy.defaultValues.getter();
  if (*(void *)(v14 + 16) && (uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(1LL), (v16 & 1) != 0))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
    v19 = *v17;
    uint64_t v18 = (void *)v17[1];
    swift_bridgeObjectRetain();
  }

  else
  {
    v19 = 0LL;
    uint64_t v18 = 0LL;
  }

  swift_bridgeObjectRelease();
  v20.value._countAndFlagsBits = v19;
  v20.value._object = v18;
  URLComponents._URLComponents.setScheme(_:)(v20);
  if (v3)
  {

    swift_bridgeObjectRelease();
    LODWORD(v271) = 0;
    v270 = 714LL;
    goto LABEL_201;
  }

  unint64_t v10 = swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v21 = a1[7];
  v381 = a1[6];
  v382 = v21;
  v383[0] = a1[8];
  *(_OWORD *)((char *)v383 + 10) = *(__int128 *)((char *)a1 + 138);
  uint64_t v22 = a1[3];
  v377 = a1[2];
  v378 = v22;
  uint64_t v23 = a1[5];
  v379 = a1[4];
  v380 = v23;
  uint64_t v24 = a1[1];
  v375 = *a1;
  v376 = v24;
  BOOL v25 = URLComponents._URLComponents.user.getter(v10);
  if (!v26) {
    goto LABEL_24;
  }
  uint64_t v27 = v25;
  uint64_t v28 = v26;
  swift_bridgeObjectRelease();
  uint64_t v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000LL) == 0) {
    uint64_t v29 = (unint64_t)v27 & 0xFFFFFFFFFFFFLL;
  }
  if (!v29)
  {
LABEL_24:
    uint64_t v32 = URL.ParseStrategy.defaultValues.getter();
    if (*(void *)(v32 + 16) && (uint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(2LL), (v34 & 1) != 0))
    {
      BOOL v35 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v33);
      char v30 = *v35;
      uint64_t v31 = v35[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_BYTE *)a1 + 8) = 0;
      *((_BYTE *)a1 + 10) = 0;
      if ((v31 & 0x1000000000000000LL) != 0)
      {
        v360 = v30;
        v361 = v31;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v247 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v248 = (unsigned __int16 *)objc_msgSend(v247, sel__fastCharacterContents);
        v249 = v247;
        v250 = v248;
        v251 = v249;
        if (v250)
        {
          v360 = v30;
          v361 = v31;
          StringProtocol._ephemeralString.getter();
          v252 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v253 = objc_msgSend(v252, sel_length);
          swift_unknownObjectRelease();
          v254 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v250,  (uint64_t)v253,  2u,  0);
        }

        else
        {
          v254 = specialized Sequence.allSatisfy(_:)(v30, v31, 2);
        }

        v264 = v254;
        uint64_t v83 = swift_bridgeObjectRelease();
        if ((v264 & 1) == 0) {
          goto LABEL_56;
        }
      }

      else
      {
        if ((v31 & 0x2000000000000000LL) != 0)
        {
          v37 = HIBYTE(v31) & 0xF;
          v360 = v30;
          v361 = v31 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v36 = (char *)&v360;
        }

        else if ((v30 & 0x1000000000000000LL) != 0)
        {
          uint64_t v36 = (char *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v37 = v30 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v36 = (char *)_StringObject.sharedUTF8.getter();
        }

        uint64_t v83 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v37, 2u, 0);
        if ((v83 & 1) == 0)
        {
LABEL_56:
          uint64_t v84 = HIBYTE(v31) & 0xF;
          if ((v31 & 0x2000000000000000LL) == 0) {
            uint64_t v84 = v30 & 0xFFFFFFFFFFFFLL;
          }
          if (v84)
          {
            v360 = v30;
            v361 = v31;
            MEMORY[0x1895F8858](v83);
            v270 = (uint64_t)&v360;
            LOBYTE(v271) = 2;
            swift_bridgeObjectRetain();
            char v85 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v269,  v30,  v31);
            if (v86)
            {
              char v30 = (uint64_t)v85;
              uint64_t v87 = v86;
              swift_bridgeObjectRelease_n();
            }

            else
            {
              v230 = v360;
              v231 = v361;
              swift_bridgeObjectRetain();
              char v30 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v230, v231, 2u);
              uint64_t v87 = v232;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }

            uint64_t v31 = v87;
          }

          else
          {
            swift_bridgeObjectRelease();
            char v30 = 0LL;
            uint64_t v31 = 0xE000000000000000LL;
          }
        }
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      char v30 = 0LL;
      uint64_t v31 = 0LL;
      *((_BYTE *)a1 + 8) = 0;
      *((_BYTE *)a1 + 10) = 0;
    }

    swift_bridgeObjectRelease();
    *((void *)a1 + 5) = v30;
    *((void *)a1 + 6) = v31;
    goto LABEL_32;
  }

  char v30 = *((void *)&v377 + 1);
  uint64_t v31 = v378;
LABEL_32:
  uint64_t v38 = *(void *)a1;
  uint64_t v39 = *((_BYTE *)a1 + 8);
  uint64_t v40 = *((_BYTE *)a1 + 9);
  uint64_t v41 = *((_BYTE *)a1 + 10);
  uint64_t v42 = *((_BYTE *)a1 + 11);
  v43 = *((_BYTE *)a1 + 12);
  uint64_t v44 = *((_BYTE *)a1 + 13);
  v45 = *((_BYTE *)a1 + 14);
  uint64_t v46 = *((_BYTE *)a1 + 15);
  uint64_t v47 = *((_BYTE *)a1 + 16);
  unint64_t v48 = *((void *)a1 + 7);
  uint64_t v49 = *((_BYTE *)a1 + 152);
  uint64_t v50 = *((_BYTE *)a1 + 153);
  v303 = *((_BYTE *)a1 + 96);
  v360 = v38;
  LOBYTE(v361) = v39;
  BYTE1(v361) = v40;
  BYTE2(v361) = v41;
  BYTE3(v361) = v42;
  BYTE4(v361) = v43;
  BYTE5(v361) = v44;
  BYTE6(v361) = v45;
  HIBYTE(v361) = v46;
  v362 = v47;
  v363 = *(__int128 *)((char *)a1 + 24);
  v364 = v30;
  v365 = v31;
  v366 = v48;
  uint64_t v51 = a1[5];
  v293 = a1[4];
  v367 = v293;
  v368 = v51;
  v369 = v303;
  v370 = *(__int128 *)((char *)a1 + 104);
  v371 = *(__int128 *)((char *)a1 + 120);
  v372 = *(__int128 *)((char *)a1 + 136);
  v373 = v49;
  v374 = v50;
  v52 = URLComponents._URLComponents.password.getter(v303);
  if (v53)
  {
    unint64_t v54 = v52;
    uint64_t v55 = v53;
    swift_bridgeObjectRelease();
    uint64_t v56 = HIBYTE(v55) & 0xF;
    if ((v55 & 0x2000000000000000LL) == 0) {
      uint64_t v56 = (unint64_t)v54 & 0xFFFFFFFFFFFFLL;
    }
    if (v56)
    {
      uint64_t v57 = v293;
      goto LABEL_45;
    }
  }

  uint64_t v58 = URL.ParseStrategy.defaultValues.getter();
  if (*(void *)(v58 + 16) && (int64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(4LL), (v60 & 1) != 0))
  {
    unint64_t v61 = (uint64_t *)(*(void *)(v58 + 56) + 16 * v59);
    unint64_t v48 = *v61;
    uint64_t v57 = v61[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_BYTE *)a1 + 8) = 0;
    *((_BYTE *)a1 + 11) = 0;
    if ((v57 & 0x1000000000000000LL) != 0)
    {
      v345 = v48;
      v346 = v57;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v255 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v256 = (unsigned __int16 *)objc_msgSend(v255, sel__fastCharacterContents);
      v257 = v255;
      if (v256)
      {
        v345 = v48;
        v346 = v57;
        StringProtocol._ephemeralString.getter();
        v258 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v259 = objc_msgSend(v258, sel_length);
        swift_unknownObjectRelease();
        v260 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v256,  (uint64_t)v259,  2u,  0);
      }

      else
      {
        v260 = specialized Sequence.allSatisfy(_:)(v48, v57, 2);
      }

      v265 = v260;
      uint64_t v88 = swift_bridgeObjectRelease();
      if ((v265 & 1) == 0) {
        goto LABEL_64;
      }
    }

    else
    {
      if ((v57 & 0x2000000000000000LL) != 0)
      {
        uint64_t v63 = HIBYTE(v57) & 0xF;
        v345 = v48;
        v346 = v57 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v62 = (char *)&v345;
      }

      else if ((v48 & 0x1000000000000000LL) != 0)
      {
        unint64_t v62 = (char *)((v57 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v63 = v48 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        unint64_t v62 = (char *)_StringObject.sharedUTF8.getter();
      }

      uint64_t v88 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v62, v63, 2u, 0);
      if ((v88 & 1) == 0)
      {
LABEL_64:
        uint64_t v89 = HIBYTE(v57) & 0xF;
        if ((v57 & 0x2000000000000000LL) == 0) {
          uint64_t v89 = v48 & 0xFFFFFFFFFFFFLL;
        }
        if (v89)
        {
          v345 = v48;
          v346 = v57;
          MEMORY[0x1895F8858](v88);
          v270 = (uint64_t)&v345;
          LOBYTE(v271) = 2;
          swift_bridgeObjectRetain();
          uint64_t v90 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v269,  v48,  v57);
          if (v91)
          {
            unint64_t v48 = (uint64_t)v90;
            v92 = v91;
            swift_bridgeObjectRelease_n();
          }

          else
          {
            v233 = v345;
            v234 = v346;
            swift_bridgeObjectRetain();
            unint64_t v48 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v233, v234, 2u);
            v92 = v235;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }

          uint64_t v57 = v92;
        }

        else
        {
          swift_bridgeObjectRelease();
          unint64_t v48 = 0LL;
          uint64_t v57 = 0xE000000000000000LL;
        }
      }
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v48 = 0LL;
    uint64_t v57 = 0LL;
    *((_BYTE *)a1 + 8) = 0;
    *((_BYTE *)a1 + 11) = 0;
  }

  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = v48;
  *((void *)a1 + 8) = v57;
LABEL_45:
  uint64_t v64 = *(void *)a1;
  unint64_t v65 = *((_BYTE *)a1 + 8);
  unint64_t v66 = *((_BYTE *)a1 + 9);
  uint64_t v67 = *((_BYTE *)a1 + 10);
  char v68 = *((_BYTE *)a1 + 11);
  unint64_t v69 = *((_BYTE *)a1 + 12);
  unint64_t v70 = *((_BYTE *)a1 + 13);
  int v71 = *((_BYTE *)a1 + 14);
  char v72 = *((_BYTE *)a1 + 15);
  char v73 = *((_BYTE *)a1 + 16);
  unint64_t v74 = *((void *)a1 + 9);
  int v76 = *((_BYTE *)a1 + 152);
  uint64_t v77 = *((_BYTE *)a1 + 153);
  v302 = *((_BYTE *)a1 + 96);
  uint64_t v75 = v302;
  v345 = v64;
  LOBYTE(v346) = v65;
  BYTE1(v346) = v66;
  BYTE2(v346) = v67;
  BYTE3(v346) = v68;
  BYTE4(v346) = v69;
  BYTE5(v346) = v70;
  BYTE6(v346) = v71;
  HIBYTE(v346) = v72;
  v347 = v73;
  v348 = *(__int128 *)((char *)a1 + 24);
  v349 = *(__int128 *)((char *)a1 + 40);
  v350 = v48;
  v351 = v57;
  v352 = v74;
  uint64_t v78 = a1[5];
  v353 = v78;
  v354 = v302;
  v355 = *(__int128 *)((char *)a1 + 104);
  v356 = *(__int128 *)((char *)a1 + 120);
  v357 = *(__int128 *)((char *)a1 + 136);
  v358 = v76;
  v359 = v77;
  if ((void)v78)
  {
    uint64_t v79 = v78;
  }

  else
  {
    if (!v64) {
      unint64_t v69 = 0;
    }
    if ((v69 & 1) != 0 && (*(_BYTE *)(v64 + 120) & 1) == 0)
    {
      uint64_t v93 = String.subscript.getter();
      unint64_t v74 = MEMORY[0x186E1B610](v93);
      uint64_t v79 = v94;
      uint64_t v75 = swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v75 = URLComponents._URLComponents.port.getter();
      if ((v80 & 1) != 0)
      {
        URLComponents._URLComponents.percentEncodedUser.getter();
        uint64_t v82 = v81;
        uint64_t v75 = swift_bridgeObjectRelease();
        if (!v82) {
          goto LABEL_98;
        }
      }

      unint64_t v74 = 0LL;
      uint64_t v79 = 0xE000000000000000LL;
    }
  }

  uint64_t v95 = v74 & 0xFFFFFFFFFFFFLL;
  if ((v79 & 0x2000000000000000LL) != 0) {
    unint64_t v96 = HIBYTE(v79) & 0xF;
  }
  else {
    unint64_t v96 = v74 & 0xFFFFFFFFFFFFLL;
  }
  if (!v96)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v104 = 0xE000000000000000LL;
    goto LABEL_97;
  }

  if ((v76 & 1) != 0)
  {
    v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
    v323 = v79;
    MEMORY[0x1895F8858](v75);
    v270 = (uint64_t)&v322;
    v271 = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v97 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v269,  v74,  v79);
    if (v98 == 1)
    {
      uint64_t v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v322;
      uint64_t v100 = v323;
      swift_bridgeObjectRetain();
      uint64_t v101 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (Swift::Int)v99,  v100,  MEMORY[0x18961AFF8]);
LABEL_78:
      uint64_t v103 = v101;
      unint64_t v104 = v102;
      goto LABEL_79;
    }

    uint64_t v103 = (uint64_t)v97;
    unint64_t v104 = v98;
    goto LABEL_93;
  }

  if ((v79 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    if ((v79 & 0x2000000000000000LL) != 0)
    {
      v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
      v323 = v79 & 0xFFFFFFFFFFFFFFLL;
      *(void *)&v319[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v319[0] + 1) = 0LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v322,  HIBYTE(v79) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v319,  0,  (unsigned __int8 *)&v322,  HIBYTE(v79) & 0xF,  &v304);
      uint64_t v103 = v304;
      unint64_t v104 = v305;
      swift_release();
    }

    else
    {
      if ((v74 & 0x1000000000000000LL) != 0)
      {
        char v105 = (unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        char v105 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        uint64_t v95 = v261;
      }

      v322 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v323 = 0LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      uint64_t v103 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v105,  v95,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v322,  0,  v105,  v95);
      unint64_t v104 = v106;
    }

    swift_bridgeObjectRelease();
    if (v104 != 1)
    {
LABEL_93:
      swift_bridgeObjectRelease_n();
      if (!v104) {
        goto LABEL_98;
      }
      goto LABEL_94;
    }
  }

  v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
  v323 = v79;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  uint64_t v107 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v108 = objc_msgSend(v107, sel__fastCharacterContents);
  v109 = v107;
  if (!v108)
  {
    v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
    v323 = v79;
    swift_bridgeObjectRetain();
    v190 = String.init<A>(_:)();
    v191 = v189;
    v3 = 0LL;
    if ((v189 & 0x1000000000000000LL) != 0)
    {
      v190 = static String._copying(_:)();
      v267 = v266;
      swift_bridgeObjectRelease();
      v191 = v267;
      if ((v267 & 0x2000000000000000LL) == 0) {
        goto LABEL_139;
      }
    }

    else if ((v189 & 0x2000000000000000LL) == 0)
    {
LABEL_139:
      if ((v190 & 0x1000000000000000LL) != 0)
      {
        v192 = (unsigned __int8 *)((v191 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v193 = v190 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        v192 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }

      v322 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v323 = 0LL;
      uint64_t v101 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v192,  v193,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v322,  0,  v192,  v193);
      goto LABEL_78;
    }

    v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v190;
    v323 = v191 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&v319[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v319[0] + 1) = 0LL;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v322,  HIBYTE(v191) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v319,  0,  (unsigned __int8 *)&v322,  HIBYTE(v191) & 0xF,  &v304);
    uint64_t v103 = v304;
    unint64_t v104 = v305;
    swift_release();
LABEL_79:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!v104) {
      goto LABEL_98;
    }
    goto LABEL_94;
  }

  v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
  v323 = v79;
  StringProtocol._ephemeralString.getter();
  uint64_t v110 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v111 = objc_msgSend(v110, sel_length);
  uint64_t v112 = swift_unknownObjectRelease();
  v113 = MEMORY[0x1895F8858](v112);
  LOBYTE(v270) = 0;
  MEMORY[0x1895F8858](v113);
  v268[2] = v108;
  v268[3] = v111;
  uint64_t v103 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v108,  (uint64_t)v111,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  v114,  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)v268);
  unint64_t v104 = v115;
  swift_bridgeObjectRelease_n();
  v3 = 0LL;
  if (v104)
  {
LABEL_94:
    swift_bridgeObjectRelease();
    if ((v104 & 0x2000000000000000LL) == 0)
    {
      if ((v103 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_103;
      }
      goto LABEL_98;
    }

    *(void *)v5 = v4;
    *(_BYTE *)(v5 + 8) = v6 == 0;
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

  __break(1u);
}
          }

          goto LABEL_37;
        }

        unint64_t v14 = v5 + 3;
        if ((unint64_t)(v5 + 3) < v4)
        {
          uint64_t v15 = v5 + 2;
          do
          {
            uint64_t v17 = *v14;
            if (*v15 == 42)
            {
              if (v17 == 42) {
                goto LABEL_34;
              }
              if (v17 == 47)
              {
                v5 = v15 + 2;
                goto LABEL_13;
              }
            }

            else if (v17 == 42)
            {
LABEL_34:
              uint64_t v16 = 1LL;
              goto LABEL_31;
            }

            uint64_t v16 = 2LL;
LABEL_31:
            v15 += v16;
            unint64_t v14 = v15 + 1;
          }

          while ((unint64_t)(v15 + 1) < v4);
        }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        BOOL v25 = 3LL;
      }

      *(void *)uint64_t v24 = v25;
      *(void *)(v24 + 40) = 0LL;
      *(_OWORD *)(v24 + 24) = 0u;
      *(_OWORD *)(v24 + 8) = 0u;
      *(_BYTE *)(v24 + 48) = 12;
      swift_willThrow();
      goto LABEL_40;
    }
  }

  __break(1u);
LABEL_79:
  v52 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v0[3], v0[1], v0[2]);
  unint64_t v54 = v53;
  uint64_t v56 = v55;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v57 = 0LL;
  *(void *)(v57 + 8) = 0LL;
  *(void *)(v57 + 16) = v1;
  *(void *)(v57 + 24) = v52;
  *(void *)(v57 + 32) = v54;
  *(void *)(v57 + 40) = v56;
  *(_BYTE *)(v57 + 48) = 1;
  swift_willThrow();
LABEL_80:
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v0[1], v0[2], v0[3]);
  uint64_t v46 = (void *)v0[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v46[2] + 1LL,  1,  v46);
  }
  int64_t v59 = v46[2];
  uint64_t v58 = v46[3];
  uint64_t v60 = v59 + 1;
  if (v59 >= v58 >> 1) {
    uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v58 > 1),  v59 + 1,  1,  v46);
  }
  v46[2] = v60;
  v46[v59 + 4] = 7LL;
  unint64_t v61 = &v46[v62 + 4];
  *unint64_t v61 = v60;
  v61[1] = v2;
LABEL_85:
  --v0[5];
  v0[6] = v46;
}

        specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v11 + 16));
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
      }

      uint64_t v41 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v42 = *(void *)(v5 + 24);
      if ((v41 & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v42 + 16));
      }

      else
      {
        if (*(void *)(v42 + 24) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          v43 = (void *)swift_allocObject();
          uint64_t v44 = _swift_stdlib_malloc_size(v43);
          v43[2] = 0LL;
          v43[3] = 2 * v44 - 64;
        }

        else
        {
          v43 = (void *)MEMORY[0x18961AFE8];
        }

        *(void *)(*(void *)(v0 + 16) + 24LL) = v43;
        swift_bridgeObjectRelease();
      }

      return swift_task_switch();
    }

    uint64_t v31 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 24) = v6;
    if ((v31 & 1) == 0)
    {
      unint64_t v48 = *(void *)(v0 + 16);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v6 + 2) + 1LL,  1,  v6);
      *(void *)(v48 + 24) = v6;
    }

    uint64_t v32 = *((void *)v6 + 2);
    uint64_t v33 = *((void *)v6 + 3);
    uint64_t v34 = v32 + 1;
    if (v32 >= v33 >> 1)
    {
      uint64_t v49 = v6;
      uint64_t v50 = *((void *)v6 + 2);
      uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v32 + 1,  1,  v49);
      uint64_t v32 = v50;
      uint64_t v6 = v51;
    }

    BOOL v35 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v34;
    v6[v32 + 32] = -30;
    *(void *)(v35 + 24) = v6;
    uint64_t v36 = *((void *)v6 + 3);
    v37 = v32 + 2;
    if ((uint64_t)(v32 + 2) > (uint64_t)(v36 >> 1))
    {
      v52 = v6;
      uint64_t v53 = v32;
      unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v36 > 1),  v32 + 2,  1,  v52);
      uint64_t v32 = v53;
      uint64_t v6 = v54;
    }

    uint64_t v38 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v37;
    v6[v34 + 32] = 0x80;
    *(void *)(v38 + 24) = v6;
    uint64_t v39 = *((void *)v6 + 3);
    uint64_t v40 = v32 + 3;
    if ((uint64_t)(v32 + 3) > (uint64_t)(v39 >> 1)) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v39 > 1),  v32 + 3,  1,  v6);
    }
    uint64_t v29 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v40;
    char v30 = &v6[v37];
LABEL_31:
    v30[32] = v1;
    *(void *)(v29 + 24) = v6;
    return swift_task_switch();
  }

  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v46;
  *uint64_t v46 = v0;
  v46[1] = specialized AsyncLineSequence.AsyncIterator.next();
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v8 + 16));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }

    uint64_t v33 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v34 = *(void *)(v2 + 24);
    if ((v33 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v34 + 16));
    }

    else
    {
      if (*(void *)(v34 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        BOOL v35 = (void *)swift_allocObject();
        uint64_t v36 = _swift_stdlib_malloc_size(v35);
        v35[2] = 0LL;
        v35[3] = 2 * v36 - 64;
      }

      else
      {
        BOOL v35 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v35;
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v23 & 1) == 0)
    {
      uint64_t v38 = *(void *)(v0 + 16);
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3);
      *(void *)(v38 + 24) = v3;
    }

    BOOL v25 = *((void *)v3 + 2);
    uint64_t v24 = *((void *)v3 + 3);
    unint64_t v26 = v25 + 1;
    if (v25 >= v24 >> 1) {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v25 + 1,  1,  v3);
    }
    uint64_t v27 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v26;
    v3[v25 + 32] = -30;
    *(void *)(v27 + 24) = v3;
    uint64_t v28 = *((void *)v3 + 3);
    uint64_t v29 = v25 + 2;
    if ((uint64_t)(v25 + 2) > (uint64_t)(v28 >> 1)) {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  v25 + 2,  1,  v3);
    }
    char v30 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v29;
    v3[v26 + 32] = 0x80;
    *(void *)(v30 + 24) = v3;
    uint64_t v31 = *((void *)v3 + 3);
    if ((uint64_t)(v25 + 3) > (uint64_t)(v31 >> 1)) {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v31 > 1),  v25 + 3,  1,  v3);
    }
    uint64_t v32 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v25 + 3;
    v3[v29 + 32] = v1;
    *(void *)(v32 + 24) = v3;
  }

  return swift_task_switch();
}

        specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v11 + 16));
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
      }

      uint64_t v41 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v42 = *(void *)(v5 + 24);
      if ((v41 & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v42 + 16));
      }

      else
      {
        if (*(void *)(v42 + 24) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          v43 = (void *)swift_allocObject();
          uint64_t v44 = _swift_stdlib_malloc_size(v43);
          v43[2] = 0LL;
          v43[3] = 2 * v44 - 64;
        }

        else
        {
          v43 = (void *)MEMORY[0x18961AFE8];
        }

        *(void *)(*(void *)(v0 + 16) + 24LL) = v43;
        swift_bridgeObjectRelease();
      }

      return swift_task_switch();
    }

    uint64_t v31 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 24) = v6;
    if ((v31 & 1) == 0)
    {
      unint64_t v48 = *(void *)(v0 + 16);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v6 + 2) + 1LL,  1,  v6);
      *(void *)(v48 + 24) = v6;
    }

    uint64_t v32 = *((void *)v6 + 2);
    uint64_t v33 = *((void *)v6 + 3);
    uint64_t v34 = v32 + 1;
    if (v32 >= v33 >> 1)
    {
      uint64_t v49 = v6;
      uint64_t v50 = *((void *)v6 + 2);
      uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v32 + 1,  1,  v49);
      uint64_t v32 = v50;
      uint64_t v6 = v51;
    }

    BOOL v35 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v34;
    v6[v32 + 32] = -30;
    *(void *)(v35 + 24) = v6;
    uint64_t v36 = *((void *)v6 + 3);
    v37 = v32 + 2;
    if ((uint64_t)(v32 + 2) > (uint64_t)(v36 >> 1))
    {
      v52 = v6;
      uint64_t v53 = v32;
      unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v36 > 1),  v32 + 2,  1,  v52);
      uint64_t v32 = v53;
      uint64_t v6 = v54;
    }

    uint64_t v38 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v37;
    v6[v34 + 32] = 0x80;
    *(void *)(v38 + 24) = v6;
    uint64_t v39 = *((void *)v6 + 3);
    uint64_t v40 = v32 + 3;
    if ((uint64_t)(v32 + 3) > (uint64_t)(v39 >> 1)) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v39 > 1),  v32 + 3,  1,  v6);
    }
    uint64_t v29 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v40;
    char v30 = &v6[v37];
LABEL_31:
    v30[32] = v1;
    *(void *)(v29 + 24) = v6;
    return swift_task_switch();
  }

  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v46;
  *uint64_t v46 = v0;
  v46[1] = specialized AsyncLineSequence.AsyncIterator.next();
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v8 + 16));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }

    uint64_t v33 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v34 = *(void *)(v2 + 24);
    if ((v33 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v34 + 16));
    }

    else
    {
      if (*(void *)(v34 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        BOOL v35 = (void *)swift_allocObject();
        uint64_t v36 = _swift_stdlib_malloc_size(v35);
        v35[2] = 0LL;
        v35[3] = 2 * v36 - 64;
      }

      else
      {
        BOOL v35 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v35;
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v23 & 1) == 0)
    {
      uint64_t v38 = *(void *)(v0 + 16);
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3);
      *(void *)(v38 + 24) = v3;
    }

    BOOL v25 = *((void *)v3 + 2);
    uint64_t v24 = *((void *)v3 + 3);
    unint64_t v26 = v25 + 1;
    if (v25 >= v24 >> 1) {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v25 + 1,  1,  v3);
    }
    uint64_t v27 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v26;
    v3[v25 + 32] = -30;
    *(void *)(v27 + 24) = v3;
    uint64_t v28 = *((void *)v3 + 3);
    uint64_t v29 = v25 + 2;
    if ((uint64_t)(v25 + 2) > (uint64_t)(v28 >> 1)) {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  v25 + 2,  1,  v3);
    }
    char v30 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v29;
    v3[v26 + 32] = 0x80;
    *(void *)(v30 + 24) = v3;
    uint64_t v31 = *((void *)v3 + 3);
    if ((uint64_t)(v25 + 3) > (uint64_t)(v31 >> 1)) {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v31 > 1),  v25 + 3,  1,  v3);
    }
    uint64_t v32 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v25 + 3;
    v3[v29 + 32] = v1;
    *(void *)(v32 + 24) = v3;
  }

  return swift_task_switch();
}

        specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v11 + 16));
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
      }

      uint64_t v41 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v42 = *(void *)(v5 + 24);
      if ((v41 & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v42 + 16));
      }

      else
      {
        if (*(void *)(v42 + 24) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          v43 = (void *)swift_allocObject();
          uint64_t v44 = _swift_stdlib_malloc_size(v43);
          v43[2] = 0LL;
          v43[3] = 2 * v44 - 64;
        }

        else
        {
          v43 = (void *)MEMORY[0x18961AFE8];
        }

        *(void *)(*(void *)(v0 + 16) + 24LL) = v43;
        swift_bridgeObjectRelease();
      }

      return swift_task_switch();
    }

    uint64_t v31 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 24) = v6;
    if ((v31 & 1) == 0)
    {
      unint64_t v48 = *(void *)(v0 + 16);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v6 + 2) + 1LL,  1,  v6);
      *(void *)(v48 + 24) = v6;
    }

    uint64_t v32 = *((void *)v6 + 2);
    uint64_t v33 = *((void *)v6 + 3);
    uint64_t v34 = v32 + 1;
    if (v32 >= v33 >> 1)
    {
      uint64_t v49 = v6;
      uint64_t v50 = *((void *)v6 + 2);
      uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v32 + 1,  1,  v49);
      uint64_t v32 = v50;
      uint64_t v6 = v51;
    }

    BOOL v35 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v34;
    v6[v32 + 32] = -30;
    *(void *)(v35 + 24) = v6;
    uint64_t v36 = *((void *)v6 + 3);
    v37 = v32 + 2;
    if ((uint64_t)(v32 + 2) > (uint64_t)(v36 >> 1))
    {
      v52 = v6;
      uint64_t v53 = v32;
      unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v36 > 1),  v32 + 2,  1,  v52);
      uint64_t v32 = v53;
      uint64_t v6 = v54;
    }

    uint64_t v38 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v37;
    v6[v34 + 32] = 0x80;
    *(void *)(v38 + 24) = v6;
    uint64_t v39 = *((void *)v6 + 3);
    uint64_t v40 = v32 + 3;
    if ((uint64_t)(v32 + 3) > (uint64_t)(v39 >> 1)) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v39 > 1),  v32 + 3,  1,  v6);
    }
    uint64_t v29 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v40;
    char v30 = &v6[v37];
LABEL_31:
    v30[32] = v1;
    *(void *)(v29 + 24) = v6;
    return swift_task_switch();
  }

  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v46;
  *uint64_t v46 = v0;
  v46[1] = specialized AsyncLineSequence.AsyncIterator.next();
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v8 + 16));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }

    uint64_t v33 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v34 = *(void *)(v2 + 24);
    if ((v33 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v34 + 16));
    }

    else
    {
      if (*(void *)(v34 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        BOOL v35 = (void *)swift_allocObject();
        uint64_t v36 = _swift_stdlib_malloc_size(v35);
        v35[2] = 0LL;
        v35[3] = 2 * v36 - 64;
      }

      else
      {
        BOOL v35 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v35;
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v23 & 1) == 0)
    {
      uint64_t v38 = *(void *)(v0 + 16);
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3);
      *(void *)(v38 + 24) = v3;
    }

    BOOL v25 = *((void *)v3 + 2);
    uint64_t v24 = *((void *)v3 + 3);
    unint64_t v26 = v25 + 1;
    if (v25 >= v24 >> 1) {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v25 + 1,  1,  v3);
    }
    uint64_t v27 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v26;
    v3[v25 + 32] = -30;
    *(void *)(v27 + 24) = v3;
    uint64_t v28 = *((void *)v3 + 3);
    uint64_t v29 = v25 + 2;
    if ((uint64_t)(v25 + 2) > (uint64_t)(v28 >> 1)) {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  v25 + 2,  1,  v3);
    }
    char v30 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v29;
    v3[v26 + 32] = 0x80;
    *(void *)(v30 + 24) = v3;
    uint64_t v31 = *((void *)v3 + 3);
    if ((uint64_t)(v25 + 3) > (uint64_t)(v31 >> 1)) {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v31 > 1),  v25 + 3,  1,  v3);
    }
    uint64_t v32 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v25 + 3;
    v3[v29 + 32] = v1;
    *(void *)(v32 + 24) = v3;
  }

  return swift_task_switch();
}

      *v3 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *((void *)v15 + 3) >> 1);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
    }

    uint64_t v28 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    if ((v28 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *((void *)v29 + 2));
    }

    else
    {
      if (*((void *)v29 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        char v30 = (void *)swift_allocObject();
        uint64_t v31 = _swift_stdlib_malloc_size(v30);
        v30[2] = 0LL;
        v30[3] = 2 * v31 - 64;
      }

      else
      {
        char v30 = (void *)MEMORY[0x18961AFE8];
      }

      *v3 = (char *)v30;
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v21 = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v17;
    if ((v21 & 1) == 0)
    {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v17 + 2) + 1LL,  1,  v17);
      *v3 = v17;
    }

    uint64_t v23 = *((void *)v17 + 2);
    uint64_t v22 = *((void *)v17 + 3);
    uint64_t v24 = v23 + 1;
    if (v23 >= v22 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v23 + 1,  1,  v17);
    }
    *((void *)v17 + 2) = v24;
    v17[v23 + 32] = -30;
    *v3 = v17;
    BOOL v25 = *((void *)v17 + 3);
    unint64_t v26 = v23 + 2;
    if ((uint64_t)(v23 + 2) > (uint64_t)(v25 >> 1)) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v23 + 2,  1,  v17);
    }
    *((void *)v17 + 2) = v26;
    v17[v24 + 32] = 0x80;
    *v3 = v17;
    uint64_t v27 = *((void *)v17 + 3);
    if ((uint64_t)(v23 + 3) > (uint64_t)(v27 >> 1)) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v23 + 3,  1,  v17);
    }
    *((void *)v17 + 2) = v23 + 3;
    v17[v26 + 32] = v16;
    *v3 = v17;
  }

  return swift_task_switch();
}

  __break(1u);
  return result;
}

    if (v6 >= 1.84467441e19)
    {
      while (1)
      {
        uint64_t v6 = v6 / 10.0;
        ++v7;
        if (v6 < 1.84467441e19) {
          break;
        }
        if (v7 == 127) {
          goto LABEL_18;
        }
      }
    }

    if (v6 <= 1.84467441e19)
    {
      if ((~*(void *)&v6 & 0x7FF0000000000000LL) == 0)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }

      if (v6 <= -1.0)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }

      if (v6 >= 1.84467441e19)
      {
LABEL_29:
        __break(1u);
        JUMPOUT(0x18307E5E0LL);
      }

      if (!(unint64_t)v6)
      {
        uint64_t v8 = a1 < 0.0;
        _So9NSDecimala__length_setter(0LL, v12);
        _So9NSDecimala__isNegative_setter(v8, v12);
        _So9NSDecimala__isCompact_setter_0(0LL, v12);
        _So9NSDecimala__exponent_setter((char)v7, v12);
        NSDecimal.compact()();
        v1 = v12[0];
        v2 = WORD2(v12[0]);
        v3 = HIWORD(v12[0]);
        return v1 | (unint64_t)(v2 << 32) | (v3 << 48);
      }
    }

    JUMPOUT(0x18307E4D4LL);
  }

  if ((*(void *)&a1 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }

  *(_OWORD *)((char *)v12 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0LL, v12);
  _So9NSDecimala__length_setter(0LL, v12);
  _So9NSDecimala__isNegative_setter(1LL, v12);
  _So9NSDecimala__isCompact_setter_0(0LL, v12);
  _So9NSDecimala__reserved_setter(v12);
  v1 = v12[0];
  v2 = WORD2(v12[0]);
  v3 = HIWORD(v12[0]);
  v4 = v12[2];
  v5 = v12[1];
LABEL_4:
  v12[1] = v5;
  LODWORD(v12[2]) = v4;
  return v1 | (unint64_t)(v2 << 32) | (v3 << 48);
}

    __break(1u);
    goto LABEL_14;
  }

  swift_unknownObjectRetain();
  uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v12, v13, v3, v8);
  result = (uint64_t *)swift_unknownObjectRelease_n();
  uint64_t v16 = __OFSUB__(a2, v14);
  uint64_t v17 = a2 - v14;
  if (v16)
  {
    __break(1u);
    goto LABEL_92;
  }

  __break(1u);
  return result;
}

  uint64_t v42 = 0;
  return v42 & 1;
}

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

  swift_willThrow();
  swift_bridgeObjectRelease();
LABEL_33:
  v35[2] = 0LL;
  swift_release();
  return v34;
}

      v4[2] = v9;
    }
  }

    uint64_t v33 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v16, a2);
    return v33;
  }

  __break(1u);
  return result;
}

  swift_retain();
LABEL_14:
  v7[6] = v27;
  uint64_t v39 = v48;
  v47(v7);
  if (v39)
  {
    v7[5] = v24;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v49 < *(void *)(v7[2] + 16LL))
    {
      uint64_t v40 = v43;
      if (!specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew())) {
        specialized ContiguousArray.remove(at:)( *(void *)(*v40 + 16LL) - 1LL,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      }
      swift_release();
    }

    return swift_willThrow();
  }

  else
  {
    v7[5] = v24;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v49 >= *(void *)(v7[2] + 16LL))
    {
      return 0LL;
    }

    else
    {
      uint64_t v41 = v43;
      result = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      if (!result) {
        return specialized ContiguousArray.remove(at:)( *(void *)(*v41 + 16LL) - 1LL,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      }
    }
  }

  return result;
}

      __break(1u);
    }

    __break(1u);
    goto LABEL_15;
  }

      __break(1u);
    }

    __break(1u);
    goto LABEL_15;
  }

      __break(1u);
    }

    __break(1u);
    goto LABEL_15;
  }

      __break(1u);
    }

    __break(1u);
    goto LABEL_15;
  }

      __break(1u);
    }

    __break(1u);
    goto LABEL_15;
  }

    __break(1u);
    goto LABEL_14;
  }

      __break(1u);
    }

    __break(1u);
    goto LABEL_15;
  }

      v12 += 16LL;
      if (!--v10) {
        goto LABEL_24;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v25;
    v3 = v26;
    uint64_t v11 = v24;
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }

  return v6;
}

    BOOL v35 = a9;
    uint64_t v36 = v99;
    v37 = 4LL;
    switch((int)v11)
    {
      case 1:
      case 13:
        v37 = 513LL;
        goto LABEL_37;
      case 2:
        goto LABEL_37;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_24;
      case 17:
        v37 = 516LL;
        goto LABEL_37;
      case 28:
      case 69:
        v37 = 640LL;
        goto LABEL_37;
      case 30:
        v37 = 642LL;
        goto LABEL_37;
      case 63:
        v37 = 514LL;
        goto LABEL_37;
      default:
        if ((_DWORD)v11 == 102)
        {
          swift_retain_n();
          uint64_t v39 = v99;
          swift_retain_n();
          uint64_t v40 = v39;
          uint64_t v11 = 0LL;
          uint64_t v98 = 512LL;
        }

        else
        {
LABEL_24:
          v37 = 512LL;
LABEL_37:
          unint64_t v97 = v12;
          uint64_t v98 = v37;
          swift_retain_n();
          uint64_t v49 = v99;
          swift_retain_n();
          uint64_t v50 = v49;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
          {
LABEL_74:
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease();
            v102._countAndFlagsBits = 0xD000000000000014LL;
            v102._object = (void *)0x80000001839C9190LL;
            LODWORD(v100) = (_DWORD)v11;
            v92._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v92);
            swift_bridgeObjectRelease();
            LODWORD(v95) = 0;
            int v94 = 73LL;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x1832D0DA0LL);
          }

          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v51 = (int)POSIXErrorCode.rawValue.getter();
          v52 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v53 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v11 = objc_msgSend(v52, sel_initWithDomain_code_userInfo_, v53, v51, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v54 = objc_msgSend(v11, sel_domain);
          uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          uint64_t v57 = v56;

          if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v57 == v58)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            int64_t v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v59 & 1) == 0)
            {
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }
          }
        }

        uint64_t v60 = v99;
        swift_retain();
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          uint64_t v103 = a9;
          unint64_t v61 = v60;
          swift_retain();
          unint64_t v96 = a9;
          swift_retain();
          unint64_t v62 = URL.path(percentEncoded:)(1);
          countAndFlagsBits = v62._countAndFlagsBits;
          uint64_t v102 = v62;
          swift_bridgeObjectRetain();
          unint64_t v97 = v60;
          if (String.count.getter() <= 1)
          {
            object = (unint64_t)v62._object;
          }

          else
          {
            object = (unint64_t)v62._object;
            if ((specialized BidirectionalCollection.last.getter(v62._countAndFlagsBits, (unint64_t)v62._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
              countAndFlagsBits = v102._countAndFlagsBits;
              object = (unint64_t)v102._object;
            }
          }

          uint64_t v100 = Set.init(minimumCapacity:)();
          uint64_t v77 = specialized Set._Variant.insert(_:)(&v104, 0x2FuLL);
          uint64_t v78 = v100;
          uint64_t v79 = HIBYTE(object) & 0xF;
          if ((object & 0x2000000000000000LL) == 0) {
            uint64_t v79 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (v79)
          {
            uint64_t v100 = countAndFlagsBits;
            uint64_t v101 = object;
            MEMORY[0x1895F8858](v77);
            int v94 = v80;
            uint64_t v95 = v78;
            swift_bridgeObjectRetain();
            specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v93,  countAndFlagsBits,  object);
            if (v81 == 1)
            {
              uint64_t v82 = v100;
              uint64_t v83 = v101;
              swift_bridgeObjectRetain();
              specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v82, v83, v78);
              swift_bridgeObjectRelease();
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v36 = v99;
            uint64_t v60 = v97;
          }

          else
          {
            swift_bridgeObjectRelease();
            uint64_t v36 = v99;
            uint64_t v60 = v97;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v35 = v96;
          outlined consume of PathOrURL(v36, a8, v96, 1);
          outlined consume of PathOrURL(v36, a8, v35, 1);
        }

        else
        {
          unint64_t v65 = objc_msgSend(v60, sel__parameterString);
          if (v65)
          {
            unint64_t v66 = v65;
            uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
            unint64_t v69 = v68;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (unint64_t v70 = objc_msgSend(v60, sel_path)) != 0)
            {
              int v71 = v70;
              unint64_t v97 = v60;
              char v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
              unint64_t v74 = v73;

              v102._countAndFlagsBits = (uint64_t)v72;
              v102._object = v74;
              swift_bridgeObjectRetain();
              v75._countAndFlagsBits = 59LL;
              v75._object = (void *)0xE100000000000000LL;
              String.append(_:)(v75);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v76._countAndFlagsBits = (uint64_t)v67;
              v76._object = v69;
              String.append(_:)(v76);
              swift_bridgeObjectRelease();
              uint64_t v60 = v97;
            }

            else
            {
              v102._countAndFlagsBits = 59LL;
              v102._object = (void *)0xE100000000000000LL;
              v84._countAndFlagsBits = (uint64_t)v67;
              v84._object = v69;
              String.append(_:)(v84);
            }

            swift_bridgeObjectRelease();
            outlined consume of PathOrURL(v99, a8, a9, 1);
          }

          else
          {
            char v85 = v60;
            unint64_t v86 = objc_msgSend(v60, sel_path);
            if (v86)
            {
              uint64_t v87 = v86;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
            }

            outlined consume of PathOrURL(v99, a8, a9, 1);
            uint64_t v60 = v85;
          }
        }

        uint64_t v88 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v89 = v60;
        outlined consume of PathOrURL(v36, a8, v35, 1);
        if (v11)
        {
          v102._countAndFlagsBits = (uint64_t)v11;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          uint64_t v11 = v11;
          if (_getErrorEmbeddedNSError<A>(_:)())
          {
          }

          else
          {
            swift_allocError();
            *uint64_t v91 = v11;
          }

          uint64_t v90 = (void *)_swift_stdlib_bridgeErrorToNSError();
        }

        else
        {
          uint64_t v90 = 0LL;
        }

         objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v98,  v88,  v89,  v90,  0,  0,  0);

        swift_unknownObjectRelease();
        outlined consume of PathOrURL(v36, a8, v35, 1);
        goto LABEL_71;
    }
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  BOOL v25 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  unint64_t v26 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v27 = objc_msgSend(v25, sel_initWithDomain_code_userInfo_, v26, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v28 = objc_msgSend(v27, sel_domain);
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;

  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v31 == v32)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    a8 = v32;
    uint64_t v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
      __break(1u);
      goto LABEL_13;
    }
  }

    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  v13 = v7 & 0xFC00FC00;
  if ((v7 & 0xFC00FC00) == 0xDC00D800) {
    unint64_t v14 = 32;
  }
  else {
    unint64_t v14 = 16;
  }
  uint64_t v38 = v10 - v14;
  uint64_t v15 = v13 == -603924480;
  if (v13 == -603924480) {
    uint64_t v16 = 32;
  }
  else {
    uint64_t v16 = 16;
  }
  v37 = (unint64_t)v7 >> v16;
  if (v15)
  {
    uint64_t v17 = 0;
    goto LABEL_25;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0LL;
}

  uint64_t v15 = v9 & 0xFC00FC00;
  if ((v9 & 0xFC00FC00) == 0xDC00D800) {
    uint64_t v16 = 32;
  }
  else {
    uint64_t v16 = 16;
  }
  uint64_t v40 = v12 - v16;
  uint64_t v17 = v15 == -603924480;
  if (v15 == -603924480) {
    uint64_t v18 = 32;
  }
  else {
    uint64_t v18 = 16;
  }
  uint64_t v39 = (unint64_t)v9 >> v18;
  if (v17)
  {
    v19 = 0;
    goto LABEL_25;
  }

  swift_bridgeObjectRelease();
  return 0LL;
}

        __break(1u);
        goto LABEL_14;
      }
    }

    __break(1u);
    goto LABEL_13;
  }

  uint64_t v47 = 1;
  uint64_t v46 = v10;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v8,  v48);
  if (v5) {
    goto LABEL_51;
  }
  v5 = 0LL;
  unint64_t v10 = v48[0];
  if ((v11 & 1) != 0)
  {
LABEL_5:
    if ((v41 & 1) != 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t v16 = v183;
  if (!v184) {
    uint64_t v16 = 1;
  }
  if ((v16 & 1) != 0)
  {
    uint64_t v17 = v187;
    goto LABEL_49;
  }

  uint64_t v18 = fmod(v9, 1.0);
  if (v18 >= 0.0) {
    v19 = v9 - v18;
  }
  else {
    v19 = v9 - v18 + -1.0;
  }
  if (v18 >= 0.0) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = v18 + 1.0;
  }
  *(void *)&v194[0] = 112LL;
  *(double *)v193 = v9;
  __dst[0] = *(_OWORD *)(v14 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v194, (double *)v193, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0) {
    goto LABEL_255;
  }
  uint64_t v22 = *(void *)&__dst[7];
  uint64_t v23 = *(void *)&__dst[8];
  uint64_t v24 = *(void *)&__dst[9];
  result = outlined release of DateComponents((uint64_t)__dst);
  BOOL v25 = 3600 * v22;
  if ((unsigned __int128)(v22 * (__int128)3600LL) >> 64 != (3600 * v22) >> 63)
  {
    __break(1u);
    goto LABEL_221;
  }

  unint64_t v26 = 60 * v23;
  if ((unsigned __int128)(v23 * (__int128)60LL) >> 64 != (60 * v23) >> 63)
  {
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }

  uint64_t v27 = __OFADD__(v25, v26);
  uint64_t v28 = v25 + v26;
  if (v27)
  {
LABEL_222:
    __break(1u);
    goto LABEL_223;
  }

  uint64_t v29 = v28 + v24;
  if (__OFADD__(v28, v24))
  {
LABEL_223:
    __break(1u);
LABEL_224:
    __break(1u);
LABEL_225:
    __break(1u);
    goto LABEL_226;
  }

  char v30 = (double)v184 * 604800.0 + v19;
  v190 = 112LL;
  v188 = v30;
  v193[0] = *(_OWORD *)(v14 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v190, &v188, (uint64_t *)v193, v194);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(v193, v194, 0x11AuLL);
  if ((BYTE8(v193[7]) & 1) != 0 || (BYTE8(v193[8]) & 1) != 0 || (BYTE8(v193[9]) & 1) != 0) {
    goto LABEL_256;
  }
  uint64_t v31 = *(void *)&v193[7];
  uint64_t v32 = *(void *)&v193[8];
  uint64_t v33 = *(void *)&v193[9];
  result = outlined release of DateComponents((uint64_t)v193);
  uint64_t v34 = 3600 * v31;
  BOOL v35 = 60 * v32;
  if ((unsigned __int128)(v32 * (__int128)60LL) >> 64 != (60 * v32) >> 63)
  {
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }

  uint64_t v27 = __OFADD__(v34, v35);
  uint64_t v36 = v34 + v35;
  if (v27)
  {
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }

  uint64_t v27 = __OFADD__(v36, v33);
  v37 = v36 + v33;
  if (v27)
  {
LABEL_229:
    __break(1u);
    goto LABEL_230;
  }

  uint64_t v38 = (double)v29;
  if ((double)v29 == (double)v37)
  {
    uint64_t v17 = v187;
  }

  else
  {
    ObjectType = swift_getObjectType();
    *(double *)&v190 = v30;
    uint64_t v17 = v187;
    uint64_t v40 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v187 + 40);
    uint64_t v41 = v40(&v190, ObjectType, v187);
    *(double *)&v190 = v9;
    result = v40(&v190, ObjectType, v187);
    if (v41 != result)
    {
      uint64_t v42 = result;
      v43 = result - v41;
      if (__OFSUB__(result, v41))
      {
LABEL_248:
        __break(1u);
        goto LABEL_249;
      }

      uint64_t v44 = v30 + (double)v43;
      *(double *)&v190 = v44;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v43)) == v38)
      {
        char v30 = v44;
      }

      else if (v42 >= v41)
      {
        char v30 = v44;
      }
    }
  }

  if (v184 >= 1)
  {
    v197 = v30;
    v188 = v13;
    v189 = v17;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v197, (uint64_t)&v188, (uint64_t)&v190);
    if ((v192 & 1) == 0) {
      char v30 = v30 - v191;
    }
  }

  uint64_t v9 = v20 + v30 + 0.0;
LABEL_49:
  v45 = v177;
  if (!v182) {
    v45 = 1;
  }
  if ((v45 & 1) != 0) {
    goto LABEL_83;
  }
  uint64_t v46 = fmod(v9, 1.0);
  if (v46 >= 0.0) {
    uint64_t v47 = v9 - v46;
  }
  else {
    uint64_t v47 = v9 - v46 + -1.0;
  }
  if (v46 >= 0.0) {
    unint64_t v48 = v46;
  }
  else {
    unint64_t v48 = v46 + 1.0;
  }
  *(void *)&v194[0] = 112LL;
  *(double *)v193 = v9;
  __dst[0] = *(_OWORD *)(v14 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v194, (double *)v193, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0) {
    goto LABEL_257;
  }
  uint64_t v49 = *(void *)&__dst[7];
  uint64_t v50 = *(void *)&__dst[8];
  uint64_t v51 = *(void *)&__dst[9];
  result = outlined release of DateComponents((uint64_t)__dst);
  v52 = 3600 * v49;
  uint64_t v53 = 60 * v50;
  if ((unsigned __int128)(v50 * (__int128)60LL) >> 64 != (60 * v50) >> 63)
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }

  uint64_t v27 = __OFADD__(v52, v53);
  unint64_t v54 = v52 + v53;
  if (v27)
  {
LABEL_230:
    __break(1u);
    goto LABEL_231;
  }

  uint64_t v27 = __OFADD__(v54, v51);
  uint64_t v55 = v54 + v51;
  if (v27)
  {
LABEL_231:
    __break(1u);
LABEL_232:
    __break(1u);
LABEL_233:
    __break(1u);
    goto LABEL_234;
  }

  uint64_t v56 = (double)v182 * 604800.0 + v47;
  v190 = 112LL;
  v188 = v56;
  v193[0] = *(_OWORD *)(v14 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v190, &v188, (uint64_t *)v193, v194);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(v193, v194, 0x11AuLL);
  if ((BYTE8(v193[7]) & 1) != 0 || (BYTE8(v193[8]) & 1) != 0 || (BYTE8(v193[9]) & 1) != 0) {
    goto LABEL_258;
  }
  uint64_t v57 = *(void *)&v193[7];
  uint64_t v58 = *(void *)&v193[8];
  int64_t v59 = *(void *)&v193[9];
  result = outlined release of DateComponents((uint64_t)v193);
  uint64_t v60 = 3600 * v57;
  unint64_t v61 = 60 * v58;
  if ((unsigned __int128)(v58 * (__int128)60LL) >> 64 != (60 * v58) >> 63)
  {
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }

  uint64_t v27 = __OFADD__(v60, v61);
  unint64_t v62 = v60 + v61;
  if (v27)
  {
LABEL_236:
    __break(1u);
    goto LABEL_237;
  }

  uint64_t v27 = __OFADD__(v62, v59);
  uint64_t v63 = v62 + v59;
  if (v27)
  {
LABEL_237:
    __break(1u);
    goto LABEL_238;
  }

  uint64_t v64 = (double)v55;
  if ((double)v55 != (double)v63)
  {
    unint64_t v65 = swift_getObjectType();
    *(double *)&v190 = v56;
    unint64_t v66 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 40);
    uint64_t v67 = v66(&v190, v65, v17);
    *(double *)&v190 = v9;
    result = v66(&v190, v65, v17);
    if (v67 != result)
    {
      char v68 = result;
      unint64_t v69 = result - v67;
      if (__OFSUB__(result, v67))
      {
LABEL_249:
        __break(1u);
        goto LABEL_250;
      }

      unint64_t v70 = v56 + (double)v69;
      *(double *)&v190 = v70;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v69)) == v64)
      {
        uint64_t v56 = v70;
      }

      else if (v68 >= v67)
      {
        uint64_t v56 = v70;
      }
    }
  }

  if (v182 >= 1)
  {
    v197 = v56;
    v188 = v13;
    v189 = v17;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v197, (uint64_t)&v188, (uint64_t)&v190);
    if ((v192 & 1) == 0) {
      uint64_t v56 = v56 - v191;
    }
  }

  uint64_t v9 = v48 + v56 + 0.0;
LABEL_83:
  int v71 = v176;
  if (!v181) {
    int v71 = 1;
  }
  if ((v71 & 1) != 0)
  {
    char v72 = v185;
    goto LABEL_119;
  }

  char v73 = fmod(v9, 1.0);
  if (v73 >= 0.0) {
    unint64_t v74 = v9 - v73;
  }
  else {
    unint64_t v74 = v9 - v73 + -1.0;
  }
  if (v73 >= 0.0) {
    uint64_t v75 = v73;
  }
  else {
    uint64_t v75 = v73 + 1.0;
  }
  *(void *)&v194[0] = 112LL;
  *(double *)v193 = v9;
  __dst[0] = *(_OWORD *)(v14 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v194, (double *)v193, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0) {
    goto LABEL_259;
  }
  int v76 = *(void *)&__dst[7];
  uint64_t v77 = *(void *)&__dst[8];
  uint64_t v78 = *(void *)&__dst[9];
  result = outlined release of DateComponents((uint64_t)__dst);
  uint64_t v79 = 3600 * v76;
  uint64_t v80 = 60 * v77;
  if ((unsigned __int128)(v77 * (__int128)60LL) >> 64 != (60 * v77) >> 63)
  {
LABEL_235:
    __break(1u);
    goto LABEL_236;
  }

  uint64_t v27 = __OFADD__(v79, v80);
  uint64_t v81 = v79 + v80;
  if (v27)
  {
LABEL_238:
    __break(1u);
    goto LABEL_239;
  }

  uint64_t v27 = __OFADD__(v81, v78);
  uint64_t v82 = v81 + v78;
  if (v27)
  {
LABEL_239:
    __break(1u);
LABEL_240:
    __break(1u);
LABEL_241:
    __break(1u);
    goto LABEL_242;
  }

  uint64_t v83 = (double)v181 * 604800.0 + v74;
  v190 = 112LL;
  v188 = v83;
  v193[0] = *(_OWORD *)(v14 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v190, &v188, (uint64_t *)v193, v194);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(v193, v194, 0x11AuLL);
  if ((BYTE8(v193[7]) & 1) != 0 || (BYTE8(v193[8]) & 1) != 0 || (BYTE8(v193[9]) & 1) != 0) {
    goto LABEL_260;
  }
  uint64_t v84 = *(void *)&v193[7];
  char v85 = *(void *)&v193[8];
  unint64_t v86 = *(void *)&v193[9];
  result = outlined release of DateComponents((uint64_t)v193);
  uint64_t v87 = 3600 * v84;
  uint64_t v88 = 60 * v85;
  if ((unsigned __int128)(v85 * (__int128)60LL) >> 64 != (60 * v85) >> 63)
  {
LABEL_242:
    __break(1u);
    goto LABEL_243;
  }

  uint64_t v27 = __OFADD__(v87, v88);
  uint64_t v89 = v87 + v88;
  if (v27)
  {
LABEL_243:
    __break(1u);
    goto LABEL_244;
  }

  uint64_t v27 = __OFADD__(v89, v86);
  uint64_t v90 = v89 + v86;
  if (v27)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }

  uint64_t v91 = (double)v82;
  v92 = (double)v82 == (double)v90;
  char v72 = v185;
  if (!v92)
  {
    uint64_t v93 = swift_getObjectType();
    *(double *)&v190 = v83;
    int v94 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 40);
    uint64_t v95 = v94(&v190, v93, v17);
    *(double *)&v190 = v9;
    result = v94(&v190, v93, v17);
    if (v95 != result)
    {
      unint64_t v96 = result;
      unint64_t v97 = result - v95;
      if (__OFSUB__(result, v95))
      {
LABEL_250:
        __break(1u);
        goto LABEL_251;
      }

      uint64_t v98 = v83 + (double)v97;
      *(double *)&v190 = v98;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v97)) == v91)
      {
        uint64_t v83 = v98;
      }

      else if (v96 >= v95)
      {
        uint64_t v83 = v98;
      }
    }

    char v72 = v185;
  }

  if (v181 >= 1)
  {
    v197 = v83;
    v188 = v13;
    v189 = v17;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v197, (uint64_t)&v188, (uint64_t)&v190);
    if ((v192 & 1) == 0) {
      uint64_t v83 = v83 - v191;
    }
  }

  uint64_t v9 = v75 + v83 + 0.0;
LABEL_119:
  if ((v183 & ~v175) != 1 || !v178) {
    goto LABEL_145;
  }
  uint64_t v99 = fmod(v9, 1.0);
  if (v99 >= 0.0) {
    uint64_t v100 = v9 - v99;
  }
  else {
    uint64_t v100 = v9 - v99 + -1.0;
  }
  if (v99 >= 0.0) {
    uint64_t v101 = v99;
  }
  else {
    uint64_t v101 = v99 + 1.0;
  }
  *(void *)&v194[0] = 112LL;
  *(double *)v193 = v9;
  __dst[0] = *(_OWORD *)(v14 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v194, (double *)v193, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0) {
    goto LABEL_261;
  }
  uint64_t v102 = *(void *)&__dst[7];
  uint64_t v103 = *(void *)&__dst[8];
  unint64_t v104 = *(void *)&__dst[9];
  result = outlined release of DateComponents((uint64_t)__dst);
  char v105 = 3600 * v102;
  uint64_t v106 = 60 * v103;
  if ((unsigned __int128)(v103 * (__int128)60LL) >> 64 != (60 * v103) >> 63)
  {
LABEL_244:
    __break(1u);
    goto LABEL_245;
  }

  uint64_t v27 = __OFADD__(v105, v106);
  uint64_t v107 = v105 + v106;
  if (v27)
  {
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }

  uint64_t v27 = __OFADD__(v107, v104);
  uint64_t v108 = v107 + v104;
  if (v27)
  {
LABEL_247:
    __break(1u);
    goto LABEL_248;
  }

  v109._time = (double)v178 * 604800.0;
  uint64_t v110 = v109._time + v100;
  uint64_t v111 = (double)v108;
  v194[0] = v110;
  if (_CalendarGregorian.timeInDay(for:)(v109) != (double)v108)
  {
    uint64_t v112 = swift_getObjectType();
    v194[0] = v110;
    v113 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v17 + 40);
    int v114 = v113(v194, v112, v17);
    v194[0] = v9;
    result = v113(v194, v112, v17);
    if (v114 != result)
    {
      v115 = result;
      char v116 = result - v114;
      if (!__OFSUB__(result, v114))
      {
        uint64_t v117 = v110 + (double)v116;
        v194[0] = v117;
        if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v116)) == v111)
        {
          uint64_t v110 = v117;
        }

        else if (v115 >= v114)
        {
          uint64_t v110 = v117;
        }

        goto LABEL_141;
      }

  swift_retain();
LABEL_14:
  v8[6] = v28;
  uint64_t v39 = v51;
  v50(v8);
  if (v39)
  {
    v8[5] = v24;
    swift_retain();
    swift_release();
    v8[6] = v25;
    swift_release();
    swift_release();
    if (v52 >= *(void *)(v8[2] + 16LL)) {
      return swift_willThrow();
    }
    uint64_t v20 = v46;
    specialized ContiguousArray._customRemoveLast()((uint64_t)&v53);
    if (v54 != 255)
    {
      outlined consume of _XMLPlistEncodingFormat.Reference?(v53, *((unint64_t *)&v53 + 1), v54);
      return swift_willThrow();
    }

      __break(1u);
    }

  v16.value = value;
  return v16.value;
}

    lazy protocol witness table accessor for type Double and conformance Double();
    uint64_t v41 = v76;
    static BinaryFloatingPoint._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v41, a2);
    return v77;
  }

  if (v27 == 8)
  {
    if (v28 == 23)
    {
      uint64_t v38 = v75;
      v37 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v20, v76, a2);
      uint64_t v39 = swift_dynamicCast();
      uint64_t v40 = *(float *)&v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v17, v37, a2);
      if (v39)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v17, a2);
        return v40;
      }

      else
      {
        unint64_t v61 = dispatch thunk of FloatingPoint.sign.getter();
        unint64_t v62 = v68;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        uint64_t v63 = v70;
        swift_getAssociatedConformanceWitness();
        uint64_t v64 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v62, v63);
        unint64_t v65 = v71;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v17, a2);
        unint64_t v66 = v73;
        swift_getAssociatedConformanceWitness();
        uint64_t v67 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v66);
        return COERCE_FLOAT((v61 << 31) | (v64 << 23) | v67 & 0x7FFFFF);
      }
    }

    goto LABEL_13;
  }

  if (v27 != 5 || v28 != 10) {
    goto LABEL_13;
  }
  char v30 = v75;
  uint64_t v29 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v26, v76, a2);
  uint64_t v31 = swift_dynamicCast();
  _H8 = LOWORD(v77);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v23, v29, a2);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, a2);
  }

  else
  {
    v43 = dispatch thunk of FloatingPoint.sign.getter();
    uint64_t v44 = v68;
    dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
    v45 = v70;
    swift_getAssociatedConformanceWitness();
    uint64_t v46 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v44, v45);
    uint64_t v47 = v71;
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, a2);
    unint64_t v48 = v73;
    swift_getAssociatedConformanceWitness();
    uint64_t v49 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v48);
    _H8 = (v43 << 15) | ((v46 & 0x1F) << 10) | v49 & 0x3FF;
  }

  __asm { FCVT            D8, H8 }

  return _D8;
}

  if (v4) {
LABEL_20:
  }
    __break(1u);
  return result;
}

  swift_unknownObjectRetain();
  uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v12, v13, v5, v9);
  swift_release();
  swift_unknownObjectRelease_n();
LABEL_49:
  if (__OFSUB__(v8, v14)) {
    goto LABEL_58;
  }
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v34;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v8 - v14;
}

    if ((v26 & 1) != 0)
    {
LABEL_14:
      uint64_t v29 = *(void *)(v27 + 56) + 16 * v20;
      outlined consume of Data._Representation(*(void *)v29, *(void *)(v29 + 8));
      *(void *)uint64_t v29 = v12;
      *(void *)(v29 + 8) = v8;
LABEL_77:
      void *v5 = v27;
      swift_bridgeObjectRelease();
      return (char *)swift_bridgeObjectRelease();
    }

        uint64_t v16 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
        v1 = ((-15LL << v16) - 1) & v1 | (v18 << v16);
        uint64_t v17 = *(void *)(v15 + 24 + 24 * v18);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        uint64_t v15 = v17;
        if (!*(_BYTE *)(v17 + 18)) {
          goto LABEL_173;
        }
      }
    }

    swift_unknownObjectRetain_n();
    swift_retain_n();
    unint64_t v14 = v4 >> 11;
    uint64_t v17 = v11;
LABEL_173:
    uint64_t v121 = *(unsigned __int16 *)(v17 + 16);
    if (!*(_WORD *)(v17 + 16)) {
      goto LABEL_193;
    }
    char v122 = *(void *)(v17 + 24);
    uint64_t v47 = v14 - v122;
    if (__OFSUB__(v14, v122))
    {
LABEL_219:
      __break(1u);
      goto LABEL_220;
    }

    if (__OFADD__(v47, 1LL))
    {
LABEL_220:
      __break(1u);
      goto LABEL_221;
    }

    if ((uint64_t)(v47 + 1) <= 0)
    {
      uint64_t v121 = 0LL;
      goto LABEL_194;
    }

    if ((_DWORD)v121 == 1)
    {
      v14 -= v122;
      goto LABEL_193;
    }

    uint64_t v123 = *(void *)(v17 + 48);
    uint64_t v22 = __OFSUB__(v47, v123);
    char v30 = v47 - v123;
    if (v22)
    {
LABEL_221:
      __break(1u);
      goto LABEL_222;
    }

    if (__OFADD__(v30, 1LL))
    {
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x1833EF580LL);
    }

    if ((_DWORD)v121 == 2)
    {
      unint64_t v14 = v30;
LABEL_193:
      if (!v14) {
        goto LABEL_194;
      }
LABEL_218:
      __break(1u);
      goto LABEL_219;
    }

    uint64_t v124 = (void *)(v17 + 72);
    uint64_t v29 = 2LL;
    while (v121 != v29)
    {
      unint64_t v14 = v30 - *v124;
      if (__OFSUB__(v30, *v124)) {
        goto LABEL_216;
      }
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_217;
      }
      ++v29;
      v124 += 3;
      char v30 = v14;
      if (v121 == v29) {
        goto LABEL_193;
      }
    }

    __break(1u);
    JUMPOUT(0x1834099C8LL);
  }

  v19 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v21 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  uint64_t v22 = v2[20];
  swift_retain();
  _CodingPathNode.path.getter(v22);
  swift_release();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
  return swift_willThrow();
}

  return v7;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  swift_unknownObjectRetain();
  uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v12, v13, v5, v54);
  result = (void *)swift_unknownObjectRelease_n();
  uint64_t v16 = a2 - v14;
  if (__OFSUB__(a2, v14))
  {
    __break(1u);
    goto LABEL_89;
  }

    swift_bridgeObjectRelease();
    uint64_t v27 = specialized Collection.suffix(from:)(v18, (uint64_t)v113, v12);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    if (v29 >> 14 == v27 >> 14)
    {
      swift_bridgeObjectRelease();
      char v30 = v115;
      uint64_t v31 = v111;
LABEL_28:
      uint64_t v49 = objc_msgSend(v30, sel_string);
      uint64_t v50 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v52 = v51;
      swift_release();

      swift_bridgeObjectRelease();
      uint64_t v53 = HIBYTE(v52) & 0xF;
      if ((v52 & 0x2000000000000000LL) == 0) {
        uint64_t v53 = v50;
      }
      unint64_t v54 = v53 << 16;
      v43 = v112;
      if ((v52 & 0x1000000000000000LL) == 0 || (v50 & 0x800000000000000LL) != 0) {
        v37 = v54 | 7;
      }
      else {
        v37 = v54 | 0xB;
      }
    }

    else
    {
      swift_retain();
      uint64_t v44 = v27;
      while (1)
      {
        v45 = v44;
        uint64_t v46 = Substring.subscript.getter();
        unint64_t v48 = v47;
        swift_retain();
        LOBYTE(v46) = specialized Sequence.allSatisfy(_:)(v46, v48, v9);
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0) {
          break;
        }
        uint64_t v44 = Substring.index(after:)();
        if (v29 >> 14 == v44 >> 14)
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v31 = v111;
          char v30 = v115;
          goto LABEL_28;
        }
      }

      swift_bridgeObjectRelease();
      swift_release_n();
      uint64_t v31 = v111;
      v43 = v112;
      v37 = v45;
      char v30 = v115;
    }
  }

  else
  {
    uint64_t v32 = objc_msgSend(v1, sel_string);
    uint64_t v33 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    BOOL v35 = v34;

    v119 = v33;
    uint64_t v120 = v35;
    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v36 = StringProtocol._toUTF16Index(_:)();
    v37 = v36;
    uint64_t v38 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000LL) == 0) {
      uint64_t v38 = v33 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v39 = 4 * v38;
    if (4 * v38 != v36 >> 14)
    {
      uint64_t v40 = 0LL;
      do
      {
        uint64_t v22 = (char *)String.Index.samePosition(in:)();
        uint64_t v41 = v40 + 1;
        if (__OFADD__(v40, 1LL)) {
          goto LABEL_82;
        }
        v119 = v33;
        uint64_t v120 = v35;
        uint64_t v42 = (char *)objc_msgSend(v115, sel__deprecated_scanLocation);
        unint64_t v26 = __OFADD__(v42, v41);
        uint64_t v22 = &v42[v41];
        if (v26) {
          goto LABEL_83;
        }
        v37 = StringProtocol._toUTF16Index(_:)();
        ++v40;
      }

      while (v39 != v37 >> 14);
    }

    swift_bridgeObjectRelease();
    char v30 = v115;
    uint64_t v31 = v111;
    v43 = v112;
  }

  uint64_t v55 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000LL) == 0) {
    uint64_t v55 = v43 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v56 = 7LL;
  if (((v31 >> 60) & ((v43 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v56 = 11LL;
  }
  int v114 = v56 | (v55 << 16);
  uint64_t v57 = 4 * v55;
  uint64_t v106 = v37;
  uint64_t v108 = 4 * v55;
  while (1)
  {
    uint64_t v22 = (char *)objc_msgSend(v30, sel_caseSensitive);
    if (v57 < v37 >> 14)
    {
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }

    uint64_t v58 = (int)v22;
    if (objc_msgSend(v30, sel_locale))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }

    else
    {
      memset(v118, 0, sizeof(v118));
    }

    outlined init with take of Any?((uint64_t)v118, (uint64_t)&v119);
    if (v121)
    {
      if (swift_dynamicCast())
      {
        int64_t v59 = v116;
        uint64_t v60 = v117;
        goto LABEL_50;
      }
    }

    else
    {
      outlined destroy of Any?((uint64_t)&v119);
    }

    int64_t v59 = 0LL;
    uint64_t v60 = 0LL;
LABEL_50:
    unint64_t v61 = v58 ^ 1;
    v119 = v109;
    uint64_t v120 = (unint64_t)object;
    *(void *)&v118[0] = v43;
    *((void *)&v118[0] + 1) = v31;
    if (!(v59 | v31 & 0x1000000000000000LL)) {
      break;
    }
    uint64_t v107 = v58 ^ 1u;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    StringProtocol._ephemeralString.getter();
    unint64_t v62 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v63 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v22 = (char *)StringProtocol._toUTF16Offsets(_:)();
    uint64_t v64 = v22;
    unint64_t v65 = v23 - v22;
    unint64_t v66 = __OFSUB__(v23, v22);
    if (v59)
    {
      if (v66) {
        goto LABEL_81;
      }
      ObjectType = swift_getObjectType();
      char v68 = (void *)v60[61](ObjectType, v60);
      unint64_t v69 = (char *)objc_msgSend(v62, sel_rangeOfString_options_range_locale_, v63, v107, v64, v65, v68);
      int v71 = v70;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }

    else
    {
      if (v66) {
        goto LABEL_84;
      }
      unint64_t v69 = (char *)objc_msgSend(v62, sel_rangeOfString_options_range_, v63, v107, v22, v65);
      int v71 = v86;
      swift_unknownObjectRelease();
      uint64_t v22 = (char *)swift_unknownObjectRelease();
    }

    char v30 = v115;
    uint64_t v31 = v111;
    v43 = v112;
    if (v69 == (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      swift_unknownObjectRelease();
      goto LABEL_71;
    }

    uint64_t v23 = &v69[v71];
    if (__OFADD__(v69, v71)) {
      goto LABEL_78;
    }
    StringProtocol._toUTF16Indices(_:)();
    v37 = v87;
    swift_unknownObjectRelease();
LABEL_66:
    uint64_t v88 = String.Index.samePosition(in:)();
    if ((v23 & 1) == 0)
    {
      uint64_t v89 = v88;
      String.Index.samePosition(in:)();
      if ((v23 & 1) == 0)
      {
        int v114 = v89;
        goto LABEL_71;
      }
    }

    uint64_t v57 = v108;
    if (v108 <= v37 >> 14) {
      goto LABEL_71;
    }
  }

  swift_bridgeObjectRetain();
  char v72 = String.subscript.getter();
  unint64_t v74 = v73;
  int v76 = v75;
  uint64_t v78 = v77;
  swift_bridgeObjectRelease();
  char v116 = v109;
  uint64_t v117 = object;
  swift_bridgeObjectRetain();
  uint64_t v79 = Substring.init<A>(_:)();
  if ((v72 ^ v74) >= 0x4000 && (v79 ^ v80) >> 14)
  {
    specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v79,  v80,  v81,  v82,  0,  0,  v61,  0,  0,  v72,  v74,  v76,  v78);
    v37 = v83;
    char v85 = v84;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v30 = v115;
    if ((v85 & 1) != 0) {
      goto LABEL_71;
    }
    uint64_t v31 = v111;
    v43 = v112;
    goto LABEL_66;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v30 = v115;
LABEL_71:
  uint64_t v22 = (char *)v106;
  if (v106 >> 14 == v114 >> 14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_73;
  }

  if (v114 >> 14 >= v106 >> 14)
  {
    v92 = String.subscript.getter();
    int v94 = v93;
    unint64_t v96 = v95;
    uint64_t v98 = v97;
    swift_bridgeObjectRelease();
    uint64_t v99 = objc_msgSend(v30, sel_string);
    uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    uint64_t v102 = v101;

    v119 = (unint64_t)v100;
    uint64_t v120 = v102;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v103 = StringProtocol._toUTF16Offset(_:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v30, sel__deprecated_setScanLocation_, v103);
    uint64_t v90 = MEMORY[0x186E1B610](v92, v94, v96, v98);
    uint64_t v91 = v104;
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }

  v137 = v8 >> 11;
  uint64_t v131 = v3;
  uint64_t v132 = (__int128 *)((char *)&v146 + 8);
  uint64_t v130 = 0x80000001839C9AE0LL;
  while (1)
  {
    uint64_t v9 = v3[8];
    if (v4 != v137)
    {
      if (v9) {
        BOOL v25 = v3[10];
      }
      else {
        BOOL v25 = 0LL;
      }
      uint64_t v9 = v136;
      goto LABEL_82;
    }

    if (v9) {
      v19 = v3[10];
    }
    else {
      v19 = 0LL;
    }
    if (v19 < v4) {
      goto LABEL_336;
    }
    if (v9)
    {
      uint64_t v20 = v3[11];
      uint64_t v21 = *(unsigned __int16 *)(v9 + 16);
      uint64_t v22 = *(unsigned __int8 *)(v9 + 18);
      uint64_t v23 = v4 >= v3[10] || (_DWORD)v21 == 0;
      v133 = (uint64_t *)v3[9];
      uint64_t v129 = v20;
      if (v23)
      {
        v5 = (uint64_t *)(((-15LL << ((4 * v22 + 8) & 0x3C)) - 1) & v22 | (unint64_t)(v21 << ((4 * v22 + 8) & 0x3C)));
        swift_unknownObjectRetain();
        v4 = 0LL;
        uint64_t v24 = 0LL;
LABEL_79:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v129, (unint64_t)v5, v24, v9, (uint64_t)v133);
        result = (void *)swift_unknownObjectRelease_n();
        goto LABEL_80;
      }

      if ((_DWORD)v22)
      {
        result = (void *)swift_unknownObjectRetain_n();
        v5 = (uint64_t *)v9;
        while (1)
        {
          uint64_t v15 = *((unsigned __int16 *)v5 + 8);
          if (*((_WORD *)v5 + 8))
          {
            uint64_t v27 = v5[5];
            uint64_t v17 = __OFSUB__(v4, v27);
            uint64_t v16 = v4 - v27;
            if (v17) {
              goto LABEL_317;
            }
            if (__OFADD__(v16, 1LL)) {
              goto LABEL_318;
            }
            if (v16 + 1 <= 0)
            {
              uint64_t v15 = 0LL;
              goto LABEL_38;
            }

            if ((_DWORD)v15 != 1)
            {
              uint64_t v28 = v5[8];
              v4 = v16 - v28;
              if (__OFSUB__(v16, v28))
              {
                __break(1u);
LABEL_335:
                __break(1u);
LABEL_336:
                __break(1u);
LABEL_337:
                __break(1u);
LABEL_338:
                __break(1u);
LABEL_339:
                __break(1u);
                goto LABEL_340;
              }

              if (__OFADD__(v4, 1LL)) {
                goto LABEL_335;
              }
              if (v4 + 1 < 1)
              {
                uint64_t v15 = 1LL;
                v4 = v16;
                goto LABEL_38;
              }

              if ((_DWORD)v15 == 2) {
                goto LABEL_37;
              }
              uint64_t v29 = v5[11];
              uint64_t v17 = __OFSUB__(v4, v29);
              uint64_t v16 = v4 - v29;
              if (v17) {
                goto LABEL_349;
              }
              if (__OFADD__(v16, 1LL)) {
                goto LABEL_350;
              }
              if (v16 + 1 < 1)
              {
                uint64_t v15 = 2LL;
                goto LABEL_38;
              }

              if ((_DWORD)v15 != 3)
              {
                char v30 = 3LL;
                if (v15 > 3) {
                  char v30 = *((unsigned __int16 *)v5 + 8);
                }
                uint64_t v31 = v5 + 14;
                uint64_t v32 = 3LL;
                while (1)
                {
                  if (v30 == v32) {
                    goto LABEL_330;
                  }
                  v4 = v16 - *v31;
                  if (__OFSUB__(v16, *v31)) {
                    goto LABEL_331;
                  }
                  if (__OFADD__(v4, 1LL)) {
                    goto LABEL_332;
                  }
                  if (v4 + 1 < 1) {
                    break;
                  }
                  ++v32;
                  v31 += 3;
                  uint64_t v16 = v4;
                  if (v15 == v32) {
                    goto LABEL_37;
                  }
                }

                uint64_t v15 = v32;
                v4 = v16;
                goto LABEL_38;
              }
            }

            v4 = v16;
          }

      uint64_t v8 = v7 & v3;
      if (v8)
      {
LABEL_15:
        uint64_t v6 = 0;
        *v2 = v8;
        goto LABEL_16;
      }

  swift_retain();
LABEL_14:
  v7[6] = v27;
  uint64_t v39 = v49;
  v48(v7);
  if (v39)
  {
    v7[5] = v24;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v50 < *(void *)(v7[2] + 16LL))
    {
      uint64_t v40 = v44;
      uint64_t v41 = (void *)specialized ContiguousArray._customRemoveLast()();
      if (!v41) {
        uint64_t v41 = (void *)specialized ContiguousArray.remove(at:)(*(void *)(*v40 + 16LL) - 1LL);
      }
    }

    return swift_willThrow();
  }

  else
  {
    v7[5] = v24;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v50 >= *(void *)(v7[2] + 16LL))
    {
      return 0LL;
    }

    else
    {
      uint64_t v42 = v44;
      result = specialized ContiguousArray._customRemoveLast()();
      if (!result) {
        return specialized ContiguousArray.remove(at:)(*(void *)(*v42 + 16LL) - 1LL);
      }
    }
  }

  return result;
}

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 32LL);
  if ((v3 & 0x40) == 0)
  {
LABEL_7:
    if ((v3 & 0x80) == 0) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 128LL);
  }

    v12[0] = v8;
  }

  _NSAbbreviatePathWithTilde(v7, v12);
  unint64_t v10 = +[NSPathStore2 pathStoreWithCharacters:length:]( &OBJC_CLASS___NSPathStore2,  "pathStoreWithCharacters:length:",  v7,  v12[0]);
  if (v4 >= 0x101) {
    free(v7);
  }
  return v10;
}

      if ((v14 & 0xFFFFFFEF) == 0xAE) {
        goto LABEL_18;
      }
      if (!v15)
      {
        ++a1[18];
LABEL_30:
        v20[0] = v11;
        v20[1] = v10;
        v20[2] = v14;
        if ([(id)qword_18C496AE0 indexForBytes:v20 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
          ++a1[16];
        }
        goto LABEL_32;
      }

      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_30;
      }
LABEL_32:
      [a4 appendByte:v14];
LABEL_20:
      uint64_t v11 = v10;
      unint64_t v10 = v14;
      --v5;
    }

    while (v5);
  }

  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

    v1 = (void *)_NSCStringToUnsignedLong((char *)(v2 + v5), &v11);
    uint64_t v7 = &v11[-v2];
    uint64_t v8 = *v11;
    if (*v11)
    {
      while (v8 != 43 && (v8 - 48) >= 0xA)
      {
        uint64_t v9 = v7 + 1;
        uint64_t v8 = (v7++)[v2 + 1];
        if (!v8) {
          goto LABEL_19;
        }
      }
    }

    uint64_t v9 = v7;
LABEL_19:
    uint64_t v6 = _NSCStringToUnsignedLong(&v9[v2], &v11);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  unint64_t v10 = (NSUInteger)v1;
  result.length = v6;
  result.location = v10;
  return result;
}

  result = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( self,  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  a3);
  if (!result)
  {
    free(a3);
    return 0LL;
  }

  -[NSMutableString appendString:](v4, "appendString:", @"l");
  flags = self->_flags;
  if ((flags & 4) != 0) {
    goto LABEL_14;
  }
LABEL_6:
  if ((flags & 0x10) != 0) {
LABEL_7:
  }
    -[NSMutableString appendString:](v4, "appendString:", @"w");
LABEL_8:
  -[NSMutableString appendString:](v4, "appendString:", @"]");
  return v4;
}

        ++v6;
      }

      while (v4 != v6);
      result = [v2 countByEnumeratingWithState:&v15 objects:v14 count:16];
      v4 = result;
    }

    while (result);
  }

  return result;
}

  a1[3] = v4;
  if (a3)
  {
    uint64_t v11 = a1[6];
    uint64_t v12 = v4 >= v11;
    v13 = v4 - v11;
    if (v12) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0LL;
    }
    uint64_t v15 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unterminated block comment",  a1[5],  v14);
    uint64_t v16 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a1[3]);
    v19[0] = @"NSDebugDescription";
    v19[1] = @"NSJSONSerializationErrorIndex";
    v20[0] = v15;
    v20[1] = v16;
    *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:v20 forKeys:v19 count:2]);
  }

  return 0LL;
}

LABEL_304:
                    __break(1u);
LABEL_305:
                    __break(1u);
LABEL_306:
                    __break(1u);
LABEL_307:
                    __break(1u);
LABEL_308:
                    __break(1u);
                    goto LABEL_309;
                  }

                if (v164) {
                  goto LABEL_394;
                }
                uint64_t v34 = 0LL;
                goto LABEL_330;
              }

              uint64_t v36 = ((-15LL << ((4 * v152 + 8) & 0x3C)) - 1) & v152 | ((unint64_t)*(unsigned __int16 *)(v149 + 16) << ((4 * v152 + 8) & 0x3C));
              swift_unknownObjectRetain();
              uint64_t v34 = 0LL;
              uint64_t v15 = 0LL;
              goto LABEL_52;
            }

            if (v34 > 0) {
              goto LABEL_386;
            }
            uint64_t v34 = 0LL;
            uint64_t v15 = 0LL;
            uint64_t v36 = 0LL;
            v180 = 0LL;
LABEL_53:
            uint64_t v22 = __OFSUB__(a4, v34);
            unint64_t v10 = a4 - v34;
            uint64_t v34 = a4;
            if (v22) {
              goto LABEL_371;
            }
          }

          else
          {
            unint64_t v10 = 0LL;
            v180 = 0LL;
            uint64_t v15 = 0LL;
            uint64_t v36 = 0LL;
            BOOL v35 = v9[11];
            if (v149)
            {
              uint64_t v15 = 0LL;
              unint64_t v10 = v9[10];
              v180 = v9[9];
              uint64_t v36 = ((-15LL << ((4 * *(_BYTE *)(v149 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v149 + 18) | ((unint64_t)*(unsigned __int16 *)(v149 + 16) << ((4 * *(_BYTE *)(v149 + 18) + 8) & 0x3C));
            }
          }
        }
      }

      if (*(_BYTE *)(v17 + 18))
      {
        result = swift_unknownObjectRetain_n();
        uint64_t v9 = (void *)a4;
        v5 = v17;
LABEL_73:
        uint64_t v29 = *(unsigned __int16 *)(v5 + 16);
        if (!*(_WORD *)(v5 + 16)) {
          goto LABEL_71;
        }
        uint64_t v44 = *(void *)(v5 + 40);
        uint64_t v22 = __OFSUB__(v9, v44);
        uint64_t v31 = (uint64_t)v9 - v44;
        if (v22) {
          goto LABEL_338;
        }
        if (__OFADD__(v31, 1LL)) {
          goto LABEL_339;
        }
        if (v31 + 1 < 1)
        {
          uint64_t v29 = 0LL;
          goto LABEL_72;
        }

        if ((_DWORD)v29 == 1)
        {
          uint64_t v9 = (void *)v31;
LABEL_71:
          if (!v9) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
          goto LABEL_340;
        }

        v45 = (uint64_t *)(v5 + 64);
        uint64_t v46 = 1LL;
        while (1)
        {
          uint64_t v47 = *v45;
          v45 += 3;
          uint64_t v9 = (void *)(v31 - v47);
          if (__OFSUB__(v31, v47)) {
            break;
          }
          if (__OFADD__(v9, 1LL)) {
            goto LABEL_333;
          }
          if ((uint64_t)v9 + 1 < 1)
          {
            uint64_t v29 = v46;
            uint64_t v9 = (void *)v31;
LABEL_72:
            v43 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
            uint64_t v39 = ((-15LL << v43) - 1) & v39 | (v29 << v43);
            uint64_t v11 = *(void *)(v5 + 24 + 24 * v29);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            v5 = v11;
            if (!*(_BYTE *)(v11 + 18)) {
              goto LABEL_87;
            }
            goto LABEL_73;
          }

          ++v46;
          uint64_t v31 = (uint64_t)v9;
          if (v29 == v46) {
            goto LABEL_71;
          }
        }

        __break(1u);
LABEL_333:
        __break(1u);
LABEL_334:
        __break(1u);
LABEL_335:
        __break(1u);
LABEL_336:
        uint64_t v27 = v31;
        uint64_t v16 = v29;
        continue;
      }

      break;
    }

    result = swift_unknownObjectRetain_n();
    uint64_t v39 = 0LL;
    uint64_t v9 = (void *)a4;
    uint64_t v11 = v17;
LABEL_87:
    unint64_t v48 = *(unsigned __int16 *)(v11 + 16);
    if (!*(_WORD *)(v11 + 16)) {
      goto LABEL_99;
    }
    uint64_t v49 = *(void *)(v11 + 24);
    uint64_t v22 = __OFSUB__(v9, v49);
    uint64_t v50 = (void *)((char *)v9 - v49);
    if (v22) {
      goto LABEL_384;
    }
    if (__OFADD__(v50, 1LL)) {
      goto LABEL_385;
    }
    if ((uint64_t)v50 + 1 < 1)
    {
      unint64_t v48 = 0LL;
    }

    else
    {
      if ((_DWORD)v48 == 1)
      {
        uint64_t v9 = v50;
LABEL_99:
        if (v9) {
          goto LABEL_383;
        }
        goto LABEL_100;
      }

      uint64_t v51 = (uint64_t *)(v11 + 48);
      v52 = 1LL;
      while (1)
      {
        uint64_t v53 = *v51;
        v51 += 3;
        uint64_t v9 = (void *)((char *)v50 - v53);
        if (__OFSUB__(v50, v53)) {
          goto LABEL_360;
        }
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_361;
        }
        ++v52;
        uint64_t v50 = v9;
        if (v48 == v52) {
          goto LABEL_99;
        }
      }

      unint64_t v48 = v52;
      uint64_t v9 = v50;
    }

      __break(1u);
LABEL_305:
      __break(1u);
      goto LABEL_306;
    }

    uint64_t v57 = v56;
    uint64_t v58 = v222;
    if (!specialized static Comparable.<= infix(_:_:)(v222, v12 + v11 - 1)) {
      goto LABEL_297;
    }
    if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v222 + a4)) {
      goto LABEL_298;
    }
    int64_t v59 = specialized min<A>(_:_:)(v12 + v11, v222 + a4);
    if (v59 <= v222)
    {
      unint64_t v70 = 0LL;
      uint64_t v63 = 1LL;
      goto LABEL_103;
    }

    uint64_t v60 = v59;
    v211 = v57;
    unint64_t v61 = a4 + v222;
    unint64_t v62 = -(uint64_t)v222;
    uint64_t v63 = 1LL;
    uint64_t v64 = v222;
LABEL_59:
    unint64_t v65 = 0LL;
    unint64_t v66 = 0LL;
    uint64_t v67 = v61 - v64;
    char v68 = v62 + v64;
    while ((uint64_t)(v68 + v66) >= 0 && (uint64_t)(v67 + v65) >= 1)
    {
      unint64_t v69 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v64 + v66);
      if (v69 == 10)
      {
        int v71 = __OFADD__(v63++, 1LL);
        if (!v71)
        {
          v64 += v66 + 1;
          goto LABEL_76;
        }

        goto LABEL_305;
      }

      if (v69 == 13)
      {
        char v72 = v64 + v66;
        if (!specialized static Comparable.<= infix(_:_:)(v64 + v66 + 1, v55)) {
          goto LABEL_74;
        }
        if (((v64 - v222 + v66 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v66 + v67) >= 1)
        {
LABEL_74:
          int v71 = __OFADD__(v63++, 1LL);
          if (!v71)
          {
            uint64_t v64 = v72 + 1;
LABEL_76:
            unint64_t v61 = v215 + v222;
            unint64_t v62 = -(uint64_t)v222;
            if (v64 >= v60)
            {
              unint64_t v70 = 0LL;
LABEL_78:
              uint64_t v58 = v222;
              uint64_t v57 = v211;
LABEL_103:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)v92 = 0xD000000000000010LL;
              *(void *)(v92 + 8) = 0x80000001839CB4F0LL;
              *(void *)(v92 + 16) = v57;
              *(void *)(v92 + 24) = v63;
              *(void *)(v92 + 32) = v70;
              *(void *)(v92 + 40) = v55 - v58;
              *(_BYTE *)(v92 + 48) = 1;
              goto LABEL_249;
            }

            goto LABEL_59;
          }

LABEL_140:
            char v85 = (4 * *(_BYTE *)(v84 + 18) + 8) & 0x3C;
            uint64_t v82 = ((-15LL << v85) - 1) & v82 | (v86 << v85);
            uint64_t v15 = *(void *)(v84 + 24 + 24 * v86);
            swift_unknownObjectRetain();
            result = (void *)swift_unknownObjectRelease();
            uint64_t v84 = v15;
            if (!*(_BYTE *)(v15 + 18)) {
              goto LABEL_173;
            }
          }
        }

        result = (void *)swift_unknownObjectRetain_n();
        uint64_t v82 = 0LL;
        uint64_t v83 = i;
        uint64_t v15 = v78;
LABEL_173:
        unint64_t v97 = *(unsigned __int16 *)(v15 + 16);
        if (!*(_WORD *)(v15 + 16)) {
          goto LABEL_184;
        }
        uint64_t v98 = *(void *)(v15 + 24);
        BOOL v35 = __OFSUB__(v83, v98);
        uint64_t v99 = v83 - v98;
        if (v35) {
          goto LABEL_327;
        }
        if (__OFADD__(v99, 1LL)) {
          goto LABEL_328;
        }
        if (v99 + 1 <= 0)
        {
          unint64_t v97 = 0LL;
        }

        else
        {
          if ((_DWORD)v97 == 1) {
            goto LABEL_178;
          }
          uint64_t v100 = *(void *)(v15 + 48);
          uint64_t v83 = v99 - v100;
          if (__OFSUB__(v99, v100)) {
            goto LABEL_339;
          }
          if (__OFADD__(v83, 1LL)) {
            goto LABEL_340;
          }
          if (v83 + 1 < 1)
          {
            unint64_t v97 = 1LL;
            uint64_t v83 = v99;
          }

          else
          {
            if ((_DWORD)v97 == 2) {
              goto LABEL_184;
            }
            uint64_t v117 = *(void *)(v15 + 72);
            BOOL v35 = __OFSUB__(v83, v117);
            uint64_t v99 = v83 - v117;
            if (v35) {
              goto LABEL_343;
            }
            if (__OFADD__(v99, 1LL)) {
              goto LABEL_344;
            }
            if (v99 + 1 < 1)
            {
              unint64_t v97 = 2LL;
            }

            else
            {
              if ((_DWORD)v97 != 3)
              {
                uint64_t v118 = 3LL;
                if (v97 > 3) {
                  uint64_t v118 = *(unsigned __int16 *)(v15 + 16);
                }
                v119 = (void *)(v15 + 96);
                uint64_t v120 = 3LL;
                while (v118 != v120)
                {
                  uint64_t v83 = v99 - *v119;
                  if (__OFSUB__(v99, *v119)) {
                    goto LABEL_335;
                  }
                  if (__OFADD__(v83, 1LL)) {
                    goto LABEL_336;
                  }
                  if (v83 + 1 < 1)
                  {
                    unint64_t v97 = v120;
                    uint64_t v83 = v99;
                    goto LABEL_185;
                  }

                  ++v120;
                  v119 += 3;
                  uint64_t v99 = v83;
                  if (v97 == v120) {
                    goto LABEL_184;
                  }
                }

                goto LABEL_334;
              }

      __break(1u);
    }

    if (v22 > v23)
    {
      __break(1u);
      goto LABEL_140;
    }

    if (a3 < 0) {
      goto LABEL_142;
    }
    uint64_t v22 = *(unsigned __int16 *)&v34[2 * v22];
    unint64_t v74 = v22;
    if (a3) {
      goto LABEL_46;
    }
LABEL_42:
    v4 = MEMORY[0x18961AFE8];
    BOOL v35 = v15 - v8;
    if (((v15 - v8) & 0x8000000000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }

  unint64_t v10 = *(unsigned __int16 *)(v8 + 32);
  if (!*(_WORD *)(v8 + 32))
  {
LABEL_11:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *unint64_t v14 = 2;
    swift_willThrow();
    return v4;
  }

  a3 = v3;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v6 = v4 + 30;
    *(void *)(v4 + 16) = v11;
    uint64_t v8 = 2 * v11;
    bzero((void *)(v4 + 32), 2 * v11);
    uint64_t v12 = *(unsigned __int16 *)(2 * v11 + a1 + 30);
    v13 = v12 / v10;
    while (1)
    {
      if ((unint64_t)(v11 - 1) >= *(void *)(v4 + 16))
      {
        __break(1u);
        goto LABEL_110;
      }

      *(_WORD *)(v6 + 2 * v11) = v13;
      if (v11 == 1) {
        break;
      }
      uint64_t v12 = *(unsigned __int16 *)(a1 + 28 + 2 * v11) | ((v12 % v10) << 16);
      v13 = v12 / v10;
      --v11;
      if ((v12 / v10) >> 16)
      {
LABEL_10:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_11;
      }
    }
  }

  else
  {
    v4 = MEMORY[0x18961AFE8];
  }

  unint64_t v69 = *(void *)(v4 + 16);
  if (v69 && !*(_WORD *)(v4 + 2 * v69 + 30))
  {
    unint64_t v70 = v69 + 14;
    do
    {
      *(void *)(v4 + 16) = v70 - 15;
      if (v70 == 15) {
        break;
      }
    }

    while (!*(unsigned __int16 *)(v4 + 2 * v70--));
  }

  return v4;
}

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v93 = *((void *)v61._rawValue + 2);
    if (HIDWORD(v93)) {
      goto LABEL_160;
    }
    _So9NSDecimala__length_setter(v93, &v127);
    LODWORD(v124) = v108;
    WORD2(v124) = v97;
    HIWORD(v124) = v24;
    LOWORD(v125) = v120;
    WORD1(v125) = v118;
    WORD2(v125) = v116;
    HIWORD(v125) = v114;
    LOWORD(v126) = v112;
    HIWORD(v126) = v110;
    goto LABEL_142;
  }

  int v76 = 0LL;
LABEL_120:
  if (v76 <= v62) {
    uint64_t v90 = v62;
  }
  else {
    uint64_t v90 = v76;
  }
  do
  {
    if (v90 == v76)
    {
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }

    if (v76 >= *((void *)v61._rawValue + 2)) {
      goto LABEL_149;
    }
    v60[v76] = *(_WORD *)(v39 + 32 + 2 * v76);
    ++v76;
  }

  while ((uint64_t)v76 < (uint64_t)v62);
  LODWORD(v75) = 1;
LABEL_127:
  if ((uint64_t)v76 < (uint64_t)v63)
  {
    while (1)
    {
LABEL_128:
      if (v76 >= v63) {
        goto LABEL_156;
      }
      unint64_t v62 = *((void *)v61._rawValue + 2);
      if (v76 < v62) {
        break;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      LODWORD(v75) = HIWORD(v59);
      int v76 = v62;
    }

    uint64_t v91 = v75 + (*(unsigned __int16 *)(v21 + 32 + 2 * v76) ^ 0xFFFF);
    --v63;
    unint64_t v62 = v21 + 34;
    while (1)
    {
      LODWORD(v75) = HIWORD(v91);
      v60[v76] = v91;
      if (v63 == v76) {
        break;
      }
      uint64_t v91 = v75 + (*(unsigned __int16 *)(v62 + 2 * v76++) ^ 0xFFFF);
      if (v76 >= *((void *)v61._rawValue + 2)) {
        goto LABEL_133;
      }
    }
  }

      __break(1u);
LABEL_141:
      __break(1u);
      goto LABEL_142;
    }

    unint64_t v54 = v27;
    if (v100 == 2)
    {
      uint64_t v55 = v97;
      if (v50)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v158);
        swift_unknownObjectRetain();
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v99, v97, v16, v50, v51, v53);
        uint64_t v56 = result;
      }

      else
      {
        result = swift_retain();
        uint64_t v56 = 0LL;
      }

      uint64_t v57 = v99;
    }

    else
    {
      uint64_t v56 = v96 >> 11;
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      result = swift_unknownObjectRetain();
      uint64_t v55 = v97;
      uint64_t v57 = v99;
    }

      outlined destroy of Any?((uint64_t)v340, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v341, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v278);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v283);
      outlined destroy of Any?( (uint64_t)&v285,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v295,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v125 & 1) == 0) {
        goto LABEL_172;
      }
LABEL_141:
      v124 += 2;
      ++v123;
      uint64_t v118 = v277;
      if (v126 == v51)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        uint64_t v91 = *(uint64_t **)(v98 + 64);
        int v94 = *(void *)(v98 + 88);
        unint64_t v97 = v242;
        v259 = v243;
        int v71 = v246;
        v285 = v246;
        v286 = v242;
        unint64_t v69 = (uint64_t)v241;
        v287 = v241;
        uint64_t v29 = __OFADD__(v257++, 1LL);
        if (!v29) {
          goto LABEL_113;
        }
        __break(1u);
LABEL_170:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v283);
LABEL_171:
        outlined destroy of Any?( (uint64_t)&v285,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v295, v91);
        outlined destroy of Any?((uint64_t)&v300, v91);
LABEL_172:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        uint64_t v102 = v268;
        unint64_t v97 = v256;
        goto LABEL_173;
      }
    }
  }

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_173:
  if (v255 != *(void *)(v98 + 88)) {
    goto LABEL_289;
  }
  if (v102)
  {
    v145 = *(void *)(v102 + 24 * ((v97 >> ((4 * *(_BYTE *)(v102 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v146 = *(void *)(v98 + 64);
    swift_unknownObjectRetain();
    v145 = specialized Rope._Node.subscript.getter(v97, v146);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  uint64_t v147 = v259 + v145;
  if (__OFADD__(v259, v145)) {
    goto LABEL_290;
  }
  unint64_t v148 = v249;
  uint64_t v149 = v249[1];
  v341[0] = *v249;
  v341[1] = v149;
  v341[2] = v249[2];
  BigString.utf8.getter();
  result = v237;
  if (__OFSUB__(v147, v237 >> 11))
  {
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
    goto LABEL_298;
  }

  v150 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v152 = v151;
  uint64_t v153 = v148;
  __int128 v155 = v154;
  __int128 v157 = v156;
  result = outlined release of Locale((uint64_t)v331);
  uint64_t v158 = v240;
  if (v239 >= v150 >> 10) {
    v159 = v150;
  }
  else {
    v159 = v265;
  }
  if (v239 >= v150 >> 10)
  {
    v160 = v155;
  }

  else
  {
    uint64_t v152 = v254;
    v160 = v253;
  }

  if (v239 >= v150 >> 10) {
    v161 = v157;
  }
  else {
    v161 = v252;
  }
  uint64_t v162 = *v153;
  __int128 v163 = v153[1];
  v340[2] = v153[2];
  v340[1] = v163;
  v340[0] = v162;
  if (v159 >> 10 < v240) {
    goto LABEL_292;
  }
  *(void *)&v295 = v260;
  *((void *)&v295 + 1) = v263;
  *(void *)&v296 = v262;
  *((void *)&v296 + 1) = v261;
  *(void *)&v297 = v159;
  *((void *)&v297 + 1) = v152;
  *(void *)&v298 = v160;
  *((void *)&v298 + 1) = v161;
  __int128 v164 = v258;
  __int128 v165 = *(void *)(v258 + 16);
  v277 = v161;
  if (!v165 || v240 == v159 >> 10)
  {
    v276 = (uint64_t *)v160;
LABEL_204:
    swift_release();
    result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v305);
    v173 = v250;
    uint64_t v172 = v251;
    v174 = v248;
    v175 = v277;
    goto LABEL_205;
  }

  __int128 v166 = v152;
  outlined retain of Locale((uint64_t)v340);
  swift_bridgeObjectRetain();
  uint64_t v167 = 40LL;
  __int128 v168 = v165;
  while (*(void *)(v164 + v167))
  {
    swift_bridgeObjectRelease();
    v167 += 16LL;
    if (!--v168)
    {
      swift_bridgeObjectRelease();
      uint64_t v152 = v166;
      __int128 v169 = v277;
      goto LABEL_199;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v332);
  v283[0] = v260;
  v283[1] = v263;
  v283[2] = v262;
  v283[3] = v261;
  v283[4] = v260;
  v283[5] = v263;
  v283[6] = v262;
  v283[7] = v261;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v283, &v285);
  result = outlined release of Locale((uint64_t)&v333);
  uint64_t v152 = v166;
  __int128 v169 = v277;
  if (v292 != 2)
  {
    v159 = v289;
    if (v158 > v289 >> 10) {
      goto LABEL_306;
    }
    uint64_t v152 = v290;
    v160 = v291;
    __int128 v169 = v292;
  }

  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        char v68 = (v72 - 1) & v72;
        int v71 = __clz(__rbit64(v72)) + (v4 << 6);
LABEL_141:
        unint64_t v74 = (unint64_t *)(*(void *)(v43 + 48) + 16 * v71);
        v13 = *v74;
        unint64_t v10 = v74[1];
        if (*(void *)(a4 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v13, v10);
          v5 = v75;
          swift_bridgeObjectRelease();
          if ((v5 & 1) == 0) {
            goto LABEL_145;
          }
          result = (void *)swift_bridgeObjectRelease();
          if (v68) {
            goto LABEL_123;
          }
        }

        else
        {
          swift_bridgeObjectRetain();
LABEL_145:
          v217 = 0LL;
          v215 = 0u;
          v216 = 0u;
          v213 = 0u;
          v214 = 0u;
          v5 = (uint64_t)&v218;
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v213, v13, v10);
          result = (void *)swift_bridgeObjectRelease();
          v198 = 1;
          if (v68) {
            goto LABEL_123;
          }
        }
      }

                          if ((BYTE4(v337._nsError._domain) & 1) != 0)
                          {
                            v240 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            if ((v240 & 1) == 0)
                            {
LABEL_202:
                              v307 = specialized BufferViewIterator.next()();
                              if ((v307 & 0x100) == 0)
                              {
                                v308 = v307;
                                v309 = 1;
                                switch((char)v307)
                                {
                                  case '+':
                                    goto LABEL_224;
                                  case '-':
                                    goto LABEL_223;
                                  case 'G':
                                  case 'g':
                                    v310 = specialized BufferViewIterator.next()();
                                    if ((v310 & 0x100) == 0 && (v310 | 0x20) == 0x6D)
                                    {
                                      v311 = specialized BufferViewIterator.next()();
                                    }

                                    if (v308 != 85) {
                                      goto LABEL_215;
                                    }
LABEL_209:
                                    v312 = specialized BufferViewIterator.next()();
                                    if ((v312 & 0x100) != 0) {
                                      goto LABEL_215;
                                    }
                                    v313 = specialized BufferViewIterator.next()();
LABEL_213:
                                    else {
                                      v314 = 0;
                                    }
                                    if (v314 == 43) {
                                      goto LABEL_238;
                                    }
                                    if (v314 != 45) {
                                      goto LABEL_260;
                                    }
                                    v309 = 0;
LABEL_238:
                                    break;
                                  case 'U':
                                  case 'u':
                                    goto LABEL_209;
                                  case 'Z':
                                  case 'z':
                                    static TimeZone.gmt.getter(__dst);
                                    tv_nsec = *((void *)&__dst[0] + 1);
                                    tv_sec = *(void *)&__dst[0];
                                    goto LABEL_219;
                                  default:
                                    goto LABEL_215;
                                }

                                goto LABEL_224;
                              }

                              goto LABEL_215;
                            }

                            goto LABEL_166;
                          }

  if (v12 == v13)
  {
    unint64_t v66 = 1;
    v13 = v12;
  }

  else
  {
    do
    {
      yydestruct(yystos[v9], v10--);
      uint64_t v67 = *((__int16 *)v12 - 1);
      v12 -= 2;
      uint64_t v9 = v67;
    }

    while (v12 != v13);
    unint64_t v66 = 1;
    uint64_t v12 = v13;
  }

LABEL_185:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v96 = v82 & 0xFFFFFFFFFFFFF0FFLL | (v97 << 8);
      }

      else
      {
        unint64_t v96 = ((-15LL << ((4 * v82 + 8) & 0x3C)) - 1) & v82 | ((unint64_t)*(unsigned __int16 *)(v78 + 16) << ((4 * v82 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v83 = 0LL;
        uint64_t v15 = 0LL;
      }

      swift_unknownObjectRetain();
      unint64_t v148 = v96;
      uint64_t v18 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v147, v96, v15, v78, v81);
      swift_release();
      result = (void *)swift_unknownObjectRelease_n();
      goto LABEL_187;
    }

    result = (void *)swift_release();
    uint64_t v83 = 0LL;
    uint64_t v15 = 0LL;
    unint64_t v148 = 0LL;
    uint64_t v18 = 0LL;
LABEL_187:
    uint64_t v11 = i - v83;
    if (__OFSUB__(i, v83)) {
      goto LABEL_314;
    }
    uint64_t v12 = v147;
LABEL_189:
    uint64_t v101 = (*(uint64_t (**)(void))(v140 + 24))();
    uint64_t v103 = (uint64_t)v143;
    if (v143[2] && (unint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102), (v105 & 1) != 0))
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v103 + 56) + 72 * v104, (uint64_t)&v154);
    }

    else
    {
      uint64_t v158 = 0LL;
      __int128 v156 = 0u;
      __int128 v157 = 0u;
      __int128 v155 = 0u;
      __int128 v154 = 0u;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((void *)&v155 + 1))
    {
      swift_release();
      outlined destroy of Any?( (uint64_t)&v168,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = (void *)outlined destroy of Any?( (uint64_t)&v154,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_262:
      v133 = (_OWORD *)v136;
      *(void *)(v136 + 64) = 0LL;
      v133[2] = 0u;
      v133[3] = 0u;
      _OWORD *v133 = 0u;
      v133[1] = 0u;
      return result;
    }

    __int128 v165 = v156;
    __int128 v166 = v157;
    uint64_t v167 = v158;
    __int128 v163 = v154;
    __int128 v164 = v155;
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v168,  (uint64_t)&v154,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((void *)&v155 + 1))
    {
      outlined destroy of Any?( (uint64_t)&v168,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      v19 = &v154;
LABEL_15:
      result = (void *)outlined destroy of Any?( (uint64_t)v19,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_16;
    }

    v161[2] = v156;
    v161[3] = v157;
    uint64_t v162 = v158;
    v161[0] = v154;
    v161[1] = v155;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v163,  (uint64_t)v160);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v161,  (uint64_t)v159);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v160,  (uint64_t)&v154,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v159,  (uint64_t)v138,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!*((void *)&v155 + 1))
    {
      if (v158)
      {
        outlined destroy of Any?((uint64_t)v138, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_260:
        outlined destroy of Any?((uint64_t)v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v161);
        outlined destroy of Any?( (uint64_t)&v168,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_261:
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v163);
        result = (void *)swift_release();
        goto LABEL_262;
      }

      outlined destroy of Any?((uint64_t)v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v161);
      v19 = &v168;
      goto LABEL_15;
    }

    if (!v158) {
      goto LABEL_257;
    }
    uint64_t v141 = v18;
    uint64_t v147 = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v154, (uint64_t)v151);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v138, (uint64_t)v150);
    uint64_t v106 = v152;
    uint64_t v142 = v153;
    v137 = __swift_project_boxed_opaque_existential_1(v151, v152);
    v143 = &v136;
    uint64_t v107 = *(void *)(v106 - 8);
    MEMORY[0x1895F8858](v137);
    v109 = (char *)&v136 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v150,  (uint64_t)&v149);
    uint64_t v110 = type metadata accessor for Optional();
    uint64_t v111 = *(void *)(v110 - 8);
    MEMORY[0x1895F8858](v110);
    v113 = (char *)&v136 - v112;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    int v114 = swift_dynamicCast();
    v115 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56);
    if (v114)
    {
      v115(v113, 0LL, 1LL, v106);
      (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v109, v113, v106);
      char v116 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v106);
    }

    else
    {
      v115(v113, 1LL, 1LL, v106);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v113, v110);
      char v116 = 0;
    }

    v5 = v145;
    uint64_t v12 = v147;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v150);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v151);
    outlined destroy of Any?((uint64_t)v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v161);
    result = (void *)outlined destroy of Any?( (uint64_t)&v168,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v18 = v141;
    if ((v116 & 1) == 0) {
      goto LABEL_261;
    }
LABEL_16:
    __int128 v170 = v165;
    __int128 v171 = v166;
    uint64_t v172 = v167;
    __int128 v168 = v163;
    __int128 v169 = v164;
  }

  uint64_t v23 = v5[9];
  uint64_t v142 = v5[11];
  v143 = (uint64_t *)v23;
  uint64_t v24 = *(unsigned __int16 *)(v20 + 16);
  uint64_t v12 = *(unsigned __int8 *)(v20 + 18);
  BOOL v25 = v6 >= v21 || (_DWORD)v24 == 0;
  uint64_t v141 = v18;
  if (v25)
  {
    unint64_t v26 = ((-15LL << ((4 * v12 + 8) & 0x3C)) - 1) & v12 | (unint64_t)(v24 << ((4 * v12 + 8) & 0x3C));
    swift_unknownObjectRetain();
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
LABEL_82:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v142, v26, v28, v20, (uint64_t)v143);
    result = (void *)swift_unknownObjectRelease_n();
    uint64_t v12 = v147;
    uint64_t v18 = v141;
    goto LABEL_83;
  }

  if ((_DWORD)v12)
  {
    result = (void *)swift_unknownObjectRetain_n();
    uint64_t v27 = v6;
    uint64_t v7 = v20;
    while (1)
    {
      uint64_t v31 = *(unsigned __int16 *)(v7 + 16);
      if (!*(_WORD *)(v7 + 16)) {
        goto LABEL_36;
      }
      uint64_t v32 = *(void *)(v7 + 40);
      uint64_t v33 = v27 - v32;
      if (__OFSUB__(v27, v32)) {
        goto LABEL_285;
      }
      if (__OFADD__(v33, 1LL)) {
        goto LABEL_286;
      }
      if (v33 + 1 <= 0)
      {
        uint64_t v31 = 0LL;
        goto LABEL_37;
      }

      if ((_DWORD)v31 == 1) {
        break;
      }
      uint64_t v34 = *(void *)(v7 + 64);
      BOOL v35 = __OFSUB__(v33, v34);
      uint64_t v36 = v33 - v34;
      if (v35) {
        goto LABEL_300;
      }
      if (__OFADD__(v36, 1LL)) {
        goto LABEL_301;
      }
      if (v36 + 1 < 1)
      {
        uint64_t v31 = 1LL;
        uint64_t v27 = v33;
        goto LABEL_37;
      }

      if ((_DWORD)v31 == 2)
      {
        uint64_t v27 = v36;
        goto LABEL_36;
      }

      v37 = (void *)(v7 + 88);
      uint64_t v38 = 2LL;
      while (1)
      {
        if (v31 == v38)
        {
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          uint64_t v130 = v36;
          uint64_t v16 = v31;
LABEL_280:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v148 = v27 & 0xFFFFFFFFFFFFF0FFLL | (v130 << 8);
          v5 = v145;
          unint64_t v10 = v146;
          if (v7) {
            goto LABEL_12;
          }
LABEL_281:
          result = (void *)swift_release();
          uint64_t v17 = 0LL;
          uint64_t v11 = v6 - v16;
          if (__OFSUB__(v6, v16)) {
            goto LABEL_283;
          }
          goto LABEL_13;
        }

        uint64_t v27 = v36 - *v37;
        if (__OFSUB__(v36, *v37)) {
          goto LABEL_277;
        }
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_278;
        }
        if (v27 + 1 < 1) {
          break;
        }
        ++v38;
        v37 += 3;
        uint64_t v36 = v27;
        if (v31 == v38) {
          goto LABEL_36;
        }
      }

      uint64_t v31 = v38;
      uint64_t v27 = v36;
LABEL_37:
      char v30 = (4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C;
      uint64_t v12 = ((-15LL << v30) - 1) & v12 | (v31 << v30);
      uint64_t v28 = *(void *)(v7 + 24 + 24 * v31);
      swift_unknownObjectRetain();
      result = (void *)swift_unknownObjectRelease();
      uint64_t v7 = v28;
      if (!*(_BYTE *)(v28 + 18)) {
        goto LABEL_59;
      }
    }

    v27 -= v32;
LABEL_36:
    if (!v27) {
      goto LABEL_37;
    }
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
    goto LABEL_304;
  }

  result = (void *)swift_unknownObjectRetain_n();
  uint64_t v12 = 0LL;
  uint64_t v27 = v6;
  uint64_t v28 = v20;
LABEL_59:
  uint64_t v39 = *(unsigned __int16 *)(v28 + 16);
  if (!*(_WORD *)(v28 + 16)) {
    goto LABEL_68;
  }
  uint64_t v40 = *(void *)(v28 + 24);
  BOOL v35 = __OFSUB__(v27, v40);
  uint64_t v41 = v27 - v40;
  if (v35) {
    goto LABEL_322;
  }
  if (!__OFADD__(v41, 1LL))
  {
    if (v41 + 1 <= 0)
    {
      uint64_t v39 = 0LL;
    }

    else
    {
      if ((_DWORD)v39 == 1)
      {
LABEL_69:
        if (v41) {
          goto LABEL_321;
        }
        uint64_t v27 = 0LL;
        goto LABEL_81;
      }

      uint64_t v42 = *(void *)(v28 + 48);
      uint64_t v27 = v41 - v42;
      if (__OFSUB__(v41, v42)) {
        goto LABEL_332;
      }
      if (__OFADD__(v27, 1LL)) {
        goto LABEL_333;
      }
      if (v27 + 1 < 1)
      {
        uint64_t v39 = 1LL;
        uint64_t v27 = v41;
      }

      else
      {
        if ((_DWORD)v39 == 2)
        {
LABEL_68:
          uint64_t v41 = v27;
          goto LABEL_69;
        }

        v43 = (void *)(v28 + 72);
        uint64_t v44 = 2LL;
        while (1)
        {
          if (v39 == v44) {
            goto LABEL_315;
          }
          uint64_t v41 = v27 - *v43;
          if (__OFSUB__(v27, *v43)) {
            goto LABEL_316;
          }
          if (__OFADD__(v41, 1LL)) {
            goto LABEL_317;
          }
          if (v41 + 1 < 1) {
            break;
          }
          ++v44;
          v43 += 3;
          uint64_t v27 = v41;
          if (v39 == v44) {
            goto LABEL_69;
          }
        }

        uint64_t v39 = v44;
      }
    }

  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  specialized _NativeDictionary._delete(at:)(v38, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_32:
  uint64_t v41 = swift_bridgeObjectRetain();
  uint64_t v42 = specialized Sequence.compactMap<A>(_:)(v41);
  swift_bridgeObjectRelease();
  if (!*(void *)(v42 + 16))
  {
    uint64_t v11 = (void *)MEMORY[0x18961AFF0];
LABEL_44:
    swift_bridgeObjectRelease();
    if (v11[2])
    {
      v61._countAndFlagsBits = 64LL;
      v61._object = (void *)0xE100000000000000LL;
      String.append(_:)(v61);
      swift_retain();
      unint64_t v62 = swift_bridgeObjectRetain();
      uint64_t v63 = specialized _copyCollectionToContiguousArray<A>(_:)(v62);
      swift_release();
      v183._countAndFlagsBits = (uint64_t)v63;
      specialized MutableCollection<>.sort(by:)(&v183._countAndFlagsBits);
      swift_release();
      __srca = (char *)v183._countAndFlagsBits;
      uint64_t v64 = *(void *)(v183._countAndFlagsBits + 16);
      if (v64)
      {
        unint64_t v66 = *(void *)(v183._countAndFlagsBits + 32);
        unint64_t v65 = *(void **)(v183._countAndFlagsBits + 40);
        v183._countAndFlagsBits = v66;
        v183._object = v65;
        swift_bridgeObjectRetain_n();
        v67._countAndFlagsBits = 61LL;
        v67._object = (void *)0xE100000000000000LL;
        String.append(_:)(v67);
        if (v11[2]
          && (countAndFlagsBits = v183._countAndFlagsBits,
              object = v183._object,
              unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v66, (uint64_t)v65),
              (v71 & 1) != 0))
        {
          v2 = 0LL;
          char v72 = (void **)(__srca + 56);
          char v73 = v64 - 1;
          while (1)
          {
            unint64_t v74 = (uint64_t *)(v11[7] + 16 * v70);
            v1 = *v74;
            uint64_t v75 = (void *)v74[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v183._countAndFlagsBits = countAndFlagsBits;
            v183._object = object;
            swift_bridgeObjectRetain();
            v76._countAndFlagsBits = v1;
            v76._object = v75;
            String.append(_:)(v76);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v77._countAndFlagsBits = 59LL;
            v77._object = (void *)0xE100000000000000LL;
            String.append(_:)(v77);
            swift_bridgeObjectRelease();
            String.append(_:)(v183);
            swift_bridgeObjectRelease();
            if (v73 == v2) {
              break;
            }
            uint64_t v79 = (uint64_t)*(v72 - 1);
            uint64_t v78 = *v72;
            v183._countAndFlagsBits = v79;
            v183._object = v78;
            swift_bridgeObjectRetain_n();
            v80._countAndFlagsBits = 61LL;
            v80._object = (void *)0xE100000000000000LL;
            String.append(_:)(v80);
            if (v11[2])
            {
              v72 += 2;
              countAndFlagsBits = v183._countAndFlagsBits;
              object = v183._object;
              unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v79, (uint64_t)v78);
              if ((v81 & 1) != 0) {
                continue;
              }
            }

            goto LABEL_54;
          }
        }

        else
        {
LABEL_54:
          swift_bridgeObjectRelease();
          __break(1u);
        }
      }

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      specialized RangeReplaceableCollection<>.popLast()();
    }

    else
    {
      swift_release();
    }

    swift_bridgeObjectRelease();
    return v185;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v11 = (void *)static _DictionaryStorage.allocate(capacity:)();
  v43 = *(void **)(v42 + 16);
  v184 = v11;
  __src = v43;
  if (!v43) {
    goto LABEL_44;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v44 = 0LL;
  v45 = (uint64_t *)(v42 + 56);
  while (1)
  {
    uint64_t v46 = (void *)(v44 + 1);
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    v1 = *(v45 - 2);
    unint64_t v48 = *(v45 - 1);
    uint64_t v49 = *v45;
    v183._countAndFlagsBits = *(v45 - 3);
    uint64_t v47 = v183._countAndFlagsBits;
    v183._object = (void *)v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v1);
    v52 = v11[2];
    uint64_t v53 = (v51 & 1) == 0;
    unint64_t v54 = __OFADD__(v52, v53);
    uint64_t v55 = v52 + v53;
    if (v54) {
      goto LABEL_59;
    }
    v2 = v51;
    if (v11[3] < v55)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, 1);
      uint64_t v11 = v184;
      uint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v1);
      if ((v2 & 1) != (v56 & 1)) {
        goto LABEL_196;
      }
    }

    if ((v2 & 1) != 0) {
      goto LABEL_191;
    }
    v11[(v50 >> 6) + 8] |= 1LL << v50;
    uint64_t v57 = (uint64_t *)(v11[6] + 16 * v50);
    *uint64_t v57 = v47;
    v57[1] = v1;
    uint64_t v58 = (void *)(v11[7] + 16 * v50);
    *uint64_t v58 = v48;
    v58[1] = v49;
    int64_t v59 = v11[2];
    unint64_t v54 = __OFADD__(v59, 1LL);
    uint64_t v60 = v59 + 1;
    if (v54) {
      goto LABEL_60;
    }
    v45 += 4;
    v11[2] = v60;
    ++v44;
    if (v46 == __src)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_44;
    }
  }

  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v83 = static _DictionaryStorage.copy(original:)();
  v5 = v83;
  if (!*(void *)(v2 + 16))
  {
LABEL_92:
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  uint64_t v84 = (void *)(v83 + 64);
  char v85 = v2 + 64;
  unint64_t v86 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  uint64_t v87 = v2;
  uint64_t v88 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v2 + 16);
  uint64_t v89 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v90 = -1LL;
  if (v89 < 64) {
    uint64_t v90 = ~(-1LL << v89);
  }
  uint64_t v91 = v90 & *(void *)(v2 + 64);
  v92 = (unint64_t)(v89 + 63) >> 6;
  while (2)
  {
    if (v91)
    {
      uint64_t v93 = __clz(__rbit64(v91));
      v91 &= v91 - 1;
      int v94 = v93 | (v88 << 6);
LABEL_70:
      uint64_t v95 = 16 * v94;
      unint64_t v96 = (uint64_t *)(*(void *)(v2 + 48) + v95);
      uint64_t v98 = *v96;
      unint64_t v97 = v96[1];
      uint64_t v99 = (uint64_t *)(*(void *)(v2 + 56) + v95);
      uint64_t v100 = *v99;
      uint64_t v101 = v99[1];
      uint64_t v102 = (void *)(*(void *)(v5 + 48) + v95);
      *uint64_t v102 = v98;
      v102[1] = v97;
      uint64_t v103 = (void *)(*(void *)(v5 + 56) + v95);
      *uint64_t v103 = v100;
      v103[1] = v101;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  unint64_t v104 = v88 + 1;
  if (__OFADD__(v88, 1LL))
  {
    __break(1u);
    goto LABEL_187;
  }

  if (v104 >= v92) {
    goto LABEL_92;
  }
  char v105 = *(void *)(v85 + 8 * v104);
  ++v88;
  if (v105) {
    goto LABEL_91;
  }
  uint64_t v88 = v104 + 1;
  if (v104 + 1 >= v92) {
    goto LABEL_92;
  }
  char v105 = *(void *)(v85 + 8 * v88);
  if (v105) {
    goto LABEL_91;
  }
  uint64_t v88 = v104 + 2;
  if (v104 + 2 >= v92) {
    goto LABEL_92;
  }
  char v105 = *(void *)(v85 + 8 * v88);
  if (v105) {
    goto LABEL_91;
  }
  uint64_t v88 = v104 + 3;
  if (v104 + 3 >= v92) {
    goto LABEL_92;
  }
  char v105 = *(void *)(v85 + 8 * v88);
  if (v105) {
    goto LABEL_91;
  }
  uint64_t v88 = v104 + 4;
  if (v104 + 4 >= v92) {
    goto LABEL_92;
  }
  char v105 = *(void *)(v85 + 8 * v88);
  if (v105) {
    goto LABEL_91;
  }
  uint64_t v88 = v104 + 5;
  if (v104 + 5 >= v92) {
    goto LABEL_92;
  }
  char v105 = *(void *)(v85 + 8 * v88);
  if (v105)
  {
LABEL_91:
    uint64_t v91 = (v105 - 1) & v105;
    int v94 = __clz(__rbit64(v105)) + (v88 << 6);
    goto LABEL_70;
  }

  uint64_t v106 = v104 + 6;
  if (v106 >= v92) {
    goto LABEL_92;
  }
  char v105 = *(void *)(v85 + 8 * v106);
  if (v105)
  {
    uint64_t v88 = v106;
    v2 = v87;
    goto LABEL_91;
  }

  while (1)
  {
    uint64_t v88 = v106 + 1;
    if (__OFADD__(v106, 1LL)) {
      break;
    }
    v2 = v87;
    if (v88 >= v92) {
      goto LABEL_92;
    }
    char v105 = *(void *)(v85 + 8 * v88);
    ++v106;
    if (v105) {
      goto LABEL_91;
    }
  }

  swift_release();
  uint64_t v152 = *(_OWORD *)(v3 + 32);
  v449 = *(_OWORD *)(v3 + 16);
  v450 = v152;
  v451 = *(_OWORD *)(v3 + 48);
  BigString.utf8.getter();
  uint64_t v153 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v382);
  if (v153 < v351) {
    goto LABEL_398;
  }
  v2 = *(void *)(v3 + 64);
  __int128 v154 = *(void *)(v3 + 72);
  __int128 v155 = *(void *)(v3 + 80);
  __int128 v156 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  swift_retain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v351, v349 & 1, v2, v154, v155, v156, (uint64_t *)&v439);
  v349 = v439;
  uint64_t v158 = *((void *)&v440 + 1);
  __int128 v157 = v440;
  v159 = v441;
  swift_unknownObjectRelease();
  v439 = v349;
  v440 = __PAIR128__(v158, v157);
  uint64_t v32 = v351;
  *(void *)&v441 = v159;
  *(void *)&v349 = &v386;
  if (v351 != v153) {
    goto LABEL_190;
  }
LABEL_191:
  AttributedString._InternalRunsSlice.startIndex.getter((void *)v3, v32, v383);
  for (uint64_t i = &v384; v159 < *i && *(void *)(v353 + 16); uint64_t i = &v386)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v439,  v32,  v153,  (void *)v3,  (uint64_t *)&v353,  v10,  v141,  (uint64_t)&v371);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( (void *)v3,  v32,  v153,  (uint64_t *)&v439);
    v159 = v441;
    if (v32 == v153) {
      goto LABEL_191;
    }
LABEL_190:
    v2 = *(void *)(v3 + 64);
    v160 = *(void *)(v3 + 72);
    v161 = *(void *)(v3 + 80);
    uint64_t v162 = *(void *)(v3 + 88);
    __int128 v163 = swift_unknownObjectRetain();
    __int128 v164 = v161;
    uint64_t v32 = v351;
    AttributedString._InternalRuns.endIndex.getter(v163, v160, v164, v162, v385);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_bridgeObjectRelease();
  uint64_t v33 = v371;
  v329 = v359;
  v5 = v340;
  uint64_t v31 = v337 >> 11;
LABEL_195:
  __int128 v166 = *(_OWORD *)(v3 + 32);
  v446 = *(_OWORD *)(v3 + 16);
  v447 = v166;
  v448 = *(_OWORD *)(v3 + 48);
  BigString.utf8.getter();
  uint64_t v167 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v387);
  __int128 v168 = (_OWORD *)*v5;
  __int128 v169 = *(_OWORD *)(*v5 + 32);
  v371 = *(_OWORD *)(*v5 + 16);
  v372 = v169;
  __int128 v170 = *(_OWORD *)(v5 + 1);
  v373 = v168[3];
  v374 = v170;
  __int128 v171 = *(_OWORD *)(v5 + 5);
  v375 = *(_OWORD *)(v5 + 3);
  v376 = v171;
  v377 = *(_OWORD *)(v5 + 7);
  swift_unknownObjectRetain();
  BigString.init()();
  uint64_t v172 = v389;
  v168[1] = v388;
  v168[2] = v172;
  v168[3] = v390;
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<Character>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>,  &demangling cache variable for type metadata for EmptyCollection<Character>,  MEMORY[0x1896195C0]);
  BigSubstring.replaceSubrange<A>(_:with:)();
  v2 = *v5;
  v443 = v375;
  v444 = v376;
  v445 = v377;
  v439 = v371;
  v440 = v372;
  v442 = v374;
  v441 = v373;
  v463 = v377;
  v462 = v376;
  v460 = v374;
  v461 = v375;
  BigSubstring.base.getter();
  v173 = v392;
  *(_OWORD *)(v2 + 16) = v391;
  *(_OWORD *)(v2 + 32) = v173;
  *(_OWORD *)(v2 + 48) = v393;
  swift_unknownObjectRelease();
  v174 = v461;
  *(_OWORD *)(v5 + 1) = v460;
  *(_OWORD *)(v5 + 3) = v174;
  v175 = v463;
  *(_OWORD *)(v5 + 5) = v462;
  *(_OWORD *)(v5 + 7) = v175;
  v176 = *v5;
  v177 = *(_OWORD *)(*v5 + 32);
  v436 = *(_OWORD *)(*v5 + 16);
  v437 = v177;
  v438 = *(_OWORD *)(v176 + 48);
  BigString.utf8.getter();
  v178 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v394);
  v179 = v178 - v167;
  if (__OFSUB__(v178, v167)) {
    goto LABEL_387;
  }
  v180 = v339 + v179;
  if (__OFADD__(v339, v179))
  {
LABEL_388:
    __break(1u);
    goto LABEL_389;
  }

  swift_bridgeObjectRetain();
  v2 = MEMORY[0x18961AFF8];
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v31, v32, v180, v330, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v181 = *v5;
  v182 = *(_OWORD *)(*v5 + 32);
  v433 = *(_OWORD *)(*v5 + 16);
  v434 = v182;
  v435 = *(_OWORD *)(v181 + 48);
  BigString.utf8.getter();
  v183 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v395);
  v184 = v183 - v167;
  if (__OFSUB__(v183, v167))
  {
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }

  v45 = __OFADD__(v33, v184);
  v185 = v33 + v184;
  if (v45)
  {
LABEL_390:
    __break(1u);
    goto LABEL_391;
  }

  if (v185 < v329)
  {
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
    goto LABEL_395;
  }

  v186 = *(void *)(v181 + 80);
  if (!*(void *)(v181 + 64))
  {
    v226 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v226);
    swift_unknownObjectRelease();
    goto LABEL_237;
  }

  v328 = v185;
  v187 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v187);
  swift_unknownObjectRelease_n();
  if (!v186) {
    goto LABEL_237;
  }
  v335 = (void *)v181;
  v188 = (__int128 *)(v181 + 16);
  v189 = *(_OWORD *)(v181 + 32);
  v430 = *(_OWORD *)(v181 + 16);
  v431 = v189;
  v432 = *(_OWORD *)(v181 + 48);
  BigString.utf8.getter();
  BigString.startIndex.getter();
  v190 = BigString.UTF8View.index(_:offsetBy:)();
  v2 = v191;
  v193 = v192;
  v195 = v194;
  outlined release of Locale((uint64_t)v396);
  v196 = *(_OWORD *)(v181 + 32);
  v427 = *(_OWORD *)(v181 + 16);
  v428 = v196;
  v429 = *(_OWORD *)(v181 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(v328, v329))
  {
LABEL_402:
    __break(1u);
    goto LABEL_403;
  }

  v197 = BigString.UTF8View.index(_:offsetBy:)();
  v199 = v198;
  v201 = v200;
  v203 = v202;
  outlined release of Locale((uint64_t)v397);
  specialized Range.init(uncheckedBounds:)(v190, v2, v193, v195, v197, v199, v201, v203, v420);
  *(void *)&v419[0] = MEMORY[0x18961AFF0];
  v204 = v188[1];
  v424 = *v188;
  v425 = v204;
  v426 = v188[2];
  BigString.unicodeScalars.getter();
  v327 = v420[0];
  v205 = BigString.UnicodeScalarView.index(roundingDown:)();
  v207 = v206;
  v2 = v208;
  v210 = v209;
  outlined release of Locale((uint64_t)v398);
  v211 = v188[1];
  v421 = *v188;
  v422 = v211;
  *(void *)&v336 = v188;
  v423 = v188[2];
  BigString.unicodeScalars.getter();
  v326 = v420[4];
  v212 = BigString.UnicodeScalarView.index(roundingUp:)();
  result = outlined release of Locale((uint64_t)v399);
  *(void *)&v464 = v205;
  *((void *)&v464 + 1) = v207;
  *(void *)&v465 = v2;
  *((void *)&v465 + 1) = v210;
  v13 = v205 >> 11;
  v3 = v212 >> 11;
  if (v212 >> 11 < v205 >> 11)
  {
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
    goto LABEL_405;
  }

  v213 = v335;
  uint64_t v15 = v335[8];
  if (v15) {
    v214 = v335[10];
  }
  else {
    v214 = 0LL;
  }
  if (v214 < v13) {
    goto LABEL_404;
  }
  v215 = v335[9];
  unint64_t v10 = v335[11];
  if (!v15 || v13 >= v335[10] || !*(_WORD *)(v15 + 16))
  {
    swift_retain_n();
    v227 = swift_unknownObjectRetain_n();
    v228 = specialized Rope._endPath.getter(v227);
    swift_unknownObjectRelease();
    v2 = 0LL;
    v216 = 0LL;
    if (!v15) {
      goto LABEL_362;
    }
    goto LABEL_239;
  }

  *(void *)&v349 = v335[9];
  v351 = v3;
  v3 = *(unsigned __int8 *)(v15 + 18);
  if (*(_BYTE *)(v15 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain_n();
    v216 = v13;
    v217 = v15;
    while (1)
    {
      v219 = *(unsigned __int16 *)(v217 + 16);
      if (!*(_WORD *)(v217 + 16)) {
        goto LABEL_214;
      }
      v220 = *(void *)(v217 + 40);
      v221 = v216 - v220;
      if (__OFSUB__(v216, v220)) {
        goto LABEL_384;
      }
      if (__OFADD__(v221, 1LL)) {
        goto LABEL_385;
      }
      if (v221 + 1 <= 0)
      {
        v219 = 0LL;
      }

      else
      {
        if ((_DWORD)v219 == 1)
        {
          v216 -= v220;
          goto LABEL_214;
        }

        v222 = *(void *)(v217 + 64);
        v45 = __OFSUB__(v221, v222);
        v223 = v221 - v222;
        if (v45) {
          goto LABEL_400;
        }
        if (__OFADD__(v223, 1LL)) {
          goto LABEL_401;
        }
        if (v223 + 1 < 1)
        {
          v219 = 1LL;
          v216 = v221;
        }

        else
        {
          if ((_DWORD)v219 == 2)
          {
            v216 = v223;
LABEL_214:
            if (v216) {
              goto LABEL_383;
            }
            goto LABEL_215;
          }

          v224 = (void *)(v217 + 88);
          v225 = 2LL;
          while (1)
          {
            if (v219 == v225) {
              goto LABEL_376;
            }
            v216 = v223 - *v224;
            if (__OFSUB__(v223, *v224)) {
              goto LABEL_377;
            }
            if (__OFADD__(v216, 1LL)) {
              goto LABEL_378;
            }
            if (v216 + 1 < 1) {
              break;
            }
            ++v225;
            v224 += 3;
            v223 = v216;
            if (v219 == v225) {
              goto LABEL_214;
            }
          }

          v219 = v225;
          v216 = v223;
        }
      }

    unint64_t v148 = (v154 - 1) & v154;
    v151 = __clz(__rbit64(v154)) + (a3 << 6);
LABEL_166:
    uint64_t v152 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v151);
    uint64_t v42 = *v152;
    uint64_t v153 = v152[1];
    swift_bridgeObjectRetain();
    uint64_t v16 = (uint64_t)&v357;
    specialized Set._Variant.insert(_:)((unint64_t *)&v432, v42, v153);
    result = swift_bridgeObjectRelease();
  }

    uint64_t v106 = *v6;
    if (*v6) {
      uint64_t v106 = *(unsigned __int8 *)(v106 + 18);
    }
    unint64_t v86 = v181;
    if (v96 <= v106)
    {
      swift_bridgeObjectRelease_n();
      result = (void *)swift_bridgeObjectRelease_n();
      goto LABEL_232;
    }

    uint64_t v107 = v181[8];
    uint64_t v108 = v181[11];
    *(void *)&v186 = v180;
    *((void *)&v186 + 1) = v96;
    *(void *)&v187 = v18;
    if (v180 != v108) {
      goto LABEL_372;
    }
    if (v107)
    {
      v109 = *(unsigned __int8 *)(v107 + 18);
      result = (void *)swift_unknownObjectRetain();
      if (v96 <= v109) {
        goto LABEL_373;
      }
    }

    else if (!v96)
    {
      goto LABEL_373;
    }

    uint64_t v110 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C;
    if (((v96 >> v110) & 0xF) != 0)
    {
      uint64_t v111 = ((((v96 >> v110) & 0xF) - 1) << v110) | ((-15LL << v110) - 1) & v96;
      result = (void *)swift_unknownObjectRelease();
      uint64_t v112 = v18;
      v113 = v180;
    }

    else
    {
      swift_unknownObjectRetain();
      int v114 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v186, v107);
      result = (void *)swift_unknownObjectRelease_n();
      if ((v114 & 1) == 0) {
        goto LABEL_384;
      }
      uint64_t v111 = *((void *)&v186 + 1);
      v113 = v186;
      uint64_t v112 = (void *)v187;
    }

    if (v113 != v181[11]) {
      goto LABEL_374;
    }
    if (v112)
    {
      v115 = &v112[3 * ((v111 >> ((4 * *((_BYTE *)v112 + 18) + 8) & 0x3C)) & 0xF)];
      char v116 = v115[4];
      uint64_t v117 = v115[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v118 = v181[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v111, v118);
      char v116 = v119;
      uint64_t v117 = v120;
      swift_unknownObjectRelease();
    }

    uint64_t v6 = v170;
    if ((specialized static Dictionary<>.== infix(_:_:)(v116, v173) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      unint64_t v86 = v181;
LABEL_209:
      swift_bridgeObjectRelease();
      result = (void *)swift_bridgeObjectRelease();
      goto LABEL_232;
    }

    uint64_t v121 = specialized static Set.== infix(_:_:)(v117, v171);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v121 & 1) == 0)
    {
      unint64_t v86 = v181;
      uint64_t v6 = v170;
      goto LABEL_209;
    }

    char v122 = specialized Rope._remove(at:)((uint64_t)&v186, v180, v96);
    uint64_t v123 = v181;
    uint64_t v124 = v181[8];
    uint64_t v125 = v181[11];
    if (v122 >= specialized Rope._endPath.getter(v124))
    {
      uint64_t v124 = 0LL;
    }

    else if (*(_BYTE *)(v124 + 18))
    {
      uint64_t v126 = (v122 >> ((4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      uint64_t v123 = v181;
      uint64_t v127 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v124 + 24, v126, v122);
      swift_unknownObjectRelease();
      uint64_t v124 = v127;
    }

    v183 = v125;
    v184 = v122;
    v185 = v124;
    uint64_t v131 = v186;
    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
    if (v125 != v123[11]) {
      goto LABEL_394;
    }
    uint64_t v132 = v123[8];
    if (v132)
    {
      v133 = *(unsigned __int8 *)(v132 + 18);
      result = (void *)swift_unknownObjectRetain();
      if (v122 <= v133) {
        goto LABEL_395;
      }
    }

    else if (!v122)
    {
      goto LABEL_395;
    }

    if (v124 && (__int128 v164 = (4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C, ((v122 >> v164) & 0xF) != 0))
    {
      v184 = ((((v122 >> v164) & 0xF) - 1) << v164) | ((-15LL << v164) - 1) & v122;
      result = (void *)swift_unknownObjectRelease();
    }

    else
    {
      swift_unknownObjectRetain();
      __int128 v165 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v183, v132);
      result = (void *)swift_unknownObjectRelease_n();
      if ((v165 & 1) == 0) {
        goto LABEL_405;
      }
      uint64_t v125 = v183;
    }

    unint64_t v86 = v181;
    uint64_t v6 = v170;
    if (v125 != v181[11]) {
      goto LABEL_396;
    }
    if (!*v170) {
      goto LABEL_417;
    }
    unint64_t v96 = v184;
    result = (void *)specialized Rope._Node._prepareModify(at:)(v184, (uint64_t)v200);
    v186 = v200[0];
    v187 = v200[1];
    v188 = v200[2];
    uint64_t v20 = __OFSUB__(v21, *((void *)&v200[0] + 1));
    v21 -= *((void *)&v200[0] + 1);
    if (v20) {
      goto LABEL_398;
    }
    if (__OFADD__(*((void *)&v200[0] + 1), v131)) {
      goto LABEL_400;
    }
    *((void *)&v186 + 1) = *((void *)&v200[0] + 1) + v131;
    v180 = v125 + 1;
    v181[11] = v125 + 1;
    if (!v181[8]) {
      goto LABEL_418;
    }
    uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
    uint64_t v81 = v175 - 1;
    if (__OFSUB__(v175, 1LL)) {
      goto LABEL_401;
    }
LABEL_232:
    v137 = v86[8];
    v138 = v86[11];
    *(void *)&v186 = v180;
    *((void *)&v186 + 1) = v96;
    *(void *)&v187 = v18;
    uint64_t v20 = __OFADD__(v81, 1LL);
    uint64_t v139 = v81 + 1;
    if (v20) {
      goto LABEL_349;
    }
    if (v180 != v138) {
      goto LABEL_350;
    }
    if (v18)
    {
      uint64_t v140 = v18[3 * ((v96 >> ((4 * *((_BYTE *)v18 + 18) + 8) & 0x3C)) & 0xF) + 3];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v140 = specialized Rope._Node.subscript.getter(v96, v137);
    }

    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
    uint64_t v20 = __OFADD__(v21, v140);
    v21 += v140;
    if (v20) {
      goto LABEL_351;
    }
    if (v137)
    {
      uint64_t v141 = ((-15LL << ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v137 + 18) | ((unint64_t)*(unsigned __int16 *)(v137 + 16) << ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C));
      result = (void *)swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v141 = 0LL;
    }

    uint64_t v8 = a2;
    unint64_t v10 = v181;
    if (v96 >= v141) {
      goto LABEL_352;
    }
    v175 = v139;
    if (v18
      && (uint64_t v142 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C,
          v143 = ((v96 >> v142) & 0xF) + 1,
          v143 < *((unsigned __int16 *)v18 + 8)))
    {
      uint64_t v16 = (v143 << v142) | ((-15LL << v142) - 1) & v96;
      result = (void *)swift_unknownObjectRelease_n();
    }

    else
    {
      v144 = *(unsigned __int8 *)(v137 + 18);
      v145 = (4 * v144 + 8) & 0x3C;
      v183 = (v96 >> v145) & 0xF;
      if (v144)
      {
        swift_unknownObjectRetain();
        uint64_t v146 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v137 + 24, &v183, (uint64_t)&v186, v137, v144);
        result = (void *)swift_unknownObjectRelease();
        if ((v146 & 1) == 0) {
          goto LABEL_250;
        }
        result = (void *)swift_unknownObjectRelease_n();
        uint64_t v16 = *((void *)&v186 + 1);
      }

      else
      {
        uint64_t v147 = ((v96 >> v145) & 0xF) + 1;
        if (v147 >= *(unsigned __int16 *)(v137 + 16))
        {
LABEL_250:
          if (v137)
          {
            unint64_t v148 = *(unsigned __int8 *)(v137 + 18);
            uint64_t v149 = *(unsigned __int16 *)(v137 + 16);
            result = (void *)swift_unknownObjectRelease_n();
            uint64_t v16 = ((-15LL << ((4 * v148 + 8) & 0x3C)) - 1) & v148 | (unint64_t)(v149 << ((4 * v148 + 8) & 0x3C));
          }

          else
          {
            uint64_t v16 = 0LL;
          }

          *(void *)&v186 = v180;
          *((void *)&v186 + 1) = v16;
          *(void *)&v187 = 0LL;
          goto LABEL_254;
        }

        uint64_t v16 = (v147 << v145) | ((-15LL << v145) - 1) & v96;
        *((void *)&v186 + 1) = v16;
        result = (void *)swift_unknownObjectRelease_n();
        *(void *)&v187 = v137;
      }
    }

    char v105 = *v6;
    if (*v6) {
      char v105 = *(unsigned __int8 *)(v105 + 18);
    }
    uint64_t v84 = v180;
    if (v95 <= v105)
    {
      swift_bridgeObjectRelease_n();
      result = (void *)swift_bridgeObjectRelease_n();
      goto LABEL_232;
    }

    uint64_t v106 = v180[8];
    uint64_t v107 = v180[11];
    *(void *)&v185 = v179;
    *((void *)&v185 + 1) = v95;
    *(void *)&v186 = v18;
    if (v179 != v107) {
      goto LABEL_372;
    }
    if (v106)
    {
      uint64_t v108 = *(unsigned __int8 *)(v106 + 18);
      result = (void *)swift_unknownObjectRetain();
      if (v95 <= v108) {
        goto LABEL_373;
      }
    }

    else if (!v95)
    {
      goto LABEL_373;
    }

    v109 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C;
    if (((v95 >> v109) & 0xF) != 0)
    {
      uint64_t v110 = ((((v95 >> v109) & 0xF) - 1) << v109) | ((-15LL << v109) - 1) & v95;
      result = (void *)swift_unknownObjectRelease();
      uint64_t v111 = v18;
      uint64_t v112 = v179;
    }

    else
    {
      swift_unknownObjectRetain();
      v113 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v185, v106);
      result = (void *)swift_unknownObjectRelease_n();
      if ((v113 & 1) == 0) {
        goto LABEL_384;
      }
      uint64_t v110 = *((void *)&v185 + 1);
      uint64_t v112 = v185;
      uint64_t v111 = (void *)v186;
    }

    uint64_t v6 = v169;
    if (v112 != v180[11]) {
      goto LABEL_374;
    }
    if (v111)
    {
      int v114 = &v111[3 * ((v110 >> ((4 * *((_BYTE *)v111 + 18) + 8) & 0x3C)) & 0xF)];
      v115 = v114[4];
      char v116 = v114[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v117 = v180[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v110, v117);
      v115 = v118;
      char v116 = v119;
      swift_unknownObjectRelease();
    }

    if ((specialized static Dictionary<>.== infix(_:_:)(v115, v172) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v84 = v180;
LABEL_209:
      swift_bridgeObjectRelease();
      result = (void *)swift_bridgeObjectRelease();
      goto LABEL_232;
    }

    uint64_t v120 = specialized static Set.== infix(_:_:)(v116, v170);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v120 & 1) == 0)
    {
      uint64_t v84 = v180;
      uint64_t v6 = v169;
      goto LABEL_209;
    }

    uint64_t v121 = specialized Rope._remove(at:)((uint64_t)&v185, v179, v95);
    char v122 = v180;
    uint64_t v123 = v180[8];
    uint64_t v124 = v180[11];
    if (v121 >= specialized Rope._endPath.getter(v123))
    {
      uint64_t v123 = 0LL;
    }

    else if (*(_BYTE *)(v123 + 18))
    {
      uint64_t v125 = (v121 >> ((4 * *(_BYTE *)(v123 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      char v122 = v180;
      uint64_t v126 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v123 + 24, v125, v121);
      swift_unknownObjectRelease();
      uint64_t v123 = v126;
    }

    v182 = v124;
    v183 = v121;
    v184 = v123;
    uint64_t v130 = v185;
    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
    if (v124 != v122[11]) {
      goto LABEL_394;
    }
    uint64_t v131 = v122[8];
    if (v131)
    {
      uint64_t v132 = *(unsigned __int8 *)(v131 + 18);
      result = (void *)swift_unknownObjectRetain();
      if (v121 <= v132) {
        goto LABEL_395;
      }
    }

    else if (!v121)
    {
      goto LABEL_395;
    }

    if (v123 && (__int128 v163 = (4 * *(_BYTE *)(v123 + 18) + 8) & 0x3C, ((v121 >> v163) & 0xF) != 0))
    {
      v183 = ((((v121 >> v163) & 0xF) - 1) << v163) | ((-15LL << v163) - 1) & v121;
      result = (void *)swift_unknownObjectRelease();
    }

    else
    {
      swift_unknownObjectRetain();
      __int128 v164 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v182, v131);
      result = (void *)swift_unknownObjectRelease_n();
      if ((v164 & 1) == 0) {
        goto LABEL_405;
      }
      uint64_t v124 = v182;
    }

    uint64_t v84 = v180;
    uint64_t v6 = v169;
    if (v124 != v180[11]) {
      goto LABEL_396;
    }
    if (!*v169) {
      goto LABEL_417;
    }
    uint64_t v95 = v183;
    result = (void *)specialized Rope._Node._prepareModify(at:)(v183, (uint64_t)v199);
    v185 = v199[0];
    v186 = v199[1];
    v187 = v199[2];
    uint64_t v20 = __OFSUB__(v21, *((void *)&v199[0] + 1));
    v21 -= *((void *)&v199[0] + 1);
    if (v20) {
      goto LABEL_398;
    }
    if (__OFADD__(*((void *)&v199[0] + 1), v130)) {
      goto LABEL_400;
    }
    *((void *)&v185 + 1) = *((void *)&v199[0] + 1) + v130;
    v179 = v124 + 1;
    v180[11] = v124 + 1;
    if (!v180[8]) {
      goto LABEL_418;
    }
    uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v181, &v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
    uint64_t v80 = v174 - 1;
    if (__OFSUB__(v174, 1LL)) {
      goto LABEL_401;
    }
LABEL_232:
    uint64_t v136 = v84[8];
    v137 = v84[11];
    *(void *)&v185 = v179;
    *((void *)&v185 + 1) = v95;
    *(void *)&v186 = v18;
    uint64_t v20 = __OFADD__(v80, 1LL);
    v138 = v80 + 1;
    if (v20) {
      goto LABEL_349;
    }
    if (v179 != v137) {
      goto LABEL_350;
    }
    if (v18)
    {
      uint64_t v139 = v18[3 * ((v95 >> ((4 * *((_BYTE *)v18 + 18) + 8) & 0x3C)) & 0xF) + 3];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v139 = specialized Rope._Node.subscript.getter(v95, v136);
    }

    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
    uint64_t v20 = __OFADD__(v21, v139);
    v21 += v139;
    if (v20) {
      goto LABEL_351;
    }
    if (v136)
    {
      uint64_t v140 = ((-15LL << ((4 * *(_BYTE *)(v136 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v136 + 18) | ((unint64_t)*(unsigned __int16 *)(v136 + 16) << ((4 * *(_BYTE *)(v136 + 18) + 8) & 0x3C));
      result = (void *)swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v140 = 0LL;
    }

    uint64_t v8 = a2;
    unint64_t v10 = v180;
    if (v95 >= v140) {
      goto LABEL_352;
    }
    v174 = v138;
    if (v18
      && (uint64_t v141 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C,
          uint64_t v142 = ((v95 >> v141) & 0xF) + 1,
          v142 < *((unsigned __int16 *)v18 + 8)))
    {
      uint64_t v16 = (v142 << v141) | ((-15LL << v141) - 1) & v95;
      result = (void *)swift_unknownObjectRelease_n();
    }

    else
    {
      v143 = *(unsigned __int8 *)(v136 + 18);
      v144 = (4 * v143 + 8) & 0x3C;
      v182 = (v95 >> v144) & 0xF;
      if (v143)
      {
        swift_unknownObjectRetain();
        v145 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v136 + 24, &v182, (uint64_t)&v185, v136, v143);
        result = (void *)swift_unknownObjectRelease();
        if ((v145 & 1) == 0) {
          goto LABEL_250;
        }
        result = (void *)swift_unknownObjectRelease_n();
        uint64_t v16 = *((void *)&v185 + 1);
      }

      else
      {
        uint64_t v146 = ((v95 >> v144) & 0xF) + 1;
        if (v146 >= *(unsigned __int16 *)(v136 + 16))
        {
LABEL_250:
          if (v136)
          {
            uint64_t v147 = *(unsigned __int8 *)(v136 + 18);
            unint64_t v148 = *(unsigned __int16 *)(v136 + 16);
            result = (void *)swift_unknownObjectRelease_n();
            uint64_t v16 = ((-15LL << ((4 * v147 + 8) & 0x3C)) - 1) & v147 | (unint64_t)(v148 << ((4 * v147 + 8) & 0x3C));
          }

          else
          {
            uint64_t v16 = 0LL;
          }

          *(void *)&v185 = v179;
          *((void *)&v185 + 1) = v16;
          *(void *)&v186 = 0LL;
          goto LABEL_254;
        }

        uint64_t v16 = (v146 << v144) | ((-15LL << v144) - 1) & v95;
        *((void *)&v185 + 1) = v16;
        result = (void *)swift_unknownObjectRelease_n();
        *(void *)&v186 = v136;
      }
    }

LABEL_81:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v26 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v39 << 8);
    goto LABEL_82;
  }

  if ((void)v95)
  {
    uint64_t v51 = *((void *)&v94 + 1);
    v52 = (void *)v95;
  }

  else if ((BYTE14(v88) & 1) != 0 && (void)v88)
  {
    if ((*(_BYTE *)(v88 + 168) & 1) != 0) {
      uint64_t v53 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v53 = String.subscript.getter();
    }
    uint64_t v51 = MEMORY[0x186E1B610](v53);
    v52 = v59;
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v51 = 0LL;
    v52 = (void *)0xE000000000000000LL;
  }

  swift_bridgeObjectRetain();
  v60._countAndFlagsBits = v51;
  v60._object = v52;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  if (*(void *)v96)
  {
    unint64_t v61 = *((void *)&v95 + 1);
    unint64_t v62 = *(void **)v96;
LABEL_95:
    v76._countAndFlagsBits = 63LL;
    v76._object = (void *)0xE100000000000000LL;
    swift_bridgeObjectRetain();
    v63._countAndFlagsBits = v61;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_99;
  }

  if (HIBYTE(v88) == 1 && (void)v88 && (*(_BYTE *)(v88 + 192) & 1) == 0)
  {
    char v72 = String.subscript.getter();
    unint64_t v61 = MEMORY[0x186E1B610](v72);
    unint64_t v62 = v73;
    swift_bridgeObjectRelease();
    goto LABEL_95;
  }

  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

      Path = 512LL;
LABEL_87:
      uint64_t v107 = (unint64_t)object;
      break;
  }

  while (1)
  {
LABEL_88:
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
    {
      v157._countAndFlagsBits = 0LL;
      v157._object = (void *)0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      v157._countAndFlagsBits = 0xD000000000000014LL;
      v157._object = (void *)0x80000001839C9190LL;
      LODWORD(v155._countAndFlagsBits) = v90;
      v141._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v141);
      swift_bridgeObjectRelease();
      LODWORD(v144) = 0;
      v143 = 73LL;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18302E3F0LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v111 = (int)POSIXErrorCode.rawValue.getter();
    uint64_t v112 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    v113 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v108 = objc_msgSend(v112, sel_initWithDomain_code_userInfo_, v113, v111, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    int v114 = objc_msgSend(v108, sel_domain);
    v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
    uint64_t v90 = v116;

    if (v115 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v90 == v117) {
      break;
    }
    uint64_t v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v118 & 1) != 0) {
      goto LABEL_93;
    }
    __break(1u);
LABEL_132:
    isStackAllocationSafe = String.UTF8View._foreignCount()();
LABEL_96:
    uint64_t v120 = 3 * isStackAllocationSafe;
    if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 == (3 * isStackAllocationSafe) >> 63)
    {
      if (v120 < -1) {
        goto LABEL_136;
      }
      uint64_t v121 = v120 + 1;
      if (v120 < 1024
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1895F8858](isStackAllocationSafe);
        uint64_t v123 = (char *)&v145 - v122;
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v123, v121, 1, Path, v107);
        uint64_t v125 = v124;
        swift_bridgeObjectRelease();
        if ((v125 & 1) != 0) {
          Path = 0LL;
        }
        else {
          Path = strnlen(v123, 0x100uLL);
        }
        LODWORD(v90) = v149;
      }

      else
      {
        uint64_t v126 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v126, v121, 1, Path, v107);
        v128 = v127;
        swift_bridgeObjectRelease();
        if ((v128 & 1) != 0) {
          Path = 0LL;
        }
        else {
          Path = strnlen(v126, 0x100uLL);
        }
        MEMORY[0x186E20E60](v126, -1LL, -1LL);
      }

      swift_bridgeObjectRelease();
      if ((v88 & 0x1000000000000000LL) == 0)
      {
        if ((v88 & 0x2000000000000000LL) != 0) {
          uint64_t v129 = HIBYTE(v88) & 0xF;
        }
        else {
          uint64_t v129 = v86 & 0xFFFFFFFFFFFFLL;
        }
        goto LABEL_112;
      }
    }

    else
    {
      __break(1u);
    }

    uint64_t v129 = String.UTF8View._foreignCount()();
LABEL_112:
    uint64_t v130 = 3 * v129;
    if ((unsigned __int128)(v129 * (__int128)3LL) >> 64 != (3 * v129) >> 63)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
    }

    if (v130 < -1) {
      goto LABEL_137;
    }
    uint64_t v131 = v130 + 1;
    if (v130 < 1024 || (uint64_t v129 = swift_stdlib_isStackAllocationSafe(), (v129 & 1) != 0))
    {
      MEMORY[0x1895F8858](v129);
      v133 = (char *)&v145 - v132;
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v133, v131, 1, v86, v88);
      v135 = v134;
      swift_bridgeObjectRelease();
      if ((v135 & 1) != 0) {
        uint64_t v136 = 0LL;
      }
      else {
        uint64_t v136 = strnlen(v133, 0x401uLL);
      }
      if (Path > 255) {
        goto LABEL_120;
      }
LABEL_125:
      uint64_t v140 = v150;
      if (v136 > 1024) {
        uint64_t v140 = (void *)v86;
      }
      countAndFlagsBits = v140;
      if (v136 <= 1024) {
        uint64_t v107 = (unint64_t)v154;
      }
      else {
        uint64_t v107 = v88;
      }
      Path = 514LL;
    }

    else
    {
      v137 = (const char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v137, v131, 1, v86, v88);
      uint64_t v139 = v138;
      swift_bridgeObjectRelease();
      if ((v139 & 1) != 0) {
        uint64_t v136 = 0LL;
      }
      else {
        uint64_t v136 = strnlen(v137, 0x401uLL);
      }
      MEMORY[0x186E20E60](v137, -1LL, -1LL);
      if (Path <= 255) {
        goto LABEL_125;
      }
LABEL_120:
      Path = 514LL;
      countAndFlagsBits = (void *)v86;
      uint64_t v107 = v88;
    }
  }

  swift_bridgeObjectRelease_n();
LABEL_93:
  swift_bridgeObjectRetain();
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))Path,  (uint64_t)countAndFlagsBits,  v107,  v108,  1702260557LL,  0xE400000000000000LL,  (uint64_t)v150,  (uint64_t)v154,  v147,  v86,  v88);
  return swift_bridgeObjectRelease();
}

          uint64_t v38 = 0LL;
          if ((char *)v32 == v60)
          {
            uint64_t v67 = 0LL;
            char v68 = 0LL;
            uint64_t v63 = 0LL;
            unint64_t v65 = 0LL;
            unint64_t v66 = (uint64_t)v60;
            uint64_t v17 = 1;
            unint64_t v26 = 0LL;
            unint64_t v70 = 1;
            uint64_t v39 = 0;
            goto LABEL_128;
          }

  swift_retain();
  uint64_t v110 = v230;
  swift_retain();
  uint64_t v111 = _foundation_swift_url_feature_enabled();
  v228 = v110;
  if ((v111 & 1) != 0)
  {
    v229 = (id)v83;
    v230 = (id)v85;
    v238._countAndFlagsBits = (uint64_t)v110;
    v238._object = v7;
    v239 = v9;
    v227 = v110;
    swift_retain();
    swift_retain();
    uint64_t v112 = URL.path(percentEncoded:)(1);
    v238 = v112;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v112._countAndFlagsBits, (unint64_t)v112._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v236._countAndFlagsBits = Set.init(minimumCapacity:)();
    v113 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
    int v114 = v236._countAndFlagsBits;
    char v116 = v238._countAndFlagsBits;
    v115 = v238._object;
    uint64_t v117 = ((unint64_t)v238._object >> 56) & 0xF;
    if (v117)
    {
      v236 = v238;
      MEMORY[0x1895F8858](v113);
      v225 = (uint64_t)&v236;
      v226 = v114;
      swift_bridgeObjectRetain();
      uint64_t v118 = v116;
      v119 = v235;
      uint64_t v120 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v224,  v118,  (unint64_t)v115);
      v235 = v119;
      if (v121 == 1)
      {
        uint64_t v123 = (unint64_t)v236._object;
        char v122 = v236._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v124 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v122,  v123,  v114);
        uint64_t v126 = v125;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v124 = (uint64_t)v120;
        uint64_t v126 = v121;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v83 = (uint64_t)v229;
      if (!v126)
      {
        uint64_t v147 = v231;
        swift_release();
        swift_release();
        unint64_t v148 = v227;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v124 = 0LL;
        uint64_t v126 = 0xE000000000000000LL;
        goto LABEL_103;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v124 = 0LL;
      uint64_t v126 = 0xE000000000000000LL;
      uint64_t v83 = (uint64_t)v229;
    }

    uint64_t v147 = v231;
    swift_release();
    swift_release();
    unint64_t v148 = v227;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_103:
    swift_release();
    swift_release();

    uint64_t v9 = v147;
    char v85 = (unint64_t)v230;
    goto LABEL_104;
  }

  uint64_t v127 = objc_msgSend(v110, sel__parameterString);
  if (v127)
  {
    v128 = v127;
    uint64_t v129 = v9;
    uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
    uint64_t v131 = v110;
    v133 = v132;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (uint64_t v134 = objc_msgSend(v131, sel_path)) != 0)
    {
      v135 = v134;
      uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v134);
      v229 = (id)v83;
      v230 = (id)v85;
      v137 = (uint64_t)v136;
      uint64_t v139 = v138;

      v238._countAndFlagsBits = v137;
      v238._object = v139;
      swift_bridgeObjectRetain();
      v140._countAndFlagsBits = 59LL;
      v140._object = (void *)0xE100000000000000LL;
      String.append(_:)(v140);
      uint64_t v83 = (uint64_t)v229;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v141._countAndFlagsBits = (uint64_t)v130;
      v141._object = v133;
      String.append(_:)(v141);
      uint64_t v9 = v129;
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      char v85 = (unint64_t)v230;
    }

    else
    {
      v238._countAndFlagsBits = 59LL;
      v238._object = (void *)0xE100000000000000LL;
      v142._countAndFlagsBits = (uint64_t)v130;
      v142._object = v133;
      String.append(_:)(v142);
      uint64_t v9 = v129;
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    uint64_t v124 = v238._countAndFlagsBits;
    uint64_t v126 = (unint64_t)v238._object;
  }

  else
  {
    v143 = objc_msgSend(v110, sel_path);
    v144 = v110;
    if (v143)
    {
      v145 = v143;
      uint64_t v124 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
      uint64_t v126 = v146;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      uint64_t v124 = 0LL;
      uint64_t v126 = 0xE000000000000000LL;
    }
  }

      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }

                uint64_t v40 = v63;
                swift_unknownObjectRetain();
                uint64_t v42 = specialized Rope._Node.subscript.getter(v11, v7);
                swift_unknownObjectRelease_n();
LABEL_82:
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                result = (uint64_t *)swift_bridgeObjectRelease();
                uint64_t v22 = __OFSUB__(v12, v42);
                v43 = v12 - v42;
                if (!v22)
                {
                  uint64_t v44 = a2 + 1;
                  if (v40 == 2)
                  {
                    v45 = a2[2];
                    unint64_t v66 = *v44;
                    uint64_t v67 = v45;
                    char v68 = a2[3];
                    BigString.utf8.getter();
                    BigString.startIndex.getter();
                    uint64_t v46 = BigString.UTF8View.index(_:offsetBy:)();
                    unint64_t v48 = v47;
                    uint64_t v50 = v49;
                    v52 = v51;
                    unint64_t v54 = v61;
                    uint64_t v53 = v62;
LABEL_87:
                    result = (uint64_t *)outlined release of Locale((uint64_t)v65);
                    *uint64_t v53 = v54;
                    v53[1] = v9;
                    v53[2] = v11;
                    v53[3] = v5;
                    v53[4] = v46;
                    v53[5] = v48;
                    v53[6] = v50;
                    v53[7] = v52;
                    return result;
                  }

                  uint64_t v55 = a2[2];
                  unint64_t v66 = *v44;
                  uint64_t v67 = v55;
                  char v68 = a2[3];
                  BigString.utf8.getter();
                  result = (uint64_t *)v60;
                  unint64_t v54 = v61;
                  uint64_t v53 = v62;
                  if (!__OFSUB__(v43, v60 >> 11))
                  {
                    uint64_t v46 = BigString.UTF8View.index(_:offsetBy:)();
                    unint64_t v48 = v56;
                    uint64_t v50 = v57;
                    v52 = v58;
                    goto LABEL_87;
                  }

                  goto LABEL_102;
                }

                goto LABEL_99;
              }

          swift_bridgeObjectRelease();
          *(_DWORD *)v189 = v110;
          *(_WORD *)&v189[4] = v184;
          *(_WORD *)&v189[6] = v85;
          *(_WORD *)&v189[8] = v183;
          *(_WORD *)&v189[10] = v182;
          *(_WORD *)&v189[12] = v180;
          *(_WORD *)&v189[14] = v178;
          *(_WORD *)&v189[16] = v179;
          *(_WORD *)&v189[18] = v177;
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v83);
          v181 = v90;
          if (v90) {
            goto LABEL_114;
          }
          uint64_t v118 = *(void *)(v83 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v118)) {
            goto LABEL_113;
          }
          _So9NSDecimala__length_setter(v118, v189);
          *(_DWORD *)v190 = *(_DWORD *)v189;
          *(_OWORD *)&v190[4] = *(_OWORD *)&v189[4];
          *(void *)v189 = v84 | 0x30;
          v119._countAndFlagsBits = MEMORY[0x186E1B6AC](v189, 1LL);
          String.append(_:)(v119);
          swift_bridgeObjectRelease();
          v184 = *(unsigned int *)v190;
          v180 = *(unsigned __int16 *)&v190[4];
          v182 = *(unsigned __int16 *)&v190[6];
          LOWORD(v82) = *(_WORD *)&v190[8];
          LOWORD(v83) = *(_WORD *)&v190[10];
          LOWORD(v84) = *(_WORD *)&v190[12];
          LOWORD(v85) = *(_WORD *)&v190[14];
          LOWORD(v86) = *(_WORD *)&v190[16];
          uint64_t v120 = *(unsigned __int16 *)&v190[18];
          *(_DWORD *)v189 = *(_DWORD *)v190;
          *(_WORD *)&v189[4] = *(_WORD *)&v190[4];
          *(_WORD *)&v189[6] = *(_WORD *)&v190[6];
          *(_WORD *)&v189[8] = *(_WORD *)&v190[8];
          *(_WORD *)&v189[10] = *(_WORD *)&v190[10];
          *(_WORD *)&v189[12] = *(_WORD *)&v190[12];
          *(_WORD *)&v189[14] = *(_WORD *)&v190[14];
          *(_WORD *)&v189[16] = *(_WORD *)&v190[16];
          *(_WORD *)&v189[18] = *(_WORD *)&v190[18];
          uint64_t v121 = _So9NSDecimala__length_getter(v189);
          char v105 = v180;
          unint64_t v104 = v184;
          uint64_t v107 = v120;
          uint64_t v106 = v182;
          if (!v121) {
            goto LABEL_92;
          }
        }

        v176 = v110;
        uint64_t v83 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        unint64_t v86 = v83 + 30;
        *(void *)(v83 + 16) = v82;
        bzero((void *)(v83 + 32), 2 * v82);
        v113 = *(unsigned __int16 *)(2 * v82 + v112 + 30);
        int v114 = v113 / 0xA;
        do
        {
          *(_WORD *)(v86 + 2 * v82) = v114;
          LODWORD(v84) = v113 % 0xA;
          if (v82 == 1)
          {
            LODWORD(v110) = v176;
            char v116 = *(void *)(v83 + 16);
            if (!v116) {
              goto LABEL_81;
            }
            goto LABEL_78;
          }

          v113 = *(unsigned __int16 *)(v112 + 28 + 2 * v82) | ((_DWORD)v84 << 16);
          int v114 = v113 / 0xA;
          v115 = v82 - 2;
          --v82;
        }

        while (v115 < *(void *)(v83 + 16));
        __break(1u);
LABEL_88:
        uint64_t v124 = swift_retain_n();
        v181 = &v170;
        MEMORY[0x1895F8858](v124);
        swift_retain();
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v170 - 8), (uint64_t *)v190);
        if (v90) {
          goto LABEL_116;
        }
        char v122 = *(void *)v190;
        v178 = *(void *)&v190[8];
        swift_release();
        swift_release_n();
        v181 = 0LL;
        unint64_t v97 = v180;
        uint64_t v98 = v183;
        if (v178)
        {
          uint64_t v126 = v174;
          uint64_t v125 = v175;
          uint64_t v123 = v178;
          goto LABEL_103;
        }
      }

      unint64_t v104 = v184;
      char v105 = v97;
      uint64_t v106 = v182;
      uint64_t v107 = v183;
LABEL_92:
      LODWORD(v183) = v107;
      *(_DWORD *)v189 = v104;
      *(_WORD *)&v189[4] = v105;
      *(_WORD *)&v189[6] = v106;
      *(_WORD *)&v189[8] = v82;
      *(_WORD *)&v189[10] = v83;
      *(_WORD *)&v189[12] = v84;
      *(_WORD *)&v189[14] = v85;
      *(_WORD *)&v189[16] = v86;
      *(_WORD *)&v189[18] = v107;
      uint64_t v127 = v104;
      v128 = v105;
      uint64_t v129 = _So9NSDecimala__exponent_getter(v189);
      uint64_t v130 = v127;
      if (v129 <= 0)
      {
        v184 = v127;
        *(_DWORD *)v189 = v127;
        v180 = v128;
        *(_WORD *)&v189[4] = v128;
        *(_WORD *)&v189[6] = v106;
        *(_WORD *)&v189[8] = v82;
        *(_WORD *)&v189[10] = v83;
        *(_WORD *)&v189[12] = v84;
        *(_WORD *)&v189[14] = v85;
        *(_WORD *)&v189[16] = v86;
        LODWORD(v128) = v183;
        *(_WORD *)&v189[18] = v183;
        uint64_t v131 = _So9NSDecimala__exponent_getter(v189);
        v182 = v106;
        if (v131)
        {
          uint64_t v132 = v180;
          do
          {
            v133._countAndFlagsBits = 48LL;
            v133._object = (void *)0xE100000000000000LL;
            String.append(_:)(v133);
            *(_DWORD *)v189 = v184;
            *(_WORD *)&v189[4] = v132;
            *(_WORD *)&v189[6] = v182;
            *(_WORD *)&v189[8] = v82;
            *(_WORD *)&v189[10] = v83;
            *(_WORD *)&v189[12] = v84;
            *(_WORD *)&v189[14] = v85;
            *(_WORD *)&v189[16] = v86;
            *(_WORD *)&v189[18] = v128;
            uint64_t v134 = _So9NSDecimala__exponent_getter(v189);
            _So9NSDecimala__exponent_setter((v134 + 1), v190);
            uint64_t v132 = *(_WORD *)&v190[4];
            LOWORD(v82) = *(_WORD *)&v190[8];
            LOWORD(v83) = *(_WORD *)&v190[10];
            LOWORD(v84) = *(_WORD *)&v190[12];
            LOWORD(v85) = *(_WORD *)&v190[14];
            LOWORD(v86) = *(_WORD *)&v190[16];
            LODWORD(v128) = *(unsigned __int16 *)&v190[18];
            v184 = *(unsigned int *)v190;
            *(_DWORD *)v189 = *(_DWORD *)v190;
            *(_WORD *)&v189[4] = *(_WORD *)&v190[4];
            v182 = *(unsigned __int16 *)&v190[6];
            *(_WORD *)&v189[6] = *(_WORD *)&v190[6];
            *(_WORD *)&v189[8] = *(_WORD *)&v190[8];
            *(_WORD *)&v189[10] = *(_WORD *)&v190[10];
            *(_WORD *)&v189[12] = *(_WORD *)&v190[12];
            *(_WORD *)&v189[14] = *(_WORD *)&v190[14];
            *(_WORD *)&v189[16] = *(_WORD *)&v190[16];
            *(_WORD *)&v189[18] = *(_WORD *)&v190[18];
          }

          while (_So9NSDecimala__exponent_getter(v189));
        }

        else
        {
          uint64_t v132 = v180;
        }

        LODWORD(v183) = v128;
        v135._countAndFlagsBits = 46LL;
        v135._object = (void *)0xE100000000000000LL;
        String.append(_:)(v135);
        v136._countAndFlagsBits = 48LL;
        v136._object = (void *)0xE100000000000000LL;
        String.append(_:)(v136);
        LOWORD(v106) = v182;
        uint64_t v130 = v184;
        LOWORD(v128) = v132;
      }

      *(_DWORD *)v189 = v130;
      *(_WORD *)&v189[4] = v128;
      *(_WORD *)&v189[6] = v106;
      *(_WORD *)&v189[8] = v82;
      *(_WORD *)&v189[10] = v83;
      *(_WORD *)&v189[12] = v84;
      *(_WORD *)&v189[14] = v85;
      *(_WORD *)&v189[16] = v86;
      *(_WORD *)&v189[18] = v183;
      if (_So9NSDecimala__isNegative_getter(v189))
      {
        v137._countAndFlagsBits = 45LL;
        v137._object = (void *)0xE100000000000000LL;
        String.append(_:)(v137);
      }

      *(void *)v189 = v185;
      *(void *)&v189[8] = v186;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      char v122 = String.init<A>(_:)();
      uint64_t v123 = v138;
LABEL_102:
      uint64_t v126 = v174;
      uint64_t v125 = v175;
LABEL_103:
      *(void *)v189 = v122;
      *(void *)&v189[8] = v123;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v139 = swift_allocObject();
      *(_OWORD *)(v139 + 16) = xmmword_183720D90;
      *(void *)(v139 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(v139 + 40) = v140;
      *(void *)v190 = 0LL;
      *(void *)&v190[8] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(83LL);
      v141._countAndFlagsBits = 0x7020746F6E6E6143LL;
      v141._object = (void *)0xED00002065737261LL;
      String.append(_:)(v141);
      v142._countAndFlagsBits = v126;
      v142._object = v125;
      String.append(_:)(v142);
      v143._object = (void *)0x80000001839CDF00LL;
      v143._countAndFlagsBits = 0xD000000000000039LL;
      String.append(_:)(v143);
      v144 = MEMORY[0x189617FA8];
      _print_unlocked<A, B>(_:_:)();
      v145._countAndFlagsBits = 0x2220726F2022LL;
      v145._object = (void *)0xE600000000000000LL;
      String.append(_:)(v145);
      _print_unlocked<A, B>(_:_:)();
      v146._countAndFlagsBits = 34LL;
      v146._object = (void *)0xE100000000000000LL;
      String.append(_:)(v146);
      uint64_t v147 = *(void *)v190;
      unint64_t v148 = *(void *)&v190[8];
      *(void *)(v139 + 72) = v144;
      *(void *)(v139 + 48) = v147;
      *(void *)(v139 + 56) = v148;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v149 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(v139 + 32, (uint64_t)v190);
      v150 = *(void *)v190;
      v151 = *(void *)&v190[8];
      swift_retain();
      uint64_t v152 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v151);
      if ((v153 & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        v149[(v152 >> 6) + 8] |= 1LL << v152;
        __int128 v154 = (uint64_t *)(v149[6] + 16 * v152);
        *__int128 v154 = v150;
        v154[1] = v151;
        outlined init with take of Any(&v190[16], (_OWORD *)(v149[7] + 32 * v152));
        __int128 v155 = v149[2];
        __int128 v156 = __OFADD__(v155, 1LL);
        __int128 v157 = v155 + 1;
        if (!v156)
        {
          v149[2] = v157;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          uint64_t v158 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          v159 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v160 = objc_msgSend(v158, sel_initWithDomain_code_userInfo_, v159, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v161 = objc_msgSend(v160, sel_domain);
          uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
          __int128 v164 = v163;

          if (v162 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
            && v164 == v165)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_109;
          }

          __int128 v166 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v166 & 1) != 0)
          {
LABEL_109:
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v11;
          }

        swift_bridgeObjectRelease();
        *(_DWORD *)__int128 v170 = v92;
        *(_WORD *)&v170[4] = v165;
        *(_WORD *)&v170[6] = v70;
        *(_WORD *)&v170[8] = v164;
        *(_WORD *)&v170[10] = v163;
        *(_WORD *)&v170[12] = v162;
        *(_WORD *)&v170[14] = (_WORD)v157;
        *(_WORD *)&v170[16] = (_WORD)v160;
        *(_WORD *)&v170[18] = v156;
        NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v72);
        v161 = v3;
        if (v3) {
          goto LABEL_115;
        }
        uint64_t v100 = *(void *)(v72 + 16);
        swift_bridgeObjectRelease();
        if (HIDWORD(v100)) {
          goto LABEL_114;
        }
        _So9NSDecimala__length_setter(v100, v170);
        *(_DWORD *)__int128 v171 = *(_DWORD *)v170;
        *(_OWORD *)&v171[4] = *(_OWORD *)&v170[4];
        *(void *)__int128 v170 = v71 | 0x30;
        v101._countAndFlagsBits = MEMORY[0x186E1B6AC](v170, 1LL);
        String.append(_:)(v101);
        swift_bridgeObjectRelease();
        __int128 v165 = *(unsigned __int16 *)&v171[4];
        uint64_t v162 = *(unsigned int *)v171;
        __int128 v163 = *(unsigned __int16 *)&v171[6];
        LOWORD(v70) = *(_WORD *)&v171[8];
        LOWORD(v71) = *(_WORD *)&v171[10];
        LOWORD(v72) = *(_WORD *)&v171[12];
        LOWORD(v73) = *(_WORD *)&v171[14];
        LOWORD(v74) = *(_WORD *)&v171[16];
        uint64_t v102 = *(unsigned __int16 *)&v171[18];
        *(_DWORD *)__int128 v170 = *(_DWORD *)v171;
        *(_WORD *)&v170[4] = *(_WORD *)&v171[4];
        *(_WORD *)&v170[6] = *(_WORD *)&v171[6];
        *(_WORD *)&v170[8] = *(_WORD *)&v171[8];
        *(_WORD *)&v170[10] = *(_WORD *)&v171[10];
        *(_WORD *)&v170[12] = *(_WORD *)&v171[12];
        *(_WORD *)&v170[14] = *(_WORD *)&v171[14];
        *(_WORD *)&v170[16] = *(_WORD *)&v171[16];
        *(_WORD *)&v170[18] = *(_WORD *)&v171[18];
        uint64_t v103 = _So9NSDecimala__length_getter(v170);
        uint64_t v89 = v102;
        unint64_t v86 = v165;
        uint64_t v87 = v162;
        uint64_t v88 = v163;
        if (!v103) {
          goto LABEL_92;
        }
      }

      __int128 v155 = v92;
      char v72 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      unint64_t v74 = v72 + 30;
      *(void *)(v72 + 16) = v73;
      bzero((void *)(v72 + 32), 2 * v73);
      uint64_t v95 = *(unsigned __int16 *)(2 * v73 + v94 + 30);
      unint64_t v96 = v95 / 0xA;
      do
      {
        *(_WORD *)(v74 + 2 * v73) = v96;
        LODWORD(v71) = v95 % 0xA;
        if (v73 == 1)
        {
          LODWORD(v92) = v155;
          uint64_t v98 = *(void *)(v72 + 16);
          if (!v98) {
            goto LABEL_81;
          }
          goto LABEL_78;
        }

        uint64_t v95 = *(unsigned __int16 *)(v94 + 28 + 2 * v73) | ((_DWORD)v71 << 16);
        unint64_t v96 = v95 / 0xA;
        unint64_t v97 = v73 - 2;
        --v73;
      }

      while (v97 < *(void *)(v72 + 16));
      __break(1u);
LABEL_88:
      uint64_t v162 = v68;
      uint64_t v106 = (void *)v77;
      uint64_t v107 = swift_retain_n();
      __int128 v157 = &v153;
      MEMORY[0x1895F8858](v107);
      swift_retain();
      v160 = v106;
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v150, (uint64_t *)v171);
      v161 = v3;
      if (v3) {
        goto LABEL_116;
      }
      unint64_t v104 = *(void *)v171;
      __int128 v156 = *(void *)&v171[8];
      swift_release();
      swift_release_n();
      uint64_t v78 = v165;
      char v68 = v162;
      if (v156)
      {
        uint64_t v108 = v159;
        char v105 = v156;
        goto LABEL_104;
      }
    }

    unint64_t v86 = v85;
    uint64_t v87 = v162;
    uint64_t v88 = v163;
    uint64_t v89 = v164;
LABEL_92:
    LODWORD(v164) = v89;
    *(_DWORD *)__int128 v170 = v87;
    *(_WORD *)&v170[4] = v86;
    *(_WORD *)&v170[6] = v88;
    *(_WORD *)&v170[8] = v70;
    *(_WORD *)&v170[10] = v71;
    *(_WORD *)&v170[12] = v72;
    *(_WORD *)&v170[14] = v73;
    *(_WORD *)&v170[16] = v74;
    *(_WORD *)&v170[18] = v89;
    v109 = v86;
    uint64_t v110 = v87;
    uint64_t v111 = _So9NSDecimala__exponent_getter(v170);
    uint64_t v112 = v110;
    if (v111 <= 0)
    {
      uint64_t v162 = v110;
      *(_DWORD *)__int128 v170 = v110;
      __int128 v165 = v109;
      *(_WORD *)&v170[4] = v109;
      *(_WORD *)&v170[6] = v88;
      *(_WORD *)&v170[8] = v70;
      *(_WORD *)&v170[10] = v71;
      *(_WORD *)&v170[12] = v72;
      *(_WORD *)&v170[14] = v73;
      *(_WORD *)&v170[16] = v74;
      int v114 = v164;
      *(_WORD *)&v170[18] = v164;
      v115 = _So9NSDecimala__exponent_getter(v170);
      __int128 v163 = v88;
      if (v115)
      {
        v113 = v165;
        do
        {
          v116._countAndFlagsBits = 48LL;
          v116._object = (void *)0xE100000000000000LL;
          String.append(_:)(v116);
          *(_DWORD *)__int128 v170 = v162;
          *(_WORD *)&v170[4] = v113;
          *(_WORD *)&v170[6] = v163;
          *(_WORD *)&v170[8] = v70;
          *(_WORD *)&v170[10] = v71;
          *(_WORD *)&v170[12] = v72;
          *(_WORD *)&v170[14] = v73;
          *(_WORD *)&v170[16] = v74;
          *(_WORD *)&v170[18] = v114;
          uint64_t v117 = _So9NSDecimala__exponent_getter(v170);
          _So9NSDecimala__exponent_setter((v117 + 1), v171);
          v113 = *(_WORD *)&v171[4];
          LOWORD(v70) = *(_WORD *)&v171[8];
          LOWORD(v71) = *(_WORD *)&v171[10];
          LOWORD(v72) = *(_WORD *)&v171[12];
          LOWORD(v73) = *(_WORD *)&v171[14];
          LOWORD(v74) = *(_WORD *)&v171[16];
          int v114 = *(unsigned __int16 *)&v171[18];
          uint64_t v162 = *(unsigned int *)v171;
          __int128 v163 = *(unsigned __int16 *)&v171[6];
          *(_DWORD *)__int128 v170 = *(_DWORD *)v171;
          *(_WORD *)&v170[4] = *(_WORD *)&v171[4];
          *(_WORD *)&v170[6] = *(_WORD *)&v171[6];
          *(_WORD *)&v170[8] = *(_WORD *)&v171[8];
          *(_WORD *)&v170[10] = *(_WORD *)&v171[10];
          *(_WORD *)&v170[12] = *(_WORD *)&v171[12];
          *(_WORD *)&v170[14] = *(_WORD *)&v171[14];
          *(_WORD *)&v170[16] = *(_WORD *)&v171[16];
          *(_WORD *)&v170[18] = *(_WORD *)&v171[18];
        }

        while (_So9NSDecimala__exponent_getter(v170));
      }

      else
      {
        v113 = v165;
      }

      LODWORD(v164) = v114;
      v118._countAndFlagsBits = 46LL;
      v118._object = (void *)0xE100000000000000LL;
      String.append(_:)(v118);
      v119._countAndFlagsBits = 48LL;
      v119._object = (void *)0xE100000000000000LL;
      String.append(_:)(v119);
      uint64_t v112 = v162;
      LOWORD(v88) = v163;
    }

    else
    {
      v113 = v109;
    }

    *(_DWORD *)__int128 v170 = v112;
    *(_WORD *)&v170[4] = v113;
    *(_WORD *)&v170[6] = v88;
    *(_WORD *)&v170[8] = v70;
    *(_WORD *)&v170[10] = v71;
    *(_WORD *)&v170[12] = v72;
    *(_WORD *)&v170[14] = v73;
    *(_WORD *)&v170[16] = v74;
    *(_WORD *)&v170[18] = v164;
    if (_So9NSDecimala__isNegative_getter(v170))
    {
      v120._countAndFlagsBits = 45LL;
      v120._object = (void *)0xE100000000000000LL;
      String.append(_:)(v120);
    }

    *(void *)__int128 v170 = v166;
    *(void *)&v170[8] = v167;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    unint64_t v104 = String.init<A>(_:)();
    char v105 = v121;
LABEL_103:
    uint64_t v108 = v159;
LABEL_104:
    *(void *)__int128 v170 = v104;
    *(void *)&v170[8] = v105;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 40) = v123;
    *(void *)__int128 v171 = 0LL;
    *(void *)&v171[8] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(83LL);
    v124._countAndFlagsBits = 0x7020746F6E6E6143LL;
    v124._object = (void *)0xED00002065737261LL;
    String.append(_:)(v124);
    v125._countAndFlagsBits = v158;
    v125._object = v108;
    String.append(_:)(v125);
    v126._object = (void *)0x80000001839CDF00LL;
    v126._countAndFlagsBits = 0xD000000000000039LL;
    String.append(_:)(v126);
    uint64_t v127 = MEMORY[0x189617FA8];
    _print_unlocked<A, B>(_:_:)();
    v128._countAndFlagsBits = 0x2220726F2022LL;
    v128._object = (void *)0xE600000000000000LL;
    String.append(_:)(v128);
    _print_unlocked<A, B>(_:_:)();
    v129._countAndFlagsBits = 34LL;
    v129._object = (void *)0xE100000000000000LL;
    String.append(_:)(v129);
    uint64_t v130 = *(void *)v171;
    uint64_t v131 = *(void *)&v171[8];
    *(void *)(inited + 72) = v127;
    *(void *)(inited + 48) = v130;
    *(void *)(inited + 56) = v131;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v132 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)v171);
    v133 = *(void *)v171;
    uint64_t v134 = *(void *)&v171[8];
    swift_retain();
    v135 = specialized __RawDictionaryStorage.find<A>(_:)(v133, v134);
    if ((v136 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      v132[(v135 >> 6) + 8] |= 1LL << v135;
      v137 = (uint64_t *)(v132[6] + 16 * v135);
      void *v137 = v133;
      v137[1] = v134;
      outlined init with take of Any(&v171[16], (_OWORD *)(v132[7] + 32 * v135));
      v138 = v132[2];
      uint64_t v139 = __OFADD__(v138, 1LL);
      uint64_t v140 = v138 + 1;
      if (!v139)
      {
        v132[2] = v140;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        uint64_t v141 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v142 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v143 = objc_msgSend(v141, sel_initWithDomain_code_userInfo_, v142, 2048, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v144 = objc_msgSend(v143, sel_domain);
        v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
        uint64_t v147 = v146;

        if (v145 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v147 == v148)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_110;
        }

        uint64_t v149 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v149 & 1) != 0)
        {
LABEL_110:
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v9;
        }

              v144 = (v151 - 1) & v151;
              uint64_t v147 = __clz(__rbit64(v151)) + (v141 << 6);
            }

            unint64_t v148 = 8 * v147;
            uint64_t v149 = *(void **)(*(void *)(v121 + 56) + v148);
            *(void *)(*(void *)(v128 + 48) + v148) = *(void *)(*(void *)(v121 + 48) + v148);
            *(void *)(*(void *)(v128 + 56) + v148) = v149;
            v150 = v149;
          }
        }

        swift_bridgeObjectRelease();
        if ((v127 & 1) != 0) {
          goto LABEL_22;
        }
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v126,  isUniquelyReferenced_nonNull_native);
      v128 = v217;
      uint64_t v129 = specialized __RawDictionaryStorage.find<A>(_:)(v220);
      if ((v127 & 1) != (v130 & 1)) {
        goto LABEL_118;
      }
      uint64_t v123 = v129;
      if ((v127 & 1) != 0)
      {
LABEL_22:
        int v71 = *(void *)(v128 + 56);

        *(void *)(v71 + 8 * v123) = v119;
        goto LABEL_23;
      }
    }

    *(void *)(v128 + 8 * (v123 >> 6) + 64) |= 1LL << v123;
    uint64_t v131 = 8 * v123;
    *(void *)(*(void *)(v128 + 48) + v131) = v220;
    *(void *)(*(void *)(v128 + 56) + v131) = v119;
    uint64_t v132 = *(void *)(v128 + 16);
    v133 = __OFADD__(v132, 1LL);
    uint64_t v134 = v132 + 1;
    if (v133) {
      goto LABEL_115;
    }
    *(void *)(v128 + 16) = v134;
LABEL_23:
    *(void *)(v109 + 8) = v128;

    char v68 = swift_bridgeObjectRelease();
    if (++v70 == v69) {
      goto LABEL_92;
    }
  }

  (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
  outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for Any?);
LABEL_105:
  uint64_t v46 = v206;
  if (!v203)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v175 = 2;
  }

  swift_willThrow();
  (*(void (**)(char *, char *))(v208 + 8))(v211, v46);
  (*(void (**)(void *, uint64_t))(v179 + 8))(v181, v180);
  (*(void (**)(char *, uint64_t))(v187 + 8))(v205, v197);
  return (uint64_t)v46;
}

  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

          uint64_t v11 = 256LL;
        }

                              unint64_t v65 = *(void *)(v61 + 56) + 16 * v13;
                              *(void *)unint64_t v65 = v64;
                              *(_BYTE *)(v65 + 8) = 0;
LABEL_119:
                              *(void *)(v6 + 8) = v61;
                              swift_bridgeObjectRelease();
                              return swift_bridgeObjectRelease();
                            }

                            unint64_t v69 = v86;
                            unint64_t v61 = v107;
                          }
                        }
                      }
                    }
                  }
                }
              }

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
          unint64_t v65 = static _DictionaryStorage.copy(original:)();
          uint64_t v60 = v65;
          if (!*(void *)(v4 + 16)) {
            goto LABEL_113;
          }
          unint64_t v66 = (char *)(v65 + 64);
          char v105 = v60;
          __srca = (char *)(v4 + 64);
          uint64_t v67 = (unint64_t)((1LL << *(_BYTE *)(v60 + 32)) + 63) >> 6;
          if (v60 != v4 || v66 >= &__srca[8 * v67]) {
            memmove(v66, __srca, 8 * v67);
          }
          char v68 = 0LL;
          *(void *)(v60 + 16) = *(void *)(v4 + 16);
          unint64_t v69 = 1LL << *(_BYTE *)(v4 + 32);
          unint64_t v70 = -1LL;
          if (v69 < 64) {
            unint64_t v70 = ~(-1LL << v69);
          }
          int v71 = v70 & *(void *)(v4 + 64);
          char v72 = (unint64_t)(v69 + 63) >> 6;
          while (1)
          {
            if (v71)
            {
              char v73 = __clz(__rbit64(v71));
              v71 &= v71 - 1;
              unint64_t v74 = v73 | (v68 << 6);
            }

            else
            {
              uint64_t v83 = v68 + 1;
              if (__OFADD__(v68, 1LL))
              {
LABEL_117:
                __break(1u);
                goto LABEL_118;
              }

              if (v83 >= v72) {
                goto LABEL_113;
              }
              uint64_t v84 = *(void *)&__srca[8 * v83];
              ++v68;
              if (!v84)
              {
                char v68 = v83 + 1;
                if (v83 + 1 >= v72) {
                  goto LABEL_113;
                }
                uint64_t v84 = *(void *)&__srca[8 * v68];
                if (!v84)
                {
                  char v68 = v83 + 2;
                  if (v83 + 2 >= v72) {
                    goto LABEL_113;
                  }
                  uint64_t v84 = *(void *)&__srca[8 * v68];
                  if (!v84)
                  {
                    char v68 = v83 + 3;
                    if (v83 + 3 >= v72) {
                      goto LABEL_113;
                    }
                    uint64_t v84 = *(void *)&__srca[8 * v68];
                    if (!v84)
                    {
                      char v68 = v83 + 4;
                      if (v83 + 4 >= v72) {
                        goto LABEL_113;
                      }
                      uint64_t v84 = *(void *)&__srca[8 * v68];
                      if (!v84)
                      {
                        char v68 = v83 + 5;
                        if (v83 + 5 >= v72) {
                          goto LABEL_113;
                        }
                        uint64_t v84 = *(void *)&__srca[8 * v68];
                        if (!v84)
                        {
                          char v68 = v83 + 6;
                          if (v83 + 6 >= v72) {
                            goto LABEL_113;
                          }
                          uint64_t v84 = *(void *)&__srca[8 * v68];
                          if (!v84)
                          {
                            char v85 = v83 + 7;
                            if (v85 >= v72) {
                              goto LABEL_113;
                            }
                            uint64_t v84 = *(void *)&__srca[8 * v85];
                            if (!v84)
                            {
                              while (1)
                              {
                                char v68 = v85 + 1;
                                if (__OFADD__(v85, 1LL)) {
                                  goto LABEL_119;
                                }
                                uint64_t v60 = v105;
                                if (v68 >= v72) {
                                  break;
                                }
                                uint64_t v84 = *(void *)&__srca[8 * v68];
                                ++v85;
                                if (v84) {
                                  goto LABEL_112;
                                }
                              }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  char v30 = *((void *)v2 + 2);
  uint64_t v29 = *((void *)v2 + 3);
  if (v30 >= v29 >> 1) {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v29 > 1),  v30 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v30 + 1;
  v2[v30 + 32] = 6;
  if ((v1 & 0x2000) != 0)
  {
LABEL_86:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
    }
    uint64_t v32 = *((void *)v2 + 2);
    uint64_t v31 = *((void *)v2 + 3);
    if (v32 >= v31 >> 1) {
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v31 > 1),  v32 + 1,  1,  v2);
    }
    *((void *)v2 + 2) = v32 + 1;
    v2[v32 + 32] = 13;
  }

  return v2;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

                          __break(1u);
                          goto LABEL_82;
                        }

                        uint64_t v57 = v62 + 6;
                      }
                    }
                  }
                }
              }

  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

                              __break(1u);
LABEL_82:
                              type metadata accessor for NSGrammaticalDefiniteness(0LL);
                              _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
                              __break(1u);
                              JUMPOUT(0x1833DBCA8LL);
                            }

                            uint64_t v47 = v65;
                          }
                        }
                      }
                    }
                  }
                }
              }

    uint64_t v47 = (unint64_t)&v20[v45];
    goto LABEL_82;
  }

  if (v19 < 1) {
    goto LABEL_253;
  }
  uint64_t v22 = *(unsigned __int8 *)v18;
  if (v22 == 45 || (uint64_t v9 = v18, v22 == 43)) {
    uint64_t v9 = v18 + 1;
  }
  uint64_t v15 = v9 - v18;
  if (v9 - v18 < 0) {
    goto LABEL_255;
  }
  else {
    uint64_t v23 = v21 - (void)v9;
  }
  if (!_stringshims_strncasecmp_l(v9, "0x", v23, 0LL))
  {
    uint64_t v53 = (unsigned __int8 *)(v9 + 2);
    v45 = v21 - (void)(v9 + 2);
    if (v45 >= 1 && (unint64_t)v53 < v21)
    {
      v45 = v53 - v20;
      if (((v53 - v20) & 0x8000000000000000LL) == 0)
      {
        a3 = (uint64_t)&v9[-a4 + 2];
        v45 = &v20[v7] - (unsigned __int8 *)v9 - 3;
        unint64_t v54 = v15 + 3;
        do
        {
          uint64_t v55 = v54;
          uint64_t v7 = *v53;
          if ((v7 - 58) <= 0xF5u
            && (*v53 - 65 > 0x25 || ((1LL << (v7 - 65)) & 0x3F0000003FLL) == 0))
          {
            uint64_t v67 = a4 + a5;
            if (v67 <= a4)
            {
              unint64_t v74 = 0LL;
              uint64_t v15 = 0xED00007265626D75LL;
              uint64_t v21 = 0x6E20786568206E69LL;
              a5 = 1LL;
              goto LABEL_172;
            }

            char v68 = -(uint64_t)a4;
            unint64_t v69 = a5 + a4;
            a5 = 1LL;
            while (1)
            {
              unint64_t v70 = 0LL;
              int v71 = 0LL;
              char v72 = v69 - a4;
              while (1)
              {
                char v73 = *(unsigned __int8 *)(a4 + v71);
                if (v73 == 10) {
                  break;
                }
                if (v73 == 13)
                {
                  int v76 = a4 + v71;
                  if ((unint64_t)v53 >= a4 + v71 + 1)
                  {
                    if (*(_BYTE *)(v76 + 1) == 10) {
                      int v76 = a4 + v71 + 1;
                    }
                  }

                  uint64_t v75 = __OFADD__(a5++, 1LL);
                  if (v75) {
                    goto LABEL_266;
                  }
                  a4 = v76 + 1;
                  goto LABEL_138;
                }

                unint64_t v74 = v71 + 1;
                if (__OFADD__(v71, 1LL)) {
                  goto LABEL_245;
                }
                ++v71;
                --v70;
                if (a4 + v71 >= v67)
                {
                  uint64_t v15 = 0xED00007265626D75LL;
                  uint64_t v21 = 0x6E20786568206E69LL;
LABEL_172:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v42 = v21;
                  *(void *)(v42 + 8) = v15;
                  *(void *)(v42 + 16) = v7;
                  *(void *)(v42 + 24) = a5;
                  *(void *)(v42 + 32) = v74;
                  *(void *)(v42 + 40) = a3;
                  v43 = 1;
                  goto LABEL_45;
                }
              }

              uint64_t v75 = __OFADD__(a5++, 1LL);
              if (v75) {
                goto LABEL_265;
              }
              a4 += v71 + 1;
LABEL_138:
              uint64_t v15 = 0xED00007265626D75LL;
              uint64_t v21 = 0x6E20786568206E69LL;
              if (a4 >= v67)
              {
                unint64_t v74 = 0LL;
                goto LABEL_172;
              }
            }
          }

          uint64_t v33 = v45-- < 1;
          if (v33) {
            break;
          }
          ++a3;
          ++v54;
        }

        while ((v55 & 0x8000000000000000LL) == 0);
      }
    }

    __break(1u);
    goto LABEL_81;
  }

  uint64_t v24 = 0;
  BOOL v25 = 0;
  unint64_t v26 = (const char *)&v20[v7];
  uint64_t v27 = 1;
LABEL_24:
  uint64_t v31 = 0LL;
  uint64_t v32 = v26 - v9;
  while (v9 - (const char *)v20 + v31 >= 0)
  {
    uint64_t v33 = v32-- < 1;
    if (v33) {
      break;
    }
    uint64_t v7 = v9[v31];
    if ((v7 - 58) <= 0xF5u)
    {
      switch(v9[v31])
      {
        case '+':
        case '-':
          if (v31 != 0 || (v24 & 1) == 0) {
            goto LABEL_141;
          }
          uint64_t v24 = 0;
          uint64_t v27 = 0;
          v9 += v31 + 1;
          BOOL v25 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v27 & 1) == 0)
          {
            unint64_t v104 = (unint64_t)&v9[v31];
            char v105 = a4 + a5;
            if (a4 + a5 < v104) {
              goto LABEL_272;
            }
            if (v105 > a4)
            {
              uint64_t v106 = a5 + a4;
              a5 = 1LL;
              uint64_t v107 = a4;
              while (1)
              {
                uint64_t v108 = 0LL;
                v109 = 0LL;
                uint64_t v110 = v106 - v107;
                while (1)
                {
                  if ((uint64_t)(v107 - a4 + v109) < 0 || (uint64_t)(v110 + v108) < 1)
                  {
                    __break(1u);
LABEL_260:
                    __break(1u);
LABEL_261:
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
                  }

                  uint64_t v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    uint64_t v75 = __OFADD__(a5++, 1LL);
                    if (!v75)
                    {
                      v107 += v109 + 1;
                      goto LABEL_234;
                    }

                    goto LABEL_276;
                  }

                  if (v111 == 13) {
                    break;
                  }
                  unint64_t v74 = v109 + 1;
                  if (__OFADD__(v109, 1LL)) {
                    goto LABEL_260;
                  }
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105) {
                    goto LABEL_240;
                  }
                }

                uint64_t v112 = v107 + v109;
                if (v104 < v107 + v109 + 1) {
                  goto LABEL_232;
                }
                if (*(_BYTE *)(v112 + 1) == 10) {
                  uint64_t v112 = v107 + v109 + 1;
                }
LABEL_232:
                uint64_t v75 = __OFADD__(a5++, 1LL);
                if (v75) {
                  goto LABEL_277;
                }
                uint64_t v107 = v112 + 1;
LABEL_234:
                if (v107 >= v105)
                {
                  unint64_t v74 = 0LL;
                  goto LABEL_240;
                }
              }
            }

            unint64_t v74 = 0LL;
            a5 = 1LL;
LABEL_240:
            a3 = (uint64_t)&v9[v31 - a4];
            uint64_t v7 = 46LL;
LABEL_142:
            uint64_t v15 = 0xE900000000000072LL;
            uint64_t v21 = 0x65626D756E206E69LL;
            goto LABEL_172;
          }

          uint64_t v24 = 0;
          uint64_t v27 = 0;
          v9 += v31 + 1;
          BOOL v25 = 1;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v7 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v31 < 1))
          {
LABEL_141:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v9[v31],  a4,  a5);
            unint64_t v74 = v80;
            a3 = v81;
            goto LABEL_142;
          }

          uint64_t v27 = 0;
          v9 += v31 + 1;
          BOOL v25 = 2;
          uint64_t v24 = 1;
          goto LABEL_24;
      }

            swift_bridgeObjectRelease();
            uint64_t v8 = 0LL;
            uint64_t v9 = 0xE000000000000000LL;
            goto LABEL_111;
          }

          v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v39;
          uint64_t v93 = v40 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v98 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          uint64_t v99 = 0LL;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v92,  HIBYTE(v40) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98,  0,  (unsigned __int8 *)&v92,  HIBYTE(v40) & 0xF,  (uint64_t *)&v96);
          v13 = v96;
          uint64_t v15 = v97;
          swift_release();
          goto LABEL_62;
        }

        goto LABEL_55;
      }

      v4 = v5;
    }

    if (percentEncoded)
    {
      if (!v4[218]) {
        goto LABEL_12;
      }
    }

    else if (v4[218])
    {
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFLL;
      if ((v9 & 0x2000000000000000LL) != 0) {
        uint64_t v21 = HIBYTE(v9) & 0xF;
      }
      else {
        uint64_t v21 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v21)
      {
        if ((v9 & 0x1000000000000000LL) != 0)
        {
          uint64_t v34 = 0LL;
          BOOL v35 = 1LL;
        }

        else
        {
          if ((v9 & 0x2000000000000000LL) != 0)
          {
            v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v6;
            uint64_t v93 = v9 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v23 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( (uint64_t)&v92,  HIBYTE(v9) & 0xF,  MEMORY[0x18961AFF8]);
          }

          else
          {
            if ((v6 & 0x1000000000000000LL) != 0) {
              uint64_t v22 = (v9 & 0xFFFFFFFFFFFFFFFLL) + 32;
            }
            else {
              uint64_t v22 = _StringObject.sharedUTF8.getter();
            }
            uint64_t v23 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( v22,  v20,  MEMORY[0x18961AFF8]);
          }

          uint64_t v34 = v23;
          BOOL v35 = v24;
        }

        if (v35 == 1)
        {
          swift_bridgeObjectRetain();
          uint64_t v8 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v8,  v9,  MEMORY[0x18961AFF8]);
          v37 = v36;
          swift_bridgeObjectRelease_n();
          uint64_t v9 = v37;
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = v34;
          uint64_t v9 = v35;
        }

        goto LABEL_111;
      }

      goto LABEL_81;
    }

            free((void *)v19);
            return 0LL;
          }

LABEL_323:
  __break(1u);
LABEL_324:
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  __break(1u);
LABEL_331:
  __break(1u);
LABEL_332:
  __break(1u);
LABEL_333:
  __break(1u);
LABEL_334:
  __break(1u);
LABEL_335:
  __break(1u);
LABEL_336:
  __break(1u);
LABEL_337:
  __break(1u);
LABEL_338:
  __break(1u);
LABEL_339:
  __break(1u);
LABEL_340:
  __break(1u);
LABEL_341:
  __break(1u);
LABEL_342:
  __break(1u);
LABEL_343:
  __break(1u);
LABEL_344:
  __break(1u);
  return result;
}

    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    v194 = swift_allocError();
    *v195 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v128 = (void *)v194;
LABEL_179:

LABEL_180:
    while (2)
    {
      int64_t v59 = v223;
      uint64_t v58 = WORD2(v223);
      v213 = v224;
      uint64_t v36 = WORD1(v224);
      uint64_t v53 = WORD2(v224);
      v217 = v225;
      unint64_t v48 = HIWORD(v223);
      uint64_t v129 = HIWORD(v224);
      uint64_t v100 = HIWORD(v225);
      NSDecimal.asVariableLengthInteger()( v223 | ((unint64_t)WORD2(v223) << 32) | ((unint64_t)HIWORD(v223) << 48),  (unsigned __int16)v224 | ((unint64_t)WORD1(v224) << 16) | ((unint64_t)WORD2(v224) << 32) | ((unint64_t)HIWORD(v224) << 48),  (unsigned __int16)v225 | (HIWORD(v225) << 16));
      uint64_t v98 = v130;
      NSDecimal.asVariableLengthInteger()(v220, v221, v222);
      unint64_t v54 = (char *)v131;
      uint64_t v42 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v98, v131);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_DWORD *)v219 = v59;
      *(_WORD *)&v219[4] = v58;
      *(_WORD *)&v219[6] = v48;
      *(_WORD *)&v219[8] = v213;
      *(_WORD *)&v219[10] = v36;
      *(_WORD *)&v219[12] = v53;
      *(_WORD *)&v219[14] = v129;
      *(_WORD *)&v219[16] = v217;
      *(_WORD *)&v219[18] = v100;
      switch(v42)
      {
        case -1LL:
          return 1LL;
        case 1LL:
          return -1LL;
        case 0LL:
          return v42;
      }

      type metadata accessor for NSComparisonResult(0LL);
      *(void *)v219 = v42;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
LABEL_185:
      uint64_t v132 = *(void *)(v53 + 16);
      swift_bridgeObjectRelease();
      if (v132 >> 31) {
        goto LABEL_363;
      }
      _So9NSDecimala__length_setter(v132, (_DWORD *)v98);
      if (v100 < (uint64_t)0xFFFFFFFF80000000LL)
      {
LABEL_364:
        __break(1u);
        goto LABEL_365;
      }

      if (v100 > 0x7FFFFFFF)
      {
LABEL_365:
        __break(1u);
        goto LABEL_366;
      }

      *(_DWORD *)v219 = *(_DWORD *)v98;
      *(_OWORD *)&v219[4] = *(_OWORD *)(v98 + 4);
      v133 = _So9NSDecimala__exponent_getter(v219);
      uint64_t v60 = __OFSUB__(v133, (_DWORD)v100);
      uint64_t v134 = (v133 - v100);
      if (v60)
      {
LABEL_366:
        __break(1u);
LABEL_367:
        __break(1u);
LABEL_368:
        __break(1u);
LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
      }

      _So9NSDecimala__exponent_setter(v134, (_BYTE *)v98);
      _So9NSDecimala__isCompact_setter_0(0LL, (_DWORD *)v98);
      *(_DWORD *)v219 = *(_DWORD *)v98;
      *(_OWORD *)&v219[4] = *(_OWORD *)(v98 + 4);
      v135 = _So9NSDecimala__length_getter(v219);
      uint64_t v136 = *(unsigned __int16 *)(v36 + 4);
      v137 = *(unsigned __int16 *)(v36 + 6);
      if (!v135)
      {
        v143 = *(_DWORD *)(v36 + 16);
        *(_DWORD *)v219 = *(_DWORD *)v36;
        *(_WORD *)&v219[4] = v136;
        *(_WORD *)&v219[6] = v137;
        *(void *)&v219[8] = *(void *)(v36 + 8);
        *(_DWORD *)&v219[16] = v143;
        v144 = _So9NSDecimala__exponent_getter(v219);
        _So9NSDecimala__exponent_setter(v144, (_BYTE *)v98);
        continue;
      }

      break;
    }

    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v36 | (unint64_t)(v136 << 32) | (v137 << 48),  *(void *)(v36 + 8),  *(_DWORD *)(v36 + 16));
    uint64_t v139 = v138;
    if (v59)
    {
      v109 = specialized abs<A>(_:)(v59);
      uint64_t v140 = *(void *)(v48 + 3056);
      uint64_t v53 = *(void *)(v140 + 16);
      v203 = v59;
      if (v53 > v109)
      {
        swift_bridgeObjectRetain();
        int64_t v59 = v139;
        if ((v109 & 0x8000000000000000LL) == 0) {
          continue;
        }
LABEL_326:
        __break(1u);
LABEL_327:
        __break(1u);
        goto LABEL_328;
      }

      if (v53)
      {
        v159 = v53 - 1;
        swift_bridgeObjectRetain();
        int64_t v59 = v139;
        v218 = v53 - 1;
        while (1)
        {
          v160 = *(void *)(v48 + 3056);
          uint64_t v58 = *(void *)(v160 + 8 * v159 + 32);
          if (v203 < 0)
          {
            v178 = v53;
            swift_bridgeObjectRetain();
            v179 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v59, v58, 8LL);
            if (v54) {
              goto LABEL_279;
            }
            v180 = v179;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            int64_t v59 = v180;
            uint64_t v53 = v178;
          }

          else
          {
            v161 = *(void *)(v59 + 16);
            if (v161 && (uint64_t v162 = *(void *)(v58 + 16)) != 0)
            {
              v214 = v139;
              if (__OFADD__(v161, v162)) {
                goto LABEL_380;
              }
              v210 = v53;
              if (v161 + v162 >= 8) {
                __int128 v163 = 8LL;
              }
              else {
                __int128 v163 = v161 + v162;
              }
              if (v163 < 0) {
                goto LABEL_391;
              }
              swift_bridgeObjectRetain();
              __int128 v164 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v164 + 16) = v163;
              __int128 v165 = v164 + 32;
              bzero((void *)(v164 + 32), 2 * v163);
              __int128 v166 = 0LL;
              uint64_t v167 = v58 + 32;
              do
              {
                __int128 v168 = 0;
                __int128 v169 = 0LL;
                __int128 v170 = v166++;
                do
                {
                  __int128 v171 = v169 + v170;
                  if (__OFADD__(v169, v170)) {
                    goto LABEL_339;
                  }
                  if (v171 >= v163)
                  {
                    if (v168) {
                      goto LABEL_172;
                    }
                    __int128 v168 = *(unsigned __int16 *)(v167 + 2 * v170);
                    if (*(_WORD *)(v167 + 2 * v170))
                    {
                      __int128 v168 = *(unsigned __int16 *)(v59 + 2 * v169 + 32);
                      if (*(_WORD *)(v59 + 2 * v169 + 32)) {
                        goto LABEL_172;
                      }
                    }
                  }

                  else
                  {
                    if (v171 < 0) {
                      goto LABEL_348;
                    }
                    uint64_t v172 = 2 * v171;
                    v173 = v168
                    __int128 v168 = HIWORD(v173);
                    *(_WORD *)(v165 + v172) = v173;
                  }

                  ++v169;
                }

                while (v161 != v169);
                if (v168)
                {
                  uint64_t v60 = __OFADD__(v161, v170);
                  v174 = v161 + v170;
                  if (v60) {
                    goto LABEL_383;
                  }
                  if (v174 >= v163) {
                    goto LABEL_172;
                  }
                  if (v174 < 0) {
                    goto LABEL_384;
                  }
                  *(_WORD *)(v165 + 2 * v174) = v168;
                }
              }

              while (v166 != v162);
              v175 = *(void *)(v164 + 16);
              if (v175 && !*(_WORD *)(v165 + 2 * v175 - 2))
              {
                v176 = v175 + 14;
                do
                {
                  *(void *)(v164 + 16) = v176 - 15;
                  if (v176 == 15) {
                    break;
                  }
                }

                while (!*(unsigned __int16 *)(v164 + 2 * v176--));
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              int64_t v59 = v164;
              unint64_t v48 = 0x18C5C8000LL;
              uint64_t v53 = v210;
              uint64_t v139 = v214;
            }

            else
            {
              swift_bridgeObjectRelease();
              int64_t v59 = MEMORY[0x18961AFE8];
            }

            v159 = v218;
          }

          v109 -= v159;
          if (v53 > v109) {
            goto LABEL_325;
          }
        }

        __break(1u);
LABEL_374:
        __break(1u);
LABEL_375:
        __break(1u);
LABEL_376:
        __break(1u);
LABEL_377:
        __break(1u);
LABEL_378:
        __break(1u);
      }

      __break(1u);
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
      goto LABEL_382;
    }

    break;
  }

  uint64_t v142 = v138;
LABEL_285:
  uint64_t v56 = v36;
  NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v142);
  if (v54) {
    goto LABEL_178;
  }
  uint64_t v57 = *(void *)(v142 + 16);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v57))
  {
    _So9NSDecimala__length_setter(v57, (_DWORD *)v36);
    if (v59 <= 0x7FFFFFFF)
    {
      *(_DWORD *)v219 = *(_DWORD *)v36;
      *(_OWORD *)&v219[4] = *(_OWORD *)(v36 + 4);
      v181 = _So9NSDecimala__exponent_getter(v219);
      uint64_t v60 = __OFSUB__(v181, (_DWORD)v59);
      uint64_t v81 = (v181 - v59);
      if (!v60) {
        goto LABEL_83;
      }
      __break(1u);
LABEL_292:
      __break(1u);
      goto LABEL_293;
    }

    __break(1u);
LABEL_324:
    swift_once();
  }

  uint64_t v41 = v43;
  if (v44 < 0)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    uint64_t v39 = swift_allocError();
    *uint64_t v64 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    LOWORD(v29) = 0;
    BOOL v35 = v173;
    goto LABEL_130;
  }

                  if (!v63) {
                    goto LABEL_519;
                  }
                  __break(1u);
                  goto LABEL_325;
                }

                goto LABEL_564;
              }

void *AttributedString.Guts.getUniformValues(in:)(void *result)
{
  uint64_t v2 = *result >> 11;
  uint64_t v3 = v1[8];
  if (v3) {
    uint64_t v4 = v1[10];
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (v4 < v2) {
    goto LABEL_306;
  }
  unint64_t v5 = result[4];
  uint64_t v6 = v1[9];
  uint64_t v107 = v1[11];
  uint64_t v101 = *result >> 11;
  if (!v3 || (v2 < v1[10] ? (BOOL v7 = *(unsigned __int16 *)(v3 + 16) == 0) : (BOOL v7 = 1), v7))
  {
    swift_retain_n();
    unint64_t v8 = swift_unknownObjectRetain_n();
    unint64_t v9 = specialized Rope._endPath.getter(v8);
    swift_unknownObjectRelease();
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    if (!v3) {
      goto LABEL_264;
    }
    goto LABEL_12;
  }

  unint64_t v9 = *(unsigned __int8 *)(v3 + 18);
  if (*(_BYTE *)(v3 + 18))
  {
    swift_unknownObjectRetain_n();
    result = (void *)swift_retain_n();
    uint64_t v11 = v2;
    uint64_t v85 = v3;
    while (1)
    {
      uint64_t v87 = *(unsigned __int16 *)(v85 + 16);
      if (!*(_WORD *)(v85 + 16)) {
        goto LABEL_211;
      }
      uint64_t v88 = *(void *)(v85 + 40);
      uint64_t v89 = v11 - v88;
      if (__OFSUB__(v11, v88)) {
        goto LABEL_292;
      }
      if (__OFADD__(v89, 1LL)) {
        goto LABEL_293;
      }
      if (v89 + 1 <= 0)
      {
        uint64_t v87 = 0LL;
        goto LABEL_212;
      }

      if ((_DWORD)v87 == 1) {
        break;
      }
      uint64_t v90 = *(void *)(v85 + 64);
      BOOL v12 = __OFSUB__(v89, v90);
      uint64_t v91 = v89 - v90;
      if (v12) {
        goto LABEL_304;
      }
      if (__OFADD__(v91, 1LL)) {
        goto LABEL_305;
      }
      if (v91 + 1 < 1)
      {
        uint64_t v87 = 1LL;
        uint64_t v11 = v89;
        goto LABEL_212;
      }

      if ((_DWORD)v87 == 2)
      {
        uint64_t v11 = v91;
        goto LABEL_211;
      }

      v92 = (void *)(v85 + 88);
      uint64_t v93 = 2LL;
      while (1)
      {
        if (v87 == v93) {
          goto LABEL_285;
        }
        uint64_t v11 = v91 - *v92;
        if (__OFSUB__(v91, *v92))
        {
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
          goto LABEL_289;
        }

        if (__OFADD__(v11, 1LL)) {
          goto LABEL_287;
        }
        if (v11 + 1 < 1) {
          break;
        }
        ++v93;
        v92 += 3;
        uint64_t v91 = v11;
        if (v87 == v93) {
          goto LABEL_211;
        }
      }

      uint64_t v87 = v93;
      uint64_t v11 = v91;
LABEL_212:
      char v86 = (4 * *(_BYTE *)(v85 + 18) + 8) & 0x3C;
      unint64_t v9 = ((-15LL << v86) - 1) & v9 | (v87 << v86);
      uint64_t v10 = *(void *)(v85 + 24 + 24 * v87);
      swift_unknownObjectRetain();
      result = (void *)swift_unknownObjectRelease();
      uint64_t v85 = v10;
      if (!*(_BYTE *)(v10 + 18)) {
        goto LABEL_234;
      }
    }

    v11 -= v88;
LABEL_211:
    if (!v11) {
      goto LABEL_212;
    }
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
LABEL_309:
    __break(1u);
LABEL_310:
    __break(1u);
LABEL_311:
    __break(1u);
LABEL_312:
    __break(1u);
LABEL_313:
    __break(1u);
LABEL_314:
    __break(1u);
    goto LABEL_315;
  }

  swift_unknownObjectRetain_n();
  result = (void *)swift_retain_n();
  uint64_t v11 = v2;
  uint64_t v10 = v3;
LABEL_234:
  uint64_t v2 = *(unsigned __int16 *)(v10 + 16);
  if (!*(_WORD *)(v10 + 16)) {
    goto LABEL_240;
  }
  uint64_t v94 = *(void *)(v10 + 24);
  uint64_t v95 = v11 - v94;
  if (__OFSUB__(v11, v94)) {
    goto LABEL_320;
  }
  if (__OFADD__(v95, 1LL))
  {
LABEL_321:
    __break(1u);
LABEL_322:
    __break(1u);
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
    goto LABEL_325;
  }

  if (v95 + 1 <= 0)
  {
LABEL_242:
    uint64_t v2 = 0LL;
    goto LABEL_263;
  }

  if ((_DWORD)v2 == 1)
  {
    v11 -= v94;
LABEL_240:
    if (!v11) {
      goto LABEL_263;
    }
    __break(1u);
    goto LABEL_242;
  }

  uint64_t v96 = *(void *)(v10 + 48);
  BOOL v12 = __OFSUB__(v95, v96);
  uint64_t v23 = v95 - v96;
  if (v12) {
    goto LABEL_324;
  }
  if (__OFADD__(v23, 1LL))
  {
LABEL_325:
    __break(1u);
    return result;
  }

  if (v23 + 1 >= 1)
  {
    if ((_DWORD)v2 != 2) {
      goto LABEL_252;
    }
    uint64_t v11 = v23;
    goto LABEL_240;
  }

  uint64_t v2 = 1LL;
  uint64_t v11 = v95;
LABEL_263:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v9 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v2 << 8);
  uint64_t v2 = v101;
  if (v3)
  {
LABEL_12:
    swift_unknownObjectRetain();
    uint64_t v104 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v107, v9, v10, v3, v6);
    swift_release();
    result = (void *)swift_unknownObjectRelease_n();
    BOOL v12 = __OFSUB__(v2, v11);
    uint64_t v13 = v2 - v11;
    if (v12) {
      goto LABEL_266;
    }
  }

  else
  {
LABEL_264:
    result = (void *)swift_release();
    uint64_t v104 = 0LL;
    BOOL v12 = __OFSUB__(v2, v11);
    uint64_t v13 = v2 - v11;
    if (v12)
    {
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
LABEL_276:
      __break(1u);
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
LABEL_279:
      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      __break(1u);
      goto LABEL_282;
    }
  }

  int64_t v106 = v5 >> 11;
  char v102 = 1;
  uint64_t v103 = MEMORY[0x18961AFF0];
  while (1)
  {
    uint64_t v14 = v1[8];
    if (v2 != v106)
    {
      if (v14) {
        uint64_t v20 = v1[10];
      }
      else {
        uint64_t v20 = 0LL;
      }
      goto LABEL_82;
    }

    uint64_t v6 = v1[10];
    if (v14) {
      uint64_t v15 = v1[10];
    }
    else {
      uint64_t v15 = 0LL;
    }
    if (v15 < v2) {
      goto LABEL_280;
    }
    if (v14)
    {
      uint64_t v98 = v1[11];
      uint64_t v99 = v1[9];
      uint64_t v16 = *(unsigned __int16 *)(v14 + 16);
      uint64_t v17 = *(unsigned __int8 *)(v14 + 18);
      if (v2 >= v6 || (_DWORD)v16 == 0)
      {
        unint64_t v19 = ((-15LL << ((4 * v17 + 8) & 0x3C)) - 1) & v17 | (unint64_t)(v16 << ((4 * v17 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v2 = 0LL;
        unint64_t v5 = 0LL;
LABEL_79:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v98, v19, v5, v14, v99);
        result = (void *)swift_unknownObjectRelease_n();
        goto LABEL_80;
      }

      if (*(_BYTE *)(v14 + 18))
      {
        result = (void *)swift_unknownObjectRetain_n();
        uint64_t v3 = v14;
        while (1)
        {
          uint64_t v23 = *(unsigned __int16 *)(v3 + 16);
          if (!*(_WORD *)(v3 + 16)) {
            goto LABEL_33;
          }
          uint64_t v21 = *(void *)(v3 + 40);
          uint64_t v24 = v2 - v21;
          if (__OFSUB__(v2, v21)) {
            goto LABEL_260;
          }
          uint64_t v21 = v24 + 1;
          if (__OFADD__(v24, 1LL)) {
            goto LABEL_261;
          }
          if (v21 <= 0)
          {
            uint64_t v23 = 0LL;
            goto LABEL_34;
          }

          if ((_DWORD)v23 == 1)
          {
            uint64_t v2 = v24;
            goto LABEL_33;
          }

          uint64_t v25 = *(void *)(v3 + 64);
          BOOL v12 = __OFSUB__(v24, v25);
          uint64_t v21 = v24 - v25;
          if (v12) {
            goto LABEL_278;
          }
          if (__OFADD__(v21, 1LL)) {
            goto LABEL_279;
          }
          if (v21 + 1 < 1)
          {
            uint64_t v23 = 1LL;
            uint64_t v2 = v24;
            goto LABEL_34;
          }

          if ((_DWORD)v23 == 2) {
            break;
          }
          unint64_t v26 = (void *)(v3 + 88);
          uint64_t v27 = 2LL;
          while (1)
          {
            if (v23 == v27)
            {
              __break(1u);
LABEL_250:
              __break(1u);
LABEL_251:
              __break(1u);
LABEL_252:
              unint64_t v97 = (void *)(v10 + 72);
              uint64_t v21 = 2LL;
              while (v2 != v21)
              {
                uint64_t v11 = v23 - *v97;
                if (__OFSUB__(v23, *v97)) {
                  goto LABEL_316;
                }
                if (__OFADD__(v11, 1LL)) {
                  goto LABEL_317;
                }
                if (v11 + 1 < 1) {
                  goto LABEL_262;
                }
                ++v21;
                v97 += 3;
                uint64_t v23 = v11;
                if (v2 == v21) {
                  goto LABEL_240;
                }
              }

LABEL_315:
              __break(1u);
LABEL_316:
              __break(1u);
LABEL_317:
              __break(1u);
LABEL_318:
              __break(1u);
              goto LABEL_319;
            }

            uint64_t v2 = v21 - *v26;
            if (__OFSUB__(v21, *v26)) {
              goto LABEL_250;
            }
            if (__OFADD__(v2, 1LL)) {
              goto LABEL_251;
            }
            if (v2 + 1 < 1) {
              break;
            }
            ++v27;
            v26 += 3;
            uint64_t v21 = v2;
            if (v23 == v27) {
              goto LABEL_33;
            }
          }

          uint64_t v23 = v27;
          uint64_t v2 = v21;
LABEL_34:
          char v22 = (4 * *(_BYTE *)(v3 + 18) + 8) & 0x3C;
          uint64_t v17 = ((-15LL << v22) - 1) & v17 | (v23 << v22);
          unint64_t v5 = *(void *)(v3 + 24 + 24 * v23);
          swift_unknownObjectRetain();
          result = (void *)swift_unknownObjectRelease();
          uint64_t v3 = v5;
          if (!*(_BYTE *)(v5 + 18)) {
            goto LABEL_56;
          }
        }

        uint64_t v2 = v21;
LABEL_33:
        if (!v2) {
          goto LABEL_34;
        }
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        uint64_t v2 = v21;
        uint64_t v11 = v23;
        goto LABEL_263;
      }

      result = (void *)swift_unknownObjectRetain_n();
      uint64_t v17 = 0LL;
      unint64_t v5 = v14;
LABEL_56:
      uint64_t v28 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16)) {
        goto LABEL_65;
      }
      uint64_t v29 = *(void *)(v5 + 24);
      BOOL v12 = __OFSUB__(v2, v29);
      uint64_t v30 = v2 - v29;
      if (v12) {
        goto LABEL_300;
      }
      if (__OFADD__(v30, 1LL)) {
        goto LABEL_301;
      }
      if (v30 + 1 <= 0)
      {
        uint64_t v28 = 0LL;
      }

      else
      {
        if ((_DWORD)v28 == 1)
        {
LABEL_66:
          if (v30) {
            goto LABEL_299;
          }
          uint64_t v2 = 0LL;
          goto LABEL_78;
        }

        uint64_t v31 = *(void *)(v5 + 48);
        uint64_t v2 = v30 - v31;
        if (__OFSUB__(v30, v31)) {
          goto LABEL_310;
        }
        if (__OFADD__(v2, 1LL)) {
          goto LABEL_311;
        }
        if (v2 + 1 < 1)
        {
          uint64_t v28 = 1LL;
          uint64_t v2 = v30;
        }

        else
        {
          if ((_DWORD)v28 == 2)
          {
LABEL_65:
            uint64_t v30 = v2;
            goto LABEL_66;
          }

          uint64_t v32 = (void *)(v5 + 72);
          uint64_t v33 = 2LL;
          while (1)
          {
            if (v28 == v33) {
              goto LABEL_296;
            }
            uint64_t v30 = v2 - *v32;
            if (__OFSUB__(v2, *v32)) {
              goto LABEL_297;
            }
            if (__OFADD__(v30, 1LL)) {
              goto LABEL_298;
            }
            if (v30 + 1 < 1) {
              break;
            }
            ++v33;
            v32 += 3;
            uint64_t v2 = v30;
            if (v28 == v33) {
              goto LABEL_66;
            }
          }

          uint64_t v28 = v33;
        }
      }

              __break(1u);
              goto LABEL_316;
            }

              *(void *)&v372 = v363;
              *((void *)&v372 + 1) = v357;
              *(void *)&v373 = v356;
              *((void *)&v373 + 1) = v355;
              *(void *)&v374 = v255;
              *((void *)&v374 + 1) = v263;
              *(void *)&v375 = v257;
              *((void *)&v375 + 1) = v258;
              v266 = *(void *)(v202 + 16);
              v371 = v263;
              if (v266)
              {
                v267 = 40LL;
                while (!*(void *)(v202 + v267))
                {
                  v267 += 16LL;
                  if (!--v266) {
                    goto LABEL_319;
                  }
                }

                *(void *)&v394 = MEMORY[0x18961AFE8];
                swift_bridgeObjectRetain();
                v303 = (unint64_t *)(v202 + 40);
                do
                {
                  v308 = *v303;
                  if (*v303)
                  {
                    v309 = *(v303 - 1);
                    if ((v308 & 0x2000000000000000LL) != 0 ? HIBYTE(v308) & 0xF : v309 & 0xFFFFFFFFFFFFLL)
                    {
                      if ((v308 & 0x1000000000000000LL) != 0)
                      {
                        v304 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                      }

                      else
                      {
                        if ((v308 & 0x2000000000000000LL) != 0)
                        {
                          v379 = *(v303 - 1);
                          v380 = v308 & 0xFFFFFFFFFFFFFFLL;
                          swift_bridgeObjectRetain();
                        }

                        else
                        {
                          if ((v309 & 0x1000000000000000LL) == 0) {
                            _StringObject.sharedUTF8.getter();
                          }
                          swift_bridgeObjectRetain();
                        }

                        v304 = _decodeScalar(_:startingAt:)();
                        swift_bridgeObjectRelease();
                      }

                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      v305 = *(void *)(v394 + 16);
                      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v305);
                      v306 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v305, v304);
                      destructiveProjectEnumData for PredicateCodableError(v306, v307);
                    }
                  }

                  v303 += 2;
                  --v262;
                }

                while (v262);
                swift_bridgeObjectRelease();
                v311 = v394;
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)v422);
                v312 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v311);
                v314 = v313;
                v316 = v315;
                v318 = v317;
                swift_bridgeObjectRelease();
                outlined release of Locale((uint64_t)&v379);
                outlined release of Locale((uint64_t)v425);
                result = outlined release of AttributedString.Runs((uint64_t)v445);
                v268 = v345;
                if (v318 != 2)
                {
                  if (v343 > v312 >> 10)
                  {
LABEL_431:
                    __break(1u);
                    goto LABEL_432;
                  }

                  v255 = v312;
                  v371 = v314;
                  v257 = v316;
                  v258 = v318;
                }

LABEL_282:
                      __break(1u);
LABEL_283:
                      __break(1u);
LABEL_284:
                      __break(1u);
LABEL_285:
                      __break(1u);
                      goto LABEL_286;
                    }

              lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
              swift_allocError();
              *v237 = v23;
              swift_willThrow();
              swift_bridgeObjectRelease();
              v244 = 0;
              v243 = 897LL;
              goto LABEL_284;
            }

LABEL_176:
                uint64_t v62 = v77;
LABEL_182:
                if (v62) {
                  goto LABEL_307;
                }
              }
            }
          }

  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  if (!v7) {
    __break(1u);
  }
LABEL_206:
  __break(1u);
LABEL_207:
  if (!v7) {
    __break(1u);
  }
LABEL_209:
  __break(1u);
  return result;
}

                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease();
                              goto LABEL_216;
                            }

                            goto LABEL_275;
                          }

LABEL_183:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v9 = v61 & 0xFFFFFFFFFFFFF0FFLL | (v75 << 8);
          uint64_t v2 = v101;
        }

        else
        {
          unint64_t v9 = ((-15LL << ((4 * v61 + 8) & 0x3C)) - 1) & v61 | ((unint64_t)*(unsigned __int16 *)(v59 + 16) << ((4 * v61 + 8) & 0x3C));
          swift_unknownObjectRetain();
          uint64_t v62 = 0LL;
          uint64_t v10 = 0LL;
        }

        swift_unknownObjectRetain();
        uint64_t v104 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v107, v9, v10, v59, v105);
        swift_release();
        result = (void *)swift_unknownObjectRelease_n();
      }

      else
      {
        result = (void *)swift_release();
        uint64_t v62 = 0LL;
        uint64_t v10 = 0LL;
        unint64_t v9 = 0LL;
        uint64_t v104 = 0LL;
      }

      uint64_t v13 = v2 - v62;
      if (__OFSUB__(v2, v62)) {
        goto LABEL_295;
      }
      goto LABEL_186;
    }

    swift_release();
LABEL_186:
    if ((v102 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = (void *)swift_bridgeObjectRelease();
      char v102 = 0;
      uint64_t v103 = v5;
    }

    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v79 = swift_bridgeObjectRetain();
      uint64_t v80 = specialized _NativeDictionary.filter(_:)(v79, v100, v5, v35);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      result = (void *)swift_bridgeObjectRelease();
      char v102 = 0;
      uint64_t v103 = v80;
      if (!*(void *)(v80 + 16)) {
        goto LABEL_207;
      }
    }
  }

  uint64_t v80 = v103;
LABEL_207:
  swift_release();
  return (void *)v80;
}

            if ((v178 & 1) != 0)
            {
              uint64_t v112 = v181;
            }

            else
            {
              swift_retain();
              v180();
              uint64_t v112 = v181;
              outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v180);
            }

            if ((v177 & 1) == 0)
            {
              swift_retain();
              v182();
              outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v182);
            }

            if (*(void *)(a8 + 16))
            {
              v113 = @"NSFileProtectionKey";
              int v114 = specialized __RawDictionaryStorage.find<A>(_:)(v113);
              if ((v115 & 1) != 0) {
                outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v114, (uint64_t)&v189);
              }
              else {
                memset(&v189, 0, 32);
              }

              if (v189.f_bavail)
              {
                type metadata accessor for NSFileProtectionType(0LL);
                if ((swift_dynamicCast() & 1) == 0) {
                  goto LABEL_112;
                }
                uint64_t v72 = *(id *)&v198;
                char v116 = NSFileProtectionType.intValue.getter(v72);
                if ((v116 & 0x100000000LL) != 0)
                {
LABEL_234:

                  goto LABEL_112;
                }

                uint64_t v117 = v116;
                getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)( v112,  v13,  a2,  v187,  (uint64_t)v196);
                outlined init with take of LocalePreferences?( (uint64_t)v196,  (uint64_t)v197,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
                outlined init with take of LocalePreferences?( (uint64_t)v197,  (uint64_t)&v198,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
                if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)&v198) == 1)
                {
                  outlined init with take of LocalePreferences?( (uint64_t)v197,  (uint64_t)&v189,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
                  destructiveProjectEnumData for PredicateCodableError(&v189, v118);
                  lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
                  swift_willThrowTypedImpl();
                  goto LABEL_234;
                }

                outlined init with take of LocalePreferences?( (uint64_t)v197,  (uint64_t)&v194,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
                uint64_t v120 = *(unsigned __int16 *)(destructiveProjectEnumData for PredicateCodableError(&v194, v119) + 4);
                uint64_t v121 = S_IFMT.getter() & v120;
                if (v121 != (unsigned __int16)S_IFREG.getter())
                {
                  getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)( v112,  v13,  a2,  v187,  (uint64_t)v191);
                  outlined init with take of LocalePreferences?( (uint64_t)v191,  (uint64_t)&v192,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
                  outlined init with take of LocalePreferences?( (uint64_t)&v192,  (uint64_t)&v189,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
                  if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)&v189) == 1)
                  {
                    outlined init with take of LocalePreferences?( (uint64_t)&v192,  (uint64_t)v190,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
                    destructiveProjectEnumData for PredicateCodableError(v190, v133);
                    lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
                    swift_willThrowTypedImpl();
                    goto LABEL_234;
                  }

                  outlined init with take of LocalePreferences?( (uint64_t)&v192,  (uint64_t)v190,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
                  uint64_t v136 = *(unsigned __int16 *)(destructiveProjectEnumData for PredicateCodableError(v190, v135) + 4);
                  v137 = S_IFMT.getter() & v136;
                }

                char v122 = specialized static _FileManagerImpl._fileProtectionValueForPath(_:)(v13);
                if ((v122 & 0x100000000LL) == 0 && (_DWORD)v122 == (_DWORD)v117) {
                  goto LABEL_234;
                }
                uint64_t v123 = open(_:_:)();
                if ((v123 & 0x80000000) == 0)
                {
                  uint64_t v23 = (id)v123;
                  uint64_t v13 = 0LL;
                  goto LABEL_204;
                }

                if (MEMORY[0x186E1B0E8]() == 21 && (v138 = opendir(v13)) != 0LL)
                {
                  uint64_t v13 = (char *)v138;
                  uint64_t v139 = (void *)dirfd(v138);
                  if ((v139 & 0x80000000) == 0)
                  {
                    uint64_t v23 = v139;
LABEL_204:
                    if (MEMORY[0x186E1B0E8]() != 45)
                    {
                      v179[0] = (int)v23;
                      LODWORD(v23) = MEMORY[0x186E1B0E8]();
                      v186 = 263LL;
                      switch((int)v23)
                      {
                        case 1:
                        case 13:
                          uint64_t v141 = 257LL;
                          goto LABEL_254;
                        case 2:
                          uint64_t v141 = 260LL;
                          goto LABEL_254;
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                          goto LABEL_251;
                        case 27:
                          goto LABEL_255;
                        default:
                          goto LABEL_238;
                      }
                    }

                    bzero(&v189, 0x878uLL);
                    uint64_t v124 = (int)v23;
                    if (fstatfs((int)v23, &v189) || (v189.f_flags & 0x80) == 0)
                    {
LABEL_208:
                      if (!v13)
                      {
                        close((int)v23);
                        goto LABEL_234;
                      }

                      goto LABEL_209;
                    }

                    LODWORD(v23) = 45;
                    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
                    {
                      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                      uint64_t v142 = (int)POSIXErrorCode.rawValue.getter();
                      v143 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                      v144 = String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      v145 = objc_msgSend( v143,  sel_initWithDomain_code_userInfo_,  v144,  v142,  _NativeDictionary.bridged()());
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      uint64_t v146 = objc_msgSend(v145, sel_domain);
                      uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
                      uint64_t v15 = v148;

                      uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                      LODWORD(v23) = v150;
                      if (v147 == v149 && v15 == v150)
                      {
                        swift_bridgeObjectRelease_n();
                      }

                      else
                      {
                        uint64_t v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v162 & 1) == 0)
                        {
LABEL_281:
                          __break(1u);
LABEL_282:
                          *(void *)&v189.f_bsize = 0LL;
                          v189.f_blocks = 0xE000000000000000LL;
                          _StringGuts.grow(_:)(22LL);
                          swift_bridgeObjectRelease();
                          *(void *)&v189.f_bsize = 0xD000000000000014LL;
                          v189.f_blocks = 0x80000001839C9190LL;
                          LODWORD(v198) = (_DWORD)v23;
LABEL_283:
                          v173._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                          String.append(_:)(v173);
                          swift_bridgeObjectRelease();
                          goto LABEL_286;
                        }
                      }

                      swift_bridgeObjectRetain();
                      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x100,  a2,  v187,  v145,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v192,  0LL,  0LL);
                      swift_willThrow();
                      if (!v13)
                      {
                        v161 = v124;
                        goto LABEL_262;
                      }

        char v102 = *v33;
        if (*v33) {
          char v102 = *(unsigned __int8 *)(v102 + 18);
        }
        uint64_t v81 = v180;
        if (v14 <= v102)
        {
          swift_bridgeObjectRelease_n();
          result = (void *)swift_bridgeObjectRelease_n();
          goto LABEL_231;
        }

        uint64_t v103 = v180[8];
        uint64_t v104 = v180[11];
        *(void *)&v187 = v179;
        *((void *)&v187 + 1) = v14;
        *(void *)&v188 = v10;
        if (v179 != v104) {
          goto LABEL_371;
        }
        if (v103)
        {
          uint64_t v105 = *(unsigned __int8 *)(v103 + 18);
          result = (void *)swift_unknownObjectRetain();
          if (v14 <= v105) {
            goto LABEL_372;
          }
        }

        else if (!v14)
        {
          goto LABEL_372;
        }

        int64_t v106 = (4 * *((_BYTE *)v10 + 18) + 8) & 0x3C;
        if (((v14 >> v106) & 0xF) != 0)
        {
          uint64_t v107 = ((((v14 >> v106) & 0xF) - 1) << v106) | ((-15LL << v106) - 1) & v14;
          result = (void *)swift_unknownObjectRelease();
          uint64_t v108 = v10;
          uint64_t v109 = v179;
          unint64_t v110 = v174;
        }

        else
        {
          swift_unknownObjectRetain();
          uint64_t v111 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v187, v103);
          result = (void *)swift_unknownObjectRelease_n();
          unint64_t v110 = v174;
          if ((v111 & 1) == 0) {
            goto LABEL_383;
          }
          uint64_t v107 = *((void *)&v187 + 1);
          uint64_t v109 = v187;
          uint64_t v108 = (void *)v188;
        }

        uint64_t v33 = v176;
        if (v109 != v180[11]) {
          goto LABEL_373;
        }
        if (v108)
        {
          uint64_t v112 = &v108[3 * ((v107 >> ((4 * *((_BYTE *)v108 + 18) + 8) & 0x3C)) & 0xF)];
          v113 = v112[4];
          int v114 = v112[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          v115 = v180[8];
          swift_unknownObjectRetain();
          uint64_t v33 = v176;
          specialized Rope._Node.subscript.getter(v107, v115);
          v113 = v116;
          int v114 = v117;
          swift_unknownObjectRelease();
        }

        if ((specialized static Dictionary<>.== infix(_:_:)(v113, v110) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v81 = v180;
LABEL_207:
          swift_bridgeObjectRelease();
          result = (void *)swift_bridgeObjectRelease();
          goto LABEL_231;
        }

        uint64_t v118 = specialized static Set.== infix(_:_:)(v114, v171);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v118 & 1) == 0)
        {
          uint64_t v81 = v180;
          unint64_t v9 = a3;
          goto LABEL_207;
        }

        v119 = specialized Rope._remove(at:)((uint64_t)&v187, v179, v14);
        uint64_t v120 = v180[8];
        uint64_t v121 = v180[11];
        unint64_t v9 = a3;
        if (v119 >= specialized Rope._endPath.getter(v120))
        {
          uint64_t v120 = 0LL;
        }

        else if (*(_BYTE *)(v120 + 18))
        {
          char v122 = (v119 >> ((4 * *(_BYTE *)(v120 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          uint64_t v123 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v120 + 24, v122, v119);
          swift_unknownObjectRelease();
          uint64_t v120 = v123;
        }

        v184 = v121;
        v185 = v119;
        v186 = v120;
        uint64_t v127 = v187;
        swift_bridgeObjectRelease();
        result = (void *)swift_bridgeObjectRelease();
        if (v121 != v180[11]) {
          goto LABEL_394;
        }
        v128 = v180[8];
        if (v128)
        {
          uint64_t v129 = *(unsigned __int8 *)(v128 + 18);
          result = (void *)swift_unknownObjectRetain();
          if (v119 <= v129) {
            goto LABEL_395;
          }
        }

        else if (!v119)
        {
          goto LABEL_395;
        }

        if (v120 && (__int128 v164 = (4 * *(_BYTE *)(v120 + 18) + 8) & 0x3C, ((v119 >> v164) & 0xF) != 0))
        {
          v185 = ((((v119 >> v164) & 0xF) - 1) << v164) | ((-15LL << v164) - 1) & v119;
          result = (void *)swift_unknownObjectRelease();
        }

        else
        {
          swift_unknownObjectRetain();
          __int128 v165 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v184, v128);
          result = (void *)swift_unknownObjectRelease_n();
          if ((v165 & 1) == 0) {
            goto LABEL_405;
          }
          uint64_t v121 = v184;
        }

        uint64_t v81 = v180;
        uint64_t v33 = v176;
        if (v121 != v180[11]) {
          goto LABEL_396;
        }
        if (!*v176) {
          goto LABEL_417;
        }
        uint64_t v14 = v185;
        result = (void *)specialized Rope._Node._prepareModify(at:)(v185, (uint64_t)v201);
        v187 = v201[0];
        v188 = v201[1];
        v189 = v201[2];
        char v22 = __OFSUB__(v181, *((void *)&v201[0] + 1));
        v182 = v181 - *((void *)&v201[0] + 1);
        if (v22) {
          goto LABEL_398;
        }
        if (__OFADD__(*((void *)&v201[0] + 1), v127)) {
          goto LABEL_400;
        }
        *((void *)&v187 + 1) = *((void *)&v201[0] + 1) + v127;
        v179 = v121 + 1;
        v180[11] = v121 + 1;
        if (!v180[8]) {
          goto LABEL_418;
        }
        uint64_t v10 = specialized Rope._Node._finalizeModify(_:)(v183, &v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (void *)swift_bridgeObjectRelease();
        char v22 = __OFSUB__(v177--, 1LL);
        uint64_t v77 = v182;
        if (v22) {
          goto LABEL_401;
        }
LABEL_231:
        v133 = v81[8];
        uint64_t v134 = v81[11];
        *(void *)&v187 = v179;
        *((void *)&v187 + 1) = v14;
        *(void *)&v188 = v10;
        if (__OFADD__(v177, 1LL)) {
          goto LABEL_348;
        }
        if (v179 != v134) {
          goto LABEL_349;
        }
        ++v177;
        if (v10)
        {
          v135 = v10[3 * ((v14 >> ((4 * *((_BYTE *)v10 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          v135 = specialized Rope._Node.subscript.getter(v14, v133);
        }

        swift_bridgeObjectRelease();
        result = (void *)swift_bridgeObjectRelease();
        char v22 = __OFADD__(v77, v135);
        uint64_t v136 = v77 + v135;
        if (v22) {
          goto LABEL_350;
        }
        if (v133)
        {
          v137 = ((-15LL << ((4 * *(_BYTE *)(v133 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v133 + 18) | ((unint64_t)*(unsigned __int16 *)(v133 + 16) << ((4 * *(_BYTE *)(v133 + 18) + 8) & 0x3C));
          result = (void *)swift_unknownObjectRetain();
        }

        else
        {
          v137 = 0LL;
        }

        uint64_t v34 = v180;
        if (v14 >= v137) {
          goto LABEL_351;
        }
        v181 = v136;
        if (v10
          && (v138 = (4 * *((_BYTE *)v10 + 18) + 8) & 0x3C,
              uint64_t v139 = ((v14 >> v138) & 0xF) + 1,
              v139 < *((unsigned __int16 *)v10 + 8)))
        {
          uint64_t v14 = (v139 << v138) | ((-15LL << v138) - 1) & v14;
          result = (void *)swift_unknownObjectRelease_n();
        }

        else
        {
          uint64_t v140 = *(unsigned __int8 *)(v133 + 18);
          uint64_t v141 = (4 * v140 + 8) & 0x3C;
          v184 = (v14 >> v141) & 0xF;
          if (v140)
          {
            swift_unknownObjectRetain();
            uint64_t v142 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v133 + 24, &v184, (uint64_t)&v187, v133, v140);
            result = (void *)swift_unknownObjectRelease();
            if ((v142 & 1) == 0) {
              goto LABEL_249;
            }
            result = (void *)swift_unknownObjectRelease_n();
            uint64_t v14 = *((void *)&v187 + 1);
          }

          else
          {
            v143 = ((v14 >> v141) & 0xF) + 1;
            if (v143 >= *(unsigned __int16 *)(v133 + 16))
            {
LABEL_249:
              if (v133)
              {
                v144 = *(unsigned __int8 *)(v133 + 18);
                v145 = *(unsigned __int16 *)(v133 + 16);
                result = (void *)swift_unknownObjectRelease_n();
                uint64_t v14 = ((-15LL << ((4 * v144 + 8) & 0x3C)) - 1) & v144 | (unint64_t)(v145 << ((4 * v144 + 8) & 0x3C));
              }

              else
              {
                uint64_t v14 = 0LL;
              }

              *(void *)&v187 = v179;
              *((void *)&v187 + 1) = v14;
              *(void *)&v188 = 0LL;
              goto LABEL_253;
            }

            uint64_t v14 = (v143 << v141) | ((-15LL << v141) - 1) & v14;
            *((void *)&v187 + 1) = v14;
            result = (void *)swift_unknownObjectRelease_n();
            *(void *)&v188 = v133;
          }
        }

uint64_t closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = (char *)v30 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v14((char *)v30 - v12, a1, AssociatedTypeWitness);
  *((void *)&v32 + 1) = AssociatedTypeWitness;
  *(void *)&v33[0] = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
  v14((char *)boxed_opaque_existential_1, (uint64_t)v13, AssociatedTypeWitness);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v34, a4, a5);
  *(_OWORD *)((char *)v33 + 8) = v34[0];
  BYTE8(v33[1]) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5) & 1;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  uint64_t v37 = v16;
  __int128 v35 = v33[0];
  __int128 v36 = v33[1];
  v34[0] = v31;
  v34[1] = v32;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  uint64_t v19 = v18;
  __int128 v20 = *(_OWORD *)(v6 + 32);
  __int128 v31 = *(_OWORD *)(v6 + 16);
  __int128 v32 = v20;
  v33[0] = *(_OWORD *)(v6 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v21 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v38);
  __int128 v22 = *(_OWORD *)(v6 + 32);
  __int128 v40 = *(_OWORD *)(v6 + 16);
  __int128 v41 = v22;
  __int128 v42 = *(_OWORD *)(v6 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v23 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v39);
  uint64_t v24 = v21 >> 11;
  uint64_t v25 = v23 >> 11;
  v30[2] = v17;
  v30[3] = v19;
  v30[4] = v34;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:),  (uint64_t)v30,  (void *)v6,  v21 >> 11,  v25);
  swift_release();
  uint64_t v26 = v36;
  if ((void)v36 != 1LL)
  {
    uint64_t v27 = *((void *)&v35 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v27;
    *(void *)(inited + 40) = v26;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v24, v25, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v34);
}

uint64_t AttributedString.Guts.setAttributes(_:in:)(uint64_t a1, uint64_t a2)
{
  __int128 v5 = v2[2];
  __int128 v17 = v2[1];
  __int128 v18 = v5;
  __int128 v19 = v2[3];
  BigString.unicodeScalars.getter();
  unint64_t v6 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v12);
  __int128 v7 = v2[2];
  __int128 v14 = v2[1];
  __int128 v15 = v7;
  __int128 v16 = v2[3];
  BigString.unicodeScalars.getter();
  unint64_t v8 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v13);
  v6 >>= 11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v6, v8 >> 11, (v8 >> 11) - v6, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = specialized Sequence.compactMap<A>(_:)(v9);
  swift_bridgeObjectRelease();
  AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v6, v8 >> 11, 0, v10);
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.Guts.removeAttributeValue<A>(forKey:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void v20[4];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[48];
  _BYTE v24[48];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v5 = v4;
  __int128 v8 = v4[2];
  uint64_t v28 = v4[1];
  uint64_t v29 = v8;
  uint64_t v30 = v4[3];
  BigString.unicodeScalars.getter();
  unint64_t v9 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v23);
  __int128 v10 = v4[2];
  uint64_t v25 = v4[1];
  uint64_t v26 = v10;
  uint64_t v27 = v4[3];
  BigString.unicodeScalars.getter();
  unint64_t v11 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v24);
  uint64_t v12 = v9 >> 11;
  uint64_t v13 = v11 >> 11;
  v20[2] = a3;
  v20[3] = a4;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)partial apply for closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:),  (uint64_t)v20,  v5,  v12,  v11 >> 11);
  swift_release();
  __int128 v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 32);
  v14(&v21, a3, a4);
  __int128 v15 = v22;
  result = outlined consume of AttributedString.AttributeRunBoundaries?(v21, v22);
  if (v15 != 1)
  {
    v14(&v21, a3, a4);
    __int128 v17 = v22;
    if (v22 == 1)
    {
      __int128 v18 = MEMORY[0x18961AFE8];
    }

    else
    {
      __int128 v19 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      __int128 v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_183720D90;
      *(void *)(v18 + 32) = v19;
      *(void *)(v18 + 40) = v17;
    }

    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v12, v13, 0, v18);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = &v18[-v11 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( &v18[-v11 - 8],  1LL,  1LL,  AssociatedTypeWitness);
  unint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
  unint64_t v15 = v14;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v12, a5, a6, (uint64_t)v18);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v18, v13, v15);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v12, a3, a4, a1, a2);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if ((a5 & 1) != 0)
  {
    uint64_t v14 = *(void *)(v6 + 80);
    if (!*(void *)(v6 + 64))
    {
      unint64_t v46 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v46);
      return swift_unknownObjectRelease();
    }

    unint64_t v15 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v15);
    uint64_t result = swift_unknownObjectRelease_n();
    if (v14)
    {
      if (a3 != a4)
      {
        __int128 v16 = *(_OWORD *)(v6 + 32);
        __int128 v231 = *(_OWORD *)(v6 + 16);
        __int128 v232 = v16;
        __int128 v233 = *(_OWORD *)(v6 + 48);
        BigString.utf8.getter();
        BigString.startIndex.getter();
        uint64_t v17 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        uint64_t v22 = a3;
        uint64_t v24 = v23;
        outlined release of Locale((uint64_t)v205);
        __int128 v25 = *(_OWORD *)(v6 + 32);
        __int128 v228 = *(_OWORD *)(v6 + 16);
        __int128 v229 = v25;
        __int128 v230 = *(_OWORD *)(v6 + 48);
        BigString.utf8.getter();
        int64_t v173 = a4;
        uint64_t v174 = v22;
        if (__OFSUB__(a4, v22)) {
          goto LABEL_249;
        }
        uint64_t v26 = (__int128 *)(v6 + 16);
        uint64_t v27 = (void *)v6;
        uint64_t v192 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        uint64_t v33 = v32;
        outlined release of Locale((uint64_t)v206);
        v221[0] = v17;
        v221[1] = v19;
        v221[2] = v21;
        v221[3] = v24;
        v221[4] = v192;
        v221[5] = v29;
        v221[6] = v31;
        v221[7] = v33;
        __int128 v34 = v26[1];
        __int128 v225 = *v26;
        __int128 v226 = v34;
        __int128 v227 = v26[2];
        BigString.unicodeScalars.getter();
        unint64_t v35 = BigString.UnicodeScalarView.index(roundingDown:)();
        outlined release of Locale((uint64_t)v207);
        __int128 v36 = v26[1];
        __int128 v222 = *v26;
        __int128 v223 = v36;
        v185 = v26;
        __int128 v224 = v26[2];
        BigString.unicodeScalars.getter();
        unint64_t v37 = BigString.UnicodeScalarView.index(roundingUp:)();
        outlined release of Locale((uint64_t)v208);
        unint64_t v175 = v35;
        int64_t v38 = v35 >> 11;
        unint64_t v39 = v37 >> 11;
        if (v37 >> 11 < v35 >> 11)
        {
LABEL_250:
          __break(1u);
        }

        else
        {
          __int128 v40 = (__int128 *)v27[8];
          if (v40) {
            int64_t v41 = v27[10];
          }
          else {
            int64_t v41 = 0LL;
          }
          if (v41 >= v38)
          {
            uint64_t v42 = v27[9];
            uint64_t v43 = v27[11];
            v176 = v27;
            if (v40 && v38 < v27[10] && *((_WORD *)v40 + 8))
            {
              v191 = (__int128 *)v27[9];
              uint64_t v192 = v37 >> 11;
              uint64_t v33 = *((unsigned __int8 *)v40 + 18);
              if (!*((_BYTE *)v40 + 18)) {
                goto LABEL_206;
              }
              swift_unknownObjectRetain_n();
              swift_retain_n();
              int64_t v44 = v38;
              uint64_t v45 = v40;
              while (1)
              {
                uint64_t v49 = *((unsigned __int16 *)v45 + 8);
                if (*((_WORD *)v45 + 8))
                {
                  uint64_t v50 = *((void *)v45 + 5);
                  int64_t v51 = v44 - v50;
                  if (__OFSUB__(v44, v50)) {
                    goto LABEL_243;
                  }
                  if (__OFADD__(v51, 1LL)) {
                    goto LABEL_244;
                  }
                  if (v51 + 1 <= 0)
                  {
                    uint64_t v49 = 0LL;
                    goto LABEL_19;
                  }

                  if ((_DWORD)v49 == 1)
                  {
                    v44 -= v50;
                  }

                  else
                  {
                    uint64_t v52 = *((void *)v45 + 8);
                    BOOL v53 = __OFSUB__(v51, v52);
                    int64_t v54 = v51 - v52;
                    if (v53) {
                      goto LABEL_247;
                    }
                    if (__OFADD__(v54, 1LL))
                    {
LABEL_248:
                      __break(1u);
LABEL_249:
                      __break(1u);
                      goto LABEL_250;
                    }

                    if (v54 + 1 < 1)
                    {
                      uint64_t v49 = 1LL;
                      int64_t v44 = v51;
                      goto LABEL_19;
                    }

                    if ((_DWORD)v49 != 2)
                    {
                      char v55 = (void *)v45 + 11;
                      uint64_t v56 = 2LL;
                      while (1)
                      {
                        if (v49 == v56) {
                          goto LABEL_237;
                        }
                        int64_t v44 = v54 - *v55;
                        if (__OFSUB__(v54, *v55)) {
                          goto LABEL_238;
                        }
                        if (__OFADD__(v44, 1LL)) {
                          goto LABEL_239;
                        }
                        if (v44 + 1 < 1) {
                          break;
                        }
                        ++v56;
                        v55 += 3;
                        int64_t v54 = v44;
                        if (v49 == v56) {
                          goto LABEL_18;
                        }
                      }

                      uint64_t v49 = v56;
                      int64_t v44 = v54;
                      goto LABEL_19;
                    }

                    int64_t v44 = v54;
                  }
                }

LABEL_253:
                          __break(1u);
LABEL_254:
                          __break(1u);
                          goto LABEL_255;
                        }

                outlined destroy of Any?( (uint64_t)v425,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?( (uint64_t)v426,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v372);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v377);
                outlined destroy of Any?( (uint64_t)&v379,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v389,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                uint64_t result = outlined destroy of Any?( (uint64_t)&v394,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v223 & 1) == 0) {
                  goto LABEL_285;
                }
LABEL_254:
                v222 += 2;
                ++v221;
                __int128 v216 = v371;
                if (v224 == v23)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  __int128 v197 = v358;
                  uint64_t v24 = v359;
                  __int128 v193 = *(uint64_t **)(v359 + 64);
                  uint64_t v198 = *(void *)(v359 + 88);
                  v379 = v358;
                  __int128 v194 = v348;
                  v380 = v348;
                  uint64_t v161 = (uint64_t)v334;
                  v381 = v334;
                  __int128 v36 = __OFADD__(v349++, 1LL);
                  v350 = v335;
                  if (!v36) {
                    goto LABEL_222;
                  }
                  __break(1u);
LABEL_283:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v377);
LABEL_284:
                  outlined destroy of Any?( (uint64_t)&v379,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v389, v193);
                  outlined destroy of Any?((uint64_t)&v394, v193);
LABEL_285:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v24 = v359;
                  __int128 v202 = v368;
                  goto LABEL_286;
                }
              }
            }

            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
LABEL_286:
            if (v341 != *(void *)(v24 + 88)) {
              goto LABEL_403;
            }
            if (v352)
            {
              v243 = v352[3 * ((v194 >> ((4 * *((_BYTE *)v352 + 18) + 8) & 0x3C)) & 0xF) + 3];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }

            else
            {
              v244 = *(void *)(v24 + 64);
              swift_unknownObjectRetain();
              v243 = specialized Rope._Node.subscript.getter(v194, v244);
              swift_unknownObjectRelease();
            }

            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            v245 = &v350[v243];
            if (__OFADD__(v350, v243)) {
              goto LABEL_404;
            }
            v246 = v346;
            v247 = v346[1];
            v426[0] = *v346;
            v426[1] = v247;
            v426[2] = v346[2];
            BigString.utf8.getter();
            uint64_t result = v320;
            if (__OFSUB__(v245, (unint64_t)v320 >> 11))
            {
LABEL_405:
              __break(1u);
LABEL_406:
              __break(1u);
              goto LABEL_407;
            }

            v248 = BigString.UTF8View.index(_:offsetBy:)();
            v250 = v249;
            v252 = v251;
            v254 = v253;
            uint64_t result = outlined release of Locale((uint64_t)v416);
            if (v340 >= v248 >> 10) {
              v255 = v248;
            }
            else {
              v255 = v333;
            }
            if (v340 >= v248 >> 10) {
              v256 = v250;
            }
            else {
              v256 = v332;
            }
            if (v340 >= v248 >> 10) {
              v257 = v252;
            }
            else {
              v257 = v331;
            }
            if (v340 >= v248 >> 10) {
              v258 = v254;
            }
            else {
              v258 = v330;
            }
            v259 = *v246;
            v260 = v246[1];
            v425[2] = v246[2];
            v425[1] = v260;
            v425[0] = v259;
            v261 = v343;
            if (v255 >> 10 < v343) {
              goto LABEL_406;
            }
            *(void *)&v389 = v363;
            *((void *)&v389 + 1) = v357;
            *(void *)&v390 = v356;
            *((void *)&v390 + 1) = v355;
            *(void *)&v391 = v255;
            *((void *)&v391 + 1) = v256;
            *(void *)&v392 = v257;
            *((void *)&v392 + 1) = v258;
            v262 = *(void *)(v202 + 16);
            if (!v262 || v343 == v255 >> 10)
            {
              v371 = v256;
            }

            else
            {
              v263 = v256;
              swift_bridgeObjectRetain();
              outlined retain of Locale((uint64_t)v425);
              v264 = 40LL;
              v265 = v262;
              while (*(void *)(v202 + v264))
              {
                swift_bridgeObjectRelease();
                v264 += 16LL;
                if (!--v265)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_315;
                }
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              BigString.utf8.getter();
              BigString.UTF8View.subscript.getter();
              outlined release of Locale((uint64_t)v417);
              v377[0] = v363;
              v377[1] = v357;
              v377[2] = v356;
              v377[3] = v355;
              v377[4] = v363;
              v377[5] = v357;
              v377[6] = v356;
              v377[7] = v355;
              specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v377, &v379);
              uint64_t result = outlined release of Locale((uint64_t)&v418);
              if (v386 != 2)
              {
                v255 = v383;
                if (v261 > v383 >> 10) {
                  goto LABEL_430;
                }
                v263 = v384;
                v257 = v385;
                v258 = v386;
              }

    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
    return result;
  }

        uint64_t v11 = v187;
        unint64_t v15 = v188;
        if (v181 >= (uint64_t)v9)
        {
          uint64_t v146 = *v33;
          if ((void *)v8 == v9)
          {
            uint64_t v11 = v180[11];
            if (v146)
            {
              uint64_t v147 = v180[10];
              if (v147 < v8) {
                goto LABEL_378;
              }
              uint64_t v148 = v180[11];
              uint64_t v149 = v180[9];
              unint64_t v150 = *(unsigned __int8 *)(v146 + 18);
              if (*(_WORD *)(v146 + 16) && v147 > v8)
              {
                if (*(_BYTE *)(v146 + 18))
                {
                  uint64_t result = (void *)swift_unknownObjectRetain_n();
                  unint64_t v35 = v8;
                  int64_t v151 = v146;
                  while (1)
                  {
                    unint64_t v153 = *(unsigned __int16 *)(v151 + 16);
                    if (!*(_WORD *)(v151 + 16)) {
                      goto LABEL_262;
                    }
                    int64_t v154 = *(void *)(v151 + 40);
                    unint64_t v155 = v35 - v154;
                    if (__OFSUB__(v35, v154)) {
                      goto LABEL_353;
                    }
                    if (__OFADD__(v155, 1LL)) {
                      goto LABEL_354;
                    }
                    if (v155 + 1 <= 0)
                    {
                      unint64_t v153 = 0LL;
                    }

                    else
                    {
                      if ((_DWORD)v153 == 1)
                      {
                        v35 -= v154;
LABEL_262:
                        if (v35) {
                          goto LABEL_352;
                        }
                        goto LABEL_263;
                      }

                      int64_t v156 = *(void *)(v151 + 64);
                      uint64_t v22 = __OFSUB__(v155, v156);
                      uint64_t v157 = v155 - v156;
                      if (v22) {
                        goto LABEL_367;
                      }
                      if (__OFADD__(v157, 1LL)) {
                        goto LABEL_368;
                      }
                      if (v157 + 1 >= 1)
                      {
                        if ((_DWORD)v153 != 2)
                        {
                          uint64_t v158 = (void *)(v151 + 88);
                          v159 = 2LL;
                          while (v153 != v159)
                          {
                            unint64_t v35 = v157 - *v158;
                            if (__OFSUB__(v157, *v158)) {
                              goto LABEL_341;
                            }
                            if (__OFADD__(v35, 1LL)) {
                              goto LABEL_342;
                            }
                            if (v35 + 1 < 1)
                            {
                              unint64_t v153 = v159;
                              unint64_t v35 = v157;
                              goto LABEL_263;
                            }

                            ++v159;
                            v158 += 3;
                            uint64_t v157 = v35;
                            if (v153 == v159) {
                              goto LABEL_262;
                            }
                          }

      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      uint64_t v49 = i;
      uint64_t v43 = v117;
      int64_t v44 = v118;
    }

    LODWORD(v120[0]) = v22;
    WORD2(v120[0]) = a3;
    HIWORD(v120[0]) = v21;
    LOWORD(v120[1]) = (_WORD)v9;
    WORD1(v120[1]) = v15;
    WORD2(v120[1]) = a4;
    HIWORD(v120[1]) = v118;
    unint64_t v121 = v50;
    unint64_t v122 = v49;
    int64_t v51 = _So9NSDecimala__exponent_getter((char *)v120);
    if ((v51 & 0x80000000) == 0)
    {
      if (v51)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_186;
        }
        i *= 10LL;
        uint64_t v52 = v51 - 1;
        if (v51 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            goto LABEL_186;
          }
          i *= 10LL;
          while (--v52)
          {
            BOOL v53 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10LL;
            if (v53) {
              goto LABEL_186;
            }
          }
        }
      }

LABEL_252:
                        __break(1u);
                        goto LABEL_253;
                      }

      __break(1u);
      goto LABEL_253;
    }
  }

    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0LL;
    uint64_t v49 = v113;
    uint64_t v50 = v114;
LABEL_107:
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    unint64_t v116 = v50;
    char v117 = v49;
    LOWORD(v19) = v49;
  }

  while ((_So9NSDecimala__exponent_getter((char *)v115) & 0x80000000) != 0);
  LODWORD(v115[0]) = (_DWORD)v8;
  WORD2(v115[0]) = a3;
  HIWORD(v115[0]) = v20;
  LOWORD(v115[1]) = v14;
  WORD1(v115[1]) = a5;
  WORD2(v115[1]) = v7;
  HIWORD(v115[1]) = v21;
  unint64_t v116 = v114;
  char v117 = (__int16)v19;
  unint64_t v63 = _So9NSDecimala__exponent_getter((char *)v115);
  if (v63 < 0) {
    goto LABEL_265;
  }
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10LL;
      uint64_t v64 = v63 - 1;
      if (v63 == 1) {
        goto LABEL_184;
      }
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10LL;
        while (--v64)
        {
          uint64_t v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10LL;
          if (v65) {
            goto LABEL_44;
          }
        }

        goto LABEL_184;
      }
    }

    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0LL;
    uint64_t v49 = v113;
    uint64_t v50 = v114;
LABEL_107:
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    unint64_t v116 = v50;
    char v117 = v49;
    LOWORD(v19) = v49;
  }

  while ((_So9NSDecimala__exponent_getter((char *)v115) & 0x80000000) != 0);
  LODWORD(v115[0]) = (_DWORD)v8;
  WORD2(v115[0]) = a3;
  HIWORD(v115[0]) = v20;
  LOWORD(v115[1]) = v14;
  WORD1(v115[1]) = a5;
  WORD2(v115[1]) = v7;
  HIWORD(v115[1]) = v21;
  unint64_t v116 = v114;
  char v117 = (__int16)v19;
  unint64_t v63 = _So9NSDecimala__exponent_getter((char *)v115);
  if (v63 < 0) {
    goto LABEL_265;
  }
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10LL;
      uint64_t v64 = v63 - 1;
      if (v63 == 1) {
        goto LABEL_184;
      }
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10LL;
        while (--v64)
        {
          uint64_t v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10LL;
          if (v65) {
            goto LABEL_44;
          }
        }

        goto LABEL_184;
      }
    }

    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0LL;
    uint64_t v49 = v113;
    uint64_t v50 = v114;
LABEL_107:
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    unint64_t v116 = v50;
    char v117 = v49;
    LOWORD(v19) = v49;
  }

  while ((_So9NSDecimala__exponent_getter((char *)v115) & 0x80000000) != 0);
  LODWORD(v115[0]) = (_DWORD)v8;
  WORD2(v115[0]) = a3;
  HIWORD(v115[0]) = v20;
  LOWORD(v115[1]) = v14;
  WORD1(v115[1]) = a5;
  WORD2(v115[1]) = v7;
  HIWORD(v115[1]) = v21;
  unint64_t v116 = v114;
  char v117 = (__int16)v19;
  unint64_t v63 = _So9NSDecimala__exponent_getter((char *)v115);
  if (v63 < 0) {
    goto LABEL_265;
  }
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10LL;
      uint64_t v64 = v63 - 1;
      if (v63 == 1) {
        goto LABEL_184;
      }
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10LL;
        while (--v64)
        {
          uint64_t v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10LL;
          if (v65) {
            goto LABEL_44;
          }
        }

        goto LABEL_184;
      }
    }

    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0LL;
    uint64_t v49 = v113;
    uint64_t v50 = v114;
LABEL_107:
    LODWORD(v116[0]) = (_DWORD)v8;
    WORD2(v116[0]) = a3;
    HIWORD(v116[0]) = v20;
    LOWORD(v116[1]) = v14;
    WORD1(v116[1]) = a5;
    WORD2(v116[1]) = v7;
    HIWORD(v116[1]) = v21;
    char v117 = v50;
    unint64_t v118 = v49;
    LOWORD(v19) = v49;
  }

  while ((_So9NSDecimala__exponent_getter((char *)v116) & 0x80000000) != 0);
  LODWORD(v116[0]) = (_DWORD)v8;
  WORD2(v116[0]) = a3;
  HIWORD(v116[0]) = v20;
  LOWORD(v116[1]) = v14;
  WORD1(v116[1]) = a5;
  WORD2(v116[1]) = v7;
  HIWORD(v116[1]) = v21;
  char v117 = v114;
  unint64_t v118 = (__int16)v19;
  unint64_t v63 = _So9NSDecimala__exponent_getter((char *)v116);
  if (v63 < 0) {
    goto LABEL_265;
  }
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10LL;
      uint64_t v64 = v63 - 1;
      if (v63 == 1) {
        return (char *)a4;
      }
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10LL;
        while (--v64)
        {
          uint64_t v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10LL;
          if (v65) {
            goto LABEL_44;
          }
        }

        return (char *)a4;
      }
    }

LABEL_265:
                      __break(1u);
LABEL_266:
                      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                      JUMPOUT(0x182F10644LL);
                    }

      __break(1u);
      goto LABEL_266;
    }

LABEL_264:
                    __break(1u);
                    goto LABEL_265;
                  }

                  unint64_t v155 = *(void *)(v147 + 8 * v154);
                  ++v145;
                  if (!v155)
                  {
                    int64_t v145 = v154 + 1;
                    if (v154 + 1 >= v151) {
                      goto LABEL_198;
                    }
                    unint64_t v155 = *(void *)(v147 + 8 * v145);
                    if (!v155)
                    {
                      int64_t v145 = v154 + 2;
                      if (v154 + 2 >= v151) {
                        goto LABEL_198;
                      }
                      unint64_t v155 = *(void *)(v147 + 8 * v145);
                      if (!v155)
                      {
                        int64_t v156 = v154 + 3;
                        if (v156 >= v151) {
                          goto LABEL_198;
                        }
                        unint64_t v155 = *(void *)(v147 + 8 * v156);
                        if (!v155)
                        {
                          while (1)
                          {
                            int64_t v145 = v156 + 1;
                            if (__OFADD__(v156, 1LL)) {
                              break;
                            }
                            if (v145 >= v151) {
                              goto LABEL_198;
                            }
                            unint64_t v155 = *(void *)(v147 + 8 * v145);
                            ++v156;
                            if (v155) {
                              goto LABEL_193;
                            }
                          }

          v204 = (v209 - 1) & v209;
          v207 = __clz(__rbit64(v209)) + (v200 << 6);
        }

        v211 = (uint64_t *)(*(void *)(v199 + 48) + 16 * v207);
        __int128 v212 = *v211;
        __int128 v213 = (void *)v211[1];
        __int128 v214 = *(void *)(*(void *)(v199 + 56) + 8 * v207);
        swift_bridgeObjectRetain();
        v215._countAndFlagsBits = v212;
        v215._object = v213;
        Calendar.Identifier.init(identifierString:)(v215);
        if (v237 != 16) {
          specialized Dictionary.subscript.setter(v214, 0, v237);
        }
      }
    }
  }

                v558 = v645;

                swift_bridgeObjectRelease();
                outlined consume of URL?(v675);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                *v641 = v97;

                goto LABEL_313;
              }

              unint64_t v153 = v148;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(void *)&v744[0] = *(void *)&v743[0];
              swift_bridgeObjectRetain();
              specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( v743,  (uint64_t)v664,  (unint64_t)v111,  512,  0LL,  0LL,  0,  0LL);
              uint64_t v28 = 0LL;
              swift_bridgeObjectRelease();
              specialized AttributedString.subscript.setter(*(uint64_t *)&v743[0]);
              char v117 = *(_OWORD **)&v744[0];
              if ((v139 & 1) == 0)
              {
LABEL_124:
                if (v117)
                {
                  LODWORD(v635) = v153;
                  int64_t v154 = one-time initialization token for attributedStringsCacheLock;
                  swift_retain_n();
                  if (v154 != -1) {
                    goto LABEL_331;
                  }
                  goto LABEL_126;
                }

                goto LABEL_262;
              }

                unint64_t v152 = (4 * *((_BYTE *)v151 + 18) + 8) & 0x3C;
                __int128 v16 = ((-15LL << v152) - 1) & v16 | (v153 << v152);
                uint64_t v18 = (void *)v151[3 * v153 + 3];
                swift_unknownObjectRetain();
                uint64_t result = (void *)swift_unknownObjectRelease();
                int64_t v151 = v18;
                if (!*((_BYTE *)v18 + 18)) {
                  goto LABEL_290;
                }
              }
            }

            uint64_t result = (void *)swift_unknownObjectRetain_n();
            __int128 v16 = 0LL;
            unint64_t v37 = a2;
            uint64_t v18 = (void *)v5;
LABEL_290:
            uint64_t v160 = *((unsigned __int16 *)v18 + 8);
            if (!*((_WORD *)v18 + 8)) {
              goto LABEL_299;
            }
            uint64_t v161 = v18[3];
            uint64_t v20 = __OFSUB__(v37, v161);
            uint64_t v162 = v37 - v161;
            if (v20) {
              goto LABEL_403;
            }
            if (__OFADD__(v162, 1LL)) {
              goto LABEL_404;
            }
            if (v162 + 1 <= 0)
            {
              uint64_t v160 = 0LL;
            }

            else
            {
              if ((_DWORD)v160 == 1)
              {
LABEL_300:
                if (v162) {
                  goto LABEL_402;
                }
                unint64_t v37 = 0LL;
                goto LABEL_328;
              }

              uint64_t v163 = v18[6];
              unint64_t v37 = v162 - v163;
              if (__OFSUB__(v162, v163)) {
                goto LABEL_406;
              }
              if (__OFADD__(v37, 1LL)) {
                goto LABEL_407;
              }
              if (v37 + 1 >= 1)
              {
                if ((_DWORD)v160 != 2)
                {
                  int64_t v166 = v18 + 9;
                  uint64_t v167 = 2LL;
                  while (v160 != v167)
                  {
                    uint64_t v162 = v37 - *v166;
                    if (__OFSUB__(v37, *v166)) {
                      goto LABEL_389;
                    }
                    if (__OFADD__(v162, 1LL)) {
                      goto LABEL_390;
                    }
                    if (v162 + 1 < 1)
                    {
                      uint64_t v160 = v167;
                      goto LABEL_328;
                    }

                    ++v167;
                    v166 += 3;
                    unint64_t v37 = v162;
                    if (v160 == v167) {
                      goto LABEL_300;
                    }
                  }

                  goto LABEL_388;
                }

                int64_t v151 = (4 * *((_BYTE *)v150 + 18) + 8) & 0x3C;
                __int128 v16 = ((-15LL << v151) - 1) & v16 | (v152 << v151);
                uint64_t v18 = (void *)v150[3 * v152 + 3];
                swift_unknownObjectRetain();
                uint64_t result = (void *)swift_unknownObjectRelease();
                unint64_t v150 = v18;
                if (!*((_BYTE *)v18 + 18)) {
                  goto LABEL_290;
                }
              }
            }

            uint64_t result = (void *)swift_unknownObjectRetain_n();
            __int128 v16 = 0LL;
            unint64_t v37 = a2;
            uint64_t v18 = (void *)v5;
LABEL_290:
            v159 = *((unsigned __int16 *)v18 + 8);
            if (!*((_WORD *)v18 + 8)) {
              goto LABEL_299;
            }
            uint64_t v160 = v18[3];
            uint64_t v20 = __OFSUB__(v37, v160);
            uint64_t v161 = v37 - v160;
            if (v20) {
              goto LABEL_403;
            }
            if (__OFADD__(v161, 1LL)) {
              goto LABEL_404;
            }
            if (v161 + 1 <= 0)
            {
              v159 = 0LL;
            }

            else
            {
              if ((_DWORD)v159 == 1)
              {
LABEL_300:
                if (v161) {
                  goto LABEL_402;
                }
                unint64_t v37 = 0LL;
                goto LABEL_328;
              }

              uint64_t v162 = v18[6];
              unint64_t v37 = v161 - v162;
              if (__OFSUB__(v161, v162)) {
                goto LABEL_406;
              }
              if (__OFADD__(v37, 1LL)) {
                goto LABEL_407;
              }
              if (v37 + 1 >= 1)
              {
                if ((_DWORD)v159 != 2)
                {
                  unint64_t v165 = v18 + 9;
                  int64_t v166 = 2LL;
                  while (v159 != v166)
                  {
                    uint64_t v161 = v37 - *v165;
                    if (__OFSUB__(v37, *v165)) {
                      goto LABEL_389;
                    }
                    if (__OFADD__(v161, 1LL)) {
                      goto LABEL_390;
                    }
                    if (v161 + 1 < 1)
                    {
                      v159 = v166;
                      goto LABEL_328;
                    }

                    ++v166;
                    v165 += 3;
                    unint64_t v37 = v161;
                    if (v159 == v166) {
                      goto LABEL_300;
                    }
                  }

                  goto LABEL_388;
                }

            __break(1u);
LABEL_265:
            __break(1u);
            goto LABEL_266;
          }
        }

        else
        {
          __src[6] = v41;
          LOBYTE(__src[7]) = v42;
          if ((userInfo & 2) == 0)
          {
            __src[8] = 1LL;
            LOBYTE(__src[9]) = 0;
            if ((userInfo & 8) == 0) {
              goto LABEL_127;
            }
            goto LABEL_70;
          }
        }

        if ((v30 & 1) != 0)
        {
          int64_t v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0)
          {
LABEL_56:
            if (BYTE3(v337._nsError._domain) == 1)
            {
              swift_bridgeObjectRelease();
LABEL_59:
              uint64_t v70 = 0;
              unint64_t v71 = 2LL;
LABEL_67:
              uint64_t v97 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( v71,  v70,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
              if (v7) {
                goto LABEL_217;
              }
              uint64_t v98 = v97;
              if (!specialized Range.contains(_:)(v97, 1LL, 13LL)) {
                goto LABEL_215;
              }
              DateComponents.month.setter(v98, 0);
              if ((userInfo & 8) == 0) {
                goto LABEL_127;
              }
              goto LABEL_70;
            }

            uint64_t v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v69 & 1) != 0) {
              goto LABEL_59;
            }
LABEL_66:
            unint64_t v71 = 0LL;
            uint64_t v70 = 1;
            goto LABEL_67;
          }

        __break(1u);
        goto LABEL_265;
      }
    }

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0) {
      int64_t v132 = v119;
    }
    else {
      int64_t v132 = 0LL;
    }
    uint64_t v125 = (void *)[v118 preferredPronoun:v116 forTermOfAddress:v117 morphology:v132 dependency:v120];
    goto LABEL_268;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    uint64_t v20 = -[NSInflectionRule agreeWithConcept](a2, "agreeWithConcept")
       || -[NSInflectionRule agreeWithArgument](a2, "agreeWithArgument")
       || -[NSInflectionRule referentConcept](a2, "referentConcept") != 0;
    if ([v7 count])
    {
      if (!v20) {
        goto LABEL_45;
      }
      goto LABEL_38;
    }
  }

  else
  {
    if ([v7 count]) {
      goto LABEL_45;
    }
    uint64_t v20 = 0;
  }

LABEL_245:
                          __break(1u);
LABEL_246:
                          __break(1u);
LABEL_247:
                          __break(1u);
                          goto LABEL_248;
                        }

                        int64_t v145 = v156;
                      }
                    }
                  }

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( &v458,  v318,  v319,  v321,  v320);
                          specialized IndexingIterator.next()();
                          __int128 v222 = v224;
                          if (!v224) {
                            goto LABEL_285;
                          }
                        }

                        v234 = v226;
                        v333 = v222 + 64;
LABEL_250:
                        v235 = v223[1];
                        v400 = *v223;
                        v401 = v235;
                        v402 = v223[2];
                        BigString.unicodeScalars.getter();
                        uint64_t v2 = v329;
                        v343 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v392);
                        v236 = v223[1];
                        v397 = *v223;
                        v398 = v236;
                        v399 = v223[2];
                        BigString.unicodeScalars.getter();
                        v335 = v234;
                        v340 = BigString.UnicodeScalarView.index(after:)();
                        v329 = v237;
                        outlined release of Locale((uint64_t)v393);
                        v238 = 1LL << *(_BYTE *)(v222 + 32);
                        if (v238 < 64) {
                          v239 = ~(-1LL << v238);
                        }
                        else {
                          v239 = -1LL;
                        }
                        v240 = v239 & *(void *)(v222 + 64);
                        v241 = (unint64_t)(v238 + 63) >> 6;
                        swift_bridgeObjectRetain();
                        v242 = 0LL;
                        while (1)
                        {
                          if (v240)
                          {
                            v243 = __clz(__rbit64(v240));
                            v240 &= v240 - 1;
                            v244 = v243 | (v242 << 6);
                            goto LABEL_257;
                          }

                          v248 = v242 + 1;
                          if (__OFADD__(v242, 1LL)) {
                            break;
                          }
                          if (v248 >= v241) {
                            goto LABEL_266;
                          }
                          v249 = *(void *)(v333 + 8 * v248);
                          if (v249) {
                            goto LABEL_261;
                          }
                          if (v242 + 2 >= v241)
                          {
                            ++v242;
LABEL_266:
                            v240 = 0LL;
                            v352 = 0LL;
                            v350 = 0u;
                            v351 = 0u;
                            v348 = 0u;
                            v349 = 0u;
                            v347 = 0u;
                            goto LABEL_267;
                          }

                          v249 = *(void *)(v333 + 8 * (v242 + 2));
                          if (v249)
                          {
                            v248 = v242 + 2;
                            goto LABEL_261;
                          }

                          if (v242 + 3 >= v241)
                          {
                            v242 += 2LL;
                            goto LABEL_266;
                          }

                          v249 = *(void *)(v333 + 8 * (v242 + 3));
                          if (v249)
                          {
                            v248 = v242 + 3;
                            goto LABEL_261;
                          }

                          v248 = v242 + 4;
                          if (v242 + 4 >= v241)
                          {
                            v242 += 3LL;
                            goto LABEL_266;
                          }

                          v249 = *(void *)(v333 + 8 * v248);
                          if (v249) {
                            goto LABEL_261;
                          }
                          do
                          {
                            if (v241 - 5 == v242)
                            {
                              v242 = v241 - 1;
                              goto LABEL_266;
                            }

                            v249 = *(void *)(v222 + 104 + 8 * v242++);
                          }

                          while (!v249);
                          v248 = v242 + 4;
LABEL_261:
                          v240 = (v249 - 1) & v249;
                          v244 = __clz(__rbit64(v249)) + (v248 << 6);
                          v242 = v248;
LABEL_257:
                          v245 = *(void *)(v222 + 56);
                          v246 = (void *)(*(void *)(v222 + 48) + 16 * v244);
                          v247 = v246[1];
                          *(void *)&v347 = *v246;
                          *((void *)&v347 + 1) = v247;
                          outlined init with copy of AttributedString._AttributeValue(v245 + 72 * v244, (uint64_t)&v348);
                          swift_bridgeObjectRetain();
LABEL_267:
                          outlined init with take of (key: String, value: AttributedString._AttributeValue)?( (uint64_t)&v347,  (uint64_t)&v353);
                          v250 = v354;
                          if (!v354)
                          {
                            swift_release();
                            __int128 v223 = v323;
                            v234 = v340;
                            if (v326 <= v340 >> 10) {
                              goto LABEL_245;
                            }
                            goto LABEL_250;
                          }

                          v251 = v353;
                          v252 = v356;
                          uint64_t v2 = v357;
                          outlined copy of AttributedString.AttributeRunBoundaries?(v356, v357);
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v355);
                          if (v2 != 1)
                          {
                            *(void *)&v347 = v252;
                            *((void *)&v347 + 1) = v2;
                            v253 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                            outlined consume of AttributedString.AttributeRunBoundaries?(v252, v2);
                            if ((v253 & 0x100000000LL) == 0 && v343 != (_DWORD)v253) {
                              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( v251,  v250,  v335,  v340,  (uint64_t *)v413);
                            }
                          }

                          swift_bridgeObjectRelease();
                        }

                        __break(1u);
LABEL_285:
                        v254 = *(void *)&v413[0];
                      }

                      else
                      {
                        v254 = MEMORY[0x18961AFF0];
                      }

                      uint64_t result = swift_release();
                      v255 = 0LL;
                      v256 = v254 + 64;
                      v257 = 1LL << *(_BYTE *)(v254 + 32);
                      v258 = -1LL;
                      if (v257 < 64) {
                        v258 = ~(-1LL << v257);
                      }
                      v259 = v258 & *(void *)(v254 + 64);
                      v346 = (unint64_t)(v257 + 63) >> 6;
                      while (1)
                      {
                        if (v259)
                        {
                          v260 = __clz(__rbit64(v259));
                          v259 &= v259 - 1;
                          v261 = v260 | (v255 << 6);
                        }

                        else
                        {
                          uint64_t v45 = __OFADD__(v255++, 1LL);
                          if (v45) {
                            goto LABEL_378;
                          }
                          if (v255 >= v346)
                          {
LABEL_311:
                            swift_release();
                            uint64_t v5 = v316;
                            v269 = v314 >> 10;
                            if (specialized Range.isEmpty.getter())
                            {
                              v270 = v323[1];
                              v360 = *v323;
                              v361 = v270;
                              v362 = v323[2];
                              if (v269 > (unint64_t)BigString.startIndex.getter() >> 10
                                && v269 < (unint64_t)BigString.endIndex.getter() >> 10)
                              {
                                uint64_t result = v316 - 1;
                                if (__OFSUB__(v316, 1LL)) {
                                  goto LABEL_424;
                                }
                                if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v316) & 1) != 0)
                                {
                                  v271 = *v323;
                                  v272 = v323[2];
                                  v459 = v323[1];
                                  v460 = v272;
                                  v458 = v271;
                                  v273 = *v323;
                                  v348 = v323[1];
                                  v349 = v272;
                                  v347 = v273;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>( &v347,  (uint64_t)v413);
                                  outlined retain of Locale((uint64_t)v413);
                                  v274 = BigString.index(before:)();
                                  v276 = v275;
                                  v278 = v277;
                                  v280 = v279;
                                  outlined release of Locale((uint64_t)&v458);
                                  AttributedString.Guts._paragraphExtending(from:)( v274,  v276,  v278,  v280,  (uint64_t)&v353);
                                  uint64_t v10 = Range<>._utf8OffsetRange.getter();
                                  uint64_t v19 = v281;
                                  goto LABEL_339;
                                }
                              }

                              goto LABEL_240;
                            }

                            v282 = v323[1];
                            v413[0] = *v323;
                            v413[1] = v282;
                            v413[2] = v323[2];
                            uint64_t result = v316 - 1;
                            if (__OFSUB__(v316, 1LL)) {
                              goto LABEL_423;
                            }
                            if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v316) & 1) != 0)
                            {
                              v283 = *v323;
                              v284 = v323[1];
                              v412 = v323[2];
                              v411[1] = v284;
                              v411[0] = v283;
                              v285 = *v323;
                              v459 = v323[1];
                              v460 = v412;
                              v458 = v285;
                              outlined init with take of any PredicateExpression<Self.Output == B1>( &v458,  (uint64_t)v461);
                              outlined retain of Locale((uint64_t)v461);
                              v286 = BigString.index(before:)();
                              v288 = v287;
                              v290 = v289;
                              v292 = v291;
                              outlined release of Locale((uint64_t)v411);
                              AttributedString.Guts._paragraphExtending(from:)(v286, v288, v290, v292, (uint64_t)&v347);
                              uint64_t v10 = Range<>._utf8OffsetRange.getter();
                              uint64_t v19 = v293;
                              LOBYTE(v89) = 0;
                            }

                            else
                            {
LABEL_321:
                              uint64_t v10 = 0LL;
                              uint64_t v19 = 0LL;
                              LOBYTE(v89) = 1;
                            }

                            v294 = v323[1];
                            v408 = *v323;
                            v409 = v294;
                            v410 = v323[2];
                            if (v313 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
                            {
                              if ((v89 & 1) == 0) {
                                goto LABEL_336;
                              }
                              if (v315 < 1)
                              {
LABEL_240:
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                return swift_unknownObjectRelease();
                              }

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( &v462,  v321,  v322,  v324,  v323);
                          specialized IndexingIterator.next()();
                          __int128 v225 = v227;
                          if (!v227) {
                            goto LABEL_285;
                          }
                        }

                        v237 = v229;
                        v338 = v225 + 64;
LABEL_250:
                        v238 = v226[1];
                        v404 = *v226;
                        v405 = v238;
                        v406 = v226[2];
                        BigString.unicodeScalars.getter();
                        uint64_t v3 = v333;
                        v347 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v396);
                        v239 = v226[1];
                        v401 = *v226;
                        v402 = v239;
                        v403 = v226[2];
                        BigString.unicodeScalars.getter();
                        v340 = v237;
                        v345 = BigString.UnicodeScalarView.index(after:)();
                        v333 = v240;
                        outlined release of Locale((uint64_t)v397);
                        v241 = 1LL << *(_BYTE *)(v225 + 32);
                        if (v241 < 64) {
                          v242 = ~(-1LL << v241);
                        }
                        else {
                          v242 = -1LL;
                        }
                        v243 = v242 & *(void *)(v225 + 64);
                        v244 = (unint64_t)(v241 + 63) >> 6;
                        swift_bridgeObjectRetain();
                        v245 = 0LL;
                        while (1)
                        {
                          if (v243)
                          {
                            v246 = __clz(__rbit64(v243));
                            v243 &= v243 - 1;
                            v247 = v246 | (v245 << 6);
                            goto LABEL_257;
                          }

                          v251 = v245 + 1;
                          if (__OFADD__(v245, 1LL)) {
                            break;
                          }
                          if (v251 >= v244) {
                            goto LABEL_266;
                          }
                          v252 = *(void *)(v338 + 8 * v251);
                          if (v252) {
                            goto LABEL_261;
                          }
                          if (v245 + 2 >= v244)
                          {
                            ++v245;
LABEL_266:
                            v243 = 0LL;
                            v356 = 0LL;
                            v354 = 0u;
                            v355 = 0u;
                            v352 = 0u;
                            v353 = 0u;
                            v351 = 0u;
                            goto LABEL_267;
                          }

                          v252 = *(void *)(v338 + 8 * (v245 + 2));
                          if (v252)
                          {
                            v251 = v245 + 2;
                            goto LABEL_261;
                          }

                          if (v245 + 3 >= v244)
                          {
                            v245 += 2LL;
                            goto LABEL_266;
                          }

                          v252 = *(void *)(v338 + 8 * (v245 + 3));
                          if (v252)
                          {
                            v251 = v245 + 3;
                            goto LABEL_261;
                          }

                          v251 = v245 + 4;
                          if (v245 + 4 >= v244)
                          {
                            v245 += 3LL;
                            goto LABEL_266;
                          }

                          v252 = *(void *)(v338 + 8 * v251);
                          if (v252) {
                            goto LABEL_261;
                          }
                          do
                          {
                            if (v244 - 5 == v245)
                            {
                              v245 = v244 - 1;
                              goto LABEL_266;
                            }

                            v252 = *(void *)(v225 + 104 + 8 * v245++);
                          }

                          while (!v252);
                          v251 = v245 + 4;
LABEL_261:
                          v243 = (v252 - 1) & v252;
                          v247 = __clz(__rbit64(v252)) + (v251 << 6);
                          v245 = v251;
LABEL_257:
                          v248 = *(void *)(v225 + 56);
                          v249 = (void *)(*(void *)(v225 + 48) + 16 * v247);
                          v250 = v249[1];
                          *(void *)&v351 = *v249;
                          *((void *)&v351 + 1) = v250;
                          outlined init with copy of AttributedString._AttributeValue(v248 + 72 * v247, (uint64_t)&v352);
                          swift_bridgeObjectRetain();
LABEL_267:
                          outlined init with take of (key: String, value: AttributedString._AttributeValue)?( (uint64_t)&v351,  (uint64_t)&v357);
                          v253 = v358;
                          if (!v358)
                          {
                            swift_release();
                            __int128 v226 = (__int128 *)v328;
                            v237 = v345;
                            if (v330 <= v345 >> 10) {
                              goto LABEL_245;
                            }
                            goto LABEL_250;
                          }

                          v254 = v357;
                          v255 = v360;
                          uint64_t v3 = v361;
                          outlined copy of AttributedString.AttributeRunBoundaries?(v360, v361);
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v359);
                          if (v3 != 1)
                          {
                            *(void *)&v351 = v255;
                            *((void *)&v351 + 1) = v3;
                            v256 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                            outlined consume of AttributedString.AttributeRunBoundaries?(v255, v3);
                            if ((v256 & 0x100000000LL) == 0 && v347 != (_DWORD)v256) {
                              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( v254,  v253,  v340,  v345,  (uint64_t *)v417);
                            }
                          }

                          swift_bridgeObjectRelease();
                        }

                        __break(1u);
LABEL_285:
                        v257 = *(void *)&v417[0];
                      }

                      else
                      {
                        v257 = MEMORY[0x18961AFF0];
                      }

                      uint64_t result = swift_release();
                      v258 = 0LL;
                      v259 = v257 + 64;
                      v260 = 1LL << *(_BYTE *)(v257 + 32);
                      v261 = -1LL;
                      if (v260 < 64) {
                        v261 = ~(-1LL << v260);
                      }
                      v262 = v261 & *(void *)(v257 + 64);
                      v350 = (unint64_t)(v260 + 63) >> 6;
                      while (1)
                      {
                        if (v262)
                        {
                          v263 = __clz(__rbit64(v262));
                          v262 &= v262 - 1;
                          v264 = v263 | (v258 << 6);
                        }

                        else
                        {
                          int64_t v48 = __OFADD__(v258++, 1LL);
                          if (v48) {
                            goto LABEL_377;
                          }
                          if (v258 >= v350)
                          {
LABEL_311:
                            swift_release();
                            uint64_t v3 = v317;
                            v272 = v317 >> 10;
                            if (specialized Range.isEmpty.getter())
                            {
                              v273 = *(_OWORD *)(v328 + 16);
                              v364 = *(_OWORD *)v328;
                              v365 = v273;
                              v366 = *(_OWORD *)(v328 + 32);
                              if (v272 > (unint64_t)BigString.startIndex.getter() >> 10
                                && v272 < (unint64_t)BigString.endIndex.getter() >> 10)
                              {
                                uint64_t result = v318 - 1;
                                if (__OFSUB__(v318, 1LL)) {
                                  goto LABEL_423;
                                }
                                if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v318) & 1) != 0)
                                {
                                  v274 = *(_OWORD *)v328;
                                  v275 = *(_OWORD *)(v328 + 32);
                                  v463 = *(_OWORD *)(v328 + 16);
                                  v464 = v275;
                                  v462 = v274;
                                  v276 = *(_OWORD *)v328;
                                  v352 = *(_OWORD *)(v328 + 16);
                                  v353 = v275;
                                  v351 = v276;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>( &v351,  (uint64_t)v417);
                                  outlined retain of Locale((uint64_t)v417);
                                  v277 = BigString.index(before:)();
                                  v279 = v278;
                                  v281 = v280;
                                  v283 = v282;
                                  outlined release of Locale((uint64_t)&v462);
                                  AttributedString.Guts._paragraphExtending(from:)( v277,  v279,  v281,  v283,  (uint64_t)&v357);
                                  uint64_t v11 = Range<>._utf8OffsetRange.getter();
                                  uint64_t v43 = v284;
                                  goto LABEL_338;
                                }
                              }

                              goto LABEL_240;
                            }

                            v285 = *(_OWORD *)(v328 + 16);
                            v417[0] = *(_OWORD *)v328;
                            v417[1] = v285;
                            v417[2] = *(_OWORD *)(v328 + 32);
                            uint64_t result = v318 - 1;
                            if (__OFSUB__(v318, 1LL)) {
                              goto LABEL_422;
                            }
                            if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v318) & 1) != 0)
                            {
                              v286 = *(_OWORD *)v328;
                              v287 = *(_OWORD *)(v328 + 16);
                              v416 = *(_OWORD *)(v328 + 32);
                              v415[1] = v287;
                              v415[0] = v286;
                              v288 = *(_OWORD *)v328;
                              v463 = *(_OWORD *)(v328 + 16);
                              v464 = v416;
                              v462 = v288;
                              outlined init with take of any PredicateExpression<Self.Output == B1>( &v462,  (uint64_t)v465);
                              outlined retain of Locale((uint64_t)v465);
                              v289 = BigString.index(before:)();
                              v291 = v290;
                              v293 = v292;
                              v295 = v294;
                              outlined release of Locale((uint64_t)v415);
                              AttributedString.Guts._paragraphExtending(from:)(v289, v291, v293, v295, (uint64_t)&v351);
                              uint64_t v11 = Range<>._utf8OffsetRange.getter();
                              uint64_t v43 = v296;
                              LOBYTE(v44) = 0;
                            }

                            else
                            {
LABEL_321:
                              uint64_t v11 = 0LL;
                              uint64_t v43 = 0LL;
                              LOBYTE(v44) = 1;
                            }

                            v297 = *(_OWORD *)(v328 + 16);
                            v412 = *(_OWORD *)v328;
                            v413 = v297;
                            v414 = *(_OWORD *)(v328 + 32);
                            if (v316 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
                            {
                              if ((v44 & 1) == 0) {
                                goto LABEL_335;
                              }
                              if (v319 < 1)
                              {
LABEL_240:
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                return swift_unknownObjectRelease();
                              }

LABEL_193:
                  unint64_t v150 = (v155 - 1) & v155;
                  unint64_t v153 = __clz(__rbit64(v155)) + (v145 << 6);
                }

                uint64_t v157 = *(void *)(*(void *)(v146 + 56) + 8 * v153);
                uint64_t v158 = *(void *)(v157 + 16);
                if (v158)
                {
                  v159 = (uint64_t *)(*(void *)(v146 + 48) + 16 * v153);
                  uint64_t v161 = *v159;
                  uint64_t v160 = v159[1];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  uint64_t v162 = (void *)(v157 + 40);
                  do
                  {
                    AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( v161,  v160,  *(v162 - 1),  *v162,  0LL);
                    v162 += 2;
                    --v158;
                  }

                  while (v158);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v146 = v182;
                }
              }
            }

            uint64_t v64 = v62;
            v191 = &v194;
            __int128 v40 = &v200;
            uint64_t v182 = MEMORY[0x18961AFF0];
LABEL_45:
            while (2)
            {
              __int128 v66 = v185[1];
              __int128 v218 = *v185;
              __int128 v219 = v66;
              __int128 v220 = v185[2];
              BigString.utf8.getter();
              unint64_t v188 = v63;
              unint64_t v63 = BigString.UTF8View.index(_:offsetBy:)();
              int64_t v38 = v67;
              uint64_t v33 = v68;
              outlined release of Locale((uint64_t)v209);
              uint64_t v190 = v64 + 64;
              uint64_t v69 = 1LL << *(_BYTE *)(v64 + 32);
              if (v69 < 64) {
                uint64_t v70 = ~(-1LL << v69);
              }
              else {
                uint64_t v70 = -1LL;
              }
              unint64_t v71 = v70 & *(void *)(v64 + 64);
              int64_t v48 = (unint64_t)(v69 + 63) >> 6;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              uint64_t v43 = 0LL;
              do
              {
                if (v71)
                {
                  unint64_t v73 = __clz(__rbit64(v71));
                  v71 &= v71 - 1;
                  unint64_t v74 = v73 | (v43 << 6);
                }

                else
                {
                  int64_t v76 = v43 + 1;
                  if (__OFADD__(v43, 1LL))
                  {
                    __break(1u);
                    goto LABEL_220;
                  }

                  if (v76 >= v48) {
                    goto LABEL_44;
                  }
                  unint64_t v77 = *(void *)(v190 + 8 * v76);
                  ++v43;
                  if (!v77)
                  {
                    uint64_t v43 = v76 + 1;
                    if (v76 + 1 >= v48) {
                      goto LABEL_44;
                    }
                    unint64_t v77 = *(void *)(v190 + 8 * v43);
                    if (!v77)
                    {
                      uint64_t v43 = v76 + 2;
                      if (v76 + 2 >= v48) {
                        goto LABEL_44;
                      }
                      unint64_t v77 = *(void *)(v190 + 8 * v43);
                      if (!v77)
                      {
                        uint64_t v43 = v76 + 3;
                        if (v76 + 3 >= v48) {
                          goto LABEL_44;
                        }
                        unint64_t v77 = *(void *)(v190 + 8 * v43);
                        if (!v77)
                        {
                          uint64_t v43 = v76 + 4;
                          if (v76 + 4 >= v48) {
                            goto LABEL_44;
                          }
                          unint64_t v77 = *(void *)(v190 + 8 * v43);
                          if (!v77)
                          {
                            int64_t v78 = v76 + 5;
                            if (v78 >= v48) {
                              goto LABEL_44;
                            }
                            unint64_t v77 = *(void *)(v190 + 8 * v78);
                            if (!v77)
                            {
                              while (1)
                              {
                                uint64_t v43 = v78 + 1;
                                if (__OFADD__(v78, 1LL)) {
                                  goto LABEL_246;
                                }
                                if (v43 >= v48) {
                                  break;
                                }
                                unint64_t v77 = *(void *)(v190 + 8 * v43);
                                ++v78;
                                if (v77) {
                                  goto LABEL_69;
                                }
                              }

          v244 = v330;
          swift_bridgeObjectRetain();
          outlined copy of PathOrURL(v104, v105, v103, 0);
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v102,  (uint64_t)v104,  v105,  (void *)v15,  v328,  v244,  0LL,  0LL,  &v340,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
          goto LABEL_290;
        }

        v340._countAndFlagsBits = 0LL;
        v340._object = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        v340._countAndFlagsBits = 0xD000000000000014LL;
        v340._object = (void *)0x80000001839C9190LL;
        LODWORD(v336) = v15;
        while (1)
        {
LABEL_304:
          v320._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v320);
          swift_bridgeObjectRelease();
          LODWORD(v323) = 0;
          v322 = 73LL;
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_305:
          v340._countAndFlagsBits = 0LL;
          v340._object = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(22LL);
          swift_bridgeObjectRelease();
          v340._countAndFlagsBits = 0xD000000000000014LL;
          v340._object = (void *)0x80000001839C9190LL;
          LODWORD(v337._countAndFlagsBits) = v15;
        }
      }

      MEMORY[0x186E20E60](a4, -1LL, -1LL);
      if (!--v33)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        int64_t v41 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v42 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v43 = objc_msgSend(v41, sel_initWithDomain_code_userInfo_, v42, 512, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        int64_t v44 = objc_msgSend(v43, sel_domain);
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        char v47 = v46;

        if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v47 == v48)
        {
          swift_bridgeObjectRelease_n();
LABEL_49:
          swift_willThrow();
          goto LABEL_292;
        }

        uint64_t v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v69 & 1) != 0) {
          goto LABEL_49;
        }
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
LABEL_297:
        __break(1u);
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
        goto LABEL_300;
      }
    }

    uint64_t v29 = (uint64_t)&v324;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    a4 = (char *)&v324 - v36;
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)&v324 - v36, v15, 1, v31, v334);
    if ((v37 & 1) != 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      uint64_t v49 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v50 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      int64_t v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v52 = objc_msgSend(v51, sel_domain);
      BOOL v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      char v55 = v54;

      if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v55 == v56)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_206;
      }

      LOBYTE(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0) {
        goto LABEL_206;
      }
      __break(1u);
LABEL_41:
      unint64_t v58 = MEMORY[0x186E1B0E8]();
      LODWORD(a6) = v58;
      if ((v17 & 1) == 0)
      {
        uint64_t v70 = v333;
        unint64_t v71 = 4LL;
        int64_t v72 = (uint64_t)v331;
        switch(v58)
        {
          case 1:
          case 13:
            unint64_t v71 = 513LL;
            goto LABEL_162;
          case 2:
            goto LABEL_162;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 29:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
            goto LABEL_116;
          case 17:
            unint64_t v71 = 516LL;
            goto LABEL_162;
          case 28:
          case 69:
            unint64_t v71 = 640LL;
            goto LABEL_162;
          case 30:
            unint64_t v71 = 642LL;
            goto LABEL_162;
          case 63:
            unint64_t v71 = 514LL;
            goto LABEL_162;
          default:
            int64_t v72 = (uint64_t)v331;
            if (v58 == 102)
            {
              a6 = 0LL;
              unint64_t v71 = 512LL;
              unint64_t v73 = v332;
LABEL_176:
              __int128 v215 = v330;
              swift_bridgeObjectRetain();
              outlined copy of PathOrURL(v70, v72, v73, 0);
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v71,  (uint64_t)v70,  v72,  a6,  v328,  v215,  0LL,  0LL,  &v340,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
              goto LABEL_206;
            }

              swift_allocError();
              *uint64_t v162 = v60;
              goto LABEL_194;
            }

            uint64_t v111 = 0LL;
LABEL_195:
             objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v176,  v108,  v109,  v111,  0,  0,  0);

            swift_unknownObjectRelease();
            outlined consume of PathOrURL(v34, v10, v110, 1);
            goto LABEL_196;
          }

    *a6 = result;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = a4;
    return result;
  }

  unint64_t v141 = a6;
  uint64_t v9 = *((void *)v6 + 25);
  __int128 v222 = *((void *)v6 + 24);
  uint64_t v10 = v6[3];
  __int128 v212 = v6[2];
  __int128 v213 = v10;
  uint64_t v11 = v6[7];
  __int128 v216 = v6[6];
  __int128 v217 = v11;
  uint64_t v12 = v6[5];
  __int128 v214 = v6[4];
  __int128 v215 = v12;
  unint64_t v13 = v6[11];
  __int128 v220 = v6[10];
  v221 = v13;
  uint64_t v14 = v6[9];
  __int128 v218 = v6[8];
  __int128 v219 = v14;
  unint64_t v15 = v6[1];
  v210 = *v6;
  v211 = v15;
  v209 = v9;
  int64_t v145 = *(void *)(v9 + 16);
  if (v145)
  {
    __int128 v16 = 0LL;
    uint64_t v148 = v219;
    unint64_t v150 = *((void *)&v218 + 1);
    uint64_t v17 = *((void *)&v218 + 1) >> 10;
    unint64_t v153 = *((void *)&v220 + 1) >> 10;
    uint64_t v18 = (void *)v210;
    unint64_t v155 = a5;
    int64_t v156 = *((void *)&v210 + 1);
    int64_t v151 = (__int128 *)(v210 + 16);
    unint64_t v177 = &v196;
    uint64_t v174 = (__int128 *)&v185;
    uint64_t v144 = v9;
    int64_t v142 = &v193;
    uint64_t v143 = (uint64_t *)(v9 + 40);
    uint64_t v146 = v220;
    uint64_t v147 = *((void *)&v219 + 1);
    uint64_t v149 = *((void *)&v218 + 1) >> 10;
    v159 = (void *)v210;
    while (1)
    {
      if (v17 >= result >> 10 || v153 < result >> 10) {
        goto LABEL_202;
      }
      uint64_t v20 = v18[8];
      uint64_t v21 = v18[10];
      if (v20) {
        uint64_t v22 = v18[10];
      }
      else {
        uint64_t v22 = 0LL;
      }
      if (result < 0x800 || (uint64_t v23 = (result >> 11) - 1, v22 < v23))
      {
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        uint64_t result = swift_unknownObjectRelease();
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }

      int64_t v172 = v18[11];
      __int128 v164 = a4;
      unint64_t v165 = result;
      uint64_t v162 = a2;
      uint64_t v163 = a3;
      uint64_t v160 = v16;
      uint64_t v161 = result >> 10;
      int64_t v166 = result >> 11;
      if (!v20)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v210);
        uint64_t v26 = 0LL;
        int64_t v38 = 0LL;
        unint64_t v39 = 0LL;
        __int128 v40 = 0LL;
        goto LABEL_73;
      }

      uint64_t v24 = v18[9];
      __int128 v25 = *(unsigned __int8 *)(v20 + 18);
      unint64_t v175 = v24;
      v176 = (result >> 11) - 1;
      if ((uint64_t)(result >> 11) <= v21)
      {
        if (*(_WORD *)(v20 + 16)) {
          break;
        }
      }

      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v210);
      swift_unknownObjectRelease();
      int64_t v41 = *(unsigned __int16 *)(v20 + 16);
      uint64_t v42 = *(_BYTE *)(v20 + 18);
      swift_unknownObjectRelease_n();
      uint64_t v26 = 0LL;
      uint64_t v43 = 0LL;
      int64_t v44 = ((-15LL << ((4 * v42 + 8) & 0x3C)) - 1) & v25 | (unint64_t)(v41 << ((4 * v42 + 8) & 0x3C));
LABEL_72:
      swift_unknownObjectRetain();
      unint64_t v39 = v44;
      int64_t v51 = v44;
      int64_t v38 = v43;
      __int128 v40 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v172, v51, v43, v20, v175);
      swift_unknownObjectRelease_n();
      uint64_t v18 = v159;
      uint64_t v23 = v176;
LABEL_73:
      uint64_t v169 = v23 - v26;
      if (__OFSUB__(v23, v26)) {
        goto LABEL_204;
      }
      if (v172 != v18[11]) {
        goto LABEL_205;
      }
      if (v38)
      {
        uint64_t v52 = v38;
        BOOL v53 = (4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C;
        int64_t v54 = v39;
        char v55 = v52 + 24 * ((v39 >> v53) & 0xF);
        unint64_t v57 = *(void *)(v55 + 32);
        uint64_t v56 = *(void *)(v55 + 40);
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
      }

      else
      {
        unint64_t v58 = v18[8];
        swift_unknownObjectRetain();
        uint64_t v52 = 0LL;
        int64_t v54 = v39;
        specialized Rope._Node.subscript.getter(v39, v58);
        unint64_t v57 = v59;
        uint64_t v56 = v60;
        uint64_t result = swift_unknownObjectRelease();
      }

      if (v156 >= v40)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v138 = v155;
        goto LABEL_177;
      }

      int64_t v154 = v56;
      int64_t v61 = v172;
      unint64_t v175 = v57;
      while (2)
      {
        uint64_t v62 = v18[8];
        unint64_t v63 = v18[9];
        uint64_t v65 = (_BYTE *)v18[10];
        uint64_t v64 = v18[11];
        uint64_t v192 = v61;
        __int128 v193 = v54;
        __int128 v194 = v52;
        if (v61 != v64) {
          goto LABEL_208;
        }
        __int128 v66 = v61;
        uint64_t v168 = v40;
        if (v62)
        {
          int64_t v67 = *(unsigned __int8 *)(v62 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (v54 <= v67) {
            goto LABEL_209;
          }
        }

        else if (!v54)
        {
          goto LABEL_209;
        }

        if (v52)
        {
          uint64_t v68 = (4 * *(_BYTE *)(v52 + 18) + 8) & 0x3C;
          if (((v54 >> v68) & 0xF) != 0)
          {
            uint64_t v69 = ((((v54 >> v68) & 0xF) - 1) << v68) | ((-15LL << v68) - 1) & v54;
            __int128 v193 = v69;
LABEL_134:
            uint64_t v98 = (4 * *(_BYTE *)(v52 + 18) + 8) & 0x3C;
            uint64_t v158 = v69;
            uint64_t v167 = v52;
            unint64_t v86 = *(void *)(v52 + 24 * ((v69 >> v98) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v87 = 0;
            goto LABEL_135;
          }
        }

        uint64_t v70 = (4 * *(_BYTE *)(v62 + 18) + 8) & 0x3C;
        unint64_t v71 = (v54 >> v70) & 0xF;
        if (!*(_BYTE *)(v62 + 18))
        {
          if (!v71) {
            goto LABEL_221;
          }
          uint64_t v69 = ((v71 - 1) << v70) | ((-15LL << v70) - 1) & v54;
          __int128 v193 = v69;
          __int128 v194 = v62;
          uint64_t v52 = v62;
          uint64_t v18 = v159;
          if (v62) {
            goto LABEL_134;
          }
          goto LABEL_99;
        }

        int64_t v72 = v62 + 24;
        if (v71 < *(unsigned __int16 *)(v62 + 16))
        {
          v176 = v63;
          unint64_t v73 = *(void *)(v72 + 24 * ((v54 >> v70) & 0xF));
          unint64_t v74 = (4 * *(_BYTE *)(v73 + 18) + 8) & 0x3C;
          unint64_t v75 = v54;
          int64_t v76 = (v54 >> v74) & 0xF;
          if (*(_BYTE *)(v73 + 18))
          {
            unint64_t v77 = v73 + 24;
            if (v76 >= *(unsigned __int16 *)(v73 + 16))
            {
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRetain();
              if (v76) {
                goto LABEL_105;
              }
              goto LABEL_121;
            }

            int64_t v173 = v65;
            uint64_t v171 = v73 + 24;
            int64_t v78 = *(void *)(v77 + 24LL * v76);
            unint64_t v79 = (4 * *(_BYTE *)(v78 + 18) + 8) & 0x3C;
            __int128 v80 = (v75 >> v79) & 0xF;
            if (!*(_BYTE *)(v78 + 18))
            {
              if (v80)
              {
                __int128 v193 = ((v80 - 1) << v79) | ((-15LL << v79) - 1) & v75;
                __int128 v194 = v78;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                uint64_t v52 = v78;
                goto LABEL_130;
              }

              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRetain();
              goto LABEL_120;
            }

            __int128 v81 = (void *)(v78 + 24);
            if (v80 < *(unsigned __int16 *)(v78 + 16))
            {
              uint64_t v158 = v78;
              uint64_t v82 = v81[3 * ((v75 >> v79) & 0xF)];
              uint64_t v83 = *(unsigned __int8 *)(v82 + 18);
              unint64_t v84 = (4 * v83 + 8) & 0x3C;
              int64_t v85 = (v75 >> v84) & 0xF;
              *(void *)&unint64_t v183 = v85;
              if (v83)
              {
                __int128 v170 = v81;
                uint64_t v167 = v79;
                uint64_t v157 = v82 + 16;
                unint64_t v152 = v82 + 24;
                int64_t v140 = v83;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                LODWORD(v157) = specialized closure #1 in Rope._Node.formPredecessor(of:)( v157,  v152,  (uint64_t *)&v183,  (uint64_t)&v192,  v140);
                uint64_t result = swift_unknownObjectRelease();
                if ((v157 & 1) != 0)
                {
                  uint64_t v52 = v194;
                  goto LABEL_129;
                }

    uint64_t v11 = 0;
    goto LABEL_194;
  }

  if (v107)
  {
    if (v108)
    {
      uint64_t v62 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSPOSIXErrorDomain",  (int)v55,  0LL);
      goto LABEL_121;
    }

    goto LABEL_193;
  }

  int64_t v91 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to setup posix spawn attributes with error %d",  v55);
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v91 userInfo:0]);
LABEL_206:
  __break(1u);
  return result;
}

LABEL_220:
                    uint64_t v167 = 1LL;
                    int64_t v44 = v72;
                    goto LABEL_228;
                  }

                v250 = (v264 - 1) & v264;
                v252 = __clz(__rbit64(v264)) + (v247 << 6);
              }

              v253 = 16 * v252;
              v254 = (uint64_t *)(*(void *)(v228 + 48) + 16 * v252);
              v256 = *v254;
              v255 = v254[1];
              v257 = 24 * v252;
              v258 = *(void *)(v228 + 56) + v257;
              v259 = *(_BYTE *)(v258 + 16);
              v260 = (void *)(*(void *)(v236 + 48) + v253);
              v261 = *(_OWORD *)v258;
              *v260 = v256;
              v260[1] = v255;
              v262 = *(void *)(v236 + 56) + v257;
              *(_OWORD *)v262 = v261;
              *(_BYTE *)(v262 + 16) = v259;
              swift_bridgeObjectRetain();
            }
          }

LABEL_261:
                  __break(1u);
LABEL_262:
                  __break(1u);
LABEL_263:
                  __break(1u);
                  goto LABEL_264;
                }

      swift_release();
      unint64_t v133 = 1LL << *(_BYTE *)(v267 + 32);
      if (v133 < 64) {
        uint64_t v134 = ~(-1LL << v133);
      }
      else {
        uint64_t v134 = -1LL;
      }
      unint64_t v15 = v134 & *(void *)(v267 + 64);
      __int128 v25 = (unint64_t)(v133 + 63) >> 6;
      uint64_t result = swift_retain();
      v135 = 0LL;
      if (v15)
      {
LABEL_265:
        uint64_t v136 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        uint64_t v137 = v136 | (v135 << 6);
        goto LABEL_282;
      }

      while (1)
      {
        uint64_t v30 = __OFADD__(v135++, 1LL);
        if (v30) {
          goto LABEL_423;
        }
        if (v135 >= v25) {
          goto LABEL_303;
        }
        uint64_t v139 = *(void *)(v265 + 8 * v135);
        if (!v139) {
          break;
        }
LABEL_281:
        unint64_t v15 = (v139 - 1) & v139;
        uint64_t v137 = __clz(__rbit64(v139)) + (v135 << 6);
LABEL_282:
        unint64_t v141 = (int64_t *)(*(void *)(v267 + 48) + 16 * v137);
        uint64_t v5 = *v141;
        int64_t v142 = v141[1];
        swift_bridgeObjectRetain();
        AttributedString._AttributeStorage.subscript.getter(v5, v142, v267, (uint64_t)&v276);
        if (!*((void *)&v277 + 1))
        {
          outlined destroy of Any?( (uint64_t)&v276,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t v138 = 0LL;
LABEL_267:
          swift_bridgeObjectRetain();
          outlined consume of AttributedString.AttributeRunBoundaries?(v138, 1LL);
          outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
LABEL_268:
          uint64_t result = swift_bridgeObjectRelease();
          if (v15) {
            goto LABEL_265;
          }
          continue;
        }

        uint64_t v138 = *((void *)&v278 + 1);
        uint64_t v143 = v279;
        outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v278 + 1), v279);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v276);
        if (v143 == 1) {
          goto LABEL_267;
        }
        *(void *)&v276 = v138;
        *((void *)&v276 + 1) = v143;
        *(void *)&v272 = v268;
        *((void *)&v272 + 1) = v9;
        swift_bridgeObjectRetain();
        outlined copy of AttributedString.AttributeRunBoundaries?(v138, v143);
        uint64_t v144 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
        uint64_t v10 = *((void *)&v276 + 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v138, v143);
        if ((v144 & 1) == 0) {
          goto LABEL_268;
        }
        AttributedString._AttributeStorage.subscript.getter(v5, v142, v267, (uint64_t)&v276);
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v5, v142);
        uint64_t result = swift_bridgeObjectRelease();
        char v47 = 1LL;
        v246 = 1;
        if (v15) {
          goto LABEL_265;
        }
      }

      int64_t v140 = v135 + 1;
      if (v135 + 1 >= v25) {
        goto LABEL_303;
      }
      uint64_t v139 = *(void *)(v265 + 8 * v140);
      if (v139) {
        goto LABEL_280;
      }
      int64_t v140 = v135 + 2;
      if (v135 + 2 >= v25) {
        goto LABEL_303;
      }
      uint64_t v139 = *(void *)(v265 + 8 * v140);
      if (v139) {
        goto LABEL_280;
      }
      int64_t v140 = v135 + 3;
      if (v135 + 3 >= v25) {
        goto LABEL_303;
      }
      uint64_t v139 = *(void *)(v265 + 8 * v140);
      if (v139) {
        goto LABEL_280;
      }
      int64_t v140 = v135 + 4;
      if (v135 + 4 < v25)
      {
        uint64_t v139 = *(void *)(v265 + 8 * v140);
        if (!v139)
        {
          while (1)
          {
            v135 = v140 + 1;
            if (__OFADD__(v140, 1LL)) {
              break;
            }
            if (v135 >= v25) {
              goto LABEL_303;
            }
            uint64_t v139 = *(void *)(v265 + 8 * v135);
            ++v140;
            if (v139) {
              goto LABEL_281;
            }
          }

LABEL_260:
                __break(1u);
                goto LABEL_261;
              }

              __break(1u);
              goto LABEL_260;
            }

            while (1)
            {
              while (1)
              {
                unint64_t v86 = __clz(__rbit64(v84));
                v84 &= v84 - 1;
                unint64_t v87 = v86 | (v85 << 6);
LABEL_81:
                uint64_t v88 = *(void *)(v64 + 56);
                uint64_t v89 = (void *)(*(void *)(v64 + 48) + 16 * v87);
                uint64_t v90 = v89[1];
                *(void *)&__int128 v193 = *v89;
                *((void *)&v193 + 1) = v90;
                outlined init with copy of AttributedString._AttributeValue(v88 + 72 * v87, (uint64_t)&v194);
                swift_bridgeObjectRetain();
LABEL_88:
                outlined init with take of LocalePreferences?( (uint64_t)&v193,  (uint64_t)&v199,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
                uint64_t v94 = *((void *)&v199 + 1);
                if (!*((void *)&v199 + 1))
                {
                  swift_release();
                  unint64_t v79 = v189;
                  if (v184 <= v189 >> 10) {
                    goto LABEL_172;
                  }
                  goto LABEL_73;
                }

                uint64_t v95 = v199;
                uint64_t v43 = *((void *)&v202 + 1);
                unint64_t v96 = v203;
                outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v202 + 1), v203);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v200);
                if (v96 >= 2) {
                  break;
                }
LABEL_79:
                swift_bridgeObjectRelease();
                if (!v84) {
                  goto LABEL_82;
                }
              }

              uint64_t v97 = HIBYTE(v96) & 0xF;
              if ((v96 & 0x2000000000000000LL) == 0) {
                uint64_t v97 = v43 & 0xFFFFFFFFFFFFLL;
              }
              if (!v97)
              {
                outlined consume of AttributedString.AttributeRunBoundaries?(v43, v96);
                goto LABEL_79;
              }

              if ((v96 & 0x1000000000000000LL) != 0)
              {
                int v99 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
              }

              else if ((v96 & 0x2000000000000000LL) != 0)
              {
                if ((v43 & 0x80) != 0) {
                  __asm { BR              X10 }
                }

                int v99 = v43;
              }

              else
              {
                if ((v43 & 0x1000000000000000LL) != 0) {
                  uint64_t v98 = (char *)((v96 & 0xFFFFFFFFFFFFFFFLL) + 32);
                }
                else {
                  uint64_t v98 = (char *)_StringObject.sharedUTF8.getter();
                }
                int v99 = *v98;
                if (*v98 < 0) {
                  __asm { BR              X9 }
                }
              }

              outlined consume of AttributedString.AttributeRunBoundaries?(v43, v96);
              BOOL v100 = v99 == (_DWORD)v192;
              uint64_t v33 = (uint64_t)&v194;
              if (v100) {
                goto LABEL_79;
              }
              if (v186 < v187)
              {
                __break(1u);
LABEL_234:
                __break(1u);
LABEL_235:
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                __break(1u);
LABEL_240:
                __break(1u);
LABEL_241:
                __break(1u);
LABEL_242:
                __break(1u);
LABEL_243:
                __break(1u);
LABEL_244:
                __break(1u);
                goto LABEL_245;
              }

              swift_bridgeObjectRetain();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&__int128 v193 = v182;
              unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v94);
              uint64_t v104 = *(void *)(v182 + 16);
              char v179 = v102;
              BOOL v105 = (v102 & 1) == 0;
              uint64_t v106 = v104 + v105;
              if (__OFADD__(v104, v105)) {
                goto LABEL_234;
              }
              if (*(void *)(v182 + 24) >= v106)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  uint64_t v107 = v182;
                  char v110 = v102;
                }

                else
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
                  uint64_t v123 = static _DictionaryStorage.copy(original:)();
                  uint64_t v107 = v123;
                  char v110 = v179;
                  if (*(void *)(v182 + 16))
                  {
                    unint64_t v178 = v103;
                    uint64_t v124 = (char *)(v123 + 64);
                    uint64_t v125 = (char *)(v182 + 64);
                    unint64_t v126 = (unint64_t)((1LL << *(_BYTE *)(v107 + 32)) + 63) >> 6;
                    uint64_t v171 = v182 + 64;
                    if (v107 != v182 || v124 >= &v125[8 * v126]) {
                      memmove(v124, v125, 8 * v126);
                    }
                    int64_t v127 = 0LL;
                    uint64_t v181 = v107;
                    *(void *)(v107 + 16) = *(void *)(v182 + 16);
                    uint64_t v128 = 1LL << *(_BYTE *)(v182 + 32);
                    if (v128 < 64) {
                      uint64_t v129 = ~(-1LL << v128);
                    }
                    else {
                      uint64_t v129 = -1LL;
                    }
                    unint64_t v130 = v129 & *(void *)(v182 + 64);
                    int64_t v172 = (unint64_t)(v128 + 63) >> 6;
                    while (1)
                    {
                      if (v130)
                      {
                        unint64_t v131 = __clz(__rbit64(v130));
                        v130 &= v130 - 1;
                        int64_t v132 = v127;
                        unint64_t v133 = v131 | (v127 << 6);
                      }

                      else
                      {
                        int64_t v140 = v127 + 1;
                        if (__OFADD__(v127, 1LL)) {
                          goto LABEL_262;
                        }
                        uint64_t v107 = v181;
                        unint64_t v103 = v178;
                        if (v140 >= v172) {
                          break;
                        }
                        unint64_t v141 = *(void *)(v171 + 8 * v140);
                        int64_t v142 = v127 + 1;
                        if (!v141)
                        {
                          int64_t v142 = v127 + 2;
                          if (v127 + 2 >= v172) {
                            break;
                          }
                          unint64_t v141 = *(void *)(v171 + 8 * v142);
                          if (!v141)
                          {
                            int64_t v142 = v127 + 3;
                            if (v127 + 3 >= v172) {
                              break;
                            }
                            unint64_t v141 = *(void *)(v171 + 8 * v142);
                            if (!v141)
                            {
                              int64_t v142 = v127 + 4;
                              if (v127 + 4 >= v172) {
                                break;
                              }
                              unint64_t v141 = *(void *)(v171 + 8 * v142);
                              if (!v141)
                              {
                                int64_t v142 = v127 + 5;
                                if (v127 + 5 >= v172) {
                                  break;
                                }
                                unint64_t v141 = *(void *)(v171 + 8 * v142);
                                if (!v141)
                                {
                                  uint64_t v143 = v127 + 6;
                                  if (v127 + 6 >= v172) {
                                    break;
                                  }
                                  unint64_t v141 = *(void *)(v171 + 8 * v143);
                                  if (!v141)
                                  {
                                    uint64_t v107 = v181;
                                    unint64_t v103 = v178;
                                    char v110 = v179;
                                    while (1)
                                    {
                                      int64_t v142 = v143 + 1;
                                      if (__OFADD__(v143, 1LL)) {
                                        goto LABEL_263;
                                      }
                                      if (v142 >= v172) {
                                        goto LABEL_171;
                                      }
                                      unint64_t v141 = *(void *)(v171 + 8 * v142);
                                      ++v143;
                                      if (v141) {
                                        goto LABEL_170;
                                      }
                                    }
                                  }

                                  int64_t v142 = v127 + 6;
                                }
                              }
                            }
                          }
                        }

  v565 = v654;

  swift_bridgeObjectRelease();
  outlined consume of URL?((void *)v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  *v649 = v679;

LABEL_261:
}

LABEL_170:
                        unint64_t v130 = (v141 - 1) & v141;
                        int64_t v132 = v142;
                        unint64_t v133 = __clz(__rbit64(v141)) + (v142 << 6);
                      }

                      uint64_t v134 = 16 * v133;
                      v135 = (void *)(*(void *)(v182 + 48) + 16 * v133);
                      uint64_t v136 = v135[1];
                      uint64_t v137 = 8 * v133;
                      uint64_t v138 = *(void *)(*(void *)(v182 + 56) + v137);
                      uint64_t v139 = (void *)(*(void *)(v181 + 48) + v134);
                      *uint64_t v139 = *v135;
                      v139[1] = v136;
                      *(void *)(*(void *)(v181 + 56) + v137) = v138;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      char v110 = v179;
                      int64_t v127 = v132;
                    }
                  }

    uint64_t v18 = (char *)_StringObject.sharedUTF8.getter();
LABEL_31:
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v18, v19, 4u, 1)) {
      goto LABEL_22;
    }
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v20 = swift_bridgeObjectRelease();
    *(void *)(v4 + 72) = a1;
    *(void *)(v4 + 80) = a2;
    LOBYTE(v135) = 37;
    MEMORY[0x1895F8858](v20);
    unint64_t v133 = &v135;
    uint64_t v21 = specialized Sequence.contains(where:)( (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t)v132,  a1,  a2);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = v21 & 1;
    goto LABEL_158;
  }

  swift_bridgeObjectRetain();
  unint64_t v15 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0) {
    goto LABEL_32;
  }
LABEL_22:
  if (*(void *)(v4 + 32))
  {
    object = *(void *)(v4 + 24);
    uint64_t v17 = *(void *)(v4 + 32);
  }

  else
  {
    object = 0LL;
    if (*(_BYTE *)(v4 + 9) == 1)
    {
      uint64_t v17 = 0LL;
      if (*(void *)v4)
      {
        if ((*(_BYTE *)(*(void *)v4 + 48LL) & 1) != 0)
        {
          object = 0LL;
          uint64_t v17 = 0LL;
        }

        else
        {
          uint64_t v52 = String.subscript.getter();
          object = MEMORY[0x186E1B610](v52);
          uint64_t v17 = v53;
          swift_bridgeObjectRelease();
        }
      }
    }

    else
    {
      uint64_t v17 = 0LL;
    }
  }

  if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }

  if (v17)
  {
    uint64_t v23 = one-time initialization token for schemesToPercentEncodeHost;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23 != -1) {
      swift_once();
    }
    uint64_t v24 = static RFC3986Parser.schemesToPercentEncodeHost;
    __int128 v25 = String.lowercased()();
    object = (unint64_t)v25._object;
    LOBYTE(v24) = specialized Set.contains(_:)(v25._countAndFlagsBits, (uint64_t)v25._object, v24);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
    {
LABEL_37:
      if ((a2 & 0x2000000000000000LL) != 0) {
        uint64_t v26 = HIBYTE(a2) & 0xF;
      }
      else {
        uint64_t v26 = a1 & 0xFFFFFFFFFFFFLL;
      }
      if (v26)
      {
        uint64_t v27 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2);
        if ((v27 & 1) == 0)
        {
          v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
          uint64_t v136 = a2;
          MEMORY[0x1895F8858](v27);
          unint64_t v133 = &v135;
          uint64_t v134 = 4;
          swift_bridgeObjectRetain();
LABEL_137:
          uint64_t v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v132, a1, a2);
          if (v84)
          {
            unint64_t v79 = v83;
            __int128 v80 = v84;
            swift_bridgeObjectRelease_n();
            goto LABEL_157;
          }

          int64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v135;
          unint64_t v86 = v136;
          swift_bridgeObjectRetain();
          unint64_t v79 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v85, v86, 4u);
          __int128 v80 = v87;
          swift_bridgeObjectRelease_n();
          goto LABEL_156;
        }

        uint64_t result = specialized Collection.first.getter(a1, a2);
        if ((result & 0x100) == 0)
        {
          if (result == 91)
          {
            if ((a2 & 0x1000000000000000LL) == 0)
            {
              uint64_t v28 = (v26 << 16) - 65532;
              LOBYTE(v29) = 1;
LABEL_46:
              if ((v28 & 0xC) == 4LL << v29) {
                uint64_t v28 = _StringGuts._slowEnsureMatchingEncoding(_:)(v28, a1, a2);
              }
              uint64_t v30 = v28 >> 16;
              if (v28 >> 16 >= v26)
              {
                __break(1u);
              }

              else
              {
                if ((a2 & 0x1000000000000000LL) != 0)
                {
                  uint64_t v32 = String.UTF8View._foreignSubscript(position:)();
                }

                else if ((a2 & 0x2000000000000000LL) != 0)
                {
                  v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
                  uint64_t v136 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v32 = *((_BYTE *)&v135 + v30);
                }

                else
                {
                  if ((a1 & 0x1000000000000000LL) != 0) {
                    uint64_t v31 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
                  }
                  else {
                    uint64_t v31 = _StringObject.sharedUTF8.getter();
                  }
                  uint64_t v32 = *(_BYTE *)(v31 + v30);
                }

                if (v32 == 93)
                {
                  int64_t v54 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
                  if ((v55 & 1) != 0)
                  {
                    swift_bridgeObjectRetain();
                    if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) == 0)
                    {
                      swift_bridgeObjectRelease_n();
                      uint64_t result = swift_bridgeObjectRelease();
                      *(void *)(v4 + 72) = 0LL;
                      *(void *)(v4 + 80) = 0LL;
                      *(_BYTE *)(v4 + 153) = 1;
                      return result;
                    }

              unint64_t v133 = (v143 - 1) & v143;
              v135 = __clz(__rbit64(v143)) + (v130 << 6);
            }

            uint64_t v136 = 16 * v135;
            uint64_t v137 = (uint64_t *)(*(void *)(v69 + 48) + v136);
            uint64_t v139 = *v137;
            uint64_t v138 = v137[1];
            int64_t v140 = *(void *)(v76 + 48);
            unint64_t v153 = *(_OWORD *)(*(void *)(v69 + 56) + v136);
            unint64_t v141 = v153;
            int64_t v142 = (void *)(v140 + v136);
            *int64_t v142 = v139;
            v142[1] = v138;
            *(_OWORD *)(*(void *)(v76 + 56) + v136) = v141;
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v153, *((unint64_t *)&v153 + 1));
          }
        }

    v205 = POSIXErrorCode.init(rawValue:)();
    int64_t v72 = (uint64_t)v331;
    if ((v205 & 0x100000000LL) == 0)
    {
      unint64_t v15 = (uint64_t)@"NSPOSIXErrorDomain";
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      v206 = (int)POSIXErrorCode.rawValue.getter();
      v207 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      v208 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      a6 = objc_msgSend(v207, sel_initWithDomain_code_userInfo_, v208, v206, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v209 = objc_msgSend(a6, sel_domain);
      v210 = static String._unconditionallyBridgeFromObjectiveC(_:)(v209);
      __int128 v212 = v211;

      if (v210 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v212 == v213)
      {
LABEL_173:
        swift_bridgeObjectRelease_n();
        unint64_t v73 = v332;
      }

      else
      {
        __int128 v214 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v73 = v332;
        if ((v214 & 1) == 0) {
          goto LABEL_296;
        }
      }

  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  if (!v6) {
    __break(1u);
  }
LABEL_203:
  __break(1u);
LABEL_204:
  if (!v6) {
    __break(1u);
  }
LABEL_206:
  __break(1u);
  return result;
}

LABEL_171:
                  swift_bridgeObjectRelease();
                }
              }

              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v106,  isUniquelyReferenced_nonNull_native);
                uint64_t v107 = v193;
                unint64_t v108 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v94);
                char v110 = v179;
                if ((v179 & 1) != (v109 & 1)) {
                  goto LABEL_266;
                }
                unint64_t v103 = v108;
              }

              swift_bridgeObjectRelease();
              if ((v110 & 1) == 0)
              {
                *(void *)(v107 + 8 * (v103 >> 6) + 64) |= 1LL << v103;
                uint64_t v111 = (uint64_t *)(*(void *)(v107 + 48) + 16 * v103);
                *uint64_t v111 = v95;
                v111[1] = v94;
                *(void *)(*(void *)(v107 + 56) + 8 * v103) = MEMORY[0x18961AFE8];
                uint64_t v112 = *(void *)(v107 + 16);
                BOOL v53 = __OFADD__(v112, 1LL);
                uint64_t v113 = v112 + 1;
                if (v53) {
                  goto LABEL_236;
                }
                *(void *)(v107 + 16) = v113;
                swift_bridgeObjectRetain();
              }

              uint64_t v180 = v107;
              uint64_t v43 = *(void *)(v107 + 56);
              unint64_t v177 = v103;
              int v114 = *(void **)(v43 + 8 * v103);
              unint64_t v115 = v114[2];
              if (v115 && (unint64_t v116 = v115 - 1, v114[2 * v115 + 3] == v187))
              {
                unint64_t v183 = v114[2 * v116 + 4];
                char v117 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v43 + 8 * v177) = v114;
                if ((v117 & 1) == 0)
                {
                  int v114 = specialized _ArrayBuffer._consumeAndCreateNew()(v114);
                  *(void *)(v43 + 8 * v177) = v114;
                }

                unint64_t v118 = v183;
                if (v115 > v114[2]) {
                  goto LABEL_241;
                }
                v119 = &v114[2 * v116];
              }

              else
              {
                char v120 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v43 + 8 * v177) = v114;
                if ((v120 & 1) == 0)
                {
                  int v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v114[2] + 1LL,  1,  v114);
                  *(void *)(v43 + 8 * v177) = v114;
                }

                unint64_t v122 = v114[2];
                unint64_t v121 = v114[3];
                if (v122 >= v121 >> 1)
                {
                  int v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v121 > 1),  v122 + 1,  1,  v114);
                  *(void *)(v43 + 8 * v177) = v114;
                }

                v114[2] = v122 + 1;
                v119 = &v114[2 * v122];
                unint64_t v118 = v187;
              }

              v119[4] = v118;
              v119[5] = v186;
              swift_bridgeObjectRelease_n();
              uint64_t v182 = v180;
              uint64_t v33 = (uint64_t)&v194;
              if (!v84) {
                goto LABEL_82;
              }
            }
          }
        }

        __break(1u);
        goto LABEL_252;
      }
    }
  }

  return result;
}

  uint64_t v2 = v235;
LABEL_172:
  Weekday = (void *)__CFLocalePrefsCopyAppleFirstWeekday(v2);
  if (Weekday)
  {
    int64_t v151 = Weekday;
    v238[0] = 0LL;
    specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(Weekday, v238);

    unint64_t v152 = v238[0];
    if (v238[0])
    {
      unint64_t v153 = 0LL;
      int64_t v154 = v238[0] + 64LL;
      unint64_t v155 = 1LL << *(_BYTE *)(v238[0] + 32LL);
      if (v155 < 64) {
        int64_t v156 = ~(-1LL << v155);
      }
      else {
        int64_t v156 = -1LL;
      }
      uint64_t v157 = v156 & *(void *)(v238[0] + 64LL);
      uint64_t v158 = (unint64_t)(v155 + 63) >> 6;
      v159 = MEMORY[0x18961AFF0];
      if (!v157) {
        goto LABEL_181;
      }
LABEL_178:
      uint64_t v160 = __clz(__rbit64(v157));
      v157 &= v157 - 1;
      for (k = v160 | (v153 << 6); ; k = __clz(__rbit64(v169)) + (v153 << 6))
      {
        uint64_t v162 = (uint64_t *)(*(void *)(v152 + 48) + 16 * k);
        uint64_t v163 = *v162;
        __int128 v164 = (void *)v162[1];
        unint64_t v165 = *(void *)(*(void *)(v152 + 56) + 8 * k);
        swift_bridgeObjectRetain();
        v166._countAndFlagsBits = v163;
        v166._object = v164;
        Calendar.Identifier.init(identifierString:)(v166);
        uint64_t v167 = LOBYTE(v238[0]);
        if (LOBYTE(v238[0]) == 16)
        {
          if (v157) {
            goto LABEL_178;
          }
          goto LABEL_181;
        }

        uint64_t v171 = swift_isUniquelyReferenced_nonNull_native();
        v238[0] = v159;
        int64_t v173 = specialized __RawDictionaryStorage.find<A>(_:)(v167);
        uint64_t v174 = *(void *)(v159 + 16);
        unint64_t v175 = (v172 & 1) == 0;
        v176 = v174 + v175;
        if (__OFADD__(v174, v175)) {
          goto LABEL_281;
        }
        if (*(void *)(v159 + 24) >= v176)
        {
          if ((v171 & 1) != 0)
          {
            unint64_t v178 = v159;
            if ((v172 & 1) != 0) {
              goto LABEL_202;
            }
          }

          else
          {
            __int128 v233 = v173;
            __int128 v230 = v172;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
            uint64_t v181 = static _DictionaryStorage.copy(original:)();
            unint64_t v178 = v181;
            if (*(void *)(v159 + 16))
            {
              uint64_t v182 = (void *)(v181 + 64);
              unint64_t v183 = v159 + 64;
              unint64_t v184 = (unint64_t)((1LL << *(_BYTE *)(v178 + 32)) + 63) >> 6;
              v185 = 0LL;
              *(void *)(v178 + 16) = *(void *)(v159 + 16);
              unint64_t v186 = 1LL << *(_BYTE *)(v159 + 32);
              if (v186 < 64) {
                unint64_t v187 = ~(-1LL << v186);
              }
              else {
                unint64_t v187 = -1LL;
              }
              unint64_t v188 = v187 & *(void *)(v159 + 64);
              unint64_t v189 = (unint64_t)(v186 + 63) >> 6;
              while (1)
              {
                if (v188)
                {
                  uint64_t v190 = __clz(__rbit64(v188));
                  v188 &= v188 - 1;
                  v191 = v190 | (v185 << 6);
                }

                else
                {
                  __int128 v193 = v185 + 1;
                  if (__OFADD__(v185, 1LL)) {
                    goto LABEL_285;
                  }
                  if (v193 >= v189) {
                    break;
                  }
                  __int128 v194 = *(void *)(v183 + 8 * v193);
                  ++v185;
                  if (!v194)
                  {
                    v185 = v193 + 1;
                    if (v193 + 1 >= v189) {
                      break;
                    }
                    __int128 v194 = *(void *)(v183 + 8 * v185);
                    if (!v194)
                    {
                      v185 = v193 + 2;
                      if (v193 + 2 >= v189) {
                        break;
                      }
                      __int128 v194 = *(void *)(v183 + 8 * v185);
                      if (!v194)
                      {
                        v185 = v193 + 3;
                        if (v193 + 3 >= v189) {
                          break;
                        }
                        __int128 v194 = *(void *)(v183 + 8 * v185);
                        if (!v194)
                        {
                          v185 = v193 + 4;
                          if (v193 + 4 >= v189) {
                            break;
                          }
                          __int128 v194 = *(void *)(v183 + 8 * v185);
                          if (!v194)
                          {
                            v185 = v193 + 5;
                            if (v193 + 5 >= v189) {
                              break;
                            }
                            __int128 v194 = *(void *)(v183 + 8 * v185);
                            if (!v194)
                            {
                              v185 = v193 + 6;
                              if (v193 + 6 >= v189) {
                                break;
                              }
                              __int128 v194 = *(void *)(v183 + 8 * v185);
                              if (!v194)
                              {
                                __int128 v195 = v193 + 7;
                                if (v195 >= v189) {
                                  break;
                                }
                                __int128 v196 = v183;
                                __int128 v194 = *(void *)(v183 + 8 * v195);
                                if (!v194)
                                {
                                  while (1)
                                  {
                                    v185 = v195 + 1;
                                    if (__OFADD__(v195, 1LL)) {
                                      break;
                                    }
                                    if (v185 >= v189) {
                                      goto LABEL_236;
                                    }
                                    unint64_t v183 = v196;
                                    __int128 v194 = *(void *)(v196 + 8 * v185);
                                    ++v195;
                                    if (v194) {
                                      goto LABEL_235;
                                    }
                                  }

              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
              goto LABEL_184;
            }

      uint64_t v162 = (v129 - 1) & v129;
      uint64_t v158 = v130;
      unint64_t v118 = __clz(__rbit64(v129)) + (v130 << 6);
LABEL_150:
      v119 = 16 * v118;
      char v120 = (uint64_t *)(*(void *)(v68 + 48) + 16 * v118);
      unint64_t v121 = v120[1];
      uint64_t v160 = *v120;
      unint64_t v122 = 72 * v118;
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v68 + 56) + 72 * v118, (uint64_t)&v176);
      uint64_t v123 = (void *)(*(void *)(v69 + 48) + v119);
      *uint64_t v123 = v160;
      v123[1] = v121;
      uint64_t v124 = *(void *)(v69 + 56) + v122;
      *(_OWORD *)uint64_t v124 = v176;
      uint64_t v125 = v177;
      unint64_t v126 = v178;
      int64_t v127 = v179;
      *(void *)(v124 + 64) = v180;
      *(_OWORD *)(v124 + 32) = v126;
      *(_OWORD *)(v124 + 48) = v127;
      *(_OWORD *)(v124 + 16) = v125;
      swift_bridgeObjectRetain();
    }

    unint64_t v131 = v158 + 7;
    uint64_t v129 = *(void *)&v156[8 * v131];
    if (v129)
    {
      unint64_t v130 = v158 + 7;
      goto LABEL_171;
    }

    while (1)
    {
      unint64_t v130 = v131 + 1;
      if (__OFADD__(v131, 1LL)) {
        goto LABEL_217;
      }
      uint64_t v129 = *(void *)&v156[8 * v130];
      ++v131;
      if (v129) {
        goto LABEL_171;
      }
    }

uint64_t AttributedString.Guts.replaceSubrange<A>(_:with:)( void *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  (*(void (**)(_OWORD **__return_ptr, ValueMetadata *, uint64_t))(a4 + 64))(&v32, a3, a4);
  __int128 v8 = v32[2];
  v39[3] = v32[1];
  v39[4] = v8;
  unint64_t v29 = v33;
  v39[5] = v32[3];
  v39[6] = v33;
  unint64_t v27 = v35;
  v39[7] = v34;
  v39[8] = v35;
  v39[9] = v36;
  swift_unknownObjectRetain();
  swift_release();
  __int128 v9 = v4[2];
  v39[13] = v4[1];
  v39[14] = v9;
  v39[15] = v4[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v31);
  char v10 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  outlined release of Locale((uint64_t)&v32);
  uint64_t v30 = v29 >> 11;
  uint64_t v11 = v27 >> 11;
  uint64_t v12 = AttributedStringProtocol.__guts.getter(a3, a4);
  uint64_t v13 = *a1 >> 11;
  unint64_t v14 = a1[4];
  uint64_t v15 = v14 >> 11;
  if ((v10 & 1) != 0)
  {
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v13, v14 >> 11, v12, v30, v11);
    uint64_t result = v13;
    uint64_t v17 = v15;
    char v18 = 0;
LABEL_7:
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(result, v17, v18, 0LL);
    swift_release();
    return swift_unknownObjectRelease();
  }

  uint64_t v25 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v13, v14 >> 11);
  uint64_t v26 = v19;
  __int128 v20 = v4[2];
  v39[10] = v4[1];
  v39[11] = v20;
  v39[12] = v4[3];
  BigString.utf8.getter();
  uint64_t v28 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v37);
  swift_unknownObjectRetain();
  uint64_t v21 = (void (*)(_OWORD *, void))BigString.unicodeScalars.modify();
  BigString.UnicodeScalarView.replaceSubrange(_:with:)();
  v21(v39, 0LL);
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v13, v15, v12, v30, v11);
  __int128 v22 = v4[2];
  v39[0] = v4[1];
  v39[1] = v22;
  v39[2] = v4[3];
  BigString.utf8.getter();
  uint64_t v23 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v38);
  uint64_t v24 = v23 - v28;
  if (__OFSUB__(v23, v28))
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v17 = v26 + v24;
  if (__OFADD__(v26, v24))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = v25;
  if (v17 >= v25)
  {
    char v18 = 1;
    goto LABEL_7;
  }

uint64_t AttributedString.Guts.attributesToUseForTextReplacement(in:)(unint64_t *a1)
{
  uint64_t v2 = (void *)v1;
  __int128 v4 = *(_OWORD *)(v1 + 32);
  __int128 v35 = *(_OWORD *)(v1 + 16);
  __int128 v36 = v4;
  __int128 v37 = *(_OWORD *)(v1 + 48);
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0) {
    return MEMORY[0x18961AFF0];
  }
  unint64_t v7 = *a1;
  if (*a1 >= 0x800 && (a1[4] ^ v7) <= 0x3FF)
  {
    BigString.utf8.getter();
    unint64_t v7 = BigString.UTF8View.index(before:)();
    uint64_t result = outlined release of Locale((uint64_t)v34);
  }

  uint64_t v8 = *(void *)(v1 + 64);
  int64_t v9 = v7 >> 11;
  if (v8) {
    int64_t v10 = v2[10];
  }
  else {
    int64_t v10 = 0LL;
  }
  if (v10 < v9)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  uint64_t v11 = v2[9];
  uint64_t v12 = v2[11];
  if (!v8 || v9 >= v2[10] || !*(_WORD *)(v8 + 16))
  {
    unint64_t v23 = swift_unknownObjectRetain_n();
    unint64_t v24 = specialized Rope._endPath.getter(v23);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v14 = 0LL;
    if (v8) {
      goto LABEL_32;
    }
    goto LABEL_33;
  }

  uint64_t v33 = v2[9];
  uint64_t v13 = *(unsigned __int8 *)(v8 + 18);
  if (!*(_BYTE *)(v8 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v27 = 0LL;
    uint64_t v14 = v8;
    uint64_t v28 = *(unsigned __int16 *)(v8 + 16);
    if (!*(_WORD *)(v8 + 16)) {
      goto LABEL_51;
    }
LABEL_42:
    uint64_t v29 = *(void *)(v14 + 24);
    BOOL v18 = __OFSUB__(v9, v29);
    v9 -= v29;
    if (v18) {
      goto LABEL_65;
    }
    if (__OFADD__(v9, 1LL))
    {
LABEL_66:
      __break(1u);
      return result;
    }

    if (v9 + 1 < 1) {
      goto LABEL_53;
    }
    if ((_DWORD)v28 == 1) {
      goto LABEL_51;
    }
    uint64_t v30 = (uint64_t *)(v14 + 48);
    uint64_t v31 = 1LL;
    while (1)
    {
      uint64_t v32 = *v30;
      v30 += 3;
      BOOL v18 = __OFSUB__(v9, v32);
      v9 -= v32;
      if (v18) {
        break;
      }
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_64;
      }
      if (v9 + 1 < 1)
      {
        uint64_t v28 = v31;
        goto LABEL_55;
      }

      if (v28 == ++v31) {
        goto LABEL_51;
      }
    }

void *specialized Rope.update<A>(at:by:)(void *result, void *a2, uint64_t *a3)
{
  uint64_t v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (!*a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v6 = result;
  specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)&v13);
  __int128 v16 = v14;
  __int128 v10 = v13;
  __int128 v11 = v14;
  __int128 v12 = v15;
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16);
  uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16 + 8);
  *(void *)&__int128 v11 = v8;
  *((void *)&v11 + 1) = v7;
  a2[3] = v3 + 1;
  *uint64_t v6 = v3 + 1;
  if (*a2)
  {
    v6[2] = specialized Rope._Node._finalizeModify(_:)(&v9, &v10);
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }

{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (!*a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v6 = result;
  specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)&v13);
  __int128 v16 = v14;
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16);
  uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16 + 8);
  __int128 v10 = v13;
  __int128 v11 = v14;
  __int128 v12 = v15;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  *(void *)&__int128 v11 = v7;
  *((void *)&v11 + 1) = v8;
  a2[3] = v3 + 1;
  *uint64_t v6 = v3 + 1;
  if (*a2)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v6[2] = specialized Rope._Node._finalizeModify(_:)(&v9, &v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)v7;
  }

uint64_t specialized _NativeDictionary.filter(_:)( uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v109[3] = a4;
  uint64_t v125 = a3;
  uint64_t v4 = isStackAllocationSafe;
  uint64_t v154 = *MEMORY[0x1895F89C0];
  char v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  int64_t v111 = (unint64_t)((1LL << v5) + 63) >> 6;
  size_t v6 = 8 * v111;
  uint64_t v124 = isStackAllocationSafe;
  if ((v5 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      char v110 = (unint64_t *)swift_slowAlloc();
      bzero(v110, v6);
      uint64_t v120 = 0LL;
      int64_t v36 = 0LL;
      uint64_t v37 = *(void *)(v4 + 64);
      uint64_t v122 = v4 + 64;
      uint64_t v38 = 1LL << *(_BYTE *)(v4 + 32);
      if (v38 < 64) {
        uint64_t v39 = ~(-1LL << v38);
      }
      else {
        uint64_t v39 = -1LL;
      }
      unint64_t v40 = v39 & v37;
      int64_t v123 = (unint64_t)(v38 + 63) >> 6;
      int64_t v41 = &v149;
      unint64_t v126 = &v139;
      unint64_t v121 = (__int128 *)((char *)&v140 + 8);
      uint64_t v112 = &v149;
      while (1)
      {
        if (v40)
        {
          unint64_t v42 = __clz(__rbit64(v40));
          v40 &= v40 - 1;
          unint64_t v43 = v42 | (v36 << 6);
          uint64_t v44 = v125;
        }

        else
        {
          BOOL v16 = __OFADD__(v36++, 1LL);
          uint64_t v44 = v125;
          if (v16) {
            goto LABEL_154;
          }
          if (v36 >= v123) {
            goto LABEL_82;
          }
          unint64_t v45 = *(void *)(v122 + 8 * v36);
          if (!v45)
          {
            int64_t v46 = v36 + 1;
            if (v36 + 1 >= v123) {
              goto LABEL_82;
            }
            unint64_t v45 = *(void *)(v122 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v36 + 2;
              if (v36 + 2 >= v123) {
                goto LABEL_82;
              }
              unint64_t v45 = *(void *)(v122 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v36 + 3;
                if (v36 + 3 >= v123) {
                  goto LABEL_82;
                }
                unint64_t v45 = *(void *)(v122 + 8 * v46);
                if (!v45)
                {
                  while (1)
                  {
                    int64_t v36 = v46 + 1;
                    if (__OFADD__(v46, 1LL)) {
                      goto LABEL_157;
                    }
                    if (v36 >= v123) {
                      break;
                    }
                    unint64_t v45 = *(void *)(v122 + 8 * v36);
                    ++v46;
                    if (v45) {
                      goto LABEL_61;
                    }
                  }

LABEL_82:
                  if (!v120)
                  {
                    uint64_t v4 = MEMORY[0x18961AFF0];
                    goto LABEL_150;
                  }

                  if (v120 == *(void *)(v4 + 16))
                  {
                    swift_retain();
                    goto LABEL_150;
                  }

                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  uint64_t v86 = static _DictionaryStorage.allocate(capacity:)();
                  int64_t v87 = 0LL;
                  unint64_t v88 = *v110;
                  uint64_t v89 = v86 + 64;
                  while (1)
                  {
                    if (v88)
                    {
                      unint64_t v93 = __clz(__rbit64(v88));
                      v88 &= v88 - 1;
                      unint64_t v94 = v93 | (v87 << 6);
                    }

                    else
                    {
                      BOOL v16 = __OFADD__(v87++, 1LL);
                      if (v16) {
                        goto LABEL_158;
                      }
                      if (v87 >= v111) {
                        goto LABEL_149;
                      }
                      unint64_t v95 = v110[v87];
                      if (!v95)
                      {
                        int64_t v96 = v87 + 1;
                        if (v87 + 1 >= v111) {
                          goto LABEL_149;
                        }
                        unint64_t v95 = v110[v96];
                        if (!v95)
                        {
                          int64_t v96 = v87 + 2;
                          if (v87 + 2 >= v111) {
                            goto LABEL_149;
                          }
                          unint64_t v95 = v110[v96];
                          if (!v95)
                          {
                            int64_t v96 = v87 + 3;
                            if (v87 + 3 >= v111) {
                              goto LABEL_149;
                            }
                            unint64_t v95 = v110[v96];
                            if (!v95)
                            {
                              int64_t v96 = v87 + 4;
                              if (v87 + 4 >= v111) {
                                goto LABEL_149;
                              }
                              unint64_t v95 = v110[v96];
                              if (!v95)
                              {
                                while (1)
                                {
                                  int64_t v87 = v96 + 1;
                                  if (__OFADD__(v96, 1LL)) {
                                    goto LABEL_160;
                                  }
                                  if (v87 >= v111) {
                                    break;
                                  }
                                  unint64_t v95 = v110[v87];
                                  ++v96;
                                  if (v95) {
                                    goto LABEL_135;
                                  }
                                }

        if ((v68 & 1) != 0) {
          goto LABEL_146;
        }
        uint64_t v76 = (uint64_t *)(v43 + 16 * v45);
        Swift::Int v78 = *v76;
        uint64_t v77 = v76[1];
        uint64_t v56 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v56) {
          goto LABEL_149;
        }
        if (v79 < v67) {
          goto LABEL_15;
        }
LABEL_90:
        BOOL v84 = v45 - 1;
        if (v45 - 1 >= v13)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }

        if (!v11) {
          goto LABEL_165;
        }
        uint64_t v85 = (uint64_t *)(v43 + 16 * v84);
        uint64_t v2 = *v85;
        uint64_t v86 = (void *)(v43 + 16 * v45);
        int64_t v87 = v86[1];
        uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)( (void **)(v11 + 16 * *v85),  (id *)(v11 + 16LL * *v86),  v11 + 16 * v87,  __dst);
        if (v3)
        {
LABEL_135:
          __int128 v144 = v3;
          swift_bridgeObjectRelease();
          *(void *)(v124 + 16) = 0LL;
          return swift_bridgeObjectRelease();
        }

        if (v87 < v2) {
          goto LABEL_139;
        }
        if (v45 > *(void *)(v12 + 16)) {
          goto LABEL_140;
        }
        *uint64_t v85 = v2;
        *(void *)(v43 + 16 * v84 + 8) = v87;
        unint64_t v88 = *(void *)(v12 + 16);
        if (v45 >= v88) {
          goto LABEL_141;
        }
        unint64_t v13 = v88 - 1;
        uint64_t result = (uint64_t)memmove((void *)(v43 + 16 * v45), v86 + 2, 16 * (v88 - 1 - v45));
        *(void *)(v12 + 16) = v88 - 1;
        unint64_t v73 = v88 > 2;
        char v5 = (Swift::Int)v134;
        unint64_t v11 = v135;
        if (!v73) {
          goto LABEL_15;
        }
      }
    }

    unint64_t v13 = 1LL;
    char v5 = (Swift::Int)v134;
LABEL_15:
    uint64_t v10 = v138;
  }

  while (v138 < v5);
  uint64_t v9 = v124;
LABEL_123:
  uint64_t v124 = v9;
  if (v13 >= 2)
  {
    uint64_t v116 = *v121;
    do
    {
      char v117 = v13 - 2;
      if (v13 < 2) {
        goto LABEL_154;
      }
      if (!v116) {
        goto LABEL_167;
      }
      uint64_t v118 = *(void *)(v12 + 32 + 16 * v117);
      uint64_t v2 = *(void *)(v12 + 32 + 16 * (v13 - 1) + 8);
      uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)( (void **)(v116 + 16 * v118),  (id *)(v116 + 16LL * *(void *)(v12 + 32 + 16 * (v13 - 1))),  v116 + 16 * v2,  __dst);
      if (v3) {
        goto LABEL_135;
      }
      if (v2 < v118) {
        goto LABEL_155;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        __int128 v12 = result;
      }

      if (v117 >= *(void *)(v12 + 16)) {
        goto LABEL_156;
      }
      v119 = (uint64_t *)(v12 + 32 + 16 * v117);
      void *v119 = v118;
      v119[1] = v2;
      uint64_t v120 = *(void *)(v12 + 16);
      if (v13 > v120) {
        goto LABEL_157;
      }
      uint64_t result = (uint64_t)memmove( (void *)(v12 + 32 + 16 * (v13 - 1)),  (const void *)(v12 + 32 + 16 * v13),  16 * (v120 - v13));
      *(void *)(v12 + 16) = v120 - 1;
      unint64_t v13 = v120 - 1;
    }

    while (v120 > 2);
  }

  swift_bridgeObjectRelease();
  *(void *)(v124 + 16) = 0LL;
  return swift_bridgeObjectRelease();
}

              int64_t v91 = 0LL;
              swift_release();
              goto LABEL_84;
            }
          }
        }
      }
    }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

                      uint64_t v55 = v119;
                      if (!v119)
                      {
                        uint64_t v3 = MEMORY[0x18961AFF0];
                        goto LABEL_152;
                      }

                      if (v119 == *(void *)(v3 + 16))
                      {
                        swift_retain();
                        goto LABEL_152;
                      }

                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
                      uint64_t v86 = static _DictionaryStorage.allocate(capacity:)();
                      int64_t v87 = 0LL;
                      unint64_t v88 = *v118;
                      uint64_t v89 = v86 + 64;
                      while (1)
                      {
                        v119 = v55;
                        if (v88)
                        {
                          unint64_t v94 = __clz(__rbit64(v88));
                          v88 &= v88 - 1;
                          unint64_t v95 = v87;
                          int64_t v96 = v94 | (v87 << 6);
                        }

                        else
                        {
                          uint64_t v97 = v87 + 1;
                          if (__OFADD__(v87, 1LL)) {
                            goto LABEL_160;
                          }
                          if (v97 >= v117) {
                            goto LABEL_151;
                          }
                          uint64_t v98 = v118[v97];
                          uint64_t v99 = v87 + 1;
                          if (!v98)
                          {
                            uint64_t v99 = v87 + 2;
                            if (v87 + 2 >= v117) {
                              goto LABEL_151;
                            }
                            uint64_t v98 = v118[v99];
                            if (!v98)
                            {
                              uint64_t v99 = v87 + 3;
                              if (v87 + 3 >= v117) {
                                goto LABEL_151;
                              }
                              uint64_t v98 = v118[v99];
                              if (!v98)
                              {
                                uint64_t v99 = v87 + 4;
                                if (v87 + 4 >= v117) {
                                  goto LABEL_151;
                                }
                                uint64_t v98 = v118[v99];
                                if (!v98)
                                {
                                  uint64_t v99 = v87 + 5;
                                  if (v87 + 5 >= v117) {
                                    goto LABEL_151;
                                  }
                                  uint64_t v98 = v118[v99];
                                  if (!v98)
                                  {
                                    Swift::Int v100 = v87 + 6;
                                    if (v87 + 6 >= v117) {
                                      goto LABEL_151;
                                    }
                                    uint64_t v98 = v118[v100];
                                    if (!v98)
                                    {
                                      while (1)
                                      {
                                        uint64_t v99 = v100 + 1;
                                        if (__OFADD__(v100, 1LL)) {
                                          goto LABEL_165;
                                        }
                                        if (v99 >= v117) {
                                          break;
                                        }
                                        uint64_t v98 = v118[v99];
                                        ++v100;
                                        if (v98) {
                                          goto LABEL_141;
                                        }
                                      }

        if ((v86 & 1) != 0) {
          goto LABEL_121;
        }
        unint64_t v94 = &v61[16 * v63];
        int64_t v96 = *(void *)v94;
        unint64_t v95 = *((void *)v94 + 1);
        int64_t v74 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v74) {
          goto LABEL_124;
        }
        if (v97 < v85) {
          goto LABEL_14;
        }
LABEL_90:
        unint64_t v102 = v63 - 1;
        if (v63 - 1 >= v17)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }

        if (!v60) {
          goto LABEL_139;
        }
        unint64_t v103 = v14;
        char v104 = &v61[16 * v102];
        unint64_t v105 = *(void *)v104;
        BOOL v106 = &v61[16 * v63];
        uint64_t v107 = *((void *)v106 + 1);
        unint64_t v108 = v132;
        specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v60 + 4LL * *(void *)v104),  (char *)(v60 + 4LL * *(void *)v106),  (char *)(v60 + 4 * v107),  v131);
        int64_t v132 = v108;
        if (v108) {
          goto LABEL_111;
        }
        if (v107 < v105) {
          goto LABEL_114;
        }
        if (v63 > *((void *)v103 + 2)) {
          goto LABEL_115;
        }
        *(void *)char v104 = v105;
        *(void *)&v61[16 * v102 + 8] = v107;
        char v109 = *((void *)v103 + 2);
        if (v63 >= v109) {
          goto LABEL_116;
        }
        unint64_t v14 = v103;
        unint64_t v17 = v109 - 1;
        memmove(&v61[16 * v63], v106 + 16, 16 * (v109 - 1 - v63));
        *((void *)v103 + 2) = v109 - 1;
        int v60 = v142;
        if (v109 <= 2) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v17 = 1LL;
LABEL_14:
    uint64_t v15 = v141;
    if (v141 >= v9) {
      goto LABEL_100;
    }
  }

  if (__OFADD__(v18, v39)) {
    goto LABEL_136;
  }
  if (v18 + v39 >= v9) {
    uint64_t v44 = v9;
  }
  else {
    uint64_t v44 = v18 + v39;
  }
  if (v44 >= v18)
  {
    if (v19 != v44)
    {
      uint64_t v122 = v14;
      unint64_t v45 = (_DWORD *)(v119 + 4 * v19);
      uint64_t v128 = v44;
      do
      {
        __int128 v141 = v19;
        int64_t v46 = v18;
        uint64_t v130 = v45;
        do
        {
          char v47 = v135;
          Unicode.Scalar.properties.getter();
          uint64_t v48 = v138;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          uint64_t v49 = *(void (**)(char *, uint64_t))(v133 + 8);
          uint64_t v50 = v137;
          v49(v47, v137);
          LOBYTE(v143) = Unicode.CanonicalCombiningClass.rawValue.getter();
          __int128 v143 = v143;
          unint64_t v51 = *(void (**)(char *, uint64_t))(v134 + 8);
          char v52 = v48;
          uint64_t v53 = v140;
          v51(v52, v140);
          uint64_t v54 = v136;
          Unicode.Scalar.properties.getter();
          uint64_t v55 = v139;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          v49(v54, v50);
          uint64_t v56 = Unicode.CanonicalCombiningClass.rawValue.getter();
          v51(v55, v53);
          if (v143 >= v56) {
            break;
          }
          if (!v142) {
            goto LABEL_138;
          }
          uint64_t v57 = *v45;
          _OWORD *v45 = v45[1];
          v45[1] = v57;
          --v45;
          ++v46;
        }

        while (v141 != v46);
        int64_t v19 = v141 + 1;
        int64_t v18 = v129;
        unint64_t v45 = v130 + 1;
      }

      while (v141 + 1 != v128);
      int64_t v19 = v128;
      unint64_t v14 = v122;
      uint64_t v9 = v125;
    }

    goto LABEL_51;
  }

                          __break(1u);
                          goto LABEL_83;
                        }

                        uint64_t v59 = v68 + 6;
                      }
                    }
                  }
                }
              }

                          __break(1u);
                          goto LABEL_83;
                        }

                        unint64_t v45 = v57;
                      }
                    }
                  }
                }
              }

  __break(1u);
  return result;
}

                          __break(1u);
                          goto LABEL_83;
                        }

                        unint64_t v45 = v57;
                      }
                    }
                  }
                }
              }

                        __break(1u);
                        goto LABEL_83;
                      }

                      uint64_t v54 = v72;
                    }
                  }
                }
              }
            }

                          __break(1u);
                          goto LABEL_83;
                        }

                        unint64_t v45 = v57;
                      }
                    }
                  }
                }
              }

  __break(1u);
LABEL_83:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
        }

          free(v35);
          goto LABEL_83;
        }

        goto LABEL_56;
      }
    }

    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }

  if (v4) {
    return;
  }
  int64_t v18 = malloc_good_size(object[3]);
  LODWORD(v62) = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
  int64_t v19 = malloc_type_malloc(v18, (unint64_t)v62 << 32);
  if (!v19) {
    goto LABEL_103;
  }
  uint64_t v20 = object[2];
  if (!v20)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }

  uint64_t v21 = v19;
  specialized static __DataStorage.move(_:_:_:)((vm_address_t)v19, v20, object[3]);
  uint64_t v22 = object[2];
  if (v22)
  {
    unint64_t v23 = (void (*)(uint64_t, uint64_t))object[6];
    if (v23)
    {
      char v24 = object[3];
      swift_retain();
      v23(v22, v24);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v23);
    }

    else
    {
      free((void *)object[2]);
    }
  }

  uint64_t v53 = object[6];
  object[6] = 0LL;
  object[7] = 0LL;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v53);
  object[2] = v21;
  object[4] = v18;
  *((_BYTE *)object + 64) = 0;
}

    swift_unknownObjectRetain();
    uint64_t v64 = v59;
    int64_t v65 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v62, v36, v61, v60, v59, v171);
    uint64_t result = swift_unknownObjectRelease_n();
LABEL_121:
    *(void *)__dst = v62;
    *(void *)&__dst[8] = v36;
    *(void *)&__dst[16] = v61;
    int64_t v74 = __OFADD__(v26, 1LL);
    uint64_t v89 = v26 + 1;
    if (v74) {
      goto LABEL_160;
    }
    if (v62 != v167) {
      goto LABEL_161;
    }
    uint64_t v147 = v89;
    if (v61)
    {
      unint64_t v90 = *(void *)(v61 + 24 * ((v36 >> ((4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      unint64_t v90 = specialized Rope._Node.subscript.getter(v36, v60);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v74 = __OFADD__(v65, v90);
    int64_t v91 = v65 + v90;
    if (v74) {
      goto LABEL_162;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(__dst, v60, v64, v171, v167);
    swift_unknownObjectRelease_n();
    uint64_t v137 = *(void *)&__dst[8];
    __int128 v140 = *(void *)__dst;
    __int128 v141 = *(void *)&__dst[16];
    if (v155 == 2)
    {
      uint64_t v92 = v154[1];
      v255[12] = *v154;
      v255[13] = v92;
      v255[14] = v154[2];
      unint64_t v93 = &v233;
      BigString.utf8.getter();
      BigString.startIndex.getter();
      unint64_t v94 = BigString.UTF8View.index(_:offsetBy:)();
      __int128 v138 = v96;
      __int128 v139 = v95;
      unint64_t v155 = v97;
      uint64_t v98 = v148;
      uint64_t v99 = v82;
    }

    else
    {
      Swift::Int v100 = v154[1];
      v255[9] = *v154;
      v255[10] = v100;
      v255[11] = v154[2];
      uint64_t result = BigString.utf8.getter();
      if (__OFSUB__(v91, v63 >> 11)) {
        goto LABEL_171;
      }
      uint64_t v99 = v82;
      unint64_t v93 = &v232;
      unint64_t v94 = BigString.UTF8View.index(_:offsetBy:)();
      __int128 v138 = v102;
      __int128 v139 = v101;
      unint64_t v155 = v103;
      uint64_t v98 = v148;
    }

    uint64_t v162 = v94;
    outlined release of Locale((uint64_t)v93);
    outlined release of AttributedString.Runs((uint64_t)&v209);
    int v32 = v165;
    uint64_t v28 = v166;
    uint64_t v29 = v173;
    uint64_t v31 = v168;
    uint64_t v30 = v169;
    __int128 v34 = v163;
    uint64_t v33 = v164;
    uint64_t v27 = v99;
    char v35 = v98;
LABEL_132:
    specialized IndexingIterator.next()((uint64_t)&v175);
    unint64_t v186 = v27;
    unint64_t v187 = v28;
    unint64_t v188 = v29;
    unint64_t v189 = v170;
    uint64_t v190 = v30;
    v191 = v31;
    uint64_t v192 = v172;
    __int128 v193 = v32;
    __int128 v194 = v33;
    __int128 v195 = v34;
    __int128 v196 = v35;
    __int128 v197 = v175;
    uint64_t v161 = v176;
    uint64_t v198 = v176;
    __int128 v199 = v177;
    __int128 v200 = v178;
    __int128 v201 = v179;
    __int128 v202 = v180;
    unint64_t v203 = v181;
    v204 = v182;
    v205 = v183;
    v206 = v184;
    v207 = v185;
    if (!v27) {
      break;
    }
    if (!v175) {
      goto LABEL_146;
    }
    char v104 = v27;
    unint64_t v105 = v175;
    BOOL v106 = v104;
    outlined copy of AttributedString.Runs.Run?(v104);
    outlined copy of AttributedString.Runs.Run?(v105);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Dictionary<>.== infix(_:_:)(v106, v105) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_145:
      outlined consume of AttributedString.Runs.Run?(v106);
      outlined consume of AttributedString.Runs.Run?(v105);
      goto LABEL_146;
    }

    uint64_t v107 = specialized static Set.== infix(_:_:)(v28, v161);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v107 & 1) == 0) {
      goto LABEL_145;
    }
    __int128 v145 = v105;
    unint64_t v108 = v154[1];
    v255[6] = *v154;
    v255[7] = v108;
    v255[8] = v154[2];
    BigString.utf8.getter();
    char v109 = BigString.UTF8View.index(_:offsetBy:)();
    char v24 = v110;
    __int128 v146 = v111;
    int64_t v156 = v112;
    outlined release of Locale((uint64_t)&v234);
    uint64_t v113 = v136[1];
    v255[3] = *v136;
    v255[4] = v113;
    v255[5] = v136[2];
    BigString.utf8.getter();
    int v114 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v142 = v115;
    __int128 v143 = v116;
    __int128 v144 = v117;
    uint64_t result = outlined release of Locale((uint64_t)&v235);
    uint64_t v118 = *v154;
    v119 = v154[1];
    v255[2] = v154[2];
    v255[1] = v119;
    v255[0] = v118;
    if (v109 >> 10 < v152 >> 10)
    {
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }

    v247 = v152;
    v248 = v149;
    v249 = v151;
    v250 = v150;
    v251 = v109;
    v252 = v24;
    uint64_t v20 = v146;
    v253 = v146;
    v254 = v156;
    uint64_t v120 = *v154;
    unint64_t v121 = v154[1];
    v264[2] = v154[2];
    v264[1] = v121;
    v264[0] = v120;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v264, (uint64_t)v265);
    outlined retain of Locale((uint64_t)v265);
    uint64_t v122 = v114;
    BigString.subscript.getter();
    uint64_t result = outlined release of Locale((uint64_t)v255);
    int64_t v123 = *v136;
    uint64_t v124 = v136[1];
    v246[2] = v136[2];
    v246[1] = v124;
    v246[0] = v123;
    if (v114 >> 10 < v153 >> 10) {
      goto LABEL_154;
    }
    v238 = v153;
    v239 = v160;
    v240 = v159;
    v241 = v158;
    v242 = v114;
    v243 = v142;
    v244 = v143;
    v245 = v144;
    uint64_t v125 = *v136;
    unint64_t v126 = v136[2];
    v266[1] = v136[1];
    v266[2] = v126;
    v266[0] = v125;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v266, (uint64_t)v267);
    outlined retain of Locale((uint64_t)v267);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v246);
    int64_t v127 = MEMORY[0x186E1AD58](v236, v237);
    outlined consume of AttributedString.Runs.Run?(v106);
    outlined consume of AttributedString.Runs.Run?(v145);
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v186);
    outlined release of Locale((uint64_t)v237);
    uint64_t result = outlined release of Locale((uint64_t)v236);
    if ((v127 & 1) == 0) {
      goto LABEL_147;
    }
    unint64_t v153 = v122;
    v159 = v143;
    uint64_t v160 = v142;
    uint64_t v158 = v144;
    unint64_t v23 = v109;
    uint64_t v22 = v156;
    uint64_t v25 = v148;
    BOOL v16 = v135;
    unint64_t v17 = v162;
    uint64_t v26 = v147;
  }

  if (!v175)
  {
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v186);
    memcpy(__dst, __src, sizeof(__dst));
    outlined release of AttributedString.Runs((uint64_t)__dst);
    outlined release of AttributedString.Runs((uint64_t)&v209);
    goto LABEL_142;
  }

          Name = 0LL;
          goto LABEL_83;
        }

        uint64_t v67 = v8;
        unint64_t v68 = "invalid string";
        break;
      default:
        goto LABEL_90;
    }

    while (1)
    {
LABEL_92:
      typeDescriptorError(v67, (uint64_t)a2, (uint64_t)v68);
LABEL_93:
      int64_t v65 = (void *)MEMORY[0x189603F70];
      unint64_t v66 = (const __CFString *)*MEMORY[0x189603B38];
      uint64_t v64 = @"*** memory allocation failed";
LABEL_88:
      objc_exception_throw((id)[v65 exceptionWithName:v66 reason:v64 userInfo:0]);
LABEL_89:
      uint64_t v67 = (char)v59;
      unint64_t v68 = "missing ']' in type descriptor";
    }
  }

  if (v6 <= 98)
  {
    switch(v6)
    {
      case 'Q':
LABEL_25:
        unint64_t v23 = *(void *)(a1 + 8);
        char v24 = (void *)(a1 + 16);
        uint64_t v25 = *(unsigned __int8 *)(a1 + 41);
        uint64_t v26 = _decodeCharAtCursor(*(void *)(v23 + 8), *(void *)(v23 + 16), (void *)(a1 + 16));
        switch(v26)
        {
          case -121:
            _deserializeBytes(sizep, *(void *)(v23 + 8), *(void *)(v23 + 16), v24, 8LL);
            uint64_t v27 = sizep[0];
            int v60 = bswap64(sizep[0]);
            if (v25) {
              uint64_t v27 = v60;
            }
            break;
          case -126:
            _deserializeBytes(sizep, *(void *)(v23 + 8), *(void *)(v23 + 16), v24, 4LL);
            LODWORD(v27) = sizep[0];
            int64_t v61 = bswap32(sizep[0]);
            if (v25) {
              LODWORD(v27) = v61;
            }
            uint64_t v27 = (int)v27;
            break;
          case -127:
            _deserializeBytes(sizep, *(void *)(v23 + 8), *(void *)(v23 + 16), v24, 2LL);
            LOWORD(v27) = sizep[0];
            uint64_t v28 = bswap32(LOWORD(sizep[0])) >> 16;
            if (v25) {
              LOWORD(v27) = v28;
            }
            uint64_t v27 = (__int16)v27;
            break;
          default:
            uint64_t v27 = v26;
            break;
        }

        *a3 = v27;
        break;
      case 'S':
LABEL_31:
        uint64_t v29 = *(void *)(a1 + 8);
        uint64_t v30 = (void *)(a1 + 16);
        uint64_t v31 = *(unsigned __int8 *)(a1 + 41);
        int v32 = _decodeCharAtCursor(*(void *)(v29 + 8), *(void *)(v29 + 16), (void *)(a1 + 16));
        if (v32 == -127)
        {
          _deserializeBytes(sizep, *(void *)(v29 + 8), *(void *)(v29 + 16), v30, 2LL);
          uint64_t v33 = bswap32(LOWORD(sizep[0])) >> 16;
          if (v31) {
            LOWORD(v32) = v33;
          }
          else {
            LOWORD(v32) = sizep[0];
          }
        }

        *(_WORD *)a3 = v32;
        break;
      case '[':
        unint64_t v11 = *(unsigned __int8 *)v7;
        if (v11 - 48 > 9)
        {
          BOOL v16 = NSGetSizeAndAlignment(v7, sizep, 0LL);
        }

        else
        {
          __int128 v12 = 0LL;
          do
          {
            unint64_t v13 = v12;
            if (v12 >= 0xCCCCCCCCCCCCCCDLL)
            {
              char v63 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** value %lu too large (may have wrapped)",  v12);
              goto LABEL_87;
            }

            unint64_t v14 = v11;
            uint64_t v15 = *(unsigned __int8 *)++v7;
            unint64_t v11 = v15;
            __int128 v12 = 10 * v12 + v14 - 48;
          }

          while (v15 - 48 < 0xA);
          BOOL v16 = NSGetSizeAndAlignment(v7, sizep, 0LL);
          if (v12)
          {
            unint64_t v17 = 0LL;
            int64_t v18 = 10 * v13 + v14 - 48;
            while (v17 <= 0x7FFFFFFFFFFFFFFFLL / sizep[0])
            {
              _decodeValueOfObjCType(a1, v7, (char *)a3 + sizep[0] * v17++);
              if (v18 == v17) {
                goto LABEL_62;
              }
            }

            char v63 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** value %lu too large (may have wrapped)",  v17);
LABEL_87:
            uint64_t v64 = (const __CFString *)v63;
            int64_t v65 = (void *)MEMORY[0x189603F70];
            unint64_t v66 = (const __CFString *)*MEMORY[0x189603A48];
            goto LABEL_88;
          }
        }

          +[_NSPredicateUtilities _predicateSecurityAction]();
        }
      }
    }
  }

LABEL_61:
          unint64_t v40 = (v45 - 1) & v45;
          unint64_t v43 = __clz(__rbit64(v45)) + (v36 << 6);
        }

        char v47 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v43);
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v4 + 56) + 72 * v43, (uint64_t)v153);
        *(void *)&__int128 v148 = v48;
        *((void *)&v148 + 1) = v49;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v153, (uint64_t)v41);
        *(void *)&__int128 v138 = v48;
        *((void *)&v138 + 1) = v49;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v41, (uint64_t)v126);
        uint64_t v50 = *(void *)(v44 + 16);
        swift_bridgeObjectRetain_n();
        if (v50 && (unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49), (v52 & 1) != 0))
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v44 + 56) + 72 * v51, (uint64_t)&v133);
          __int128 v145 = v135;
          __int128 v146 = v136;
          uint64_t v147 = v137;
          __int128 v143 = v133;
          __int128 v144 = v134;
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v143,  (uint64_t)&v133);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v41,  (uint64_t)v132);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v133,  (uint64_t)&v138,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v132,  (uint64_t)v121,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (*((void *)&v139 + 1))
          {
            if (v142)
            {
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v138, (uint64_t)v129);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v121, (uint64_t)v128);
              uint64_t v53 = v130;
              uint64_t v116 = v131;
              int v114 = __swift_project_boxed_opaque_existential_1(v129, v130);
              v119 = v109;
              uint64_t v54 = *(void *)(v53 - 8);
              MEMORY[0x1895F8858](v114);
              unint64_t v115 = (char *)v109 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v128,  (uint64_t)v127);
              uint64_t v56 = type metadata accessor for Optional();
              char v117 = v109;
              uint64_t v113 = v56;
              uint64_t v57 = *(void *)(v56 - 8);
              MEMORY[0x1895F8858](v56);
              uint64_t v59 = (char *)v109 - v58;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v60 = swift_dynamicCast();
              uint64_t v118 = v54;
              int64_t v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
              if (v60)
              {
                v61(v59, 0LL, 1LL, v53);
                uint64_t v62 = v115;
                (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v115, v59, v53);
                char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v118 + 8))(v62, v53);
              }

              else
              {
                v61(v59, 1LL, 1LL, v53);
                (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v113);
                char v63 = 0;
              }

              __swift_destroy_boxed_opaque_existential_1((uint64_t)v128);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
              uint64_t v4 = v124;
              int64_t v41 = v112;
            }

            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
              char v63 = 0;
              uint64_t v4 = v124;
            }
          }

          else
          {
            uint64_t v4 = v124;
            if (v142)
            {
              outlined destroy of Any?( (uint64_t)v121,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              char v63 = 0;
            }

            else
            {
              char v63 = 1;
            }
          }

          outlined destroy of Any?( (uint64_t)v132,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?( (uint64_t)&v133,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v143);
          outlined destroy of Any?( (uint64_t)&v148,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)v153);
          swift_bridgeObjectRelease();
          if ((v63 & 1) != 0)
          {
            *(unint64_t *)((char *)v110 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v43;
            BOOL v16 = __OFADD__(v120++, 1LL);
            if (v16)
            {
              __break(1u);
              goto LABEL_82;
            }
          }
        }

        else
        {
          outlined destroy of Any?( (uint64_t)&v148,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v153);
          swift_bridgeObjectRelease();
          uint64_t v4 = v124;
        }
      }
    }
  }

  v109[1] = v109;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  char v110 = (void *)((char *)v109 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v110, v6);
  uint64_t v120 = 0LL;
  int64_t v7 = 0LL;
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t v122 = v4 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v123 = (unint64_t)(v9 + 63) >> 6;
  __int128 v12 = &v149;
  unint64_t v126 = &v139;
  unint64_t v121 = (__int128 *)((char *)&v140 + 8);
  uint64_t v112 = &v149;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      uint64_t v15 = v125;
      goto LABEL_20;
    }

    BOOL v16 = __OFADD__(v7++, 1LL);
    uint64_t v15 = v125;
    if (v16) {
      goto LABEL_152;
    }
    if (v7 >= v123) {
      goto LABEL_40;
    }
    unint64_t v17 = *(void *)(v122 + 8 * v7);
    if (!v17) {
      break;
    }
LABEL_19:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_20:
    int64_t v19 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v4 + 56) + 72 * v14, (uint64_t)v153);
    *(void *)&__int128 v148 = v20;
    *((void *)&v148 + 1) = v21;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v153, (uint64_t)v12);
    *(void *)&__int128 v138 = v20;
    *((void *)&v138 + 1) = v21;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v12, (uint64_t)v126);
    uint64_t v22 = *(void *)(v15 + 16);
    swift_bridgeObjectRetain_n();
    if (v22 && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21), (v24 & 1) != 0))
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v15 + 56) + 72 * v23, (uint64_t)&v133);
      __int128 v145 = v135;
      __int128 v146 = v136;
      uint64_t v147 = v137;
      __int128 v143 = v133;
      __int128 v144 = v134;
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v143,  (uint64_t)&v133);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v12,  (uint64_t)v132);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v133,  (uint64_t)&v138,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v132,  (uint64_t)v121,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (*((void *)&v139 + 1))
      {
        if (v142)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v138, (uint64_t)v129);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v121, (uint64_t)v128);
          uint64_t v25 = v130;
          uint64_t v116 = v131;
          int v114 = __swift_project_boxed_opaque_existential_1(v129, v130);
          v119 = v109;
          uint64_t v26 = *(void *)(v25 - 8);
          MEMORY[0x1895F8858](v114);
          unint64_t v115 = (char *)v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v128,  (uint64_t)v127);
          uint64_t v28 = type metadata accessor for Optional();
          char v117 = v109;
          uint64_t v113 = v28;
          uint64_t v29 = *(void *)(v28 - 8);
          MEMORY[0x1895F8858](v28);
          uint64_t v31 = (char *)v109 - v30;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          int v32 = swift_dynamicCast();
          uint64_t v118 = v26;
          uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
          if (v32)
          {
            v33(v31, 0LL, 1LL, v25);
            __int128 v34 = v115;
            (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v115, v31, v25);
            char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v118 + 8))(v34, v25);
          }

          else
          {
            v33(v31, 1LL, 1LL, v25);
            (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v113);
            char v35 = 0;
          }

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v128);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
          uint64_t v4 = v124;
          __int128 v12 = v112;
        }

        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
          char v35 = 0;
          uint64_t v4 = v124;
        }
      }

      else
      {
        uint64_t v4 = v124;
        if (v142)
        {
          outlined destroy of Any?( (uint64_t)v121,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          char v35 = 0;
        }

        else
        {
          char v35 = 1;
        }
      }

      outlined destroy of Any?((uint64_t)v132, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)&v133, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v143);
      outlined destroy of Any?( (uint64_t)&v148,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined destroy of AttributedString._AttributeValue((uint64_t)v153);
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0)
      {
        *(unint64_t *)((char *)v110 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
        BOOL v16 = __OFADD__(v120++, 1LL);
        if (v16)
        {
          __break(1u);
          goto LABEL_40;
        }
      }
    }

    else
    {
      outlined destroy of Any?( (uint64_t)&v148,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v153);
      swift_bridgeObjectRelease();
      uint64_t v4 = v124;
    }
  }

  int64_t v18 = v7 + 1;
  if (v7 + 1 >= v123) {
    goto LABEL_40;
  }
  unint64_t v17 = *(void *)(v122 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  int64_t v18 = v7 + 2;
  if (v7 + 2 >= v123) {
    goto LABEL_40;
  }
  unint64_t v17 = *(void *)(v122 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  int64_t v18 = v7 + 3;
  if (v7 + 3 >= v123) {
    goto LABEL_40;
  }
  unint64_t v17 = *(void *)(v122 + 8 * v18);
  if (v17)
  {
LABEL_18:
    int64_t v7 = v18;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      goto LABEL_155;
    }
    if (v7 >= v123) {
      break;
    }
    unint64_t v17 = *(void *)(v122 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }

        if (!v40) {
          goto LABEL_137;
        }
        unint64_t v42 = *v41++;
        LOBYTE(v39) = v42;
        v40 -= 2LL;
        if (v42 >= 0x80) {
          goto LABEL_75;
        }
      }

        swift_release();
        swift_release();
        goto LABEL_62;
      }

      uint64_t v99 = swift_slowAlloc();
      LODWORD(v153[0]) = 0;
      Swift::Int v100 = unumf_resultToString();
      if (SLODWORD(v153[0]) > 0 || v100 <= 0)
      {
        MEMORY[0x186E20E60](v99, -1LL, -1LL);
        goto LABEL_61;
      }

      uint64_t v85 = specialized String.init(_utf16:)(v99, v100);
      int64_t v87 = v101;
      MEMORY[0x186E20E60](v99, -1LL, -1LL);
LABEL_46:
      swift_release();
      swift_release();
      if (v87)
      {
LABEL_63:
        unint64_t v103 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        char v104 = (uint64_t)v151;
        goto LABEL_125;
      }

          unint64_t v17 = v16;
          int64_t v18 = v75;
LABEL_62:
          *(_DWORD *)char v82 = v18;
          *(_WORD *)&v82[4] = v17;
          *(_WORD *)&v82[6] = v9;
          *(_WORD *)&v82[8] = v5;
          *(_WORD *)&v82[10] = v10._rawValue;
          *(_WORD *)&v82[12] = v11;
          *(_WORD *)&v82[14] = (_WORD)v12;
          *(_WORD *)&v82[16] = v7;
          *(_WORD *)&v82[18] = v13;
          uint64_t v56 = v17;
          uint64_t v57 = v18;
          while (1)
          {
            *(_DWORD *)char v82 = v57;
            *(_WORD *)&v82[4] = v56;
            *(_WORD *)&v82[6] = v9;
            *(_WORD *)&v82[8] = v5;
            *(_WORD *)&v82[10] = v10._rawValue;
            *(_WORD *)&v82[12] = v11;
            *(_WORD *)&v82[14] = (_WORD)v12;
            *(_WORD *)&v82[16] = v7;
            *(_WORD *)&v82[18] = v13;
            v58._countAndFlagsBits = 48LL;
            v58._object = (void *)0xE100000000000000LL;
            String.append(_:)(v58);
            *(_DWORD *)char v82 = v57;
            *(_WORD *)&v82[4] = v56;
            *(_WORD *)&v82[6] = v9;
            *(_WORD *)&v82[8] = v5;
            *(_WORD *)&v82[10] = v10._rawValue;
            *(_WORD *)&v82[12] = v11;
            *(_WORD *)&v82[14] = (_WORD)v12;
            *(_WORD *)&v82[16] = v7;
            *(_WORD *)&v82[18] = v13;
            uint64_t v59 = _So9NSDecimala__exponent_getter(v82);
            _So9NSDecimala__exponent_setter((v59 + 1), v84);
            uint64_t v57 = *(_DWORD *)v84;
            uint64_t v56 = *(_WORD *)&v84[4];
            LOWORD(v9) = *(_WORD *)&v84[6];
            LOWORD(v5) = *(_WORD *)&v84[8];
            LOWORD(v10._rawValue) = *(_WORD *)&v84[10];
            LOWORD(v11) = *(_WORD *)&v84[12];
            LOWORD(v12) = *(_WORD *)&v84[14];
            LOWORD(v7) = *(_WORD *)&v84[16];
            LOWORD(v13) = *(_WORD *)&v84[18];
          }

          goto LABEL_72;
        }

        goto LABEL_55;
      }

      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }

  __break(1u);
LABEL_62:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  int64_t v46 = 0LL;
LABEL_62:

  unint64_t v51 = v71;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v51);
    swift_bridgeObjectRelease();
    char v52 = v72;
    if (v72) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v73) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }

  Hasher._combine(_:)(0);
  char v52 = v72;
  if (!v72) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v52);
  swift_bridgeObjectRelease();
  if (!v73) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }

  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v54 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }

  if (v76 == 2)
  {
    uint64_t v55 = 0;
  }

  else
  {
    uint64_t v55 = v76 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v55);
  if (v77 == 2)
  {
    uint64_t v56 = 0;
  }

  else
  {
    uint64_t v57 = v77 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v56 = v57;
  }

  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

  Hasher._combine(_:)(0);
  uint64_t v44 = 0LL;
LABEL_62:

  uint64_t v49 = v70;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v49);
    swift_bridgeObjectRelease();
    uint64_t v50 = v71;
    if (v71) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v72) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }

  Hasher._combine(_:)(0);
  uint64_t v50 = v71;
  if (!v71) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v50);
  swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v51 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }

  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v52 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }

  if (v75 == 2)
  {
    uint64_t v53 = 0;
  }

  else
  {
    uint64_t v53 = v75 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v53);
  if (v76 == 2)
  {
    uint64_t v54 = 0;
  }

  else
  {
    uint64_t v55 = v76 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v54 = v55;
  }

  Hasher._combine(_:)(v54);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  unint64_t v45 = 0LL;
LABEL_62:

  uint64_t v50 = v70;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v50);
    swift_bridgeObjectRelease();
    unint64_t v51 = v71;
    if (v71) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v72) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }

  Hasher._combine(_:)(0);
  unint64_t v51 = v71;
  if (!v71) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v51);
  swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }

  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }

  if (v75 == 2)
  {
    uint64_t v54 = 0;
  }

  else
  {
    uint64_t v54 = v75 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v54);
  if (v76 == 2)
  {
    uint64_t v55 = 0;
  }

  else
  {
    uint64_t v56 = v76 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v55 = v56;
  }

  Hasher._combine(_:)(v55);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  char v47 = 0LL;
LABEL_62:

  char v52 = v72;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v52);
    swift_bridgeObjectRelease();
    uint64_t v53 = v73;
    if (v73) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v74) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }

  Hasher._combine(_:)(0);
  uint64_t v53 = v73;
  if (!v73) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v53);
  swift_bridgeObjectRelease();
  if (!v74) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v54 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }

  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v55 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v55);
  }

  if (v77 == 2)
  {
    uint64_t v56 = 0;
  }

  else
  {
    uint64_t v56 = v77 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v56);
  if (v78 == 2)
  {
    uint64_t v57 = 0;
  }

  else
  {
    uint64_t v58 = v78 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v57 = v58;
  }

  Hasher._combine(_:)(v57);
  outlined retain of LocalePreferences?( (uint64_t)v79,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v79,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

  Hasher._combine(_:)(0);
  int64_t v46 = 0LL;
LABEL_62:

  unint64_t v51 = v71;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v51);
    swift_bridgeObjectRelease();
    char v52 = v72;
    if (v72) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v73) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }

  Hasher._combine(_:)(0);
  char v52 = v72;
  if (!v72) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v52);
  swift_bridgeObjectRelease();
  if (!v73) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }

  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v54 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }

  if (v76 == 2)
  {
    uint64_t v55 = 0;
  }

  else
  {
    uint64_t v55 = v76 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v55);
  if (v77 == 2)
  {
    uint64_t v56 = 0;
  }

  else
  {
    uint64_t v57 = v77 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v56 = v57;
  }

  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  unint64_t v45 = 0LL;
LABEL_62:

  uint64_t v50 = v70;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v50);
    swift_bridgeObjectRelease();
    unint64_t v51 = v71;
    if (v71) {
      goto LABEL_64;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    if (v72) {
      goto LABEL_65;
    }
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }

  Hasher._combine(_:)(0);
  unint64_t v51 = v71;
  if (!v71) {
    goto LABEL_67;
  }
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v51);
  swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_68;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }

  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }

  if (v75 == 2)
  {
    uint64_t v54 = 0;
  }

  else
  {
    uint64_t v54 = v75 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v54);
  if (v76 == 2)
  {
    uint64_t v55 = 0;
  }

  else
  {
    uint64_t v56 = v76 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v55 = v56;
  }

  Hasher._combine(_:)(v55);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

        __break(1u);
LABEL_62:
        __break(1u);
        return result;
      }

      if (v30 >= v21 >> 10)
      {
        *a7 = v21;
        a7[1] = v61;
        a7[2] = v23;
        a7[3] = v25;
LABEL_20:
        a7[4] = result;
        a7[5] = v18;
        a7[6] = v19;
        a7[7] = (unint64_t)v20;
        return result;
      }

      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }

  while (1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    char v24 = v5 & 0xFFFFFFFFFFFFF0FFLL | (v64 << 8);
    char v5 = v78;
    if (!v9) {
      break;
    }
LABEL_30:
    swift_unknownObjectRetain();
    uint64_t v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v80, v24, v15, v9, v68);
    swift_unknownObjectRelease_n();
    uint64_t v27 = v10 - v12;
    if (!__OFSUB__(v10, v12)) {
      goto LABEL_31;
    }
LABEL_64:
    __break(1u);
LABEL_65:
    uint64_t v64 = v25;
    __int128 v12 = v27;
  }

                int v32 = 1;
                unint64_t v14 = 0LL;
LABEL_35:
                if ((v32 & 1) == 0)
                {
LABEL_36:
                  *(void *)a3 = v14;
                  *(_BYTE *)(a3 + 8) = 0;
                  return result;
                }

                goto LABEL_56;
              }

              __break(1u);
LABEL_63:
              __break(1u);
              return result;
            }

            if (!v10) {
              goto LABEL_61;
            }
            unint64_t v14 = (v8 - 48);
            if (v10 != 1)
            {
              unint64_t v14 = 10LL * (v8 - 48) + (BYTE1(v8) - 48);
              uint64_t v21 = v10 - 2;
              if (v10 != 2)
              {
                uint64_t v22 = (unsigned __int8 *)v31 + 2;
                do
                {
                  unint64_t v23 = *v22 - 48;
                  if (v23 > 9) {
                    goto LABEL_33;
                  }
                  char v24 = 10 * v14;
                  unint64_t v14 = v24 + v23;
                  ++v22;
                }

                while (--v21);
              }
            }
          }

          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v9,  a2,  a3,  v67,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v86,  0LL,  0LL);
          break;
      }

      return swift_willThrow();
    }

    f_bsize = v85.f_bsize;
    f_blocks = v85.f_blocks;
    if (is_mul_ok(v85.f_blocks, v85.f_bsize))
    {
      f_bavail = v85.f_bavail;
      if (is_mul_ok(v85.f_bavail, v85.f_bsize))
      {
        unint64_t v81 = v85.f_fsid.val[0];
        f_files = v85.f_files;
        f_ffree = v85.f_ffree;
        unint64_t v13 = geteuid();
        *(void *)&uint64_t v86 = 0LL;
        if ((v13 & 0x80000000) == 0)
        {
          unint64_t v14 = v13;
          uint64_t v15 = f_blocks * f_bsize;
          BOOL v16 = f_bavail * f_bsize;
          char v82 = f_bavail * f_bsize;
          if (!quotactl(v85.f_mntonname, 458752, v13, (caddr_t)&v86))
          {
            if ((void)v86)
            {
              unint64_t v88 = 0u;
              uint64_t v89 = 0u;
              uint64_t v86 = 0u;
              int64_t v87 = 0u;
              if (!quotactl(v85.f_mntonname, 196608, v14, (caddr_t)&v86))
              {
                if ((void)v86)
                {
                  if ((unint64_t)v86 < (unint64_t)v87)
                  {
LABEL_76:
                    __break(1u);
LABEL_77:
                    __break(1u);
                  }

                  if (v16 >= (void)v86 - (void)v87) {
                    BOOL v16 = v86 - v87;
                  }
                }

                char v82 = v16;
                if (DWORD2(v87))
                {
                  unint64_t v68 = f_files;
                  uint64_t v69 = f_ffree;
                  f_files = v68;
                  f_ffree = v69;
                }
              }
            }
          }

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSFileAttributeKey, Any)>);
          unint64_t v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = xmmword_183729E10;
          *(void *)(v17 + 32) = @"NSFileSystemSize";
          int64_t v18 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
          int64_t v19 = @"NSFileSystemSize";
          uint64_t v20 = &selRef_initWithLongLong_;
          if (v15 < 0) {
            uint64_t v20 = &selRef_initWithUnsignedLongLong_;
          }
          uint64_t v21 = objc_msgSend(v18, *v20, v15);
          uint64_t v22 = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          *((void *)&v87 + 1) = v22;
          *(void *)&uint64_t v86 = v21;
          outlined init with take of Any(&v86, (_OWORD *)(v17 + 40));
          *(void *)(v17 + 72) = @"NSFileSystemFreeSize";
          unint64_t v23 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
          char v24 = @"NSFileSystemFreeSize";
          if (v82 >= 0) {
            uint64_t v25 = &selRef_initWithLongLong_;
          }
          else {
            uint64_t v25 = &selRef_initWithUnsignedLongLong_;
          }
          uint64_t v26 = [v23 *v25];
          *((void *)&v87 + 1) = v22;
          *(void *)&uint64_t v86 = v26;
          outlined init with take of Any(&v86, (_OWORD *)(v17 + 80));
          *(void *)(v17 + 112) = @"NSFileSystemNodes";
          uint64_t v27 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
          uint64_t v28 = @"NSFileSystemNodes";
          if (f_files >= 0) {
            uint64_t v29 = &selRef_initWithLongLong_;
          }
          else {
            uint64_t v29 = &selRef_initWithUnsignedLongLong_;
          }
          uint64_t v30 = [v27 *v29];
          *((void *)&v87 + 1) = v22;
          *(void *)&uint64_t v86 = v30;
          outlined init with take of Any(&v86, (_OWORD *)(v17 + 120));
          *(void *)(v17 + 152) = @"NSFileSystemFreeNodes";
          uint64_t v31 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
          int v32 = @"NSFileSystemFreeNodes";
          if (f_ffree >= 0) {
            uint64_t v33 = &selRef_initWithLongLong_;
          }
          else {
            uint64_t v33 = &selRef_initWithUnsignedLongLong_;
          }
          __int128 v34 = [v31 *v33];
          *((void *)&v87 + 1) = v22;
          *(void *)&uint64_t v86 = v34;
          outlined init with take of Any(&v86, (_OWORD *)(v17 + 160));
          *(void *)(v17 + 192) = @"NSFileSystemNumber";
          char v35 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
          int64_t v36 = @"NSFileSystemNumber";
          uint64_t v37 = objc_msgSend(v35, sel_initWithLongLong_, v81);
          *(void *)(v17 + 224) = v22;
          *(void *)(v17 + 200) = v37;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
          uint64_t v38 = (void *)static _DictionaryStorage.allocate(capacity:)();
          outlined init with copy of (Hashable & Sendable)?( v17 + 32,  (uint64_t)&v86,  &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
          uint64_t v39 = v86;
          swift_retain();
          unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
          if ((v41 & 1) == 0)
          {
            unint64_t v42 = v38 + 8;
            *(void *)((char *)v38 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v40;
            *(void *)(v38[6] + 8 * v40) = v39;
            outlined init with take of Any((__int128 *)((char *)&v86 + 8), (_OWORD *)(v38[7] + 32 * v40));
            unint64_t v43 = v38[2];
            uint64_t v44 = __OFADD__(v43, 1LL);
            unint64_t v45 = v43 + 1;
            if (!v44)
            {
              v38[2] = v45;
              outlined init with copy of (Hashable & Sendable)?( v17 + 72,  (uint64_t)&v86,  &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
              int64_t v46 = v86;
              char v47 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
              if ((v48 & 1) == 0)
              {
                *(void *)((char *)v42 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v47;
                *(void *)(v38[6] + 8 * v47) = v46;
                outlined init with take of Any((__int128 *)((char *)&v86 + 8), (_OWORD *)(v38[7] + 32 * v47));
                uint64_t v49 = v38[2];
                uint64_t v44 = __OFADD__(v49, 1LL);
                uint64_t v50 = v49 + 1;
                if (!v44)
                {
                  v38[2] = v50;
                  outlined init with copy of (Hashable & Sendable)?( v17 + 112,  (uint64_t)&v86,  &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
                  unint64_t v51 = v86;
                  char v52 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
                  if ((v53 & 1) == 0)
                  {
                    *(void *)((char *)v42 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v52;
                    *(void *)(v38[6] + 8 * v52) = v51;
                    outlined init with take of Any((__int128 *)((char *)&v86 + 8), (_OWORD *)(v38[7] + 32 * v52));
                    uint64_t v54 = v38[2];
                    uint64_t v44 = __OFADD__(v54, 1LL);
                    uint64_t v55 = v54 + 1;
                    if (!v44)
                    {
                      v38[2] = v55;
                      outlined init with copy of (Hashable & Sendable)?( v17 + 152,  (uint64_t)&v86,  &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
                      uint64_t v56 = v86;
                      uint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
                      if ((v58 & 1) == 0)
                      {
                        *(void *)((char *)v42 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v57;
                        *(void *)(v38[6] + 8 * v57) = v56;
                        outlined init with take of Any((__int128 *)((char *)&v86 + 8), (_OWORD *)(v38[7] + 32 * v57));
                        uint64_t v59 = v38[2];
                        uint64_t v44 = __OFADD__(v59, 1LL);
                        int v60 = v59 + 1;
                        if (!v44)
                        {
                          v38[2] = v60;
                          outlined init with copy of (Hashable & Sendable)?( v17 + 192,  (uint64_t)&v86,  &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
                          int64_t v61 = v86;
                          uint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
                          if ((v63 & 1) == 0)
                          {
                            *(void *)((char *)v42 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v62;
                            *(void *)(v38[6] + 8 * v62) = v61;
                            outlined init with take of Any( (__int128 *)((char *)&v86 + 8),  (_OWORD *)(v38[7] + 32 * v62));
                            uint64_t v64 = v38[2];
                            uint64_t v44 = __OFADD__(v64, 1LL);
                            int64_t v65 = v64 + 1;
                            if (!v44)
                            {
                              v38[2] = v65;
                              swift_release();
                              uint64_t result = swift_bridgeObjectRelease();
                              *a4 = v38;
                              return result;
                            }

                            goto LABEL_75;
                          }

      uint64_t v89 = v106;
      unint64_t v90 = v61;
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v18,  v106,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v90, v89, v57, (void *)v66);
      goto LABEL_62;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      unint64_t v66 = v59;
      goto LABEL_23;
    }
  }

  int64_t v91 = v61;
  uint64_t v92 = v60;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  unint64_t v71 = static _DictionaryStorage.copy(original:)();
  unint64_t v66 = v71;
  if (!*(void *)(v59 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    uint64_t v57 = v55;
    int64_t v61 = v91;
    if ((v92 & 1) != 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }

  unint64_t v72 = (char *)(v71 + 64);
  unint64_t v73 = 1LL << *(_BYTE *)(v66 + 32);
  unint64_t v94 = (char *)(v59 + 64);
  int64_t v74 = (unint64_t)(v73 + 63) >> 6;
  if (v66 != v59 || v72 >= &v94[8 * v74]) {
    memmove(v72, v94, 8 * v74);
  }
  *(void *)(v66 + 16) = *(void *)(v59 + 16);
  unint64_t v75 = 1LL << *(_BYTE *)(v59 + 32);
  uint64_t v76 = -1LL;
  if (v75 < 64) {
    uint64_t v76 = ~(-1LL << v75);
  }
  uint64_t v77 = v76 & *(void *)(v59 + 64);
  unint64_t v95 = 0LL;
  int64_t v96 = v77;
  unint64_t v93 = (unint64_t)(v75 + 63) >> 6;
  Swift::Int v78 = v106;
  while (1)
  {
    if (v96)
    {
      uint64_t v79 = __clz(__rbit64(v96));
      v96 &= v96 - 1;
      unint64_t v80 = v79 | (v95 << 6);
      unint64_t v81 = v105;
      goto LABEL_34;
    }

    uint64_t v85 = v95 + 1;
    unint64_t v81 = v105;
    if (__OFADD__(v95, 1LL))
    {
      __break(1u);
      goto LABEL_64;
    }

    if (v85 >= v93) {
      goto LABEL_60;
    }
    uint64_t v86 = *(void *)&v94[8 * v85];
    int64_t v87 = v95 + 1;
    if (!v86)
    {
      int64_t v87 = v95 + 2;
      if (v95 + 2 >= v93) {
        goto LABEL_60;
      }
      uint64_t v86 = *(void *)&v94[8 * v87];
      if (!v86)
      {
        int64_t v87 = v95 + 3;
        if (v95 + 3 >= v93) {
          goto LABEL_60;
        }
        uint64_t v86 = *(void *)&v94[8 * v87];
        if (!v86)
        {
          int64_t v87 = v95 + 4;
          if (v95 + 4 >= v93) {
            goto LABEL_60;
          }
          uint64_t v86 = *(void *)&v94[8 * v87];
          if (!v86)
          {
            int64_t v87 = v95 + 5;
            if (v95 + 5 >= v93) {
              goto LABEL_60;
            }
            uint64_t v86 = *(void *)&v94[8 * v87];
            if (!v86)
            {
              int64_t v87 = v95 + 6;
              if (v95 + 6 >= v93) {
                goto LABEL_60;
              }
              uint64_t v86 = *(void *)&v94[8 * v87];
              if (!v86)
              {
                int64_t v87 = v95 + 7;
                if (v95 + 7 >= v93) {
                  goto LABEL_60;
                }
                uint64_t v86 = *(void *)&v94[8 * v87];
                if (!v86)
                {
                  int64_t v87 = v95 + 8;
                  if (v95 + 8 >= v93) {
                    goto LABEL_60;
                  }
                  uint64_t v86 = *(void *)&v94[8 * v87];
                  if (!v86) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  uint64_t v22 = *((void *)v2 + 2);
  uint64_t v21 = *((void *)v2 + 3);
  if (v22 >= v21 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v21 > 1),  v22 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v22 + 1;
  v2[v22 + 32] = 7;
  if ((v1 & 0x100) == 0)
  {
LABEL_21:
    if ((v1 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }

          int v32 = (v36 - 1) & v36;
          __int128 v34 = __clz(__rbit64(v36)) + (v28 << 6);
        }

        uint64_t v38 = *(void *)(v1 + 56);
        uint64_t v39 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v34);
        unint64_t v40 = *v39;
        int64_t v41 = v39[1];
        outlined init with copy of AttributedString._AttributeValue(v38 + 72 * v34, (uint64_t)v126);
        *(void *)&unint64_t v121 = v40;
        *((void *)&v121 + 1) = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v126, (uint64_t)&v122);
        *(void *)&unint64_t v115 = v40;
        *((void *)&v115 + 1) = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v105);
        unint64_t v42 = v120;
        swift_bridgeObjectRetain_n();
        outlined destroy of AttributedString._AttributeValue((uint64_t)v105);
        uint64_t v112 = v40;
        uint64_t v113 = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v106);
        if (v42 != 1) {
          break;
        }
        unint64_t v108 = v40;
        char v109 = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v106, (uint64_t)v104);
        unint64_t v43 = v111;
        if (v111
          && *(void *)(v111 + 16)
          && (Hasher.init(_seed:)(),
              Hasher._combine(_:)(0LL),
              uint64_t v44 = Hasher._finalize()(),
              unint64_t v45 = -1LL << *(_BYTE *)(v43 + 32),
              int64_t v46 = v44 & ~v45,
              ((*(void *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v46) & 1) != 0))
        {
          char v47 = ~v45;
          while (*(void *)(*(void *)(v43 + 48) + 16 * v46 + 8))
          {
            int64_t v46 = (v46 + 1) & v47;
            if (((*(void *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v46) & 1) == 0) {
              goto LABEL_69;
            }
          }

          swift_bridgeObjectRelease();
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
LABEL_45:
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          swift_bridgeObjectRelease();
          uint64_t v1 = v107;
        }

        else
        {
LABEL_69:
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)v100 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
          uint64_t v26 = __OFADD__(v101++, 1LL);
          uint64_t v1 = v107;
          if (v26) {
            goto LABEL_146;
          }
        }
      }

      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      goto LABEL_45;
    }
  }

  uint64_t v98 = (uint64_t)&v98;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  Swift::Int v100 = (unint64_t *)((char *)&v98 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v100, v3);
  uint64_t v4 = 0LL;
  char v5 = *(void *)(v1 + 64);
  uint64_t v101 = 0LL;
  unint64_t v102 = v1 + 64;
  size_t v6 = 1LL << *(_BYTE *)(v1 + 32);
  if (v6 < 64) {
    int64_t v7 = ~(-1LL << v6);
  }
  else {
    int64_t v7 = -1LL;
  }
  uint64_t v8 = v7 & v5;
  unint64_t v105 = &v116;
  BOOL v106 = v114;
  unint64_t v103 = (unint64_t)(v6 + 63) >> 6;
  char v104 = v110;
  while (1)
  {
    if (v8)
    {
      uint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }

    unint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_141;
    }
    if (v11 >= v103) {
      goto LABEL_36;
    }
    __int128 v12 = *(void *)(v102 + 8 * v11);
    ++v4;
    if (!v12)
    {
      uint64_t v4 = v11 + 1;
      if (v11 + 1 >= v103) {
        goto LABEL_36;
      }
      __int128 v12 = *(void *)(v102 + 8 * v4);
      if (!v12)
      {
        uint64_t v4 = v11 + 2;
        if (v11 + 2 >= v103) {
          goto LABEL_36;
        }
        __int128 v12 = *(void *)(v102 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }

    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v13 = v3;
  do
  {
    int64_t v19 = *(unsigned __int16 *)(v13 + 16);
    if (*(_WORD *)(v13 + 16))
    {
      uint64_t v20 = *(void *)(v13 + 40);
      uint64_t v21 = __OFSUB__(v5, v20);
      uint64_t v22 = v5 - v20;
      if (v21) {
        goto LABEL_57;
      }
      if (__OFADD__(v22, 1LL)) {
        goto LABEL_58;
      }
      if (v22 + 1 < 1)
      {
        int64_t v19 = 0LL;
        goto LABEL_23;
      }

      if ((_DWORD)v19 != 1)
      {
        unint64_t v23 = (uint64_t *)(v13 + 64);
        char v24 = 1LL;
        while (1)
        {
          uint64_t v25 = *v23;
          v23 += 3;
          char v5 = v22 - v25;
          if (__OFSUB__(v22, v25)) {
            break;
          }
          if (__OFADD__(v5, 1LL)) {
            goto LABEL_55;
          }
          if (v5 + 1 < 1)
          {
            int64_t v19 = v24;
            char v5 = v22;
            goto LABEL_23;
          }

          ++v24;
          uint64_t v22 = v5;
          if (v19 == v24) {
            goto LABEL_22;
          }
        }

        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }

      char v5 = v22;
    }

    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v10 = v2;
  do
  {
    BOOL v16 = *(unsigned __int16 *)(v10 + 16);
    if (*(_WORD *)(v10 + 16))
    {
      unint64_t v17 = *(void *)(v10 + 40);
      int64_t v18 = __OFSUB__(v4, v17);
      int64_t v19 = v4 - v17;
      if (v18) {
        goto LABEL_57;
      }
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_58;
      }
      if (v19 + 1 < 1)
      {
        BOOL v16 = 0LL;
        goto LABEL_23;
      }

      if ((_DWORD)v16 != 1)
      {
        uint64_t v20 = (uint64_t *)(v10 + 64);
        uint64_t v21 = 1LL;
        while (1)
        {
          uint64_t v22 = *v20;
          v20 += 3;
          uint64_t v4 = v19 - v22;
          if (__OFSUB__(v19, v22)) {
            break;
          }
          if (__OFADD__(v4, 1LL)) {
            goto LABEL_55;
          }
          if (v4 + 1 < 1)
          {
            BOOL v16 = v21;
            uint64_t v4 = v19;
            goto LABEL_23;
          }

          ++v21;
          int64_t v19 = v4;
          if (v16 == v21) {
            goto LABEL_22;
          }
        }

        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }

      uint64_t v4 = v19;
    }

  __break(1u);
  return result;
}

                    swift_release();
                    return swift_bridgeObjectRelease();
                  }

                  int64_t v7 = v14;
                }
              }
            }
          }
        }

      unint64_t v43 = (NSConstantValueExpression *)KVCExpression;
      goto LABEL_57;
    case 'A':
    case 'E':
    case 'F':
    case 'G':
    case 'a':
    case 'e':
    case 'f':
    case 'g':
      if (v8 == 2 || v8 == 1)
      {
        unint64_t v23 = objc_alloc(&OBJC_CLASS___NSNumber);
        char v24 = (double *)(*v5)++;
        uint64_t v20 = -[NSNumber initWithDouble:](v23, "initWithDouble:", *v24);
      }

      else
      {
        if (v8)
        {
LABEL_29:
          uint64_t v27 = 0LL;
          goto LABEL_56;
        }

        unint64_t v17 = objc_alloc(&OBJC_CLASS___NSNumber);
        int64_t v18 = (double *)(*v5)++;
        int64_t v19 = *v18;
        *(float *)&int64_t v19 = *v18;
        uint64_t v20 = -[NSNumber initWithFloat:](v17, "initWithFloat:", v19);
      }

uint64_t specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)(uint64_t result, __int128 *a2)
{
  __int128 v2 = *(_OWORD *)result;
  __int128 v3 = *(_OWORD *)(result + 16);
  __int128 v4 = *(_OWORD *)(result + 32);
  __int128 v251 = *(_OWORD *)(result + 48);
  __int128 v250 = v4;
  __int128 v248 = v2;
  __int128 v249 = v3;
  __int128 v5 = *(_OWORD *)(result + 64);
  __int128 v6 = *(_OWORD *)(result + 80);
  __int128 v7 = *(_OWORD *)(result + 96);
  __int128 v255 = *(_OWORD *)(result + 112);
  __int128 v254 = v7;
  __int128 v252 = v5;
  __int128 v253 = v6;
  __int128 v8 = *(_OWORD *)(result + 128);
  __int128 v9 = *(_OWORD *)(result + 144);
  __int128 v10 = *(_OWORD *)(result + 160);
  __int128 v11 = *(_OWORD *)(result + 176);
  uint64_t v260 = *(void *)(result + 192);
  __int128 v259 = v11;
  __int128 v258 = v10;
  __int128 v256 = v8;
  __int128 v257 = v9;
  __int128 v12 = a2[11];
  __int128 v267 = a2[10];
  __int128 v268 = v12;
  uint64_t v269 = *((void *)a2 + 24);
  __int128 v13 = a2[7];
  __int128 v263 = a2[6];
  __int128 v264 = v13;
  __int128 v14 = a2[8];
  __int128 v266 = a2[9];
  __int128 v265 = v14;
  __int128 v15 = a2[3];
  *(_OWORD *)&v261[32] = a2[2];
  *(_OWORD *)&v261[48] = v15;
  __int128 v16 = a2[4];
  __int128 v262 = a2[5];
  *(_OWORD *)&v261[64] = v16;
  __int128 v17 = *a2;
  *(_OWORD *)&v261[16] = a2[1];
  *(_OWORD *)v261 = v17;
  int64_t v18 = (void *)v248;
  if ((void)v248 == (void)v17
    && (*((void *)&v265 + 1) ^ *((void *)&v256 + 1)) <= 1023LL
    && (*((void *)&v258 + 1) ^ *((void *)&v267 + 1)) < 1024LL)
  {
    return 1LL;
  }

  uint64_t v19 = *((void *)&v252 + 1);
  uint64_t v142 = *((void *)&v248 + 1);
  if (__OFSUB__(*((void *)&v252 + 1), *((void *)&v248 + 1))) {
    goto LABEL_162;
  }
  if (__OFSUB__(*(void *)&v261[72], *(void *)&v261[8]))
  {
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
    goto LABEL_173;
  }

  if (*((void *)&v252 + 1) - *((void *)&v248 + 1) != *(void *)&v261[72] - *(void *)&v261[8]) {
    return 0LL;
  }
  unint64_t v145 = *((void *)&v249 + 1);
  uint64_t v148 = v249;
  unint64_t v20 = *((void *)&v250 + 1);
  uint64_t v149 = v250;
  uint64_t v146 = *((void *)&v251 + 1);
  uint64_t v147 = v251;
  uint64_t v163 = v252;
  unint64_t v21 = *((void *)&v256 + 1);
  uint64_t v23 = *((void *)&v257 + 1);
  unint64_t v22 = v257;
  unint64_t v24 = *((void *)&v258 + 1);
  unint64_t v25 = v258;
  unint64_t v161 = *((void *)&v265 + 1);
  uint64_t v166 = *((void *)&v266 + 1);
  uint64_t v167 = v266;
  uint64_t v165 = v267;
  __int128 v26 = a2[11];
  __src[10] = a2[10];
  __src[11] = v26;
  *(void *)&__src[12] = *((void *)a2 + 24);
  __int128 v27 = a2[7];
  __src[6] = a2[6];
  __src[7] = v27;
  __int128 v28 = a2[8];
  __src[9] = a2[9];
  __src[8] = v28;
  __int128 v29 = a2[2];
  __src[3] = a2[3];
  __int128 v30 = a2[4];
  __src[5] = a2[5];
  __src[4] = v30;
  __int128 v31 = *a2;
  __src[1] = a2[1];
  __src[2] = v29;
  __src[0] = v31;
  *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)&v261[8];
  *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)&v261[24];
  *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)&v261[40];
  uint64_t v162 = (__int128 *)(v248 + 16);
  __int128 v144 = (__int128 *)(v17 + 16);
  *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)&v261[56];
  outlined retain of AttributedString.Runs((uint64_t)&v248);
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v261);
  int64_t v136 = v24 >> 11;
  unint64_t v137 = v21 >> 10;
  unint64_t v140 = v22;
  unint64_t v141 = v21;
  unint64_t v32 = v21;
  unint64_t v33 = v22;
  __int128 v34 = v18;
  unint64_t v138 = v25;
  uint64_t v139 = v23;
  uint64_t v35 = v142;
  uint64_t v143 = v19;
  int64_t v156 = v34;
  while (1)
  {
    unint64_t v169 = v20;
    uint64_t v159 = v23;
    unint64_t v160 = v32;
    unint64_t v157 = v33;
    unint64_t v158 = v25;
    if (v35 == v19)
    {
      uint64_t v36 = 0LL;
      uint64_t v37 = 0LL;
      unint64_t v38 = 0LL;
      unint64_t v178 = 0LL;
      uint64_t v39 = 0LL;
      unint64_t v40 = 0LL;
      unint64_t v41 = 0LL;
      uint64_t v42 = 0LL;
      unint64_t v43 = 0LL;
      uint64_t v44 = 0LL;
      uint64_t v174 = 0LL;
      uint64_t v155 = v19;
      goto LABEL_130;
    }

    unint64_t v45 = v145;
    if (v35 < v142 || v35 >= v19) {
      goto LABEL_151;
    }
    *(_OWORD *)&__dst[160] = v258;
    *(_OWORD *)&__dst[176] = v259;
    *(void *)&__dst[192] = v260;
    *(_OWORD *)&__dst[96] = v254;
    *(_OWORD *)&__dst[112] = v255;
    *(_OWORD *)&__dst[128] = v256;
    *(_OWORD *)&__dst[144] = v257;
    *(_OWORD *)&__dst[32] = v250;
    *(_OWORD *)&__dst[48] = v251;
    *(_OWORD *)&__dst[64] = v252;
    *(_OWORD *)&__dst[80] = v253;
    *(_OWORD *)__dst = v248;
    *(_OWORD *)&__dst[16] = v249;
    uint64_t v185 = v35;
    uint64_t v186 = v148;
    unint64_t v187 = v145;
    uint64_t v188 = v149;
    unint64_t v189 = v20;
    uint64_t v190 = v147;
    uint64_t v191 = v146;
    uint64_t v192 = v163;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(&v185, &v196);
    if (v196 != v34[11]) {
      goto LABEL_152;
    }
    unint64_t v46 = v197;
    unint64_t v47 = v201;
    unint64_t v48 = v202;
    uint64_t v49 = v203;
    unint64_t v50 = v204;
    if (v198)
    {
      unint64_t v51 = (void *)(v198 + 24 * ((v197 >> ((4 * *(_BYTE *)(v198 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v52 = v51[3];
      uint64_t v53 = v51[4];
      uint64_t v54 = v51[5];
      outlined retain of AttributedString.Runs((uint64_t)&v248);
      uint64_t v181 = v53;
      swift_bridgeObjectRetain();
      uint64_t v173 = v54;
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v55 = v34[8];
      outlined retain of AttributedString.Runs((uint64_t)&v248);
      swift_unknownObjectRetain();
      unint64_t v45 = v145;
      __int128 v34 = v156;
      unint64_t v52 = specialized Rope._Node.subscript.getter(v46, v55);
      uint64_t v181 = v56;
      uint64_t v173 = v57;
      uint64_t result = swift_unknownObjectRelease();
    }

    if (v137 >= v47 >> 10) {
      unint64_t v58 = v141;
    }
    else {
      unint64_t v58 = v47;
    }
    if (v137 >= v47 >> 10) {
      unint64_t v59 = v140;
    }
    else {
      unint64_t v59 = v48;
    }
    if (v137 >= v47 >> 10) {
      uint64_t v60 = v139;
    }
    else {
      uint64_t v60 = v49;
    }
    if (v137 >= v47 >> 10) {
      unint64_t v61 = v138;
    }
    else {
      unint64_t v61 = v50;
    }
    if (__OFADD__(v52, v47 >> 11)) {
      goto LABEL_153;
    }
    unint64_t v176 = v61;
    uint64_t v177 = v60;
    unint64_t v178 = v59;
    else {
      unint64_t v62 = v136;
    }
    __int128 v63 = v162[1];
    v243[15] = *v162;
    v243[16] = v63;
    v243[17] = v162[2];
    unint64_t v183 = v58;
    BigString.utf8.getter();
    uint64_t result = v183;
    if (__OFSUB__(v62, v183 >> 11)) {
      goto LABEL_154;
    }
    unint64_t v64 = BigString.UTF8View.index(_:offsetBy:)();
    unint64_t v171 = v66;
    uint64_t v172 = v65;
    uint64_t v170 = v67;
    uint64_t result = outlined release of Locale((uint64_t)&v219);
    unint64_t v179 = v64;
    if (v64 >> 10 < v183 >> 10) {
      goto LABEL_155;
    }
    uint64_t v69 = v34[8];
    uint64_t v68 = v34[9];
    uint64_t v180 = v34[10];
    uint64_t v71 = v148;
    uint64_t v70 = v149;
    uint64_t v175 = v34[11];
    if (v149 != 1 && v148 == v34[11])
    {
      unint64_t v72 = v169;
      if (v163 == 2)
      {
        if (v69)
        {
          outlined retain of AttributedString.Runs((uint64_t)&v248);
          swift_unknownObjectRetain();
          uint64_t v73 = v68;
          uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v148, v45, v149, v69, v68, v180);
          uint64_t v74 = result;
        }

        else
        {
          uint64_t v73 = v34[9];
          uint64_t result = swift_retain();
          uint64_t v74 = 0LL;
        }
      }

      else
      {
        uint64_t v73 = v34[9];
        uint64_t v74 = v169 >> 11;
        outlined retain of AttributedString.Runs((uint64_t)&v248);
        uint64_t result = swift_unknownObjectRetain();
      }

      uint64_t v91 = v181;
      goto LABEL_119;
    }

    if (v69) {
      uint64_t v75 = v34[9];
    }
    else {
      uint64_t v75 = 0LL;
    }
    unint64_t v72 = v169;
    if (v35 < 0 || v75 < v35) {
      goto LABEL_166;
    }
    if (v69 && v35 < v68 && *(_WORD *)(v69 + 16))
    {
      uint64_t v76 = v34[9];
      uint64_t v77 = *(unsigned __int8 *)(v69 + 18);
      if (*(_BYTE *)(v69 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v248);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v78 = v35;
        uint64_t v79 = v69;
        while (1)
        {
          unint64_t v81 = *(unsigned __int16 *)(v79 + 16);
          if (*(_WORD *)(v79 + 16))
          {
            uint64_t v82 = *(void *)(v79 + 32);
            BOOL v83 = __OFSUB__(v78, v82);
            uint64_t v84 = v78 - v82;
            if (v83) {
              goto LABEL_147;
            }
            if (__OFADD__(v84, 1LL)) {
              goto LABEL_148;
            }
            if (v84 + 1 <= 0)
            {
              unint64_t v81 = 0LL;
              goto LABEL_52;
            }

            if ((_DWORD)v81 != 1)
            {
              uint64_t v85 = *(void *)(v79 + 56);
              uint64_t v78 = v84 - v85;
              if (__OFSUB__(v84, v85)) {
                goto LABEL_164;
              }
              if (__OFADD__(v78, 1LL)) {
                goto LABEL_165;
              }
              if (v78 + 1 < 1)
              {
                unint64_t v81 = 1LL;
                uint64_t v78 = v84;
                goto LABEL_52;
              }

              if ((_DWORD)v81 == 2) {
                goto LABEL_51;
              }
              uint64_t v86 = *(void *)(v79 + 80);
              BOOL v83 = __OFSUB__(v78, v86);
              uint64_t v84 = v78 - v86;
              if (v83) {
                goto LABEL_168;
              }
              if (__OFADD__(v84, 1LL)) {
                goto LABEL_169;
              }
              if (v84 + 1 < 1)
              {
                unint64_t v81 = 2LL;
                goto LABEL_52;
              }

              if ((_DWORD)v81 != 3)
              {
                uint64_t v87 = 3LL;
                if (v81 > 3) {
                  uint64_t v87 = *(unsigned __int16 *)(v79 + 16);
                }
                unint64_t v88 = (void *)(v79 + 104);
                uint64_t v89 = 3LL;
                while (v87 != v89)
                {
                  uint64_t v78 = v84 - *v88;
                  if (__OFSUB__(v84, *v88)) {
                    goto LABEL_160;
                  }
                  if (__OFADD__(v78, 1LL)) {
                    goto LABEL_161;
                  }
                  if (v78 + 1 < 1)
                  {
                    unint64_t v81 = v89;
                    uint64_t v78 = v84;
                    goto LABEL_52;
                  }

                  ++v89;
                  v88 += 3;
                  uint64_t v84 = v78;
                  if (v81 == v89) {
                    goto LABEL_51;
                  }
                }

LABEL_51:
          if (v78)
          {
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
            goto LABEL_149;
          }

      __break(1u);
    }
  }

  else
  {
    __int128 v15 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v15, v7 + 1, 1, a1, a2);
    __int128 v17 = v16;
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      __int128 v13 = MEMORY[0x186E20E60](v15, -1LL, -1LL);
      goto LABEL_29;
    }

    __int128 v14 = opendir(v15);
    __int128 v13 = MEMORY[0x186E20E60](v15, -1LL, -1LL);
    if (!v14) {
      goto LABEL_29;
    }
  }

  *(void *)(inited + 24) = a1;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 16) = v14;
  *(_BYTE *)(inited + 56) = 0;
  unint64_t v48 = MEMORY[0x18961AFE8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  int64_t v18 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  *(void *)(inited + 40) = v18;
  *(void *)(inited + 48) = v20;
  unint64_t v21 = *(void **)(inited + 64);
  if (v21)
  {
LABEL_44:
    unint64_t v40 = v21;
    swift_willThrow();
    swift_setDeallocating();
    unint64_t v41 = *(DIR **)(inited + 16);
    if (v41) {
      closedir(v41);
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return a2;
  }

    swift_once();
    goto LABEL_47;
  }

  unint64_t v51 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v49);
  unint64_t v52 = v50;

  if (*(void *)(v51 + 16))
  {
    uint64_t v53 = v31;
    uint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
    if ((v55 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v54, (uint64_t)&v67);
    }

    else
    {
      uint64_t v67 = 0u;
      uint64_t v68 = 0u;
    }
  }

  else
  {
    uint64_t v67 = 0u;
    uint64_t v68 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
  {
    uint64_t v57 = v70;
    unint64_t v58 = v71;
  }

  else
  {
    unint64_t v58 = 0LL;
    uint64_t v57 = 0LL;
    uint64_t v70 = 0LL;
    uint64_t v71 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_48;
  }

  swift_release();
  swift_release();
  return v57;
}

      uint64_t v23 = 0;
      goto LABEL_132;
    }

  swift_bridgeObjectRelease();
  if (v10 >= a2) {
    goto LABEL_59;
  }
  *(_BYTE *)(a1 + v10) = 0;
  return String.init(cString:)();
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = *(void *)(v0 + 280);
  if (v35) {
    goto LABEL_52;
  }
LABEL_45:
  Hasher._combine(_:)(0);
  uint64_t v36 = *(void *)(v0 + 288);
  if (!v36)
  {
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_54;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __int128 v27 = a2;
  if ((_DWORD)v5) {
    goto LABEL_56;
  }
}

    specialized _NativeDictionary._insert(at:key:value:)(v58, v10, v9, (uint64_t)v160, v15, (void *)v63);
    swift_bridgeObjectRetain();
    goto LABEL_52;
  }

  if ((v55 & 1) != 0)
  {
    __int128 v63 = v56;
    __int128 v2 = v158;
    if ((v57 & 1) != 0) {
      goto LABEL_48;
    }
    goto LABEL_51;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  __int128 v108 = static _DictionaryStorage.copy(original:)();
  __int128 v63 = v108;
  if (!*(void *)(v56 + 16))
  {
LABEL_139:
    swift_bridgeObjectRelease();
    __int128 v2 = v158;
    if ((v62 & 1) != 0) {
      goto LABEL_48;
    }
    goto LABEL_51;
  }

  uint64_t v109 = (void *)(v108 + 64);
  uint64_t v110 = (unint64_t)((1LL << *(_BYTE *)(v63 + 32)) + 63) >> 6;
  uint64_t v151 = v56 + 64;
  uint64_t v111 = 0LL;
  *(void *)(v63 + 16) = *(void *)(v56 + 16);
  uint64_t v112 = 1LL << *(_BYTE *)(v56 + 32);
  if (v112 < 64) {
    uint64_t v113 = ~(-1LL << v112);
  }
  else {
    uint64_t v113 = -1LL;
  }
  uint64_t v114 = v113 & *(void *)(v56 + 64);
  uint64_t v152 = (unint64_t)(v112 + 63) >> 6;
  while (2)
  {
    if (v114)
    {
      char v115 = __clz(__rbit64(v114));
      v114 &= v114 - 1;
      unint64_t v157 = v111;
      __int128 v116 = v115 | (v111 << 6);
LABEL_114:
      unint64_t v117 = 16 * v116;
      unint64_t v118 = (uint64_t *)(*(void *)(v56 + 48) + v117);
      unint64_t v120 = *v118;
      uint64_t v119 = v118[1];
      __int128 v121 = *(void *)(v63 + 48);
      uint64_t v153 = *(_OWORD *)(*(void *)(v56 + 56) + v117);
      unint64_t v122 = v153;
      uint64_t v123 = (void *)(v121 + v117);
      *uint64_t v123 = v120;
      v123[1] = v119;
      *(_OWORD *)(*(void *)(v63 + 56) + v117) = v122;
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v153, *((unint64_t *)&v153 + 1));
      uint64_t v111 = v157;
      continue;
    }

    break;
  }

  unint64_t v52 = __OFADD__(v111, 1LL);
  uint64_t v124 = v111 + 1;
  if (v52) {
    goto LABEL_190;
  }
  if (v124 >= v152) {
    goto LABEL_139;
  }
  uint64_t v125 = *(void *)(v151 + 8 * v124);
  if (v125)
  {
LABEL_134:
    uint64_t v114 = (v125 - 1) & v125;
    unint64_t v157 = v124;
    __int128 v116 = __clz(__rbit64(v125)) + (v124 << 6);
    goto LABEL_114;
  }

  __int128 v126 = v124 + 1;
  if (v124 + 1 >= v152) {
    goto LABEL_139;
  }
  uint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  __int128 v126 = v124 + 2;
  if (v124 + 2 >= v152) {
    goto LABEL_139;
  }
  uint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  __int128 v126 = v124 + 3;
  if (v124 + 3 >= v152) {
    goto LABEL_139;
  }
  uint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  __int128 v126 = v124 + 4;
  if (v124 + 4 >= v152) {
    goto LABEL_139;
  }
  uint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  __int128 v126 = v124 + 5;
  if (v124 + 5 >= v152) {
    goto LABEL_139;
  }
  uint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  __int128 v126 = v124 + 6;
  if (v124 + 6 >= v152) {
    goto LABEL_139;
  }
  uint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125) {
    goto LABEL_133;
  }
  __int128 v126 = v124 + 7;
  if (v124 + 7 >= v152) {
    goto LABEL_139;
  }
  uint64_t v125 = *(void *)(v151 + 8 * v126);
  if (v125)
  {
LABEL_133:
    uint64_t v124 = v126;
    goto LABEL_134;
  }

  while (1)
  {
    uint64_t v124 = v126 + 1;
    if (__OFADD__(v126, 1LL)) {
      break;
    }
    if (v124 >= v152) {
      goto LABEL_139;
    }
    uint64_t v125 = *(void *)(v151 + 8 * v124);
    ++v126;
    if (v125) {
      goto LABEL_134;
    }
  }

                  __break(1u);
                  JUMPOUT(0x182FE5D6CLL);
                }

                uint64_t v36 = i + 7;
              }
            }
          }
        }
      }
    }

    __int128 v63 = (v67 - 1) & v67;
    unint64_t v64 = __clz(__rbit64(v67)) + (v65 << 6);
LABEL_52:
    outlined init with copy of AnyHashable(*(void *)(v27 + 48) + 40 * v64, (uint64_t)&v105);
    outlined init with copy of Any(*(void *)(v27 + 56) + 32 * v64, (uint64_t)v94);
    v103[0] = v107[0];
    v103[1] = v107[1];
    uint64_t v104 = v108;
    v102[0] = v105;
    v102[1] = v106;
    outlined init with copy of AnyHashable((uint64_t)v102, (uint64_t)v97);
    if (!swift_dynamicCast())
    {
      uint64_t v95 = 0LL;
      unint64_t v96 = 0LL;
      outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v102);
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      goto LABEL_59;
    }

    uint64_t v69 = v95;
    uint64_t v70 = v96;
    outlined init with copy of Any(v93, (uint64_t)v97);
    outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v102);
    uint64_t v71 = v92;
    outlined init with take of Any(v97, v92);
    *(void *)&unint64_t v99 = v69;
    *((void *)&v99 + 1) = v70;
    unint64_t v72 = v71;
    uint64_t v73 = v91;
    outlined init with take of Any(v72, v91);
    uint64_t v74 = v99;
    outlined init with take of Any(v73, v101);
    outlined init with take of Any(v101, &v99);
    uint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v74, *((uint64_t *)&v74 + 1));
    uint64_t v76 = v75;
    if ((v77 & 1) != 0)
    {
      uint64_t v60 = v27;
      unint64_t v61 = (_OWORD *)(v38[6] + 16 * v75);
      swift_bridgeObjectRelease();
      *unint64_t v61 = v74;
      __int128 v27 = v60;
      unint64_t v62 = (_OWORD *)(v38[7] + 32 * v76);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      outlined init with take of Any(&v99, v62);
      goto LABEL_29;
    }

    if (v38[2] >= v38[3])
    {
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }

    *(void *)&AssociatedConformanceWitness[(v75 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v75;
    *(_OWORD *)(v38[6] + 16 * v75) = v74;
    outlined init with take of Any(&v99, (_OWORD *)(v38[7] + 32 * v75));
    uint64_t v78 = v38[2];
    uint64_t v36 = __OFADD__(v78, 1LL);
    uint64_t v79 = v78 + 1;
    if (v36) {
      goto LABEL_63;
    }
    v38[2] = v79;
LABEL_29:
    unint64_t v59 = v65;
    unint64_t v58 = v63;
  }

            uint64_t v19 = (uint64_t *)((char *)v19 + 1);
            if (v19 >= v18) {
              goto LABEL_71;
            }
          }

          break;
      }
    }
  }

    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v12 + 16) + 1LL,  1,  (char *)v12);
      __int128 v12 = result;
    }

    uint64_t v42 = *(void *)(v12 + 16);
    unint64_t v41 = *(void *)(v12 + 24);
    __int128 v13 = v42 + 1;
    __int128 v11 = v135;
    if (v42 >= v41 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v41 > 1),  v42 + 1,  1,  (char *)v12);
      __int128 v11 = v135;
      __int128 v12 = result;
    }

    *(void *)(v12 + 16) = v13;
    unint64_t v43 = v12 + 32;
    uint64_t v44 = (Swift::Int *)(v12 + 32 + 16 * v42);
    *uint64_t v44 = v128;
    v44[1] = v14;
    unint64_t v138 = v14;
    if (v42)
    {
      __int128 v5 = (Swift::Int)v134;
      while (1)
      {
        unint64_t v45 = v13 - 1;
        if (v13 >= 4)
        {
          unint64_t v50 = v43 + 16 * v13;
          unint64_t v51 = *(void *)(v50 - 64);
          unint64_t v52 = *(void *)(v50 - 56);
          uint64_t v56 = __OFSUB__(v52, v51);
          uint64_t v53 = v52 - v51;
          if (v56) {
            goto LABEL_142;
          }
          uint64_t v55 = *(void *)(v50 - 48);
          uint64_t v54 = *(void *)(v50 - 40);
          uint64_t v56 = __OFSUB__(v54, v55);
          unint64_t v48 = v54 - v55;
          uint64_t v49 = v56;
          if (v56) {
            goto LABEL_143;
          }
          uint64_t v57 = v13 - 2;
          unint64_t v58 = (uint64_t *)(v43 + 16 * (v13 - 2));
          uint64_t v60 = *v58;
          unint64_t v59 = v58[1];
          uint64_t v56 = __OFSUB__(v59, v60);
          unint64_t v61 = v59 - v60;
          if (v56) {
            goto LABEL_145;
          }
          uint64_t v56 = __OFADD__(v48, v61);
          unint64_t v62 = v48 + v61;
          if (v56) {
            goto LABEL_148;
          }
          if (v62 >= v53)
          {
            char v80 = (uint64_t *)(v43 + 16 * v45);
            uint64_t v82 = *v80;
            unint64_t v81 = v80[1];
            uint64_t v56 = __OFSUB__(v81, v82);
            BOOL v83 = v81 - v82;
            if (v56) {
              goto LABEL_152;
            }
            uint64_t v73 = v48 < v83;
            goto LABEL_88;
          }
        }

        else
        {
          if (v13 != 3)
          {
            uint64_t v74 = *(void *)(v12 + 32);
            uint64_t v75 = *(void *)(v12 + 40);
            uint64_t v56 = __OFSUB__(v75, v74);
            uint64_t v67 = v75 - v74;
            uint64_t v68 = v56;
            goto LABEL_82;
          }

          unint64_t v47 = *(void *)(v12 + 32);
          unint64_t v46 = *(void *)(v12 + 40);
          uint64_t v56 = __OFSUB__(v46, v47);
          unint64_t v48 = v46 - v47;
          uint64_t v49 = v56;
        }

        if ((v49 & 1) != 0) {
          goto LABEL_144;
        }
        uint64_t v57 = v13 - 2;
        __int128 v63 = (uint64_t *)(v43 + 16 * (v13 - 2));
        uint64_t v65 = *v63;
        unint64_t v64 = v63[1];
        unint64_t v66 = __OFSUB__(v64, v65);
        uint64_t v67 = v64 - v65;
        uint64_t v68 = v66;
        if (v66) {
          goto LABEL_147;
        }
        uint64_t v69 = (uint64_t *)(v43 + 16 * v45);
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        uint64_t v56 = __OFSUB__(v70, v71);
        unint64_t v72 = v70 - v71;
        if (v56) {
          goto LABEL_150;
        }
        if (__OFADD__(v67, v72)) {
          goto LABEL_151;
        }
        if (v67 + v72 >= v48)
        {
          uint64_t v73 = v48 < v72;
LABEL_88:
          if (v73) {
            unint64_t v45 = v57;
          }
          goto LABEL_90;
        }

      os_unfair_lock_unlock(v19);
      __break(1u);
      goto LABEL_52;
    }

    goto LABEL_50;
  }

      specialized _NativeDictionary._insert(at:key:value:)(v33, v28, v30, v73, v39);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }

  uint64_t v68 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  unint64_t v43 = static _DictionaryStorage.copy(original:)();
  uint64_t v39 = v43;
  uint64_t v44 = *(void *)(v31 + 16);
  if (!v44)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    unint64_t v33 = v68;
    if ((v21 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  uint64_t result = (void *)(v43 + 64);
  unint64_t v45 = 1LL << *(_BYTE *)(v39 + 32);
  uint64_t v71 = (void *)(v31 + 64);
  unint64_t v46 = (unint64_t)(v45 + 63) >> 6;
  if (v39 != v31 || result >= &v71[v46])
  {
    uint64_t result = memmove(result, v71, 8 * v46);
    uint64_t v44 = *(void *)(v31 + 16);
  }

  unint64_t v47 = 0LL;
  *(void *)(v39 + 16) = v44;
  unint64_t v48 = 1LL << *(_BYTE *)(v31 + 32);
  uint64_t v49 = -1LL;
  if (v48 < 64) {
    uint64_t v49 = ~(-1LL << v48);
  }
  unint64_t v50 = v49 & *(void *)(v31 + 64);
  uint64_t v69 = (unint64_t)(v48 + 63) >> 6;
  while (1)
  {
    if (v50)
    {
      unint64_t v51 = __clz(__rbit64(v50));
      v50 &= v50 - 1;
      unint64_t v52 = v51 | (v47 << 6);
      goto LABEL_24;
    }

    unint64_t v59 = v47 + 1;
    if (__OFADD__(v47, 1LL))
    {
      __break(1u);
      goto LABEL_55;
    }

    if (v59 >= v69) {
      goto LABEL_50;
    }
    uint64_t v60 = v71[v59];
    ++v47;
    if (!v60)
    {
      unint64_t v47 = v59 + 1;
      if (v59 + 1 >= v69) {
        goto LABEL_50;
      }
      uint64_t v60 = v71[v47];
      if (!v60)
      {
        unint64_t v47 = v59 + 2;
        if (v59 + 2 >= v69) {
          goto LABEL_50;
        }
        uint64_t v60 = v71[v47];
        if (!v60)
        {
          unint64_t v47 = v59 + 3;
          if (v59 + 3 >= v69) {
            goto LABEL_50;
          }
          uint64_t v60 = v71[v47];
          if (!v60)
          {
            unint64_t v47 = v59 + 4;
            if (v59 + 4 >= v69) {
              goto LABEL_50;
            }
            uint64_t v60 = v71[v47];
            if (!v60)
            {
              unint64_t v47 = v59 + 5;
              if (v59 + 5 >= v69) {
                goto LABEL_50;
              }
              uint64_t v60 = v71[v47];
              if (!v60)
              {
                unint64_t v47 = v59 + 6;
                if (v59 + 6 >= v69) {
                  goto LABEL_50;
                }
                uint64_t v60 = v71[v47];
                if (!v60)
                {
                  unint64_t v47 = v59 + 7;
                  if (v59 + 7 >= v69) {
                    goto LABEL_50;
                  }
                  uint64_t v60 = v71[v47];
                  if (!v60) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

  swift_bridgeObjectRelease();
  return v5;
}

            __int128 v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1,  1,  v3);
            goto LABEL_26;
          }

          if ((((v0[1] + v0[2] - (void)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000LL) == 0)
          {
            if (*v4 == 114)
            {
              if (v1[2] == 117) {
                __int128 v7 = 2LL * (v1[3] != 101);
              }
              else {
                __int128 v7 = 1LL;
              }
            }

            else
            {
              __int128 v7 = 0LL;
            }

            uint64_t v23 = &v4[v7];
            v0[3] = (uint64_t)&v4[v7];
            unint64_t v32 = 0LL;
            unint64_t v33 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(20LL);
            swift_bridgeObjectRelease();
            __int128 v4 = (unsigned __int8 *)v0[4];
            if (v23 < v4) {
              goto LABEL_43;
            }
            __break(1u);
            goto LABEL_40;
          }

          goto LABEL_48;
        }

  type metadata accessor for ICULegacyNumberFormatter();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v8;
  return result;
}

      __break(1u);
      goto LABEL_52;
    }

    __int128 v16 = a2 + 5;
    __int128 v17 = 1LL;
    while (1)
    {
      int64_t v18 = *v16;
      v16 += 3;
      __int128 v11 = v13 - v18;
      if (__OFSUB__(v13, v18))
      {
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }

      if (__OFADD__(v11, 1LL)) {
        goto LABEL_50;
      }
      if (v11 + 1 < 1) {
        break;
      }
      ++v17;
      __int128 v13 = v11;
      if (v10 == v17) {
        goto LABEL_15;
      }
    }

    __int128 v10 = v17;
    __int128 v14 = __OFSUB__(a4, a3);
    __int128 v15 = a4 - a3;
    if (v14) {
      goto LABEL_33;
    }
  }

          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v38,  a1,  a2,  v39,  0x7265646C6F46LL,  0xE600000000000000LL,  0LL,  0LL,  &v101,  0LL,  0LL);
          uint64_t v55 = *(void *)&v101.st_dev;
          uint64_t v56 = *(void **)(inited + 64);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          *(void *)(inited + 64) = v55;
          unint64_t v43 = *(DIR **)(inited + 16);
          if (v43) {
            goto LABEL_52;
          }
          goto LABEL_43;
      }
    }
  }

  MEMORY[0x1895F8858](isStackAllocationSafe);
  __int128 v13 = (char *)&v92 - v12;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v13, v10 + 1, 1, a1, a2);
  __int128 v15 = v14;
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0) {
    goto LABEL_35;
  }
  __int128 v16 = opendir(v13);
  if (!v16) {
    goto LABEL_35;
  }
LABEL_15:
  *(void *)(inited + 24) = a1;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 16) = v16;
  *(_BYTE *)(inited + 56) = a3 & 1;
  unint64_t v20 = *(void *)(a4 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v98 = a4;
    unint64_t v21 = (__darwin_ino64_t *)(a4 + 40);
    unint64_t v22 = (void *)MEMORY[0x18961AFE8];
    do
    {
      unint64_t v24 = *(v21 - 1);
      st_ino = *v21;
      __int128 v26 = HIBYTE(*v21) & 0xF;
      if ((*v21 & 0x2000000000000000LL) == 0) {
        __int128 v26 = v24 & 0xFFFFFFFFFFFFLL;
      }
      if (v26)
      {
        swift_bridgeObjectRetain_n();
        String.index(before:)();
        __int128 v27 = String.subscript.getter();
        __int128 v29 = v28;
        swift_bridgeObjectRelease();
        __int128 v30 = v27 == 47 && v29 == 0xE100000000000000LL;
        if (v30)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          __int128 v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v31 & 1) == 0)
          {
            *(void *)&v101.st_dev = v24;
            v101.st_ino = st_ino;
            swift_bridgeObjectRetain();
            v32._countAndFlagsBits = 47LL;
            v32._object = (void *)0xE100000000000000LL;
            String.append(_:)(v32);
            swift_bridgeObjectRelease();
            unint64_t v24 = *(void *)&v101.st_dev;
            st_ino = v101.st_ino;
          }
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v22[2] + 1LL,  1,  v22);
        }
        __int128 v34 = v22[2];
        unint64_t v33 = v22[3];
        if (v34 >= v33 >> 1) {
          unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v33 > 1),  v34 + 1,  1,  v22);
        }
        v22[2] = v34 + 1;
        uint64_t v23 = &v22[2 * v34];
        v23[4] = v24;
        v23[5] = st_ino;
      }

      v21 += 2;
      --v20;
    }

    while (v20);
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v22 = (void *)MEMORY[0x18961AFE8];
  }

  swift_bridgeObjectRelease();
  *(void *)&v101.st_dev = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  unint64_t v40 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(inited + 40) = v40;
  *(void *)(inited + 48) = v42;
  unint64_t v43 = *(DIR **)(inited + 16);
  if (v43)
  {
LABEL_52:
    uint64_t v57 = readdir(v43);
    unint64_t v45 = (char *)MEMORY[0x18961AFE8];
    if (v57)
    {
      unint64_t v58 = v57;
      uint64_t v44 = 0LL;
      p_st_atimespec = &v101.st_atimespec;
      uint64_t v98 = MEMORY[0x18961AFE8] + 32LL;
      while (1)
      {
        if (!v58->d_namlen || !v58->d_ino) {
          goto LABEL_62;
        }
        unint64_t v66 = String.init(cString:)();
        uint64_t v37 = v65;
        if (v66 == 46 && v65 == (void *)0xE100000000000000LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v66 == 11822 && v37 == (void *)0xE200000000000000LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v66 == 24366 && v37 == (void *)0xE200000000000000LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_62;
        }

        __int128 v30 = *(_BYTE *)(inited + 56) == 1;
        unint64_t v97 = p_st_atimespec;
        if (!v30) {
          break;
        }
        if (v58->d_type)
        {
          if (v58->d_type != 4) {
            break;
          }
        }

        else
        {
          memset(&v101, 0, 28);
          *p_st_atimespec = 0u;
          p_st_atimespec[1] = 0u;
          p_st_atimespec[2] = 0u;
          p_st_atimespec[3] = 0u;
          p_st_atimespec[4] = 0u;
          p_st_atimespec[5] = 0u;
          p_st_atimespec[6] = 0u;
          uint64_t v70 = *(void *)(inited + 32);
          unint64_t v99 = *(void *)(inited + 24);
          unint64_t v100 = v70;
          swift_bridgeObjectRetain();
          v71._countAndFlagsBits = 47LL;
          v71._object = (void *)0xE100000000000000LL;
          String.append(_:)(v71);
          unint64_t v96 = v100;
          swift_bridgeObjectRetain();
          v72._countAndFlagsBits = v66;
          v72._object = v37;
          String.append(_:)(v72);
          swift_bridgeObjectRelease();
          uint64_t v95 = v100;
          uint64_t v73 = String.utf8CString.getter();
          unint64_t v96 = v73;
          swift_bridgeObjectRelease();
          LODWORD(v73) = stat((const char *)(v73 + 32), &v101);
          swift_release();
          if ((_DWORD)v73) {
            break;
          }
          st_mode = v101.st_mode;
          uint64_t v75 = S_IFMT.getter() & st_mode;
        }

        uint64_t v67 = *(void *)(inited + 48);
        *(void *)&v101.st_dev = *(void *)(inited + 40);
        v101.st_ino = v67;
        swift_bridgeObjectRetain();
        v68._countAndFlagsBits = v66;
        v68._object = v37;
        String.append(_:)(v68);
        unint64_t v96 = v101.st_ino;
        swift_bridgeObjectRetain();
        v69._countAndFlagsBits = 47LL;
        v69._object = (void *)0xE100000000000000LL;
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
LABEL_83:
        uint64_t v78 = *(void *)&v101.st_dev;
        uint64_t v79 = v101.st_ino;
        d_type = v58->d_type;
        if (v44)
        {
          p_st_atimespec = v97;
          unint64_t v81 = v98;
        }

        else
        {
          LODWORD(v95) = v58->d_type;
          unint64_t v96 = v101.st_ino;
          uint64_t v98 = *(void *)&v101.st_dev;
          uint64_t v82 = *((void *)v45 + 3);
          if ((uint64_t)((v82 >> 1) + 0x4000000000000000LL) < 0)
          {
            __break(1u);
            goto LABEL_104;
          }

          BOOL v83 = v82 & 0xFFFFFFFFFFFFFFFELL;
          if (v83 <= 1) {
            uint64_t v84 = 1LL;
          }
          else {
            uint64_t v84 = v83;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_POSIXDirectoryContentsSequence.Iterator.Element>);
          uint64_t v85 = (char *)swift_allocObject();
          uint64_t v86 = (uint64_t)(_swift_stdlib_malloc_size(v85) - 32) / 40;
          *((void *)v85 + 2) = v84;
          *((void *)v85 + 3) = 2 * v86;
          uint64_t v87 = v85 + 32;
          unint64_t v88 = *((void *)v45 + 3) >> 1;
          uint64_t v89 = 40 * v88;
          if (*((void *)v45 + 2))
          {
            unint64_t v90 = v45 + 32;
            if (v85 != v45 || v87 >= &v90[v89])
            {
              uint64_t v94 = v85 + 32;
              unint64_t v93 = v86;
              memmove(v85 + 32, v90, 40 * v88);
              uint64_t v87 = v94;
              uint64_t v86 = v93;
            }

            *((void *)v45 + 2) = 0LL;
          }

          unint64_t v81 = (uint64_t)&v87[v89];
          uint64_t v44 = (v86 & 0x7FFFFFFFFFFFFFFFLL) - v88;
          swift_release();
          unint64_t v45 = v85;
          p_st_atimespec = v97;
          uint64_t v78 = v98;
          uint64_t v79 = v96;
          d_type = v95;
        }

        unint64_t v62 = __OFSUB__(v44--, 1LL);
        if (v62) {
          goto LABEL_102;
        }
        *(void *)unint64_t v81 = v66;
        *(void *)(v81 + 8) = v37;
        *(void *)(v81 + 16) = v78;
        *(void *)(v81 + 24) = v79;
        *(_BYTE *)(v81 + 32) = d_type;
        uint64_t v98 = v81 + 40;
LABEL_62:
        unint64_t v58 = readdir(v43);
        if (!v58) {
          goto LABEL_55;
        }
      }

      uint64_t v76 = *(void *)(inited + 48);
      *(void *)&v101.st_dev = *(void *)(inited + 40);
      v101.st_ino = v76;
      swift_bridgeObjectRetain();
      v77._countAndFlagsBits = v66;
      v77._object = v37;
      String.append(_:)(v77);
      goto LABEL_83;
    }

    uint64_t v44 = 0LL;
LABEL_55:
    closedir(v43);
    *(void *)(inited + 16) = 0LL;
    swift_release();
  }

  else
  {
LABEL_43:
    swift_release();
    uint64_t v44 = 0LL;
    unint64_t v45 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v60 = *((void *)v45 + 3);
  if (v60 >= 2)
  {
    unint64_t v61 = v60 >> 1;
    unint64_t v62 = __OFSUB__(v61, v44);
    __int128 v63 = v61 - v44;
    if (!v62)
    {
      *((void *)v45 + 2) = v63;
      return v45;
    }

    goto LABEL_100;
  }

  return v45;
}

            if (--v34) {
              continue;
            }
            goto LABEL_64;
          default:
            goto LABEL_71;
        }
      }

      goto LABEL_69;
    }
  }

  uint64_t result = outlined release of DateComponents((uint64_t)__src);
  *a6 = xmmword_1837BEE50;
  return result;
}

    uint64_t v53 = *(void *)(v50 + 56) + 16 * v31;
    *(void *)uint64_t v53 = v13;
    *(_BYTE *)(v53 + 8) = (_BYTE)v14;
    goto LABEL_88;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    unint64_t v50 = v27;
    if ((v46 & 1) == 0) {
      goto LABEL_87;
    }
    goto LABEL_51;
  }

    __int128 v34 = (v44 - 1) & v44;
    uint64_t v36 = __clz(__rbit64(v44)) + (v31 << 6);
LABEL_26:
    uint64_t v37 = 16 * v36;
    unint64_t v38 = (uint64_t *)(*(void *)(v18 + 48) + v37);
    unint64_t v40 = *v38;
    uint64_t v39 = v38[1];
    unint64_t v41 = *(_OWORD *)(*(void *)(v18 + 56) + v37);
    uint64_t v42 = (void *)(*(void *)(v25 + 48) + v37);
    *uint64_t v42 = v40;
    v42[1] = v39;
    *(_OWORD *)(*(void *)(v25 + 56) + v37) = v41;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  unint64_t v45 = v43 + 8;
  if (v45 >= v89) {
    goto LABEL_52;
  }
  uint64_t v44 = *(void *)&__src[8 * v45];
  if (v44)
  {
    __int128 v31 = v45;
    goto LABEL_51;
  }

  while (1)
  {
    __int128 v31 = v45 + 1;
    if (__OFADD__(v45, 1LL)) {
      goto LABEL_105;
    }
    if (v31 >= v89) {
      break;
    }
    uint64_t v44 = *(void *)&__src[8 * v31];
    ++v45;
    if (v44) {
      goto LABEL_51;
    }
  }

      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v44, (const void **)&v43, &v42);
      return 1LL;
    }
  }

  else if (v8 >= -55)
  {
    if (__dst != __src || &__src[56 * v9] <= __dst) {
      memmove(__dst, __src, 56 * v9);
    }
    __int128 v12 = (unint64_t)&v4[56 * v9];
    uint64_t v42 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 56)
    {
      while (1)
      {
        outlined init with copy of (key: String, value: Encodable)((uint64_t)v6, (uint64_t)&v40);
        outlined init with copy of (key: String, value: Encodable)((uint64_t)v4, (uint64_t)&v38);
        if (v40 == v38 && v41 == v39) {
          break;
        }
        __int128 v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v38);
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v40);
        if ((v14 & 1) == 0) {
          goto LABEL_18;
        }
        __int128 v15 = v44;
        __int128 v16 = (unint64_t)(v6 + 56);
        if (v44 >= v6 && (unint64_t)v44 < v16 && v44 == v6)
        {
          __int128 v15 = v6;
        }

        else
        {
          __int128 v17 = *(_OWORD *)v6;
          int64_t v18 = *((_OWORD *)v6 + 1);
          uint64_t v19 = *((_OWORD *)v6 + 2);
          *((void *)v44 + 6) = *((void *)v6 + 6);
          v15[1] = v18;
          v15[2] = v19;
          *__int128 v15 = v17;
        }

    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    swift_willThrow();
    goto LABEL_5;
  }

  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  unint64_t v38 = v37;
  uint64_t v39 = v35;

  if ((id)v3 == v36 && v29 == v38)
  {
    swift_bridgeObjectRelease_n();
    __int128 v16 = 1;
  }

  else
  {
    __int128 v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return v16 & 1;
}

      __break(1u);
    }

    __int128 v16 = (char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
    if ((v16[1] & 1) != 0) {
      goto LABEL_39;
    }
    __int128 v17 = *v16;
    *(_WORD *)__int128 v16 = 256;
    if ((v17 & 0xE0) == 0xC0)
    {
      unint64_t v24 = 1LL;
      goto LABEL_43;
    }

    if ((v17 & 0xF0) == 0xE0)
    {
      unint64_t v24 = 2LL;
      goto LABEL_43;
    }

    if ((v17 & 0xF8) == 0xF0) {
      break;
    }
    if ((v17 & 0x80) == 0)
    {
      *(_BYTE *)(v0 + 184) = v17;
      *(_WORD *)(v0 + 185) = 0;
      *(_BYTE *)(v0 + 187) = 0;
      int64_t v18 = static String._fromUTF8Repairing(_:)();
      if ((v19 & 0x2000000000000000LL) != 0) {
        unint64_t v20 = HIBYTE(v19) & 0xF;
      }
      else {
        unint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
      }
      if (!v20)
      {
        swift_bridgeObjectRelease();
LABEL_2:
        __int128 v2 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36LL));
        __int128 v4 = *v2;
        __int128 v3 = v2[1];
        swift_bridgeObjectRetain();
        __int128 v5 = String.count.getter();
        swift_bridgeObjectRelease();
        if (v5 < 1)
        {
          __int128 v9 = 0LL;
          __int128 v10 = 0LL;
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v10);
        }

        __int128 v6 = HIBYTE(v3) & 0xF;
        if ((v3 & 0x2000000000000000LL) == 0) {
          __int128 v6 = v4 & 0xFFFFFFFFFFFFLL;
        }
        if (v6)
        {
          uint64_t result = specialized Collection.first.getter(v4, v3);
          if (!v8)
          {
            __break(1u);
            return result;
          }

          goto LABEL_7;
        }

        __break(1u);
        goto LABEL_51;
      }

      if ((v19 & 0x1000000000000000LL) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((v19 & 0x2000000000000000LL) != 0)
        {
          *(void *)(v0 + 16) = v18;
          *(void *)(v0 + 24) = v19 & 0xFFFFFFFFFFFFFFLL;
        }

        else if ((v18 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        _decodeScalar(_:startingAt:)();
      }

      swift_bridgeObjectRelease();
    }
  }

  unint64_t v24 = 3LL;
LABEL_43:
  *(_BYTE *)(v0 + 184) = v17;
  *(_WORD *)(v0 + 185) = 0;
  *(_BYTE *)(v0 + 187) = 0;
  *(void *)(v0 + 80) = v24;
  *(void *)(v0 + 88) = 0LL;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  unint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v25;
  *unint64_t v25 = v0;
  v25[1] = AsyncCharacterSequence.AsyncIterator.next();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

    if (v19 < v18) {
      goto LABEL_128;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int128 v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v14 + 2) + 1LL,  1,  v14);
    }
    unint64_t v59 = *((void *)v14 + 2);
    unint64_t v58 = *((void *)v14 + 3);
    __int128 v17 = v59 + 1;
    uint64_t v60 = v142;
    if (v59 >= v58 >> 1)
    {
      uint64_t v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v58 > 1),  v59 + 1,  1,  v14);
      uint64_t v60 = v142;
      __int128 v14 = v110;
    }

    *((void *)v14 + 2) = v17;
    unint64_t v61 = v14 + 32;
    unint64_t v62 = &v14[16 * v59 + 32];
    *(void *)unint64_t v62 = v18;
    *((void *)v62 + 1) = v19;
    unint64_t v141 = v19;
    if (v59)
    {
      while (1)
      {
        __int128 v63 = v17 - 1;
        if (v17 >= 4)
        {
          uint64_t v68 = &v61[16 * v17];
          uint64_t v69 = *((void *)v68 - 8);
          uint64_t v70 = *((void *)v68 - 7);
          uint64_t v74 = __OFSUB__(v70, v69);
          uint64_t v71 = v70 - v69;
          if (v74) {
            goto LABEL_117;
          }
          uint64_t v73 = *((void *)v68 - 6);
          unint64_t v72 = *((void *)v68 - 5);
          uint64_t v74 = __OFSUB__(v72, v73);
          unint64_t v66 = v72 - v73;
          uint64_t v67 = v74;
          if (v74) {
            goto LABEL_118;
          }
          uint64_t v75 = v17 - 2;
          uint64_t v76 = &v61[16 * v17 - 32];
          uint64_t v78 = *(void *)v76;
          uint64_t v77 = *((void *)v76 + 1);
          uint64_t v74 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          if (v74) {
            goto LABEL_120;
          }
          uint64_t v74 = __OFADD__(v66, v79);
          char v80 = v66 + v79;
          if (v74) {
            goto LABEL_123;
          }
          if (v80 >= v71)
          {
            uint64_t v98 = &v61[16 * v63];
            unint64_t v100 = *(void *)v98;
            unint64_t v99 = *((void *)v98 + 1);
            uint64_t v74 = __OFSUB__(v99, v100);
            __int128 v101 = v99 - v100;
            if (v74) {
              goto LABEL_127;
            }
            uint64_t v91 = v66 < v101;
            goto LABEL_88;
          }
        }

        else
        {
          if (v17 != 3)
          {
            unint64_t v92 = *((void *)v14 + 4);
            unint64_t v93 = *((void *)v14 + 5);
            uint64_t v74 = __OFSUB__(v93, v92);
            uint64_t v85 = v93 - v92;
            uint64_t v86 = v74;
            goto LABEL_82;
          }

          uint64_t v65 = *((void *)v14 + 4);
          unint64_t v64 = *((void *)v14 + 5);
          uint64_t v74 = __OFSUB__(v64, v65);
          unint64_t v66 = v64 - v65;
          uint64_t v67 = v74;
        }

        if ((v67 & 1) != 0) {
          goto LABEL_119;
        }
        uint64_t v75 = v17 - 2;
        unint64_t v81 = &v61[16 * v17 - 32];
        BOOL v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        uint64_t v84 = __OFSUB__(v82, v83);
        uint64_t v85 = v82 - v83;
        uint64_t v86 = v84;
        if (v84) {
          goto LABEL_122;
        }
        uint64_t v87 = &v61[16 * v63];
        uint64_t v89 = *(void *)v87;
        unint64_t v88 = *((void *)v87 + 1);
        uint64_t v74 = __OFSUB__(v88, v89);
        unint64_t v90 = v88 - v89;
        if (v74) {
          goto LABEL_125;
        }
        if (__OFADD__(v85, v90)) {
          goto LABEL_126;
        }
        if (v85 + v90 >= v66)
        {
          uint64_t v91 = v66 < v90;
LABEL_88:
          if (v91) {
            __int128 v63 = v75;
          }
          goto LABEL_90;
        }

  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    uint64_t v71 = one-time initialization token for _patternGeneratorCache;
    swift_bridgeObjectRetain();
    if (v71 != -1) {
      swift_once();
    }
    unint64_t v72 = (os_unfair_lock_s *)unk_18C5D62C0;
    uint64_t v159 = (char *)static ICUPatternGenerator._patternGeneratorCache;
    unint64_t v61 = unk_18C5D62C0 + 24LL;
    swift_retain_n();
    os_unfair_lock_lock(v72 + 6);
    p_os_unfair_lock_opaque = &v72[4]._os_unfair_lock_opaque;
    uint64_t v73 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v72[4], v10, v9, v164);
    if (v4) {
      goto LABEL_162;
    }
    uint64_t v74 = v73;
    os_unfair_lock_unlock(v72 + 6);
    swift_release();
    if (v74 != 1) {
      goto LABEL_153;
    }
    LOBYTE(v165) = v164;
    type metadata accessor for ICUPatternGenerator();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v163 = v10;
    uint64_t v75 = ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(v10, v9, (char *)&v165);
    swift_retain();
    os_unfair_lock_lock(v72 + 6);
    uint64_t v76 = *(void *)&v72[4]._os_unfair_lock_opaque;
    uint64_t v77 = *(void *)(v76 + 16);
    uint64_t v65 = (uint64_t)v72;
    unint64_t v158 = v72 + 6;
    unint64_t v161 = 0LL;
    if ((uint64_t)v159 >= v77)
    {
      swift_bridgeObjectRetain();
      uint64_t v67 = v76;
      uint64_t v78 = p_os_unfair_lock_opaque;
    }

    else
    {
      uint64_t v67 = v76;
      uint64_t v78 = p_os_unfair_lock_opaque;
      *p_os_unfair_lock_opaque = MEMORY[0x18961AFF0];
    }

    unint64_t v81 = v75;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v165 = *v78;
    uint64_t v94 = v165;
    *uint64_t v78 = 0x8000000000000000LL;
    uint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v163, v9, v164);
    unint64_t v96 = *(void *)(v94 + 16);
    unint64_t v97 = (v95 & 1) == 0;
    uint64_t v98 = v96 + v97;
    if (!__OFADD__(v96, v97))
    {
      unint64_t v99 = v95;
      if (*(void *)(v94 + 24) < v98)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v98,  isUniquelyReferenced_nonNull_native);
        uint64_t v94 = v165;
        unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(v163, v9, v164);
        if ((v99 & 1) != (v101 & 1)) {
          goto LABEL_163;
        }
        uint64_t v84 = v100;
        if ((v99 & 1) == 0) {
          goto LABEL_151;
        }
        goto LABEL_74;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v95 & 1) == 0) {
          goto LABEL_151;
        }
        goto LABEL_74;
      }

      object = v84;
      LODWORD(v156) = v95;
      unint64_t v157 = v65;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
      uint64_t v124 = v94;
      uint64_t v125 = static _DictionaryStorage.copy(original:)();
      uint64_t v94 = v125;
      uint64_t v65 = v124;
      if (!*(void *)(v124 + 16)) {
        goto LABEL_150;
      }
      __int128 v126 = (void *)(v125 + 64);
      __int128 v127 = 1LL << *(_BYTE *)(v94 + 32);
      p_os_unfair_lock_opaque = (void *)(v124 + 64);
      __int128 v128 = (unint64_t)(v127 + 63) >> 6;
      if (v94 != v124 || v126 >= &p_os_unfair_lock_opaque[v128]) {
        memmove(v126, p_os_unfair_lock_opaque, 8 * v128);
      }
      __int128 v129 = 0LL;
      *(void *)(v94 + 16) = *(void *)(v124 + 16);
      unint64_t v130 = 1LL << *(_BYTE *)(v124 + 32);
      __int128 v131 = -1LL;
      if (v130 < 64) {
        __int128 v131 = ~(-1LL << v130);
      }
      unint64_t v61 = v131 & *(void *)(v124 + 64);
      uint64_t v159 = (char *)((unint64_t)(v130 + 63) >> 6);
      while (1)
      {
        if (v61)
        {
          __int128 v132 = __clz(__rbit64(v61));
          v61 &= v61 - 1;
          __int128 v133 = v132 | (v129 << 6);
        }

        else
        {
          unint64_t v141 = v129 + 1;
          if (__OFADD__(v129, 1LL))
          {
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }

          uint64_t v142 = p_os_unfair_lock_opaque[v141];
          ++v129;
          if (!v142)
          {
            __int128 v129 = v141 + 1;
            uint64_t v142 = p_os_unfair_lock_opaque[v129];
            if (!v142)
            {
              __int128 v129 = v141 + 2;
              uint64_t v142 = p_os_unfair_lock_opaque[v129];
              if (!v142)
              {
                __int128 v129 = v141 + 3;
                uint64_t v142 = p_os_unfair_lock_opaque[v129];
                if (!v142)
                {
                  __int128 v129 = v141 + 4;
                  uint64_t v142 = p_os_unfair_lock_opaque[v129];
                  if (!v142)
                  {
                    __int128 v129 = v141 + 5;
                    uint64_t v142 = p_os_unfair_lock_opaque[v129];
                    if (!v142)
                    {
                      __int128 v129 = v141 + 6;
                      uint64_t v142 = p_os_unfair_lock_opaque[v129];
                      if (!v142)
                      {
                        __int128 v129 = v141 + 7;
                        uint64_t v142 = p_os_unfair_lock_opaque[v129];
                        if (!v142)
                        {
                          uint64_t v143 = v141 + 8;
                          uint64_t v142 = p_os_unfair_lock_opaque[v143];
                          if (!v142)
                          {
                            while (1)
                            {
                              __int128 v129 = v143 + 1;
                              if (__OFADD__(v143, 1LL)) {
                                goto LABEL_160;
                              }
                              uint64_t v142 = p_os_unfair_lock_opaque[v129];
                              ++v143;
                              if (v142) {
                                goto LABEL_149;
                              }
                            }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = *(void *)(v0 + 280);
  if (v35) {
    goto LABEL_52;
  }
LABEL_45:
  Hasher._combine(_:)(0);
  uint64_t v36 = *(void *)(v0 + 288);
  if (!v36)
  {
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_54;
  }

            if ((v12 & 2) == 0) {
              goto LABEL_52;
            }
LABEL_78:
            if (v7 > 0 || (v39 = __OFSUB__(1LL, v7), __int128 v7 = 1 - v7, !v39))
            {
              if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
                unint64_t v48 = 0LL;
              }
              else {
                unint64_t v48 = v7;
              }
              *(void *)&__src[3] = v48;
              BYTE8(__src[3]) = v7 == 0x7FFFFFFFFFFFFFFFLL;
              if ((v12 & 4) == 0)
              {
LABEL_53:
                if ((v12 & 8) == 0) {
                  goto LABEL_54;
                }
                goto LABEL_87;
              }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  int64_t v18 = *((void *)v2 + 2);
  __int128 v17 = *((void *)v2 + 3);
  if (v18 >= v17 >> 1) {
    __int128 v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v17 > 1),  v18 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v18 + 1;
  v2[v18 + 32] = 3;
  if ((v1 & 0x40000) == 0)
  {
LABEL_19:
    if ((v1 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }

    uint64_t v56 = (v46 - 1) & v46;
    uint64_t v57 = v47;
    __int128 v34 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_26:
    uint64_t v35 = 24 * v34;
    uint64_t v36 = *(void *)(v59 + 48) + v35;
    uint64_t v37 = *(void *)v36;
    unint64_t v38 = *(void *)(v36 + 8);
    uint64_t v39 = *(void *)(v59 + 56) + v35;
    uint64_t v54 = *(void *)v39;
    unint64_t v40 = *(void *)v39;
    uint64_t v55 = *(void *)(v39 + 8);
    unint64_t v41 = *(void *)(v22 + 48) + v35;
    uint64_t v42 = *(_BYTE *)(v36 + 16);
    unint64_t v43 = *(_BYTE *)(v39 + 16);
    *(void *)unint64_t v41 = *(void *)v36;
    *(void *)(v41 + 8) = v38;
    *(_BYTE *)(v41 + 16) = v42;
    uint64_t v44 = *(void *)(v22 + 56) + v35;
    *(void *)uint64_t v44 = v40;
    *(void *)(v44 + 8) = v55;
    *(_BYTE *)(v44 + 16) = v43;
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v38, v42);
    outlined copy of _XMLPlistEncodingFormat.Reference(v54, v55, v43);
    unint64_t v33 = v56;
    __int128 v30 = v57;
  }

  unint64_t v48 = v30 + 9;
  if (v30 + 9 >= v53) {
    goto LABEL_52;
  }
  unint64_t v46 = *(void *)(v52 + 8 * v48);
  if (v46)
  {
    unint64_t v47 = v30 + 9;
    goto LABEL_51;
  }

  while (1)
  {
    unint64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      break;
    }
    if (v47 >= v53) {
      goto LABEL_52;
    }
    unint64_t v46 = *(void *)(v52 + 8 * v47);
    ++v48;
    if (v46) {
      goto LABEL_51;
    }
  }

    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_158;
      }
      if (v9 - v13 < v108) {
        break;
      }
    }

      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_52;
    }

    goto LABEL_50;
  }

  if (v29) {
    goto LABEL_65;
  }
LABEL_52:
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v25 = v27 | (v28 << 8);
  if (a2)
  {
LABEL_28:
    swift_unknownObjectRetain();
    __int128 v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v25, v15, a2, a3, v10);
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_54;
  }

    uint64_t v54 = v73;
    if (v49 == 1)
    {
      swift_bridgeObjectRetain();
      unint64_t v47 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  v39);
      uint64_t v49 = v56;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      countAndFlagsBits = v74;
      if (v49) {
        goto LABEL_53;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      countAndFlagsBits = v74;
      if (v49) {
        goto LABEL_53;
      }
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v47 = 0LL;
    uint64_t v49 = 0xE000000000000000LL;
    goto LABEL_56;
  }

  __int128 v11 = objc_msgSend((id)Path, sel__parameterString);
  if (v11)
  {
    __int128 v12 = v11;
    __int128 v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    __int128 v15 = v14;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (__int128 v16 = objc_msgSend((id)Path, sel_path)) != 0)
    {
      __int128 v17 = v16;
      int64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      unint64_t v20 = v19;

      *(void *)uint64_t v87 = v18;
      *(void *)&v87[8] = v20;
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = 59LL;
      v21._object = (void *)0xE100000000000000LL;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v22._countAndFlagsBits = (uint64_t)v13;
      v22._object = v15;
      String.append(_:)(v22);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }

    else
    {
      *(void *)uint64_t v87 = 59LL;
      *(void *)&v87[8] = 0xE100000000000000LL;
      v50._countAndFlagsBits = (uint64_t)v13;
      v50._object = v15;
      String.append(_:)(v50);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    uint64_t v49 = *(void *)&v87[8];
    unint64_t v47 = *(void *)v87;
  }

  else
  {
    unint64_t v51 = objc_msgSend((id)Path, sel_path);
    if (v51)
    {
      unint64_t v52 = v51;
      unint64_t v47 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      uint64_t v49 = v53;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      unint64_t v47 = 0LL;
      uint64_t v49 = 0xE000000000000000LL;
    }
  }

    uint64_t v67 = v88;
    if (v62 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v60 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  (uint64_t)v3);
      unint64_t v62 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    __int128 v6 = v90;
    if (!v62)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v60 = 0LL;
      unint64_t v62 = 0xE000000000000000LL;
      goto LABEL_57;
    }

  if (!v89 || !a3)
  {
LABEL_83:
    unint64_t v62 = 0LL;
    goto LABEL_85;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v59 = *(DIR **)(v13 + 16);
    if (v59)
    {
      uint64_t v60 = 0LL;
      p_st_atimespec = &v93.st_atimespec;
      unint64_t v61 = 1LL;
      while (1)
      {
        unint64_t v62 = v61;
        __int128 v63 = readdir(v59);
        if (!v63)
        {
LABEL_84:
          closedir(v59);
          *(void *)(v13 + 16) = 0LL;
          unint64_t v62 = v60;
          goto LABEL_85;
        }

        unint64_t v64 = v63;
        while (1)
        {
          if (!v64->d_namlen || !v64->d_ino) {
            goto LABEL_60;
          }
          unint64_t v66 = String.init(cString:)();
          uint64_t v67 = v65;
          if ((v66 != 46 || v65 != (void *)0xE100000000000000LL)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v66 != 11822 || v67 != (void *)0xE200000000000000LL)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v66 != 24366 || v67 != (void *)0xE200000000000000LL)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            break;
          }

          swift_bridgeObjectRelease();
LABEL_60:
          unint64_t v64 = readdir(v59);
          if (!v64) {
            goto LABEL_84;
          }
        }

        if (*(_BYTE *)(v13 + 56) != 1) {
          goto LABEL_79;
        }
        if (v64->d_type)
        {
          if (v64->d_type == 4) {
            goto LABEL_76;
          }
LABEL_79:
          uint64_t v79 = *(void *)(v13 + 48);
          *(void *)&v93.st_dev = *(void *)(v13 + 40);
          v93.st_ino = v79;
          swift_bridgeObjectRetain();
          v80._countAndFlagsBits = v66;
          v80._object = v67;
          String.append(_:)(v80);
        }

        else
        {
          memset(&v93, 0, 28);
          uint64_t v71 = p_st_atimespec;
          *p_st_atimespec = 0u;
          v71[1] = 0u;
          v71[2] = 0u;
          v71[3] = 0u;
          v71[4] = 0u;
          v71[5] = 0u;
          v71[6] = 0u;
          unint64_t v72 = *(void *)(v13 + 32);
          uint64_t v91 = *(void *)(v13 + 24);
          unint64_t v92 = v72;
          swift_bridgeObjectRetain();
          v73._countAndFlagsBits = 47LL;
          v73._object = (void *)0xE100000000000000LL;
          String.append(_:)(v73);
          swift_bridgeObjectRetain();
          v74._countAndFlagsBits = v66;
          v74._object = v67;
          String.append(_:)(v74);
          swift_bridgeObjectRelease();
          uint64_t v75 = String.utf8CString.getter();
          swift_bridgeObjectRelease();
          uint64_t v76 = stat((const char *)(v75 + 32), &v93);
          swift_release();
          if (v76) {
            goto LABEL_79;
          }
          st_mode = v93.st_mode;
          uint64_t v78 = S_IFMT.getter() & st_mode;
LABEL_76:
          uint64_t v68 = *(void *)(v13 + 48);
          *(void *)&v93.st_dev = *(void *)(v13 + 40);
          v93.st_ino = v68;
          swift_bridgeObjectRetain();
          v69._countAndFlagsBits = v66;
          v69._object = v67;
          String.append(_:)(v69);
          swift_bridgeObjectRetain();
          v70._countAndFlagsBits = 47LL;
          v70._object = (void *)0xE100000000000000LL;
          String.append(_:)(v70);
          swift_bridgeObjectRelease();
        }

        unint64_t v81 = *(void *)&v93.st_dev;
        uint64_t v82 = v93.st_ino;
        d_type = v64->d_type;
        uint64_t v84 = v89;
        *uint64_t v89 = v66;
        v84[1] = (uint64_t)v67;
        v84[2] = v81;
        v84[3] = v82;
        *((_BYTE *)v84 + 32) = d_type;
        if (v62 == v87) {
          goto LABEL_91;
        }
        uint64_t v89 = v84 + 5;
        unint64_t v61 = v62 + 1;
        unint64_t v59 = *(DIR **)(v13 + 16);
        uint64_t v60 = v62;
        if (!v59) {
          goto LABEL_85;
        }
      }
    }

    goto LABEL_83;
  }

      __int128 v9 = v16;
    }

    while (v8 < a3);
  }

  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  unint64_t v21 = (void *)MEMORY[0x189603F70];
  unint64_t v22 = *MEMORY[0x189603A58];
  uint64_t v23 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Don't know how to cast (%@) into type %@",  a3,  a4);
  unint64_t v24 = v21;
  unint64_t v25 = v22;
LABEL_58:
  objc_exception_throw((id)[v24 exceptionWithName:v25 reason:v23 userInfo:0]);
  return +[_NSPredicateUtilities random](v30, v31);
}

LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
                return result;
              }

              goto LABEL_111;
            }

            unint64_t v92 = 2LL;
LABEL_117:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v45 = v77 & 0xFFFFFFFFFFFFF0FFLL | (v92 << 8);
            uint64_t v91 = v181;
            uint64_t v68 = v76;
            uint64_t v71 = v175;
            goto LABEL_80;
          }
        }
      }

      else
      {
        unint64_t v93 = v78;
      }

      if (v133) {
        goto LABEL_258;
      }
      goto LABEL_178;
    }

    if (v179 == 2)
    {
      if (v114)
      {
        outlined retain of AttributedString.Runs(v2);
        swift_unknownObjectRetain();
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v54, v43, v44, v114, v115, v181);
        __int128 v116 = result;
      }

      else
      {
        uint64_t result = outlined retain of AttributedString.Runs(v2);
        __int128 v116 = 0LL;
      }
    }

    else
    {
      __int128 v116 = v112 >> 11;
      outlined retain of AttributedString.Runs(v2);
      uint64_t result = swift_unknownObjectRetain();
    }

    __int128 v129 = v188;
LABEL_180:
    uint64_t v191 = v54;
    uint64_t v192 = v43;
    uint64_t v193 = v44;
    uint64_t v74 = __OFADD__(v42, 1LL);
    unint64_t v137 = v42 + 1;
    if (v74) {
      goto LABEL_236;
    }
    if (v54 != v129) {
      goto LABEL_237;
    }
    unint64_t v138 = v137;
    if (v44)
    {
      uint64_t v139 = *(void *)(v44 + 24 * ((v43 >> ((4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v139 = specialized Rope._Node.subscript.getter(v43, v114);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v140 = v116 + v139;
    if (__OFADD__(v116, v139)) {
      goto LABEL_239;
    }
    if (v114)
    {
      unint64_t v141 = ((-15LL << ((4 * *(_BYTE *)(v114 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v114 + 18) | ((unint64_t)*(unsigned __int16 *)(v114 + 16) << ((4 * *(_BYTE *)(v114 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
    }

    else
    {
      unint64_t v141 = 0LL;
    }

    uint64_t v42 = v138;
    if (v43 >= v141) {
      goto LABEL_240;
    }
    if (v44)
    {
      uint64_t v142 = (4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C;
      uint64_t v143 = ((v43 >> v142) & 0xF) + 1;
      if (v143 < *(unsigned __int16 *)(v44 + 16))
      {
        unint64_t v43 = (v143 << v142) | ((-15LL << v142) - 1) & v43;
        swift_unknownObjectRelease_n();
LABEL_198:
        uint64_t v148 = v189;
        goto LABEL_203;
      }
    }

    __int128 v144 = *(unsigned __int8 *)(v114 + 18);
    unint64_t v145 = (4 * v144 + 8) & 0x3C;
    uint64_t v190 = (v43 >> v145) & 0xF;
    if (v144)
    {
      swift_unknownObjectRetain();
      uint64_t v146 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v114 + 24,  (uint64_t *)&v190,  (uint64_t)&v191,  v114,  v144);
      swift_unknownObjectRelease();
      if ((v146 & 1) != 0)
      {
        swift_unknownObjectRelease_n();
        unint64_t v43 = v192;
        goto LABEL_198;
      }
    }

    else
    {
      uint64_t v147 = ((v43 >> v145) & 0xF) + 1;
      if (v147 < *(unsigned __int16 *)(v114 + 16))
      {
        unint64_t v43 = (v147 << v145) | ((-15LL << v145) - 1) & v43;
        uint64_t v192 = v43;
        swift_unknownObjectRelease_n();
        uint64_t v193 = v114;
        goto LABEL_198;
      }
    }

    if (v114)
    {
      uint64_t v149 = *(unsigned __int8 *)(v114 + 18);
      uint64_t v150 = *(unsigned __int16 *)(v114 + 16);
      swift_unknownObjectRelease_n();
      unint64_t v43 = ((-15LL << ((4 * v149 + 8) & 0x3C)) - 1) & v149 | (unint64_t)(v150 << ((4 * v149 + 8) & 0x3C));
    }

    else
    {
      unint64_t v43 = 0LL;
    }

    uint64_t v148 = v189;
    uint64_t v191 = v188;
    uint64_t v192 = v43;
    uint64_t v193 = 0LL;
LABEL_203:
    unint64_t v187 = v191;
    uint64_t v44 = v193;
    uint64_t v151 = v113 + 1;
    if (v179 == 2)
    {
      uint64_t v152 = v113[2];
      __int128 v268 = *v151;
      uint64_t v269 = v152;
      v270 = v113[3];
      uint64_t v153 = &v264;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }

    else
    {
      uint64_t v154 = v113[2];
      __int128 v265 = *v151;
      __int128 v266 = v154;
      __int128 v267 = v113[3];
      uint64_t result = BigString.utf8.getter();
      if (__OFSUB__(v140, v148 >> 11)) {
        goto LABEL_251;
      }
      uint64_t v153 = &v263;
    }

    unint64_t v46 = BigString.UTF8View.index(_:offsetBy:)();
    int64_t v156 = v155;
    unint64_t v158 = v157;
    uint64_t v53 = v159;
    outlined release of Locale((uint64_t)v153);
    outlined release of AttributedString.Runs(v166);
    *(void *)&v234 = v42;
    *((void *)&v234 + 1) = v187;
    unint64_t v235 = v43;
    unint64_t v236 = v44;
    uint64_t v237 = v46;
    unint64_t v238 = v156;
    unint64_t v239 = v158;
    unint64_t v240 = v53;
    uint64_t v205 = v313;
    v206 = v314;
    uint64_t v207 = v315;
    unint64_t v201 = v309;
    unint64_t v202 = v310;
    uint64_t v203 = v311;
    unint64_t v204 = v312;
    unint64_t v197 = v305;
    unint64_t v198 = v306;
    unint64_t v199 = v307;
    uint64_t v200 = v308;
    uint64_t v195 = v303;
    uint64_t v196 = v304;
    if (!v175)
    {
      unint64_t v161 = v172;
      goto LABEL_220;
    }

    if (!v172) {
      goto LABEL_218;
    }
    if ((v186 >> 11) - (v185 >> 11) != (v184 >> 11) - (v182 >> 11)
      || (specialized static Dictionary<>.== infix(_:_:)(v175, v172) & 1) == 0)
    {
      break;
    }

    unint64_t v160 = specialized static Set.== infix(_:_:)(v173, v170);
    outlined consume of AttributedString.Runs.Run?(v172);
    outlined consume of AttributedString.Runs.Run?(v175);
    if ((v160 & 1) == 0) {
      goto LABEL_214;
    }
    v287 = v218;
    v288 = v219;
    v289 = v220;
    v283 = v214;
    v284 = v215;
    v286 = v217;
    v285 = v216;
    v279 = v210;
    v280 = v211;
    v282 = v213;
    v281 = v212;
    v278 = v209;
    v277 = v208;
    v300 = v205;
    v301 = v206;
    v302 = v207;
    v296 = v201;
    v297 = v202;
    v299 = v204;
    v298 = v203;
    v292 = v197;
    v293 = v198;
    v295 = v200;
    v294 = v199;
    v291 = v196;
    v290 = v195;
    unint64_t v52 = v178;
    __int128 v2 = v166;
  }

  outlined consume of AttributedString.Runs.Run?(v172);
  outlined consume of AttributedString.Runs.Run?(v175);
LABEL_214:
  outlined release of AttributedString.Runs((uint64_t)&v195);
  outlined release of AttributedString.Runs((uint64_t)&v208);
  return 0LL;
}

      swift_unknownObjectRetain();
      unint64_t v161 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v346, v159, v160, v144, v145);
      uint64_t result = swift_unknownObjectRelease_n();
      goto LABEL_215;
    }

      swift_unknownObjectRetain();
      uint64_t v163 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v358, v160, v161, v146, v371);
      uint64_t result = swift_unknownObjectRelease_n();
      goto LABEL_214;
    }

      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }

    uint64_t v89 = v100;
LABEL_99:
    if (v89) {
      goto LABEL_178;
    }
    goto LABEL_100;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v97 = v90;
LABEL_145:
  unint64_t v130 = *(unsigned __int16 *)(v97 + 16);
  if (!*(_WORD *)(v97 + 16)) {
    goto LABEL_165;
  }
  __int128 v131 = *(void *)(v97 + 24);
  unint64_t v61 = __OFSUB__(v89, v131);
  __int128 v132 = v89 - v131;
  if (v61)
  {
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }

  if (__OFADD__(v132, 1LL))
  {
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
    goto LABEL_202;
  }

  if (v132 + 1 >= 1)
  {
    if ((_DWORD)v130 != 1)
    {
      int64_t v136 = (uint64_t *)(v97 + 48);
      unint64_t v137 = 1LL;
      while (1)
      {
        unint64_t v138 = *v136;
        v136 += 3;
        uint64_t v89 = v132 - v138;
        if (__OFSUB__(v132, v138)) {
          goto LABEL_190;
        }
        if (__OFADD__(v89, 1LL)) {
          goto LABEL_191;
        }
        if (v89 + 1 < 1)
        {
          unint64_t v130 = v137;
          uint64_t v106 = v132;
          goto LABEL_167;
        }

        ++v137;
        __int128 v132 = v89;
        if (v130 == v137) {
          goto LABEL_165;
        }
      }
    }

    uint64_t v89 = v132;
LABEL_165:
    if (v89)
    {
LABEL_198:
      __break(1u);
      goto LABEL_199;
    }

    uint64_t v106 = 0LL;
    goto LABEL_167;
  }

  unint64_t v130 = 0LL;
  uint64_t v106 = v89;
LABEL_167:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v105 = v94 & 0xFFFFFFFFFFFFF0FFLL | (v130 << 8);
LABEL_115:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v105, v97, v90, v93);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v107 = v106;
LABEL_116:
  if (v107)
  {
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }

  *(void *)&unint64_t v145 = v35;
  *((void *)&v145 + 1) = v105;
  *(void *)&uint64_t v146 = v97;
  if (v97)
  {
    __int128 v108 = (void *)(v97 + 24 * ((v105 >> ((4 * *(_BYTE *)(v97 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v110 = v108[3];
    uint64_t v109 = v108[4];
    uint64_t v111 = v108[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v90) {
      goto LABEL_119;
    }
LABEL_128:
    if (v105) {
      goto LABEL_120;
    }
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }

  swift_unknownObjectRetain();
  uint64_t v110 = specialized Rope._Node.subscript.getter(v105, v90);
  uint64_t v109 = v118;
  uint64_t v111 = v119;
  swift_unknownObjectRelease();
  if (!v90) {
    goto LABEL_128;
  }
LABEL_119:
  uint64_t v112 = *(unsigned __int8 *)(v90 + 18);
  swift_unknownObjectRetain();
  if (v112 >= v105) {
    goto LABEL_129;
  }
LABEL_120:
  if (v97)
  {
    uint64_t v113 = (4 * *(_BYTE *)(v97 + 18) + 8) & 0x3C;
    if (((v105 >> v113) & 0xF) != 0)
    {
      uint64_t v35 = ((((v105 >> v113) & 0xF) - 1) << v113) | ((-15LL << v113) - 1) & v105;
      *((void *)&v145 + 1) = v35;
      swift_unknownObjectRelease();
LABEL_126:
      char v115 = v97 + 24 * ((v35 >> ((4 * *(_BYTE *)(v97 + 18) + 8) & 0x3C)) & 0xF);
      __int128 v116 = *(void *)(v115 + 32);
      unint64_t v117 = *(void *)(v115 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_131;
    }
  }

  swift_unknownObjectRetain();
  uint64_t v114 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v145, v90);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v114 & 1) == 0) {
    goto LABEL_193;
  }
  if ((void)v145 != v35) {
    goto LABEL_189;
  }
  uint64_t v35 = *((void *)&v145 + 1);
  unint64_t v97 = v146;
  if ((void)v146) {
    goto LABEL_126;
  }
LABEL_130:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v35, v90);
  __int128 v116 = v120;
  unint64_t v117 = v121;
  swift_unknownObjectRelease();
LABEL_131:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Dictionary<>.== infix(_:_:)(v116, v109) & 1) != 0)
  {
    unint64_t v122 = specialized static Set.== infix(_:_:)(v117, v111);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v122 & 1) != 0)
    {
      specialized Rope.update<A>(at:by:)(&v145, v143, v110);
      uint64_t v123 = *v143;
      uint64_t v124 = v143[1];
      uint64_t v125 = v143[2];
      __int128 v126 = v143[3];
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v145, v123, v124, v125, v126);
      swift_unknownObjectRelease();
      specialized Rope._remove(at:)((uint64_t)&v148, v145, *((unint64_t *)&v145 + 1));
    }

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }

                uint64_t v191 = (v205 - 1) & v205;
                uint64_t v193 = __clz(__rbit64(v205)) + (v188 << 6);
              }

              uint64_t v194 = 16 * v193;
              uint64_t v195 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v193);
              unint64_t v197 = *v195;
              uint64_t v196 = v195[1];
              unint64_t v198 = 24 * v193;
              unint64_t v199 = *(void *)(v14 + 56) + v198;
              uint64_t v200 = *(_BYTE *)(v199 + 16);
              unint64_t v201 = (void *)(*(void *)(v18 + 48) + v194);
              unint64_t v202 = *(_OWORD *)v199;
              *unint64_t v201 = v197;
              v201[1] = v196;
              uint64_t v203 = *(void *)(v18 + 56) + v198;
              *(_OWORD *)uint64_t v203 = v202;
              *(_BYTE *)(v203 + 16) = v200;
              swift_bridgeObjectRetain();
            }
          }

              uint64_t v114 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v20);
              uint64_t v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v184);
              uint64_t v111 = v115;
              uint64_t v113 = v116;
              uint64_t v23 = v114;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v60 = xmmword_1837301C0;
              goto LABEL_243;
          }
        }

        uint64_t v154 = _asciiNumbers.getter();
        uint64_t v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v184);
        unint64_t v40 = v155;
        uint64_t v42 = v156;
        if (v151 >= v154 && HIBYTE(v154) >= v151)
        {
LABEL_111:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v60 = v37;
          *(void *)(v60 + 8) = v40;
          *(void *)(v60 + 16) = v42;
          *(void *)(v60 + 24) = 0LL;
          *(void *)(v60 + 32) = 0LL;
          *(void *)(v60 + 40) = 0LL;
          unint64_t v61 = 10;
          goto LABEL_246;
        }

        unint64_t v43 = v151;
        goto LABEL_232;
      }

      uint64_t v139 = v44;
      if (v44 == 46) {
        goto LABEL_256;
      }
      if (v44 != 78)
      {
        if (v44 == 73)
        {
          unint64_t v140 = (char *)specialized BufferView.dropFirst(_:)(1LL, v14, v13);
          uint64_t result = (char *)specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v140, v141, a3, v184);
          if (v9) {
            return result;
          }
          uint64_t v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          unint64_t v22 = 1;
          goto LABEL_46;
        }

        _StringGuts.grow(_:)(20LL);
        v161._countAndFlagsBits = 0x27207265746661LL;
        v161._object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v161);
        uint64_t v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14);
        uint64_t v163 = (v162 + 1);
        if ((v162 & 0x80) != 0) {
          uint64_t v163 = (((v162 & 0x3F) << 8) | (v162 >> 6)) + 33217;
        }
        unint64_t v189 = (v163 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v163) >> 3)) & 7)));
        v164._countAndFlagsBits = MEMORY[0x186E1B6AC](&v189);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v164);
        swift_bridgeObjectRelease();
        v165._countAndFlagsBits = 0x6D756E206E692027LL;
        v165._object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v165);
        uint64_t v166 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v23, a3, v184);
        uint64_t v168 = v167;
        uint64_t v124 = v169;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v60 = 0LL;
        *(void *)(v60 + 8) = 0xE000000000000000LL;
        *(void *)(v60 + 16) = v139;
        *(void *)(v60 + 24) = v166;
        *(void *)(v60 + 32) = v168;
LABEL_185:
        *(void *)(v60 + 40) = v124;
LABEL_245:
        unint64_t v61 = 1;
        goto LABEL_246;
      }

      uint64_t v159 = (char *)specialized BufferView.dropFirst(_:)(1LL, v14, v13);
      uint64_t result = (char *)specialized static JSON5Scanner.validateNaN(from:fullSource:)(v159, v160, a3, v184);
      if (v9) {
        return result;
      }
      uint64_t v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      unint64_t v22 = 1;
LABEL_46:
      __int128 v26 = v22;
      unint64_t v47 = v14 + v13;
      a8 = v14 + v13 - 1;
      uint64_t v180 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a8);
      if ((v180 | 0x20) != 0x65)
      {
        unint64_t v25 = 0;
        goto LABEL_75;
      }

      unint64_t v48 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      if (a8 < a3 || a3 + v184 < a8) {
        goto LABEL_272;
      }
      if (a3 + v184 >= v47) {
        __int128 v11 = v47;
      }
      else {
        __int128 v11 = a3 + v184;
      }
      if (v11 <= a3)
      {
        uint64_t v23 = 0LL;
        __int128 v13 = 1LL;
        goto LABEL_79;
      }

      uint64_t v49 = v184 + a3;
      uint64_t v23 = -(uint64_t)a3;
      __int128 v13 = 1LL;
      uint64_t v170 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      uint64_t v175 = v184 + a3;
      unint64_t v184 = -(uint64_t)a3;
      do
      {
        __int128 v10 = 0LL;
        __int128 v14 = 0LL;
        unint64_t v50 = v49 - a3;
        unint64_t v51 = v23 + a3;
        while (1)
        {
          if ((uint64_t)(v51 + v14) < 0 || (uint64_t)(v50 + v10) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            unint64_t v157 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v14, v13);
            uint64_t result = (char *)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)( v157,  v158,  a3,  v184);
            if (v10) {
              return result;
            }
LABEL_257:
            uint64_t v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
            unint64_t v22 = 0;
            goto LABEL_46;
          }

          unint64_t v52 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v14);
          if (v52 == 10)
          {
            uint64_t v53 = __OFADD__(v13++, 1LL);
            uint64_t v23 = v184;
            if (!v53)
            {
              a3 += v14 + 1;
              goto LABEL_71;
            }

              uint64_t v114 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21);
              uint64_t v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v183);
              uint64_t v111 = v115;
              uint64_t v113 = v116;
              unint64_t v24 = v114;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v60 = xmmword_1837301C0;
              goto LABEL_243;
          }
        }

        uint64_t v153 = _asciiNumbers.getter();
        unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v183);
        unint64_t v41 = v154;
        unint64_t v43 = v155;
        if (v150 >= v153 && HIBYTE(v153) >= v150)
        {
LABEL_111:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v60 = v38;
          *(void *)(v60 + 8) = v41;
          *(void *)(v60 + 16) = v43;
          *(void *)(v60 + 24) = 0LL;
          *(void *)(v60 + 32) = 0LL;
          *(void *)(v60 + 40) = 0LL;
          unint64_t v61 = 10;
          goto LABEL_246;
        }

        uint64_t v44 = v150;
        goto LABEL_232;
      }

      unint64_t v138 = v45;
      if (v45 == 46) {
        goto LABEL_256;
      }
      if (v45 != 78)
      {
        if (v45 == 73)
        {
          uint64_t v139 = (char *)specialized BufferView.dropFirst(_:)(1LL, v15, v14);
          uint64_t result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v139, v140, a3, v183);
          if (v10) {
            return result;
          }
          uint64_t v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          uint64_t v23 = 1;
          goto LABEL_46;
        }

        _StringGuts.grow(_:)(20LL);
        v160._countAndFlagsBits = 0x27207265746661LL;
        v160._object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v160);
        unint64_t v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
        uint64_t v162 = (v161 + 1);
        if ((v161 & 0x80) != 0) {
          uint64_t v162 = (((v161 & 0x3F) << 8) | (v161 >> 6)) + 33217;
        }
        uint64_t v188 = (v162 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v162) >> 3)) & 7)));
        v163._countAndFlagsBits = MEMORY[0x186E1B6AC](&v188);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v163);
        swift_bridgeObjectRelease();
        v164._countAndFlagsBits = 0x6D756E206E692027LL;
        v164._object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v164);
        uint64_t v165 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v183);
        uint64_t v167 = v166;
        uint64_t v124 = v168;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v60 = 0LL;
        *(void *)(v60 + 8) = 0xE000000000000000LL;
        *(void *)(v60 + 16) = v138;
        *(void *)(v60 + 24) = v165;
        *(void *)(v60 + 32) = v167;
LABEL_185:
        *(void *)(v60 + 40) = v124;
LABEL_245:
        unint64_t v61 = 1;
        goto LABEL_246;
      }

      unint64_t v158 = (char *)specialized BufferView.dropFirst(_:)(1LL, v15, v14);
      uint64_t result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v158, v159, a3, v183);
      if (v10) {
        return result;
      }
      uint64_t v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      uint64_t v23 = 1;
LABEL_46:
      __int128 v27 = v23;
      unint64_t v48 = v15 + v14;
      a8 = v15 + v14 - 1;
      unint64_t v179 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a8);
      if ((v179 | 0x20) != 0x65)
      {
        __int128 v26 = 0;
        goto LABEL_75;
      }

      uint64_t v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      if (a8 < a3 || a3 + v183 < a8) {
        goto LABEL_272;
      }
      if (a3 + v183 >= v48) {
        __int128 v12 = v48;
      }
      else {
        __int128 v12 = a3 + v183;
      }
      if (v12 <= a3)
      {
        unint64_t v24 = 0LL;
        __int128 v14 = 1LL;
        goto LABEL_79;
      }

      unint64_t v50 = v183 + a3;
      unint64_t v24 = -(uint64_t)a3;
      __int128 v14 = 1LL;
      unint64_t v169 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      uint64_t v174 = v183 + a3;
      unint64_t v183 = -(uint64_t)a3;
      do
      {
        __int128 v11 = 0LL;
        __int128 v15 = 0LL;
        unint64_t v51 = v50 - a3;
        unint64_t v52 = v24 + a3;
        while (1)
        {
          if ((uint64_t)(v52 + v15) < 0 || (uint64_t)(v51 + v11) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            int64_t v156 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v15, v14);
            uint64_t result = (uint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)( v156,  v157,  a3,  v183);
            if (v11) {
              return result;
            }
LABEL_257:
            uint64_t v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
            uint64_t v23 = 0;
            goto LABEL_46;
          }

          uint64_t v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v15);
          if (v53 == 10)
          {
            uint64_t v54 = __OFADD__(v14++, 1LL);
            unint64_t v24 = v183;
            if (!v54)
            {
              a3 += v15 + 1;
              goto LABEL_71;
            }

              char v115 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21);
              uint64_t v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v185);
              uint64_t v112 = v116;
              uint64_t v114 = v117;
              unint64_t v24 = v115;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)unint64_t v61 = xmmword_1837301C0;
              goto LABEL_243;
          }
        }

        uint64_t v155 = _asciiNumbers.getter();
        unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v185);
        unint64_t v41 = v156;
        unint64_t v43 = v157;
        if (v152 >= v155 && HIBYTE(v155) >= v152)
        {
LABEL_111:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)unint64_t v61 = v38;
          *(void *)(v61 + 8) = v41;
          *(void *)(v61 + 16) = v43;
          *(void *)(v61 + 24) = 0LL;
          *(void *)(v61 + 32) = 0LL;
          *(void *)(v61 + 40) = 0LL;
          unint64_t v62 = 10;
          goto LABEL_246;
        }

        uint64_t v44 = v152;
        goto LABEL_232;
      }

      unint64_t v140 = v45;
      if (v45 == 46) {
        goto LABEL_256;
      }
      if (v45 != 78)
      {
        if (v45 == 73)
        {
          unint64_t v141 = (char *)specialized BufferView.dropFirst(_:)(1LL, v15, v14);
          uint64_t result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v141, v142, a3, v185);
          if (v10) {
            return result;
          }
          uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          uint64_t v23 = 1;
          goto LABEL_46;
        }

        _StringGuts.grow(_:)(20LL);
        v162._countAndFlagsBits = 0x27207265746661LL;
        v162._object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v162);
        uint64_t v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
        unint64_t v164 = (v163 + 1);
        if ((v163 & 0x80) != 0) {
          unint64_t v164 = (((v163 & 0x3F) << 8) | (v163 >> 6)) + 33217;
        }
        uint64_t v190 = (v164 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v164) >> 3)) & 7)));
        v165._countAndFlagsBits = MEMORY[0x186E1B6AC](&v190);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v165);
        swift_bridgeObjectRelease();
        v166._countAndFlagsBits = 0x6D756E206E692027LL;
        v166._object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v166);
        uint64_t v167 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v185);
        unint64_t v169 = v168;
        uint64_t v125 = v170;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)unint64_t v61 = 0LL;
        *(void *)(v61 + 8) = 0xE000000000000000LL;
        *(void *)(v61 + 16) = v140;
        *(void *)(v61 + 24) = v167;
        *(void *)(v61 + 32) = v169;
LABEL_185:
        *(void *)(v61 + 40) = v125;
LABEL_245:
        unint64_t v62 = 1;
        goto LABEL_246;
      }

      unint64_t v160 = (char *)specialized BufferView.dropFirst(_:)(1LL, v15, v14);
      uint64_t result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v160, v161, a3, v185);
      if (v10) {
        return result;
      }
      uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      uint64_t v23 = 1;
LABEL_46:
      __int128 v27 = v23;
      unint64_t v48 = v15 + v14;
      a8 = v15 + v14 - 1;
      uint64_t v181 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a8);
      if ((v181 | 0x20) != 0x65)
      {
        __int128 v26 = 0;
        goto LABEL_75;
      }

      uint64_t v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      if (a8 < a3 || a3 + v185 < a8) {
        goto LABEL_272;
      }
      if (a3 + v185 >= v48) {
        __int128 v12 = v48;
      }
      else {
        __int128 v12 = a3 + v185;
      }
      if (v12 <= a3)
      {
        unint64_t v24 = 0LL;
        __int128 v14 = 1LL;
        goto LABEL_79;
      }

      unint64_t v50 = v185 + a3;
      unint64_t v24 = -(uint64_t)a3;
      __int128 v14 = 1LL;
      unint64_t v171 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      unint64_t v176 = v185 + a3;
      uint64_t v185 = -(uint64_t)a3;
      do
      {
        __int128 v11 = 0LL;
        __int128 v15 = 0LL;
        unint64_t v51 = v50 - a3;
        unint64_t v52 = v24 + a3;
        while (1)
        {
          if ((uint64_t)(v52 + v15) < 0 || (uint64_t)(v51 + v11) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            unint64_t v158 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v15, v14);
            uint64_t result = (uint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)( v158,  v159,  a3,  v185);
            if (v11) {
              return result;
            }
LABEL_257:
            uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
            uint64_t v23 = 0;
            goto LABEL_46;
          }

          uint64_t v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v15);
          if (v53 == 10)
          {
            uint64_t v54 = __OFADD__(v14++, 1LL);
            unint64_t v24 = v185;
            if (!v54)
            {
              a3 += v15 + 1;
              goto LABEL_71;
            }

          uint64_t v154 = (v163 - 1) & v163;
          int64_t v156 = __clz(__rbit64(v163)) + (v151 << 6);
        }

        unint64_t v157 = 16 * v156;
        unint64_t v158 = (uint64_t *)(*(void *)(v7 + 48) + v157);
        unint64_t v160 = *v158;
        uint64_t v159 = v158[1];
        unint64_t v161 = *(_OWORD *)(*(void *)(v7 + 56) + v157);
        uint64_t v162 = (void *)(*(void *)(v147 + 48) + v157);
        *uint64_t v162 = v160;
        v162[1] = v159;
        *(_OWORD *)(*(void *)(v147 + 56) + v157) = v161;
        swift_bridgeObjectRetain();
      }
    }

    __int128 v15 = swift_conformsToProtocol2();
    if (v15) {
      __int128 v16 = v15;
    }
    else {
      __int128 v16 = 0LL;
    }
    if (v15) {
      __int128 v17 = v11;
    }
    else {
      __int128 v17 = 0LL;
    }
    __int128 v6 = v8 + 1;
    if (!v17) {
      continue;
    }
    break;
  }

  uint64_t v188 = v4;
  static AttributeScope.scopeDescription.getter(v17, v16);
  swift_bridgeObjectRetain();
  int64_t v18 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v202 = (void *)v7;
  uint64_t v19 = swift_bridgeObjectRetain();
  unint64_t v20 = specialized LazyMapSequence.Iterator.next()(v19);
  if (v21)
  {
    unint64_t v24 = v20;
    unint64_t v25 = v21;
    __int128 v26 = v22;
    __int128 v27 = v23;
    while (1)
    {
      uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
      uint64_t v36 = *(void *)(v7 + 16);
      uint64_t v37 = (v34 & 1) == 0;
      __int128 v28 = v36 + v37;
      if (__OFADD__(v36, v37)) {
        goto LABEL_221;
      }
      unint64_t v38 = v34;
      if (*(void *)(v7 + 24) >= v28)
      {
        if ((v18 & 1) != 0)
        {
          if ((v34 & 1) != 0) {
            goto LABEL_26;
          }
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          unint64_t v46 = static _DictionaryStorage.copy(original:)();
          uint64_t v191 = (void *)v46;
          if (*(void *)(v7 + 16))
          {
            unint64_t v47 = v46;
            unint64_t v48 = (void *)(v46 + 64);
            uint64_t v49 = (unint64_t)((1LL << *(_BYTE *)(v47 + 32)) + 63) >> 6;
            unint64_t v184 = v7 + 64;
            uint64_t v39 = 0LL;
            v191[2] = *(void *)(v7 + 16);
            unint64_t v50 = 1LL << *(_BYTE *)(v7 + 32);
            if (v50 < 64) {
              unint64_t v51 = ~(-1LL << v50);
            }
            else {
              unint64_t v51 = -1LL;
            }
            unint64_t v52 = v51 & *(void *)(v7 + 64);
            uint64_t v186 = (unint64_t)(v50 + 63) >> 6;
            while (1)
            {
              if (v52)
              {
                uint64_t v53 = __clz(__rbit64(v52));
                v52 &= v52 - 1;
                uint64_t v54 = v53 | (v39 << 6);
              }

              else
              {
                uint64_t v44 = __OFADD__(v39++, 1LL);
                if (v44) {
                  goto LABEL_228;
                }
                if (v39 >= v186) {
                  break;
                }
                unint64_t v61 = *(void *)(v184 + 8 * v39);
                if (!v61)
                {
                  unint64_t v62 = v39 + 1;
                  if (v39 + 1 >= v186) {
                    break;
                  }
                  unint64_t v61 = *(void *)(v184 + 8 * v62);
                  if (!v61)
                  {
                    unint64_t v62 = v39 + 2;
                    if (v39 + 2 >= v186) {
                      break;
                    }
                    unint64_t v61 = *(void *)(v184 + 8 * v62);
                    if (!v61)
                    {
                      unint64_t v62 = v39 + 3;
                      if (v39 + 3 >= v186) {
                        break;
                      }
                      unint64_t v61 = *(void *)(v184 + 8 * v62);
                      if (!v61)
                      {
                        unint64_t v62 = v39 + 4;
                        if (v39 + 4 >= v186) {
                          break;
                        }
                        unint64_t v61 = *(void *)(v184 + 8 * v62);
                        if (!v61)
                        {
                          unint64_t v62 = v39 + 5;
                          if (v39 + 5 >= v186) {
                            break;
                          }
                          unint64_t v61 = *(void *)(v184 + 8 * v62);
                          if (!v61)
                          {
                            while (1)
                            {
                              uint64_t v39 = v62 + 1;
                              if (__OFADD__(v62, 1LL)) {
                                break;
                              }
                              if (v39 >= v186) {
                                goto LABEL_67;
                              }
                              unint64_t v61 = *(void *)(v184 + 8 * v39);
                              ++v62;
                              if (v61) {
                                goto LABEL_62;
                              }
                            }

          uint64_t v154 = (v163 - 1) & v163;
          int64_t v156 = __clz(__rbit64(v163)) + (v151 << 6);
        }

        unint64_t v157 = 16 * v156;
        unint64_t v158 = (uint64_t *)(*(void *)(v7 + 48) + v157);
        unint64_t v160 = *v158;
        uint64_t v159 = v158[1];
        unint64_t v161 = *(_OWORD *)(*(void *)(v7 + 56) + v157);
        uint64_t v162 = (void *)(*(void *)(v147 + 48) + v157);
        *uint64_t v162 = v160;
        v162[1] = v159;
        *(_OWORD *)(*(void *)(v147 + 56) + v157) = v161;
        swift_bridgeObjectRetain();
      }
    }

    __int128 v15 = swift_conformsToProtocol2();
    if (v15) {
      __int128 v16 = v15;
    }
    else {
      __int128 v16 = 0LL;
    }
    if (v15) {
      __int128 v17 = v11;
    }
    else {
      __int128 v17 = 0LL;
    }
    __int128 v6 = v8 + 1;
    if (!v17) {
      continue;
    }
    break;
  }

  uint64_t v188 = v4;
  static AttributeScope.scopeDescription.getter(v17, v16);
  swift_bridgeObjectRetain();
  int64_t v18 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v202 = (void *)v7;
  uint64_t v19 = swift_bridgeObjectRetain();
  unint64_t v20 = specialized LazyMapSequence.Iterator.next()(v19);
  if (v21)
  {
    unint64_t v24 = v20;
    unint64_t v25 = v21;
    __int128 v26 = v22;
    __int128 v27 = v23;
    while (1)
    {
      uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
      uint64_t v36 = *(void *)(v7 + 16);
      uint64_t v37 = (v34 & 1) == 0;
      __int128 v28 = v36 + v37;
      if (__OFADD__(v36, v37)) {
        goto LABEL_221;
      }
      unint64_t v38 = v34;
      if (*(void *)(v7 + 24) >= v28)
      {
        if ((v18 & 1) != 0)
        {
          if ((v34 & 1) != 0) {
            goto LABEL_26;
          }
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          unint64_t v46 = static _DictionaryStorage.copy(original:)();
          uint64_t v191 = (void *)v46;
          if (*(void *)(v7 + 16))
          {
            unint64_t v47 = v46;
            unint64_t v48 = (void *)(v46 + 64);
            uint64_t v49 = (unint64_t)((1LL << *(_BYTE *)(v47 + 32)) + 63) >> 6;
            unint64_t v184 = v7 + 64;
            uint64_t v39 = 0LL;
            v191[2] = *(void *)(v7 + 16);
            unint64_t v50 = 1LL << *(_BYTE *)(v7 + 32);
            if (v50 < 64) {
              unint64_t v51 = ~(-1LL << v50);
            }
            else {
              unint64_t v51 = -1LL;
            }
            unint64_t v52 = v51 & *(void *)(v7 + 64);
            uint64_t v186 = (unint64_t)(v50 + 63) >> 6;
            while (1)
            {
              if (v52)
              {
                uint64_t v53 = __clz(__rbit64(v52));
                v52 &= v52 - 1;
                uint64_t v54 = v53 | (v39 << 6);
              }

              else
              {
                uint64_t v44 = __OFADD__(v39++, 1LL);
                if (v44) {
                  goto LABEL_228;
                }
                if (v39 >= v186) {
                  break;
                }
                unint64_t v61 = *(void *)(v184 + 8 * v39);
                if (!v61)
                {
                  unint64_t v62 = v39 + 1;
                  if (v39 + 1 >= v186) {
                    break;
                  }
                  unint64_t v61 = *(void *)(v184 + 8 * v62);
                  if (!v61)
                  {
                    unint64_t v62 = v39 + 2;
                    if (v39 + 2 >= v186) {
                      break;
                    }
                    unint64_t v61 = *(void *)(v184 + 8 * v62);
                    if (!v61)
                    {
                      unint64_t v62 = v39 + 3;
                      if (v39 + 3 >= v186) {
                        break;
                      }
                      unint64_t v61 = *(void *)(v184 + 8 * v62);
                      if (!v61)
                      {
                        unint64_t v62 = v39 + 4;
                        if (v39 + 4 >= v186) {
                          break;
                        }
                        unint64_t v61 = *(void *)(v184 + 8 * v62);
                        if (!v61)
                        {
                          unint64_t v62 = v39 + 5;
                          if (v39 + 5 >= v186) {
                            break;
                          }
                          unint64_t v61 = *(void *)(v184 + 8 * v62);
                          if (!v61)
                          {
                            while (1)
                            {
                              uint64_t v39 = v62 + 1;
                              if (__OFADD__(v62, 1LL)) {
                                break;
                              }
                              if (v39 >= v186) {
                                goto LABEL_67;
                              }
                              unint64_t v61 = *(void *)(v184 + 8 * v39);
                              ++v62;
                              if (v61) {
                                goto LABEL_62;
                              }
                            }

LABEL_111:
      if (v93) {
        goto LABEL_170;
      }
      goto LABEL_117;
    }

    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)&v248);
    unint64_t v90 = swift_unknownObjectRetain();
    uint64_t v71 = v175;
    unint64_t v45 = specialized Rope._endPath.getter(v90);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v70 = 0LL;
    uint64_t v91 = v181;
    if (!v69)
    {
      uint64_t v73 = v68;
      uint64_t v74 = 0LL;
      goto LABEL_119;
    }

        __break(1u);
        goto LABEL_112;
      }

        __int128 v121 = 0LL;
        __int128 v128 = (unint64_t)v16;
        __int128 v129 = v56;
LABEL_151:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v71,  v129,  v128,  v121,  2037411651LL,  0xE400000000000000LL,  v56,  (uint64_t)v16,  (void *(*)(void *__return_ptr, void *, uint64_t))&v317,  (uint64_t)v58,  v60);
        __int128 v28 = v317;
        uint64_t v163 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v28,  v56,  (unint64_t)v16,  (uint64_t)v58,  v60,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

        if ((v163 & 1) == 0) {
          goto LABEL_329;
        }
LABEL_11:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_12;
      }

      if (v34 < 0)
      {
LABEL_359:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_360:
        swift_willThrow();
        __break(1u);
        swift_willThrow();
        __break(1u);
LABEL_361:
        v317 = 0LL;
        v318 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        v317 = (id)0xD000000000000014LL;
        v318 = 0x80000001839C9190LL;
        v316 = v41;
        goto LABEL_366;
      }

      if (!copyfile(fts_path, v308, 0LL, v34 | 0x10E000F)) {
        goto LABEL_13;
      }
      uint64_t v55 = MEMORY[0x186E1B0E8]();
      uint64_t v56 = String.init(cString:)();
      __int128 v16 = v82;
      unint64_t v58 = (uint64_t (*)(void))String.init(cString:)();
      uint64_t v60 = v83;
      swift_bridgeObjectRetain();
      if (v55 == 63)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v84 = String._lastPathComponent.getter((uint64_t)v58, v60);
        uint64_t v86 = v85;
        swift_bridgeObjectRelease();
        uint64_t v87 = specialized String.withFileSystemRepresentation<A>(_:)(v84, v86);
        swift_bridgeObjectRelease();
        unint64_t v88 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v58, v60);
        swift_bridgeObjectRelease();
        unint64_t v90 = v87 > 255 || v88 > 1024;
        uint64_t v91 = !v90;
        if (v90) {
          unint64_t v92 = v58;
        }
        else {
          unint64_t v92 = (uint64_t (*)(void))v56;
        }
        v301 = (unint64_t)v92;
        if (v91) {
          unint64_t v93 = (unint64_t *)v16;
        }
        else {
          unint64_t v93 = (unint64_t *)v60;
        }
        v302 = v93;
        swift_bridgeObjectRelease();
        CocoaError.Code.init(fileErrno:reading:)(63, 0);
        uint64_t v71 = v319;
      }

      else
      {
        CocoaError.Code.init(fileErrno:reading:)(v55, 0);
        uint64_t v71 = v319;
        if (v55 == 102) {
          goto LABEL_111;
        }
        v302 = (unint64_t *)v16;
        v301 = v56;
      }

      v300 = v71;
      v304 = v58;
      v311 = v56;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
        goto LABEL_355;
      }
      uint64_t v153 = v305;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
      uint64_t v154 = (int)POSIXErrorCode.rawValue.getter();
      uint64_t v155 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      int64_t v156 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v121 = objc_msgSend(v155, sel_initWithDomain_code_userInfo_, v156, v154, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v157 = objc_msgSend(v121, sel_domain);
      unint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
      unint64_t v160 = v159;

      if (v158 != static String._unconditionallyBridgeFromObjectiveC(_:)(v153) || v160 != v161)
      {
        uint64_t v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v162 & 1) == 0) {
          goto LABEL_347;
        }
        goto LABEL_150;
      }

      goto LABEL_148;
    case 4u:
    case 7u:
    case 0xAu:
      LODWORD(v41) = v16->fts_errno;
      uint64_t v42 = String.init(cString:)();
      __int128 v16 = v43;
      uint64_t v44 = String.init(cString:)();
      unint64_t v46 = v45;
      swift_bridgeObjectRetain();
      if ((_DWORD)v41 == 63)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        unint64_t v47 = String._lastPathComponent.getter(v44, v46);
        uint64_t v49 = v48;
        swift_bridgeObjectRelease();
        if ((v49 & 0x1000000000000000LL) != 0)
        {
          unint64_t v50 = String.UTF8View._foreignCount()();
        }

        else if ((v49 & 0x2000000000000000LL) != 0)
        {
          unint64_t v50 = HIBYTE(v49) & 0xF;
        }

        else
        {
          unint64_t v50 = v47 & 0xFFFFFFFFFFFFLL;
        }

        __int128 v108 = 3 * v50;
        LODWORD(v304) = 63;
        if (v108 < -1) {
          goto LABEL_336;
        }
        unint64_t v41 = v108 + 1;
        if (v108 < 1024 || (unint64_t v50 = swift_stdlib_isStackAllocationSafe(), (v50 & 1) != 0))
        {
          v302 = &v295;
          MEMORY[0x1895F8858](v50);
          uint64_t v110 = (char *)&v295 - v109;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v110, v41, 1, v47, v49);
          LODWORD(v41) = v111;
          swift_bridgeObjectRelease();
          if ((v41 & 1) != 0)
          {
            if (v7) {
              goto LABEL_360;
            }
            uint64_t v73 = 0LL;
          }

          else
          {
            uint64_t v112 = strnlen(v110, 0x100uLL);
            if (v7) {
              goto LABEL_360;
            }
            uint64_t v73 = v112;
          }
        }

        else
        {
          uint64_t v73 = swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, v73, v41, 1, v47, v49);
          char v115 = v114;
          swift_bridgeObjectRelease();
          if ((v115 & 1) != 0)
          {
            __int128 v116 = (const char *)v73;
            if (v7) {
              goto LABEL_357;
            }
            uint64_t v73 = 0LL;
          }

          else
          {
            __int128 v116 = (const char *)v73;
            if (v73) {
              uint64_t v73 = strnlen((const char *)v73, 0x100uLL);
            }
            if (v7)
            {
LABEL_357:
              v293 = v116;
LABEL_363:
              MEMORY[0x186E20E60](v293, -1LL, -1LL);
              __break(1u);
LABEL_364:
              swift_willThrow();
              __break(1u);
LABEL_365:
              v317 = 0LL;
              v318 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(22LL);
              swift_bridgeObjectRelease();
              v317 = (id)0xD000000000000014LL;
              v318 = 0x80000001839C9190LL;
              v316 = v73;
              while (1)
              {
LABEL_366:
                v294._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v294);
                swift_bridgeObjectRelease();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_367:
                v317 = 0LL;
                v318 = 0xE000000000000000LL;
                _StringGuts.grow(_:)(22LL);
                swift_bridgeObjectRelease();
                v317 = (id)0xD000000000000014LL;
                v318 = 0x80000001839C9190LL;
                LODWORD(v319) = (_DWORD)v16;
              }
            }
          }

          MEMORY[0x186E20E60](v116, -1LL, -1LL);
        }

        swift_bridgeObjectRelease();
        if ((v46 & 0x1000000000000000LL) != 0)
        {
          uint64_t v142 = String.UTF8View._foreignCount()();
        }

        else if ((v46 & 0x2000000000000000LL) != 0)
        {
          uint64_t v142 = HIBYTE(v46) & 0xF;
        }

        else
        {
          uint64_t v142 = v44 & 0xFFFFFFFFFFFFLL;
        }

        uint64_t v143 = 3 * v142;
        if (v143 < -1) {
          goto LABEL_337;
        }
        __int128 v144 = v143 + 1;
        if (v143 < 1024 || (uint64_t v142 = swift_stdlib_isStackAllocationSafe(), (v142 & 1) != 0))
        {
          v311 = (uint64_t)&v295;
          MEMORY[0x1895F8858](v142);
          uint64_t v146 = (char *)&v295 - v145;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v146, v144, 1, v44, v46);
          uint64_t v148 = v147;
          swift_bridgeObjectRelease();
          if ((v148 & 1) != 0) {
            uint64_t v149 = 0LL;
          }
          else {
            uint64_t v149 = strnlen(v146, 0x401uLL);
          }
          LODWORD(v41) = (_DWORD)v304;
        }

        else
        {
          uint64_t v150 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v150, v144, 1, v44, v46);
          uint64_t v152 = v151;
          swift_bridgeObjectRelease();
          if ((v152 & 1) != 0)
          {
            LODWORD(v41) = (_DWORD)v304;
            uint64_t v149 = 0LL;
          }

          else
          {
            if (v150) {
              uint64_t v149 = strnlen(v150, 0x401uLL);
            }
            else {
              uint64_t v149 = 0LL;
            }
            LODWORD(v41) = (_DWORD)v304;
          }

          MEMORY[0x186E20E60](v150, -1LL, -1LL);
        }

        swift_bridgeObjectRelease();
        uint64_t v168 = v73 > 255 || v149 > 1024;
        unint64_t v169 = !v168;
        if (v168) {
          uint64_t v170 = v44;
        }
        else {
          uint64_t v170 = v42;
        }
        v299 = v170;
        v302 = (unint64_t *)v16;
        v301 = v46;
        if (v169) {
          unint64_t v171 = (unint64_t)v16;
        }
        else {
          unint64_t v171 = v46;
        }
        v300 = (uint64_t (*)(void))v171;
        swift_bridgeObjectRelease();
        CocoaError.Code.init(fileErrno:reading:)(63, 0);
        v304 = v319;
      }

      else
      {
        CocoaError.Code.init(fileErrno:reading:)(v41, 0);
        v304 = v319;
        if ((_DWORD)v41 == 102)
        {
          uint64_t v79 = 0LL;
          char v80 = (unint64_t)v16;
          unint64_t v81 = v42;
          goto LABEL_184;
        }

        v301 = v46;
        v302 = (unint64_t *)v16;
        v300 = (uint64_t (*)(void))v16;
        v299 = v42;
      }

      uint64_t v172 = v44;
      LODWORD(v16) = v42;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
        goto LABEL_361;
      }
      uint64_t v173 = v305;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
      uint64_t v174 = (int)POSIXErrorCode.rawValue.getter();
      uint64_t v175 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      unint64_t v176 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v79 = objc_msgSend(v175, sel_initWithDomain_code_userInfo_, v176, v174, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v177 = objc_msgSend(v79, sel_domain);
      unint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)(v177);
      uint64_t v180 = v179;

      if (v178 == static String._unconditionallyBridgeFromObjectiveC(_:)(v173) && v180 == v181)
      {
        swift_bridgeObjectRelease_n();
        __int128 v9 = v308;
      }

      else
      {
        uint64_t v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __int128 v9 = v308;
        if ((v182 & 1) == 0) {
          goto LABEL_335;
        }
      }

      __int128 v16 = (FTSENT *)v302;
      uint64_t v44 = v172;
      unint64_t v46 = v301;
      char v80 = (unint64_t)v300;
      unint64_t v81 = v299;
LABEL_184:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v304,  v81,  v80,  v79,  2037411651LL,  0xE400000000000000LL,  v42,  (uint64_t)v16,  (void *(*)(void *__return_ptr, void *, uint64_t))&v317,  v44,  v46);
      unint64_t v183 = v317;
      unint64_t v184 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v183,  v42,  (unint64_t)v16,  v44,  v46,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

      if ((v184 & 1) == 0)
      {
LABEL_329:
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_13;
    case 6u:
      goto LABEL_20;
    case 0xCu:
    case 0xDu:
      unint64_t v72 = v34 | v303;
      if ((v72 & 0x80000000) != 0) {
        goto LABEL_359;
      }
      if (!copyfile(fts_path, v308, 0LL, v72)) {
        goto LABEL_13;
      }
      LODWORD(v73) = MEMORY[0x186E1B0E8]();
      unint64_t v24 = String.init(cString:)();
      __int128 v16 = v74;
      unint64_t v22 = String.init(cString:)();
      unint64_t v25 = v75;
      swift_bridgeObjectRetain();
      if ((_DWORD)v73 == 63)
      {
        LODWORD(v299) = 63;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v76 = String._lastPathComponent.getter(v22, (unint64_t)v25);
        uint64_t v73 = v77;
        swift_bridgeObjectRelease();
        if ((v73 & 0x1000000000000000LL) != 0)
        {
          uint64_t v78 = String.UTF8View._foreignCount()();
        }

        else if ((v73 & 0x2000000000000000LL) != 0)
        {
          uint64_t v78 = HIBYTE(v73) & 0xF;
        }

        else
        {
          uint64_t v78 = v76 & 0xFFFFFFFFFFFFLL;
        }

        v304 = v25;
        __int128 v133 = 3 * v78;
        if (v133 < -1) {
          goto LABEL_342;
        }
        __int128 v134 = v22;
        char v135 = v133 + 1;
        if (v133 < 1024 || (uint64_t v78 = swift_stdlib_isStackAllocationSafe(), (v78 & 1) != 0))
        {
          MEMORY[0x1895F8858](v78);
          unint64_t v41 = (uint64_t)&v295 - v136;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, v41, v135, 1, v76, v73);
          unint64_t v138 = v137;
          swift_bridgeObjectRelease();
          if ((v138 & 1) != 0)
          {
            if (v7) {
              goto LABEL_360;
            }
            unint64_t v22 = v134;
            unint64_t v140 = 0LL;
          }

          else
          {
            uint64_t v139 = strnlen((const char *)v41, 0x100uLL);
            if (v7) {
              goto LABEL_360;
            }
            unint64_t v140 = v139;
            unint64_t v22 = v134;
          }

          unint64_t v141 = (unint64_t)v304;
        }

        else
        {
          unint64_t v164 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v164, v135, 1, v76, v73);
          uint64_t v166 = v165;
          swift_bridgeObjectRelease();
          unint64_t v22 = v134;
          if ((v166 & 1) != 0)
          {
            unint64_t v141 = (unint64_t)v304;
            if (v7) {
              goto LABEL_362;
            }
            unint64_t v140 = 0LL;
          }

          else
          {
            if (v164) {
              unint64_t v140 = strnlen(v164, 0x100uLL);
            }
            else {
              unint64_t v140 = 0LL;
            }
            unint64_t v141 = (unint64_t)v304;
            if (v7)
            {
LABEL_362:
              v293 = v164;
              goto LABEL_363;
            }
          }

          MEMORY[0x186E20E60](v164, -1LL, -1LL);
        }

        swift_bridgeObjectRelease();
        if ((v141 & 0x1000000000000000LL) != 0)
        {
          unint64_t v201 = String.UTF8View._foreignCount()();
        }

        else if ((v141 & 0x2000000000000000LL) != 0)
        {
          unint64_t v201 = HIBYTE(v141) & 0xF;
        }

        else
        {
          unint64_t v201 = v22 & 0xFFFFFFFFFFFFLL;
        }

        unint64_t v202 = 3 * v201;
        if (v202 < -1) {
          goto LABEL_344;
        }
        v311 = v140;
        uint64_t v203 = v202 + 1;
        if (v202 < 1024 || (unint64_t v201 = swift_stdlib_isStackAllocationSafe(), (v201 & 1) != 0))
        {
          MEMORY[0x1895F8858](v201);
          uint64_t v205 = (char *)&v295 - v204;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v205, v203, 1, v22, v141);
          uint64_t v207 = v206;
          swift_bridgeObjectRelease();
          if ((v207 & 1) != 0) {
            uint64_t v208 = 0LL;
          }
          else {
            uint64_t v208 = strnlen(v205, 0x401uLL);
          }
          unint64_t v209 = v311;
        }

        else
        {
          uint64_t v210 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v210, v203, 1, v22, v141);
          uint64_t v212 = v211;
          swift_bridgeObjectRelease();
          if ((v212 & 1) != 0)
          {
            unint64_t v209 = v311;
            uint64_t v208 = 0LL;
          }

          else
          {
            if (v210) {
              uint64_t v208 = strnlen(v210, 0x401uLL);
            }
            else {
              uint64_t v208 = 0LL;
            }
            unint64_t v209 = v311;
          }

          MEMORY[0x186E20E60](v210, -1LL, -1LL);
        }

        swift_bridgeObjectRelease();
        uint64_t v214 = v209 > 255 || v208 > 1024;
        uint64_t v215 = !v214;
        if (v214) {
          uint64_t v216 = v22;
        }
        else {
          uint64_t v216 = v24;
        }
        v300 = (uint64_t (*)(void))v216;
        v302 = (unint64_t *)v16;
        if (v215) {
          uint64_t v217 = (unint64_t)v16;
        }
        else {
          uint64_t v217 = v141;
        }
        v301 = v217;
        swift_bridgeObjectRelease();
        CocoaError.Code.init(fileErrno:reading:)(63, 0);
        uint64_t v23 = (FTSENT *)v319;
        LODWORD(v73) = v299;
      }

      else
      {
        CocoaError.Code.init(fileErrno:reading:)(v73, 0);
        uint64_t v23 = (FTSENT *)v319;
        if ((_DWORD)v73 == 102)
        {
          uint64_t v113 = 0LL;
          __int128 v26 = (unint64_t)v16;
          __int128 v27 = v24;
          goto LABEL_10;
        }

        v304 = v25;
        v302 = (unint64_t *)v16;
        v301 = (unint64_t)v16;
        v300 = (uint64_t (*)(void))v24;
      }

      __int128 v16 = v23;
      __int128 v218 = v22;
      v311 = v24;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
        goto LABEL_365;
      }
      __int128 v219 = v305;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
      char v220 = (int)POSIXErrorCode.rawValue.getter();
      char v221 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      __int128 v222 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v113 = objc_msgSend(v221, sel_initWithDomain_code_userInfo_, v222, v220, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      __int128 v223 = objc_msgSend(v113, sel_domain);
      __int128 v224 = static String._unconditionallyBridgeFromObjectiveC(_:)(v223);
      unint64_t v226 = v225;

      if (v224 == static String._unconditionallyBridgeFromObjectiveC(_:)(v219) && v226 == v227)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v22 = v218;
        uint64_t v23 = v16;
      }

      else
      {
        unint64_t v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v22 = v218;
        uint64_t v23 = v16;
        if ((v21 & 1) == 0) {
          goto LABEL_340;
        }
      }

      unint64_t v24 = v311;
      __int128 v16 = (FTSENT *)v302;
      unint64_t v25 = v304;
      __int128 v26 = v301;
      __int128 v27 = (uint64_t)v300;
LABEL_10:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v23,  v27,  v26,  v113,  2037411651LL,  0xE400000000000000LL,  v24,  (uint64_t)v16,  (void *(*)(void *__return_ptr, void *, uint64_t))&v317,  v22,  (uint64_t)v25);
      __int128 v28 = v317;
      __int128 v29 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v28,  v24,  (unint64_t)v16,  v22,  (unint64_t)v25,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

      if ((v29 & 1) == 0) {
        goto LABEL_329;
      }
      goto LABEL_11;
    default:
      goto LABEL_12;
  }

      *(void *)&v508 = v134;
      *((void *)&v508 + 1) = v133;
      *(void *)&v509 = v135;
      *((void *)&v509 + 1) = v149;
      *(void *)&v510 = v5;
      __int128 v6 = v459;
      continue;
    }
  }

  v479 = v23;
  while (1)
  {
    uint64_t v53 = v599;
    uint64_t v54 = (void *)v6;
    uint64_t v55 = *((void *)&v599 + 1);
    uint64_t v56 = v600;
    uint64_t v57 = v54[8];
    unint64_t v58 = v54[10];
    __int128 v5 = v54[11];
    unint64_t v59 = swift_unknownObjectRetain();
    uint64_t result = specialized Rope._endPath.getter(v59);
    if (!v57) {
      break;
    }
    uint64_t result = swift_unknownObjectRelease();
    if (v42 == v58) {
      goto LABEL_35;
    }
LABEL_57:
    uint64_t v76 = *(void *)(v459 + 64);
    uint64_t v77 = *(void *)(v459 + 72);
    __int128 v5 = *(void *)(v459 + 80);
    uint64_t v78 = *(void *)(v459 + 88);
    *(void *)&v508 = v53;
    *((void *)&v508 + 1) = v55;
    *(void *)&v509 = v56;
    uint64_t v79 = *((void *)&v56 + 1) - 1LL;
    if (__OFSUB__(*((void *)&v56 + 1), 1LL)) {
      goto LABEL_565;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(before:)((uint64_t)&v508, v76, v77, v5, v78);
    char v80 = *((void *)&v508 + 1);
    unint64_t v62 = v508;
    unint64_t v58 = v509;
    unint64_t v81 = specialized Rope.subscript.getter(v508, *((unint64_t *)&v508 + 1), v509, v76, v77, v5, v78);
    __int128 v5 = v82;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v83 = v42 - v81;
    if (__OFSUB__(v42, v81)) {
      goto LABEL_566;
    }
    unint64_t v64 = v471;
    uint64_t v84 = v479;
LABEL_82:
    *(void *)&v599 = v62;
    *((void *)&v599 + 1) = v80;
    *(void *)&v600 = v58;
    *((void *)&v600 + 1) = v79;
    *(void *)&v601 = v83;
    swift_retain();
    swift_bridgeObjectRetain();
    __int128 v6 = v459;
    specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v599,  0LL,  v64,  (void *)v459,  (uint64_t *)&v525,  v84,  v492,  (uint64_t)&v534);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v42 = v601;
    unint64_t v92 = *(void *)(v459 + 64);
    unint64_t v93 = *(void *)(v459 + 72);
    uint64_t v94 = *(void *)(v459 + 80);
    uint64_t v95 = *(void *)(v459 + 88);
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0LL, v466 & 1, v92, v93, v94, v95, (uint64_t *)&v508);
    unint64_t v96 = v510;
    swift_unknownObjectRelease();
    if (v96 >= v42 || !*(void *)(v525 + 16)) {
      goto LABEL_84;
    }
  }

  if (v42) {
    goto LABEL_57;
  }
LABEL_35:
  uint64_t v60 = *(void *)(v459 + 64);
  unint64_t v61 = *(void *)(v459 + 72);
  __int128 v63 = *(void *)(v459 + 80);
  unint64_t v62 = *(void *)(v459 + 88);
  if (!v60)
  {
    unint64_t v64 = v471;
    goto LABEL_61;
  }

  unint64_t v64 = v471;
  if (v63 < v471) {
    goto LABEL_568;
  }
  if (!*(_WORD *)(v60 + 16))
  {
LABEL_61:
    swift_unknownObjectRetain_n();
    char v80 = specialized Rope._endPath.getter(v60);
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v58 = 0LL;
    __int128 v5 = 0LL;
    if (!v60)
    {
      uint64_t v79 = 0LL;
LABEL_81:
      uint64_t v84 = v479;
      BOOL v83 = v64 - v5;
      if (__OFSUB__(v64, v5)) {
        goto LABEL_567;
      }
      goto LABEL_82;
    }

                            swift_bridgeObjectRelease();
                            if ((v48 & 1) != 0)
                            {
LABEL_36:
                              uint64_t v54 = *(void *)(v23 + 56);
                              swift_bridgeObjectRelease();
                              *(void *)(v54 + 8 * v35) = v29;
                              goto LABEL_74;
                            }

    v149._countAndFlagsBits = countAndFlagsBits;
    v149._object = (void *)v42;
    *(void *)&uint64_t v150 = v38;
    unint64_t v52 = __OFADD__(v138, 1LL);
    uint64_t v139 = v138 + 1;
    if (v52)
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    if (countAndFlagsBits != v136)
    {
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }

    if (v38)
    {
      uint64_t v65 = *(void *)(v38 + 24 * ((v42 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v66 = v128;
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v67 = v42;
      unint64_t v66 = v128;
      uint64_t v65 = specialized Rope._Node.subscript.getter(v67, v40);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v52 = __OFADD__(v43, v65);
    uint64_t v68 = v43 + v65;
    if (v52)
    {
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
      goto LABEL_170;
    }

    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v149, v40, v39, v66, v136);
    swift_unknownObjectRelease_n();
    __int128 v134 = v149;
    uint64_t v69 = v150;
    if (v137 != 2)
    {
      uint64_t v76 = v123[1];
      uint64_t v181 = *v123;
      uint64_t v182 = v76;
      unint64_t v183 = v123[2];
      BigString.utf8.getter();
      uint64_t result = v131;
      if (!__OFSUB__(v68, v131 >> 11))
      {
        uint64_t v71 = BigString.UTF8View.index(_:offsetBy:)();
        __int128 v129 = v78;
        unint64_t v130 = v77;
        unint64_t v137 = v79;
        uint64_t v75 = &v166;
        goto LABEL_121;
      }

      goto LABEL_171;
    }

    uint64_t v70 = v123[1];
    unint64_t v184 = *v123;
    uint64_t v185 = v70;
    uint64_t v186 = v123[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    uint64_t v71 = BigString.UTF8View.index(_:offsetBy:)();
    __int128 v129 = v73;
    unint64_t v130 = v72;
    unint64_t v137 = v74;
    uint64_t v75 = &v167;
LABEL_121:
    outlined release of Locale((uint64_t)v75);
    swift_release();
    __int128 v133 = v69;
    __int128 v131 = v71;
    char v80 = v108[1];
    unint64_t v178 = *v108;
    unint64_t v179 = v80;
    uint64_t v180 = v108[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v168);
    unint64_t v81 = MEMORY[0x186E1B6B8](v169);
    BOOL v83 = v82;
    uint64_t v84 = v163 & 0xFFFFFFFFFFFFLL;
    if ((v164 & 0x2000000000000000LL) != 0) {
      uint64_t v84 = HIBYTE(v164) & 0xF;
    }
    if (v84)
    {
      v85._countAndFlagsBits = 10LL;
      v85._object = (void *)0xE100000000000000LL;
      String.append(_:)(v85);
    }

    v147._countAndFlagsBits = v81;
    v147._object = v83;
    v86._countAndFlagsBits = 32LL;
    v86._object = (void *)0xE100000000000000LL;
    String.append(_:)(v86);
    v146._countAndFlagsBits = 0LL;
    v146._object = (void *)0xE000000000000000LL;
    uint64_t v87 = v21 + 64;
    unint64_t v88 = 1LL << *(_BYTE *)(v21 + 32);
    if (v88 < 64) {
      uint64_t v89 = ~(-1LL << v88);
    }
    else {
      uint64_t v89 = -1LL;
    }
    unint64_t v90 = v89 & *(void *)(v21 + 64);
    uint64_t v91 = (unint64_t)(v88 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v92 = 0LL;
    while (1)
    {
      if (v90)
      {
        unint64_t v93 = __clz(__rbit64(v90));
        v90 &= v90 - 1;
        uint64_t v94 = v93 | (v92 << 6);
        goto LABEL_130;
      }

      uint64_t v103 = v92 + 1;
      if (__OFADD__(v92, 1LL))
      {
        __break(1u);
        goto LABEL_153;
      }

      if (v103 >= v91) {
        break;
      }
      uint64_t v104 = *(void *)(v87 + 8 * v103);
      ++v92;
      if (!v104)
      {
        unint64_t v92 = v103 + 1;
        if (v103 + 1 >= v91) {
          break;
        }
        uint64_t v104 = *(void *)(v87 + 8 * v92);
        if (!v104)
        {
          unint64_t v92 = v103 + 2;
          if (v103 + 2 >= v91) {
            break;
          }
          uint64_t v104 = *(void *)(v87 + 8 * v92);
          if (!v104)
          {
            unint64_t v92 = v103 + 3;
            if (v103 + 3 >= v91) {
              break;
            }
            uint64_t v104 = *(void *)(v87 + 8 * v92);
            if (!v104)
            {
              unint64_t v92 = v103 + 4;
              if (v103 + 4 >= v91) {
                break;
              }
              uint64_t v104 = *(void *)(v87 + 8 * v92);
              if (!v104)
              {
                uint64_t v105 = v103 + 5;
                if (v105 >= v91) {
                  break;
                }
                uint64_t v104 = *(void *)(v87 + 8 * v105);
                if (!v104)
                {
                  while (1)
                  {
                    unint64_t v92 = v105 + 1;
                    if (__OFADD__(v105, 1LL)) {
                      goto LABEL_167;
                    }
                    if (v92 >= v91) {
                      goto LABEL_4;
                    }
                    uint64_t v104 = *(void *)(v87 + 8 * v92);
                    ++v105;
                    if (v104) {
                      goto LABEL_149;
                    }
                  }
                }

                unint64_t v92 = v105;
              }
            }
          }
        }
      }

  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

      swift_bridgeObjectRelease();
      *(void *)(v123 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    __int128 v12 = v11 >> 1;
    __int128 v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v13 + 16) = v12;
    uint64_t v123 = v13;
    __int128 v131 = (char *)(v13 + 32);
  }

  __int128 v15 = 0LL;
  __int128 v16 = *a1;
  __int128 v121 = *a1 + 8;
  uint64_t v119 = v16 - 4;
  __int128 v14 = (char *)MEMORY[0x18961AFE8];
  uint64_t v142 = v16;
  uint64_t v125 = v9;
  while (1)
  {
    int64_t v18 = v15;
    uint64_t v19 = v15 + 1;
    __int128 v129 = v15;
    if (v15 + 1 >= v9)
    {
      uint64_t v39 = v124;
    }

    else
    {
      unint64_t v20 = v135;
      Unicode.Scalar.properties.getter();
      unint64_t v21 = v138;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      unint64_t v22 = *(void (**)(char *, uint64_t))(v133 + 8);
      uint64_t v23 = v137;
      v22(v20, v137);
      LODWORD(v130) = Unicode.CanonicalCombiningClass.rawValue.getter();
      unint64_t v24 = *(void (**)(char *, uint64_t))(v134 + 8);
      unint64_t v25 = v21;
      __int128 v26 = v140;
      v24(v25, v140);
      __int128 v27 = v136;
      Unicode.Scalar.properties.getter();
      __int128 v28 = v139;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      __int128 v127 = v22;
      v22(v27, v23);
      LODWORD(v128) = Unicode.CanonicalCombiningClass.rawValue.getter();
      __int128 v126 = v24;
      v24(v28, v26);
      uint64_t v19 = v18 + 2;
      if (v18 + 2 < v9)
      {
        unint64_t v122 = v14;
        __int128 v29 = v121 + 4 * v18;
        while (1)
        {
          uint64_t v143 = v130 < v128;
          __int128 v30 = v135;
          Unicode.Scalar.properties.getter();
          __int128 v31 = v138;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          unint64_t v32 = v137;
          unint64_t v33 = v127;
          v127(v30, v137);
          LOBYTE(v141) = Unicode.CanonicalCombiningClass.rawValue.getter();
          LODWORD(v141) = v141;
          __int128 v34 = v140;
          uint64_t v35 = v126;
          v126(v31, v140);
          uint64_t v36 = v136;
          Unicode.Scalar.properties.getter();
          uint64_t v37 = v139;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          v33(v36, v32);
          unint64_t v38 = Unicode.CanonicalCombiningClass.rawValue.getter();
          v35(v37, v34);
          v29 += 4LL;
          ++v19;
          __int128 v9 = v125;
          if (v125 == v19)
          {
            uint64_t v19 = v125;
            __int128 v14 = v122;
            goto LABEL_23;
          }
        }

        __int128 v14 = v122;
        __int128 v9 = v125;
LABEL_23:
        int64_t v18 = v129;
      }

      uint64_t v39 = v124;
      unint64_t v40 = v142;
      if (v130 < v128)
      {
        if (v19 < v18) {
          goto LABEL_135;
        }
        if (v18 < v19)
        {
          unint64_t v41 = v19 - 1;
          uint64_t v42 = v18;
          do
          {
            if (v42 != v41)
            {
              if (!v40) {
                goto LABEL_140;
              }
              unint64_t v43 = *(_DWORD *)(v40 + 4 * v42);
              *(_DWORD *)(v40 + 4 * v42) = *(_DWORD *)(v40 + 4 * v41);
              *(_DWORD *)(v40 + 4 * v41) = v43;
            }

            uint64_t v91 = ++v42 < v41--;
          }

          while (v91);
        }
      }
    }

    if (v19 < v9)
    {
      if (__OFSUB__(v19, v18)) {
        goto LABEL_133;
      }
      if (v19 - v18 < v39) {
        break;
      }
    }

    unint64_t v72 = TimeZoneCache.State.fixed(_:)(v134, v133);
    uint64_t v74 = v153;
    uint64_t result = swift_bridgeObjectRelease();
    if (v72) {
      goto LABEL_112;
    }
    goto LABEL_100;
  }

  __break(1u);
LABEL_112:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_113:
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease();
  v78._countAndFlagsBits = a1;
  v78._object = a2;
  String.append(_:)(v78);
  v79._object = (void *)0x80000001839D2220LL;
  v79._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v79);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

              uint64_t v57 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
              uint64_t v54 = ((-15LL << v57) - 1) & v54 | (v56 << v57);
              __int128 v9 = *(void *)(v55 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              uint64_t result = (uint64_t *)swift_unknownObjectRelease();
              uint64_t v55 = v9;
              if (!*(_BYTE *)(v9 + 18)) {
                goto LABEL_148;
              }
            }
          }

          uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
          uint64_t v54 = 0LL;
          __int128 v7 = v49;
          __int128 v9 = v51;
LABEL_148:
          uint64_t v74 = *(unsigned __int16 *)(v9 + 16);
          if (!*(_WORD *)(v9 + 16)) {
            goto LABEL_207;
          }
          uint64_t v75 = *(void *)(v9 + 24);
          __int128 v15 = __OFSUB__(v7, v75);
          uint64_t v76 = v7 - v75;
          if (v15) {
            goto LABEL_194;
          }
          if (v76 <= 0)
          {
            uint64_t v79 = 0LL;
          }

          else
          {
            if ((_DWORD)v74 == 1) {
              goto LABEL_209;
            }
            uint64_t v77 = *(void *)(v9 + 48);
            __int128 v7 = v76 - v77;
            if (__OFSUB__(v76, v77)) {
              goto LABEL_198;
            }
            if (v7 >= 1)
            {
              if ((_DWORD)v74 == 2) {
                goto LABEL_209;
              }
              uint64_t v78 = (void *)(v9 + 72);
              uint64_t v79 = 2LL;
              while (v74 != v79)
              {
                char v80 = v7 - *v78;
                if (__OFSUB__(v7, *v78)) {
                  goto LABEL_174;
                }
                if (v80 < 1) {
                  goto LABEL_163;
                }
                ++v79;
                v78 += 3;
                __int128 v7 = v80;
                if (v74 == v79) {
                  goto LABEL_209;
                }
              }

              goto LABEL_173;
            }

            __int128 v7 = v76;
            uint64_t v79 = 1LL;
          }

  __int128 v6 = v8;
  __int128 v7 = v9;
LABEL_124:
  result.value._object = (void *)v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

      unint64_t v97 = (4 * *(_BYTE *)(v96 + 18) + 8) & 0x3C;
      uint64_t v95 = ((-15LL << v97) - 1) & v95 | (v98 << v97);
      __int128 v15 = *(void *)(v96 + 24 + 24 * v98);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v96 = v15;
      if (!*(_BYTE *)(v15 + 18)) {
        goto LABEL_137;
      }
    }
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v4);
  uint64_t result = swift_unknownObjectRetain();
  uint64_t v95 = 0LL;
  __int128 v15 = v89;
LABEL_137:
  uint64_t v107 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
  {
    __int128 v108 = v94;
LABEL_157:
    if (v108) {
      goto LABEL_223;
    }
    goto LABEL_163;
  }

  __int128 v108 = v94 - 1;
  if (__OFSUB__(v94, 1LL)) {
    goto LABEL_227;
  }
  if (__OFADD__(v108, 1LL)) {
    goto LABEL_228;
  }
  if (v94 <= 0)
  {
    uint64_t v107 = 0LL;
LABEL_163:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v91 = v95 & 0xFFFFFFFFFFFFF0FFLL | (v107 << 8);
    goto LABEL_164;
  }

  if ((_DWORD)v107 == 1) {
    goto LABEL_157;
  }
  unint64_t v41 = __OFSUB__(v108, 1LL);
  __int128 v108 = v94 - 2;
  if (v41) {
    goto LABEL_229;
  }
  if (__OFADD__(v108, 1LL)) {
    goto LABEL_230;
  }
  if (v94 - 1 < 1)
  {
    uint64_t v107 = 1LL;
    goto LABEL_163;
  }

  if ((_DWORD)v107 == 2) {
    goto LABEL_157;
  }
  uint64_t v109 = 0LL;
  uint64_t v110 = v107 - 2;
  if (v108 >= v107 - 3) {
    uint64_t v111 = v107 - 3;
  }
  else {
    uint64_t v111 = v94 - 2;
  }
  if (v111 >= v94 + 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v111 = v94 + 0x7FFFFFFFFFFFFFFELL;
  }
  while (v110 > v111)
  {
    if (v94 + 0x7FFFFFFFFFFFFFFELL == v109) {
      goto LABEL_222;
    }
    if (v108 == v109)
    {
      uint64_t v107 = v94;
      goto LABEL_163;
    }

    if (v110 == ++v109)
    {
      v108 -= v109;
      goto LABEL_157;
    }
  }

uint64_t specialized static AttributedString.Guts.characterwiseIsEqual(_:to:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v3 = a1[2];
  __int128 v43 = a1[1];
  __int128 v44 = v3;
  __int128 v45 = a1[3];
  uint64_t v32 = BigString.startIndex.getter();
  uint64_t v33 = v4;
  uint64_t v34 = v5;
  uint64_t v35 = v6;
  uint64_t v36 = BigString.endIndex.getter();
  uint64_t v37 = v7;
  uint64_t v38 = v8;
  uint64_t v39 = v9;
  __int128 v10 = a2[2];
  __int128 v40 = a2[1];
  __int128 v41 = v10;
  __int128 v42 = a2[3];
  uint64_t v24 = BigString.startIndex.getter();
  uint64_t v25 = v11;
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  uint64_t v28 = BigString.endIndex.getter();
  uint64_t v29 = v14;
  uint64_t v30 = v15;
  uint64_t v31 = v16;
  uint64_t v17 = swift_retain();
  AttributedString.Runs.init(_:in:)(v17, v46);
  uint64_t v18 = swift_retain();
  AttributedString.Runs.init(_:in:)(v18, v48);
  v22[10] = v46[10];
  v22[11] = v46[11];
  uint64_t v23 = v47;
  v22[6] = v46[6];
  v22[7] = v46[7];
  v22[8] = v46[8];
  v22[9] = v46[9];
  v22[2] = v46[2];
  v22[3] = v46[3];
  v22[4] = v46[4];
  v22[5] = v46[5];
  v22[0] = v46[0];
  v22[1] = v46[1];
  v20[10] = v48[10];
  v20[11] = v48[11];
  uint64_t v21 = v49;
  v20[6] = v48[6];
  v20[7] = v48[7];
  v20[8] = v48[8];
  v20[9] = v48[9];
  v20[2] = v48[2];
  v20[3] = v48[3];
  v20[4] = v48[4];
  v20[5] = v48[5];
  v20[0] = v48[0];
  v20[1] = v48[1];
  LOBYTE(a2) = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)v22, v20);
  outlined release of AttributedString.Runs((uint64_t)v48);
  outlined release of AttributedString.Runs((uint64_t)v46);
  return a2 & 1;
}

uint64_t *specialized AttributedString.Guts.updateRun(at:within:with:)( uint64_t *result, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4 + 8;
  uint64_t v9 = a4[8];
  if (*result != a4[11])
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }

  uint64_t v13 = result;
  uint64_t v61 = *result;
  unint64_t v15 = result[1];
  uint64_t v14 = result[2];
  uint64_t v65 = result[4];
  unint64_t v60 = v15;
  if (v14)
  {
    uint64_t v16 = (void *)(v14 + 24 * ((v15 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v17 = v16[4];
    uint64_t v18 = v16[5];
    unint64_t v19 = v16[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v15, v9);
    uint64_t v17 = v20;
    unint64_t v21 = v15;
    uint64_t v18 = v22;
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    if (v61 != a4[11])
    {
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }

    unint64_t v58 = v13;
    uint64_t v23 = a4[8];
    swift_unknownObjectRetain();
    unint64_t v19 = specialized Rope._Node.subscript.getter(v21, v23);
    uint64_t v13 = v58;
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  uint64_t v24 = v65;
  uint64_t v25 = v65 + v19;
  if (__OFADD__(v65, v19)) {
    goto LABEL_81;
  }
  uint64_t v69 = v17;
  uint64_t v70 = v18;
  if (v65 >= a3) {
    uint64_t v24 = a3;
  }
  if (v65 >= a2) {
    uint64_t v26 = v24;
  }
  else {
    uint64_t v26 = a2;
  }
  if (v25 <= a2) {
    uint64_t v27 = a2;
  }
  else {
    uint64_t v27 = v65 + v19;
  }
  if (v25 <= a3) {
    a3 = v27;
  }
  if (v26 == a3)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }

  if (v26 != v65 || a3 != v25)
  {
    char v68 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = specialized _NativeSet.filter(_:)( v30,  (uint64_t)&v69,  a6,  (uint64_t)&v68,  a8,  v26,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a5 = v31;
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    if (v68 != 1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_bridgeObjectRelease();
    }

    if (__OFSUB__(a3, v26)) {
      goto LABEL_88;
    }
    uint64_t v32 = v69;
    uint64_t v33 = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v26, a3, a3 - v26, v32, v33);
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    uint64_t v34 = a4[8];
    if (v34) {
      uint64_t v35 = a4[10];
    }
    else {
      uint64_t v35 = 0LL;
    }
    if (v65 < 0 || v35 < v65) {
      goto LABEL_89;
    }
    uint64_t v36 = a4[9];
    uint64_t v37 = a4[11];
    unint64_t v59 = v13;
    if (!v34 || !*(_WORD *)(v34 + 16) || v65 >= a4[10])
    {
      unint64_t v49 = swift_unknownObjectRetain_n();
      unint64_t v50 = specialized Rope._endPath.getter(v49);
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      uint64_t v40 = 0LL;
      uint64_t v39 = 0LL;
      if (v34) {
        goto LABEL_56;
      }
      uint64_t v51 = 0LL;
LABEL_74:
      if (!__OFSUB__(v65, v39))
      {
        *unint64_t v59 = v37;
        v59[1] = v50;
        v59[2] = v40;
        v59[3] = v51;
        v59[4] = v65 - v39;
LABEL_76:
        swift_bridgeObjectRelease();
        return (uint64_t *)swift_bridgeObjectRelease();
      }

      goto LABEL_90;
    }

    uint64_t v38 = *(unsigned __int8 *)(v34 + 18);
    if (!*(_BYTE *)(v34 + 18))
    {
      uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
      uint64_t v39 = v65;
      uint64_t v40 = v34;
      uint64_t v52 = *(unsigned __int16 *)(v34 + 16);
      if (!*(_WORD *)(v34 + 16)) {
        goto LABEL_71;
      }
LABEL_60:
      uint64_t v53 = *(void *)(v40 + 24);
      BOOL v44 = __OFSUB__(v39, v53);
      uint64_t v54 = v39 - v53;
      if (v44) {
        goto LABEL_94;
      }
      if (__OFADD__(v54, 1LL))
      {
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }

      if (v54 + 1 <= 0)
      {
        uint64_t v52 = 0LL;
        goto LABEL_72;
      }

      if ((_DWORD)v52 == 1)
      {
        uint64_t v39 = v54;
        goto LABEL_71;
      }

      uint64_t v55 = (uint64_t *)(v40 + 48);
      uint64_t v56 = 1LL;
      while (1)
      {
        uint64_t v57 = *v55;
        v55 += 3;
        uint64_t v39 = v54 - v57;
        if (__OFSUB__(v54, v57)) {
          break;
        }
        if (__OFADD__(v39, 1LL)) {
          goto LABEL_92;
        }
        if (v39 + 1 < 1)
        {
          uint64_t v52 = v56;
          uint64_t v39 = v54;
          goto LABEL_72;
        }

        ++v56;
        uint64_t v54 = v39;
        if (v52 == v56) {
          goto LABEL_71;
        }
      }

{
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[4];
  char v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[3];
  __int128 v72;
  uint64_t v8 = a4 + 8;
  uint64_t v9 = a4[8];
  if (*result != a4[11])
  {
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }

  uint64_t v13 = result;
  uint64_t v61 = *result;
  unint64_t v15 = result[1];
  uint64_t v14 = result[2];
  uint64_t v65 = result[4];
  unint64_t v60 = v15;
  if (v14)
  {
    uint64_t v16 = (void *)(v14 + 24 * ((v15 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v17 = v16[4];
    uint64_t v18 = v16[5];
    unint64_t v19 = v16[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v15, v9);
    uint64_t v17 = v20;
    unint64_t v21 = v15;
    uint64_t v18 = v22;
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    if (v61 != a4[11])
    {
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }

    unint64_t v58 = v13;
    uint64_t v23 = a4[8];
    swift_unknownObjectRetain();
    unint64_t v19 = specialized Rope._Node.subscript.getter(v21, v23);
    uint64_t v13 = v58;
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  uint64_t v24 = __OFADD__(v65, v19);
  uint64_t v25 = v65 + v19;
  if (v24) {
    goto LABEL_82;
  }
  uint64_t v69 = v17;
  uint64_t v70 = v18;
  if (v65 >= a3) {
    uint64_t v26 = a3;
  }
  else {
    uint64_t v26 = v65;
  }
  if (v65 >= a2) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = a2;
  }
  if (v25 <= a2) {
    uint64_t v28 = a2;
  }
  else {
    uint64_t v28 = v25;
  }
  if (v25 <= a3) {
    a3 = v28;
  }
  if (v27 == a3)
  {
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }

  if (v27 != v65 || a3 != v25)
  {
    char v68 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v32 = specialized _NativeSet.filter(_:)( v31,  (uint64_t)&v69,  a6,  (uint64_t)&v68,  a8,  a3,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a5 = v32;
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    if (v68 != 1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_bridgeObjectRelease();
    }

    if (__OFSUB__(a3, v27)) {
      goto LABEL_89;
    }
    uint64_t v33 = v69;
    uint64_t v34 = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v27, a3, a3 - v27, v33, v34);
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    uint64_t v35 = a4[8];
    if (v35) {
      uint64_t v36 = a4[10];
    }
    else {
      uint64_t v36 = 0LL;
    }
    if (v65 < 0 || v36 < v65) {
      goto LABEL_90;
    }
    uint64_t v37 = a4[9];
    uint64_t v38 = a4[11];
    unint64_t v59 = v13;
    if (!v35 || !*(_WORD *)(v35 + 16) || v65 >= a4[10])
    {
      unint64_t v49 = swift_unknownObjectRetain_n();
      unint64_t v50 = specialized Rope._endPath.getter(v49);
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      char v41 = 0LL;
      uint64_t v40 = 0LL;
      if (v35) {
        goto LABEL_57;
      }
      uint64_t v51 = 0LL;
LABEL_75:
      if (!__OFSUB__(v65, v40))
      {
        *unint64_t v59 = v38;
        v59[1] = v50;
        v59[2] = v41;
        v59[3] = v51;
        v59[4] = v65 - v40;
LABEL_77:
        swift_bridgeObjectRelease();
        return (uint64_t *)swift_bridgeObjectRelease();
      }

      goto LABEL_91;
    }

    uint64_t v39 = *(unsigned __int8 *)(v35 + 18);
    if (!*(_BYTE *)(v35 + 18))
    {
      uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
      uint64_t v40 = v65;
      char v41 = v35;
      uint64_t v52 = *(unsigned __int16 *)(v35 + 16);
      if (!*(_WORD *)(v35 + 16)) {
        goto LABEL_72;
      }
LABEL_61:
      uint64_t v53 = *(void *)(v41 + 24);
      uint64_t v24 = __OFSUB__(v40, v53);
      uint64_t v54 = v40 - v53;
      if (v24) {
        goto LABEL_95;
      }
      if (__OFADD__(v54, 1LL))
      {
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }

      if (v54 + 1 <= 0)
      {
        uint64_t v52 = 0LL;
        goto LABEL_73;
      }

      if ((_DWORD)v52 == 1)
      {
        uint64_t v40 = v54;
        goto LABEL_72;
      }

      uint64_t v55 = (uint64_t *)(v41 + 48);
      uint64_t v56 = 1LL;
      while (1)
      {
        uint64_t v57 = *v55;
        v55 += 3;
        uint64_t v40 = v54 - v57;
        if (__OFSUB__(v54, v57)) {
          break;
        }
        if (__OFADD__(v40, 1LL)) {
          goto LABEL_93;
        }
        if (v40 + 1 < 1)
        {
          uint64_t v52 = v56;
          uint64_t v40 = v54;
          goto LABEL_73;
        }

        ++v56;
        uint64_t v54 = v40;
        if (v52 == v56) {
          goto LABEL_72;
        }
      }

LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }

    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v39 = v65;
    uint64_t v40 = v34;
    while (1)
    {
      uint64_t v42 = *(unsigned __int16 *)(v40 + 16);
      if (!*(_WORD *)(v40 + 16)) {
        goto LABEL_38;
      }
      uint64_t v43 = *(void *)(v40 + 40);
      BOOL v44 = __OFSUB__(v39, v43);
      uint64_t v45 = v39 - v43;
      if (v44) {
        goto LABEL_84;
      }
      if (__OFADD__(v45, 1LL)) {
        goto LABEL_85;
      }
      if (v45 + 1 > 0) {
        break;
      }
      uint64_t v42 = 0LL;
LABEL_39:
      char v41 = (4 * *(_BYTE *)(v40 + 18) + 8) & 0x3C;
      uint64_t v38 = ((-15LL << v41) - 1) & v38 | (v42 << v41);
      uint64_t v40 = *(void *)(v40 + 24 + 24 * v42);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      if (!*(_BYTE *)(v40 + 18))
      {
        v38 &= 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v52 = *(unsigned __int16 *)(v40 + 16);
        if (*(_WORD *)(v40 + 16)) {
          goto LABEL_60;
        }
LABEL_71:
        if (!v39)
        {
LABEL_72:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v50 = v38 | (v52 << 8);
LABEL_56:
          swift_unknownObjectRetain();
          uint64_t v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v37, v50, v40, v34, v36);
          uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
          goto LABEL_74;
        }

  __break(1u);
  return result;
}

          swift_bridgeObjectRetain();
          uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_68:
          if (v59 < v48)
          {
            if (*v57 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v55) {
                goto LABEL_71;
              }
            }

            else if (*(void *)((*v57 & 0xFFFFFFFFFFFFF8LL) + 0x10))
            {
LABEL_71:
              a5 = specialized RangeReplaceableCollection<>.popLast()();
              outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v15);
              return a5;
            }

            __break(1u);
            JUMPOUT(0x18300B888LL);
          }

        swift_bridgeObjectRetain();
        uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v84) {
          goto LABEL_66;
        }
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
      v32[18] = v47;
      swift_retain();
      swift_release();
      v32[19] = v48;
      swift_release();
      swift_release();
      char v80 = v32[2];
      if (!(v80 >> 62))
      {
        unint64_t v81 = *(void *)((v80 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        goto LABEL_70;
      }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_95:
  uint64_t v87 = *(_OWORD *)(v18 + 32);
  uint64_t v182 = *(_OWORD *)(v18 + 16);
  unint64_t v183 = v87;
  unint64_t v184 = *(_OWORD *)(v18 + 48);
  uint64_t result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v19, v160)) {
    goto LABEL_182;
  }
  unint64_t v88 = (__int128 *)(v18 + 16);
  unint64_t v90 = v163;
  uint64_t v89 = v164;
  uint64_t v91 = v165;
  unint64_t v92 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v94 = v93;
  unint64_t v96 = v95;
  uint64_t v98 = v97;
  uint64_t result = (unint64_t *)outlined release of Locale((uint64_t)v204);
  if (v158 >= v92 >> 10) {
    unint64_t v99 = v159;
  }
  else {
    unint64_t v99 = v92;
  }
  if (v158 >= v92 >> 10) {
    unint64_t v100 = v157;
  }
  else {
    unint64_t v100 = v94;
  }
  __int128 v101 = v99;
  if (v158 >= v92 >> 10) {
    unint64_t v102 = v156;
  }
  else {
    unint64_t v102 = v96;
  }
  if (v158 >= v92 >> 10) {
    uint64_t v103 = v155;
  }
  else {
    uint64_t v103 = v98;
  }
  uint64_t v104 = *v88;
  uint64_t v105 = v88[1];
  v214[2] = v88[2];
  v214[1] = v105;
  v214[0] = v104;
  if (v162 < v99 >> 10) {
    goto LABEL_183;
  }
  *(void *)&unint64_t v199 = v99;
  *((void *)&v199 + 1) = v100;
  *(void *)&uint64_t v200 = v102;
  *((void *)&v200 + 1) = v103;
  *(void *)&unint64_t v201 = v89;
  *((void *)&v201 + 1) = v90;
  *(void *)&unint64_t v202 = v170;
  *((void *)&v202 + 1) = v91;
  uint64_t v106 = *(void *)(v45 + 16);
  uint64_t v181 = v103;
  uint64_t v107 = v102;
  __int128 v108 = v100;
  if (!v106 || v99 >> 10 == v162) {
    goto LABEL_127;
  }
  uint64_t v180 = (uint64_t *)v99;
  outlined retain of Locale((uint64_t)v214);
  swift_bridgeObjectRetain();
  uint64_t v109 = 40LL;
  uint64_t v110 = v106;
  while (*(void *)(v45 + v109))
  {
    swift_bridgeObjectRelease();
    v109 += 16LL;
    if (!--v110)
    {
      swift_bridgeObjectRelease();
LABEL_121:
      uint64_t v113 = v163;
      __int128 v121 = v164;
      uint64_t v114 = v170;
      __int128 v101 = (uint64_t)v180;
      unint64_t v122 = v181;
      goto LABEL_122;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v111 = BigString.startIndex.getter();
  uint64_t v112 = v162;
  if (v162 <= v111 >> 10)
  {
    uint64_t v45 = v167;
    goto LABEL_121;
  }

  BigString.utf8.getter();
  uint64_t v113 = v163;
  uint64_t v114 = v170;
  char v115 = v165;
  __int128 v116 = BigString.UTF8View.index(before:)();
  unint64_t v178 = v118;
  unint64_t v179 = v117;
  uint64_t v177 = v119;
  outlined release of Locale((uint64_t)v205);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  uint64_t result = (unint64_t *)outlined release of Locale((uint64_t)v206);
  if (v112 < v116 >> 10) {
    goto LABEL_195;
  }
  *(void *)&uint64_t v194 = v116;
  *((void *)&v194 + 1) = v179;
  *(void *)&uint64_t v195 = v178;
  *((void *)&v195 + 1) = v177;
  unint64_t v120 = v164;
  *(void *)&uint64_t v196 = v164;
  *((void *)&v196 + 1) = v113;
  *(void *)&unint64_t v197 = v114;
  *((void *)&v197 + 1) = v115;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1LL, &v194, &v188);
  uint64_t result = (unint64_t *)outlined release of Locale((uint64_t)&v209);
  uint64_t v45 = v167;
  __int128 v121 = v120;
  __int128 v101 = (uint64_t)v180;
  unint64_t v122 = v181;
  if (v191 != 2)
  {
    __int128 v101 = v188;
    if (v162 < v188 >> 10) {
      goto LABEL_197;
    }
    __int128 v108 = v189;
    uint64_t v107 = v190;
    unint64_t v122 = v191;
  }

  __break(1u);
LABEL_92:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

      LODWORD(v44) = -1;
      if ((v58 & 1) != 0) {
        goto LABEL_96;
      }
      goto LABEL_94;
    }

    if (HIDWORD(v44))
    {
      unint64_t v15 = v184;
      LODWORD(v44) = -1;
      if ((v58 & 1) != 0) {
        goto LABEL_96;
      }
      goto LABEL_94;
    }

            uint64_t v54 = 512LL;
LABEL_98:
            swift_retain_n();
            unint64_t v138 = v11;
            swift_retain_n();
            uint64_t v139 = v138;
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
              goto LABEL_209;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            unint64_t v140 = (int)POSIXErrorCode.rawValue.getter();
            unint64_t v141 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            uint64_t v142 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            int64_t v136 = objc_msgSend(v141, sel_initWithDomain_code_userInfo_, v142, v140, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v143 = objc_msgSend(v136, sel_domain);
            __int128 v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
            uint64_t v146 = v145;

            if (v144 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v146 == v147)
            {
              swift_bridgeObjectRelease_n();
LABEL_103:
              uint64_t v14 = v274;
LABEL_104:
              uint64_t v149 = v275;
              swift_retain();
              swift_retain();
              uint64_t v150 = _foundation_swift_url_feature_enabled();
              v273 = v54;
              if (!v150)
              {
                unint64_t v161 = objc_msgSend(v149, sel__parameterString);
                if (v161)
                {
                  uint64_t v162 = v161;
                  uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
                  uint64_t v165 = v164;

                  if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                    && (uint64_t v166 = objc_msgSend(v149, sel_path)) != 0)
                  {
                    uint64_t v167 = v166;
                    uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
                    uint64_t v170 = v169;

                    v285._countAndFlagsBits = (uint64_t)v168;
                    v285._object = v170;
                    swift_bridgeObjectRetain();
                    v171._countAndFlagsBits = 59LL;
                    v171._object = (void *)0xE100000000000000LL;
                    String.append(_:)(v171);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRetain();
                    v172._countAndFlagsBits = (uint64_t)v163;
                    v172._object = v165;
                    String.append(_:)(v172);
                    swift_bridgeObjectRelease();
                  }

                  else
                  {
                    v285._countAndFlagsBits = 59LL;
                    v285._object = (void *)0xE100000000000000LL;
                    v173._countAndFlagsBits = (uint64_t)v163;
                    v173._object = v165;
                    String.append(_:)(v173);
                  }

                  swift_bridgeObjectRelease();
                  uint64_t v175 = (uint64_t)v274;
                  uint64_t v174 = v275;
                  outlined consume of PathOrURL(v275, v13, (uint64_t)v274, 1);
                }

                else
                {
                  unint64_t v176 = objc_msgSend(v149, sel_path);
                  if (v176)
                  {
                    uint64_t v177 = v176;
                    static String._unconditionallyBridgeFromObjectiveC(_:)(v176);
                    uint64_t v175 = (uint64_t)v14;

                    uint64_t v174 = v275;
                    outlined consume of PathOrURL(v275, v13, (uint64_t)v14, 1);
                  }

                  else
                  {
                    uint64_t v174 = v275;
                    outlined consume of PathOrURL(v275, v13, (uint64_t)v14, 1);
                    uint64_t v175 = (uint64_t)v14;
                  }
                }

                goto LABEL_127;
              }

              v285._countAndFlagsBits = (uint64_t)v149;
              v285._object = (void *)v13;
              *(void *)&v286 = v14;
              uint64_t v151 = v149;
              v270 = v13;
              swift_retain();
              swift_retain();
              uint64_t v152 = URL.path(percentEncoded:)(1);
              v285 = v152;
              swift_bridgeObjectRetain();
              if (String.count.getter() > 1
                && (specialized BidirectionalCollection.last.getter( v152._countAndFlagsBits,  (unint64_t)v152._object) & 0x1FF) == 0x2F)
              {
                specialized RangeReplaceableCollection<>.popLast()();
                swift_bridgeObjectRelease();
              }

              v349._countAndFlagsBits = Set.init(minimumCapacity:)();
              uint64_t v153 = specialized Set._Variant.insert(_:)(&v276, 0x2FuLL);
              uint64_t v154 = v349._countAndFlagsBits;
              uint64_t v155 = v285;
              int64_t v156 = ((unint64_t)v285._object >> 56) & 0xF;
              if (v156)
              {
                v349 = v285;
                MEMORY[0x1895F8858](v153);
                __int128 v262 = (uint64_t)&v349;
                __int128 v263 = v154;
                swift_bridgeObjectRetain();
                specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v261,  v155._countAndFlagsBits,  (unint64_t)v155._object);
                if (v157 == 1)
                {
                  unint64_t v158 = v349;
                  swift_bridgeObjectRetain();
                  specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v158._countAndFlagsBits,  (unint64_t)v158._object,  v154);
                  unint64_t v160 = v159;
                  swift_bridgeObjectRelease();
                }

                else
                {
                  unint64_t v160 = v157;
                }

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v13 = v270;
                if (!v160)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v181 = (uint64_t)v274;
                  uint64_t v180 = v275;
                  outlined consume of PathOrURL(v275, v13, (uint64_t)v274, 1);
                  outlined consume of PathOrURL(v180, v13, v181, 1);
                  goto LABEL_126;
                }
              }

              else
              {
                swift_bridgeObjectRelease();
                uint64_t v13 = v270;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v179 = (uint64_t)v274;
              unint64_t v178 = v275;
              outlined consume of PathOrURL(v275, v13, (uint64_t)v274, 1);
              outlined consume of PathOrURL(v178, v13, v179, 1);
LABEL_126:
              uint64_t v175 = (uint64_t)v274;
              uint64_t v174 = v275;
LABEL_127:
              uint64_t v182 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              unint64_t v183 = v149;
              outlined consume of PathOrURL(v174, v13, v175, 1);
              if (v136)
              {
                v285._countAndFlagsBits = (uint64_t)v136;
                lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
                int64_t v136 = v136;
                if (_getErrorEmbeddedNSError<A>(_:)())
                {
                }

                else
                {
                  swift_allocError();
                  *uint64_t v186 = v136;
                }

                uint64_t v185 = v273;
                unint64_t v184 = (void *)_swift_stdlib_bridgeErrorToNSError();
              }

              else
              {
                unint64_t v184 = 0LL;
                uint64_t v185 = v273;
              }

               objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v185,  v182,  v183,  v184,  0,  0,  0);

              swift_unknownObjectRelease();
              outlined consume of PathOrURL(v275, v13, (uint64_t)v274, 1);
              swift_willThrow();
              return swift_bridgeObjectRelease();
            }

            uint64_t v148 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v148 & 1) != 0) {
              goto LABEL_103;
            }
            break;
        }

        goto LABEL_204;
      }

      uint64_t v113 = 4LL;
      switch(v53)
      {
        case 1:
        case 13:
          uint64_t v113 = 513LL;
          goto LABEL_137;
        case 2:
          goto LABEL_137;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_92;
        case 17:
          uint64_t v113 = 516LL;
          goto LABEL_137;
        case 28:
        case 69:
          uint64_t v113 = 640LL;
          goto LABEL_137;
        case 30:
          uint64_t v113 = 642LL;
          goto LABEL_137;
        case 63:
          uint64_t v113 = 514LL;
          goto LABEL_137;
        default:
          if (v53 == 102)
          {
            unint64_t v137 = 0LL;
            uint64_t v113 = 512LL;
LABEL_143:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v113,  (uint64_t)v11,  v13,  v137,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v351,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
            swift_willThrow();
            return swift_bridgeObjectRelease();
          }

        if (v9) {
          goto LABEL_323;
        }
LABEL_92:
        unint64_t v58 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
        uint64_t v53 = ((-15LL << v58) - 1) & v53 | (v59 << v58);
        uint64_t v26 = *(void *)(v57 + 24 + 24 * v59);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v57 = v26;
        if (!*(_BYTE *)(v26 + 18)) {
          goto LABEL_107;
        }
      }
    }

    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v9 = 0LL;
    uint64_t v53 = 0LL;
    uint64_t v26 = v49;
LABEL_107:
    unint64_t v64 = *(unsigned __int16 *)(v26 + 16);
    if (*(_WORD *)(v26 + 16))
    {
      uint64_t v65 = *(void *)(v26 + 24);
      uint64_t v32 = __OFSUB__(v9, v65);
      uint64_t v66 = v9 - v65;
      if (v32) {
        goto LABEL_361;
      }
      if (__OFADD__(v66, 1LL))
      {
LABEL_362:
        __break(1u);
LABEL_363:
        __break(1u);
LABEL_364:
        __break(1u);
        goto LABEL_365;
      }

      if (v66 + 1 < 1)
      {
        unint64_t v64 = 0LL;
LABEL_120:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v55 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v64 << 8);
        goto LABEL_121;
      }

      if ((_DWORD)v64 != 1)
      {
        uint64_t v67 = (uint64_t *)(v26 + 48);
        char v68 = 1LL;
        while (1)
        {
          uint64_t v69 = *v67;
          v67 += 3;
          uint64_t v9 = v66 - v69;
          if (__OFSUB__(v66, v69)) {
            goto LABEL_340;
          }
          if (__OFADD__(v9, 1LL)) {
            goto LABEL_341;
          }
          if (v9 + 1 < 1) {
            break;
          }
          ++v68;
          uint64_t v66 = v9;
          if (v64 == v68) {
            goto LABEL_119;
          }
        }

        unint64_t v64 = v68;
        uint64_t v9 = v66;
        goto LABEL_120;
      }

      uint64_t v9 = v66;
    }

            swift_bridgeObjectRetain();
            unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
            if ((v47 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(a1 + 56) + 72 * v46,  (uint64_t)&v56);
            }

            else
            {
              unint64_t v60 = 0LL;
              unint64_t v58 = 0u;
              unint64_t v59 = 0u;
              uint64_t v56 = 0u;
              uint64_t v57 = 0u;
            }

            swift_bridgeObjectRelease();
LABEL_97:
            specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v56, v41, v40);
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v48 = 1;
            if (!v31) {
              goto LABEL_59;
            }
LABEL_58:
            uint64_t v34 = __clz(__rbit64(v31));
            v31 &= v31 - 1;
          }

          if (v5) {
            goto LABEL_88;
          }
          swift_bridgeObjectRelease_n();
          outlined consume of AttributedString.AttributeRunBoundaries?(v33, 0LL);
LABEL_90:
          if (!*(void *)(a1 + 16)) {
            goto LABEL_96;
          }
          goto LABEL_91;
        }

        uint64_t v38 = v36 + 4;
        if (v38 < v51)
        {
          uint64_t v37 = *(void *)(v28 + 8 * v38);
          if (!v37)
          {
            while (1)
            {
              uint64_t v32 = v38 + 1;
              if (__OFADD__(v38, 1LL)) {
                goto LABEL_103;
              }
              if (v32 >= v51) {
                goto LABEL_99;
              }
              uint64_t v37 = *(void *)(v28 + 8 * v32);
              ++v38;
              if (v37) {
                goto LABEL_74;
              }
            }
          }

          uint64_t v32 = v38;
          goto LABEL_74;
        }
      }

        uint64_t v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v13 + 16) + 1LL,  1,  (void *)v13);
        *((void *)v11 + 2) = v13;
        goto LABEL_56;
      }

      __break(1u);
LABEL_69:
      uint64_t v94 = xmmword_18372EE30;
LABEL_70:
      __swift_project_boxed_opaque_existential_1(v95, (uint64_t)v96);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
      {
LABEL_73:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
        swift_release();
        unint64_t v21 = (unint64_t *)v94;
        *((void *)v11 + 20) = v91;
        swift_retain();
        swift_release();
        unint64_t v19 = *((void *)v11 + 2);
        if (!*(void *)(v19 + 16)) {
          goto LABEL_102;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_103;
        }
        char v80 = *(void *)(v19 + 16);
        if (!v80) {
          goto LABEL_104;
        }
        goto LABEL_76;
      }

      while (1)
      {
        unint64_t v19 = v97;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v95, (uint64_t)v96);
        uint64_t v79 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        if (v10) {
          break;
        }
        LOBYTE(v92) = v79;
        Data._Representation.append(contentsOf:)();
        __swift_project_boxed_opaque_existential_1(v95, (uint64_t)v96);
        if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0) {
          goto LABEL_73;
        }
      }

            __break(1u);
            goto LABEL_92;
          }

          uint64_t v20 = (char *)v127;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
          v50[20] = v95;
          swift_retain();
          swift_release();
          __int128 v108 = v50[2];
          if (!*(void *)(v108 + 16)) {
            goto LABEL_95;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_96;
          }
          __int128 v129 = *(void *)(v108 + 16);
          if (!v129) {
            goto LABEL_97;
          }
LABEL_63:
          *(void *)(v108 + 16) = v129 - 1;
          v50[2] = v108;
          swift_release();
          outlined consume of JSONEncoder.KeyEncodingStrategy(v71);
          swift_release();
          return v20;
        }

LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
    }

    if ((_DWORD)v42 != 1)
    {
      unint64_t v46 = (uint64_t *)(v40 + 64);
      uint64_t v47 = 1LL;
      while (1)
      {
        uint64_t v48 = *v46;
        v46 += 3;
        uint64_t v39 = v45 - v48;
        if (__OFSUB__(v45, v48)) {
          break;
        }
        if (__OFADD__(v39, 1LL)) {
          goto LABEL_79;
        }
        if (v39 + 1 < 1)
        {
          uint64_t v42 = v47;
          uint64_t v39 = v45;
          goto LABEL_39;
        }

        ++v47;
        uint64_t v45 = v39;
        if (v42 == v47) {
          goto LABEL_38;
        }
      }

      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }

    uint64_t v39 = v45;
LABEL_38:
    if (v39) {
      goto LABEL_83;
    }
    goto LABEL_39;
  }

  if (v61 != a4[11])
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }

  if (!*v8)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }

  specialized Rope._Node._prepareModify(at:)(v60, (uint64_t)v71);
  __int128 v72 = v71[1];
  v67[0] = v71[0];
  v67[2] = v71[2];
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72);
  uint64_t result = (uint64_t *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72 + 8);
  v67[1] = MEMORY[0x18961AFF0];
  a4[11] = v61 + 1;
  *uint64_t v13 = v61 + 1;
  if (a4[8])
  {
    v13[2] = (uint64_t)specialized Rope._Node._finalizeModify(_:)(&v66, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v68 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v29 = specialized _NativeSet.filter(_:)( v28,  (uint64_t)&v69,  a6,  (uint64_t)&v68,  a8,  v65,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a5 = v29;
    swift_bridgeObjectRelease();
    if (v68 == 1) {
      specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(v13, v8, &v69);
    }
    else {
      specialized Rope.update<A>(at:by:)(v13, v8, &v69);
    }
    goto LABEL_76;
  }

      __break(1u);
LABEL_94:
      __break(1u);
      return result;
    }

    goto LABEL_84;
  }

  uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))a5)(&v55, v22, a3);
  if (__OFSUB__(a3, v22))
  {
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }

  uint64_t v25 = v55;
  uint64_t v24 = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v22, a3, a3 - v22, v25, v24);
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  uint64_t v26 = v51[8];
  if (v26) {
    uint64_t v27 = v51[10];
  }
  else {
    uint64_t v27 = 0LL;
  }
  uint64_t v28 = v52;
  if (v52 < 0 || v27 < v52) {
    goto LABEL_86;
  }
  uint64_t v29 = v51[9];
  uint64_t v30 = v51[11];
  if (!v26 || !*(_WORD *)(v26 + 16) || v52 >= v51[10])
  {
    char v41 = swift_unknownObjectRetain_n();
    uint64_t v42 = specialized Rope._endPath.getter(v41);
    swift_unknownObjectRelease();
    uint64_t v33 = 0LL;
    uint64_t v32 = 0LL;
    if (!v26) {
      goto LABEL_72;
    }
    goto LABEL_53;
  }

  uint64_t v51 = (void *)v51[9];
  uint64_t v31 = *(unsigned __int8 *)(v26 + 18);
  if (!*(_BYTE *)(v26 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v32 = v52;
    uint64_t v33 = v26;
    uint64_t v45 = *(unsigned __int16 *)(v26 + 16);
    if (!*(_WORD *)(v26 + 16)) {
      goto LABEL_70;
    }
    goto LABEL_59;
  }

  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v32 = v52;
  uint64_t v33 = v26;
  while (2)
  {
    uint64_t v35 = *(unsigned __int16 *)(v33 + 16);
    if (!*(_WORD *)(v33 + 16)) {
      goto LABEL_37;
    }
    uint64_t v36 = *(void *)(v33 + 40);
    unint64_t v19 = __OFSUB__(v32, v36);
    uint64_t v37 = v32 - v36;
    if (v19) {
      goto LABEL_79;
    }
    if (__OFADD__(v37, 1LL)) {
      goto LABEL_80;
    }
    if (v37 + 1 <= 0)
    {
      uint64_t v35 = 0LL;
      goto LABEL_38;
    }

    if ((_DWORD)v35 == 1)
    {
      uint64_t v32 = v37;
LABEL_37:
      if (!v32) {
        goto LABEL_38;
      }
      goto LABEL_78;
    }

    uint64_t v38 = (uint64_t *)(v33 + 64);
    uint64_t v39 = 1LL;
    while (1)
    {
      uint64_t v40 = *v38;
      v38 += 3;
      uint64_t v32 = v37 - v40;
      if (__OFSUB__(v37, v40))
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }

      if (__OFADD__(v32, 1LL)) {
        goto LABEL_77;
      }
      if (v32 + 1 < 1) {
        break;
      }
      ++v39;
      uint64_t v37 = v32;
      if (v35 == v39) {
        goto LABEL_37;
      }
    }

    uint64_t v35 = v39;
    uint64_t v32 = v37;
LABEL_38:
    uint64_t v34 = (4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C;
    uint64_t v31 = ((-15LL << v34) - 1) & v31 | (v35 << v34);
    uint64_t v33 = *(void *)(v33 + 24 + 24 * v35);
    swift_unknownObjectRetain();
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    if (*(_BYTE *)(v33 + 18)) {
      continue;
    }
    break;
  }

  v31 &= 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v45 = *(unsigned __int16 *)(v33 + 16);
  if (*(_WORD *)(v33 + 16))
  {
LABEL_59:
    unint64_t v46 = *(void *)(v33 + 24);
    unint64_t v19 = __OFSUB__(v32, v46);
    BOOL v44 = v32 - v46;
    if (v19)
    {
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }

    if (__OFADD__(v44, 1LL))
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }

    if (v44 + 1 <= 0)
    {
      uint64_t v45 = 0LL;
      goto LABEL_71;
    }

    if ((_DWORD)v45 == 1)
    {
      uint64_t v32 = v44;
      goto LABEL_70;
    }

    uint64_t v47 = (uint64_t *)(v33 + 48);
    for (uint64_t i = 1LL; i != v45; ++i)
    {
      uint64_t v48 = *v47;
      v47 += 3;
      uint64_t v32 = v44 - v48;
      if (__OFSUB__(v44, v48)) {
        goto LABEL_87;
      }
      if (__OFADD__(v32, 1LL)) {
        goto LABEL_88;
      }
      if (v32 + 1 < 1) {
        goto LABEL_75;
      }
      BOOL v44 = v32;
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v85) {
    goto LABEL_94;
  }
LABEL_48:
  specialized RangeReplaceableCollection<>.popLast()();
  swift_release();
LABEL_49:
  swift_willThrow();
  return v27;
}

    unint64_t v199 = 0LL;
    uint64_t v200 = 0LL;
LABEL_94:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    return v50;
  }

  if (v48)
  {
    uint64_t v52 = __CocoaDictionary.makeIterator()();
    uint64_t v175 = 0LL;
    uint64_t v53 = 0LL;
    uint64_t v54 = 0LL;
    uint64_t v55 = v52 | 0x8000000000000000LL;
  }

  else
  {
    unint64_t v60 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v53 = ~v60;
    uint64_t v61 = *(void *)(a1 + 64);
    uint64_t v175 = (char *)(a1 + 64);
    unint64_t v62 = -v60;
    if (v62 < 64) {
      __int128 v63 = ~(-1LL << v62);
    }
    else {
      __int128 v63 = -1LL;
    }
    uint64_t v54 = v63 & v61;
    uint64_t v55 = a1;
  }

  unint64_t v64 = v185;
  uint64_t v173 = (char *)(v55 & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v172 = (char *)v53;
  uint64_t v174 = (char *)((unint64_t)(v53 + 64) >> 6);
  uint64_t v65 = v50 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  uint64_t v67 = 0LL;
  unint64_t v176 = (char *)(MEMORY[0x18961AFB8] + 8LL);
  char v68 = v195;
  for (i = (char *)v55; ; uint64_t v55 = (unint64_t)i)
  {
    uint64_t v186 = (char *)v54;
    if ((v55 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v71 = v67;
    __int128 v72 = __CocoaDictionary.Iterator.next()();
    if (!v72) {
      goto LABEL_92;
    }
    uint64_t v74 = v73;
    unint64_t v198 = v72;
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    swift_dynamicCast();
    uint64_t v200 = v74;
    uint64_t v75 = v199;
    uint64_t v191 = v186;
    uint64_t v192 = v71;
LABEL_40:
    unint64_t v198 = (uint64_t)v75;
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    BOOL v83 = v75;
    uint64_t v84 = v184;
    uint64_t v85 = swift_dynamicCast();
    uint64_t v86 = v196;
    uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v196 + 56);
    if (!v85)
    {
      v87(v84, 1LL, 1LL, a2);
      swift_unknownObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v84, v170);
LABEL_53:
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      goto LABEL_91;
    }

    v87(v84, 0LL, 1LL, a2);
    unint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 32);
    v88(v64, v84, a2);
    unint64_t v198 = v74;

    uint64_t v89 = v183;
    unint64_t v90 = a2;
    uint64_t v91 = v197;
    unint64_t v92 = swift_dynamicCast();
    unint64_t v93 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v68[7];
    if ((v92 & 1) == 0)
    {
      v93(v89, 1LL, 1LL, v91);
      (*(void (**)(char *, uint64_t))(v196 + 8))(v64, v90);
      (*(void (**)(char *, uint64_t))(v167 + 8))(v89, v168);
      goto LABEL_53;
    }

    v93(v89, 0LL, 1LL, v91);
    uint64_t v94 = (void (*)(char *, char *, uint64_t))v68[4];
    uint64_t v95 = v179;
    v94(v179, v89, v91);
    unint64_t v96 = v181;
    unint64_t v97 = &v181[*(int *)(TupleTypeMetadata2 + 48)];
    v88(v181, (uint64_t)v64, v90);
    v94(v97, v95, v91);
    uint64_t v98 = v187;
    unint64_t v99 = v180;
    unint64_t v100 = &v180[*(int *)(v187 + 48)];
    v88(v180, (uint64_t)v96, v90);
    v94(v100, v97, v91);
    __int128 v101 = &v99[*(int *)(v98 + 48)];
    unint64_t v102 = v177;
    v88(v177, (uint64_t)v99, v90);
    uint64_t v103 = v178;
    v94(v178, v101, v91);
    v88(v193, (uint64_t)v102, v90);
    v94(v194, v103, v91);
    unint64_t v50 = (uint64_t)v190;
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v104 = -1LL << *(_BYTE *)(v50 + 32);
    uint64_t v105 = result & ~v104;
    uint64_t v106 = v105 >> 6;
    a2 = v90;
    if (((-1LL << v105) & ~*(void *)(v65 + 8 * (v105 >> 6))) != 0)
    {
      uint64_t v69 = __clz(__rbit64((-1LL << v105) & ~*(void *)(v65 + 8 * (v105 >> 6)))) | v105 & 0x7FFFFFFFFFFFFFC0LL;
      char v68 = v195;
      unint64_t v64 = v185;
    }

    else
    {
      uint64_t v107 = 0;
      __int128 v108 = (unint64_t)(63 - v104) >> 6;
      char v68 = v195;
      unint64_t v64 = v185;
      do
      {
        if (++v106 == v108 && (v107 & 1) != 0)
        {
          __break(1u);
          goto LABEL_96;
        }

        uint64_t v109 = v106 == v108;
        if (v106 == v108) {
          uint64_t v106 = 0LL;
        }
        v107 |= v109;
        uint64_t v110 = *(void *)(v65 + 8 * v106);
      }

      while (v110 == -1);
      uint64_t v69 = __clz(__rbit64(~v110)) + (v106 << 6);
    }

    *(void *)(v65 + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v69;
    v88((char *)(*(void *)(v50 + 48) + *(void *)(v196 + 72) * v69), (uint64_t)v193, v90);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v94)( *(void *)(v50 + 56) + v68[9] * v69,  v194,  v197);
    ++*(void *)(v50 + 16);
    uint64_t v54 = (unint64_t)v191;
    uint64_t v67 = v192;
  }

  if (v54)
  {
    uint64_t v191 = (char *)((v54 - 1) & v54);
    uint64_t v192 = v67;
    uint64_t v70 = __clz(__rbit64(v54)) | ((void)v67 << 6);
LABEL_39:
    char v80 = 8 * v70;
    unint64_t v81 = *(void *)(v55 + 56);
    uint64_t v75 = *(void **)(*(void *)(v55 + 48) + v80);
    uint64_t v74 = *(void *)(v81 + v80);
    unint64_t v199 = v75;
    uint64_t v200 = v74;
    uint64_t v82 = v75;
    swift_unknownObjectRetain();
    goto LABEL_40;
  }

  uint64_t v76 = (uint64_t)(v67 + 1);
  if (__OFADD__(v67, 1LL)) {
    goto LABEL_98;
  }
  if (v76 >= (uint64_t)v174)
  {
LABEL_92:
    unint64_t v199 = 0LL;
    uint64_t v200 = 0LL;
    swift_release();
    goto LABEL_94;
  }

  uint64_t v77 = *(void *)&v175[8 * v76];
  uint64_t v78 = (uint64_t)(v67 + 1);
  if (v77) {
    goto LABEL_38;
  }
  uint64_t v78 = (uint64_t)(v67 + 2);
  uint64_t v77 = *(void *)&v175[8 * v78];
  if (v77) {
    goto LABEL_38;
  }
  uint64_t v78 = (uint64_t)(v67 + 3);
  uint64_t v77 = *(void *)&v175[8 * v78];
  if (v77) {
    goto LABEL_38;
  }
  uint64_t v78 = (uint64_t)(v67 + 4);
  uint64_t v77 = *(void *)&v175[8 * v78];
  if (v77) {
    goto LABEL_38;
  }
  uint64_t v79 = v67 + 5;
  uint64_t v77 = *(void *)&v175[8 * (void)v79];
  if (v77)
  {
    uint64_t v78 = (uint64_t)(v67 + 5);
LABEL_38:
    uint64_t v191 = (char *)((v77 - 1) & v77);
    uint64_t v192 = (char *)v78;
    uint64_t v70 = __clz(__rbit64(v77)) + (v78 << 6);
    goto LABEL_39;
  }

  while (1)
  {
    uint64_t v78 = (uint64_t)(v79 + 1);
    if (__OFADD__(v79, 1LL)) {
      break;
    }
    uint64_t v77 = *(void *)&v175[8 * v78];
    ++v79;
    if (v77) {
      goto LABEL_38;
    }
  }

  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

          outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_60;
        }
      }

      else if (!v85)
      {
        goto LABEL_50;
      }

  uint64_t v111 = v14;
  swift_retain();
  swift_retain();
  uint64_t v112 = _foundation_swift_url_feature_enabled();
  __int128 v218 = v111;
  if ((v112 & 1) != 0)
  {
    v227._countAndFlagsBits = (uint64_t)v111;
    v227._object = v7;
    uint64_t v228 = v8;
    uint64_t v216 = v111;
    swift_retain();
    swift_retain();
    uint64_t v113 = URL.path(percentEncoded:)(1);
    uint64_t v227 = v113;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v113._countAndFlagsBits, (unint64_t)v113._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v225._countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v114 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
    char v115 = v225._countAndFlagsBits;
    __int128 v116 = v227._countAndFlagsBits;
    unint64_t v117 = v227._object;
    unint64_t v118 = ((unint64_t)v227._object >> 56) & 0xF;
    if (v118)
    {
      uint64_t v217 = v4;
      __int128 v225 = v227;
      MEMORY[0x1895F8858](v114);
      uint64_t v214 = (uint64_t)&v225;
      uint64_t v215 = v115;
      swift_bridgeObjectRetain();
      uint64_t v119 = v116;
      unint64_t v120 = v223;
      __int128 v121 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v213,  v119,  (unint64_t)v117);
      __int128 v223 = v120;
      if (v122 == 1)
      {
        uint64_t v123 = (unint64_t)v225._object;
        uint64_t v124 = v225._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v125 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v124,  v123,  v115);
        __int128 v127 = v126;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v125 = (uint64_t)v121;
        __int128 v127 = v122;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v217;
      uint64_t v5 = v224;
      if (!v127)
      {
        swift_release();
        swift_release();
        unint64_t v145 = v216;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v125 = 0LL;
        __int128 v127 = 0xE000000000000000LL;
        goto LABEL_115;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v125 = 0LL;
      __int128 v127 = 0xE000000000000000LL;
      uint64_t v5 = v224;
    }

    swift_release();
    swift_release();
    unint64_t v145 = v216;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_115:
    swift_release();
    swift_release();

    uint64_t v147 = v221;
    uint64_t v146 = v222;
    uint64_t v148 = (unint64_t)v219;
    unint64_t v46 = v220;
    goto LABEL_120;
  }

  __int128 v128 = objc_msgSend(v111, sel__parameterString);
  if (v128)
  {
    __int128 v129 = v128;
    unint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
    __int128 v132 = v131;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (__int128 v133 = objc_msgSend(v111, sel_path)) != 0)
    {
      __int128 v134 = v133;
      char v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
      unint64_t v137 = v136;

      v227._countAndFlagsBits = (uint64_t)v135;
      v227._object = v137;
      swift_bridgeObjectRetain();
      v138._countAndFlagsBits = 59LL;
      v138._object = (void *)0xE100000000000000LL;
      String.append(_:)(v138);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v139._countAndFlagsBits = (uint64_t)v130;
      v139._object = v132;
      String.append(_:)(v139);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      unint64_t v46 = v220;
    }

    else
    {
      v227._countAndFlagsBits = 59LL;
      v227._object = (void *)0xE100000000000000LL;
      v140._countAndFlagsBits = (uint64_t)v130;
      v140._object = v132;
      String.append(_:)(v140);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    uint64_t v125 = v227._countAndFlagsBits;
    __int128 v127 = (unint64_t)v227._object;
  }

  else
  {
    unint64_t v141 = objc_msgSend(v111, sel_path);
    if (v141)
    {
      uint64_t v142 = v141;
      uint64_t v143 = v111;
      uint64_t v125 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
      __int128 v127 = v144;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      uint64_t v125 = 0LL;
      __int128 v127 = 0xE000000000000000LL;
    }
  }

  uint64_t v147 = v221;
  uint64_t v146 = v222;
  uint64_t v148 = (unint64_t)v219;
LABEL_120:
  uint64_t v149 = HIBYTE(v148) & 0xF;
  if ((v148 & 0x2000000000000000LL) == 0) {
    uint64_t v149 = v147 & 0xFFFFFFFFFFFFLL;
  }
  if (!v149)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v156 = v46;
    swift_retain_n();
    swift_retain_n();
    uint64_t v18 = v156;
    if (_foundation_swift_url_feature_enabled())
    {
      v227._countAndFlagsBits = (uint64_t)v18;
      v227._object = v4;
      uint64_t v228 = v5;
      unint64_t v157 = v18;
      swift_retain();
      swift_retain();
      unint64_t v158 = URL.path(percentEncoded:)(1);
      uint64_t v227 = v158;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v158._countAndFlagsBits, (unint64_t)v158._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v225._countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v159 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
      unint64_t v160 = v225._countAndFlagsBits;
      unint64_t v161 = v227._countAndFlagsBits;
      uint64_t v162 = v227._object;
      uint64_t v163 = ((unint64_t)v227._object >> 56) & 0xF;
      if (v163)
      {
        __int128 v225 = v227;
        MEMORY[0x1895F8858](v159);
        uint64_t v214 = (uint64_t)&v225;
        uint64_t v215 = v160;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v213,  v161,  (unint64_t)v162);
        if (v164 == 1)
        {
          uint64_t v166 = (unint64_t)v225._object;
          uint64_t v165 = v225._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v165, v166, v160);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      unint64_t v178 = objc_msgSend(v18, sel__parameterString);
      if (v178)
      {
        unint64_t v179 = v178;
        uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
        uint64_t v182 = v181;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (unint64_t v183 = objc_msgSend(v18, sel_path)) != 0)
        {
          unint64_t v184 = v183;
          uint64_t v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
          unint64_t v187 = v186;

          v227._countAndFlagsBits = (uint64_t)v185;
          v227._object = v187;
          swift_bridgeObjectRetain();
          v188._countAndFlagsBits = 59LL;
          v188._object = (void *)0xE100000000000000LL;
          String.append(_:)(v188);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v189._countAndFlagsBits = (uint64_t)v180;
          v189._object = v182;
          String.append(_:)(v189);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v227._countAndFlagsBits = 59LL;
          v227._object = (void *)0xE100000000000000LL;
          v203._countAndFlagsBits = (uint64_t)v180;
          v203._object = v182;
          String.append(_:)(v203);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v204 = objc_msgSend(v18, sel_path);
        if (v204)
        {
          uint64_t v205 = v204;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v204);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    unint64_t v209 = (void *)objc_opt_self();
    uint64_t v210 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v88 = objc_msgSend( v209,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v210,  v18,  0,  0,  0,  0);
LABEL_63:
    v88;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }

  uint64_t v150 = HIBYTE(v127) & 0xF;
  if ((v127 & 0x2000000000000000LL) == 0) {
    uint64_t v150 = v125 & 0xFFFFFFFFFFFFLL;
  }
  if (!v150)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v167 = v218;
    swift_retain_n();
    swift_retain_n();
    uint64_t v51 = v167;
    if (_foundation_swift_url_feature_enabled())
    {
      v227._countAndFlagsBits = (uint64_t)v51;
      v227._object = v7;
      uint64_t v228 = v8;
      uint64_t v168 = v51;
      swift_retain();
      swift_retain();
      unint64_t v169 = URL.path(percentEncoded:)(1);
      uint64_t v227 = v169;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v169._countAndFlagsBits, (unint64_t)v169._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v225._countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v170 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
      unint64_t v171 = v225._countAndFlagsBits;
      uint64_t v172 = v227._countAndFlagsBits;
      uint64_t v173 = v227._object;
      uint64_t v174 = ((unint64_t)v227._object >> 56) & 0xF;
      if (v174)
      {
        __int128 v224 = v168;
        __int128 v225 = v227;
        __int128 v222 = v8;
        MEMORY[0x1895F8858](v170);
        uint64_t v214 = (uint64_t)&v225;
        uint64_t v215 = v171;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v213,  v172,  (unint64_t)v173);
        if (v175 == 1)
        {
          unint64_t v176 = (unint64_t)v225._object;
          uint64_t v177 = v225._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v177, v176, v171);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v168 = v224;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      uint64_t v190 = objc_msgSend(v51, sel__parameterString);
      if (v190)
      {
        uint64_t v191 = v190;
        uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
        uint64_t v194 = v193;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (uint64_t v195 = objc_msgSend(v51, sel_path)) != 0)
        {
          uint64_t v196 = v195;
          unint64_t v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
          unint64_t v199 = v198;

          v227._countAndFlagsBits = (uint64_t)v197;
          v227._object = v199;
          swift_bridgeObjectRetain();
          v200._countAndFlagsBits = 59LL;
          v200._object = (void *)0xE100000000000000LL;
          String.append(_:)(v200);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v201._countAndFlagsBits = (uint64_t)v192;
          v201._object = v194;
          String.append(_:)(v201);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v227._countAndFlagsBits = 59LL;
          v227._object = (void *)0xE100000000000000LL;
          v206._countAndFlagsBits = (uint64_t)v192;
          v206._object = v194;
          String.append(_:)(v206);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v207 = objc_msgSend(v51, sel_path);
        if (v207)
        {
          uint64_t v208 = v207;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v207);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    unint64_t v211 = (void *)objc_opt_self();
    uint64_t v212 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v109 = objc_msgSend( v211,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v212,  v51,  0,  0,  0,  0);
LABEL_88:
    v109;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }

  uint64_t v151 = MEMORY[0x186E20F44](v146);
  if (v151)
  {
    uint64_t v152 = (void *)v151;
    uint64_t v153 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v154 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v227._countAndFlagsBits = 0LL;
    uint64_t v155 = objc_msgSend(v152, sel_linkItemAtPath_toPath_error_, v153, v154, &v227);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v155 & 1) != 0) {
      return (id)v227._countAndFlagsBits;
    }
    if (v227._countAndFlagsBits)
    {
      (id)v227._countAndFlagsBits;
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      unint64_t v202 = (id)_nilObjCError;
    }

    return (id)swift_willThrow();
  }

  LODWORD(v215) = 0;
  uint64_t v214 = 48LL;
  uint64_t result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  unint64_t v120 = HIBYTE(v109) & 0xF;
  if ((v109 & 0x2000000000000000LL) == 0) {
    unint64_t v120 = v102 & 0xFFFFFFFFFFFFLL;
  }
  if (!v120)
  {
    swift_bridgeObjectRelease();
    unint64_t v140 = v225;
    unint64_t v141 = v230;
    swift_retain_n();
    swift_retain_n();
    unint64_t v21 = v140;
    if (!_foundation_swift_url_feature_enabled())
    {
      unint64_t v169 = objc_msgSend(v21, sel__parameterString);
      if (v169)
      {
        uint64_t v170 = v169;
        unint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v169);
        uint64_t v173 = v172;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (uint64_t v174 = objc_msgSend(v21, sel_path)) != 0)
        {
          uint64_t v175 = v174;
          unint64_t v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v174);
          unint64_t v178 = v177;

          v232._countAndFlagsBits = (uint64_t)v176;
          v232._object = v178;
          swift_bridgeObjectRetain();
          v179._countAndFlagsBits = 59LL;
          v179._object = (void *)0xE100000000000000LL;
          String.append(_:)(v179);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v180._countAndFlagsBits = (uint64_t)v171;
          v180._object = v173;
          String.append(_:)(v180);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v232._countAndFlagsBits = 59LL;
          v232._object = (void *)0xE100000000000000LL;
          v188._countAndFlagsBits = (uint64_t)v171;
          v188._object = v173;
          String.append(_:)(v188);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        goto LABEL_165;
      }

      unint64_t v187 = objc_msgSend(v21, sel_path);
      if (!v187)
      {
        swift_release();
        swift_release();

        goto LABEL_165;
      }

      uint64_t v142 = v187;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v187);
      swift_release();
      swift_release();

LABEL_164:
LABEL_165:
      uint64_t v214 = (void *)objc_opt_self();
      uint64_t v215 = String._bridgeToObjectiveCImpl()();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v92 = objc_msgSend( v214,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v215,  v21,  0,  0,  0,  0);
LABEL_63:
      v92;
      swift_unknownObjectRelease();

      return swift_willThrow();
    }

    v232._countAndFlagsBits = (uint64_t)v21;
    v232._object = v141;
    uint64_t v233 = v8;
    uint64_t v142 = v21;
    swift_retain();
    swift_retain();
    uint64_t v143 = URL.path(percentEncoded:)(1);
    uint64_t v232 = v143;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v143._countAndFlagsBits, (unint64_t)v143._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v231._countAndFlagsBits = Set.init(minimumCapacity:)();
    __int128 v144 = specialized Set._Variant.insert(_:)(&v234, 0x2FuLL);
    unint64_t v145 = v231._countAndFlagsBits;
    uint64_t v146 = v232._countAndFlagsBits;
    uint64_t v147 = v232._object;
    uint64_t v148 = ((unint64_t)v232._object >> 56) & 0xF;
    if (v148)
    {
      uint64_t v149 = v142;
      uint64_t v231 = v232;
      MEMORY[0x1895F8858](v144);
      char v221 = &v231;
      __int128 v222 = v145;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v220,  v146,  (unint64_t)v147);
      if (v150 == 1)
      {
        uint64_t v152 = (unint64_t)v231._object;
        uint64_t v151 = v231._countAndFlagsBits;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v151, v152, v145);
        uint64_t v154 = v153;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v154 = v150;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v142 = v149;
      if (!v154)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_163;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_163:
    swift_release();
    swift_release();
    goto LABEL_164;
  }

  __int128 v121 = v17;
  swift_retain();
  swift_retain();
  unint64_t v122 = _foundation_swift_url_feature_enabled();
  __int128 v224 = (id)v102;
  if (v122)
  {
    v232._countAndFlagsBits = (uint64_t)v121;
    v232._object = v10;
    uint64_t v233 = v11;
    uint64_t v123 = v121;
    swift_retain();
    unint64_t v226 = v11;
    swift_retain();
    uint64_t v124 = URL.path(percentEncoded:)(1);
    uint64_t v232 = v124;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v124._countAndFlagsBits, (unint64_t)v124._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v231._countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v125 = specialized Set._Variant.insert(_:)(&v234, 0x2FuLL);
    __int128 v126 = v231._countAndFlagsBits;
    __int128 v127 = v232._countAndFlagsBits;
    __int128 v128 = v232._object;
    __int128 v129 = ((unint64_t)v232._object >> 56) & 0xF;
    if (v129)
    {
      unint64_t v230 = v123;
      uint64_t v231 = v232;
      unint64_t v130 = v109;
      __int128 v225 = v10;
      MEMORY[0x1895F8858](v125);
      char v221 = &v231;
      __int128 v222 = v126;
      swift_bridgeObjectRetain();
      __int128 v131 = v127;
      __int128 v132 = v229;
      __int128 v133 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v220,  v131,  (unint64_t)v128);
      uint64_t v229 = v132;
      if (v134 == 1)
      {
        char v135 = (unint64_t)v231._object;
        int64_t v136 = v231._countAndFlagsBits;
        swift_bridgeObjectRetain();
        unint64_t v137 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v136,  v135,  v126);
        uint64_t v139 = v138;
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v137 = (uint64_t)v133;
        uint64_t v139 = v134;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int128 v10 = v225;
      uint64_t v11 = v226;
      uint64_t v109 = v130;
      if (!v139)
      {
        swift_release();
        swift_release();
        uint64_t v123 = v230;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v137 = 0LL;
        uint64_t v139 = 0xE000000000000000LL;
        goto LABEL_133;
      }

      uint64_t v123 = v230;
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v137 = 0LL;
      uint64_t v139 = 0xE000000000000000LL;
      uint64_t v11 = v226;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_133:
    swift_release();
    swift_release();

    goto LABEL_145;
  }

  uint64_t v155 = objc_msgSend(v121, sel__parameterString);
  if (v155)
  {
    int64_t v156 = v155;
    unint64_t v157 = v109;
    unint64_t v158 = v11;
    uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
    unint64_t v161 = v160;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (uint64_t v162 = objc_msgSend(v121, sel_path)) != 0)
    {
      uint64_t v163 = v162;
      unint64_t v164 = static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
      uint64_t v166 = v165;

      v232._countAndFlagsBits = (uint64_t)v164;
      v232._object = v166;
      swift_bridgeObjectRetain();
      v167._countAndFlagsBits = 59LL;
      v167._object = (void *)0xE100000000000000LL;
      String.append(_:)(v167);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v168._countAndFlagsBits = (uint64_t)v159;
      v168._object = v161;
      String.append(_:)(v168);
      swift_release();
      swift_release();

      uint64_t v11 = v158;
      swift_bridgeObjectRelease();
    }

    else
    {
      v232._countAndFlagsBits = 59LL;
      v232._object = (void *)0xE100000000000000LL;
      v181._countAndFlagsBits = (uint64_t)v159;
      v181._object = v161;
      String.append(_:)(v181);
      swift_release();
      swift_release();

      uint64_t v11 = v158;
    }

    swift_bridgeObjectRelease();
    unint64_t v137 = v232._countAndFlagsBits;
    uint64_t v139 = (unint64_t)v232._object;
    uint64_t v109 = v157;
  }

  else
  {
    uint64_t v182 = v109;
    unint64_t v183 = v11;
    unint64_t v184 = objc_msgSend(v121, sel_path);
    if (v184)
    {
      uint64_t v185 = v184;
      unint64_t v137 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
      uint64_t v139 = v186;
      swift_release();
      swift_release();

      uint64_t v11 = v183;
    }

    else
    {
      swift_release();
      swift_release();

      unint64_t v137 = 0LL;
      uint64_t v139 = 0xE000000000000000LL;
    }

    uint64_t v109 = v182;
  }

                                outlined assign with take of PredicateCodableConfiguration.AllowListKeyPath( (uint64_t)v153,  *(void *)(v77 + 56) + 48 * a3);
LABEL_131:
                                *uint64_t v9 = v77;
                                swift_bridgeObjectRelease();
                                swift_release();
                                swift_bridgeObjectRelease();
                                return swift_bridgeObjectRelease();
                              }

                              unint64_t v100 = v148 + 8;
                              uint64_t v77 = v142;
                            }
                          }
                        }
                      }
                    }
                  }
                }

  __break(1u);
  return result;
}

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v12 = v45 & 0xFFFFFFFFFFFFF0FFLL | (v56 << 8);
LABEL_94:
    swift_unknownObjectRetain();
    unint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v13, v12, v14, v42, v44);
    uint64_t result = swift_unknownObjectRelease_n();
    a7 = v64;
    uint64_t v8 = v65;
    uint64_t v30 = __OFSUB__(v65, v46);
    uint64_t v16 = v65 - v46;
    if (v30)
    {
      __break(1u);
      return result;
    }

                __break(1u);
                goto LABEL_94;
              }

    __break(1u);
    goto LABEL_94;
  }

  if ((unint64_t)v7 >= v20)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = (const char *)&v18[v19];
  uint64_t v26 = 1;
LABEL_24:
  uint64_t v28 = 0LL;
  uint64_t v29 = v25 - v7;
  while (v7 - (const char *)v18 + v28 >= 0)
  {
    uint64_t v30 = v29-- < 1;
    if (v30) {
      break;
    }
    LODWORD(v19) = v7[v28];
    if ((v19 - 58) <= 0xF5u)
    {
      switch(v7[v28])
      {
        case '+':
        case '-':
          if (v28 != 0 || (v23 & 1) == 0) {
            goto LABEL_141;
          }
          uint64_t v23 = 0;
          uint64_t v26 = 0;
          v7 += v28 + 1;
          uint64_t v24 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            uint64_t v104 = (unint64_t)&v7[v28];
            uint64_t v105 = a4 + i;
            if (a4 + i < v104) {
              goto LABEL_278;
            }
            if (v105 > a4)
            {
              uint64_t v106 = i + a4;
              uint64_t i = 1LL;
              uint64_t v107 = a4;
              while (1)
              {
                __int128 v108 = 0LL;
                uint64_t v109 = 0LL;
                uint64_t v110 = v106 - v107;
                while (1)
                {
                  uint64_t v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    uint64_t v70 = __OFADD__(i++, 1LL);
                    if (!v70)
                    {
                      v107 += v109 + 1;
                      goto LABEL_240;
                    }

                    goto LABEL_282;
                  }

                  if (v111 == 13) {
                    break;
                  }
                  uint64_t v69 = v109 + 1;
                  if (__OFADD__(v109, 1LL)) {
                    goto LABEL_266;
                  }
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105) {
                    goto LABEL_246;
                  }
                }

                uint64_t v112 = v107 + v109;
                if (v104 >= v107 + v109 + 1)
                {
                  if (((v107 - a4 + v109 + 1) & 0x8000000000000000LL) != 0 || (uint64_t)(~v109 + v110) < 1)
                  {
                    __break(1u);
LABEL_286:
                    v118[0] = 0LL;
                    v118[1] = (char *)0xE000000000000000LL;
                    _StringGuts.grow(_:)(30LL);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v118, "Invalid index ");
                    HIBYTE(v118[1]) = -18;
                    v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v113);
                    swift_bridgeObjectRelease();
                    v114._countAndFlagsBits = 0x616D5F20726F6620LL;
                    v114._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v114);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x183433144LL);
                  }

                  if (*(_BYTE *)(v112 + 1) == 10) {
                    uint64_t v112 = v107 + v109 + 1;
                  }
                }

                uint64_t v70 = __OFADD__(i++, 1LL);
                if (v70) {
                  goto LABEL_283;
                }
                uint64_t v107 = v112 + 1;
LABEL_240:
                if (v107 >= v105)
                {
                  uint64_t v69 = 0LL;
                  goto LABEL_246;
                }
              }
            }

            uint64_t v69 = 0LL;
            uint64_t i = 1LL;
LABEL_246:
            a3 = (uint64_t)&v7[v28 - a4];
            LOBYTE(v19) = 46;
LABEL_142:
            uint64_t v13 = 0xE900000000000072LL;
            uint64_t v20 = 0x65626D756E206E69LL;
            goto LABEL_181;
          }

          uint64_t v23 = 0;
          uint64_t v26 = 0;
          v7 += v28 + 1;
          uint64_t v24 = 1;
          if ((unint64_t)v7 >= v20)
          {
            __break(1u);
            goto LABEL_43;
          }

          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v19 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v24 != 1 && (v24 || v28 < 1))
          {
LABEL_141:
            uint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v7[v28],  a4,  i);
            uint64_t v69 = v75;
            a3 = v76;
            goto LABEL_142;
          }

          uint64_t v26 = 0;
          v7 += v28 + 1;
          uint64_t v24 = 2;
          uint64_t v23 = 1;
          goto LABEL_24;
      }

      goto LABEL_24;
    }

    if (__OFADD__(v28, 1LL)) {
      goto LABEL_183;
    }
  }

  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if (i > 0x7F) {
    goto LABEL_186;
  }
  return i;
}

    __break(1u);
    goto LABEL_94;
  }

  if ((unint64_t)v7 >= v20)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = (const char *)&v18[v19];
  uint64_t v26 = 1;
LABEL_24:
  uint64_t v28 = 0LL;
  uint64_t v29 = v25 - v7;
  while (v7 - (const char *)v18 + v28 >= 0)
  {
    uint64_t v30 = v29-- < 1;
    if (v30) {
      break;
    }
    LODWORD(v19) = v7[v28];
    if ((v19 - 58) <= 0xF5u)
    {
      switch(v7[v28])
      {
        case '+':
        case '-':
          if (v28 != 0 || (v23 & 1) == 0) {
            goto LABEL_141;
          }
          uint64_t v23 = 0;
          uint64_t v26 = 0;
          v7 += v28 + 1;
          uint64_t v24 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            uint64_t v104 = (unint64_t)&v7[v28];
            uint64_t v105 = a4 + i;
            if (a4 + i < v104) {
              goto LABEL_278;
            }
            if (v105 > a4)
            {
              uint64_t v106 = i + a4;
              uint64_t i = 1LL;
              uint64_t v107 = a4;
              while (1)
              {
                __int128 v108 = 0LL;
                uint64_t v109 = 0LL;
                uint64_t v110 = v106 - v107;
                while (1)
                {
                  uint64_t v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    uint64_t v70 = __OFADD__(i++, 1LL);
                    if (!v70)
                    {
                      v107 += v109 + 1;
                      goto LABEL_240;
                    }

                    goto LABEL_282;
                  }

                  if (v111 == 13) {
                    break;
                  }
                  uint64_t v69 = v109 + 1;
                  if (__OFADD__(v109, 1LL)) {
                    goto LABEL_266;
                  }
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105) {
                    goto LABEL_246;
                  }
                }

                uint64_t v112 = v107 + v109;
                if (v104 >= v107 + v109 + 1)
                {
                  if (((v107 - a4 + v109 + 1) & 0x8000000000000000LL) != 0 || (uint64_t)(~v109 + v110) < 1)
                  {
                    __break(1u);
LABEL_286:
                    v118[0] = 0LL;
                    v118[1] = (char *)0xE000000000000000LL;
                    _StringGuts.grow(_:)(30LL);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v118, "Invalid index ");
                    HIBYTE(v118[1]) = -18;
                    v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v113);
                    swift_bridgeObjectRelease();
                    v114._countAndFlagsBits = 0x616D5F20726F6620LL;
                    v114._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v114);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x183435568LL);
                  }

                  if (*(_BYTE *)(v112 + 1) == 10) {
                    uint64_t v112 = v107 + v109 + 1;
                  }
                }

                uint64_t v70 = __OFADD__(i++, 1LL);
                if (v70) {
                  goto LABEL_283;
                }
                uint64_t v107 = v112 + 1;
LABEL_240:
                if (v107 >= v105)
                {
                  uint64_t v69 = 0LL;
                  goto LABEL_246;
                }
              }
            }

            uint64_t v69 = 0LL;
            uint64_t i = 1LL;
LABEL_246:
            a3 = (uint64_t)&v7[v28 - a4];
            LOBYTE(v19) = 46;
LABEL_142:
            uint64_t v13 = 0xE900000000000072LL;
            uint64_t v20 = 0x65626D756E206E69LL;
            goto LABEL_181;
          }

          uint64_t v23 = 0;
          uint64_t v26 = 0;
          v7 += v28 + 1;
          uint64_t v24 = 1;
          if ((unint64_t)v7 >= v20)
          {
            __break(1u);
            goto LABEL_43;
          }

          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v19 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v24 != 1 && (v24 || v28 < 1))
          {
LABEL_141:
            uint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v7[v28],  a4,  i);
            uint64_t v69 = v75;
            a3 = v76;
            goto LABEL_142;
          }

          uint64_t v26 = 0;
          v7 += v28 + 1;
          uint64_t v24 = 2;
          uint64_t v23 = 1;
          goto LABEL_24;
      }

      goto LABEL_24;
    }

    if (__OFADD__(v28, 1LL)) {
      goto LABEL_183;
    }
  }

  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if (i >> 15) {
    goto LABEL_186;
  }
  return i;
}

    __break(1u);
    goto LABEL_94;
  }

  if ((unint64_t)v7 >= v20)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = (const char *)&v18[v19];
  uint64_t v26 = 1;
LABEL_24:
  uint64_t v28 = 0LL;
  uint64_t v29 = v25 - v7;
  while (v7 - (const char *)v18 + v28 >= 0)
  {
    uint64_t v30 = v29-- < 1;
    if (v30) {
      break;
    }
    LODWORD(v19) = v7[v28];
    if ((v19 - 58) <= 0xF5u)
    {
      switch(v7[v28])
      {
        case '+':
        case '-':
          if (v28 != 0 || (v23 & 1) == 0) {
            goto LABEL_141;
          }
          uint64_t v23 = 0;
          uint64_t v26 = 0;
          v7 += v28 + 1;
          uint64_t v24 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            uint64_t v104 = (unint64_t)&v7[v28];
            uint64_t v105 = a4 + i;
            if (a4 + i < v104) {
              goto LABEL_278;
            }
            if (v105 > a4)
            {
              uint64_t v106 = i + a4;
              uint64_t i = 1LL;
              uint64_t v107 = a4;
              while (1)
              {
                __int128 v108 = 0LL;
                uint64_t v109 = 0LL;
                uint64_t v110 = v106 - v107;
                while (1)
                {
                  uint64_t v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    uint64_t v70 = __OFADD__(i++, 1LL);
                    if (!v70)
                    {
                      v107 += v109 + 1;
                      goto LABEL_240;
                    }

                    goto LABEL_282;
                  }

                  if (v111 == 13) {
                    break;
                  }
                  uint64_t v69 = v109 + 1;
                  if (__OFADD__(v109, 1LL)) {
                    goto LABEL_266;
                  }
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105) {
                    goto LABEL_246;
                  }
                }

                uint64_t v112 = v107 + v109;
                if (v104 >= v107 + v109 + 1)
                {
                  if (((v107 - a4 + v109 + 1) & 0x8000000000000000LL) != 0 || (uint64_t)(~v109 + v110) < 1)
                  {
                    __break(1u);
LABEL_286:
                    v118[0] = 0LL;
                    v118[1] = (char *)0xE000000000000000LL;
                    _StringGuts.grow(_:)(30LL);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v118, "Invalid index ");
                    HIBYTE(v118[1]) = -18;
                    v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v113);
                    swift_bridgeObjectRelease();
                    v114._countAndFlagsBits = 0x616D5F20726F6620LL;
                    v114._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v114);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x18343798CLL);
                  }

                  if (*(_BYTE *)(v112 + 1) == 10) {
                    uint64_t v112 = v107 + v109 + 1;
                  }
                }

                uint64_t v70 = __OFADD__(i++, 1LL);
                if (v70) {
                  goto LABEL_283;
                }
                uint64_t v107 = v112 + 1;
LABEL_240:
                if (v107 >= v105)
                {
                  uint64_t v69 = 0LL;
                  goto LABEL_246;
                }
              }
            }

            uint64_t v69 = 0LL;
            uint64_t i = 1LL;
LABEL_246:
            a3 = (uint64_t)&v7[v28 - a4];
            LOBYTE(v19) = 46;
LABEL_142:
            uint64_t v13 = 0xE900000000000072LL;
            uint64_t v20 = 0x65626D756E206E69LL;
            goto LABEL_181;
          }

          uint64_t v23 = 0;
          uint64_t v26 = 0;
          v7 += v28 + 1;
          uint64_t v24 = 1;
          if ((unint64_t)v7 >= v20)
          {
            __break(1u);
            goto LABEL_43;
          }

          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v19 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v24 != 1 && (v24 || v28 < 1))
          {
LABEL_141:
            uint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v7[v28],  a4,  i);
            uint64_t v69 = v75;
            a3 = v76;
            goto LABEL_142;
          }

          uint64_t v26 = 0;
          v7 += v28 + 1;
          uint64_t v24 = 2;
          uint64_t v23 = 1;
          goto LABEL_24;
      }

      goto LABEL_24;
    }

    if (__OFADD__(v28, 1LL)) {
      goto LABEL_183;
    }
  }

  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if (i >> 31) {
    goto LABEL_186;
  }
  return i;
}

    __break(1u);
    goto LABEL_94;
  }

  if ((unint64_t)v9 >= v22)
  {
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }

  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = (const char *)&v20[v21];
  uint64_t v28 = 1;
LABEL_24:
  uint64_t v30 = 0LL;
  uint64_t v31 = v27 - v9;
  while (v9 - (const char *)v20 + v30 >= 0)
  {
    uint64_t v32 = v31-- < 1;
    if (v32) {
      break;
    }
    LODWORD(v21) = v9[v30];
    if ((v21 - 58) <= 0xF5u)
    {
      switch(v9[v30])
      {
        case '+':
        case '-':
          if (v30 != 0 || (v25 & 1) == 0) {
            goto LABEL_141;
          }
          uint64_t v25 = 0;
          uint64_t v28 = 0;
          v9 += v30 + 1;
          uint64_t v26 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v28 & 1) == 0)
          {
            uint64_t v106 = (unint64_t)&v9[v30];
            uint64_t v107 = a4 + i;
            if (a4 + i < v106) {
              goto LABEL_277;
            }
            if (v107 > a4)
            {
              __int128 v108 = i + a4;
              uint64_t i = 1LL;
              uint64_t v109 = a4;
              while (1)
              {
                uint64_t v110 = 0LL;
                uint64_t v111 = 0LL;
                uint64_t v112 = v108 - v109;
                while (1)
                {
                  uint64_t v113 = *(unsigned __int8 *)(v109 + v111);
                  if (v113 == 10)
                  {
                    __int128 v72 = __OFADD__(i++, 1LL);
                    if (!v72)
                    {
                      v109 += v111 + 1;
                      goto LABEL_239;
                    }

                    goto LABEL_281;
                  }

                  if (v113 == 13) {
                    break;
                  }
                  uint64_t v71 = v111 + 1;
                  if (__OFADD__(v111, 1LL)) {
                    goto LABEL_265;
                  }
                  ++v111;
                  --v110;
                  if (v109 + v111 >= v107) {
                    goto LABEL_245;
                  }
                }

                uint64_t v114 = v109 + v111;
                if (v106 >= v109 + v111 + 1)
                {
                  if (((v109 - a4 + v111 + 1) & 0x8000000000000000LL) != 0 || (uint64_t)(~v111 + v112) < 1)
                  {
                    __break(1u);
LABEL_285:
                    v120[0] = 0LL;
                    v120[1] = (char *)0xE000000000000000LL;
                    _StringGuts.grow(_:)(30LL);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v120, "Invalid index ");
                    HIBYTE(v120[1]) = -18;
                    v115._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v115);
                    swift_bridgeObjectRelease();
                    v116._countAndFlagsBits = 0x616D5F20726F6620LL;
                    v116._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v116);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x1834389A0LL);
                  }

                  if (*(_BYTE *)(v114 + 1) == 10) {
                    uint64_t v114 = v109 + v111 + 1;
                  }
                }

                __int128 v72 = __OFADD__(i++, 1LL);
                if (v72) {
                  goto LABEL_282;
                }
                uint64_t v109 = v114 + 1;
LABEL_239:
                if (v109 >= v107)
                {
                  uint64_t v71 = 0LL;
                  goto LABEL_245;
                }
              }
            }

            uint64_t v71 = 0LL;
            uint64_t i = 1LL;
LABEL_245:
            a3 = (uint64_t)&v9[v30 - a4];
            LOBYTE(v21) = 46;
LABEL_142:
            unint64_t v15 = 0xE900000000000072LL;
            uint64_t v22 = 0x65626D756E206E69LL;
            goto LABEL_181;
          }

          uint64_t v25 = 0;
          uint64_t v28 = 0;
          v9 += v30 + 1;
          uint64_t v26 = 1;
          if ((unint64_t)v9 >= v22)
          {
            __break(1u);
            goto LABEL_43;
          }

          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v21 != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v26 != 1 && (v26 || v30 < 1))
          {
LABEL_141:
            uint64_t i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v9[v30],  a4,  i);
            uint64_t v71 = v77;
            a3 = v78;
            goto LABEL_142;
          }

          uint64_t v28 = 0;
          v9 += v30 + 1;
          uint64_t v26 = 2;
          uint64_t v25 = 1;
          goto LABEL_24;
      }

      goto LABEL_24;
    }

    if (__OFADD__(v30, 1LL)) {
      goto LABEL_183;
    }
  }

  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if ((i & 0x8000000000000000LL) != 0) {
    goto LABEL_186;
  }
  return (char *)i;
}

    __break(1u);
    goto LABEL_94;
  }

  if (a3 >= (unint64_t)v8)
  {
LABEL_263:
    __break(1u);
    goto LABEL_264;
  }

  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = &v19[i];
  uint64_t v26 = 1;
LABEL_24:
  uint64_t v30 = 0LL;
  uint64_t v31 = (uint64_t)&v25[-a3];
  while ((uint64_t)(a3 - (void)v19 + v30) >= 0)
  {
    uint64_t v32 = v31-- < 1;
    if (v32) {
      break;
    }
    uint64_t i = *(unsigned __int8 *)(a3 + v30);
    if ((i - 58) <= 0xF5u)
    {
      switch(*(_BYTE *)(a3 + v30))
      {
        case '+':
        case '-':
          if (v30 != 0 || (v23 & 1) == 0) {
            goto LABEL_141;
          }
          uint64_t v23 = 0;
          uint64_t v26 = 0;
          a3 += v30 + 1;
          uint64_t v24 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            uint64_t v105 = a3 + v30;
            if (a3 + v30 < a4) {
              goto LABEL_274;
            }
            uint64_t v106 = a4 + a5;
            if (a4 + a5 < v105) {
              goto LABEL_274;
            }
            if (v106 >= a3 + v30 + 1) {
              uint64_t v106 = a3 + v30 + 1;
            }
            if (v106 > a4)
            {
              uint64_t v107 = a5 + a4;
              a5 = 1LL;
              __int128 v108 = a4;
              while (1)
              {
                uint64_t v109 = 0LL;
                uint64_t v110 = 0LL;
                uint64_t v111 = v107 - v108;
                while (1)
                {
                  uint64_t v112 = *(unsigned __int8 *)(v108 + v110);
                  if (v112 == 10)
                  {
                    uint64_t v76 = __OFADD__(a5++, 1LL);
                    if (!v76)
                    {
                      v108 += v110 + 1;
                      goto LABEL_236;
                    }

                    goto LABEL_278;
                  }

                  if (v112 == 13) {
                    break;
                  }
                  uint64_t v75 = v110 + 1;
                  if (__OFADD__(v110, 1LL)) {
                    goto LABEL_262;
                  }
                  ++v110;
                  --v109;
                  if (v108 + v110 >= v106) {
                    goto LABEL_242;
                  }
                }

                uint64_t v113 = v108 + v110;
                if (v105 < v108 + v110 + 1) {
                  goto LABEL_234;
                }
                if (*(_BYTE *)(v113 + 1) == 10) {
                  uint64_t v113 = v108 + v110 + 1;
                }
LABEL_234:
                uint64_t v76 = __OFADD__(a5++, 1LL);
                if (v76) {
                  goto LABEL_279;
                }
                __int128 v108 = v113 + 1;
LABEL_236:
                if (v108 >= v106)
                {
                  uint64_t v75 = 0LL;
                  goto LABEL_242;
                }
              }
            }

            uint64_t v75 = 0LL;
            a5 = 1LL;
LABEL_242:
            uint64_t v13 = (char *)(a3 - a4 + v30);
            LOBYTE(i) = 46;
LABEL_142:
            a3 = 0xE900000000000072LL;
            uint64_t v14 = 0x65626D756E206E69LL;
            goto LABEL_179;
          }

          uint64_t v23 = 0;
          uint64_t v26 = 0;
          a3 += v30 + 1;
          uint64_t v24 = 1;
          if (a3 >= (unint64_t)v8)
          {
            __break(1u);
            goto LABEL_43;
          }

          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)i != 101) {
            goto LABEL_141;
          }
LABEL_36:
          if (v24 != 1 && (v24 || v30 < 1))
          {
LABEL_141:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a3 + v30, a4, a5);
            uint64_t v75 = v81;
            uint64_t v13 = v82;
            goto LABEL_142;
          }

          uint64_t v26 = 0;
          a3 += v30 + 1;
          uint64_t v24 = 2;
          uint64_t v23 = 1;
          goto LABEL_24;
      }

      goto LABEL_24;
    }

    if (__OFADD__(v30, 1LL)) {
      goto LABEL_181;
    }
    ++v30;
  }

  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  if (isNegative_getter) {
    return -(uint64_t)i;
  }
  else {
    return i;
  }
}

uint64_t specialized _NativeSet.filter(_:)( uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v91 = a6;
  unint64_t v92 = a7;
  uint64_t v89 = a4;
  uint64_t v90 = a5;
  uint64_t v88 = a3;
  uint64_t v9 = isStackAllocationSafe;
  uint64_t v96 = *MEMORY[0x1895F89C0];
  char v10 = *(_BYTE *)(isStackAllocationSafe + 32);
  int64_t v86 = (unint64_t)((1LL << v10) + 63) >> 6;
  size_t v11 = 8 * v86;
  uint64_t v93 = isStackAllocationSafe;
  if ((v10 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v85 = (unint64_t *)swift_slowAlloc();
      bzero(v85, v11);
      uint64_t v48 = 0LL;
      uint64_t v49 = 0LL;
      uint64_t v50 = v9 + 56;
      uint64_t v51 = 1LL << *(_BYTE *)(v9 + 32);
      if (v51 < 64) {
        uint64_t v52 = ~(-1LL << v51);
      }
      else {
        uint64_t v52 = -1LL;
      }
      unint64_t v53 = v52 & *(void *)(v9 + 56);
      uint64_t v87 = (unint64_t *)((unint64_t)(v51 + 63) >> 6);
      while (1)
      {
        if (v53)
        {
          unint64_t v54 = __clz(__rbit64(v53));
          v53 &= v53 - 1;
          unint64_t v55 = v54 | (v49 << 6);
          uint64_t v9 = v93;
        }

        else
        {
          BOOL v20 = __OFADD__(v49++, 1LL);
          uint64_t v9 = v93;
          if (v20) {
            goto LABEL_141;
          }
          unint64_t v56 = *(void *)(v50 + 8 * v49);
          if (!v56)
          {
            uint64_t v57 = v49 + 1;
            unint64_t v56 = *(void *)(v50 + 8 * v57);
            if (!v56)
            {
              uint64_t v57 = v49 + 2;
              unint64_t v56 = *(void *)(v50 + 8 * v57);
              if (!v56)
              {
                uint64_t v57 = v49 + 3;
                unint64_t v56 = *(void *)(v50 + 8 * v57);
                if (!v56)
                {
                  uint64_t v57 = v49 + 4;
                  unint64_t v56 = *(void *)(v50 + 8 * v57);
                  if (!v56)
                  {
                    while (1)
                    {
                      uint64_t v49 = v57 + 1;
                      if (__OFADD__(v57, 1LL)) {
                        goto LABEL_146;
                      }
                      unint64_t v56 = *(void *)(v50 + 8 * v49);
                      ++v57;
                      if (v56) {
                        goto LABEL_84;
                      }
                    }

LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
                  }
                }
              }
            }
          }

          int64_t v30 = v36;
        }

          uint64_t v123 = 256LL;
        }

          swift_bridgeObjectRelease_n();
LABEL_150:
          unint64_t v56 = v311;
          unint64_t v58 = v304;
          __int128 v128 = (unint64_t)v302;
          __int128 v129 = v301;
          int64_t v71 = v300;
          goto LABEL_151;
        }

        CocoaError.Code.init(fileErrno:reading:)(v55, 0);
        int64_t v71 = v319;
        if (v55 != 102)
        {
          v302 = (unint64_t *)v16;
          v301 = v56;
          goto LABEL_105;
        }

  *(void *)&__int128 v222 = v200;
  *((void *)&v222 + 1) = v205;
  __int128 v223 = v206;
  *(void *)&__int128 v224 = v136;
  *((void *)&v224 + 1) = v137;
  *(void *)&__int128 v225 = v138;
  *((void *)&v225 + 1) = v139;
  uint64_t v146 = *(void *)(v142 + 16);
  if (!v146)
  {
LABEL_152:
    outlined release of Locale((uint64_t)v266);
LABEL_153:
    uint64_t result = outlined release of AttributedString.Runs((uint64_t)v268);
    goto LABEL_154;
  }

  uint64_t v147 = 40LL;
  while (!*(void *)(v142 + v147))
  {
    v147 += 16LL;
    if (!--v146) {
      goto LABEL_152;
    }
  }

  char v221 = v137;
  swift_bridgeObjectRetain();
  unint64_t v160 = (unint64_t *)(v142 + 40);
  unint64_t v161 = (char *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v162 = *v160;
    if (*v160)
    {
      uint64_t v163 = *(v160 - 1);
      if ((v162 & 0x2000000000000000LL) != 0 ? HIBYTE(v162) & 0xF : v163 & 0xFFFFFFFFFFFFLL)
      {
        if ((v162 & 0x1000000000000000LL) != 0)
        {
          uint64_t v165 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v162 & 0x2000000000000000LL) != 0)
          {
            *(void *)&v243 = *(v160 - 1);
            *((void *)&v243 + 1) = v162 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }

          else
          {
            if ((v163 & 0x1000000000000000LL) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }

          uint64_t v165 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v161 + 2) + 1LL,  1,  v161);
        }
        uint64_t v167 = *((void *)v161 + 2);
        uint64_t v166 = *((void *)v161 + 3);
        if (v167 >= v166 >> 1) {
          unint64_t v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v166 > 1),  v167 + 1,  1,  v161);
        }
        *((void *)v161 + 2) = v167 + 1;
        *(_DWORD *)&v161[4 * v167 + 32] = v165;
      }
    }

    v160 += 2;
    --v143;
  }

  while (v143);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v263);
  uint64_t v168 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v161);
  uint64_t v170 = v169;
  uint64_t v172 = v171;
  uint64_t v174 = v173;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v243);
  outlined release of Locale((uint64_t)v266);
  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v268);
  unint64_t v137 = v221;
  if (v174 == 2)
  {
LABEL_154:
    if (v188 == *(void *)(v209 + 88))
    {
      char v221 = v139;
      if (v187)
      {
        uint64_t v148 = *(void *)(v187 + 24 * ((v183 >> ((4 * *(_BYTE *)(v187 + 18) + 8) & 0x3C)) & 0xF) + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v149 = *(void *)(v209 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v183, v149);
        uint64_t v148 = v150;
        swift_unknownObjectRelease();
      }

      uint64_t v151 = (*(uint64_t (**)(void, void))(*(void *)(v184 + 24) + 24LL))( *(void *)(v184 + 16),  *(void *)(v184 + 24));
      if (*(void *)(v148 + 16)
        && (uint64_t v153 = specialized __RawDictionaryStorage.find<A>(_:)(v151, v152), (v154 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v148 + 56) + 72 * v153, (uint64_t)&v238);
      }

      else
      {
        unint64_t v242 = 0LL;
        unint64_t v240 = 0u;
        uint64_t v241 = 0u;
        unint64_t v238 = 0u;
        unint64_t v239 = 0u;
      }

      swift_bridgeObjectRelease();
      if (*((void *)&v239 + 1))
      {
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v238,  (uint64_t)&v232);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        int64_t v156 = v186;
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v238);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v156,  0LL,  1LL,  AssociatedTypeWitness);
      }

      else
      {
        outlined destroy of Any?( (uint64_t)&v238,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        unint64_t v157 = swift_getAssociatedTypeWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 56LL))( v186,  1LL,  1LL,  v157);
      }

      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v136 >> 10 >= (unint64_t)v185 >> 10)
      {
        unint64_t v158 = v182;
        *uint64_t v182 = v185;
        v158[1] = v181;
        *((void *)v158 + 4) = v136;
        *((void *)v158 + 5) = v137;
        uint64_t v159 = v221;
        *((void *)v158 + 6) = v138;
        *((void *)v158 + 7) = v159;
        return result;
      }

      goto LABEL_214;
    }

      if (v334 >= v331)
      {
LABEL_385:
        __break(1u);
        goto LABEL_386;
      }

      __int128 v144 = *(void *)(v20 + 64);
      unint64_t v145 = *(void *)(v20 + 72);
      uint64_t v146 = *(void *)(v20 + 80);
      v346 = *(void **)(v20 + 88);
      v315 = (uint64_t *)v48;
      if (v144)
      {
        if (v146 < (uint64_t)v358)
        {
LABEL_400:
          __break(1u);
          goto LABEL_401;
        }

        if (*(_WORD *)(v144 + 16) && (uint64_t)v358 < v146)
        {
          v360 = (_BYTE *)v145;
          uint64_t v147 = *(unsigned __int8 *)(v144 + 18);
          if (*(_BYTE *)(v144 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v434);
            uint64_t result = swift_unknownObjectRetain();
            uint64_t v148 = v358;
            uint64_t v149 = v144;
            while (1)
            {
              uint64_t v152 = *(unsigned __int16 *)(v149 + 16);
              if (!*(_WORD *)(v149 + 16)) {
                goto LABEL_156;
              }
              uint64_t v153 = *(void *)(v149 + 40);
              unint64_t v33 = __OFSUB__(v148, v153);
              uint64_t v154 = (__int128 *)((char *)v148 - v153);
              if (v33) {
                goto LABEL_374;
              }
              if (__OFADD__(v154, 1LL)) {
                goto LABEL_375;
              }
              if ((uint64_t)v154 + 1 < 1)
              {
                uint64_t v152 = 0LL;
              }

              else
              {
                if ((_DWORD)v152 == 1)
                {
                  uint64_t v148 = v154;
LABEL_156:
                  if (v148) {
                    goto LABEL_371;
                  }
                  goto LABEL_157;
                }

                uint64_t v155 = (uint64_t *)(v149 + 64);
                int64_t v156 = 1LL;
                while (1)
                {
                  unint64_t v157 = *v155;
                  v155 += 3;
                  uint64_t v148 = (__int128 *)((char *)v154 - v157);
                  if (__OFSUB__(v154, v157)) {
                    goto LABEL_367;
                  }
                  if (__OFADD__(v148, 1LL)) {
                    goto LABEL_368;
                  }
                  ++v156;
                  uint64_t v154 = v148;
                  if (v152 == v156) {
                    goto LABEL_156;
                  }
                }

                uint64_t v152 = v156;
                uint64_t v148 = v154;
              }

      if (v343 >= v340)
      {
LABEL_398:
        __break(1u);
        goto LABEL_399;
      }

      uint64_t v146 = *(void *)(v24 + 64);
      uint64_t v147 = *(void *)(v24 + 72);
      uint64_t v148 = *(void *)(v24 + 80);
      v358 = *(void *)(v24 + 88);
      v324 = v53;
      v371 = v147;
      if (v146)
      {
        if (v148 < (uint64_t)v369)
        {
LABEL_413:
          __break(1u);
          goto LABEL_414;
        }

        if (*(_WORD *)(v146 + 16) && (uint64_t)v369 < v148)
        {
          uint64_t v149 = *(unsigned __int8 *)(v146 + 18);
          if (*(_BYTE *)(v146 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v445);
            uint64_t result = swift_unknownObjectRetain();
            uint64_t v150 = v369;
            uint64_t v151 = v146;
            while (1)
            {
              uint64_t v154 = *(unsigned __int16 *)(v151 + 16);
              if (!*(_WORD *)(v151 + 16)) {
                goto LABEL_156;
              }
              uint64_t v155 = *(void *)(v151 + 40);
              int64_t v36 = __OFSUB__(v150, v155);
              int64_t v156 = (__int128 *)((char *)v150 - v155);
              if (v36) {
                goto LABEL_387;
              }
              if (__OFADD__(v156, 1LL)) {
                goto LABEL_388;
              }
              if ((uint64_t)v156 + 1 < 1)
              {
                uint64_t v154 = 0LL;
              }

              else
              {
                if ((_DWORD)v154 == 1)
                {
                  uint64_t v150 = v156;
LABEL_156:
                  if (v150) {
                    goto LABEL_384;
                  }
                  goto LABEL_157;
                }

                unint64_t v157 = (uint64_t *)(v151 + 64);
                unint64_t v158 = 1LL;
                while (1)
                {
                  uint64_t v159 = *v157;
                  v157 += 3;
                  uint64_t v150 = (__int128 *)((char *)v156 - v159);
                  if (__OFSUB__(v156, v159)) {
                    goto LABEL_380;
                  }
                  if (__OFADD__(v150, 1LL)) {
                    goto LABEL_381;
                  }
                  ++v158;
                  int64_t v156 = v150;
                  if (v154 == v158) {
                    goto LABEL_156;
                  }
                }

                uint64_t v154 = v158;
                uint64_t v150 = v156;
              }

      if (v352 >= v350)
      {
LABEL_406:
        __break(1u);
LABEL_407:
        __break(1u);
        goto LABEL_408;
      }

      uint64_t v142 = *(void *)(v23 + 64);
      uint64_t v143 = *(void *)(v23 + 72);
      __int128 v144 = *(void *)(v23 + 80);
      v368 = *(_BYTE **)(v23 + 88);
      v381 = v143;
      if (v142)
      {
        if (v144 < (uint64_t)v380)
        {
LABEL_421:
          __break(1u);
          goto LABEL_422;
        }

        if (*(_WORD *)(v142 + 16) && (uint64_t)v380 < v144)
        {
          unint64_t v145 = *(unsigned __int8 *)(v142 + 18);
          if (*(_BYTE *)(v142 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v455);
            uint64_t result = swift_unknownObjectRetain();
            uint64_t v146 = v380;
            uint64_t v147 = v142;
            while (1)
            {
              uint64_t v150 = *(unsigned __int16 *)(v147 + 16);
              if (!*(_WORD *)(v147 + 16)) {
                goto LABEL_156;
              }
              uint64_t v151 = *(void *)(v147 + 40);
              unint64_t v35 = __OFSUB__(v146, v151);
              uint64_t v152 = (__int128 *)((char *)v146 - v151);
              if (v35) {
                goto LABEL_395;
              }
              if (__OFADD__(v152, 1LL)) {
                goto LABEL_396;
              }
              if ((uint64_t)v152 + 1 < 1)
              {
                uint64_t v150 = 0LL;
              }

              else
              {
                if ((_DWORD)v150 == 1)
                {
                  uint64_t v146 = v152;
LABEL_156:
                  if (v146) {
                    goto LABEL_392;
                  }
                  goto LABEL_157;
                }

                uint64_t v153 = (uint64_t *)(v147 + 64);
                uint64_t v154 = 1LL;
                while (1)
                {
                  uint64_t v155 = *v153;
                  v153 += 3;
                  uint64_t v146 = (__int128 *)((char *)v152 - v155);
                  if (__OFSUB__(v152, v155)) {
                    goto LABEL_388;
                  }
                  if (__OFADD__(v146, 1LL)) {
                    goto LABEL_389;
                  }
                  ++v154;
                  uint64_t v152 = v146;
                  if (v150 == v154) {
                    goto LABEL_156;
                  }
                }

                uint64_t v150 = v154;
                uint64_t v146 = v152;
              }

        __break(1u);
      }

      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }

    __break(1u);
LABEL_75:
    a1 = static String._copying(_:)();
    __int128 v2 = (unint64_t)v49;
    swift_bridgeObjectRelease();
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = v2;
    a2 = v2;
    if ((v2 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_76:
    __int128 v2 = (unint64_t)&v169;
    uint64_t v193 = a1;
    uint64_t v194 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v4 = HIBYTE(a2) & 0xF;
    __int128 v224 = 1;
    __int128 v223 = 1;
    __int128 v222 = 1;
    char v221 = 1;
    char v220 = 1;
    __int128 v219 = 1;
    __int128 v218 = 1;
    uint64_t v217 = 1;
    unint64_t v169 = 0LL;
    uint64_t v170 = 0LL;
    unint64_t v171 = 1;
    uint64_t v173 = 0LL;
    uint64_t v172 = 0LL;
    uint64_t v174 = 1;
    uint64_t v175 = 0uLL;
    unint64_t v176 = 1;
    unint64_t v178 = 0LL;
    uint64_t v177 = 0LL;
    unint64_t v179 = 1;
    uint64_t v181 = 0LL;
    uint64_t v180 = 0LL;
    uint64_t v182 = 1;
    unint64_t v184 = 0LL;
    unint64_t v183 = 0LL;
    uint64_t v185 = 1;
    uint64_t v186 = 0uLL;
    unint64_t v187 = 1;
    unint64_t v189 = 0LL;
    uint64_t v188 = 0LL;
    uint64_t v190 = 1;
    uint64_t v191 = 0;
    uint64_t v192 = 0;
    if (!v4)
    {
      uint64_t v168 = 1;
      uint64_t v167 = 1;
      uint64_t v166 = 1;
      uint64_t v165 = 1;
      unint64_t v164 = 1;
      uint64_t v163 = 0;
      uint64_t v162 = 1;
      unint64_t v140 = 0LL;
      unint64_t v141 = 0LL;
      uint64_t v142 = 1;
      uint64_t v143 = 0uLL;
      __int128 v144 = 1;
      unint64_t v145 = 0uLL;
      uint64_t v146 = 1;
      uint64_t v147 = 0uLL;
      uint64_t v148 = 1;
      uint64_t v149 = 0LL;
      uint64_t v150 = 0LL;
      uint64_t v151 = 1;
      uint64_t v152 = 0LL;
      uint64_t v153 = 0LL;
LABEL_96:
      uint64_t v154 = v163;
      uint64_t v155 = 0uLL;
      int64_t v156 = v162;
      unint64_t v157 = 0LL;
      unint64_t v158 = 0LL;
      uint64_t v159 = 1;
      unint64_t v160 = 0;
      unint64_t v161 = 0;
      destructiveProjectEnumData for PredicateCodableError(&v140, v8);
      outlined init with take of URLBufferParseInfo?((uint64_t)&v140, (uint64_t)&v195);
      outlined init with take of URLBufferParseInfo?((uint64_t)&v195, (uint64_t)&v140);
      int64_t v22 = v140;
      uint64_t v23 = v141;
      int64_t v30 = v142;
      int64_t v136 = v143;
      uint64_t v29 = v144;
      unint64_t v28 = v146;
      unint64_t v130 = v147;
      __int128 v132 = v145;
      uint64_t v27 = v148;
      BOOL v20 = v149;
      char v24 = v150;
      unint64_t v18 = v151;
      unint64_t v19 = v152;
      uint64_t v4 = v153;
      unint64_t v21 = v154;
      __int128 v129 = v155;
      uint64_t v26 = v156;
      char v135 = v157;
      __int128 v134 = v158;
      uint64_t v139 = v160 & 1;
      unint64_t v138 = HIBYTE(v160) & 1;
      __int128 v128 = v161 & 1;
      uint64_t v14 = v159;
      goto LABEL_129;
    }

    uint64_t v50 = a1;
    if (a1 - 35 <= 0x3A
      && (v34 = 1LL << (a1 - 35), unint64_t v16 = 0x500000030801001LL, (v34 & 0x500000030801001LL) != 0))
    {
LABEL_79:
      uint64_t v51 = 0LL;
    }

    else
    {
      unint64_t v34 = 1LL;
      unint64_t v16 = (uint64_t)&v193;
      uint64_t v9 = 0x500000030001001LL;
      uint64_t v51 = 1LL;
      while (1)
      {
        if (v4 == v51)
        {
          uint64_t v51 = HIBYTE(a2) & 0xF;
          goto LABEL_80;
        }

        unint64_t v63 = *((unsigned __int8 *)&v193 + v51++);
        uint64_t v64 = (v63 - 35);
        if (v64 <= 0x3A)
        {
          if (((1LL << v64) & 0x500000030001001LL) != 0) {
            goto LABEL_79;
          }
          if (v64 == 23) {
            break;
          }
        }
      }

      a2 = v51 - 1;
      unint64_t v169 = 0LL;
      uint64_t v170 = v51 - 1;
      unint64_t v171 = 0;
      if (v4 == v51)
      {
        if (v50 >= 0x41
          && specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( 0LL,  a2,  (uint64_t)&v193,  1u,  0))
        {
          uint64_t v168 = 0;
          uint64_t v167 = 1;
          uint64_t v166 = 1;
          uint64_t v165 = 1;
          unint64_t v164 = 1;
          uint64_t v163 = 0;
          uint64_t v162 = 1;
          unint64_t v140 = 0LL;
          unint64_t v141 = v51 - 1;
          uint64_t v142 = 0;
          uint64_t v143 = 0uLL;
          __int128 v144 = 1;
          unint64_t v145 = 0uLL;
          uint64_t v146 = 1;
          uint64_t v147 = 0uLL;
          uint64_t v148 = 1;
          uint64_t v149 = 0LL;
          uint64_t v150 = 0LL;
          uint64_t v151 = 1;
          uint64_t v152 = v4;
          uint64_t v153 = v4;
          goto LABEL_96;
        }

        goto LABEL_141;
      }

      if (v50 < 0x41
        || !specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( 0LL,  v51 - 1,  (uint64_t)&v193,  1u,  0))
      {
        goto LABEL_141;
      }
    }

    LODWORD(v122) = (v107 < v124) & ~(_DWORD)v59;
    if (v108 < v121) {
      unint64_t v122 = v122;
    }
    else {
      unint64_t v122 = 0LL;
    }
    unint64_t v120 = v107 + v122;
LABEL_152:
    unint64_t v42 = 0x60504030A0201uLL >> (8 * v126);
    char v44 = v126;
    uint64_t v41 = v119 * v120;
LABEL_44:
    *(double *)uint64_t v148 = v26;
    *((double *)v148 + 1) = v46;
    LOBYTE(v142[0]) = v42;
    if (__OFSUB__(0LL, v41))
    {
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      swift_release();
      __break(1u);
      JUMPOUT(0x183280108LL);
    }

    v143[0] = v14;
    *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)v142,  -v41,  (Foundation::Date)v40,  (Swift::Bool)v143);
    int64_t v136 = v42;
    if ((_DWORD)v132)
    {
      time = v146._time;
      char v44 = 1;
      if ((v147 & 1) == 0)
      {
        v142[0] = v146._time;
        LOBYTE(v144) = v42;
        *(double *)uint64_t v148 = v26;
        *((double *)v148 + 1) = v46;
        Date.aligned(to:of:in:)((v59 & 1) == 0, (char *)&v144, (uint64_t)v148, (uint64_t)v143);
        time = v143[0];
        char v44 = LOBYTE(v143[1]);
      }

      *(void *)&v143[0] = 0x2000LL;
      uint64_t v61 = 1.59271755e13;
      if (v14 <= 1.59271755e13) {
        uint64_t v61 = v14;
      }
      uint64_t v62 = fmax(v61, -2.11845067e11);
      unint64_t v63 = swift_getObjectType();
      v142[0] = v62;
      uint64_t v64 = v46;
      int64_t v65 = *(void (**)(_OWORD *__return_ptr, double *, double *, uint64_t, void))(*(void *)&v46 + 192LL);
      swift_unknownObjectRetain();
      v65(v148, v143, v142, v63, *(void *)&v64);
      outlined release of DateComponents((uint64_t)v148);
      uint64_t result = swift_unknownObjectRelease();
      if ((BYTE8(v148[10]) & 1) != 0)
      {
        unint64_t v66 = 0LL;
        if ((v59 & 1) == 0) {
          goto LABEL_52;
        }
LABEL_69:
        BOOL v46 = v138;
        LOBYTE(v42) = v136;
        if ((v44 & 1) == 0) {
LABEL_70:
        }
          time = (double)v66 * 0.000000001 + time;
LABEL_71:
        if ((v44 & 1) != 0)
        {
LABEL_72:
          void *v43 = 0.0;
          uint64_t v74 = 2;
          goto LABEL_107;
        }

  __break(1u);
LABEL_149:
  __break(1u);
  return result;
}

  uint64_t v57 = 4LL;
LABEL_149:
  *(void *)&__src[13] = v57;
  BYTE8(__src[13]) = 0;
  if ((v12 & 0x400) == 0)
  {
LABEL_62:
    if ((v12 & 0x800) == 0) {
      goto LABEL_63;
    }
    goto LABEL_153;
  }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }

  if (v24 < v23 >> 14)
  {
    uint64_t v26 = 0LL;
    while (1)
    {
      uint64_t v13 = __OFSUB__(v26--, 1LL);
      if (v13) {
        goto LABEL_154;
      }
      if ((v22 & 0x1000000000000000LL) == 0) {
        break;
      }
      uint64_t v23 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_52:
      if (v24 >= v23 >> 14) {
        goto LABEL_69;
      }
    }

    if ((v22 & 0x2000000000000000LL) != 0)
    {
      __int128 v72 = v21;
      uint64_t v73 = v22 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v72 + (v23 >> 16) - 1) & 0xC0) == 0x80)
      {
        unint64_t v33 = 0LL;
        do
          unint64_t v35 = *((_BYTE *)&v71 + (v23 >> 16) + v33-- + 6) & 0xC0;
        while (v35 == 128);
        goto LABEL_65;
      }
    }

    else
    {
      uint64_t v32 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v21 & 0x1000000000000000LL) == 0) {
        uint64_t v32 = _StringObject.sharedUTF8.getter();
      }
      if ((*(_BYTE *)((v23 >> 16) + v32 - 1) & 0xC0) == 0x80)
      {
        unint64_t v33 = 0LL;
        do
          unint64_t v34 = *(_BYTE *)(v32 + (v23 >> 16) - 2 + v33--) & 0xC0;
        while (v34 == 128);
LABEL_65:
        int64_t v36 = 1 - v33;
LABEL_67:
        uint64_t v23 = (v23 - (v36 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
        goto LABEL_52;
      }
    }

    int64_t v36 = 1LL;
    goto LABEL_67;
  }

  uint64_t v26 = 0LL;
LABEL_69:
  swift_bridgeObjectRetain();
  uint64_t v37 = static String._copying(_:)();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  Swift::Int v40 = _StringGuts.validateInclusiveScalarIndex(_:)(0xFuLL, v37, v39);
  if (v7 < 0)
  {
    uint64_t v47 = 0LL;
    while (1)
    {
      if (v40 < 0x10000) {
        goto LABEL_151;
      }
      if ((v39 & 0x1000000000000000LL) == 0) {
        break;
      }
      Swift::Int v40 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_88:
      if (v7 >= --v47) {
        goto LABEL_104;
      }
    }

    uint64_t v48 = v40 >> 16;
    if ((v39 & 0x2000000000000000LL) != 0)
    {
      __int128 v72 = v37;
      uint64_t v73 = v39 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v72 + v48 - 1) & 0xC0) == 0x80)
      {
        uint64_t v50 = 0LL;
        do
          uint64_t v52 = *((_BYTE *)&v71 + v48 + v50-- + 6) & 0xC0;
        while (v52 == 128);
        goto LABEL_101;
      }
    }

    else
    {
      uint64_t v49 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v37 & 0x1000000000000000LL) == 0) {
        uint64_t v49 = _StringObject.sharedUTF8.getter();
      }
      if ((*(_BYTE *)(v48 + v49 - 1) & 0xC0) == 0x80)
      {
        uint64_t v50 = 0LL;
        do
          uint64_t v51 = *(_BYTE *)(v49 + v48 - 2 + v50--) & 0xC0;
        while (v51 == 128);
LABEL_101:
        unint64_t v53 = 1 - v50;
LABEL_103:
        Swift::Int v40 = ((v48 - v53) << 16) | 5;
        goto LABEL_88;
      }
    }

    unint64_t v53 = 1LL;
    goto LABEL_103;
  }

  if (v7)
  {
    if ((v39 & 0x2000000000000000LL) != 0) {
      uint64_t v41 = HIBYTE(v39) & 0xF;
    }
    else {
      uint64_t v41 = v37 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      unint64_t v42 = v40 >> 16;
      if (v40 >> 16 >= v41) {
        goto LABEL_149;
      }
      if ((v39 & 0x1000000000000000LL) != 0)
      {
        Swift::Int v40 = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--v7) {
          break;
        }
      }

      else
      {
        if ((v39 & 0x2000000000000000LL) != 0)
        {
          __int128 v72 = v37;
          uint64_t v73 = v39 & 0xFFFFFFFFFFFFFFLL;
          char v44 = *((unsigned __int8 *)&v72 + v42);
        }

        else
        {
          unint64_t v43 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v37 & 0x1000000000000000LL) == 0) {
            unint64_t v43 = _StringObject.sharedUTF8.getter();
          }
          char v44 = *(unsigned __int8 *)(v43 + v42);
        }

        unint64_t v45 = (char)v44;
        BOOL v46 = __clz(v44 ^ 0xFF) - 24;
        if (v45 >= 0) {
          LOBYTE(v46) = 1;
        }
        Swift::Int v40 = ((v42 + v46) << 16) | 5;
        if (!--v7) {
          break;
        }
      }
    }
  }

            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
        }

        uint64_t v50 = v56;
      }

  if (v129[15])
  {
    unint64_t v69 = 1LL;
    goto LABEL_156;
  }

  if (v129[13])
  {
    unint64_t v69 = 0LL;
    goto LABEL_156;
  }

  if (v129[16])
  {
    unint64_t v69 = 2LL;
    goto LABEL_156;
  }

  if (v129[14])
  {
    unint64_t v69 = -1LL;
LABEL_156:
    if (!a4) {
      a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
    }
    unint64_t v70 = (void *)[a4 dateByAddingYears:0 months:0 days:v69 hours:0 minutes:0 seconds:0];
    unint64_t v66 = [v70 monthOfYear];
    uint64_t v67 = [v70 dayOfMonth];
    unint64_t v68 = [v70 yearOfCommonEra];
  }

  if (v129[26])
  {
    if (v129[24])
    {
      if (!a4) {
        a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
      }
      unint64_t v68 = [a4 yearOfCommonEra] + 1;
      v129[24] = 0;
    }

    else if (v129[25])
    {
      if (!a4) {
        a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
      }
      unint64_t v68 = [a4 yearOfCommonEra] - 1;
      v129[25] = 0;
    }

    goto LABEL_174;
  }

  if (!v129[27]) {
    goto LABEL_174;
  }
  if (v129[24])
  {
    v129[24] = 0;
    int64_t v71 = 1LL;
    if (!a4) {
      goto LABEL_167;
    }
  }

  else
  {
    Swift::Int v75 = v129[25];
    v129[25] = 0;
    if (!v75) {
      goto LABEL_174;
    }
    int64_t v71 = -1LL;
    if (!a4) {
LABEL_167:
    }
      a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
  }

  __int128 v72 = (void *)[a4 dateByAddingYears:0 months:v71 days:0 hours:0 minutes:0 seconds:0];
  unint64_t v66 = [v72 monthOfYear];
  if (v68 == -1) {
    unint64_t v68 = [v72 yearOfCommonEra];
  }
LABEL_174:
  if (!v67)
  {
    if (v129[17])
    {
      uint64_t v74 = 0LL;
    }

    else if (v129[18])
    {
      uint64_t v74 = 1LL;
    }

    else if (v129[19])
    {
      uint64_t v74 = 2LL;
    }

    else if (v129[20])
    {
      uint64_t v74 = 3LL;
    }

    else if (v129[21])
    {
      uint64_t v74 = 4LL;
    }

    else if (v129[22])
    {
      uint64_t v74 = 5LL;
    }

    else
    {
      if (!v129[23])
      {
        uint64_t v73 = 0LL;
        goto LABEL_208;
      }

      uint64_t v74 = 6LL;
    }

    if (v129[25])
    {
      uint64_t v76 = &v129[25];
      if (!a4) {
        a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
      }
      unint64_t v77 = [a4 dayOfWeek];
      if (v74 >= v77) {
        unint64_t v78 = v74 - v77 - 7;
      }
      else {
        unint64_t v78 = v74 - v77;
      }
    }

    else
    {
      if (!a4) {
        a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
      }
      char v79 = [a4 dayOfWeek];
      if (v74 - v79 >= 1) {
        unint64_t v78 = v74 - v79;
      }
      else {
        unint64_t v78 = v74 - v79 + 7;
      }
      uint64_t v76 = &v129[24];
    }

    *uint64_t v76 = 0;
    if (v78) {
      uint64_t v73 = (id)[a4 dateByAddingYears:0 months:0 days:v78 hours:0 minutes:0 seconds:0];
    }
    else {
      uint64_t v73 = a4;
    }
LABEL_208:
    if (!v129[28]) {
      goto LABEL_213;
    }
    if (v129[24])
    {
      v129[24] = 0;
      unint64_t v80 = 7LL;
      if (a4)
      {
LABEL_212:
        uint64_t v73 = (id)[a4 dateByAddingYears:0 months:0 days:v80 hours:0 minutes:0 seconds:0];
        goto LABEL_213;
      }
    }

    else
    {
      uint64_t v107 = v129[25];
      v129[25] = 0;
      if (!v107) {
        goto LABEL_213;
      }
      unint64_t v80 = -7LL;
      if (a4) {
        goto LABEL_212;
      }
    }

    a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
    goto LABEL_212;
  }

  uint64_t v73 = 0LL;
LABEL_213:
  for (uint64_t i = 0LL; i != 24; ++i)
  {
    if (v129[i + 29])
    {
      int64_t v22 = 0LL;
      unint64_t v21 = 0LL;
      char v25 = i;
    }
  }

  uint64_t v82 = v25 == -1;
  BOOL v83 = 1LL;
  if (v25 == -1) {
    BOOL v83 = 2LL;
  }
  if (v68 == -1) {
    uint64_t v82 = v83;
  }
  uint64_t v84 = v66 == 0;
  if (!v67) {
    ++v84;
  }
  uint64_t v85 = v84 + v82;
  if (!(v84 + v82)) {
    goto LABEL_290;
  }
  int64_t v86 = v127 != -1;
  uint64_t v87 = 1LL;
  if ((void)v127 != -1LL) {
    uint64_t v87 = 2LL;
  }
  if (*((void *)&v127 + 1) != -1LL) {
    int64_t v86 = v87;
  }
  if ((void)v128 != -1LL) {
    ++v86;
  }
  if (*((void *)&v128 + 1) != -1LL) {
    ++v86;
  }
  uint64_t v88 = v25 == -1 && v85 > v86;
  uint64_t v89 = v88;
  uint64_t v90 = v85 - v89;
  uint64_t v91 = v68 == -1 && v90 > v86;
  unint64_t v92 = v91;
  uint64_t v93 = v90 - v92;
  uint64_t v94 = !v66 && v93 > v86;
  uint64_t v95 = v94;
  if (!v86) {
    goto LABEL_290;
  }
  uint64_t v96 = 0LL;
  while (2)
  {
    unint64_t v97 = 0LL;
    uint64_t v98 = *((void *)&v127 + v96);
    unint64_t v99 = v25 != -1 || v89;
    if (v66) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v95;
    }
    __int128 v101 = v68 != -1 || v92;
    while (2)
    {
      unint64_t v102 = *(unsigned __int16 *)((char *)v130 + v97);
      if (v102 <= 0x4C)
      {
        if (v102 == 68)
        {
          if (!v67)
          {
            uint64_t v67 = *((void *)&v127 + v96);
            if (v98 > 31) {
              return 0LL;
            }
            goto LABEL_274;
          }
        }

        else
        {
          if (v102 != 72) {
            return 0LL;
          }
          if ((v99 & 1) == 0)
          {
            char v25 = *((void *)&v127 + v96);
            if (v98 > 23) {
              return 0LL;
            }
            goto LABEL_274;
          }
        }

        goto LABEL_273;
      }

      if (v102 != 77)
      {
        if (v102 != 89) {
          return 0LL;
        }
        if ((v101 & 1) == 0)
        {
          if (v98 > 99)
          {
            unint64_t v68 = *((void *)&v127 + v96);
          }

          else if (dateWithNaturalLanguageString_date_locale__doExcelLittleY)
          {
            if (v98 >= 30) {
              uint64_t v103 = 1900LL;
            }
            else {
              uint64_t v103 = 2000LL;
            }
            unint64_t v68 = v103 + v98;
          }

          else
          {
            unint64_t v68 = v98 + 1900;
          }

          goto LABEL_274;
        }

        goto LABEL_273;
      }

      if ((v100 & 1) != 0)
      {
LABEL_273:
        v97 += 2LL;
        if (v97 == 8) {
          goto LABEL_274;
        }
        continue;
      }

      break;
    }

    unint64_t v66 = *((void *)&v127 + v96);
    if (v98 > 12) {
      return 0LL;
    }
LABEL_274:
    if (++v96 != v86) {
      continue;
    }
    break;
  }

LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }

    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    Swift::Int v40 = v65;
    uint64_t v41 = v35;
    while (1)
    {
      unint64_t v43 = *(unsigned __int16 *)(v41 + 16);
      if (!*(_WORD *)(v41 + 16)) {
        goto LABEL_39;
      }
      char v44 = *(void *)(v41 + 40);
      char v24 = __OFSUB__(v40, v44);
      unint64_t v45 = v40 - v44;
      if (v24) {
        goto LABEL_85;
      }
      if (__OFADD__(v45, 1LL)) {
        goto LABEL_86;
      }
      if (v45 + 1 > 0) {
        break;
      }
      unint64_t v43 = 0LL;
LABEL_40:
      unint64_t v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      uint64_t v39 = ((-15LL << v42) - 1) & v39 | (v43 << v42);
      uint64_t v41 = *(void *)(v41 + 24 + 24 * v43);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      if (!*(_BYTE *)(v41 + 18))
      {
        v39 &= 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v52 = *(unsigned __int16 *)(v41 + 16);
        if (*(_WORD *)(v41 + 16)) {
          goto LABEL_61;
        }
LABEL_72:
        if (!v40)
        {
LABEL_73:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v50 = v39 | (v52 << 8);
LABEL_57:
          swift_unknownObjectRetain();
          uint64_t v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v50, v41, v35, v37);
          uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
          goto LABEL_75;
        }

      unint64_t v58 = 512LL;
    }
  }

      unint64_t v58 = 512LL;
    }
  }

  if ((v101 & 1) == 0) {
    goto LABEL_81;
  }
LABEL_93:
  if (v12 != (unsigned __int8 *)specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)v14,  v9,  v104))
  {
    BOOL v83 = 0LL;
    uint64_t v82 = 0LL;
    BOOL v81 = 0LL;
    unint64_t v80 = 0LL;
    LOBYTE(v15) = 1;
    goto LABEL_101;
  }

    unint64_t v45 = 0LL;
    goto LABEL_100;
  }

          outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_58;
        }
      }

      else if (!v84)
      {
        goto LABEL_48;
      }

        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v11,  a2,  a3,  v65,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v185,  0LL,  0LL);
        break;
    }

    goto LABEL_93;
  }

  uint64_t v170 = a2;
  unint64_t v171 = a3;
  uint64_t v166 = a1;
  uint64_t v167 = a4;
  st_mode = v182.st_mode;
  st_nlink = v182.st_nlink;
  st_dev = v182.st_dev;
  st_ino = v182.st_ino;
  *(void *)unint64_t v176 = v182.st_uid;
  *(void *)uint64_t v177 = v182.st_gid;
  st_rdev = v182.st_rdev;
  st_size = v182.st_size;
  st_flags = v182.st_flags;
  tv_sec = v182.st_mtimespec.tv_sec;
  tv_nsec = v182.st_mtimespec.tv_nsec;
  unint64_t v16 = v182.st_ctimespec.tv_sec;
  int64_t v17 = v182.st_ctimespec.tv_nsec;
  unint64_t v18 = specialized UInt16._fileType.getter(v182.st_mode);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  unint64_t v179 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSFileAttributeKey, Any)>);
  unint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1837C2F30;
  *(void *)(v19 + 32) = @"NSFileSize";
  BOOL v20 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  unint64_t v21 = @"NSFileSize";
  int64_t v22 = objc_msgSend(v20, sel_initWithLongLong_, st_size);
  uint64_t v23 = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(void *)(v19 + 40) = v22;
  *(void *)(v19 + 64) = v23;
  *(void *)(v19 + 72) = @"NSFileModificationDate";
  *(double *)(v19 + 80) = (double)tv_sec + -978307200.0 + (double)tv_nsec / 1000000000.0;
  *(void *)(v19 + 104) = &type metadata for Date;
  *(void *)(v19 + 112) = @"NSFileCreationDate";
  *(double *)(v19 + 120) = (double)v16 + -978307200.0 + (double)v17 / 1000000000.0;
  *(void *)(v19 + 144) = &type metadata for Date;
  *(void *)(v19 + 152) = @"NSFilePosixPermissions";
  uint64_t v165 = st_mode;
  char v24 = st_mode & 0xFFF;
  char v25 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  uint64_t v26 = @"NSFileModificationDate";
  uint64_t v163 = @"NSFileCreationDate";
  uint64_t v27 = @"NSFilePosixPermissions";
  unint64_t v28 = v23;
  *(void *)(v19 + 160) = objc_msgSend(v25, sel_initWithLongLong_, v24);
  *(void *)(v19 + 184) = v23;
  *(void *)(v19 + 192) = @"NSFileReferenceCount";
  uint64_t v29 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  int64_t v30 = @"NSFileReferenceCount";
  *(void *)(v19 + 200) = objc_msgSend(v29, sel_initWithLongLong_, st_nlink);
  *(void *)(v19 + 224) = v23;
  *(void *)(v19 + 232) = @"NSFileSystemNumber";
  unint64_t v31 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  uint64_t v32 = @"NSFileSystemNumber";
  *(void *)(v19 + 240) = objc_msgSend(v31, sel_initWithLongLong_, st_dev);
  *(void *)(v19 + 264) = v23;
  *(void *)(v19 + 272) = @"NSFileSystemFileNumber";
  unint64_t v33 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  unint64_t v34 = @"NSFileSystemFileNumber";
  unint64_t v35 = &selRef_initWithUnsignedLongLong_;
  if (st_ino >= 0) {
    unint64_t v35 = &selRef_initWithLongLong_;
  }
  int64_t v36 = [v33 *v35];
  *((void *)&v186 + 1) = v23;
  *(void *)&uint64_t v185 = v36;
  outlined init with take of Any(&v185, (_OWORD *)(v19 + 280));
  *(void *)(v19 + 312) = @"NSFileType";
  uint64_t v37 = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(void *)(v19 + 320) = v179;
  uint64_t v162 = v37;
  *(void *)(v19 + 344) = v37;
  *(void *)(v19 + 352) = @"NSFileOwnerAccountID";
  uint64_t v38 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  uint64_t v39 = @"NSFileType";
  swift_unknownObjectRetain();
  Swift::Int v40 = @"NSFileOwnerAccountID";
  *(void *)(v19 + 360) = objc_msgSend(v38, sel_initWithLongLong_, *(void *)v176);
  *(void *)(v19 + 384) = v28;
  *(void *)(v19 + 392) = @"NSFileGroupOwnerAccountID";
  uint64_t v41 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  unint64_t v42 = @"NSFileGroupOwnerAccountID";
  unint64_t v43 = objc_msgSend(v41, sel_initWithLongLong_, *(void *)v177);
  *(void *)(v19 + 424) = v28;
  *(void *)(v19 + 400) = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
  char v44 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v45 = (uint64_t)(v44 + 8);
  swift_retain();
  BOOL v46 = 32LL;
  uint64_t v47 = (unint64_t)&demangling cache variable for type metadata for (NSFileAttributeKey, Any);
  do
  {
    outlined init with copy of (Hashable & Sendable)?( v19 + v46,  (uint64_t)&v185,  &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
    uint64_t v48 = v185;
    uint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v185);
    if ((v50 & 1) != 0)
    {
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      swift_once();
LABEL_95:
      unint64_t v158 = (void *)_nilObjCError;
      uint64_t v159 = (id)_nilObjCError;
      swift_willThrow();
      swift_release();

      swift_release();
      swift_release();
      __int128 v134 = 0LL;
      char v135 = v167;
      int64_t v136 = v165;
      goto LABEL_70;
    }

    *(void *)(v45 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v49;
    *(void *)(v44[6] + 8 * v49) = v48;
    outlined init with take of Any((__int128 *)((char *)&v185 + 8), (_OWORD *)(v44[7] + 32 * v49));
    uint64_t v51 = v44[2];
    uint64_t v52 = __OFADD__(v51, 1LL);
    unint64_t v53 = v51 + 1;
    if (v52) {
      goto LABEL_99;
    }
    v44[2] = v53;
    v46 += 40LL;
  }

  while (v46 != 432);
  swift_release();
  swift_bridgeObjectRelease();
  v187[0] = (uint64_t)v44;
  unint64_t v54 = getpwuid(v176[0]);
  if (v54 && v54->pw_name)
  {
    unint64_t v55 = String.init(cString:)();
    *((void *)&v186 + 1) = MEMORY[0x189617FA8];
    *(void *)&uint64_t v185 = v55;
    *((void *)&v185 + 1) = v56;
    specialized Dictionary.subscript.setter((uint64_t)&v185, @"NSFileOwnerAccountName");
  }

  uint64_t v57 = getgrgid(v177[0]);
  if (v57 && v57->gr_name)
  {
    unint64_t v58 = String.init(cString:)();
    *((void *)&v186 + 1) = MEMORY[0x189617FA8];
    *(void *)&uint64_t v185 = v58;
    *((void *)&v185 + 1) = v59;
    specialized Dictionary.subscript.setter((uint64_t)&v185, @"NSFileGroupOwnerAccountName");
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
  char v60 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileTypeBlockSpecial");
  unint64_t v63 = v62;
  if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(v60) && v63 == v64)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_25;
  }

  unint64_t v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) != 0)
  {
LABEL_25:
    swift_unknownObjectRelease();
    goto LABEL_26;
  }

  uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileTypeCharacterSpecial");
  uint64_t v149 = v148;
  if (v147 == static String._unconditionallyBridgeFromObjectiveC(_:)(v60) && v149 == v150)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_26:
    uint64_t v67 = &off_189C61000;
LABEL_27:
    unint64_t v68 = objc_allocWithZone((Class)v67[355]);
    unint64_t v69 = @"NSFileDeviceIdentifier";
    unint64_t v70 = objc_msgSend(v68, sel_initWithLongLong_, st_rdev);
    *((void *)&v186 + 1) = v28;
    *(void *)&uint64_t v185 = v70;
    specialized Dictionary.subscript.setter((uint64_t)&v185, v69);
  }

  else
  {
    unint64_t v160 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v67 = &off_189C61000;
    if ((v160 & 1) != 0) {
      goto LABEL_27;
    }
  }

  int64_t v71 = objc_allocWithZone((Class)v67[355]);
  __int128 v72 = @"NSFileImmutable";
  uint64_t v73 = objc_msgSend(v71, sel_initWithBool_, (st_flags & 0x20002) != 0);
  *((void *)&v186 + 1) = v28;
  *(void *)&uint64_t v185 = v73;
  specialized Dictionary.subscript.setter((uint64_t)&v185, v72);
  uint64_t v74 = objc_allocWithZone((Class)v67[355]);
  Swift::Int v75 = @"NSFileAppendOnly";
  uint64_t v76 = objc_msgSend(v74, sel_initWithBool_, (st_flags & 0x40004) != 0);
  unint64_t v169 = v28;
  *((void *)&v186 + 1) = v28;
  *(void *)&uint64_t v185 = v76;
  specialized Dictionary.subscript.setter((uint64_t)&v185, v75);
  swift_unknownObjectRelease();
  uint64_t v181 = v187[0];
  LOBYTE(v183) = 0;
  uint64_t v185 = 0uLL;
  *(void *)&uint64_t v186 = 0LL;
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)(v170, v171, (unsigned __int8 *)&v183, (uint64_t)&v185, v187);
  *(void *)unint64_t v176 = v187[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  unint64_t v77 = swift_allocObject();
  unint64_t v78 = (void *)*MEMORY[0x189603C30];
  *(void *)(v77 + 32) = *MEMORY[0x189603C30];
  *(void *)unint64_t v178 = v77 + 32;
  char v79 = (void *)*MEMORY[0x189603B88];
  *(void *)(v77 + 40) = *MEMORY[0x189603B88];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  unint64_t v80 = static _SetStorage.allocate(capacity:)();
  uint64_t v180 = v80 + 56;
  uint64_t v172 = v78;
  BOOL v81 = v79;
  uint64_t v82 = 0;
  BOOL v83 = 0LL;
  while (2)
  {
    uint64_t v84 = v82;
    uint64_t v85 = *(void **)(*(void *)v178 + 8 * v83);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    Hasher.init(_seed:)();
    unint64_t v45 = v85;
    String.hash(into:)();
    int64_t v86 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v87 = -1LL << *(_BYTE *)(v80 + 32);
    uint64_t v47 = v86 & ~v87;
    uint64_t v88 = v47 >> 6;
    uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
    uint64_t v90 = 1LL << v47;
    if (((1LL << v47) & v89) != 0)
    {
      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
      uint64_t v93 = v92;
      if (v91 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v93 == v94) {
        goto LABEL_29;
      }
      uint64_t v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v96 & 1) != 0) {
        goto LABEL_30;
      }
      unint64_t v97 = ~v87;
      uint64_t v47 = (v47 + 1) & v97;
      uint64_t v88 = v47 >> 6;
      uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
      uint64_t v90 = 1LL << v47;
      if ((v89 & (1LL << v47)) == 0) {
        goto LABEL_59;
      }
      uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
      unint64_t v100 = v99;
      if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v100 == v101) {
        goto LABEL_29;
      }
      uint64_t v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v103 & 1) != 0) {
        goto LABEL_30;
      }
      uint64_t v47 = (v47 + 1) & v97;
      uint64_t v88 = v47 >> 6;
      uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
      uint64_t v90 = 1LL << v47;
      if ((v89 & (1LL << v47)) == 0) {
        goto LABEL_59;
      }
      uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
      uint64_t v106 = v105;
      if (v104 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v106 == v107) {
        goto LABEL_29;
      }
      __int128 v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v108 & 1) != 0) {
        goto LABEL_30;
      }
      uint64_t v47 = (v47 + 1) & v97;
      uint64_t v88 = v47 >> 6;
      uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
      uint64_t v90 = 1LL << v47;
      if ((v89 & (1LL << v47)) == 0) {
        goto LABEL_59;
      }
      uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
      uint64_t v111 = v110;
      if (v109 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v111 == v112)
      {
LABEL_29:
        swift_bridgeObjectRelease_n();
        goto LABEL_30;
      }

      uint64_t v113 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v113 & 1) == 0)
      {
        do
        {
          uint64_t v47 = (v47 + 1) & v97;
          uint64_t v88 = v47 >> 6;
          uint64_t v89 = *(void *)(v180 + 8 * (v47 >> 6));
          uint64_t v90 = 1LL << v47;
          if ((v89 & (1LL << v47)) == 0) {
            goto LABEL_59;
          }
          uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v80 + 48) + 8 * v47));
          __int128 v116 = v115;
          if (v114 == static String._unconditionallyBridgeFromObjectiveC(_:)(v85) && v116 == v117) {
            goto LABEL_29;
          }
          uint64_t v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        while ((v119 & 1) == 0);
      }

          int64_t v36 = (v41 - 1) & v41;
          Swift::Int v40 = __clz(__rbit64(v41)) + (v35 << 6);
        }

        unint64_t v43 = *(unsigned __int8 *)(*(void *)(v76 + 48) + v40);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v43);
        char v44 = Hasher._finalize()();
        unint64_t v45 = -1LL << *(_BYTE *)(v20 + 32);
        BOOL v46 = v44 & ~v45;
        uint64_t v47 = v46 >> 6;
        if (((-1LL << v46) & ~*(void *)(v37 + 8 * (v46 >> 6))) != 0)
        {
          uint64_t v38 = __clz(__rbit64((-1LL << v46) & ~*(void *)(v37 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_77;
        }

        uint64_t v48 = 0;
        uint64_t v49 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v49 && (v48 & 1) != 0)
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
            goto LABEL_153;
          }

          uint64_t v50 = v47 == v49;
          if (v47 == v49) {
            uint64_t v47 = 0LL;
          }
          v48 |= v50;
          uint64_t v51 = *(void *)(v37 + 8 * v47);
        }

        while (v51 == -1);
        uint64_t v38 = __clz(__rbit64(~v51)) + (v47 << 6);
LABEL_77:
        *(void *)(v37 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v38;
        *(_BYTE *)(*(void *)(v20 + 48) + v38) = v43;
        ++*(void *)(v20 + 16);
        if (!--v19) {
          goto LABEL_108;
        }
      }
    }

    return v1;
  }

  else
  {
    swift_release();
    return MEMORY[0x18961AFF8];
  }

    swift_release();
    goto LABEL_93;
  }

  char v24 = 0LL;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0LL;
  unint64_t v28 = 24LL;
  if ((a1 & 1) == 0) {
    unint64_t v28 = 10LL;
  }
  uint64_t v84 = v20;
  uint64_t v85 = &v105[v28];
  uint64_t v82 = &v105[v28 + 1];
  uint64_t v29 = 1;
  int64_t v30 = v99;
  uint64_t v95 = v21;
  uint64_t v96 = v23;
  while (1)
  {
    uint64_t v103 = v25;
    uint64_t v104 = v26;
    if (v26)
    {
      if ((v25 & 0x80) == 0)
      {
        unint64_t v102 = v29;
        lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser();
        unint64_t v70 = v25;
        int64_t v71 = v24;
        __int128 v72 = Locale.Language.components.modify();
        specialized RangeReplaceableCollection.remove(at:)(0LL);
        int64_t v30 = v99;
        ((void (*)(void *, void))v72)(v105, 0LL);
        uint64_t v29 = v102;
        char v24 = v71;
        unint64_t v21 = v95;
        char v44 = (v70 + 1);
        goto LABEL_49;
      }

      if (!a5) {
        goto LABEL_37;
      }
      unint64_t v42 = a5;
    }

    else
    {
      uint64_t v41 = (char)*a5++;
      unint64_t v42 = a5;
      unint64_t v43 = v41;
      if ((v41 & 0x80000000) == 0)
      {
        char v44 = v43 + 1;
        goto LABEL_49;
      }

      char v25 = v25 & 0xFFFFFF00 | v43;
      uint64_t v26 = 8;
    }

    a5 = v42 + 1;
    char v25 = ((-255 << v26) - 1) & v25 | (*v42 << v26);
    unint64_t v45 = v26 + 8;
    if ((v26 + 8) < 0x20u)
    {
      a5 = v42 + 2;
      char v25 = ((-255 << v45) - 1) & v25 | (v42[1] << v45);
      unint64_t v45 = v26 + 16;
      if ((v26 + 16) <= 0x1Fu)
      {
        a5 = v42 + 3;
        char v25 = ((-255 << v45) - 1) & v25 | (v42[2] << v45);
        unint64_t v45 = v26 + 24;
        if ((v26 + 24) <= 0x1Fu)
        {
          a5 = v42 + 4;
          char v25 = ((-255 << v45) - 1) & v25 | (v42[3] << v45);
          unint64_t v45 = v26 + 32;
          if (v26 >= 0xE0u)
          {
            if (a5 == (unsigned __int8 *)v23
              || (char v25 = ((-255 << v26) - 1) & v25 | (v42[4] << v26), v45 = v26 + 40, (v26 + 40) < 0x20u))
            {
LABEL_33:
              uint64_t v26 = v45;
              a5 = (unsigned __int8 *)v23;
              if (!v45)
              {
                a5 = (unsigned __int8 *)v23;
                goto LABEL_9;
              }

              goto LABEL_37;
            }

            a5 = v42 + 5;
          }
        }
      }
    }

    uint64_t v26 = v45;
LABEL_37:
    if ((v25 & 0xC0E0) == 0x80C0)
    {
      if ((v25 & 0x1E) == 0) {
        goto LABEL_84;
      }
      BOOL v46 = 16;
    }

    else if ((v25 & 0xC0C0F0) == 0x8080E0)
    {
      if ((v25 & 0x200F) == 0 || (v25 & 0x200F) == 0x200D) {
        goto LABEL_84;
      }
      BOOL v46 = 24;
    }

    else
    {
      if ((v25 & 0xC0C0C0F8) != 0x808080F0 || (v25 & 0x3007) == 0 || __rev16(v25 & 0x3007) > 0x400)
      {
LABEL_84:
        Unicode.UTF8.ForwardParser._invalidLength()();
        int64_t v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        swift_allocError();
        uint64_t v76 = 2;
LABEL_90:
        *Swift::Int v75 = v76;
        goto LABEL_91;
      }

      BOOL v46 = 32;
    }

    uint64_t v103 = (unint64_t)v25 >> v46;
    uint64_t v104 = v26 - v46;
    char v44 = ((1 << (v46 >> 1) << (v46 >> 1)) - 1) & (v25 + 16843009);
LABEL_49:
    uint64_t v47 = 4LL - (__clz(v44) >> 3);
    switch(v47)
    {
      case 1LL:
        uint64_t v48 = v44 - 1;
        break;
      case 2LL:
        uint64_t v48 = (((v44 - 257) & 0x1F) << 6) | ((v44 - 257) >> 8) & 0x3F;
        break;
      case 3LL:
        uint64_t v48 = ((v44 - 65793) >> 2) & 0xFC0 | ((v44 - 65793) >> 16) & 0x3F | (((v44 - 65793) & 0xF) << 12);
        break;
      default:
        uint64_t v48 = ((v44 - 16843009) >> 10) & 0xFC0 | ((v44 - 16843009) >> 24) & 0x3F | ((((v44 - 16843009) >> 8) & 0x3F) << 12) & 0xFFE3FFFF | (((v44 - 16843009) & 7) << 18);
        break;
    }

    uint64_t v49 = v48 != 0;
    if (!v48) {
      char v24 = v27;
    }
    if (!((v48 == 0) | v29 & 1))
    {
      int64_t v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
      swift_allocError();
      uint64_t v76 = 1;
      goto LABEL_90;
    }

    unint64_t v102 = v29;
    unint64_t v100 = v103;
    __int128 v101 = v104;
    if (v48 < 0x80)
    {
      char v59 = v7;
      char v60 = v22;
      uint64_t v61 = v22;
      uint64_t v62 = v98;
      unint64_t v63 = v21;
      specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( v61,  v98,  (uint64_t)v30,  v21);
      if (v59) {
        goto LABEL_92;
      }
      uint64_t v64 = v30[2];
      Swift::Int v40 = v102;
      if (v64 >= v63)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        int64_t v30 = (uint64_t *)swift_allocError();
        *char v79 = 0;
        swift_willThrow();
        swift_release();
        goto LABEL_93;
      }

      unint64_t v21 = v63;
      *(_BYTE *)(v62 + v64) = v48;
      v30[2] = v64 + 1;
      int64_t v22 = v60;
      uint64_t v7 = 0LL;
      uint64_t v23 = v96;
      goto LABEL_16;
    }

    uint64_t v93 = a5;
    uint64_t v94 = v24;
    uint64_t v50 = v7;
    uint64_t v51 = v22;
    uint64_t v52 = v86;
    Unicode.Scalar.properties.getter();
    unint64_t v53 = v89;
    Unicode.Scalar.Properties.canonicalCombiningClass.getter();
    (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v52, v88);
    unint64_t v54 = v90;
    static Unicode.CanonicalCombiningClass.notReordered.getter();
    LOBYTE(v52) = static Unicode.CanonicalCombiningClass.== infix(_:_:)();
    unint64_t v55 = *(void (**)(_BYTE *, uint64_t))(v91 + 8);
    unint64_t v56 = v54;
    uint64_t v57 = v92;
    v55(v56, v92);
    uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v55)(v53, v57);
    if ((v52 & 1) != 0)
    {
      int64_t v22 = v51;
      int64_t v30 = v99;
      uint64_t result = specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( v51,  v98,  (uint64_t)v99,  v95);
      uint64_t v7 = v50;
      if (v50) {
        goto LABEL_92;
      }
    }

    else
    {
      int64_t v22 = v51;
      uint64_t v7 = v50;
    }

    LODWORD(v105[0]) = 2;
    v105[1] = &__CFUniCharDecimalDigitCharacterSetBitmap;
    uint64_t v106 = 15;
    uint64_t v107 = &__CFUniCharLetterCharacterSetBitmap_0;
    __int128 v108 = 2;
    uint64_t v109 = &__CFUniCharLowercaseLetterCharacterSetBitmap_1;
    uint64_t v110 = 2;
    uint64_t v111 = &__CFUniCharUppercaseLetterCharacterSetBitmap_1;
    uint64_t v112 = 15;
    uint64_t v113 = &__CFUniCharNonBaseCharacterSetBitmap_0;
    uint64_t v114 = 3;
    char v115 = &__CFUniCharCanonicalDecomposableCharacterSetBitmap_0;
    __int128 v116 = 15;
    unint64_t v117 = &__CFUniCharAlphanumericCharacterSetBitmap_0;
    unint64_t v118 = 2;
    uint64_t v119 = &__CFUniCharPunctuationCharacterSetBitmap_0;
    unint64_t v120 = 15;
    __int128 v121 = &__CFUniCharLegalCharacterSetBitmap_0;
    unint64_t v122 = 1;
    uint64_t v123 = &__CFUniCharTitlecaseLetterCharacterSetBitmap_0;
    uint64_t v124 = 2;
    uint64_t v125 = &__CFUniCharSymbolAndOperatorCharacterSetBitmap_0;
    __int128 v126 = 2;
    __int128 v127 = &__CFUniCharCompatibilityDecomposableCharacterSetBitmap_0;
    __int128 v128 = 2;
    __int128 v129 = &__CFUniCharHfsPlusDecomposableCharacterSetBitmap_0;
    unint64_t v130 = 2;
    __int128 v131 = &__CFUniCharStrongRightToLeftCharacterSetBitmap_0;
    a5 = v93;
    char v24 = v94;
    if (BYTE2(v48) >= *v85)
    {
LABEL_71:
      unint64_t v66 = *v97;
      uint64_t v67 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v66 + 2) + 1LL,  1,  v66);
      }
      unint64_t v69 = *((void *)v66 + 2);
      unint64_t v68 = *((void *)v66 + 3);
      unint64_t v21 = v95;
      Swift::Int v40 = v102;
      uint64_t v26 = v101;
      if (v69 >= v68 >> 1)
      {
        uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v68 > 1),  v69 + 1,  1,  v66);
        uint64_t v26 = v101;
        Swift::Int v40 = v102;
        unint64_t v21 = v95;
        unint64_t v66 = v73;
      }

      *((void *)v66 + 2) = v69 + 1;
      *(_DWORD *)&v66[4 * v69 + 32] = v48;
      uint64_t v23 = v96;
      *unint64_t v97 = v66;
      uint64_t v7 = v67;
      int64_t v22 = v84;
      int64_t v30 = v99;
      goto LABEL_17;
    }

    if (!*v82) {
      break;
    }
    int64_t v65 = *(void *)(*v82 + 8LL * BYTE2(v48));
    unint64_t v35 = (v48 & 0x3F) << 8;
    if (v48 >= 0x800)
    {
      uint64_t v74 = (v35 | (v48 >> 6) & 0x3F) << 8;
      if (HIWORD(v48))
      {
        int64_t v36 = ((v74 | (v48 >> 12) & 0x3F) << 8) | (v48 >> 18);
        uint64_t v37 = -2122219023;
      }

      else
      {
        int64_t v36 = v74 | (v48 >> 12);
        uint64_t v37 = 8487393;
      }
    }

    else
    {
      int64_t v36 = v35 | (v48 >> 6);
      uint64_t v37 = 33217;
    }

    v105[0] = ((v36 + v37) + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8
                                                                          * (4 - (__clz(v36 + v37) >> 3))));
    uint64_t v38 = MEMORY[0x186E1B6AC](v105);
    uint64_t v39 = (uint64_t)v83;
    MEMORY[0x186E1B718](v38);
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v39);
    int64_t v30 = v99;
    unint64_t v21 = v95;
    uint64_t v23 = v96;
    Swift::Int v40 = v102;
LABEL_16:
    uint64_t v26 = v101;
LABEL_17:
    uint64_t v29 = v49 & v40;
    uint64_t v27 = v30[2];
    char v25 = v100;
    if (v27 >= v21) {
      goto LABEL_9;
    }
  }

  __break(1u);
  return result;
}

              uint64_t v32 = (id)result;
              if (!result) {
                goto LABEL_7;
              }
LABEL_78:
              type metadata accessor for CFDictionaryRef(0LL);
              *(void *)(a3 + 24) = v29;
              *(void *)a3 = v32;
              return (uint64_t)v32;
            }
          }

          uint64_t v23 = v36;
          if (!v36) {
            goto LABEL_7;
          }
          unint64_t v31 = (void *)(v36 + 64);
          size_t v11 = 1LL << *(_BYTE *)(v36 + 32);
          if (v11 < 64) {
            char v24 = ~(-1LL << v11);
          }
          else {
            char v24 = -1LL;
          }
          char v25 = v24 & *(void *)(v36 + 64);
          outlined retain of LocalePreferences?( (uint64_t)v33,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          swift_bridgeObjectRetain();
          unint64_t v19 = MEMORY[0x18961AFF0];
          if (v25)
          {
            uint64_t v26 = __clz(__rbit64(v25));
          }

          else
          {
            uint64_t v27 = v31[1];
            a2 = 1LL;
            if (!v27)
            {
              a2 = 2LL;
              uint64_t v27 = v31[2];
              if (!v27)
              {
                a2 = 3LL;
                uint64_t v27 = v31[3];
                if (!v27)
                {
                  unint64_t v28 = 4LL;
                  uint64_t v27 = v31[4];
                  if (!v27)
                  {
                    while (1)
                    {
                      a2 = v28 + 1;
                      if (__OFADD__(v28, 1LL)) {
                        break;
                      }
                      uint64_t v27 = v31[a2];
                      ++v28;
                      if (v27) {
                        goto LABEL_70;
                      }
                    }

                    __break(1u);
                    goto LABEL_95;
                  }

                  a2 = 4LL;
                }
              }
            }

      uint64_t v112 = v407;
      swift_release();

      close(v416);
      return swift_bridgeObjectRelease();
    }

    uint64_t v74 = MEMORY[0x186E1B0E8]();
    int64_t v65 = v74;
    if ((v413 & 1) == 0)
    {
      uint64_t v113 = 4LL;
      switch(v74)
      {
        case 1:
        case 13:
          uint64_t v113 = 513LL;
          goto LABEL_246;
        case 2:
          goto LABEL_246;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_193;
        case 17:
          uint64_t v113 = 516LL;
          goto LABEL_246;
        case 28:
        case 69:
          uint64_t v113 = 640LL;
          goto LABEL_246;
        case 30:
          uint64_t v113 = 642LL;
          goto LABEL_246;
        case 63:
          uint64_t v113 = 514LL;
          goto LABEL_246;
        default:
          if (v74 == 102)
          {
            char v220 = 0LL;
            uint64_t v113 = 512LL;
          }

          else
          {
LABEL_193:
            uint64_t v113 = 512LL;
LABEL_246:
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
              goto LABEL_360;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            v296 = (int)POSIXErrorCode.rawValue.getter();
            v297 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            v298 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            char v220 = objc_msgSend(v297, sel_initWithDomain_code_userInfo_, v298, v296, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v299 = objc_msgSend(v220, sel_domain);
            v300 = static String._unconditionallyBridgeFromObjectiveC(_:)(v299);
            v302 = v301;

            if (v300 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v302 == v303)
            {
              swift_bridgeObjectRelease_n();
            }

            else
            {
              v304 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v304 & 1) == 0) {
                goto LABEL_351;
              }
            }
          }

          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v113,  (uint64_t)v6,  v7,  v220,  0LL,  0LL,  0LL,  0LL,  &v421,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
LABEL_252:
          swift_willThrow();
LABEL_263:
          swift_willThrow();
          return swift_bridgeObjectRelease();
      }
    }

    Swift::Int v75 = 4LL;
    switch(v74)
    {
      case 1:
      case 13:
        Swift::Int v75 = 513LL;
        goto LABEL_210;
      case 2:
        goto LABEL_210;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_192;
      case 17:
        Swift::Int v75 = 516LL;
        goto LABEL_210;
      case 28:
      case 69:
        Swift::Int v75 = 640LL;
        goto LABEL_210;
      case 30:
        Swift::Int v75 = 642LL;
        goto LABEL_210;
      case 63:
        Swift::Int v75 = 514LL;
        goto LABEL_210;
      default:
        if (v74 == 102)
        {
          uint64_t v216 = v8;
          swift_retain_n();
          uint64_t v217 = v6;
          swift_retain_n();
          __int128 v218 = v217;
          __int128 v219 = 0LL;
          v416 = 512LL;
          goto LABEL_215;
        }

          uint64_t v113 = 512LL;
LABEL_137:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            unint64_t v187 = (int)POSIXErrorCode.rawValue.getter();
            uint64_t v188 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            unint64_t v189 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            unint64_t v137 = objc_msgSend(v188, sel_initWithDomain_code_userInfo_, v189, v187, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v190 = objc_msgSend(v137, sel_domain);
            uint64_t v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
            uint64_t v193 = v192;

            if (v191 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v193 == v194)
            {
              swift_bridgeObjectRelease_n();
            }

            else
            {
              uint64_t v195 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v195 & 1) == 0)
              {
LABEL_205:
                __break(1u);
                goto LABEL_206;
              }
            }

            size_t v11 = v275;
            goto LABEL_143;
          }

          break;
      }

          swift_release();
          goto LABEL_94;
        }

        v19.value = v55;
        unint64_t v16 = v56;
        LOBYTE(__dst) = v20;
        goto LABEL_18;
      }

      if (((1 << v20) & 0x1C000) == 0)
      {
        __src[26] = 0.0;
        LOBYTE(__src[27]) = 0;
      }

        unint64_t v45 = (v53 - 1) & v53;
        uint64_t v98 = v54;
        uint64_t v51 = __clz(__rbit64(v53)) + (v54 << 6);
      }

      unint64_t v56 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v51);
      unint64_t v58 = *v56;
      uint64_t v57 = v56[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v1 + 56) + 72 * v51, (uint64_t)&v105);
      __int128 v101 = v107;
      unint64_t v102 = v108;
      uint64_t v103 = v109;
      unint64_t v99 = v105;
      unint64_t v100 = v106;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      char v59 = Hasher._finalize()();
      char v60 = -1LL << *(_BYTE *)(v43 + 32);
      uint64_t v61 = v59 & ~v60;
      uint64_t v62 = v61 >> 6;
      if (((-1LL << v61) & ~*(void *)(v46 + 8 * (v61 >> 6))) != 0)
      {
        uint64_t v47 = __clz(__rbit64((-1LL << v61) & ~*(void *)(v46 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_74;
      }

      unint64_t v63 = 0;
      uint64_t v64 = (unint64_t)(63 - v60) >> 6;
      do
      {
        if (++v62 == v64 && (v63 & 1) != 0)
        {
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }

        int64_t v65 = v62 == v64;
        if (v62 == v64) {
          uint64_t v62 = 0LL;
        }
        v63 |= v65;
        unint64_t v66 = *(void *)(v46 + 8 * v62);
      }

      while (v66 == -1);
      uint64_t v47 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
      *(void *)(v46 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v47;
      uint64_t v48 = (void *)(*(void *)(v43 + 48) + 16 * v47);
      *uint64_t v48 = v58;
      v48[1] = v57;
      uint64_t v49 = *(void *)(v43 + 56) + 72 * v47;
      *(_OWORD *)(v49 + 16) = v100;
      *(_OWORD *)(v49 + 32) = v101;
      *(_OWORD *)(v49 + 48) = v102;
      *(void *)(v49 + 64) = v103;
      *(_OWORD *)uint64_t v49 = v99;
      ++*(void *)(v43 + 16);
      --v23;
      char v44 = v98;
      if (!v23) {
        return v43;
      }
    }
  }

  swift_retain();
  return v1;
}

              uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
              __int128 v128 = v106[2];
              if (v128) {
                goto LABEL_59;
              }
              goto LABEL_93;
            }

          uint64_t v50 = (v57 - 1) & v57;
          unint64_t v55 = __clz(__rbit64(v57)) + (v46 << 6);
        }

        char v59 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v55);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v59);
        uint64_t result = Hasher._finalize()();
        char v60 = -1LL << *(_BYTE *)(v10 + 32);
        uint64_t v61 = result & ~v60;
        uint64_t v62 = v61 >> 6;
        if (((-1LL << v61) & ~*(void *)(v52 + 8 * (v61 >> 6))) != 0)
        {
          unint64_t v53 = __clz(__rbit64((-1LL << v61) & ~*(void *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_74;
        }

        unint64_t v63 = 0;
        uint64_t v64 = (unint64_t)(63 - v60) >> 6;
        do
        {
          if (++v62 == v64 && (v63 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }

          int64_t v65 = v62 == v64;
          if (v62 == v64) {
            uint64_t v62 = 0LL;
          }
          v63 |= v65;
          unint64_t v66 = *(void *)(v52 + 8 * v62);
        }

        while (v66 == -1);
        unint64_t v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
        *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v53;
        *(_BYTE *)(*(void *)(v10 + 48) + v53) = v59;
        ++*(void *)(v10 + 16);
      }
    }

        uint64_t v50 = (v57 - 1) & v57;
        unint64_t v55 = __clz(__rbit64(v57)) + (v46 << 6);
      }

      char v59 = *(_BYTE *)(*(void *)(v7 + 48) + v55);
      uint64_t result = MEMORY[0x186E1CE88](*(void *)(v10 + 40), v59, 1LL);
      char v60 = -1LL << *(_BYTE *)(v10 + 32);
      uint64_t v61 = result & ~v60;
      uint64_t v62 = v61 >> 6;
      if (((-1LL << v61) & ~*(void *)(v52 + 8 * (v61 >> 6))) != 0)
      {
        unint64_t v53 = __clz(__rbit64((-1LL << v61) & ~*(void *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_74;
      }

      unint64_t v63 = 0;
      uint64_t v64 = (unint64_t)(63 - v60) >> 6;
      do
      {
        if (++v62 == v64 && (v63 & 1) != 0)
        {
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }

        int64_t v65 = v62 == v64;
        if (v62 == v64) {
          uint64_t v62 = 0LL;
        }
        v63 |= v65;
        unint64_t v66 = *(void *)(v52 + 8 * v62);
      }

      while (v66 == -1);
      unint64_t v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
      *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v53;
      *(_BYTE *)(*(void *)(v10 + 48) + v53) = v59;
      ++*(void *)(v10 + 16);
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt8>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  char v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  size_t v11 = 0LL;
  int64_t v12 = (void *)(v7 + 56);
  uint64_t v13 = 1LL << *(_BYTE *)(v7 + 32);
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  else {
    uint64_t v14 = -1LL;
  }
  uint64_t v15 = v14 & *(void *)(v7 + 56);
  unint64_t v16 = (unint64_t)(v13 + 63) >> 6;
  int64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      BOOL v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }

    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_115;
    }
    if (v21 >= v16)
    {
LABEL_66:
      unint64_t v45 = 1LL << *(_BYTE *)(v7 + 32);
      if (v45 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
      }
      else {
        *int64_t v12 = -1LL << v45;
      }
      *(void *)(v7 + 16) = 0LL;
      goto LABEL_105;
    }

    int64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      size_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      int64_t v22 = v12[v11];
      if (!v22)
      {
        size_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        int64_t v22 = v12[v11];
        if (!v22)
        {
          size_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          int64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }

        uint64_t v49 = (v56 - 1) & v56;
        unint64_t v54 = __clz(__rbit64(v56)) + (v45 << 6);
      }

      unint64_t v58 = *(void *)(*(void *)(v7 + 48) + 8 * v54);
      uint64_t result = static Hasher._hash(seed:_:)();
      char v59 = -1LL << *(_BYTE *)(v10 + 32);
      char v60 = result & ~v59;
      uint64_t v61 = v60 >> 6;
      if (((-1LL << v60) & ~*(void *)(v51 + 8 * (v60 >> 6))) != 0)
      {
        uint64_t v52 = __clz(__rbit64((-1LL << v60) & ~*(void *)(v51 + 8 * (v60 >> 6)))) | v60 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_74;
      }

      uint64_t v62 = 0;
      unint64_t v63 = (unint64_t)(63 - v59) >> 6;
      do
      {
        if (++v61 == v63 && (v62 & 1) != 0)
        {
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }

        uint64_t v64 = v61 == v63;
        if (v61 == v63) {
          uint64_t v61 = 0LL;
        }
        v62 |= v64;
        int64_t v65 = *(void *)(v51 + 8 * v61);
      }

      while (v65 == -1);
      uint64_t v52 = __clz(__rbit64(~v65)) + (v61 << 6);
LABEL_74:
      *(void *)(v51 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v52;
      *(void *)(*(void *)(v10 + 48) + 8 * v52) = v58;
      ++*(void *)(v10 + 16);
    }
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  char v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  uint64_t v74 = v6;
  size_t v11 = 0LL;
  int64_t v12 = (uint64_t *)(v7 + 56);
  uint64_t v13 = 1LL << *(_BYTE *)(v7 + 32);
  __int128 v72 = -1LL << v13;
  uint64_t v73 = v13;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  else {
    uint64_t v14 = -1LL;
  }
  uint64_t v15 = v14 & *(void *)(v7 + 56);
  unint64_t v16 = (unint64_t)(v13 + 63) >> 6;
  int64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      BOOL v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }

    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_115;
    }
    if (v21 >= v16)
    {
LABEL_66:
      if (v73 >= 64) {
        bzero((void *)(v7 + 56), 8 * v16);
      }
      else {
        *int64_t v12 = v72;
      }
      uint64_t v6 = v74;
      *(void *)(v7 + 16) = 0LL;
      goto LABEL_105;
    }

    int64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      size_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      int64_t v22 = v12[v11];
      if (!v22)
      {
        size_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        int64_t v22 = v12[v11];
        if (!v22)
        {
          size_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          int64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }

          uint64_t v51 = (v59 - 1) & v59;
          uint64_t v57 = __clz(__rbit64(v59)) + (v54 << 6);
        }

        uint64_t v61 = *(void *)(*(void *)(v7 + 48) + 8 * v57);
        Hasher.init(_seed:)();
        swift_retain();
        _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v80);
        uint64_t result = Hasher._finalize()();
        uint64_t v62 = -1LL << *(_BYTE *)(v10 + 32);
        unint64_t v63 = result & ~v62;
        uint64_t v64 = v63 >> 6;
        if (((-1LL << v63) & ~*(void *)(v53 + 8 * (v63 >> 6))) != 0)
        {
          unint64_t v55 = __clz(__rbit64((-1LL << v63) & ~*(void *)(v53 + 8 * (v63 >> 6)))) | v63 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_74;
        }

        int64_t v65 = 0;
        unint64_t v66 = (unint64_t)(63 - v62) >> 6;
        do
        {
          if (++v64 == v66 && (v65 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }

          uint64_t v67 = v64 == v66;
          if (v64 == v66) {
            uint64_t v64 = 0LL;
          }
          v65 |= v67;
          unint64_t v68 = *(void *)(v53 + 8 * v64);
        }

        while (v68 == -1);
        unint64_t v55 = __clz(__rbit64(~v68)) + (v64 << 6);
LABEL_74:
        *(void *)(v53 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v55;
        *(void *)(*(void *)(v10 + 48) + 8 * v55) = v61;
        ++*(void *)(v10 + 16);
      }
    }

          uint64_t v50 = (v57 - 1) & v57;
          unint64_t v55 = __clz(__rbit64(v57)) + (v46 << 6);
        }

        char v59 = *(_DWORD *)(*(void *)(v7 + 48) + 4 * v55);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v59);
        uint64_t result = Hasher._finalize()();
        char v60 = -1LL << *(_BYTE *)(v10 + 32);
        uint64_t v61 = result & ~v60;
        uint64_t v62 = v61 >> 6;
        if (((-1LL << v61) & ~*(void *)(v52 + 8 * (v61 >> 6))) != 0)
        {
          unint64_t v53 = __clz(__rbit64((-1LL << v61) & ~*(void *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_74;
        }

        unint64_t v63 = 0;
        uint64_t v64 = (unint64_t)(63 - v60) >> 6;
        do
        {
          if (++v62 == v64 && (v63 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }

          int64_t v65 = v62 == v64;
          if (v62 == v64) {
            uint64_t v62 = 0LL;
          }
          v63 |= v65;
          unint64_t v66 = *(void *)(v52 + 8 * v62);
        }

        while (v66 == -1);
        unint64_t v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
        *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v53;
        *(_DWORD *)(*(void *)(v10 + 48) + 4 * v53) = v59;
        ++*(void *)(v10 + 16);
      }
    }

        uint64_t v49 = (v56 - 1) & v56;
        unint64_t v54 = __clz(__rbit64(v56)) + (v45 << 6);
      }

      unint64_t v58 = *(void *)(*(void *)(v7 + 48) + 8 * v54);
      uint64_t result = static Hasher._hash(seed:_:)();
      char v59 = -1LL << *(_BYTE *)(v10 + 32);
      char v60 = result & ~v59;
      uint64_t v61 = v60 >> 6;
      if (((-1LL << v60) & ~*(void *)(v51 + 8 * (v60 >> 6))) != 0)
      {
        uint64_t v52 = __clz(__rbit64((-1LL << v60) & ~*(void *)(v51 + 8 * (v60 >> 6)))) | v60 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_74;
      }

      uint64_t v62 = 0;
      unint64_t v63 = (unint64_t)(63 - v59) >> 6;
      do
      {
        if (++v61 == v63 && (v62 & 1) != 0)
        {
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }

        uint64_t v64 = v61 == v63;
        if (v61 == v63) {
          uint64_t v61 = 0LL;
        }
        v62 |= v64;
        int64_t v65 = *(void *)(v51 + 8 * v61);
      }

      while (v65 == -1);
      uint64_t v52 = __clz(__rbit64(~v65)) + (v61 << 6);
LABEL_74:
      *(void *)(v51 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v52;
      *(void *)(*(void *)(v10 + 48) + 8 * v52) = v58;
      ++*(void *)(v10 + 16);
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  char v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  uint64_t v74 = v6;
  size_t v11 = 0LL;
  int64_t v12 = (uint64_t *)(v7 + 56);
  uint64_t v13 = 1LL << *(_BYTE *)(v7 + 32);
  __int128 v72 = -1LL << v13;
  uint64_t v73 = v13;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  else {
    uint64_t v14 = -1LL;
  }
  uint64_t v15 = v14 & *(void *)(v7 + 56);
  unint64_t v16 = (unint64_t)(v13 + 63) >> 6;
  int64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      BOOL v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }

    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_115;
    }
    if (v21 >= v16)
    {
LABEL_66:
      if (v73 >= 64) {
        bzero((void *)(v7 + 56), 8 * v16);
      }
      else {
        *int64_t v12 = v72;
      }
      uint64_t v6 = v74;
      *(void *)(v7 + 16) = 0LL;
      goto LABEL_105;
    }

    int64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      size_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      int64_t v22 = v12[v11];
      if (!v22)
      {
        size_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        int64_t v22 = v12[v11];
        if (!v22)
        {
          size_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          int64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }

          uint64_t v50 = (v57 - 1) & v57;
          unint64_t v55 = __clz(__rbit64(v57)) + (v46 << 6);
        }

        char v59 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v55);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v59);
        uint64_t result = Hasher._finalize()();
        char v60 = -1LL << *(_BYTE *)(v10 + 32);
        uint64_t v61 = result & ~v60;
        uint64_t v62 = v61 >> 6;
        if (((-1LL << v61) & ~*(void *)(v52 + 8 * (v61 >> 6))) != 0)
        {
          unint64_t v53 = __clz(__rbit64((-1LL << v61) & ~*(void *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_74;
        }

        unint64_t v63 = 0;
        uint64_t v64 = (unint64_t)(63 - v60) >> 6;
        do
        {
          if (++v62 == v64 && (v63 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }

          int64_t v65 = v62 == v64;
          if (v62 == v64) {
            uint64_t v62 = 0LL;
          }
          v63 |= v65;
          unint64_t v66 = *(void *)(v52 + 8 * v62);
        }

        while (v66 == -1);
        unint64_t v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
        *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v53;
        *(_BYTE *)(*(void *)(v10 + 48) + v53) = v59;
        ++*(void *)(v10 + 16);
      }
    }

          unint64_t v63 = (v71 - 1) & v71;
          unint64_t v69 = __clz(__rbit64(v71)) + (v65 << 6);
        }

        uint64_t v73 = (uint64_t *)(*(void *)(v10 + 48) + 32 * v69);
        uint64_t v74 = *v73;
        Swift::Int v75 = v73[1];
        unint64_t v77 = v73[2];
        uint64_t v76 = v73[3];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t result = Hasher._finalize()();
        unint64_t v78 = -1LL << *(_BYTE *)(v13 + 32);
        char v79 = result & ~v78;
        unint64_t v80 = v79 >> 6;
        if (((-1LL << v79) & ~*(void *)(v64 + 8 * (v79 >> 6))) != 0)
        {
          unint64_t v66 = __clz(__rbit64((-1LL << v79) & ~*(void *)(v64 + 8 * (v79 >> 6)))) | v79 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_74;
        }

        BOOL v81 = 0;
        uint64_t v82 = (unint64_t)(63 - v78) >> 6;
        do
        {
          if (++v80 == v82 && (v81 & 1) != 0)
          {
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
            goto LABEL_128;
          }

          BOOL v83 = v80 == v82;
          if (v80 == v82) {
            unint64_t v80 = 0LL;
          }
          v81 |= v83;
          uint64_t v84 = *(void *)(v64 + 8 * v80);
        }

        while (v84 == -1);
        unint64_t v66 = __clz(__rbit64(~v84)) + (v80 << 6);
LABEL_74:
        *(void *)(v64 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v66;
        uint64_t v67 = (void *)(*(void *)(v13 + 48) + 32 * v66);
        *uint64_t v67 = v74;
        v67[1] = v75;
        v67[2] = v77;
        v67[3] = v76;
        ++*(void *)(v13 + 16);
        uint64_t v9 = a3;
        char v10 = v105;
      }
    }

      uint64_t v47 = 0LL;
      goto LABEL_93;
    }

LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
    }

    if ((_DWORD)v43 != 1)
    {
      BOOL v46 = (uint64_t *)(v41 + 64);
      uint64_t v47 = 1LL;
      while (1)
      {
        uint64_t v48 = *v46;
        v46 += 3;
        Swift::Int v40 = v45 - v48;
        if (__OFSUB__(v45, v48)) {
          break;
        }
        if (__OFADD__(v40, 1LL)) {
          goto LABEL_80;
        }
        if (v40 + 1 < 1)
        {
          unint64_t v43 = v47;
          Swift::Int v40 = v45;
          goto LABEL_40;
        }

        ++v47;
        unint64_t v45 = v40;
        if (v43 == v47) {
          goto LABEL_39;
        }
      }

      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }

    Swift::Int v40 = v45;
LABEL_39:
    if (v40) {
      goto LABEL_84;
    }
    goto LABEL_40;
  }

  if (v61 != a4[11])
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }

  if (!*v8)
  {
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }

  specialized Rope._Node._prepareModify(at:)(v60, (uint64_t)v71);
  __int128 v72 = v71[1];
  v67[0] = v71[0];
  v67[2] = v71[2];
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72);
  uint64_t result = (uint64_t *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72 + 8);
  v67[1] = MEMORY[0x18961AFF0];
  a4[11] = v61 + 1;
  *uint64_t v13 = v61 + 1;
  if (a4[8])
  {
    v13[2] = (uint64_t)specialized Rope._Node._finalizeModify(_:)(&v66, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v68 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v29 = swift_bridgeObjectRetain();
    int64_t v30 = specialized _NativeSet.filter(_:)( v29,  (uint64_t)&v69,  a6,  (uint64_t)&v68,  a8,  v25,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a5 = v30;
    swift_bridgeObjectRelease();
    if (v68 == 1) {
      specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(v13, v8, &v69);
    }
    else {
      specialized Rope.update<A>(at:by:)(v13, v8, &v69);
    }
    goto LABEL_77;
  }

  __int128 v116 = v26;
  *(void *)&char v115 = *(void *)&v118[6];
  v117[0] = xmmword_183729490;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  uint64_t v93 = v12[2];
  unint64_t v92 = v12[3];
  if (v93 >= v92 >> 1) {
    int64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v92 > 1),  v93 + 1,  1,  v12);
  }
  v12[2] = v93 + 1;
  uint64_t v94 = &v12[6 * v93];
  uint64_t v95 = v117[0];
  uint64_t v96 = v117[2];
  v94[3] = v117[1];
  v94[4] = v96;
  v94[2] = v95;
  if ((BYTE8(v118[17]) & 1) == 0)
  {
LABEL_99:
    *(void *)&char v115 = *(void *)&v118[17];
    __int128 v116 = v26;
    *(void *)&v117[0] = 0xD000000000000011LL;
    *((void *)&v117[0] + 1) = 0x80000001839C9B90LL;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
    }
    uint64_t v98 = v12[2];
    unint64_t v97 = v12[3];
    if (v98 >= v97 >> 1) {
      int64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v97 > 1),  v98 + 1,  1,  v12);
    }
    v12[2] = v98 + 1;
    unint64_t v99 = &v12[6 * v98];
    unint64_t v100 = v117[0];
    __int128 v101 = v117[2];
    v99[3] = v117[1];
    v99[4] = v101;
    v99[2] = v100;
  }

            swift_bridgeObjectRetain();
            unint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v53) {
              goto LABEL_64;
            }
LABEL_95:
            __break(1u);
            goto LABEL_96;
          }

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
          v9[18] = v28;
          swift_retain();
          swift_release();
          v9[19] = v56;
          swift_release();
          swift_release();
          uint64_t v47 = v9[2];
          if (!(v47 >> 62))
          {
            uint64_t v48 = *(void *)((v47 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            goto LABEL_68;
          }

    __int128 v128 = v74;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
      goto LABEL_145;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    Swift::Int v75 = (int)POSIXErrorCode.rawValue.getter();
    uint64_t v76 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    unint64_t v77 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v78 = objc_msgSend(v76, sel_initWithDomain_code_userInfo_, v77, v75, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    char v79 = objc_msgSend(v78, sel_domain);
    unint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    uint64_t v82 = v81;

    if (v80 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v82 == v83)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v18 = v129;
      LODWORD(v15) = v130;
LABEL_99:
      uint64_t v85 = v78;
      unint64_t v28 = v126;
      uint64_t v27 = v127;
      goto LABEL_100;
    }

    uint64_t v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v18 = v129;
    LODWORD(v15) = v130;
    if ((v84 & 1) != 0) {
      goto LABEL_99;
    }
    goto LABEL_139;
  }

  if ((_DWORD)v11 != 102)
  {
    if ((_DWORD)v11 == 69) {
      goto LABEL_94;
    }
    if ((_DWORD)v11 == 30)
    {
      uint64_t v74 = 642LL;
      goto LABEL_94;
    }

    __int128 v128 = v74;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
      goto LABEL_145;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    Swift::Int v75 = (int)POSIXErrorCode.rawValue.getter();
    uint64_t v76 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    unint64_t v77 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v78 = objc_msgSend(v76, sel_initWithDomain_code_userInfo_, v77, v75, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    char v79 = objc_msgSend(v78, sel_domain);
    unint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    uint64_t v82 = v81;

    if (v80 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v82 == v83)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v18 = v129;
      LODWORD(v15) = v130;
LABEL_99:
      uint64_t v85 = v78;
      unint64_t v28 = v126;
      uint64_t v27 = v127;
      goto LABEL_100;
    }

    uint64_t v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v18 = v129;
    LODWORD(v15) = v130;
    if ((v84 & 1) != 0) {
      goto LABEL_99;
    }
    goto LABEL_139;
  }

  if ((_DWORD)v11 != 102)
  {
    if ((_DWORD)v11 == 69) {
      goto LABEL_94;
    }
    if ((_DWORD)v11 == 30)
    {
      uint64_t v74 = 642LL;
      goto LABEL_94;
    }

  __int128 v116 = HIBYTE(v104) & 0xF;
  if ((v104 & 0x2000000000000000LL) == 0) {
    __int128 v116 = v102 & 0xFFFFFFFFFFFFLL;
  }
  if (!v116)
  {
    swift_bridgeObjectRelease();
    __int128 v133 = v49;
    swift_retain_n();
    swift_retain_n();
    unint64_t v21 = v133;
    if (_foundation_swift_url_feature_enabled())
    {
      v217._countAndFlagsBits = (uint64_t)v21;
      v217._object = v14;
      __int128 v218 = v7;
      __int128 v134 = v21;
      swift_retain();
      swift_retain();
      char v135 = URL.path(percentEncoded:)(1);
      uint64_t v217 = v135;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v135._countAndFlagsBits, (unint64_t)v135._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v216._countAndFlagsBits = Set.init(minimumCapacity:)();
      int64_t v136 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
      unint64_t v137 = v216._countAndFlagsBits;
      unint64_t v138 = v217._countAndFlagsBits;
      uint64_t v139 = v217._object;
      unint64_t v140 = ((unint64_t)v217._object >> 56) & 0xF;
      if (v140)
      {
        uint64_t v215 = v134;
        uint64_t v216 = v217;
        MEMORY[0x1895F8858](v136);
        uint64_t v207 = &v216;
        uint64_t v208 = v137;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v206,  v138,  (unint64_t)v139);
        if (v141 == 1)
        {
          uint64_t v143 = (unint64_t)v216._object;
          uint64_t v142 = v216._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v142, v143, v137);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __int128 v134 = v215;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      int64_t v156 = objc_msgSend(v21, sel__parameterString);
      if (v156)
      {
        unint64_t v157 = v156;
        unint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
        unint64_t v160 = v159;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (unint64_t v161 = objc_msgSend(v21, sel_path)) != 0)
        {
          uint64_t v162 = v161;
          uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
          uint64_t v165 = v164;

          v217._countAndFlagsBits = (uint64_t)v163;
          v217._object = v165;
          swift_bridgeObjectRetain();
          v166._countAndFlagsBits = 59LL;
          v166._object = (void *)0xE100000000000000LL;
          String.append(_:)(v166);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v167._countAndFlagsBits = (uint64_t)v158;
          v167._object = v160;
          String.append(_:)(v167);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v217._countAndFlagsBits = 59LL;
          v217._object = (void *)0xE100000000000000LL;
          v199._countAndFlagsBits = (uint64_t)v158;
          v199._object = v160;
          String.append(_:)(v199);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        goto LABEL_166;
      }

      unint64_t v198 = objc_msgSend(v21, sel_path);
      if (!v198)
      {
        swift_release();
        swift_release();

        goto LABEL_166;
      }

      __int128 v134 = v198;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
      swift_release();
      swift_release();
    }

LABEL_166:
    unint64_t v202 = (void *)objc_opt_self();
    uint64_t v203 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v93 = objc_msgSend( v202,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v203,  v21,  0,  0,  0,  0);
    goto LABEL_64;
  }

  unint64_t v117 = v17;
  swift_retain();
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v217._countAndFlagsBits = (uint64_t)v117;
    v217._object = v215;
    __int128 v218 = v9;
    unint64_t v211 = v117;
    swift_retain();
    swift_retain();
    unint64_t v118 = URL.path(percentEncoded:)(1);
    uint64_t v217 = v118;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v118._countAndFlagsBits, (unint64_t)v118._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v216._countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v119 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
    unint64_t v120 = v216._countAndFlagsBits;
    __int128 v121 = v217._countAndFlagsBits;
    unint64_t v122 = v217._object;
    uint64_t v123 = ((unint64_t)v217._object >> 56) & 0xF;
    if (v123)
    {
      uint64_t v210 = (id)v102;
      uint64_t v216 = v217;
      MEMORY[0x1895F8858](v119);
      uint64_t v207 = &v216;
      uint64_t v208 = v120;
      swift_bridgeObjectRetain();
      uint64_t v124 = v121;
      uint64_t v125 = v214;
      __int128 v126 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v206,  v124,  (unint64_t)v122);
      uint64_t v214 = v125;
      if (v127 == 1)
      {
        __int128 v128 = (unint64_t)v216._object;
        __int128 v129 = v216._countAndFlagsBits;
        swift_bridgeObjectRetain();
        unint64_t v130 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v129,  v128,  v120);
        __int128 v132 = v131;
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v130 = (uint64_t)v126;
        __int128 v132 = v127;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v102 = (uint64_t)v210;
      unint64_t v169 = v211;
      if (!v132)
      {
        uint64_t v173 = v212;
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v130 = 0LL;
        __int128 v132 = 0xE000000000000000LL;
        goto LABEL_133;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v130 = 0LL;
      __int128 v132 = 0xE000000000000000LL;
      unint64_t v169 = v211;
    }

    uint64_t v173 = v212;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_133:
    swift_release();
    swift_release();

    uint64_t v9 = v173;
    goto LABEL_134;
  }

  __int128 v144 = objc_msgSend(v117, sel__parameterString);
  if (v144)
  {
    unint64_t v145 = v144;
    uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
    uint64_t v148 = v147;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (uint64_t v149 = objc_msgSend(v117, sel_path)) != 0)
    {
      uint64_t v150 = v149;
      uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
      uint64_t v153 = v152;

      v217._countAndFlagsBits = (uint64_t)v151;
      v217._object = v153;
      swift_bridgeObjectRetain();
      v154._countAndFlagsBits = 59LL;
      v154._object = (void *)0xE100000000000000LL;
      String.append(_:)(v154);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v155._countAndFlagsBits = (uint64_t)v146;
      v155._object = v148;
      String.append(_:)(v155);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }

    else
    {
      v217._countAndFlagsBits = 59LL;
      v217._object = (void *)0xE100000000000000LL;
      v168._countAndFlagsBits = (uint64_t)v146;
      v168._object = v148;
      String.append(_:)(v168);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    unint64_t v130 = v217._countAndFlagsBits;
    __int128 v132 = (unint64_t)v217._object;
  }

  else
  {
    uint64_t v170 = objc_msgSend(v117, sel_path);
    if (v170)
    {
      unint64_t v171 = v170;
      unint64_t v130 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v170);
      __int128 v132 = v172;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      unint64_t v130 = 0LL;
      __int128 v132 = 0xE000000000000000LL;
    }
  }

    __break(1u);
    goto LABEL_95;
  }

  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

              uint64_t v52 = (uint64_t)v22;
              *(void *)&__src[7] = v52;
              BYTE8(__src[7]) = (uint64_t)v22 == 0x7FFFFFFFFFFFFFFFLL;
              if ((v12 & 0x20) == 0)
              {
LABEL_57:
                if ((v12 & 0x40) == 0) {
                  goto LABEL_58;
                }
                goto LABEL_100;
              }

    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }

          __break(1u);
          goto LABEL_95;
        }
      }

      else
      {
        __break(1u);
      }

      uint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew()(v76);
      uint64_t v85 = v76[2];
      if (v85) {
        goto LABEL_83;
      }
      goto LABEL_94;
    }

  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __int128 v108 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v108);
  __int128 v129 = *(void *)(v108 + 16);
  if (v129) {
    goto LABEL_63;
  }
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __int128 v108 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v108);
  __int128 v132 = *(void *)(v108 + 16);
  if (!v132)
  {
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
  }

    BOOL v46 = &v18[v44];
LABEL_95:
    if ((unint64_t)v46 < v20)
    {
      unint64_t v55 = 0;
      unint64_t v56 = (unsigned __int8 *)(v46 - v18);
      uint64_t v57 = 1;
      unint64_t v58 = 1;
      while (1)
      {
        char v59 = 0LL;
        char v60 = &v18[v19] - v46;
        while (1)
        {
          if (v46 - v18 + v59 < 0 || (int64_t v30 = v60 < 1, --v60, v30))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v77 = (unint64_t)&v46[v59];
            if ((unint64_t)&v46[v59] >= a4)
            {
              unint64_t v78 = a4 + i;
              if (a4 + i >= v77)
              {
                if (v78 > a4)
                {
                  char v79 = i + a4;
                  uint64_t i = 1LL;
                  unint64_t v80 = a4;
                  while (1)
                  {
                    BOOL v81 = 0LL;
                    uint64_t v82 = 0LL;
                    BOOL v83 = v79 - v80;
                    while (1)
                    {
                      uint64_t v84 = *(unsigned __int8 *)(v80 + v82);
                      if (v84 == 10)
                      {
                        unint64_t v70 = __OFADD__(i++, 1LL);
                        if (!v70)
                        {
                          v80 += v82 + 1;
                          goto LABEL_169;
                        }

                        goto LABEL_275;
                      }

                      if (v84 == 13) {
                        break;
                      }
                      a3 = v82 + 1;
                      if (__OFADD__(v82, 1LL)) {
                        goto LABEL_256;
                      }
                      ++v82;
                      --v81;
                      if (v80 + v82 >= v78) {
                        goto LABEL_216;
                      }
                    }

                    uint64_t v85 = v80 + v82;
                    if (v77 < v80 + v82 + 1) {
                      goto LABEL_167;
                    }
                    if (*(_BYTE *)(v85 + 1) == 10) {
                      uint64_t v85 = v80 + v82 + 1;
                    }
LABEL_167:
                    unint64_t v70 = __OFADD__(i++, 1LL);
                    if (v70) {
                      goto LABEL_276;
                    }
                    unint64_t v80 = v85 + 1;
LABEL_169:
                    if (v80 >= v78)
                    {
                      a3 = 0LL;
                      goto LABEL_216;
                    }
                  }
                }

                a3 = 0LL;
                uint64_t i = 1LL;
LABEL_216:
                uint64_t v74 = &v46[v59 - a4];
                goto LABEL_244;
              }
            }

    BOOL v46 = &v18[v44];
LABEL_95:
    if ((unint64_t)v46 < v20)
    {
      unint64_t v55 = 0;
      unint64_t v56 = (unsigned __int8 *)(v46 - v18);
      uint64_t v57 = 1;
      unint64_t v58 = 1;
      while (1)
      {
        char v59 = 0LL;
        char v60 = &v18[v19] - v46;
        while (1)
        {
          if (v46 - v18 + v59 < 0 || (int64_t v30 = v60 < 1, --v60, v30))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v77 = (unint64_t)&v46[v59];
            if ((unint64_t)&v46[v59] >= a4)
            {
              unint64_t v78 = a4 + i;
              if (a4 + i >= v77)
              {
                if (v78 > a4)
                {
                  char v79 = i + a4;
                  uint64_t i = 1LL;
                  unint64_t v80 = a4;
                  while (1)
                  {
                    BOOL v81 = 0LL;
                    uint64_t v82 = 0LL;
                    BOOL v83 = v79 - v80;
                    while (1)
                    {
                      uint64_t v84 = *(unsigned __int8 *)(v80 + v82);
                      if (v84 == 10)
                      {
                        unint64_t v70 = __OFADD__(i++, 1LL);
                        if (!v70)
                        {
                          v80 += v82 + 1;
                          goto LABEL_169;
                        }

                        goto LABEL_275;
                      }

                      if (v84 == 13) {
                        break;
                      }
                      a3 = v82 + 1;
                      if (__OFADD__(v82, 1LL)) {
                        goto LABEL_256;
                      }
                      ++v82;
                      --v81;
                      if (v80 + v82 >= v78) {
                        goto LABEL_216;
                      }
                    }

                    uint64_t v85 = v80 + v82;
                    if (v77 < v80 + v82 + 1) {
                      goto LABEL_167;
                    }
                    if (*(_BYTE *)(v85 + 1) == 10) {
                      uint64_t v85 = v80 + v82 + 1;
                    }
LABEL_167:
                    unint64_t v70 = __OFADD__(i++, 1LL);
                    if (v70) {
                      goto LABEL_276;
                    }
                    unint64_t v80 = v85 + 1;
LABEL_169:
                    if (v80 >= v78)
                    {
                      a3 = 0LL;
                      goto LABEL_216;
                    }
                  }
                }

                a3 = 0LL;
                uint64_t i = 1LL;
LABEL_216:
                uint64_t v74 = &v46[v59 - a4];
                goto LABEL_244;
              }
            }

    BOOL v46 = &v18[v44];
LABEL_95:
    if ((unint64_t)v46 < v20)
    {
      unint64_t v55 = 0;
      unint64_t v56 = (unsigned __int8 *)(v46 - v18);
      uint64_t v57 = 1;
      unint64_t v58 = 1;
      while (1)
      {
        char v59 = 0LL;
        char v60 = &v18[v19] - v46;
        while (1)
        {
          if (v46 - v18 + v59 < 0 || (int64_t v30 = v60 < 1, --v60, v30))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v77 = (unint64_t)&v46[v59];
            if ((unint64_t)&v46[v59] >= a4)
            {
              unint64_t v78 = a4 + i;
              if (a4 + i >= v77)
              {
                if (v78 > a4)
                {
                  char v79 = i + a4;
                  uint64_t i = 1LL;
                  unint64_t v80 = a4;
                  while (1)
                  {
                    BOOL v81 = 0LL;
                    uint64_t v82 = 0LL;
                    BOOL v83 = v79 - v80;
                    while (1)
                    {
                      uint64_t v84 = *(unsigned __int8 *)(v80 + v82);
                      if (v84 == 10)
                      {
                        unint64_t v70 = __OFADD__(i++, 1LL);
                        if (!v70)
                        {
                          v80 += v82 + 1;
                          goto LABEL_169;
                        }

                        goto LABEL_275;
                      }

                      if (v84 == 13) {
                        break;
                      }
                      a3 = v82 + 1;
                      if (__OFADD__(v82, 1LL)) {
                        goto LABEL_256;
                      }
                      ++v82;
                      --v81;
                      if (v80 + v82 >= v78) {
                        goto LABEL_216;
                      }
                    }

                    uint64_t v85 = v80 + v82;
                    if (v77 < v80 + v82 + 1) {
                      goto LABEL_167;
                    }
                    if (*(_BYTE *)(v85 + 1) == 10) {
                      uint64_t v85 = v80 + v82 + 1;
                    }
LABEL_167:
                    unint64_t v70 = __OFADD__(i++, 1LL);
                    if (v70) {
                      goto LABEL_276;
                    }
                    unint64_t v80 = v85 + 1;
LABEL_169:
                    if (v80 >= v78)
                    {
                      a3 = 0LL;
                      goto LABEL_216;
                    }
                  }
                }

                a3 = 0LL;
                uint64_t i = 1LL;
LABEL_216:
                uint64_t v74 = &v46[v59 - a4];
                goto LABEL_244;
              }
            }

    uint64_t v48 = &v20[v46];
LABEL_95:
    if ((unint64_t)v48 < v22)
    {
      uint64_t v57 = 0;
      unint64_t v58 = (unsigned __int8 *)(v48 - v20);
      char v59 = 1;
      char v60 = 1;
      while (1)
      {
        uint64_t v61 = 0LL;
        uint64_t v62 = &v20[v21] - v48;
        while (1)
        {
          if (v48 - v20 + v61 < 0 || (uint64_t v32 = v62 < 1, --v62, v32))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            char v79 = (unint64_t)&v48[v61];
            if ((unint64_t)&v48[v61] >= a4)
            {
              unint64_t v80 = a4 + i;
              if (a4 + i >= v79)
              {
                if (v80 > a4)
                {
                  BOOL v81 = i + a4;
                  uint64_t i = 1LL;
                  uint64_t v82 = a4;
                  while (1)
                  {
                    BOOL v83 = 0LL;
                    uint64_t v84 = 0LL;
                    uint64_t v85 = v81 - v82;
                    while (1)
                    {
                      int64_t v86 = *(unsigned __int8 *)(v82 + v84);
                      if (v86 == 10)
                      {
                        __int128 v72 = __OFADD__(i++, 1LL);
                        if (!v72)
                        {
                          v82 += v84 + 1;
                          goto LABEL_169;
                        }

                        goto LABEL_274;
                      }

                      if (v86 == 13) {
                        break;
                      }
                      a3 = v84 + 1;
                      if (__OFADD__(v84, 1LL)) {
                        goto LABEL_255;
                      }
                      ++v84;
                      --v83;
                      if (v82 + v84 >= v80) {
                        goto LABEL_215;
                      }
                    }

                    uint64_t v87 = v82 + v84;
                    if (v79 < v82 + v84 + 1) {
                      goto LABEL_167;
                    }
                    if (*(_BYTE *)(v87 + 1) == 10) {
                      uint64_t v87 = v82 + v84 + 1;
                    }
LABEL_167:
                    __int128 v72 = __OFADD__(i++, 1LL);
                    if (v72) {
                      goto LABEL_275;
                    }
                    uint64_t v82 = v87 + 1;
LABEL_169:
                    if (v82 >= v80)
                    {
                      a3 = 0LL;
                      goto LABEL_215;
                    }
                  }
                }

                a3 = 0LL;
                uint64_t i = 1LL;
LABEL_215:
                uint64_t v76 = &v48[v61 - a4];
                goto LABEL_243;
              }
            }

    uint64_t v48 = &v19[v46];
LABEL_95:
    if (v48 < v8)
    {
      uint64_t v61 = 0;
      uint64_t v62 = (unsigned __int8 *)(v48 - v19);
      unint64_t v63 = 1;
      uint64_t v64 = 1;
      while (1)
      {
        int64_t v65 = 0LL;
        unint64_t v66 = &v19[i] - v48;
        while (1)
        {
          if (v48 - v19 + v65 < 0 || (uint64_t v32 = v66 < 1, --v66, v32))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            BOOL v83 = (unint64_t)&v48[v65];
            if ((unint64_t)&v48[v65] >= a4)
            {
              uint64_t v84 = a4 + a5;
              if (a4 + a5 >= v83)
              {
                if (v84 > a4)
                {
                  uint64_t v85 = a5 + a4;
                  a5 = 1LL;
                  int64_t v86 = a4;
                  while (1)
                  {
                    uint64_t v87 = 0LL;
                    uint64_t v88 = 0LL;
                    uint64_t v89 = v85 - v86;
                    while (1)
                    {
                      uint64_t v90 = *(unsigned __int8 *)(v86 + v88);
                      if (v90 == 10)
                      {
                        uint64_t v76 = __OFADD__(a5++, 1LL);
                        if (!v76)
                        {
                          v86 += v88 + 1;
                          goto LABEL_169;
                        }

                        goto LABEL_271;
                      }

                      if (v90 == 13) {
                        break;
                      }
                      uint64_t v13 = (char *)(v88 + 1);
                      if (__OFADD__(v88, 1LL)) {
                        goto LABEL_252;
                      }
                      ++v88;
                      --v87;
                      if (v86 + v88 >= v84) {
                        goto LABEL_212;
                      }
                    }

                    uint64_t v91 = v86 + v88;
                    if (v83 < v86 + v88 + 1) {
                      goto LABEL_167;
                    }
                    if (*(_BYTE *)(v91 + 1) == 10) {
                      uint64_t v91 = v86 + v88 + 1;
                    }
LABEL_167:
                    uint64_t v76 = __OFADD__(a5++, 1LL);
                    if (v76) {
                      goto LABEL_272;
                    }
                    int64_t v86 = v91 + 1;
LABEL_169:
                    if (v86 >= v84)
                    {
                      uint64_t v13 = 0LL;
                      goto LABEL_212;
                    }
                  }
                }

                uint64_t v13 = 0LL;
                a5 = 1LL;
LABEL_212:
                unint64_t v80 = &v48[v65 - a4];
                goto LABEL_240;
              }
            }

    outlined release of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    if (!i)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v21 = v99;
      uint64_t v96 = a1;
      uint64_t v91 = v115;
      uint64_t v93 = v108;
      uint64_t v94 = v109;
      unint64_t v92 = v107;
      uint64_t v95 = v111;
      char v25 = v104;
      char v24 = v105;
      goto LABEL_98;
    }

    uint64_t v82 = *(_OWORD *)((char *)v76 + v126);
    BOOL v83 = *(_OWORD *)((char *)v76 + v126 + 16);
    uint64_t v84 = *(_OWORD *)((char *)v76 + v126 + 48);
    char v135 = *(_OWORD *)((char *)v76 + v126 + 32);
    int64_t v136 = v84;
    __int128 v133 = v82;
    __int128 v134 = v83;
    uint64_t v85 = *(_OWORD *)((char *)v76 + v126 + 64);
    int64_t v86 = *(_OWORD *)((char *)v76 + v126 + 80);
    uint64_t v87 = *(_OWORD *)((char *)v76 + v126 + 112);
    uint64_t v139 = *(_OWORD *)((char *)v76 + v126 + 96);
    unint64_t v140 = v87;
    unint64_t v137 = v85;
    unint64_t v138 = v86;
    uint64_t v88 = *(_OWORD *)((char *)v76 + v126 + 128);
    uint64_t v89 = *(_OWORD *)((char *)v76 + v126 + 144);
    uint64_t v90 = *(_OWORD *)((char *)v76 + v126 + 160);
    __int128 v144 = *(void *)((char *)v76 + v126 + 176);
    uint64_t v142 = v89;
    uint64_t v143 = v90;
    unint64_t v141 = v88;
    v126 += 184LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_101:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v74 == 4)
  {
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease();
    if (v14 < 4)
    {
      __break(1u);
    }

    else
    {
      outlined copy of TermOfAddress._TermOfAddress( v107,  v108,  v109,  v115,  v116,  v113,  v110,  v15,  v111,  v105,  v99,  v104,  v14);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Morphology.Pronoun>);
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_183729E10;
      *(void *)(result + 32) = v125;
      *(void *)(result + 40) = v129;
      *(_WORD *)(result + 48) = 3587;
      *(_BYTE *)(result + 50) = 6;
      unint64_t v97 = MEMORY[0x18961AFF0];
      *(void *)(result + 56) = MEMORY[0x18961AFF0];
      *(_DWORD *)(result + 64) = 33751808;
      *(_BYTE *)(result + 68) = 2;
      *(void *)(result + 72) = 0LL;
      *(void *)(result + 80) = 0LL;
      *(void *)(result + 85) = 0LL;
      *(void *)(result + 96) = v123;
      *(void *)(result + 104) = v65;
      *(_WORD *)(result + 112) = 3587;
      *(_BYTE *)(result + 114) = 6;
      *(void *)(result + 120) = v97;
      *(_DWORD *)(result + 128) = 33751809;
      *(_BYTE *)(result + 132) = 2;
      *(void *)(result + 136) = 0LL;
      *(void *)(result + 144) = 0LL;
      *(void *)(result + 149) = 0LL;
      *(void *)(result + 160) = v122;
      *(void *)(result + 168) = v131;
      *(_WORD *)(result + 176) = 3587;
      *(_BYTE *)(result + 178) = 6;
      *(void *)(result + 184) = v97;
      *(_DWORD *)(result + 192) = 16974595;
      *(_BYTE *)(result + 196) = 2;
      *(void *)(result + 213) = 0LL;
      *(void *)(result + 200) = 0LL;
      *(void *)(result + 208) = 0LL;
      *(_OWORD *)(result + 224) = v66;
      *(_WORD *)(result + 240) = 3587;
      *(_BYTE *)(result + 242) = 6;
      *(void *)(result + 248) = v97;
      *(_DWORD *)(result + 256) = 197379;
      *(_BYTE *)(result + 260) = 2;
      *(void *)(result + 264) = 0LL;
      *(void *)(result + 272) = 0LL;
      *(void *)(result + 277) = 0LL;
      *(void *)(result + 288) = v114;
      *(void *)(result + 296) = v132;
      *(_WORD *)(result + 304) = 3587;
      *(_BYTE *)(result + 306) = 6;
      *(void *)(result + 312) = v97;
      *(_DWORD *)(result + 320) = 33620750;
      *(_BYTE *)(result + 324) = 2;
      *(void *)(result + 328) = 0LL;
      *(void *)(result + 336) = 0LL;
      *(void *)(result + 341) = 0LL;
      *a1 = v107;
      a1[1] = v108;
      a1[2] = v109;
      a1[3] = v115;
      a1[4] = v116;
      a1[5] = v113;
      a1[6] = v110;
      a1[7] = v15;
      a1[8] = v111;
      a1[9] = v105;
      a1[10] = v99;
      a1[11] = v104;
      a1[12] = result;
    }
  }

  else
  {
    uint64_t result = outlined release of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    *a1 = v67;
    a1[1] = v68;
    *((_OWORD *)a1 + 1) = v69;
    a1[4] = v128;
    a1[5] = v70;
    *((_OWORD *)a1 + 3) = v71;
    *((_OWORD *)a1 + 4) = v72;
    *((_OWORD *)a1 + 5) = v73;
    a1[12] = v74;
  }

  return result;
}

uint64_t outlined destroy of AttributedString._AttributeValue(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of AttributedString.AttributeRunBoundaries?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of AttributedString.AttributeRunBoundaries?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *specialized AttributedString.Guts.updateRun(at:within:with:)( uint64_t *result, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v5 = *result;
  uint64_t v6 = a4 + 8;
  uint64_t v7 = a4[8];
  if (*result != a4[11])
  {
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }

  uint64_t v49 = result;
  unint64_t v11 = result[1];
  uint64_t v10 = result[2];
  uint64_t v51 = a4;
  uint64_t v52 = result[4];
  if (v10)
  {
    int64_t v12 = (void *)(v10 + 24 * ((v11 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v14 = v12[4];
    uint64_t v13 = v12[5];
    unint64_t v15 = v12[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v11, v7);
    uint64_t v14 = v16;
    uint64_t v13 = v17;
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    if (v5 != v51[11])
    {
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }

    uint64_t v18 = v51[8];
    swift_unknownObjectRetain();
    unint64_t v15 = specialized Rope._Node.subscript.getter(v11, v18);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  BOOL v19 = __OFADD__(v52, v15);
  uint64_t v20 = v52 + v15;
  if (v19) {
    goto LABEL_82;
  }
  uint64_t v55 = v14;
  uint64_t v56 = v13;
  if (v52 >= a3) {
    uint64_t v21 = a3;
  }
  else {
    uint64_t v21 = v52;
  }
  if (v52 >= a2) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = a2;
  }
  if (v20 <= a2) {
    uint64_t v23 = a2;
  }
  else {
    uint64_t v23 = v20;
  }
  if (v20 <= a3) {
    a3 = v23;
  }
  if (v22 == a3) {
    goto LABEL_83;
  }
  if (v22 == v52 && a3 == v20)
  {
    if (v5 == v51[11])
    {
      if (*v6)
      {
        specialized Rope._Node._prepareModify(at:)(v11, (uint64_t)v57);
        __int128 v58 = v57[1];
        v54[0] = v57[0];
        v54[2] = v57[2];
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v58);
        uint64_t result = (uint64_t *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v58 + 8);
        v54[1] = MEMORY[0x18961AFF0];
        v51[11] = v5 + 1;
        *uint64_t v49 = v5 + 1;
        if (v51[8])
        {
          v49[2] = (uint64_t)specialized Rope._Node._finalizeModify(_:)(&v53, v54);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a5(&v55, v52, v20);
          specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(v49, v6, &v55);
          goto LABEL_55;
        }

        goto LABEL_94;
      }

LABEL_71:
  while (2)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v42 = v31 | (v45 << 8);
    uint64_t v29 = (uint64_t)v51;
    uint64_t v28 = v52;
    if (v26)
    {
LABEL_53:
      swift_unknownObjectRetain();
      uint64_t v31 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v30, v42, v33, v26, v29);
      swift_unknownObjectRelease_n();
      uint64_t v44 = v28 - v32;
      if (!__OFSUB__(v28, v32)) {
        break;
      }
      goto LABEL_74;
    }

      if (v39 != 95
        && (v39 - 65) >= 0x1Au
        && v39 != 126
        && (v39 - 97) >= 0x1Au)
      {
        goto LABEL_75;
      }

      goto LABEL_61;
    }

  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(_OWORD *)uint64_t v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_BYTE *)(v33 + 32) = 6;
  swift_willThrow();
  return (uint64_t *)swift_bridgeObjectRelease();
}

    if (v9 == v28)
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      swift_allocError();
      *char v34 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return;
    }

    uint64_t v35 = *(void *)(v8 + 24);
    uint64_t v5 = v9 + 1;
    if (v9 >= v35 >> 1) {
      goto LABEL_99;
    }
    while (1)
    {
      *(void *)(v8 + 16) = v5;
      *(_WORD *)(v8 + 32 + 2 * v9) = 1;
      uint64_t v5 = *(void *)(v8 + 16);
      if (v5 >= v3) {
        goto LABEL_83;
      }
      if (v5)
      {
        __int128 v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v3 + 16) = v5;
        bzero((void *)(v3 + 32), 2 * v5);
        uint64_t v17 = *(void *)(v8 + 16);
        if (v5 > v17) {
          goto LABEL_101;
        }
        if (v5 - 1 >= *(void *)(v3 + 16))
        {
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }

        uint64_t v36 = v5 - 2;
        uint64_t v37 = *(unsigned __int16 *)(v8 + 32 + 2 * (v5 - 1));
        LOWORD(v38) = *(_WORD *)(v8 + 32 + 2 * (v5 - 1)) / 0xAu;
        while (1)
        {
          *(_WORD *)(v3 + 30 + 2 * v5) = v38;
          if (v5 == 1) {
            break;
          }
          if (v36 >= (uint64_t)v17)
          {
            __break(1u);
            goto LABEL_92;
          }

          uint64_t v37 = *(unsigned __int16 *)(v8 + 28 + 2 * v5) | ((v37 % 0xA) << 16);
          uint64_t v38 = v37 / 0xA;
          uint64_t v39 = v5 - 2;
          --v5;
          if (v39 >= *(void *)(v3 + 16)) {
            goto LABEL_82;
          }
        }
      }

      else
      {
LABEL_87:
        __int128 v3 = MEMORY[0x18961AFE8];
      }

      uint64_t v17 = *(void *)(v3 + 16);
      if (v17 && !*(_WORD *)(v3 + 2 * v17 + 30))
      {
        do
        {
LABEL_94:
          *(void *)(v3 + 16) = v17 - 1;
          if (v17 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v3 + 28 + 2 * v17--));
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!__OFADD__(v4++, 1LL)) {
        return;
      }
      __break(1u);
LABEL_99:
      uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v35 > 1),  v5,  1,  (char *)v8);
    }
  }

  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0;
LABEL_4:
  __int128 v3 = 9LL;
  uint64_t v7 = MEMORY[0x18961A800];
  uint64_t v8 = 3435973837LL;
  while (1)
  {
    unint64_t v43 = v4;
    if ((_DWORD)v5) {
      uint64_t v6 = 1;
    }
    uint64_t v4 = v7;
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = v3;
    bzero((void *)(v9 + 32), 2 * v3);
    uint64_t v10 = *(void *)(v2 + 16);
    if (v3 > v10)
    {
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }

    unint64_t v11 = v3 - 1;
    if (v3 - 1 >= *(void *)(v9 + 16)) {
      break;
    }
    int64_t v12 = v3 - 2;
    uint64_t v13 = *(unsigned __int16 *)(v2 + 32 + 2 * v11);
    LOWORD(v14) = *(_WORD *)(v2 + 32 + 2 * v11) / 0xAu;
    while (1)
    {
      *(_WORD *)(v9 + 30 + 2 * v3) = v14;
      uint64_t v5 = v13 % 0xA;
      if (v3 == 1) {
        break;
      }
      uint64_t v13 = *(unsigned __int16 *)(v2 + 28 + 2 * v3) | ((_DWORD)v5 << 16);
      uint64_t v14 = v13 / 0xA;
      unint64_t v15 = v3 - 2;
      --v3;
      if (v15 >= *(void *)(v9 + 16)) {
        goto LABEL_51;
      }
    }

    uint64_t v16 = *(void *)(v9 + 16);
    if (v16 && !*(_WORD *)(v9 + 32 + 2 * v16 - 2))
    {
      do
      {
        *(void *)(v9 + 16) = v16 - 1;
        if (v16 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v9 + 28 + 2 * v16--));
      swift_bridgeObjectRelease();
      uint64_t v4 = v43 + 1;
      if (__OFADD__(v43, 1LL))
      {
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v43 + 1;
      if (__OFADD__(v43, 1LL)) {
        goto LABEL_92;
      }
    }

    __int128 v3 = *(void *)(v9 + 16);
    __int128 v2 = v9;
    if (v3 <= 8)
    {
      __int128 v2 = v9;
      goto LABEL_46;
    }
  }

  __break(1u);
LABEL_72:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    char v34 = -v34;
LABEL_72:
    uint64_t v24 = v47[0] + v34;
    uint64_t v45 = 4LL;
    uint64_t v36 = v47[0] + v34 <= 1.59271755e13 ? v47[0] + v34 : 1.59271755e13;
    uint64_t v37 = fmax(v36, -2.11845067e11);
    unint64_t v43 = v37;
    v18(v47, &v45, &v43, ObjectType, v9);
    memcpy(v44, v47, 0x11AuLL);
    if (LOBYTE(v44[9]) != 1) {
      break;
    }
    if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_79;
    }
LABEL_80:
    if (v6 < v24) {
      uint64_t v38 = 1;
    }
    else {
      uint64_t v38 = v8;
    }
    if (v38 != 1 || (v8 & 1) != 0 && v24 >= v6)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)uint64_t v39 = v24;
      *(double *)(v39 + 8) = v6;
      *(_BYTE *)(v39 + 16) = 1;
      swift_willThrow();
      return (double *)outlined release of DateComponents((uint64_t)v44);
    }

    outlined release of DateComponents((uint64_t)v44);
    LOBYTE(v45) = 2;
    *(double *)uint64_t v44 = v37;
    v23(v47, &v45, v44, ObjectType, v9);
    uint64_t v6 = v24;
    if (LOBYTE(v47[2]) == 1) {
      goto LABEL_29;
    }
  }

  if (v44[8] != v7) {
    goto LABEL_80;
  }
LABEL_79:
  if ((v44[35] & 0x100LL) == 0) {
    goto LABEL_80;
  }
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v44);
LABEL_61:
  *(double *)a5 = v24;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

    swift_unknownObjectRetain();
    int64_t v65 = v50;
    unint64_t v66 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v50, v189, v64, v48, v49);
    swift_unknownObjectRelease_n();
    goto LABEL_105;
  }

  uint64_t v173 = v33[11];
  uint64_t v53 = *(unsigned __int8 *)(v48 + 18);
  if (*(_BYTE *)(v48 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v221);
    unint64_t v54 = v188;
    uint64_t v55 = v48;
    while (1)
    {
      __int128 v58 = *(unsigned __int16 *)(v55 + 16);
      if (!*(_WORD *)(v55 + 16)) {
        goto LABEL_54;
      }
      char v59 = *(void *)(v55 + 40);
      uint64_t v25 = __OFSUB__(v54, v59);
      char v60 = v54 - v59;
      if (v25) {
        goto LABEL_203;
      }
      if (__OFADD__(v60, 1LL)) {
        goto LABEL_204;
      }
      if (v60 + 1 < 1)
      {
        __int128 v58 = 0LL;
      }

      else
      {
        if ((_DWORD)v58 == 1)
        {
          unint64_t v54 = v60;
LABEL_54:
          if (v54) {
            goto LABEL_200;
          }
          goto LABEL_55;
        }

        uint64_t v61 = (uint64_t *)(v55 + 64);
        uint64_t v62 = 1LL;
        while (1)
        {
          unint64_t v63 = *v61;
          v61 += 3;
          unint64_t v54 = v60 - v63;
          if (__OFSUB__(v60, v63)) {
            goto LABEL_197;
          }
          if (__OFADD__(v54, 1LL)) {
            goto LABEL_198;
          }
          if (v54 + 1 < 1) {
            break;
          }
          ++v62;
          char v60 = v54;
          if (v58 == v62) {
            goto LABEL_54;
          }
        }

        __int128 v58 = v62;
        unint64_t v54 = v60;
      }

        int64_t v12 = 0;
        uint64_t v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        int64_t v12 = 0;
        uint64_t v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_72:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

                    __break(1u);
                    goto LABEL_72;
                  }

      uint64_t v84 = 0;
      for (v83._object = (void *)48; ; v83._object = (void *)294)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_73:
        v91._countAndFlagsBits = 0LL;
        v91._object = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(34LL);
        swift_bridgeObjectRelease();
        v91._countAndFlagsBits = 0xD000000000000014LL;
        v91._object = (void *)0x80000001839CF030LL;
        LOWORD(v90) = v3;
        lazy protocol witness table accessor for type UInt16 and conformance UInt16();
        v79._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v79);
        swift_bridgeObjectRelease();
        v80._countAndFlagsBits = 0x6C696620726F6620LL;
        v80._object = (void *)0xEA00000000002065LL;
        String.append(_:)(v80);
        v81._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        v81._object = (void *)object;
        String.append(_:)(v81);
        uint64_t v84 = 0;
      }
    }

    goto LABEL_5;
  }

  uint64_t v25 = S_IFMT.getter() & v3;
  object = (unint64_t)countAndFlagsBits;
  if (v25 != (unsigned __int16)S_IFLNK.getter())
  {
    uint64_t v40 = S_IFMT.getter() & v3;
    countAndFlagsBits = v88;
    unint64_t v41 = (void *)MEMORY[0x186E20F44](v4);
    if (!v41) {
      goto LABEL_71;
    }
    unint64_t v42 = v41;
    v91._countAndFlagsBits = 0LL;
    unint64_t v43 = objc_msgSend(v41, sel_contentsOfDirectoryAtPath_error_, String._bridgeToObjectiveCImpl()(), &v91);

    swift_unknownObjectRelease();
    __int128 v3 = v91._countAndFlagsBits;
    if (v43)
    {
      uint64_t v44 = type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      uint64_t v87 = v44;
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      countAndFlagsBits = (id)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v45 = (void *)swift_dynamicCastClass();
      if (!v45)
      {
        swift_unknownObjectRelease();
        objc_msgSend(v43, sel_copy);
        uint64_t v46 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        uint64_t v45 = (void *)specialized _arrayForceCast<A, B>(_:)(v46);
        swift_bridgeObjectRelease();
      }

      uint64_t v47 = (id)v3;

      uint64_t v48 = MEMORY[0x186E20F44](v4);
      if (!v48) {
        goto LABEL_71;
      }
      uint64_t v49 = (void *)v48;
      uint64_t v50 = String._bridgeToObjectiveCImpl()();
      v91._countAndFlagsBits = 0LL;
      uint64_t v51 = objc_msgSend(v49, sel_contentsOfDirectoryAtPath_error_, v50, &v91);

      swift_unknownObjectRelease();
      uint64_t v52 = (void *)v91._countAndFlagsBits;
      if (v51)
      {
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        uint64_t v53 = swift_dynamicCastClass();
        if (!v53)
        {
          swift_unknownObjectRelease();
          objc_msgSend(v51, sel_copy);
          unint64_t v54 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          uint64_t v53 = specialized _arrayForceCast<A, B>(_:)(v54);
          swift_bridgeObjectRelease();
        }

        uint64_t v55 = v52;

        uint64_t v56 = Set.init(minimumCapacity:)();
        uint64_t v90 = v56;
        uint64_t v57 = *(void *)(v53 + 16);
        if (v57)
        {
          __int128 v58 = v45;
          char v59 = (unint64_t *)(v53 + 40);
          do
          {
            char v60 = *(v59 - 1);
            uint64_t v61 = *v59;
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)((unint64_t *)&v91, v60, v61);
            swift_bridgeObjectRelease();
            v59 += 2;
            --v57;
          }

          while (v57);
          swift_bridgeObjectRelease();
          uint64_t v62 = v90;
          uint64_t v45 = v58;
        }

        else
        {
          int64_t v65 = v56;
          swift_bridgeObjectRelease();
          uint64_t v62 = v65;
        }

        unint64_t v66 = v45[2];
        if (v66 == *(void *)(v62 + 16))
        {
          if (!v66)
          {
LABEL_69:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v16 = 1;
            return v16 & 1;
          }

          uint64_t v67 = v45[4];
          unint64_t v68 = (void *)v45[5];
          swift_bridgeObjectRetain();
          if ((specialized Set.contains(_:)(v67, (uint64_t)v68, v62) & 1) != 0)
          {
            unint64_t v69 = 0LL;
            unint64_t v70 = (void **)(v45 + 7);
            uint64_t v85 = v66 - 1;
            int64_t v86 = v45;
            while (1)
            {
              int64_t v71 = v62;
              v91._countAndFlagsBits = (uint64_t)v88;
              v91._object = (void *)object;
              swift_bridgeObjectRetain();
              v72._countAndFlagsBits = 47LL;
              v72._object = (void *)0xE100000000000000LL;
              String.append(_:)(v72);
              v73._countAndFlagsBits = v67;
              v73._object = v68;
              String.append(_:)(v73);
              uint64_t v74 = v91._object;
              uint64_t v87 = v91._countAndFlagsBits;
              uint64_t v91 = v89;
              swift_bridgeObjectRetain();
              v75._countAndFlagsBits = 47LL;
              v75._object = (void *)0xE100000000000000LL;
              String.append(_:)(v75);
              v76._countAndFlagsBits = v67;
              v76._object = v68;
              String.append(_:)(v76);
              swift_bridgeObjectRelease();
              v77._countAndFlagsBits = v87;
              v77._object = v74;
              unint64_t v78 = _FileManagerImpl.contentsEqual(atPath:andPath:)(v77, v91);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (!v78) {
                break;
              }
              if (v85 == v69) {
                goto LABEL_69;
              }
              uint64_t v62 = v71;
              uint64_t v67 = (uint64_t)*(v70 - 1);
              unint64_t v68 = *v70;
              swift_bridgeObjectRetain();
              v70 += 2;
            }
          }

          else
          {
LABEL_67:
            swift_bridgeObjectRelease();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }

      unint64_t v63 = (id)v91._countAndFlagsBits;
      swift_bridgeObjectRelease();
      if (!v63) {
        goto LABEL_51;
      }
LABEL_50:
      swift_willThrow();

      goto LABEL_5;
    }

    if (!v91._countAndFlagsBits) {
      goto LABEL_51;
    }
LABEL_44:
    unint64_t v63 = (id)v91._countAndFlagsBits;
    goto LABEL_50;
  }

  uint64_t v26 = (void *)MEMORY[0x186E20F44](v4);
  if (!v26) {
    goto LABEL_71;
  }
  v91._countAndFlagsBits = 0LL;
  countAndFlagsBits =  objc_msgSend( v26,  sel_destinationOfSymbolicLinkAtPath_error_,  String._bridgeToObjectiveCImpl()(),  &v91);

  swift_unknownObjectRelease();
  uint64_t v27 = (void *)v91._countAndFlagsBits;
  if (!countAndFlagsBits)
  {
    if (!v91._countAndFlagsBits) {
      goto LABEL_51;
    }
    goto LABEL_44;
  }

  __int128 v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits);
  uint64_t v29 = v28;
  uint64_t v30 = v27;

  uint64_t v31 = MEMORY[0x186E20F44](v4);
  if (!v31) {
    goto LABEL_71;
  }
  uint64_t v32 = (void *)v31;
  uint64_t v33 = String._bridgeToObjectiveCImpl()();
  v91._countAndFlagsBits = 0LL;
  char v34 = objc_msgSend(v32, sel_destinationOfSymbolicLinkAtPath_error_, v33, &v91);

  swift_unknownObjectRelease();
  uint64_t v35 = (void *)v91._countAndFlagsBits;
  if (!v34)
  {
    uint64_t v64 = (id)v91._countAndFlagsBits;
    swift_bridgeObjectRelease();
    if (v64)
    {
      swift_willThrow();

LABEL_5:
      uint64_t v16 = 0;
      return v16 & 1;
    }

  swift_willThrow();
}

  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

  v281 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7LL, 0);
  for (uint64_t i = 0LL; i != 28; i += 4LL)
  {
    char v60 = *(_DWORD *)((char *)&outlined read-only object #1 of URL.UnicodeLookalikeTable.allCharactersAllowedByTLDRules(in:)
                    + i
                    + 32);
    if (v60 >> 11 == 27) {
      goto LABEL_168;
    }
    if (v60 > 0x10FFFF)
    {
      __break(1u);
LABEL_168:
      __break(1u);
      goto LABEL_173;
    }

    uint64_t v62 = *(void *)(v281 + 16);
    uint64_t v61 = *(void *)(v281 + 24);
    if (v62 >= v61 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
    }
    *(void *)(v281 + 16) = v62 + 1;
    *(_DWORD *)(v281 + 4 * v62 + 32) = v60;
  }

  String.UnicodeScalarView.append<A>(contentsOf:)();
  swift_release();
  swift_bridgeObjectRetain();
  unint64_t v63 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v64 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
  if ((a2 & 0x2000000000000000LL) != 0) {
    int64_t v65 = HIBYTE(a2) & 0xF;
  }
  else {
    int64_t v65 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v66 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    unint64_t v66 = 11LL;
  }
  uint64_t v67 = v66 | (v65 << 16);
  unint64_t v68 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
  if (__OFSUB__(0LL, v68)) {
    goto LABEL_178;
  }
  if (4 * v65 < String.UnicodeScalarView.index(_:offsetBy:)(v67, -(uint64_t)v68, a1, a2) >> 14)
  {
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }

  swift_bridgeObjectRetain();
  String.UnicodeScalarView.subscript.getter();
  lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  String.UnicodeScalarView.append<A>(contentsOf:)();
  unint64_t v69 = specialized Sequence<>.elementsEqual<A>(_:)(0LL, 0xE000000000000000LL, 0LL, 0xE000000000000000LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0)
  {
LABEL_107:
    v282 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 5LL, 0);
    uint64_t v82 = v282;
    uint64_t v84 = *(void *)(v282 + 16);
    BOOL v83 = *(void *)(v282 + 24);
    uint64_t v85 = v84 + 1;
    if (v84 >= v83 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
      uint64_t v82 = v282;
    }

    *(void *)(v82 + 16) = v85;
    *(_DWORD *)(v82 + 4 * v84 + 32) = 46;
    int64_t v86 = *(void *)(v82 + 24);
    if (v85 >= v86 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v84 + 2, 1);
    }
    *(void *)(v82 + 16) = v84 + 2;
    *(_DWORD *)(v82 + 4 * v85 + 32) = 1076;
    uint64_t v88 = *(void *)(v82 + 16);
    uint64_t v87 = *(void *)(v82 + 24);
    uint64_t v89 = v88 + 1;
    if (v88 >= v87 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
    }
    *(void *)(v82 + 16) = v89;
    *(_DWORD *)(v82 + 4 * v88 + 32) = 1077;
    uint64_t v90 = *(void *)(v82 + 24);
    if (v89 >= v90 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, v88 + 2, 1);
    }
    *(void *)(v82 + 16) = v88 + 2;
    *(_DWORD *)(v82 + 4 * v89 + 32) = 1090;
    unint64_t v92 = *(void *)(v82 + 16);
    uint64_t v91 = *(void *)(v82 + 24);
    if (v92 >= v91 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
    }
    *(void *)(v82 + 16) = v92 + 1;
    *(_DWORD *)(v82 + 4 * v92 + 32) = 1080;
    String.UnicodeScalarView.append<A>(contentsOf:)();
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v93 = String.count.getter();
    swift_bridgeObjectRelease();
    uint64_t v94 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
    if ((a2 & 0x2000000000000000LL) != 0) {
      uint64_t v95 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v95 = a1 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v96 = 7LL;
    if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v96 = 11LL;
    }
    unint64_t v97 = v96 | (v95 << 16);
    uint64_t v98 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
    if (__OFSUB__(0LL, v98)) {
      goto LABEL_180;
    }
    if (4 * v95 >= String.UnicodeScalarView.index(_:offsetBy:)(v97, -(uint64_t)v98, a1, a2) >> 14)
    {
      swift_bridgeObjectRetain();
      String.UnicodeScalarView.subscript.getter();
      lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
      String.UnicodeScalarView.append<A>(contentsOf:)();
      unint64_t v99 = specialized Sequence<>.elementsEqual<A>(_:)(0LL, 0xE000000000000000LL, 0LL, 0xE000000000000000LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v99 & 1) != 0)
      {
        unint64_t v100 = specialized Collection.count.getter(0LL, 0xE000000000000000LL);
        swift_bridgeObjectRetain();
        __int128 v101 = specialized BidirectionalCollection.dropLast(_:)(v100, a1, a2);
        uint64_t v103 = v102;
        uint64_t v105 = v104;
        uint64_t v107 = v106;
        swift_bridgeObjectRelease();
        BOOL v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v101, v103, v105, v107);
        swift_bridgeObjectRelease();
LABEL_164:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_165;
      }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  uint64_t v26 = *((void *)v2 + 2);
  uint64_t v25 = *((void *)v2 + 3);
  if (v26 >= v25 >> 1) {
    __int128 v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v26 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v26 + 1;
  v2[v26 + 32] = 4;
  if ((v1 & 0x20) == 0)
  {
LABEL_23:
    if ((v1 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_81;
  }

    swift_bridgeObjectRelease();
LABEL_25:
    unint64_t v42 = (void *)(*(void *)(v39 + 56) + 16 * v21);
    *unint64_t v42 = 0LL;
    v42[1] = 0LL;
LABEL_29:
    void *v5 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v20 = swift_conformsToProtocol2();
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0LL;
  }
  if (v20) {
    int64_t v12 = v19;
  }
  else {
    int64_t v12 = 0LL;
  }
  if (!v12) {
    goto LABEL_113;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_isUniquelyReferenced_nonNull_native();
  int64_t v86 = *v5;
  uint64_t v23 = *v5;
  void *v5 = 0x8000000000000000LL;
  uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  uint64_t v26 = *(void *)(v23 + 16);
  uint64_t v27 = (v25 & 1) == 0;
  uint64_t v28 = __OFADD__(v26, v27);
  uint64_t v29 = v26 + v27;
  if (v28) {
    goto LABEL_37;
  }
  uint64_t v30 = v25;
  if (*(void *)(v23 + 24) < v29)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, v22);
    uint64_t v31 = v86;
    uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    if ((v30 & 1) != (v32 & 1)) {
      goto LABEL_112;
    }
    if ((v30 & 1) != 0) {
      goto LABEL_20;
    }
LABEL_33:
    specialized _NativeDictionary._insert(at:key:value:)(v24, a1, a2, v12, v21, v31);
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }

  if ((v22 & 1) != 0)
  {
    uint64_t v31 = v23;
    if ((v25 & 1) == 0) {
      goto LABEL_33;
    }
LABEL_20:
    uint64_t v33 = (void *)(*(void *)(v31 + 56) + 16 * v24);
    *uint64_t v33 = v12;
    v33[1] = v21;
LABEL_34:
    void *v5 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }

  unint64_t v80 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
  uint64_t v61 = static _DictionaryStorage.copy(original:)();
  uint64_t v31 = v61;
  if (!*(void *)(v23 + 16))
  {
LABEL_106:
    swift_bridgeObjectRelease();
    uint64_t v24 = v80;
    if ((v30 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_20;
  }

  uint64_t v62 = (char *)(v61 + 64);
  BOOL v83 = (char *)(v23 + 64);
  unint64_t v63 = (unint64_t)((1LL << *(_BYTE *)(v31 + 32)) + 63) >> 6;
  if (v31 != v23 || v62 >= &v83[8 * v63]) {
    memmove(v62, v83, 8 * v63);
  }
  __srca = 0LL;
  *(void *)(v31 + 16) = *(void *)(v23 + 16);
  uint64_t v64 = 1LL << *(_BYTE *)(v23 + 32);
  int64_t v65 = -1LL;
  if (v64 < 64) {
    int64_t v65 = ~(-1LL << v64);
  }
  unint64_t v66 = v65 & *(void *)(v23 + 64);
  BOOL v81 = (unint64_t)(v64 + 63) >> 6;
  while (1)
  {
    if (v66)
    {
      uint64_t v67 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      unint64_t v68 = v67 | ((void)__srca << 6);
      goto LABEL_81;
    }

    Swift::Int v75 = (int64_t)(__srca + 1);
    if (__OFADD__(__srca, 1LL)) {
      goto LABEL_109;
    }
    if (v75 >= v81) {
      goto LABEL_106;
    }
    uint64_t v76 = *(void *)&v83[8 * v75];
    if (!v76) {
      break;
    }
LABEL_101:
    unint64_t v66 = (v76 - 1) & v76;
    __srca = (char *)v75;
    unint64_t v68 = __clz(__rbit64(v76)) + (v75 << 6);
LABEL_81:
    unint64_t v69 = 16 * v68;
    unint64_t v70 = (uint64_t *)(*(void *)(v23 + 48) + v69);
    __int128 v72 = *v70;
    int64_t v71 = v70[1];
    uint64_t v73 = *(_OWORD *)(*(void *)(v23 + 56) + v69);
    uint64_t v74 = (void *)(*(void *)(v31 + 48) + v69);
    *uint64_t v74 = v72;
    v74[1] = v71;
    *(_OWORD *)(*(void *)(v31 + 56) + v69) = v73;
    swift_bridgeObjectRetain();
  }

  unint64_t v77 = (int64_t)(__srca + 2);
  uint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  unint64_t v77 = (int64_t)(__srca + 3);
  uint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  unint64_t v77 = (int64_t)(__srca + 4);
  uint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  unint64_t v77 = (int64_t)(__srca + 5);
  uint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  unint64_t v77 = (int64_t)(__srca + 6);
  uint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  unint64_t v77 = (int64_t)(__srca + 7);
  uint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  unint64_t v77 = (int64_t)(__srca + 8);
  uint64_t v76 = *(void *)&v83[8 * v77];
  if (v76)
  {
LABEL_100:
    Swift::Int v75 = v77;
    goto LABEL_101;
  }

  while (1)
  {
    Swift::Int v75 = v77 + 1;
    if (__OFADD__(v77, 1LL)) {
      break;
    }
    if (v75 >= v81) {
      goto LABEL_106;
    }
    uint64_t v76 = *(void *)&v83[8 * v75];
    ++v77;
    if (v76) {
      goto LABEL_101;
    }
  }

  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    swift_unknownObjectRelease();
    unint64_t v43 = v167;
    swift_unknownObjectRelease();
    uint64_t v44 = v25 & 0xFFFFFFFFFFFFF0FFLL | (v45 << 8);
    goto LABEL_72;
  }

        uint64_t v46 = _StringObject.sharedUTF8.getter();
        uint64_t v44 = v69;
        goto LABEL_43;
      }

      *(void *)uint64_t v87 = countAndFlagsBits;
      *(void *)&v87[8] = object & 0xFFFFFFFFFFFFFFLL;
      uint64_t v47 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( (uint64_t)v87,  HIBYTE(object) & 0xF,  v39);
      uint64_t v49 = v55;
    }

  __break(1u);
}

    __break(1u);
    goto LABEL_72;
  }

  uint64_t v114 = v27;
  uint64_t v48 = v120;
  uint64_t v47 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v37);
  uint64_t v50 = (char *)&v100 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v126 = v36;
  MEMORY[0x1895F8858](v51);
  uint64_t v53 = (char *)&v100 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unknownObjectRetain();
  unint64_t v54 = swift_dynamicCast();
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  if ((v54 & 1) != 0)
  {
    v55(v53, 0LL, 1LL, AssociatedTypeWitness);
    uint64_t v113 = &v100;
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v56(v50, v53, AssociatedTypeWitness);
    uint64_t v46 = v48;
    v56(v48, v50, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    uint64_t v27 = v114;
    v55(v48, 0LL, 1LL, AssociatedTypeWitness);
LABEL_37:
    uint64_t v57 = v115;
    uint64_t v113 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(v27 + 24))(v115, v27);
    uint64_t v114 = v58;
    uint64_t v112 = &v100;
    char v59 = v27;
    char v60 = *(void *)(v47 + 64);
    MEMORY[0x1895F8858](v113);
    uint64_t v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v109 = (char *)&v100 - v61;
    unint64_t v63 = MEMORY[0x1895F8858](v62);
    int64_t v65 = (char *)&v100 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unint64_t v66 = v46;
    uint64_t v67 = v119;
    (*(void (**)(char *, char *, uint64_t, __n128))(v121 + 16))(v65, v66, v119, v63);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v65, 1LL, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v121 + 8))(v65, v67);
      unint64_t v130 = 0LL;
      __int128 v128 = 0u;
      __int128 v129 = 0u;
      __int128 v126 = 0u;
      __int128 v127 = 0u;
      a1 = v108;
      uint64_t v5 = v107;
      unint64_t v11 = v106;
      unint64_t v68 = v67;
    }

    else
    {
      unint64_t v69 = v109;
      unint64_t v70 = (*(uint64_t (**)(void))(v47 + 32))();
      unint64_t v118 = &v100;
      int64_t v71 = MEMORY[0x1895F8858](v70);
      __int128 v72 = (char *)&v100 - v61;
      uint64_t v73 = *(void (**)(char *, char *, uint64_t, __n128))(v47 + 16);
      v73(v72, v69, AssociatedTypeWitness, v71);
      *((void *)&v124 + 1) = AssociatedTypeWitness;
      *(void *)&v125[0] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v123);
      ((void (*)(uint64_t *, char *, uint64_t))v73)(boxed_opaque_existential_1, v72, AssociatedTypeWitness);
      (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))(v59 + 32))(&v126, v57, v59);
      *(_OWORD *)((char *)v125 + 8) = v126;
      BYTE8(v125[1]) = (*(uint64_t (**)(uint64_t, unint64_t))(v59 + 40))(v57, v59) & 1;
      Swift::Int v75 = (*(uint64_t (**)(uint64_t, unint64_t))(v59 + 48))(v57, v59);
      uint64_t v76 = *(void (**)(char *, uint64_t))(v47 + 8);
      v76(v72, AssociatedTypeWitness);
      unint64_t v130 = v75;
      __int128 v128 = v125[0];
      __int128 v129 = v125[1];
      __int128 v126 = v123;
      __int128 v127 = v124;
      v76(v69, AssociatedTypeWitness);
      a1 = v108;
      uint64_t v5 = v107;
      unint64_t v11 = v106;
      unint64_t v68 = v119;
    }

    int64_t v12 = v105;
    uint64_t v21 = v116;
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v126, (unint64_t)v113, v114);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v68);
    goto LABEL_41;
  }

  v55(v53, 1LL, 1LL, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v53, v119);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  uint64_t v89 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v90 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v91 = objc_msgSend(v89, sel_initWithDomain_code_userInfo_, v90, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v92 = objc_msgSend(v91, sel_domain);
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  uint64_t v95 = v94;

  uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  uint64_t v21 = v116;
  if (v93 == v96 && v95 == v97)
  {
LABEL_63:
    swift_bridgeObjectRelease_n();
    goto LABEL_67;
  }

  unint64_t v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v99 & 1) != 0) {
    goto LABEL_67;
  }
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
}

    uint64_t v49 = theString;
    if (CFEqual(theString, v41))
    {
      CFRelease(theString);
      int64_t v12 = 0x18C488000LL;
      goto LABEL_89;
    }

    CFRetain(v41);
    CFNumberFormatterSetFormat(*(CFNumberFormatterRef *)(a1 + 16), theString);
    if (a4)
    {
      uint64_t v51 = *a4;
      uint64_t v52 = a4[1];
    }

    else
    {
      uint64_t v51 = 0LL;
      uint64_t v52 = v64;
    }

    rangep.location = v51;
    rangep.length = v52;
    uint64_t v24 = CFNumberFormatterCreateNumberFromString( allocator,  *(CFNumberFormatterRef *)(a1 + 16),  a3,  &rangep,  [(id)a1 allowsFloats] ^ 1);
    uint64_t v53 = v24;
    unint64_t v54 = -[__CFString substringFromIndex:](a3, "substringFromIndex:", rangep.length + rangep.location);
    uint64_t v55 = v24 == 0LL;
    if (v24) {
      uint64_t v56 = !v65;
    }
    else {
      uint64_t v56 = 1;
    }
    if ((v56 & 1) == 0)
    {
      uint64_t v57 = v54;
      __int128 v58 = +[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet");
      char v59 = +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  v57);
      char v60 = v58;
      uint64_t v49 = theString;
      uint64_t v55 = !-[NSCharacterSet isSupersetOfSet:](v60, "isSupersetOfSet:", v59);
    }

    int64_t v12 = 0x18C488000LL;
    CFNumberFormatterSetFormat(*(CFNumberFormatterRef *)(a1 + 16), v41);
    CFRelease(v41);
    CFRelease(v49);
    if ((v55 & 1) != 0)
    {
LABEL_89:
      char v34 = v67;
      if (v67)
      {
        uint64_t v50 = objc_msgSend( MEMORY[0x189603F68],  "dictionaryWithObjectsAndKeys:",  a3,  @"NSInvalidValue",  0,  v61,  v62);
        goto LABEL_91;
      }

LABEL_72:
    uint64_t v31 = 0LL;
    uint64_t v44 = v28 - v32;
    if (__OFSUB__(v28, v32))
    {
LABEL_74:
      __break(1u);
LABEL_75:
      uint64_t v45 = i;
      uint64_t v32 = v44;
      continue;
    }

    break;
  }

  *uint64_t v49 = v30;
  v49[1] = v42;
  v49[2] = v33;
  v49[3] = v31;
  v49[4] = v44;
LABEL_55:
  swift_bridgeObjectRelease();
  return (uint64_t *)swift_bridgeObjectRelease();
}

    v62._countAndFlagsBits = 46LL;
    v62._object = (void *)0xE100000000000000LL;
    String.append(_:)(v62);
    v63._countAndFlagsBits = 48LL;
    v63._object = (void *)0xE100000000000000LL;
    String.append(_:)(v63);
LABEL_73:
    *(_DWORD *)uint64_t v82 = v57;
    *(_WORD *)&v82[4] = v56;
    *(_WORD *)&v82[6] = v9;
    *(_WORD *)&v82[8] = v5;
    *(_WORD *)&v82[10] = v10._rawValue;
    *(_WORD *)&v82[12] = v11;
    *(_WORD *)&v82[14] = (_WORD)v12;
    *(_WORD *)&v82[16] = v7;
    *(_WORD *)&v82[18] = v13;
    if (_So9NSDecimala__isNegative_getter(v82))
    {
      v64._countAndFlagsBits = 45LL;
      v64._object = (void *)0xE100000000000000LL;
      String.append(_:)(v64);
    }

    *(_OWORD *)uint64_t v82 = v83;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    uint64_t v55 = String.init<A>(_:)();
    unint64_t v54 = v65;
    goto LABEL_76;
  }

  uint64_t v38 = v35;
  uint64_t v39 = v32;
  while (1)
  {
    char v79 = v38;
    *(_DWORD *)uint64_t v82 = v39;
    *(_WORD *)&v82[4] = v38;
    *(_WORD *)&v82[6] = v9;
    *(_WORD *)&v82[8] = v5;
    *(_WORD *)&v82[10] = v10._rawValue;
    *(_WORD *)&v82[12] = v11;
    *(_WORD *)&v82[14] = (_WORD)v12;
    *(_WORD *)&v82[16] = v7;
    *(_WORD *)&v82[18] = v13;
    if (!_So9NSDecimala__exponent_getter(v82))
    {
      v40._countAndFlagsBits = 46LL;
      v40._object = (void *)0xE100000000000000LL;
      String.append(_:)(v40);
    }

    *(_DWORD *)uint64_t v82 = v39;
    *(_WORD *)&v82[4] = v79;
    *(_WORD *)&v82[6] = v9;
    *(_WORD *)&v82[8] = v5;
    *(_WORD *)&v82[10] = v10._rawValue;
    *(_WORD *)&v82[12] = v11;
    *(_WORD *)&v82[14] = (_WORD)v12;
    *(_WORD *)&v82[16] = v7;
    *(_WORD *)&v82[18] = v13;
    unint64_t v41 = _So9NSDecimala__exponent_getter(v82);
    _So9NSDecimala__exponent_setter((v41 + 1), v84);
    unint64_t v42 = *(_DWORD *)v84;
    LOWORD(v9) = *(_WORD *)&v84[6];
    LOWORD(v13) = *(_WORD *)&v84[14];
    Swift::Int v75 = *(unsigned __int16 *)&v84[8];
    unint64_t v80 = *(_WORD *)&v84[4];
    __int128 v72 = *(_WORD *)&v84[12];
    uint64_t v74 = *(_WORD *)&v84[10];
    LOWORD(v11) = *(_WORD *)&v84[18];
    unint64_t v70 = *(_WORD *)&v84[16];
    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v84 | ((unint64_t)*(unsigned __int16 *)&v84[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v84[6] << 48),  *(unsigned __int16 *)&v84[8] | ((unint64_t)*(unsigned __int16 *)&v84[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v84[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v84[14] << 48),  *(unsigned __int16 *)&v84[16] | (*(unsigned __int16 *)&v84[18] << 16));
    uint64_t v16 = v43;
    uint64_t v7 = *(void *)(v43 + 16);
    if (v7)
    {
      unint64_t v68 = v42;
      v10._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      int64_t v12 = (char *)v10._rawValue + 30;
      *((void *)v10._rawValue + 2) = v7;
      bzero((char *)v10._rawValue + 32, 2 * v7);
      uint64_t v44 = *(unsigned __int16 *)(2 * v7 + v16 + 30);
      uint64_t v45 = v44 / 0xA;
      while (1)
      {
        *(_WORD *)&v12[2 * v7] = v45;
        uint64_t v5 = v44 % 0xA;
        if (v7 == 1) {
          break;
        }
        uint64_t v44 = *(unsigned __int16 *)(v16 + 28 + 2 * v7) | (v5 << 16);
        uint64_t v45 = v44 / 0xA;
        uint64_t v46 = v7 - 2;
        --v7;
        if (v46 >= *((void *)v10._rawValue + 2))
        {
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
      }

      unint64_t v42 = v68;
      uint64_t v47 = *((void *)v10._rawValue + 2);
      if (!v47) {
        goto LABEL_50;
      }
    }

    else
    {
      uint64_t v5 = 0;
      v10._rawValue = (void *)MEMORY[0x18961AFE8];
      uint64_t v47 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v47) {
        goto LABEL_50;
      }
    }

    if (!*((_WORD *)v10._rawValue + v47 + 15))
    {
      do
      {
        *((void *)v10._rawValue + 2) = v47 - 1;
        if (v47 == 1) {
          break;
        }
      }

      while (!*((unsigned __int16 *)v10._rawValue + v47-- + 14));
    }

    specialized _NativeDictionary._insert(at:key:value:)(v2, 64LL, v71, v7, (void *)v19);
LABEL_73:
    unint64_t v242 = v19;
    swift_bridgeObjectRelease();
    if (v8 < 2) {
      return v19;
    }
LABEL_18:
    uint64_t v20 = URL.FormatStyle.Component.rawValue.getter();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter(v236, v8, v20);
    return v242;
  }

  if ((v3 & 1) != 0)
  {
    BOOL v19 = v4;
    int64_t v71 = v234;
    if ((v64 & 1) != 0) {
      goto LABEL_69;
    }
    goto LABEL_72;
  }

  v206 = v7;
  uint64_t v207 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  uint64_t v208 = static _DictionaryStorage.copy(original:)();
  BOOL v19 = v208;
  if (!*(void *)(v4 + 16))
  {
LABEL_318:
    swift_bridgeObjectRelease();
    uint64_t v8 = v207;
    uint64_t v7 = v206;
    int64_t v71 = v234;
    if ((v68 & 1) != 0) {
      goto LABEL_69;
    }
    goto LABEL_72;
  }

  unint64_t v209 = (void *)(v208 + 64);
  uint64_t v210 = v4 + 64;
  unint64_t v211 = (unint64_t)((1LL << *(_BYTE *)(v19 + 32)) + 63) >> 6;
  uint64_t v212 = 0LL;
  *(void *)(v19 + 16) = *(void *)(v4 + 16);
  uint64_t v213 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v214 = -1LL;
  if (v213 < 64) {
    uint64_t v214 = ~(-1LL << v213);
  }
  uint64_t v215 = v214 & *(void *)(v4 + 64);
  uint64_t v216 = (unint64_t)(v213 + 63) >> 6;
  while (2)
  {
    if (v215)
    {
      uint64_t v217 = __clz(__rbit64(v215));
      v215 &= v215 - 1;
      __int128 v218 = v217 | (v212 << 6);
LABEL_283:
      __int128 v219 = 8 * v218;
      char v220 = *(void *)(*(void *)(v4 + 48) + 8 * v218);
      char v221 = 16 * v218;
      __int128 v222 = (uint64_t *)(*(void *)(v4 + 56) + v221);
      __int128 v224 = *v222;
      __int128 v223 = v222[1];
      *(void *)(*(void *)(v19 + 48) + v219) = v220;
      __int128 v225 = (void *)(*(void *)(v19 + 56) + v221);
      *__int128 v225 = v224;
      v225[1] = v223;
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  unint64_t v226 = v212 + 1;
  if (__OFADD__(v212, 1LL)) {
    goto LABEL_326;
  }
  if (v226 >= v216) {
    goto LABEL_318;
  }
  uint64_t v227 = *(void *)(v210 + 8 * v226);
  ++v212;
  if (v227) {
    goto LABEL_306;
  }
  uint64_t v212 = v226 + 1;
  if (v226 + 1 >= v216) {
    goto LABEL_318;
  }
  uint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  uint64_t v212 = v226 + 2;
  if (v226 + 2 >= v216) {
    goto LABEL_318;
  }
  uint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  uint64_t v212 = v226 + 3;
  if (v226 + 3 >= v216) {
    goto LABEL_318;
  }
  uint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  uint64_t v212 = v226 + 4;
  if (v226 + 4 >= v216) {
    goto LABEL_318;
  }
  uint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  uint64_t v212 = v226 + 5;
  if (v226 + 5 >= v216) {
    goto LABEL_318;
  }
  uint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227) {
    goto LABEL_306;
  }
  uint64_t v212 = v226 + 6;
  if (v226 + 6 >= v216) {
    goto LABEL_318;
  }
  uint64_t v227 = *(void *)(v210 + 8 * v212);
  if (v227)
  {
LABEL_306:
    uint64_t v215 = (v227 - 1) & v227;
    __int128 v218 = __clz(__rbit64(v227)) + (v212 << 6);
    goto LABEL_283;
  }

  uint64_t v228 = v226 + 7;
  if (v228 >= v216) {
    goto LABEL_318;
  }
  uint64_t v229 = v19;
  uint64_t v227 = *(void *)(v210 + 8 * v228);
  if (v227)
  {
    uint64_t v212 = v228;
    goto LABEL_306;
  }

  while (1)
  {
    uint64_t v212 = v228 + 1;
    if (__OFADD__(v228, 1LL)) {
      break;
    }
    BOOL v19 = v229;
    if (v212 >= v216) {
      goto LABEL_318;
    }
    uint64_t v227 = *(void *)(v210 + 8 * v212);
    ++v228;
    if (v227) {
      goto LABEL_306;
    }
  }

  if (v116 > v29[2])
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  *(double *)&v29[v116 + 3] = ((double)v119 * 1.0e-18 + (double)v117) / v7 + *(double *)&v29[v116 + 3];
  return v29;
}

      *(void *)(v9[7] + 8 * v53) = v50;
      goto LABEL_73;
    }

    break;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v52 & 1) == 0) {
      goto LABEL_68;
    }
    goto LABEL_72;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  unint64_t v63 = static _DictionaryStorage.copy(original:)();
  uint64_t v64 = v90;
  uint64_t v9 = (void *)v63;
  if (!v90[2])
  {
LABEL_113:
    swift_bridgeObjectRelease();
    if ((v57 & 1) == 0) {
      goto LABEL_68;
    }
    goto LABEL_72;
  }

  int64_t v65 = (void *)(v63 + 64);
  unint64_t v66 = v90 + 8;
  uint64_t v67 = (unint64_t)((1LL << *((_BYTE *)v9 + 32)) + 63) >> 6;
  if (v9 != v90 || v65 >= &v66[v67])
  {
    memmove(v65, v90 + 8, 8 * v67);
    uint64_t v64 = v90;
  }

  unint64_t v68 = 0LL;
  v9[2] = v64[2];
  unint64_t v69 = 1LL << *((_BYTE *)v64 + 32);
  if (v69 < 64) {
    unint64_t v70 = ~(-1LL << v69);
  }
  else {
    unint64_t v70 = -1LL;
  }
  int64_t v71 = v70 & v64[8];
  __int128 v72 = (unint64_t)(v69 + 63) >> 6;
  while (2)
  {
    if (v71)
    {
      uint64_t v73 = __clz(__rbit64(v71));
      v71 &= v71 - 1;
      uint64_t v74 = v73 | (v68 << 6);
LABEL_86:
      Swift::Int v75 = 8 * v74;
      uint64_t v76 = *(void *)(v64[7] + v75);
      *(void *)(v9[6] + v75) = *(void *)(v64[6] + v75);
      *(void *)(v9[7] + v75) = v76;
      continue;
    }

    break;
  }

  uint64_t v28 = __OFADD__(v68++, 1LL);
  if (v28) {
    goto LABEL_128;
  }
  if (v68 >= v72) {
    goto LABEL_113;
  }
  unint64_t v77 = v66[v68];
  if (v77)
  {
LABEL_100:
    char v79 = __clz(__rbit64(v77));
    int64_t v71 = (v77 - 1) & v77;
    uint64_t v74 = v79 + (v68 << 6);
    goto LABEL_86;
  }

  unint64_t v78 = v68 + 1;
  if (v68 + 1 >= v72) {
    goto LABEL_113;
  }
  unint64_t v77 = v66[v78];
  if (v77) {
    goto LABEL_99;
  }
  unint64_t v78 = v68 + 2;
  if (v68 + 2 >= v72) {
    goto LABEL_113;
  }
  unint64_t v77 = v66[v78];
  if (v77) {
    goto LABEL_99;
  }
  unint64_t v78 = v68 + 3;
  if (v68 + 3 >= v72) {
    goto LABEL_113;
  }
  unint64_t v77 = v66[v78];
  if (v77) {
    goto LABEL_99;
  }
  unint64_t v78 = v68 + 4;
  if (v68 + 4 >= v72) {
    goto LABEL_113;
  }
  unint64_t v77 = v66[v78];
  if (v77)
  {
LABEL_99:
    unint64_t v68 = v78;
    goto LABEL_100;
  }

  unint64_t v80 = v9;
  BOOL v81 = v68 + 5;
  if (v68 + 5 >= v72) {
    goto LABEL_112;
  }
  unint64_t v77 = v66[v81];
  if (v77) {
    goto LABEL_107;
  }
  BOOL v81 = v68 + 6;
  if (v68 + 6 >= v72) {
    goto LABEL_112;
  }
  unint64_t v77 = v66[v81];
  if (v77) {
    goto LABEL_107;
  }
  BOOL v81 = v68 + 7;
  if (v68 + 7 >= v72)
  {
LABEL_112:
    uint64_t v9 = v80;
    goto LABEL_113;
  }

  unint64_t v77 = v66[v81];
  if (v77)
  {
LABEL_107:
    unint64_t v68 = v81;
    uint64_t v64 = v90;
    goto LABEL_100;
  }

  while (1)
  {
    unint64_t v68 = v81 + 1;
    if (__OFADD__(v81, 1LL)) {
      break;
    }
    if (v68 >= v72) {
      goto LABEL_112;
    }
    unint64_t v77 = v66[v68];
    ++v81;
    uint64_t v9 = v80;
    uint64_t v64 = v90;
    if (v77) {
      goto LABEL_100;
    }
  }

      int64_t v12 = 0;
      uint64_t v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        uint64_t v25 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v26 = a3 + 55;
        }

        else
        {
          uint64_t v25 = 97;
          uint64_t v26 = 65;
        }

        if (a3 <= 10) {
          uint64_t v27 = a3 + 48;
        }
        else {
          uint64_t v27 = 58;
        }
        if (result)
        {
          uint64_t v28 = 0;
          do
          {
            uint64_t v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                int64_t v12 = 0;
                uint64_t v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                uint64_t v30 = -87;
              }

              else
              {
                uint64_t v30 = -55;
              }
            }

            else
            {
              uint64_t v30 = -48;
            }

            uint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            uint64_t v32 = v29 + v30;
            uint64_t v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          uint64_t v13 = 0;
          int64_t v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v5 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v6 = a3 + 55;
        }

        else
        {
          uint64_t v5 = 97;
          uint64_t v6 = 65;
        }

        if (a3 <= 10) {
          uint64_t v7 = a3 + 48;
        }
        else {
          uint64_t v7 = 58;
        }
        if (result)
        {
          uint64_t v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            uint64_t v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                int64_t v12 = 0;
                uint64_t v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                unint64_t v11 = -87;
              }

              else
              {
                unint64_t v11 = -55;
              }
            }

            else
            {
              unint64_t v11 = -48;
            }

            uint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            unint64_t v15 = v10 + v11;
            uint64_t v8 = v14 - v15;
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      int64_t v12 = 0;
      uint64_t v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        uint64_t v21 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v22 = a3 + 55;
        }

        else
        {
          uint64_t v21 = 97;
          uint64_t v22 = 65;
        }

        if (a3 <= 10) {
          uint64_t v23 = a3 + 48;
        }
        else {
          uint64_t v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            uint64_t v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                int64_t v12 = 0;
                uint64_t v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                uint64_t v26 = -87;
              }

              else
              {
                uint64_t v26 = -55;
              }
            }

            else
            {
              uint64_t v26 = -48;
            }

            uint64_t v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          uint64_t v13 = 0;
          int64_t v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v5 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v6 = a3 + 55;
        }

        else
        {
          uint64_t v5 = 97;
          uint64_t v6 = 65;
        }

        if (a3 <= 10) {
          uint64_t v7 = a3 + 48;
        }
        else {
          uint64_t v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            uint64_t v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                int64_t v12 = 0;
                uint64_t v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                unint64_t v11 = -87;
              }

              else
              {
                unint64_t v11 = -55;
              }
            }

            else
            {
              unint64_t v11 = -48;
            }

            uint64_t v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

              int64_t v136 = (v143 - 1) & v143;
              uint64_t v139 = __clz(__rbit64(v143)) + (v133 << 6);
            }

            unint64_t v140 = 8 * v139;
            unint64_t v141 = *(void **)(*(void *)(v109 + 56) + v140);
            *(void *)(*(void *)(v116 + 48) + v140) = *(void *)(*(void *)(v109 + 48) + v140);
            *(void *)(*(void *)(v116 + 56) + v140) = v141;
            uint64_t v142 = v141;
          }
        }

        swift_bridgeObjectRelease();
        if ((v115 & 1) != 0) {
          goto LABEL_22;
        }
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v114,  isUniquelyReferenced_nonNull_native);
      __int128 v116 = v202;
      unint64_t v117 = specialized __RawDictionaryStorage.find<A>(_:)(v105);
      if ((v115 & 1) != (v118 & 1)) {
        goto LABEL_119;
      }
      uint64_t v111 = v117;
      if ((v115 & 1) != 0)
      {
LABEL_22:
        uint64_t v62 = *(void *)(v116 + 56);

        *(void *)(v62 + 8 * v111) = v107;
        goto LABEL_23;
      }
    }

    *(void *)(v116 + 8 * (v111 >> 6) + 64) |= 1LL << v111;
    uint64_t v119 = 8 * v111;
    *(void *)(*(void *)(v116 + 48) + v119) = v105;
    *(void *)(*(void *)(v116 + 56) + v119) = v107;
    unint64_t v120 = *(void *)(v116 + 16);
    __int128 v121 = __OFADD__(v120, 1LL);
    unint64_t v122 = v120 + 1;
    if (v121) {
      goto LABEL_116;
    }
    *(void *)(v116 + 16) = v122;
LABEL_23:
    *(void *)(v104 + 8) = v116;

    char v59 = swift_bridgeObjectRelease();
    uint64_t v61 = v191 + 1;
    char v60 = v194;
    if (v191 + 1 == v194) {
      goto LABEL_92;
    }
  }

  unint64_t v187 = v168;
  unint64_t v201 = 0LL;
  unint64_t v199 = 0u;
  uint64_t v200 = 0u;
  outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for ConvertibleExpression?);
  uint64_t v188 = 0LL;
LABEL_31:
  char v79 = MEMORY[0x18961AFE8];
  unint64_t v80 = v65;
  BOOL v81 = v64;
  uint64_t v82 = swift_getAssociatedTypeWitness();
  uint64_t v185 = v168;
  BOOL v83 = *(void *)(v82 - 8);
  MEMORY[0x1895F8858](v82);
  uint64_t v85 = (char *)v168 - v84;
  int64_t v86 = type metadata accessor for Optional();
  unint64_t v184 = v168;
  uint64_t v87 = *(void *)(v86 - 8);
  uint64_t v88 = MEMORY[0x1895F8858](v86);
  uint64_t v90 = (char *)v168 - v89;
  *(void *)&unint64_t v202 = v79;
  uint64_t v91 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v80 + 16);
  unint64_t v92 = v195;
  uint64_t v186 = v81;
  v91(&v202, v81, v80, v88);
  if (v92)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v90, 1LL, 1LL, v82);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v86);
    goto LABEL_106;
  }

  (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v90, 0LL, 1LL, v82);
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v85, v90, v82);
  unint64_t v198 = v82;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v197);
  (*(void (**)(uint64_t *, char *, uint64_t))(v83 + 16))(boxed_opaque_existential_1, v85, v82);
  _expressionCompatibleValue(for:)((uint64_t)v197, (uint64_t)&v199);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v197);
  if (*((void *)&v200 + 1))
  {
    uint64_t v195 = 0LL;
    outlined init with take of Any(&v199, &v202);
    uint64_t v94 = v203;
    uint64_t v95 = __swift_project_boxed_opaque_existential_1(&v202, v203);
    uint64_t v182 = v168;
    uint64_t v96 = *(void *)(v94 - 8);
    unint64_t v97 = *(void *)(v96 + 64);
    uint64_t v98 = MEMORY[0x1895F8858](v95);
    unint64_t v99 = (v97 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    unint64_t v100 = *(void (**)(char *, __n128))(v96 + 16);
    v100((char *)v168 - v99, v98);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    if ((isClassOrObjCExistentialType & 1) != 0)
    {
      if (v97 != 8) {
        goto LABEL_115;
      }
      unint64_t v102 = *(void *)((char *)v168 - v99);
      swift_unknownObjectRetain();
    }

    else
    {
      v168[1] = v168;
      __int128 v129 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
      ((void (*)(char *, char *, uint64_t, __n128))v100)((char *)v168 - v99, (char *)v168 - v99, v94, v129);
      unint64_t v102 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }

    (*(void (**)(char *, uint64_t))(v96 + 8))((char *)v168 - v99, v94);
    uint64_t v103 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v102);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);

    uint64_t v104 = v190;
    uint64_t v105 = v192;
    uint64_t v64 = v186;
    goto LABEL_37;
  }

  (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
  outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for Any?);
LABEL_106:
  uint64_t v57 = v177;
  uint64_t v162 = v169;
  uint64_t v163 = v171;
  unint64_t v164 = v186;
  if (!v188)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v165 = 2;
  }

  swift_willThrow();
  (*(void (**)(void *, uint64_t))(v193 + 8))(v196, v164);
  (*(void (**)(void *, uint64_t))(v162 + 8))(v163, v170);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v189, TupleTypeMetadata);
  return (uint64_t)v57;
}

                      __break(1u);
                      goto LABEL_73;
                    }

                    char v34 = v73;
                    if (!v73)
                    {
                      swift_release();
                      uint64_t v20 = MEMORY[0x18961AFF8];
                      goto LABEL_144;
                    }

                    if (v73 == *(void *)(v1 + 16))
                    {
                      uint64_t v20 = v1;
                      goto LABEL_144;
                    }

                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>);
                    uint64_t v20 = static _SetStorage.allocate(capacity:)();
                    uint64_t v53 = 0LL;
                    unint64_t v54 = *v75;
                    uint64_t v55 = v20 + 56;
                    while (1)
                    {
                      if (v54)
                      {
                        uint64_t v57 = __clz(__rbit64(v54));
                        v54 &= v54 - 1;
                        __int128 v58 = v57 | (v53 << 6);
                      }

                      else
                      {
                        uint64_t v13 = __OFADD__(v53++, 1LL);
                        if (v13) {
                          goto LABEL_151;
                        }
                        if (v53 >= v74) {
                          goto LABEL_143;
                        }
                        char v59 = v75[v53];
                        if (!v59)
                        {
                          char v60 = v53 + 1;
                          if (v53 + 1 >= v74) {
                            goto LABEL_143;
                          }
                          char v59 = v75[v60];
                          if (v59) {
                            goto LABEL_126;
                          }
                          char v60 = v53 + 2;
                          if (v53 + 2 >= v74) {
                            goto LABEL_143;
                          }
                          char v59 = v75[v60];
                          if (v59) {
                            goto LABEL_126;
                          }
                          char v60 = v53 + 3;
                          if (v53 + 3 >= v74) {
                            goto LABEL_143;
                          }
                          char v59 = v75[v60];
                          if (v59) {
                            goto LABEL_126;
                          }
                          char v60 = v53 + 4;
                          if (v53 + 4 >= v74) {
                            goto LABEL_143;
                          }
                          char v59 = v75[v60];
                          if (v59)
                          {
LABEL_126:
                            uint64_t v53 = v60;
                          }

                          else
                          {
                            unint64_t v70 = v53 + 5;
                            if (v53 + 5 >= v74) {
                              goto LABEL_143;
                            }
                            char v59 = v75[v70];
                            v53 += 5LL;
                            if (!v59)
                            {
                              while (1)
                              {
                                uint64_t v53 = v70 + 1;
                                if (__OFADD__(v70, 1LL)) {
                                  goto LABEL_155;
                                }
                                if (v53 >= v74) {
                                  break;
                                }
                                char v59 = v75[v53];
                                ++v70;
                                if (v59) {
                                  goto LABEL_127;
                                }
                              }

      swift_release();
      *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
      uint64_t result = outlined retain of LocalePreferences?( (uint64_t)v33,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      *(void *)a3 = v19;
      return result;
    }
  }

  uint64_t v10 = v34[0];
LABEL_6:
  if (v10 == 2)
  {
LABEL_7:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }

  *(void *)(a3 + 24) = MEMORY[0x1896184C8];
  *(_BYTE *)a3 = v10 & 1;
  return result;
}

  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_BYTE *)(a3 + 48) = 1;
  ucal_close();
  swift_setDeallocating();
  return swift_setDeallocating();
}

        uint64_t v98 = v332;
        unint64_t v99 = v333;
        v329 = 4LL;
        unint64_t v100 = (uint64_t)v331;
        switch(v83)
        {
          case 0:
          case 12:
            __int128 v101 = 513LL;
            goto LABEL_257;
          case 1:
            goto LABEL_258;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
          case 15:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 28:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
            goto LABEL_223;
          case 16:
            __int128 v101 = 516LL;
            goto LABEL_257;
          case 27:
          case 68:
            __int128 v101 = 640LL;
            goto LABEL_257;
          case 29:
            __int128 v101 = 642LL;
            goto LABEL_257;
          case 62:
            __int128 v101 = 514LL;
            goto LABEL_257;
          default:
            unint64_t v100 = (uint64_t)v331;
            if ((_DWORD)a6 == 102)
            {
              __int128 v256 = 0LL;
              v329 = 512LL;
            }

            else
            {
LABEL_223:
              __int128 v101 = 512LL;
LABEL_257:
              v329 = v101;
LABEL_258:
              if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
                goto LABEL_303;
              }
              unint64_t v15 = (uint64_t)@"NSPOSIXErrorDomain";
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
              v295 = (int)POSIXErrorCode.rawValue.getter();
              v296 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
              v297 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              __int128 v256 = objc_msgSend(v296, sel_initWithDomain_code_userInfo_, v297, v295, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v298 = objc_msgSend(v256, sel_domain);
              v299 = static String._unconditionallyBridgeFromObjectiveC(_:)(v298);
              v301 = v300;

              if (v299 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                && v301 == v302)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v98 = v332;
                unint64_t v99 = v333;
              }

              else
              {
                v303 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v98 = v332;
                unint64_t v99 = v333;
                if ((v303 & 1) == 0) {
                  goto LABEL_299;
                }
              }
            }

            v304 = v330;
            swift_bridgeObjectRetain();
            outlined copy of PathOrURL(v99, v100, v98, 0);
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v329,  (uint64_t)v99,  v100,  v256,  v328,  v304,  0LL,  0LL,  &v340,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
            goto LABEL_290;
        }
      }

      uint64_t v40 = _NSOpenFileDescriptor_Protected(a4, 2562, (int)a6, 438LL);
      if ((v40 & 0x80000000) == 0)
      {
        unint64_t v15 = v40;
        String.init(cString:)();
        MEMORY[0x186E20E60](a4, -1LL, -1LL);
LABEL_62:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v15;
      }

      if (MEMORY[0x186E1B0E8]() != 17)
      {
        int64_t v86 = MEMORY[0x186E1B0E8]();
        LODWORD(v15) = v86;
        if ((v17 & 1) != 0)
        {
          CocoaError.Code.init(fileErrno:reading:)(v86, 0);
          v327 = v336;
          uint64_t v84 = v332;
          swift_retain_n();
          a6 = v333;
          uint64_t v87 = v333;
          uint64_t v17 = (uint64_t)v331;
          swift_retain_n();
          uint64_t v88 = v87;
          uint64_t v32 = v88;
          if ((_DWORD)v15 == 102)
          {
            uint64_t v29 = 0LL;
            goto LABEL_179;
          }

          v326 = v88;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_305;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          __int128 v132 = (int)POSIXErrorCode.rawValue.getter();
          __int128 v133 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          __int128 v134 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v29 = (uint64_t)objc_msgSend( v133,  sel_initWithDomain_code_userInfo_,  v134,  v132,  _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          char v135 = objc_msgSend((id)v29, sel_domain);
          int64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
          unint64_t v138 = v137;

          if (v136 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v138 == v139)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v84 = v332;
LABEL_178:
            a6 = v333;
            uint64_t v32 = v326;
LABEL_179:
            swift_bridgeObjectRetain();
            outlined copy of PathOrURL(a6, v17, v84, 1);
            if (_foundation_swift_url_feature_enabled())
            {
              object = (void *)v29;
              v340._countAndFlagsBits = (uint64_t)v32;
              v340._object = (void *)v17;
              v341 = v84;
              swift_retain();
              uint64_t v217 = v32;
              swift_retain();
              __int128 v218 = URL.path(percentEncoded:)(1);
              v340 = v218;
              swift_bridgeObjectRetain();
              if (String.count.getter() > 1
                && (specialized BidirectionalCollection.last.getter( v218._countAndFlagsBits,  (unint64_t)v218._object) & 0x1FF) == 0x2F)
              {
                specialized RangeReplaceableCollection<>.popLast()();
                swift_bridgeObjectRelease();
              }

              v324 = v218._object;
              v337._countAndFlagsBits = Set.init(minimumCapacity:)();
              __int128 v219 = specialized Set._Variant.insert(_:)(&v335, 0x2FuLL);
              char v220 = v337._countAndFlagsBits;
              char v221 = v340._countAndFlagsBits;
              __int128 v222 = v340._object;
              __int128 v223 = ((unint64_t)v340._object >> 56) & 0xF;
              if (v223)
              {
                v326 = v32;
                v337 = v340;
                MEMORY[0x1895F8858](v219);
                v322 = (uint64_t)&v337;
                v323 = v220;
                swift_bridgeObjectRetain();
                specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v321,  v221,  (unint64_t)v222);
                if (v224 == 1)
                {
                  unint64_t v226 = (unint64_t)v337._object;
                  __int128 v225 = v337._countAndFlagsBits;
                  swift_bridgeObjectRetain();
                  specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v225, v226, v220);
                  swift_bridgeObjectRelease();
                }

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                a6 = v333;
                uint64_t v29 = (uint64_t)object;
                uint64_t v32 = v326;
              }

              else
              {
                swift_bridgeObjectRelease();
                uint64_t v29 = (uint64_t)object;
                a6 = v333;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL(a6, v17, v84, 1);
              __int128 v251 = a6;
              __int128 v252 = v17;
LABEL_278:
              outlined consume of PathOrURL(v251, v252, v84, 1);
              uint64_t v241 = a6;
LABEL_279:
              v329 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v313 = v32;
              outlined consume of PathOrURL(v241, v17, v84, 1);
              if (v29)
              {
                v340._countAndFlagsBits = v29;
                lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
                v314 = (id)v29;
                v315 = _getErrorEmbeddedNSError<A>(_:)();
                v316 = v327;
                if (v315)
                {
                }

                else
                {
                  swift_allocError();
                  *v317 = v314;
                }

                unint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
                uint64_t v84 = v332;
              }

              else
              {
                unint64_t v15 = 0LL;
                v316 = v327;
              }

              if (v330)
              {
                v318 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
              }

              else
              {
                v318 = 0LL;
              }

               objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v316,  v329,  v313,  v15,  v318,  0,  0);
              swift_unknownObjectRelease();

              v311 = v333;
              v312 = v17;
LABEL_289:
              outlined consume of PathOrURL(v311, v312, v84, 1);
LABEL_290:
              swift_willThrow();
              MEMORY[0x186E20E60](a4, -1LL, -1LL);
              goto LABEL_291;
            }

            uint64_t v227 = objc_msgSend(v32, sel__parameterString);
            if (v227)
            {
              uint64_t v228 = v227;
              uint64_t v229 = a6;
              unint64_t v230 = static String._unconditionallyBridgeFromObjectiveC(_:)(v227);
              uint64_t v232 = v231;

              if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                && (uint64_t v233 = objc_msgSend(v32, sel_path)) != 0)
              {
                v234 = v233;
                unint64_t v235 = v32;
                unint64_t v236 = static String._unconditionallyBridgeFromObjectiveC(_:)(v233);
                unint64_t v238 = v237;

                v340._countAndFlagsBits = (uint64_t)v236;
                v340._object = v238;
                swift_bridgeObjectRetain();
                v239._countAndFlagsBits = 59LL;
                v239._object = (void *)0xE100000000000000LL;
                String.append(_:)(v239);
                uint64_t v84 = v332;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v240._countAndFlagsBits = (uint64_t)v230;
                v240._object = v232;
                String.append(_:)(v240);
                swift_bridgeObjectRelease();
                uint64_t v32 = v235;
                uint64_t v241 = v333;
                swift_bridgeObjectRelease();
                unint64_t v242 = v241;
              }

              else
              {
                v340._countAndFlagsBits = 59LL;
                v340._object = (void *)0xE100000000000000LL;
                v248._countAndFlagsBits = (uint64_t)v230;
                v248._object = v232;
                String.append(_:)(v248);
                swift_bridgeObjectRelease();
                uint64_t v241 = v229;
                unint64_t v242 = v229;
              }

              outlined consume of PathOrURL(v242, v17, v84, 1);
              goto LABEL_279;
            }

            __int128 v249 = objc_msgSend(v32, sel_path);
            if (v249)
            {
              __int128 v250 = v249;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v249);

              __int128 v251 = a6;
              __int128 v252 = v17;
              uint64_t v84 = v332;
              goto LABEL_278;
            }

    swift_unknownObjectRelease();
    uint64_t v76 = v86[0];
    unint64_t v69 = v86[1];
    unint64_t v70 = v86[2];
    lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
    swift_allocError();
    *(_OWORD *)int64_t v71 = v76;
    *(_OWORD *)(v71 + 16) = v69;
    *(_BYTE *)(v71 + 32) = v70;
LABEL_74:
    memcpy(v87, __src, 0x11AuLL);
    uint64_t v73 = v87;
LABEL_75:
    outlined release of DateComponents((uint64_t)v73);
  }

  else
  {
LABEL_71:
    outlined release of DateComponents((uint64_t)__dst);
    *uint64_t v8 = v65;
  }

  return result;
}

    unint64_t v43 = (v50 - 1) & v50;
    uint64_t v46 = __clz(__rbit64(v50)) + (v40 << 6);
LABEL_51:
    uint64_t v47 = 8 * v46;
    uint64_t v48 = *(void *)(*(void *)(v8 + 56) + v47);
    *(void *)(*(void *)(v16 + 48) + v47) = *(void *)(*(void *)(v8 + 48) + v47);
    *(void *)(*(void *)(v16 + 56) + v47) = v48;
  }

  uint64_t v51 = v49 + 6;
  if (v51 >= v44) {
    goto LABEL_74;
  }
  uint64_t v52 = v38;
  uint64_t v50 = *(void *)(v38 + 8 * v51);
  if (v50)
  {
    uint64_t v40 = v51;
    goto LABEL_72;
  }

  while (1)
  {
    uint64_t v40 = v51 + 1;
    if (__OFADD__(v51, 1LL)) {
      break;
    }
    if (v40 >= v44) {
      goto LABEL_74;
    }
    uint64_t v38 = v52;
    uint64_t v50 = *(void *)(v52 + 8 * v40);
    ++v51;
    if (v50) {
      goto LABEL_72;
    }
  }

    unint64_t v42 = (v48 - 1) & v48;
    uint64_t v45 = __clz(__rbit64(v48)) + (v39 << 6);
LABEL_51:
    uint64_t v46 = *(void *)(*(void *)(v8 + 56) + 8 * v45);
    *(_BYTE *)(*(void *)(v16 + 48) + v45) = *(_BYTE *)(*(void *)(v8 + 48) + v45);
    *(void *)(*(void *)(v16 + 56) + 8 * v45) = v46;
  }

  uint64_t v49 = v47 + 6;
  if (v49 >= v43) {
    goto LABEL_74;
  }
  uint64_t v50 = v37;
  uint64_t v48 = *(void *)(v37 + 8 * v49);
  if (v48)
  {
    uint64_t v39 = v49;
    goto LABEL_72;
  }

  while (1)
  {
    uint64_t v39 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      break;
    }
    if (v39 >= v43) {
      goto LABEL_74;
    }
    uint64_t v37 = v50;
    uint64_t v48 = *(void *)(v50 + 8 * v39);
    ++v49;
    if (v48) {
      goto LABEL_72;
    }
  }

  *(void *)(v108 + 16) = v132 - 1;
  v50[2] = v108;
  swift_release();
  swift_release();
  return v20;
}

        char v59 = _StringObject.sharedUTF8.getter();
        uint64_t v57 = v83;
        goto LABEL_43;
      }

      *(void *)&v103[0] = countAndFlagsBits;
      *((void *)&v103[0] + 1) = object & 0xFFFFFFFFFFFFFFLL;
      char v60 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( (uint64_t)v103,  HIBYTE(object) & 0xF,  (uint64_t)v3);
      uint64_t v62 = v68;
    }

    a4[8] = v9;
    a4[9] = v29;
    a4[10] = v8;
    a4[11] = v17;
    a4[12] = v18;
    return result;
  }

  if (!v15)
  {
    if (a2 > 0) {
      goto LABEL_119;
    }
LABEL_70:
    swift_unknownObjectRetain_n();
    uint64_t v29 = specialized Rope._endPath.getter(v15);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v8 = 0LL;
    uint64_t v13 = 0LL;
    if (!v15) {
      goto LABEL_98;
    }
    goto LABEL_71;
  }

  if (v18 < a2) {
    goto LABEL_117;
  }
  if (!*(_WORD *)(v15 + 16) || v18 <= a2) {
    goto LABEL_70;
  }
  uint64_t v53 = v17;
  unint64_t v54 = v9;
  BOOL v19 = *(unsigned __int8 *)(v15 + 18);
  if (!*(_BYTE *)(v15 + 18))
  {
    uint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v9 = 0LL;
    uint64_t v13 = a2;
    uint64_t v8 = v15;
    unint64_t v42 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16)) {
      goto LABEL_75;
    }
LABEL_96:
    if (!v13)
    {
      while (1)
      {
LABEL_97:
        swift_unknownObjectRelease();
        uint64_t result = (void *)swift_unknownObjectRelease();
        uint64_t v29 = v9 | (v42 << 8);
        uint64_t v17 = v53;
        uint64_t v9 = v54;
        if (v15)
        {
LABEL_71:
          swift_unknownObjectRetain();
          uint64_t v17 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v29, v8, v15, v17);
          uint64_t result = (void *)swift_unknownObjectRelease_n();
          uint64_t v18 = a2 - v13;
          if (!__OFSUB__(a2, v13)) {
            goto LABEL_72;
          }
        }

        else
        {
LABEL_98:
          uint64_t v17 = 0LL;
          uint64_t v18 = a2 - v13;
          if (!__OFSUB__(a2, v13)) {
            goto LABEL_72;
          }
        }

        __break(1u);
LABEL_101:
        unint64_t v42 = v44;
        uint64_t v13 = v43;
      }
    }

    goto LABEL_124;
  }

  uint64_t result = (void *)swift_unknownObjectRetain_n();
  uint64_t v13 = a2;
  uint64_t v8 = v15;
  do
  {
    uint64_t v21 = *(unsigned __int16 *)(v8 + 16);
    if (*(_WORD *)(v8 + 16))
    {
      uint64_t v22 = *(void *)(v8 + 40);
      uint64_t v23 = __OFSUB__(v13, v22);
      uint64_t v24 = v13 - v22;
      if (v23) {
        goto LABEL_110;
      }
      if (__OFADD__(v24, 1LL)) {
        goto LABEL_111;
      }
      if (v24 + 1 < 1)
      {
        uint64_t v21 = 0LL;
        goto LABEL_23;
      }

      if ((_DWORD)v21 != 1)
      {
        uint64_t v25 = (uint64_t *)(v8 + 64);
        uint64_t v26 = 1LL;
        while (1)
        {
          uint64_t v27 = *v25;
          v25 += 3;
          uint64_t v13 = v24 - v27;
          if (__OFSUB__(v24, v27)) {
            goto LABEL_104;
          }
          if (__OFADD__(v13, 1LL)) {
            goto LABEL_105;
          }
          if (v13 + 1 < 1) {
            break;
          }
          ++v26;
          uint64_t v24 = v13;
          if (v21 == v26) {
            goto LABEL_22;
          }
        }

        uint64_t v21 = v26;
        uint64_t v13 = v24;
        goto LABEL_23;
      }

      uint64_t v13 = v24;
    }

uint64_t partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(void *)(v4 + 24),  *(void *)(v4 + 32));
}

uint64_t partial apply for closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:)( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(void *)(v4 + 24));
}

uint64_t outlined release of AttributedString.Runs(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of AttributedString.Runs(uint64_t a1)
{
  return a1;
}

uint64_t *outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(uint64_t *a1)
{
  uint64_t v2 = a1[11];
  outlined consume of AttributedString.Runs.Run?(*a1);
  outlined consume of AttributedString.Runs.Run?(v2);
  return a1;
}

uint64_t outlined consume of AttributedString.Runs.Run?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }

  return result;
}

uint64_t outlined copy of AttributedString.Runs.Run?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }

  return result;
}

uint64_t specialized ClosedRange.relative<A>(to:)( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    String.UnicodeScalarView._foreignIndex(after:)();
  }

  else if ((a2 & 0x2000000000000000LL) == 0 && (a1 & 0x1000000000000000LL) == 0)
  {
    _StringObject.sharedUTF8.getter();
  }

  return a3;
}

unint64_t BidirectionalCollection<>._alignIndex(roundingUp:)(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = v8;
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
  unint64_t v9 = v14;
  unint64_t v10 = v14 >> 14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a2);
  if (v10 >= a1 >> 14)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  }

  else
  {
    dispatch thunk of Collection.endIndex.getter();
    unint64_t v11 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
    if (v10 < v11 >> 14)
    {
      unint64_t v13 = v9;
      dispatch thunk of Collection.index(after:)();
      return v14;
    }
  }

  return v9;
}

unint64_t BidirectionalCollection<>._checkRange(_:)(unint64_t a1, unint64_t a2)
{
  if (a1 >> 14 < v5 >> 14) {
    return 0LL;
  }
  dispatch thunk of Collection.endIndex.getter();
  if (v5 >> 14 < a2 >> 14) {
    return 0LL;
  }
  return a1;
}

unint64_t specialized BidirectionalCollection._trimmingCharacters(while:)( unint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v50 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  v47[1] = a1 & 0xFFFFFFFFFFFFLL;
  v47[2] = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(a2) & 0xF;
  }
  unint64_t v53 = v6;
  unint64_t v54 = a1;
  if ((a2 & 0x1000000000000000LL) != 0) {
    uint64_t v7 = (a1 >> 59) & 1;
  }
  else {
    uint64_t v7 = 1LL;
  }
  unint64_t v8 = 4 * v6;
  v47[0] = v7;
  unint64_t v9 = 0LL;
  if (v6)
  {
    uint64_t v10 = 4LL << v7;
    uint64_t v48 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v49 = a2 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v11 = 15LL;
    while (1)
    {
      unint64_t v12 = v11 & 0xC;
      BOOL v13 = (v11 & 1) == 0 || v12 == v10;
      int v14 = v13;
      if (v13)
      {
        unint64_t v15 = v11;
        if (v12 == v10) {
          unint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v54, a2);
        }
        if (v15 >> 16 >= v53)
        {
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }

        if ((v15 & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(v15, v54, a2);
        }
      }

      else if (v11 >> 16 >= v53)
      {
        goto LABEL_117;
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        swift_bridgeObjectRetain();
      }

      else if ((a2 & 0x2000000000000000LL) != 0)
      {
        unint64_t v55 = v54;
        uint64_t v56 = v49;
        swift_bridgeObjectRetain();
        _decodeScalar(_:startingAt:)();
      }

      else
      {
        if ((v54 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        swift_bridgeObjectRetain();
        _decodeScalar(_:startingAt:)();
      }

      uint64_t v16 = v50;
      Unicode.Scalar.properties.getter();
      char v17 = Unicode.Scalar.Properties.isWhitespace.getter();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v52);
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_49;
      }
      if (v14)
      {
        if (v12 == v10) {
          unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v54, a2);
        }
        if (v53 <= v11 >> 16) {
          goto LABEL_118;
        }
        if ((v11 & 1) == 0) {
          unint64_t v11 = v11 & 0xC | _StringGuts.scalarAlignSlow(_:)(v11, v54, a2) & 0xFFFFFFFFFFFFFFF3LL | 1;
        }
      }

      else if (v53 <= v11 >> 16)
      {
        goto LABEL_119;
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        unint64_t v11 = String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        unint64_t v18 = v11 >> 16;
        if ((a2 & 0x2000000000000000LL) != 0)
        {
          unint64_t v55 = v54;
          uint64_t v56 = v49;
          int v20 = *((unsigned __int8 *)&v55 + v18);
        }

        else
        {
          uint64_t v19 = (uint64_t)v48;
          if ((v54 & 0x1000000000000000LL) == 0) {
            uint64_t v19 = _StringObject.sharedUTF8.getter();
          }
          int v20 = *(unsigned __int8 *)(v19 + v18);
        }

        int v21 = (char)v20;
        unsigned int v22 = __clz(v20 ^ 0xFF) - 24;
        if (v21 >= 0) {
          LOBYTE(v22) = 1;
        }
        unint64_t v11 = ((v18 + v22) << 16) | 5;
      }

      unint64_t v9 = v11 >> 14;
      if (v11 >> 14 >= v8) {
        goto LABEL_49;
      }
    }
  }

  unint64_t v11 = 15LL;
LABEL_49:
  LOBYTE(v12) = v47[0];
  uint64_t v23 = 11LL;
  if (LODWORD(v47[0])) {
    uint64_t v23 = 7LL;
  }
  if (v9 == v8) {
    return String.UnicodeScalarView.subscript.getter();
  }
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(v23 | (v53 << 16), v54, a2);
  if (result < 0x4000)
  {
LABEL_124:
    __break(1u);
LABEL_125:
    unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
    unint64_t v34 = result;
    if (v9 < result >> 14) {
      goto LABEL_67;
    }
LABEL_126:
    if (v8 >= v9) {
      return String.UnicodeScalarView.subscript.getter();
    }
    __break(1u);
LABEL_130:
    __break(1u);
    return result;
  }

  unint64_t v25 = result;
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_125;
  }
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    unint64_t v55 = v54;
    uint64_t v56 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v30 = (char *)&v55 + (result >> 16);
    if ((*(v30 - 1) & 0xC0) == 0x80)
    {
      uint64_t v27 = 0LL;
      uint64_t v31 = v30 - 2;
      do
        int v32 = v31[v27--] & 0xC0;
      while (v32 == 128);
      goto LABEL_64;
    }
  }

  else
  {
    if ((v54 & 0x1000000000000000LL) != 0) {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      unint64_t result = _StringObject.sharedUTF8.getter();
    }
    unint64_t v26 = (v25 >> 16) + result;
    if ((*(_BYTE *)(v26 - 1) & 0xC0) == 0x80)
    {
      uint64_t v27 = 0LL;
      unint64_t v28 = v26 - 2;
      do
        int v29 = *(_BYTE *)(v28 + v27--) & 0xC0;
      while (v29 == 128);
LABEL_64:
      uint64_t v33 = 1 - v27;
      goto LABEL_66;
    }
  }

  uint64_t v33 = 1LL;
LABEL_66:
  unint64_t v34 = (v25 - (v33 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
  if (v9 >= v34 >> 14) {
    goto LABEL_126;
  }
LABEL_67:
  uint64_t v35 = 4LL << v12;
  unint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v48 = (char *)&v54 + 6;
  uint64_t v49 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v36 = v50;
  while (1)
  {
    unint64_t v12 = v34 & 0xC;
    BOOL v37 = (v34 & 1) == 0 || v12 == v35;
    BOOL v38 = v37;
    if (v37)
    {
      unint64_t v39 = v34;
      if (v12 == v35) {
        unint64_t v39 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v54, a2);
      }
      if (v39 >> 16 >= v53) {
        goto LABEL_120;
      }
      if ((v39 & 1) == 0) {
        _StringGuts.scalarAlignSlow(_:)(v39, v54, a2);
      }
    }

    else if (v34 >> 16 >= v53)
    {
      goto LABEL_121;
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        unint64_t v55 = v54;
        uint64_t v56 = v49;
      }

      else if ((v54 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      _decodeScalar(_:startingAt:)();
    }

    Unicode.Scalar.properties.getter();
    char v40 = Unicode.Scalar.Properties.isWhitespace.getter();
    unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v36, v52);
    if ((v40 & 1) == 0) {
      break;
    }
    if (v38)
    {
      if (v12 == v35) {
        unint64_t v34 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v54, a2);
      }
      if (v53 < v34 >> 16) {
        goto LABEL_122;
      }
      if ((v34 & 1) == 0) {
        unint64_t v34 = v34 & 0xC | _StringGuts.scalarAlignSlow(_:)(v34, v54, a2) & 0xFFFFFFFFFFFFFFF3LL | 1;
      }
    }

    else if (v53 < v34 >> 16)
    {
      goto LABEL_123;
    }

    if (v34 < 0x4000)
    {
      __break(1u);
      goto LABEL_116;
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t v34 = String.UnicodeScalarView._foreignIndex(before:)();
    }

    else
    {
      unint64_t v41 = v34 >> 16;
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        unint64_t v55 = v54;
        uint64_t v56 = v49;
        if ((*((_BYTE *)&v55 + v41 - 1) & 0xC0) == 0x80)
        {
          uint64_t v43 = 0LL;
          do
            int v45 = v48[v41 + v43--] & 0xC0;
          while (v45 == 128);
          goto LABEL_110;
        }
      }

      else
      {
        uint64_t v42 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v54 & 0x1000000000000000LL) == 0) {
          uint64_t v42 = _StringObject.sharedUTF8.getter();
        }
        if ((*(_BYTE *)(v41 + v42 - 1) & 0xC0) == 0x80)
        {
          uint64_t v43 = 0LL;
          do
            int v44 = *(_BYTE *)(v42 + v41 - 2 + v43--) & 0xC0;
          while (v44 == 128);
LABEL_110:
          uint64_t v46 = 1 - v43;
          goto LABEL_112;
        }
      }

      uint64_t v46 = 1LL;
LABEL_112:
      unint64_t v34 = (v34 - (v46 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
    }
  }

  if (v9 > v34 >> 14) {
    goto LABEL_130;
  }
  specialized ClosedRange.relative<A>(to:)(v54, a2, v11, v34);
  return String.UnicodeScalarView.subscript.getter();
}

uint64_t BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  v38[0] = a5;
  v38[2] = a4;
  uint64_t v8 = *(void *)(a4 + 8);
  uint64_t v9 = MEMORY[0x1896188A0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v44 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  BOOL v13 = (char *)v38 - v12;
  v38[1] = a3;
  uint64_t v41 = *(void *)(a3 + 8);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  unint64_t v39 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v47 = v18;
  uint64_t v48 = v17;
  uint64_t v19 = *(void (**)(void))(v18 + 16);
  uint64_t v42 = (char *)v38 - v20;
  v19();
  uint64_t v46 = v8;
  uint64_t v21 = v9;
  dispatch thunk of Collection.endIndex.getter();
  char v40 = v13;
  while (1)
  {
    unsigned int v22 = v44;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v23 = AssociatedTypeWitness;
    swift_getAssociatedConformanceWitness();
    char v24 = dispatch thunk of static Comparable.> infix(_:_:)();
    uint64_t v43 = *(void (**)(char *, uint64_t))(v45 + 8);
    v43(v22, v23);
    if ((v24 & 1) == 0)
    {
      v43(v13, AssociatedTypeWitness);
      uint64_t v34 = v47;
      uint64_t v33 = v48;
      uint64_t v35 = v38[0];
      (*(void (**)(void, char *, uint64_t))(v47 + 32))(v38[0], v42, v48);
      uint64_t v36 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v35, v36, 1LL, v33);
    }

    uint64_t v25 = a2;
    uint64_t v26 = a1;
    uint64_t v27 = v39;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v28 = v48;
    uint64_t v29 = v21;
    swift_getAssociatedConformanceWitness();
    uint64_t v30 = v42;
    char v31 = dispatch thunk of static Comparable.> infix(_:_:)();
    int v32 = *(void (**)(char *, uint64_t))(v47 + 8);
    v32(v27, v28);
    if ((v31 & 1) == 0) {
      break;
    }
    a1 = v26;
    a2 = v25;
    BOOL v13 = v40;
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    uint64_t v21 = v29;
  }

  v43(v40, AssociatedTypeWitness);
  uint64_t v33 = v48;
  v32(v30, v48);
  uint64_t v36 = 1LL;
  uint64_t v35 = v38[0];
  uint64_t v34 = v47;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v35, v36, 1LL, v33);
}

uint64_t BidirectionalCollection._range<A>(of:anchored:backwards:)@<X0>( uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void, void, void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v148 = a8;
  LODWORD(v159) = a3;
  LODWORD(v136) = a2;
  uint64_t v163 = a1;
  uint64_t v132 = a9;
  unint64_t v137 = a6;
  uint64_t v13 = *((void *)a6 + 1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  __int128 v126 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v123 = (char *)&v119 - v17;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for Range();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  unint64_t v122 = (char *)&v119 - v20;
  uint64_t v154 = v13;
  uint64_t v147 = swift_getAssociatedTypeWitness();
  uint64_t v146 = *(void *)(v147 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v147);
  unint64_t v145 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  __int128 v144 = (char *)&v119 - v24;
  uint64_t v161 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v149 = (char *)&v119 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = a7;
  uint64_t v157 = *(void *)(a7 + 8);
  uint64_t v162 = a5;
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v160 = swift_getAssociatedTypeWitness();
  uint64_t v156 = *(void *)(v160 - 8);
  uint64_t v27 = MEMORY[0x1895F8858](v160);
  uint64_t v139 = (char *)&v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v155 = (char *)&v119 - v30;
  MEMORY[0x1895F8858](v29);
  unint64_t v158 = (char *)&v119 - v31;
  uint64_t v128 = type metadata accessor for Optional();
  uint64_t v127 = *(void *)(v128 - 8);
  uint64_t v32 = MEMORY[0x1895F8858](v128);
  uint64_t v34 = (void (*)(char *, char *, uint64_t))((char *)&v119 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v35 = MEMORY[0x1895F8858](v32);
  BOOL v37 = (char *)&v119 - v36;
  uint64_t v38 = *(void *)(v26 - 8);
  uint64_t v39 = MEMORY[0x1895F8858](v35);
  uint64_t v152 = (char *)&v119 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = MEMORY[0x1895F8858](v39);
  unint64_t v120 = (char *)&v119 - v42;
  uint64_t v43 = MEMORY[0x1895F8858](v41);
  uint64_t v45 = (char *)&v119 - v44;
  uint64_t v46 = MEMORY[0x1895F8858](v43);
  uint64_t v119 = (char *)&v119 - v47;
  uint64_t v48 = MEMORY[0x1895F8858](v46);
  unint64_t v140 = (char *)&v119 - v49;
  MEMORY[0x1895F8858](v48);
  uint64_t v51 = (char *)&v119 - v50;
  uint64_t v135 = type metadata accessor for Optional();
  uint64_t v133 = *(void *)(v135 - 8);
  uint64_t v52 = MEMORY[0x1895F8858](v135);
  __int128 v121 = (char *)&v119 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v52);
  uint64_t v124 = v19;
  unint64_t v54 = *(void (**)(void))(v19 + 56);
  __int128 v134 = (char *)&v119 - v55;
  uint64_t v130 = v18;
  __int128 v129 = v54;
  v54();
  uint64_t v150 = v45;
  uint64_t v151 = v38;
  if ((v159 & 1) != 0)
  {
    dispatch thunk of Collection.endIndex.getter();
    BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v163, v162, (uint64_t)v137, v131, (uint64_t)v37);
    uint64_t v56 = *(void (**)(char *, uint64_t))(v38 + 8);
    v56(v45, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v37, 1LL, v26) == 1)
    {
      (*(void (**)(char *, uint64_t))(v133 + 8))(v134, v135);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v37, v128);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v129)(v132, 1LL, 1LL, v130);
    }

    uint64_t v58 = v9;
    uint64_t v61 = v119;
    uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    v159(v119, v37, v26);
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    v62(v51, v61, v26);
    if ((v136 & 1) != 0)
    {
      v56(v61, v26);
      unint64_t v63 = v120;
      v62(v120, v51, v26);
    }

    else
    {
      unint64_t v63 = v120;
      dispatch thunk of Collection.startIndex.getter();
      v56(v61, v26);
    }

    v159(v140, v63, v26);
    char v60 = v149;
    uint64_t v59 = v151;
  }

  else
  {
    uint64_t v57 = v137;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v58 = v9;
    if ((v136 & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v140, v51, v26);
      uint64_t v59 = v38;
      char v60 = v149;
    }

    else
    {
      dispatch thunk of Collection.endIndex.getter();
      BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v163, v162, (uint64_t)v57, v131, (uint64_t)v34);
      uint64_t v64 = *(void (**)(char *, uint64_t))(v38 + 8);
      v64(v45, v26);
      int64_t v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
      uint64_t v159 = v34;
      int v66 = v65((char *)v34, 1LL, v26);
      char v60 = v149;
      if (v66 == 1)
      {
        v64(v51, v26);
        (*(void (**)(char *, uint64_t))(v133 + 8))(v134, v135);
        (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v127 + 8))(v159, v128);
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v129)(v132, 1LL, 1LL, v130);
      }

      uint64_t v59 = v38;
      (*(void (**)(char *, void (*)(void, void), uint64_t))(v38 + 32))( v140,  (void (*)(void, void))v159,  v26);
    }
  }

  char v68 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v69 = 1LL;
  if ((v68 & 1) == 0) {
    uint64_t v69 = -1LL;
  }
  uint64_t v136 = v69;
  unint64_t v70 = *(void (**)(void, void, void))(v59 + 16);
  uint64_t v143 = v58;
  uint64_t v142 = v26;
  uint64_t v141 = a4;
  unint64_t v138 = v51;
  unint64_t v137 = v70;
  v70(v152, v51, v26);
  while (1)
  {
    dispatch thunk of Collection.startIndex.getter();
    while (1)
    {
      int64_t v71 = v155;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v72 = v160;
      uint64_t v154 = swift_getAssociatedConformanceWitness();
      char v73 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v156 + 8);
      ((void (*)(char *, uint64_t))v159)(v71, v72);
      (*(void (**)(char *, uint64_t, uint64_t))(v161 + 16))(v60, v58, a4);
      if ((v73 & 1) == 0) {
        break;
      }
      uint64_t v74 = v150;
      dispatch thunk of Collection.endIndex.getter();
      char v75 = dispatch thunk of static Comparable.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v151 + 8))(v74, v26);
      (*(void (**)(char *, uint64_t))(v161 + 8))(v60, a4);
      uint64_t v76 = v158;
      if ((v75 & 1) == 0) {
        goto LABEL_23;
      }
      unint64_t v77 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v78 = v146;
      char v79 = *(void (**)(char *))(v146 + 16);
      unint64_t v80 = v144;
      uint64_t v81 = v147;
      v79(v144);
      v77(v164, 0LL);
      uint64_t v82 = dispatch thunk of Collection.subscript.read();
      BOOL v83 = v145;
      v79(v145);
      ((void (*)(char *, void))v82)(v164, 0LL);
      LOBYTE(v82) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v84 = *(void (**)(char *, uint64_t))(v78 + 8);
      v84(v83, v81);
      v84(v80, v81);
      uint64_t v26 = v142;
      uint64_t v58 = v143;
      a4 = v141;
      char v60 = v149;
      if ((v82 & 1) == 0) {
        goto LABEL_23;
      }
      dispatch thunk of Collection.formIndex(after:)();
      dispatch thunk of Collection.formIndex(after:)();
    }

    (*(void (**)(char *, uint64_t))(v161 + 8))(v60, a4);
    uint64_t v76 = v158;
LABEL_23:
    uint64_t v85 = v155;
    uint64_t v86 = v160;
    (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v155, v76, v160);
    uint64_t v87 = v139;
    dispatch thunk of Collection.endIndex.getter();
    char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v89 = (void (*)(char *, uint64_t))v159;
    ((void (*)(char *, uint64_t))v159)(v87, v86);
    v89(v85, v86);
    if ((v88 & 1) != 0) {
      break;
    }
    uint64_t v90 = v138;
    uint64_t v91 = v140;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      ((void (*)(char *, uint64_t))v159)(v158, v160);
      unint64_t v118 = *(void (**)(char *, uint64_t))(v151 + 8);
      v118(v152, v26);
      v118(v91, v26);
      v118(v90, v26);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v133 + 32))(v132, v134, v135);
    }

    unint64_t v92 = v150;
    dispatch thunk of Collection.index(_:offsetBy:)();
    uint64_t v93 = v151;
    uint64_t v94 = *(void (**)(char *, uint64_t))(v151 + 8);
    v94(v90, v26);
    (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v90, v92, v26);
    ((void (*)(char *, uint64_t))v159)(v158, v160);
    uint64_t v95 = v152;
    v94(v152, v26);
    v137(v95, v90, v26);
  }

  uint64_t v96 = v150;
  unint64_t v97 = v152;
  uint64_t v98 = (void (*)(char *, char *, uint64_t))v137;
  v137(v150, v152, v26);
  unint64_t v99 = v138;
  char v100 = dispatch thunk of static Comparable.<= infix(_:_:)();
  ((void (*)(char *, uint64_t))v159)(v158, v160);
  uint64_t v101 = v151;
  unint64_t v102 = *(void (**)(char *, uint64_t))(v151 + 8);
  v102(v97, v26);
  v102(v140, v26);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v134, v135);
  if ((v100 & 1) != 0)
  {
    uint64_t v103 = TupleTypeMetadata2;
    uint64_t v104 = v123;
    uint64_t v105 = &v123[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v106 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
    v106(v123, v99, v26);
    v106(v105, v96, v26);
    uint64_t v107 = v126;
    __int128 v108 = &v126[*(int *)(v103 + 48)];
    v98(v126, v104, v26);
    v98(v108, v105, v26);
    uint64_t v109 = v122;
    v106(v122, v107, v26);
    v102(v108, v26);
    uint64_t v110 = *(int *)(v103 + 48);
    uint64_t v111 = v135;
    uint64_t v112 = &v107[v110];
    v106(v107, v104, v26);
    v106(v112, v105, v26);
    uint64_t v113 = v130;
    uint64_t v114 = v112;
    char v115 = v134;
    v106(&v109[*(int *)(v130 + 36)], v114, v26);
    v102(v107, v26);
    __int128 v116 = v121;
    (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v121, v109, v113);
    ((void (*)(char *, void, uint64_t, uint64_t))v129)(v116, 0LL, 1LL, v113);
    unint64_t v117 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
    v117(v115, v116, v111);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v117)(v132, v115, v111);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t TermOfAddress.language.getter@<X0>(uint64_t *a1@<X8>)
{
  if ((unint64_t)v1[12] >= 4)
  {
    uint64_t v5 = v1[10];
    uint64_t v6 = v1[11];
    uint64_t v3 = v1[8];
    uint64_t v4 = v1[9];
    uint64_t v8 = v1[6];
    uint64_t v7 = v1[7];
    uint64_t v10 = v1[4];
    uint64_t v9 = v1[5];
    uint64_t v15 = v1[2];
    uint64_t v16 = v1[3];
    uint64_t v12 = v1;
    uint64_t v11 = *v1;
    uint64_t v14 = v12[1];
    outlined copy of Locale.LanguageCode?(v11, v14);
    outlined copy of Locale.LanguageCode?(v10, v9);
    uint64_t result = outlined copy of Locale.LanguageCode?(v3, v4);
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v15;
    a1[3] = v16;
    a1[4] = v10;
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = v7;
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    *(_OWORD *)a1 = xmmword_183723F60;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
  }

  a1[8] = v3;
  a1[9] = v4;
  a1[10] = v5;
  a1[11] = v6;
  return result;
}

unint64_t TermOfAddress.pronouns.getter()
{
  unint64_t v1 = v0[12];
  if (v1 < 4) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v8 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = v8[1];
  outlined copy of Locale.LanguageCode?(v6, v7);
  outlined copy of Locale.LanguageCode?(v5, v4);
  outlined copy of Locale.LanguageCode?(v3, v2);
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(v6, v7);
  outlined consume of Locale.LanguageCode?(v5, v4);
  outlined consume of Locale.LanguageCode?(v3, v2);
  return v1;
}

double static TermOfAddress.neutral.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 96) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double static TermOfAddress.feminine.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 1LL;
  return result;
}

double static TermOfAddress.masculine.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 2LL;
  return result;
}

double static TermOfAddress.currentUser.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 3LL;
  return result;
}

uint64_t static TermOfAddress.localized(language:pronouns:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  uint64_t v13 = a1[9];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[11];
  *a3 = *a1;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = v7;
  a3[4] = v8;
  a3[5] = v9;
  a3[6] = v10;
  a3[7] = v11;
  a3[8] = v12;
  a3[9] = v13;
  a3[10] = v14;
  a3[11] = v15;
  a3[12] = a2;
  outlined copy of Locale.LanguageCode?(v5, v4);
  outlined copy of Locale.LanguageCode?(v8, v9);
  outlined copy of Locale.LanguageCode?(v12, v13);
  return swift_bridgeObjectRetain();
}

void TermOfAddress.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 96);
  switch(v3)
  {
    case 0LL:
    case 1LL:
    case 2LL:
    case 3LL:
      String.hash(into:)();
      break;
    default:
      Locale.Language.hash(into:)();
      specialized Array<A>.hash(into:)(a1, v3);
      break;
  }

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3) {
    __asm { BR              X8 }
  }

{
  Swift::UInt v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a2 + 64);
    while (1)
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v19 = *(v4 - 2);
      uint64_t v20 = *(v4 - 4);
      uint64_t v7 = v4[1];
      uint64_t v8 = v4[3];
      uint64_t v22 = v4[2];
      uint64_t v23 = *v4;
      uint64_t v9 = v4[5];
      uint64_t v10 = v4[6];
      uint64_t v11 = v4[7];
      uint64_t v5 = v4[8];
      uint64_t v21 = *(v4 - 3);
      uint64_t v18 = v4[4];
      switch(v5)
      {
        case 0uLL:
          String.hash(into:)();
          uint64_t v5 = 0LL;
          goto LABEL_4;
        case 1uLL:
          String.hash(into:)();
          uint64_t v5 = 1LL;
          goto LABEL_4;
        case 2uLL:
          String.hash(into:)();
          uint64_t v5 = 2LL;
          goto LABEL_4;
        case 3uLL:
          String.hash(into:)();
          uint64_t v5 = 3LL;
          goto LABEL_4;
        default:
          if (*(v4 - 3))
          {
            uint64_t v15 = v4[1];
            uint64_t v12 = v4[4];
            Hasher._combine(_:)(1u);
            outlined copy of TermOfAddress._TermOfAddress(v20, v21, v19, v6, v23, v15, v22, v8, v12, v9, v10, v11, v5);
            outlined copy of Locale.LanguageCode?(v20, v21);
            outlined copy of Locale.LanguageCode?(v23, v15);
            uint64_t v7 = v15;
            outlined copy of Locale.LanguageCode?(v18, v9);
            outlined copy of Locale.LanguageCode?(v20, v21);
            String.hash(into:)();
            outlined consume of Locale.LanguageCode?(v20, v21);
            if (v15) {
              goto LABEL_9;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            outlined copy of TermOfAddress._TermOfAddress(v20, 0LL, v19, v6, v23, v7, v22, v8, v18, v9, v10, v11, v5);
            outlined copy of Locale.LanguageCode?(v20, 0LL);
            outlined copy of Locale.LanguageCode?(v23, v7);
            outlined copy of Locale.LanguageCode?(v18, v9);
            if (v7)
            {
LABEL_9:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              outlined consume of Locale.LanguageCode?(v23, v7);
              if (!v9) {
                goto LABEL_15;
              }
              goto LABEL_10;
            }
          }

          Hasher._combine(_:)(0);
          if (!v9)
          {
LABEL_15:
            Hasher._combine(_:)(0);
            uint64_t v16 = 0LL;
            uint64_t v14 = v21;
            uint64_t v13 = v18;
            goto LABEL_16;
          }

{
  Swift::UInt v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  uint64_t v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  uint64_t v21 = v4;
  if (v4)
  {
    uint64_t v5 = (unsigned int *)(a2 + 88);
    do
    {
      uint64_t v6 = *((unsigned __int8 *)v5 - 40);
      uint64_t v7 = *((unsigned __int8 *)v5 - 39);
      uint64_t v13 = *((unsigned __int8 *)v5 - 38);
      uint64_t v8 = *((void *)v5 - 4);
      uint64_t v14 = *((unsigned __int8 *)v5 - 24);
      uint64_t v15 = *((unsigned __int8 *)v5 - 23);
      uint64_t v16 = *((unsigned __int8 *)v5 - 22);
      uint64_t v17 = *((unsigned __int8 *)v5 - 21);
      uint64_t v18 = *((unsigned __int8 *)v5 - 20);
      uint64_t v9 = *((void *)v5 - 2);
      uint64_t v20 = *((unsigned __int8 *)v5 + 4);
      uint64_t v19 = *v5;
      uint64_t v10 = *((void *)v5 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      uint64_t v11 = v8;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v6 == 3)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6 + 1);
      }

      if ((_DWORD)v7 == 14)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v7 + 1);
      }

      uint64_t v12 = v16;
      if ((_DWORD)v13 == 6)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        Hasher._combine(_:)(1u);
        uint64_t v12 = v16;
        uint64_t v11 = v8;
        Hasher._combine(_:)(v13 + 1);
      }

      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v11);
      if ((_DWORD)v14 == 14)
      {
        Hasher._combine(_:)(0);
        if ((_DWORD)v15 != 3) {
          goto LABEL_16;
        }
      }

      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v14 + 1);
        if ((_DWORD)v15 != 3)
        {
LABEL_16:
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v15 + 1);
          if ((_DWORD)v12 == 3) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
      }

      Hasher._combine(_:)(0);
      if ((_DWORD)v12 == 3)
      {
LABEL_20:
        Hasher._combine(_:)(0);
        goto LABEL_21;
      }

Swift::Int TermOfAddress.hashValue.getter()
{
  uint64_t v13 = *v0;
  uint64_t v14 = v0[1];
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[12];
  Hasher.init(_seed:)();
  switch(v5)
  {
    case 0LL:
    case 1LL:
    case 2LL:
    case 3LL:
      String.hash(into:)();
      return Hasher._finalize()();
    default:
      uint64_t v12 = v5;
      if (v14)
      {
        Hasher._combine(_:)(1u);
        uint64_t v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, v14);
        uint64_t v7 = v1;
        uint64_t v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        outlined copy of Locale.LanguageCode?(v13, v14);
        String.hash(into:)();
        outlined consume of Locale.LanguageCode?(v13, v14);
        if (v2) {
          goto LABEL_4;
        }
      }

      else
      {
        Hasher._combine(_:)(0);
        uint64_t v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, 0LL);
        uint64_t v7 = v1;
        uint64_t v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        if (v2)
        {
LABEL_4:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of Locale.LanguageCode?(v7, v8);
          uint64_t v9 = v3;
          if (v3)
          {
LABEL_5:
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            uint64_t v10 = v4;
            outlined consume of Locale.LanguageCode?(v4, v9);
LABEL_11:
            outlined consume of Locale.LanguageCode?(v6, v14);
            outlined consume of Locale.LanguageCode?(v1, v8);
            outlined consume of Locale.LanguageCode?(v10, v9);
            specialized Array<A>.hash(into:)((uint64_t)v15, v12);
            return Hasher._finalize()();
          }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TermOfAddress()
{
  uint64_t v13 = *v0;
  uint64_t v14 = v0[1];
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[12];
  Hasher.init(_seed:)();
  switch(v5)
  {
    case 0LL:
    case 1LL:
    case 2LL:
    case 3LL:
      String.hash(into:)();
      return Hasher._finalize()();
    default:
      uint64_t v12 = v5;
      if (v14)
      {
        Hasher._combine(_:)(1u);
        uint64_t v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, v14);
        uint64_t v7 = v1;
        uint64_t v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        outlined copy of Locale.LanguageCode?(v13, v14);
        String.hash(into:)();
        outlined consume of Locale.LanguageCode?(v13, v14);
        if (v2) {
          goto LABEL_4;
        }
      }

      else
      {
        Hasher._combine(_:)(0);
        uint64_t v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, 0LL);
        uint64_t v7 = v1;
        uint64_t v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        if (v2)
        {
LABEL_4:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of Locale.LanguageCode?(v7, v8);
          uint64_t v9 = v3;
          if (v3)
          {
LABEL_5:
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            uint64_t v10 = v4;
            outlined consume of Locale.LanguageCode?(v4, v9);
LABEL_11:
            outlined consume of Locale.LanguageCode?(v6, v14);
            outlined consume of Locale.LanguageCode?(v1, v8);
            outlined consume of Locale.LanguageCode?(v10, v9);
            specialized Array<A>.hash(into:)((uint64_t)v15, v12);
            return Hasher._finalize()();
          }

void protocol witness for static Equatable.== infix(_:_:) in conformance TermOfAddress.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance TermOfAddress.CodingKeys()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_182F17C74()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TermOfAddress.CodingKeys()
{
  __asm { BR              X10 }

uint64_t sub_182F17D24()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TermOfAddress.CodingKeys()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_182F17DCC()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TermOfAddress.CodingKeys@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized TermOfAddress.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TermOfAddress.CodingKeys()
{
  return ((uint64_t (*)(void))((char *)sub_182F17E9C + 4 * byte_183723F99[*v0]))();
}

void sub_182F17E9C(void *a1@<X8>)
{
  *a1 = 0x65676175676E616CLL;
  a1[1] = 0xE800000000000000LL;
}

void sub_182F17EB8(void *a1@<X8>)
{
  *a1 = 0x736E756F6E6F7270LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_182F17ED4(void *a1@<X8>)
{
  *a1 = 1919251317LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TermOfAddress.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182F17F24 + 4 * byte_183723F9D[*v0]))( 0x6441664F6D726574LL,  0xED00007373657264LL);
}

uint64_t sub_182F17F24()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_182F17F3C()
{
  return 0x736E756F6E6F7270LL;
}

uint64_t sub_182F17F54()
{
  return 1919251317LL;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance TermOfAddress.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized TermOfAddress.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TermOfAddress.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TermOfAddress.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TermOfAddress.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t TermOfAddress.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TermOfAddress.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v11) = 3;
    if ((KeyedDecodingContainer.decodeIfPresent(_:forKey:)() & 1) == 0)
    {
      LOBYTE(v11) = 0;
      lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    a2[3] = 0LL;
    a2[4] = 0LL;
    a2[5] = 0LL;
    a2[6] = 0LL;
    a2[7] = 0LL;
    a2[8] = 0LL;
    a2[9] = 0LL;
    a2[10] = 0LL;
    a2[11] = 0LL;
    a2[12] = 3LL;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TermOfAddress.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TermOfAddress.CodingKeys>);
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = *v1;
  uint64_t v30 = v1[1];
  uint64_t v31 = v5;
  uint64_t v26 = v1[2];
  uint64_t v6 = v1[4];
  uint64_t v29 = v1[3];
  uint64_t v7 = v1[5];
  uint64_t v32 = v1[6];
  uint64_t v33 = v7;
  uint64_t v8 = v1[8];
  uint64_t v27 = v1[7];
  uint64_t v9 = v1[9];
  uint64_t v10 = v1[10];
  uint64_t v11 = v1[12];
  uint64_t v28 = v1[11];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1;
  uint64_t v14 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(v13, v12);
  lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v11)
  {
    case 0LL:
      char v15 = 2;
      goto LABEL_7;
    case 1LL:
      LOBYTE(v37) = 0;
      goto LABEL_8;
    case 2LL:
      char v15 = 1;
LABEL_7:
      LOBYTE(v37) = v15;
LABEL_8:
      char v49 = 0;
      lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
      uint64_t v20 = v36;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_10;
    case 3LL:
      LOBYTE(v37) = 3;
      uint64_t v20 = v36;
      KeyedEncodingContainer.encode(_:forKey:)();
LABEL_10:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, v20);
      break;
    default:
      uint64_t v37 = v31;
      uint64_t v38 = v30;
      uint64_t v39 = v26;
      uint64_t v40 = v29;
      uint64_t v23 = v6;
      uint64_t v16 = v33;
      uint64_t v41 = v6;
      uint64_t v42 = v33;
      uint64_t v43 = v32;
      uint64_t v44 = v27;
      uint64_t v24 = v14;
      uint64_t v45 = v8;
      uint64_t v46 = v9;
      uint64_t v47 = v10;
      uint64_t v48 = v28;
      outlined copy of Locale.LanguageCode?(v31, v30);
      outlined copy of Locale.LanguageCode?(v6, v16);
      outlined copy of Locale.LanguageCode?(v8, v9);
      uint64_t v25 = v11;
      swift_bridgeObjectRetain();
      Locale.Language.minimalIdentifier.getter();
      outlined consume of Locale.LanguageCode?(v31, v30);
      outlined consume of Locale.LanguageCode?(v23, v33);
      outlined consume of Locale.LanguageCode?(v8, v9);
      LOBYTE(v37) = 1;
      uint64_t v17 = v36;
      uint64_t v18 = v24;
      uint64_t v19 = v34;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v19)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v17);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v37 = v25;
        char v49 = 2;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Morphology.Pronoun]);
        lazy protocol witness table accessor for type [Morphology.Pronoun] and conformance <A> [A]( &lazy protocol witness table cache variable for type [Morphology.Pronoun] and conformance <A> [A],  (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology.Pronoun and conformance Morphology.Pronoun,  MEMORY[0x189618448]);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v17);
      }

      uint64_t result = swift_bridgeObjectRelease();
      break;
  }

  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TermOfAddress@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return TermOfAddress.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TermOfAddress(void *a1)
{
  return TermOfAddress.encode(to:)(a1);
}

void TermOfAddress.init(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v4 = (void *)objc_opt_self();
  id v5 = objc_msgSend(v4, sel_neutral);
  char v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) != 0)
  {

    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
LABEL_38:
    *a2 = v7;
    a2[1] = v8;
    a2[2] = countAndFlagsBits;
    a2[3] = (uint64_t)object;
    a2[4] = v11;
    a2[5] = v12;
    a2[6] = (uint64_t)v13;
    a2[7] = (uint64_t)v14;
    a2[8] = v15;
    a2[9] = v16;
    a2[10] = v17;
    a2[11] = (uint64_t)v18;
    a2[12] = v19;
    return;
  }

  id v20 = objc_msgSend(v4, sel_feminine);
  char v21 = static NSObject.== infix(_:_:)();

  if ((v21 & 1) != 0)
  {

    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 1LL;
    goto LABEL_38;
  }

  id v22 = objc_msgSend(v4, sel_masculine);
  char v23 = static NSObject.== infix(_:_:)();

  if ((v23 & 1) != 0)
  {

    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 2LL;
    goto LABEL_38;
  }

  id v24 = objc_msgSend(v4, sel_currentUser);
  char v25 = static NSObject.== infix(_:_:)();

  if ((v25 & 1) != 0)
  {

    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 3LL;
    goto LABEL_38;
  }

  id v26 = objc_msgSend(a1, sel_languageIdentifier);
  uint64_t v13 = v26;
  if (!v26)
  {
    uint64_t v47 = 0LL;
    uint64_t v48 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v51 = 1LL;
    goto LABEL_28;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v26);

  MEMORY[0x1895F8858](v27);
  LODWORD(v52) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  if (Language > 0)
  {
    v44[Language] = 0;
    uint64_t v29 = MEMORY[0x186E1B634](v44, 0LL);
  }

  uint64_t v51 = v30;
  uint64_t v48 = v29;
  MEMORY[0x1895F8858](v29);
  LODWORD(v52) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  if ((int)v52 <= 0 && Script > 0)
  {
    v44[Script] = 0;
    uint64_t v32 = MEMORY[0x186E1B634](v44, 0LL);
  }

  uint64_t v47 = v33;
  uint64_t v50 = v32;
  MEMORY[0x1895F8858](v32);
  LODWORD(v52) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v35 = 0LL;
  uint64_t v16 = 0LL;
  if ((int)v52 <= 0 && Country > 0)
  {
    v44[Country] = 0;
    uint64_t v35 = MEMORY[0x186E1B634](v44);
    uint64_t v16 = v36;
  }

  uint64_t v49 = v35;
  swift_bridgeObjectRelease();
  if (v51)
  {
    Swift::String v37 = String.lowercased()();
    uint64_t countAndFlagsBits = v37._countAndFlagsBits;
    object = v37._object;
  }

  else
  {
    uint64_t v48 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
  }

  if (v47)
  {
    uint64_t v52 = v50;
    uint64_t v53 = v47;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v38 = String._capitalized()();
    uint64_t v13 = (void *)v38._countAndFlagsBits;
    uint64_t v14 = v38._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_25:
      Swift::String v39 = String.uppercased()();
      uint64_t v17 = v39._countAndFlagsBits;
      uint64_t v18 = v39._object;
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v50 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    if (v16) {
      goto LABEL_25;
    }
  }

  uint64_t v49 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
LABEL_28:
  id v40 = objc_msgSend(a1, sel_pronouns);
  if (v40)
  {
    uint64_t v41 = v40;
    uint64_t v46 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v42 = swift_dynamicCastClass();
    uint64_t v46 = (uint64_t)v41;
    if (v42)
    {
      uint64_t v46 = *(void *)(v42 + 24);
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v43 = swift_dynamicCastClass();
    if (v43)
    {
      uint64_t v46 = v43;
    }

    else
    {
      swift_unknownObjectRelease();
      id v45 = objc_msgSend(v41, sel_copy);
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v46 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }

    uint64_t v19 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v46);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = MEMORY[0x18961AFE8];
  }

  if (v51 != 1)
  {

    uint64_t v12 = v47;
    uint64_t v7 = v48;
    uint64_t v11 = v50;
    uint64_t v8 = v51;
    uint64_t v15 = v49;
    goto LABEL_38;
  }

  __break(1u);
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = v2 & 0xC000000000000001LL;
    uint64_t v4 = (void *)MEMORY[0x18961AFE8];
    uint64_t v5 = 4LL;
    uint64_t v20 = v3;
    unint64_t v21 = v2;
    while (1)
    {
      id v6 = v22 ? (id)MEMORY[0x186E1C36C](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      id v9 = objc_msgSend(v6, sel_pronoun);
      id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v11 = v10;

      swift_bridgeObjectRetain();
      Morphology.init(_:)((NSMorphology_optional *)objc_msgSend(v7, sel_morphology));
      v1.i32[0] = v28;
      swift_bridgeObjectRetain();
      uint64_t v12 = (NSMorphology_optional *)objc_msgSend(v7, sel_dependentMorphology);
      uint64_t v13 = v12;
      if (v12)
      {
        uint64_t v14 = v12;
        Morphology.init(_:)(v13);

        uint64_t v23 = v27;
        uint64_t v13 = (NSMorphology_optional *)(v25 | ((unint64_t)v26 << 16));
        unint64_t v15 = v28 | ((unint64_t)v29 << 32);
      }

      else
      {

        uint64_t v23 = 0LL;
        unint64_t v15 = 0LL;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
      }
      unint64_t v17 = v4[2];
      unint64_t v16 = v4[3];
      if (v17 >= v16 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v16 > 1),  v17 + 1,  1,  v4);
      }
      v4[2] = v17 + 1;
      uint64_t v18 = &v4[8 * v17];
      v18[4] = v24;
      v18[5] = v11;
      *((_WORD *)v18 + 24) = v25;
      *((_BYTE *)v18 + 50) = v26;
      v18[7] = v27;
      *((_DWORD *)v18 + 16) = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
      *((_BYTE *)v18 + 68) = v29;
      v18[9] = v13;
      v18[10] = v23;
      *((_DWORD *)v18 + 22) = v15;
      ++v5;
      *((_BYTE *)v18 + 92) = BYTE4(v15);
      unint64_t v2 = v21;
      if (v8 == v20) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }

  uint64_t v4 = (void *)MEMORY[0x18961AFE8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v4;
}

void __swiftcall TermOfAddress._bridgeToObjectiveC()(NSTermOfAddress *__return_ptr retstr)
{
  unint64_t v2 = v1[12];
  switch(v2)
  {
    case 0uLL:
      id v3 = objc_msgSend((id)objc_opt_self(), sel_neutral);
      goto LABEL_8;
    case 1uLL:
      id v3 = objc_msgSend((id)objc_opt_self(), sel_feminine);
      goto LABEL_8;
    case 2uLL:
      id v3 = objc_msgSend((id)objc_opt_self(), sel_masculine);
      goto LABEL_8;
    case 3uLL:
      id v3 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
LABEL_8:
      id v16 = v3;
      return;
    default:
      uint64_t v4 = *v1;
      uint64_t v5 = v1[1];
      uint64_t v6 = v1[2];
      uint64_t v7 = v1[3];
      uint64_t v9 = v1[4];
      uint64_t v8 = v1[5];
      uint64_t v11 = v1[6];
      uint64_t v10 = v1[7];
      uint64_t v13 = v1[8];
      uint64_t v12 = v1[9];
      uint64_t v14 = v1[11];
      uint64_t v15 = v1[10];
      v52[0] = v4;
      v52[1] = v5;
      v52[2] = v6;
      v52[3] = v7;
      v52[4] = v9;
      v52[5] = v8;
      v52[6] = v11;
      v52[7] = v10;
      uint64_t v46 = v10;
      uint64_t v47 = v13;
      v52[8] = v13;
      v52[9] = v12;
      uint64_t v49 = v12;
      v52[10] = v15;
      v52[11] = v14;
      unint64_t v39 = v2;
      if (v5)
      {
        outlined copy of Locale.LanguageCode?(v4, v5);
        outlined copy of Locale.LanguageCode?(v9, v8);
        outlined copy of Locale.LanguageCode?(v47, v49);
        swift_bridgeObjectRetain();
LABEL_11:
        outlined copy of Locale.LanguageCode?(v4, v5);
        swift_bridgeObjectRelease();
        outlined consume of Locale.LanguageCode?(v4, v5);
        outlined consume of Locale.LanguageCode?(v9, v8);
        outlined consume of Locale.LanguageCode?(v47, v49);
        goto LABEL_12;
      }

      outlined copy of Locale.LanguageCode?(v4, 0LL);
      outlined copy of Locale.LanguageCode?(v9, v8);
      outlined copy of Locale.LanguageCode?(v47, v49);
      outlined copy of TermOfAddress._TermOfAddress(v4, 0LL, v6, v7, v9, v8, v11, v46, v47, v49, v15, v14, v2);
      specialized _withFixedCharBuffer(size:_:)(257LL, v52);
      uint64_t v18 = v17;
      outlined consume of Locale.LanguageCode?(v4, 0LL);
      outlined consume of Locale.LanguageCode?(v9, v8);
      outlined consume of Locale.LanguageCode?(v47, v49);
      if (v18)
      {
        String.lowercased()();
        goto LABEL_11;
      }

      Locale.Language.maximalIdentifier.getter();
      outlined consume of Locale.LanguageCode?(v4, 0LL);
      outlined consume of Locale.LanguageCode?(v9, v8);
      outlined consume of Locale.LanguageCode?(v47, v49);
LABEL_12:
      uint64_t v19 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v2 + 16);
      if (v20)
      {
        unint64_t v51 = MEMORY[0x18961AFE8];
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v21 = 0LL;
        while (1)
        {
          uint64_t v50 = v20;
          uint64_t v45 = v21;
          uint64_t v23 = *(unsigned __int8 *)(v39 + v21 + 48);
          uint64_t v24 = *(unsigned __int8 *)(v39 + v21 + 49);
          uint64_t v25 = *(unsigned __int8 *)(v39 + v21 + 50);
          uint64_t v26 = *(unsigned __int8 *)(v39 + v21 + 64);
          uint64_t v42 = *(unsigned __int8 *)(v39 + v21 + 66);
          int v27 = *(unsigned __int8 *)(v39 + v21 + 67);
          int v43 = *(unsigned __int8 *)(v39 + v21 + 68);
          uint64_t v28 = *(void *)(v39 + v21 + 80);
          uint64_t v44 = *(void *)(v39 + v21 + 72);
          uint64_t v40 = *(unsigned int *)(v39 + v21 + 88);
          uint64_t v41 = *(unsigned __int8 *)(v39 + v21 + 92);
          uint64_t v48 = String._bridgeToObjectiveCImpl()();
          id v29 = objc_allocWithZone((Class)&OBJC_CLASS___NSMorphology);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v30 = objc_msgSend(v29, sel_init);
          uint64_t v31 = v30;
          if (v23 == 3)
          {
            if ((_DWORD)v25 == 6) {
              goto LABEL_18;
            }
          }

          else
          {
            objc_msgSend(v30, sel_setGrammaticalGender_, v23 + 1);
            if ((_DWORD)v25 == 6)
            {
LABEL_18:
              if ((_DWORD)v24 == 14) {
                goto LABEL_19;
              }
              goto LABEL_34;
            }
          }

          objc_msgSend(v31, sel_setNumber_, v25 + 1);
          if ((_DWORD)v24 == 14)
          {
LABEL_19:
            if ((_DWORD)v26 != 14) {
              goto LABEL_35;
            }
            goto LABEL_20;
          }

void static TermOfAddress._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  if (!a1) {
    __break(1u);
  }
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v4 = (void *)objc_opt_self();
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_neutral);
  char v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
LABEL_39:
    *a2 = v8;
    a2[1] = v9;
    a2[2] = countAndFlagsBits;
    a2[3] = (uint64_t)object;
    a2[4] = v12;
    a2[5] = v13;
    a2[6] = (uint64_t)v14;
    a2[7] = (uint64_t)v15;
    a2[8] = v16;
    a2[9] = v17;
    a2[10] = v18;
    a2[11] = (uint64_t)v19;
    a2[12] = v20;
    return;
  }

  id v21 = objc_msgSend(v4, sel_feminine);
  char v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 1LL;
    goto LABEL_39;
  }

  id v23 = objc_msgSend(v4, sel_masculine);
  char v24 = static NSObject.== infix(_:_:)();

  if ((v24 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 2LL;
    goto LABEL_39;
  }

  id v25 = objc_msgSend(v4, sel_currentUser);
  char v26 = static NSObject.== infix(_:_:)();

  if ((v26 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 3LL;
    goto LABEL_39;
  }

  id v27 = objc_msgSend(v5, sel_languageIdentifier);
  uint64_t v14 = v27;
  if (!v27)
  {
    uint64_t v48 = 0LL;
    uint64_t v49 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v51 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v52 = 1LL;
    goto LABEL_29;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  MEMORY[0x1895F8858](v28);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  if (Language > 0)
  {
    v45[Language] = 0;
    uint64_t v30 = MEMORY[0x186E1B634](v45, 0LL);
  }

  uint64_t v52 = v31;
  uint64_t v48 = v30;
  MEMORY[0x1895F8858](v30);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  if ((int)v53 <= 0 && Script > 0)
  {
    v45[Script] = 0;
    uint64_t v33 = MEMORY[0x186E1B634](v45, 0LL);
  }

  uint64_t v49 = v34;
  uint64_t v51 = v33;
  MEMORY[0x1895F8858](v33);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v36 = 0LL;
  uint64_t v17 = 0LL;
  if ((int)v53 <= 0 && Country > 0)
  {
    v45[Country] = 0;
    uint64_t v36 = MEMORY[0x186E1B634](v45);
    uint64_t v17 = v37;
  }

  uint64_t v50 = v36;
  swift_bridgeObjectRelease();
  if (v52)
  {
    Swift::String v38 = String.lowercased()();
    uint64_t countAndFlagsBits = v38._countAndFlagsBits;
    object = v38._object;
  }

  else
  {
    uint64_t v48 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
  }

  if (v49)
  {
    uint64_t v53 = v51;
    uint64_t v54 = v49;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v39 = String._capitalized()();
    uint64_t v14 = (void *)v39._countAndFlagsBits;
    uint64_t v15 = v39._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_26:
      Swift::String v40 = String.uppercased()();
      uint64_t v18 = v40._countAndFlagsBits;
      uint64_t v19 = v40._object;
      goto LABEL_29;
    }
  }

  else
  {
    uint64_t v51 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    if (v17) {
      goto LABEL_26;
    }
  }

  uint64_t v50 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
LABEL_29:
  id v41 = objc_msgSend(v5, sel_pronouns);
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v47 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v43 = swift_dynamicCastClass();
    uint64_t v47 = (uint64_t)v42;
    if (v43)
    {
      uint64_t v47 = *(void *)(v43 + 24);
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v44 = swift_dynamicCastClass();
    if (v44)
    {
      uint64_t v47 = v44;
    }

    else
    {
      swift_unknownObjectRelease();
      id v46 = objc_msgSend(v42, sel_copy);
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v47 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }

    uint64_t v20 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v47);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v20 = MEMORY[0x18961AFE8];
  }

  if (v52 != 1)
  {

    uint64_t v8 = v48;
    uint64_t v13 = v49;
    uint64_t v12 = v51;
    uint64_t v9 = v52;
    uint64_t v16 = v50;
    goto LABEL_39;
  }

  __break(1u);
}

uint64_t specialized static TermOfAddress.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v12 = a1[10];
  uint64_t v13 = a1[11];
  unint64_t v14 = a1[12];
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  uint64_t v18 = a2[2];
  uint64_t v17 = a2[3];
  uint64_t v19 = a2[4];
  uint64_t v20 = a2[5];
  uint64_t v21 = a2[6];
  uint64_t v22 = a2[7];
  uint64_t v23 = a2[8];
  uint64_t v24 = a2[9];
  uint64_t v25 = a2[10];
  uint64_t v26 = a2[11];
  unint64_t v27 = a2[12];
  v60[0] = *a1;
  v60[1] = v3;
  v60[2] = v4;
  v60[3] = v5;
  v60[4] = v6;
  v60[5] = v7;
  v60[6] = v8;
  v60[7] = v9;
  v60[8] = v10;
  v60[9] = v11;
  uint64_t v57 = v13;
  uint64_t v58 = v12;
  v60[10] = v12;
  v60[11] = v13;
  v60[12] = v14;
  v60[13] = v15;
  v60[14] = v16;
  v60[15] = v18;
  v60[16] = v17;
  v60[17] = v19;
  v60[18] = v20;
  v60[19] = v21;
  v60[20] = v22;
  v60[21] = v23;
  v60[22] = v24;
  v60[23] = v25;
  v60[24] = v26;
  v60[25] = v27;
  switch(v14)
  {
    case 0uLL:
      if (v27) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 1uLL:
      if (v27 != 1) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 2uLL:
      if (v27 != 2) {
        goto LABEL_14;
      }
LABEL_11:
      outlined copy of TermOfAddress._TermOfAddress(v15, v16, v18, v17, v19, v20, v21, v22, v23, v24, v25, v26, v27);
      char v31 = 1;
      goto LABEL_15;
    case 3uLL:
      if (v27 != 3) {
        goto LABEL_14;
      }
      char v31 = 1;
      goto LABEL_15;
    default:
      if (v27 < 4)
      {
LABEL_14:
        uint64_t v46 = v26;
        unint64_t v47 = v27;
        uint64_t v44 = v24;
        uint64_t v45 = v25;
        uint64_t v43 = v23;
        uint64_t v32 = v15;
        uint64_t v56 = v4;
        uint64_t v33 = v10;
        uint64_t v34 = v18;
        uint64_t v35 = v5;
        uint64_t v36 = v6;
        uint64_t v37 = v7;
        uint64_t v38 = v8;
        uint64_t v39 = v2;
        uint64_t v40 = v3;
        outlined copy of TermOfAddress._TermOfAddress(v32, v16, v34, v17, v19, v20, v21, v22, v43, v44, v45, v46, v47);
        outlined copy of TermOfAddress._TermOfAddress(v39, v40, v56, v35, v36, v37, v38, v9, v33, v11, v58, v57, v14);
        char v31 = 0;
        goto LABEL_15;
      }

      uint64_t v55 = v4;
      uint64_t v50 = v10;
      uint64_t v53 = v6;
      uint64_t v54 = v5;
      uint64_t v51 = v8;
      uint64_t v52 = v7;
      uint64_t v48 = v2;
      uint64_t v49 = v3;
      outlined copy of TermOfAddress._TermOfAddress(v15, v16, v18, v17, v19, v20, v21, v22, v23, v24, v25, v26, v27);
      outlined copy of TermOfAddress._TermOfAddress(v48, v49, v55, v54, v53, v52, v51, v9, v50, v11, v58, v57, v14);
      uint64_t v59 = Locale.Language.maximalIdentifier.getter();
      uint64_t v29 = v28;
      if (v59 == Locale.Language.maximalIdentifier.getter() && v29 == v30)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v31 = 0;
        if ((v42 & 1) == 0) {
          goto LABEL_15;
        }
      }

      char v31 = specialized static Array<A>.== infix(_:_:)(v14, v27);
LABEL_15:
      outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v60);
      return v31 & 1;
  }

unint64_t lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for TermOfAddress.CodingKeys,  &type metadata for TermOfAddress.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for TermOfAddress.CodingKeys,  &type metadata for TermOfAddress.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for TermOfAddress.CodingKeys,  &type metadata for TermOfAddress.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for TermOfAddress.CodingKeys,  &type metadata for TermOfAddress.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalGender,  &type metadata for Morphology.GrammaticalGender);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalGender,  &type metadata for Morphology.GrammaticalGender);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalGender,  &type metadata for Morphology.GrammaticalGender);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Pronoun and conformance Morphology.Pronoun()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.Pronoun,  &type metadata for Morphology.Pronoun);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.Pronoun,  &type metadata for Morphology.Pronoun);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.Pronoun,  &type metadata for Morphology.Pronoun);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type [Morphology.Pronoun] and conformance <A> [A]( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Morphology.Pronoun]);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t outlined copy of TermOfAddress._TermOfAddress( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 >= 4)
  {
    outlined copy of Locale.LanguageCode?(result, a2);
    outlined copy of Locale.LanguageCode?(a5, a6);
    outlined copy of Locale.LanguageCode?(a9, a10);
    return swift_bridgeObjectRetain();
  }

  return result;
}

unint64_t specialized TermOfAddress.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of TermOfAddress.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

void specialized static TermOfAddress._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  outlined consume of TermOfAddress?( *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24),  *(void *)(a2 + 32),  *(void *)(a2 + 40),  *(void *)(a2 + 48),  *(void *)(a2 + 56),  *(void *)(a2 + 64),  *(void *)(a2 + 72),  *(void *)(a2 + 80),  *(void *)(a2 + 88),  *(void *)(a2 + 96));
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v4 = (void *)objc_opt_self();
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_neutral);
  char v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
LABEL_38:
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = countAndFlagsBits;
    *(void *)(a2 + 24) = object;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 40) = v13;
    *(void *)(a2 + 48) = v14;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 64) = v16;
    *(void *)(a2 + 72) = v17;
    *(void *)(a2 + 80) = v18;
    *(void *)(a2 + 88) = v19;
    *(void *)(a2 + 96) = v20;
    return;
  }

  id v21 = objc_msgSend(v4, sel_feminine);
  char v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 1LL;
    goto LABEL_38;
  }

  id v23 = objc_msgSend(v4, sel_masculine);
  char v24 = static NSObject.== infix(_:_:)();

  if ((v24 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 2LL;
    goto LABEL_38;
  }

  id v25 = objc_msgSend(v4, sel_currentUser);
  char v26 = static NSObject.== infix(_:_:)();

  if ((v26 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 3LL;
    goto LABEL_38;
  }

  id v27 = objc_msgSend(v5, sel_languageIdentifier);
  unint64_t v14 = v27;
  if (!v27)
  {
    uint64_t v48 = 0LL;
    uint64_t v49 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v51 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v52 = 1LL;
    goto LABEL_28;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  MEMORY[0x1895F8858](v28);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  if (Language > 0)
  {
    v45[Language] = 0;
    uint64_t v30 = MEMORY[0x186E1B634](v45, 0LL);
  }

  uint64_t v52 = v31;
  uint64_t v49 = v30;
  MEMORY[0x1895F8858](v30);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  if ((int)v53 <= 0 && Script > 0)
  {
    v45[Script] = 0;
    uint64_t v33 = MEMORY[0x186E1B634](v45, 0LL);
  }

  uint64_t v48 = v34;
  uint64_t v51 = v33;
  MEMORY[0x1895F8858](v33);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v36 = 0LL;
  uint64_t v17 = 0LL;
  if ((int)v53 <= 0 && Country > 0)
  {
    v45[Country] = 0;
    uint64_t v36 = MEMORY[0x186E1B634](v45);
    uint64_t v17 = v37;
  }

  uint64_t v50 = v36;
  swift_bridgeObjectRelease();
  if (v52)
  {
    Swift::String v38 = String.lowercased()();
    uint64_t countAndFlagsBits = v38._countAndFlagsBits;
    object = v38._object;
  }

  else
  {
    uint64_t v49 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
  }

  if (v48)
  {
    uint64_t v53 = v51;
    uint64_t v54 = v48;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v39 = String._capitalized()();
    unint64_t v14 = (void *)v39._countAndFlagsBits;
    uint64_t v15 = v39._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_25:
      Swift::String v40 = String.uppercased()();
      uint64_t v18 = v40._countAndFlagsBits;
      uint64_t v19 = v40._object;
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v51 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    if (v17) {
      goto LABEL_25;
    }
  }

  uint64_t v50 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
LABEL_28:
  id v41 = objc_msgSend(v5, sel_pronouns);
  if (v41)
  {
    char v42 = v41;
    uint64_t v47 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v43 = swift_dynamicCastClass();
    uint64_t v47 = (uint64_t)v42;
    if (v43)
    {
      uint64_t v47 = *(void *)(v43 + 24);
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v44 = swift_dynamicCastClass();
    if (v44)
    {
      uint64_t v47 = v44;
    }

    else
    {
      swift_unknownObjectRelease();
      id v46 = objc_msgSend(v42, sel_copy);
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v47 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }

    uint64_t v20 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v47);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v20 = MEMORY[0x18961AFE8];
  }

  if (v52 != 1)
  {

    uint64_t v13 = v48;
    uint64_t v8 = v49;
    uint64_t v12 = v51;
    uint64_t v9 = v52;
    uint64_t v16 = v50;
    goto LABEL_38;
  }

  __break(1u);
}

uint64_t specialized static TermOfAddress._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  outlined consume of TermOfAddress?( *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24),  *(void *)(a2 + 32),  *(void *)(a2 + 40),  *(void *)(a2 + 48),  *(void *)(a2 + 56),  *(void *)(a2 + 64),  *(void *)(a2 + 72),  *(void *)(a2 + 80),  *(void *)(a2 + 88),  *(void *)(a2 + 96));
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v4 = (void *)objc_opt_self();
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_neutral);
  char v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
LABEL_38:
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = countAndFlagsBits;
    *(void *)(a2 + 24) = object;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 40) = v13;
    *(void *)(a2 + 48) = v14;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 64) = v16;
    *(void *)(a2 + 72) = v17;
    *(void *)(a2 + 80) = v18;
    *(void *)(a2 + 88) = v19;
    *(void *)(a2 + 96) = v20;
    return 1LL;
  }

  id v21 = objc_msgSend(v4, sel_feminine);
  char v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 1LL;
    goto LABEL_38;
  }

  id v23 = objc_msgSend(v4, sel_masculine);
  char v24 = static NSObject.== infix(_:_:)();

  if ((v24 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 2LL;
    goto LABEL_38;
  }

  id v25 = objc_msgSend(v4, sel_currentUser);
  char v26 = static NSObject.== infix(_:_:)();

  if ((v26 & 1) != 0)
  {

    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 3LL;
    goto LABEL_38;
  }

  id v27 = objc_msgSend(v5, sel_languageIdentifier);
  unint64_t v14 = v27;
  if (!v27)
  {
    uint64_t v48 = 0LL;
    uint64_t v49 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v51 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v52 = 1LL;
    goto LABEL_28;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  MEMORY[0x1895F8858](v28);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  if (Language > 0)
  {
    v45[Language] = 0;
    uint64_t v30 = MEMORY[0x186E1B634](v45, 0LL);
  }

  uint64_t v52 = v31;
  uint64_t v49 = v30;
  MEMORY[0x1895F8858](v30);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  if ((int)v53 <= 0 && Script > 0)
  {
    v45[Script] = 0;
    uint64_t v33 = MEMORY[0x186E1B634](v45, 0LL);
  }

  uint64_t v48 = v34;
  uint64_t v51 = v33;
  MEMORY[0x1895F8858](v33);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v36 = 0LL;
  uint64_t v17 = 0LL;
  if ((int)v53 <= 0 && Country > 0)
  {
    v45[Country] = 0;
    uint64_t v36 = MEMORY[0x186E1B634](v45);
    uint64_t v17 = v37;
  }

  uint64_t v50 = v36;
  swift_bridgeObjectRelease();
  if (v52)
  {
    Swift::String v38 = String.lowercased()();
    uint64_t countAndFlagsBits = v38._countAndFlagsBits;
    object = v38._object;
  }

  else
  {
    uint64_t v49 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
  }

  if (v48)
  {
    uint64_t v53 = v51;
    uint64_t v54 = v48;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v39 = String._capitalized()();
    unint64_t v14 = (void *)v39._countAndFlagsBits;
    uint64_t v15 = v39._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_25:
      Swift::String v40 = String.uppercased()();
      uint64_t v18 = v40._countAndFlagsBits;
      uint64_t v19 = v40._object;
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v51 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    if (v17) {
      goto LABEL_25;
    }
  }

  uint64_t v50 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
LABEL_28:
  uint64_t result = (uint64_t)objc_msgSend(v5, sel_pronouns);
  if (result)
  {
    char v42 = (void *)result;
    uint64_t v47 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v43 = swift_dynamicCastClass();
    uint64_t v47 = (uint64_t)v42;
    if (v43)
    {
      uint64_t v47 = *(void *)(v43 + 24);
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v44 = swift_dynamicCastClass();
    if (v44)
    {
      uint64_t v47 = v44;
    }

    else
    {
      swift_unknownObjectRelease();
      id v46 = objc_msgSend(v42, sel_copy);
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v47 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }

    uint64_t v20 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v47);
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v20 = MEMORY[0x18961AFE8];
  }

  if (v52 != 1)
  {

    uint64_t v13 = v48;
    uint64_t v8 = v49;
    uint64_t v12 = v51;
    uint64_t v9 = v52;
    uint64_t v16 = v50;
    goto LABEL_38;
  }

  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TermOfAddress and conformance TermOfAddress()
{
  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress;
  if (!lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TermOfAddress, &type metadata for TermOfAddress);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress;
  if (!lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TermOfAddress, &type metadata for TermOfAddress);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress;
  if (!lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TermOfAddress, &type metadata for TermOfAddress);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress);
  }

  return result;
}

uint64_t destroy for TermOfAddress(uint64_t result)
{
  if (*(void *)(result + 96) >= 4uLL)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(void *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(void *)(v1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

void *initializeWithCopy for TermOfAddress(void *a1, void *a2)
{
  unint64_t v4 = a2[12];
  if (v4 >= 4)
  {
    uint64_t v8 = a2[1];
    if (v8)
    {
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v10 = a2[5];
      if (v10) {
        goto LABEL_5;
      }
    }

    else
    {
      __int128 v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v15;
      uint64_t v10 = a2[5];
      if (v10)
      {
LABEL_5:
        a1[4] = a2[4];
        a1[5] = v10;
        uint64_t v11 = a2[7];
        a1[6] = a2[6];
        a1[7] = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v12 = a2[9];
        if (v12)
        {
LABEL_6:
          a1[8] = a2[8];
          a1[9] = v12;
          uint64_t v13 = a2[10];
          uint64_t v14 = a2[11];
          a1[10] = v13;
          a1[11] = v14;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_10:
          a1[12] = v4;
          swift_bridgeObjectRetain();
          return a1;
        }

uint64_t assignWithCopy for TermOfAddress(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *((void *)a2 + 12);
  if (*(void *)(a1 + 96) < 4uLL)
  {
    if (v4 < 4)
    {
      __int128 v5 = *a2;
      __int128 v6 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)a1 = v5;
      __int128 v7 = a2[3];
      __int128 v8 = a2[4];
      __int128 v9 = a2[5];
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *(_OWORD *)(a1 + 64) = v8;
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 48) = v7;
      return a1;
    }

    if (*((void *)a2 + 1))
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*((void *)a2 + 5)) {
        goto LABEL_8;
      }
    }

    else
    {
      __int128 v16 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v16;
      if (*((void *)a2 + 5))
      {
LABEL_8:
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(void *)(a1 + 56) = *((void *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (*((void *)a2 + 9))
        {
LABEL_9:
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *(void *)(a1 + 80) = *((void *)a2 + 10);
          *(void *)(a1 + 88) = *((void *)a2 + 11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_16:
          *(void *)(a1 + 96) = *((void *)a2 + 12);
          swift_bridgeObjectRetain();
          return a1;
        }

LABEL_15:
        __int128 v18 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v18;
        goto LABEL_16;
      }
    }

    __int128 v17 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v17;
    if (*((void *)a2 + 9)) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }

  if (v4 >= 4)
  {
    uint64_t v15 = *((void *)a2 + 1);
    if (*(void *)(a1 + 8))
    {
      if (v15)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }

      else
      {
        outlined destroy of Locale.LanguageCode(a1);
        __int128 v19 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v19;
      }
    }

    else if (v15)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      __int128 v20 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v20;
    }

    id v21 = (_OWORD *)(a1 + 32);
    char v22 = a2 + 2;
    uint64_t v23 = *((void *)a2 + 5);
    if (*(void *)(a1 + 40))
    {
      if (v23)
      {
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(void *)(a1 + 56) = *((void *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }

      else
      {
        outlined destroy of Locale.Script(a1 + 32);
        __int128 v24 = a2[3];
        *id v21 = *v22;
        *(_OWORD *)(a1 + 48) = v24;
      }
    }

    else if (v23)
    {
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      __int128 v25 = a2[3];
      *id v21 = *v22;
      *(_OWORD *)(a1 + 48) = v25;
    }

    char v26 = (_OWORD *)(a1 + 64);
    id v27 = a2 + 4;
    uint64_t v28 = *((void *)a2 + 9);
    if (*(void *)(a1 + 72))
    {
      if (v28)
      {
        *(void *)(a1 + 64) = *((void *)a2 + 8);
        *(void *)(a1 + 72) = *((void *)a2 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }

      else
      {
        outlined destroy of Locale.Region(a1 + 64);
        __int128 v29 = a2[5];
        *char v26 = *v27;
        *(_OWORD *)(a1 + 80) = v29;
      }
    }

    else if (v28)
    {
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      __int128 v30 = a2[5];
      *char v26 = *v27;
      *(_OWORD *)(a1 + 80) = v30;
    }

    *(void *)(a1 + 96) = *((void *)a2 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }

  else
  {
    outlined destroy of (Locale.Language, [Morphology.Pronoun])(a1);
    __int128 v11 = a2[1];
    __int128 v10 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v10;
    __int128 v13 = a2[4];
    __int128 v12 = a2[5];
    __int128 v14 = a2[3];
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 48) = v14;
  }

  return a1;
}

  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return URLComponents.port.modify;
}

  swift_bridgeObjectRetain();
  return v1;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      char v26 = *(void *)(v19 + 16);
      if (v26 && !*(_WORD *)(v19 + 2 * v26 + 30))
      {
        do
        {
          *(void *)(v19 + 16) = v26 - 1;
          if (v26 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v19 + 28 + 2 * v26--));
      }

      swift_bridgeObjectRelease();
      uint64_t v96 = v92;
      LOWORD(v97) = v84;
      WORD1(v97) = v83;
      WORD2(v97) = v86;
      WORD3(v97) = v5;
      WORD4(v97) = v6;
      WORD5(v97) = v7;
      WORD6(v97) = v8;
      HIWORD(v97) = v82;
      uint64_t v28 = *(void *)(v19 + 16);
      if (v28 <= 8)
      {
        _So9NSDecimala__length_setter(*(void *)(v19 + 16), &v96);
        switch(v28)
        {
          case 0uLL:
            swift_bridgeObjectRelease();
            unint64_t v97 = 0uLL;
            goto LABEL_66;
          case 1uLL:
            if (!*(void *)(v19 + 16)) {
              goto LABEL_93;
            }
            uint64_t v44 = *(_WORD *)(v19 + 32);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v44;
            *(void *)((char *)&v97 + 2) = 0LL;
            *((void *)&v97 + 1) = 0LL;
            goto LABEL_66;
          case 2uLL:
            uint64_t v33 = *(void *)(v19 + 16);
            if (!v33) {
              goto LABEL_92;
            }
            if (v33 == 1) {
              goto LABEL_100;
            }
            uint64_t v34 = *(_DWORD *)(v19 + 32);
            swift_bridgeObjectRelease();
            LODWORD(v97) = v34;
            *(void *)((char *)&v97 + 4) = 0LL;
            HIDWORD(v97) = 0;
            goto LABEL_66;
          case 3uLL:
            uint64_t v35 = *(void *)(v19 + 16);
            if (!v35) {
              goto LABEL_90;
            }
            if (v35 == 1) {
              goto LABEL_96;
            }
            if (v35 < 3) {
              goto LABEL_102;
            }
            uint64_t v36 = *(_WORD *)(v19 + 32);
            uint64_t v37 = *(_DWORD *)(v19 + 34);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v36;
            *(_DWORD *)((char *)&v97 + 2) = v37;
            *(void *)((char *)&v97 + 6) = 0LL;
            HIWORD(v97) = 0;
            goto LABEL_66;
          case 4uLL:
            __int128 v29 = *(void *)(v19 + 16);
            if (!v29) {
              goto LABEL_87;
            }
            if (v29 == 1) {
              goto LABEL_94;
            }
            if (v29 < 3) {
              goto LABEL_103;
            }
            if (v29 == 3) {
              goto LABEL_109;
            }
            __int128 v30 = *(_WORD *)(v19 + 32);
            uint64_t v31 = *(_WORD *)(v19 + 34);
            uint64_t v32 = *(_DWORD *)(v19 + 36);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v30;
            WORD1(v97) = v31;
            DWORD1(v97) = v32;
            *((void *)&v97 + 1) = 0LL;
            goto LABEL_66;
          case 5uLL:
            uint64_t v45 = *(void *)(v19 + 16);
            if (!v45) {
              goto LABEL_89;
            }
            if (v45 == 1) {
              goto LABEL_98;
            }
            if (v45 < 3) {
              goto LABEL_104;
            }
            if (v45 == 3) {
              goto LABEL_110;
            }
            if (v45 < 5) {
              goto LABEL_115;
            }
            id v46 = *(_WORD *)(v19 + 32);
            uint64_t v47 = *(_WORD *)(v19 + 34);
            uint64_t v48 = *(_WORD *)(v19 + 36);
            uint64_t v49 = *(_DWORD *)(v19 + 38);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v46;
            WORD1(v97) = v47;
            WORD2(v97) = v48;
            *(_DWORD *)((char *)&v97 + 6) = v49;
            *(_DWORD *)((char *)&v97 + 10) = 0;
            HIWORD(v97) = 0;
            goto LABEL_66;
          case 6uLL:
            uint64_t v50 = *(void *)(v19 + 16);
            if (!v50) {
              goto LABEL_88;
            }
            if (v50 == 1) {
              goto LABEL_99;
            }
            if (v50 < 3) {
              goto LABEL_105;
            }
            if (v50 == 3) {
              goto LABEL_107;
            }
            if (v50 < 5) {
              goto LABEL_112;
            }
            if (v50 == 5) {
              goto LABEL_116;
            }
            uint64_t v51 = *(_WORD *)(v19 + 32);
            uint64_t v52 = *(_WORD *)(v19 + 34);
            uint64_t v53 = *(_WORD *)(v19 + 36);
            uint64_t v54 = *(_WORD *)(v19 + 38);
            uint64_t v55 = *(_DWORD *)(v19 + 40);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v51;
            WORD1(v97) = v52;
            WORD2(v97) = v53;
            WORD3(v97) = v54;
            *((void *)&v97 + 1) = v55;
            goto LABEL_66;
          case 7uLL:
            Swift::String v38 = *(void *)(v19 + 16);
            if (!v38) {
              goto LABEL_91;
            }
            if (v38 == 1) {
              goto LABEL_97;
            }
            if (v38 < 3) {
              goto LABEL_101;
            }
            if (v38 == 3) {
              goto LABEL_111;
            }
            if (v38 < 5) {
              goto LABEL_113;
            }
            if (v38 == 5) {
              goto LABEL_118;
            }
            if (v38 < 7) {
              goto LABEL_120;
            }
            Swift::String v39 = *(_WORD *)(v19 + 32);
            Swift::String v40 = *(_WORD *)(v19 + 34);
            id v41 = *(_WORD *)(v19 + 36);
            char v42 = *(_WORD *)(v19 + 38);
            uint64_t v43 = *(_WORD *)(v19 + 40);
            uint64_t v93 = *(_DWORD *)(v19 + 42);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v39;
            WORD1(v97) = v40;
            WORD2(v97) = v41;
            WORD3(v97) = v42;
            WORD4(v97) = v43;
            *(_DWORD *)((char *)&v97 + 10) = v93;
            HIWORD(v97) = 0;
            goto LABEL_66;
          case 8uLL:
            uint64_t v56 = *(void *)(v19 + 16);
            if (!v56) {
              goto LABEL_86;
            }
            if (v56 == 1) {
              goto LABEL_95;
            }
            if (v56 < 3) {
              goto LABEL_106;
            }
            if (v56 == 3) {
              goto LABEL_108;
            }
            if (v56 < 5) {
              goto LABEL_114;
            }
            if (v56 == 5) {
              goto LABEL_117;
            }
            if (v56 < 7) {
              goto LABEL_119;
            }
            if (v56 == 7) {
              goto LABEL_121;
            }
            uint64_t v57 = *(_WORD *)(v19 + 32);
            uint64_t v58 = *(_WORD *)(v19 + 34);
            uint64_t v59 = *(_WORD *)(v19 + 36);
            char v60 = *(_WORD *)(v19 + 38);
            uint64_t v61 = *(_WORD *)(v19 + 40);
            uint64_t v94 = *(_WORD *)(v19 + 42);
            uint64_t v87 = *(_DWORD *)(v19 + 44);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v57;
            WORD1(v97) = v58;
            WORD2(v97) = v59;
            WORD3(v97) = v60;
            WORD4(v97) = v61;
            WORD5(v97) = v94;
            HIDWORD(v97) = v87;
LABEL_66:
            _So9NSDecimala__length_setter(v28, &v96);
            __int128 v10 = v91 + 1;
            if (__OFADD__(v91, 1)) {
              goto LABEL_85;
            }
            LODWORD(v15) = v96;
            LOWORD(v12) = v97;
            LOWORD(v13) = WORD1(v97);
            unint64_t v4 = WORD2(v97);
            __int128 v5 = WORD3(v97);
            __int128 v6 = WORD4(v97);
            LOWORD(v7) = WORD5(v97);
            LOWORD(v8) = WORD6(v97);
            __int128 v9 = HIWORD(v97);
            if (!(_WORD)v2)
            {
              uint64_t v85 = WORD6(v97);
              uint64_t v62 = v96;
              uint64_t v95 = WORD5(v97);
              unint64_t v63 = (unsigned __int16)v97;
              char v88 = WORD4(v97);
              uint64_t v64 = WORD3(v97);
              int64_t v65 = WORD1(v97);
              int v66 = _So9NSDecimala__length_getter(&v96);
              __int128 v13 = v65;
              __int128 v5 = v64;
              __int128 v6 = v88;
              __int128 v12 = v63;
              __int128 v7 = v95;
              __int128 v10 = v91 + 1;
              uint64_t v15 = v62;
              __int128 v8 = v85;
              __int128 v11 = v89 + 1;
              if (v66) {
                continue;
              }
            }

            uint64_t v91 = v10;
            uint64_t v96 = v15;
            LOWORD(v97) = v12;
            WORD1(v97) = v13;
            uint64_t v86 = v4;
            WORD2(v97) = v4;
            __int128 v14 = v5;
            WORD3(v97) = v5;
            __int128 v5 = v6;
            WORD4(v97) = v6;
            WORD5(v97) = v7;
            WORD6(v97) = v8;
            HIWORD(v97) = v9;
            uint64_t v67 = _So9NSDecimala__length_getter(&v96);
            if ((_WORD)v2 || v67) {
              goto LABEL_76;
            }
            *(void *)uint64_t v81 = 0LL;
            *((void *)v81 + 1) = 0LL;
            v81[4] = 0;
            break;
          default:
            goto LABEL_123;
        }

        return;
      }

      goto LABEL_123;
    }

    break;
  }

        __break(1u);
      }
    }

    __break(1u);
    goto LABEL_15;
  }

  __int128 v16 = swift_bridgeObjectRetain_n();
  MEMORY[0x1895F8858](v16);
  swift_bridgeObjectRetain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v18, v19);
  __int128 v13 = v19[0];
  swift_bridgeObjectRelease_n();
  return v13;
}

  if ((a3 & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v15 = (unsigned __int8 *)(v6 + 1);
  __int128 v16 = 0LL;
  while (1)
  {
    __int128 v17 = v15[v16];
  }

  unint64_t result = &v15[v16];
  if (*(unsigned __int8 *)(v6 + v16) - 58 > 0xFFFFFFF5)
  {
LABEL_26:
    char v26 = &v11[a2 - 1];
    id v27 = *v26;
    if ((v27 - 58) <= 0xFFFFFFF5)
    {
      __int128 v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v26, a4, a5);
      __int128 v20 = v28;
      char v22 = v29;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v23 = 0xD000000000000010LL;
      *(void *)(v23 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v23 + 16) = v27;
      goto LABEL_28;
    }

    return (unsigned __int8 *)v6;
  }

  if (((v6 - (void)v11 + v16 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)&v11[a2 + ~v6 - v16] >= 1)
  {
    __int128 v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
    __int128 v20 = v24;
    char v22 = v25;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_1837301C0;
    *(void *)(v23 + 16) = v17;
    goto LABEL_28;
  }

  *(_DWORD *)__int128 v29 = v6;
  *(_WORD *)&v29[4] = v5;
  *(_WORD *)&v29[6] = v7;
  *(_WORD *)&v29[8] = v4;
  *(_WORD *)&v29[10] = v22;
  *(_WORD *)&v29[12] = v9;
  *(_WORD *)&v29[14] = v10;
  *(_WORD *)&v29[16] = v3;
  *(_WORD *)&v29[18] = v11;
  unint64_t result = _So9NSDecimala__exponent_getter(v29);
  if (!(v15 >> 31))
  {
    else {
      __int128 v18 = (result - v15);
    }
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    __int128 v16 = v94;
    __int128 v17 = v92;
    __int128 v18 = v91;
    *(void *)&unint64_t v77 = 0LL;
    BYTE8(v77) = v104;
    BYTE9(v77) = v103;
    BYTE10(v77) = v102;
    BYTE11(v77) = v101;
    BYTE12(v77) = v100;
    BYTE13(v77) = v99;
    BYTE14(v77) = v98;
    HIBYTE(v77) = v97;
    LOBYTE(v78) = v96;
    *(_OWORD *)(v4 + 24) = 0u;
    *((void *)&v82 + 1) = 0LL;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    LOBYTE(v83) = v16;
    uint64_t v84 = 0LL;
    *(void *)&uint64_t v85 = 0LL;
    *((void *)&v85 + 1) = v3;
    uint64_t v86 = v2;
    uint64_t v87 = 0LL;
    char v88 = 0LL;
    uint64_t v89 = v17;
    uint64_t v90 = v18;
    v105[0] = v77;
    v105[1] = v78;
    v105[4] = v81;
    v105[5] = v82;
    v105[2] = v79;
    v105[3] = v80;
    *(_OWORD *)((char *)v106 + 10) = *(_OWORD *)(v4 + 138);
    v105[7] = v85;
    v106[0] = v2;
    v105[6] = v83;
    __int128 v19 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
    if (v19)
    {
      __int128 v20 = v19;
      uint64_t v56 = v3;
      uint64_t v57 = v2;
      unint64_t v3 = *(void *)(v19 + 16);
      if (v3)
      {
        id v21 = 0LL;
        unint64_t v4 = 0LL;
        uint64_t v54 = (char *)&v58 + 2;
        uint64_t v55 = (char *)&v58 + 3;
        while (1)
        {
          if (v4 >= *(void *)(v20 + 16))
          {
            __break(1u);
            goto LABEL_86;
          }

          char v22 = (unint64_t *)(v20 + 32 + 32 * v4);
          uint64_t v23 = v22[2];
          Swift::String v2 = v22[3];
          if ((specialized Sequence<>.elementsEqual<A>(_:)(0x65766C6F7365722EuLL, 0xE800000000000000LL, *v22, v22[1]) & 1) != 0)
          {
            if (v2)
            {
              __int128 v24 = HIBYTE(v2) & 0xF;
              __int128 v25 = v23 & 0xFFFFFFFFFFFFLL;
              if ((v2 & 0x2000000000000000LL) != 0 ? HIBYTE(v2) & 0xF : v23 & 0xFFFFFFFFFFFFLL) {
                break;
              }
            }
          }

    __int128 v10 = 0;
    __int128 v9 = 1LL;
    if ((v6 & 1) != 0) {
      return v9;
    }
LABEL_16:
    if (v7 != v10) {
      LODWORD(v9) = 1;
    }
  }

  while ((_DWORD)v9 != 1);
  return 0LL;
}

  result.value = *(Foundation::Date *)&v2;
  result.is_nil = v12;
  return result;
}

    if (!v11) {
      goto LABEL_16;
    }
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
    goto LABEL_250;
  }

  swift_unknownObjectRetain_n();
  unint64_t result = swift_retain();
  uint64_t v23 = v9;
LABEL_73:
  char v68 = *(unsigned __int16 *)(v23 + 16);
  if (!*(_WORD *)(v23 + 16))
  {
    __int128 v8 = v217;
LABEL_95:
    if (v11)
    {
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }

    goto LABEL_96;
  }

  uint64_t v69 = *(void *)(v23 + 24);
  char v26 = __OFSUB__(v11, v69);
  unint64_t v70 = v11 - v69;
  __int128 v8 = v217;
  if (v26)
  {
LABEL_276:
    __break(1u);
    goto LABEL_277;
  }

  if (__OFADD__(v70, 1LL))
  {
LABEL_277:
    __break(1u);
    goto LABEL_278;
  }

  if (v70 + 1 < 1)
  {
    char v68 = 0LL;
  }

  else
  {
    if ((_DWORD)v68 == 1)
    {
      __int128 v11 = v70;
      goto LABEL_95;
    }

    uint64_t v74 = (uint64_t *)(v23 + 48);
    char v75 = 1LL;
    while (1)
    {
      uint64_t v76 = *v74;
      v74 += 3;
      __int128 v11 = v70 - v76;
      if (__OFSUB__(v70, v76)) {
        goto LABEL_268;
      }
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_269;
      }
      if (v11 + 1 < 1) {
        break;
      }
      ++v75;
      unint64_t v70 = v11;
      if (v68 == v75) {
        goto LABEL_95;
      }
    }

    char v68 = v75;
    __int128 v11 = v70;
  }

    if (!v25) {
      goto LABEL_16;
    }
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
    goto LABEL_273;
  }

  swift_unknownObjectRetain_n();
  unint64_t result = swift_retain();
  __int128 v25 = v264;
  uint64_t v28 = v11;
LABEL_73:
  char v73 = *(unsigned __int16 *)(v28 + 16);
  if (!*(_WORD *)(v28 + 16))
  {
    uint64_t v36 = v259;
LABEL_95:
    if (v25)
    {
LABEL_297:
      __break(1u);
      goto LABEL_298;
    }

    goto LABEL_96;
  }

  uint64_t v74 = *(void *)(v28 + 24);
  uint64_t v31 = __OFSUB__(v25, v74);
  char v75 = v25 - v74;
  if (v31)
  {
LABEL_299:
    __break(1u);
    goto LABEL_300;
  }

  uint64_t v36 = v259;
  if (__OFADD__(v75, 1LL))
  {
LABEL_300:
    __break(1u);
    goto LABEL_301;
  }

  if (v75 + 1 < 1)
  {
    char v73 = 0LL;
  }

  else
  {
    if ((_DWORD)v73 == 1)
    {
      __int128 v25 = v75;
      goto LABEL_95;
    }

    char v79 = (uint64_t *)(v28 + 48);
    unint64_t v80 = 1LL;
    while (1)
    {
      uint64_t v81 = *v79;
      v79 += 3;
      __int128 v25 = v75 - v81;
      if (__OFSUB__(v75, v81)) {
        goto LABEL_291;
      }
      if (__OFADD__(v25, 1LL)) {
        goto LABEL_292;
      }
      if (v25 + 1 < 1) {
        break;
      }
      ++v80;
      char v75 = v25;
      if (v73 == v80) {
        goto LABEL_95;
      }
    }

    char v73 = v80;
    __int128 v25 = v75;
  }

    if (!v13) {
      goto LABEL_16;
    }
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
    goto LABEL_276;
  }

  swift_unknownObjectRetain_n();
  unint64_t result = swift_retain();
  char v26 = v11;
LABEL_73:
  char v73 = *(unsigned __int16 *)(v26 + 16);
  if (!*(_WORD *)(v26 + 16))
  {
    __int128 v7 = v272;
LABEL_95:
    if (v13)
    {
LABEL_300:
      __break(1u);
      goto LABEL_301;
    }

    goto LABEL_96;
  }

  uint64_t v74 = *(void *)(v26 + 24);
  __int128 v29 = __OFSUB__(v13, v74);
  char v75 = v13 - v74;
  __int128 v7 = v272;
  if (v29)
  {
LABEL_302:
    __break(1u);
    goto LABEL_303;
  }

  if (__OFADD__(v75, 1LL))
  {
LABEL_303:
    __break(1u);
    goto LABEL_304;
  }

  if (v75 + 1 < 1)
  {
    char v73 = 0LL;
  }

  else
  {
    if ((_DWORD)v73 == 1)
    {
      __int128 v13 = v75;
      goto LABEL_95;
    }

    char v79 = (uint64_t *)(v26 + 48);
    unint64_t v80 = 1LL;
    while (1)
    {
      uint64_t v81 = *v79;
      v79 += 3;
      __int128 v13 = v75 - v81;
      if (__OFSUB__(v75, v81)) {
        goto LABEL_294;
      }
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_295;
      }
      if (v13 + 1 < 1) {
        break;
      }
      ++v80;
      char v75 = v13;
      if (v73 == v80) {
        goto LABEL_95;
      }
    }

    char v73 = v80;
    __int128 v13 = v75;
  }

    if (!v14) {
      goto LABEL_16;
    }
LABEL_279:
    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }

  swift_unknownObjectRetain_n();
  unint64_t result = swift_retain();
  uint64_t v28 = v12;
LABEL_73:
  uint64_t v74 = *(unsigned __int16 *)(v28 + 16);
  if (!*(_WORD *)(v28 + 16))
  {
    __int128 v8 = v290;
LABEL_95:
    if (v14)
    {
LABEL_312:
      __break(1u);
      goto LABEL_313;
    }

    goto LABEL_96;
  }

  char v75 = *(void *)(v28 + 24);
  uint64_t v31 = __OFSUB__(v14, v75);
  uint64_t v76 = v14 - v75;
  __int128 v8 = v290;
  if (v31)
  {
LABEL_314:
    __break(1u);
    goto LABEL_315;
  }

  if (__OFADD__(v76, 1LL))
  {
LABEL_315:
    __break(1u);
    goto LABEL_316;
  }

  if (v76 + 1 < 1)
  {
    uint64_t v74 = 0LL;
  }

  else
  {
    if ((_DWORD)v74 == 1)
    {
      __int128 v14 = v76;
      goto LABEL_95;
    }

    unint64_t v80 = (uint64_t *)(v28 + 48);
    uint64_t v81 = 1LL;
    while (1)
    {
      uint64_t v82 = *v80;
      v80 += 3;
      __int128 v14 = v76 - v82;
      if (__OFSUB__(v76, v82)) {
        goto LABEL_306;
      }
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_307;
      }
      if (v14 + 1 < 1) {
        break;
      }
      ++v81;
      uint64_t v76 = v14;
      if (v74 == v81) {
        goto LABEL_95;
      }
    }

    uint64_t v74 = v81;
    __int128 v14 = v76;
  }

    if (!v9) {
      goto LABEL_16;
    }
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
    goto LABEL_211;
  }

  swift_unknownObjectRetain_n();
  swift_retain();
  char v22 = v7;
LABEL_73:
  uint64_t v67 = *(unsigned __int16 *)(v22 + 16);
  if (!*(_WORD *)(v22 + 16)) {
    goto LABEL_95;
  }
  char v68 = *(void *)(v22 + 24);
  __int128 v25 = __OFSUB__(v9, v68);
  uint64_t v69 = v9 - v68;
  if (v25)
  {
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }

  if (__OFADD__(v69, 1LL))
  {
LABEL_233:
    __break(1u);
    goto LABEL_234;
  }

  if (v69 + 1 < 1)
  {
    uint64_t v67 = 0LL;
  }

  else
  {
    if ((_DWORD)v67 == 1)
    {
      __int128 v9 = v69;
LABEL_95:
      if (v9)
      {
LABEL_236:
        __break(1u);
        goto LABEL_237;
      }

      goto LABEL_96;
    }

    char v73 = (uint64_t *)(v22 + 48);
    uint64_t v74 = 1LL;
    while (1)
    {
      char v75 = *v73;
      v73 += 3;
      __int128 v9 = v69 - v75;
      if (__OFSUB__(v69, v75)) {
        goto LABEL_226;
      }
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_227;
      }
      if (v9 + 1 < 1) {
        break;
      }
      ++v74;
      uint64_t v69 = v9;
      if (v67 == v74) {
        goto LABEL_95;
      }
    }

    uint64_t v67 = v74;
    __int128 v9 = v69;
  }

      if (!v23) {
        goto LABEL_16;
      }
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }

    swift_unknownObjectRetain_n();
    unint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v165);
    uint64_t v23 = v19;
    char v26 = v16;
LABEL_33:
    __int128 v134 = (uint64_t *)v19;
    uint64_t v35 = *(unsigned __int16 *)(v26 + 16);
    if (*(_WORD *)(v26 + 16))
    {
      uint64_t v36 = *(void *)(v26 + 24);
      __int128 v29 = __OFSUB__(v23, v36);
      uint64_t v37 = v23 - v36;
      a2 = v110;
      uint64_t v15 = v111;
      if (v29)
      {
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }

      if (__OFADD__(v37, 1LL))
      {
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }

      uint64_t v34 = v26;
      if (v37 + 1 < 1)
      {
        uint64_t v35 = 0LL;
      }

      else
      {
        if ((_DWORD)v35 == 1)
        {
          uint64_t v23 = v37;
          goto LABEL_46;
        }

        Swift::String v38 = (uint64_t *)(v26 + 48);
        Swift::String v39 = 1LL;
        while (1)
        {
          Swift::String v40 = *v38;
          v38 += 3;
          uint64_t v23 = v37 - v40;
          if (__OFSUB__(v37, v40)) {
            goto LABEL_136;
          }
          if (__OFADD__(v23, 1LL)) {
            goto LABEL_137;
          }
          if (v23 + 1 < 1) {
            break;
          }
          ++v39;
          uint64_t v37 = v23;
          if (v35 == v39) {
            goto LABEL_46;
          }
        }

        uint64_t v35 = v39;
        uint64_t v23 = v37;
      }

      if (!v19) {
        goto LABEL_16;
      }
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }

    swift_unknownObjectRetain_n();
    unint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v163);
    __int128 v19 = v15;
    char v22 = v12;
LABEL_33:
    uint64_t v132 = (uint64_t *)v15;
    uint64_t v33 = *(unsigned __int16 *)(v22 + 16);
    if (*(_WORD *)(v22 + 16))
    {
      uint64_t v34 = *(void *)(v22 + 24);
      __int128 v25 = __OFSUB__(v19, v34);
      uint64_t v35 = v19 - v34;
      __int128 v11 = v108;
      __int128 v10 = v127;
      if (v25)
      {
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }

      if (__OFADD__(v35, 1LL))
      {
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }

      uint64_t v31 = v22;
      if (v35 + 1 <= 0)
      {
        uint64_t v33 = 0LL;
      }

      else
      {
        if ((_DWORD)v33 == 1)
        {
          __int128 v19 = v35;
          goto LABEL_46;
        }

        uint64_t v36 = (uint64_t *)(v22 + 48);
        uint64_t v37 = 1LL;
        while (1)
        {
          Swift::String v38 = *v36;
          v36 += 3;
          __int128 v19 = v35 - v38;
          if (__OFSUB__(v35, v38)) {
            goto LABEL_136;
          }
          if (__OFADD__(v19, 1LL)) {
            goto LABEL_137;
          }
          if (v19 + 1 < 1) {
            break;
          }
          ++v37;
          uint64_t v35 = v19;
          if (v33 == v37) {
            goto LABEL_46;
          }
        }

        uint64_t v33 = v37;
        __int128 v19 = v35;
      }

  uint64_t v150 = v37 >> 14;
  if (v37 >> 14 == v36 >> 14)
  {
    __break(1u);
    goto LABEL_94;
  }

  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() == 91)
  {
    if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1LL))
    {
      Substring.UTF8View.index(_:offsetBy:)();
      char v42 = Substring.UTF8View.subscript.getter();
      swift_bridgeObjectRelease();
      if (v42 == 93)
      {
        swift_bridgeObjectRetain();
        uint64_t v43 = Substring.UTF8View.index(after:)();
        if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1LL))
        {
          if ((unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14 >= v43 >> 14)
          {
            uint64_t v44 = Substring.subscript.getter();
            id v46 = v45;
            uint64_t v48 = v47;
            uint64_t v50 = v49;
            uint64_t v51 = specialized Collection<>.firstIndex(of:)(0x25u, v36, v37, v39, v41);
            if ((v52 & 1) != 0)
            {
              uint64_t v98 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v44,  v46,  v48,  v50,  2u,  0);
              if (v98 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                unint64_t v99 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                char v100 = (unsigned __int16 *)objc_msgSend(v99, sel__fastCharacterContents);
                uint64_t v101 = v99;
                if (v100)
                {
                  StringProtocol._ephemeralString.getter();
                  unint64_t v102 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  uint64_t v103 = objc_msgSend(v102, sel_length);
                  swift_unknownObjectRelease();
                  uint64_t v104 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v100,  (uint64_t)v103,  2u,  0);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                }

                else
                {
                  swift_bridgeObjectRetain();
                  uint64_t v104 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v44,  v46,  v48,  v50,  2u,  0);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                }

                uint64_t v95 = 0LL;
                if (!v104) {
                  return v95;
                }
                goto LABEL_12;
              }

              __int128 v121 = v98;
              goto LABEL_62;
            }

            uint64_t v53 = v51;
            if (v150 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 50
              || v150 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 53)
            {
              goto LABEL_52;
            }

            if (v53 >> 14 >= v44 >> 14)
            {
              uint64_t v149 = v46;
              uint64_t v54 = Substring.subscript.getter();
              uint64_t v56 = v55;
              uint64_t v58 = v57;
              char v60 = v59;
              uint64_t v61 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v54,  v55,  v57,  v59,  2u,  0);
              if (v61 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                uint64_t v62 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                unint64_t v63 = (unsigned __int16 *)objc_msgSend(v62, sel__fastCharacterContents);
                uint64_t v64 = v62;
                int64_t v65 = v63;
                int v66 = v64;
                if (v65)
                {
                  StringProtocol._ephemeralString.getter();
                  uint64_t v67 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  char v68 = objc_msgSend(v67, sel_length);
                  swift_unknownObjectRelease();
                  uint64_t v69 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v65,  (uint64_t)v68,  2u,  0);
                  swift_bridgeObjectRelease();
                }

                else
                {
                  swift_bridgeObjectRetain();
                  uint64_t v69 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v54,  v56,  v58,  v60,  2u,  0);
                  swift_bridgeObjectRelease_n();
                }

                if (v69)
                {
LABEL_87:
                  swift_bridgeObjectRetain();
                  if (v149 >> 14 >= (unint64_t)Substring.index(after:)() >> 14)
                  {
                    uint64_t v135 = Substring.subscript.getter();
                    unint64_t v137 = v136;
                    uint64_t v139 = v138;
                    uint64_t v141 = v140;
                    uint64_t v142 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v135,  v136,  v138,  v140,  8u,  1);
                    if (v142 == 2)
                    {
                      lazy protocol witness table accessor for type Substring and conformance Substring();
                      StringProtocol._ephemeralString.getter();
                      uint64_t v143 = (void *)String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      __int128 v144 = (unsigned __int16 *)objc_msgSend(v143, sel__fastCharacterContents);
                      unint64_t v145 = v143;
                      if (v144)
                      {
                        StringProtocol._ephemeralString.getter();
                        uint64_t v146 = (void *)String._bridgeToObjectiveCImpl()();
                        swift_bridgeObjectRelease();
                        uint64_t v147 = objc_msgSend(v146, sel_length);
                        swift_unknownObjectRelease();
                        __int128 v121 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v144,  (uint64_t)v147,  8u,  1);
                        swift_bridgeObjectRelease_n();
LABEL_62:
                        swift_bridgeObjectRelease_n();
                        goto LABEL_70;
                      }

                      swift_bridgeObjectRetain();
                      uint64_t v131 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v135,  v137,  v139,  v141,  8u,  1);
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease_n();
                    }

                    else
                    {
                      uint64_t v148 = v142;
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease();
                      uint64_t v131 = v148 & 1;
                    }

    v36[0] = MEMORY[0x18961AFF0];
    *(void *)&uint64_t v33 = 0xD00000000000001ALL;
    *((void *)&v33 + 1) = 0x80000001839CEC80LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0;
    char v26 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( &v33,  1,  0LL,  1,  0LL,  MEMORY[0x18961AFE8],  v36);
    if (!v3)
    {
      __int128 v25 = v26;
      uint64_t v28 = v27;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __int128 v25 = 0LL;
LABEL_17:
    uint64_t v28 = 0xC000000000000000LL;
LABEL_19:
    __int128 v5 = v32;
    *a2 = v25;
    a2[1] = v28;
    __int128 v29 = v37;
    char *v37 = v25;
    v29[1] = v28;
    outlined copy of Data._Representation(v25, v28);
    return outlined copy of Data?(v5, v4);
  }

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  __int128 v17 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  __int128 v18 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  __int128 v19 = objc_msgSend(v17, sel_rangeOfString_, v18);
  id v21 = v20;
  swift_unknownObjectRelease();
  unint64_t result = swift_unknownObjectRelease();
  if (v19 == (id)0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_15;
  }
  if (!__OFADD__(v19, v21))
  {
    StringProtocol._toUTF16Indices(_:)();
LABEL_14:
    swift_bridgeObjectRelease();
    __int128 v25 = 0LL;
    goto LABEL_17;
  }

  __break(1u);
  return result;
}

  _sSo4statVSgWOi0_((uint64_t)&v25);
LABEL_16:
  outlined init with take of stat?((uint64_t)&v25, (uint64_t)v24);
LABEL_24:
  outlined init with take of stat?((uint64_t)v24, (uint64_t)&v25);
  outlined init with take of stat?((uint64_t)&v25, (uint64_t)retstr);
}

        if ((unsigned __int16)(v16 - 58) > 0xFFF5u
          || (unsigned __int16)((v16 & 0xFFDF) - 91) > 0xFFE5u
          || v16 - 36 <= 0x3B && ((1LL << (v16 - 36)) & 0x800000000400E01LL) != 0)
        {
          _ParseInfo.retreat()();
          __int128 v17 = parseUnquotedPlistString(_:)(a1);
          if (!v18) {
            goto LABEL_5;
          }
LABEL_20:
          uint64_t v23 = (ValueMetadata *)MEMORY[0x189617FA8];
LABEL_26:
          *(void *)(a4 + 24) = v23;
          *(void *)a4 = v17;
          *(void *)(a4 + 8) = v18;
          return;
        }

        _ParseInfo.retreat()();
        if ((a2 & 1) == 0) {
          goto LABEL_5;
        }
        _StringGuts.grow(_:)(38LL);
        swift_bridgeObjectRelease();
        id v27 = 0xD000000000000018LL;
        uint64_t v28 = 0x80000001839D07D0LL;
        lazy protocol witness table accessor for type UInt16 and conformance UInt16();
        v25._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._uint64_t countAndFlagsBits = 0x6E696C2074612027LL;
        v26._object = (void *)0xEA00000000002065LL;
        String.append(_:)(v26);
        __int128 v8 = *(void *)(a1 + 16);
        __int128 v6 = v14;
        __int128 v7 = v15;
        break;
    }

    goto LABEL_3;
  }

  if ((a2 & 1) == 0) {
    goto LABEL_5;
  }
  lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
  __int128 v10 = swift_allocError();
  void *v19 = 0xD000000000000022LL;
  v19[1] = 0x80000001839D0740LL;
LABEL_4:

  *(void *)(a1 + 24) = v10;
LABEL_5:
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
}

  __int128 v16 = v10 & 0xFC00FC00;
  if ((v10 & 0xFC00FC00) == 0xDC00D800) {
    __int128 v17 = 32;
  }
  else {
    __int128 v17 = 16;
  }
  id v41 = v13 - v17;
  __int128 v18 = v16 == -603924480;
  if (v16 == -603924480) {
    __int128 v19 = 32;
  }
  else {
    __int128 v19 = 16;
  }
  Swift::String v40 = (unint64_t)v10 >> v19;
  if (v18)
  {
    __int128 v20 = 0;
    goto LABEL_27;
  }

  swift_bridgeObjectRelease();
  return 0LL;
}

  if ((v11 & 1) != 0)
  {
LABEL_16:
    __int128 v24 = (void *)(*(void *)(v22 + 56) + 16 * result);
    swift_unknownObjectRelease();
    *__int128 v24 = v3;
    v24[1] = v47;
LABEL_56:
    *(void *)(v6 + 48) = v22;
    swift_bridgeObjectRelease();
    unint64_t result = v47;
    goto LABEL_57;
  }

  uint64_t v47 = 12;
  id v46 = v10;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v40,  v48);
  if (v5) {
    goto LABEL_51;
  }
  __int128 v5 = 0LL;
  __int128 v10 = v48[0];
  if ((v41 & 1) != 0)
  {
LABEL_6:
    if ((v39 & 1) != 0) {
      goto LABEL_7;
    }
LABEL_19:
    uint64_t v47 = 2;
    id v46 = v10;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v36,  v48);
    if (v5) {
      goto LABEL_51;
    }
    __int128 v5 = 0LL;
    __int128 v10 = v48[0];
    if ((v37 & 1) != 0) {
      goto LABEL_8;
    }
LABEL_21:
    uint64_t v47 = 11;
    id v46 = v10;
    __int128 v12 = v34;
    goto LABEL_22;
  }

    if (v8 < v16) {
      break;
    }
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    swift_once();
  }

  __int128 v17 = *(void *)a1;
  __int128 v18 = static Metadata.Kind.tuple.getter();
  if (v17 >= 0x800)
  {
    if (v18 - 2048 >= 0xFFFFFFFFFFFFF801LL) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }

  if (v18 >= 0x800)
  {
    if (v17) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }

  if (v17 == v18)
  {
LABEL_21:
    MEMORY[0x186E1AB6C](a1);
    __int128 v19 = v8;
    TupleMetadata.Elements.subscript.getter();
    __int128 v20 = TupleMetadata.Elements.Element.metadata.getter();
    goto LABEL_26;
  }

  if (!v5)
  {
    __int128 v8 = a5 - a4;
    if (!__OFSUB__(a5, a4))
    {
LABEL_17:
      specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(v6, v5, v8, 1, result, (uint64_t)a2);
      return (unsigned __int16 *)v6;
    }

    goto LABEL_20;
  }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
    char v22 = static _DictionaryStorage.copy(original:)();
    id v21 = v22;
    if (*(void *)(a1 + 16))
    {
      unint64_t result = (void *)(v22 + 64);
      uint64_t v23 = a1 + 64;
      __int128 v24 = (unint64_t)((1LL << *(_BYTE *)(v21 + 32)) + 63) >> 6;
      __int128 v25 = 0LL;
      *(void *)(v21 + 16) = *(void *)(a1 + 16);
      char v26 = 1LL << *(_BYTE *)(a1 + 32);
      id v27 = -1LL;
      if (v26 < 64) {
        id v27 = ~(-1LL << v26);
      }
      uint64_t v28 = v27 & *(void *)(a1 + 64);
      __int128 v29 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          __int128 v30 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          uint64_t v31 = v30 | (v25 << 6);
        }

        else
        {
          uint64_t v34 = v25 + 1;
          if (__OFADD__(v25, 1LL)) {
            goto LABEL_79;
          }
          if (v34 >= v29) {
            break;
          }
          uint64_t v35 = *(void *)(v23 + 8 * v34);
          ++v25;
          if (!v35)
          {
            __int128 v25 = v34 + 1;
            if (v34 + 1 >= v29) {
              break;
            }
            uint64_t v35 = *(void *)(v23 + 8 * v25);
            if (!v35)
            {
              __int128 v25 = v34 + 2;
              if (v34 + 2 >= v29) {
                break;
              }
              uint64_t v35 = *(void *)(v23 + 8 * v25);
              if (!v35)
              {
                __int128 v25 = v34 + 3;
                if (v34 + 3 >= v29) {
                  break;
                }
                uint64_t v35 = *(void *)(v23 + 8 * v25);
                if (!v35)
                {
                  __int128 v25 = v34 + 4;
                  if (v34 + 4 >= v29) {
                    break;
                  }
                  uint64_t v35 = *(void *)(v23 + 8 * v25);
                  if (!v35)
                  {
                    uint64_t v36 = v34 + 5;
                    if (v36 >= v29) {
                      break;
                    }
                    uint64_t v35 = *(void *)(v23 + 8 * v36);
                    if (!v35)
                    {
                      while (1)
                      {
                        __int128 v25 = v36 + 1;
                        if (__OFADD__(v36, 1LL)) {
                          goto LABEL_80;
                        }
                        if (v25 >= v29) {
                          goto LABEL_73;
                        }
                        uint64_t v35 = *(void *)(v23 + 8 * v25);
                        ++v36;
                        if (v35) {
                          goto LABEL_42;
                        }
                      }
                    }

                    __int128 v25 = v36;
                  }
                }
              }
            }
          }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
    char v22 = static _DictionaryStorage.copy(original:)();
    id v21 = v22;
    if (*(void *)(a1 + 16))
    {
      unint64_t result = (void *)(v22 + 64);
      uint64_t v23 = a1 + 64;
      __int128 v24 = (unint64_t)((1LL << *(_BYTE *)(v21 + 32)) + 63) >> 6;
      __int128 v25 = 0LL;
      *(void *)(v21 + 16) = *(void *)(a1 + 16);
      char v26 = 1LL << *(_BYTE *)(a1 + 32);
      id v27 = -1LL;
      if (v26 < 64) {
        id v27 = ~(-1LL << v26);
      }
      uint64_t v28 = v27 & *(void *)(a1 + 64);
      __int128 v29 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          __int128 v30 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          uint64_t v31 = v30 | (v25 << 6);
        }

        else
        {
          uint64_t v33 = v25 + 1;
          if (__OFADD__(v25, 1LL)) {
            goto LABEL_79;
          }
          if (v33 >= v29) {
            break;
          }
          uint64_t v34 = *(void *)(v23 + 8 * v33);
          ++v25;
          if (!v34)
          {
            __int128 v25 = v33 + 1;
            if (v33 + 1 >= v29) {
              break;
            }
            uint64_t v34 = *(void *)(v23 + 8 * v25);
            if (!v34)
            {
              __int128 v25 = v33 + 2;
              if (v33 + 2 >= v29) {
                break;
              }
              uint64_t v34 = *(void *)(v23 + 8 * v25);
              if (!v34)
              {
                __int128 v25 = v33 + 3;
                if (v33 + 3 >= v29) {
                  break;
                }
                uint64_t v34 = *(void *)(v23 + 8 * v25);
                if (!v34)
                {
                  __int128 v25 = v33 + 4;
                  if (v33 + 4 >= v29) {
                    break;
                  }
                  uint64_t v34 = *(void *)(v23 + 8 * v25);
                  if (!v34)
                  {
                    uint64_t v35 = v33 + 5;
                    if (v35 >= v29) {
                      break;
                    }
                    uint64_t v34 = *(void *)(v23 + 8 * v35);
                    if (!v34)
                    {
                      while (1)
                      {
                        __int128 v25 = v35 + 1;
                        if (__OFADD__(v35, 1LL)) {
                          goto LABEL_80;
                        }
                        if (v25 >= v29) {
                          goto LABEL_73;
                        }
                        uint64_t v34 = *(void *)(v23 + 8 * v25);
                        ++v35;
                        if (v34) {
                          goto LABEL_42;
                        }
                      }
                    }

                    __int128 v25 = v35;
                  }
                }
              }
            }
          }

    __break(1u);
    JUMPOUT(0x183409628LL);
  }

  __int128 v19 = v7[20];
  id v21 = v7[17];
  uint64_t v31 = (void *)v7[16];
  __int128 v20 = (unint64_t)v31;
  uint64_t v32 = v21;
  uint64_t v34 = v19 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain_n();
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy((unint64_t)v31);
  char v22 = static JSONDecoderImpl.KeyedContainer.stringify(objectRegion:using:codingPathNode:keyDecodingStrategy:)( v10,  v9,  (uint64_t)v7,  v19,  (unint64_t *)&v31);
  if (v4)
  {
    swift_release();
    swift_release_n();
    return outlined consume of JSONEncoder.KeyEncodingStrategy(v20);
  }

  else
  {
    uint64_t v28 = v22;
    outlined consume of JSONEncoder.KeyEncodingStrategy(v20);
    swift_release();
    uint64_t v31 = v7;
    uint64_t v32 = v19;
    uint64_t v33 = v28;
    __int128 v30 = type metadata accessor for JSONDecoderImpl.KeyedContainer(0LL, a2, a3, v29);
    MEMORY[0x186E20D4C](&protocol conformance descriptor for JSONDecoderImpl.KeyedContainer<A>, v30);
    return KeyedDecodingContainer.init<A>(_:)();
  }

    uint64_t v35 = v18;
    uint64_t v36 = v17;
    uint64_t v37 = v3;
    *(void *)(v22 + 32) = v26;
    id v27 = *(void **)(v19 + 40);
    Swift::String v39 = *(void *)(v19 + 48);
    uint64_t v28 = *(void *)(v19 + 64);
    __int128 v29 = *(void *)(v19 + 72);
    __int128 v30 = *(void *)(v19 + 80);
    uint64_t v43 = *(void *)(v19 + 88);
    Swift::String v40 = *(void *)(v19 + 104);
    id v41 = *(void *)(v19 + 96);
    uint64_t v51 = *(void *)(v19 + 112);
    uint64_t v31 = *(void *)(v19 + 128);
    char v42 = *(void *)(v19 + 120);
    uint64_t v32 = *(void *)(v19 + 144);
    uint64_t v44 = *(void *)(v19 + 136);
    uint64_t v45 = *(_BYTE *)(v19 + 152);
    Swift::String v38 = *(_BYTE *)(v19 + 56);
    type metadata accessor for JSONDecoderImpl();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 160) = v22 | 0x4000000000000000LL;
    *(void *)(v1 + 24) = v46;
    *(void *)(v1 + 32) = v47;
    *(void *)(v1 + 40) = v27;
    *(void *)(v1 + 48) = v39;
    *(_BYTE *)(v1 + 56) = v38;
    *(void *)(v1 + 64) = v28;
    *(void *)(v1 + 72) = v29;
    *(void *)(v1 + 80) = v30;
    *(void *)(v1 + 88) = v43;
    *(void *)(v1 + 96) = v41;
    *(void *)(v1 + 104) = v40;
    *(void *)(v1 + 112) = v51;
    *(void *)(v1 + 120) = v42;
    *(void *)(v1 + 128) = v31;
    *(void *)(v1 + 136) = v44;
    *(void *)(v1 + 144) = v32;
    *(_BYTE *)(v1 + 152) = v45;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of JSONEncoder.DateEncodingStrategy(v27, v39, v38);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v28);
    outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v30, v43);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v31);
    swift_bridgeObjectRetain();
    __int128 v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
    id v21 = v25[2];
    char v26 = v25[3];
    __int128 v24 = v21 + 1;
    if (v21 < v26 >> 1)
    {
LABEL_16:
      v25[2] = v24;
      uint64_t v33 = &v25[3 * v21];
      v33[4] = v36;
      v33[5] = v35;
      *((_BYTE *)v33 + 48) = v37;
      *(void *)(v1 + 16) = v25;
      return v1;
    }

    if ((unint64_t)v5 >= v10)
    {
      __break(1u);
LABEL_252:
      __break(1u);
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
      goto LABEL_256;
    }

    __int128 v14 = *v4;
    uint64_t v15 = static Metadata.Kind.tuple.getter();
    if (v14 > 0x7FF)
    {
      if (v15 - 2048 >= 0xFFFFFFFFFFFFF801LL) {
        goto LABEL_23;
      }
      goto LABEL_21;
    }

    if (v15 >= 0x800)
    {
      if (v14) {
        goto LABEL_23;
      }
LABEL_21:
      MEMORY[0x186E1AB6C](v4);
      __int128 v16 = v5;
      TupleMetadata.Elements.subscript.getter();
      __int128 v17 = TupleMetadata.Elements.Element.metadata.getter();
LABEL_25:
      __int128 v18 = v17;
      goto LABEL_26;
    }

    if (v14 == v15) {
      goto LABEL_21;
    }
LABEL_23:
    TypeMetadata.descriptor.getter();
    swift_getKeyPath();
    dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_getAtKeyPath();
    swift_release();
    __int128 v16 = v5;
    FieldDescriptor.subscript.getter();
    swift_getKeyPath();
    dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_getAtKeyPath();
    swift_release();
    __int128 v18 = MangledTypeReference.standardSubstitution.getter();
    if (!v18)
    {
      __int128 v17 = TypeMetadata._resolve(_:)();
      goto LABEL_25;
    }

    if (v5 < v11 >> 16) {
      goto LABEL_35;
    }
    __int128 v11 = String.UTF8View._foreignIndex(before:)();
LABEL_17:
    unint64_t result = v11;
    if ((v11 & 0xC) == v12) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a3, a4);
    }
    __int128 v13 = result >> 16;
    if (result >> 16 >= v5) {
      goto LABEL_34;
    }
    if ((a4 & 0x1000000000000000LL) != 0)
    {
      uint64_t v15 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((a4 & 0x2000000000000000LL) != 0)
    {
      v17[0] = a3;
      v17[1] = v18;
      uint64_t v15 = *((_BYTE *)v17 + v13);
    }

    else
    {
      __int128 v14 = v16;
      if ((a3 & 0x1000000000000000LL) == 0) {
        __int128 v14 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v15 = *(_BYTE *)(v14 + v13);
    }

    LOBYTE(v17[0]) = v15;
    unint64_t result = v8(v17);
    if (v4 || (result & 1) != 0) {
      return v11;
    }
    if (v11 < 0x4000) {
      return 0LL;
    }
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

  *unint64_t v3 = v8;
  v3[1] = v7;
  v3[2] = v9;
}

  __int128 v19 = 0LL;
  id v21 = (void *)0xE000000000000000LL;
  if ((a4 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  uint64_t v23 = specialized _copyCollectionToContiguousArray<A>(_:)(v19, (unint64_t)v21);
  swift_bridgeObjectRelease();
  __int128 v24 = *(void *)(v23 + 16);
  if (v24 < v18)
  {
    __break(1u);
  }

  else
  {
    uint64_t v32 = (2 * v24) | 1;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>,  (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>,  MEMORY[0x189618FA8]);
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [UInt8] and conformance [A],  &demangling cache variable for type metadata for [UInt8],  MEMORY[0x189618488]);
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    __int128 v25 = *(void *)(v23 + 16);
    if (v25 >= v18)
    {
      if ((uint64_t)(v32 >> 1) < (uint64_t)v18)
      {
        __break(1u);
        JUMPOUT(0x18348BFCCLL);
      }

      if (v25 != v32 >> 1) {
        specialized Array.replaceSubrange<A>(_:with:)(v18, v25, v23, v23 + 32, v18, v32);
      }
      swift_unknownObjectRelease();
      __int128 v19 = static String._fromUTF8Repairing(_:)();
      id v27 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v21 = v27;
LABEL_21:
      if ((specialized BidirectionalCollection.last.getter(v14, v16) & 0x1FF) == 0x2F
        || (specialized Collection.first.getter(v19, (unint64_t)v21) & 0x1FF) == 0x2F)
      {
        uint64_t v28 = specialized BidirectionalCollection.last.getter(v14, v16);
        swift_bridgeObjectRelease();
        if ((v28 & 0x1FF) == 0x2F && (specialized Collection.first.getter(v19, (unint64_t)v21) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 47LL;
        v29._object = (void *)0xE100000000000000LL;
        String.append(_:)(v29);
      }

      v30._uint64_t countAndFlagsBits = v19;
      v30._object = v21;
      String.append(_:)(v30);
      specialized BidirectionalCollection.last.getter(v14, v16);
      __asm { BR              X10 }
    }
  }

  __break(1u);
  JUMPOUT(0x18348BF30LL);
}

  outlined release of Locale((uint64_t)v84);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  unint64_t result = swift_unknownObjectRelease();
  *char v60 = v62;
  return result;
}

    __int128 v6 = (v12 - 1) & v12;
  }

  swift_release();
  outlined consume of Data._Representation(v2, v1);
  return swift_bridgeObjectRelease();
}

      if (!v21) {
        goto LABEL_16;
      }
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }

    swift_unknownObjectRetain_n();
    unint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v166);
    id v21 = v18;
    __int128 v24 = v15;
LABEL_33:
    __int128 v134 = (uint64_t *)v18;
    uint64_t v35 = *(unsigned __int16 *)(v24 + 16);
    if (*(_WORD *)(v24 + 16))
    {
      uint64_t v36 = *(void *)(v24 + 24);
      id v27 = __OFSUB__(v21, v36);
      uint64_t v37 = v21 - v36;
      __int128 v14 = v110;
      __int128 v13 = v129;
      if (v27)
      {
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }

      if (__OFADD__(v37, 1LL))
      {
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }

      uint64_t v33 = v24;
      if (v37 + 1 < 1)
      {
        uint64_t v35 = 0LL;
      }

      else
      {
        if ((_DWORD)v35 == 1)
        {
          id v21 = v37;
          goto LABEL_46;
        }

        Swift::String v38 = (uint64_t *)(v24 + 48);
        Swift::String v39 = 1LL;
        while (1)
        {
          Swift::String v40 = *v38;
          v38 += 3;
          id v21 = v37 - v40;
          if (__OFSUB__(v37, v40)) {
            goto LABEL_136;
          }
          if (__OFADD__(v21, 1LL)) {
            goto LABEL_137;
          }
          if (v21 + 1 < 1) {
            break;
          }
          ++v39;
          uint64_t v37 = v21;
          if (v35 == v39) {
            goto LABEL_46;
          }
        }

        uint64_t v35 = v39;
        id v21 = v37;
      }

      uint64_t v37 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
      __int128 v9 = ((-15LL << v37) - 1) & v9 | (v40 << v37);
      Swift::String v38 = *(void *)(v36 + 24 + 24 * v40);
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v36 = v38;
      if (!*(_BYTE *)(v38 + 18)) {
        goto LABEL_39;
      }
    }
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v244);
  unint64_t result = swift_unknownObjectRetain();
  uint64_t v35 = v31;
  Swift::String v38 = v29;
LABEL_39:
  uint64_t v50 = *(unsigned __int16 *)(v38 + 16);
  __int128 v8 = v38;
  if (!*(_WORD *)(v38 + 16))
  {
    __int128 v7 = v189;
    goto LABEL_46;
  }

  uint64_t v51 = *(void *)(v38 + 24);
  uint64_t v52 = v35 - v51;
  __int128 v7 = v189;
  if (__OFSUB__(v35, v51))
  {
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }

  if (__OFADD__(v52, 1LL)) {
    goto LABEL_243;
  }
  if (v52 + 1 <= 0) {
    goto LABEL_48;
  }
  if ((_DWORD)v50 == 1)
  {
    v35 -= v51;
LABEL_46:
    if (!v35)
    {
LABEL_63:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v191 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v50 << 8);
      __int128 v9 = v180;
      uint64_t v34 = v178;
      goto LABEL_37;
    }

    __break(1u);
LABEL_48:
    uint64_t v50 = 0LL;
    goto LABEL_63;
  }

  uint64_t v53 = *(void *)(v38 + 48);
  uint64_t v44 = __OFSUB__(v52, v53);
  uint64_t v54 = v52 - v53;
  if (v44)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }

  if (!__OFADD__(v54, 1LL))
  {
    if (v54 + 1 < 1)
    {
      uint64_t v50 = 1LL;
      uint64_t v35 = v52;
      goto LABEL_63;
    }

    if ((_DWORD)v50 != 2)
    {
      uint64_t v55 = (void *)(v38 + 72);
      uint64_t v56 = 2LL;
      while (1)
      {
        if (v50 == v56) {
          goto LABEL_239;
        }
        uint64_t v35 = v54 - *v55;
        if (__OFSUB__(v54, *v55)) {
          goto LABEL_240;
        }
        if (__OFADD__(v35, 1LL)) {
          goto LABEL_241;
        }
        if (v35 + 1 < 1) {
          break;
        }
        ++v56;
        v55 += 3;
        uint64_t v54 = v35;
        if (v50 == v56) {
          goto LABEL_46;
        }
      }

      uint64_t v50 = v56;
      uint64_t v35 = v54;
      goto LABEL_63;
    }

    uint64_t v35 = v54;
    goto LABEL_46;
  }

      uint64_t v36 = (4 * *(_BYTE *)(v35 + 18) + 8) & 0x3C;
      __int128 v9 = ((-15LL << v36) - 1) & v9 | (v39 << v36);
      uint64_t v37 = *(void *)(v35 + 24 + 24 * v39);
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v35 = v37;
      if (!*(_BYTE *)(v37 + 18)) {
        goto LABEL_39;
      }
    }
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v246);
  unint64_t result = swift_unknownObjectRetain();
  uint64_t v34 = v31;
  uint64_t v37 = v29;
LABEL_39:
  uint64_t v49 = *(unsigned __int16 *)(v37 + 16);
  __int128 v8 = v37;
  if (!*(_WORD *)(v37 + 16))
  {
    __int128 v7 = v191;
    goto LABEL_46;
  }

  uint64_t v50 = *(void *)(v37 + 24);
  uint64_t v51 = v34 - v50;
  __int128 v7 = v191;
  if (__OFSUB__(v34, v50))
  {
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }

  if (__OFADD__(v51, 1LL)) {
    goto LABEL_243;
  }
  if (v51 + 1 <= 0) {
    goto LABEL_48;
  }
  if ((_DWORD)v49 == 1)
  {
    v34 -= v50;
LABEL_46:
    if (!v34)
    {
LABEL_63:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v193 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v49 << 8);
      __int128 v9 = v181;
      uint64_t v33 = v201;
      goto LABEL_37;
    }

    __break(1u);
LABEL_48:
    uint64_t v49 = 0LL;
    goto LABEL_63;
  }

  uint64_t v52 = *(void *)(v37 + 48);
  uint64_t v43 = __OFSUB__(v51, v52);
  uint64_t v53 = v51 - v52;
  if (v43)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }

  if (!__OFADD__(v53, 1LL))
  {
    if (v53 + 1 < 1)
    {
      uint64_t v49 = 1LL;
      uint64_t v34 = v51;
      goto LABEL_63;
    }

    if ((_DWORD)v49 != 2)
    {
      uint64_t v54 = (void *)(v37 + 72);
      uint64_t v55 = 2LL;
      while (1)
      {
        if (v49 == v55) {
          goto LABEL_239;
        }
        uint64_t v34 = v53 - *v54;
        if (__OFSUB__(v53, *v54)) {
          goto LABEL_240;
        }
        if (__OFADD__(v34, 1LL)) {
          goto LABEL_241;
        }
        if (v34 + 1 < 1) {
          break;
        }
        ++v55;
        v54 += 3;
        uint64_t v53 = v34;
        if (v49 == v55) {
          goto LABEL_46;
        }
      }

      uint64_t v49 = v55;
      uint64_t v34 = v53;
      goto LABEL_63;
    }

    uint64_t v34 = v53;
    goto LABEL_46;
  }

      uint64_t v36 = (4 * *(_BYTE *)(a1 + 18) + 8) & 0x3C;
      __int128 v9 = ((-15LL << v36) - 1) & v9 | (v39 << v36);
      uint64_t v37 = *(void *)(a1 + 24 + 24 * v39);
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRelease();
      a1 = v37;
      if (!*(_BYTE *)(v37 + 18)) {
        goto LABEL_39;
      }
    }
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v241);
  unint64_t result = swift_unknownObjectRetain();
  uint64_t v35 = v32;
  uint64_t v37 = v29;
LABEL_39:
  uint64_t v49 = *(unsigned __int16 *)(v37 + 16);
  __int128 v8 = v37;
  if (!*(_WORD *)(v37 + 16))
  {
    __int128 v7 = v186;
    goto LABEL_46;
  }

  uint64_t v50 = *(void *)(v37 + 24);
  uint64_t v51 = v35 - v50;
  __int128 v7 = v186;
  if (__OFSUB__(v35, v50))
  {
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }

  if (__OFADD__(v51, 1LL)) {
    goto LABEL_243;
  }
  if (v51 + 1 <= 0) {
    goto LABEL_48;
  }
  if ((_DWORD)v49 == 1)
  {
    v35 -= v50;
LABEL_46:
    if (!v35)
    {
LABEL_63:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v188 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v49 << 8);
      __int128 v9 = v176;
      uint64_t v34 = v196;
      goto LABEL_37;
    }

    __break(1u);
LABEL_48:
    uint64_t v49 = 0LL;
    goto LABEL_63;
  }

  uint64_t v52 = *(void *)(v37 + 48);
  uint64_t v43 = __OFSUB__(v51, v52);
  uint64_t v53 = v51 - v52;
  if (v43)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }

  if (!__OFADD__(v53, 1LL))
  {
    if (v53 + 1 < 1)
    {
      uint64_t v49 = 1LL;
      uint64_t v35 = v51;
      goto LABEL_63;
    }

    if ((_DWORD)v49 != 2)
    {
      uint64_t v54 = (void *)(v37 + 72);
      uint64_t v55 = 2LL;
      while (1)
      {
        if (v49 == v55) {
          goto LABEL_239;
        }
        uint64_t v35 = v53 - *v54;
        if (__OFSUB__(v53, *v54)) {
          goto LABEL_240;
        }
        if (__OFADD__(v35, 1LL)) {
          goto LABEL_241;
        }
        if (v35 + 1 < 1) {
          break;
        }
        ++v55;
        v54 += 3;
        uint64_t v53 = v35;
        if (v49 == v55) {
          goto LABEL_46;
        }
      }

      uint64_t v49 = v55;
      uint64_t v35 = v53;
      goto LABEL_63;
    }

    uint64_t v35 = v53;
    goto LABEL_46;
  }

  *a1 = v10;
  return v17;
}

          snprintf( __str,  0x80uLL,  "%%%sd",  -[NSString UTF8String]( -[NSString substringWithRange:](format, "substringWithRange:", v9, v14 - v9),  "UTF8String"));
          __int128 v9 = v14;
          if (v16) {
            continue;
          }
LABEL_18:
          __int128 v9 = v14 + 1;
          __int128 v17 = -[NSString characterAtIndex:](format, "characterAtIndex:", v14);
          switch(v17)
          {
            case 'A':
              __int128 v18 = -[NSCalendarDate dayOfWeek](self, "dayOfWeek");
              __int128 v19 = (void *)[locale objectForKey:@"NSWeekDayNameArray"];
              __int128 v20 = objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"Sunday",  @"Monday",  @"Tuesday",  @"Wednesday",  @"Thursday",  @"Friday",  @"Saturday",  0,  v64,  v65,  v66,  v67,  v68);
              goto LABEL_45;
            case 'B':
              __int128 v18 = -[NSCalendarDate monthOfYear](self, "monthOfYear") - 1;
              __int128 v19 = (void *)[locale objectForKey:@"NSMonthNameArray"];
              __int128 v20 = objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"January",  @"February",  @"March",  @"April",  @"May",  @"June",  @"July",  @"August",  @"September",  @"October",  @"November",  @"December",  0);
              goto LABEL_45;
            case 'C':
            case 'D':
            case 'E':
            case 'G':
            case 'J':
            case 'K':
            case 'L':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case '[':
            case '\\':
            case ']':
            case '^':
            case '_':
            case 'f':
            case 'g':
            case 'h':
            case 'k':
            case 'l':
LABEL_24:
              id v21 = -[NSString length](v5, "length");
              char v22 = v5;
              uint64_t v23 = (NSString *)@"?";
              goto LABEL_65;
            case 'F':
              -[NSCalendarDate timeIntervalSinceReferenceDate](self, "timeIntervalSinceReferenceDate");
              __int128 v25 = v24;
              -[NSCalendarDate timeIntervalSinceReferenceDate](self, "timeIntervalSinceReferenceDate");
              id v27 = vcvtmd_s64_f64((v25 - floor(v26)) * 1000.0);
              uint64_t v28 = 5243
                  * (__int16)(v27
                            - 1000
              v72[0] = (v28 >> 19) + (v28 >> 31) + 48;
              __int128 v29 = ((unsigned __int128)(v27 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64) + v27;
              LODWORD(v29) = 103 * (char)(v27 - 100 * ((v29 < 0) + (v29 >> 6)));
              v72[1] = (((v29 & 0x8000) != 0) + (v29 >> 10) + 48);
              v72[2] = v27
                     - 10
                     * (((unint64_t)((unsigned __int128)(v27 * (__int128)0x6666666666666667LL) >> 64) >> 63)
              -[NSString replaceCharactersInRange:withCharacters:length:]( v5,  "replaceCharactersInRange:withCharacters:length:",  -[NSString length](v5, "length"),  0LL,  v72,  3LL);
              break;
            case 'H':
              __int128 v30 = -[NSCalendarDate hourOfDay](self, "hourOfDay");
              goto LABEL_54;
            case 'I':
              uint64_t v31 = -[NSCalendarDate hourOfDay](self, "hourOfDay");
              if (v31 % 12) {
                uint64_t v32 = v31 % 12;
              }
              else {
                uint64_t v32 = 12LL;
              }
              goto LABEL_55;
            case 'M':
              __int128 v30 = -[NSCalendarDate minuteOfHour](self, "minuteOfHour");
              goto LABEL_54;
            case 'S':
              __int128 v30 = -[NSCalendarDate secondOfMinute](self, "secondOfMinute");
              goto LABEL_54;
            case 'X':
              uint64_t v33 = locale;
              uint64_t v34 = [locale objectForKey:@"NSTimeDateFormatString"];
              uint64_t v35 = v34 == 0;
              uint64_t v36 = @"%H:%M:%S %Z";
              goto LABEL_61;
            case 'Y':
              uint64_t v37 = -[NSCalendarDate yearOfCommonEra](self, "yearOfCommonEra");
              Swift::String v38 = (void *)[locale objectForKey:@"AppleLocale"];
              if (!v38) {
                goto LABEL_38;
              }
              Swift::String v39 = v38;
              if ([v38 isEqualToString:@"ja_JP_TRADITIONAL"])
              {
LABEL_70:
                uint64_t v51 = CFLocaleCreate(0LL, @"ja_JP_TRADITIONAL");
                uint64_t v52 = CFDateFormatterCreate(allocator, v51, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
                CFDateFormatterSetFormat(v52, @"Gy");
                -[NSCalendarDate timeIntervalSinceReferenceDate](self, "timeIntervalSinceReferenceDate");
                StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(allocator, v52, v53);
                -[NSString replaceCharactersInRange:withString:]( v5,  "replaceCharactersInRange:withString:",  -[NSString length](v5, "length"),  0LL,  StringWithAbsoluteTime);
                CFRelease(v51);
                CFRelease(v52);
                CFRelease(StringWithAbsoluteTime);
              }

              else
              {
LABEL_38:
                Swift::String v40 = v5;
                uint64_t v32 = v37;
LABEL_58:
                uint64_t v45 = "%ld";
LABEL_59:
                appendNumber(v40, v32, __str, v45);
              }

              break;
            case 'Z':
              id v41 = -[NSTimeZone name](-[NSCalendarDate timeZone](self, "timeZone"), "name");
              if (v41) {
                char v42 = (const __CFString *)v41;
              }
              else {
                char v42 = &stru_189CA6A28;
              }
              -[NSString appendString:](v5, "appendString:", v42);
              break;
            case 'a':
              __int128 v18 = -[NSCalendarDate dayOfWeek](self, "dayOfWeek");
              __int128 v19 = (void *)[locale objectForKey:@"NSShortWeekDayNameArray"];
              __int128 v20 = objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"Sun",  @"Mon",  @"Tue",  @"Wed",  @"Thu",  @"Fri",  @"Sat",  0,  v64,  v65,  v66,  v67,  v68);
              goto LABEL_45;
            case 'b':
              __int128 v18 = -[NSCalendarDate monthOfYear](self, "monthOfYear") - 1;
              __int128 v19 = (void *)[locale objectForKey:@"NSShortMonthNameArray"];
              __int128 v20 = objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"Jan",  @"Feb",  @"Mar",  @"Apr",  @"May",  @"Jun",  @"Jul",  @"Aug",  @"Sep",  @"Oct",  @"Nov",  @"Dec",  0);
LABEL_45:
              if (!v19) {
                __int128 v19 = (void *)v20;
              }
              uint64_t v43 = -[NSString length](v5, "length");
              uint64_t v23 = (NSString *)[v19 objectAtIndex:v18];
              char v22 = v5;
              id v21 = v43;
              goto LABEL_65;
            case 'c':
              uint64_t v33 = locale;
              uint64_t v34 = [locale objectForKey:@"NSTimeDateFormatString"];
              uint64_t v35 = v34 == 0;
              uint64_t v36 = @"%a %b %d %H:%M:%S %Z %Y";
LABEL_61:
              if (v35) {
                id v46 = (uint64_t)v36;
              }
              else {
                id v46 = v34;
              }
              uint64_t v47 = -[NSString length](v5, "length");
              uint64_t v23 = -[NSCalendarDate descriptionWithCalendarFormat:locale:]( self,  "descriptionWithCalendarFormat:locale:",  v46,  v33);
              char v22 = v5;
              id v21 = v47;
LABEL_65:
              -[NSString replaceCharactersInRange:withString:]( v22,  "replaceCharactersInRange:withString:",  v21,  0LL,  v23);
              break;
            case 'd':
              __int128 v30 = -[NSCalendarDate dayOfMonth](self, "dayOfMonth");
              goto LABEL_54;
            case 'e':
              uint64_t v44 = -[NSCalendarDate dayOfMonth](self, "dayOfMonth");
LABEL_57:
              uint64_t v32 = v44;
              Swift::String v40 = v5;
              goto LABEL_58;
            case 'i':
              uint64_t v32 = -[NSCalendarDate hourOfDay](self, "hourOfDay") % 12;
              goto LABEL_55;
            case 'j':
              uint64_t v32 = -[NSCalendarDate dayOfYear](self, "dayOfYear");
              Swift::String v40 = v5;
              uint64_t v45 = "%03ld";
              goto LABEL_59;
            case 'm':
              __int128 v30 = -[NSCalendarDate monthOfYear](self, "monthOfYear");
LABEL_54:
              uint64_t v32 = v30;
              goto LABEL_55;
            default:
              switch(v17)
              {
                case 'p':
                  __int128 v18 = -[NSCalendarDate hourOfDay](self, "hourOfDay") > 11;
                  __int128 v19 = (void *)[locale objectForKey:@"NSAMPMDesignation"];
                  __int128 v20 = objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"AM",  @"PM",  0,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68);
                  goto LABEL_45;
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
                case 'v':
                  goto LABEL_24;
                case 'w':
                  uint64_t v44 = -[NSCalendarDate dayOfWeek](self, "dayOfWeek");
                  goto LABEL_57;
                case 'x':
                  uint64_t v33 = locale;
                  uint64_t v34 = [locale objectForKey:@"NSTimeDateFormatString"];
                  uint64_t v35 = v34 == 0;
                  uint64_t v36 = @"%a %b %d %Y";
                  goto LABEL_61;
                case 'y':
                  uint64_t v48 = -[NSCalendarDate yearOfCommonEra](self, "yearOfCommonEra");
                  uint64_t v49 = (void *)[locale objectForKey:@"AppleLocale"];
                  if (!v49) {
                    goto LABEL_82;
                  }
                  uint64_t v50 = v49;
LABEL_82:
                  uint64_t v32 = v48 % 100;
                  break;
                case 'z':
                  if (-[NSCalendarDate timeZone](self, "timeZone"))
                  {
                    uint64_t v55 = -[NSTimeZone secondsFromGMTForDate:]( -[NSCalendarDate timeZone](self, "timeZone"),  "secondsFromGMTForDate:",  self);
                    if (v55 >= 0) {
                      uint64_t v56 = @"+";
                    }
                    else {
                      uint64_t v56 = @"-";
                    }
                    if (v55 >= 0) {
                      uint64_t v57 = v55;
                    }
                    else {
                      uint64_t v57 = -v55;
                    }
                  }

                  else
                  {
                    uint64_t v57 = 0LL;
                    uint64_t v56 = @"+";
                  }

                  -[NSString replaceCharactersInRange:withString:]( v5,  "replaceCharactersInRange:withString:",  -[NSString length](v5, "length"),  0LL,  v56);
                  appendNumber(v5, v57 / 0xE10, "%02ld", "%02ld");
                  appendNumber( v5,  v57 / 0x3C - 60 * ((unint64_t)((v57 / 0x3C * (unsigned __int128)0x888888888888889uLL) >> 64) >> 1),  "%02ld",  "%02ld");
                  continue;
                default:
                  if (v17 != 37) {
                    goto LABEL_24;
                  }
                  id v21 = -[NSString length](v5, "length");
                  char v22 = v5;
                  uint64_t v23 = (NSString *)@"%";
                  goto LABEL_65;
              }

    [v5 appendString:@"l"];
    options = self->_options;
    if ((options & 4) == 0)
    {
LABEL_9:
      if ((options & 0x10) == 0)
      {
LABEL_11:
        [v5 appendString:@"]"];
        return v5;
      }

  id v27 = 0u;
  uint64_t v28 = 0u;
  __int128 v25 = 0u;
  char v26 = 0u;
  arguments = v5->_arguments;
  __int128 v13 = -[NSArray countByEnumeratingWithState:objects:count:]( arguments,  "countByEnumeratingWithState:objects:count:",  &v25,  v24,  16LL);
  if (v13)
  {
    __int128 v14 = v13;
    uint64_t v15 = *(void *)v26;
    while (2)
    {
      for (uint64_t i = 0LL; i != v14; ++i)
      {
        if (*(void *)v26 != v15) {
          objc_enumerationMutation(arguments);
        }
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          __int128 v11 = (void *)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Malformed function expression (bad argument)" userInfo:0];
          goto LABEL_26;
        }
      }

      __int128 v14 = -[NSArray countByEnumeratingWithState:objects:count:]( arguments,  "countByEnumeratingWithState:objects:count:",  &v25,  v24,  16LL);
      __int128 v11 = 0LL;
      if (v14) {
        continue;
      }
      break;
    }
  }

  else
  {
    __int128 v11 = 0LL;
  }

  __int128 v9 = (__objc2_class *)objc_opt_class();
  if (&OBJC_CLASS___NSIndexSet == v9
    || &OBJC_CLASS____NSConstantIndexSet == v9
    || &OBJC_CLASS___NSMutableIndexSet == v9)
  {
    if (((unint64_t)indexSet & 0x8000000000000000LL) != 0)
    {
      __int128 v12 = *MEMORY[0x189616658];
      __int128 v13 = v12 ^ (unint64_t)indexSet;
      __int128 v14 = 0xFFFFFFFFFFFFFFFLL;
      if ((~(_BYTE)v13 & 7) == 0) {
        __int128 v14 = 0xFFFFFFFFFFFFFLL;
      }
      location = v14 & (v13 >> 3);
    }

    else
    {
      if ((*(_BYTE *)&indexSet->_indexSetFlags & 2) == 0)
      {
        v22[0] = MEMORY[0x1895F87A8];
        v22[1] = 3221225472LL;
        v22[2] = __32__NSMutableIndexSet_addIndexes___block_invoke;
        v22[3] = &unk_189C9DAC0;
        v22[4] = self;
        -[NSIndexSet enumerateRangesUsingBlock:](indexSet, "enumerateRangesUsingBlock:", v22);
        return;
      }

      location = indexSet->_internal._singleRange._range.location;
    }

    if ((*(_BYTE *)&self->super._indexSetFlags & 2) != 0)
    {
      self->super._internal._singleRange._range.location |= location;
    }

    else
    {
      __int128 v16 = 0LL;
      __int128 v17 = 0LL;
LABEL_35:
      if (v17) {
        __int128 v18 = v16;
      }
      else {
        __int128 v18 = 0LL;
      }
      __int128 v19 = v18 - 1;
      while (((-1LL << v17) & location) != 0)
      {
        __int128 v20 = __clz(__rbit64((-1LL << v17) & location));
        id v21 = (-1LL << v20) & ~location;
        __int128 v17 = __clz(__rbit64(v21));
        if (v16 == ++v19)
        {
          ++v16;
          -[NSMutableIndexSet addIndexesInRange:](self, "addIndexesInRange:", v20, v17 - v20);
          if (v17 <= 0x3F) {
            goto LABEL_35;
          }
          return;
        }

        if (!v21 || v17 > 0x3F) {
          return;
        }
      }
    }
  }

  else
  {
    __int128 v10 = -[NSIndexSet firstIndex](indexSet, "firstIndex");
    if (v10 != 0x7FFFFFFFFFFFFFFFLL)
    {
      for (uint64_t i = v10;
            i != 0x7FFFFFFFFFFFFFFFLL;
            uint64_t i = -[NSIndexSet indexGreaterThanIndex:](indexSet, "indexGreaterThanIndex:", i))
      {
        -[NSMutableIndexSet addIndex:](self, "addIndex:", i);
      }
    }
  }

    unint64_t result = (id *)[v10[6] objectForKey:a5];
    if (result) {
      return result;
    }
    __int128 v16 = a2;
    [v10[6] setObject:a2 forKey:a5];
    unint64_t result = 0LL;
LABEL_17:
    if (a6)
    {
      [v10[7] addPointer:a2];
      return 0LL;
    }
  }

  return result;
}

  a1[12] = a1[8];
  unint64_t result = a1[17];
  a1[5] = result;
  return result;
}

  if (!*(void *)(a1 + 40) || (objc_opt_isKindOfClass() & 1) != 0) {
    goto LABEL_6;
  }
  __int128 v13 = +[_NSItemProviderTypeCoercion typeCoercionForValue:targetClass:]( &OBJC_CLASS____NSItemProviderTypeCoercion,  "typeCoercionForValue:targetClass:",  v7,  *(void *)(a1 + 40));
  if (v13)
  {
    __int128 v7 = [v13 coerceValueError:v28];
    unint64_t v4 = v28[0];
    if (v7 | v28[0]) {
      goto LABEL_35;
    }
    RepresentationError = _NSIPUnexpectedValueClassError(*(void *)(a1 + 40), 0LL);
    goto LABEL_22;
  }

  if (qword_18C4963F8 != -1) {
    dispatch_once(&qword_18C4963F8, &__block_literal_global_98);
  }
  if (_MergedGlobals_7_0 && (objc_msgSend(*(id *)(a1 + 40), "isSubclassOfClass:") & 1) != 0
    || qword_18C4963F0 && (objc_msgSend(*(id *)(a1 + 40), "isSubclassOfClass:") & 1) != 0
    || (objc_opt_respondsToSelector() & 1) == 0)
  {
    unint64_t v4 = 0LL;
    __int128 v7 = 0LL;
  }

  else
  {
    __int128 v24 = 0LL;
    __int128 v25 = &v24;
    char v26 = 0x2020000000LL;
    id v27 = 0;
    v23[0] = v6;
    v23[1] = 3221225472LL;
    v23[2] = __95__NSItemProvider__loadItemOfClass_forTypeIdentifier_options_coerceForCoding_completionHandler___block_invoke_10;
    v23[3] = &unk_189CA0580;
    uint64_t v15 = *(void **)(a1 + 48);
    v23[4] = *(void *)(a1 + 56);
    v23[5] = &v24;
    [v15 enumerateObjectsUsingBlock:v23];
    if (*((_BYTE *)v25 + 24)) {
      __int128 v7 = objc_msgSend( *(id *)(a1 + 40),  "objectWithItemProviderData:typeIdentifier:error:",  objc_msgSend(a2, "data"),  objc_msgSend(*(id *)(a1 + 56), "typeIdentifier"),  v28);
    }
    else {
      __int128 v7 = 0LL;
    }
    _Block_object_dispose(&v24, 8);
    unint64_t v4 = v28[0];
  }

      return 0LL;
    }

    if (qword_18C496C48 != -1) {
      dispatch_once(&qword_18C496C48, &__block_literal_global_51);
    }
    if ((objc_class *)qword_18C496C40 == v4)
    {

      return CFURLCreateWithFileSystemPath(0LL, v5, kCFURLPOSIXPathStyle, isDirectory);
    }

    __int128 v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: object already initialized",  _NSMethodExceptionProem(v4, a2));

    __int128 v10 = (void *)MEMORY[0x189603F70];
    __int128 v11 = (void *)MEMORY[0x189603A48];
  }

  else
  {
    __int128 v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: nil string parameter",  _NSMethodExceptionProem(a1, a2));

    __int128 v10 = (void *)MEMORY[0x189603F70];
    __int128 v11 = (void *)MEMORY[0x189603A60];
  }

  objc_exception_throw((id)[v10 exceptionWithName:*v11 reason:v9 userInfo:0]);
  return (CFURLRef)-[NSURL(NSURL) initFileURLWithPath:isDirectory:]();
}

    uint64_t v15 = 0LL;
LABEL_16:
    [v12 parser:a1 foundAttributeDeclarationWithName:v14 forElement:Value type:&stru_189CA6A28 defaultValue:v15];
    goto LABEL_17;
  }

      if (v9 != 92)
      {
LABEL_24:
        id v21 = 0LL;
        char v22 = 0LL;
        uint64_t v23 = 0;
        __int128 v12 = 0LL;
        __int128 v24 = 64LL;
        while (1)
        {
          else {
            __int128 v25 = v22;
          }
          char v26 = v47;
          if (v47 <= v22)
          {
            id v27 = 0;
          }

          else
          {
            if (v44)
            {
              id v27 = v44[v22 + v46];
            }

            else if (v45)
            {
              id v27 = v45[v46 + v22];
            }

            else
            {
              if (v49 <= v22 || v8 > v22)
              {
                __int128 v29 = v25 + v21;
                __int128 v30 = v24 - v25;
                uint64_t v31 = v22 - v25;
                uint64_t v32 = v31 + 64;
                if (v31 + 64 >= v47) {
                  uint64_t v32 = v47;
                }
                location = v31;
                uint64_t v49 = v32;
                if (v47 >= v30) {
                  char v26 = v30;
                }
                v51.length = v26 + v29;
                v51.location = v31 + v46;
                CFStringGetCharacters(theString, v51, buffer);
                __int128 v8 = location;
              }

              id v27 = buffer[v22 - v8];
            }

            if (v27 <= 0x2Au)
            {
              if (v27 == 42)
              {
                uint64_t v34 = &a4[v12];
                if ((v23 & 1) != 0) {
                  uint64_t v35 = 92;
                }
                else {
                  uint64_t v35 = 46;
                }
                *uint64_t v34 = v35;
                v34[1] = 42;
                v12 += 2LL;
                uint64_t v23 = 0;
                goto LABEL_62;
              }
            }

            else
            {
              uint64_t v33 = v27 - 43;
              if (v33 <= 0x33)
              {
                if (v33 == 20)
                {
                  if ((v23 & 1) != 0)
                  {
                    uint64_t v37 = v12 + 1;
                    a4[v12 + 1] = 63;
                    Swift::String v38 = 92;
                  }

                  else
                  {
                    Swift::String v38 = 46;
                    uint64_t v37 = v12;
                  }

                  uint64_t v23 = 0;
                  a4[v12] = v38;
                  __int128 v12 = v37 + 1;
                  goto LABEL_62;
                }

                if (v33 == 49)
                {
                  if ((v23 & 1) != 0)
                  {
                    *(_DWORD *)&a4[v12] = 6029404;
                    v12 += 2LL;
                  }

                  v23 ^= 1u;
                  goto LABEL_62;
                }
              }

              if (v27 - 123 < 3)
              {
LABEL_61:
                uint64_t v23 = 0;
                uint64_t v36 = &a4[v12];
                *uint64_t v36 = 92;
                v12 += 2LL;
                v36[1] = v27;
                goto LABEL_62;
              }
            }
          }

          uint64_t v23 = 0;
          a4[v12++] = v27;
LABEL_62:
          ++v22;
          --v21;
          ++v24;
          if (Length == v22) {
            goto LABEL_8;
          }
        }
      }

      if (Length == 1) {
        goto LABEL_76;
      }
      __int128 v16 = Length - 2;
      __int128 v17 = v47;
      if (v47 <= Length - 2) {
        goto LABEL_76;
      }
      __int128 v18 = v44;
      if (v44)
      {
        __int128 v19 = v46 + v16;
      }

      else
      {
        if (v45)
        {
          __int128 v20 = v45[v46 + v16];
LABEL_23:
          if (v20 == 92) {
            goto LABEL_24;
          }
LABEL_76:
          objc_exception_throw((id)objc_msgSend( MEMORY[0x189603F70],  "exceptionWithName:reason:userInfo:",  *MEMORY[0x189603A60],  @"The backslash is a wildcard char, and cannot appear unescaped at the end of a string.",  0));
          -[NSISO8601DateFormatter dealloc](v40, v41);
          return result;
        }

        if (v8 > v16 || v49 <= v16)
        {
          Swift::String v39 = Length - 6;
          if (v39 + 64 < v47) {
            __int128 v17 = v39 + 64;
          }
          location = v39;
          uint64_t v49 = v17;
          v52.location = v46 + v39;
          v52.length = v17 - v39;
          CFStringGetCharacters(theString, v52, buffer);
          __int128 v8 = location;
        }

        __int128 v19 = v16 - v8;
        __int128 v18 = buffer;
      }

      __int128 v20 = v18[v19];
      goto LABEL_23;
    }
  }

  __int128 v12 = 0LL;
LABEL_8:
  a4[v12] = 0;
  return v12;
}

    unint64_t v4 = 8LL;
    goto LABEL_19;
  }

  if (v3 <= 75)
  {
    if ((v3 - 66) >= 2)
    {
      if (v3 != 73) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }

    __int128 v5 = 8LL;
    goto LABEL_19;
  }

  if (v4 != 99)
  {
    if (v4 != 105) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }

          LOBYTE(v14) = 0;
        }
      }
    }
  }

  return v14;
}

    __int128 v18 = (__CFStringTokenizer *)qword_18C496FC0;
    if (!qword_18C496FC0)
    {
      v126.location = 0LL;
      v126.length = 0LL;
      __int128 v18 = CFStringTokenizerCreate(0LL, &stru_189CA6A28, v126, 0LL, 0LL);
      qword_18C496FC0 = (uint64_t)v18;
      if (!v18) {
        return 0LL;
      }
    }

    goto LABEL_17;
  }

  return v17;
}

    memmove((void *)result, v12, v13);
    goto LABEL_16;
  }

  return result;
}

  uint64_t v15 = *((_BYTE *)v22 + 24);
  _Block_object_dispose(&v21, 8);
  return v15;
}

  -[NSFileAccessNode removeSelfIfUseless](self, "removeSelfIfUseless");
  return v8;
}

      if (!outError) {
        return 0;
      }
LABEL_16:
      __int128 v9 = 0;
      *outError = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  512LL,  0LL);
      return v9;
    }

    nonLocalVersion = self->_nonLocalVersion;
    __int128 v10 = (os_log_s *)_NSOSLog();
    __int128 v13 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (nonLocalVersion)
    {
      if (!v13) {
        goto LABEL_15;
      }
      *(_WORD *)buf = 0;
      __int128 v11 = "-[NSFileVersion removeAndReturnError:]: You can't use it with a non-local version.";
    }

    else
    {
      if (!v13) {
        goto LABEL_15;
      }
      *(_WORD *)buf = 0;
      __int128 v11 = "-[NSFileVersion removeAndReturnError:]: You can't use it with a current version.";
    }

uint64_t outlined destroy of Locale.LanguageCode(uint64_t a1)
{
  return a1;
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Locale.Script(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.Region(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of (Locale.Language, [Morphology.Pronoun])(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale.Language, [Morphology.Pronoun]));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void *assignWithTake for TermOfAddress(void *a1, void *a2)
{
  if (a1[12] < 4uLL) {
    goto LABEL_4;
  }
  unint64_t v4 = a2[12];
  if (v4 >= 4)
  {
    if (a1[1])
    {
      uint64_t v8 = a2[1];
      if (v8)
      {
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRelease();
        uint64_t v9 = a2[3];
        a1[2] = a2[2];
        a1[3] = v9;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }

      outlined destroy of Locale.LanguageCode((uint64_t)a1);
    }

    __int128 v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v10;
LABEL_10:
    if (a1[5])
    {
      uint64_t v11 = a2[5];
      if (v11)
      {
        a1[4] = a2[4];
        a1[5] = v11;
        swift_bridgeObjectRelease();
        uint64_t v12 = a2[7];
        a1[6] = a2[6];
        a1[7] = v12;
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }

      outlined destroy of Locale.Script((uint64_t)(a1 + 4));
    }

    __int128 v13 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v13;
LABEL_15:
    if (a1[9])
    {
      uint64_t v14 = a2[9];
      if (v14)
      {
        a1[8] = a2[8];
        a1[9] = v14;
        swift_bridgeObjectRelease();
        uint64_t v15 = a2[11];
        a1[10] = a2[10];
        a1[11] = v15;
        swift_bridgeObjectRelease();
LABEL_20:
        a1[12] = v4;
        swift_bridgeObjectRelease();
        return a1;
      }

      outlined destroy of Locale.Region((uint64_t)(a1 + 8));
    }

    __int128 v16 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v16;
    goto LABEL_20;
  }

  outlined destroy of (Locale.Language, [Morphology.Pronoun])((uint64_t)a1);
LABEL_4:
  __int128 v5 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v5;
  a1[12] = a2[12];
  __int128 v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  __int128 v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for TermOfAddress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFB && *(_BYTE *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 96);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 4;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TermOfAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2147483644;
    if (a3 > 0x7FFFFFFB) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if (a3 > 0x7FFFFFFB) {
      *(_BYTE *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 96) = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for TermOfAddress()
{
  return &type metadata for TermOfAddress;
}

uint64_t destroy for TermOfAddress._TermOfAddress(uint64_t result)
{
  if (*(void *)(result + 96) >= 0xFFFFFFFFuLL)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(void *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(void *)(v1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

void *initializeWithCopy for TermOfAddress._TermOfAddress(void *a1, void *a2)
{
  unint64_t v4 = a2[12];
  if (v4 >= 0xFFFFFFFF)
  {
    uint64_t v5 = a2[1];
    if (v5)
    {
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = a2[3];
      a1[2] = a2[2];
      a1[3] = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = a2[5];
      if (v7) {
        goto LABEL_4;
      }
    }

    else
    {
      __int128 v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v15;
      uint64_t v7 = a2[5];
      if (v7)
      {
LABEL_4:
        a1[4] = a2[4];
        a1[5] = v7;
        uint64_t v8 = a2[7];
        a1[6] = a2[6];
        a1[7] = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v9 = a2[9];
        if (v9)
        {
LABEL_5:
          a1[8] = a2[8];
          a1[9] = v9;
          uint64_t v10 = a2[10];
          uint64_t v11 = a2[11];
          a1[10] = v10;
          a1[11] = v11;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_10:
          a1[12] = v4;
          swift_bridgeObjectRetain();
          return a1;
        }

uint64_t assignWithCopy for TermOfAddress._TermOfAddress(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *((void *)a2 + 12);
  if (*(void *)(a1 + 96) < 0xFFFFFFFFuLL)
  {
    if (v4 < 0xFFFFFFFF)
    {
LABEL_18:
      __int128 v7 = *a2;
      __int128 v8 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v7;
      __int128 v9 = a2[3];
      __int128 v10 = a2[4];
      __int128 v11 = a2[5];
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v9;
      return a1;
    }

    if (*((void *)a2 + 1))
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*((void *)a2 + 5)) {
        goto LABEL_9;
      }
    }

    else
    {
      __int128 v12 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v12;
      if (*((void *)a2 + 5))
      {
LABEL_9:
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(void *)(a1 + 56) = *((void *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (*((void *)a2 + 9))
        {
LABEL_10:
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *(void *)(a1 + 80) = *((void *)a2 + 10);
          *(void *)(a1 + 88) = *((void *)a2 + 11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_24:
          *(void *)(a1 + 96) = *((void *)a2 + 12);
          swift_bridgeObjectRetain();
          return a1;
        }

void *assignWithTake for TermOfAddress._TermOfAddress(void *a1, void *a2)
{
  if (a1[12] >= 0xFFFFFFFFuLL)
  {
    unint64_t v4 = a2[12];
    uint64_t v5 = a1[1];
    if (v4 >= 0xFFFFFFFF)
    {
      if (v5)
      {
        uint64_t v6 = a2[1];
        if (v6)
        {
          *a1 = *a2;
          a1[1] = v6;
          swift_bridgeObjectRelease();
          uint64_t v7 = a2[3];
          a1[2] = a2[2];
          a1[3] = v7;
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }

        outlined destroy of Locale.LanguageCode((uint64_t)a1);
      }

      __int128 v11 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v11;
LABEL_16:
      if (a1[5])
      {
        uint64_t v12 = a2[5];
        if (v12)
        {
          a1[4] = a2[4];
          a1[5] = v12;
          swift_bridgeObjectRelease();
          uint64_t v13 = a2[7];
          a1[6] = a2[6];
          a1[7] = v13;
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }

        outlined destroy of Locale.Script((uint64_t)(a1 + 4));
      }

      __int128 v14 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v14;
LABEL_21:
      if (a1[9])
      {
        uint64_t v15 = a2[9];
        if (v15)
        {
          a1[8] = a2[8];
          a1[9] = v15;
          swift_bridgeObjectRelease();
          uint64_t v16 = a2[11];
          a1[10] = a2[10];
          a1[11] = v16;
          swift_bridgeObjectRelease();
LABEL_26:
          a1[12] = v4;
          swift_bridgeObjectRelease();
          return a1;
        }

        outlined destroy of Locale.Region((uint64_t)(a1 + 8));
      }

      __int128 v17 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v17;
      goto LABEL_26;
    }

    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (a1[5])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (a1[9])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
  }

  __int128 v8 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v8;
  a1[12] = a2[12];
  __int128 v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  __int128 v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for TermOfAddress._TermOfAddress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 96);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for TermOfAddress._TermOfAddress( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)(result + 96) = 0LL;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 96) = a2 + 3;
    }
  }

  return result;
}

uint64_t getEnumTag for TermOfAddress._TermOfAddress(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 96);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for TermOfAddress._TermOfAddress(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 96) = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for TermOfAddress._TermOfAddress()
{
  return &type metadata for TermOfAddress._TermOfAddress;
}

uint64_t getEnumTagSinglePayload for TermOfAddress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for TermOfAddress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_182F1C550 + 4 * byte_183723FB2[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_182F1C584 + 4 * byte_183723FAD[v4]))();
}

uint64_t sub_182F1C584(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F1C58C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F1C594LL);
  }
  return result;
}

uint64_t sub_182F1C5A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F1C5A8LL);
  }
  *(_BYTE *)double result = a2 + 3;
  return result;
}

uint64_t sub_182F1C5AC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F1C5B4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TermOfAddress.CodingKeys()
{
  return &type metadata for TermOfAddress.CodingKeys;
}

uint64_t outlined consume of TermOfAddress._TermOfAddress( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 >= 4)
  {
    outlined consume of Locale.LanguageCode?(result, a2);
    outlined consume of Locale.LanguageCode?(a5, a6);
    outlined consume of Locale.LanguageCode?(a9, a10);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t outlined consume of PresentationIntent.Kind(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of PresentationIntent.Kind(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of TermOfAddress?( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 != 4) {
    return outlined consume of TermOfAddress._TermOfAddress(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 160);
  __int128 v12 = *(_OWORD *)(a1 + 184);
  __int128 v13 = *(_OWORD *)(a1 + 168);
  unint64_t v10 = *(void *)(a1 + 200);
  outlined consume of TermOfAddress._TermOfAddress( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96));
  outlined consume of TermOfAddress._TermOfAddress( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v13,  *((uint64_t *)&v13 + 1),  v12,  *((uint64_t *)&v12 + 1),  v10);
  return a1;
}

uint64_t KeyPathComparator.keyPath.getter()
{
  return swift_retain();
}

uint64_t KeyPathComparator.order.getter()
{
  __int16 v1 = v0 + 1;
  uint64_t v2 = (uint64_t (*)(uint64_t *))v0[10];
  uint64_t v3 = v0[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v1, v3);
  v8[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16LL))( boxed_opaque_existential_1,  v4,  v3);
  uint64_t v6 = v2(v8) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t KeyPathComparator.order.setter(char a1)
{
  void (*v3)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v5[2];
  uint64_t v2 = a1 & 1;
  uint64_t v3 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v1 + 64);
  swift_retain();
  v3(v5, v1 + 8, v2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v1 + 8);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v5, v1 + 8);
}

void (*KeyPathComparator.order.modify(uint64_t **a1))(__int128 **a1)
{
  uint64_t v3 = (uint64_t *)malloc(0x38uLL);
  *a1 = v3;
  v3[5] = (uint64_t)v1;
  uint64_t v4 = v1 + 1;
  uint64_t v5 = (uint64_t (*)(uint64_t *))v1[10];
  uint64_t v6 = v1[4];
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(v4, v6);
  v3[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v3);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))( boxed_opaque_existential_1,  v7,  v6);
  LOBYTE(a1) = v5(v3) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *((_BYTE *)v3 + 48) = (_BYTE)a1;
  return KeyPathComparator.order.modify;
}

void KeyPathComparator.order.modify(__int128 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *((void *)*a1 + 5);
  uint64_t v3 = *((unsigned __int8 *)*a1 + 48);
  uint64_t v4 = v2 + 8;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 64);
  swift_retain();
  v5(v4, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v4);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v1, v4);
  free(v1);
}

uint64_t KeyPathComparator.init<A>(_:order:)@<X0>( void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v33 = a1;
  uint64_t v8 = (uint64_t *)(v7 + *MEMORY[0x18961A9A8]);
  uint64_t v9 = v8[1];
  uint64_t v31 = *v8;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v10 = *(void *)&v32[0];
  *(void *)a4 = *(void *)&v32[0];
  uint64_t v30 = a3;
  if (swift_dynamicCastMetatype())
  {
    unint64_t v12 = lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    *(void *)(a4 + 8) = 833LL;
    *(_WORD *)(a4 + 16) = 1;
    uint64_t v16 = specialized closure #3 in AnySortComparator.init<A>(_:);
    __int128 v17 = (void (*)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))specialized thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    __int128 v18 = &type metadata for String.StandardComparator;
    uint64_t v19 = specialized closure #1 in AnySortComparator.init<A>(_:);
  }

  else
  {
    __int128 v18 = (ValueMetadata *)type metadata accessor for ComparableComparator(0LL, v9, a3, v11);
    uint64_t v28 = MEMORY[0x186E20D4C](&protocol conformance descriptor for ComparableComparator<A>, v18);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v18;
    char v29 = a2;
    uint64_t v20 = MEMORY[0x186E20D4C](&protocol conformance descriptor for ComparableComparator<A>, v18);
    *(void *)(v13 + 24) = v20;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = v20;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = partial apply for closure #2 in AnySortComparator.init<A>(_:);
    *(void *)(v14 + 24) = v21;
    uint64_t v15 = swift_allocObject();
    unint64_t v12 = v28;
    *(void *)(v15 + 16) = v18;
    *(void *)(v15 + 24) = v20;
    a2 = v29;
    *(_BYTE *)(a4 + 8) = 0;
    uint64_t v16 = partial apply for closure #3 in AnySortComparator.init<A>(_:);
    __int128 v17 = (void (*)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    uint64_t v19 = partial apply for closure #1 in AnySortComparator.init<A>(_:);
  }

  *(void *)(a4 + 32) = v18;
  *(void *)(a4 + 40) = v12;
  *(void *)(a4 + 48) = v19;
  *(void *)(a4 + 56) = v13;
  *(void *)(a4 + 64) = v17;
  *(void *)(a4 + 72) = v14;
  char v22 = a2 & 1;
  *(void *)(a4 + 80) = v16;
  *(void *)(a4 + 88) = v15;
  swift_retain();
  uint64_t v23 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v25 = v24;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v31;
  *(void *)(v26 + 24) = v9;
  *(void *)(v26 + 32) = v30;
  *(void *)(v26 + 40) = v23;
  *(_BYTE *)(v26 + 48) = v25 & 1;
  *(void *)(v26 + 56) = v10;
  *(void *)(a4 + 96) = partial apply for closure #1 in KeyPathComparator.init<A>(_:order:);
  *(void *)(a4 + 104) = v26;
  swift_retain();
  swift_retain();
  v17(a4 + 8, v22, (uint64_t *)v32);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v32, a4 + 8);
  swift_release();
  return swift_release();
}

{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void (*v19)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>);
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37[2];
  void *v38;
  uint64_t v7 = *a1;
  Swift::String v38 = a1;
  uint64_t v8 = (uint64_t *)(v7 + *MEMORY[0x18961A9A8]);
  uint64_t v9 = v8[1];
  uint64_t v36 = *v8;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v10 = *(void *)&v37[0];
  *(void *)a4 = *(void *)&v37[0];
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v34 = a3;
  uint64_t v35 = v11;
  if (swift_dynamicCastMetatype())
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
    uint64_t v14 = lazy protocol witness table accessor for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>();
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    __int128 v17 = 0LL;
    *(void *)(a4 + 8) = 833LL;
    *(_WORD *)(a4 + 16) = 1;
    __int128 v18 = specialized closure #3 in AnySortComparator.init<A>(_:);
    uint64_t v19 = (void (*)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))specialized thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    uint64_t v20 = specialized closure #1 in AnySortComparator.init<A>(_:);
  }

  else
  {
    uint64_t v21 = type metadata accessor for ComparableComparator(255LL, v11, a3, v12);
    char v22 = MEMORY[0x186E20D4C](&protocol conformance descriptor for ComparableComparator<A>, v21);
    uint64_t v13 = type metadata accessor for OptionalComparator(0LL, v21, v22, v23);
    uint64_t v33 = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>, v13);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v13;
    char v24 = a2;
    char v25 = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>, v13);
    *(void *)(v15 + 24) = v25;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v13;
    *(void *)(v26 + 24) = v25;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
    *(void *)(v16 + 24) = v26;
    __int128 v17 = swift_allocObject();
    uint64_t v14 = v33;
    *(void *)(v17 + 16) = v13;
    *(void *)(v17 + 24) = v25;
    a2 = v24;
    *(_BYTE *)(a4 + 8) = 0;
    __int128 v18 = (uint64_t (*)(uint64_t))closure #3 in AnySortComparator.init<A>(_:)partial apply;
    uint64_t v19 = (void (*)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in AnySortComparator.init<A>(_:)partial apply;
  }

  *(void *)(a4 + 32) = v13;
  *(void *)(a4 + 40) = v14;
  *(void *)(a4 + 48) = v20;
  *(void *)(a4 + 56) = v15;
  *(void *)(a4 + 64) = v19;
  *(void *)(a4 + 72) = v16;
  id v27 = a2 & 1;
  *(void *)(a4 + 80) = v18;
  *(void *)(a4 + 88) = v17;
  swift_retain();
  uint64_t v28 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  uint64_t v30 = v29;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v36;
  *(void *)(v31 + 24) = v35;
  *(void *)(v31 + 32) = v34;
  *(void *)(v31 + 40) = v28;
  *(_BYTE *)(v31 + 48) = v30 & 1;
  *(void *)(v31 + 56) = v10;
  *(void *)(a4 + 96) = partial apply for closure #1 in KeyPathComparator.init<A>(_:order:);
  *(void *)(a4 + 104) = v31;
  swift_retain();
  swift_retain();
  v19(a4 + 8, v27, (uint64_t *)v37);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v37, a4 + 8);
  swift_release();
  return swift_release();
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v30 = a2;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  unint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = v10;
  uint64_t v14 = (uint64_t *)(v13 + *MEMORY[0x18961A9A8]);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v17 = v31;
  *(void *)a5 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v7, a3);
  uint64_t v18 = *(void *)(a4 + 8);
  *((void *)&v32 + 1) = a3;
  *(void *)&__int128 v33 = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 32))(boxed_opaque_existential_1, v12, a3);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  *((void *)&v33 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)&__int128 v34 = v20;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a3;
  *(void *)(v21 + 24) = a4;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v22 + 24) = v21;
  *((void *)&v34 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(void *)&__int128 v35 = v22;
  uint64_t v23 = swift_allocObject();
  __int128 v24 = v34;
  *(_OWORD *)(a5 + 40) = v33;
  *(_OWORD *)(a5 + 56) = v24;
  __int128 v25 = v32;
  *(_OWORD *)(a5 + 8) = v31;
  *(void *)(v23 + 16) = a3;
  *(void *)(v23 + 24) = a4;
  *((void *)&v35 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a5 + 88) = v23;
  *(_OWORD *)(a5 + 24) = v25;
  *(_OWORD *)(a5 + 72) = v35;
  swift_retain();
  uint64_t v26 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v7) = v27;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v30, a3);
  swift_release();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v15;
  *(void *)(result + 24) = v16;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  *(void *)(result + 48) = v26;
  *(_BYTE *)(result + 56) = v7 & 1;
  *(void *)(result + 64) = v17;
  *(void *)(a5 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(void *)(a5 + 104) = result;
  return result;
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v9 = *a1;
  uint64_t v10 = type metadata accessor for OptionalComparator(0LL, a3, a4, a4);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t v36 = a1;
  uint64_t v14 = (uint64_t *)(v9 + *MEMORY[0x18961A9A8]);
  uint64_t v15 = v14[1];
  uint64_t v29 = *v14;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v16 = v31;
  *(void *)a5 = v31;
  uint64_t v17 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, a2, a3);
  *((void *)&v32 + 1) = v10;
  *(void *)&__int128 v33 = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>, v10);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
  (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v13, v10);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v10;
  uint64_t v20 = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>, v10);
  *(void *)(v19 + 24) = v20;
  *((void *)&v33 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)&__int128 v34 = v19;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v10;
  *(void *)(v21 + 24) = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v22 + 24) = v21;
  *((void *)&v34 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(void *)&__int128 v35 = v22;
  uint64_t v23 = swift_allocObject();
  __int128 v24 = v34;
  *(_OWORD *)(a5 + 40) = v33;
  *(_OWORD *)(a5 + 56) = v24;
  __int128 v25 = v32;
  *(_OWORD *)(a5 + 8) = v31;
  *(void *)(v23 + 16) = v10;
  *(void *)(v23 + 24) = v20;
  *((void *)&v35 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a5 + 88) = v23;
  *(_OWORD *)(a5 + 24) = v25;
  *(_OWORD *)(a5 + 72) = v35;
  swift_retain();
  uint64_t v26 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v10) = v27;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, a3);
  swift_release();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v29;
  *(void *)(result + 24) = *(void *)(v15 + 16);
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = v30;
  *(void *)(result + 48) = v26;
  *(_BYTE *)(result + 56) = v10 & 1;
  *(void *)(result + 64) = v16;
  *(void *)(a5 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(void *)(a5 + 104) = result;
  return result;
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:order:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v30)(__int128 *__return_ptr, uint64_t, void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v8 = a2;
  __int128 v34 = a2;
  __int128 v35 = a3 & 1;
  uint64_t v10 = *(void *)(a4 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v41 = v11;
  uint64_t v15 = (uint64_t *)(v14 + *MEMORY[0x18961A9A8]);
  uint64_t v16 = *v15;
  __int128 v33 = v15[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v17 = v36;
  *(void *)a6 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v8, a4);
  uint64_t v18 = *(void *)(a5 + 8);
  *((void *)&v37 + 1) = a4;
  *(void *)&Swift::String v38 = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v13, a4);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a4;
  *(void *)(v20 + 24) = a5;
  *((void *)&v38 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)&Swift::String v39 = v20;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a4;
  *(void *)(v21 + 24) = a5;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v22 + 24) = v21;
  *((void *)&v39 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(void *)&Swift::String v40 = v22;
  uint64_t v23 = swift_allocObject();
  __int128 v24 = v39;
  *(_OWORD *)(a6 + 40) = v38;
  *(_OWORD *)(a6 + 56) = v24;
  __int128 v25 = v37;
  *(_OWORD *)(a6 + 8) = v36;
  *(void *)(v23 + 16) = a4;
  *(void *)(v23 + 24) = a5;
  *((void *)&v40 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a6 + 88) = v23;
  *(_OWORD *)(a6 + 24) = v25;
  *(_OWORD *)(a6 + 72) = v40;
  swift_retain();
  uint64_t v26 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v8) = v27;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v33;
  *(void *)(v28 + 16) = v16;
  *(void *)(v28 + 24) = v29;
  *(void *)(v28 + 32) = a4;
  *(void *)(v28 + 40) = a5;
  *(void *)(v28 + 48) = v26;
  *(_BYTE *)(v28 + 56) = v8 & 1;
  *(void *)(v28 + 64) = v17;
  *(void *)(a6 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(void *)(a6 + 104) = v28;
  uint64_t v30 = *(void (**)(__int128 *__return_ptr, uint64_t, void))(a6 + 64);
  swift_retain();
  swift_retain();
  v30(&v36, a6 + 8, v35);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a6 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, a6 + 8);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v34, a4);
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:order:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v30)(__int128 *__return_ptr, uint64_t, void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  __int128 v34 = a5;
  __int128 v32 = a2;
  __int128 v35 = a3 & 1;
  uint64_t v10 = *a1;
  uint64_t v11 = type metadata accessor for OptionalComparator(0LL, a4, a5, a4);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v32 - v13;
  id v41 = a1;
  uint64_t v15 = (uint64_t *)(v10 + *MEMORY[0x18961A9A8]);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v18 = v36;
  *(void *)a6 = v36;
  __int128 v33 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v14, a2, a4);
  *((void *)&v37 + 1) = v11;
  *(void *)&Swift::String v38 = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>, v11);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v14, v11);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v11;
  uint64_t v21 = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>, v11);
  *(void *)(v20 + 24) = v21;
  *((void *)&v38 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)&Swift::String v39 = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v11;
  *(void *)(v22 + 24) = v21;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v23 + 24) = v22;
  *((void *)&v39 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(void *)&Swift::String v40 = v23;
  uint64_t v24 = swift_allocObject();
  __int128 v25 = v39;
  *(_OWORD *)(a6 + 40) = v38;
  *(_OWORD *)(a6 + 56) = v25;
  __int128 v26 = v37;
  *(_OWORD *)(a6 + 8) = v36;
  *(void *)(v24 + 16) = v11;
  *(void *)(v24 + 24) = v21;
  *((void *)&v40 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a6 + 88) = v24;
  *(_OWORD *)(a6 + 24) = v26;
  *(_OWORD *)(a6 + 72) = v40;
  swift_retain();
  uint64_t v27 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v22) = v28;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v17;
  *(void *)(v29 + 24) = *(void *)(v16 + 16);
  *(void *)(v29 + 32) = a4;
  *(void *)(v29 + 40) = v34;
  *(void *)(v29 + 48) = v27;
  *(_BYTE *)(v29 + 56) = v22 & 1;
  *(void *)(v29 + 64) = v18;
  *(void *)(a6 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(void *)(a6 + 104) = v29;
  uint64_t v30 = *(void (**)(__int128 *__return_ptr, uint64_t, void))(a6 + 64);
  swift_retain();
  swift_retain();
  v30(&v36, a6 + 8, v35);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a6 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, a6 + 8);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, a4);
}

uint64_t closure #1 in KeyPathComparator.init<A>(_:order:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  a5[3] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  if ((a3 & 1) != 0) {
    return swift_getAtKeyPath();
  }
  else {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))( boxed_opaque_existential_1,  a1 + a2,  a4);
  }
}

uint64_t closure #1 in KeyPathComparator.init<A>(_:order:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  a4[3] = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  if ((a3 & 1) != 0) {
    return swift_getAtKeyPath();
  }
  else {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))( boxed_opaque_existential_1,  a1 + a2,  v8);
  }
}

uint64_t KeyPathComparator.compare(_:_:)(uint64_t a1, uint64_t a2)
{
  void (*v4)(void *__return_ptr);
  uint64_t (*v5)(uint64_t *, void *, void *);
  uint64_t v6;
  void *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  uint64_t v11[4];
  void v12[4];
  void v13[4];
  uint64_t v4 = (void (*)(void *__return_ptr))v2[12];
  v4(v13);
  ((void (*)(void *__return_ptr, uint64_t))v4)(v12, a2);
  uint64_t v5 = (uint64_t (*)(uint64_t *, void *, void *))v2[6];
  uint64_t v6 = v2[4];
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(v2 + 1, v6);
  v11[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))( boxed_opaque_existential_1,  v7,  v6);
  uint64_t v9 = v5(v11, v13, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v9;
}

uint64_t static KeyPathComparator.== infix(_:_:)(void *a1, void *a2, uint64_t a3)
{
  char v6 = MEMORY[0x186E1C1A4](*a1, *a2);
  uint64_t v9 = type metadata accessor for KeyPathComparator(0LL, a3, v7, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t *, void *, uint64_t))(v10 + 16);
  v11((uint64_t *)v23, a1, v9);
  v11(&v20, a2, v9);
  if ((v6 & 1) != 0)
  {
    uint64_t v12 = v25;
    uint64_t v13 = v26;
    uint64_t v14 = __swift_project_boxed_opaque_existential_1(v24, v25);
    uint64_t v15 = v22;
    uint64_t v16 = __swift_project_boxed_opaque_existential_1(v21, v22);
    char v17 = compare #1 <A, B>(_:_:) in static AnySortComparator.== infix(_:_:)( (uint64_t)v14,  (uint64_t)v16,  v12,  v15,  *(void *)(v13 + 8));
  }

  else
  {
    char v17 = 0;
  }

  uint64_t v18 = *(void (**)(uint64_t *, uint64_t))(v10 + 8);
  v18(&v20, v9);
  v18((uint64_t *)v23, v9);
  return v17 & 1;
}

uint64_t KeyPathComparator.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int KeyPathComparator.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.order.setter in conformance KeyPathComparator<A>(char a1)
{
  return KeyPathComparator.order.setter(a1 & 1);
}

void (*protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>( uint64_t ***a1))(void *a1)
{
  uint64_t v2 = (uint64_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t *)KeyPathComparator.order.modify(v2);
  return protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>;
}

void protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyPathComparator<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyPathComparator<A>( void *a1, void *a2, uint64_t a3)
{
  return static KeyPathComparator.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t specialized closure #1 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = v58;
  int v6 = v60;
  if (v59 != 1)
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = Substring.init<A>(_:)();
    unint64_t v21 = v20;
    unint64_t v23 = v22;
    unint64_t v54 = v24;
    swift_bridgeObjectRetain();
    unint64_t v25 = Substring.init<A>(_:)();
    unint64_t v29 = v26;
    unint64_t v30 = v27;
    unint64_t v31 = v28;
    if (!v5)
    {
      if (v23 == v27 && v54 == v28 && v19 >> 16 == v25 >> 16 && v21 >> 16 == v26 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        uint64_t v34 = 1LL;
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v6) {
            uint64_t v18 = 1LL;
          }
          else {
            uint64_t v18 = -1LL;
          }
LABEL_57:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v18;
        }

        char v44 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v44 & 1) != 0)
        {
LABEL_49:
          uint64_t v45 = 1LL;
          if (v34 == 1) {
            uint64_t v46 = -1LL;
          }
          else {
            uint64_t v46 = v34;
          }
          if (v34 != -1) {
            uint64_t v45 = v46;
          }
          if ((v6 & 1) != 0) {
            uint64_t v18 = v45;
          }
          else {
            uint64_t v18 = v34;
          }
          goto LABEL_57;
        }
      }

      uint64_t v34 = 0LL;
      goto LABEL_49;
    }

    unint64_t v51 = v25;
    unint64_t v53 = v19;
    if ((v5 & 2) != 0)
    {
      unint64_t v50 = v26;
      unint64_t v35 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v48 = v23;
      unint64_t v33 = v19;
      unint64_t v29 = v50;
      unint64_t v32 = v21;
      uint64_t v34 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v35,  v50,  v30,  v31,  (v5 >> 8) & 1,  (v5 >> 7) & 1,  v5 & 1,  (v5 >> 6) & 1,  (v5 & 0x200) != 0,  v53,  v21,  v48,  v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v34) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v47 = v23;
      unint64_t v32 = v21;
      unint64_t v33 = v53;
      uint64_t v34 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v25,  v26,  v27,  v28,  (v5 >> 8) & 1,  (v5 >> 7) & 1,  v5 & 1,  (v5 >> 6) & 1,  (v5 & 0x200) != 0,  v53,  v21,  v47,  v54);
      if (v34)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
    }

    if ((v5 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v34 = 0LL;
      goto LABEL_49;
    }

    unint64_t v55 = v33;
    unint64_t v36 = v33;
    unint64_t v37 = v32 >> 14;
    unint64_t v38 = v36 >> 14;
    if (v36 >> 14 >= v32 >> 14 || v29 >> 14 <= v51 >> 14)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v38 == v37)
      {
        if ((v51 ^ v29) >> 14) {
          uint64_t v34 = -1LL;
        }
        else {
          uint64_t v34 = 0LL;
        }
      }

      else
      {
        uint64_t v34 = 1LL;
      }

      goto LABEL_49;
    }

    unint64_t v49 = v29 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v39 = Substring.UnicodeScalarView.subscript.getter();
    unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
    if (v39 == v40)
    {
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v38 = v55 >> 14;
      if (v55 >> 14 >= v37 || v49 <= v51 >> 14)
      {
LABEL_43:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }

      unsigned int v39 = Substring.UnicodeScalarView.subscript.getter();
      unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
      if (v39 == v40)
      {
        while (1)
        {
          Substring.UnicodeScalarView.formIndex(after:)();
          Substring.UnicodeScalarView.formIndex(after:)();
          unint64_t v38 = v55 >> 14;
          unint64_t v37 = v32 >> 14;
          if (v55 >> 14 >= v32 >> 14 || v49 <= v51 >> 14) {
            goto LABEL_43;
          }
          unsigned int v41 = Substring.UnicodeScalarView.subscript.getter();
          unsigned int v42 = Substring.UnicodeScalarView.subscript.getter();
          if (v41 != v42)
          {
            unsigned int v43 = v42;
            unsigned int v39 = v41;
            goto LABEL_41;
          }
        }
      }
    }

    unsigned int v43 = v40;
LABEL_41:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v39 >= v43) {
      uint64_t v34 = v43 < v39;
    }
    else {
      uint64_t v34 = -1LL;
    }
    goto LABEL_49;
  }

  int v52 = v60;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v8 = v7;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v10 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v13 = v12 - result;
  if (!__OFSUB__(v12, result))
  {
    uint64_t v14 = result;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 488);
    swift_unknownObjectRetain();
    char v17 = (void *)v16(ObjectType, v8);
    swift_unknownObjectRelease();
    uint64_t v18 = (uint64_t)objc_msgSend(v9, sel_compare_options_range_locale_, v10, v5, v14, v13, v17);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    if (v52)
    {
      if (v18 == -1)
      {
        uint64_t v18 = 1LL;
      }

      else if (v18 == 1)
      {
        uint64_t v18 = -1LL;
      }
    }

    goto LABEL_57;
  }

  __break(1u);
  return result;
}

{
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE v51[32];
  uint64_t v52;
  _BYTE v53[32];
  unint64_t v54;
  char v55;
  unsigned __int8 v56;
  _BYTE v57[40];
  outlined init with copy of Any(a1, (uint64_t)v57);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v53);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  swift_dynamicCast();
  outlined init with copy of Any(a3, (uint64_t)v51);
  swift_dynamicCast();
  unint64_t v5 = v56;
  if (!v52)
  {
    unint64_t v20 = 1LL;
    if (!v56) {
      unint64_t v20 = -1LL;
    }
    if (v50) {
      unint64_t v19 = v20;
    }
    else {
      unint64_t v19 = 0LL;
    }
    goto LABEL_51;
  }

  if (!v50)
  {
    if (v56) {
      unint64_t v19 = -1LL;
    }
    else {
      unint64_t v19 = 1LL;
    }
    goto LABEL_51;
  }

  int v6 = v54;
  if ((v55 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v21 = Substring.init<A>(_:)();
    unint64_t v23 = v22;
    unint64_t v25 = v24;
    uint64_t v46 = v26;
    swift_bridgeObjectRetain();
    uint64_t v27 = Substring.init<A>(_:)();
    unint64_t v31 = v28;
    unint64_t v32 = v30;
    if (!v6)
    {
      if (v25 == v29 && v46 == v30 && v21 >> 16 == v27 >> 16 && v23 >> 16 == v28 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        unint64_t v19 = 1LL;
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v19 = -1LL;
          goto LABEL_47;
        }

        unsigned int v42 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0)
        {
LABEL_47:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v5) {
            goto LABEL_51;
          }
          if (v19 == -1) {
            goto LABEL_9;
          }
          goto LABEL_49;
        }
      }

      unint64_t v19 = 0LL;
      goto LABEL_47;
    }

    unsigned int v43 = v27;
    char v44 = v23;
    if ((v6 & 2) != 0)
    {
      unint64_t v33 = v27;
      uint64_t v34 = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v19 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v33,  v31,  v34,  v32,  (v6 >> 8) & 1,  (v6 >> 7) & 1,  v6 & 1,  (v6 >> 6) & 1,  (v6 & 0x200) != 0,  v21,  v23,  v25,  v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v19 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v27,  v28,  v29,  v30,  (v6 >> 8) & 1,  (v6 >> 7) & 1,  v6 & 1,  (v6 >> 6) & 1,  (v6 & 0x200) != 0,  v21,  v23,  v25,  v46);
      if (v19)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
    }

    if ((v6 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v19 = 0LL;
      goto LABEL_47;
    }

    unint64_t v35 = v23 >> 14;
    unint64_t v36 = v21 >> 14;
    if (v21 >> 14 >= v44 >> 14 || v31 >> 14 <= v43 >> 14)
    {
LABEL_57:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v36 == v35)
      {
        if ((v43 ^ v31) >> 14) {
          unint64_t v19 = -1LL;
        }
        else {
          unint64_t v19 = 0LL;
        }
      }

      else
      {
        unint64_t v19 = 1LL;
      }

      goto LABEL_47;
    }

    unint64_t v48 = v31 >> 14;
    unint64_t v49 = v44 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v37 = Substring.UnicodeScalarView.subscript.getter();
    unint64_t v38 = Substring.UnicodeScalarView.subscript.getter();
    if (v37 != v38)
    {
      unsigned int v41 = v38;
      goto LABEL_53;
    }

    Substring.UnicodeScalarView.formIndex(after:)();
    Substring.UnicodeScalarView.formIndex(after:)();
    unint64_t v36 = v21 >> 14;
    unint64_t v35 = v44 >> 14;
    if (v21 >> 14 < v49 && v48 > v43 >> 14)
    {
      unsigned int v39 = Substring.UnicodeScalarView.subscript.getter();
      unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
      if (v39 != v40)
      {
LABEL_62:
        unsigned int v41 = v40;
        unint64_t v37 = v39;
LABEL_53:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        if (v37 >= v41) {
          unint64_t v19 = v41 < v37;
        }
        else {
          unint64_t v19 = -1LL;
        }
        goto LABEL_47;
      }

      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v36 = v21 >> 14;
      unint64_t v35 = v44 >> 14;
      if (v21 >> 14 < v49 && v48 > v43 >> 14)
      {
        unsigned int v39 = Substring.UnicodeScalarView.subscript.getter();
        unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
        if (v39 == v40)
        {
          while (1)
          {
            Substring.UnicodeScalarView.formIndex(after:)();
            Substring.UnicodeScalarView.formIndex(after:)();
            unint64_t v36 = v21 >> 14;
            unint64_t v35 = v44 >> 14;
            if (v21 >> 14 >= v49 || v48 <= v43 >> 14) {
              goto LABEL_56;
            }
            unint64_t v37 = Substring.UnicodeScalarView.subscript.getter();
            unsigned int v41 = Substring.UnicodeScalarView.subscript.getter();
            if (v37 != v41) {
              goto LABEL_53;
            }
          }
        }

        goto LABEL_62;
      }
    }

LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }

  uint64_t v47 = v56;
  uint64_t v7 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v45 = v6;
  LocaleCache.current.getter();
  uint64_t v9 = v8;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v11 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v14 = v13 - result;
  if (!__OFSUB__(v13, result))
  {
    uint64_t v15 = result;
    uint64_t ObjectType = swift_getObjectType();
    char v17 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 488);
    swift_unknownObjectRetain();
    uint64_t v18 = (void *)v17(ObjectType, v9);
    swift_unknownObjectRelease();
    unint64_t v19 = (uint64_t)objc_msgSend(v10, sel_compare_options_range_locale_, v11, v45, v15, v14, v18);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v47)
    {
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }

    if (v19 == -1)
    {
LABEL_9:
      unint64_t v19 = 1LL;
      goto LABEL_51;
    }

  __break(1u);
  return result;
}

    unint64_t v63 = (uint64_t *)(v96 + 64);
    unint64_t v49 = v100;
    unint64_t v50 = v98;
    goto LABEL_57;
  }

  uint64_t v27 = (unint64_t)(v99 + 2);
  uint64_t v28 = v99[2];
  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v92 = (void (*)(uint64_t, uint64_t, void *))_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v92 = *(void (**)(uint64_t, uint64_t, void *))((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v29(v25, v94, v13);
  v29(v23, (uint64_t)v25, v13);
  unint64_t v30 = v95;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v23, 1LL, a5) != 1)
  {
    int v52 = *(void (**)(uint64_t *, char *, uint64_t))(v30 + 32);
    v52(v12, v23, a5);
    unint64_t v53 = (uint64_t *)swift_allocObject();
    unint64_t v54 = v93;
    v53[5] = a5;
    v53[6] = v54;
    unint64_t v55 = __swift_allocate_boxed_opaque_existential_1(v53 + 2);
    v52(v55, (char *)v12, a5);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, v13);
    uint64_t v56 = v96;
    v53[7] = v96;
    uint64_t v57 = v56 >> 62;
    if (v56 >> 62)
    {
      unint64_t v32 = v99;
      unint64_t v37 = v100;
      if ((_DWORD)v57 != 1)
      {
        unint64_t v38 = 1LL;
        if (!__OFSUB__((_DWORD)v57, 1)) {
          goto LABEL_28;
        }
        goto LABEL_55;
      }

      unint64_t v58 = (uint64_t *)((v56 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      unint64_t v58 = (uint64_t *)(v56 + 64);
      unint64_t v32 = v99;
      unint64_t v37 = v100;
    }

    uint64_t v64 = *v58;
    swift_retain();
    int64_t v65 = __OFADD__(v64, 1LL);
    unint64_t v38 = v64 + 1;
    if (!v65)
    {
LABEL_28:
      v53[8] = v38;
      uint64_t v34 = v32[18];
      unint64_t v33 = v32[19];
      v32[18] = v53;
      goto LABEL_29;
    }

        __break(1u);
        goto LABEL_57;
      }

    if (!v21)
    {
LABEL_60:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v27 = v41 | (v42 << 8);
      unint64_t v24 = v48;
      uint64_t v28 = v47;
      goto LABEL_19;
    }

    __break(1u);
LABEL_58:
    unsigned int v42 = 0LL;
    goto LABEL_60;
  }

        unint64_t v24 = v3;
        uint64_t v7 = 0LL;
        goto LABEL_38;
      }

      __break(1u);
    }

    __break(1u);
LABEL_55:
    LOBYTE(v3) = 1;
    goto LABEL_56;
  }

  uint64_t v7 = specialized _parseInteger<A, B>(ascii:radix:)( a1,  a2,  10LL,  (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
  char v17 = v22;
LABEL_39:
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0) {
    return 0LL;
  }
  else {
    return v7;
  }
}

  *(void *)a3 = (a2 & 0x10) == 0;
  *(_BYTE *)(a3 + 8) = 1;
  return result;
}

      if (v5)
      {
        if (v17 == 39 && v5 == (void *)0xE100000000000000LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v27 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14[2] + 1LL,  1,  v14);
          }
          unint64_t v29 = v14[2];
          uint64_t v28 = v14[3];
          if (v29 >= v28 >> 1) {
            uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v28 > 1),  v29 + 1,  1,  v14);
          }
          v14[2] = v29 + 1;
          unint64_t v30 = &v14[2 * v29];
          v30[4] = 39LL;
          v30[5] = 0xE100000000000000LL;
          swift_bridgeObjectRelease();
          uint64_t v13 = v27;
          goto LABEL_7;
        }

        swift_bridgeObjectRelease();
      }

      v49 ^= 1u;
LABEL_7:
      unint64_t v5 = v50;
      uint64_t v15 = String.Iterator.next()();
      object = v15.value._object;
      uint64_t countAndFlagsBits = v15.value._countAndFlagsBits;
      uint64_t v9 = v16;
      if (!v15.value._object) {
        goto LABEL_71;
      }
    }

    if (v10 >= v9 || (v48 & 1) == 0) {
      goto LABEL_53;
    }
    goto LABEL_28;
  }

  uint64_t v10 = 0LL;
  uint64_t v14 = (void *)MEMORY[0x18961AFE8];
  unint64_t v48 = 1;
  uint64_t v47 = (void *)MEMORY[0x18961AFE8];
LABEL_71:
  swift_bridgeObjectRelease();
  if (v14[2])
  {
    unint64_t v5 = (void *)String.count.getter();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_81;
    }
    unint64_t v35 = v47;
LABEL_74:
    unint64_t v37 = v35[2];
    unint64_t v36 = v35[3];
    if (v37 >= v36 >> 1) {
      unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v36 > 1),  v37 + 1,  1,  v35);
    }
    v35[2] = v37 + 1;
    unint64_t v38 = &v35[4 * v37];
    v38[4] = v14;
    *((_BYTE *)v38 + 40) = v48;
    v38[6] = v10;
    v38[7] = v5;
    unsigned int v39 = v35;
  }

  else
  {
    swift_bridgeObjectRelease();
    unsigned int v39 = v47;
  }

  swift_bridgeObjectRelease();
  return v39;
}

      unint64_t v187 = v60;
      uint64_t v188 = v61;
      *(void *)uint64_t v191 = specialized NSDecimal.init(_:)(0x3039uLL);
      *(_DWORD *)&v191[8] = v77;
      *(_WORD *)&v191[12] = v78;
      *(_WORD *)&v191[14] = v79;
      *(_WORD *)&v191[16] = v80;
      *(_WORD *)&v191[18] = v81;
      _So9NSDecimala__isNegative_setter_0(v191);
      unint64_t v184 = *(unsigned int *)v191;
      uint64_t v180 = *(unsigned __int16 *)&v191[4];
      uint64_t v182 = *(unsigned __int16 *)&v191[6];
      uint64_t v82 = *(unsigned __int16 *)&v191[8];
      BOOL v83 = *(unsigned __int16 *)&v191[10];
      uint64_t v84 = *(unsigned __int16 *)&v191[12];
      uint64_t v85 = *(unsigned __int16 *)&v191[14];
      LODWORD(v86) = *(unsigned __int16 *)&v191[16];
      LODWORD(v183) = *(unsigned __int16 *)&v191[18];
      uint64_t v87 = *(void *)(v176 + 8);
      char v88 = swift_getObjectType();
      unint64_t v176 = *(void *)(v87 + 472);
      swift_unknownObjectRetain();
      unint64_t v176 = ((uint64_t (*)(uint64_t, uint64_t))v176)(v88, v87);
      uint64_t v173 = v89;
      swift_unknownObjectRelease();
      uint64_t v90 = *(uint64_t **)(v87 + 464);
      swift_unknownObjectRetain();
      ((void (*)(_BYTE *__return_ptr, uint64_t, uint64_t))v90)(v190, v88, v87);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v190, (uint64_t)v191);
      uint64_t v91 = v178;
      outlined init with copy of ICUNumberFormatter.Signature( v179,  v178,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
      unint64_t v92 = v177;
      uint64_t v93 = (uint64_t *)(v91 + *(int *)(v177 + 20));
      uint64_t v94 = v173;
      *uint64_t v93 = v176;
      v93[1] = v94;
      outlined init with take of LocalePreferences?((uint64_t)v191, v91 + *(int *)(v92 + 24));
      uint64_t v95 = specialized static ICUNumberFormatter._create(with:)(v91);
      outlined destroy of ICUNumberFormatter.Signature(v91, type metadata accessor for ICUNumberFormatter.Signature);
      if (v95)
      {
        uint64_t v96 = *(void *)(v95 + 16);
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        unint64_t v179 = v95;
        unint64_t v97 = v180;
        uint64_t v90 = v181;
        uint64_t v98 = v183;
        ICUNumberFormatterBase.FormatResult.init(formatter:value:)( v96,  v184 | (v180 << 32) | (v182 << 48),  v82 | (v83 << 16) | (v84 << 32) | (v85 << 48),  v86 | ((_DWORD)v183 << 16));
        if (!v90) {
          goto LABEL_88;
        }

        swift_release();
        uint64_t v181 = 0LL;
      }

      else
      {
        unint64_t v97 = v180;
        uint64_t v98 = v183;
      }

      while (1)
      {
        *(_DWORD *)uint64_t v190 = v184;
        *(_WORD *)&v190[4] = v97;
        unint64_t v99 = v182;
        *(_WORD *)&v190[6] = v182;
        *(_WORD *)&v190[8] = v82;
        *(_WORD *)&v190[10] = v83;
        *(_WORD *)&v190[12] = v84;
        *(_WORD *)&v190[14] = v85;
        *(_WORD *)&v190[16] = v86;
        *(_WORD *)&v190[18] = v98;
        if (!_So9NSDecimala__length_getter(v190))
        {
          *(_DWORD *)uint64_t v190 = v184;
          *(_WORD *)&v190[4] = v97;
          *(_WORD *)&v190[6] = v99;
          *(_WORD *)&v190[8] = v82;
          *(_WORD *)&v190[10] = v83;
          *(_WORD *)&v190[12] = v84;
          *(_WORD *)&v190[14] = v85;
          *(_WORD *)&v190[16] = v86;
          *(_WORD *)&v190[18] = v98;
          if (_So9NSDecimala__isNegative_getter(v190))
          {
            unint64_t v122 = 5136718LL;
            uint64_t v123 = 0xE300000000000000LL;
            goto LABEL_102;
          }
        }

        *(_DWORD *)uint64_t v190 = v184;
        *(_WORD *)&v190[4] = v97;
        *(_WORD *)&v190[6] = v99;
        *(_WORD *)&v190[8] = v82;
        *(_WORD *)&v190[10] = v83;
        *(_WORD *)&v190[12] = v84;
        *(_WORD *)&v190[14] = v85;
        *(_WORD *)&v190[16] = v86;
        *(_WORD *)&v190[18] = v98;
        if (!_So9NSDecimala__length_getter(v190))
        {
          uint64_t v123 = 0xE100000000000000LL;
          unint64_t v122 = 48LL;
          goto LABEL_102;
        }

        uint64_t v185 = 0LL;
        uint64_t v186 = 0xE000000000000000LL;
        *(_DWORD *)uint64_t v190 = v184;
        *(_WORD *)&v190[4] = v97;
        *(_WORD *)&v190[6] = v99;
        *(_WORD *)&v190[8] = v82;
        *(_WORD *)&v190[10] = v83;
        *(_WORD *)&v190[12] = v84;
        *(_WORD *)&v190[14] = v85;
        *(_WORD *)&v190[16] = v86;
        *(_WORD *)&v190[18] = v98;
        *(_DWORD *)unint64_t v189 = v184;
        *(_WORD *)&v189[4] = v97;
        *(_WORD *)&v189[6] = v99;
        *(_WORD *)&v189[8] = v82;
        *(_WORD *)&v189[10] = v83;
        *(_WORD *)&v189[12] = v84;
        *(_WORD *)&v189[14] = v85;
        *(_WORD *)&v189[16] = v86;
        *(_WORD *)&v189[18] = v98;
        if ((int)_So9NSDecimala__exponent_getter(v189) >= 1)
        {
          do
          {
            LODWORD(v183) = v98;
            v100._uint64_t countAndFlagsBits = 48LL;
            v100._object = (void *)0xE100000000000000LL;
            String.append(_:)(v100);
            *(_DWORD *)unint64_t v189 = v184;
            *(_WORD *)&v189[4] = v97;
            *(_WORD *)&v189[6] = v99;
            *(_WORD *)&v189[8] = v82;
            *(_WORD *)&v189[10] = v83;
            *(_WORD *)&v189[12] = v84;
            *(_WORD *)&v189[14] = v85;
            *(_WORD *)&v189[16] = v86;
            *(_WORD *)&v189[18] = v183;
            uint64_t v101 = _So9NSDecimala__exponent_getter(v189);
            _So9NSDecimala__exponent_setter((v101 - 1), v190);
            unint64_t v97 = *(unsigned __int16 *)&v190[4];
            unint64_t v99 = *(unsigned __int16 *)&v190[6];
            LOWORD(v82) = *(_WORD *)&v190[8];
            LOWORD(v83) = *(_WORD *)&v190[10];
            LOWORD(v84) = *(_WORD *)&v190[12];
            LOWORD(v85) = *(_WORD *)&v190[14];
            LOWORD(v86) = *(_WORD *)&v190[16];
            uint64_t v98 = *(unsigned __int16 *)&v190[18];
            unint64_t v184 = *(unsigned int *)v190;
            *(_DWORD *)unint64_t v189 = *(_DWORD *)v190;
            *(_WORD *)&v189[4] = *(_WORD *)&v190[4];
            *(_WORD *)&v189[6] = *(_WORD *)&v190[6];
            *(_WORD *)&v189[8] = *(_WORD *)&v190[8];
            *(_WORD *)&v189[10] = *(_WORD *)&v190[10];
            *(_WORD *)&v189[12] = *(_WORD *)&v190[12];
            *(_WORD *)&v189[14] = *(_WORD *)&v190[14];
            *(_WORD *)&v189[16] = *(_WORD *)&v190[16];
            *(_WORD *)&v189[18] = *(_WORD *)&v190[18];
          }

          while ((int)_So9NSDecimala__exponent_getter(v189) > 0);
        }

        *(_DWORD *)unint64_t v189 = v184;
        *(_WORD *)&v189[4] = v97;
        *(_WORD *)&v189[6] = v99;
        *(_WORD *)&v189[8] = v82;
        *(_WORD *)&v189[10] = v83;
        *(_WORD *)&v189[12] = v84;
        *(_WORD *)&v189[14] = v85;
        *(_WORD *)&v189[16] = v86;
        *(_WORD *)&v189[18] = v98;
        unint64_t v102 = _So9NSDecimala__exponent_getter(v189);
        uint64_t v103 = v184;
        if (!v102)
        {
          _So9NSDecimala__exponent_setter(1LL, v190);
          uint64_t v103 = *(unsigned int *)v190;
          unint64_t v97 = *(unsigned __int16 *)&v190[4];
          unint64_t v99 = *(unsigned __int16 *)&v190[6];
          LOWORD(v82) = *(_WORD *)&v190[8];
          LOWORD(v83) = *(_WORD *)&v190[10];
          LOWORD(v84) = *(_WORD *)&v190[12];
          LOWORD(v85) = *(_WORD *)&v190[14];
          LOWORD(v86) = *(_WORD *)&v190[16];
          uint64_t v98 = *(unsigned __int16 *)&v190[18];
        }

        unint64_t v184 = v103;
        *(_DWORD *)unint64_t v189 = v103;
        *(_WORD *)&v189[4] = v97;
        uint64_t v182 = v99;
        *(_WORD *)&v189[6] = v99;
        *(_WORD *)&v189[8] = v82;
        *(_WORD *)&v189[10] = v83;
        *(_WORD *)&v189[12] = v84;
        *(_WORD *)&v189[14] = v85;
        *(_WORD *)&v189[16] = v86;
        LODWORD(v183) = v98;
        *(_WORD *)&v189[18] = v98;
        uint64_t v104 = v184;
        uint64_t v105 = v97;
        uint64_t v106 = v182;
        uint64_t v107 = v183;
        while (1)
        {
          unint64_t v184 = v104;
          uint64_t v180 = v105;
          LODWORD(v183) = v107;
          *(_DWORD *)unint64_t v189 = v104;
          *(_WORD *)&v189[4] = v105;
          *(_WORD *)&v189[6] = v106;
          *(_WORD *)&v189[8] = v82;
          *(_WORD *)&v189[10] = v83;
          *(_WORD *)&v189[12] = v84;
          *(_WORD *)&v189[14] = v85;
          *(_WORD *)&v189[16] = v86;
          *(_WORD *)&v189[18] = v107;
          if (!_So9NSDecimala__exponent_getter(v189))
          {
            uint64_t v182 = v106;
            v108._uint64_t countAndFlagsBits = 46LL;
            v108._object = (void *)0xE100000000000000LL;
            String.append(_:)(v108);
            LOWORD(v106) = v182;
          }

          *(_DWORD *)unint64_t v189 = v184;
          *(_WORD *)&v189[4] = v180;
          *(_WORD *)&v189[6] = v106;
          *(_WORD *)&v189[8] = v82;
          *(_WORD *)&v189[10] = v83;
          *(_WORD *)&v189[12] = v84;
          *(_WORD *)&v189[14] = v85;
          *(_WORD *)&v189[16] = v86;
          *(_WORD *)&v189[18] = v183;
          uint64_t v109 = _So9NSDecimala__exponent_getter(v189);
          _So9NSDecimala__exponent_setter((v109 + 1), v190);
          uint64_t v110 = *(unsigned int *)v190;
          LOWORD(v85) = *(_WORD *)&v190[6];
          unint64_t v183 = *(unsigned __int16 *)&v190[8];
          unint64_t v184 = *(unsigned __int16 *)&v190[4];
          uint64_t v182 = *(unsigned __int16 *)&v190[10];
          uint64_t v180 = *(unsigned __int16 *)&v190[12];
          unint64_t v178 = *(unsigned __int16 *)&v190[14];
          LODWORD(v179) = *(unsigned __int16 *)&v190[16];
          LODWORD(v177) = *(unsigned __int16 *)&v190[18];
          NSDecimal.asVariableLengthInteger()( *(unsigned int *)v190 | ((unint64_t)*(unsigned __int16 *)&v190[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v190[6] << 48),  *(unsigned __int16 *)&v190[8] | ((unint64_t)*(unsigned __int16 *)&v190[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v190[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v190[14] << 48),  *(unsigned __int16 *)&v190[16] | (*(unsigned __int16 *)&v190[18] << 16));
          uint64_t v112 = v111;
          uint64_t v82 = *(void *)(v111 + 16);
          if (v82) {
            break;
          }
          LODWORD(v84) = 0;
          BOOL v83 = MEMORY[0x18961AFE8];
          __int128 v116 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
          if (v116)
          {
LABEL_78:
            if (!*(_WORD *)(v83 + 2 * v116 + 30))
            {
              do
              {
                *(void *)(v83 + 16) = v116 - 1;
                if (v116 == 1) {
                  break;
                }
              }

              while (!*(unsigned __int16 *)(v83 + 28 + 2 * v116--));
            }
          }

      __break(1u);
      JUMPOUT(0x183204A90LL);
    }

  unint64_t v77 = HIBYTE(v66) & 0xF;
  if ((v66 & 0x2000000000000000LL) == 0) {
    unint64_t v77 = v64 & 0xFFFFFFFFFFFFLL;
  }
  if (!v77)
  {
    swift_bridgeObjectRelease();
    uint64_t v81 = v13;
    swift_retain_n();
    swift_retain_n();
    unint64_t v19 = v81;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v114 = v3;
      v116._uint64_t countAndFlagsBits = (uint64_t)v19;
      v116._object = v5;
      unint64_t v117 = v7;
      uint64_t v82 = v19;
      swift_retain();
      swift_retain();
      BOOL v83 = URL.path(percentEncoded:)(1);
      __int128 v116 = v83;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v83._countAndFlagsBits, (unint64_t)v83._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v115._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v84 = specialized Set._Variant.insert(_:)(&v118, 0x2FuLL);
      uint64_t v85 = v115._countAndFlagsBits;
      uint64_t v86 = v116._countAndFlagsBits;
      uint64_t v87 = v116._object;
      char v88 = ((unint64_t)v116._object >> 56) & 0xF;
      if (v88)
      {
        uint64_t v113 = v82;
        char v115 = v116;
        MEMORY[0x1895F8858](v84);
        uint64_t v109 = (uint64_t)&v115;
        uint64_t v110 = v85;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v108,  v86,  (unint64_t)v87);
        if (v89 == 1)
        {
          uint64_t v91 = (unint64_t)v115._object;
          uint64_t v90 = v115._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v90, v91, v85);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v82 = v113;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      unint64_t v92 = objc_msgSend(v19, sel__parameterString);
      if (v92)
      {
        uint64_t v93 = v92;
        uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
        uint64_t v96 = v95;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (unint64_t v97 = objc_msgSend(v19, sel_path)) != 0)
        {
          uint64_t v98 = v97;
          unint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
          uint64_t v101 = v100;

          v116._uint64_t countAndFlagsBits = (uint64_t)v99;
          v116._object = v101;
          swift_bridgeObjectRetain();
          v102._uint64_t countAndFlagsBits = 59LL;
          v102._object = (void *)0xE100000000000000LL;
          String.append(_:)(v102);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v103._uint64_t countAndFlagsBits = (uint64_t)v94;
          v103._object = v96;
          String.append(_:)(v103);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v116._uint64_t countAndFlagsBits = 59LL;
          v116._object = (void *)0xE100000000000000LL;
          v104._uint64_t countAndFlagsBits = (uint64_t)v94;
          v104._object = v96;
          String.append(_:)(v104);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        goto LABEL_84;
      }

      uint64_t v105 = objc_msgSend(v19, sel_path);
      if (!v105)
      {
        swift_release();
        swift_release();

        goto LABEL_84;
      }

      uint64_t v82 = v105;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
      swift_release();
      swift_release();
    }

LABEL_84:
    uint64_t v106 = (void *)objc_opt_self();
    uint64_t v107 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
     objc_msgSend( v106,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v107,  v19,  0,  0,  0,  0);
LABEL_85:
    swift_unknownObjectRelease();

    swift_willThrow();
    return;
  }

  uint64_t v78 = MEMORY[0x186E20F44](v113);
  if (v78)
  {
    char v79 = (void *)v78;
    swift_bridgeObjectRetain();
    unint64_t v80 = v79;
    specialized String.withFileSystemRepresentation<A>(_:)(v64, v66, v64, v66, v79);
    swift_bridgeObjectRelease();
  }

  else
  {
    LODWORD(v110) = 0;
    uint64_t v109 = 48LL;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

          unint64_t v120 = (v33 - 1) & v33;
          __int128 v121 = v34;
          unint64_t v31 = __clz(__rbit64(v33)) + (v34 << 6);
        }

        unint64_t v36 = v2[7];
        unint64_t v117 = v31;
        unint64_t v37 = v36 + 48 * v31;
        unint64_t v38 = *(void *)v37;
        unsigned int v39 = *(void *)(v37 + 8);
        unsigned int v40 = *(void *)(v37 + 16);
        unsigned int v41 = *(void *)(v37 + 24);
        unsigned int v42 = *(void *)(v37 + 32);
        unsigned int v43 = *(_BYTE *)(v37 + 40);
        uint64_t v123 = v118;
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, v43);
        type metadata accessor for AnyKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
        swift_dynamicCast();
        if ((v43 & 1) != 0)
        {
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 1);
          swift_bridgeObjectRelease();
          uint64_t v2 = (void *)v119;
          unint64_t v30 = v120;
          unint64_t v26 = v121;
LABEL_38:
          *(unint64_t *)((char *)v113 + ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v117;
          uint64_t v10 = __OFADD__(v114++, 1LL);
          if (v10) {
            goto LABEL_138;
          }
        }

        else
        {
          outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 0);
          swift_retain();
          char v44 = MEMORY[0x186E1C1A4](v38, v122);
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 0);
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 0);
          swift_bridgeObjectRelease();
          uint64_t v2 = (void *)v119;
          unint64_t v30 = v120;
          unint64_t v26 = v121;
          if ((v44 & 1) == 0) {
            goto LABEL_38;
          }
        }
      }
    }
  }

  v110[1] = v110;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  uint64_t v113 = (void *)((char *)v110 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v113, v4);
  unint64_t v5 = 0LL;
  int v6 = v2[8];
  uint64_t v114 = 0LL;
  char v115 = (uint64_t)(v2 + 8);
  uint64_t v7 = 1LL << *((_BYTE *)v2 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  uint64_t v9 = v8 & v6;
  __int128 v116 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v120 = (v9 - 1) & v9;
    __int128 v121 = v5;
    uint64_t v11 = __clz(__rbit64(v9)) | (v5 << 6);
LABEL_26:
    uint64_t v16 = v2[7];
    unint64_t v117 = v11;
    char v17 = v16 + 48 * v11;
    uint64_t v18 = *(void *)v17;
    unint64_t v19 = *(void *)(v17 + 8);
    unint64_t v20 = *(void *)(v17 + 16);
    unint64_t v21 = *(void *)(v17 + 24);
    unint64_t v22 = *(void *)(v17 + 32);
    unint64_t v23 = *(_BYTE *)(v17 + 40);
    uint64_t v123 = v118;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, v23);
    type metadata accessor for AnyKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
    swift_dynamicCast();
    unint64_t v24 = v122;
    if ((v23 & 1) != 0)
    {
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 1);
      swift_bridgeObjectRelease();
      uint64_t v2 = (void *)v119;
      uint64_t v9 = v120;
      unint64_t v5 = v121;
LABEL_7:
      *(unint64_t *)((char *)v113 + ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v117;
      uint64_t v10 = __OFADD__(v114++, 1LL);
      if (v10) {
        goto LABEL_135;
      }
    }

    else
    {
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 0);
      swift_retain();
      unint64_t v25 = MEMORY[0x186E1C1A4](v18, v24);
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 0);
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 0);
      swift_bridgeObjectRelease();
      uint64_t v2 = (void *)v119;
      uint64_t v9 = v120;
      unint64_t v5 = v121;
      if ((v25 & 1) == 0) {
        goto LABEL_7;
      }
    }
  }

  uint64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1LL)) {
    goto LABEL_132;
  }
  if (v12 >= v116) {
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(v115 + 8 * v12);
  uint64_t v14 = v5 + 1;
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v14 = v5 + 2;
  if (v5 + 2 >= v116) {
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(v115 + 8 * v14);
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v14 = v5 + 3;
  if (v5 + 3 >= v116) {
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(v115 + 8 * v14);
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v14 = v5 + 4;
  if (v5 + 4 >= v116) {
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(v115 + 8 * v14);
  if (v13)
  {
LABEL_25:
    unint64_t v120 = (v13 - 1) & v13;
    __int128 v121 = v14;
    uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    goto LABEL_26;
  }

  uint64_t v15 = v5 + 5;
  if (v5 + 5 >= v116) {
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(v115 + 8 * v15);
  if (v13)
  {
    uint64_t v14 = v5 + 5;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      goto LABEL_137;
    }
    if (v14 >= v116) {
      break;
    }
    uint64_t v13 = *(void *)(v115 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_25;
    }
  }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  unint64_t v20 = *((void *)v2 + 2);
  unint64_t v19 = *((void *)v2 + 3);
  if (v20 >= v19 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v19 > 1),  v20 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v20 + 1;
  v2[v20 + 32] = 17;
  if ((v1 & 0x80) == 0)
  {
LABEL_20:
    if ((v1 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }

  __break(1u);
LABEL_57:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

          v52(v53, v9);
          uint64_t v81 = type metadata accessor for DecodingError();
          swift_allocError();
          BOOL v83 = v82;
          *(void *)&uint64_t v98 = 0LL;
          *((void *)&v98 + 1) = 0xE000000000000000LL;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52LL);
          v84._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
          v84._object = (void *)0x80000001839D13E0LL;
          String.append(_:)(v84);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v85._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v85);
          swift_bridgeObjectRelease();
          v86._object = (void *)0x80000001839D1400LL;
          v86._uint64_t countAndFlagsBits = 0xD000000000000012LL;
          String.append(_:)(v86);
          v87._uint64_t countAndFlagsBits = 0x3233746E49LL;
          v87._object = (void *)0xE500000000000000LL;
          String.append(_:)(v87);
          v88._uint64_t countAndFlagsBits = 46LL;
          v88._object = (void *)0xE100000000000000LL;
          String.append(_:)(v88);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v81 - 8) + 104LL))( v83,  *MEMORY[0x189619360],  v81);
LABEL_57:
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          return;
        }

          __break(1u);
          goto LABEL_57;
        }

    if (v6 <= v11 >> 16) {
      goto LABEL_154;
    }
    uint64_t v11 = String.UTF8View._foreignIndex(after:)();
LABEL_41:
    if (v17 == 37) {
      goto LABEL_26;
    }
  }

  uint64_t v9 = 0LL;
LABEL_147:
  swift_bridgeObjectRelease();
  if (!v9)
  {
    if ((v10 & 0x8000000000000000LL) == 0) {
      return specialized String.init<A, B>(_validating:as:)(0LL, v10, a1);
    }
LABEL_160:
    __break(1u);
  }

  return 0LL;
}

    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v24 = 512LL;
    goto LABEL_91;
  }

  uint64_t v12 = v11;
  if (v11 == 17) {
    goto LABEL_100;
  }
  if (v11)
  {
    swift_bridgeObjectRetain();
    unint64_t v24 = 4LL;
    switch(v12)
    {
      case 1:
      case 13:
        unint64_t v24 = 513LL;
        goto LABEL_91;
      case 2:
        goto LABEL_91;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_90;
      case 28:
      case 69:
        unint64_t v24 = 640LL;
        goto LABEL_91;
      case 30:
        unint64_t v24 = 642LL;
        goto LABEL_91;
      case 63:
        unint64_t v24 = 514LL;
        goto LABEL_91;
      default:
        if (v12 != 102) {
          goto LABEL_90;
        }
        unint64_t v53 = 0LL;
        unint64_t v24 = 512LL;
        break;
    }

    goto LABEL_99;
  }

  if (a5)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = a3;
    __int128 v222 = a2;
    __int128 v224 = a6;
    uint64_t v47 = MEMORY[0x186E20F44](a6);
    if (v47)
    {
      unint64_t v48 = (void *)v47;
      type metadata accessor for NSFileAttributeKey(0LL);
      lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
      swift_bridgeObjectRetain();
      unint64_t v49 = _NativeDictionary.bridged()();
      uint64_t v227 = 0LL;
      unint64_t v50 = objc_msgSend( v48,  sel_setAttributes_ofItemAtPath_error_,  v49,  String._bridgeToObjectiveCImpl()(),  &v227);

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if ((v50 & 1) != 0)
      {
        unint64_t v51 = (id)v227;
      }

      else if (v227)
      {
        int v52 = (id)v227;
        swift_willThrow();
      }

      else
      {
        if (one-time initialization token for _nilObjCError != -1) {
          swift_once();
        }
        swift_willThrow();
      }

      uint64_t v227 = 47LL;
      uint64_t v228 = 0xE100000000000000LL;
      __int128 v225 = a2;
      unint64_t v226 = a3;
      uint64_t v205 = a2;
      v206 = a3;
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v87 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        StringProtocol._ephemeralString.getter();
        char v88 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v89 = objc_msgSend(v87, sel_componentsSeparatedByString_, v88);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (!v89)
        {
          int v6 = MEMORY[0x18961AFE8];
          goto LABEL_116;
        }

        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v90 = swift_dynamicCastClass();
        if (v90)
        {
          int v6 = v90;

          goto LABEL_116;
        }

        swift_unknownObjectRelease();
        objc_msgSend(v89, sel_copy);
        uint64_t v91 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        int v6 = specialized _arrayForceCast<A, B>(_:)(v91);

        goto LABEL_115;
      }

      swift_bridgeObjectRetain();
      unint64_t v54 = String.subscript.getter();
      uint64_t v56 = v55;
      uint64_t v57 = 47LL;
      uint64_t v217 = specialized static StringProtocol.== infix<A>(_:_:)(47LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
      unint64_t v58 = Substring.init<A>(_:)();
      uint64_t v215 = v60;
      __int128 v219 = v61;
      uint64_t v62 = v56 >> 14;
      unint64_t v63 = v54 >> 14;
      if (v54 >> 14 >= v56 >> 14)
      {
        a3 = MEMORY[0x18961AFE8];
      }

      else
      {
        uint64_t v207 = v59;
        unint64_t v209 = v58;
        unint64_t v211 = v58 ^ v59;
        a3 = MEMORY[0x18961AFE8];
        uint64_t v57 = v54;
        unint64_t v204 = v54 >> 14;
        uint64_t v64 = v54 >> 14;
        char v221 = v54;
        uint64_t v213 = v62;
        while (1)
        {
          if (v62 < v64) {
            goto LABEL_234;
          }
          int v6 = a3;
          swift_bridgeObjectRetain();
          int64_t v65 = Substring.subscript.getter();
          uint64_t v67 = v66;
          uint64_t v69 = v68;
          int64_t v71 = v70;
          swift_bridgeObjectRelease();
          uint64_t v72 = v65 ^ v67;
          if ((v65 ^ v67) < 0x4000 || v211 < 0x4000) {
            break;
          }
          if ((v217 & 1) != 0)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v54 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v209,  v207,  v215,  v219,  0,  0,  0,  0,  0,  v65,  v67,  v69,  v71);
            uint64_t v74 = v73;
            a3 = v75;
            swift_bridgeObjectRelease_n();
          }

          else
          {
            unint64_t v54 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v209,  v207,  v215,  v219,  0,  0,  0,  0,  0,  v65,  v67,  v69,  v71);
            uint64_t v74 = v76;
            a3 = v77;
          }

          swift_bridgeObjectRelease();
          if ((a3 & 1) != 0 || (unint64_t v63 = v74 >> 14, v54 >> 14 == v74 >> 14))
          {
            unint64_t v63 = v64;
            a3 = v6;
            unint64_t v54 = v221;
            goto LABEL_109;
          }

          if (v54 >> 14 < v64) {
            goto LABEL_236;
          }
          uint64_t v78 = (void *)v6;
          char v79 = Substring.subscript.getter();
          unint64_t v80 = MEMORY[0x186E1B610](v79);
          uint64_t v82 = v81;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v6 + 16) + 1LL,  1,  (void *)v6);
          }
          uint64_t v84 = v78[2];
          BOOL v83 = v78[3];
          uint64_t v85 = v78;
          if (v84 >= v83 >> 1) {
            uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v83 > 1),  v84 + 1,  1,  v78);
          }
          v85[2] = v84 + 1;
          a3 = (unint64_t)v85;
          uint64_t v86 = &v85[2 * v84];
          v86[4] = v80;
          v86[5] = v82;
          swift_bridgeObjectRelease();
          uint64_t v57 = v74;
          uint64_t v64 = v74 >> 14;
          uint64_t v62 = v213;
          unint64_t v54 = v221;
          if (v63 >= v213) {
            goto LABEL_110;
          }
        }

        if (v72 >= 0x4000) {
          a3 = MEMORY[0x18961AFE8];
        }
        else {
          a3 = v6;
        }
        if (v72 >= 0x4000) {
          unint64_t v63 = v204;
        }
        else {
          unint64_t v63 = v64;
        }
        unint64_t v54 = v221;
        swift_bridgeObjectRelease();
LABEL_109:
        uint64_t v62 = v213;
      }

uint64_t sub_182F1EEA0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in AnySortComparator.init<A>(_:)(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_182F1EEB8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AnySortComparator.init<A>(_:)(uint64_t *a1, char a2)
{
  return closure #2 in AnySortComparator.init<A>(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t specialized thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = MEMORY[0x1896190F8];
  char v5 = a2 & 1;
  a3[3] = MEMORY[0x1896190F0];
  a3[4] = v4;
  *a3 = swift_allocObject();
  outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)a1, (uint64_t)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  swift_dynamicCast();
  char v14 = v5;
  *(void *)(a1 + 24) = &type metadata for String.StandardComparator;
  *(void *)(a1 + 32) = lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  uint64_t v6 = v12;
  char v7 = v13;
  *(void *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v5;
  uint64_t v9 = v6;
  char v10 = v7;
  char v11 = v5;
  return AnyHashable.init<A>(_:)();
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v4 = MEMORY[0x1896190F8];
  char v5 = a2 & 1;
  a3[3] = MEMORY[0x1896190F0];
  a3[4] = v4;
  *a3 = swift_allocObject();
  outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)a1, (uint64_t)&v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
  swift_dynamicCast();
  uint64_t v15 = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = lazy protocol witness table accessor for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>();
  char v7 = v13;
  uint64_t v8 = v14;
  *(void *)a1 = v13;
  *(_BYTE *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 9) = v5;
  char v10 = v7;
  char v11 = v8;
  uint64_t v12 = v5;
  return AnyHashable.init<A>(_:)();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = a2 & 1;
  uint64_t v7 = MEMORY[0x1896190F8];
  a4[3] = MEMORY[0x1896190F0];
  a4[4] = v7;
  *a4 = swift_allocObject();
  return a3(a1, v6);
}

uint64_t specialized closure #3 in AnySortComparator.init<A>(_:)(uint64_t a1)
{
  return v2;
}

{
  unsigned __int8 v2;
  _BYTE v3[32];
  outlined init with copy of Any(a1, (uint64_t)v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
  swift_dynamicCast();
  return v2;
}

uint64_t sub_182F1F1BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AnySortComparator.init<A>(_:)(uint64_t a1)
{
  return closure #3 in AnySortComparator.init<A>(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_182F1F1D4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)(uint64_t a1)
{
  return partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in KeyPathComparator.init<A>(_:order:));
}

{
  return partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in KeyPathComparator.init<A>(_:order:));
}

unint64_t lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator()
{
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.StandardComparator,  &type metadata for String.StandardComparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.StandardComparator,  &type metadata for String.StandardComparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.StandardComparator,  &type metadata for String.StandardComparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.StandardComparator,  &type metadata for String.StandardComparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }

  return result;
}

uint64_t sub_182F1F248()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F258()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F268()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F28C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2( a1,  *(void *)(v2 + 40),  *(unsigned __int8 *)(v2 + 48),  *(void *)(v2 + 56),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32));
}

unint64_t lazy protocol witness table accessor for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>;
  if (!lazy protocol witness table cache variable for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>);
  }

  return result;
}

uint64_t sub_182F1F30C()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F31C()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F32C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)(uint64_t a1)
{
  return partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))closure #1 in KeyPathComparator.init<A>(_:order:));
}

{
  return partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))closure #1 in KeyPathComparator.init<A>(_:order:));
}

uint64_t sub_182F1F348()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F358()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F368()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F384()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F394()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F3A4()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F3B4()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F3C4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a2 & 1;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  uint64_t v7 = MEMORY[0x1896190F8];
  a3[3] = MEMORY[0x1896190F0];
  a3[4] = v7;
  *a3 = swift_allocObject();
  return v6(a1, v5);
}

uint64_t sub_182F1F448()
{
  return swift_deallocObject();
}

uint64_t sub_182F1F458()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2( a1,  *(void *)(v2 + 48),  *(unsigned __int8 *)(v2 + 56),  *(void *)(v2 + 64),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40));
}

uint64_t type metadata accessor for KeyPathComparator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyPathComparator);
}

uint64_t instantiation function for generic protocol witness table for KeyPathComparator<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for KeyPathComparator<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in KeyPathComparator<A>()
{
}

uint64_t sub_182F1F4F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = KeyPathComparator.order.getter();
  *a1 = result;
  return result;
}

uint64_t sub_182F1F518(char *a1)
{
  return KeyPathComparator.order.setter(*a1);
}

uint64_t sub_182F1F53C()
{
  return 8LL;
}

void *sub_182F1F548(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata instantiation function for KeyPathComparator()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for KeyPathComparator(uint64_t a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for KeyPathComparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for KeyPathComparator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  uint64_t v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[9];
  a1[8] = a2[8];
  a1[9] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[11];
  a1[10] = a2[10];
  a1[11] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[13];
  a1[12] = a2[12];
  a1[13] = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v10 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v10;
      }

      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (uint64_t *)swift_release();
      }

      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }

  return result;
}

uint64_t assignWithTake for KeyPathComparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyPathComparator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyPathComparator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_182F1F9C0()
{
  return swift_deallocObject();
}

id NSAttributedString.init(contentsOf:options:baseURL:)(void **a1, char *a2, void **a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *a1;
  char v4 = *a2;
  char v5 = a2[1];
  char v6 = a2[2];
  uint64_t v7 = (void *)*((void *)a2 + 1);
  int v8 = (void *)*((void *)a2 + 2);
  char v9 = a2[24];
  uint64_t v10 = *a3;
  swift_release();
  swift_release();
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  LOBYTE(v18[0]) = v4;
  BYTE1(v18[0]) = v5;
  BYTE2(v18[0]) = v6;
  v18[1] = v7;
  v18[2] = v8;
  char v19 = v9;
  id v11 = NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)v18);
  if (v10)
  {
    id v12 = v10;
    outlined consume of URL?(v10);
  }

  else
  {
    id v12 = 0LL;
  }

  id v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v18[0] = 0LL;
  id v14 = objc_msgSend(v13, sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_, v3, v11, v12, v18);

  if (v14)
  {
    id v15 = v18[0];
  }

  else
  {
    if (v18[0])
    {
      v18[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v16 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v14;
}

unint64_t type metadata accessor for NSAttributedStringMarkdownParsingOptions()
{
  unint64_t result = lazy cache variable for type metadata for NSAttributedStringMarkdownParsingOptions;
  if (!lazy cache variable for type metadata for NSAttributedStringMarkdownParsingOptions)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store( result,  (unint64_t *)&lazy cache variable for type metadata for NSAttributedStringMarkdownParsingOptions);
  }

  return result;
}

void NSAttributedString.init(markdown:options:baseURL:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

id sub_182F1FCB0()
{
  id v17 = v2;
  LOWORD(v18) = v0;
  BYTE2(v18) = BYTE2(v0);
  BYTE3(v18) = BYTE3(v0);
  BYTE4(v18) = BYTE4(v0);
  BYTE5(v18) = BYTE5(v0);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v17, BYTE6(v0));
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  LOBYTE(v17) = v5;
  BYTE1(v17) = v6;
  BYTE2(v17) = v3;
  uint64_t v18 = v1;
  uint64_t v19 = v16;
  char v20 = v15;
  id v8 = NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)&v17);
  if (v4)
  {
    id v9 = v4;
    outlined consume of URL?(v4);
  }

  else
  {
    id v9 = 0LL;
  }

  id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v17 = 0LL;
  id v11 = objc_msgSend(v10, sel_initWithMarkdown_options_baseURL_error_, v7, v8, v9, &v17);

  if (v11)
  {
    id v12 = v17;
    outlined consume of Data._Representation((uint64_t)v2, v0);
  }

  else
  {
    if (v17)
    {
      v17;
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v13 = (id)_nilObjCError;
    }

    swift_willThrow();
    outlined consume of Data._Representation((uint64_t)v2, v0);
  }

  return v11;
}

id NSAttributedString.init(markdown:options:baseURL:)(uint64_t a1, uint64_t a2, char *a3, void **a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  char v4 = *a3;
  char v5 = a3[1];
  char v6 = a3[2];
  id v7 = (void *)*((void *)a3 + 1);
  id v8 = (void *)*((void *)a3 + 2);
  char v9 = a3[24];
  id v10 = *a4;
  uint64_t v11 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  LOBYTE(v19[0]) = v4;
  BYTE1(v19[0]) = v5;
  BYTE2(v19[0]) = v6;
  v19[1] = v7;
  v19[2] = v8;
  char v20 = v9;
  id v12 = NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)v19);
  if (v10)
  {
    id v13 = v10;
    outlined consume of URL?(v10);
  }

  else
  {
    id v13 = 0LL;
  }

  id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v19[0] = 0LL;
  id v15 = objc_msgSend(v14, sel_initWithMarkdownString_options_baseURL_error_, v11, v12, v13, v19);
  swift_unknownObjectRelease();

  if (v15)
  {
    id v16 = v19[0];
  }

  else
  {
    if (v19[0])
    {
      v19[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v17 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v15;
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.init(root:other:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains.init(root:other:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.StringLocalizedStandardContains);
}

void type metadata accessor for PredicateExpressions.StringLocalizedStandardContains()
{
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.evaluate(_:)(uint64_t *a1, void *a2)
{
  unint64_t v31 = a1;
  uint64_t v4 = a2[5];
  uint64_t v29 = a2[3];
  uint64_t v30 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v28 = (char *)&v26 - v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[2];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  id v10 = *(uint64_t **)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  id v12 = (char *)&v26 - v11;
  uint64_t v13 = *v31;
  unint64_t v31 = v2;
  v32[0] = v13;
  id v14 = v33;
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v32, v8, v7);
  if (!v14)
  {
    unint64_t v33 = v12;
    id v15 = v10;
    uint64_t v17 = AssociatedTypeWitness;
    uint64_t v16 = (uint64_t)v28;
    v32[0] = v13;
    (*(void (**)(void *, uint64_t))(v30 + 16))(v32, v29);
    unint64_t v31 = v15;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v32[0] = static LocaleCache.cache;
    v32[0] = LocaleCache.current.getter();
    v32[1] = v19;
    unint64_t v24 = a2[6];
    unint64_t v25 = (void *)a2[7];
    uint64_t v20 = v9;
    uint64_t v21 = v9;
    unint64_t v22 = v33;
    StringProtocol.range<A>(of:options:range:locale:)(v16, 0x81uLL, 0LL, 0LL, 1, (uint64_t)v32, v20, v17, v24, v25);
    LOBYTE(v2) = (v23 & 1) == 0;
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v16, v17);
    ((void (*)(char *, uint64_t))v31[1])(v22, v21);
  }

  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringLocalizedStandardContains<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.StringLocalizedStandardContains.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.StringLocalizedStandardContains);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.description.getter(int a1)
{
  return PredicateExpressions.StringLocalizedStandardContains.description.getter( a1,  52LL,  0xD000000000000026LL,  (void *)0x80000001839C8DC0LL);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)( a1,  a2,  a3,  a4,  32LL,  0xD00000000000001BLL,  (void *)0x80000001839C8DF0LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.encode(to:)(void *a1)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.encode(to:)(a1);
}

{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.init(from:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void, void *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v35 = a5;
  unint64_t v36 = a4;
  unsigned int v39 = a3;
  uint64_t v34 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](a1);
  unint64_t v37 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v38 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v40 = v12;
  v41[0] = v12;
  v41[1] = v13;
  v41[2] = v14;
  unsigned int v42 = v15;
  unsigned int v43 = v16;
  char v44 = v17;
  uint64_t v19 = v18(0LL, v41);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  unint64_t v22 = (char *)&v31 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  char v23 = (uint64_t)v45;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v23) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  unint64_t v31 = v20;
  unint64_t v32 = v19;
  uint64_t v45 = a1;
  unint64_t v33 = v22;
  unint64_t v24 = a2;
  unint64_t v25 = v37;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v41, v42);
  uint64_t v26 = v38;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v27 = v33;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v33, v26, v40);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v41, v42);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v28 = v32;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v27[*(int *)(v32 + 68)], v25, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  uint64_t v29 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v35, v27, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v27, v28);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.StringLocalizedStandardContains<>.init(from:),  a5,  a6);
}

uint64_t PredicateExpressions.StringLocalizedCompare.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.other.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.StringLocalizedCompare.init(root:other:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains.init(root:other:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.StringLocalizedCompare);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.init(root:other:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(void, void *))
{
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  v20[4] = a7;
  v20[5] = a8;
  uint64_t v18 = a10(0LL, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))( a9 + *(int *)(v18 + 68),  a2,  a4);
}

id PredicateExpressions.StringLocalizedCompare.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[5];
  uint64_t v27 = a2[3];
  uint64_t v28 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v29 = (char *)&v23 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = *a1;
  uint64_t v31 = v14;
  uint64_t v15 = v30;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(&v31, v9, v8);
  if (!v15)
  {
    uint64_t v24 = v6;
    unint64_t v25 = v13;
    uint64_t v30 = v11;
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v31 = v14;
    (*(void (**)(uint64_t *, uint64_t))(v28 + 16))(&v31, v27);
    uint64_t v18 = v10;
    uint64_t v19 = v25;
    StringProtocol._ephemeralString.getter();
    uint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v21 = v29;
    StringProtocol._ephemeralString.getter();
    uint64_t v22 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v20, sel_localizedCompare_, v22);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v16);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v18);
  }

  return v2;
}

id protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringLocalizedCompare<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id result = PredicateExpressions.StringLocalizedCompare.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t static PredicateExpressions.build_localizedCompare<A, B>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.StringLocalizedCompare);
}

uint64_t static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(void, void *))
{
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  v20[4] = a7;
  v20[5] = a8;
  uint64_t v18 = a10(0LL, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))( a9 + *(int *)(v18 + 68),  a2,  a4);
}

uint64_t PredicateExpressions.StringLocalizedCompare.description.getter(int a1)
{
  return PredicateExpressions.StringLocalizedStandardContains.description.getter( a1,  43LL,  0xD00000000000001DLL,  (void *)0x80000001839C8E10LL);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.description.getter( int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  v6._uint64_t countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x3A726568746F202CLL;
  v7._object = (void *)0xE900000000000020LL;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 41LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 0LL;
}

uint64_t PredicateExpressions.StringLocalizedCompare<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)( a1,  a2,  a3,  a4,  23LL,  0xD000000000000012LL,  (void *)0x80000001839C8E30LL);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = a6;
  v14._object = a7;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 41LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  return v13;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringLocalizedCompare<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.StringLocalizedCompare<>.encode(to:)(void *a1)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.StringLocalizedCompare<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.StringLocalizedCompare<>.init(from:),  a5,  a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, uint64_t, void, void), uint64_t a5, uint64_t a6)
{
  return a4(a1, a2[2], a2[3], a2[4], *(void *)(a3 - 8), a6, a2[5], *(void *)(a3 - 24));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>( void *a1)
{
  return PredicateExpressions.StringLocalizedCompare<>.encode(to:)(a1);
}

void type metadata accessor for PredicateExpressions.StringLocalizedCompare()
{
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedStandardContains<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedStandardContains<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedStandardContains<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedCompare<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedCompare<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedCompare<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedCompare<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a3[1];
  uint64_t v10 = *(void *)(*a3 + 24LL);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  v15[0] = *(void *)(*a3 + 16LL);
  uint64_t v9 = v15[0];
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = v12;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x186E20D4C](a4, a2, v15);
  v14[0] = v9;
  v14[1] = v10;
  v14[2] = v11;
  v14[3] = v12;
  uint64_t result = MEMORY[0x186E20D4C](a5, a2, v14);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t type metadata instantiation function for PredicateExpressions.StringLocalizedStandardContains()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for PredicateExpressions.StringLocalizedStandardContains()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.StringLocalizedStandardContains( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(void *)(v7 + 64) > 0x18)
  {
    uint64_t v13 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }

  else
  {
    uint64_t v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( ((unint64_t)v4 + v9) & v14,  ((unint64_t)a2 + v9) & v14,  v5);
  }

  return v4;
}

uint64_t destroy for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))((*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL));
}

uint64_t initializeWithCopy for PredicateExpressions.StringLocalizedStandardContains( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.StringLocalizedStandardContains( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.StringLocalizedStandardContains( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.StringLocalizedStandardContains( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.StringLocalizedStandardContains( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_182F213D8 + 4 * byte_183724300[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.StringLocalizedStandardContains( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>( void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>(a1);
}

uint64_t PredicateExpressions.DictionaryKeySubscript.wrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.DictionaryKeySubscript.key.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 68));
}

void PredicateExpressions.DictionaryKeySubscript.init(wrapped:key:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_182F21708(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 68),  v2,  v1);
}

void type metadata accessor for PredicateExpressions.DictionaryKeySubscript()
{
}

void *PredicateExpressions.DictionaryKeySubscript.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = a3;
  uint64_t v6 = a2[6];
  uint64_t v7 = a2[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unsigned int v11 = (char *)&v14 - v10;
  uint64_t v12 = *a1;
  uint64_t v17 = v12;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t *, void))(a2[5] + 16LL))(&v18, &v17, a2[2]);
  if (!v3)
  {
    uint64_t v15 = v18;
    uint64_t v17 = v12;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(&v17, v7, v6);
    MEMORY[0x186E1B3AC](v11, v15, AssociatedTypeWitness, a2[4], a2[7]);
    swift_bridgeObjectRelease();
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  }

  return result;
}

void *protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.DictionaryKeySubscript<A, B, C>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.DictionaryKeySubscript.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_subscript<A, B, C>(_:_:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_182F21914(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 68),  v2,  v1);
}

uint64_t PredicateExpressions.DictionaryKeySubscript.description.getter()
{
  v0._object = (void *)0x80000001839C8E50LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000020LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A79656B202CLL;
  v1._object = (void *)0xE700000000000000LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.DictionaryKeySubscript<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  v13[8] = a3;
  v13[5] = a4;
  v13[4] = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](a1);
  v13[6] = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  v13[7] = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v13[9] = v7;
  v13[10] = v7;
  v13[11] = v8;
  v13[12] = v9;
  v13[13] = v10;
  v13[14] = v11;
  v13[15] = v12;
  type metadata accessor for PredicateExpressions.DictionaryKeySubscript();
}

uint64_t sub_182F21BE0(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 208) = v6;
  *(void *)(v4 - 200) = a1;
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 192) = v8;
  *(void *)(v4 - 184) = v2;
  uint64_t v10 = *(void *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  uint64_t v11 = *(void *)(v4 - 152);
  uint64_t v12 = *(void *)(v4 - 136);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v13 = *(void *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v13, v11, v12);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  uint64_t v14 = v10;
  uint64_t v15 = *(void *)(v4 - 184);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v16 = *(void *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 176) + 32LL))(v13 + *(int *)(v16 + 68), v14, v15);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  uint64_t v17 = *(void *)(v4 - 208);
  (*(void (**)(void, uint64_t, uint64_t))(v17 + 16))(*(void *)(v4 - 168), v13, v16);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v13, v16);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.DictionaryKeySubscript<A, B, C>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.DictionaryKeySubscript<A, B, C>( void *a1)
{
  return PredicateExpressions.DictionaryKeySubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.key.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 76));
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.default.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 80));
}

void PredicateExpressions.DictionaryKeyDefaultValueSubscript.init(wrapped:key:default:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_182F21EAC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v5 + *(int *)(a1 + 80),  v3,  v1);
}

void type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript()
{
}

void *PredicateExpressions.DictionaryKeyDefaultValueSubscript.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v5 = a2[4];
  uint64_t v35 = a2[7];
  uint64_t v36 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v8 = a2[3];
  uint64_t v40 = a2[6];
  unint64_t v38 = (char *)&v30 - v9;
  uint64_t v39 = v8;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  unsigned int v41 = (char *)&v30 - v13;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = *a1;
  uint64_t v43 = v17;
  uint64_t v18 = v42;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t *, void))(a2[5] + 16LL))(&v44, &v43, a2[2]);
  if (!v18)
  {
    uint64_t v31 = v10;
    uint64_t v32 = v11;
    uint64_t v42 = v14;
    uint64_t v43 = v17;
    uint64_t v30 = v16;
    uint64_t v20 = v38;
    uint64_t v21 = v44;
    uint64_t v22 = v41;
    (*(void (**)(uint64_t *, uint64_t))(v40 + 16))(&v43, v39);
    uint64_t v39 = v17;
    uint64_t v40 = 0LL;
    uint64_t v23 = v21;
    uint64_t v24 = v31;
    MEMORY[0x186E1B3AC](v22, v23, v31, AssociatedTypeWitness, a2[8]);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v24);
    uint64_t v25 = v42;
    int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v20, 1LL, AssociatedTypeWitness);
    uint64_t v27 = v37;
    if (v26 == 1)
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
      uint64_t v44 = v39;
      return (void *)(*(uint64_t (**)(uint64_t *, uint64_t))(v35 + 16))(&v44, v36);
    }

    else
    {
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
      uint64_t v29 = v30;
      v28(v30, v20, AssociatedTypeWitness);
      return (void *)((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v27, v29, AssociatedTypeWitness);
    }
  }

  return result;
}

void *protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_subscript<A, B, C>(_:_:default:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_182F22214(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v5 + *(int *)(a1 + 80),  v3,  v1);
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.description.getter()
{
  v0._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v0._object = (void *)0x80000001839C8E80LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A79656B202CLL;
  v1._object = (void *)0xE700000000000000LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x80000001839C8EB0LL;
  v2._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 41LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0LL;
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  v18[11] = a3;
  v18[4] = a4;
  id v18[3] = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](a1);
  v18[5] = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18[9] = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v4);
  v18[7] = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18[8] = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v7);
  v18[10] = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18[12] = v11;
  v18[13] = v12;
  v18[6] = v13;
  v18[14] = v13;
  v18[15] = v14;
  v18[16] = v15;
  v18[17] = v16;
  v18[18] = v17;
  type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript();
}

uint64_t sub_182F225D8(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 232) = v6;
  *(void *)(v4 - 224) = v8;
  *(void *)(v4 - 72) = v3;
  uint64_t v10 = *(void *)(v4 - 168);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 144, *(void *)(v4 - 120));
  uint64_t v11 = *(void *)(v4 - 160);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v4 - 176) + 32LL))(*(void *)(v4 - 224), v11, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 144, *(void *)(v4 - 120));
  uint64_t v12 = *(void *)(v4 - 184);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(void, uint64_t, uint64_t))(v10 + 32))(*(void *)(v4 - 224) + *(int *)(a1 + 76), v12, v2);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 144, *(void *)(v4 - 120));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v13 = *(void *)(v4 - 224);
  (*(void (**)(uint64_t, void, void))(*(void *)(v4 - 216) + 32LL))( v13 + *(int *)(a1 + 80),  *(void *)(v4 - 200),  *(void *)(v4 - 192));
  __swift_destroy_boxed_opaque_existential_1(v4 - 144);
  uint64_t v14 = *(void *)(v4 - 232);
  (*(void (**)(void, uint64_t, uint64_t))(v14 + 16))(*(void *)(v4 - 208), v13, a1);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.DictionaryKeySubscript<A, B, C>);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v10 = *(void *)(v6 + 16);
  uint64_t v9 = *(void *)(v6 + 24);
  v13[0] = v8;
  v13[1] = v7;
  v13[2] = v10;
  v13[3] = v9;
  a1[2] = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>,  a2,  v13);
  v12[0] = v8;
  v12[1] = v7;
  v12[2] = v10;
  v12[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>,  a2,  v12);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>( void *a1)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.encode(to:)(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v7 = a3[2];
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>);
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v11 = *(void *)(v6 + 16);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v13 = *(void *)(v7 + 16);
  uint64_t v12 = *(void *)(v7 + 24);
  v16[0] = v9;
  v16[1] = v8;
  v16[2] = v11;
  v16[3] = v10;
  v16[4] = v13;
  v16[5] = v12;
  a1[2] = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>,  a2,  v16);
  v15[0] = v9;
  v15[1] = v8;
  v15[2] = v11;
  v15[3] = v10;
  void v15[4] = v13;
  v15[5] = v12;
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>,  a2,  v15);
  a1[3] = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.DictionaryKeySubscript( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_182F22A98 + 4 * byte_183724640[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.DictionaryKeySubscript( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t type metadata instantiation function for PredicateExpressions.DictionaryKeyDefaultValueSubscript()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for PredicateExpressions.DictionaryKeyDefaultValueSubscript()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.DictionaryKeyDefaultValueSubscript( uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = a3[3];
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = *(void *)(a3[4] - 8LL);
  int v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = *(void *)(v7 + 64) + v11;
  uint64_t v13 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v6 + 80) | v11);
  if (v13 <= 7
    && ((v12 + (v9 & ~v8)) & ~(unint64_t)v11) + *(void *)(v10 + 64) <= 0x18
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80) | v11) & 0x100000) == 0)
  {
    uint64_t v17 = ~v8;
    unint64_t v18 = ~(unint64_t)v11;
    uint64_t v21 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    unint64_t v19 = ((unint64_t)a2 + v9) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( ((unint64_t)v4 + v9) & v17,  v19,  v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))( ((((unint64_t)v4 + v9) & v17) + v12) & v18,  (v19 + v12) & v18,  v21);
  }

  else
  {
    uint64_t v16 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }

  return v4;
}

uint64_t destroy for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8LL);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  return (*(uint64_t (**)(unint64_t))(*(void *)(a2[4] - 8LL) + 8LL))((v7
                                                                                       + *(void *)(v6 + 64)
                                                                                       + *(unsigned __int8 *)(*(void *)(a2[4] - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2[4] - 8LL) + 80LL));
}

uint64_t initializeWithCopy for PredicateExpressions.DictionaryKeyDefaultValueSubscript( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  uint64_t v12 = *(void *)(a3[4] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.DictionaryKeyDefaultValueSubscript( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(a3[4] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.DictionaryKeyDefaultValueSubscript( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(a3[4] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.DictionaryKeyDefaultValueSubscript( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(a3[4] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.DictionaryKeyDefaultValueSubscript( uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3[3] - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = a3[4];
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8) {
    unsigned int v8 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v4 + 64) + v11;
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  unsigned int v15 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_25;
  }
  uint64_t v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(void *)(v10 + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)(a1 + v16);
      if (!v18) {
        goto LABEL_25;
      }
      goto LABEL_16;
    }

    if (v19 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16)) {
        goto LABEL_25;
      }
      goto LABEL_16;
    }

    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        uint64_t v22 = (v12 + a1) & ~v11;
        if (v7 == v8) {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        }
        else {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 48))( (v22 + v13 + v14) & ~v14,  *(unsigned int *)(v10 + 84),  v9);
        }
      }

      return 0LL;
    }
  }

  int v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16)) {
    goto LABEL_25;
  }
LABEL_16:
  int v20 = (v18 - 1) << v17;
  if ((_DWORD)v16)
  {
    else {
      int v21 = 4;
    }
    __asm { BR              X11 }
  }

  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.DictionaryKeyDefaultValueSubscript( _WORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = *(void *)(a4[2] - 8LL);
  uint64_t v6 = *(void *)(a4[3] - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(void *)(a4[4] - 8LL);
  if (*(_DWORD *)(v8 + 84) > v7) {
    unsigned int v7 = *(_DWORD *)(v8 + 84);
  }
  size_t v9 = ((*(void *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        unsigned int v10 = 4u;
      }

      else if (v12 >= 0x100)
      {
        unsigned int v10 = 2;
      }

      else
      {
        unsigned int v10 = v12 > 1;
      }
    }

    else
    {
      unsigned int v10 = 1u;
    }
  }

  else
  {
    unsigned int v10 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        int v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }

        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }

        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }

    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X21 }

uint64_t @objc _NSFileManagerBridge.createSymbolicLink(at:withDestinationURL:)( void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(void **, void *))
{
  unsigned int v10 = v18;
  uint64_t v9 = v19;
  uint64_t v11 = v20;
  URL.init(reference:)(a4, &v18);
  unsigned int v12 = v18;
  uint64_t v13 = v19;
  uint64_t v14 = v20;
  int v18 = v10;
  uint64_t v19 = v9;
  uint64_t v20 = v11;
  v17[0] = v12;
  v17[1] = v13;
  v17[2] = v14;
  id v15 = a1;
  a6(&v18, v17);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return 1LL;
}

uint64_t @objc _NSFileManagerBridge.isReadableFile(atPath:)(void *a1, uint64_t a2, void *a3, int a4)
{
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v8 = v7;
  id v9 = a1;
  LOBYTE(a4) = _FileManagerImpl._fileAccessibleForMode(_:_:)((uint64_t)v6, v8, a4);

  swift_bridgeObjectRelease();
  return a4 & 1;
}

uint64_t _NSFileManagerBridge.createFile(atPath:contents:attributes:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v83 = *MEMORY[0x1895F89C0];
  uint64_t v74 = OBJC_IVAR____NSFileManagerBridge__impl;
  uint64_t v82 = a5;
  if (!a5)
  {
    __int128 v80 = 0u;
    __int128 v81 = 0u;
    goto LABEL_12;
  }

  if (!*(void *)(a5 + 16))
  {
    __int128 v80 = 0u;
    __int128 v81 = 0u;
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }

  swift_bridgeObjectRetain();
  unsigned int v10 = @"NSFileProtectionKey";
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v12 & 1) == 0)
  {
    __int128 v80 = 0u;
    __int128 v81 = 0u;

    goto LABEL_12;
  }

  outlined init with copy of Any(*(void *)(a5 + 56) + 32 * v11, (uint64_t)&v80);

  if (!*((void *)&v81 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v80);
    goto LABEL_13;
  }

  if (!swift_dynamicCast())
  {
LABEL_13:
    uint64_t v19 = 1LL;
    goto LABEL_14;
  }

  id v13 = (id)a1;
  uint64_t v14 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionNone");
  uint64_t v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
LABEL_42:
    swift_unknownObjectRelease();
    uint64_t v45 = 268435457LL;
    goto LABEL_43;
  }

  char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) != 0) {
    goto LABEL_42;
  }
  id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionComplete");
  uint64_t v48 = v47;
  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v48 == v49)
  {
    swift_bridgeObjectRelease_n();
LABEL_54:
    swift_unknownObjectRelease();
    uint64_t v45 = 536870913LL;
    goto LABEL_43;
  }

  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) != 0) {
    goto LABEL_54;
  }
  id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteUnlessOpen");
  uint64_t v53 = v52;
  if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v53 == v54)
  {
    swift_bridgeObjectRelease_n();
LABEL_59:
    swift_unknownObjectRelease();
    uint64_t v45 = 805306369LL;
    goto LABEL_43;
  }

  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v55 & 1) != 0) {
    goto LABEL_59;
  }
  id v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteUntilFirstUserAuthentication");
  uint64_t v58 = v57;
  if (v56 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v58 == v59)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v60 & 1) == 0)
    {
      id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteWhenUserInactive");
      uint64_t v63 = v62;
      if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v63 == v64)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_70;
      }

      goto LABEL_69;
    }
  }

  swift_unknownObjectRelease();
  uint64_t v45 = 1073741825LL;
  while (1)
  {
LABEL_43:
    a1 = (uint64_t)v13;
    uint64_t v19 = v45;
    if (v82)
    {
      __int128 v80 = 0u;
      __int128 v81 = 0u;
      specialized Dictionary.subscript.setter((uint64_t)&v80, v10);
    }

id _NSFileManagerBridge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _NSFileManagerBridge()
{
  return objc_opt_self();
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:)( void *a1, uint64_t a2)
{
  return closure #1 in writeToFile(path:data:options:attributes:reportProgress:)( a1,  a2,  *(void **)(v2 + 16),  *(void *)(v2 + 24),  *(void **)(v2 + 32),  *(_BYTE *)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56),  *(_BYTE *)(v2 + 64));
}

unint64_t lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey;
  if (!lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey)
  {
    type metadata accessor for NSFileAttributeKey(255LL);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSFileAttributeKey, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey);
  }

  return result;
}

unint64_t specialized _NSFileManagerBridge.contentsOfDirectory(atPath:)( uint64_t a1, unint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(inited + 64) = 0LL;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v6 = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int v6 = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int v6 = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v7 = 3 * v6;
  if ((unsigned __int128)(v6 * (__int128)3LL) >> 64 != (3 * v6) >> 63)
  {
    __break(1u);
    goto LABEL_50;
  }

  if (v7 < -1)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v7 < 1024 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unsigned int v10 = (char *)&v44 - v9;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v10, v7 + 1, 1, a1, a2);
    char v12 = v11;
    uint64_t v13 = swift_bridgeObjectRelease();
    if ((v12 & 1) != 0 || (v13 = (uint64_t)opendir(v10), (uint64_t v14 = (DIR *)v13) == 0LL))
    {
LABEL_29:
      *(void *)(inited + 24) = 0LL;
      *(void *)(inited + 32) = 0xE000000000000000LL;
      *(void *)(inited + 40) = 0LL;
      *(void *)(inited + 48) = 0xE000000000000000LL;
      *(_BYTE *)(inited + 56) = 0;
      int v25 = MEMORY[0x186E1B0E8](v13);
      int v26 = v25;
      uint64_t v27 = 263LL;
      switch(v25)
      {
        case 1:
        case 13:
          uint64_t v27 = 257LL;
          goto LABEL_37;
        case 2:
          uint64_t v27 = 260LL;
          goto LABEL_37;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_34;
        case 27:
          goto LABEL_37;
        default:
          if (v25 == 63)
          {
            uint64_t v27 = 258LL;
          }

          else
          {
            if (v25 == 102)
            {
              id v28 = 0LL;
              uint64_t v29 = 256LL;
              goto LABEL_43;
            }

unint64_t specialized _NSFileManagerBridge.displayName(atPath:)(uint64_t a1, unint64_t a2)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  LOBYTE(v66[0]) = 1;
  unint64_t v70 = 0LL;
  uint64_t v71 = 0LL;
  uint64_t v72 = 0LL;
  swift_bridgeObjectRetain();
  uint64_t v63 = a1;
  URL.init(filePath:directoryHint:relativeTo:)(a1, a2, (unsigned __int8 *)v66, (uint64_t)&v70, (uint64_t *)&v67);
  uint64_t v64 = (void *)v67;
  uint64_t v69 = (void *)*MEMORY[0x189603CE0];
  uint64_t v4 = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v5 = static _SetStorage.allocate(capacity:)();
  uint64_t v6 = v5 + 56;
  id v7 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  Hasher.init(_seed:)();
  id v65 = v7;
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v9 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v10 = v8 & ~v9;
  unint64_t v11 = v10 >> 6;
  uint64_t v12 = *(void *)(v5 + 56 + 8 * (v10 >> 6));
  uint64_t i = 1LL << v10;
  if (((1LL << v10) & v12) == 0) {
    goto LABEL_30;
  }
  id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v16 == v17) {
    goto LABEL_16;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0) {
    goto LABEL_17;
  }
  uint64_t v20 = ~v9;
  unint64_t v10 = (v10 + 1) & v20;
  unint64_t v11 = v10 >> 6;
  uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
  uint64_t i = 1LL << v10;
  if ((v12 & (1LL << v10)) == 0) {
    goto LABEL_30;
  }
  id v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
  uint64_t v23 = v22;
  if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v23 == v24) {
    goto LABEL_16;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
LABEL_17:
    id v31 = v65;

    goto LABEL_32;
  }

  unint64_t v10 = (v10 + 1) & v20;
  unint64_t v11 = v10 >> 6;
  uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
  uint64_t i = 1LL << v10;
  if ((v12 & (1LL << v10)) != 0)
  {
    id v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
    uint64_t v29 = v28;
    if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v29 == v30) {
      goto LABEL_16;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0) {
      goto LABEL_17;
    }
    unint64_t v10 = (v10 + 1) & v20;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
    uint64_t i = 1LL << v10;
    if ((v12 & (1LL << v10)) != 0)
    {
      id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
      uint64_t v35 = v34;
      if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v35 == v36)
      {
LABEL_16:
        swift_bridgeObjectRelease_n();
        goto LABEL_17;
      }

      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v37 & 1) != 0) {
        goto LABEL_17;
      }
      unint64_t v10 = (v10 + 1) & v20;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
      for (uint64_t i = 1LL << v10; (v12 & (1LL << v10)) != 0; uint64_t i = 1LL << v10)
      {
        id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v5 + 48) + 8 * v10));
        uint64_t v40 = v39;
        if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v40 == v41) {
          goto LABEL_16;
        }
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v43 & 1) != 0) {
          goto LABEL_17;
        }
        unint64_t v10 = (v10 + 1) & v20;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v6 + 8 * (v10 >> 6));
      }
    }
  }

uint64_t specialized _NSFileManagerBridge.contents(atPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = MEMORY[0x18961AFF0];
  *(void *)&__int128 v4 = a1;
  *((void *)&v4 + 1) = a2;
  uint64_t v5 = 0LL;
  char v6 = 0;
  swift_bridgeObjectRetain();
  uint64_t v2 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( &v4,  1,  0LL,  1,  0LL,  MEMORY[0x18961AFE8],  &v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t partial apply for closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)@<X0>( const char *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  a2);
}

void partial apply for closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)( uint64_t a1)
{
}

uint64_t partial apply for closure #1 in _FileManagerImpl.attributesOfFileSystem(forPath:)@<X0>( const char *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _FileManagerImpl.attributesOfFileSystem(forPath:)( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  a2);
}

void partial apply for closure #1 in _FileManagerImpl.attributesOfItem(atPath:)( const char *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _POSIXDirectoryContentsSequence.Iterator.Element?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618458], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }

  return result;
}

void partial apply for closure #1 in _FileManagerImpl.createDirectory(atPath:withIntermediateDirectories:attributes:)( char *a1)
{
}

uint64_t sub_182F26E80()
{
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in _SearchPathURLs(for:in:expandTilde:)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _SearchPathURLs(for:in:expandTilde:)(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t outlined init with take of _FileManagerImpl(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of _FileManagerImpl(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of _FileManagerImpl(uint64_t a1)
{
  return a1;
}

void FormatterCache.formatter(for:creator:)( uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v41 = a5;
  uint64_t v38 = a3;
  uint64_t v39 = a2;
  uint64_t v44 = a1;
  uint64_t v7 = a4[3];
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  char v37 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v40 = (char *)&v30 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = v5[1];
  uint64_t v33 = *v5;
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v19 = a4[2];
  uint64_t v20 = a4[4];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 24));
  uint64_t v21 = *(void *)(v16 + 16);
  uint64_t v34 = (void *)(v16 + 16);
  uint64_t v35 = v19;
  uint64_t v36 = v20;
  MEMORY[0x186E1B3AC](v44, v21, v19, v7, v20);
  if (v42)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));
    __break(1u);
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, v11);
    uint64_t v22 = v43;
    int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v15, 1LL, v7);
    uint64_t v24 = *(uint64_t (**)(void, void))(v12 + 8);
    if (v23 == 1)
    {
      os_unfair_lock_t v31 = (os_unfair_lock_t)(v16 + 24);
      char v32 = v18;
      int v25 = v24;
      uint64_t v26 = v24(v15, v11);
      uint64_t v15 = v40;
      v39(v26);
      id v42 = v25;
      swift_retain();
      os_unfair_lock_lock(v31);
      uint64_t v27 = *(void *)(v16 + 16);
      if ((v27 & 0xC000000000000001LL) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = __CocoaSet.count.getter();
      }

      else
      {
        uint64_t v28 = *(void *)(v27 + 16);
        swift_bridgeObjectRetain();
      }

      uint64_t v29 = v34;
      if (v33 < v28)
      {
        swift_bridgeObjectRelease();
        *uint64_t v29 = MEMORY[0x18961AFF0];
      }

      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v37, v15, v7);
      type metadata accessor for Dictionary._Variant();
      Dictionary._Variant.setValue(_:forKey:)();
      os_unfair_lock_unlock(v31);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v18 = v32;
      uint64_t v24 = v42;
    }

    v24(v18, v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v41, v15, v7);
  }

Swift::Void __swiftcall FormatterCache.removeAllObjects()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t FormatterCache.subscript.getter(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  MEMORY[0x186E1B3AC](a1, *(void *)(v4 + 16), v5, v6, v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  return swift_release();
}

uint64_t FormatterCache.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Dictionary();
  type metadata accessor for LockedState._Buffer(0LL, v2, v3, v4);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  *a1 = 100LL;
  a1[1] = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for FormatterCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for FormatterCache()
{
  return swift_release();
}

void *assignWithCopy for FormatterCache(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for FormatterCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatterCache(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatterCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for FormatterCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatterCache);
}

id _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  uint64_t v11 = (void *)MEMORY[0x18961A9A8];
  uint64_t v12 = *(void *)(*a1 + *MEMORY[0x18961A9A8]);
  MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v25 - v14, v15, v12);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  uint64_t v16 = v27;
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v12;
  void v17[3] = *(void *)(*v11 + v10 + 8);
  v17[4] = a5;
  v17[5] = a3;
  v17[6] = a4;
  uint64_t v18 = (objc_class *)type metadata accessor for NSKeyValueObservation();
  id v19 = objc_allocWithZone(v18);
  swift_unknownObjectWeakInit();
  v26.receiver = v19;
  v26.super_class = v18;
  swift_retain();
  swift_retain();
  id v20 = objc_msgSendSuper2(&v26, sel_init);
  uint64_t v21 = (void *)MEMORY[0x186E1F27C]();
  objc_allocWithZone((Class)type metadata accessor for NSKeyValueObservation.Helper());
  swift_retain();
  id v22 = v16;
  swift_retain();
  id v23 = NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)( v22,  (uint64_t)a1,  a2,  (uint64_t)partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:),  (uint64_t)v17);
  swift_unknownObjectWeakAssign();

  objc_autoreleasePoolPop(v21);
  swift_release();
  swift_release();

  return v20;
}

uint64_t NSKeyValueObservedChange.kind.getter()
{
  return *(void *)v0;
}

uint64_t NSKeyValueObservedChange.newValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t NSKeyValueObservedChange.oldValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t NSKeyValueObservedChange.indexes.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(a1 + 36));
  return swift_retain();
}

uint64_t NSKeyValueObservedChange.isPrior.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

void @objc static NSObject.__old_unswizzled_automaticallyNotifiesObservers(forKey:)()
{
}

void @objc static NSObject.__old_unswizzled_keyPathsForValuesAffectingValue(forKey:)()
{
}

uint64_t @objc NSObject.__NS_swiftOverlay_automaticallyNotifiesObserversForKey(_:original:)( void *a1, int a2, void *a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v9 = v8;
  _Block_copy(v6);
  id v10 = a1;
  LOBYTE(v7) = specialized NSObject.__NS_swiftOverlay_automaticallyNotifiesObserversForKey(_:original:)( v7,  v9,  v10,  (uint64_t)v6);
  _Block_release(v6);
  _Block_release(v6);

  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t closure #1 in NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v3)
  {
    *a1 = result;
    a1[1] = v3;
  }

  else
  {
    swift_retain();
    _StringGuts.grow(_:)(42LL);
    v4._object = (void *)0x80000001839C9430LL;
    v4._uint64_t countAndFlagsBits = 0xD000000000000028LL;
    String.append(_:)(v4);
    type metadata accessor for AnyKeyPath();
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

id @objc NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)( void *a1, int a2, void *a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v9 = v8;
  _Block_copy(v6);
  id v10 = a1;
  specialized NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)( (uint64_t)v7,  v9,  v10,  (uint64_t)v6);
  _Block_release(v6);
  _Block_release(v6);

  swift_bridgeObjectRelease();
  return (id)_NativeSet.bridged()();
}

uint64_t __KVOKeyPathBridgeMachinery.BridgeKey.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = v1
     + OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value;
  uint64_t v4 = *(void *)(v1
                 + OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value);
  uint64_t v3 = *(void *)(v2 + 8);
  outlined init with copy of Any?(a1, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
    swift_bridgeObjectRetain();
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v6 = *(void *)&v10[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value];
      uint64_t v5 = *(void *)&v10[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value
                         + 8];
      swift_bridgeObjectRetain();

      if (v4 == v6 && v3 == v5)
      {
        swift_bridgeObjectRelease_n();
        char v8 = 1;
      }

      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      char v8 = 0;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
    char v8 = 0;
  }

  return v8 & 1;
}

Swift::Int __KVOKeyPathBridgeMachinery.BridgeKey.hash.getter()
{
  Swift::UInt v0 = type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
  Hasher._combine(_:)(v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher.finalize()();
}

id __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit()
{
  return __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey);
}

uint64_t $defer #1 () in static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)( uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend((id)objc_opt_self(), sel_currentThread);
  id v5 = objc_msgSend(v4, sel_threadDictionary);

  outlined init with copy of Any?(a2, (uint64_t)v13);
  uint64_t v6 = v14;
  if (v14)
  {
    id v7 = __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v8 = *(void *)(v6 - 8);
    MEMORY[0x1895F8858](v7);
    id v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v8 + 16))(v10);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  objc_msgSend(v5, sel_setObject_forKeyedSubscript_, v11, a1);

  return swift_unknownObjectRelease();
}

id __KVOKeyPathBridgeMachinery.__deallocating_deinit()
{
  return __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for __KVOKeyPathBridgeMachinery);
}

id __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0LL);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

objc_method *closure #1 in variable initialization expression of static NSKeyValueObservation.Helper.swizzler()
{
  Swift::UInt v0 = (NSString *)String._bridgeToObjectiveCImpl()();
  Class v1 = NSClassFromString(v0);
  swift_unknownObjectRelease();
  if (v1)
  {
    swift_getObjCClassMetadata();
    if (swift_dynamicCastTypeToObjCProtocolConditional()) {
      objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__noteProcessHasUsedKVOSwiftOverlay);
    }
  }

  type metadata accessor for NSKeyValueObservation.Helper();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t result = class_getInstanceMethod(ObjCClassFromMetadata, sel__swizzle_me_observeValueForKeyPath_of_change_context_);
  if (result)
  {
    id v4 = result;
    Implementation = method_getImplementation(result);
    TypeEncoding = method_getTypeEncoding(v4);
    return (objc_method *)class_addMethod( ObjCClassFromMetadata,  sel_observeValueForKeyPath_ofObject_change_context_,  Implementation,  TypeEncoding);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t one-time initialization function for observationInfoGetter()
{
  uint64_t result = Selector.init(_:)();
  static NSKeyValueObservation.Helper.observationInfoGetter = result;
  return result;
}

uint64_t one-time initialization function for observationInfoSetter()
{
  uint64_t result = Selector.init(_:)();
  static NSKeyValueObservation.Helper.observationInfoSetter = result;
  return result;
}

id NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject;
  *(void *)&v5[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject] = 0LL;
  uint64_t v9 = OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock;
  id v10 = v5;
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  *uint64_t v11 = 0;
  *(void *)&v5[v9] = v11;
  if (one-time initialization token for swizzler != -1) {
    swift_once();
  }
  uint64_t v30 = a2;
  uint64_t v12 = _bridgeKeyPathToString(_:)();
  uint64_t v14 = v13;
  if (one-time initialization token for observationInfoGetter != -1) {
    swift_once();
  }
  uint64_t v15 = static NSKeyValueObservation.Helper.observationInfoGetter;
  id v16 = objc_msgSend(a1, sel_methodForSelector_, static NSKeyValueObservation.Helper.observationInfoGetter);
  uint64_t v17 = (void *)objc_opt_self();
  id v18 = objc_msgSend(v17, sel_instanceMethodForSelector_, v15);
  if (v16)
  {
    if (!v18 || v16 != v18) {
      goto LABEL_17;
    }
  }

  else if (v18)
  {
    goto LABEL_17;
  }

  if (one-time initialization token for observationInfoSetter != -1) {
    swift_once();
  }
  uint64_t v19 = static NSKeyValueObservation.Helper.observationInfoSetter;
  id v20 = objc_msgSend(a1, sel_methodForSelector_, static NSKeyValueObservation.Helper.observationInfoSetter);
  id v21 = objc_msgSend(v17, sel_instanceMethodForSelector_, v19);
  if (v20)
  {
    if (v21 && v20 == v21) {
      goto LABEL_15;
    }
LABEL_17:
    *(void *)&v5[v8] = a1;
    goto LABEL_18;
  }

  if (v21) {
    goto LABEL_17;
  }
LABEL_15:
  swift_unknownObjectWeakAssign();
LABEL_18:
  id v22 = (uint64_t *)&v10[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_path];
  *id v22 = v12;
  v22[1] = v14;
  id v23 = &v10[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_callback];
  *(void *)id v23 = a4;
  *((void *)v23 + 1) = a5;
  swift_bridgeObjectRetain();
  swift_retain();

  v32.receiver = v10;
  v32.super_class = (Class)type metadata accessor for NSKeyValueObservation.Helper();
  id v24 = objc_msgSendSuper2(&v32, sel_init);
  objc_setAssociatedObject(a1, v24, v24, (void *)0x301);
  swift_bridgeObjectRetain();
  id v25 = v24;
  id v26 = a1;
  specialized static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)( v12,  v14,  v30,  v26,  (uint64_t)v25,  v12,  v14,  a3);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease_n();
  return v25;
}

void NSKeyValueObservation.Helper.invalidate()()
{
  Class v1 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock];
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject];
  if (v2)
  {
    id v3 = v2;
LABEL_4:
    id v4 = v3;
    closure #1 in NSKeyValueObservation.Helper.invalidate()(v0, v3);

    return;
  }

  id v3 = (id)MEMORY[0x186E20F44](&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_weakObject]);
  if (v3) {
    goto LABEL_4;
  }
  os_unfair_lock_unlock(v1);
}

void closure #1 in NSKeyValueObservation.Helper.invalidate()(char *a1, void *a2)
{
  *(void *)&a1[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject] = 0LL;
  objc_msgSend(a2, sel_removeObserver_forKeyPath_context_, a1, String._bridgeToObjectiveCImpl()(), 0);
  swift_unknownObjectRelease();
  objc_setAssociatedObject(a2, a1, 0LL, 0LL);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)&a1[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock]);
}

id NSKeyValueObservation.Helper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NSKeyValueObservation.Helper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall NSKeyValueObservation.invalidate()()
{
  uint64_t v1 = MEMORY[0x186E20F44](v0 + OBJC_IVAR____NSKeyValueObservation_helper);
  if (v1)
  {
    objc_super v2 = (void *)v1;
    NSKeyValueObservation.Helper.invalidate()();
  }

  swift_unknownObjectWeakAssign();
}

id NSKeyValueObservation.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x186E20F44](&v0[OBJC_IVAR____NSKeyValueObservation_helper]);
  if (v2)
  {
    id v3 = (void *)v2;
    NSKeyValueObservation.Helper.invalidate()();
  }

  swift_unknownObjectWeakAssign();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for NSKeyValueObservation();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

id NSKeyValueObservation.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NSKeyValueObservation.init()()
{
}

uint64_t sub_182F28714()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for NSKeyValueObservation()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NSKeyValueObservation.Helper()
{
  return objc_opt_self();
}

uint64_t _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)( a1,  a2,  a3,  a4,  (SEL *)&selRef_willChange_valuesAtIndexes_forKey_);
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)( a1,  a2,  a3,  a4,  a5,  (SEL *)&selRef_willChangeValueForKey_withSetMutation_usingObjects_);
}

uint64_t _KeyValueCodingAndObserving.didChange<A>(_:valuesAt:for:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)( a1,  a2,  a3,  a4,  (SEL *)&selRef_didChange_valuesAtIndexes_forKey_);
}

uint64_t _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, SEL *a5)
{
  uint64_t v7 = *(void *)(*a3 + *MEMORY[0x18961A9A8]);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = *v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v17 - v11, v12, v7);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  uint64_t v13 = (void *)v17[5];
  objc_msgSend(*(id *)(v9 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  uint64_t v14 = (void *)v17[0];
  _bridgeKeyPathToString(_:)();
  uint64_t v15 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, *a5, a1, v14, v15);

  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t _KeyValueCodingAndObserving.didChangeValue<A>(for:withSetMutation:using:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)( a1,  a2,  a3,  a4,  a5,  (SEL *)&selRef_didChangeValueForKey_withSetMutation_usingObjects_);
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v64 = a6;
  uint64_t v65 = a2;
  uint64_t v9 = (uint64_t *)(*a1 + *MEMORY[0x18961A9A8]);
  uint64_t v10 = v9[1];
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t v59 = type metadata accessor for Optional();
  uint64_t v58 = *(void *)(v59 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v59);
  unint64_t v57 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v60 = (char *)&v56 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  id v20 = (char *)&v56 - v19;
  uint64_t v21 = *v9;
  MEMORY[0x1895F8858](v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))((char *)&v56 - v23, v6, v21);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  id v63 = v78;
  int v66 = a1;
  _bridgeKeyPathToString(_:)();
  uint64_t v62 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unint64_t v24 = a3 & 0xC000000000000001LL;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v25 = MEMORY[0x18961AFF8];
    if (v24) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v29 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v30 = *(void *)(a3 + 56);
    uint64_t v70 = a3 + 56;
    uint64_t v27 = ~v29;
    uint64_t v31 = -v29;
    if (v31 < 64) {
      uint64_t v32 = ~(-1LL << v31);
    }
    else {
      uint64_t v32 = -1LL;
    }
    unint64_t v28 = v32 & v30;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    uint64_t v71 = 0LL;
    goto LABEL_11;
  }

  if (!*(void *)(a3 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyHashable>);
  uint64_t v25 = static _SetStorage.allocate(capacity:)();
  if (!v24) {
    goto LABEL_7;
  }
LABEL_4:
  swift_bridgeObjectRetain();
  swift_retain();
  __CocoaSet.makeIterator()();
  uint64_t result = Set.Iterator.init(_cocoa:)();
  a3 = v79;
  uint64_t v27 = v81;
  uint64_t v70 = v80;
  uint64_t v71 = v82;
  unint64_t v28 = v83;
LABEL_11:
  uint64_t v68 = a3 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v61 = v27;
  int64_t v69 = (unint64_t)(v27 + 64) >> 6;
  uint64_t v33 = v25 + 56;
  uint64_t v67 = MEMORY[0x18961AFB8] + 8LL;
  while (a3 < 0)
  {
    uint64_t v39 = __CocoaSet.Iterator.next()();
    if (!v39) {
      goto LABEL_49;
    }
    uint64_t v40 = v39;
    if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    {
      *(void *)&__int128 v75 = v40;
      swift_dynamicCast();
LABEL_37:
      BOOL v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      goto LABEL_38;
    }

    BOOL v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v45(v60, 1LL, 1LL, v10);
    _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)();
    swift_unknownObjectRelease();
    id v53 = v57;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v57, v60, v59);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v53, 1LL, v10);
    if ((_DWORD)result == 1) {
      goto LABEL_51;
    }
    (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v59);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v53, v10);
LABEL_38:
    v45(v20, 0LL, 1LL, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v20, v10);
    swift_dynamicCast();
    __int128 v72 = v75;
    __int128 v73 = v76;
    uint64_t v74 = v77;
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v25 + 40));
    uint64_t v46 = -1LL << *(_BYTE *)(v25 + 32);
    unint64_t v47 = result & ~v46;
    unint64_t v48 = v47 >> 6;
    if (((-1LL << v47) & ~*(void *)(v33 + 8 * (v47 >> 6))) != 0)
    {
      unint64_t v34 = __clz(__rbit64((-1LL << v47) & ~*(void *)(v33 + 8 * (v47 >> 6)))) | v47 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v49 = 0;
      unint64_t v50 = (unint64_t)(63 - v46) >> 6;
      do
      {
        if (++v48 == v50 && (v49 & 1) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }

        BOOL v51 = v48 == v50;
        if (v48 == v50) {
          unint64_t v48 = 0LL;
        }
        v49 |= v51;
        uint64_t v52 = *(void *)(v33 + 8 * v48);
      }

      while (v52 == -1);
      unint64_t v34 = __clz(__rbit64(~v52)) + (v48 << 6);
    }

    *(void *)(v33 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
    uint64_t v35 = *(void *)(v25 + 48) + 40 * v34;
    __int128 v36 = v73;
    *(_OWORD *)uint64_t v35 = v72;
    *(_OWORD *)(v35 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v36;
    *(void *)(v35 + 32) = v74;
    ++*(void *)(v25 + 16);
  }

  if (v28)
  {
    unint64_t v37 = __clz(__rbit64(v28));
    v28 &= v28 - 1;
    unint64_t v38 = v37 | (v71 << 6);
LABEL_36:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))( v20,  *(void *)(a3 + 48) + *(void *)(v11 + 72) * v38,  v10);
    goto LABEL_37;
  }

  int64_t v41 = v71 + 1;
  if (!__OFADD__(v71, 1LL))
  {
    if (v41 >= v69) {
      goto LABEL_49;
    }
    unint64_t v42 = *(void *)(v70 + 8 * v41);
    uint64_t v43 = v71 + 1;
    if (!v42)
    {
      uint64_t v43 = v71 + 2;
      if (v71 + 2 >= v69) {
        goto LABEL_49;
      }
      unint64_t v42 = *(void *)(v70 + 8 * v43);
      if (!v42)
      {
        uint64_t v43 = v71 + 3;
        if (v71 + 3 >= v69) {
          goto LABEL_49;
        }
        unint64_t v42 = *(void *)(v70 + 8 * v43);
        if (!v42)
        {
          uint64_t v43 = v71 + 4;
          if (v71 + 4 >= v69) {
            goto LABEL_49;
          }
          unint64_t v42 = *(void *)(v70 + 8 * v43);
          if (!v42)
          {
            uint64_t v43 = v71 + 5;
            if (v71 + 5 >= v69) {
              goto LABEL_49;
            }
            unint64_t v42 = *(void *)(v70 + 8 * v43);
            if (!v42)
            {
              uint64_t v44 = v71 + 6;
              while (v69 != v44)
              {
                unint64_t v42 = *(void *)(v70 + 8 * v44++);
                if (v42)
                {
                  uint64_t v43 = v44 - 1;
                  goto LABEL_35;
                }
              }

LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

            uint64_t v22 = 0LL;
            uint64_t v27 = 0xE000000000000000LL;
            goto LABEL_51;
          }

          uint64_t v9 = swift_bridgeObjectRelease();
          uint64_t v33 = v97;
          unint64_t v34 = v96;
          uint64_t v35 = v95;
        }

        LOBYTE(v24) = v94;
        if (v35) {
          goto LABEL_50;
        }
        goto LABEL_38;
      }

      uint64_t v22 = 0LL;
      uint64_t v27 = 0xE000000000000000LL;
LABEL_30:
      LOBYTE(v24) = v94;
      goto LABEL_51;
    }

  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 272))
  {
LABEL_44:
    Hasher._combine(_:)(0);
    uint64_t v35 = *(void *)(v0 + 280);
    if (!v35) {
      goto LABEL_45;
    }
LABEL_52:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v1, v35);
    swift_bridgeObjectRelease();
    __int128 v36 = *(void *)(v0 + 288);
    if (!v36) {
      goto LABEL_46;
    }
    goto LABEL_53;
  }

    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v82 = v42;
    *(_WORD *)&v82[4] = v80;
    *(_WORD *)&v82[6] = v9;
    *(_WORD *)&v82[8] = v75;
    *(_WORD *)&v82[10] = v74;
    *(_WORD *)&v82[12] = v72;
    *(_WORD *)&v82[14] = v13;
    *(_WORD *)&v82[16] = v70;
    *(_WORD *)&v82[18] = v11;
    NSDecimal.copyVariableLengthInteger(_:)(v10);
    if (v49) {
      break;
    }
    unint64_t v50 = *((void *)v10._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v50)) {
      goto LABEL_78;
    }
    _So9NSDecimala__length_setter(v50, v82);
    *(_DWORD *)uint64_t v84 = *(_DWORD *)v82;
    *(_OWORD *)&v84[4] = *(_OWORD *)&v82[4];
    *(void *)uint64_t v82 = v5 | 0x30;
    v51._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](v82, 1LL);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    uint64_t v39 = *(_DWORD *)v84;
    uint64_t v81 = *(_WORD *)&v84[4];
    LOWORD(v9) = *(_WORD *)&v84[6];
    LOWORD(v5) = *(_WORD *)&v84[8];
    LOWORD(v10._rawValue) = *(_WORD *)&v84[10];
    LOWORD(v11) = *(_WORD *)&v84[12];
    LOWORD(v12) = *(_WORD *)&v84[14];
    LOWORD(v7) = *(_WORD *)&v84[16];
    LOWORD(v13) = *(_WORD *)&v84[18];
    *(_OWORD *)uint64_t v82 = *(_OWORD *)v84;
    *(_WORD *)&v82[16] = *(_WORD *)&v84[16];
    *(_WORD *)&v82[18] = *(_WORD *)&v84[18];
    uint64_t v52 = _So9NSDecimala__length_getter(v82);
    unint64_t v38 = v81;
    if (!v52) {
      goto LABEL_68;
    }
  }

      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v51, (const void **)&v50, &v49);
      return 1LL;
    }
  }

  else if (v7 >= -15)
  {
    if (__dst != __src || &__src[2 * v9] <= __dst) {
      memmove(__dst, __src, 16 * v9);
    }
    int64_t v41 = &v4[2 * v9];
    char v49 = v41;
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      while (1)
      {
        uint64_t v13 = *v4;
        uint64_t v14 = v4;
        uint64_t v15 = *v5;
        swift_retain();
        uint64_t v16 = v13;
        swift_retain();
        uint64_t v17 = objc_msgSend(v15, sel_length);
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        uint64_t v18 = static LocaleCache.cache + 16;
        uint64_t v19 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
        swift_retain_n();
        os_unfair_lock_lock(v19);
        closure #1 in LocaleCache.system.getter(v18, &v47);
        if (v46) {
          break;
        }
        os_unfair_lock_unlock(v19);
        swift_release_n();
        id v20 = v48;
        uint64_t v21 = swift_getObjectType();
        uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 488))(v21, v20);
        uint64_t v23 = objc_msgSend(v15, sel_compare_options_range_locale_, v16, 577, 0, v17, v22);
        swift_release();

        swift_release();
        swift_unknownObjectRelease();
        if (v23 == (id)-1LL)
        {
          unint64_t v24 = v5 + 2;
          id v4 = v14;
          if (v6 < v5 || v6 >= v24 || v6 != v5) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
          }
        }

        else
        {
          unint64_t v24 = v5;
          if (v6 != v14) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v14;
          }
          id v4 = v14 + 2;
          unint64_t v50 = v14 + 2;
        }

        v6 += 2;
        if (v4 < v41)
        {
          objc_super v5 = v24;
        }

        BOOL v51 = v6;
        goto LABEL_50;
      }

    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    unint64_t v92 = (v61 - 1) & v61;
    uint64_t v93 = v62;
    id v53 = __clz(__rbit64(v61)) + (v62 << 6);
LABEL_25:
    uint64_t v54 = 16 * v53;
    id v55 = (void *)(*(void *)(v32 + 48) + 16 * v53);
    uint64_t v56 = v55[1];
    unint64_t v57 = 8 * v53;
    uint64_t v58 = *(void *)(*(void *)(v32 + 56) + v57);
    uint64_t v59 = (void *)(*(void *)(v40 + 48) + v54);
    *uint64_t v59 = *v55;
    v59[1] = v56;
    *(void *)(*(void *)(v40 + 56) + v57) = v58;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v52 = v92;
    char v49 = v93;
  }

  id v63 = v49 + 9;
  if (v49 + 9 >= v91) {
    goto LABEL_51;
  }
  uint64_t v61 = *(void *)(v90 + 8 * v63);
  if (v61)
  {
    uint64_t v62 = v49 + 9;
    goto LABEL_50;
  }

  while (1)
  {
    uint64_t v62 = v63 + 1;
    if (__OFADD__(v63, 1LL)) {
      break;
    }
    if (v62 >= v91) {
      goto LABEL_51;
    }
    uint64_t v61 = *(void *)(v90 + 8 * v62);
    ++v63;
    if (v61) {
      goto LABEL_50;
    }
  }

    uint64_t v85 = (v58 - 1) & v58;
    uint64_t v86 = v59;
    unint64_t v50 = __clz(__rbit64(v58)) + (v59 << 6);
LABEL_25:
    BOOL v51 = 16 * v50;
    uint64_t v52 = (void *)(*(void *)(v29 + 48) + 16 * v50);
    id v53 = v52[1];
    uint64_t v54 = 8 * v50;
    id v55 = *(void *)(*(void *)(v29 + 56) + v54);
    uint64_t v56 = (void *)(*(void *)(v37 + 48) + v51);
    *uint64_t v56 = *v52;
    v56[1] = v53;
    *(void *)(*(void *)(v37 + 56) + v54) = v55;
    swift_bridgeObjectRetain();
    swift_retain();
    char v49 = v85;
    uint64_t v46 = v86;
  }

  uint64_t v60 = v46 + 9;
  if (v46 + 9 >= v84) {
    goto LABEL_51;
  }
  uint64_t v58 = *(void *)(v83 + 8 * v60);
  if (v58)
  {
    uint64_t v59 = v46 + 9;
    goto LABEL_50;
  }

  while (1)
  {
    uint64_t v59 = v60 + 1;
    if (__OFADD__(v60, 1LL)) {
      break;
    }
    if (v59 >= v84) {
      goto LABEL_51;
    }
    uint64_t v58 = *(void *)(v83 + 8 * v59);
    ++v60;
    if (v58) {
      goto LABEL_50;
    }
  }

    uint64_t v35 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000LL) == 0) {
      uint64_t v35 = v5;
    }
    __int128 v36 = v35 << 16;
    if ((v7 & 0x1000000000000000LL) == 0 || (v5 & 0x800000000000000LL) != 0) {
      uint64_t v21 = v36 | 7;
    }
    else {
      uint64_t v21 = v36 | 0xB;
    }
    goto LABEL_56;
  }

  objc_super v5 = String.init(cString:)();
  uint64_t v7 = v6;
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized Collection.first.getter(v5, v7);
  if (v9)
  {
    if (v8 == 126 && v9 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_26:
      uint64_t v23 = specialized Collection<>.firstIndex(of:)(47LL, 0xE100000000000000LL, v5, v7);
      if ((v24 & 1) != 0)
      {
        uint64_t v27 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000LL) == 0) {
          uint64_t v27 = v5;
        }
        unint64_t v28 = v27 << 16;
        if ((v7 & 0x1000000000000000LL) == 0 || (v5 & 0x800000000000000LL) != 0) {
          uint64_t v21 = v28 | 7;
        }
        else {
          uint64_t v21 = v28 | 0xB;
        }
      }

      else
      {
        uint64_t v21 = v23;
      }

      unint64_t v34 = String.index(after:)();
      if (v21 >> 14 == v34 >> 14) {
        goto LABEL_57;
      }
      if (v21 >> 14 >= v34 >> 14) {
        goto LABEL_60;
      }
      __break(1u);
      goto LABEL_50;
    }

    uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0) {
      goto LABEL_26;
    }
  }

    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0) {
      goto LABEL_51;
    }
    goto LABEL_14;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = v53[0];
  id v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v3 & 1) != (v27 & 1)) {
    goto LABEL_58;
  }
  uint64_t v21 = v26;
  if ((v3 & 1) != 0) {
    goto LABEL_14;
  }
LABEL_51:
  *(void *)(v25 + 8 * (v21 >> 6) + 64) |= 1LL << v21;
  *(_BYTE *)(*(void *)(v25 + 48) + v21) = a2;
  unint64_t v42 = (uint64_t *)(*(void *)(v25 + 56) + 16 * v21);
  *unint64_t v42 = v17;
  v42[1] = v16;
  uint64_t v43 = *(void *)(v25 + 16);
  uint64_t v44 = __OFADD__(v43, 1LL);
  BOOL v45 = v43 + 1;
  if (!v44)
  {
    *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v45;
    goto LABEL_53;
  }

  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v31);
  swift_bridgeObjectRelease();
LABEL_51:
  unint64_t v34 = v66;
  uint64_t v33 = v67;
  __int128 v36 = v68;
  uint64_t v35 = v69;
  unint64_t v37 = v70;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v38 = v33;
    uint64_t v39 = v36;
    uint64_t v40 = v35;
    int64_t v41 = v37;
    unint64_t v42 = v34;
    _CFObject.hash(into:)();
    if (v33) {
      goto LABEL_53;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v47 = v37;
    unint64_t v48 = v33;
    char v49 = v36;
    unint64_t v50 = v35;
    if (v33)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v43 = v33;
      _CFObject.hash(into:)();

      if (v36) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }

  Hasher._combine(_:)(0);
  if (v36)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v44 = v36;
    _CFObject.hash(into:)();

    if (v35) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v37) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v29);
  swift_bridgeObjectRelease();
LABEL_51:
  uint64_t v32 = v65;
  uint64_t v31 = v66;
  unint64_t v34 = v67;
  uint64_t v33 = v68;
  uint64_t v35 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    __int128 v36 = v31;
    unint64_t v37 = v34;
    unint64_t v38 = v33;
    uint64_t v39 = v35;
    uint64_t v40 = v32;
    _CFObject.hash(into:)();
    if (v31) {
      goto LABEL_53;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    BOOL v45 = v35;
    uint64_t v46 = v31;
    unint64_t v47 = v34;
    unint64_t v48 = v33;
    if (v31)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      int64_t v41 = v31;
      _CFObject.hash(into:)();

      if (v34) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }

  Hasher._combine(_:)(0);
  if (v34)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v42 = v34;
    _CFObject.hash(into:)();

    if (v33) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v35) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v30);
  swift_bridgeObjectRelease();
LABEL_51:
  uint64_t v33 = v65;
  uint64_t v32 = v66;
  uint64_t v35 = v67;
  unint64_t v34 = v68;
  __int128 v36 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v37 = v32;
    unint64_t v38 = v35;
    uint64_t v39 = v34;
    uint64_t v40 = v36;
    int64_t v41 = v33;
    _CFObject.hash(into:)();
    if (v32) {
      goto LABEL_53;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v46 = v36;
    unint64_t v47 = v32;
    unint64_t v48 = v35;
    char v49 = v34;
    if (v32)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v42 = v32;
      _CFObject.hash(into:)();

      if (v35) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }

  Hasher._combine(_:)(0);
  if (v35)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v43 = v35;
    _CFObject.hash(into:)();

    if (v34) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v36) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v32);
  swift_bridgeObjectRelease();
LABEL_51:
  uint64_t v35 = v67;
  unint64_t v34 = v68;
  unint64_t v37 = v69;
  __int128 v36 = v70;
  unint64_t v38 = v71;
  if (v67)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v39 = v34;
    uint64_t v40 = v37;
    int64_t v41 = v36;
    unint64_t v42 = v38;
    uint64_t v43 = v35;
    _CFObject.hash(into:)();
    if (v34) {
      goto LABEL_53;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v48 = v38;
    char v49 = v34;
    unint64_t v50 = v37;
    BOOL v51 = v36;
    if (v34)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v44 = v34;
      _CFObject.hash(into:)();

      if (v37) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }

  Hasher._combine(_:)(0);
  if (v37)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    BOOL v45 = v37;
    _CFObject.hash(into:)();

    if (v36) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v38) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v31);
  swift_bridgeObjectRelease();
LABEL_51:
  unint64_t v34 = v66;
  uint64_t v33 = v67;
  __int128 v36 = v68;
  uint64_t v35 = v69;
  unint64_t v37 = v70;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v38 = v33;
    uint64_t v39 = v36;
    uint64_t v40 = v35;
    int64_t v41 = v37;
    unint64_t v42 = v34;
    _CFObject.hash(into:)();
    if (v33) {
      goto LABEL_53;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v47 = v37;
    unint64_t v48 = v33;
    char v49 = v36;
    unint64_t v50 = v35;
    if (v33)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v43 = v33;
      _CFObject.hash(into:)();

      if (v36) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }

  Hasher._combine(_:)(0);
  if (v36)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v44 = v36;
    _CFObject.hash(into:)();

    if (v35) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v37) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v30);
  swift_bridgeObjectRelease();
LABEL_51:
  uint64_t v33 = v65;
  uint64_t v32 = v66;
  uint64_t v35 = v67;
  unint64_t v34 = v68;
  __int128 v36 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v37 = v32;
    unint64_t v38 = v35;
    uint64_t v39 = v34;
    uint64_t v40 = v36;
    int64_t v41 = v33;
    _CFObject.hash(into:)();
    if (v32) {
      goto LABEL_53;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v46 = v36;
    unint64_t v47 = v32;
    unint64_t v48 = v35;
    char v49 = v34;
    if (v32)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v42 = v32;
      _CFObject.hash(into:)();

      if (v35) {
        goto LABEL_54;
      }
      goto LABEL_59;
    }
  }

  Hasher._combine(_:)(0);
  if (v35)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v43 = v35;
    _CFObject.hash(into:)();

    if (v34) {
      goto LABEL_55;
    }
LABEL_60:
    Hasher._combine(_:)(0);
    if (v36) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }

    unint64_t v48 = (v40 - 1) & v40;
    char v49 = v41;
    uint64_t v35 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_27:
    __int128 v36 = *(void *)(v11 + 48);
    unint64_t v47 = *(void *)(v50 + 72) * v35;
    outlined init with copy of ICUNumberFormatter.Signature( v36 + v47,  v34,  type metadata accessor for ICUPercentNumberFormatter.Signature);
    unint64_t v37 = 8 * v35;
    unint64_t v38 = *(void *)(*(void *)(v11 + 56) + 8 * v35);
    outlined init with take of ICUNumberFormatter.Signature( v34,  *(void *)(v17 + 48) + v47,  type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(void *)(*(void *)(v17 + 56) + v37) = v38;
    swift_retain();
    uint64_t v33 = v48;
    uint64_t v30 = v49;
  }

  unint64_t v42 = v39 + 7;
  if (v42 >= v45) {
    goto LABEL_51;
  }
  uint64_t v40 = *(void *)&v46[8 * v42];
  if (v40)
  {
    int64_t v41 = v42;
    goto LABEL_50;
  }

  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1LL)) {
      break;
    }
    if (v41 >= v45) {
      goto LABEL_51;
    }
    uint64_t v40 = *(void *)&v46[8 * v41];
    ++v42;
    if (v40) {
      goto LABEL_50;
    }
  }

    outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v22 = v105;
    uint64_t v23 = outlined copy of LocalePreferences?;
LABEL_51:
    outlined retain of LocalePreferences?( (uint64_t)v22,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v23);
LABEL_54:
    LOBYTE(v20) = 0;
    goto LABEL_55;
  }

  return result;
}

          swift_bridgeObjectRetain_n();
          outlined destroy of Any?( (uint64_t)&v101,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
          swift_bridgeObjectRelease();
        }
      }
    }
  }

  v92[0] = v92;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  uint64_t v94 = (void *)((char *)v92 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v94, v4);
  unint64_t v97 = 0LL;
  objc_super v5 = 0LL;
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v95 = v2 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  uint64_t v9 = v8 & v6;
  uint64_t v96 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v98 = &v102;
  do
  {
    while (1)
    {
      if (v9)
      {
        uint64_t v10 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        uint64_t v11 = v10 | (v5 << 6);
        uint64_t v12 = v100;
      }

      else
      {
        uint64_t v13 = v5 + 1;
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_157;
        }
        uint64_t v12 = v100;
        if (v13 >= v96) {
          goto LABEL_42;
        }
        uint64_t v14 = *(void *)(v95 + 8 * v13);
        ++v5;
        if (!v14)
        {
          objc_super v5 = v13 + 1;
          if (v13 + 1 >= v96) {
            goto LABEL_42;
          }
          uint64_t v14 = *(void *)(v95 + 8 * v5);
          if (!v14)
          {
            objc_super v5 = v13 + 2;
            if (v13 + 2 >= v96) {
              goto LABEL_42;
            }
            uint64_t v14 = *(void *)(v95 + 8 * v5);
            if (!v14)
            {
              uint64_t v15 = v13 + 3;
              if (v15 >= v96) {
                goto LABEL_42;
              }
              uint64_t v14 = *(void *)(v95 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  objc_super v5 = v15 + 1;
                  if (__OFADD__(v15, 1LL)) {
                    break;
                  }
                  if (v5 >= v96) {
                    goto LABEL_42;
                  }
                  uint64_t v14 = *(void *)(v95 + 8 * v5);
                  ++v15;
                  if (v14) {
                    goto LABEL_22;
                  }
                }

  if (!v45) {
    goto LABEL_51;
  }
LABEL_82:
  __break(1u);
  return result;
}

    outlined retain of LocalePreferences?( (uint64_t)v93,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v19 = v93;
    id v20 = outlined copy of LocalePreferences?;
LABEL_51:
    outlined retain of LocalePreferences?( (uint64_t)v19,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v20);
    goto LABEL_52;
  }

  return result;
}

            uint64_t v9 = 256LL;
          }

  uint64_t v12 = 8;
LABEL_51:
  *a2 = v12;
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v79 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v81 = v80;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(72LL);
  v82._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v82._object = (void *)0x80000001839CF320LL;
  String.append(_:)(v82);
  v83._uint64_t countAndFlagsBits = v89;
  v83._object = v39;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._object = (void *)0x80000001839CF350LL;
  v84._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v84);
  v85._uint64_t countAndFlagsBits = v79;
  v85._object = v81;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86._uint64_t countAndFlagsBits = 10589LL;
  v86._object = (void *)0xE200000000000000LL;
  String.append(_:)(v86);
  return 0LL;
}

  __break(1u);
LABEL_51:
  __break(1u);
}

    *(void *)(*(void *)(v38 + 56) + 8 * v18) = v63;
LABEL_91:
    *uint64_t v12 = v38;
    swift_bridgeObjectRelease();
    return (void *)v63;
  }

  uint64_t v60 = a1;
  uint64_t v62 = a4 + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(a4 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  uint64_t v16 = v15 & *(void *)(a4 + 64);
  uint64_t v17 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v13 = 0LL;
  if (!v16) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (uint64_t i = v19 | (v13 << 6); ; uint64_t i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    a2 = *(unsigned int *)(*(void *)(a4 + 48) + 4 * i);
    unint64_t v24 = (uint64_t *)(*(void *)(a4 + 56) + 16 * i);
    id v26 = *v24;
    uint64_t v25 = v24[1];
    if ((v25 & 0x1000000000000000LL) != 0)
    {
      uint64_t v18 = String.UTF16View._foreignCount()();
      uint64_t v27 = v18;
      if (!v18)
      {
LABEL_36:
        unint64_t v28 = (void *)MEMORY[0x18961AFE8];
        goto LABEL_37;
      }
    }

    else
    {
      uint64_t v18 = String.UTF16View._nativeGetOffset(for:)();
      uint64_t v27 = v18;
      if (!v18) {
        goto LABEL_36;
      }
    }

    if (v27 < 1)
    {
      unint64_t v28 = (void *)MEMORY[0x18961AFE8];
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      unint64_t v28 = (void *)swift_allocObject();
      uint64_t v29 = _swift_stdlib_malloc_size(v28);
      uint64_t v30 = v29 - 32;
      if (v29 < 32) {
        uint64_t v30 = v29 - 31;
      }
      v28[2] = v27;
      v28[3] = v30 & 0xFFFFFFFFFFFFFFFELL;
    }

    swift_bridgeObjectRetain_n();
    uint64_t v12 = (void *)specialized Sequence._copySequenceContents(initializing:)( (uint64_t)v64,  (uint64_t)(v28 + 4),  v27,  v26,  v25);
    uint64_t v18 = swift_bridgeObjectRelease();
    if (v12 != (void *)v27) {
      goto LABEL_53;
    }
    uint64_t v18 = swift_bridgeObjectRelease();
    uint64_t v12 = (void *)v63;
LABEL_37:
    uint64_t v31 = v28[2];
    LODWORD(v64[0]) = 0;
    if ((a2 & 0x80000000) != 0) {
      break;
    }
    if (v31 >> 31) {
      goto LABEL_52;
    }
    unum_setSymbol();
    uint64_t v18 = swift_release();
    if (v16) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_54;
    }
    if (v21 >= v17)
    {
LABEL_42:
      swift_release();
      uint64_t v13 = v60;
      goto LABEL_43;
    }

    uint64_t v22 = *(void *)(v62 + 8 * v21);
    ++v13;
    if (!v22)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_42;
      }
      uint64_t v22 = *(void *)(v62 + 8 * v13);
      if (!v22)
      {
        uint64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_42;
        }
        uint64_t v22 = *(void *)(v62 + 8 * v13);
        if (!v22)
        {
          uint64_t v23 = v21 + 3;
          if (v23 >= v17) {
            goto LABEL_42;
          }
          uint64_t v22 = *(void *)(v62 + 8 * v23);
          if (!v22)
          {
            while (1)
            {
              uint64_t v13 = v23 + 1;
              if (__OFADD__(v23, 1LL)) {
                goto LABEL_55;
              }
              if (v13 >= v17) {
                goto LABEL_42;
              }
              uint64_t v22 = *(void *)(v62 + 8 * v13);
              ++v23;
              if (v22) {
                goto LABEL_25;
              }
            }
          }

          uint64_t v13 = v23;
        }
      }
    }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 272))
  {
LABEL_44:
    Hasher._combine(_:)(0);
    uint64_t v35 = *(void *)(v0 + 280);
    if (!v35) {
      goto LABEL_45;
    }
LABEL_52:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v1, v35);
    swift_bridgeObjectRelease();
    __int128 v36 = *(void *)(v0 + 288);
    if (!v36) {
      goto LABEL_46;
    }
    goto LABEL_53;
  }

    unint64_t v24 = *((void *)v3 + 2);
    for (uint64_t i = v23; ; i >>= 8)
    {
      while (1)
      {
        id v26 = *((void *)v3 + 3);
        if (v24 >= v26 >> 1) {
          id v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v26 > 1),  v24 + 1,  1,  v3);
        }
        *((void *)v3 + 2) = v24 + 1;
        v3[v24 + 32] = i - 1;
        ++v24;
        uint64_t v27 = i >= 0x100;
        i >>= 8;
        if (!v27) {
          goto LABEL_58;
        }
      }

      unint64_t v28 = 0LL;
      id v4 = 0LL;
      ++v24;
      if (i < 0x100) {
        break;
      }
    }

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v33, (const void **)&v32, &v31);
      return 1LL;
    }
  }

  else if (v8 >= -47)
  {
    uint64_t v12 = 48 * v9;
    if (__dst != __src || &__src[v12] <= __dst) {
      memmove(__dst, __src, v12);
    }
    uint64_t v13 = &v4[v12];
    uint64_t v31 = v13;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      while (!v6[16] && !v4[16])
      {
        uint64_t v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            uint64_t v18 = *(_OWORD *)v4;
            uint64_t v19 = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v4 + 1);
            *((_OWORD *)v7 + 2) = v19;
            *(_OWORD *)uint64_t v7 = v18;
          }

          v4 += 48;
          uint64_t v32 = v4;
          uint64_t v15 = v6;
        }

        else
        {
          uint64_t v15 = v6 + 48;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            uint64_t v16 = *(_OWORD *)v6;
            uint64_t v17 = *((_OWORD *)v6 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v6 + 1);
            *((_OWORD *)v7 + 2) = v17;
            *(_OWORD *)uint64_t v7 = v16;
          }
        }

        v7 += 48;
        uint64_t v33 = v7;
        if (v4 < v13)
        {
          uint64_t v6 = v15;
        }

        goto LABEL_50;
      }

    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v30 > 1),  v47,  1,  v10);
    goto LABEL_45;
  }

  if (v3)
  {
    uint64_t v29 = *((unsigned __int8 *)v3 + 18);
    uint64_t v27 = *(unsigned __int8 *)(v11 + 18);
  }

  else
  {
    uint64_t v29 = 0;
  }

  uint64_t v30 = (v27 + 1);
  if (((v30 >> 8) & 1) != 0)
  {
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  if (v3)
  {
    id v3 = &v50;
    specialized Rope._Node._appendNode(_:)(v11, v8, v7);
    uint64_t v11 = (uint64_t)v50;
    uint64_t v8 = v51;
    uint64_t v7 = v52;
    goto LABEL_25;
  }

  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

    if (v43 < v37) {
      goto LABEL_229;
    }
    BOOL v51 = String.index(after:)();
    if (v283 < v51 >> 14) {
      goto LABEL_230;
    }
    __int128 v266 = v51 >> 14;
    swift_bridgeObjectRetain();
    String.index(after:)();
    uint64_t v52 = String.subscript.getter();
    uint64_t v54 = v53;
    swift_bridgeObjectRelease();
    id v55 = v54 >> 14;
    uint64_t v56 = (void *)MEMORY[0x18961AFE8];
    if (v54 >> 14 == v52 >> 14) {
      goto LABEL_75;
    }
    swift_bridgeObjectRetain();
    unint64_t v57 = v52;
    uint64_t v58 = v52;
    uint64_t v59 = v52;
    v275 = (void *)MEMORY[0x18961AFE8];
    while (2)
    {
      while (Substring.subscript.getter() != 95 || v61 != 0xE100000000000000LL)
      {
        uint64_t v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v62 & 1) != 0) {
          goto LABEL_60;
        }
        unint64_t v57 = Substring.index(after:)();
        if (v55 == v57 >> 14) {
          goto LABEL_67;
        }
      }

      swift_bridgeObjectRelease();
LABEL_60:
      if (v57 >> 14 != v59 >> 14)
      {
        if (v57 >> 14 < v58 >> 14) {
          goto LABEL_243;
        }
        id v63 = Substring.subscript.getter();
        v272 = v65;
        v273 = v64;
        v271 = v66;
        uint64_t v67 = v275;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v275[2] + 1LL,  1,  v275);
        }
        int64_t v69 = v67[2];
        uint64_t v68 = v67[3];
        if (v69 >= v68 >> 1) {
          uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v68 > 1),  v69 + 1,  1,  v67);
        }
        v67[2] = v69 + 1;
        v275 = v67;
        uint64_t v60 = &v67[4 * v69];
        v60[4] = v63;
        v60[5] = v273;
        v60[6] = v272;
        v60[7] = v271;
      }

      unint64_t v57 = Substring.index(after:)();
      uint64_t v58 = v57;
      uint64_t v59 = v57;
      if (v55 != v57 >> 14) {
        continue;
      }
      break;
    }

      __break(1u);
      JUMPOUT(0x183424F00LL);
    }

      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v44,  a4,  a5,  v45,  0x7265646C6F46LL,  0xE600000000000000LL,  0LL,  0LL,  &v93,  0LL,  0LL);
      uint64_t v58 = *(void **)(v13 + 64);
      *(void *)(v13 + 64) = *(void *)&v93.st_dev;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
  }

  atomic_store(0xF0u, &self->_iop.__state);
  +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isExecuting",  self,  0LL,  0LL,  0LL,  0LL,  0LL);
  +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isFinished",  self,  0LL,  0LL,  0LL,  0LL,  0LL);
LABEL_51:
  objc_autoreleasePoolPop(v12);
}

      free(v22);
      goto LABEL_51;
    }

    uint64_t v30 = 0;
LABEL_54:
    free(v22);
    if (v30 != v5) {
      goto LABEL_51;
    }
    uint64_t v33 = 0;
    do
    {
      unint64_t v34 = (const void *)-[_NSSharedKeySetS keyAtIndex:]((uint64_t)a3, v33);
      uint64_t v35 = (const void *)-[_NSSharedKeySetS keyAtIndex:]( (uint64_t)self,  -[_NSSharedKeySetS indexForKey:length:](self, "indexForKey:length:", v34, self->_keyLen));
      if (v34 && v35)
      {
        if (memcmp(v34, v35, v20)) {
          goto LABEL_51;
        }
      }

      else if ((v34 != 0LL) != (v35 != 0LL))
      {
        goto LABEL_51;
      }

      ++v33;
    }

    while (v33 <= v39);
    __int128 v36 = -[_NSSharedKeySetS isEmpty](self, "isEmpty");
    LOBYTE(v21) = v36 ^ [a3 isEmpty] ^ 1;
  }

  return (char)v21;
}

  uint64_t v60 = 0u;
  uint64_t v61 = 0u;
  uint64_t v58 = 0u;
  uint64_t v59 = 0u;
  __int128 v36 = self->_readingLocations;
  unint64_t v37 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v58,  v57,  16LL);
  unint64_t v38 = MEMORY[0x1895F87A8];
  if (v37)
  {
    uint64_t v39 = v37;
    uint64_t v40 = *(void *)v59;
    do
    {
      for (n = 0LL; n != v39; ++n)
      {
        if (*(void *)v59 != v40) {
          objc_enumerationMutation(v36);
        }
        unint64_t v42 = *(void **)(*((void *)&v58 + 1) + 8 * n);
        v50[0] = v38;
        v50[1] = 3221225472LL;
        v50[2] = __76__NSFileMultipleAccessClaim_evaluateSelfWithRootNode_checkSubarbitrability___block_invoke;
        v50[3] = &unk_189CA3A78;
        v50[4] = self;
        [v42 forEachRelevantAccessClaimForEvaluatingAgainstClaim:self performProcedure:v50];
      }

      uint64_t v39 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v58,  v57,  16LL);
    }

    while (v39);
  }

  id v55 = 0u;
  uint64_t v56 = 0u;
  id v53 = 0u;
  uint64_t v54 = 0u;
  uint64_t v43 = self->_writingLocations;
  uint64_t v44 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v43,  "countByEnumeratingWithState:objects:count:",  &v53,  v52,  16LL);
  if (!v44) {
    return 1;
  }
  BOOL v45 = v44;
  uint64_t v46 = *(void *)v54;
  do
  {
    for (iuint64_t i = 0LL; ii != v45; ++ii)
    {
      if (*(void *)v54 != v46) {
        objc_enumerationMutation(v43);
      }
      unint64_t v48 = *(void **)(*((void *)&v53 + 1) + 8 * ii);
      v49[0] = v38;
      v49[1] = 3221225472LL;
      v49[2] = __76__NSFileMultipleAccessClaim_evaluateSelfWithRootNode_checkSubarbitrability___block_invoke_2;
      v49[3] = &unk_189CA3A78;
      v49[4] = self;
      [v48 forEachRelevantAccessClaimForEvaluatingAgainstClaim:self performProcedure:v49];
    }

    BOOL v45 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v43,  "countByEnumeratingWithState:objects:count:",  &v53,  v52,  16LL);
    uint64_t result = 1;
  }

  while (v45);
  return result;
}

uint64_t specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v12)(uint64_t *__return_ptr, void *);
  __int128 v13;
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  void v22[2];
  __int128 v23;
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    uint64_t v9 = *(void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 56);
    uint64_t v10 = (void *)(v9 + v7);
    uint64_t v11 = v10[1];
    uint64_t v12 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v22[0] = *v10;
    v22[1] = v11;
    uint64_t v13 = *(_OWORD *)(v8 + v7);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v23 = v13;
    swift_bridgeObjectRetain();
    v12(&v21, v22);
    swift_bridgeObjectRelease();
    return v21;
  }

  uint64_t v15 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      uint64_t v17 = v0[1];
      uint64_t v18 = *(void *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        uint64_t v5 = (v18 - 1) & v18;
        unint64_t v6 = __clz(__rbit64(v18)) + (v15 << 6);
        int64_t v4 = v15;
        goto LABEL_3;
      }

      uint64_t v19 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        uint64_t v18 = *(void *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          uint64_t v15 = v19;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          uint64_t v18 = *(void *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            uint64_t v15 = v3 + 3;
            goto LABEL_7;
          }

          uint64_t v19 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            uint64_t v18 = *(void *)(v17 + 8 * v19);
            if (v18) {
              goto LABEL_10;
            }
            uint64_t v15 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              uint64_t v18 = *(void *)(v17 + 8 * v15);
              if (v18) {
                goto LABEL_7;
              }
              int64_t v4 = v16 - 1;
              id v20 = v3 + 6;
              while (v16 != v20)
              {
                uint64_t v18 = *(void *)(v17 + 8 * v20++);
                if (v18)
                {
                  uint64_t v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = 0LL;
    v0[3] = v4;
    v0[4] = 0LL;
  }

  return result;
}

void specialized LazyMapSequence.Iterator.next()()
{
  void (*v8)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if ((*v0 & 0x8000000000000000LL) != 0)
  {
    uint64_t v9 = __CocoaSet.Iterator.next()();
    if (v9)
    {
      uint64_t v17 = v9;
      type metadata accessor for AnyKeyPath();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v7 = v16;
      swift_unknownObjectRelease();
      if (v16) {
        goto LABEL_6;
      }
    }

    return;
  }

  int64_t v4 = v0[3];
  unint64_t v3 = v1[4];
  if (v3)
  {
    uint64_t v5 = (v3 - 1) & v3;
    unint64_t v6 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_4:
    uint64_t v7 = *(void *)(*(void *)(v2 + 48) + 8 * v6);
    swift_retain();
    goto LABEL_5;
  }

  uint64_t v10 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    return;
  }

  uint64_t v11 = (unint64_t)(v1[2] + 64LL) >> 6;
  if (v10 >= v11)
  {
    uint64_t v7 = 0LL;
    uint64_t v5 = 0LL;
    goto LABEL_5;
  }

  uint64_t v12 = v1[1];
  uint64_t v13 = *(void *)(v12 + 8 * v10);
  if (v13)
  {
LABEL_13:
    uint64_t v5 = (v13 - 1) & v13;
    unint64_t v6 = __clz(__rbit64(v13)) + (v10 << 6);
    int64_t v4 = v10;
    goto LABEL_4;
  }

  uint64_t v14 = v4 + 2;
  if (v4 + 2 >= v11) {
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(v12 + 8 * v14);
  if (v13)
  {
LABEL_17:
    uint64_t v10 = v14;
    goto LABEL_13;
  }

  if (v4 + 3 >= v11) {
    goto LABEL_30;
  }
  uint64_t v13 = *(void *)(v12 + 8 * (v4 + 3));
  if (v13)
  {
    uint64_t v10 = v4 + 3;
    goto LABEL_13;
  }

  uint64_t v14 = v4 + 4;
  if (v4 + 4 < v11)
  {
    uint64_t v13 = *(void *)(v12 + 8 * v14);
    if (v13) {
      goto LABEL_17;
    }
    uint64_t v10 = v4 + 5;
    if (v4 + 5 < v11)
    {
      uint64_t v13 = *(void *)(v12 + 8 * v10);
      if (v13) {
        goto LABEL_13;
      }
      uint64_t v10 = v11 - 1;
      uint64_t v15 = v4 + 6;
      while (v11 != v15)
      {
        uint64_t v13 = *(void *)(v12 + 8 * v15++);
        if (v13)
        {
          uint64_t v10 = v15 - 1;
          goto LABEL_13;
        }
      }

uint64_t outlined consume of Set<A1>.Iterator._Variant<A><A1>()
{
  return swift_release();
}

uint64_t type metadata completion function for NSKeyValueObservedChange()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NSKeyValueObservedChange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1LL;
  }
  size_t v9 = v8 + v6;
  size_t v10 = v8 + 7;
  int v11 = v6 & 0x100000;
  if (v7 > 7
    || v11 != 0
    || ((v8 + 7 + ((v8 + v7 + ((v7 + 8) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8LL) + 9 > 0x18)
  {
    uint64_t v14 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v14 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }

  else
  {
    uint64_t v15 = ~v7;
    *a1 = *a2;
    uint64_t v16 = (void *)(((unint64_t)a1 + v7 + 8) & ~v7);
    uint64_t v17 = (const void *)(((unint64_t)a2 + v7 + 8) & ~v7);
    uint64_t v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v18(((unint64_t)a2 + v7 + 8) & ~v7, 1LL, v4))
    {
      memcpy(v16, v17, v8);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0LL, 1LL, v4);
    }

    uint64_t v19 = (void *)(((unint64_t)v16 + v9) & v15);
    id v20 = (const void *)(((unint64_t)v17 + v9) & v15);
    if (v18((unint64_t)v20, 1LL, v4))
    {
      memcpy(v19, v20, v8);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v19, v20, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v19, 0LL, 1LL, v4);
    }

    unint64_t v21 = ((unint64_t)v19 + v10) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v22 = ((unint64_t)v20 + v10) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)unint64_t v21 = *(void *)v22;
    *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  }

  swift_retain();
  return v3;
}

void *initializeWithCopy for NSKeyValueObservedChange(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (unint64_t)a1 + v5 + 8;
  uint64_t v7 = ~v5;
  unint64_t v8 = (unint64_t)a2 + v5 + 8;
  uint64_t v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18(v8 & ~v5, 1LL, v3))
  {
    int v9 = *(_DWORD *)(v4 + 84);
    size_t v10 = *(void *)(v4 + 64);
    if (v9) {
      size_t v11 = *(void *)(v4 + 64);
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy((void *)(v6 & ~v5), (const void *)(v8 & ~v5), v11);
  }

  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v6 & ~v5, v8 & ~v5, v3);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0LL, 1LL, v3);
    int v9 = *(_DWORD *)(v4 + 84);
    size_t v10 = *(void *)(v4 + 64);
  }

  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  uint64_t v13 = (void *)(((v6 | v5) + v12) & v7);
  uint64_t v14 = (const void *)(((v8 | v5) + v12) & v7);
  if (v18((unint64_t)v14, 1LL, v3))
  {
    memcpy(v13, v14, v12);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v4 + 16))(v13, v14, v3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0LL, 1LL, v3);
  }

  unint64_t v15 = ((unint64_t)v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v16 = ((unint64_t)v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  swift_retain();
  return a1;
}

void *assignWithCopy for NSKeyValueObservedChange(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (unint64_t)a1 + v5 + 8;
  uint64_t v7 = ~v5;
  unint64_t v8 = (unint64_t)a2 + v5 + 8;
  int v9 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  int v10 = v9(v6 & ~v5, 1LL, v3);
  int v11 = v9(v8 & ~v5, 1LL, v3);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v6 & ~v5, v8 & ~v5, v3);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0LL, 1LL, v3);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v11)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 24))(v6 & ~v5, v8 & ~v5, v3);
      goto LABEL_10;
    }

    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v6 & ~v5, v3);
  }

  if (*(_DWORD *)(v4 + 84)) {
    size_t v12 = *(void *)(v4 + 64);
  }
  else {
    size_t v12 = *(void *)(v4 + 64) + 1LL;
  }
  memcpy((void *)(v6 & ~v5), (const void *)(v8 & ~v5), v12);
LABEL_10:
  if (*(_DWORD *)(v4 + 84)) {
    size_t v13 = *(void *)(v4 + 64);
  }
  else {
    size_t v13 = *(void *)(v4 + 64) + 1LL;
  }
  uint64_t v14 = (void *)(((v6 | v5) + v13) & v7);
  unint64_t v15 = (const void *)(((v8 | v5) + v13) & v7);
  int v16 = v9((unint64_t)v14, 1LL, v3);
  int v17 = v9((unint64_t)v15, 1LL, v3);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v4 + 24))(v14, v15, v3);
      goto LABEL_19;
    }

    (*(void (**)(void *, uint64_t))(v4 + 8))(v14, v3);
    goto LABEL_18;
  }

  if (v17)
  {
LABEL_18:
    memcpy(v14, v15, v13);
    goto LABEL_19;
  }

  (*(void (**)(void *, const void *, uint64_t))(v4 + 16))(v14, v15, v3);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v14, 0LL, 1LL, v3);
LABEL_19:
  unint64_t v18 = ((unint64_t)v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = ((unint64_t)v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v18 = *(void *)v19;
  swift_retain();
  swift_release();
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  return a1;
}

void *initializeWithTake for NSKeyValueObservedChange(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (unint64_t)a1 + v5 + 8;
  uint64_t v7 = ~v5;
  unint64_t v8 = (unint64_t)a2 + v5 + 8;
  unint64_t v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18(v8 & ~v5, 1LL, v3))
  {
    int v9 = *(_DWORD *)(v4 + 84);
    size_t v10 = *(void *)(v4 + 64);
    if (v9) {
      size_t v11 = *(void *)(v4 + 64);
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy((void *)(v6 & ~v5), (const void *)(v8 & ~v5), v11);
  }

  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))(v6 & ~v5, v8 & ~v5, v3);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0LL, 1LL, v3);
    int v9 = *(_DWORD *)(v4 + 84);
    size_t v10 = *(void *)(v4 + 64);
  }

  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  size_t v13 = (void *)(((v6 | v5) + v12) & v7);
  uint64_t v14 = (const void *)(((v8 | v5) + v12) & v7);
  if (v18((unint64_t)v14, 1LL, v3))
  {
    memcpy(v13, v14, v12);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v4 + 32))(v13, v14, v3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0LL, 1LL, v3);
  }

  unint64_t v15 = ((unint64_t)v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v16 = ((unint64_t)v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  return a1;
}

void *assignWithTake for NSKeyValueObservedChange(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (unint64_t)a1 + v5 + 8;
  uint64_t v7 = ~v5;
  unint64_t v8 = (unint64_t)a2 + v5 + 8;
  int v9 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  int v10 = v9(v6 & ~v5, 1LL, v3);
  int v11 = v9(v8 & ~v5, 1LL, v3);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))(v6 & ~v5, v8 & ~v5, v3);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0LL, 1LL, v3);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v11)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 40))(v6 & ~v5, v8 & ~v5, v3);
      goto LABEL_10;
    }

    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v6 & ~v5, v3);
  }

  if (*(_DWORD *)(v4 + 84)) {
    size_t v12 = *(void *)(v4 + 64);
  }
  else {
    size_t v12 = *(void *)(v4 + 64) + 1LL;
  }
  memcpy((void *)(v6 & ~v5), (const void *)(v8 & ~v5), v12);
LABEL_10:
  if (*(_DWORD *)(v4 + 84)) {
    size_t v13 = *(void *)(v4 + 64);
  }
  else {
    size_t v13 = *(void *)(v4 + 64) + 1LL;
  }
  uint64_t v14 = (void *)(((v6 | v5) + v13) & v7);
  unint64_t v15 = (const void *)(((v8 | v5) + v13) & v7);
  int v16 = v9((unint64_t)v14, 1LL, v3);
  int v17 = v9((unint64_t)v15, 1LL, v3);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v4 + 40))(v14, v15, v3);
      goto LABEL_19;
    }

    (*(void (**)(void *, uint64_t))(v4 + 8))(v14, v3);
    goto LABEL_18;
  }

  if (v17)
  {
LABEL_18:
    memcpy(v14, v15, v13);
    goto LABEL_19;
  }

  (*(void (**)(void *, const void *, uint64_t))(v4 + 32))(v14, v15, v3);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v14, 0LL, 1LL, v3);
LABEL_19:
  unint64_t v18 = ((unint64_t)v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = ((unint64_t)v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v18 = *(void *)v19;
  swift_release();
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSKeyValueObservedChange(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(v4 + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = v8 + 7;
  if (v7 < a2)
  {
    unsigned int v12 = ((v11 + ((v10 + ((v9 + 8) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & 0xFFFFFFF8) + 9;
    unsigned int v13 = (a2 - v7 + 255) >> (8 * v12);
    if (v12 < 4) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0LL;
    }
    __asm { BR              X3 }
  }

  uint64_t v18 = (a1 + v9 + 8) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    unint64_t v20 = *(void *)((v11 + ((v10 + v18) & ~v9)) & 0xFFFFFFFFFFFFF8LL);
    if (v20 >= 0xFFFFFFFF) {
      LODWORD(v20) = -1;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v19 = (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
    if (v19 >= 2) {
      return v19 - 1;
    }
    else {
      return 0LL;
    }
  }

void storeEnumTagSinglePayload for NSKeyValueObservedChange( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0u;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = ((v11
        + 7
        + ((v11
          + *(unsigned __int8 *)(v7 + 80)
  if (v10 < a3)
  {
    unsigned int v13 = (a3 - v10 + 255) >> (8 * v12);
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }

  if (v10 < a2)
  {
    else {
      int v16 = (~(_BYTE)v10 + a2);
    }
    bzero(a1, v12);
    if ((_DWORD)v12 == 1) {
      *a1 = v16;
    }
    else {
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }

  __asm { BR              X17 }

void sub_182F2A038()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x182F2A138LL);
}

void sub_182F2A040(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + specialized Set._Variant.insert(_:)(&v5, v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x182F2A048LL);
  }
  JUMPOUT(0x182F2A138LL);
}

void sub_182F2A0C0()
{
  _BYTE *v0 = v1;
  JUMPOUT(0x182F2A138LL);
}

void sub_182F2A0EC()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x182F2A138LL);
}

void sub_182F2A0F4()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x182F2A138LL);
}

void sub_182F2A0FC(unsigned int a1@<W1>, size_t a2@<X8>)
{
  *(_WORD *)(v7 + v8) = 0;
  if (a1)
  {
    int v2 = (void *)((v7 + v6 + 8) & v4);
    if (v5 < 0x7FFFFFFE) {
      JUMPOUT(0x182F2A0C8LL);
    }
    if (v5 >= a1) {
      JUMPOUT(0x182F2A108LL);
    }
    if ((_DWORD)a2)
    {
      else {
        int v3 = 4;
      }
      bzero(v2, a2);
      __asm { BR              X10 }
    }
  }

  JUMPOUT(0x182F2A138LL);
}

void sub_182F2A14C()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x182F2A138LL);
}

void sub_182F2A15C()
{
  _WORD *v0 = v1;
  JUMPOUT(0x182F2A138LL);
}

void sub_182F2A164()
{
  _DWORD *v0 = v1;
  JUMPOUT(0x182F2A138LL);
}

uint64_t dispatch thunk of static NSKeyValueObservingCustomization.keyPathsAffectingValue(for:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static NSKeyValueObservingCustomization.automaticallyNotifiesObservers(for:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for __KVOKeyPathBridgeMachinery()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey()
{
  return objc_opt_self();
}

uint64_t method lookup function for NSKeyValueObservation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NSKeyValueObservation.invalidate()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x78LL))();
}

uint64_t specialized static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v12 = (objc_class *)type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
  unsigned int v13 = (char *)objc_allocWithZone(v12);
  unsigned int v14 = &v13[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value];
  *(void *)unsigned int v14 = a1;
  *((void *)v14 + 1) = a2;
  v29.receiver = v13;
  v29.super_class = v12;
  swift_bridgeObjectRetain();
  id v15 = objc_msgSendSuper2(&v29, sel_init);
  int v16 = (void *)objc_opt_self();
  id v17 = objc_msgSend(v16, sel_currentThread);
  id v18 = objc_msgSend(v17, sel_threadDictionary);

  id v19 = v15;
  id v20 = objc_msgSend(v18, sel_objectForKeyedSubscript_, v19);

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v27, 0, sizeof(v27));
  }

  outlined init with take of Any?((uint64_t)v27, (uint64_t)v28);
  id v21 = objc_msgSend(v16, sel_currentThread);
  id v22 = objc_msgSend(v21, sel_threadDictionary);

  id v23 = v19;
  objc_msgSend(v22, sel_setObject_forKeyedSubscript_, a3, v23);

  objc_msgSend(a4, sel_addObserver_forKeyPath_options_context_, a5, String._bridgeToObjectiveCImpl()(), a8, 0);
  swift_unknownObjectRelease();
  $defer #1 () in static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)((uint64_t)v23, (uint64_t)v28);

  return outlined destroy of Any?((uint64_t)v28, &demangling cache variable for type metadata for Any?);
}

uint64_t specialized static __KVOKeyPathBridgeMachinery._bridgeKeyPath(_:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  id v5 = objc_msgSend(v4, sel_currentThread);
  id v6 = objc_msgSend(v5, sel_threadDictionary);

  uint64_t v7 = (objc_class *)type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  unsigned int v9 = &v8[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value];
  *(void *)unsigned int v9 = a1;
  *((void *)v9 + 1) = a2;
  v15.receiver = v8;
  v15.super_class = v7;
  id v10 = objc_msgSendSuper2(&v15, sel_init);
  id v11 = objc_msgSend(v6, sel_objectForKeyedSubscript_, v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v14, 0, sizeof(v14));
  }

  outlined init with take of Any?((uint64_t)v14, (uint64_t)v16);
  if (v17)
  {
    type metadata accessor for AnyKeyPath();
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

uint64_t specialized NSObject.__NS_swiftOverlay_automaticallyNotifiesObserversForKey(_:original:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v8 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyValueObservingCustomization.Type);
  if (swift_dynamicCast() && specialized static __KVOKeyPathBridgeMachinery._bridgeKeyPath(_:)(a1, a2))
  {
    char v9 = (*(uint64_t (**)(void))(v12 + 16))();
    swift_release();
  }

  else
  {
    uint64_t v10 = String._bridgeToObjectiveCImpl()();
    char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v10);
    swift_unknownObjectRelease();
  }

  return v9 & 1;
}

uint64_t specialized NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v39[0] = a3;
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v8 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyValueObservingCustomization.Type);
  if (swift_dynamicCast() && specialized static __KVOKeyPathBridgeMachinery._bridgeKeyPath(_:)(a1, a2))
  {
    uint64_t v9 = (*(uint64_t (**)(void))(v33 + 8))();
    if ((v9 & 0xC000000000000001LL) != 0)
    {
      __CocoaSet.count.getter();
      uint64_t v38 = Set.init(minimumCapacity:)();
      __CocoaSet.makeIterator()();
      type metadata accessor for AnyKeyPath();
      Set.Iterator.init(_cocoa:)();
      uint64_t v9 = v39[0];
      uint64_t v10 = v39[1];
      __int128 v11 = v40;
      uint64_t v12 = v41;
    }

    else
    {
      uint64_t v38 = Set.init(minimumCapacity:)();
      uint64_t v21 = -1LL;
      uint64_t v22 = -1LL << *(_BYTE *)(v9 + 32);
      uint64_t v23 = ~v22;
      uint64_t v10 = v9 + 56;
      uint64_t v24 = -v22;
      if (v24 < 64) {
        uint64_t v21 = ~(-1LL << v24);
      }
      uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(v21 & *(void *)(v9 + 56));
      __int128 v11 = (unint64_t)v23;
    }

    uint64_t aBlock = v9;
    uint64_t v33 = v10;
    __int128 v34 = v11;
    uint64_t v35 = v12;
    __int128 v36 = closure #1 in NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:);
    uint64_t v37 = 0LL;
    specialized LazyMapSequence.Iterator.next()();
    if (v26)
    {
      unint64_t v27 = v25;
      unint64_t v28 = v26;
      do
      {
        specialized Set._Variant.insert(_:)(&v31, v27, v28);
        swift_bridgeObjectRelease();
        specialized LazyMapSequence.Iterator.next()();
        unint64_t v27 = v29;
        unint64_t v28 = v30;
      }

      while (v30);
    }

    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_release();
    return v38;
  }

  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  id v14 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v15 = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v15)
  {
    uint64_t v16 = v15;

    return v16;
  }

  objc_msgSend(v14, sel_count);
  v39[0] = Set.init(minimumCapacity:)();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v39;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = partial apply for specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:);
  *(void *)(v18 + 24) = v17;
  uint64_t v35 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  __int128 v36 = (uint64_t (*)@<X0>(uint64_t *@<X8>))v18;
  uint64_t aBlock = MEMORY[0x1895F87A8];
  uint64_t v33 = 1107296256LL;
  *(void *)&__int128 v34 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((void *)&v34 + 1) = &block_descriptor;
  id v19 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateObjectsUsingBlock_, v19);
  _Block_release(v19);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v19 & 1) == 0)
  {
    uint64_t v16 = v39[0];

    swift_release();
    return v16;
  }

  __break(1u);
  return result;
}

uint64_t sub_182F2A9C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)( uint64_t a1)
{
  return specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(a1);
}

uint64_t sub_182F2A9D8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( a1,  a2,  *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_182F2AA08()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return swift_deallocObject();
}

double _LocaleUnlocalized.calendar.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v4);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t _LocaleUnlocalized.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _LocaleUnlocalized()
{
  return objc_opt_self();
}

uint64_t protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleUnlocalized( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of LocalePreferences?(a3, (uint64_t)v6);
  outlined init with take of LocalePreferences?((uint64_t)v6, v4 + 16);
  return v4;
}

uint64_t protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleUnlocalized( uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = swift_allocObject();
  __int128 v5 = a3[7];
  v11[6] = a3[6];
  v12[0] = v5;
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)a3 + 124);
  __int128 v6 = a3[3];
  v11[2] = a3[2];
  v11[3] = v6;
  __int128 v7 = a3[5];
  v11[4] = a3[4];
  v11[5] = v7;
  __int128 v8 = a3[1];
  v11[0] = *a3;
  v11[1] = v8;
  destructiveProjectEnumData for PredicateCodableError(v11, v9);
  outlined init with take of LocalePreferences?((uint64_t)v11, v4 + 16);
  return v4;
}

uint64_t protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleUnlocalized( const void *a1)
{
  uint64_t v2 = swift_allocObject();
  memcpy(v4, a1, sizeof(v4));
  outlined release of Locale.Components(v4);
  _s10Foundation17LocalePreferencesVSgWOi0_(v5);
  outlined init with take of LocalePreferences?((uint64_t)v5, v2 + 16);
  return v2;
}

uint64_t protocol witness for _LocaleProtocol.copy(newCalendarIdentifier:) in conformance _LocaleUnlocalized()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.identifier.getter in conformance _LocaleUnlocalized()
{
  return 0x3130305F6E65LL;
}

uint64_t protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleUnlocalized()
{
  return 0LL;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleUnlocalized()
{
  return 28261LL;
}

uint64_t protocol witness for _LocaleProtocol.regionCode.getter in conformance _LocaleUnlocalized()
{
  return 3223600LL;
}

uint64_t protocol witness for _LocaleProtocol.exemplarCharacterSet.getter in conformance _LocaleUnlocalized( uint64_t a1)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  int v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1895F8858](a1);
  swift_retain_n();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v5);
  os_unfair_lock_unlock(v1 + 31);
  swift_release_n();
  uint64_t v2 = *((void *)&v5 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 184))(ObjectType, v2);
  return swift_unknownObjectRelease();
}

double protocol witness for _LocaleProtocol.calendar.getter in conformance _LocaleUnlocalized@<D0>( _OWORD *a1@<X8>)
{
  return _LocaleUnlocalized.calendar.getter(a1);
}

void protocol witness for _LocaleProtocol.calendarIdentifier.getter in conformance _LocaleUnlocalized( _BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleUnlocalized()
{
  return 0x647261646E617473LL;
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleUnlocalized()
{
  return 46LL;
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleUnlocalized()
{
  return 44LL;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleUnlocalized()
{
  return 42178LL;
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 10256610LL;
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 10322146LL;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 9994466LL;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 10060002LL;
}

uint64_t protocol witness for _LocaleProtocol.measurementSystem.getter in conformance _LocaleUnlocalized@<X0>( uint64_t a1@<X8>)
{
  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5C5CE8;
  __int128 v3 = xmmword_18C5C5CF0;
  *(void *)a1 = static Locale.MeasurementSystem.metric;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.numberingSystem.getter in conformance _LocaleUnlocalized@<X0>( uint64_t a1@<X8>)
{
  if (one-time initialization token for latn != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C5D40F8;
  __int128 v3 = xmmword_18C5D4100;
  *(void *)a1 = static Locale.NumberingSystem.latn;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.availableNumberingSystems.getter in conformance _LocaleUnlocalized()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  if (one-time initialization token for latn != -1) {
    swift_once();
  }
  uint64_t v1 = qword_18C5D40F8;
  __int128 v2 = xmmword_18C5D4100;
  *(void *)(v0 + 32) = static Locale.NumberingSystem.latn;
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v0 + 48) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

void protocol witness for _LocaleProtocol.firstDayOfWeek.getter in conformance _LocaleUnlocalized( _BYTE *a1@<X8>)
{
  *a1 = 1;
}

double protocol witness for _LocaleProtocol.weekendRange.getter in conformance _LocaleUnlocalized@<D0>( uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  double result = 86400.0;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183724B90;
  *(_OWORD *)(a1 + 32) = xmmword_183724BA0;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

double protocol witness for _LocaleProtocol.language.getter in conformance _LocaleUnlocalized@<D0>( uint64_t a1@<X8>)
{
  Swift::String v2 = String.lowercased()();
  Swift::String v3 = String.uppercased()();
  *(_OWORD *)a1 = xmmword_183724BB0;
  *(Swift::String *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)&double result = 3223600LL;
  *(_OWORD *)(a1 + 64) = xmmword_183724BC0;
  *(Swift::String *)(a1 + 80) = v3;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.collation.getter in conformance _LocaleUnlocalized@<X0>( uint64_t a1@<X8>)
{
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D40D8;
  __int128 v3 = xmmword_18C5D40E0;
  *(void *)a1 = static Locale.Collation.standard;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double protocol witness for _LocaleProtocol.region.getter in conformance _LocaleUnlocalized@<D0>( uint64_t a1@<X8>)
{
  Swift::String v2 = String.uppercased()();
  *(void *)&double result = 3223600LL;
  *(_OWORD *)a1 = xmmword_183724BC0;
  *(Swift::String *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
  return result;
}

void protocol witness for _LocaleProtocol.timeZone.getter in conformance _LocaleUnlocalized(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

double protocol witness for _LocaleProtocol.subdivision.getter in conformance _LocaleUnlocalized@<D0>( _OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.identifier(_:) in conformance _LocaleUnlocalized(char *a1)
{
  return *(void *)&aEn001[8 * *a1];
}

void protocol witness for _LocaleProtocol.forceFirstWeekday(_:) in conformance _LocaleUnlocalized( _BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleUnlocalized@<X0>( uint64_t a1@<X8>)
{
  return outlined retain of LocalePreferences?( (uint64_t)v4,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LocaleUnlocalized()
{
  return 0xD000000000000012LL;
}

unint64_t instantiation function for generic protocol witness table for _LocaleUnlocalized( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized;
  if (!lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized)
  {
    uint64_t v1 = type metadata accessor for _LocaleUnlocalized();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _LocaleUnlocalized, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized);
  }

  return result;
}

{
  unint64_t result;
  uint64_t v1;
  unint64_t result = lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized;
  if (!lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized)
  {
    uint64_t v1 = type metadata accessor for _LocaleUnlocalized();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _LocaleUnlocalized, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized);
  }

  return result;
}

uint64_t specialized _LocaleUnlocalized.bridgeToNSLocale()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.fixed(_:)(v0, 0x3130305F6E65LL, 0xE600000000000000LL, &v6);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  uint64_t v2 = *((void *)&v6 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 488))(ObjectType, v2);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t outlined init with take of LocalePreferences?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in LocaleCache.fixed(_:)partial apply@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return closure #1 in LocaleCache.fixed(_:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t *outlined release of Locale.Components(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[17];
  uint64_t v11 = a1[22];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  uint64_t v15 = a1[31];
  uint64_t v16 = a1[30];
  uint64_t v17 = a1[35];
  uint64_t v18 = a1[34];
  uint64_t v19 = a1[41];
  uint64_t v20 = a1[40];
  outlined consume of Locale.LanguageCode?(*a1, a1[1]);
  outlined consume of Locale.LanguageCode?(v2, v3);
  outlined consume of Locale.LanguageCode?(v4, v5);
  outlined consume of Locale.LanguageCode?(v6, v8);
  outlined consume of Locale.LanguageCode?(v10, v9);
  outlined consume of Locale.LanguageCode?(v12, v11);
  outlined consume of Locale.LanguageCode?(v14, v13);
  outlined consume of Locale.LanguageCode?(v16, v15);
  outlined consume of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRelease();
  outlined consume of Locale.LanguageCode?(v20, v19);
  return a1;
}

double _s10Foundation17LocalePreferencesVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  *a1 = xmmword_183723F60;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  *(_OWORD *)((char *)a1 + 124) = 0u;
  return result;
}

double Date.timeIntervalSince1970.getter()
{
  return *v0 + 978307200.0;
}

BOOL specialized static Comparable.<= infix(_:_:)(double a1, double a2)
{
  return a2 >= a1;
}

uint64_t specialized static Comparable.<= infix(_:_:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 || a3)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    if (a4 == a1 && a5 == a2) {
      char v6 = 1;
    }
    else {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    }
    return v6 & 1;
  }

  return result;
}

BOOL specialized static Comparable.<= infix(_:_:)(double a1, double a2, double a3, double a4)
{
  BOOL v4 = a3 < a1;
  if (a1 >= a3 && a1 <= a3) {
    BOOL v4 = a4 < a2;
  }
  return !v4;
}

BOOL specialized static Comparable.<= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 >= a1;
}

double static Date.timeIntervalBetween1970AndReferenceDate.getter()
{
  return 978307200.0;
}

Foundation::Date __swiftcall Date.init()()
{
  uint64_t v1 = v0;
  uint64_t v4 = *MEMORY[0x1895F89C0];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result._time = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  double *v1 = result._time;
  return result;
}

Foundation::Date __swiftcall Date.init(timeIntervalSinceNow:)(Swift::Double timeIntervalSinceNow)
{
  uint64_t v3 = v1;
  uint64_t v6 = *MEMORY[0x1895F89C0];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result._time = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001 + timeIntervalSinceNow;
  *uint64_t v3 = result._time;
  return result;
}

Foundation::Date __swiftcall Date.init(timeIntervalSinceReferenceDate:)( Foundation::Date timeIntervalSinceReferenceDate)
{
  v1->_time = timeIntervalSinceReferenceDate._time;
  return timeIntervalSinceReferenceDate;
}

Foundation::Date __swiftcall Date.init(timeIntervalSince1970:)(Swift::Double timeIntervalSince1970)
{
  result._time = timeIntervalSince1970 + -978307200.0;
  double *v1 = result._time;
  return result;
}

Foundation::Date __swiftcall Date.init(timeInterval:since:)(Swift::Double timeInterval, Foundation::Date since)
{
  result._time = *v2 + timeInterval;
  *uint64_t v3 = result._time;
  return result;
}

double Date.timeIntervalSinceReferenceDate.getter()
{
  return *(double *)v0;
}

Swift::Double __swiftcall Date.timeIntervalSince(_:)(Foundation::Date a1)
{
  return *v2 - *v1;
}

double Date.timeIntervalSinceNow.getter()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  double v1 = *v0;
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  return v1 - ((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001);
}

Foundation::Date __swiftcall Date.addingTimeInterval(_:)(Swift::Double a1)
{
  result._time = *v2 + a1;
  double *v1 = result._time;
  return result;
}

double static Date.+ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result = *a1 + a3;
  *a2 = result;
  return result;
}

Swift::Void __swiftcall Date.addTimeInterval(_:)(Swift::Double a1)
{
  double *v1 = *v1 + a1;
}

double static Date.+= infix(_:_:)(double *a1, double a2)
{
  double result = *a1 + a2;
  *a1 = result;
  return result;
}

void static Date.distantFuture.getter(void *a1@<X8>)
{
  *a1 = 0x422D63C37F000000LL;
}

void static Date.distantPast.getter(void *a1@<X8>)
{
  *a1 = 0xC22D63C8C5000000LL;
}

double static Date.now.getter@<D0>(double *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

void Date.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0LL;
  }
  Hasher._combine(_:)(v1);
}

NSComparisonResult __swiftcall Date.compare(_:)(Foundation::Date a1)
{
  if (*v2 < *v1) {
    return -1LL;
  }
  else {
    return (unint64_t)(*v1 < *v2);
  }
}

BOOL static Date.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL static Date.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL static Date.> infix(_:_:)(double *a1, double *a2)
{
  return *a2 < *a1;
}

double static Date.- infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result = *a1 - a3;
  *a2 = result;
  return result;
}

double static Date.-= infix(_:_:)(double *a1, double a2)
{
  double result = *a1 - a2;
  *a1 = result;
  return result;
}

Swift::Int Date.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a2 < *a1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0LL;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a1 == *a2;
}

id Date.debugDescription.getter()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  id v2 = objc_msgSend(v1, sel_description);

  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t Date.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  __int128 v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(v9 + 32) = 0xD00000000000001ELL;
  *(void *)(v9 + 40) = 0x80000001839C9510LL;
  *(void *)(v9 + 72) = MEMORY[0x189618560];
  *(void *)(v9 + 48) = v8;
  v14[1] = v8;
  v14[0] = v9;
  uint64_t v10 = *MEMORY[0x18961A718];
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v7, 0LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  id v2 = objc_msgSend(v1, sel_description);

  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t Date.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v6 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Date.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v6 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
}

id static Date._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t static Date._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  return 1LL;
}

id static Date._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    id result = objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    *a2 = v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Date()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Date( void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Date( void *a1, uint64_t a2)
{
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  return 1LL;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Date@<X0>( id result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    id result = objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    *a2 = v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t NSDate._toCustomAnyHashable()()
{
  return AnyHashable.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDate()
{
  id v1 = *v0;
  objc_msgSend(v1, sel_timeIntervalSinceReferenceDate);
  lazy protocol witness table accessor for type Date and conformance Date();
  AnyHashable.init<A>(_:)();
}

void Date.customPlaygroundQuickLook.getter(uint64_t a1@<X8>)
{
  double v3 = *v1;
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), sel_init);
  objc_msgSend(v4, sel_setDateStyle_, 2);
  objc_msgSend(v4, sel_setTimeStyle_, 1);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v3);
  id v6 = objc_msgSend(v4, sel_stringFromDate_, v5);

  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 32) = 0;
}

double static Date.validCalendarRange.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = -2.11845067e11;
  *a1 = xmmword_183724C80;
  return result;
}

double Date.capped.getter@<D0>(double *a1@<X8>)
{
  double v2 = *v1;
  if (*v1 > 1.59271755e13) {
    double v2 = 1.59271755e13;
  }
  double result = fmax(v2, -2.11845067e11);
  *a1 = result;
  return result;
}

BOOL Date.isValidForEnumeration.getter()
{
  return *v0 <= 1.59271755e13 && *v0 >= -2.11845067e11;
}

Swift::Double __swiftcall Date.distance(to:)(Foundation::Date to)
{
  return *v1 - *v2;
}

unint64_t instantiation function for generic protocol witness table for Date(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date and conformance Date();
  a1[2] = lazy protocol witness table accessor for type Date and conformance Date();
  a1[3] = lazy protocol witness table accessor for type Date and conformance Date();
  unint64_t result = lazy protocol witness table accessor for type Date and conformance Date();
  a1[4] = result;
  return result;
}

uint64_t associated type witness table accessor for Strideable.Stride : Comparable in Date()
{
  return MEMORY[0x189618588];
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in Date()
{
  return MEMORY[0x1896185A0];
}

double protocol witness for Strideable.distance(to:) in conformance Date@<D0>( double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 - *v2;
  *a2 = result;
  return result;
}

double protocol witness for Strideable.advanced(by:) in conformance Date@<D0>( double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + *v2;
  *a2 = result;
  return result;
}

double *protocol witness for static Strideable._step(after:from:by:) in conformance Date( double *result, uint64_t a2, char a3, double *a4, double *a5, double *a6)
{
  double v6 = *a6;
  if ((a3 & 1) != 0)
  {
    double v8 = v6 + *a4;
    goto LABEL_5;
  }

  if (!__OFADD__(a2++, 1LL))
  {
    double v8 = *a5 + v6 * (double)a2;
LABEL_5:
    *double result = v8;
    return (double *)a2;
  }

  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Date()
{
  return &type metadata for Date;
}

Swift::Int ICUDateIntervalFormatter.Signature.hashValue.getter()
{
  Swift::UInt v1 = v0[352];
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v4);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ICUDateIntervalFormatter.Signature( uint64_t a1)
{
  Swift::UInt v3 = v1[352];
  Locale.Components.hash(into:)(a1);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUDateIntervalFormatter.Signature()
{
  Swift::UInt v1 = v0[352];
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v4);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t one-time initialization function for cache()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  static ICUDateIntervalFormatter.cache = 100LL;
  *(void *)algn_18C5D62F8 = result;
  return result;
}

{
  uint64_t result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICURelativeDateFormatter.Signature : ICURelativeDateFormatter?]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  static ICURelativeDateFormatter.cache = 100LL;
  *(void *)algn_18C5D6338 = result;
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<CalendarCache.State>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 60) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  Swift::UInt v1 = MEMORY[0x18961AFF0];
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = v1;
  *(void *)(result + 48) = -1LL;
  *(_BYTE *)(result + 56) = 0;
  static CalendarCache.cache = result;
  return result;
}

{
  uint64_t result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICULegacyNumberFormatter.Signature : ICULegacyNumberFormatter]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  static ICULegacyNumberFormatter.cache = 100LL;
  unk_18C5CB2B0 = result;
  return result;
}

{
  uint64_t result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICUListFormatter.Signature : ICUListFormatter]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  static ICUListFormatter.cache = 100LL;
  *(void *)algn_18C5D6358 = result;
  return result;
}

{
  uint64_t result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[RegexPatternCache.Key : Regex<AnyRegexOutput>]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  static RegexPatternCache.cache = result;
  return result;
}

{
  uint64_t result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[Date.ComponentsFormatStyle : NSDateComponentsFormatter]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  static Date.ComponentsFormatStyle.cache = 100LL;
  *(void *)algn_18C5D6428 = result;
  return result;
}

uint64_t ICUDateIntervalFormatter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUDateIntervalFormatter()
{
  return objc_opt_self();
}

uint64_t specialized static ICUDateIntervalFormatter.Signature.== infix(_:_:)( unsigned __int8 *__src, uint64_t a2)
{
  int v4 = __src[352];
  uint64_t v5 = *((void *)__src + 45);
  uint64_t v6 = *((void *)__src + 46);
  uint64_t v7 = *((void *)__src + 47);
  uint64_t v8 = *((void *)__src + 48);
  memcpy(v17, (const void *)a2, sizeof(v17));
  int v9 = *(unsigned __int8 *)(a2 + 352);
  uint64_t v10 = *(void *)(a2 + 360);
  uint64_t v11 = *(void *)(a2 + 368);
  uint64_t v12 = *(void *)(a2 + 376);
  uint64_t v13 = *(void *)(a2 + 384);
  BOOL v14 = specialized static Locale.Components.== infix(_:_:)((uint64_t)__dst, (uint64_t)v17);
  uint64_t result = 0LL;
  if (v14 && v4 == v9)
  {
    if (v5 == v10 && v6 == v11 || (char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v16 & 1) != 0))
    {
      if (v7 == v12 && v8 == v13) {
        return 1LL;
      }
      else {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }

  return result;
}

uint64_t specialized static ICUDateIntervalFormatter.formatter(for:)(uint64_t a1)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_s *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  char isUniquelyReferenced_nonNull_native;
  char v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  void *v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  void *v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_unfair_lock_s *v113;
  os_unfair_lock_s *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  os_unfair_lock_s *v126;
  uint64_t v127;
  char v128;
  int64_t v129;
  void *v130;
  int v131;
  __int16 v132;
  uint64_t v133[49];
  uint64_t v134[44];
  _BYTE v135[392];
  uint64_t __dst[44];
  uint64_t v137[49];
  uint64_t __src[49];
  char v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  __int16 v143;
  int v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int16 v151;
  uint64_t v152;
  uint64_t v152 = *MEMORY[0x1895F89C0];
  __int128 v1 = *(_OWORD *)(a1 + 64);
  uint64_t v148 = *(_OWORD *)(a1 + 48);
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v125 = *(void *)(a1 + 40);
  uint64_t v127 = *(void *)(a1 + 24);
  uint64_t v149 = v1;
  uint64_t v150 = *(_OWORD *)(a1 + 80);
  uint64_t v151 = *(_WORD *)(a1 + 96);
  __src[0] = v2;
  __src[1] = v3;
  Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
  unint64_t v6 = v5;
  uint64_t v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v8 = v4;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v139 = 3;
    unint64_t v140 = 0LL;
    uint64_t v141 = 50332931;
    uint64_t v142 = 0LL;
    uint64_t v143 = 1;
    __int128 v144 = 591363;
    unint64_t v145 = 513;
    uint64_t v146 = 0LL;
    uint64_t v147 = 3327;
    __src[0] = v2;
    __src[1] = v3;
    Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
    uint64_t v8 = v9;
    unint64_t v6 = v10;
  }

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 64);
  swift_unknownObjectRetain();
  uint64_t v13 = v12(ObjectType, v3);
  Locale.Components.init(identifier:)(v13, v14, __src);
  v137[0] = v2;
  v137[1] = v3;
  Locale.Components.applyPreferencesOverride(_:)(v137);
  swift_unknownObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v15 = swift_getObjectType();
  char v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v125 + 24);
  outlined retain of Locale.Components(__dst);
  swift_unknownObjectRetain();
  v16(__src, v15, v125);
  swift_unknownObjectRelease();
  uint64_t v17 = __src[0];
  uint64_t v18 = swift_getObjectType();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v127 + 32);
  swift_unknownObjectRetain();
  uint64_t v20 = v19(v18, v127);
  uint64_t v22 = v21;
  swift_unknownObjectRelease();
  memcpy(v137, __dst, 0x160uLL);
  uint64_t v128 = v17;
  LOBYTE(v137[44]) = v17;
  uint64_t v123 = v20;
  v137[45] = v20;
  v137[46] = v22;
  v137[47] = v8;
  v137[48] = v6;
  uint64_t v23 = v8;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v25 = static ICUDateIntervalFormatter.cache;
  uint64_t v24 = *(os_unfair_lock_s **)algn_18C5D62F8;
  memcpy(v135, v137, sizeof(v135));
  swift_retain_n();
  os_unfair_lock_lock(v24 + 6);
  specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v24[4], v135, __src);
  __int128 v126 = v24 + 6;
  os_unfair_lock_unlock(v24 + 6);
  swift_release();
  unint64_t v26 = __src[0];
  if (__src[0] != 1) {
    goto LABEL_72;
  }
  uint64_t v113 = v24 + 4;
  uint64_t v114 = v24;
  uint64_t v112 = v25;
  type metadata accessor for ICUDateIntervalFormatter();
  __int128 v116 = v23;
  unint64_t v117 = swift_allocObject();
  char v115 = v6;
  uint64_t v119 = __dst[14];
  __int128 v121 = (void *)__dst[26];
  uint64_t v94 = __dst[1];
  uint64_t v95 = __dst[0];
  v134[0] = __dst[0];
  v134[1] = __dst[1];
  unint64_t v92 = __dst[3];
  uint64_t v93 = __dst[2];
  v134[2] = __dst[2];
  v134[3] = __dst[3];
  uint64_t v90 = __dst[5];
  uint64_t v91 = __dst[4];
  v134[4] = __dst[4];
  v134[5] = __dst[5];
  char v88 = __dst[7];
  uint64_t v89 = __dst[6];
  v134[6] = __dst[6];
  v134[7] = __dst[7];
  uint64_t v86 = __dst[9];
  uint64_t v87 = __dst[8];
  v134[8] = __dst[8];
  v134[9] = __dst[9];
  uint64_t v84 = __dst[11];
  uint64_t v85 = __dst[10];
  v134[10] = __dst[10];
  v134[11] = __dst[11];
  LOBYTE(v134[12]) = v17;
  uint64_t v96 = __dst[13];
  v134[13] = __dst[13];
  v134[14] = __dst[14];
  uint64_t v107 = __dst[16];
  __int128 v108 = __dst[15];
  v134[15] = __dst[15];
  v134[16] = __dst[16];
  uint64_t v105 = __dst[18];
  uint64_t v106 = __dst[17];
  v134[17] = __dst[17];
  v134[18] = __dst[18];
  uint64_t v103 = __dst[20];
  uint64_t v104 = __dst[19];
  v134[19] = __dst[19];
  v134[20] = __dst[20];
  uint64_t v101 = __dst[22];
  unint64_t v102 = __dst[21];
  v134[21] = __dst[21];
  v134[22] = __dst[22];
  unint64_t v99 = __dst[24];
  char v100 = __dst[23];
  v134[23] = __dst[23];
  v134[24] = __dst[24];
  unint64_t v97 = BYTE1(__dst[25]);
  uint64_t v98 = __dst[25];
  LOWORD(v134[25]) = __dst[25];
  v134[26] = __dst[26];
  v134[27] = __dst[27];
  uint64_t v110 = __dst[28];
  uint64_t v111 = __dst[27];
  v134[28] = __dst[28];
  v134[29] = __dst[29];
  uint64_t v109 = __dst[29];
  unint64_t v27 = __dst[31];
  uint64_t v79 = __dst[30];
  v134[30] = __dst[30];
  v134[31] = __dst[31];
  unint64_t v28 = __dst[33];
  uint64_t v78 = __dst[32];
  v134[32] = __dst[32];
  v134[33] = __dst[33];
  unint64_t v29 = __dst[35];
  uint64_t v77 = __dst[34];
  v134[34] = __dst[34];
  v134[35] = __dst[35];
  __int128 v76 = __dst[36];
  v134[36] = __dst[36];
  v134[37] = __dst[37];
  unint64_t v83 = __dst[37];
  __int128 v75 = __dst[38];
  v134[38] = __dst[38];
  v134[39] = __dst[39];
  uint64_t v82 = __dst[39];
  uint64_t v74 = __dst[40];
  v134[40] = __dst[40];
  v134[41] = __dst[41];
  uint64_t v81 = __dst[41];
  __int128 v73 = __dst[42];
  v134[42] = __dst[42];
  v134[43] = __dst[43];
  uint64_t v80 = __dst[43];
  memcpy(__src, v134, 0x160uLL);
  outlined retain of Locale.Components(__dst);
  outlined retain of ICUDateIntervalFormatter.Signature(v137);
  Locale.Components.icuIdentifier.getter();
  swift_bridgeObjectRetain();
  unint64_t v30 = specialized _copyCollectionToContiguousArray<A>(_:)(v20, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v31 = specialized _copyCollectionToContiguousArray<A>(_:)(v116, v6);
  swift_bridgeObjectRelease();
  outlined release of ICUDateIntervalFormatter.Signature(v137);
  uint64_t v32 = v31[2];
  if (v32 >> 31)
  {
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v123 = v29;
  if (v30[2] >> 31)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  char v115 = v28;
  __int128 v116 = v27;
  String.utf8CString.getter();
  uint64_t v33 = udtitvfmt_open();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  int64_t v41 = v126;
  unint64_t v26 = v117;
  unint64_t v27 = (uint64_t)v114;
  if (!v33) {
    goto LABEL_18;
  }
  *(void *)(v117 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v33;
  udtitvfmt_setAttribute();
  specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
  outlined release of Locale.Components(v134);
  while (1)
  {
    swift_retain();
    os_unfair_lock_lock(v41);
    unint64_t v42 = *(void *)(v27 + 16);
    memcpy(__src, v135, sizeof(__src));
    if (v112 >= *(void *)(v42 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = v113;
    }

    else
    {
      uint64_t v43 = v113;
      *(void *)&v113->_os_unfair_lock_opaque = MEMORY[0x18961AFF0];
    }

    outlined retain of ICUDateIntervalFormatter.Signature(__src);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v130 = *(void **)&v43->_os_unfair_lock_opaque;
    unint64_t v31 = *(void **)&v43->_os_unfair_lock_opaque;
    *(void *)&v43->_os_unfair_lock_opaque = 0x8000000000000000LL;
    uint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)__src);
    uint64_t v46 = v31[2];
    unint64_t v47 = (v45 & 1) == 0;
    unint64_t v48 = v46 + v47;
    if (!__OFADD__(v46, v47)) {
      break;
    }
LABEL_32:
    __break(1u);
    swift_once();
    __int128 v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static ICUError.logger);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter();
    __int128 v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      __src[0] = v38;
      *(_DWORD *)uint64_t v37 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016LL, 0x80000001839C9570LL, __src);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12) = 2080;
      uint64_t v39 = ICUError.debugDescription.getter((UErrorCode)v31);
      v133[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v39, v40, __src);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_182EB1000, v35, v36, "%s. Error: %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E20E60](v38, -1LL, -1LL);
      MEMORY[0x186E20E60](v37, -1LL, -1LL);
    }

    int64_t v41 = v126;
    if (v32) {
      udtitvfmt_close();
    }
LABEL_18:
    __src[0] = v95;
    __src[1] = v94;
    __src[2] = v93;
    __src[3] = v92;
    __src[4] = v91;
    __src[5] = v90;
    __src[6] = v89;
    __src[7] = v88;
    __src[8] = v87;
    __src[9] = v86;
    __src[10] = v85;
    __src[11] = v84;
    LOBYTE(__src[12]) = v128;
    __src[13] = v96;
    __src[14] = v119;
    *(_DWORD *)((char *)&__src[12] + 1) = (_DWORD)v130;
    HIDWORD(__src[12]) = *(_DWORD *)((char *)&v130 + 3);
    __src[15] = v108;
    __src[16] = v107;
    _OWORD __src[17] = v106;
    __src[18] = v105;
    __src[19] = v104;
    __src[20] = v103;
    __src[21] = v102;
    __src[22] = v101;
    __src[23] = v100;
    __src[24] = v99;
    LOBYTE(__src[25]) = v98;
    BYTE1(__src[25]) = v97;
    HIWORD(__src[25]) = v132;
    *(_DWORD *)((char *)&__src[25] + 2) = v131;
    __src[26] = (uint64_t)v121;
    __src[27] = v111;
    __src[28] = v110;
    __src[29] = v109;
    __src[30] = v79;
    __src[31] = v116;
    __src[32] = v78;
    __src[33] = v115;
    __src[34] = v77;
    __src[35] = v123;
    __src[36] = v76;
    __src[37] = v83;
    __src[38] = v75;
    __src[39] = v82;
    __src[40] = v74;
    __src[41] = v81;
    __src[42] = v73;
    __src[43] = v80;
    outlined release of Locale.Components(__src);
    swift_deallocPartialClassInstance();
    unint64_t v26 = 0LL;
  }

  char v49 = v45;
  if (v31[3] < v48)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, isUniquelyReferenced_nonNull_native);
    unint64_t v50 = v130;
    BOOL v51 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)__src);
    if ((v49 & 1) != (v52 & 1)) {
      goto LABEL_75;
    }
    uint64_t v32 = v51;
    if ((v49 & 1) == 0) {
      goto LABEL_70;
    }
LABEL_29:
    id v53 = v26;
    uint64_t v54 = v50[7];
    swift_release();
    *(void *)(v54 + 8 * v32) = v53;
    unint64_t v26 = v53;
LABEL_71:
    *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v50;
    swift_bridgeObjectRelease();
    outlined release of ICUDateIntervalFormatter.Signature(__src);
    os_unfair_lock_unlock(v41);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_72:
    outlined release of Locale.Components(__dst);
    swift_release();
    outlined release of ICUDateIntervalFormatter.Signature(v137);
    return v26;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    unint64_t v50 = v31;
    if ((v45 & 1) != 0) {
      goto LABEL_29;
    }
LABEL_70:
    specialized _NativeDictionary._insert(at:key:value:)(v32, __src, v26, v50);
    outlined retain of ICUDateIntervalFormatter.Signature(__src);
    goto LABEL_71;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateIntervalFormatter.Signature, ICUDateIntervalFormatter?>);
  id v55 = static _DictionaryStorage.copy(original:)();
  unint64_t v50 = (void *)v55;
  if (!v31[2])
  {
LABEL_69:
    swift_bridgeObjectRelease();
    if ((v49 & 1) != 0) {
      goto LABEL_29;
    }
    goto LABEL_70;
  }

  unint64_t v118 = v26;
  uint64_t v56 = (char *)(v55 + 64);
  unint64_t v122 = (char *)(v31 + 8);
  unint64_t v57 = (unint64_t)((1LL << *((_BYTE *)v50 + 32)) + 63) >> 6;
  if (v50 != v31 || v56 >= &v122[8 * v57]) {
    memmove(v56, v122, 8 * v57);
  }
  uint64_t v58 = 0LL;
  v50[2] = v31[2];
  uint64_t v59 = 1LL << *((_BYTE *)v31 + 32);
  uint64_t v60 = -1LL;
  if (v59 < 64) {
    uint64_t v60 = ~(-1LL << v59);
  }
  uint64_t v61 = v60 & v31[8];
  unint64_t v120 = (unint64_t)(v59 + 63) >> 6;
  while (1)
  {
    int64_t v41 = v126;
    unint64_t v26 = v118;
    if (v61)
    {
      uint64_t v124 = (v61 - 1) & v61;
      __int128 v129 = v58;
      uint64_t v62 = __clz(__rbit64(v61)) | (v58 << 6);
      goto LABEL_41;
    }

    uint64_t v67 = v58 + 1;
    if (__OFADD__(v58, 1LL))
    {
      __break(1u);
      goto LABEL_74;
    }

    if (v67 >= v120) {
      goto LABEL_69;
    }
    uint64_t v68 = *(void *)&v122[8 * v67];
    int64_t v69 = v58 + 1;
    if (!v68)
    {
      int64_t v69 = v67 + 1;
      if (v67 + 1 >= v120) {
        goto LABEL_69;
      }
      uint64_t v68 = *(void *)&v122[8 * v69];
      if (!v68)
      {
        int64_t v69 = v67 + 2;
        if (v67 + 2 >= v120) {
          goto LABEL_69;
        }
        uint64_t v68 = *(void *)&v122[8 * v69];
        if (!v68)
        {
          int64_t v69 = v67 + 3;
          if (v67 + 3 >= v120) {
            goto LABEL_69;
          }
          uint64_t v68 = *(void *)&v122[8 * v69];
          if (!v68)
          {
            int64_t v69 = v67 + 4;
            if (v67 + 4 >= v120) {
              goto LABEL_69;
            }
            uint64_t v68 = *(void *)&v122[8 * v69];
            if (!v68)
            {
              int64_t v69 = v67 + 5;
              if (v67 + 5 >= v120) {
                goto LABEL_69;
              }
              uint64_t v68 = *(void *)&v122[8 * v69];
              if (!v68)
              {
                int64_t v69 = v67 + 6;
                if (v67 + 6 >= v120) {
                  goto LABEL_69;
                }
                uint64_t v68 = *(void *)&v122[8 * v69];
                if (!v68)
                {
                  int64_t v69 = v67 + 7;
                  if (v67 + 7 >= v120) {
                    goto LABEL_69;
                  }
                  uint64_t v68 = *(void *)&v122[8 * v69];
                  if (!v68)
                  {
                    int64_t v69 = v67 + 8;
                    if (v67 + 8 >= v120) {
                      goto LABEL_69;
                    }
                    uint64_t v68 = *(void *)&v122[8 * v69];
                    if (!v68) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

LABEL_68:
    uint64_t v124 = (v68 - 1) & v68;
    __int128 v129 = v69;
    uint64_t v62 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_41:
    id v63 = 392 * v62;
    uint64_t v64 = (const void *)(v31[6] + 392 * v62);
    memcpy(v133, v64, sizeof(v133));
    uint64_t v65 = 8 * v62;
    int v66 = *(void *)(v31[7] + 8 * v62);
    memmove((void *)(v50[6] + v63), v64, 0x188uLL);
    *(void *)(v50[7] + v65) = v66;
    outlined retain of ICUDateIntervalFormatter.Signature(v133);
    swift_retain();
    uint64_t v58 = v129;
    uint64_t v61 = v124;
  }

  uint64_t v70 = v67 + 9;
  if (v70 >= v120) {
    goto LABEL_69;
  }
  uint64_t v71 = v50;
  uint64_t v68 = *(void *)&v122[8 * v70];
  if (v68)
  {
    int64_t v69 = v70;
    unint64_t v27 = (uint64_t)v114;
    goto LABEL_68;
  }

  while (1)
  {
    int64_t v69 = v70 + 1;
    if (__OFADD__(v70, 1LL)) {
      break;
    }
    unint64_t v26 = v118;
    unint64_t v50 = v71;
    int64_t v41 = v126;
    unint64_t v27 = (uint64_t)v114;
    if (v69 >= v120) {
      goto LABEL_69;
    }
    uint64_t v68 = *(void *)&v122[8 * v69];
    ++v70;
    if (v68) {
      goto LABEL_68;
    }
  }

  URLComponents._URLComponents.percentEncodedUser.getter();
  BOOL v45 = v44;
  swift_bridgeObjectRelease();
  if (v45 | v40)
  {
LABEL_69:
    v46._uint64_t countAndFlagsBits = 64LL;
    v46._object = (void *)0xE100000000000000LL;
    String.append(_:)(v46);
    goto LABEL_73;
  }

  if (BYTE11(v88) == 1 && (void)v88 && (*(_BYTE *)(v88 + 96) & 1) == 0)
  {
    uint64_t v58 = String.subscript.getter();
    MEMORY[0x186E1B610](v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }

          swift_retain_n();
          BOOL v45 = v121;
          swift_retain_n();
          uint64_t v46 = v45;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_129;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          unint64_t v47 = (int)POSIXErrorCode.rawValue.getter();
          unint64_t v48 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          char v49 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v43 = objc_msgSend(v48, sel_initWithDomain_code_userInfo_, v49, v47, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v50 = objc_msgSend(v43, sel_domain);
          BOOL v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          id v53 = v52;

          if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v53 == v54)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v17 = v121;
          }

          else
          {
            id v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v17 = v121;
            if ((v55 & 1) == 0) {
              goto LABEL_127;
            }
          }

  __break(1u);
LABEL_69:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_69:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

        swift_unknownObjectRetain();
        uint64_t v56 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v52, v55, v16, v50, v51, v53);
        uint64_t result = swift_unknownObjectRelease_n();
LABEL_106:
        unint64_t v57 = v52;
        goto LABEL_107;
      }

      uint64_t v59 = *(unsigned __int8 *)(v50 + 18);
      if (*(_BYTE *)(v50 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v158);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v60 = v27;
        uint64_t v61 = v50;
        while (1)
        {
          id v63 = *(unsigned __int16 *)(v61 + 16);
          if (*(_WORD *)(v61 + 16))
          {
            uint64_t v64 = *(void *)(v61 + 32);
            uint64_t v65 = __OFSUB__(v60, v64);
            int v66 = v60 - v64;
            if (v65) {
              goto LABEL_119;
            }
            if (__OFADD__(v66, 1LL)) {
              goto LABEL_120;
            }
            if (v66 + 1 <= 0)
            {
              id v63 = 0LL;
              goto LABEL_40;
            }

            if ((_DWORD)v63 != 1)
            {
              uint64_t v67 = *(void *)(v61 + 56);
              uint64_t v60 = v66 - v67;
              if (__OFSUB__(v66, v67)) {
                goto LABEL_132;
              }
              if (__OFADD__(v60, 1LL)) {
                goto LABEL_133;
              }
              if (v60 + 1 < 1)
              {
                id v63 = 1LL;
                uint64_t v60 = v66;
                goto LABEL_40;
              }

              if ((_DWORD)v63 == 2) {
                goto LABEL_39;
              }
              uint64_t v68 = *(void *)(v61 + 80);
              uint64_t v65 = __OFSUB__(v60, v68);
              int v66 = v60 - v68;
              if (v65) {
                goto LABEL_136;
              }
              if (__OFADD__(v66, 1LL)) {
                goto LABEL_137;
              }
              if (v66 + 1 < 1)
              {
                id v63 = 2LL;
                goto LABEL_40;
              }

              if ((_DWORD)v63 != 3)
              {
                int64_t v69 = 3LL;
                if (v63 > 3) {
                  int64_t v69 = *(unsigned __int16 *)(v61 + 16);
                }
                uint64_t v70 = (void *)(v61 + 104);
                uint64_t v71 = 3LL;
                while (v69 != v71)
                {
                  uint64_t v60 = v66 - *v70;
                  if (__OFSUB__(v66, *v70)) {
                    goto LABEL_130;
                  }
                  if (__OFADD__(v60, 1LL)) {
                    goto LABEL_131;
                  }
                  if (v60 + 1 < 1)
                  {
                    id v63 = v71;
                    uint64_t v60 = v66;
                    goto LABEL_40;
                  }

                  ++v71;
                  v70 += 3;
                  int v66 = v60;
                  if (v63 == v71) {
                    goto LABEL_39;
                  }
                }

              __break(1u);
              goto LABEL_69;
            }

              uint64_t v14 = (v45 - 1) & v45;
              uint64_t v90 = v46;
              uint64_t v38 = __clz(__rbit64(v45)) + (v46 << 6);
            }

            uint64_t v39 = 16 * v38;
            __int128 v40 = (uint64_t *)(*((void *)v95 + 6) + v39);
            unint64_t v42 = *v40;
            int64_t v41 = v40[1];
            uint64_t v91 = *(_OWORD *)(*((void *)v95 + 7) + v39);
            uint64_t v43 = (void *)(*((void *)v7 + 6) + v39);
            void *v43 = v42;
            v43[1] = v41;
            *(_OWORD *)(*((void *)v7 + 7) + v39) = v91;
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v91, *((unint64_t *)&v91 + 1));
          }
        }

        swift_release();
        swift_release();
        goto LABEL_69;
      }

      uint64_t v124 = swift_slowAlloc();
      LODWORD(v176[0]) = 0;
      uint64_t v125 = unumf_resultToString();
      if (SLODWORD(v176[0]) > 0 || v125 <= 0)
      {
        MEMORY[0x186E20E60](v124, -1LL, -1LL);
        goto LABEL_68;
      }

      uint64_t v74 = specialized String.init(_utf16:)(v124, v125);
      __int128 v76 = v126;
      MEMORY[0x186E20E60](v124, -1LL, -1LL);
LABEL_55:
      swift_release();
      swift_release();
      if (v76)
      {
LABEL_70:
        uint64_t v33 = v175;
        uint64_t v77 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        goto LABEL_71;
      }

  __break(1u);
  return result;
}

  if ((v12 & 0x10004) != 0) {
    BYTE9(__src[17]) = 0;
  }
  return memcpy(a4, __src, 0x11AuLL);
}

        swift_bridgeObjectRelease();
        uint64_t v181 = (void *)v129;
        uint64_t v131 = v121;
        if ((v127 & 1) != 0)
        {
LABEL_40:
          outlined init with take of Any((_OWORD *)(*(void *)(v129 + 56) + 32 * v123), v187);
          goto LABEL_70;
        }

                      if (v13 <= v7 >> 16)
                      {
                        __break(1u);
LABEL_97:
                        uint64_t v33 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
LABEL_71:
                        __int128 v34 = v33 >> 16;
                        if (v33 >> 16 >= v13)
                        {
                          __break(1u);
                          goto LABEL_99;
                        }

                        if ((a2 & 0x1000000000000000LL) != 0)
                        {
                          __int128 v36 = String.UTF8View._foreignSubscript(position:)();
                          goto LABEL_79;
                        }

                        if ((a2 & 0x2000000000000000LL) != 0)
                        {
                          uint64_t v68 = a1;
                          int64_t v69 = a2 & 0xFFFFFFFFFFFFFFLL;
                          __int128 v36 = *((_BYTE *)&v68 + v34);
                          goto LABEL_79;
                        }

                        if ((a1 & 0x1000000000000000LL) == 0) {
                          goto LABEL_100;
                        }
                        for (uint64_t i = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32; ; uint64_t i = _StringObject.sharedUTF8.getter())
                        {
                          __int128 v36 = *(_BYTE *)(i + v34);
LABEL_79:
                          __int128 v34 = v67;
                          if (v36 != 53) {
                            break;
                          }
                          if (v14 >> 14 >= v67 >> 14)
                          {
                            uint64_t v37 = Substring.subscript.getter();
                            uint64_t v39 = v38;
                            int v66 = v40;
                            unint64_t v42 = v41;
                            uint64_t v43 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v37,  v38,  v40,  v41,  2u,  0);
                            if (v43 == 2)
                            {
                              uint64_t v68 = v37;
                              int64_t v69 = v39;
                              uint64_t v70 = v66;
                              uint64_t v71 = v42;
                              lazy protocol witness table accessor for type Substring and conformance Substring();
                              StringProtocol._ephemeralString.getter();
                              uint64_t v44 = (void *)String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              BOOL v45 = (unsigned __int16 *)objc_msgSend(v44, sel__fastCharacterContents);
                              uint64_t v46 = v44;
                              if (v45)
                              {
                                uint64_t v68 = v37;
                                int64_t v69 = v39;
                                uint64_t v70 = v66;
                                uint64_t v71 = v42;
                                unint64_t v47 = v45;
                                StringProtocol._ephemeralString.getter();
                                unint64_t v48 = (void *)String._bridgeToObjectiveCImpl()();
                                swift_bridgeObjectRelease();
                                char v49 = objc_msgSend(v48, sel_length);
                                swift_unknownObjectRelease();
                                unint64_t v50 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v47,  (uint64_t)v49,  2u,  0);
                                swift_bridgeObjectRelease();
                              }

                              else
                              {
                                swift_bridgeObjectRetain();
                                unint64_t v50 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v37,  v39,  v66,  v42,  2u,  0);
                                swift_bridgeObjectRelease_n();
                              }

                              if (!v50) {
                                goto LABEL_61;
                              }
                            }

                            else
                            {
                              BOOL v51 = v43;
                              swift_bridgeObjectRelease();
                              if ((v51 & 1) == 0) {
                                goto LABEL_61;
                              }
                            }

                            swift_bridgeObjectRetain();
                            uint64_t result = Substring.index(after:)();
                            if (v31 >> 14 < result >> 14)
                            {
                              __break(1u);
                              goto LABEL_102;
                            }

                            uint64_t v52 = Substring.subscript.getter();
                            uint64_t v54 = v53;
                            uint64_t v56 = v55;
                            uint64_t v58 = v57;
                            uint64_t v59 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v52,  v53,  v55,  v57,  8u,  1);
                            if (v59 == 2)
                            {
                              uint64_t v68 = v52;
                              int64_t v69 = v54;
                              uint64_t v70 = v56;
                              uint64_t v71 = v58;
                              lazy protocol witness table accessor for type Substring and conformance Substring();
                              StringProtocol._ephemeralString.getter();
                              uint64_t v60 = (void *)String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              uint64_t v61 = (unsigned __int16 *)objc_msgSend(v60, sel__fastCharacterContents);
                              uint64_t v62 = v60;
                              if (v61)
                              {
                                uint64_t v68 = v52;
                                int64_t v69 = v54;
                                uint64_t v70 = v56;
                                uint64_t v71 = v58;
                                StringProtocol._ephemeralString.getter();
                                id v63 = (void *)String._bridgeToObjectiveCImpl()();
                                swift_bridgeObjectRelease();
                                uint64_t v64 = objc_msgSend(v63, sel_length);
                                swift_unknownObjectRelease();
                                unint64_t v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v61,  (uint64_t)v64,  8u,  1);
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease_n();
                                swift_bridgeObjectRelease();
                                return v28 & 1;
                              }

                              swift_bridgeObjectRetain();
                              unint64_t v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v52,  v54,  v56,  v58,  8u,  1);
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease_n();
                            }

                            else
                            {
                              uint64_t v65 = v59;
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease();
                              unint64_t v28 = v65 & 1;
                            }

                            swift_bridgeObjectRelease();
                            return v28 & 1;
                          }

    __int128 v40 = 1LL << *(_BYTE *)(v3 + 32);
    if (v40 > 63) {
      bzero((void *)(v3 + 56), ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      *char v16 = -1LL << v40;
    }
    uint64_t v2 = v46;
    *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
LABEL_6:
    swift_release();
    uint64_t v3 = v14;
LABEL_7:
    Hasher.init(_seed:)();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v47);
    unint64_t v6 = v47;
    uint64_t v7 = Hasher._finalize()();
    uint64_t v9 = v3 + 56;
    unint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
    uint64_t v11 = v7 & ~v10;
    uint64_t v12 = v11 >> 6;
    if (((-1LL << v11) & ~*(void *)(v3 + 56 + 8 * (v11 >> 6))) != 0)
    {
      uint64_t v13 = __clz(__rbit64((-1LL << v11) & ~*(void *)(v3 + 56 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v36 = 0;
      uint64_t v37 = (unint64_t)(63 - v10) >> 6;
      do
      {
        if (++v12 == v37 && (v36 & 1) != 0) {
          goto LABEL_73;
        }
        uint64_t v38 = v12 == v37;
        if (v12 == v37) {
          uint64_t v12 = 0LL;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v9 + 8 * v12);
      }

      while (v39 == -1);
      uint64_t v13 = __clz(__rbit64(~v39)) + (v12 << 6);
    }

    *(void *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    *(void *)(*(void *)(v3 + 48) + 8 * v13) = v47[9];
    ++*(void *)(v3 + 16);
    unint64_t v5 = __CocoaSet.Iterator.next()();
    if (v5) {
      continue;
    }
    break;
  }

      if (v50) {
        goto LABEL_224;
      }
      goto LABEL_69;
    }

    if (v19 == 2)
    {
      unint64_t v25 = v14;
      unint64_t v26 = v22[8];
      if (v26)
      {
        unint64_t v27 = v22[9];
        uint64_t v172 = v22[10];
        swift_unknownObjectRetain();
        unint64_t v28 = v164;
        unint64_t v29 = v25;
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v164, v25, v15, v26, v27, v172);
        swift_unknownObjectRelease();
      }

      else
      {
        unint64_t v28 = v164;
        unint64_t v29 = v25;
      }

      uint64_t v151 = v17 >> 11;
      uint64_t v173 = 1;
      uint64_t v38 = v15;
      uint64_t v160 = v29;
      uint64_t v167 = v28;
      goto LABEL_75;
    }

    uint64_t v46 = v17 >> 11;
    uint64_t v167 = v13;
    uint64_t v160 = v14;
    uint64_t v38 = v15;
LABEL_72:
    uint64_t v173 = v19 == 2;
    uint64_t v151 = v17 >> 11;
    if (v19 != 2 && v17 >> 11 == v46)
    {
      uint64_t v58 = v174[1];
      uint64_t v193 = *v174;
      uint64_t v194 = v58;
      uint64_t v195 = v174[2];
      uint64_t v59 = &v179;
      BigString.utf8.getter();
      uint64_t v60 = BigString.UTF8View.index(roundingDown:)();
      uint64_t v62 = v61;
      uint64_t v64 = v63;
      int v66 = v65;
      uint64_t v173 = 0;
      goto LABEL_76;
    }

  if (a6)
  {
    *a6 = v9;
    a6[1] = v19;
  }

  return result;
}

LABEL_74:
  __break(1u);
LABEL_75:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  NSDecimal._multiply(byShort:)((NSDecimal *)(v86 | (v14 << 16) | (v5 << 32)), 0xAu);
  if (v69) {
    goto LABEL_125;
  }
  NSDecimal._add(_:)(v68, v2);
  if (v73)
  {
LABEL_126:
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x182FAB26CLL);
  }

  *(void *)uint64_t v81 = v70;
  uint64_t v74 = HIDWORD(v70);
  __int128 v75 = HIWORD(v70);
  *((void *)v81 + 1) = v71;
  v81[4] = v72;
  __int128 v76 = (v91 - 1);
  if (__OFSUB__(v91, 1))
  {
LABEL_122:
    __break(1u);
LABEL_123:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *uint64_t v80 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_unexpectedError();
    __break(1u);
LABEL_124:
    swift_unexpectedError();
    __break(1u);
LABEL_125:
    swift_unexpectedError();
    __break(1u);
    goto LABEL_126;
  }

  if ((int)v76 >= 128)
  {
    do
    {
      NSDecimal._multiply(byShort:)( (NSDecimal *)(v70 | ((unint64_t)(unsigned __int16)v74 << 32) | (v75 << 48)),  0xAu);
      if (v79) {
        goto LABEL_124;
      }
      __int128 v75 = HIWORD(v70);
      uint64_t v74 = HIDWORD(v70);
      --v89;
    }

    while (v89 > 128);
    *(void *)uint64_t v81 = v70;
    *((void *)v81 + 1) = v77;
    v81[4] = v78;
    __int128 v76 = 127LL;
  }

  _So9NSDecimala__exponent_setter(v76, v81);
  _So9NSDecimala__isCompact_setter_0(1LL, v81);
}

    swift_release();
    __break(1u);
  }

  else
  {
    uint64_t v32 = swift_bridgeObjectRetain();
    uint64_t v33 = specialized _copyCollectionToContiguousArray<A>(_:)(v32);
    swift_bridgeObjectRelease();
    uint64_t v44 = (uint64_t)v33;
    specialized MutableCollection<>.sort(by:)( &v44,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(),  specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (v5) {
      goto LABEL_74;
    }
    __int128 v34 = *(void *)(v44 + 16);
    if (v34)
    {
      uint64_t v35 = (uint64_t *)(v44 + 48);
      __int128 v36 = 1;
      do
      {
        uint64_t v37 = *(v35 - 2);
        uint64_t v38 = *(v35 - 1);
        uint64_t v39 = *v35;
        if ((v36 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          swift_retain();
        }

        else if ((v2[1] & 1) != 0)
        {
          uint64_t v44 = 2604LL;
          BOOL v45 = 0xE200000000000000LL;
          swift_bridgeObjectRetain();
          swift_retain();
          specialized String.withUTF8<A>(_:)(&v44);
          swift_bridgeObjectRelease();
          JSONWriter.writeIndent()();
        }

        else
        {
          uint64_t v44 = 44LL;
          BOOL v45 = 0xE100000000000000LL;
          swift_bridgeObjectRetain();
          swift_retain();
          specialized String.withUTF8<A>(_:)(&v44);
          swift_bridgeObjectRelease();
        }

        uint64_t v44 = 34LL;
        BOOL v45 = 0xE100000000000000LL;
        specialized String.withUTF8<A>(_:)(&v44);
        swift_bridgeObjectRelease();
        uint64_t v44 = v37;
        BOOL v45 = v38;
        swift_bridgeObjectRetain();
        specialized String.withUTF8<A>(_:)(&v44, (uint64_t)v2);
        swift_bridgeObjectRelease();
        unint64_t v42 = 34LL;
        uint64_t v43 = 0xE100000000000000LL;
        specialized String.withUTF8<A>(_:)(&v42);
        swift_bridgeObjectRelease();
        if (*((_BYTE *)v2 + 8) == 1)
        {
          uint64_t v44 = 2112032LL;
          BOOL v45 = 0xE300000000000000LL;
        }

        else
        {
          uint64_t v44 = 58LL;
          BOOL v45 = 0xE100000000000000LL;
        }

        specialized String.withUTF8<A>(_:)(&v44);
        swift_bridgeObjectRelease();
        JSONWriter.serializeJSON(_:depth:)(v39);
        swift_release();
        swift_bridgeObjectRelease();
        __int128 v36 = 0;
        v35 += 3;
        --v34;
      }

      while (v34);
    }

          outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v15);
          type metadata accessor for JSONReference();
          a5 = swift_allocObject();
          *(void *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
          *(void *)(a5 + 24) = 0LL;
          *(_BYTE *)(a5 + 32) = 4;
          return a5;
        }

        unint64_t v30 = *(void *)(a3 + 32);
        swift_retain();
LABEL_57:
        swift_retain();
        goto LABEL_58;
      }

      unint64_t v30 = *(void *)(a3 + 64);
      swift_retain();
      uint64_t v24 = v60;
      unint64_t v29 = a2;
LABEL_56:
      outlined copy of _CodingKey?(a4, a5, v24, a7);
      goto LABEL_57;
    }

    uint64_t v22 = (void *)swift_allocObject();
    v22[5] = &type metadata for _CodingKey;
    v22[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v23 = swift_allocObject();
    v22[2] = v23;
    *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a4;
    *(void *)(v23 + 24) = a5;
    uint64_t v24 = v60;
    *(void *)(v23 + 32) = v60;
    *(_BYTE *)(v23 + 40) = a7;
    v22[7] = a3;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        unint64_t v30 = 1LL;
LABEL_55:
        v22[8] = v30;
        unint64_t v28 = v9[18];
        uint64_t v56 = v9[19];
        v9[18] = (unint64_t)v22;
        unint64_t v29 = a2;
        goto LABEL_56;
      }

      unint64_t v25 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      unint64_t v25 = (uint64_t *)(a3 + 64);
    }

    BOOL v45 = *v25;
    swift_retain();
    uint64_t v24 = v60;
    unint64_t v30 = v45 + 1;
    if (__OFADD__(v45, 1LL))
    {
      __break(1u);
      goto LABEL_74;
    }

    goto LABEL_55;
  }

  uint64_t v15 = v9 + 2;
  char v16 = v9[2];
  int v66 = v8;
  if (v16 >> 62)
  {
    BOOL v51 = a6;
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    a6 = v51;
    uint64_t v15 = v9 + 2;
  }

  else
  {
    uint64_t v59 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v64 = a1;
  if (a7 != -1)
  {
    uint64_t v58 = v15;
    uint64_t v17 = a6;
    uint64_t v18 = (void *)swift_allocObject();
    v18[5] = &type metadata for _CodingKey;
    v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v19 = swift_allocObject();
    v18[2] = v19;
    *(void *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a4;
    *(void *)(v19 + 24) = a5;
    *(void *)(v19 + 32) = v17;
    *(_BYTE *)(v19 + 40) = a7;
    v18[7] = a3;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        uint64_t v32 = v17;
        unint64_t v31 = 0LL;
        goto LABEL_25;
      }

      uint64_t v20 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v20 = (uint64_t *)(a3 + 64);
    }

    unint64_t v31 = *v20;
    swift_retain();
    uint64_t v32 = v17;
LABEL_25:
    unint64_t v27 = v31 + 1;
    uint64_t v15 = v58;
    if (__OFADD__(v31, 1LL))
    {
      __break(1u);
      goto LABEL_83;
    }

    v18[8] = v27;
    unint64_t v26 = v9[19];
    uint64_t v61 = v9[18];
    v9[18] = (unint64_t)v18;
    goto LABEL_27;
  }

  unint64_t v26 = v9[19];
  uint64_t v61 = v9[18];
  v9[18] = a3;
  if (!(a3 >> 62))
  {
    unint64_t v27 = *(void *)(a3 + 64);
    char v49 = a6;
    swift_retain();
    uint64_t v32 = v49;
LABEL_27:
    outlined copy of _CodingKey?(a4, a5, v32, a7);
    goto LABEL_28;
  }

  if (a3 >> 62 == 1)
  {
    unint64_t v27 = *(void *)(a3 + 32);
    swift_retain();
LABEL_28:
    swift_retain();
    goto LABEL_29;
  }

  unint64_t v27 = 0LL;
LABEL_29:
  v9[19] = v27;
  uint64_t v33 = *(uint64_t (**)(uint64_t))(*v9 + 208);
  __int128 v34 = swift_retain();
  if ((v33(v34) & 1) != 0)
  {
    type metadata accessor for JSONReference();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v35 + 24) = 0LL;
    *(_BYTE *)(v35 + 32) = 3;
    __int128 v36 = swift_retain();
    MEMORY[0x186E1BAC0](v36);
    uint64_t v37 = v64;
    if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v38 = v26;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v39 = v66;
    goto LABEL_42;
  }

  __int128 v40 = *v15;
  uint64_t v37 = v64;
  if (!(*v15 >> 62))
  {
    int64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v39 = v66;
    if (v41) {
      goto LABEL_35;
    }
LABEL_86:
    unint64_t v42 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_87;
  }

  swift_bridgeObjectRetain();
  int64_t v41 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v39 = v66;
  if (!v41) {
    goto LABEL_86;
  }
LABEL_35:
  unint64_t v42 = v41 - 1;
  if (__OFSUB__(v41, 1LL))
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }

  if ((v40 & 0xC000000000000001LL) != 0)
  {
LABEL_88:
    uint64_t v35 = MEMORY[0x186E1C36C](v42, v40);
    goto LABEL_40;
  }

  if ((v42 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_90;
  }

  if (v42 >= *(void *)((v40 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }

  uint64_t v35 = *(void *)(v40 + 8 * v42 + 32);
  swift_retain();
LABEL_40:
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v35 + 32) != 3)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x18300B8A4LL);
  }

  uint64_t v38 = v26;
LABEL_42:
  uint64_t v43 = v9[18];
  int64_t v69 = &unk_189C763D8;
  v68[0] = v9;
  v68[1] = v35;
  uint64_t v70 = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  v68[2] = v43;
  swift_retain();
  swift_retain();
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v37, a2);
  if (!v39)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    swift_release();
    v9[18] = v61;
    swift_retain();
    swift_release();
    v9[19] = v38;
    swift_release();
    swift_release();
    a5 = v9[2];
    if (a5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v52) {
        return specialized RangeReplaceableCollection<>.popLast()();
      }
    }

    else if (*(void *)((a5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      return specialized RangeReplaceableCollection<>.popLast()();
    }

    __break(1u);
    goto LABEL_94;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  swift_release();
  v9[18] = v61;
  swift_retain();
  swift_release();
  v9[19] = v38;
  swift_release();
  swift_release();
  a5 = v9[2];
  if (a5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v44 = *(void *)((a5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v59 >= v44) {
    goto LABEL_49;
  }
  a5 = *v15;
  if (!(*v15 >> 62))
  {
    if (!*(void *)((a5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_97:
      __break(1u);
      JUMPOUT(0x18300B854LL);
    }

    goto LABEL_48;
  }

                  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                  return (unint64_t)v169;
                }

                uint64_t v103 = v98 + 5;
              }
            }
          }
        }

  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
  {
    __int128 v108 = 0LL;
    uint64_t v109 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    __int128 v108 = (id)0xD000000000000014LL;
    uint64_t v109 = 0x80000001839C9190LL;
    uint64_t v107 = v12;
    v97._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
  uint64_t v59 = (int)POSIXErrorCode.rawValue.getter();
  uint64_t v60 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v61 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v62 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, v59, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v63 = objc_msgSend(v62, sel_domain);
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  int v66 = v65;

  if (v64 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v66 != v67)
  {
    uint64_t v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v68 & 1) != 0) {
      goto LABEL_79;
    }
    goto LABEL_126;
  }

  swift_bridgeObjectRelease_n();
LABEL_79:
  uint64_t v15 = v105;
  unint64_t v29 = v102;
LABEL_80:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v69 = v106;
  uint64_t v70 = v29;
  uint64_t v71 = v104;
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v58,  v13,  v70,  v62,  2037411651LL,  0xE400000000000000LL,  v104,  v15,  (void *(*)(void *__return_ptr, void *, uint64_t))&v108,  v106,  v18);
  __int128 v72 = v108;
  LOBYTE(v71) = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v72,  v71,  v15,  v69,  v18,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

  if ((v71 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v11 = 0;
    unint64_t v10 = v100;
LABEL_82:
    LOBYTE(v108) = v10 < 0;
    return v11 | ((unint64_t)(v10 < 0) << 32);
  }

  swift_willThrow();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
  {
    __int128 v108 = 0LL;
    uint64_t v109 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    __int128 v108 = (id)0xD000000000000014LL;
    uint64_t v109 = 0x80000001839C9190LL;
    uint64_t v107 = v12;
    v97._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
  uint64_t v59 = (int)POSIXErrorCode.rawValue.getter();
  uint64_t v60 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v61 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v62 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, v59, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v63 = objc_msgSend(v62, sel_domain);
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  int v66 = v65;

  if (v64 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v66 != v67)
  {
    uint64_t v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v68 & 1) != 0) {
      goto LABEL_79;
    }
    goto LABEL_126;
  }

  swift_bridgeObjectRelease_n();
LABEL_79:
  uint64_t v15 = v105;
  unint64_t v29 = v102;
LABEL_80:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v69 = v106;
  uint64_t v70 = v29;
  uint64_t v71 = v104;
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v58,  v13,  v70,  v62,  1802398028LL,  0xE400000000000000LL,  v104,  v15,  (void *(*)(void *__return_ptr, void *, uint64_t))&v108,  v106,  v18);
  __int128 v72 = v108;
  LOBYTE(v71) = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v72,  v71,  v15,  v69,  v18,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

  if ((v71 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v11 = 0;
    unint64_t v10 = v100;
LABEL_82:
    LOBYTE(v108) = v10 < 0;
    return v11 | ((unint64_t)(v10 < 0) << 32);
  }

  swift_willThrow();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v51 & ~(v51 >> 63),  0);
        if (v51 < 0)
        {
          __break(1u);
LABEL_96:
          __break(1u);
          JUMPOUT(0x18320DF50LL);
        }

        uint64_t v52 = 0LL;
        id v53 = v3;
        do
        {
          if ((v38 & 0xC000000000000001LL) != 0) {
            uint64_t v54 = (id)MEMORY[0x186E1C36C](v52, v38);
          }
          else {
            uint64_t v54 = *(id *)(v38 + 8 * v52 + 32);
          }
          id v55 = v54;
          uint64_t v56 = objc_msgSend(v54, sel_integerValue);

          uint64_t v58 = *(void *)(v3 + 16);
          unint64_t v57 = *(void *)(v3 + 24);
          if (v58 >= v57 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v57 > 1,  v58 + 1,  1);
          }
          ++v52;
          *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v58 + 1;
          *(_BYTE *)(v3 + v58 + 32) = (_BYTE)v56;
        }

        while (v51 != v52);
        swift_bridgeObjectRelease();
        uint64_t v3 = MEMORY[0x18961AFE8];
        uint64_t v4 = &selRef_initWithTransform_;
        unint64_t v5 = &selRef_firstIndex;
LABEL_87:
        uint64_t v59 = [v9 v5[158]];
        unint64_t v6 = &selRef_observedUbiquityAttributes;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        uint64_t v61 = v65[2];
        uint64_t v60 = v65[3];
        if (v61 >= v60 >> 1) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v60 > 1),  v61 + 1,  1,  v65);
        }
        v65[2] = v61 + 1;
        uint64_t v62 = &v65[4 * v61];
        v62[4] = v53;
        v62[5] = 0LL;
        *((_BYTE *)v62 + 48) = 3;
        v62[7] = v59;
        unint64_t v5 = &selRef_firstIndex;
LABEL_5:
        uint64_t v2 = [v9 v6[45]];

        if (v2) {
          continue;
        }
        swift_bridgeObjectRelease();
        *a2 = v65;
        return 1LL;
      case 9uLL:
        unint64_t v10 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        __int128 v40 = v65[2];
        uint64_t v39 = v65[3];
        if (v40 >= v39 >> 1) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v39 > 1),  v40 + 1,  1,  v65);
        }
        v65[2] = v40 + 1;
        uint64_t v7 = &v65[4 * v40];
        uint64_t v8 = xmmword_1837C28C0;
LABEL_3:
        *((_OWORD *)v7 + 2) = v8;
LABEL_4:
        *((_BYTE *)v7 + 48) = 6;
        v7[7] = v10;
        goto LABEL_5;
      case 0xAuLL:
        int64_t v41 = [v9 row];
        uint64_t v14 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        uint64_t v43 = v65[2];
        unint64_t v42 = v65[3];
        if (v43 >= v42 >> 1) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v42 > 1),  v43 + 1,  1,  v65);
        }
        v65[2] = v43 + 1;
        uint64_t v17 = &v65[4 * v43];
        v17[4] = v41;
        v17[5] = 0LL;
        unint64_t v25 = 4;
        goto LABEL_64;
      case 0xBuLL:
        uint64_t v44 = objc_msgSend(v9, sel_column);
        uint64_t v14 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        uint64_t v46 = v65[2];
        BOOL v45 = v65[3];
        if (v46 >= v45 >> 1) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v45 > 1),  v46 + 1,  1,  v65);
        }
        v65[2] = v46 + 1;
        uint64_t v17 = &v65[4 * v46];
        v17[4] = v44;
        v17[5] = 0LL;
        unint64_t v25 = 5;
LABEL_64:
        *((_BYTE *)v17 + 48) = v25;
LABEL_65:
        v17[7] = v14;
        unint64_t v6 = &selRef_observedUbiquityAttributes;
        goto LABEL_5;
      default:
        swift_bridgeObjectRelease();

        return 0LL;
    }
  }

                          __break(1u);
LABEL_75:
                          __break(1u);
                          goto LABEL_76;
                        }

                    swift_bridgeObjectRelease_n();
                    if ((v131 & 1) == 0) {
                      return 0LL;
                    }
                    goto LABEL_12;
                  }

                  goto LABEL_100;
                }
              }

              else
              {
                __int128 v134 = v61;
                swift_bridgeObjectRelease();
                if ((v134 & 1) != 0) {
                  goto LABEL_87;
                }
              }

                            unint64_t v102 = *(void *)(v94 + 56);
                            uint64_t v103 = 8 * v84;
                            swift_release();
                            *(void *)(v102 + v103) = v81;
                            goto LABEL_152;
                          }

                          __int128 v129 = v143;
                        }
                      }
                    }
                  }
                }
              }
            }
          }

    if (v9 < v13) {
      goto LABEL_153;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
    }
    uint64_t v46 = *((void *)v11 + 2);
    BOOL v45 = *((void *)v11 + 3);
    uint64_t v12 = v46 + 1;
    if (v46 >= v45 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v45 > 1),  v46 + 1,  1,  v11);
    }
    *((void *)v11 + 2) = v12;
    unint64_t v47 = v11 + 32;
    unint64_t v48 = &v11[16 * v46 + 32];
    *(void *)unint64_t v48 = v13;
    *((void *)v48 + 1) = v9;
    if (v46)
    {
      unint64_t v10 = v110;
      while (1)
      {
        char v49 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v54 = &v47[16 * v12];
          id v55 = *((void *)v54 - 8);
          uint64_t v56 = *((void *)v54 - 7);
          uint64_t v60 = __OFSUB__(v56, v55);
          unint64_t v57 = v56 - v55;
          if (v60) {
            goto LABEL_142;
          }
          uint64_t v59 = *((void *)v54 - 6);
          uint64_t v58 = *((void *)v54 - 5);
          uint64_t v60 = __OFSUB__(v58, v59);
          uint64_t v52 = v58 - v59;
          id v53 = v60;
          if (v60) {
            goto LABEL_143;
          }
          uint64_t v61 = v12 - 2;
          uint64_t v62 = &v47[16 * v12 - 32];
          uint64_t v64 = *(void *)v62;
          id v63 = *((void *)v62 + 1);
          uint64_t v60 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          if (v60) {
            goto LABEL_145;
          }
          uint64_t v60 = __OFADD__(v52, v65);
          int v66 = v52 + v65;
          if (v60) {
            goto LABEL_148;
          }
          if (v66 >= v57)
          {
            uint64_t v84 = &v47[16 * v49];
            uint64_t v86 = *(void *)v84;
            uint64_t v85 = *((void *)v84 + 1);
            uint64_t v60 = __OFSUB__(v85, v86);
            uint64_t v87 = v85 - v86;
            if (v60) {
              goto LABEL_152;
            }
            uint64_t v77 = v52 < v87;
            goto LABEL_112;
          }
        }

        else
        {
          if (v12 != 3)
          {
            uint64_t v78 = *((void *)v11 + 4);
            uint64_t v79 = *((void *)v11 + 5);
            uint64_t v60 = __OFSUB__(v79, v78);
            uint64_t v71 = v79 - v78;
            __int128 v72 = v60;
            goto LABEL_106;
          }

          BOOL v51 = *((void *)v11 + 4);
          unint64_t v50 = *((void *)v11 + 5);
          uint64_t v60 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          id v53 = v60;
        }

        if ((v53 & 1) != 0) {
          goto LABEL_144;
        }
        uint64_t v61 = v12 - 2;
        uint64_t v67 = &v47[16 * v12 - 32];
        int64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        uint64_t v70 = __OFSUB__(v68, v69);
        uint64_t v71 = v68 - v69;
        __int128 v72 = v70;
        if (v70) {
          goto LABEL_147;
        }
        __int128 v73 = &v47[16 * v49];
        __int128 v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        uint64_t v60 = __OFSUB__(v74, v75);
        __int128 v76 = v74 - v75;
        if (v60) {
          goto LABEL_150;
        }
        if (__OFADD__(v71, v76)) {
          goto LABEL_151;
        }
        if (v71 + v76 >= v52)
        {
          uint64_t v77 = v52 < v76;
LABEL_112:
          if (v77) {
            char v49 = v61;
          }
          goto LABEL_114;
        }

      swift_bridgeObjectRelease();
      goto LABEL_5;
    }

    return (char *)swift_bridgeObjectRelease();
  }

  uint64_t v8 = a2;
  uint64_t v12 = a1;
  uint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
  int64_t v69 = *v4;
  uint64_t v19 = *v4;
  char *v4 = 0x8000000000000000LL;
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v22 = *(void *)(v19 + 16);
  uint64_t v23 = (v21 & 1) == 0;
  uint64_t v24 = __OFADD__(v22, v23);
  unint64_t v25 = v22 + v23;
  if (v24)
  {
    __break(1u);
    goto LABEL_16;
  }

  unint64_t v26 = v21;
  if (*(void *)(v19 + 24) < v25)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v18);
    unint64_t v27 = v69;
    uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v26 & 1) != (v28 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return (char *)swift_bridgeObjectRelease();
    }

        uint64_t v94 = (v99 - 1) & v99;
        unint64_t v97 = __clz(__rbit64(v99)) + (v95 << 6);
        if (*(void *)(v84 + 16))
        {
LABEL_75:
          uint64_t v101 = (uint64_t *)(*(void *)(v83 + 48) + 16 * v97);
          unint64_t v102 = *v101;
          uint64_t v103 = v101[1];
          swift_bridgeObjectRetain();
          uint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(v102, v103);
          if ((v105 & 1) != 0)
          {
            uint64_t v106 = *(void *)(*(void *)(v84 + 56) + 16 * v104);
            uint64_t v107 = swift_conformsToProtocol2();
            if (v107) {
              __int128 v108 = v106;
            }
            else {
              __int128 v108 = 0LL;
            }
            if (v107) {
              uint64_t v109 = v107;
            }
            else {
              uint64_t v109 = 0LL;
            }
            if (v108)
            {
              *(void *)&unint64_t v204 = v102;
              *((void *)&v204 + 1) = v103;
              *(void *)&uint64_t v205 = 0LL;
              BYTE8(v205) = 1;
              KeyedEncodingContainer.superEncoder(forKey:)();
              swift_bridgeObjectRelease();
              uint64_t v110 = *(void *)(v109 + 8);
              uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              unint64_t v199 = &v182;
              unint64_t v198 = *(void *)(AssociatedTypeWitness - 8);
              uint64_t v112 = MEMORY[0x1895F8858](AssociatedTypeWitness);
              uint64_t v114 = (char *)&v182 - v113;
              char v115 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v110 + 24))(v108, v110, v112);
              unint64_t v117 = v248;
              if (*(void *)(v248 + 16)
                && (unint64_t v118 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v116), (v119 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v117 + 56) + 72 * v118,  (uint64_t)&v204);
              }

              else
              {
                uint64_t v208 = 0LL;
                v206 = 0u;
                uint64_t v207 = 0u;
                unint64_t v204 = 0u;
                uint64_t v205 = 0u;
              }

              swift_bridgeObjectRelease();
              if (!*((void *)&v205 + 1)) {
                goto LABEL_211;
              }
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v204,  (uint64_t)v203);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              swift_dynamicCast();
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v204);
              unint64_t v120 = v201;
              (*(void (**)(char *, void *, uint64_t, uint64_t))(v109 + 16))(v114, v209, v108, v109);
              unint64_t v201 = v120;
              if (v120)
              {
                (*(void (**)(char *, uint64_t))(v198 + 8))(v114, AssociatedTypeWitness);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
                swift_release();
                (*(void (**)(char *, uint64_t))(v189 + 8))(v194, v197);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
                goto LABEL_194;
              }

              (*(void (**)(char *, uint64_t))(v198 + 8))(v114, AssociatedTypeWitness);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
              uint64_t v84 = v196;
            }

            else
            {
              swift_bridgeObjectRelease();
            }

            unint64_t v83 = v248;
            uint64_t v91 = v195;
          }

          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
    }

    outlined init with take of any PredicateExpression<Self.Output == B1>(&v204, (uint64_t)v210);
    uint64_t v85 = v192;
    if (*(void *)(v188 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v86 = v188;
      uint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v85);
      if ((v88 & 1) != 0)
      {
        uint64_t v89 = *(void *)(*(void *)(v86 + 56) + 8 * v87);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v89 != v184)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v90 = v188;
          goto LABEL_152;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }

    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v210, v211);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
    __swift_project_boxed_opaque_existential_1(v209, v209[3]);
    lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    __int128 v121 = v83 + 64;
    unint64_t v122 = 1LL << *(_BYTE *)(v83 + 32);
    if (v122 < 64) {
      uint64_t v123 = ~(-1LL << v122);
    }
    else {
      uint64_t v123 = -1LL;
    }
    uint64_t v124 = v123 & *(void *)(v83 + 64);
    *(void *)&uint64_t v200 = (unint64_t)(v122 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v125 = 0LL;
    uint64_t v195 = v83 + 64;
    while (1)
    {
      while (v124)
      {
        __int128 v126 = __clz(__rbit64(v124));
        v124 &= v124 - 1;
        uint64_t v127 = v126 | (v125 << 6);
        if (*(void *)(v84 + 16)) {
          goto LABEL_121;
        }
      }

      uint64_t v98 = __OFADD__(v125++, 1LL);
      if (v98) {
        goto LABEL_202;
      }
      uint64_t v128 = *(void *)(v121 + 8 * v125);
      if (!v128)
      {
        __int128 v129 = v125 + 1;
        uint64_t v128 = *(void *)(v121 + 8 * v129);
        if (!v128)
        {
          __int128 v129 = v125 + 2;
          uint64_t v128 = *(void *)(v121 + 8 * v129);
          if (!v128)
          {
            __int128 v129 = v125 + 3;
            uint64_t v128 = *(void *)(v121 + 8 * v129);
            if (!v128)
            {
              __int128 v129 = v125 + 4;
              uint64_t v128 = *(void *)(v121 + 8 * v129);
              if (!v128)
              {
                __int128 v129 = v125 + 5;
                uint64_t v128 = *(void *)(v121 + 8 * v129);
                if (!v128)
                {
                  while (1)
                  {
                    uint64_t v125 = v129 + 1;
                    if (__OFADD__(v129, 1LL)) {
                      break;
                    }
                    uint64_t v128 = *(void *)(v121 + 8 * v125);
                    ++v129;
                    if (v128) {
                      goto LABEL_120;
                    }
                  }

              uint64_t v61 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
              uint64_t v60 = ((-15LL << v61) - 1) & v60 | (v63 << v61);
              uint64_t v62 = *(void *)(v8 + 24 + 24 * v63);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v8 = v62;
              if (!*(_BYTE *)(v62 + 18)) {
                goto LABEL_157;
              }
            }
          }

          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v413);
          uint64_t result = swift_unknownObjectRetain();
          uint64_t v9 = (unint64_t)v351;
          uint64_t v62 = v58;
LABEL_157:
          uint64_t v8 = *(unsigned __int16 *)(v62 + 16);
          v336 = (void *)v62;
          if ((_DWORD)v8)
          {
            __int128 v126 = *(void *)(v62 + 24);
            uint64_t v127 = v9 - v126;
            unint64_t v10 = v349;
            if (__OFSUB__(v9, v126))
            {
LABEL_451:
              __break(1u);
              goto LABEL_452;
            }

            if (__OFADD__(v127, 1LL))
            {
LABEL_452:
              __break(1u);
              goto LABEL_453;
            }

            if ((uint64_t)(v127 + 1) <= 0)
            {
              uint64_t v21 = v22;
              uint64_t v8 = 0LL;
            }

            else
            {
              if ((_DWORD)v8 == 1)
              {
                v9 -= v126;
LABEL_164:
                if (v9)
                {
LABEL_448:
                  __break(1u);
                  goto LABEL_449;
                }

                uint64_t v21 = v22;
                goto LABEL_232;
              }

              uint64_t v173 = v336[6];
              __int128 v40 = __OFSUB__(v127, v173);
              uint64_t v174 = v127 - v173;
              if (v40)
              {
LABEL_460:
                __break(1u);
                goto LABEL_461;
              }

              if (__OFADD__(v174, 1LL))
              {
LABEL_461:
                __break(1u);
                goto LABEL_462;
              }

              if ((uint64_t)(v174 + 1) < 1)
              {
                uint64_t v21 = v22;
                uint64_t v8 = 1LL;
                uint64_t v9 = v127;
              }

              else
              {
                if ((_DWORD)v8 == 2)
                {
                  uint64_t v9 = v174;
                  goto LABEL_164;
                }

                uint64_t v175 = v336 + 9;
                unint64_t v176 = 2LL;
                while (1)
                {
                  if (v8 == v176) {
                    goto LABEL_442;
                  }
                  uint64_t v9 = v174 - *v175;
                  if (__OFSUB__(v174, *v175)) {
                    goto LABEL_443;
                  }
                  if (__OFADD__(v9, 1LL)) {
                    goto LABEL_444;
                  }
                  ++v176;
                  v175 += 3;
                  uint64_t v174 = v9;
                  if (v8 == v176) {
                    goto LABEL_164;
                  }
                }

                uint64_t v21 = v22;
                uint64_t v8 = v176;
                uint64_t v9 = v174;
              }
            }

uint64_t outlined consume of ICUDateIntervalFormatter??(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t destroy for ICUDateIntervalFormatter.Signature(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[18])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[27])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[31])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[35])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_unknownObjectRelease();
  if (a1[41])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ICUDateIntervalFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    __int128 v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    uint64_t v8 = *(void *)(a2 + 72);
    if (v8) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(a2 + 72);
  if (v8)
  {
LABEL_4:
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    uint64_t v9 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }

uint64_t assignWithCopy for ICUDateIntervalFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      __int128 v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
    }
  }

  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  }

  uint64_t v7 = (_OWORD *)(a1 + 32);
  uint64_t v8 = (_OWORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v9)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Script(a1 + 32);
      __int128 v10 = *(_OWORD *)(a2 + 48);
      *uint64_t v7 = *v8;
      *(_OWORD *)(a1 + 48) = v10;
    }
  }

  else if (v9)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v11 = *(_OWORD *)(a2 + 48);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 48) = v11;
  }

  __int128 v12 = (_OWORD *)(a1 + 64);
  uint64_t v13 = (_OWORD *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v14)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Region(a1 + 64);
      __int128 v15 = *(_OWORD *)(a2 + 80);
      *__int128 v12 = *v13;
      *(_OWORD *)(a1 + 80) = v15;
    }
  }

  else if (v14)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v16 = *(_OWORD *)(a2 + 80);
    *__int128 v12 = *v13;
    *(_OWORD *)(a1 + 80) = v16;
  }

  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v17 = (_OWORD *)(a1 + 104);
  uint64_t v18 = (_OWORD *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v19)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Collation(a1 + 104);
      __int128 v20 = *(_OWORD *)(a2 + 120);
      *uint64_t v17 = *v18;
      *(_OWORD *)(a1 + 120) = v20;
    }
  }

  else if (v19)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v21 = *(_OWORD *)(a2 + 120);
    *uint64_t v17 = *v18;
    *(_OWORD *)(a1 + 120) = v21;
  }

  uint64_t v22 = (_OWORD *)(a1 + 136);
  uint64_t v23 = (_OWORD *)(a2 + 136);
  uint64_t v24 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v24)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Currency(a1 + 136);
      __int128 v25 = *(_OWORD *)(a2 + 152);
      *uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 152) = v25;
    }
  }

  else if (v24)
  {
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v26 = *(_OWORD *)(a2 + 152);
    *uint64_t v22 = *v23;
    *(_OWORD *)(a1 + 152) = v26;
  }

  uint64_t v27 = (_OWORD *)(a1 + 168);
  __int128 v28 = (_OWORD *)(a2 + 168);
  uint64_t v29 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v29)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.NumberingSystem(a1 + 168);
      __int128 v30 = *(_OWORD *)(a2 + 184);
      *uint64_t v27 = *v28;
      *(_OWORD *)(a1 + 184) = v30;
    }
  }

  else if (v29)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v31 = *(_OWORD *)(a2 + 184);
    *uint64_t v27 = *v28;
    *(_OWORD *)(a1 + 184) = v31;
  }

  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  uint64_t v32 = (_OWORD *)(a1 + 208);
  __int128 v33 = (_OWORD *)(a2 + 208);
  uint64_t v34 = *(void *)(a2 + 216);
  if (*(void *)(a1 + 216))
  {
    if (v34)
    {
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.MeasurementSystem(a1 + 208);
      __int128 v35 = *(_OWORD *)(a2 + 224);
      *uint64_t v32 = *v33;
      *(_OWORD *)(a1 + 224) = v35;
    }
  }

  else if (v34)
  {
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v36 = *(_OWORD *)(a2 + 224);
    *uint64_t v32 = *v33;
    *(_OWORD *)(a1 + 224) = v36;
  }

  uint64_t v37 = (_OWORD *)(a1 + 240);
  uint64_t v38 = (_OWORD *)(a2 + 240);
  uint64_t v39 = *(void *)(a2 + 248);
  if (*(void *)(a1 + 248))
  {
    if (v39)
    {
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Region(a1 + 240);
      __int128 v40 = *(_OWORD *)(a2 + 256);
      _OWORD *v37 = *v38;
      *(_OWORD *)(a1 + 256) = v40;
    }
  }

  else if (v39)
  {
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v41 = *(_OWORD *)(a2 + 256);
    _OWORD *v37 = *v38;
    *(_OWORD *)(a1 + 256) = v41;
  }

  unint64_t v42 = (_OWORD *)(a1 + 272);
  uint64_t v43 = (_OWORD *)(a2 + 272);
  uint64_t v44 = *(void *)(a2 + 280);
  if (*(void *)(a1 + 280))
  {
    if (v44)
    {
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Subdivision(a1 + 272);
      __int128 v45 = *(_OWORD *)(a2 + 288);
      *unint64_t v42 = *v43;
      *(_OWORD *)(a1 + 288) = v45;
    }
  }

  else if (v44)
  {
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v46 = *(_OWORD *)(a2 + 288);
    *unint64_t v42 = *v43;
    *(_OWORD *)(a1 + 288) = v46;
  }

  uint64_t v47 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 312) = v47;
  unint64_t v48 = (_OWORD *)(a1 + 320);
  char v49 = (_OWORD *)(a2 + 320);
  uint64_t v50 = *(void *)(a2 + 328);
  if (*(void *)(a1 + 328))
  {
    if (v50)
    {
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Variant(a1 + 320);
      __int128 v51 = *(_OWORD *)(a2 + 336);
      *unint64_t v48 = *v49;
      *(_OWORD *)(a1 + 336) = v51;
    }
  }

  else if (v50)
  {
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v52 = *(_OWORD *)(a2 + 336);
    *unint64_t v48 = *v49;
    *(_OWORD *)(a1 + 336) = v52;
  }

  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Locale.Collation(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.Currency(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.NumberingSystem(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.MeasurementSystem(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.Subdivision(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.Variant(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy392_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

uint64_t assignWithTake for ICUDateIntervalFormatter.Signature(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    outlined destroy of Locale.LanguageCode(a1);
  }

  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
LABEL_6:
  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    outlined destroy of Locale.Script(a1 + 32);
  }

  __int128 v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_11:
  if (*(void *)(a1 + 72))
  {
    uint64_t v10 = *(void *)(a2 + 72);
    if (v10)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }

    outlined destroy of Locale.Region(a1 + 64);
  }

  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_16:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  if (*(void *)(a1 + 112))
  {
    uint64_t v13 = *(void *)(a2 + 112);
    if (v13)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }

    outlined destroy of Locale.Collation(a1 + 104);
  }

  __int128 v15 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v15;
LABEL_21:
  if (*(void *)(a1 + 144))
  {
    uint64_t v16 = *(void *)(a2 + 144);
    if (v16)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v16;
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }

    outlined destroy of Locale.Currency(a1 + 136);
  }

  __int128 v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v18;
LABEL_26:
  if (*(void *)(a1 + 176))
  {
    uint64_t v19 = *(void *)(a2 + 176);
    if (v19)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v20;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }

    outlined destroy of Locale.NumberingSystem(a1 + 168);
  }

  __int128 v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_31:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  if (*(void *)(a1 + 216))
  {
    uint64_t v22 = *(void *)(a2 + 216);
    if (v22)
    {
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(a2 + 232);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = v23;
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }

    outlined destroy of Locale.MeasurementSystem(a1 + 208);
  }

  __int128 v24 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v24;
LABEL_36:
  if (*(void *)(a1 + 248))
  {
    uint64_t v25 = *(void *)(a2 + 248);
    if (v25)
    {
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(a2 + 264);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }

    outlined destroy of Locale.Region(a1 + 240);
  }

  __int128 v27 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v27;
LABEL_41:
  if (*(void *)(a1 + 280))
  {
    uint64_t v28 = *(void *)(a2 + 280);
    if (v28)
    {
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(a2 + 296);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = v29;
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }

    outlined destroy of Locale.Subdivision(a1 + 272);
  }

  __int128 v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_46:
  uint64_t v31 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_unknownObjectRelease();
  *(void *)(a1 + 312) = v31;
  if (!*(void *)(a1 + 328))
  {
LABEL_50:
    __int128 v34 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v34;
    goto LABEL_51;
  }

  uint64_t v32 = *(void *)(a2 + 328);
  if (!v32)
  {
    outlined destroy of Locale.Variant(a1 + 320);
    goto LABEL_50;
  }

  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v33;
  swift_bridgeObjectRelease();
LABEL_51:
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  uint64_t v35 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v35;
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUDateIntervalFormatter.Signature(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 392)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 368);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUDateIntervalFormatter.Signature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 392) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 368) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 392) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ICUDateIntervalFormatter.Signature()
{
  return &type metadata for ICUDateIntervalFormatter.Signature;
}

unint64_t lazy protocol witness table accessor for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICUDateIntervalFormatter.Signature,  &type metadata for ICUDateIntervalFormatter.Signature);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature);
  }

  return result;
}

uint64_t AttributedString.Runs.Run.attributes.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 AttributedString.Runs.Run.range.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 48);
  __int128 v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t static AttributedString.Runs.Run.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  if (((unint64_t)a1[6] >> 11) - ((unint64_t)a1[2] >> 11) == ((unint64_t)a2[6] >> 11)
                                                                          - ((unint64_t)a2[2] >> 11)
    && (uint64_t v2 = a2[1], v3 = a1[1], (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0))
  {
    return specialized static Set.== infix(_:_:)(v3, v2);
  }

  else
  {
    return 0LL;
  }

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.Runs.Run( uint64_t *a1, uint64_t *a2)
{
  if (((unint64_t)a1[6] >> 11) - ((unint64_t)a1[2] >> 11) == ((unint64_t)a2[6] >> 11)
                                                                          - ((unint64_t)a2[2] >> 11)
    && (uint64_t v2 = a2[1], v3 = a1[1], (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0))
  {
    return specialized static Set.== infix(_:_:)(v3, v2);
  }

  else
  {
    return 0LL;
  }

uint64_t AttributedString.Runs.Run.description.getter()
{
  __int128 v1 = *(_OWORD *)(v0 + 32);
  __int128 v17 = *(_OWORD *)(v0 + 16);
  __int128 v18 = v1;
  __int128 v2 = *(_OWORD *)(v0 + 64);
  __int128 v19 = *(_OWORD *)(v0 + 48);
  __int128 v20 = v2;
  uint64_t v3 = *(_OWORD **)(v0 + 80);
  __int128 v4 = v3[2];
  __int128 v21 = v3[1];
  __int128 v22 = v4;
  __int128 v23 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v7);
  outlined release of Locale((uint64_t)v8);
  __int128 v13 = v9;
  __int128 v14 = v10;
  __int128 v15 = v11;
  __int128 v16 = v12;
  uint64_t v5 = AttributedString.Guts.description(in:)();
  swift_release();
  return v5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.Runs.Run()
{
  __int128 v1 = *(_OWORD *)(v0 + 32);
  __int128 v17 = *(_OWORD *)(v0 + 16);
  __int128 v18 = v1;
  __int128 v2 = *(_OWORD *)(v0 + 64);
  __int128 v19 = *(_OWORD *)(v0 + 48);
  __int128 v20 = v2;
  uint64_t v3 = *(_OWORD **)(v0 + 80);
  __int128 v4 = v3[2];
  __int128 v21 = v3[1];
  __int128 v22 = v4;
  __int128 v23 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v7);
  outlined release of Locale((uint64_t)v8);
  __int128 v13 = v9;
  __int128 v14 = v10;
  __int128 v15 = v11;
  __int128 v16 = v12;
  uint64_t v5 = AttributedString.Guts.description(in:)();
  swift_release();
  return v5;
}

uint64_t AttributedString.Runs.Run.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*MEMORY[0x18961A9A8] + *a1 + 8LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  AttributedString._AttributeStorage.subscript.getter(v6, v7, a2, a3);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.Runs.Run.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedString._AttributeStorage.subscript.getter(*v3, a1, a2, a3);
}

uint64_t AttributedString.Runs.Run.subscript.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0LL;
  a1[3] = 0LL;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for AttributedString.Runs.Run()
{
  return swift_release();
}

uint64_t initializeWithCopy for AttributedString.Runs.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.Run(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AttributedString.Runs.Run(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.Run(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.Run(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.Run()
{
  return &type metadata for AttributedString.Runs.Run;
}

unint64_t closure #1 in _SearchPathURLs(for:in:expandTilde:)@<X0>( uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = specialized Collection.first.getter(v4, v5);
    if (v7)
    {
      if (v6 == 126 && v7 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0) {
          goto LABEL_25;
        }
      }

      unint64_t v10 = specialized Collection<>.firstIndex(of:)(47LL, 0xE100000000000000LL, v4, v5);
      if ((v11 & 1) != 0)
      {
        uint64_t v13 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000LL) == 0) {
          uint64_t v13 = v4;
        }
        uint64_t v14 = v13 << 16;
        if ((v5 & 0x1000000000000000LL) == 0 || (v4 & 0x800000000000000LL) != 0) {
          unint64_t v12 = v14 | 7;
        }
        else {
          unint64_t v12 = v14 | 0xB;
        }
      }

      else
      {
        unint64_t v12 = v10;
      }

      unint64_t result = String.index(after:)();
      if (v12 >> 14 == result >> 14)
      {
        uint64_t v16 = 0LL;
        uint64_t v17 = 0LL;
      }

      else
      {
        if (v12 >> 14 < result >> 14)
        {
          __break(1u);
          return result;
        }

        uint64_t v18 = String.subscript.getter();
        uint64_t v16 = MEMORY[0x186E1B610](v18);
        uint64_t v17 = v19;
        swift_bridgeObjectRelease();
      }

      unint64_t v20 = static String.homeDirectoryPath(forUser:)(v16, v17);
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v23 = specialized Collection.suffix(from:)(v12, v4, v5);
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      v34[0] = v20;
      v34[1] = v22;
      unint64_t v30 = v23;
      uint64_t v31 = v25;
      uint64_t v32 = v27;
      uint64_t v33 = v29;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v20;
      unint64_t v5 = v22;
    }

Swift::String_optional __swiftcall _DarwinSearchPathsSequence.Iterator.next()()
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(unsigned int *)(v0 + 32);
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    int v3 = MEMORY[0x186E20FE0](v1, v17);
    *(_DWORD *)(v0 + 32) = v3;
    if (v3)
    {
      id v4 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      id v5 = objc_msgSend(v4, sel_stringWithFileSystemRepresentation_length_, v17, strlen(v17));

      id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v8 = v7;
    }

    else
    {
      id v6 = 0LL;
      uint64_t v8 = 0LL;
    }
  }

  else
  {
    char v9 = (const char *)swift_slowAlloc();
    int v10 = MEMORY[0x186E20FE0](v1, v9);
    *(_DWORD *)(v0 + 32) = v10;
    if (v10)
    {
      id v11 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      id v12 = objc_msgSend(v11, sel_stringWithFileSystemRepresentation_length_, v9, strlen(v9));

      id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v8 = v13;
    }

    else
    {
      id v6 = 0LL;
      uint64_t v8 = 0LL;
    }

    MEMORY[0x186E20E60](v9, -1LL, -1LL);
  }

  uint64_t v14 = (uint64_t)v6;
  __int128 v15 = v8;
  result.value._object = v15;
  result.value._uint64_t countAndFlagsBits = v14;
  return result;
}

uint64_t _DarwinSearchPathsSequence.Iterator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _DarwinSearchPathsSequence.Iterator()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for _DarwinSearchPathsSequence()
{
  return &type metadata for _DarwinSearchPathsSequence;
}

_DWORD *__swift_memcpy4_4(_DWORD *result, _DWORD *a2)
{
  *Swift::String_optional result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _DarwinSearchPathsSequence.Iterator.State(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for _DarwinSearchPathsSequence.Iterator.State( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)Swift::String_optional result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4) = v3;
  return result;
}

uint64_t getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
{
  return 0LL;
}

void *type metadata accessor for _DarwinSearchPathsSequence.Iterator.State()
{
  return &unk_189C6FAE0;
}

unint64_t lazy protocol witness table accessor for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator;
  if (!lazy protocol witness table cache variable for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator)
  {
    uint64_t v1 = type metadata accessor for _DarwinSearchPathsSequence.Iterator();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _DarwinSearchPathsSequence.Iterator, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator);
  }

  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _DarwinSearchPathsSequence.Iterator@<X0>( Swift::String_optional *a1@<X8>)
{
  Swift::String_optional v3 = _DarwinSearchPathsSequence.Iterator.next()();
  uint64_t result = v3.value._countAndFlagsBits;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _DarwinSearchPathsSequence@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  type metadata accessor for _DarwinSearchPathsSequence.Iterator();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t result = sysdir_start_search_path_enumeration_private();
  *(_DWORD *)(v5 + 32) = result;
  *a1 = v5;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _DarwinSearchPathsSequence()
{
  return 0LL;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence()
{
  return 2LL;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance _DarwinSearchPathsSequence()
{
  return specialized _copySequenceToContiguousArray<A>(_:)();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _DarwinSearchPathsSequence( uint64_t *a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _DarwinSearchPathsSequence@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation12_FTSSequenceVACOqd__Isgyrzo_AjBsAG_pAJRszr__lIetMgyrzo_Tp5( a1,  a2);
}

id specialized bestUnitForUsage<A>(_:dimension:usage:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  char v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  id v20;
  id result;
  NSUnitVolume *v22;
  void v24[2];
  v24[1] = *MEMORY[0x1895F89C0];
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSUnitTemperature);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 456);
  swift_unknownObjectRetain();
  v7((void *)((char *)v24 + 4), ObjectType, a2);
  swift_unknownObjectRelease();
  uint64_t v8 = BYTE4(v24[0]);
  if (BYTE4(v24[0]) != 2)
  {
    uint64_t v19 = (void *)objc_opt_self();
    if ((v8 & 1) != 0) {
      unint64_t v20 = objc_msgSend(v19, sel_celsius);
    }
    else {
      unint64_t v20 = objc_msgSend(v19, sel_fahrenheit);
    }
    return v20;
  }

  char v9 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
  swift_unknownObjectRetain();
  v9(ObjectType, a2);
  swift_unknownObjectRelease();
  HIDWORD(v24[0]) = 0;
  int v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_icuType);
  if (v10)
  {
    id v11 = v10;
    id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v14 = v13;

    __int128 v15 = Usage.rawValue.getter(a4);
    uint64_t v17 = v16;
    if (v14)
    {
      if ((v12 == (id)0x796772656E65LL && v14 == 0xE600000000000000LL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v15 == 0x746C7561666564LL && v17 == 0xE700000000000000LL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 0;
      }

      else
      {
        uint64_t v18 = 0;
      }

      goto LABEL_18;
    }
  }

  else
  {
    Usage.rawValue.getter(a4);
  }

  uint64_t v18 = 1;
LABEL_18:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }

  String.utf8CString.getter();
  uameasfmt_getUnitsForUsage();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  unint64_t v22 = getDimensionUnitFromUnitSpecifier(HIDWORD(v24[0]));
  swift_bridgeObjectRelease();
  if (!v22) {
    return a3;
  }
  objc_opt_self();
  uint64_t result = (id)swift_dynamicCastObjCClass();
  if (!result)
  {

    return a3;
  }

  return result;
}

id specialized bestUnitForUsage<A>(_:dimension:usage:)( uint64_t a1, uint64_t a2, void *a3, int a4, unint64_t *a5, uint64_t a6)
{
  void (*v11)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id result;
  NSUnitVolume *v32;
  uint64_t v33;
  unint64_t *v34;
  int v35;
  uint64_t v36;
  id v37;
  _BYTE v38[12];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v37 = a3;
  unint64_t v42 = *MEMORY[0x1895F89C0];
  uint64_t ObjectType = swift_getObjectType();
  id v11 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(a2 + 448);
  swift_unknownObjectRetain();
  v11(&v38[4], ObjectType, a2);
  swift_unknownObjectRelease();
  id v12 = v39;
  if (v39)
  {
    __int128 v34 = a5;
    uint64_t v35 = a4;
    uint64_t v36 = a6;
    uint64_t v13 = *(void *)&v38[4];
    uint64_t v14 = v40;
    __int128 v15 = v41;
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 64);
    swift_unknownObjectRetain();
    uint64_t v17 = v16(ObjectType, a2);
    uint64_t v19 = v18;
    unint64_t v20 = swift_unknownObjectRelease();
    *(void *)&v38[4] = 0LL;
    uint64_t v39 = 0LL;
    MEMORY[0x1895F8858](v20);
    closure #1 in static Locale.identifierWithKeywordValue(_:key:value:)( (uint64_t)&v33,  158LL,  v17,  v19,  29549LL,  0xE200000000000000LL,  v14,  v15,  (uint64_t *)&v38[4]);
    if (v39) {
      swift_bridgeObjectRelease();
    }
    outlined consume of Locale.LanguageCode?(v13, v12);
    LOBYTE(a4) = v35;
    a5 = v34;
  }

  else
  {
    unint64_t v21 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
    swift_unknownObjectRetain();
    v21(ObjectType, a2);
    swift_unknownObjectRelease();
  }

  type metadata accessor for NSMorphologyPronoun(0LL, a5);
  *(void *)uint64_t v38 = 0LL;
  unint64_t v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_icuType);
  if (!v22)
  {
    Usage.rawValue.getter(a4);
    goto LABEL_16;
  }

  unint64_t v23 = v22;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v26 = v25;

  uint64_t v27 = Usage.rawValue.getter(a4);
  uint64_t v29 = v28;
  if (!v26)
  {
LABEL_16:
    unint64_t v30 = 1;
    goto LABEL_18;
  }

  if ((v24 == (id)0x796772656E65LL && v26 == 0xE600000000000000LL
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && (v27 == 0x746C7561666564LL && v29 == 0xE700000000000000LL
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    unint64_t v30 = 0;
  }

  else
  {
    unint64_t v30 = 0;
  }

id bestUnitForUsage<A>(_:dimension:usage:)(uint64_t a1, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  void (*v8)(_BYTE *__return_ptr, uint64_t, void *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  void (*v19)(_BYTE *__return_ptr, uint64_t, void *);
  char v20;
  void (*v21)(uint64_t, void *);
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id result;
  NSUnitVolume *v35;
  id v36;
  void v37[21];
  int v38;
  id v39;
  _BYTE v40[12];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v39 = a2;
  uint64_t v44 = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(void **)(a1 + 8);
  int v6 = *a3;
  if (type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSUnitTemperature) == a4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v19 = (void (*)(_BYTE *__return_ptr, uint64_t, void *))v5[57];
    swift_unknownObjectRetain();
    v19(&v40[4], ObjectType, v5);
    swift_unknownObjectRelease();
    unint64_t v20 = v40[4];
    if (v40[4] != 2)
    {
      unint64_t v23 = (void *)objc_opt_self();
      if ((v20 & 1) != 0) {
        uint64_t v24 = objc_msgSend(v23, sel_celsius);
      }
      else {
        uint64_t v24 = objc_msgSend(v23, sel_fahrenheit);
      }
      uint64_t v36 = v24;
      return (id)swift_dynamicCastUnknownClassUnconditional();
    }

    unint64_t v21 = (void (*)(uint64_t, void *))v5[8];
    swift_unknownObjectRetain();
    unint64_t v22 = ObjectType;
    goto LABEL_8;
  }

  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = (void (*)(_BYTE *__return_ptr, uint64_t, void *))v5[56];
  swift_unknownObjectRetain();
  v8(&v40[4], v7, v5);
  swift_unknownObjectRelease();
  char v9 = v41;
  if (!v41)
  {
    unint64_t v21 = (void (*)(uint64_t, void *))v5[8];
    swift_unknownObjectRetain();
    unint64_t v22 = v7;
LABEL_8:
    v21(v22, v5);
    swift_unknownObjectRelease();
    goto LABEL_12;
  }

  uint64_t v38 = v6;
  v37[20] = a4;
  int v10 = *(void *)&v40[4];
  id v11 = v42;
  id v12 = v43;
  uint64_t v13 = (uint64_t (*)(uint64_t, void *))v5[8];
  swift_unknownObjectRetain();
  uint64_t v14 = v13(v7, v5);
  uint64_t v16 = v15;
  uint64_t v17 = swift_unknownObjectRelease();
  *(void *)&v40[4] = 0LL;
  __int128 v41 = 0LL;
  MEMORY[0x1895F8858](v17);
  closure #1 in static Locale.identifierWithKeywordValue(_:key:value:)( (uint64_t)v37,  158LL,  v14,  v16,  29549LL,  0xE200000000000000LL,  v11,  v12,  (uint64_t *)&v40[4]);
  if (v41) {
    swift_bridgeObjectRelease();
  }
  outlined consume of Locale.LanguageCode?(v10, v9);
  LOBYTE(v6) = v38;
LABEL_12:
  *(void *)__int128 v40 = 0LL;
  uint64_t v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_icuType);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v29 = v28;

    unint64_t v30 = Usage.rawValue.getter(v6);
    uint64_t v32 = v31;
    if (v29)
    {
      if ((v27 == (id)0x796772656E65LL && v29 == 0xE600000000000000LL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v30 == 0x746C7561666564LL && v32 == 0xE700000000000000LL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = 0;
      }

      else
      {
        uint64_t v33 = 0;
      }

      goto LABEL_24;
    }
  }

  else
  {
    Usage.rawValue.getter(v6);
  }

  uint64_t v33 = 1;
LABEL_24:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }

  String.utf8CString.getter();
  uameasfmt_getUnitsForUsage();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  if (*(int *)v40 >= 1)
  {
    swift_bridgeObjectRelease();
    return v39;
  }

  uint64_t v35 = getDimensionUnitFromUnitSpecifier(*(unsigned int *)&v40[4]);
  swift_bridgeObjectRelease();
  if (!v35) {
    return v39;
  }
  uint64_t result = (id)swift_dynamicCastUnknownClass();
  if (!result)
  {

    return v39;
  }

  return result;
}

id NSDimension.init(forLocale:)(__int128 *a1)
{
  __int128 v8 = *a1;
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v3 = -[objc_class baseUnit](ObjCClassFromMetadata, sel_baseUnit);
  static MeasurementFormatUnitUsage.general.getter(&v7);
  id v4 = bestUnitForUsage<A>(_:dimension:usage:)((uint64_t)&v8, v3, &v7, v1);
  swift_unknownObjectRelease();

  id result = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithDimension_, v4);
  if (result)
  {
    id v6 = result;

    return v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id NSUnitTemperature.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unsigned __int8 v4 = *a2;
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v6 = -[objc_class baseUnit](ObjCClassFromMetadata, sel_baseUnit);
  id v7 = specialized bestUnitForUsage<A>(_:dimension:usage:)(v3, v2, v6, v4);
  swift_unknownObjectRelease();

  id result = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithDimension_, v7);
  if (result)
  {
    id v9 = result;

    return v9;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id NSUnitLength.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)( a1,  a2,  &lazy cache variable for type metadata for NSUnitLength,  (uint64_t)off_189C62010);
}

id NSUnitEnergy.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *a2;
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v6 = -[objc_class baseUnit](ObjCClassFromMetadata, sel_baseUnit);
  id v7 = specialized bestUnitForUsage<A>(_:dimension:usage:)( v2,  v3,  v6,  v4,  &lazy cache variable for type metadata for NSUnitEnergy,  (uint64_t)off_189C61FC8);
  swift_unknownObjectRelease();

  __int128 v8 = (void *)objc_opt_self();
  id v9 = v7;
  id v10 = objc_msgSend(v8, sel_foodcalories);
  id v11 = v9;
  if (v10)
  {
    id v12 = v10;
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSUnitEnergy);
    id v11 = v9;
    char v13 = static NSObject.== infix(_:_:)();

    if ((v13 & 1) == 0) {
      goto LABEL_5;
    }
    id v11 = objc_msgSend(v8, sel_kilocalories);
  }

LABEL_5:
  id result = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithDimension_, v11);
  if (result)
  {
    id v15 = result;

    return v15;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id NSUnitMass.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)( a1,  a2,  &lazy cache variable for type metadata for NSUnitMass,  (uint64_t)off_189C62028);
}

id NSUnitPressure.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)( a1,  a2,  &lazy cache variable for type metadata for NSUnitPressure,  (uint64_t)off_189C62040);
}

id NSUnitSpeed.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)( a1,  a2,  &lazy cache variable for type metadata for NSUnitSpeed,  (uint64_t)off_189C62058);
}

id NSUnitVolume.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)( a1,  a2,  &lazy cache variable for type metadata for NSUnitVolume,  (uint64_t)off_189C62070);
}

id NSUnitLength.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  int v8 = *a2;
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v10 = -[objc_class baseUnit](ObjCClassFromMetadata, sel_baseUnit);
  id v11 = specialized bestUnitForUsage<A>(_:dimension:usage:)(v6, v7, v10, v8, a3, a4);
  swift_unknownObjectRelease();

  id result = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithDimension_, v11);
  if (result)
  {
    id v13 = result;

    return v13;
  }

  else
  {
    __break(1u);
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URLComponents._URLComponents.setScheme(_:)( Swift::String_optional a1)
{
  uint64_t v3 = v1;
  unint64_t object = (unint64_t)a1.value._object;
  unint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  *(_WORD *)(v1 + 8) = 0;
  if (a1.value._object)
  {
    __int16 v6 = specialized Collection.first.getter(a1.value._countAndFlagsBits, (unint64_t)a1.value._object);
    if ((v6 & 0x100) == 0 && v6 >= 0x41u)
    {
      if ((object & 0x1000000000000000LL) != 0)
      {
        unint64_t v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))countAndFlagsBits;
        uint64_t v103 = object;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v80 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v81 = (unsigned __int16 *)objc_msgSend(v80, sel__fastCharacterContents);
        id v82 = v80;
        if (v81)
        {
          unint64_t v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))countAndFlagsBits;
          uint64_t v103 = object;
          StringProtocol._ephemeralString.getter();
          unint64_t v83 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v84 = objc_msgSend(v83, sel_length);
          swift_unknownObjectRelease();
          char v85 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v81,  (uint64_t)v84,  1u,  0);
        }

        else
        {
          char v85 = specialized Sequence.allSatisfy(_:)(countAndFlagsBits, object, 1);
        }

        swift_bridgeObjectRelease();
        if ((v85 & 1) != 0) {
          goto LABEL_10;
        }
      }

      else
      {
        if ((object & 0x2000000000000000LL) != 0)
        {
          uint64_t v8 = HIBYTE(object) & 0xF;
          unint64_t v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))countAndFlagsBits;
          uint64_t v103 = object & 0xFFFFFFFFFFFFFFLL;
          uint64_t v7 = (char *)&v102;
        }

        else if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
        {
          uint64_t v7 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v8 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
        }

        if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 1u, 0)) {
          goto LABEL_10;
        }
      }
    }

    lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
    swift_allocError();
    *uint64_t v86 = 0;
    swift_willThrow();
    return;
  }

uint64_t URLComponents._URLComponents.encodedHost.getter()
{
  if (!*(void *)(v0 + 80))
  {
    if ((*(_BYTE *)(v0 + 12) & 1) != 0)
    {
      outlined init with take of LocalePreferences?( v0,  (uint64_t)v21,  &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?( (uint64_t)v21,  (uint64_t)&v22,  &demangling cache variable for type metadata for URLParseInfo?);
      if (v22)
      {
        if ((*(_BYTE *)(v22 + 120) & 1) == 0)
        {
          uint64_t v12 = String.subscript.getter();
          uint64_t v1 = MEMORY[0x186E1B610](v12);
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
      }
    }

    outlined init with take of LocalePreferences?( v0 + 88,  (uint64_t)v20,  &demangling cache variable for type metadata for Int?);
    outlined init with take of LocalePreferences?( (uint64_t)v20,  (uint64_t)v23,  &demangling cache variable for type metadata for Int?);
    if (v23[8] == 1)
    {
      if ((*(_BYTE *)(v0 + 13) & 1) != 0)
      {
        outlined init with take of LocalePreferences?( v0,  (uint64_t)v19,  &demangling cache variable for type metadata for URLParseInfo?);
        outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)&v24,  &demangling cache variable for type metadata for URLParseInfo?);
        if (v24)
        {
          if ((*(_BYTE *)(v24 + 144) & 1) == 0)
          {
            unint64_t v2 = String.subscript.getter();
            uint64_t v6 = v5;
            if ((v2 ^ v3) >> 14)
            {
              uint64_t v7 = v2;
              uint64_t v8 = v3;
              uint64_t v9 = v4;
              _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v2,  v3,  v4,  v5,  10LL);
              if ((v10 & 0x100) != 0) {
                specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10LL);
              }
              char v11 = v10;
              swift_bridgeObjectRelease();
              if ((v11 & 1) == 0) {
                goto LABEL_25;
              }
            }

            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }

      outlined init with take of LocalePreferences?( v0 + 40,  (uint64_t)v18,  &demangling cache variable for type metadata for String?);
      outlined init with take of LocalePreferences?( (uint64_t)v18,  (uint64_t)v25,  &demangling cache variable for type metadata for String?);
      if (!v26)
      {
        if ((*(_BYTE *)(v0 + 10) & 1) != 0)
        {
          outlined init with take of LocalePreferences?( v0,  (uint64_t)v17,  &demangling cache variable for type metadata for URLParseInfo?);
          outlined init with take of LocalePreferences?( (uint64_t)v17,  (uint64_t)&v27,  &demangling cache variable for type metadata for URLParseInfo?);
          if (v27)
          {
            if ((*(_BYTE *)(v27 + 72) & 1) == 0)
            {
LABEL_24:
              uint64_t v13 = String.subscript.getter();
              MEMORY[0x186E1B610](v13);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_25;
            }
          }
        }

        outlined init with take of LocalePreferences?( v0 + 56,  (uint64_t)v16,  &demangling cache variable for type metadata for String?);
        outlined init with take of LocalePreferences?( (uint64_t)v16,  (uint64_t)v28,  &demangling cache variable for type metadata for String?);
        if (!v29)
        {
          if ((*(_BYTE *)(v0 + 11) & 1) == 0
            || (outlined init with take of LocalePreferences?( v0,  (uint64_t)v15,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v15,  (uint64_t)&v30,  &demangling cache variable for type metadata for URLParseInfo?),  !v30)
            || (*(_BYTE *)(v30 + 96) & 1) != 0)
          {
            uint64_t v1 = 0LL;
            goto LABEL_26;
          }

          goto LABEL_24;
        }
      }
    }

uint64_t URLComponents._URLComponents.host.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 12) = 0;
  *(_WORD *)(v2 + 152) = 0;
  if (!a2)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v2 + 72) = a1;
    *(void *)(v2 + 80) = 0LL;
    return result;
  }

  unint64_t v7 = specialized Collection.first.getter(a1, a2);
  if ((v7 & 0x1FF) != 0x5B) {
    goto LABEL_26;
  }
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1LL))
    {
      __break(1u);
      goto LABEL_208;
    }

    uint64_t v9 = (a1 >> 59) & 1;
    unint64_t v7 = MEMORY[0x186E1B838](15LL, result - 1, a1, a2);
LABEL_8:
    if ((v7 & 0xC) != 4LL << v9) {
      goto LABEL_9;
    }
    goto LABEL_168;
  }

  uint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    unint64_t v7 = (v8 << 16) - 65532;
    LOBYTE(v9) = 1;
    goto LABEL_8;
  }

  __break(1u);
LABEL_168:
  unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
LABEL_9:
  unint64_t v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v11 = v7 >> 16;
  if (v7 >> 16 >= v10)
  {
    __break(1u);
    goto LABEL_170;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    char v13 = String.UTF8View._foreignSubscript(position:)();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
    uint64_t v136 = a2 & 0xFFFFFFFFFFFFFFLL;
    char v13 = *((_BYTE *)&v135 + v11);
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v12 = _StringObject.sharedUTF8.getter();
    }
    char v13 = *(_BYTE *)(v12 + v11);
  }

  if (v13 != 93)
  {
LABEL_26:
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      char v113 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v114 = (unsigned __int16 *)objc_msgSend(v113, sel__fastCharacterContents);
      id v115 = v113;
      if (v114)
      {
        uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
        uint64_t v136 = a2;
        StringProtocol._ephemeralString.getter();
        unint64_t v116 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v117 = objc_msgSend(v116, sel_length);
        swift_unknownObjectRelease();
        char v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v114,  (uint64_t)v117,  4u,  1);
      }

      else
      {
        char v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 4u, 1);
      }

      char v119 = v118;
      swift_bridgeObjectRelease_n();
      if ((v119 & 1) == 0) {
        goto LABEL_22;
      }
      goto LABEL_32;
    }

    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v19 = HIBYTE(a2) & 0xF;
      uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2 & 0xFFFFFFFFFFFFFFLL;
      char v18 = (char *)&v135;
      goto LABEL_31;
    }

    if ((a1 & 0x1000000000000000LL) != 0)
    {
      char v18 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFLL;
      goto LABEL_31;
    }

LABEL_147:
                    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
                    uint64_t v136 = a2;
                    unint64_t v79 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))String.init<A>(_:)();
                    unint64_t v80 = v92;
LABEL_156:
                    swift_bridgeObjectRelease();
                    goto LABEL_157;
                  }

                  unint64_t v56 = v54;
                  if ((a2 & 0x1000000000000000LL) != 0)
                  {
                    Swift::Int v57 = String.UTF8View._foreignCount()();
                    if (__OFSUB__(v57, 1LL))
                    {
                      __break(1u);
                      goto LABEL_201;
                    }

                    unint64_t v26 = MEMORY[0x186E1B838](15LL, v57 - 1, a1, a2);
                  }

                  else
                  {
                    unint64_t v26 = (v26 << 16) - 65532;
                  }

                  if (v26 >> 14 >= v56 >> 14)
                  {
                    swift_bridgeObjectRetain_n();
                    uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
                    unint64_t v60 = v59;
                    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v58;
                    uint64_t v136 = v61;
                    unint64_t v137 = v62;
                    unint64_t v138 = v59;
                    MEMORY[0x1895F8858](v58);
                    uint64_t v133 = &v135;
                    char v134 = 8;
LABEL_152:
                    unint64_t v98 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v132,  v64,  v65,  v63,  v60);
                    if (v99)
                    {
                      uint64_t v100 = (uint64_t)v98;
                      uint64_t v101 = v99;
                    }

                    else
                    {
                      unint64_t v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v135;
                      unint64_t v103 = v136;
                      unint64_t v104 = v137;
                      unint64_t v105 = v138;
                      swift_bridgeObjectRetain();
                      uint64_t v100 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( (unint64_t)v102,  v103,  v104,  v105,  8u);
                      uint64_t v101 = v106;
                      swift_bridgeObjectRelease();
                    }

                    uint64_t v107 = String.subscript.getter();
                    char v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x186E1B610](v107);
                    uint64_t v110 = v109;
                    swift_bridgeObjectRelease();
                    uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v108;
                    uint64_t v136 = v110;
                    v111._unint64_t countAndFlagsBits = v100;
                    v111._unint64_t object = v101;
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._unint64_t countAndFlagsBits = 93LL;
                    v112._unint64_t object = (void *)0xE100000000000000LL;
                    String.append(_:)(v112);
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease();
                    unint64_t v79 = v135;
                    unint64_t v80 = v136;
                    goto LABEL_156;
                  }

                  __break(1u);
LABEL_190:
                  uint64_t v81 = (char *)_StringObject.sharedUTF8.getter();
                  goto LABEL_134;
                }
              }

              __break(1u);
LABEL_181:
              uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
              uint64_t v136 = object;
              lazy protocol witness table accessor for type String and conformance String();
              swift_bridgeObjectRetain_n();
              StringProtocol._ephemeralString.getter();
              uint64_t v120 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              __int128 v121 = (unsigned __int16 *)objc_msgSend(v120, sel__fastCharacterContents);
              id v122 = v120;
              if (v121)
              {
                __int128 v123 = v121;
                uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
                uint64_t v136 = object;
                StringProtocol._ephemeralString.getter();
                __int128 v124 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v125 = objc_msgSend(v124, sel_length);
                swift_unknownObjectRelease();
                char v126 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v123,  (uint64_t)v125,  4u,  1);
              }

              else
              {
LABEL_196:
                char v126 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v26,  object,  4u,  1);
              }

              char v128 = v126;
              swift_bridgeObjectRelease_n();
              if ((v128 & 1) != 0) {
                goto LABEL_135;
              }
              goto LABEL_114;
            }
          }

          else
          {
            __break(1u);
          }

          uint64_t result = String.UTF8View._foreignCount()();
          if (!__OFSUB__(result, 1LL))
          {
            uint64_t v29 = (a1 >> 59) & 1;
            unint64_t v28 = MEMORY[0x186E1B838](15LL, result - 1, a1, a2);
            goto LABEL_46;
          }

            unint64_t v103 = 256LL;
          }

                                                      swift_bridgeObjectRelease();
                                                      uint64_t v31 = v161;
                                                      if ((v50 & 1) == 0) {
                                                        goto LABEL_40;
                                                      }
LABEL_37:
                                                      unint64_t v54 = (uint64_t *)(*(void *)(v51 + 56) + 16 * v46);
                                                      *unint64_t v54 = v157;
                                                      v54[1] = v163;
                                                      swift_bridgeObjectRelease();
                                                    }

                                                    else
                                                    {
                                                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v49,  v44);
                                                      char v51 = v30;
                                                      uint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)( 0x737265626D756ELL,  0xE700000000000000LL);
                                                      if ((v50 & 1) != (v53 & 1)) {
                                                        goto LABEL_192;
                                                      }
                                                      uint64_t v46 = v52;
                                                      uint64_t v31 = v161;
                                                      if ((v50 & 1) != 0) {
                                                        goto LABEL_37;
                                                      }
LABEL_40:
                                                      specialized _NativeDictionary._insert(at:key:value:)( v46,  0x737265626D756ELL,  0xE700000000000000LL,  v157,  v163,  (void *)v51);
                                                    }

                                                    swift_bridgeObjectRelease();
LABEL_42:
                                                    __asm { BR              X9 }
                                                  }

    swift_unknownObjectRetain();
    outlined retain of AttributedString.Runs((uint64_t)v327);
    swift_unknownObjectRetain();
    unint64_t v129 = specialized Rope._endPath.getter(v114);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v269 = 0LL;
    char v118 = 0LL;
    goto LABEL_164;
  }

  if (v116 < (uint64_t)v270)
  {
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
    goto LABEL_302;
  }

  id v117 = *(unsigned __int8 *)(v114 + 18);
  if (*(_BYTE *)(v114 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v327);
    uint64_t result = swift_unknownObjectRetain();
    char v118 = v270;
    char v119 = v114;
    while (1)
    {
      __int128 v123 = *(unsigned __int16 *)(v119 + 16);
      if (!*(_WORD *)(v119 + 16)) {
        goto LABEL_131;
      }
      __int128 v124 = *(void *)(v119 + 40);
      uint64_t v33 = __OFSUB__(v118, v124);
      id v125 = (__int128 *)((char *)v118 - v124);
      if (v33) {
        goto LABEL_273;
      }
      if (__OFADD__(v125, 1LL)) {
        goto LABEL_274;
      }
      if ((uint64_t)v125 + 1 < 1)
      {
        __int128 v123 = 0LL;
      }

      else
      {
        if ((_DWORD)v123 == 1)
        {
          char v118 = v125;
LABEL_131:
          if (v118) {
            goto LABEL_270;
          }
          goto LABEL_132;
        }

        char v126 = (uint64_t *)(v119 + 64);
        uint64_t v127 = 1LL;
        while (1)
        {
          char v128 = *v126;
          v126 += 3;
          char v118 = (__int128 *)((char *)v125 - v128);
          if (__OFSUB__(v125, v128)) {
            goto LABEL_266;
          }
          if (__OFADD__(v118, 1LL)) {
            goto LABEL_267;
          }
          ++v127;
          id v125 = v118;
          if (v123 == v127) {
            goto LABEL_131;
          }
        }

        __int128 v123 = v127;
        char v118 = v125;
      }

                          __break(1u);
                          goto LABEL_148;
                        }

                        unint64_t v45 = v59;
                      }
                    }
                  }
                }
              }
            }
          }

      uint64_t result = (void *)swift_release();
      if ((v198 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t i = a2;
        uint64_t v20 = a3;
        uint64_t v19 = v196;
        goto LABEL_253;
      }

      uint64_t v19 = v196;
      if (__OFSUB__(v192, v18)) {
        goto LABEL_427;
      }
      unint64_t v10 = *((void *)&v218 + 1);
      unint64_t v76 = v218;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v18, v192, v192 - v18, v76, v10);
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      unint64_t v5 = v196[8];
      if (v5) {
        uint64_t v77 = v196[10];
      }
      else {
        uint64_t v77 = 0LL;
      }
      if (v205 < 0 || v77 < v205) {
        goto LABEL_428;
      }
      char v78 = v196[9];
      uint64_t v207 = v196[11];
      if (!v5 || !*(_WORD *)(v5 + 16) || v205 >= v196[10])
      {
        uint64_t v101 = swift_unknownObjectRetain_n();
        v206 = specialized Rope._endPath.getter(v101);
        swift_unknownObjectRelease();
        uint64_t v4 = 0LL;
        uint64_t i = 0LL;
LABEL_248:
        unint64_t v202 = (void *)v4;
        if (v5)
        {
          swift_unknownObjectRetain();
          uint64_t v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v207, v206, v4, v5, v78);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_unknownObjectRelease_n();
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          uint64_t v200 = 0LL;
        }

        uint64_t v20 = a3;
        if (__OFSUB__(v205, i)) {
          goto LABEL_431;
        }
        v205 -= i;
        uint64_t i = a2;
        goto LABEL_253;
      }

      unint64_t v204 = v196[9];
      char v13 = *(unsigned __int8 *)(v5 + 18);
      if (*(_BYTE *)(v5 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t i = v205;
        unint64_t v79 = v5;
        while (1)
        {
          int v14 = *(unsigned __int16 *)(v79 + 16);
          if (!*(_WORD *)(v79 + 16)) {
            goto LABEL_168;
          }
          uint64_t v96 = *(void *)(v79 + 40);
          uint64_t v23 = __OFSUB__(i, v96);
          char v15 = i - v96;
          if (v23) {
            goto LABEL_414;
          }
          if (__OFADD__(v15, 1LL)) {
            goto LABEL_415;
          }
          if (v15 + 1 > 0) {
            break;
          }
          int v14 = 0LL;
LABEL_169:
          unint64_t v95 = (4 * *(_BYTE *)(v79 + 18) + 8) & 0x3C;
          char v13 = ((-15LL << v95) - 1) & v13 | (v14 << v95);
          uint64_t v4 = *(void *)(v79 + 24 + 24 * v14);
          swift_unknownObjectRetain();
          uint64_t result = (void *)swift_unknownObjectRelease();
          unint64_t v79 = v4;
          if (!*(_BYTE *)(v4 + 18)) {
            goto LABEL_228;
          }
        }

        if ((_DWORD)v14 != 1)
        {
          unint64_t v97 = (uint64_t *)(v79 + 64);
          unint64_t v98 = 1LL;
          while (1)
          {
            unint64_t v99 = *v97;
            v97 += 3;
            uint64_t i = v15 - v99;
            if (__OFSUB__(v15, v99)) {
              goto LABEL_390;
            }
            if (__OFADD__(i, 1LL)) {
              goto LABEL_391;
            }
            if (i + 1 < 1) {
              break;
            }
            ++v98;
            char v15 = i;
            if (v14 == v98) {
              goto LABEL_168;
            }
          }

          int v14 = v98;
          uint64_t i = v15;
          goto LABEL_169;
        }

        uint64_t i = v15;
LABEL_168:
        if (i) {
          goto LABEL_411;
        }
        goto LABEL_169;
      }

      uint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t i = v205;
      uint64_t v4 = v5;
LABEL_228:
      uint64_t v136 = *(unsigned __int16 *)(v4 + 16);
      if (!*(_WORD *)(v4 + 16)) {
        goto LABEL_246;
      }
      unint64_t v137 = *(void *)(v4 + 24);
      uint64_t v23 = __OFSUB__(i, v137);
      unint64_t v138 = i - v137;
      if (v23) {
        goto LABEL_456;
      }
      if (__OFADD__(v138, 1LL)) {
        goto LABEL_457;
      }
      if (v138 + 1 <= 0)
      {
        uint64_t v136 = 0LL;
      }

      else
      {
        if ((_DWORD)v136 == 1)
        {
          uint64_t i = v138;
LABEL_246:
          if (i) {
            goto LABEL_452;
          }
          goto LABEL_247;
        }

        uint64_t v142 = (uint64_t *)(v4 + 48);
        uint64_t v143 = 1LL;
        while (1)
        {
          __int128 v144 = *v142;
          v142 += 3;
          uint64_t i = v138 - v144;
          if (__OFSUB__(v138, v144)) {
            goto LABEL_433;
          }
          if (__OFADD__(i, 1LL)) {
            goto LABEL_434;
          }
          if (i + 1 < 1) {
            break;
          }
          ++v143;
          unint64_t v138 = i;
          if (v136 == v143) {
            goto LABEL_246;
          }
        }

        uint64_t v136 = v143;
        uint64_t i = v138;
      }

    unint64_t v65 = 11LL;
    while (1)
    {
      uint64_t v66 = posix_spawn(&self->_pid, v101, &v117, &v116, v100, (char *const *)v102);
      if ((_DWORD)v66 != 35) {
        break;
      }
      if (!--v65)
      {
        __PTHREAD_SPAWN_EAGAIN_OVERLIMIT__();
        uint64_t v66 = 35LL;
        break;
      }

      if (nanosleep(&launchWithDictionary_error__spawnSleep, 0LL))
      {
        uint64_t v66 = *__error();
        break;
      }
    }

    for (m = 0LL; m != 12; m += 4LL)
    {
      unint64_t v68 = *(_DWORD *)((char *)&v118 + m);
      if (v68 != -1) {
        close(v68);
      }
    }

    if (v95)
    {
      __pthread_fchdir();
      if (v59 != -1) {
        close(v59);
      }
    }

    if (!(_DWORD)v66)
    {
      id v69 = p_exitRunningInfo;
      do
        uint64_t v70 = __ldaxr(v69);
      while (__stlxr(v70 | 0x300000000LL, v69));
      unint64_t v71 = v109;
      char v72 = (&self->super.super.isa)[v109 / 8];
      Swift::Int v73 = v104;
      if (v72 == v104)
      {
        *(Class *)((char *)&self->super.super.isa + v71) = (Class)-[objc_class mutableCopyWithZone:]( v104,  "mutableCopyWithZone:",  0LL);

        char v72 = *(Class *)((char *)&self->super.super.isa + v71);
      }

      -[objc_class setObject:forKey:](v72, "setObject:forKey:", @"YES", @"_NSTaskHasBeenLaunched");
      if (v98) {
        [v98 closeFile];
      }
      if (v99) {
        [v99 closeFile];
      }
      if (v46 && v46 != v99) {
        [v46 closeFile];
      }
      Current = CFRunLoopGetCurrent();
      uint64_t v75 = (__CFRunLoop *)CFRetain(Current);
      memset(&v112.retain, 0, 64);
      v112.version = 0LL;
      v112.info = self;
      unint64_t v76 = (const __CFAllocator *)*MEMORY[0x189604DD0];
      uint64_t v77 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, &v112);
      CFRunLoopAddSource(v75, v77, (CFRunLoopMode)*MEMORY[0x1896051B0]);
      Mutable = (__CFArray *)_CFGetTSD();
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable(v76, 1LL, 0LL);
        _CFSetTSD();
      }

      CFArrayAppendValue(Mutable, self);
      pid = self->_pid;
      unint64_t v80 = qos_class_main();
      global_queue = dispatch_get_global_queue(v80, 2uLL);
      uint64_t v82 = dispatch_source_create(MEMORY[0x1895F8B58], pid, 0x80000000uLL, global_queue);
      unint64_t v83 = MEMORY[0x1895F87A8];
      v111[0] = MEMORY[0x1895F87A8];
      v111[1] = 3221225472LL;
      v111[2] = __45__NSConcreteTask_launchWithDictionary_error___block_invoke;
      v111[3] = &unk_189C9A030;
      v111[4] = v82;
      dispatch_source_set_cancel_handler(v82, v111);
      v110[0] = v83;
      v110[1] = 3221225472LL;
      v110[2] = __45__NSConcreteTask_launchWithDictionary_error___block_invoke_2;
      v110[3] = &unk_189CA0FF8;
      v110[4] = self;
      v110[5] = self;
      v110[6] = v82;
      v110[7] = v75;
      v110[8] = v77;
      dispatch_source_set_event_handler(v82, v110);
      self->_dsrc = (OS_dispatch_source *)v82;
      dispatch_resume(v82);
      posix_spawnattr_destroy(&v116);
      posix_spawn_file_actions_destroy(&v117);
      close(v103);
      if (v97) {
        free(v102);
      }
      unint64_t v11 = 1;
      goto LABEL_194;
    }

    if (v98) {
      [v98 closeFile];
    }
    if (v99) {
      [v99 closeFile];
    }
    if (v46 && v46 != v99) {
      [v46 closeFile];
    }
    posix_spawnattr_destroy(&v116);
    posix_spawn_file_actions_destroy(&v117);
    if ((_DWORD)v103 != -1) {
      close(v103);
    }
    if (v97) {
      free(v102);
    }
    if (v107)
    {
      if (v108)
      {
        unint64_t v62 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSPOSIXErrorDomain",  (int)v66,  0LL);
        goto LABEL_121;
      }
    }

    else if ((_DWORD)v66 != 86 {
           || -[NSString rangeOfString:]( -[NSBundle bundleIdentifier]( +[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"),  "bundleIdentifier"),  "rangeOfString:",  @"com.mackiev.") != 0x7FFFFFFFFFFFFFFFLL)
    }
    {
      unint64_t v90 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Couldn't posix_spawn: error %d",  v66);
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v90 userInfo:0]);
      goto LABEL_206;
    }

LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
          return result;
        }

          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v122,  (uint64_t)v10,  v11,  v142,  0LL,  0LL,  0LL,  0LL,  &v455,  0LL,  0LL);
LABEL_225:
          swift_willThrow();
          goto LABEL_226;
        }

        swift_bridgeObjectRelease_n();
        unint64_t v10 = v447;
        break;
    }

  uint64_t v177 = v174[27];
  if (v161 >> 10 < v177 >> 10) {
    goto LABEL_305;
  }
  unint64_t v178 = v174[28];
  *(void *)&v286 = v174[29];
  *(void *)&v285 = v174[30];
  v174[27] = v161;
  v174[28] = v154;
  v291 = v154;
  v174[29] = v295;
  v174[30] = v176;
  v296 = (uint64_t *)v176;
  unint64_t v179 = (*(uint64_t (**)(void, void))(v175[7] + 24LL))(v175[2], v175[7]);
  uint64_t v181 = v288;
  uint64_t v182 = *(void *)(v288 + 16);
  v292 = (char *)v161;
  if (v182)
  {
    unint64_t v183 = specialized __RawDictionaryStorage.find<A>(_:)(v179, v180);
    unint64_t v184 = v277;
    if ((v185 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v181 + 56) + 72 * v183, (uint64_t)&v319);
    }

    else
    {
      v323 = 0LL;
      v321 = 0u;
      v322 = 0u;
      v319 = 0u;
      v320 = 0u;
    }
  }

  else
  {
    v323 = 0LL;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
    unint64_t v184 = v277;
  }

  swift_bridgeObjectRelease();
  v287 = v178;
  if (*((void *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v319,  (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v184,  0LL,  1LL,  AssociatedTypeWitness);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v319,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    unint64_t v187 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 56LL))(v184, 1LL, 1LL, v187);
  }

  uint64_t v188 = (*(uint64_t (**)(void, void))(v175[8] + 24LL))(v175[3], v175[8]);
  uint64_t v190 = v288;
  uint64_t v191 = *(void *)(v288 + 16);
  v289 = v177;
  if (v191 && (uint64_t v192 = specialized __RawDictionaryStorage.find<A>(_:)(v188, v189), (v193 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v190 + 56) + 72 * v192, (uint64_t)&v319);
  }

  else
  {
    v323 = 0LL;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
  }

  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v303[0] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v303[1] = type metadata accessor for Optional();
  uint64_t v194 = v267;
  uint64_t v195 = v267[9];
  uint64_t v196 = v267[4];
  swift_getAssociatedTypeWitness();
  v303[2] = type metadata accessor for Optional();
  unint64_t v197 = v194[10];
  unint64_t v198 = v194[5];
  swift_getAssociatedTypeWitness();
  v303[3] = type metadata accessor for Optional();
  unint64_t v199 = v194[6];
  v293 = v194[11];
  *(void *)&v294 = v199;
  swift_getAssociatedTypeWitness();
  v303[4] = type metadata accessor for Optional();
  v303[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t v200 = (int *)swift_getTupleTypeMetadata();
  unint64_t v201 = v277;
  unint64_t v202 = v277 + v200[12];
  if (*((void *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v319,  (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v203 = swift_getAssociatedTypeWitness();
    unint64_t v201 = v277;
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v203 - 8) + 56LL))(v202, 0LL, 1LL, v203);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v319,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    unint64_t v204 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v204 - 8) + 56LL))(v202, 1LL, 1LL, v204);
  }

  uint64_t v205 = (*(uint64_t (**)(uint64_t, uint64_t))(v195 + 24))(v196, v195);
  uint64_t v207 = v288;
  if (*(void *)(v288 + 16) && (uint64_t v208 = specialized __RawDictionaryStorage.find<A>(_:)(v205, v206), (v209 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v207 + 56) + 72 * v208, (uint64_t)&v319);
  }

  else
  {
    v323 = 0LL;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
  }

  swift_bridgeObjectRelease();
  uint64_t v210 = v201 + v200[16];
  unint64_t v211 = v287;
  if (*((void *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v319,  (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v212 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    uint64_t v213 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v212 - 8) + 56LL);
    uint64_t v214 = v212;
    unint64_t v201 = v277;
    v213(v210, 0LL, 1LL, v214);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v319,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v215 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v215 - 8) + 56LL))(v210, 1LL, 1LL, v215);
  }

  uint64_t v216 = (*(uint64_t (**)(uint64_t, uint64_t))(v197 + 24))(v198, v197);
  __int128 v218 = v288;
  __int128 v219 = v289;
  if (*(void *)(v288 + 16) && (char v220 = specialized __RawDictionaryStorage.find<A>(_:)(v216, v217), (v221 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v218 + 56) + 72 * v220, (uint64_t)&v319);
  }

  else
  {
    v323 = 0LL;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
  }

  swift_bridgeObjectRelease();
  __int128 v222 = v201 + v200[20];
  __int128 v223 = v295;
  if (*((void *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v319,  (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    __int128 v224 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v224 - 8) + 56LL))(v222, 0LL, 1LL, v224);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v319,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    __int128 v225 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v225 - 8) + 56LL))(v222, 1LL, 1LL, v225);
  }

  unint64_t v226 = (*(uint64_t (**)(void))(v293 + 24))(v294);
  uint64_t v228 = v288;
  uint64_t v229 = v292;
  if (*(void *)(v288 + 16) && (unint64_t v230 = specialized __RawDictionaryStorage.find<A>(_:)(v226, v227), (v231 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v228 + 56) + 72 * v230, (uint64_t)&v319);
  }

  else
  {
    v323 = 0LL;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
  }

  swift_bridgeObjectRelease();
  uint64_t v232 = v201 + v200[24];
  if (*((void *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v319,  (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v233 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v233 - 8) + 56LL))(v232, 0LL, 1LL, v233);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v319,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v234 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v234 - 8) + 56LL))(v232, 1LL, 1LL, v234);
  }

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v235 = (unint64_t *)(v201 + v200[28]);
  *unint64_t v235 = v219;
  v235[1] = v211;
  unint64_t v236 = v285;
  v235[2] = v286;
  v235[3] = v236;
  uint64_t v237 = v291;
  v235[4] = (unint64_t)v229;
  v235[5] = (unint64_t)v237;
  unint64_t v238 = (uint64_t)v296;
  v235[6] = v223;
  v235[7] = v238;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v200 - 1) + 56LL))( v201,  0LL,  1LL,  v200);
}

      __break(1u);
      __break(1u);
      goto LABEL_211;
    }

        __break(1u);
        goto LABEL_211;
      }

                    swift_bridgeObjectRelease();
                    *(void *)&uint64_t v186 = v21;
                    uint64_t v6 = v164;
                    goto LABEL_14;
                  }

                  unint64_t v7 = v50;
                }
              }
            }
          }

                  __break(1u);
LABEL_211:
                  outlined destroy of Any?( (uint64_t)&v204,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  __break(1u);
LABEL_212:
                  outlined destroy of Any?( (uint64_t)&v204,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  __break(1u);
LABEL_213:
                  __break(1u);
LABEL_214:
                  __break(1u);
LABEL_215:
                  swift_unknownObjectRelease();
                  __break(1u);
                  goto LABEL_216;
                }
              }
            }
          }
        }

        id v125 = v129;
      }

              if (v99) {
                goto LABEL_281;
              }
              char v85 = 0LL;
              goto LABEL_223;
            }

            uint64_t v12 = ((-15LL << ((4 * v84 + 8) & 0x3C)) - 1) & v84 | ((unint64_t)*(unsigned __int16 *)(v81 + 16) << ((4 * v84 + 8) & 0x3C));
            swift_unknownObjectRetain();
            char v85 = 0LL;
            char v13 = 0LL;
            goto LABEL_224;
          }

          unint64_t v10 = a5;
          if (a5 > 0) {
            goto LABEL_273;
          }
          swift_release();
          char v85 = 0LL;
          char v13 = 0LL;
          uint64_t v12 = 0LL;
          char v15 = 0LL;
LABEL_225:
          uint64_t v34 = v10 - v85;
          uint64_t result = a3;
          if (__OFSUB__(v10, v85))
          {
            __break(1u);
LABEL_228:
            uint64_t result = 0LL;
            unint64_t v35 = v114;
            goto LABEL_230;
          }

LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }

    LODWORD(v94) = (_DWORD)v449;
    goto LABEL_210;
  }

  st_size = v452.st_size;
  unint64_t v105 = v443;
  if (v452.st_size < v443) {
    unint64_t v105 = v452.st_size;
  }
  if ((v444 & 1) == 0) {
    st_size = v105;
  }
  v444 = st_size;
  char v106 = v96;
  st_mode = v452.st_mode;
  uint64_t v107 = S_IFMT.getter();
  if ((v106 & 8) != 0)
  {
    IsSafeForMapping = 1;
    goto LABEL_103;
  }

  if ((v106 & 1) == 0
    || fcntl(_:_:)(v94, 63) < 0
    || (bzero(&v455, 0x878uLL), fstatfs(v94, &v455))
    || (v455.f_flags & 0x1200) != 0x1000)
  {
    IsSafeForMapping = 0;
    goto LABEL_103;
  }

  v447 = v10;
  v448 = v12;
  if ((v446 & 1) != 0)
  {
    swift_retain_n();
    char v108 = v10;
    swift_retain_n();
    uint64_t v109 = v108;
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      v453._unint64_t countAndFlagsBits = (uint64_t)v109;
      v453._unint64_t object = (void *)v11;
      v454 = v12;
      v438 = (void **)v109;
      swift_retain();
      swift_retain();
      uint64_t v110 = URL.path(percentEncoded:)(1);
      v453 = v110;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v110._countAndFlagsBits, (unint64_t)v110._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v437 = v110._object;
      v450._unint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      Swift::String v111 = specialized Set._Variant.insert(_:)(&v451, 0x2FuLL);
      Swift::String v112 = v450._countAndFlagsBits;
      char v113 = v453._countAndFlagsBits;
      char v114 = v453._object;
      id v115 = ((unint64_t)v453._object >> 56) & 0xF;
      if (v115)
      {
        v445 = (id)v11;
        v450 = v453;
        MEMORY[0x1895F8858](v111);
        v435 = (uint64_t)&v450;
        v436 = v112;
        swift_bridgeObjectRetain();
        unint64_t v116 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v434,  v113,  (unint64_t)v114);
        v443 = v117;
        if (v117 == 1)
        {
          char v119 = (unint64_t)v450._object;
          char v118 = v450._countAndFlagsBits;
          swift_bridgeObjectRetain();
          uint64_t v120 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v118,  v119,  v112);
          v443 = v121;
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v120 = (uint64_t)v116;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v427 = v438;
        unint64_t v11 = (uint64_t)v445;
        v426 = v447;
        if (!v443)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v432 = v448;
          outlined consume of PathOrURL(v426, v11, (uint64_t)v448, 1);
          outlined consume of PathOrURL(v426, v11, (uint64_t)v432, 1);
          swift_release();
          swift_release();

          uint64_t v120 = 0LL;
          v443 = 0xE000000000000000LL;
LABEL_367:
          swift_release();
          swift_release();

          if ((v443 & 0x1000000000000000LL) != 0) {
            goto LABEL_368;
          }
          goto LABEL_327;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v120 = 0LL;
        v443 = 0xE000000000000000LL;
        v426 = v447;
        v427 = v438;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v431 = v448;
      outlined consume of PathOrURL(v426, v11, (uint64_t)v448, 1);
      outlined consume of PathOrURL(v426, v11, (uint64_t)v431, 1);
      swift_release();
      swift_release();

      goto LABEL_367;
    }

    v410 = objc_msgSend(v109, sel__parameterString);
    v445 = v109;
    if (v410)
    {
      v411 = v410;
      v443 = (off_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v410);
      v413 = v412;

      if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        || (v414 = objc_msgSend(v445, sel_path)) == 0)
      {
        v453._unint64_t countAndFlagsBits = 59LL;
        v453._unint64_t object = (void *)0xE100000000000000LL;
        v425._unint64_t countAndFlagsBits = v443;
        v425._unint64_t object = v413;
        String.append(_:)(v425);
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        uint64_t v120 = v453._countAndFlagsBits;
        v443 = (off_t)v453._object;
        goto LABEL_361;
      }

      v415 = v414;
      v416 = static String._unconditionallyBridgeFromObjectiveC(_:)(v414);
      v418 = v417;

      v453._unint64_t countAndFlagsBits = (uint64_t)v416;
      v453._unint64_t object = v418;
      swift_bridgeObjectRetain();
      v419._unint64_t countAndFlagsBits = 59LL;
      v419._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v419);
      unint64_t v10 = v447;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v420._unint64_t countAndFlagsBits = v443;
      v420._unint64_t object = v413;
      String.append(_:)(v420);
      swift_bridgeObjectRelease();
      uint64_t v12 = v448;
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
      uint64_t v120 = v453._countAndFlagsBits;
      v443 = (off_t)v453._object;
    }

    else
    {
      v428 = objc_msgSend(v109, sel_path);
      if (!v428)
      {
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        swift_release();
        swift_release();

        uint64_t v120 = 0LL;
        v443 = 0xE000000000000000LL;
        goto LABEL_327;
      }

      v429 = v428;
      uint64_t v120 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v428);
      v443 = v430;

      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    }

    outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
LABEL_361:
    swift_release();
    swift_release();

    if ((v443 & 0x1000000000000000LL) != 0) {
      goto LABEL_368;
    }
    goto LABEL_327;
  }

  swift_bridgeObjectRetain();
  uint64_t v120 = (uint64_t)v10;
  v443 = v11;
  if ((v11 & 0x1000000000000000LL) != 0)
  {
LABEL_368:
    uint64_t isStackAllocationSafe = String.UTF8View._foreignCount()();
    goto LABEL_333;
  }

                  swift_unknownObjectRetain();
                  unint64_t v236 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v36, v235, v29, v31, v222);
                  swift_release();
                  uint64_t result = swift_unknownObjectRelease_n();
                  uint64_t v237 = v38 - v223;
                  if (!__OFSUB__(v38, v223)) {
                    goto LABEL_209;
                  }
                  goto LABEL_343;
                }

                uint64_t v31 = v110;
                char v106 = 1LL;
              }

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v162 = v151 & 0xFFFFFFFFFFFFF0FFLL | (v165 << 8);
            uint64_t v150 = v357;
            uint64_t v163 = v155;
            goto LABEL_169;
          }

          char v21 = v349;
          uint64_t v148 = v360;
LABEL_207:
          if (v152)
          {
LABEL_413:
            __break(1u);
            goto LABEL_414;
          }

          goto LABEL_208;
        }
      }

      else
      {
        uint64_t v150 = v357;
        if (v352 >= 0x800)
        {
LABEL_410:
          __break(1u);
LABEL_411:
          __break(1u);
          goto LABEL_412;
        }
      }

      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v434);
      swift_unknownObjectRetain();
      uint64_t v162 = specialized Rope._endPath.getter(v147);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v152 = 0LL;
      uint64_t v163 = 0LL;
      if (!v147)
      {
        unint64_t v164 = 0LL;
LABEL_210:
        v341 = (char *)((char *)v358 - (char *)v152);
        if (__OFSUB__(v358, v152))
        {
LABEL_387:
          __break(1u);
          goto LABEL_388;
        }

        uint64_t v186 = v336[1];
        v415[3] = *v336;
        v415[4] = v186;
        v415[5] = v336[2];
        uint64_t result = BigString.utf8.getter();
        if (__OFSUB__(0LL, v152))
        {
LABEL_388:
          __break(1u);
          goto LABEL_389;
        }

        unint64_t v187 = BigString.UTF8View.index(_:offsetBy:)();
        unint64_t v189 = v188;
        v311 = v191;
        v312 = v190;
        uint64_t result = outlined release of Locale((uint64_t)&v404);
        if (v164 >= v337)
        {
LABEL_389:
          __break(1u);
          goto LABEL_390;
        }

        if (v346 != *(void *)(v21 + 88))
        {
LABEL_390:
          __break(1u);
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
          goto LABEL_393;
        }

        v309 = v189;
        v310 = v187;
        uint64_t v192 = *(uint64_t **)(v21 + 64);
        if (v163)
        {
          uint64_t v193 = v162;
          uint64_t v194 = v163 + 24 * ((v162 >> ((4 * *(_BYTE *)(v163 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v195 = *(void *)(v194 + 40);
          v353 = *(uint64_t **)(v194 + 32);
          swift_bridgeObjectRetain();
          v313 = v195;
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v196 = v346;
          unint64_t v197 = v346;
        }

        else
        {
          swift_unknownObjectRetain();
          uint64_t v193 = v162;
          specialized Rope._Node.subscript.getter(v162, (uint64_t)v192);
          v353 = v198;
          v313 = v199;
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v192 = *(uint64_t **)(v21 + 64);
          unint64_t v197 = *(void *)(v21 + 88);
          uint64_t v196 = v346;
        }

        v338 = v164 + 1;
        v368 = v196;
        v369 = v193;
        v358 = (__int128 *)v409;
        v359 = v376;
        v327 = (uint64_t *)(v348 + 40);
        v370 = v163;
        uint64_t v200 = v354;
LABEL_218:
        if (v196 != v197) {
          goto LABEL_377;
        }
        v332 = v197;
        v340 = v163;
        if (v163)
        {
          unint64_t v201 = *(void *)(v163 + 24 * ((v193 >> ((4 * *(_BYTE *)(v163 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          unint64_t v201 = specialized Rope._Node.subscript.getter(v193, (uint64_t)v192);
        }

        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (__OFADD__(v341, v201)) {
          goto LABEL_378;
        }
        v326 = &v341[v201];
        if (v192)
        {
          unint64_t v202 = ((-15LL << ((4 * *((_BYTE *)v192 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v192 + 18) | ((unint64_t)*((unsigned __int16 *)v192 + 8) << ((4 * *((_BYTE *)v192 + 18) + 8) & 0x3C));
          uint64_t result = swift_unknownObjectRetain();
        }

        else
        {
          unint64_t v202 = 0LL;
        }

        uint64_t v203 = v353;
        if (v193 >= v202) {
          goto LABEL_379;
        }
        if (v340)
        {
          unint64_t v204 = (4 * *(_BYTE *)(v340 + 18) + 8) & 0x3C;
          uint64_t v205 = ((v193 >> v204) & 0xF) + 1;
          if (v205 < *(unsigned __int16 *)(v340 + 16))
          {
            v206 = (v205 << v204) | ((-15LL << v204) - 1) & v193;
            uint64_t result = swift_unknownObjectRelease_n();
LABEL_233:
            uint64_t v192 = (uint64_t *)v370;
            goto LABEL_240;
          }
        }

        uint64_t v207 = *((unsigned __int8 *)v192 + 18);
        uint64_t v208 = (4 * v207 + 8) & 0x3C;
        unint64_t v209 = (v193 >> v208) & 0xF;
        *(void *)&v407 = v209;
        if (v207)
        {
          swift_unknownObjectRetain();
          uint64_t v210 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v192 + 3),  (uint64_t *)&v407,  (uint64_t)&v368,  (uint64_t)v192,  v207);
          uint64_t result = swift_unknownObjectRelease();
          if ((v210 & 1) != 0)
          {
            uint64_t result = swift_unknownObjectRelease_n();
            v206 = v369;
            goto LABEL_233;
          }
        }

        else
        {
          unint64_t v211 = v209 + 1;
          if (v209 + 1 < (unint64_t)*((unsigned __int16 *)v192 + 8))
          {
            uint64_t result = swift_unknownObjectRelease_n();
            v206 = (v211 << v208) | ((-15LL << v208) - 1) & v193;
            goto LABEL_240;
          }
        }

        if (v192)
        {
          uint64_t v212 = *((unsigned __int8 *)v192 + 18);
          uint64_t v213 = *((unsigned __int16 *)v192 + 8);
          uint64_t result = swift_unknownObjectRelease_n();
          v206 = ((-15LL << ((4 * v212 + 8) & 0x3C)) - 1) & v212 | (unint64_t)(v213 << ((4 * v212 + 8) & 0x3C));
        }

        else
        {
          v206 = 0LL;
        }

        uint64_t v192 = 0LL;
        v368 = v332;
LABEL_240:
        if (v338 != v337)
        {
          if (v368 != *(void *)(v21 + 88))
          {
LABEL_380:
            __break(1u);
LABEL_381:
            __break(1u);
            goto LABEL_382;
          }

          v346 = v368;
          v324 = v192;
          v325 = v206;
          if (v192)
          {
            uint64_t v214 = &v192[3 * ((v206 >> ((4 * *((_BYTE *)v192 + 18) + 8) & 0x3C)) & 0xF)];
            uint64_t v215 = v214[4];
            uint64_t v216 = v214[5];
            swift_bridgeObjectRetain();
            v330 = v216;
            swift_bridgeObjectRetain();
          }

          else
          {
            uint64_t v217 = *(void *)(v21 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v206, v217);
            v330 = v218;
            uint64_t v215 = v219;
            swift_unknownObjectRelease();
          }

          uint64_t result = swift_bridgeObjectRetain();
          char v220 = 0LL;
          char v221 = v327;
          v360 = v215;
          v347 = (void *)v193;
          while (1)
          {
            __int128 v223 = v220 + 1;
            if (__OFADD__(v220, 1LL))
            {
              __break(1u);
LABEL_366:
              __break(1u);
              goto LABEL_367;
            }

            __int128 v224 = *(v221 - 1);
            __int128 v225 = *v221;
            if (v203[2])
            {
              swift_bridgeObjectRetain_n();
              unint64_t v226 = specialized __RawDictionaryStorage.find<A>(_:)(v224, v225);
              if ((v227 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue(v203[7] + 72 * v226, (uint64_t)&v383);
              }

              else
              {
                v387 = 0LL;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }

              swift_bridgeObjectRelease();
              uint64_t v215 = v360;
              if (!*(void *)(v360 + 16))
              {
LABEL_255:
                v382 = 0LL;
                v380 = 0u;
                v381 = 0u;
                v378 = 0u;
                v379 = 0u;
                goto LABEL_262;
              }
            }

            else
            {
              v387 = 0LL;
              v385 = 0u;
              v386 = 0u;
              v383 = 0u;
              v384 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v215 + 16)) {
                goto LABEL_255;
              }
            }

            swift_bridgeObjectRetain();
            uint64_t v228 = specialized __RawDictionaryStorage.find<A>(_:)(v224, v225);
            if ((v229 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v215 + 56) + 72 * v228,  (uint64_t)&v378);
            }

            else
            {
              v382 = 0LL;
              v380 = 0u;
              v381 = 0u;
              v378 = 0u;
              v379 = 0u;
            }

            swift_bridgeObjectRelease();
LABEL_262:
            swift_bridgeObjectRelease();
            uint64_t v192 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v383,  (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v378,  (uint64_t)v359,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v371)
            {
              if (v377) {
                goto LABEL_279;
              }
              outlined destroy of Any?( (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v378,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_249;
            }

            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v368,  (uint64_t)v366,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v377) {
              goto LABEL_278;
            }
            unint64_t v230 = *((_OWORD *)v359 + 3);
            v363 = *((_OWORD *)v359 + 2);
            v364 = v230;
            v365 = *((void *)v359 + 8);
            uint64_t v231 = *((_OWORD *)v359 + 1);
            v361 = *(_OWORD *)v359;
            v362 = v231;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v366,  (uint64_t)v415);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v361,  (uint64_t)v414);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v415,  (uint64_t)&v407,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v414,  (uint64_t)v358,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v408)
            {
              if (!v410)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v407);
LABEL_247:
                __int128 v222 = 0;
                goto LABEL_248;
              }

              outlined init with take of any PredicateExpression<Self.Output == B1>(&v407, (uint64_t)v411);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v358, (uint64_t)v406);
              uint64_t v232 = v412;
              v351 = v413;
              v350 = __swift_project_boxed_opaque_existential_1(v411, v412);
              v356 = (__int128 *)&v309;
              uint64_t v233 = *(void *)(v232 - 8);
              MEMORY[0x1895F8858](v350);
              unint64_t v235 = (char *)&v309 - ((v234 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v406,  (uint64_t)v405);
              unint64_t v236 = type metadata accessor for Optional();
              v355 = &v309;
              uint64_t v237 = *(void *)(v236 - 8);
              MEMORY[0x1895F8858](v236);
              unint64_t v239 = (char *)&v309 - v238;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              unint64_t v240 = swift_dynamicCast();
              uint64_t v241 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v233 + 56);
              if (v240)
              {
                v241(v239, 0LL, 1LL, v232);
                (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v235, v239, v232);
                __int128 v222 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v233 + 8))(v235, v232);
              }

              else
              {
                v241(v239, 1LL, 1LL, v232);
                (*(void (**)(char *, uint64_t))(v237 + 8))(v239, v236);
                __int128 v222 = 0;
              }

              uint64_t v193 = (unint64_t)v347;
              uint64_t v203 = v353;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v406);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v411);
              uint64_t v200 = v354;
            }

            else
            {
              if (v410)
              {
                outlined destroy of Any?( (uint64_t)v358,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_247;
              }

              __int128 v222 = 1;
            }

                  swift_unknownObjectRetain();
                  v243 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v242, v37, v30, v229);
                  swift_release();
                  uint64_t result = swift_unknownObjectRelease_n();
                  v244 = v38 - v230;
                  if (!__OFSUB__(v38, v230)) {
                    goto LABEL_209;
                  }
                  goto LABEL_343;
                }

                unint64_t v30 = v112;
                char v108 = 1LL;
              }

            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
            goto LABEL_222;
          }

                            *(void *)(v89 + 8 * (v159 >> 6) + 64) |= 1LL << v159;
                            uint64_t v166 = (uint64_t *)(*(void *)(v89 + 48) + 16 * v159);
                            *uint64_t v166 = v154;
                            v166[1] = v156;
                            uint64_t v167 = (uint64_t *)(*(void *)(v89 + 56) + 16 * v159);
                            *uint64_t v167 = v21;
                            v167[1] = v153;
                            uint64_t v168 = *(void *)(v89 + 16);
                            uint64_t v50 = __OFADD__(v168, 1LL);
                            unint64_t v169 = v168 + 1;
                            if (v50) {
                              goto LABEL_266;
                            }
                            *(void *)(v89 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v169;
                            swift_bridgeObjectRetain();
LABEL_210:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
LABEL_155:
                            unint64_t v5 = __src + 1;
                            unint64_t v204 = v89;
                            uint64_t v6 = v196;
                            goto LABEL_4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            unint64_t v10 = v147;
          }

          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
      }

      unint64_t v79 = *(unsigned __int8 *)(v29 + 18);
      unint64_t v80 = (4 * v79 + 8) & 0x3C;
      uint64_t v81 = (v69 >> v80) & 0xF;
      *(void *)&unint64_t v236 = v81;
      if (v79)
      {
        uint64_t v9 = v29 + 24;
        swift_unknownObjectRetain();
        uint64_t v82 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v29 + 24,  (uint64_t *)&v236,  (uint64_t)&v221,  v29,  v79);
        swift_unknownObjectRelease();
        char v78 = v194;
        if ((v82 & 1) != 0)
        {
          swift_unknownObjectRelease_n();
          uint64_t v182 = *((void *)&v221 + 1);
          uint64_t v75 = (uint64_t)v195;
          goto LABEL_88;
        }
      }

      else
      {
        unint64_t v83 = v81 + 1;
        if (v81 + 1 < (unint64_t)*(unsigned __int16 *)(v29 + 16))
        {
          swift_unknownObjectRelease_n();
          unint64_t v84 = v83 << v80;
          id v69 = v191;
          uint64_t v182 = v84 | ((-15LL << v80) - 1) & v191;
          char v78 = v194;
          uint64_t v75 = (uint64_t)v195;
          goto LABEL_96;
        }

        id v69 = v191;
        char v78 = v194;
      }

      if (v29)
      {
        char v85 = *(unsigned __int8 *)(v29 + 18);
        unint64_t v86 = *(unsigned __int16 *)(v29 + 16);
        swift_unknownObjectRelease_n();
        unint64_t v87 = (4 * v85 + 8) & 0x3C;
        unint64_t v88 = ((-15LL << v87) - 1) & v85;
        char v78 = v194;
        char v89 = v86 << v87;
        id v69 = v191;
        uint64_t v182 = v88 | v89;
      }

      else
      {
        uint64_t v182 = 0LL;
      }

      uint64_t v75 = (uint64_t)v195;
      uint64_t v29 = 0LL;
      *(void *)&char v221 = v181;
      goto LABEL_96;
    }

          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
      }

      unint64_t v80 = *(unsigned __int8 *)(v29 + 18);
      uint64_t v81 = (4 * v80 + 8) & 0x3C;
      uint64_t v82 = (v70 >> v81) & 0xF;
      *(void *)&unint64_t v238 = v82;
      if (v80)
      {
        uint64_t v9 = v29 + 24;
        swift_unknownObjectRetain();
        unint64_t v83 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v29 + 24,  (uint64_t *)&v238,  (uint64_t)&v223,  v29,  v80);
        swift_unknownObjectRelease();
        unint64_t v79 = v196;
        if ((v83 & 1) != 0)
        {
          swift_unknownObjectRelease_n();
          unint64_t v183 = *((void *)&v223 + 1);
          unint64_t v76 = (uint64_t)v197;
          goto LABEL_88;
        }
      }

      else
      {
        unint64_t v84 = v82 + 1;
        if (v82 + 1 < (unint64_t)*(unsigned __int16 *)(v29 + 16))
        {
          swift_unknownObjectRelease_n();
          char v85 = v84 << v81;
          uint64_t v70 = v193;
          unint64_t v183 = v85 | ((-15LL << v81) - 1) & v193;
          unint64_t v79 = v196;
          unint64_t v76 = (uint64_t)v197;
          goto LABEL_96;
        }

        uint64_t v70 = v193;
        unint64_t v79 = v196;
      }

      if (v29)
      {
        unint64_t v86 = *(unsigned __int8 *)(v29 + 18);
        unint64_t v87 = *(unsigned __int16 *)(v29 + 16);
        swift_unknownObjectRelease_n();
        unint64_t v88 = (4 * v86 + 8) & 0x3C;
        char v89 = ((-15LL << v88) - 1) & v86;
        unint64_t v79 = v196;
        unint64_t v90 = v87 << v88;
        uint64_t v70 = v193;
        unint64_t v183 = v89 | v90;
      }

      else
      {
        unint64_t v183 = 0LL;
      }

      unint64_t v76 = (uint64_t)v197;
      uint64_t v29 = 0LL;
      *(void *)&__int128 v223 = v182;
      goto LABEL_96;
    }

          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
      }

      unint64_t v79 = *(unsigned __int8 *)(v29 + 18);
      unint64_t v80 = (4 * v79 + 8) & 0x3C;
      uint64_t v81 = (v69 >> v80) & 0xF;
      *(void *)&uint64_t v233 = v81;
      if (v79)
      {
        uint64_t v9 = v29 + 24;
        swift_unknownObjectRetain();
        uint64_t v82 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v29 + 24,  (uint64_t *)&v233,  (uint64_t)&v218,  v29,  v79);
        swift_unknownObjectRelease();
        char v78 = v191;
        if ((v82 & 1) != 0)
        {
          swift_unknownObjectRelease_n();
          unint64_t v178 = *((void *)&v218 + 1);
          uint64_t v75 = (uint64_t)v192;
          goto LABEL_88;
        }
      }

      else
      {
        unint64_t v83 = v81 + 1;
        if (v81 + 1 < (unint64_t)*(unsigned __int16 *)(v29 + 16))
        {
          swift_unknownObjectRelease_n();
          unint64_t v84 = v83 << v80;
          id v69 = v188;
          unint64_t v178 = v84 | ((-15LL << v80) - 1) & v188;
          char v78 = v191;
          uint64_t v75 = (uint64_t)v192;
          goto LABEL_96;
        }

        id v69 = v188;
        char v78 = v191;
      }

      if (v29)
      {
        char v85 = *(unsigned __int8 *)(v29 + 18);
        unint64_t v86 = *(unsigned __int16 *)(v29 + 16);
        swift_unknownObjectRelease_n();
        unint64_t v87 = (4 * v85 + 8) & 0x3C;
        unint64_t v88 = ((-15LL << v87) - 1) & v85;
        char v78 = v191;
        char v89 = v86 << v87;
        id v69 = v188;
        unint64_t v178 = v88 | v89;
      }

      else
      {
        unint64_t v178 = 0LL;
      }

      uint64_t v75 = (uint64_t)v192;
      uint64_t v29 = 0LL;
      *(void *)&__int128 v218 = v177;
      goto LABEL_96;
    }

LABEL_201:
        __break(1u);
LABEL_202:
        uint64_t v66 = static String._copying(_:)();
        unint64_t v130 = v129;
        swift_bridgeObjectRelease();
        unint64_t v68 = v130;
LABEL_107:
        unint64_t object = (unint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        if ((v68 & 0x2000000000000000LL) != 0)
        {
          uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v66;
          uint64_t v136 = v68 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v141 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          uint64_t v142 = 0LL;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v135,  HIBYTE(v68) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v141,  1,  (unsigned __int8 *)&v135,  HIBYTE(v68) & 0xF,  (uint64_t *)&v139);
          unint64_t v26 = v139;
          unint64_t object = v140;
          swift_release();
        }

        else
        {
          if ((v66 & 0x1000000000000000LL) != 0)
          {
            id v69 = (unsigned __int8 *)((v68 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v70 = v66 & 0xFFFFFFFFFFFFLL;
            goto LABEL_110;
          }

      __int128 v222 = 0LL;
LABEL_205:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      __int128 v223 = (void *)v325;
      __int128 v225 = *(void *)(v325 + 16);
      __int128 v224 = *(void *)(v325 + 24);
      if (v225 >= v224 >> 1)
      {
        __int128 v223 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v224 > 1),  v225 + 1,  1,  (void *)v325);
        *(void *)&v325 = v223;
      }

      v223[2] = v225 + 1;
      unint64_t v226 = &v223[4 * v225];
      v226[4] = v1;
      v226[5] = v215;
      v226[6] = v200;
      v226[7] = v222;
      uint64_t v227 = v188;
      uint64_t v185 = (uint64_t)v319;
      uint64_t v191 = v320;
      unint64_t v28 = v316;
      uint64_t v190 = v321;
      if (v24 == v319)
      {
        uint64_t v227 = _StringGuts._slowEnsureMatchingEncoding(_:)(v188, v321, v316);
        uint64_t v185 = (uint64_t)v319;
        uint64_t v191 = v320;
        uint64_t v190 = v321;
        if ((v28 & 0x1000000000000000LL) == 0)
        {
LABEL_209:
          unint64_t v187 = 0LL;
          unint64_t v79 = (v227 & 0xFFFFFFFFFFFF0000LL) + 65540;
          char v78 = 1LL;
          goto LABEL_167;
        }
      }

      else if ((v316 & 0x1000000000000000LL) == 0)
      {
        goto LABEL_209;
      }

      if (v191 <= v227 >> 16) {
        goto LABEL_289;
      }
      uint64_t v228 = String.UTF8View._foreignIndex(after:)();
      uint64_t v185 = (uint64_t)v319;
      uint64_t v191 = v320;
      uint64_t v190 = v321;
      unint64_t v79 = v228;
      unint64_t v187 = 0LL;
      char v78 = 1LL;
LABEL_167:
      if (v24 == (char *)v185)
      {
        v206 = _StringGuts._slowEnsureMatchingEncoding(_:)(v188, v190, v28);
        uint64_t v185 = (uint64_t)v319;
        uint64_t v191 = v320;
        uint64_t v188 = v206;
        uint64_t v24 = v317;
        if ((v28 & 0x1000000000000000LL) == 0)
        {
LABEL_149:
          uint64_t v188 = (v188 & 0xFFFFFFFFFFFF0000LL) + 65540;
          goto LABEL_150;
        }
      }

      else
      {
        uint64_t v24 = v317;
        if ((v28 & 0x1000000000000000LL) == 0) {
          goto LABEL_149;
        }
      }

      if (v191 <= v188 >> 16) {
        goto LABEL_285;
      }
      uint64_t v195 = String.UTF8View._foreignIndex(after:)();
      uint64_t v185 = (uint64_t)v319;
      uint64_t v188 = v195;
LABEL_150:
      uint64_t v186 = v188 >> 14;
    }

    while (v188 >> 14 != v318);
    if ((v78 & 1) != 0)
    {
      if (v318 >= v79 >> 14)
      {
        uint64_t v229 = String.subscript.getter();
        unint64_t v79 = MEMORY[0x186E1B610](v229);
        uint64_t v1 = v230;
        uint64_t v231 = swift_bridgeObjectRelease();
        uint64_t v232 = 0LL;
        uint64_t v233 = 0LL;
        goto LABEL_227;
      }

      __break(1u);
LABEL_295:
      __break(1u);
      goto LABEL_296;
    }

    if (v187 >> 14 < v79 >> 14) {
      goto LABEL_295;
    }
    uint64_t v237 = String.subscript.getter();
    unint64_t v79 = MEMORY[0x186E1B610](v237);
    uint64_t v1 = v238;
    uint64_t result = swift_bridgeObjectRelease();
    if ((char *)(v187 & 0xC) == v319)
    {
LABEL_296:
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v187, v321, v28);
      unint64_t v187 = result;
      if ((v28 & 0x1000000000000000LL) != 0) {
        goto LABEL_297;
      }
LABEL_224:
      unint64_t v239 = (v187 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_225:
      if (v318 < v239 >> 14)
      {
        __break(1u);
LABEL_300:
        swift_bridgeObjectRetain();
        continue;
      }

      unint64_t v240 = String.subscript.getter();
      uint64_t v232 = MEMORY[0x186E1B610](v240);
      uint64_t v233 = v241;
      uint64_t v231 = swift_bridgeObjectRelease();
LABEL_227:
      unint64_t v242 = HIBYTE(v1) & 0xF;
      if ((v1 & 0x2000000000000000LL) == 0) {
        unint64_t v242 = v79 & 0xFFFFFFFFFFFFLL;
      }
      if (v242)
      {
        *(void *)&v329 = v79;
        *((void *)&v329 + 1) = v1;
        MEMORY[0x1895F8858](v231);
        *(&v304 - 2) = (uint64_t)&v329;
        *(&v304 - 1) = MEMORY[0x18961AFF8];
        swift_bridgeObjectRetain();
        v243 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v304 - 4),  v79,  v1);
        if (v244 == 1)
        {
          v246 = *((void *)&v329 + 1);
          v245 = v329;
          swift_bridgeObjectRetain();
          v247 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v245,  v246,  MEMORY[0x18961AFF8]);
          __int128 v249 = v248;
          swift_bridgeObjectRelease();
        }

        else
        {
          v247 = v243;
          __int128 v249 = v244;
        }

        swift_bridgeObjectRelease();
        __int128 v250 = swift_bridgeObjectRelease();
        if (v249) {
          goto LABEL_236;
        }
      }

      else
      {
        __int128 v250 = swift_bridgeObjectRelease();
      }

      v247 = 0LL;
      __int128 v249 = 0xE000000000000000LL;
LABEL_236:
      if (v233)
      {
        __int128 v251 = HIBYTE(v233) & 0xF;
        if ((v233 & 0x2000000000000000LL) == 0) {
          __int128 v251 = v232 & 0xFFFFFFFFFFFFLL;
        }
        if (v251)
        {
          *(void *)&v329 = v232;
          *((void *)&v329 + 1) = v233;
          MEMORY[0x1895F8858](v250);
          *(&v304 - 2) = (uint64_t)&v329;
          *(&v304 - 1) = MEMORY[0x18961AFF8];
          swift_bridgeObjectRetain();
          __int128 v252 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v304 - 4),  v232,  v233);
          if (v253 == 1)
          {
            __int128 v255 = *((void *)&v329 + 1);
            __int128 v254 = v329;
            swift_bridgeObjectRetain();
            uint64_t v232 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v254,  v255,  MEMORY[0x18961AFF8]);
            __int128 v257 = v256;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v232 = (uint64_t)v252;
            __int128 v257 = v253;
            swift_bridgeObjectRelease_n();
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v232 = 0LL;
          __int128 v257 = 0xE000000000000000LL;
        }
      }

      else
      {
        __int128 v257 = 0LL;
      }

      __int128 v258 = (void *)v325;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        __int128 v258 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v258[2] + 1LL,  1,  v258);
        *(void *)&v325 = v258;
      }

      uint64_t v260 = v258[2];
      __int128 v259 = v258[3];
      v312 = v39;
      if (v260 >= v259 >> 1)
      {
        __int128 v258 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v259 > 1),  v260 + 1,  1,  v258);
        *(void *)&v325 = v258;
      }

      v258[2] = v260 + 1;
      v261 = &v258[4 * v260];
      v261[4] = v247;
      v261[5] = v249;
      v261[6] = v232;
      v261[7] = v257;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v347);
      unint64_t v236 = v325;
      unint64_t v39 = v310;
      uint64_t v172 = v311;
      uint64_t v1 = v313;
      goto LABEL_250;
    }

    break;
  }

  if ((v28 & 0x1000000000000000LL) == 0) {
    goto LABEL_224;
  }
LABEL_297:
  if (v320 > v187 >> 16)
  {
    unint64_t v28 = v316;
    unint64_t v239 = String.UTF8View._foreignIndex(after:)();
    uint64_t v24 = v317;
    goto LABEL_225;
  }

  v242[0] = v229;
  v242[1] = v222;
  v242[2] = v221;
  v242[3] = v220;
  v242[4] = v147;
  v242[5] = v142;
  unint64_t v235 = v158;
  v242[6] = v158;
  v242[7] = v149;
  uint64_t v159 = *(void *)(v153 + 16);
  if (!v159)
  {
LABEL_205:
    outlined release of Locale((uint64_t)v298);
LABEL_206:
    swift_release();
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v263);
    uint64_t v161 = v210;
    uint64_t v162 = v235;
    goto LABEL_207;
  }

  uint64_t v160 = 40LL;
  while (!*(void *)(v153 + v160))
  {
    v160 += 16LL;
    if (!--v159) {
      goto LABEL_205;
    }
  }

  uint64_t v232 = v149;
  uint64_t v233 = v142;
  v234 = (uint64_t *)v147;
  swift_bridgeObjectRetain();
  uint64_t v175 = (unint64_t *)(v153 + 40);
  unint64_t v176 = (char *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v177 = *v175;
    if (*v175)
    {
      unint64_t v178 = v153;
      unint64_t v179 = *(v175 - 1);
      if ((v177 & 0x2000000000000000LL) != 0) {
        uint64_t v180 = HIBYTE(v177) & 0xF;
      }
      else {
        uint64_t v180 = v179 & 0xFFFFFFFFFFFFLL;
      }
      if (v180)
      {
        if ((v177 & 0x1000000000000000LL) != 0)
        {
          uint64_t v181 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v177 & 0x2000000000000000LL) != 0)
          {
            v243 = *(v175 - 1);
            v244 = v177 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }

          else
          {
            if ((v179 & 0x1000000000000000LL) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }

          uint64_t v181 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v176 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v176 + 2) + 1LL,  1,  v176);
        }
        unint64_t v183 = *((void *)v176 + 2);
        uint64_t v182 = *((void *)v176 + 3);
        if (v183 >= v182 >> 1) {
          unint64_t v176 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v182 > 1),  v183 + 1,  1,  v176);
        }
        *((void *)v176 + 2) = v183 + 1;
        *(_DWORD *)&v176[4 * v183 + 32] = v181;
      }

      uint64_t v153 = v178;
    }

    v175 += 2;
    --v154;
  }

  while (v154);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v297);
  unint64_t v184 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v176);
  uint64_t v186 = v185;
  uint64_t v188 = v187;
  uint64_t v190 = v189;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v243);
  outlined release of Locale((uint64_t)v298);
  swift_release();
  uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v263);
  uint64_t v161 = v210;
  uint64_t v142 = v233;
  uint64_t v147 = (unint64_t)v234;
  uint64_t v162 = v235;
  uint64_t v149 = v232;
  if (v190 == (uint64_t *)2)
  {
LABEL_207:
    uint64_t v163 = v161[27];
    if (v147 >> 10 >= v163 >> 10)
    {
      *(void *)&uint64_t v231 = v161[30];
      unint64_t v230 = *((_OWORD *)v161 + 14);
      v161[27] = v147;
      v161[28] = (uint64_t)v142;
      v161[29] = v162;
      v161[30] = (uint64_t)v149;
      unint64_t v164 = v202;
      uint64_t v228 = *(void *)(v202 + 32);
      uint64_t v233 = v142;
      uint64_t v165 = *(void *)(v202 + 16);
      unint64_t v235 = v162;
      uint64_t v232 = v149;
      uint64_t v229 = v163;
      swift_getAssociatedTypeWitness();
      type metadata accessor for Optional();
      v234 = (uint64_t *)v147;
      uint64_t v166 = *(void *)(v164 + 40);
      uint64_t v167 = *(void *)(v164 + 24);
      swift_getAssociatedTypeWitness();
      type metadata accessor for Optional();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
      uint64_t v168 = swift_getTupleTypeMetadata3();
      uint64_t v170 = v198;
      unint64_t v169 = v199;
      unint64_t v171 = v199 + *(int *)(v168 + 48);
      uint64_t v172 = v199 + *(int *)(v168 + 64);
      AttributedString._AttributeStorage.subscript.getter(v198, v165, v228, v199);
      AttributedString._AttributeStorage.subscript.getter(v170, v167, v166, v171);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v172 = v229;
      *(_OWORD *)(v172 + 8) = v230;
      uint64_t v173 = (uint64_t)v234;
      *(void *)(v172 + 24) = v231;
      *(void *)(v172 + 32) = v173;
      uint64_t v174 = v235;
      *(void *)(v172 + 40) = v233;
      *(void *)(v172 + 48) = v174;
      *(void *)(v172 + 56) = v232;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v168 - 8) + 56LL))( v169,  0LL,  1LL,  v168);
    }

    goto LABEL_267;
  }

  if (v152 <= v184 >> 10)
  {
    uint64_t v147 = v184;
    uint64_t v142 = v186;
    uint64_t v162 = v188;
    uint64_t v149 = v190;
    goto LABEL_207;
  }

      if (v180 >= 1)
      {
        v194[0] = v152;
        *(double *)__dst = v13;
        *((void *)&__dst[0] + 1) = v17;
        _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(v194, (uint64_t)__dst, (uint64_t)__src);
        if ((__src[1] & 1) == 0) {
          uint64_t v152 = v152 - *((double *)__src + 1);
        }
      }

      uint64_t v9 = v151 + v152 + 0.0;
      goto LABEL_205;
    }

    goto LABEL_254;
  }

LABEL_206:
          id v69 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
LABEL_110:
          uint64_t v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))object;
          uint64_t v136 = 0LL;
          unint64_t v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v69,  v70,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v135,  1,  v69,  v70);
          unint64_t object = v71;
        }

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if (object) {
          goto LABEL_76;
        }
LABEL_74:
        *(_BYTE *)(v4 + 153) = 1;
        continue;
      }

      __break(1u);
      goto LABEL_206;
    }

    break;
  }

  swift_bridgeObjectRetain();
  if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) != 0) {
    goto LABEL_147;
  }
  swift_bridgeObjectRelease_n();
  unint64_t v79 = 0LL;
  unint64_t v80 = 0LL;
LABEL_157:
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v4 + 72) = v79;
  *(void *)(v4 + 80) = v80;
  char v22 = 1;
LABEL_158:
  *(_BYTE *)(v4 + 152) = v22;
  return result;
}

            outlined destroy of Any?( (uint64_t)v282,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?( (uint64_t)v283,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v284);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v289);
            outlined destroy of Any?( (uint64_t)&v290,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v295,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t v136 = v178;
            uint64_t v172 = v268;
            if ((v179 & 1) == 0) {
              goto LABEL_238;
            }
          }

          else
          {
            if (v294) {
              goto LABEL_237;
            }
            outlined destroy of Any?( (uint64_t)&v290,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v295,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          }

          v177 += 2;
          ++v176;
          if (v180 == v136)
          {
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v326);
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            char v21 = v260;
            __int128 v144 = *(void *)(v260 + 64);
            uint64_t v149 = *(void *)(v260 + 88);
            unint64_t v145 = v245;
            __int128 v258 = v246;
            uint64_t v148 = (uint64_t)v262;
            *(void *)&v290 = v262;
            *((void *)&v290 + 1) = v245;
            uint64_t v269 = (__int128 *)v244;
            *(void *)&v291 = v244;
            uint64_t v33 = __OFADD__(v254++, 1LL);
            if (!v33) {
              continue;
            }
            __break(1u);
LABEL_236:
            outlined destroy of AttributedString._AttributeValue((uint64_t)v289);
LABEL_237:
            outlined destroy of Any?( (uint64_t)&v290,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?( (uint64_t)&v295,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_238:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v326);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            char v21 = v260;
            uint64_t v149 = (uint64_t)v255;
            uint64_t v154 = v256;
            goto LABEL_239;
          }

          goto LABEL_208;
        }
      }

      else
      {
        v304 = 0LL;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        swift_bridgeObjectRetain();
        if (*(void *)(v172 + 16)) {
          goto LABEL_216;
        }
      }

      v299 = 0LL;
      v297 = 0u;
      v298 = 0u;
      v295 = 0u;
      v296 = 0u;
      goto LABEL_220;
    }

    break;
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_239:
  if (v149 != *(void *)(v21 + 88)) {
    goto LABEL_289;
  }
  if (v269)
  {
    unint64_t v199 = *((void *)v269 + 3 * ((v154 >> ((4 * *((_BYTE *)v269 + 18) + 8) & 0x3C)) & 0xF) + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v200 = *(void *)(v21 + 64);
    swift_unknownObjectRetain();
    unint64_t v199 = specialized Rope._Node.subscript.getter(v154, v200);
    swift_unknownObjectRelease();
  }

  unint64_t v201 = v252;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v202 = &v258[v199];
  if (__OFADD__(v258, v199)) {
    goto LABEL_290;
  }
  uint64_t v203 = v201[1];
  v290 = *v201;
  v291 = v203;
  v292 = v201[2];
  BigString.utf8.getter();
  uint64_t result = v229;
  if (__OFSUB__(v202, v229 >> 11))
  {
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
    goto LABEL_293;
  }

  unint64_t v204 = BigString.UTF8View.index(_:offsetBy:)();
  v206 = v205;
  uint64_t v208 = v207;
  uint64_t v210 = v209;
  outlined release of Locale((uint64_t)&v278);
  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v327);
  unint64_t v211 = v204 >> 10;
  if (v257 >= v204 >> 10) {
    uint64_t v212 = v204;
  }
  else {
    uint64_t v212 = v243;
  }
  if (v212 >> 10 < v249) {
    goto LABEL_292;
  }
  if (v259 != *(void *)(v260 + 88))
  {
LABEL_293:
    __break(1u);
    goto LABEL_294;
  }

  if (v251)
  {
    uint64_t v213 = *(void *)(v251 + 24 * ((v250 >> ((4 * *(_BYTE *)(v251 + 18) + 8) & 0x3C)) & 0xF) + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v214 = *(void *)(v260 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v250, v214);
    uint64_t v213 = v215;
    swift_unknownObjectRelease();
  }

  outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v309);
  uint64_t v216 = swift_bridgeObjectRetain();
  uint64_t v217 = specialized _NativeDictionary.filter(_:)(v216, (uint64_t)v309);
  uint64_t result = swift_bridgeObjectRelease_n();
  __int128 v218 = v242;
  *unint64_t v242 = v217;
  v218[1] = v213;
  if (v212 >> 10 < v236 >> 10)
  {
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
    goto LABEL_299;
  }

  __int128 v219 = v257 >= v211;
  char v220 = v238;
  char v221 = v239;
  if (v257 >= v211)
  {
    char v220 = v210;
    char v221 = v208;
  }

  __int128 v222 = v241;
  *uint64_t v241 = v236;
  __int128 v223 = v234;
  v222[1] = (unint64_t)v235;
  v222[2] = (unint64_t)v223;
  __int128 v224 = v240;
  if (v219) {
    __int128 v224 = v206;
  }
  v222[3] = (unint64_t)v233;
  v222[4] = v212;
  v222[5] = v224;
  v222[6] = v221;
  v222[7] = v220;
  return result;
}

                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                if (!v7) {
                  __break(1u);
                }
                __break(1u);
LABEL_212:
                _StringGuts.grow(_:)(22LL);
                swift_bridgeObjectRelease();
                v179._unint64_t countAndFlagsBits = 0xD000000000000014LL;
                v179._unint64_t object = (void *)0x80000001839C9190LL;
                LODWORD(v177) = (_DWORD)v13;
                v163._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v163);
                swift_bridgeObjectRelease();
                LODWORD(v166) = 0;
                uint64_t v165 = 73LL;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x1832C5CDCLL);
              }

              unint64_t v35 = 4LL;
              switch(v32)
              {
                case 1:
                case 13:
                  unint64_t v35 = 513LL;
                  goto LABEL_130;
                case 2:
                  goto LABEL_130;
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 14:
                case 15:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 29:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                  goto LABEL_95;
                case 17:
                  unint64_t v35 = 516LL;
                  goto LABEL_130;
                case 28:
                case 69:
                  unint64_t v35 = 640LL;
                  goto LABEL_130;
                case 30:
                  unint64_t v35 = 642LL;
                  goto LABEL_130;
                case 63:
                  unint64_t v35 = 514LL;
                  goto LABEL_130;
                default:
                  if (v32 == 102) {
                    goto LABEL_146;
                  }
LABEL_95:
                  unint64_t v35 = 512LL;
LABEL_130:
                  uint64_t v34 = (id)v10;
                  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
                    goto LABEL_212;
                  }
                  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                  uint64_t v100 = (int)POSIXErrorCode.rawValue.getter();
                  uint64_t v101 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                  unint64_t v102 = String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  char v13 = (char *)objc_msgSend( v101,  sel_initWithDomain_code_userInfo_,  v102,  v100,  _NativeDictionary.bridged()());
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  unint64_t v103 = objc_msgSend(v13, sel_domain);
                  unint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
                  char v106 = v105;

                  if (v104 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                    && v106 == v107)
                  {
                    goto LABEL_185;
                  }

                  uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v10 = (int64_t)v34;
                  if ((v6 & 1) != 0) {
                    goto LABEL_187;
                  }
                  __break(1u);
                  break;
              }

                  v401 = v752;
                  v402 = v666;
                  v666[4] = v751;
                  v402[5] = v401;
                  v403 = v754;
                  v402[6] = v753;
                  v402[7] = v403;
                  v404 = v748;
                  *v402 = v747;
                  v402[1] = v404;
                  v405 = v750;
                  v402[2] = v749;
                  v402[3] = v405;
                  *(void *)&v723 = v640;
                  v728 = v643;
                  *(void *)&v729 = v397;
                  *((void *)&v729 + 1) = v398;
                  v730 = v399;
                  v731 = v639;
                  v732 = v656;
                  v733 = v638;
                  v734 = v637;
                  v735 = &outlined read-only object #0 of String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
                  v736 = MEMORY[0x18961AFE8];
                  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v723);
LABEL_202:
                  unint64_t v65 = v689;
                }

                else
                {
                  unint64_t v65 = v689;
LABEL_204:
                  memcpy(v755, v756, 0x108uLL);
                  outlined release of AttributedString.Runs((uint64_t)v755);
                  if ((_DWORD)v653) {
                    goto LABEL_205;
                  }
                }

                goto LABEL_132;
              }

              LODWORD(v661) = 0;
            }

            else
            {
              if (v296 < v640 || v296 >= v295) {
                goto LABEL_286;
              }
              v643 = v114;
              char v114 = v115;
              v299 = v677;
              v300 = v677[1];
              v1043 = *v677;
              v1044 = v300;
              v1045 = v677[2];
              BigString.unicodeScalars.getter();
              id v115 = (id)v65;
              LODWORD(v661) = BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)&v861);
              v301 = *v299;
              v302 = v299[1];
              v1042 = v299[2];
              v1041 = v302;
              v1040 = v301;
              BigString.unicodeScalars.getter();
              outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v793);
              v303 = BigString.UnicodeScalarView.index(after:)();
              v646 = v305;
              v647 = v304;
              unint64_t v65 = v306;
              outlined release of Locale((uint64_t)&v862);
              swift_release();
              if (v656 < v303 >> 10) {
                goto LABEL_287;
              }
              v772 = v799;
              v773 = v800;
              v774 = v801;
              v768 = v795;
              v769 = v796;
              v771 = v798;
              v770 = v797;
              v297 = v113 >> 10;
              v767 = v794;
              v766 = v793;
              v298 = v664;
              if (v113 >> 10 == v664)
              {
                v763 = v790;
                v764 = v791;
                v765 = v792;
                v759 = v786;
                v760 = v787;
                v762 = v789;
                v761 = v788;
                v758 = v785;
                v757 = v784;
LABEL_201:
                outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v757);
                outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v766);
                swift_release();
                swift_release();
                goto LABEL_202;
              }

              v278 = v303;
              id v115 = v114;
              char v114 = v643;
            }

            if (v297 < v645 || v297 >= v298) {
              goto LABEL_284;
            }
            v307 = v292[1];
            v1037 = *v292;
            v1038 = v307;
            v1039 = v292[2];
            BigString.unicodeScalars.getter();
            v308 = BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v863);
            v309 = v292[1];
            v1034 = *v292;
            v1035 = v309;
            v1036 = v292[2];
            BigString.unicodeScalars.getter();
            outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v802);
            char v113 = BigString.UnicodeScalarView.index(after:)();
            id v115 = v310;
            char v114 = v311;
            v313 = v312;
            outlined release of Locale((uint64_t)&v864);
            swift_release();
            if (v664 < v113 >> 10) {
              goto LABEL_285;
            }
            v763 = v808;
            v764 = v809;
            v765 = v810;
            v759 = v804;
            v760 = v805;
            v762 = v807;
            v761 = v806;
            v758 = v803;
            v757 = v802;
            v295 = v656;
            if (v662 == v656 || (_DWORD)v661 != v308) {
              goto LABEL_201;
            }
            v663 = v313;
            v781 = v772;
            v782 = v773;
            v783 = v774;
            v777 = v768;
            v778 = v769;
            v780 = v771;
            v779 = v770;
            v776 = v767;
            v775 = v766;
            v790 = v808;
            v791 = v809;
            v792 = v810;
            v786 = v804;
            v787 = v805;
            v789 = v807;
            v788 = v806;
            v785 = v803;
            v784 = v802;
          }
        }
      }

uint64_t (*URLComponents._URLComponents.user.getter(uint64_t a1))()
{
  if (*(void *)(v1 + 48))
  {
    uint64_t v2 = *(void *)(v1 + 40);
    unint64_t v3 = *(void *)(v1 + 48);
  }

  else if ((*(_BYTE *)(v1 + 10) & 1) != 0 {
         && (outlined init with take of LocalePreferences?( v1,  (uint64_t)v19,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)&v20,  &demangling cache variable for type metadata for URLParseInfo?),  v20)
  }
         && (*(_BYTE *)(v20 + 72) & 1) == 0)
  {
    uint64_t v5 = String.subscript.getter();
    uint64_t v2 = MEMORY[0x186E1B610](v5);
    unint64_t v3 = v6;
    a1 = swift_bridgeObjectRelease();
  }

  else
  {
    outlined init with take of LocalePreferences?( v1 + 56,  (uint64_t)v18,  &demangling cache variable for type metadata for String?);
    a1 = outlined init with take of LocalePreferences?( (uint64_t)v18,  (uint64_t)v21,  &demangling cache variable for type metadata for String?);
    if (!v22)
    {
      if ((*(_BYTE *)(v1 + 11) & 1) == 0) {
        return 0LL;
      }
      outlined init with take of LocalePreferences?( v1,  (uint64_t)v17,  &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?( (uint64_t)v17,  (uint64_t)&v23,  &demangling cache variable for type metadata for URLParseInfo?);
      if (!v23 || (*(_BYTE *)(v23 + 96) & 1) != 0) {
        return 0LL;
      }
      uint64_t v13 = String.subscript.getter();
      MEMORY[0x186E1B610](v13);
      swift_bridgeObjectRelease();
      a1 = swift_bridgeObjectRelease();
    }

    uint64_t v2 = 0LL;
    unint64_t v3 = 0xE000000000000000LL;
  }

  uint64_t v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    Swift::Int v15 = v2;
    unint64_t v16 = v3;
    MEMORY[0x1895F8858](a1);
    void v14[2] = &v15;
    v14[3] = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v14,  v2,  v3);
    if (v9 == 1)
    {
      Swift::Int v10 = v15;
      unint64_t v11 = v16;
      swift_bridgeObjectRetain();
      uint64_t v4 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v10,  v11,  MEMORY[0x18961AFF8]);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = v8;
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v4;
}

uint64_t URLComponents._URLComponents.percentEncodedUser.getter()
{
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = *(void *)(v0 + 40);
  }

  else
  {
    if ((*(_BYTE *)(v0 + 10) & 1) != 0)
    {
      outlined init with take of LocalePreferences?( v0,  (uint64_t)v7,  &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?( (uint64_t)v7,  (uint64_t)&v8,  &demangling cache variable for type metadata for URLParseInfo?);
      if (v8)
      {
        if ((*(_BYTE *)(v8 + 72) & 1) == 0)
        {
          uint64_t v2 = String.subscript.getter();
          uint64_t v1 = MEMORY[0x186E1B610](v2);
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
      }
    }

    outlined init with take of LocalePreferences?( v0 + 56,  (uint64_t)v6,  &demangling cache variable for type metadata for String?);
    outlined init with take of LocalePreferences?( (uint64_t)v6,  (uint64_t)v9,  &demangling cache variable for type metadata for String?);
    if (!v10)
    {
      if ((*(_BYTE *)(v0 + 11) & 1) == 0
        || (outlined init with take of LocalePreferences?( v0,  (uint64_t)&v5,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)&v5,  (uint64_t)&v11,  &demangling cache variable for type metadata for URLParseInfo?),  !v11)
        || (*(_BYTE *)(v11 + 96) & 1) != 0)
      {
        uint64_t v1 = 0LL;
        goto LABEL_13;
      }

      uint64_t v4 = String.subscript.getter();
      MEMORY[0x186E1B610](v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    uint64_t v1 = 0LL;
  }

uint64_t (*URLComponents._URLComponents.password.getter(uint64_t a1))()
{
  if (*(void *)(v1 + 64))
  {
    uint64_t v2 = *(void *)(v1 + 56);
    unint64_t v3 = *(void *)(v1 + 64);
  }

  else
  {
    if ((*(_BYTE *)(v1 + 11) & 1) == 0) {
      return 0LL;
    }
    outlined init with take of LocalePreferences?( v1,  (uint64_t)v16,  &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?( (uint64_t)v16,  (uint64_t)&v17,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v17 || (*(_BYTE *)(v17 + 96) & 1) != 0) {
      return 0LL;
    }
    uint64_t v11 = String.subscript.getter();
    uint64_t v2 = MEMORY[0x186E1B610](v11);
    unint64_t v3 = v12;
    a1 = swift_bridgeObjectRelease();
  }

  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    Swift::Int v14 = v2;
    unint64_t v15 = v3;
    MEMORY[0x1895F8858](a1);
    v13[2] = &v14;
    void v13[3] = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v13,  v2,  v3);
    if (v6 == 1)
    {
      Swift::Int v7 = v14;
      unint64_t v8 = v15;
      swift_bridgeObjectRetain();
      uint64_t v9 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v7, v8, MEMORY[0x18961AFF8]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v9 = v5;
      swift_bridgeObjectRelease_n();
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v9;
}

uint64_t URLComponents._URLComponents.port.getter()
{
  if (*(_BYTE *)(v0 + 96) != 1) {
    return *(void *)(v0 + 88);
  }
  if ((*(_BYTE *)(v0 + 13) & 1) == 0) {
    return 0LL;
  }
  outlined init with take of LocalePreferences?( v0,  (uint64_t)v17,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v17,  (uint64_t)&v18,  &demangling cache variable for type metadata for URLParseInfo?);
  if (!v18 || (*(_BYTE *)(v18 + 144) & 1) != 0) {
    return 0LL;
  }
  unint64_t v2 = String.subscript.getter();
  uint64_t v6 = v5;
  if (!((v2 ^ v3) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v7 = v2;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v2,  v3,  v4,  v5,  10LL);
  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10LL);
    char v16 = v15;
    swift_bridgeObjectRelease();
    int v14 = v16 & 1;
  }

  else
  {
    uint64_t v12 = v10;
    char v13 = v11;
    swift_bridgeObjectRelease();
    int v14 = v13 & 1;
  }

  if (v14) {
    return 0LL;
  }
  else {
    return v12;
  }
}

uint64_t (*URLComponents._URLComponents.path.getter())()
{
  uint64_t v1 = outlined init with take of LocalePreferences?( (uint64_t)v20,  (uint64_t)&v21,  &demangling cache variable for type metadata for String?);
  unint64_t v2 = v22;
  if (v22)
  {
    uint64_t v3 = v21;
  }

  else if ((*(_BYTE *)(v0 + 14) & 1) != 0 {
         && (outlined init with take of LocalePreferences?( v0,  (uint64_t)v19,  &demangling cache variable for type metadata for URLParseInfo?),  uint64_t v1 = outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)&v23,  &demangling cache variable for type metadata for URLParseInfo?),  v23))
  }
  {
    if ((*(_BYTE *)(v23 + 168) & 1) != 0) {
      uint64_t v4 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v4 = String.subscript.getter();
    }
    uint64_t v3 = MEMORY[0x186E1B610](v4);
    unint64_t v2 = v5;
    uint64_t v1 = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v3 = 0LL;
    unint64_t v2 = 0xE000000000000000LL;
  }

  uint64_t v6 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    outlined retain of String?((uint64_t)v20);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  Swift::Int v17 = v3;
  unint64_t v18 = v2;
  MEMORY[0x1895F8858](v1);
  v16[2] = &v17;
  v16[3] = MEMORY[0x18961AFF8];
  outlined retain of String?((uint64_t)v20);
  swift_bridgeObjectRetain();
  uint64_t v7 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v16,  v3,  v2);
  if (v8 != 1)
  {
    __int16 v11 = v7;
    uint64_t v14 = v8;
    swift_bridgeObjectRelease_n();
    if (v14) {
      return v11;
    }
    return 0LL;
  }

  Swift::Int v9 = v17;
  unint64_t v10 = v18;
  swift_bridgeObjectRetain();
  __int16 v11 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v9, v10, MEMORY[0x18961AFF8]);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (!v13) {
    return 0LL;
  }
  return v11;
}

uint64_t URLComponents._URLComponents.path.setter(unint64_t a1, unint64_t a2)
{
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 14) = 0;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    uint64_t v4 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(a1, a2);
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = 0LL;
    unint64_t v6 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 104) = v4;
  *(void *)(v2 + 112) = v6;
  return result;
}

uint64_t (*URLComponents._URLComponents.query.getter(uint64_t a1))()
{
  if (*(void *)(v1 + 128))
  {
    uint64_t v2 = *(void *)(v1 + 120);
    unint64_t v3 = *(void *)(v1 + 128);
  }

  else
  {
    if ((*(_BYTE *)(v1 + 15) & 1) == 0) {
      return 0LL;
    }
    outlined init with take of LocalePreferences?( v1,  (uint64_t)v16,  &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?( (uint64_t)v16,  (uint64_t)&v17,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v17 || (*(_BYTE *)(v17 + 192) & 1) != 0) {
      return 0LL;
    }
    uint64_t v11 = String.subscript.getter();
    uint64_t v2 = MEMORY[0x186E1B610](v11);
    unint64_t v3 = v12;
    a1 = swift_bridgeObjectRelease();
  }

  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    Swift::Int v14 = v2;
    unint64_t v15 = v3;
    MEMORY[0x1895F8858](a1);
    v13[2] = &v14;
    void v13[3] = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v5 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v13,  v2,  v3);
    if (v6 == 1)
    {
      Swift::Int v7 = v14;
      unint64_t v8 = v15;
      swift_bridgeObjectRetain();
      Swift::Int v9 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v7, v8, MEMORY[0x18961AFF8]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }

    else
    {
      Swift::Int v9 = v5;
      swift_bridgeObjectRelease_n();
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v9;
}

uint64_t (*URLComponents._URLComponents.fragment.getter(uint64_t a1))()
{
  if (*(void *)(v1 + 144))
  {
    uint64_t v2 = *(void *)(v1 + 136);
    unint64_t v3 = *(void *)(v1 + 144);
  }

  else
  {
    if ((*(_BYTE *)(v1 + 16) & 1) == 0) {
      return 0LL;
    }
    outlined init with take of LocalePreferences?( v1,  (uint64_t)v16,  &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?( (uint64_t)v16,  (uint64_t)&v17,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v17 || (*(_BYTE *)(v17 + 216) & 1) != 0) {
      return 0LL;
    }
    uint64_t v11 = String.subscript.getter();
    uint64_t v2 = MEMORY[0x186E1B610](v11);
    unint64_t v3 = v12;
    a1 = swift_bridgeObjectRelease();
  }

  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    Swift::Int v14 = v2;
    unint64_t v15 = v3;
    MEMORY[0x1895F8858](a1);
    v13[2] = &v14;
    void v13[3] = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v5 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v13,  v2,  v3);
    if (v6 == 1)
    {
      Swift::Int v7 = v14;
      unint64_t v8 = v15;
      swift_bridgeObjectRetain();
      Swift::Int v9 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v7, v8, MEMORY[0x18961AFF8]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }

    else
    {
      Swift::Int v9 = v5;
      swift_bridgeObjectRelease_n();
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v9;
}

unint64_t URLComponents._URLComponents.percentEncodedHost.getter()
{
  unint64_t v1 = v0;
  uint64_t v2 = URLComponents._URLComponents.encodedHost.getter();
  if (!v3) {
    goto LABEL_66;
  }
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2;
  unint64_t v5 = v3;
  uint64_t v6 = HIBYTE(v3) & 0xF;
  uint64_t v7 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v8 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    goto LABEL_12;
  }
  if ((*(_BYTE *)(v1 + 152) & 1) != 0) {
    return (unint64_t)v4;
  }
  if ((v3 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    if ((v3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v2;
      uint64_t v83 = v3 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v95 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v96 = 0LL;
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v82,  v6,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v95,  0,  (unsigned __int8 *)&v82,  v6,  (uint64_t *)&v89);
      unint64_t v10 = v89;
      unint64_t v12 = v90;
      swift_release();
    }

    else
    {
      if ((v2 & 0x1000000000000000LL) != 0)
      {
        Swift::Int v9 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        Swift::Int v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        uint64_t v7 = v75;
      }

      uint64_t v82 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v83 = 0LL;
      swift_bridgeObjectRetain_n();
      unint64_t v10 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v9,  v7,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v82,  0,  v9,  v7);
      unint64_t v12 = v11;
    }

    swift_bridgeObjectRelease();
    if (v12 != 1)
    {
      swift_bridgeObjectRelease_n();
      if (v12) {
        goto LABEL_27;
      }
LABEL_66:
      outlined init with take of LocalePreferences?( v1 + 88,  (uint64_t)v92,  &demangling cache variable for type metadata for Int?);
      outlined init with take of LocalePreferences?( (uint64_t)v92,  (uint64_t)v93,  &demangling cache variable for type metadata for Int?);
      if (v93[8] != 1) {
        return 0LL;
      }
      if ((*(_BYTE *)(v1 + 13) & 1) != 0)
      {
        outlined init with take of LocalePreferences?( v1,  (uint64_t)v91,  &demangling cache variable for type metadata for URLParseInfo?);
        outlined init with take of LocalePreferences?( (uint64_t)v91,  (uint64_t)&v94,  &demangling cache variable for type metadata for URLParseInfo?);
        if (v94)
        {
          if ((*(_BYTE *)(v94 + 144) & 1) == 0)
          {
            unint64_t v53 = String.subscript.getter();
            uint64_t v57 = v56;
            if ((v53 ^ v54) >> 14)
            {
              uint64_t v58 = v53;
              uint64_t v59 = v54;
              uint64_t v60 = v55;
              _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v53,  v54,  v55,  v56,  10LL);
              if ((v61 & 0x100) != 0) {
                specialized _parseInteger<A, B>(ascii:radix:)(v58, v59, v60, v57, 10LL);
              }
              char v62 = v61;
              swift_bridgeObjectRelease();
              if ((v62 & 1) == 0) {
                return 0LL;
              }
            }

            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }

      outlined init with take of LocalePreferences?( v1 + 40,  (uint64_t)&v89,  &demangling cache variable for type metadata for String?);
      outlined init with take of LocalePreferences?( (uint64_t)&v89,  (uint64_t)&v95,  &demangling cache variable for type metadata for String?);
      if (v96) {
        return 0LL;
      }
      if ((*(_BYTE *)(v1 + 10) & 1) == 0
        || (outlined init with take of LocalePreferences?( v1,  (uint64_t)v88,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v88,  (uint64_t)&v97,  &demangling cache variable for type metadata for URLParseInfo?),  !v97)
        || (*(_BYTE *)(v97 + 72) & 1) != 0)
      {
        outlined init with take of LocalePreferences?( v1 + 56,  (uint64_t)v87,  &demangling cache variable for type metadata for String?);
        outlined init with take of LocalePreferences?( (uint64_t)v87,  (uint64_t)&v82,  &demangling cache variable for type metadata for String?);
        if (v83) {
          return 0LL;
        }
        if ((*(_BYTE *)(v1 + 11) & 1) == 0) {
          return 0LL;
        }
        outlined init with take of LocalePreferences?( v1,  (uint64_t)v86,  &demangling cache variable for type metadata for URLParseInfo?);
        outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)&v98,  &demangling cache variable for type metadata for URLParseInfo?);
        if (!v98 || (*(_BYTE *)(v98 + 96) & 1) != 0) {
          return 0LL;
        }
      }

      uint64_t v74 = String.subscript.getter();
      MEMORY[0x186E1B610](v74);
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v4;
  uint64_t v83 = v5;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v13, sel__fastCharacterContents);
  id v15 = v13;
  if (!v14)
  {
    uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v4;
    uint64_t v83 = v5;
    swift_bridgeObjectRetain();
    uint64_t v22 = String.init<A>(_:)();
    unint64_t v24 = v23;
    if ((v23 & 0x1000000000000000LL) != 0) {
      goto LABEL_99;
    }
    goto LABEL_21;
  }

  uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v4;
  uint64_t v83 = v5;
  StringProtocol._ephemeralString.getter();
  char v16 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v16, sel_length);
  uint64_t v18 = swift_unknownObjectRelease();
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  LOBYTE(v80) = 0;
  MEMORY[0x1895F8858](v19);
  v78[2] = v14;
  v78[3] = v17;
  unint64_t v10 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v14,  (uint64_t)v17,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v20,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v78);
  unint64_t v12 = v21;
  swift_bridgeObjectRelease_n();
  if (!v12) {
    goto LABEL_66;
  }
  while (1)
  {
LABEL_27:
    if ((v12 & 0x2000000000000000LL) != 0)
    {
      if ((v12 & 0xF00000000000000LL) == 0) {
        goto LABEL_12;
      }
    }

    else if ((v10 & 0xFFFFFFFFFFFFLL) == 0)
    {
      goto LABEL_12;
    }

    Swift::Int v28 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v10, v12);
    if ((v28 & 1) == 0)
    {
      uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v10;
      uint64_t v83 = v12;
      MEMORY[0x1895F8858](v28);
      unint64_t v80 = &v82;
      char v81 = 4;
      swift_bridgeObjectRetain();
      unint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v79,  v10,  v12);
      if (v36)
      {
        uint64_t v4 = v35;
        swift_bridgeObjectRelease_n();
      }

      else
      {
        id v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
        unint64_t v38 = v83;
        swift_bridgeObjectRetain();
        uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( (unint64_t)v37,  v38,  4u);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }

      return (unint64_t)v4;
    }

    unint64_t result = specialized Collection.first.getter(v10, v12);
    if ((result & 0x100) != 0) {
      goto LABEL_105;
    }
    if (result != 91)
    {
      __break(1u);
LABEL_93:
      unint64_t result = String.UTF8View._foreignCount()();
      if (__OFSUB__(result, 1LL)) {
        goto LABEL_106;
      }
      uint64_t v31 = (v10 >> 59) & 1;
      unint64_t result = MEMORY[0x186E1B838](15LL, result - 1, v10, v12);
LABEL_37:
      if ((result & 0xC) != 4LL << v31) {
        goto LABEL_38;
      }
      goto LABEL_96;
    }

    unint64_t v5 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x1000000000000000LL) != 0) {
      goto LABEL_93;
    }
    uint64_t v30 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0x2000000000000000LL) != 0) {
      uint64_t v30 = HIBYTE(v12) & 0xF;
    }
    if (v30)
    {
      unint64_t result = (v30 << 16) - 65532;
      LOBYTE(v31) = 1;
      goto LABEL_37;
    }

    __break(1u);
LABEL_96:
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, v10, v12);
LABEL_38:
    if ((v12 & 0x2000000000000000LL) != 0) {
      unint64_t v32 = v5;
    }
    else {
      unint64_t v32 = v10 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v5 = result >> 16;
    if (result >> 16 >= v32)
    {
      __break(1u);
      goto LABEL_98;
    }

    if ((v12 & 0x1000000000000000LL) != 0)
    {
      char v34 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((v12 & 0x2000000000000000LL) != 0)
    {
      uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v10;
      uint64_t v83 = v12 & 0xFFFFFFFFFFFFFFLL;
      char v34 = *((_BYTE *)&v82 + v5);
    }

    else
    {
      uint64_t v33 = (v10 & 0x1000000000000000LL) != 0 ? (v12 & 0xFFFFFFFFFFFFFFFLL) + 32 : _StringObject.sharedUTF8.getter();
      char v34 = *(_BYTE *)(v33 + v5);
    }

    if (v34 == 93) {
      break;
    }
LABEL_98:
    __break(1u);
LABEL_99:
    uint64_t v22 = static String._copying(_:)();
    unint64_t v77 = v76;
    swift_bridgeObjectRelease();
    unint64_t v24 = v77;
LABEL_21:
    unint64_t v12 = (unint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    if ((v24 & 0x2000000000000000LL) != 0)
    {
      uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
      uint64_t v83 = v24 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v95 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v96 = 0LL;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v82,  HIBYTE(v24) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v95,  0,  (unsigned __int8 *)&v82,  HIBYTE(v24) & 0xF,  (uint64_t *)&v89);
      unint64_t v10 = v89;
      unint64_t v12 = v90;
      swift_release();
      goto LABEL_26;
    }

    if ((v22 & 0x1000000000000000LL) == 0) {
      goto LABEL_102;
    }
    Swift::String v25 = (unsigned __int8 *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v26 = v22 & 0xFFFFFFFFFFFFLL;
LABEL_24:
    uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v12;
    uint64_t v83 = 0LL;
    unint64_t v10 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v25,  v26,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v82,  0,  v25,  v26);
    unint64_t v12 = v27;
LABEL_26:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_66;
    }
  }

  unint64_t v39 = specialized Collection<>.firstIndex(of:)(0x25u, v10, v12);
  if ((v40 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v10, v12) & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_66;
    }

    uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v10;
    uint64_t v83 = v12;
    uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.init<A>(_:)();
    goto LABEL_88;
  }

  unint64_t v5 = v39;
  if ((v12 & 0x1000000000000000LL) == 0)
  {
    unint64_t v1 = (v32 << 16) - 65532;
LABEL_62:
    if (v1 >> 14 >= v5 >> 14)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
      unint64_t v43 = v42;
      uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v41;
      uint64_t v83 = v44;
      unint64_t v84 = v45;
      unint64_t v85 = v42;
      MEMORY[0x1895F8858](v41);
      unint64_t v80 = &v82;
      char v81 = 8;
      unint64_t v49 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v79,  v47,  v48,  v46,  v43);
      if (v50)
      {
        uint64_t v51 = (uint64_t)v49;
        uint64_t v52 = v50;
      }

      else
      {
        unint64_t v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
        unint64_t v64 = v83;
        unint64_t v65 = v84;
        unint64_t v66 = v85;
        swift_bridgeObjectRetain();
        uint64_t v51 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( (unint64_t)v63,  v64,  v65,  v66,  8u);
        uint64_t v52 = v67;
        swift_bridgeObjectRelease();
      }

      uint64_t v68 = String.subscript.getter();
      id v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x186E1B610](v68);
      uint64_t v71 = v70;
      swift_bridgeObjectRelease();
      uint64_t v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v69;
      uint64_t v83 = v71;
      v72._unint64_t countAndFlagsBits = v51;
      v72._unint64_t object = v52;
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      v73._unint64_t countAndFlagsBits = 93LL;
      v73._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v73);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
LABEL_88:
      swift_bridgeObjectRelease();
      return (unint64_t)v4;
    }

    __break(1u);
LABEL_102:
    Swift::String v25 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    goto LABEL_24;
  }

  unint64_t result = String.UTF8View._foreignCount()();
  if (!__OFSUB__(result, 1LL))
  {
    unint64_t v1 = MEMORY[0x186E1B838](15LL, result - 1, v10, v12);
    goto LABEL_62;
  }

  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URLComponents._URLComponents.setPercentEncodedHost(_:)( Swift::String_optional a1)
{
  uint64_t v2 = v1;
  unint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  *(_BYTE *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  *(_WORD *)(v1 + 152) = 0;
  if (!a1.value._object)
  {
    swift_bridgeObjectRelease();
    *(void *)(v1 + 72) = countAndFlagsBits;
    *(void *)(v1 + 80) = 0LL;
    return;
  }

  unint64_t object = (unint64_t)a1.value._object;
  unint64_t v5 = specialized Collection.first.getter(a1.value._countAndFlagsBits, (unint64_t)a1.value._object);
  if ((v5 & 0x1FF) != 0x5B) {
    goto LABEL_23;
  }
  if ((object & 0x1000000000000000LL) != 0)
  {
    Swift::Int v39 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v39, 1LL))
    {
      __break(1u);
      return;
    }

    uint64_t v7 = (countAndFlagsBits >> 59) & 1;
    unint64_t v5 = MEMORY[0x186E1B838](15LL, v39 - 1, countAndFlagsBits, object);
  }

  else
  {
    uint64_t v6 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000LL) == 0) {
      uint64_t v6 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v6)
    {
      __break(1u);
      goto LABEL_62;
    }

    unint64_t v5 = (v6 << 16) - 65532;
    LOBYTE(v7) = 1;
  }

  if ((v5 & 0xC) == 4LL << v7) {
LABEL_62:
  }
    unint64_t v5 = _StringGuts._slowEnsureMatchingEncoding(_:)(v5, countAndFlagsBits, object);
  unint64_t v8 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000LL) == 0) {
    unint64_t v8 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v9 = v5 >> 16;
  if (v5 >> 16 >= v8)
  {
    __break(1u);
    goto LABEL_64;
  }

  if ((object & 0x1000000000000000LL) != 0)
  {
    char v11 = String.UTF8View._foreignSubscript(position:)();
  }

  else if ((object & 0x2000000000000000LL) != 0)
  {
    Swift::Int v44 = countAndFlagsBits;
    uint64_t v45 = object & 0xFFFFFFFFFFFFFFLL;
    char v11 = *((_BYTE *)&v44 + v9);
  }

  else
  {
    if ((countAndFlagsBits & 0x1000000000000000LL) != 0) {
      uint64_t v10 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v10 = _StringObject.sharedUTF8.getter();
    }
    char v11 = *(_BYTE *)(v10 + v9);
  }

  if (v11 == 93)
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(countAndFlagsBits, object);
    if ((v12 & 1) == 0)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
      swift_allocError();
      *uint64_t v13 = 3;
      swift_willThrow();
      return;
    }

    goto LABEL_29;
  }

uint64_t URLComponents._URLComponents.computedString.getter()
{
  if ((*(_BYTE *)(v0 + 153) & 1) != 0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = v2;
LABEL_4:
    v81._uint64_t countAndFlagsBits = v3;
    v81._unint64_t object = v4;
    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = 58LL;
    v5._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v5);
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  if ((*(_BYTE *)(v0 + 9) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( v0,  (uint64_t)v73,  &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)&v74,  &demangling cache variable for type metadata for URLParseInfo?);
    if (v74)
    {
      if ((*(_BYTE *)(v74 + 48) & 1) == 0)
      {
        uint64_t v13 = String.subscript.getter();
        uint64_t v3 = MEMORY[0x186E1B610](v13);
        uint64_t v4 = v14;
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
  }

LABEL_113:
          uint64_t v25 = _StringObject.sharedUTF8.getter();
          goto LABEL_53;
        }

        v81._uint64_t countAndFlagsBits = v10;
        v81._unint64_t object = (void *)(v9 & 0xFFFFFFFFFFFFFFLL);
        char v26 = *((_BYTE *)&v81._countAndFlagsBits + v20);
      }

            __break(1u);
LABEL_114:
            __break(1u);
            goto LABEL_115;
          }

  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  Swift::String v58 = swift_allocError();
  *uint64_t v94 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  uint64_t v79 = 0LL;
LABEL_114:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSDecimal.asVariableLengthInteger()(v212, v209, v206);
  uint64_t v96 = *(void *)(v95 + 16);
  swift_bridgeObjectRelease();
  uint64_t v97 = floor((double)(8 - v96) * 4.81647993);
  if ((~*(void *)&v97 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_341;
  }
  uint64_t v48 = (uint64_t)&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
  uint64_t v98 = (uint64_t)v216;
  if (v97 <= -9.22337204e18)
  {
LABEL_342:
    __break(1u);
    goto LABEL_343;
  }

  if (v97 >= 9.22337204e18)
  {
LABEL_343:
    __break(1u);
    goto LABEL_344;
  }

  Swift::String v59 = (uint64_t)v97;
  NSDecimal.asVariableLengthInteger()(*v216, v216[1], *((_DWORD *)v216 + 4));
  uint64_t v60 = __OFSUB__(v59, v33);
  uint64_t v100 = v59 - v33;
  if (v60)
  {
LABEL_344:
    __break(1u);
    goto LABEL_345;
  }

  uint64_t v101 = v99;
  if (!v100)
  {
    Swift::String v53 = v99;
    goto LABEL_177;
  }

  Swift::String v53 = specialized abs<A>(_:)(v100);
  unint64_t v102 = powerOfTen._rawValue;
  unint64_t v103 = *((void *)powerOfTen._rawValue + 2);
  unint64_t v204 = v36;
  if (v103 > v53)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = v101;
    if (v53 < 0) {
      goto LABEL_276;
    }
    goto LABEL_121;
  }

  if (!v103) {
    goto LABEL_358;
  }
  char v106 = v103 - 1;
  swift_bridgeObjectRetain();
  uint64_t v36 = v101;
  uint64_t v207 = v100;
  uint64_t v212 = v101;
LABEL_136:
  uint64_t v107 = *(void *)(v48 + 3056);
  char v108 = *(void *)(v107 + 8 * v106 + 32);
  if (v100 < 0)
  {
    Swift::String v58 = v59;
    __int128 v123 = v48;
    __int128 v124 = v106;
    swift_bridgeObjectRetain();
    id v125 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v36, v108, 8LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = v125;
    char v106 = v124;
    uint64_t v48 = v123;
    Swift::String v59 = v58;
    goto LABEL_135;
  }

  unint64_t v209 = v79;
  uint64_t v109 = *(void *)(v36 + 16);
  if (!v109 || (Swift::String v54 = *(char **)(v108 + 16)) == 0LL)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = MEMORY[0x18961AFE8];
    goto LABEL_134;
  }

  uint64_t v203 = v59;
  if (__OFADD__(v109, v54)) {
    goto LABEL_359;
  }
  unint64_t v202 = v106;
  else {
    Swift::String v59 = (uint64_t)&v54[v109];
  }
  if (v59 < 0) {
    goto LABEL_391;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v48 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v59;
  uint64_t v110 = v48 + 32;
  bzero((void *)(v48 + 32), 2 * v59);
  Swift::String v111 = 0LL;
  Swift::String v112 = v108 + 32;
LABEL_146:
  char v113 = 0;
  char v114 = 0LL;
  id v115 = v111++;
  while (1)
  {
    char v118 = (uint64_t)&v115[v114];
    if (__OFADD__(v114, v115)) {
      break;
    }
    if (v118 >= v59)
    {
      if (v113) {
        goto LABEL_172;
      }
      char v113 = *(unsigned __int16 *)(v112 + 2LL * (void)v115);
      if (*(_WORD *)(v112 + 2LL * (void)v115))
      {
        char v113 = *(unsigned __int16 *)(v36 + 2 * v114 + 32);
        if (*(_WORD *)(v36 + 2 * v114 + 32)) {
          goto LABEL_172;
        }
      }
    }

    else
    {
      if (v118 < 0) {
        goto LABEL_329;
      }
      unint64_t v116 = 2 * v118;
      id v117 = v113
      char v113 = HIWORD(v117);
      *(_WORD *)(v110 + v1__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v117;
    }

    if (v109 == ++v114)
    {
      if (!v113) {
        goto LABEL_164;
      }
      uint64_t v60 = __OFADD__(v109, v115);
      char v119 = (uint64_t)&v115[v109];
      if (v60) {
        goto LABEL_367;
      }
      if (v119 >= v59)
      {
LABEL_172:
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        char v126 = swift_allocError();
        *uint64_t v127 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v128 = (void *)v126;
        goto LABEL_179;
      }

      if (v119 < 0) {
        goto LABEL_370;
      }
      *(_WORD *)(v110 + 2 * v119) = v113;
LABEL_164:
      if (v111 == v54)
      {
        uint64_t v120 = *(void *)(v48 + 16);
        if (v120 && !*(_WORD *)(v110 + 2 * v120 - 2))
        {
          __int128 v121 = v120 + 14;
          do
          {
            *(void *)(v48 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v121 - 15;
            if (v121 == 15) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v48 + 2 * v121--));
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = v48;
        uint64_t v48 = 0x18C5C8000LL;
        char v106 = v202;
        Swift::String v59 = v203;
LABEL_134:
        uint64_t v100 = v207;
        uint64_t v79 = v209;
LABEL_135:
        v53 -= v106;
        if (v103 <= v53) {
          goto LABEL_136;
        }
        unint64_t v102 = *(void **)(v48 + 3056);
        if (v53 < 0)
        {
LABEL_276:
          __break(1u);
          goto LABEL_277;
        }

          id v14 = *((void *)v11._rawValue + 2);
          if (!v14 || (v74 = (uint64_t *)rawValue[v6 + 4], (unint64_t v6 = v74[2]) == 0))
          {
            LOWORD(v139) = v19;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Swift::String v32 = MEMORY[0x18961AFE8];
            unint64_t v6 = (uint64_t)v124;
            unint64_t v75 = v126;
            LOWORD(v22) = a3;
            unint64_t v76 = v122;
            uint64_t v77 = v120;
            goto LABEL_122;
          }

          uint64_t v20 = v14 + v6;
          if (!__OFADD__(v14, v6))
          {
            if (v20 > 15)
            {
              uint64_t v22 = (void *)v19;
              uint64_t v20 = 16LL;
              goto LABEL_126;
            }

            if ((v20 & 0x8000000000000000LL) == 0)
            {
              uint64_t v22 = (void *)v19;
              if (!v20)
              {
                unint64_t v19 = (int64_t)v74;
                swift_bridgeObjectRetain();
                Swift::String v32 = MEMORY[0x18961AFE8];
                goto LABEL_127;
              }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
    goto LABEL_115;
  }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
    goto LABEL_115;
  }

    uint64_t v74 = 512LL;
    goto LABEL_94;
  }

  unint64_t v85 = 0LL;
  char v128 = 512LL;
LABEL_100:
  swift_bridgeObjectRetain();
  unint64_t v86 = v133;
  swift_bridgeObjectRetain();
  unint64_t v87 = v18;
  unint64_t v88 = v132;
  unint64_t v89 = v85;
  unint64_t v90 = v131;
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v128,  v27,  v28,  v89,  2037411651LL,  0xE400000000000000LL,  v131,  v87,  (void *(*)(void *__return_ptr, void *, uint64_t))&v135,  v132,  v86);
  unint64_t v91 = v135;
  unint64_t v92 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v91,  v90,  v87,  v88,  v86,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

  if ((v92 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_102:
    close(v15);
    return close(v10);
  }

  else
  {
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    close(v15);
    return close(v10);
  }

    uint64_t v74 = 512LL;
    goto LABEL_94;
  }

  unint64_t v85 = 0LL;
  char v128 = 512LL;
LABEL_100:
  swift_bridgeObjectRetain();
  unint64_t v86 = v133;
  swift_bridgeObjectRetain();
  unint64_t v87 = v18;
  unint64_t v88 = v132;
  unint64_t v89 = v85;
  unint64_t v90 = v131;
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v128,  v27,  v28,  v89,  1802398028LL,  0xE400000000000000LL,  v131,  v87,  (void *(*)(void *__return_ptr, void *, uint64_t))&v135,  v132,  v86);
  unint64_t v91 = v135;
  unint64_t v92 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v91,  v90,  v87,  v88,  v86,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

  if ((v92 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_102:
    close(v15);
    return close(v10);
  }

  else
  {
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    close(v15);
    return close(v10);
  }

    unint64_t v88 = v75 + *(unsigned __int16 *)(v39 + 46) - *(unsigned __int16 *)(v21 + 46);
    uint64_t v74 = v88 + 0xFFFF;
    *((_WORD *)v61._rawValue + 23) = v88 - 1;
    if (v68 != 7)
    {
LABEL_159:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
LABEL_160:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_161;
    }

    LODWORD(v75) = HIWORD(v74);
    unint64_t v76 = 8LL;
LABEL_115:
    if (v76 >= v62) {
      goto LABEL_127;
    }
    if (!HIWORD(v74))
    {
      while (v76 < *((void *)v61._rawValue + 2))
      {
        unint64_t v89 = *(unsigned __int16 *)(v73 + 2 * v76);
        Swift::String v59 = v89 + 0xFFFF;
        v60[v76] = v89 - 1;
        if (v62 - 1 == v76) {
          goto LABEL_134;
        }
        ++v76;
        if (v89) {
          goto LABEL_120;
        }
      }

      goto LABEL_151;
    }

    goto LABEL_120;
  }

  if (!v62)
  {
    if (v63)
    {
      unint64_t v76 = 0LL;
      LODWORD(v75) = 1;
      goto LABEL_128;
    }

    Swift::String v81 = 8LL;
LABEL_137:
    if (!v60[v81 - 1])
    {
      do
      {
        *((void *)v61._rawValue + 2) = v81 - 1;
        if (v81 == 1) {
          break;
        }
      }

      while (!*((unsigned __int16 *)v61._rawValue + v81-- + 14));
    }

      swift_bridgeObjectRelease();
      *(void *)(v96 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v96 = MEMORY[0x18961AFE8];
  }

  else
  {
    unint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
    uint64_t v3 = v98;
    uint64_t v96 = v7;
    __dst = (double *)(v7 + 32);
  }

  unint64_t v9 = 0LL;
  unint64_t v10 = *v2;
  uint64_t v94 = v2;
  unint64_t v95 = *v2 - 8LL;
  uint64_t v11 = (char *)MEMORY[0x18961AFE8];
  unint64_t v99 = *v2;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 < v3)
    {
      id v14 = *(double *)(v10 + 8 * v9);
      unint64_t v15 = *(double *)(v10 + 8 * v13);
      unint64_t v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        __int16 v16 = v14;
        while (1)
        {
          Swift::String v17 = v16;
          __int16 v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17) {
            break;
          }
          if (v3 == ++v9)
          {
            unint64_t v9 = v3;
            break;
          }
        }
      }

      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_137;
        }
        if (v13 < v9)
        {
          unint64_t v18 = (uint64_t *)(v95 + 8 * v9);
          unint64_t v19 = v9;
          uint64_t v20 = v13;
          unint64_t v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_143;
              }
              uint64_t v22 = *v21;
              *unint64_t v21 = *v18;
              *unint64_t v18 = v22;
            }

            ++v20;
            --v18;
            ++v21;
          }

          while (v20 < v19);
        }
      }
    }

    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_135;
    }
    if (v9 - v13 >= v97) {
      goto LABEL_46;
    }
    unint64_t v23 = v13 + v97;
    if (__OFADD__(v13, v97)) {
      goto LABEL_138;
    }
    if (v23 >= v3) {
      unint64_t v23 = v3;
    }
    if (v23 < v13) {
      break;
    }
    if (v9 != v23)
    {
      __int16 v24 = (double *)(v95 + 8 * v9);
      do
      {
        uint64_t v25 = *(double *)(v10 + 8 * v9);
        char v26 = v13;
        uint64_t v27 = v24;
        do
        {
          uint64_t v28 = *v27;
          if (v25 >= *v27) {
            break;
          }
          if (!v10) {
            goto LABEL_141;
          }
          *uint64_t v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }

        while (v9 != v26);
        ++v9;
        ++v24;
      }

      while (v9 != v23);
      unint64_t v9 = v23;
    }

    uint64_t v110 = v94 + *(unsigned __int16 *)(v48 + 46) - *(unsigned __int16 *)(v75 + 46);
    Swift::Int v93 = v110 + 0xFFFF;
    *((_WORD *)v46._rawValue + 23) = v110 - 1;
    if (v87 != 7)
    {
LABEL_162:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_163;
    }

    LODWORD(v94) = HIWORD(v93);
    uint64_t v98 = 8LL;
    goto LABEL_115;
  }

  unint64_t v95 = v123;
  uint64_t v96 = v127;
  uint64_t v97 = v121;
  if (!v79)
  {
    uint64_t v20 = v124;
    if (v80)
    {
      uint64_t v98 = 0LL;
      LODWORD(v94) = 1;
      unint64_t v99 = v145;
      goto LABEL_129;
    }

    unint64_t v104 = 8LL;
    unint64_t v99 = v145;
LABEL_138:
    if (!v78[v104 - 1])
    {
      do
      {
        *((void *)v46._rawValue + 2) = v104 - 1;
        if (v104 == 1) {
          break;
        }
      }

      while (!*((unsigned __int16 *)v46._rawValue + v104-- + 14));
    }

    uint64_t v110 = v94 + *(unsigned __int16 *)(v48 + 46) - *(unsigned __int16 *)(v75 + 46);
    Swift::Int v93 = v110 + 0xFFFF;
    *((_WORD *)v46._rawValue + 23) = v110 - 1;
    if (v87 != 7)
    {
LABEL_162:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_163;
    }

    LODWORD(v94) = HIWORD(v93);
    uint64_t v98 = 8LL;
    goto LABEL_115;
  }

  unint64_t v95 = v123;
  uint64_t v96 = v127;
  uint64_t v97 = v121;
  if (!v79)
  {
    uint64_t v20 = v124;
    if (v80)
    {
      uint64_t v98 = 0LL;
      LODWORD(v94) = 1;
      unint64_t v99 = v145;
      goto LABEL_129;
    }

    unint64_t v104 = 8LL;
    unint64_t v99 = v145;
LABEL_138:
    if (!v78[v104 - 1])
    {
      do
      {
        *((void *)v46._rawValue + 2) = v104 - 1;
        if (v104 == 1) {
          break;
        }
      }

      while (!*((unsigned __int16 *)v46._rawValue + v104-- + 14));
    }

        __break(1u);
      }
    }

    __break(1u);
    goto LABEL_113;
  }

                              swift_bridgeObjectRelease();
                              unint64_t v63 = a1;
                              if ((v8 & 1) == 0)
                              {
LABEL_114:
                                specialized _NativeDictionary._insert(at:key:value:)( v11,  a2,  (uint64_t)a3,  v63,  1,  (void *)v60);
                                swift_bridgeObjectRetain();
                                goto LABEL_115;
                              }

  __break(1u);
LABEL_114:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

                if (v80)
                {
                  unint64_t v91 = v80 - 1;
                  uint64_t v52 = v170[3 * (int)v80 - 3];
                  if (!*(_WORD *)(v52 + 16)) {
                    goto LABEL_226;
                  }
                  unint64_t v92 = *(unsigned __int16 *)(v52 + 16) - 1LL;
                  Swift::Int v93 = *(unsigned __int8 *)(v52 + 18);
                  uint64_t v193 = ((-15LL << ((4 * v93 + 8) & 0x3C)) - 1) & (v193 & ((-15LL << v167) - 1) | (v91 << v167)) | (v92 << ((4 * v93 + 8) & 0x3C));
                  unint64_t v18 = v159;
                  if (v93)
                  {
                    swift_unknownObjectRetain();
                    uint64_t v94 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v52 + 24, v92, v142);
                    swift_unknownObjectRelease();
                    uint64_t v52 = v94;
                  }

                  unint64_t v66 = v172;
                  uint64_t v194 = v52;
                  swift_unknownObjectRelease();
                  goto LABEL_131;
                }

                uint64_t result = swift_unknownObjectRelease();
LABEL_120:
                uint64_t v77 = v171;
                if (v76)
                {
LABEL_105:
                  uint64_t v52 = *(void *)(v77 + 24LL * ((int)v76 - 1));
                  if (!*(_WORD *)(v52 + 16)) {
                    goto LABEL_225;
                  }
                  unint64_t v88 = *(unsigned __int16 *)(v52 + 16) - 1LL;
                  unint64_t v89 = *(unsigned __int8 *)(v52 + 18);
                  uint64_t v193 = ((-15LL << ((4 * v89 + 8) & 0x3C)) - 1) & (v193 & ((-15LL << v74) - 1) | ((v76 - 1) << v74)) | (v88 << ((4 * v89 + 8) & 0x3C));
                  if (v89)
                  {
                    swift_unknownObjectRetain();
                    unint64_t v90 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v52 + 24, v88, v142);
                    swift_unknownObjectRelease();
                    uint64_t v52 = v90;
                  }

                  unint64_t v18 = v159;
                  unint64_t v66 = v172;
                  uint64_t v194 = v52;
                  goto LABEL_131;
                }

                      unint64_t v63 = (v72 - 1) & v72;
                      uint64_t v71 = __clz(__rbit64(v72)) + (v62 << 6);
                    }

                    uint64_t v74 = *(void *)(v3 + 56);
                    unint64_t v75 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v71);
                    uint64_t v77 = *v75;
                    unint64_t v76 = v75[1];
                    outlined init with copy of AttributedString._AttributeValue(v74 + 72 * v71, (uint64_t)&v98);
                    unint64_t v95 = v100;
                    uint64_t v96 = v101;
                    uint64_t v97 = v102;
                    Swift::Int v93 = v98;
                    uint64_t v94 = v99;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    uint64_t v78 = Hasher._finalize()();
                    uint64_t v79 = -1LL << *(_BYTE *)(v61 + 32);
                    uint64_t v80 = v78 & ~v79;
                    Swift::String v81 = v80 >> 6;
                    if (((-1LL << v80) & ~*(void *)(v64 + 8 * (v80 >> 6))) != 0)
                    {
                      unint64_t v65 = __clz(__rbit64((-1LL << v80) & ~*(void *)(v64 + 8 * (v80 >> 6)))) | v80 & 0x7FFFFFFFFFFFFFC0LL;
                    }

                    else
                    {
                      uint64_t v82 = 0;
                      uint64_t v83 = (unint64_t)(63 - v79) >> 6;
                      do
                      {
                        if (++v81 == v83 && (v82 & 1) != 0) {
                          goto LABEL_131;
                        }
                        uint64_t v84 = v81 == v83;
                        if (v81 == v83) {
                          Swift::String v81 = 0LL;
                        }
                        v82 |= v84;
                        unint64_t v85 = *(void *)(v64 + 8 * v81);
                      }

                      while (v85 == -1);
                      unint64_t v65 = __clz(__rbit64(~v85)) + (v81 << 6);
                    }

                    *(void *)(v64 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v65;
                    unint64_t v66 = (void *)(*(void *)(v61 + 48) + 16 * v65);
                    *unint64_t v66 = v77;
                    v66[1] = v76;
                    unint64_t v67 = *(void *)(v61 + 56) + 72 * v65;
                    uint64_t v68 = v96;
                    *(_OWORD *)(v67 + 32) = v95;
                    *(_OWORD *)(v67 + 48) = v68;
                    *(void *)(v67 + 64) = v97;
                    id v69 = v94;
                    *(_OWORD *)unint64_t v67 = v93;
                    *(_OWORD *)(v67 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v69;
                    ++*(void *)(v61 + 16);
                    uint64_t v44 = v90-- == 1;
                    uint64_t v3 = v92;
                    if (v44) {
                      goto LABEL_127;
                    }
                  }
                }
              }
            }

            unint64_t v21 = v30;
          }

      unint64_t v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v66 & 1) == 0)
      {
LABEL_118:
        uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v62,  2LL,  &v69,  48);
        a8 = v59;
LABEL_100:
        if (v71 < v70)
        {
          *(_BYTE *)(v69 + v71) = 0;
          uint64_t result = MEMORY[0x186E1B634]();
          if (v58)
          {
            *a8 = result;
            a8[1] = v58;
            return result;
          }

          goto LABEL_142;
        }

        __break(1u);
        goto LABEL_120;
      }

    __break(1u);
    goto LABEL_114;
  }

  if (__OFSUB__(a2, 2LL)) {
    goto LABEL_108;
  }
  if (a2 - 2 >= 1)
  {
    uint64_t v12 = a3[2];
    uint64_t v13 = *a3;
    if (v12 <= a3[1]) {
      id v14 = a3[1];
    }
    else {
      id v14 = a3[2];
    }
    unint64_t v15 = v14 - v12;
    __int16 v16 = v15 + 1;
    if (v16 >= 0x21)
    {
      unint64_t v42 = v16 & 0x1F;
      if ((v16 & 0x1F) == 0) {
        unint64_t v42 = 32LL;
      }
      Swift::String v17 = v16 - v42;
      unint64_t v18 = v12 + v17;
      uint64_t v43 = vdupq_n_s8(a4);
      uint64_t v44 = (int8x16_t *)(v12 + v13 + 16);
      Swift::String v45 = v17;
      do
      {
        v44[-1] = v43;
        *uint64_t v44 = v43;
        v44 += 2;
        v45 -= 32LL;
      }

      while (v45);
    }

    else
    {
      Swift::String v17 = 0LL;
      unint64_t v18 = a3[2];
    }

    uint64_t v46 = v17 + v12 - v14;
    unint64_t v47 = a2 - v17 - 2;
    do
    {
      if (!v46) {
        goto LABEL_101;
      }
      *(_BYTE *)(v13 + v18++) = a4;
      ++v46;
      --v47;
    }

    while (v47);
    a3[2] = v18;
  }

  uint64_t v48 = a4 + (char)(result / 0xA);
  Swift::String v50 = a3[1];
  unint64_t v49 = a3[2];
  if (v49 >= v50)
  {
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }

  uint64_t v51 = *a3;
  *(_BYTE *)(*a3 + v49) = v48;
  uint64_t v52 = v49 + 1;
  a3[2] = v49 + 1;
  Swift::String v53 = a4 + result % 0xA;
  if (v53 != (char)v53)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }

  if (v52 >= v50)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }

  *(_BYTE *)(v51 + v52) = v53;
  uint64_t v34 = v49 + 2;
LABEL_99:
  a3[2] = v34;
  return result;
}

      if (v84) {
        goto LABEL_174;
      }
      goto LABEL_119;
    }

    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)&v209);
    Swift::String v81 = swift_unknownObjectRetain();
    uint64_t v62 = v167;
    uint64_t v36 = specialized Rope._endPath.getter(v81);
    uint64_t result = swift_unknownObjectRelease();
    __int16 v61 = 0LL;
    uint64_t v82 = v157;
    if (!v60)
    {
      unint64_t v64 = v59;
      unint64_t v65 = 0LL;
      goto LABEL_121;
    }

LABEL_105:
      outlined retain of String?((uint64_t)v72);
      swift_bridgeObjectRelease();
      if (v26 == 47)
      {
LABEL_28:
        swift_bridgeObjectRelease();
        return 0LL;
      }

  outlined release of URLComponents((uint64_t)&v88);
  uint64_t v12 = v77;
  uint64_t v11 = v78;
LABEL_106:
  unint64_t v67 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  uint64_t v68 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v69 = CFURLCreateWithString(v67, v68, 0LL);
  swift_unknownObjectRelease();
  if (v69)
  {
    URL.init(reference:)(v69, &v77);

    uint64_t v70 = v77;
    uint64_t v71 = v78;
  }

  else
  {
    uint64_t v70 = 0LL;
    uint64_t v71 = 0uLL;
  }

  *a1 = v70;
  *(_OWORD *)(a1 + 1) = v71;
}

          swift_unknownObjectRetain();
          uint64_t v46 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v48, v51, v50, v46, v47, v135);
          uint64_t result = swift_unknownObjectRelease_n();
          goto LABEL_106;
        }

        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t v51 = ((-15LL << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v46 + 18) | ((unint64_t)*(unsigned __int16 *)(v46 + 16) << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C));
      }

      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t v51 = 0LL;
      }

      uint64_t result = swift_unknownObjectRelease();
      Swift::String v50 = 0LL;
      if (!v46) {
        goto LABEL_106;
      }
      goto LABEL_105;
    }

    if (v142 == 2)
    {
      uint64_t v51 = v138;
      if (v46)
      {
        swift_retain();
        swift_unknownObjectRetain();
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v136, v138, v137, v46, v47, v135);
        uint64_t v46 = result;
      }

      else
      {
        uint64_t result = swift_retain();
      }
    }

    else
    {
      uint64_t v46 = v140 >> 11;
      swift_unknownObjectRetain();
      uint64_t result = swift_retain();
      uint64_t v51 = v138;
    }

      uint64_t v82 = 0LL;
      Swift::String v81 = 0LL;
      uint64_t v80 = 0LL;
      uint64_t v83 = 1LL;
      goto LABEL_101;
    }

    uint64_t v107 = v21;
    unint64_t v105 = v15;
    *(void *)Swift::String v112 = *(void *)&v113[0];
    *(_DWORD *)&v112[8] = DWORD2(v113[0]);
    *(_WORD *)&v112[12] = WORD6(v113[0]);
    *(_DWORD *)&v112[14] = *(_DWORD *)((char *)v113 + 14);
    *(_WORD *)&v112[18] = WORD1(v113[1]);
    uint64_t v31 = WORD2(v113[0]);
    if (_So9NSDecimala__exponent_getter(v112) == 127)
    {
      *(_OWORD *)&v112[4] = 0uLL;
      _So9NSDecimala__exponent_setter(0LL, v112);
      _So9NSDecimala__length_setter(0LL, v112);
      _So9NSDecimala__isNegative_setter(1LL, v112);
      _So9NSDecimala__isCompact_setter_0(0LL, v112);
      _So9NSDecimala__reserved_setter(v112);
      Swift::String v32 = *(_DWORD *)v112;
      uint64_t v33 = *(_WORD *)&v112[4];
      uint64_t v34 = *(_WORD *)&v112[6];
      Swift::String v35 = *(_WORD *)&v112[8];
      uint64_t v36 = *(_WORD *)&v112[10];
      uint64_t v37 = *(_WORD *)&v112[12];
      unint64_t v6 = *(_WORD *)&v112[14];
      uint64_t v38 = *(_WORD *)&v112[16];
      char v39 = *(_WORD *)&v112[18];
      v113[0] = *(_OWORD *)v112;
      LODWORD(v113[1]) = *(_DWORD *)&v112[16];
    }

    else
    {
      *(_DWORD *)Swift::String v112 = v24;
      *(_WORD *)&v112[4] = v31;
      *(_WORD *)&v112[6] = v25;
      *(_WORD *)&v112[8] = v26;
      *(_WORD *)&v112[10] = v27;
      *(_WORD *)&v112[12] = v28;
      *(_WORD *)&v112[14] = v29;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v30;
      Swift::String v40 = _So9NSDecimala__exponent_getter(v112);
      _So9NSDecimala__exponent_setter((v40 + 1), v113);
      Swift::String v32 = v113[0];
      uint64_t v33 = WORD2(v113[0]);
      uint64_t v34 = WORD3(v113[0]);
      Swift::String v35 = WORD4(v113[0]);
      uint64_t v36 = WORD5(v113[0]);
      uint64_t v37 = WORD6(v113[0]);
      unint64_t v6 = HIWORD(v113[0]);
      uint64_t v38 = v113[1];
      char v39 = WORD1(v113[1]);
    }

    *(_DWORD *)Swift::String v112 = v32;
    *(_WORD *)&v112[4] = v33;
    *(_WORD *)&v112[6] = v34;
    *(_WORD *)&v112[8] = v35;
    *(_WORD *)&v112[10] = v36;
    *(_WORD *)&v112[12] = v37;
    *(_WORD *)&v112[14] = v6;
    *(_WORD *)&v112[16] = v38;
    *(_WORD *)&v112[18] = v39;
    if (!_So9NSDecimala__length_getter(v112))
    {
      *(_DWORD *)Swift::String v112 = v32;
      *(_WORD *)&v112[4] = v33;
      *(_WORD *)&v112[6] = v34;
      *(_WORD *)&v112[8] = v35;
      *(_WORD *)&v112[10] = v36;
      *(_WORD *)&v112[12] = v37;
      *(_WORD *)&v112[14] = v6;
      *(_WORD *)&v112[16] = v38;
      *(_WORD *)&v112[18] = v39;
    }

    unint64_t v19 = v107;
    uint64_t v11 = v110 + 1;
    ++v18;
    LOBYTE(v15) = 1;
    uint64_t v12 = v106;
  }

  while (v110 + 1 != v106);
  uint64_t v11 = v106;
  uint64_t v22 = v105;
LABEL_33:
  unint64_t v9 = v102;
  if (v11 >= v12
    || (LOBYTE(v6) = v22,
        (specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)v11,  a3,  a4,  v102,  v104) & 1) == 0))
  {
LABEL_58:
    if (v11 < v12)
    {
      if ((*v11 | 0x20) == 0x65)
      {
        Swift::String v72 = v11 + 1;
        unint64_t v15 = v12 - (v11 + 1);
        if (v12 == v11 + 1)
        {
          uint64_t v80 = &v72[-v9];
          Swift::String v81 = LODWORD(v113[1]);
          uint64_t v82 = *((void *)&v113[0] + 1);
          uint64_t v83 = *(void *)&v113[0];
          goto LABEL_101;
        }

        if ((uint64_t)&v72[-v9] < 0 || v15 < 1)
        {
          __break(1u);
        }

        else
        {
          Swift::String v73 = v11[1];
          if (v73 == 43 || v73 == 45) {
            id v14 = v11 + 2;
          }
          else {
            id v14 = v11 + 1;
          }
          if (v12 != v14)
          {
            unint64_t v75 = 0LL;
            unint64_t v76 = v9 + v104 - (void)v14;
            uint64_t v77 = (unint64_t)&v14[-v9];
            while ((v77 & 0x8000000000000000LL) == 0)
            {
              uint64_t v20 = v76-- < 1;
              if (v20) {
                break;
              }
              uint64_t v78 = (unsigned __int128)(v75 * (__int128)10LL) >> 64;
              uint64_t v79 = 10 * v75;
              if (v78 != v79 >> 63) {
                goto LABEL_109;
              }
              unint64_t v75 = v79 + (*v14 - 48);
              if (v75 > 254) {
                goto LABEL_89;
              }
              ++v14;
              ++v77;
              if (v14 == v12)
              {
                id v14 = (unsigned __int8 *)(v9 + v104);
                goto LABEL_84;
              }
            }

            goto LABEL_108;
          }

          unint64_t v75 = 0LL;
          id v14 = v12;
LABEL_84:
          if (v73 == 45) {
            uint64_t v84 = -v75;
          }
          else {
            uint64_t v84 = v75;
          }
          *(_DWORD *)Swift::String v112 = v113[0];
          *(_OWORD *)&v112[4] = *(_OWORD *)((char *)v113 + 4);
          unint64_t v85 = _So9NSDecimala__exponent_getter(v112);
          unint64_t v86 = __OFADD__(v84, v85);
          unint64_t v87 = v84 + v85;
          if (!v86)
          {
            if (v87 != (char)v87)
            {
LABEL_89:
              uint64_t v82 = 0LL;
              Swift::String v81 = 0LL;
              uint64_t v80 = 0LL;
              uint64_t v83 = 1LL;
              LOBYTE(v15) = 1;
              goto LABEL_101;
            }

            _So9NSDecimala__exponent_setter(v87, v113);
            if ((v101 & 1) != 0) {
              goto LABEL_93;
            }
            goto LABEL_81;
          }
        }

        __break(1u);
        return;
      }
    }

    id v14 = v11;
    if ((v101 & 1) != 0) {
      goto LABEL_93;
    }
LABEL_81:
    uint64_t v12 = v14;
    goto LABEL_95;
  }

  if ((a4 & 0x1000000000000000LL) != 0) {
    goto LABEL_111;
  }
  if ((a4 & 0x2000000000000000LL) != 0) {
    unint64_t v55 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v55 = a3 & 0xFFFFFFFFFFFFLL;
  }
  while (1)
  {
    id v14 = v12;
    if (v12 == &v11[v55]) {
      break;
    }
    uint64_t v56 = (uint64_t)&v11[v55 - v9 + 1];
    uint64_t v57 = ~v55 + v104 + v9 - (void)v11;
    v11 += v55;
    while ((uint64_t)&v11[-v9] >= 0 && v12 - v11 >= 1)
    {
      Swift::String v58 = *v11;
      Swift::String v59 = (NSDecimal *)(v58 - 58);
      if ((v6 & 1) != 0)
      {
        if (++v11 == v12)
        {
LABEL_57:
          uint64_t v11 = v12;
          goto LABEL_58;
        }

        while ((v56 & 0x8000000000000000LL) == 0)
        {
          uint64_t v20 = v57-- < 1;
          if (v20) {
            break;
          }
          ++v11;
          ++v56;
          if (v11 == v12) {
            goto LABEL_57;
          }
        }

        break;
      }

      NSDecimal._multiply(byShort:)(v59, 0xAu);
      if (v60 || (NSDecimal._add(_:)((NSDecimal *)(v58 - 48), (v58 - 48)), v60))
      {

        LOBYTE(v6) = 1;
      }

      else
      {
        unint64_t v64 = v61;
        unint64_t v6 = v62;
        Swift::String v111 = v11;
        *(void *)&v113[0] = v61;
        unint64_t v65 = HIDWORD(v61);
        unint64_t v66 = HIWORD(v61);
        unint64_t v67 = HIWORD(v63);
        *((void *)&v113[0] + 1) = v62;
        uint64_t v68 = v62 >> 16;
        id v69 = HIDWORD(v62);
        uint64_t v70 = HIWORD(v62);
        LODWORD(v113[1]) = v63;
        *(void *)Swift::String v112 = v61;
        *(void *)&v112[8] = v62;
        uint64_t v109 = v63;
        *(_DWORD *)&v112[16] = v63;
        *(_DWORD *)Swift::String v112 = v64;
        *(_WORD *)&v112[4] = v65;
        *(_WORD *)&v112[6] = v66;
        *(_WORD *)&v112[8] = v6;
        *(_WORD *)&v112[10] = v68;
        *(_WORD *)&v112[12] = v69;
        *(_WORD *)&v112[14] = v70;
        *(_WORD *)&v112[16] = v109;
        *(_WORD *)&v112[18] = v67;
        uint64_t v71 = _So9NSDecimala__exponent_getter(v112);
        _So9NSDecimala__exponent_setter((v71 - 1), v113);
        LOBYTE(v6) = 0;
        uint64_t v12 = v106;
        uint64_t v11 = v111;
      }

      ++v11;
      ++v56;
      --v57;
      unint64_t v9 = v102;
      if (v11 == v12)
      {
        id v14 = v12;
        goto LABEL_92;
      }
    }

    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    unint64_t v55 = String.UTF8View._foreignCount()();
  }

        if (!v50)
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          uint64_t v30 = (void *)swift_allocError();
          *uint64_t v82 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }

        Swift::String v73 = *(void *)(v42 + 16);
        if (v73)
        {
LABEL_107:
          if (!v45[v73 - 1])
          {
            do
            {
              *(void *)(v42 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v73 - 1;
              if (v73 == 1) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v42 + 28 + 2 * v73--));
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v79 = *(void *)(v36 + 16);
        if (!HIDWORD(v79))
        {
          _So9NSDecimala__length_setter(v79, &v124);
          LODWORD(v121) = v102;
          WORD2(v121) = v6;
          HIWORD(v121) = v7;
          LOWORD(v122) = v8;
          WORD1(v122) = v9;
          WORD2(v122) = v10;
          HIWORD(v122) = v11;
          LOWORD(v123) = v5;
          HIWORD(v123) = v18;
          uint64_t v80 = _So9NSDecimala__isNegative_getter(&v121);
          _So9NSDecimala__isNegative_setter(v80, &v124);
          v81._rawValue = (void *)v36;
          goto LABEL_145;
        }

    LOBYTE(v76[0]) = 4;
    if (v10 <= 1.59271755e13) {
      uint64_t v51 = v10;
    }
    else {
      uint64_t v51 = 1.59271755e13;
    }
    v77[0] = fmax(v51, -2.11845067e11);
    uint64_t result = (double *)((double *(*)(double *__return_ptr, double *, void *, uint64_t, void *))v14[20])( v79,  v76,  v77,  ObjectType,  v14);
    if ((LOBYTE(v79[2]) & 1) == 0) {
      unint64_t v10 = v79[0];
    }
    goto LABEL_110;
  }

  uint64_t v46 = v79[0];
  unint64_t v47 = (void *(*)(double *__return_ptr, double *, void *, void, uint64_t, void *))v14[25];
  if (v52) {
    uint64_t v48 = -1LL;
  }
  else {
    uint64_t v48 = 1LL;
  }
  while (1)
  {
    unint64_t v10 = v46;
    LOBYTE(v62[0]) = 1;
    LOBYTE(v58) = 1;
    LOBYTE(v60) = 1;
    LOBYTE(v78) = 1;
    LOBYTE(v75) = 1;
    LOBYTE(v63) = 0;
    LOBYTE(v57) = 1;
    Swift::String v73 = 1;
    Swift::String v72 = 1;
    uint64_t v71 = 1;
    uint64_t v70 = 1;
    id v69 = 1;
    uint64_t v68 = 1;
    unint64_t v67 = 1;
    unint64_t v66 = 1;
    unint64_t v65 = 1;
    unint64_t v49 = v46 <= 1.59271755e13 ? v46 : 1.59271755e13;
    memset(v79, 0, 40);
    LOBYTE(v79[5]) = LOBYTE(v62[0]);
    v79[6] = 0.0;
    LOBYTE(v79[7]) = LOBYTE(v58);
    v79[8] = 0.0;
    LOBYTE(v79[9]) = LOBYTE(v60);
    v79[10] = 0.0;
    LOBYTE(v79[11]) = v78;
    v79[12] = 0.0;
    LOBYTE(v79[13]) = v75;
    *(void *)&v79[14] = v48;
    LOBYTE(v79[15]) = v63;
    _BYTE v79[16] = 0.0;
    LOBYTE(v79[17]) = LOBYTE(v57);
    v79[18] = 0.0;
    LOBYTE(v79[19]) = v73;
    v79[20] = 0.0;
    LOBYTE(v79[21]) = v72;
    v79[22] = 0.0;
    LOBYTE(v79[23]) = v71;
    v79[24] = 0.0;
    LOBYTE(v79[25]) = v70;
    v79[26] = 0.0;
    LOBYTE(v79[27]) = v69;
    v79[28] = 0.0;
    LOBYTE(v79[29]) = v68;
    v79[30] = 0.0;
    LOBYTE(v79[31]) = v67;
    v79[32] = 0.0;
    LOBYTE(v79[33]) = v66;
    v79[34] = 0.0;
    LOBYTE(v79[35]) = v65;
    BYTE1(v79[35]) = 2;
    v77[0] = fmax(v49, -2.11845067e11);
    uint64_t result = (double *)v47(v76, v79, v77, 0LL, ObjectType, v14);
    if ((LOBYTE(v76[1]) & 1) != 0) {
      break;
    }
    uint64_t v46 = v76[0];
    v74[0] = 16LL;
    if (v76[0] <= 1.59271755e13) {
      Swift::String v50 = v76[0];
    }
    else {
      Swift::String v50 = 1.59271755e13;
    }
    v64[0] = fmax(v50, -2.11845067e11);
    v19(v79, v74, (double *)v64, ObjectType, v14);
    memcpy(v77, v79, 0x11AuLL);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)v77);
    if (LOBYTE(v77[15]) == 1)
    {
      if (v56) {
        goto LABEL_104;
      }
    }

    else if (v77[14] != v56)
    {
      goto LABEL_104;
    }
  }

  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v37 = (void *)swift_allocError();
  *uint64_t v94 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  __int128 v144 = 0LL;
  unint64_t v145 = 0LL;
  _So9NSDecimala__exponent_setter(0LL, &v143);
  _So9NSDecimala__length_setter(0LL, &v143);
  _So9NSDecimala__isNegative_setter(1LL, &v143);
  _So9NSDecimala__isCompact_setter(&v143);
  _So9NSDecimala__reserved_setter(&v143);

  LODWORD(v8) = v143;
  LOWORD(v5) = v144;
  LOWORD(v15) = WORD1(v144);
  LOWORD(v11) = WORD2(v144);
  LOWORD(v6) = HIWORD(v144);
  LOWORD(v9) = v145;
  LOWORD(v10) = WORD1(v145);
  LOWORD(v7) = WORD2(v145);
  LOWORD(v14) = HIWORD(v145);
LABEL_22:
  char v39 = v114;
LABEL_25:
  *(_DWORD *)char v39 = v8;
  *(_WORD *)(v39 + 4) = v5;
  *(_WORD *)(v39 + 6) = v15;
  *(_WORD *)(v39 + 8) = v11;
  *(_WORD *)(v39 + 10) = v6;
  *(_WORD *)(v39 + 12) = v9;
  *(_WORD *)(v39 + 14) = v10;
  *(_WORD *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_WORD *)(v39 + 18) = v14;
}

        if (!v63) {
          goto LABEL_112;
        }
        uint64_t v83 = *(void *)(v55 + 16);
        if (v83)
        {
LABEL_107:
          if (!v58[v83 - 1])
          {
            do
            {
              *(void *)(v55 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v83 - 1;
              if (v83 == 1) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v55 + 28 + 2 * v83--));
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v89 = *(void *)(v57 + 16);
        if (!HIDWORD(v89))
        {
          _So9NSDecimala__length_setter(v89, &v134);
          *(_DWORD *)unint64_t v129 = v5;
          *(_WORD *)&v129[4] = v106;
          *(_WORD *)&v129[6] = v7;
          *(_WORD *)&v129[8] = v107;
          LOWORD(v130) = v9;
          HIWORD(v130) = v10;
          uint64_t v131 = v127;
          uint64_t v132 = v125;
          uint64_t v133 = v108;
          goto LABEL_145;
        }

        if (!v63) {
          goto LABEL_112;
        }
        uint64_t v83 = *(void *)(v55 + 16);
        if (v83)
        {
LABEL_107:
          if (!v58[v83 - 1])
          {
            do
            {
              *(void *)(v55 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v83 - 1;
              if (v83 == 1) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v55 + 28 + 2 * v83--));
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v89 = *(void *)(v57 + 16);
        if (!HIDWORD(v89))
        {
          _So9NSDecimala__length_setter(v89, &v134);
          *(_DWORD *)unint64_t v129 = v5;
          *(_WORD *)&v129[4] = v106;
          *(_WORD *)&v129[6] = v7;
          *(_WORD *)&v129[8] = v107;
          LOWORD(v130) = v9;
          HIWORD(v130) = v10;
          uint64_t v131 = v127;
          uint64_t v132 = v125;
          uint64_t v133 = v108;
          goto LABEL_145;
        }

      __break(1u);
      goto LABEL_106;
    }

    uint64_t v52 = (v62 - 1) & v62;
    Swift::String v59 = v63;
    uint64_t v60 = __clz(__rbit64(v62)) + (v63 << 6);
LABEL_106:
    unint64_t v65 = 16 * v60;
    unint64_t v66 = *(void *)(v3 + 56);
    unint64_t v67 = (uint64_t *)(*(void *)(v3 + 48) + v65);
    id v69 = *v67;
    uint64_t v68 = v67[1];
    uint64_t v70 = (uint64_t *)(v66 + v65);
    uint64_t v71 = *v70;
    Swift::String v72 = *((_BYTE *)v70 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::String v73 = Hasher._finalize()();
    uint64_t v74 = -1LL << *(_BYTE *)(v50 + 32);
    unint64_t v75 = v73 & ~v74;
    unint64_t v76 = v75 >> 6;
    if (((-1LL << v75) & ~*(void *)(v53 + 8 * (v75 >> 6))) != 0)
    {
      Swift::String v54 = __clz(__rbit64((-1LL << v75) & ~*(void *)(v53 + 8 * (v75 >> 6)))) | v75 & 0x7FFFFFFFFFFFFFC0LL;
      goto LABEL_85;
    }

    uint64_t v77 = 0;
    uint64_t v78 = (unint64_t)(63 - v74) >> 6;
    while (++v76 != v78 || (v77 & 1) == 0)
    {
      uint64_t v79 = v76 == v78;
      if (v76 == v78) {
        unint64_t v76 = 0LL;
      }
      v77 |= v79;
      uint64_t v80 = *(void *)(v53 + 8 * v76);
      if (v80 != -1)
      {
        Swift::String v54 = __clz(__rbit64(~v80)) + (v76 << 6);
LABEL_85:
        *(void *)(v53 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v54;
        unint64_t v55 = 16 * v54;
        uint64_t v56 = (void *)(*(void *)(v50 + 48) + v55);
        *uint64_t v56 = v69;
        v56[1] = v68;
        uint64_t v57 = *(void *)(v50 + 56) + v55;
        *(void *)uint64_t v57 = v71;
        *(_BYTE *)(v57 + 8) = v72;
        ++*(void *)(v50 + 16);
        uint64_t v27 = v115 - 1;
        uint64_t v3 = v117;
        uint64_t v51 = v59;
        if (v115 == 1) {
          return v50;
        }
        goto LABEL_86;
      }
    }

    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }

  return v50;
}

          __break(1u);
          goto LABEL_106;
        }
      }

      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
    }

    __break(1u);
    goto LABEL_105;
  }

  if (result > 0x63)
  {
    if (result > 0x3E7)
    {
      if (result >> 4 > 0x270)
      {
        MEMORY[0x1895F8858](result);
        unint64_t v92 = specialized closure #1 in numericStringRepresentationForBinaryInteger<A>(words:isSigned:)( &v91,  1LL,  v54,  1);
        Swift::Int v93 = v55;
        MEMORY[0x1895F8858](v92);
        unint64_t v91 = a3;
        specialized String.withUTF8<A>(_:)((uint64_t (*)(void *, uint64_t))partial apply for closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:));
        return swift_bridgeObjectRelease();
      }

      if (!__OFSUB__(a2, 4LL))
      {
        if (a2 - 4 >= 1)
        {
          Swift::String v35 = a3[2];
          uint64_t v36 = *a3;
          if (v35 <= a3[1]) {
            uint64_t v37 = a3[1];
          }
          else {
            uint64_t v37 = a3[2];
          }
          uint64_t v38 = v37 - v35;
          char v39 = v38 + 1;
          if (v39 >= 0x21)
          {
            uint64_t v71 = v39 & 0x1F;
            if ((v39 & 0x1F) == 0) {
              uint64_t v71 = 32LL;
            }
            Swift::String v40 = v39 - v71;
            uint64_t v41 = v35 + v40;
            Swift::String v72 = vdupq_n_s8(a4);
            Swift::String v73 = (int8x16_t *)(v35 + v36 + 16);
            uint64_t v74 = v40;
            do
            {
              v73[-1] = v72;
              *Swift::String v73 = v72;
              v73 += 2;
              v74 -= 32LL;
            }

            while (v74);
          }

          else
          {
            Swift::String v40 = 0LL;
            uint64_t v41 = a3[2];
          }

          unint64_t v75 = v40 + v35 - v37;
          unint64_t v76 = a2 - v40 - 4;
          do
          {
            if (!v75) {
              goto LABEL_103;
            }
            *(_BYTE *)(v36 + v41++) = a4;
            ++v75;
            --v76;
          }

          while (v76);
          a3[2] = v41;
        }

        uint64_t v77 = a4 + (char)(result / 0x3E8);
        if (v77 == (char)(a4 + result / 0x3E8))
        {
          uint64_t v79 = a3[1];
          uint64_t v78 = a3[2];
          if (v78 < v79)
          {
            uint64_t v80 = result % 0x3E8 / 0x64;
            Swift::String v81 = *a3;
            *(_BYTE *)(*a3 + v78) = v77;
            uint64_t v82 = v78 + 1;
            a3[2] = v78 + 1;
            uint64_t v83 = a4 + (char)v80;
            if (v83 == (char)(a4 + v80))
            {
              if (v82 < v79)
              {
                uint64_t v84 = result % 0x3E8 % 0x64;
                unint64_t v85 = v84 / 0xAu;
                *(_BYTE *)(v81 + v82) = v83;
                unint64_t v86 = v78 + 2;
                a3[2] = v78 + 2;
                unint64_t v87 = v85 + a4;
                if (v87 == (char)(v85 + a4))
                {
                  if (v86 < v79)
                  {
                    unint64_t v88 = v84 % 0xAu;
                    *(_BYTE *)(v81 + v86) = v87;
                    unint64_t v89 = v78 + 3;
                    a3[2] = v78 + 3;
                    unint64_t v90 = a4 + v88;
                    if (v90 == (char)v90)
                    {
                      if (v89 < v79)
                      {
                        *(_BYTE *)(v81 + v89) = v90;
                        uint64_t v34 = v78 + 4;
                        goto LABEL_99;
                      }

    swift_release();
    goto LABEL_106;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  Swift::String v73 = v6;
  uint64_t v11 = 0LL;
  uint64_t v12 = (void *)(v7 + 56);
  uint64_t v13 = 1LL << *(_BYTE *)(v7 + 32);
  if (v13 < 64) {
    id v14 = ~(-1LL << v13);
  }
  else {
    id v14 = -1LL;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  __int16 v16 = (unint64_t)(v13 + 63) >> 6;
  Swift::String v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }

    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_116;
    }
    if (v21 >= v16)
    {
LABEL_66:
      Swift::String v45 = 1LL << *(_BYTE *)(v7 + 32);
      if (v45 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
      }
      else {
        *uint64_t v12 = -1LL << v45;
      }
      uint64_t v4 = v3;
      unint64_t v6 = v73;
      *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      goto LABEL_105;
    }

    uint64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      uint64_t v22 = v12[v11];
      if (!v22)
      {
        uint64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        uint64_t v22 = v12[v11];
        if (!v22)
        {
          uint64_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          uint64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }

                  swift_release();
                  void *v4 = v10;
                  uint64_t result = MEMORY[0x186E1CE88](*(void *)(v10 + 40), v6, 1LL);
                  unint64_t v67 = -1LL << *(_BYTE *)(v10 + 32);
                  a2 = result & ~v67;
                  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
                  {
                    uint64_t v68 = *(void *)(v10 + 48);
                    if (*(unsigned __int8 *)(v68 + a2) == (_DWORD)v6)
                    {
LABEL_110:
                      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }

                    else
                    {
                      id v69 = ~v67;
                      while (1)
                      {
                        a2 = (a2 + 1) & v69;
                        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
                          break;
                        }
                      }
                    }
                  }

                  goto LABEL_111;
                }

                uint64_t v46 = v58;
              }
            }
          }
        }

                  swift_release();
                  void *v4 = v10;
                  uint64_t result = static Hasher._hash(seed:_:)();
                  unint64_t v66 = -1LL << *(_BYTE *)(v10 + 32);
                  a2 = result & ~v66;
                  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
                  {
                    unint64_t v67 = *(void *)(v10 + 48);
                    if (*(void *)(v67 + 8 * a2) == v6)
                    {
LABEL_110:
                      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }

                    else
                    {
                      uint64_t v68 = ~v66;
                      while (1)
                      {
                        a2 = (a2 + 1) & v68;
                        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
                          break;
                        }
                        if (*(void *)(v67 + 8 * a2) == v6) {
                          goto LABEL_110;
                        }
                      }
                    }
                  }

                  goto LABEL_111;
                }

                Swift::String v45 = v57;
              }
            }
          }
        }

    swift_release();
    goto LABEL_106;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
  uint64_t v11 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = v11;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  uint64_t v78 = v6;
  uint64_t v12 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v13 = (void *)(v7 + 56);
  if (v12 < 64) {
    id v14 = ~(-1LL << v12);
  }
  else {
    id v14 = -1LL;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  __int16 v16 = (unint64_t)(v12 + 63) >> 6;
  Swift::String v17 = v11 + 56;
  uint64_t result = swift_retain();
  unint64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      uint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_30;
    }

    uint64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      goto LABEL_116;
    }
    if (v22 >= v16)
    {
LABEL_66:
      swift_release();
      uint64_t v46 = 1LL << *(_BYTE *)(v7 + 32);
      unint64_t v6 = v78;
      if (v46 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
      }
      else {
        *uint64_t v13 = -1LL << v46;
      }
      *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      goto LABEL_105;
    }

    unint64_t v23 = v13[v22];
    ++v18;
    if (!v23)
    {
      unint64_t v18 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_66;
      }
      unint64_t v23 = v13[v18];
      if (!v23)
      {
        unint64_t v18 = v22 + 2;
        if (v22 + 2 >= v16) {
          goto LABEL_66;
        }
        unint64_t v23 = v13[v18];
        if (!v23)
        {
          unint64_t v18 = v22 + 3;
          if (v22 + 3 >= v16) {
            goto LABEL_66;
          }
          unint64_t v23 = v13[v18];
          if (!v23) {
            break;
          }
        }
      }
    }

    swift_release();
    goto LABEL_106;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  Swift::String v73 = v6;
  uint64_t v11 = 0LL;
  uint64_t v12 = (void *)(v7 + 56);
  uint64_t v13 = 1LL << *(_BYTE *)(v7 + 32);
  if (v13 < 64) {
    id v14 = ~(-1LL << v13);
  }
  else {
    id v14 = -1LL;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  __int16 v16 = (unint64_t)(v13 + 63) >> 6;
  Swift::String v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }

    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_116;
    }
    if (v21 >= v16)
    {
LABEL_66:
      Swift::String v45 = 1LL << *(_BYTE *)(v7 + 32);
      if (v45 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
      }
      else {
        *uint64_t v12 = -1LL << v45;
      }
      unint64_t v6 = v73;
      uint64_t v4 = v3;
      *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      goto LABEL_105;
    }

    uint64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      uint64_t v22 = v12[v11];
      if (!v22)
      {
        uint64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        uint64_t v22 = v12[v11];
        if (!v22)
        {
          uint64_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          uint64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }

                  swift_release();
                  void *v4 = v10;
                  uint64_t result = static Hasher._hash(seed:_:)();
                  unint64_t v66 = -1LL << *(_BYTE *)(v10 + 32);
                  a2 = result & ~v66;
                  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
                  {
                    unint64_t v67 = *(void *)(v10 + 48);
                    if (*(void *)(v67 + 8 * a2) == v6)
                    {
LABEL_110:
                      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }

                    else
                    {
                      uint64_t v68 = ~v66;
                      while (1)
                      {
                        a2 = (a2 + 1) & v68;
                        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
                          break;
                        }
                        if (*(void *)(v67 + 8 * a2) == v6) {
                          goto LABEL_110;
                        }
                      }
                    }
                  }

                  goto LABEL_111;
                }

                Swift::String v45 = v57;
              }
            }
          }
        }

    swift_release();
    goto LABEL_106;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v10 = result;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  Swift::String v73 = v6;
  uint64_t v11 = 0LL;
  uint64_t v12 = (void *)(v7 + 56);
  uint64_t v13 = 1LL << *(_BYTE *)(v7 + 32);
  if (v13 < 64) {
    id v14 = ~(-1LL << v13);
  }
  else {
    id v14 = -1LL;
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  __int16 v16 = (unint64_t)(v13 + 63) >> 6;
  Swift::String v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }

    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_116;
    }
    if (v21 >= v16)
    {
LABEL_66:
      Swift::String v45 = 1LL << *(_BYTE *)(v7 + 32);
      if (v45 > 63) {
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
      }
      else {
        *uint64_t v12 = -1LL << v45;
      }
      uint64_t v4 = v3;
      unint64_t v6 = v73;
      *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      goto LABEL_105;
    }

    uint64_t v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_66;
      }
      uint64_t v22 = v12[v11];
      if (!v22)
      {
        uint64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_66;
        }
        uint64_t v22 = v12[v11];
        if (!v22)
        {
          uint64_t v11 = v21 + 3;
          if (v21 + 3 >= v16) {
            goto LABEL_66;
          }
          uint64_t v22 = v12[v11];
          if (!v22) {
            break;
          }
        }
      }
    }

    swift_release();
    goto LABEL_106;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  if (v9 > v8)
  {
    Swift::String v32 = v3;
    uint64_t v33 = static _SetStorage.copy(original:)();
    unint64_t v10 = v33;
    if (!*(void *)(v7 + 16)) {
      goto LABEL_102;
    }
    uint64_t v34 = (void *)(v33 + 56);
    Swift::String v35 = v7 + 56;
    uint64_t v36 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
    uint64_t v37 = 0LL;
    *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v7 + 16);
    uint64_t v38 = 1LL << *(_BYTE *)(v7 + 32);
    char v39 = -1LL;
    if (v38 < 64) {
      char v39 = ~(-1LL << v38);
    }
    Swift::String v40 = v39 & *(void *)(v7 + 56);
    uint64_t v41 = (unint64_t)(v38 + 63) >> 6;
    while (1)
    {
      if (v40)
      {
        unint64_t v42 = __clz(__rbit64(v40));
        v40 &= v40 - 1;
        uint64_t v43 = v42 | (v37 << 6);
      }

      else
      {
        unint64_t v47 = v37 + 1;
        if (__OFADD__(v37, 1LL)) {
          goto LABEL_126;
        }
        if (v47 >= v41) {
          goto LABEL_102;
        }
        uint64_t v48 = *(void *)(v35 + 8 * v47);
        ++v37;
        if (!v48)
        {
          uint64_t v37 = v47 + 1;
          if (v47 + 1 >= v41) {
            goto LABEL_102;
          }
          uint64_t v48 = *(void *)(v35 + 8 * v37);
          if (!v48)
          {
            uint64_t v37 = v47 + 2;
            if (v47 + 2 >= v41) {
              goto LABEL_102;
            }
            uint64_t v48 = *(void *)(v35 + 8 * v37);
            if (!v48)
            {
              uint64_t v37 = v47 + 3;
              if (v47 + 3 >= v41) {
                goto LABEL_102;
              }
              uint64_t v48 = *(void *)(v35 + 8 * v37);
              if (!v48)
              {
                unint64_t v49 = v47 + 4;
                if (v49 >= v41) {
                  goto LABEL_102;
                }
                uint64_t v48 = *(void *)(v35 + 8 * v49);
                if (!v48)
                {
                  while (1)
                  {
                    uint64_t v37 = v49 + 1;
                    if (__OFADD__(v49, 1LL)) {
                      goto LABEL_130;
                    }
                    if (v37 >= v41) {
                      break;
                    }
                    uint64_t v48 = *(void *)(v35 + 8 * v37);
                    ++v49;
                    if (v48) {
                      goto LABEL_65;
                    }
                  }

    swift_release();
    goto LABEL_106;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Locale.NumberingSystem>);
  id v14 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v13 = v14;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_105;
  }
  unint64_t v15 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v101 = (void *)(v10 + 56);
  if (v15 < 64) {
    __int16 v16 = ~(-1LL << v15);
  }
  else {
    __int16 v16 = -1LL;
  }
  Swift::String v17 = v16 & *(void *)(v10 + 56);
  unint64_t v102 = (unint64_t)(v15 + 63) >> 6;
  unint64_t v18 = v14 + 56;
  uint64_t result = swift_retain();
  unint64_t v19 = 0LL;
  while (1)
  {
    if (v17)
    {
      uint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_30;
    }

    __int16 v24 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      goto LABEL_125;
    }
    if (v24 >= v102)
    {
LABEL_66:
      swift_release();
      Swift::String v58 = 1LL << *(_BYTE *)(v10 + 32);
      unint64_t v9 = a3;
      if (v58 > 63) {
        bzero(v101, ((unint64_t)(v58 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
      }
      else {
        *uint64_t v101 = -1LL << v58;
      }
      *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      goto LABEL_105;
    }

    uint64_t v25 = v101[v24];
    ++v19;
    if (!v25)
    {
      unint64_t v19 = v24 + 1;
      if (v24 + 1 >= v102) {
        goto LABEL_66;
      }
      uint64_t v25 = v101[v19];
      if (!v25)
      {
        unint64_t v19 = v24 + 2;
        if (v24 + 2 >= v102) {
          goto LABEL_66;
        }
        uint64_t v25 = v101[v19];
        if (!v25)
        {
          unint64_t v19 = v24 + 3;
          if (v24 + 3 >= v102) {
            goto LABEL_66;
          }
          uint64_t v25 = v101[v19];
          if (!v25) {
            break;
          }
        }
      }
    }

        uint64_t v34 = 0LL;
LABEL_106:
        if (!v48 || v34)
        {
          uint64_t v43 = 0LL;
          if (!v48) {
            goto LABEL_121;
          }
        }

        else
        {
          cf = 0LL;
          Swift::String v50 = (void *)off_18C496848(v48, &cf);
          if (cf)
          {
            if (_NSInflectionLog_onceToken != -1) {
              dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
            }
            uint64_t v51 = (os_log_s *)_NSInflectionLog_log;
            if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              Swift::String v58 = "mss_createPrintCopy(speakableResult, &error)";
              Swift::String v59 = 2112;
              uint64_t v60 = cf;
              _os_log_error_impl( &dword_182EB1000,  v51,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
            }

            uint64_t v34 = cf;
          }

          else
          {
            uint64_t v34 = 0LL;
          }

          uint64_t v52 = v50;
          uint64_t v43 = (uint64_t)v52;
          if (v22 && v52) {
            uint64_t v43 = [v22 stringByAppendingString:v52];
          }
        }

        off_18C496850(v48);
LABEL_121:
        off_18C496858(v41);
        goto LABEL_122;
      }
    }

    else
    {
      uint64_t v46 = v53;
      if (!v53)
      {
        uint64_t v43 = 0LL;
        uint64_t v34 = 0LL;
        goto LABEL_121;
      }
    }

    cf = 0LL;
    uint64_t v48 = off_18C496838(v41, v46, &cf);
    if (cf)
    {
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      unint64_t v49 = (os_log_s *)_NSInflectionLog_log;
      if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136315394;
      Swift::String v58 = "minf_getFeatureValueByNameCopy(inflectable,(CFStringRef)featureName, &error)";
      Swift::String v59 = 2112;
      uint64_t v60 = cf;
LABEL_126:
      _os_log_error_impl( &dword_182EB1000,  v49,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
LABEL_98:
      uint64_t v34 = cf;
      goto LABEL_106;
    }

    goto LABEL_105;
  }

  uint64_t v43 = 0LL;
  Swift::String v17 = 0LL;
  if (v39)
  {
LABEL_122:
    off_18C496850(v39);
    Swift::String v17 = v43;
  }

uint64_t URLComponents._URLComponents.hasAuthority.getter()
{
  if (v40) {
    return 1LL;
  }
  if ((*(_BYTE *)(v0 + 12) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( v0,  (uint64_t)v37,  &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?( (uint64_t)v37,  (uint64_t)&v41,  &demangling cache variable for type metadata for URLParseInfo?);
    if (v41)
    {
      if ((*(_BYTE *)(v41 + 120) & 1) == 0) {
        goto LABEL_11;
      }
    }
  }

  outlined init with take of LocalePreferences?( v0 + 88,  (uint64_t)v36,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v36,  (uint64_t)v42,  &demangling cache variable for type metadata for Int?);
  if (v42[8] == 1)
  {
    char v1 = *(_BYTE *)(v0 + 13);
    if ((v1 & 1) != 0)
    {
      outlined init with take of LocalePreferences?( v0,  (uint64_t)v35,  &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?( (uint64_t)v35,  (uint64_t)&v43,  &demangling cache variable for type metadata for URLParseInfo?);
      if (v43)
      {
        if ((*(_BYTE *)(v43 + 144) & 1) == 0)
        {
          unint64_t v16 = String.subscript.getter();
          uint64_t v20 = v19;
          if ((v16 ^ v17) >> 14)
          {
            uint64_t v21 = v16;
            uint64_t v22 = v17;
            uint64_t v23 = v18;
            _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v16,  v17,  v18,  v19,  10LL);
            if ((v24 & 0x100) != 0)
            {
              specialized _parseInteger<A, B>(ascii:radix:)(v21, v22, v23, v20, 10LL);
              char v27 = v26;
              swift_bridgeObjectRelease();
              if ((v27 & 1) == 0) {
                return 1LL;
              }
            }

            else
            {
              char v25 = v24;
              swift_bridgeObjectRelease();
              if ((v25 & 1) == 0) {
                return 1LL;
              }
            }
          }

          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
    }

    if (*(void *)(v0 + 48))
    {
      swift_bridgeObjectRetain();
LABEL_12:
      swift_bridgeObjectRelease();
      return 1LL;
    }

    char v4 = *(_BYTE *)(v0 + 10);
    if ((v4 & 1) != 0)
    {
      outlined init with take of LocalePreferences?( v0,  (uint64_t)v34,  &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?( (uint64_t)v34,  (uint64_t)&v44,  &demangling cache variable for type metadata for URLParseInfo?);
      if (v44)
      {
        if ((*(_BYTE *)(v44 + 72) & 1) == 0)
        {
          uint64_t v28 = String.subscript.getter();
          MEMORY[0x186E1B610](v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          goto LABEL_12;
        }
      }
    }

    outlined init with take of LocalePreferences?( v0 + 56,  (uint64_t)v33,  &demangling cache variable for type metadata for String?);
    outlined init with take of LocalePreferences?( (uint64_t)v33,  (uint64_t)v45,  &demangling cache variable for type metadata for String?);
    if (v46) {
      return 1LL;
    }
    char v5 = *(_BYTE *)(v0 + 11);
    if ((v5 & 1) != 0)
    {
      outlined init with take of LocalePreferences?( v0,  (uint64_t)v32,  &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?( (uint64_t)v32,  (uint64_t)&v47,  &demangling cache variable for type metadata for URLParseInfo?);
      if (v47)
      {
        if ((*(_BYTE *)(v47 + 96) & 1) == 0) {
          goto LABEL_11;
        }
      }
    }

    if ((v1 & 1) != 0)
    {
      outlined init with take of LocalePreferences?( v0,  (uint64_t)v31,  &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?( (uint64_t)v31,  (uint64_t)&v48,  &demangling cache variable for type metadata for URLParseInfo?);
      if (v48)
      {
        if ((*(_BYTE *)(v48 + 144) & 1) == 0)
        {
          unint64_t v6 = String.subscript.getter();
          uint64_t v10 = v9;
          if (!((v6 ^ v7) >> 14))
          {
            swift_bridgeObjectRelease();
            if ((v4 & 1) != 0) {
              goto LABEL_30;
            }
            goto LABEL_32;
          }

          uint64_t v11 = v6;
          uint64_t v12 = v7;
          uint64_t v13 = v8;
          _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v6,  v7,  v8,  v9,  10LL);
          if ((v14 & 0x100) != 0) {
            specialized _parseInteger<A, B>(ascii:radix:)(v11, v12, v13, v10, 10LL);
          }
          char v15 = v14;
          swift_bridgeObjectRelease();
          if ((v15 & 1) == 0) {
            return 1LL;
          }
        }
      }
    }

    if ((v4 & 1) != 0)
    {
LABEL_30:
      outlined init with take of LocalePreferences?( v0,  (uint64_t)v30,  &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?( (uint64_t)v30,  (uint64_t)&v49,  &demangling cache variable for type metadata for URLParseInfo?);
      if (!v49 || (*(_BYTE *)(v49 + 72) & 1) != 0) {
        goto LABEL_32;
      }
LABEL_11:
      uint64_t v2 = String.subscript.getter();
      MEMORY[0x186E1B610](v2);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }

Swift::OpaquePointer_optional __swiftcall URLComponents._URLComponents.queryItems(percentEncoded:)( Swift::Bool percentEncoded)
{
  if (*(void *)(v1 + 128))
  {
    unint64_t v2 = *(void *)(v1 + 120);
    unint64_t v3 = *(void *)(v1 + 128);
  }

  else
  {
    if ((*(_BYTE *)(v1 + 15) & 1) == 0
      || (outlined init with take of LocalePreferences?( v1,  (uint64_t)v25,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v25,  (uint64_t)&v26,  &demangling cache variable for type metadata for URLParseInfo?),  !v26)
      || (*(_BYTE *)(v26 + 192) & 1) != 0)
    {
      unint64_t v19 = 0LL;
LABEL_46:
      unint64_t v11 = v19;
      goto LABEL_51;
    }

    uint64_t v20 = String.subscript.getter();
    unint64_t v2 = MEMORY[0x186E1B610](v20);
    unint64_t v3 = v21;
    swift_bridgeObjectRelease();
  }

  if ((v3 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(v3) & 0xF;
  }
  else {
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v19 = MEMORY[0x18961AFE8];
    goto LABEL_46;
  }

  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFE8];
  uint64_t v5 = swift_allocObject();
  unint64_t v6 = 15LL;
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 15LL;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 15LL;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(_BYTE *)(v8 + 24) = 1;
  uint64_t v9 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4LL << v9;
  swift_bridgeObjectRetain();
  unint64_t v11 = swift_bridgeObjectRetain();
  while (1)
  {
    if ((v6 & 0xC) == v10)
    {
      unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v2, v3);
      unint64_t v6 = v11;
    }

    unint64_t v13 = v6 >> 16;
    if (v6 >> 16 >= v4) {
      break;
    }
    if ((v3 & 0x1000000000000000LL) != 0)
    {
      char v15 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((v3 & 0x2000000000000000LL) != 0)
    {
      v24[0] = v2;
      v24[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      char v15 = *((_BYTE *)v24 + v13);
    }

    else
    {
      uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v2 & 0x1000000000000000LL) == 0) {
        uint64_t v14 = _StringObject.sharedUTF8.getter();
      }
      char v15 = *(_BYTE *)(v14 + v13);
    }

    if (v15 == 38)
    {
      addItem #1 () in URLComponents._URLComponents.queryItems(percentEncoded:)( v8,  v2,  v3,  v7,  v2,  v3,  v5,  percentEncoded,  v22);
      unint64_t v11 = *(void *)(v5 + 16);
      if ((v11 & 0xC) == v10)
      {
        unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v2, v3);
        if ((v3 & 0x1000000000000000LL) != 0) {
          goto LABEL_30;
        }
LABEL_27:
        uint64_t v18 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
      }

      else
      {
        if ((v3 & 0x1000000000000000LL) == 0) {
          goto LABEL_27;
        }
LABEL_30:
        if (v4 <= v11 >> 16) {
          goto LABEL_50;
        }
        uint64_t v18 = String.UTF8View._foreignIndex(after:)();
      }

      uint64_t v17 = 0LL;
      *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
      char v16 = 1;
LABEL_33:
      *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
      *(_BYTE *)(v8 + 24) = v16;
      goto LABEL_34;
    }

    if (v15 == 61 && *(_BYTE *)(v8 + 24) == 1)
    {
      char v16 = 0;
      uint64_t v17 = *(void *)(v5 + 16);
      goto LABEL_33;
    }

unint64_t addItem #1 () in URLComponents._URLComponents.queryItems(percentEncoded:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  char v17 = *(_BYTE *)(a1 + 24);
  unint64_t v18 = *(void *)(a4 + 16);
  if ((v17 & 1) != 0)
  {
    if (*(void *)(a7 + 16) >> 14 >= v18 >> 14)
    {
      uint64_t v19 = String.subscript.getter();
      uint64_t v10 = MEMORY[0x186E1B610](v19);
      unint64_t v9 = v20;
      uint64_t v21 = swift_bridgeObjectRelease();
      uint64_t v22 = 0LL;
      unint64_t v23 = 0LL;
      uint64_t v24 = a9;
      if ((a8 & 1) != 0) {
        goto LABEL_31;
      }
LABEL_13:
      uint64_t v31 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000LL) == 0) {
        uint64_t v31 = v10 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v32 = MEMORY[0x18961AFF8];
      if (v31)
      {
        Swift::Int v56 = v10;
        unint64_t v57 = v9;
        MEMORY[0x1895F8858](v21);
        Swift::String v54 = &v56;
        uint64_t v55 = v32;
        swift_bridgeObjectRetain();
        uint64_t v33 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v53,  v10,  v9);
        if (v34 == 1)
        {
          Swift::Int v35 = v56;
          unint64_t v36 = v57;
          swift_bridgeObjectRetain();
          uint64_t v10 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v35,  v36,  MEMORY[0x18961AFF8]);
          unint64_t v38 = v37;
          swift_bridgeObjectRelease_n();
          uint64_t v39 = swift_bridgeObjectRelease();
          unint64_t v9 = v38;
          if (v38) {
            goto LABEL_22;
          }
        }

        else
        {
          uint64_t v10 = (uint64_t)v33;
          unint64_t v40 = v34;
          uint64_t v39 = swift_bridgeObjectRelease_n();
          unint64_t v9 = v40;
          if (v40) {
            goto LABEL_22;
          }
        }
      }

      else
      {
        uint64_t v39 = swift_bridgeObjectRelease();
      }

      uint64_t v10 = 0LL;
      unint64_t v9 = 0xE000000000000000LL;
LABEL_22:
      if (v23)
      {
        uint64_t v41 = HIBYTE(v23) & 0xF;
        if ((v23 & 0x2000000000000000LL) == 0) {
          uint64_t v41 = v22 & 0xFFFFFFFFFFFFLL;
        }
        if (v41)
        {
          Swift::Int v56 = v22;
          unint64_t v57 = v23;
          MEMORY[0x1895F8858](v39);
          Swift::String v54 = &v56;
          uint64_t v55 = v32;
          swift_bridgeObjectRetain();
          unint64_t v42 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v53,  v22,  v23);
          if (v43 == 1)
          {
            Swift::Int v44 = v56;
            unint64_t v45 = v57;
            swift_bridgeObjectRetain();
            uint64_t v22 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v44,  v45,  MEMORY[0x18961AFF8]);
            unint64_t v47 = v46;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v22 = (uint64_t)v42;
            unint64_t v47 = v43;
            swift_bridgeObjectRelease_n();
          }

          unint64_t v23 = v47;
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v22 = 0LL;
          unint64_t v23 = 0xE000000000000000LL;
        }
      }

      goto LABEL_31;
    }

    __break(1u);
    goto LABEL_37;
  }

  unint64_t v13 = *(void *)(a1 + 16);
  if (v13 >> 14 < v18 >> 14)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  unint64_t v11 = a6;
  unint64_t v12 = a5;
  uint64_t v25 = String.subscript.getter();
  uint64_t v10 = MEMORY[0x186E1B610](v25);
  unint64_t v9 = v26;
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v28 = (v12 >> 59) & 1;
  if ((v11 & 0x1000000000000000LL) == 0) {
    LOBYTE(v28) = 1;
  }
  if ((v13 & 0xC) == 4LL << v28)
  {
LABEL_38:
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v12, v11);
    unint64_t v13 = result;
    if ((v11 & 0x1000000000000000LL) != 0) {
      goto LABEL_39;
    }
LABEL_10:
    unint64_t result = (v13 & 0xFFFFFFFFFFFF0000LL) + 65540;
    goto LABEL_11;
  }

  if ((v11 & 0x1000000000000000LL) == 0) {
    goto LABEL_10;
  }
LABEL_39:
  unint64_t v52 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000LL) == 0) {
    unint64_t v52 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v52 <= v13 >> 16) {
    goto LABEL_44;
  }
  unint64_t result = String.UTF8View._foreignIndex(after:)();
LABEL_11:
  if (*(void *)(a7 + 16) >> 14 < result >> 14)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    return result;
  }

  uint64_t v29 = String.subscript.getter();
  uint64_t v22 = MEMORY[0x186E1B610](v29);
  unint64_t v23 = v30;
  uint64_t v21 = swift_bridgeObjectRelease();
  uint64_t v24 = a9;
  if ((a8 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_31:
  uint64_t v48 = *(void **)(v24 + 16);
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v48;
  if ((result & 1) == 0)
  {
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v48[2] + 1LL,  1,  v48);
    uint64_t v48 = (void *)result;
    *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  }

  unint64_t v50 = v48[2];
  unint64_t v49 = v48[3];
  if (v50 >= v49 >> 1)
  {
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v49 > 1),  v50 + 1,  1,  v48);
    uint64_t v48 = (void *)result;
    *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  }

  v48[2] = v50 + 1;
  uint64_t v51 = &v48[4 * v50];
  v51[4] = v10;
  v51[5] = v9;
  v51[6] = v22;
  v51[7] = v23;
  return result;
}

uint64_t URLQueryItem.init(name:value:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall URLComponents._URLComponents.setQueryItems(_:)(Swift::OpaquePointer_optional a1)
{
  *(_BYTE *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 15) = 0;
  if (!a1.value._rawValue)
  {
    swift_bridgeObjectRelease();
    *(void *)(v1 + 120) = 0LL;
    *(void *)(v1 + 128) = 0LL;
    return;
  }

  rawValue = (char *)a1.value._rawValue;
  int64_t v3 = *((void *)a1.value._rawValue + 2);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    *(_OWORD *)(v1 + 120) = xmmword_183725730;
    return;
  }

  uint64_t v103 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v4 = 0LL;
  uint64_t v98 = rawValue + 32;
  uint64_t v96 = (char *)&v99 + 1;
  int64_t v97 = v3;
  while (1)
  {
    uint64_t v5 = (uint64_t *)&v98[32 * v4];
    uint64_t v6 = *v5;
    unint64_t v7 = v5[1];
    unint64_t v9 = v5[2];
    unint64_t v8 = v5[3];
    uint64_t v101 = 0LL;
    unint64_t v102 = 0xE000000000000000LL;
    if ((v7 & 0x1000000000000000LL) == 0)
    {
      if ((v7 & 0x2000000000000000LL) == 0)
      {
        if ((v6 & 0x1000000000000000LL) != 0)
        {
          uint64_t v10 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
LABEL_8:
          if (!v11) {
            goto LABEL_77;
          }
          if ((*v10 & 0x80000000) == 0)
          {
            int v12 = *v10;
            uint64_t v13 = v11 - 1;
            uint64_t v14 = v10 + 1;
            while (1)
            {
              if ((v12 - 39) >= 9 && v12 != 33 && v12 != 36)
              {
                if (v12 == 38) {
                  goto LABEL_45;
                }
                unsigned int v16 = v12 - 58;
                if ((v12 - 58) <= 0xFFFFFFF5)
                {
                  if (v16 > 6) {
                    goto LABEL_22;
                  }
                  if (((1 << v16) & 0x63) == 0) {
                    break;
                  }
                }
              }

LABEL_75:
    uint64_t v23 = swift_bridgeObjectRelease_n();
LABEL_46:
    uint64_t v24 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000LL) == 0) {
      uint64_t v24 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (v24)
    {
      unint64_t v99 = v6;
      uint64_t v100 = v7;
      MEMORY[0x1895F8858](v23);
      unint64_t v91 = &v99;
      char v92 = 0x80;
      swift_bridgeObjectRetain();
      uint64_t v25 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v90,  v6,  v7);
      if (v26)
      {
        uint64_t v27 = (uint64_t)v25;
        uint64_t v28 = v26;
      }

      else
      {
        unint64_t v29 = v99;
        unint64_t v30 = v100;
        swift_bridgeObjectRetain();
        uint64_t v27 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v29, v30, 0x80u);
        uint64_t v28 = v31;
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v27 = 0LL;
      uint64_t v28 = (void *)0xE000000000000000LL;
    }

    v32._uint64_t countAndFlagsBits = v27;
    v32._unint64_t object = v28;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    if (!v8)
    {
LABEL_55:
      swift_bridgeObjectRelease();
LABEL_151:
      swift_bridgeObjectRelease();
      goto LABEL_152;
    }

    if (v52) {
      goto LABEL_136;
    }
LABEL_76:
    unint64_t v58 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
    int v56 = ((-15LL << v58) - 1) & v56 | (v59 << v58);
    unsigned int v57 = *(void *)(v57 + 24 + 24 * v59);
    swift_unknownObjectRetain();
    unint64_t result = (void *)swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v57 + 18));
  Swift::String v70 = v56 & 0xFFFFFFFFFFFFF0FFLL;
  unsigned int v51 = v105;
  uint64_t v71 = *(unsigned __int16 *)(v57 + 16);
  if (*(_WORD *)(v57 + 16)) {
    goto LABEL_95;
  }
LABEL_107:
  if (v52) {
    goto LABEL_159;
  }
LABEL_108:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  char v67 = v70 | (v71 << 8);
LABEL_109:
  swift_unknownObjectRetain();
  char v69 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v104, v67, v57, v53, v99);
  unint64_t result = (void *)swift_unknownObjectRelease_n();
  uint64_t v68 = v52 != 0;
  uint64_t v46 = v107;
  int v50 = v8;
LABEL_110:
  uint64_t v23 = __OFADD__(v69, v68);
  unint64_t v77 = v69 + v68;
  if (v23) {
    goto LABEL_151;
  }
  if (v77 < v44)
  {
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }

  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        char v69 = (v74 - 1) & v74;
        Swift::String v72 = __clz(__rbit64(v74)) + (v64 << 6);
        if (!v56[2]) {
          goto LABEL_86;
        }
      }
    }

    goto LABEL_86;
  }

              Swift::String v32 = 3LL;
              goto LABEL_87;
            }

        if (v26 <= v18 >> 14) {
          goto LABEL_100;
        }
        unsigned int v22 = v18;
        if ((v18 & 0xC) == v8)
        {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v18, v5, a2);
          unsigned int v22 = result;
        }

        if (v22 >> 16 >= v3) {
          goto LABEL_132;
        }
        if ((a2 & 0x1000000000000000LL) != 0)
        {
          LOWORD(v23) = String.UTF16View._foreignSubscript(position:)();
        }

        else
        {
          if ((v22 & 1) != 0)
          {
            if ((a2 & 0x2000000000000000LL) == 0)
            {
LABEL_82:
              if ((v5 & 0x1000000000000000LL) == 0) {
                _StringObject.sharedUTF8.getter();
              }
              goto LABEL_89;
            }
          }

          else
          {
            _StringGuts.scalarAlignSlow(_:)(v22, v5, a2);
            if ((a2 & 0x2000000000000000LL) == 0) {
              goto LABEL_82;
            }
          }

          uint64_t v31 = v5;
          Swift::String v32 = v28;
LABEL_89:
          unint64_t result = _decodeScalar(_:startingAt:)();
          if ((v22 & 0xC000) == 0x4000)
          {
            LOWORD(v23) = result & 0x3FF | 0xDC00;
          }

          else if (WORD1(result))
          {
            uint64_t v23 = (unsigned __int16)((result + 67043328) >> 10) + 55296;
            if ((v23 & 0x10000) != 0) {
              goto LABEL_135;
            }
          }

          else
          {
            LOWORD(v23) = result;
          }
        }

        unint64_t result = specialized FixedWidthInteger.init(_:)(10LL, 0xE100000000000000LL);
        if ((result & 0x10000) == 0)
        {
          uint64_t v13 = v12 & 0xC;
        }

        goto LABEL_100;
      }

            *(void *)&__src[1] = v14;
            *((void *)&__src[1] + 1) = v15;
            swift_unknownObjectRetain_n();
            swift_unknownObjectRelease();
            if (*(void *)&__src[0])
            {
              *(void *)&id v125 = v14;
              *((void *)&v125 + 1) = v15;
              Calendar.timeZone.setter((uint64_t *)&v125);
              if ((v12 & 1) != 0) {
                goto LABEL_77;
              }
            }

            else
            {
              swift_unknownObjectRelease();
              if ((v12 & 1) != 0) {
                goto LABEL_77;
              }
            }

    specialized _NativeDictionary._insert(at:key:value:)(v9, a3, a1, (void *)v16);
    goto LABEL_76;
  }

  if ((v7 & 1) != 0)
  {
    unsigned int v16 = v8;
    goto LABEL_12;
  }

  int v53 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  unint64_t v37 = static _DictionaryStorage.copy(original:)();
  unsigned int v16 = v37;
  if (!*(void *)(v8 + 16))
  {
LABEL_74:
    swift_bridgeObjectRelease();
    unint64_t v9 = v53;
    if ((v15 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_75;
  }

  unint64_t result = (void *)(v37 + 64);
  id v38 = v8 + 64;
  unsigned int v39 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v40 = 0LL;
  *(void *)(v16 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v8 + 16);
  uint64_t v41 = 1LL << *(_BYTE *)(v8 + 32);
  unsigned int v42 = -1LL;
  if (v41 < 64) {
    unsigned int v42 = ~(-1LL << v41);
  }
  Swift::String v43 = v42 & *(void *)(v8 + 64);
  Swift::String v44 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    if (v43)
    {
      unint64_t v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      uint64_t v46 = v45 | (v40 << 6);
      goto LABEL_51;
    }

    unint64_t v49 = v40 + 1;
    if (__OFADD__(v40, 1LL))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }

    if (v49 >= v44) {
      goto LABEL_74;
    }
    int v50 = *(void *)(v38 + 8 * v49);
    ++v40;
    if (!v50)
    {
      uint64_t v40 = v49 + 1;
      if (v49 + 1 >= v44) {
        goto LABEL_74;
      }
      int v50 = *(void *)(v38 + 8 * v40);
      if (!v50)
      {
        uint64_t v40 = v49 + 2;
        if (v49 + 2 >= v44) {
          goto LABEL_74;
        }
        int v50 = *(void *)(v38 + 8 * v40);
        if (!v50)
        {
          uint64_t v40 = v49 + 3;
          if (v49 + 3 >= v44) {
            goto LABEL_74;
          }
          int v50 = *(void *)(v38 + 8 * v40);
          if (!v50)
          {
            uint64_t v40 = v49 + 4;
            if (v49 + 4 >= v44) {
              goto LABEL_74;
            }
            int v50 = *(void *)(v38 + 8 * v40);
            if (!v50)
            {
              uint64_t v40 = v49 + 5;
              if (v49 + 5 >= v44) {
                goto LABEL_74;
              }
              int v50 = *(void *)(v38 + 8 * v40);
              if (!v50) {
                break;
              }
            }
          }
        }
      }
    }

    specialized _NativeDictionary._insert(at:key:value:)(v9, a3, a1, (void *)v16);
    goto LABEL_76;
  }

  if ((v7 & 1) != 0)
  {
    unsigned int v16 = v8;
    goto LABEL_12;
  }

  unsigned int v51 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
  id v36 = static _DictionaryStorage.copy(original:)();
  unsigned int v16 = v36;
  if (!*(void *)(v8 + 16))
  {
LABEL_74:
    swift_bridgeObjectRelease();
    unint64_t v9 = v51;
    if ((v15 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_75;
  }

  unint64_t result = (void *)(v36 + 64);
  unint64_t v37 = v8 + 64;
  id v38 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  unsigned int v39 = 0LL;
  *(void *)(v16 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v8 + 16);
  uint64_t v40 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v41 = -1LL;
  if (v40 < 64) {
    uint64_t v41 = ~(-1LL << v40);
  }
  unsigned int v42 = v41 & *(void *)(v8 + 64);
  Swift::String v43 = (unint64_t)(v40 + 63) >> 6;
  while (1)
  {
    if (v42)
    {
      Swift::String v44 = __clz(__rbit64(v42));
      v42 &= v42 - 1;
      unint64_t v45 = v44 | (v39 << 6);
      goto LABEL_51;
    }

    int v47 = v39 + 1;
    if (__OFADD__(v39, 1LL))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }

    if (v47 >= v43) {
      goto LABEL_74;
    }
    uint64_t v48 = *(void *)(v37 + 8 * v47);
    ++v39;
    if (!v48)
    {
      unsigned int v39 = v47 + 1;
      if (v47 + 1 >= v43) {
        goto LABEL_74;
      }
      uint64_t v48 = *(void *)(v37 + 8 * v39);
      if (!v48)
      {
        unsigned int v39 = v47 + 2;
        if (v47 + 2 >= v43) {
          goto LABEL_74;
        }
        uint64_t v48 = *(void *)(v37 + 8 * v39);
        if (!v48)
        {
          unsigned int v39 = v47 + 3;
          if (v47 + 3 >= v43) {
            goto LABEL_74;
          }
          uint64_t v48 = *(void *)(v37 + 8 * v39);
          if (!v48)
          {
            unsigned int v39 = v47 + 4;
            if (v47 + 4 >= v43) {
              goto LABEL_74;
            }
            uint64_t v48 = *(void *)(v37 + 8 * v39);
            if (!v48)
            {
              unsigned int v39 = v47 + 5;
              if (v47 + 5 >= v43) {
                goto LABEL_74;
              }
              uint64_t v48 = *(void *)(v37 + 8 * v39);
              if (!v48) {
                break;
              }
            }
          }
        }
      }
    }

              int v50 = (v64 - 1) & v64;
              int v53 = __clz(__rbit64(v64)) + (v47 << 6);
            }

            uint64_t v54 = 16 * v53;
            uint64_t v55 = (uint64_t *)(*(void *)(v68 + 48) + v54);
            unsigned int v57 = *v55;
            int v56 = v55[1];
            unint64_t v58 = (uint64_t *)(*(void *)(v68 + 56) + v54);
            Swift::String v59 = *v58;
            uint64_t v60 = v58[1];
            id v61 = (void *)(*(void *)(v40 + 48) + v54);
            *id v61 = v57;
            v61[1] = v56;
            uint64_t v62 = (void *)(*(void *)(v40 + 56) + v54);
            *uint64_t v62 = v59;
            v62[1] = v60;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
        }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
      swift_release();
      outlined consume of Data._Representation(v165, *((unint64_t *)&v165 + 1));
LABEL_76:
      v50[20] = v71;
      unint64_t v20 = (char *)(v71 & 0x3FFFFFFFFFFFFFFFLL);
      swift_retain();
      swift_release();
      uint64_t v141 = (void *)v50[2];
      if (v141[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          uint64_t v142 = v141[2];
          if (v142)
          {
LABEL_79:
            v141[2] = v142 - 1;
            v50[2] = v141;
            swift_release();
            goto LABEL_80;
          }

    swift_bridgeObjectRelease();
    if (v56[2] == 1LL)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.index(after:)();
      unint64_t v80 = String.subscript.getter();
      uint64_t v82 = v81;
      unint64_t v84 = v83;
      uint64_t v86 = v85;
      swift_bridgeObjectRelease();
      uint64_t v41 = MEMORY[0x186E1B610](v80, v82, v84, v86);
      unsigned int v42 = v87;
      goto LABEL_87;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v88 = swift_allocObject();
    *(_OWORD *)(v88 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    if (!v56[2]) {
      goto LABEL_231;
    }
    uint64_t v89 = (Swift::String *)v88;
    swift_bridgeObjectRetain();
    unint64_t v90 = Substring.lowercased()();
    swift_bridgeObjectRelease();
    v89[2] = v90;
    unint64_t v91 = v56[2];
    if (!v91) {
      goto LABEL_232;
    }
    char v92 = v91 - 1;
    if (v91 == 1)
    {
      swift_bridgeObjectRelease();
      Swift::Int v93 = MEMORY[0x18961AFE8];
    }

    else
    {
      v291 = MEMORY[0x18961AFE8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92, 0);
      Swift::Int v93 = v291;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v94 = (ValueMetadata **)(v56 + 11);
      do
      {
        uint64_t v95 = (uint64_t)*(v94 - 1);
        uint64_t v96 = *v94;
        v292 = *(_OWORD *)(v94 - 3);
        v293 = v95;
        v294 = v96;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        int64_t v97 = String._capitalized()();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        unint64_t v99 = *(void *)(v291 + 16);
        uint64_t v98 = *(void *)(v291 + 24);
        if (v99 >= v98 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v98 > 1,  v99 + 1,  1);
        }
        *(void *)(v291 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v99 + 1;
        *(Swift::String *)(v291 + 16 * v99 + 32) = v97;
        v94 += 4;
        --v92;
      }

      while (v92);
      swift_bridgeObjectRelease();
    }

    specialized Array.append<A>(contentsOf:)(v93);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
    unsigned int v42 = v100;
LABEL_87:
    swift_bridgeObjectRelease();
    if (v38 >> 14)
    {
      uint64_t v101 = String.subscript.getter();
      unint64_t v102 = MEMORY[0x186E1B610](v101);
      unint64_t v104 = v103;
      swift_bridgeObjectRelease();
      *(void *)&v292 = v102;
      *((void *)&v292 + 1) = v104;
      swift_bridgeObjectRetain();
      unint64_t v105 = v41;
      char v106 = v42;
      if (v266 != v283)
      {
        String.append(_:)(*(Swift::String *)&v105);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Swift::String v112 = String.subscript.getter();
        char v113 = MEMORY[0x186E1B610](v112);
        id v115 = v114;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        unint64_t v105 = v113;
        char v106 = v115;
      }

      String.append(_:)(*(Swift::String *)&v105);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned int v42 = *((void *)&v292 + 1);
      uint64_t v41 = v292;
      goto LABEL_94;
    }

    uint64_t v6 = 0LL;
    if (v266 != v283)
    {
      uint64_t v107 = String.subscript.getter();
      char v108 = MEMORY[0x186E1B610](v107);
      uint64_t v110 = v109;
      swift_bridgeObjectRelease();
      *(void *)&v292 = v41;
      *((void *)&v292 + 1) = v42;
      swift_bridgeObjectRetain();
      v111._uint64_t countAndFlagsBits = v108;
      v111._unint64_t object = v110;
      String.append(_:)(v111);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRetain();
    unint64_t v116 = v296;
    id v117 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v292 = v296;
    v296 = 0x8000000000000000LL;
    swift_bridgeObjectRetain();
    char v119 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
    uint64_t v120 = *(void *)(v292 + 16);
    __int128 v121 = (v118 & 1) == 0;
    id v122 = v120 + v121;
    if (__OFADD__(v120, v121)) {
      goto LABEL_225;
    }
    __int128 v123 = v118;
    if (*(void *)(v116 + 24) < v122)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v122, v117);
      __int128 v124 = v292;
      id v125 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
      if ((v123 & 1) != (v126 & 1)) {
        goto LABEL_242;
      }
      char v119 = v125;
      if ((v123 & 1) != 0) {
        goto LABEL_15;
      }
LABEL_102:
      *(void *)(v124 + 8 * (v119 >> 6) + 64) |= 1LL << v119;
      uint64_t v127 = (uint64_t *)(*(void *)(v124 + 48) + 16 * v119);
      *uint64_t v127 = v41;
      v127[1] = v42;
      char v128 = *(void *)(v124 + 56) + 24 * v119;
      *(void *)char v128 = v267;
      *(void *)(v128 + 8) = v269;
      *(_BYTE *)(v128 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v268;
      unint64_t v129 = *(void *)(v124 + 16);
      unint64_t v130 = __OFADD__(v129, 1LL);
      uint64_t v131 = v129 + 1;
      if (v130) {
        goto LABEL_228;
      }
      *(void *)(v124 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v131;
LABEL_16:
      v296 = v124;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v270;
      uint64_t v23 = JSONMap.loadValue(at:)(v270);
      uint64_t v24 = v26;
      uint64_t v25 = v27;
      if (v27 > 0xFDu) {
        goto LABEL_7;
      }
      continue;
    }

    break;
  }

  if ((v117 & 1) != 0)
  {
    __int128 v124 = v116;
    if ((v118 & 1) == 0) {
      goto LABEL_102;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
  uint64_t v132 = static _DictionaryStorage.copy(original:)();
  __int128 v124 = v132;
  if (!*(void *)(v116 + 16))
  {
LABEL_131:
    swift_bridgeObjectRelease();
    if ((v123 & 1) == 0) {
      goto LABEL_102;
    }
    goto LABEL_15;
  }

  v280 = v6;
  uint64_t v133 = (void *)(v132 + 64);
  char v134 = v116 + 64;
  uint64_t v135 = (unint64_t)((1LL << *(_BYTE *)(v124 + 32)) + 63) >> 6;
  uint64_t v136 = 0LL;
  *(void *)(v124 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v116 + 16);
  unint64_t v137 = 1LL << *(_BYTE *)(v116 + 32);
  if (v137 < 64) {
    unint64_t v138 = ~(-1LL << v137);
  }
  else {
    unint64_t v138 = -1LL;
  }
  unint64_t v139 = v138 & *(void *)(v116 + 64);
  unint64_t v140 = (unint64_t)(v137 + 63) >> 6;
  while (2)
  {
    if (v139)
    {
      uint64_t v141 = __clz(__rbit64(v139));
      v139 &= v139 - 1;
      uint64_t v142 = v141 | (v136 << 6);
LABEL_113:
      uint64_t v143 = 16 * v142;
      __int128 v144 = (uint64_t *)(*(void *)(v116 + 48) + 16 * v142);
      uint64_t v146 = *v144;
      unint64_t v145 = v144[1];
      uint64_t v147 = 24 * v142;
      uint64_t v148 = *(void *)(v116 + 56) + v147;
      uint64_t v149 = *(_BYTE *)(v148 + 16);
      uint64_t v150 = (void *)(*(void *)(v124 + 48) + v143);
      uint64_t v151 = *(_OWORD *)v148;
      *uint64_t v150 = v146;
      v150[1] = v145;
      uint64_t v152 = *(void *)(v124 + 56) + v147;
      *(_OWORD *)uint64_t v152 = v151;
      *(_BYTE *)(v152 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v149;
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  uint64_t v153 = v136 + 1;
  if (__OFADD__(v136, 1LL)) {
    goto LABEL_235;
  }
  uint64_t v6 = v280;
  if (v153 >= v140) {
    goto LABEL_131;
  }
  uint64_t v154 = *(void *)(v134 + 8 * v153);
  ++v136;
  if (v154) {
    goto LABEL_130;
  }
  uint64_t v136 = v153 + 1;
  if (v153 + 1 >= v140) {
    goto LABEL_131;
  }
  uint64_t v154 = *(void *)(v134 + 8 * v136);
  if (v154) {
    goto LABEL_130;
  }
  uint64_t v136 = v153 + 2;
  if (v153 + 2 >= v140) {
    goto LABEL_131;
  }
  uint64_t v154 = *(void *)(v134 + 8 * v136);
  if (v154) {
    goto LABEL_130;
  }
  uint64_t v136 = v153 + 3;
  if (v153 + 3 >= v140) {
    goto LABEL_131;
  }
  uint64_t v154 = *(void *)(v134 + 8 * v136);
  if (v154)
  {
LABEL_130:
    unint64_t v139 = (v154 - 1) & v154;
    uint64_t v142 = __clz(__rbit64(v154)) + (v136 << 6);
    goto LABEL_113;
  }

  uint64_t v155 = v153 + 4;
  if (v155 >= v140) {
    goto LABEL_131;
  }
  uint64_t v154 = *(void *)(v134 + 8 * v155);
  if (v154)
  {
    uint64_t v136 = v155;
    goto LABEL_130;
  }

  while (1)
  {
    uint64_t v136 = v155 + 1;
    if (__OFADD__(v155, 1LL)) {
      break;
    }
    if (v136 >= v140) {
      goto LABEL_131;
    }
    uint64_t v154 = *(void *)(v134 + 8 * v136);
    ++v155;
    if (v154) {
      goto LABEL_130;
    }
  }

    swift_bridgeObjectRelease_n();
    goto LABEL_76;
  }

  id v38 = objc_msgSend(v1, sel_pathComponents);
  if (!v38) {
    return MEMORY[0x18961AFE8];
  }
  unsigned int v39 = v38;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v39, sel_copy);
    uint64_t v46 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v41 = specialized _arrayForceCast<A, B>(_:)(v46);

    goto LABEL_122;
  }

  uint64_t v41 = v40;

  return v41;
}

    char v67 = v174[1];
    uint64_t v196 = *v174;
    unint64_t v197 = v67;
    unint64_t v198 = v174[2];
    Swift::String v59 = &v180;
    BigString.utf8.getter();
    BigString.startIndex.getter();
    uint64_t v60 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v62 = v68;
    char v64 = v69;
    unint64_t v66 = v70;
LABEL_76:
    unint64_t result = outlined release of Locale((uint64_t)v59);
    if (v167 != v22[11]) {
      goto LABEL_208;
    }
    if (v38)
    {
      uint64_t v71 = (void *)(v38 + 24 * ((v160 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF));
      Swift::String v72 = v71[3];
      Swift::String v73 = v71[4];
      uint64_t v74 = v71[5];
      outlined retain of AttributedString.Runs((uint64_t)v4);
      uint64_t v168 = v73;
      swift_bridgeObjectRetain();
      uint64_t v161 = v74;
      unint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      unint64_t v75 = v22[8];
      outlined retain of AttributedString.Runs((uint64_t)v4);
      swift_unknownObjectRetain();
      Swift::String v72 = specialized Rope._Node.subscript.getter(v160, v75);
      uint64_t v168 = v76;
      uint64_t v161 = v77;
      unint64_t result = swift_unknownObjectRelease();
    }

    if (v146 >= v60 >> 10) {
      uint64_t v78 = v148;
    }
    else {
      uint64_t v78 = v60;
    }
    if (v146 >= v60 >> 10) {
      Swift::String v79 = v147;
    }
    else {
      Swift::String v79 = v62;
    }
    if (v146 >= v60 >> 10)
    {
      char v64 = v145;
      unint64_t v66 = v144;
    }

    if (__OFADD__(v72, v60 >> 11)) {
      goto LABEL_209;
    }
    else {
      unint64_t v80 = v143;
    }
    uint64_t v81 = v174[1];
    uint64_t v190 = *v174;
    uint64_t v191 = v81;
    uint64_t v192 = v174[2];
    unint64_t result = BigString.utf8.getter();
    if (__OFSUB__(v80, v78 >> 11)) {
      goto LABEL_210;
    }
    uint64_t v82 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v159 = v83;
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    unint64_t result = outlined release of Locale((uint64_t)v181);
    unint64_t v158 = v82;
    if (v82 >> 10 < v78 >> 10) {
      goto LABEL_211;
    }
    uint64_t v154 = v87;
    uint64_t v155 = v85;
    uint64_t v88 = v164;
    uint64_t v89 = v163[8];
    unint64_t v90 = v163[11];
    uint64_t v152 = v163[10];
    uint64_t v153 = v163[9];
    uint64_t v156 = v66;
    uint64_t v157 = v79;
    if (v15 != 1 && v164 == v90)
    {
      if (v173)
      {
        unint64_t v91 = v150;
        outlined retain of AttributedString.Runs((uint64_t)v4);
        if (v89)
        {
          swift_unknownObjectRetain();
          char v92 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v164, v150, v15, v89, v153, v152);
        }

        else
        {
          char v92 = 0LL;
        }
      }

      else
      {
        outlined retain of AttributedString.Runs((uint64_t)v4);
        swift_unknownObjectRetain();
        unint64_t v91 = v150;
        char v92 = v151;
      }

      goto LABEL_165;
    }

    uint64_t v88 = v163[11];
    if (v89) {
      Swift::Int v93 = v163[9];
    }
    else {
      Swift::Int v93 = 0LL;
    }
    uint64_t v94 = v170;
    if (v170 < 0 || v93 < v170) {
      goto LABEL_217;
    }
    if (!v89)
    {
      outlined retain of AttributedString.Runs((uint64_t)v4);
      char v92 = 0LL;
      int v15 = 0LL;
      unint64_t v91 = 0LL;
      unint64_t v90 = v88;
      goto LABEL_165;
    }

    uint64_t v95 = *(unsigned __int8 *)(v89 + 18);
    if (v170 < v163[9])
    {
      if (*(_WORD *)(v89 + 16)) {
        break;
      }
    }

    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v4);
    unint64_t v105 = *(unsigned __int16 *)(v89 + 16);
    char v106 = *(_BYTE *)(v89 + 18);
    swift_unknownObjectRelease_n();
    int v15 = 0LL;
    unint64_t v91 = ((-15LL << ((4 * v106 + 8) & 0x3C)) - 1) & v95 | (unint64_t)(v105 << ((4 * v106 + 8) & 0x3C));
LABEL_164:
    unint64_t v90 = v88;
    swift_unknownObjectRetain();
    char v92 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v88, v91, v15, v89, v153, v152);
    swift_unknownObjectRelease_n();
LABEL_165:
    uint64_t v149 = v90;
    uint64_t v165 = v64;
    unint64_t v176 = v88;
    uint64_t v177 = v91;
    unint64_t v178 = v15;
    if (v15)
    {
      Swift::String v112 = v91;
      char v113 = *(void *)(v15 + 24 * ((v91 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      Swift::String v112 = v91;
      char v113 = specialized Rope._Node.subscript.getter(v91, v89);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t v41 = __OFADD__(v92, v113);
    char v114 = v92 + v113;
    if (v41) {
      goto LABEL_212;
    }
    if (v89)
    {
      id v115 = ((-15LL << ((4 * *(_BYTE *)(v89 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v89 + 18) | ((unint64_t)*(unsigned __int16 *)(v89 + 16) << ((4 * *(_BYTE *)(v89 + 18) + 8) & 0x3C));
      unint64_t result = swift_unknownObjectRetain();
    }

    else
    {
      id v115 = 0LL;
    }

    if (v112 >= v115) {
      goto LABEL_213;
    }
    if (v15)
    {
      unint64_t v116 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
      id v117 = ((v112 >> v116) & 0xF) + 1;
      if (v117 < *(unsigned __int16 *)(v15 + 16))
      {
        uint64_t v14 = (v117 << v116) | ((-15LL << v116) - 1) & v112;
        swift_unknownObjectRelease_n();
        goto LABEL_185;
      }
    }

    char v118 = *(unsigned __int8 *)(v89 + 18);
    char v119 = (4 * v118 + 8) & 0x3C;
    uint64_t v175 = (v112 >> v119) & 0xF;
    if (v118)
    {
      swift_unknownObjectRetain();
      uint64_t v120 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v89 + 24,  (uint64_t *)&v175,  (uint64_t)&v176,  v89,  v118);
      swift_unknownObjectRelease();
      if ((v120 & 1) != 0)
      {
        swift_unknownObjectRelease_n();
        uint64_t v14 = v177;
        goto LABEL_185;
      }
    }

    else
    {
      __int128 v121 = ((v112 >> v119) & 0xF) + 1;
      if (v121 < *(unsigned __int16 *)(v89 + 16))
      {
        uint64_t v14 = (v121 << v119) | ((-15LL << v119) - 1) & v112;
        uint64_t v177 = v14;
        swift_unknownObjectRelease_n();
        unint64_t v178 = v89;
        goto LABEL_185;
      }
    }

    if (v89)
    {
      id v122 = *(unsigned __int8 *)(v89 + 18);
      __int128 v123 = *(unsigned __int16 *)(v89 + 16);
      swift_unknownObjectRelease_n();
      uint64_t v14 = ((-15LL << ((4 * v122 + 8) & 0x3C)) - 1) & v122 | (unint64_t)(v123 << ((4 * v122 + 8) & 0x3C));
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    unint64_t v176 = v149;
    uint64_t v177 = v14;
    unint64_t v178 = 0LL;
LABEL_185:
    uint64_t v13 = v176;
    int v15 = v178;
    if (v173)
    {
      __int128 v124 = v174[1];
      unint64_t v187 = *v174;
      uint64_t v188 = v124;
      unint64_t v189 = v174[2];
      id v125 = &v183;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }

    else
    {
      char v126 = v174[1];
      unint64_t v184 = *v174;
      uint64_t v185 = v126;
      uint64_t v186 = v174[2];
      unint64_t result = BigString.utf8.getter();
      if (__OFSUB__(v114, v151)) {
        goto LABEL_218;
      }
      id v125 = &v182;
    }

    uint64_t v17 = BigString.UTF8View.index(_:offsetBy:)();
    unsigned int v16 = v127;
    unint64_t v171 = v128;
    uint64_t v19 = v129;
    outlined release of Locale((uint64_t)v125);
    unint64_t result = outlined release of AttributedString.Runs((uint64_t)v4);
    *int v21 = v168;
    v21[1] = v161;
    v21[2] = v78;
    void v21[3] = v157;
    unsigned int v22 = v163;
    v21[4] = v165;
    v21[5] = v156;
    v21[6] = v158;
    v21[7] = v159;
    _BYTE v21[8] = v155;
    v21[9] = v154;
    v21[10] = v163;
    a3 = v142;
    if (v162 == v142) {
      goto LABEL_194;
    }
    uint64_t v24 = v170 + 1;
    int v12 = v141;
    if (v170 + 1 == v141)
    {
      uint64_t v4 = v199;
      a3 = v137;
      goto LABEL_196;
    }

    if (v140 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v23 = v162 + 1;
      v21 += 11;
      if (v24 < v141) {
        continue;
      }
    }

    goto LABEL_193;
  }

  if (*(_BYTE *)(v89 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v4);
    unint64_t result = swift_unknownObjectRetain();
    uint64_t v96 = v89;
    while (1)
    {
      uint64_t v98 = *(unsigned __int16 *)(v96 + 16);
      if (!*(_WORD *)(v96 + 16)) {
        goto LABEL_110;
      }
      unint64_t v99 = *(void *)(v96 + 32);
      uint64_t v100 = v94 - v99;
      if (__OFSUB__(v94, v99)) {
        goto LABEL_204;
      }
      if (__OFADD__(v100, 1LL)) {
        goto LABEL_205;
      }
      if (v100 + 1 <= 0)
      {
        uint64_t v98 = 0LL;
      }

      else
      {
        if ((_DWORD)v98 == 1)
        {
          v94 -= v99;
LABEL_110:
          if (v94) {
            goto LABEL_202;
          }
          goto LABEL_111;
        }

        uint64_t v101 = *(void *)(v96 + 56);
        uint64_t v41 = __OFSUB__(v100, v101);
        unint64_t v102 = v100 - v101;
        if (v41) {
          goto LABEL_214;
        }
        if (__OFADD__(v102, 1LL)) {
          goto LABEL_215;
        }
        if (v102 + 1 >= 1)
        {
          if ((_DWORD)v98 != 2)
          {
            uint64_t v103 = (void *)(v96 + 80);
            unint64_t v104 = 2LL;
            while (v98 != v104)
            {
              uint64_t v94 = v102 - *v103;
              if (__OFSUB__(v102, *v103)) {
                goto LABEL_200;
              }
              if (__OFADD__(v94, 1LL)) {
                goto LABEL_201;
              }
              if (v94 + 1 < 1)
              {
                uint64_t v98 = v104;
                uint64_t v94 = v102;
                goto LABEL_111;
              }

              ++v104;
              v103 += 3;
              unint64_t v102 = v94;
              if (v98 == v104) {
                goto LABEL_110;
              }
            }

            goto LABEL_199;
          }

          uint64_t v94 = v102;
          goto LABEL_110;
        }

        uint64_t v98 = 1LL;
        uint64_t v94 = v100;
      }

        Swift::String v44 = v27;
        _qfqp2_init_buffer(v20, (FILE *)_qfqp2in);
        int64_t v3 = &off_18C497000;
        unint64_t v2 = &_qfqp2text;
        uint64_t v19 = yy_buffer_stack;
        unint64_t v20 = *(void *)yy_buffer_stack;
        uint64_t i = *(void *)(*(void *)yy_buffer_stack + 32LL);
        yy_n_chars = i;
        yy_c_buf_p = *(void *)(v20 + 16);
        _qfqp2text = yy_c_buf_p;
        _qfqp2in = *(void *)v20;
        LODWORD(v27) = v44;
        yy_hold_char = *(_BYTE *)yy_c_buf_p;
        unint64_t v30 = 1;
LABEL_76:
        unint64_t v45 = i + (int)v27;
        if (v45 <= *(void *)(v20 + 24))
        {
          int v50 = *(void *)(v20 + 8);
        }

        else
        {
          uint64_t v46 = v45 + (i >> 1);
          int v47 = *(void **)(v20 + 8);
          uint64_t v48 = v19;
          unint64_t v49 = realloc(v47, v46);
          uint64_t v19 = v48;
          int64_t v3 = &off_18C497000;
          unint64_t v2 = &_qfqp2text;
          *(void *)(*(void *)v48 + 8LL) = v49;
          int v50 = *(void *)(*(void *)v48 + 8LL);
          if (!v50)
          {
            uint64_t v78 = (FILE *)*MEMORY[0x1895F89D0];
            Swift::String v79 = "out of dynamic memory in yy_get_next_buffer()";
            goto LABEL_229;
          }
        }

        yy_n_chars = v45;
        *(_BYTE *)(v50 + v45) = 0;
        *(_BYTE *)(v45 + *(void *)(*(void *)v19 + 8LL) + 1) = 0;
        uint64_t v25 = *(char **)(*(void *)v19 + 8LL);
        uint64_t v5 = (const char **)&_qfqp2text;
        _qfqp2text = (uint64_t)v25;
        if (v30 == 1)
        {
          uint64_t v4 = &metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
LABEL_82:
          v2[1] = (uint64_t)v25;
          unsigned int v51 = v4[871];
          if (v51 >= 1) {
            --v51;
          }
          uint64_t v17 = (v51 >> 1) + 117;
          a1 = v84;
          goto LABEL_27;
        }

        if (!v30)
        {
          uint64_t v11 = (uint64_t)&v25[~(_DWORD)v82 + (int)v11];
          v2[1] = v11;
          uint64_t v54 = yy_get_previous_state();
          int64_t v3 = &off_18C497000;
          unint64_t v2 = &_qfqp2text;
          LODWORD(v12) = v54;
          uint64_t v87 = (uint64_t)v25;
          a1 = v84;
          uint64_t v4 = (_DWORD *)&metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
          goto LABEL_16;
        }

        uint64_t v24 = *(_BYTE **)(*(void *)yy_buffer_stack + 8LL);
        unsigned int v22 = yy_n_chars;
        uint64_t v4 = (_DWORD *)&metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
LABEL_88:
        uint64_t v11 = (uint64_t)&v24[v22];
        v2[1] = (uint64_t)&v24[v22];
        previous_state = yy_get_previous_state();
        int64_t v3 = &off_18C497000;
        unint64_t v2 = &_qfqp2text;
        uint64_t v87 = (uint64_t)v25;
        a1 = v84;
        continue;
      case 117:
        return 0LL;
      default:
        yy_fatal_error("fatal flex scanner internal error--no action found");
    }
  }

LABEL_143:
        uint64_t v71 = HIBYTE(v8) & 0xF;
        if ((v8 & 0x2000000000000000LL) == 0) {
          uint64_t v71 = v9 & 0xFFFFFFFFFFFFLL;
        }
        if (v71)
        {
          unint64_t v99 = v9;
          uint64_t v100 = v8;
          MEMORY[0x1895F8858](v45);
          unint64_t v91 = &v99;
          char v92 = 0x80;
          swift_bridgeObjectRetain();
          Swift::String v72 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v90,  v9,  v8);
          if (v73)
          {
            uint64_t v74 = (uint64_t)v72;
            unint64_t v75 = v73;
            swift_bridgeObjectRelease_n();
          }

          else
          {
            unint64_t v76 = v99;
            unint64_t v77 = v100;
            swift_bridgeObjectRetain();
            uint64_t v74 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v76, v77, 0x80u);
            unint64_t v75 = v78;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v74 = 0LL;
          unint64_t v75 = (void *)0xE000000000000000LL;
        }

        v79._uint64_t countAndFlagsBits = v74;
        v79._unint64_t object = v75;
        String.append(_:)(v79);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_151;
      }
    }

                                          swift_bridgeObjectRelease();
                                          uint64_t v1 = v156;
                                          if ((v25 & 1) == 0)
                                          {
LABEL_22:
                                            specialized _NativeDictionary._insert(at:key:value:)( v21,  0x6F6974616C6C6F63LL,  0xE90000000000006ELL,  v159,  v3,  (void *)v26);
LABEL_23:
                                            swift_bridgeObjectRelease();
                                            if (v4)
                                            {
LABEL_24:
                                              Swift::String v32 = v160;
                                              swift_bridgeObjectRetain();
                                              unint64_t v33 = swift_isUniquelyReferenced_nonNull_native();
                                              Swift::Int v35 = specialized __RawDictionaryStorage.find<A>(_:)( 0x79636E6572727563LL,  0xE800000000000000LL);
                                              id v36 = *(void *)(v26 + 16);
                                              unint64_t v37 = (v34 & 1) == 0;
                                              id v38 = v36 + v37;
                                              if (!__OFADD__(v36, v37))
                                              {
                                                unsigned int v39 = v34;
                                                if (*(void *)(v26 + 24) >= v38)
                                                {
                                                  if ((v33 & 1) != 0)
                                                  {
                                                    unint64_t v30 = v26;
                                                    unsigned int v42 = v162;
                                                    if ((v34 & 1) != 0) {
                                                      goto LABEL_28;
                                                    }
                                                    goto LABEL_31;
                                                  }

                                                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
                                                  unint64_t v77 = static _DictionaryStorage.copy(original:)();
                                                  unint64_t v30 = v77;
                                                  if (*(void *)(v26 + 16))
                                                  {
                                                    uint64_t v78 = (void *)(v77 + 64);
                                                    Swift::String v79 = v26 + 64;
                                                    unint64_t v80 = (unint64_t)((1LL << *(_BYTE *)(v30 + 32)) + 63) >> 6;
                                                    uint64_t v81 = 0LL;
                                                    *(void *)(v30 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v26 + 16);
                                                    uint64_t v82 = 1LL << *(_BYTE *)(v26 + 32);
                                                    unint64_t v83 = -1LL;
                                                    if (v82 < 64) {
                                                      unint64_t v83 = ~(-1LL << v82);
                                                    }
                                                    unint64_t v84 = v83 & *(void *)(v26 + 64);
                                                    uint64_t v85 = (unint64_t)(v82 + 63) >> 6;
                                                    while (1)
                                                    {
                                                      if (v84)
                                                      {
                                                        uint64_t v86 = __clz(__rbit64(v84));
                                                        v84 &= v84 - 1;
                                                        uint64_t v87 = v86 | (v81 << 6);
                                                      }

                                                      else
                                                      {
                                                        int64_t v97 = v81 + 1;
                                                        if (__OFADD__(v81, 1LL)) {
                                                          goto LABEL_185;
                                                        }
                                                        if (v97 >= v85) {
                                                          break;
                                                        }
                                                        uint64_t v98 = *(void *)(v79 + 8 * v97);
                                                        ++v81;
                                                        if (!v98)
                                                        {
                                                          uint64_t v81 = v97 + 1;
                                                          if (v97 + 1 >= v85) {
                                                            break;
                                                          }
                                                          uint64_t v98 = *(void *)(v79 + 8 * v81);
                                                          if (!v98)
                                                          {
                                                            uint64_t v81 = v97 + 2;
                                                            if (v97 + 2 >= v85) {
                                                              break;
                                                            }
                                                            uint64_t v98 = *(void *)(v79 + 8 * v81);
                                                            if (!v98)
                                                            {
                                                              uint64_t v81 = v97 + 3;
                                                              if (v97 + 3 >= v85) {
                                                                break;
                                                              }
                                                              uint64_t v98 = *(void *)(v79 + 8 * v81);
                                                              if (!v98)
                                                              {
                                                                uint64_t v81 = v97 + 4;
                                                                if (v97 + 4 >= v85) {
                                                                  break;
                                                                }
                                                                uint64_t v98 = *(void *)(v79 + 8 * v81);
                                                                if (!v98)
                                                                {
                                                                  uint64_t v81 = v97 + 5;
                                                                  if (v97 + 5 >= v85) {
                                                                    break;
                                                                  }
                                                                  uint64_t v98 = *(void *)(v79 + 8 * v81);
                                                                  if (!v98)
                                                                  {
                                                                    uint64_t v81 = v97 + 6;
                                                                    if (v97 + 6 >= v85) {
                                                                      break;
                                                                    }
                                                                    uint64_t v98 = *(void *)(v79 + 8 * v81);
                                                                    if (!v98)
                                                                    {
                                                                      unint64_t v99 = v97 + 7;
                                                                      if (v99 >= v85) {
                                                                        break;
                                                                      }
                                                                      uint64_t v100 = v1;
                                                                      uint64_t v98 = *(void *)(v79 + 8 * v99);
                                                                      if (!v98)
                                                                      {
                                                                        while (1)
                                                                        {
                                                                          uint64_t v81 = v99 + 1;
                                                                          if (__OFADD__(v99, 1LL)) {
                                                                            break;
                                                                          }
                                                                          uint64_t v1 = v100;
                                                                          if (v81 >= v85) {
                                                                            goto LABEL_145;
                                                                          }
                                                                          uint64_t v98 = *(void *)(v79 + 8 * v81);
                                                                          ++v99;
                                                                          if (v98) {
                                                                            goto LABEL_110;
                                                                          }
                                                                        }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v88 = *(void *)(v36 + 16);
    if (HIDWORD(v88)) {
      goto LABEL_162;
    }
    _So9NSDecimala__length_setter(v88, &v124);
    LODWORD(v121) = v60;
    WORD2(v121) = v101;
    HIWORD(v121) = v117;
    LOWORD(v122) = v115;
    WORD1(v122) = v111;
    WORD2(v122) = v109;
    HIWORD(v122) = v107;
    LOWORD(v123) = v105;
    HIWORD(v123) = v113;
    uint64_t v89 = _So9NSDecimala__isNegative_getter(&v121);
    _So9NSDecimala__isNegative_setter(v89, &v124);
    v81._rawValue = (void *)v36;
LABEL_145:
    NSDecimal.copyVariableLengthInteger(_:)(v81);
    if (v90)
    {
      unint64_t v30 = v90;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }

    swift_bridgeObjectRelease();
LABEL_148:
    _So9NSDecimala__isCompact_setter_0(0LL, &v124);
    NSDecimal.compact()();
    uint64_t v17 = v124;
    LOWORD(v6) = WORD2(v124);
    LOWORD(v7) = HIWORD(v124);
    LOWORD(v8) = v125;
    LOWORD(v9) = WORD1(v125);
    LOWORD(v10) = WORD2(v125);
    LOWORD(v11) = HIWORD(v125);
    LOWORD(v5) = v126;
    LOWORD(v18) = HIWORD(v126);
    goto LABEL_17;
  }

  id v61 = 0LL;
LABEL_123:
  if (v61 <= v46) {
    uint64_t v85 = v46;
  }
  else {
    uint64_t v85 = v61;
  }
  do
  {
    if (v85 == v61)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }

    if (v61 >= *(void *)(v36 + 16)) {
      goto LABEL_151;
    }
    v45[v61] = *(_WORD *)(v41 + 32 + 2 * v61);
    ++v61;
  }

  while ((uint64_t)v61 < (uint64_t)v46);
  LODWORD(v59) = 1;
LABEL_130:
  if ((uint64_t)v61 < (uint64_t)v47)
  {
    while (1)
    {
LABEL_131:
      if (v61 >= v47) {
        goto LABEL_158;
      }
      uint64_t v46 = *(void *)(v36 + 16);
      if (v61 < v46) {
        break;
      }
LABEL_136:
      __break(1u);
LABEL_137:
      LODWORD(v59) = HIWORD(v43);
      id v61 = v46;
    }

    uint64_t v86 = v59 + (*(unsigned __int16 *)(v6 + 32 + 2 * v61) ^ 0xFFFF);
    --v47;
    uint64_t v46 = v6 + 34;
    while (1)
    {
      LODWORD(v59) = HIWORD(v86);
      v45[v61] = v86;
      if (v47 == v61) {
        break;
      }
      uint64_t v86 = v59 + (*(unsigned __int16 *)(v46 + 2 * v61++) ^ 0xFFFF);
      if (v61 >= *(void *)(v36 + 16)) {
        goto LABEL_136;
      }
    }
  }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v96 = *(void *)(v57 + 16);
    if (HIDWORD(v96)) {
      goto LABEL_162;
    }
    _So9NSDecimala__length_setter(v96, &v134);
    *(_DWORD *)unint64_t v129 = v72;
    *(_WORD *)&v129[4] = v99;
    *(_WORD *)&v129[6] = v77;
    *(_WORD *)&v129[8] = v70;
    LOWORD(v130) = v73;
    HIWORD(v130) = v51;
    uint64_t v131 = v119;
    uint64_t v132 = v117;
    uint64_t v133 = v71;
LABEL_145:
    int64_t v97 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v97, &v134);
    v82._rawValue = (void *)v57;
    goto LABEL_146;
  }

  uint64_t v78 = 0LL;
LABEL_123:
  if (v78 <= v59) {
    Swift::Int v93 = v59;
  }
  else {
    Swift::Int v93 = v78;
  }
  do
  {
    if (v93 == v78)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }

    if (v78 >= *(void *)(v57 + 16)) {
      goto LABEL_151;
    }
    v58[v78] = *(_WORD *)(v28 + 32 + 2 * v78);
    ++v78;
  }

  while ((uint64_t)v78 < (uint64_t)v59);
  LODWORD(v76) = 1;
LABEL_130:
  if ((uint64_t)v78 < (uint64_t)v60)
  {
    while (1)
    {
LABEL_131:
      if (v78 >= v60) {
        goto LABEL_158;
      }
      Swift::String v59 = *(void *)(v57 + 16);
      if (v78 < v59) {
        break;
      }
LABEL_136:
      __break(1u);
LABEL_137:
      LODWORD(v76) = HIWORD(v56);
      uint64_t v78 = v59;
    }

    uint64_t v94 = v76 + (*(unsigned __int16 *)(v7 + 32 + 2 * v78) ^ 0xFFFF);
    --v60;
    Swift::String v59 = v7 + 34;
    while (1)
    {
      LODWORD(v76) = HIWORD(v94);
      v58[v78] = v94;
      if (v60 == v78) {
        break;
      }
      uint64_t v94 = v76 + (*(unsigned __int16 *)(v59 + 2 * v78++) ^ 0xFFFF);
      if (v78 >= *(void *)(v57 + 16)) {
        goto LABEL_136;
      }
    }
  }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v96 = *(void *)(v57 + 16);
    if (HIDWORD(v96)) {
      goto LABEL_162;
    }
    _So9NSDecimala__length_setter(v96, &v134);
    *(_DWORD *)unint64_t v129 = v72;
    *(_WORD *)&v129[4] = v99;
    *(_WORD *)&v129[6] = v77;
    *(_WORD *)&v129[8] = v70;
    LOWORD(v130) = v73;
    HIWORD(v130) = v51;
    uint64_t v131 = v119;
    uint64_t v132 = v117;
    uint64_t v133 = v71;
LABEL_145:
    int64_t v97 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v97, &v134);
    v82._rawValue = (void *)v57;
    goto LABEL_146;
  }

  uint64_t v78 = 0LL;
LABEL_123:
  if (v78 <= v59) {
    Swift::Int v93 = v59;
  }
  else {
    Swift::Int v93 = v78;
  }
  do
  {
    if (v93 == v78)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }

    if (v78 >= *(void *)(v57 + 16)) {
      goto LABEL_151;
    }
    v58[v78] = *(_WORD *)(v28 + 32 + 2 * v78);
    ++v78;
  }

  while ((uint64_t)v78 < (uint64_t)v59);
  LODWORD(v76) = 1;
LABEL_130:
  if ((uint64_t)v78 < (uint64_t)v60)
  {
    while (1)
    {
LABEL_131:
      if (v78 >= v60) {
        goto LABEL_158;
      }
      Swift::String v59 = *(void *)(v57 + 16);
      if (v78 < v59) {
        break;
      }
LABEL_136:
      __break(1u);
LABEL_137:
      LODWORD(v76) = HIWORD(v56);
      uint64_t v78 = v59;
    }

    uint64_t v94 = v76 + (*(unsigned __int16 *)(v7 + 32 + 2 * v78) ^ 0xFFFF);
    --v60;
    Swift::String v59 = v7 + 34;
    while (1)
    {
      LODWORD(v76) = HIWORD(v94);
      v58[v78] = v94;
      if (v60 == v78) {
        break;
      }
      uint64_t v94 = v76 + (*(unsigned __int16 *)(v59 + 2 * v78++) ^ 0xFFFF);
      if (v78 >= *(void *)(v57 + 16)) {
        goto LABEL_136;
      }
    }
  }

      outlined destroy of Any?((uint64_t)v297, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v298, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v237);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v242);
      outlined destroy of Any?( (uint64_t)&v243,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v253,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      unint64_t result = outlined destroy of Any?( (uint64_t)&v258,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v115 & 1) == 0) {
        goto LABEL_175;
      }
LABEL_144:
      v114 += 2;
      ++v113;
      char v108 = v235;
      if (v116 == v91)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v8 = v217;
        uint64_t v86 = *(uint64_t **)(v217 + 64);
        unint64_t v90 = *(void *)(v217 + 88);
        unint64_t v66 = v204;
        __int128 v218 = v205;
        uint64_t v89 = v225;
        v243 = v225;
        v244 = v204;
        char v67 = (uint64_t)v203;
        v245 = v203;
        unint64_t v26 = __OFADD__(v216++, 1LL);
        Swift::String v44 = v208;
        if (!v26) {
          goto LABEL_113;
        }
        __break(1u);
LABEL_173:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v242);
LABEL_174:
        outlined destroy of Any?( (uint64_t)&v243,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v253, v86);
        outlined destroy of Any?((uint64_t)&v258, v86);
LABEL_175:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v8 = v217;
        Swift::String v44 = v208;
        char v67 = v215;
        goto LABEL_176;
      }
    }
  }

  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
LABEL_176:
  uint64_t v135 = v219;
  if (v214 != *(void *)(v8 + 88)) {
    goto LABEL_263;
  }
  if (v67)
  {
    uint64_t v136 = *(void *)(v67 + 24 * ((v219 >> ((4 * *(_BYTE *)(v67 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v137 = *(void *)(v8 + 64);
    swift_unknownObjectRetain();
    uint64_t v136 = specialized Rope._Node.subscript.getter(v135, v137);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v138 = v218 + v136;
  if (__OFADD__(v218, v136)) {
    goto LABEL_264;
  }
  unint64_t v139 = v44[1];
  uint64_t v237 = *v44;
  unint64_t v238 = v139;
  unint64_t v239 = v44[2];
  BigString.utf8.getter();
  unint64_t result = v192;
  if (__OFSUB__(v138, v192 >> 11))
  {
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
    goto LABEL_272;
  }

  unint64_t v140 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v142 = v141;
  __int128 v144 = v143;
  uint64_t v146 = v145;
  unint64_t result = outlined release of Locale((uint64_t)v289);
  if (v200 >= v140 >> 10) {
    uint64_t v147 = v140;
  }
  else {
    uint64_t v147 = v224;
  }
  if (v200 >= v140 >> 10)
  {
    uint64_t v148 = v144;
  }

  else
  {
    uint64_t v142 = v213;
    uint64_t v148 = v212;
  }

  if (v200 >= v140 >> 10) {
    uint64_t v149 = v146;
  }
  else {
    uint64_t v149 = v211;
  }
  uint64_t v150 = *v44;
  uint64_t v151 = v44[2];
  v298[1] = v44[1];
  v298[2] = v151;
  v298[0] = v150;
  uint64_t v152 = v201;
  if (v147 >> 10 < v201) {
    goto LABEL_266;
  }
  *(void *)&__int128 v258 = v229;
  *((void *)&v258 + 1) = v222;
  *(void *)&__int128 v259 = v221;
  *((void *)&v259 + 1) = v220;
  *(void *)&uint64_t v260 = v147;
  *((void *)&v260 + 1) = v142;
  *(void *)&v261 = v148;
  *((void *)&v261 + 1) = v149;
  uint64_t v153 = v196;
  uint64_t v154 = *(void *)(v196 + 16);
  unint64_t v235 = v148;
  if (!v154 || v201 == v147 >> 10) {
    goto LABEL_206;
  }
  uint64_t v155 = v142;
  outlined retain of Locale((uint64_t)v298);
  swift_bridgeObjectRetain();
  uint64_t v156 = 40LL;
  uint64_t v157 = v154;
  while (*(void *)(v153 + v156))
  {
    swift_bridgeObjectRelease();
    v156 += 16LL;
    if (!--v157)
    {
      swift_bridgeObjectRelease();
      uint64_t v142 = v155;
      unint64_t v158 = v235;
      goto LABEL_201;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v290);
  *(void *)&__int128 v253 = v229;
  *((void *)&v253 + 1) = v222;
  *(void *)&__int128 v254 = v221;
  *((void *)&v254 + 1) = v220;
  *(void *)&__int128 v255 = v229;
  *((void *)&v255 + 1) = v222;
  *(void *)&__int128 v256 = v221;
  *((void *)&v256 + 1) = v220;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, &v253, &v243);
  unint64_t result = outlined release of Locale((uint64_t)&v293);
  uint64_t v142 = v155;
  unint64_t v158 = v235;
  if (v250 != (uint64_t *)2)
  {
    uint64_t v147 = v247;
    if (v152 > v247 >> 10) {
      goto LABEL_280;
    }
    uint64_t v142 = v248;
    unint64_t v158 = v249;
    uint64_t v149 = v250;
  }

    __break(1u);
    goto LABEL_144;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_113:
  char v92 = *(_OWORD *)(v15 + 32);
  uint64_t v150 = *(_OWORD *)(v15 + 16);
  uint64_t v151 = v92;
  uint64_t v152 = *(_OWORD *)(v15 + 48);
  unint64_t result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v122, v121)) {
    goto LABEL_134;
  }
  Swift::Int v93 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v95 = v94;
  int64_t v97 = v96;
  unint64_t v99 = v98;
  outlined release of Locale((uint64_t)&v141);
  unint64_t result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v165);
  uint64_t v100 = v115;
  if (v116 < v93 >> 10) {
    uint64_t v100 = v93;
  }
  if (v114 < v100 >> 10)
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }

  uint64_t v101 = v116 >= v93 >> 10;
  unint64_t v102 = v112;
  uint64_t v103 = v113;
  if (v116 < v93 >> 10)
  {
    unint64_t v102 = v99;
    uint64_t v103 = v95;
  }

  *a2 = v100;
  a2[1] = v103;
  unint64_t v104 = *((void *)&v113 + 1);
  if (!v101) {
    unint64_t v104 = v97;
  }
  a2[2] = v104;
  a2[3] = v102;
  return result;
}

    __break(1u);
    goto LABEL_144;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_113:
  uint64_t v88 = *(_OWORD *)(v11 + 32);
  uint64_t v148 = *(_OWORD *)(v11 + 16);
  uint64_t v149 = v88;
  uint64_t v150 = *(_OWORD *)(v11 + 48);
  unint64_t result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v122, v119)) {
    goto LABEL_134;
  }
  uint64_t v89 = BigString.UTF8View.index(_:offsetBy:)();
  unint64_t v91 = v90;
  Swift::Int v93 = v92;
  uint64_t v95 = v94;
  outlined release of Locale((uint64_t)&v139);
  unint64_t result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v163);
  uint64_t v96 = v117;
  if (v118 < v89 >> 10) {
    uint64_t v96 = v89;
  }
  if (v116 < v96 >> 10)
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }

  int64_t v97 = v118 >= v89 >> 10;
  uint64_t v98 = v109;
  unint64_t v99 = v110;
  if (v118 < v89 >> 10)
  {
    uint64_t v98 = v95;
    unint64_t v99 = v91;
  }

  uint64_t v100 = v111;
  *Swift::String v111 = v96;
  v100[1] = v99;
  uint64_t v101 = *((void *)&v110 + 1);
  if (!v97) {
    uint64_t v101 = v93;
  }
  v100[2] = v101;
  v100[3] = v98;
  return result;
}

                              swift_release();
LABEL_144:
                              MEMORY[0x186E20E60](v75, -1LL, -1LL);
                              return v20;
                            }
                          }
                        }

                      unsigned int v57 = 3LL;
                      goto LABEL_149;
                    }

                uint64_t v88 = (v99 - 1) & v99;
                unint64_t v90 = v100;
                unint64_t v91 = __clz(__rbit64(v99)) + (v100 << 6);
              }

              char v92 = 16 * v91;
              Swift::Int v93 = (void *)(*(void *)(v145 + 48) + 16 * v91);
              uint64_t v94 = v93[1];
              uint64_t v95 = 8 * v91;
              uint64_t v96 = *(void *)(*(void *)(v145 + 56) + v95);
              int64_t v97 = (void *)(*(void *)(v135 + 48) + v92);
              *int64_t v97 = *v93;
              v97[1] = v94;
              *(void *)(*(void *)(v135 + 56) + v95) = v96;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              Swift::String v70 = v133;
              uint64_t v85 = v90;
            }
          }

    __break(1u);
    goto LABEL_144;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_113:
  unint64_t v90 = *(_OWORD *)(v14 + 32);
  uint64_t v150 = *(_OWORD *)(v14 + 16);
  uint64_t v151 = v90;
  uint64_t v152 = *(_OWORD *)(v14 + 48);
  unint64_t result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v124, v121)) {
    goto LABEL_134;
  }
  unint64_t v91 = BigString.UTF8View.index(_:offsetBy:)();
  Swift::Int v93 = v92;
  uint64_t v95 = v94;
  int64_t v97 = v96;
  outlined release of Locale((uint64_t)&v141);
  unint64_t result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v166);
  uint64_t v98 = v115;
  if (v116 < v91 >> 10) {
    uint64_t v98 = v91;
  }
  if (v114 < v98 >> 10)
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }

  unint64_t v99 = v116 >= v91 >> 10;
  uint64_t v100 = v111;
  uint64_t v101 = v112;
  if (v116 < v91 >> 10)
  {
    uint64_t v100 = v97;
    uint64_t v101 = v93;
  }

  unint64_t v102 = v113;
  void *v113 = v98;
  v102[1] = v101;
  uint64_t v103 = *((void *)&v112 + 1);
  if (!v99) {
    uint64_t v103 = v95;
  }
  v102[2] = v103;
  v102[3] = v100;
  return result;
}

      if (v17 != @"PossibleClasses"
        && v17 != @"Script"
        && v17 != @"Lemma"
        && v17 != @"Language"
        && v17 != @"NameTypeOrLexicalClass"
        && v17 != @"LexicalClass"
        && v17 != @"NameType")
      {
        p_location = &v122->location;
LABEL_197:
        uint64_t v101 = 0LL;
        Swift::String v32 = 0LL;
        sentenceRange = v119;
LABEL_198:
        if (v120)
        {
          unint64_t v102 = v23;
          if (v101) {
            uint64_t v103 = v101;
          }
          else {
            uint64_t v103 = MEMORY[0x189604A58];
          }
          unint64_t v104 = v24;
          unint64_t v105 = [MEMORY[0x189603F18] arrayWithArray:v103];
          uint64_t v24 = v104;
          *uint64_t v120 = (NSArray *)v105;
          uint64_t v23 = v102;
        }

        goto LABEL_24;
      }

      id v115 = v23;
      unint64_t v116 = v24;
      uint64_t v68 = orthographyArray;
      char v69 = [orthographyArray count];
      Swift::String v70 = *((unsigned __int8 *)v37 + 2);
      uint64_t v71 = malloc(2 * v70);
      if (v71)
      {
        Swift::String v72 = v71;
        -[NSString getCharacters:range:](string, "getCharacters:range:", v71, v21 + *v37, v70);
        Swift::String v73 = NSOrthographyScriptIndexForCharacters((uint64_t)v72, *((unsigned __int8 *)v37 + 2), 0LL);
        free(v72);
      }

      else
      {
        Swift::String v73 = 0LL;
      }

      if (v21 + (unint64_t)*v37 >= v69)
      {
        unint64_t v75 = 0LL;
      }

      else
      {
        uint64_t v74 = objc_msgSend(v68, "objectAtIndex:effectiveRange:");
        if ((objc_opt_isKindOfClass() & 1) != 0) {
          unint64_t v75 = (void *)v74;
        }
        else {
          unint64_t v75 = 0LL;
        }
      }

      if (v73 == 2)
      {
        unint64_t v76 = (void *)[v75 allScripts];
        unint64_t v77 = @"Jpan";
        if (([v76 containsObject:@"Jpan"] & 1) == 0)
        {
          unint64_t v77 = @"Kore";
          if (([v76 containsObject:@"Kore"] & 1) == 0)
          {
            unint64_t v77 = @"Hans";
            if (([v76 containsObject:@"Hans"] & 1) == 0)
            {
              else {
                unint64_t v77 = @"Hani";
              }
            }
          }
        }
      }

      else
      {
        if (v73 < 2) {
          goto LABEL_195;
        }
        uint64_t v78 = v73 - 32 >= 0xFFFFFFFFFFFFFFE1LL ? ((_DWORD)v73 << 27) | 0x84202 : 0;
        unint64_t v77 = NSOrthographyDominantScriptForFlags(v78);
        if (!v77) {
          goto LABEL_195;
        }
      }

      if (v17 == @"Lemma")
      {
        uint64_t v94 = (__CFString *)[v75 dominantLanguageForScript:v77];
        uint64_t v95 = -[__CFString isEqual:](v94, "isEqual:", @"ja");
        uint64_t v96 = v21 + *v37;
        if (v95)
        {
          int64_t v97 = -[NSString substringWithRange:]( string,  "substringWithRange:",  v96 + *((unsigned __int8 *)v37 + 8),  *((unsigned __int8 *)v37 + 9));
        }

        else
        {
          unint64_t v99 = *((unsigned __int8 *)v37 + 2);
          LXLemmatizer = getLXLemmatizer(v94);
          int64_t v97 = lemmatizerLemmaForStringWithCategory( (uint64_t)LXLemmatizer,  -[NSString substringWithRange:](string, "substringWithRange:", v96, v99),  *((unsigned __int8 *)v37 + 3));
        }
      }

      else
      {
        if (v17 == @"Language")
        {
          uint64_t v98 = [v75 dominantLanguageForScript:v77];
          if (v98) {
            uint64_t v31 = (const __CFString *)v98;
          }
          else {
            uint64_t v31 = @"und";
          }
          goto LABEL_195;
        }

        p_location = &v122->location;
        if (v17 == @"Script")
        {
          uint64_t v31 = v77;
          goto LABEL_196;
        }

        if (v17 != @"PossibleClasses"
          && v17 != @"NameTypeOrLexicalClass"
          && v17 != @"LexicalClass"
          && v17 != @"NameType")
        {
          goto LABEL_196;
        }

        Swift::String v79 = *v37;
        unint64_t v80 = *((unsigned __int8 *)v37 + 2);
        uint64_t v81 = getLXLemmatizer((__CFString *)[v75 dominantLanguageForScript:v77]);
        if (!v81)
        {
          p_location = &v122->location;
          uint64_t v24 = v116;
          uint64_t v23 = v115;
          if (v17 != @"PossibleClasses") {
            goto LABEL_197;
          }
          char v106 = *((unsigned __int8 *)v37 + 3);
          if ((v106 & 0xFFFFFFFFFFFFFFFBLL) == 0x43
            || (v106 - 30) <= 0x2D && ((1LL << (v106 - 30)) & 0x2CC000000003LL) != 0)
          {
            uint64_t v31 = @"Noun";
            goto LABEL_197;
          }

          if ((v106 & 0xFE) == 0x20)
          {
            uint64_t v31 = @"Noun";
          }

          else
          {
            char v113 = v106 - 16;
            if (v113 > 0x47u) {
              uint64_t v31 = @"OtherWord";
            }
            else {
              uint64_t v31 = off_189CA25E0[(char)v113];
            }
          }

          goto LABEL_195;
        }

        uint64_t v82 = (uint64_t)v81;
        unint64_t v83 = v21 + v79;
        unint64_t v84 = (void *)[MEMORY[0x189603FC8] dictionary];
        lemmatizerAddTagsForString( v82,  -[NSString substringWithRange:](string, "substringWithRange:", v83, v80),  (uint64_t)v84);
        uint64_t v85 = (void *)[v84 keysSortedByValueUsingComparator:&__block_literal_global_455];
        uint64_t v86 = v85;
        if (v17 != @"PossibleClasses")
        {
          char v118 = [MEMORY[0x189603F18] arrayWithArray:v85];
          uint64_t v87 = (void *)[MEMORY[0x189603FA8] array];
          uint64_t v133 = 0u;
          char v134 = 0u;
          uint64_t v135 = 0u;
          uint64_t v136 = 0u;
          uint64_t v88 = [v86 countByEnumeratingWithState:&v133 objects:v132 count:16];
          if (v88)
          {
            uint64_t v89 = v88;
            unint64_t v90 = 0LL;
            unint64_t v91 = *(void *)v134;
            do
            {
              for (uint64_t i = 0LL; i != v89; ++i)
              {
                if (*(void *)v134 != v91) {
                  objc_enumerationMutation(v86);
                }
                v90 += objc_msgSend( (id)objc_msgSend(v84, "objectForKey:", *(void *)(*((void *)&v133 + 1) + 8 * i)),  "integerValue");
              }

              uint64_t v89 = [v86 countByEnumeratingWithState:&v133 objects:v132 count:16];
            }

            while (v89);
            Swift::Int v93 = (float)v90;
          }

          else
          {
            Swift::Int v93 = 0.0;
          }

          unint64_t v130 = 0u;
          uint64_t v131 = 0u;
          char v128 = 0u;
          unint64_t v129 = 0u;
          uint64_t v107 = [v86 countByEnumeratingWithState:&v128 objects:v127 count:16];
          if (v107)
          {
            char v108 = v107;
            uint64_t v109 = *(void *)v129;
            do
            {
              for (j = 0LL; j != v108; ++j)
              {
                if (*(void *)v129 != v109) {
                  objc_enumerationMutation(v86);
                }
                *(float *)&Swift::String v111 = (float)objc_msgSend( (id)objc_msgSend( v84,  "objectForKey:",  *(void *)(*((void *)&v128 + 1) + 8 * j)),  "integerValue")
                                / v93;
                objc_msgSend( v87,  "addObject:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v111));
              }

              char v108 = [v86 countByEnumeratingWithState:&v128 objects:v127 count:16];
            }

            while (v108);
          }

          uint64_t v101 = [MEMORY[0x189603F18] arrayWithArray:v87];
          if (v118) {
            Swift::String v32 = (NSArray *)objc_msgSend(MEMORY[0x189603F18], "arrayWithArray:");
          }
          else {
            Swift::String v32 = 0LL;
          }
          sentenceRange = v119;
          p_location = &v122->location;
          uint64_t v24 = v116;
          uint64_t v23 = v115;
          goto LABEL_198;
        }

        int64_t v97 = (NSString *)[v85 componentsJoinedByString:@"/"];
      }

      uint64_t v31 = (const __CFString *)v97;
LABEL_195:
      p_location = &v122->location;
LABEL_196:
      uint64_t v24 = v116;
      uint64_t v23 = v115;
      goto LABEL_197;
    }

    unsigned int v42 = v22;
    if (v38 < v20) {
      unsigned int v42 = v37[8];
    }
    Swift::String v43 = (char *)scores + v39;
    Swift::String v44 = v42 >= (unint64_t)v43;
    unint64_t v45 = (NSArray **)(v42 - (void)v43);
    if (v45 == 0LL || !v44) {
      goto LABEL_45;
    }
    tokenRange = v40;
    scores = v45;
LABEL_45:
    v37 += 8;
    ++v38;
    if (!--v36)
    {
      Swift::String v32 = 0LL;
      sentenceRange = v119;
      goto LABEL_48;
    }
  }

  if (v17 == @"NameType"
    || v17 == @"LexicalClass"
    || v17 == @"NameTypeOrLexicalClass"
    || v17 == @"PossibleClasses"
    || v17 == @"InternalClass")
  {
    unsigned int v57 = @"Whitespace";
  }

  else
  {
    unsigned int v57 = 0LL;
  }

  if (v17 == @"TokenType") {
    uint64_t v31 = @"Whitespace";
  }
  else {
    uint64_t v31 = v57;
  }
  Swift::String v32 = 0LL;
  tokenRange = v40;
  scores = v45;
  sentenceRange = v119;
LABEL_23:
  p_location = &v122->location;
LABEL_24:
  if (v31 && !v32)
  {
    unint64_t v34 = v23;
    Swift::Int v35 = v24;
    Swift::String v32 = (NSArray *)[MEMORY[0x189603F18] arrayWithObject:v31];
    if (v120) {
      *uint64_t v120 = (NSArray *)[MEMORY[0x189603F18] arrayWithObject:v121];
    }
    uint64_t v24 = v35;
    uint64_t v23 = v34;
  }

LABEL_142:
    v70._uint64_t countAndFlagsBits = v9;
    v70._unint64_t object = (void *)v8;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_152:
    uint64_t v81 = v101;
    unint64_t v80 = v102;
    uint64_t v82 = v103;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v82 + 16) + 1LL,  1);
      uint64_t v82 = v103;
    }

    unint64_t v84 = *(void *)(v82 + 16);
    unint64_t v83 = *(void *)(v82 + 24);
    if (v84 >= v83 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
      uint64_t v82 = v103;
    }

    ++v4;
    *(void *)(v82 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v84 + 1;
    uint64_t v85 = v82 + 16 * v84;
    *(void *)(v85 + 32) = v81;
    *(void *)(v85 + 40) = v80;
    if (v4 == v97)
    {
      uint64_t v101 = v82;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
      uint64_t v86 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v88 = v87;
      swift_release();
      uint64_t v89 = v95;
      swift_bridgeObjectRelease();
      *(void *)(v89 + 120) = v86;
      *(void *)(v89 + 128) = v88;
      return;
    }
  }

  if ((v7 & 0x2000000000000000LL) != 0) {
    unint64_t v65 = HIBYTE(v7) & 0xF;
  }
  else {
    unint64_t v65 = v6 & 0xFFFFFFFFFFFFLL;
  }
  Swift::Int v93 = (unsigned __int16 *)(4LL << ((v6 & 0x800000000000000LL) != 0));
  uint64_t v94 = 4 * v65;
  unint64_t v66 = 15LL;
  while (1)
  {
    if (v94 == v66 >> 14) {
      goto LABEL_137;
    }
    if (v65 <= v66 >> 16) {
      goto LABEL_160;
    }
    char v67 = String.UTF8View._foreignSubscript(position:)();
LABEL_131:
    uint64_t v68 = String.UTF8View._foreignIndex(after:)();
    if ((v67 & 0x80) == 0)
    {
      unint64_t v66 = v68;
      if ((UInt8.allowedURLComponents.getter(v67) & 0x80) != 0) {
        continue;
      }
    }

    goto LABEL_75;
  }

  if (v65 > (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v66, v6, v7) >> 16)
  {
    char v67 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_131;
  }

  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

                                                            char v108 = (v122 - 1) & v122;
                                                            Swift::String v111 = __clz(__rbit64(v122)) + (v105 << 6);
                                                          }

                                                          Swift::String v112 = 16 * v111;
                                                          char v113 = (uint64_t *)(*(void *)(v30 + 48) + v112);
                                                          id v115 = *v113;
                                                          char v114 = v113[1];
                                                          unint64_t v116 = (uint64_t *)(*(void *)(v30 + 56) + v112);
                                                          id v117 = *v116;
                                                          char v118 = v116[1];
                                                          char v119 = (void *)(*(void *)(v51 + 48) + v112);
                                                          char *v119 = v115;
                                                          v119[1] = v114;
                                                          uint64_t v120 = (void *)(*(void *)(v51 + 56) + v112);
                                                          *uint64_t v120 = v117;
                                                          v120[1] = v118;
                                                          swift_bridgeObjectRetain();
                                                          swift_bridgeObjectRetain();
                                                        }
                                                      }

                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
                return result;
              }

              goto LABEL_98;
            }

            Swift::String v73 = 2LL;
LABEL_104:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v55 = v59 & 0xFFFFFFFFFFFFF0FFLL | (v73 << 8);
            unint64_t v20 = v91;
            goto LABEL_68;
          }
        }

    outlined release of Locale((uint64_t)v417);
LABEL_143:
    v323 = (uint64_t *)v53;
    v328 = v52;
    unint64_t result = outlined release of AttributedString.Runs((uint64_t)v434);
    goto LABEL_144;
  }

  BigString.utf8.getter();
  v359 = (_BYTE *)v127;
  unint64_t v139 = BigString.UTF8View.index(before:)();
  v355 = v141;
  v356 = v140;
  uint64_t v143 = v142;
  outlined release of Locale((uint64_t)&v391);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  unint64_t result = outlined release of Locale((uint64_t)&v392);
  if (v138 < v139 >> 10)
  {
LABEL_420:
    __break(1u);
    goto LABEL_421;
  }

  v418[0] = v139;
  v418[1] = v356;
  v418[2] = v355;
  v418[3] = v143;
  v418[4] = v134;
  v418[5] = v133;
  uint64_t v127 = (uint64_t)v359;
  v418[6] = v359;
  v418[7] = v129;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1LL, v418, &v368);
  unint64_t result = outlined release of Locale((uint64_t)&v393);
  int v21 = v349;
  uint64_t v52 = v328;
  __int128 v144 = v333;
  if (v371 == 2) {
    goto LABEL_138;
  }
  uint64_t v52 = v368;
  if (v360 >= v368 >> 10)
  {
    __int128 v144 = v369;
    v329 = v370;
    int v53 = v371;
    goto LABEL_138;
  }

      specialized _NativeDictionary._insert(at:key:value:)(v73, a1, v3, (void *)v78);
LABEL_143:
      *(void *)(v5 + 112) = v78;
      swift_release_n();
LABEL_144:
      swift_bridgeObjectRelease();
      return (char *)v2;
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v189 + 8))(v193, v197);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
    uint64_t v150 = v192;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v151 = v188;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&unint64_t v204 = v151;
    uint64_t v154 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v150);
    uint64_t v155 = *(void *)(v151 + 16);
    uint64_t v156 = (v153 & 1) == 0;
    uint64_t v157 = v155 + v156;
    if (__OFADD__(v155, v156)) {
      goto LABEL_208;
    }
    unint64_t v158 = v153;
    if (*(void *)(v151 + 24) < v157)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v157,  isUniquelyReferenced_nonNull_native);
      unint64_t v90 = v204;
      uint64_t v159 = specialized __RawDictionaryStorage.find<A>(_:)(v248, v192);
      if ((v158 & 1) != (v160 & 1)) {
        goto LABEL_217;
      }
      uint64_t v154 = v159;
      uint64_t v161 = v184;
      if ((v158 & 1) != 0)
      {
LABEL_146:
        *(void *)(*(void *)(v90 + 56) + 8 * v154) = v161;
        goto LABEL_150;
      }

LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
}

                          __break(1u);
LABEL_161:
                          __break(1u);
LABEL_162:
                          __break(1u);
LABEL_163:
                          __break(1u);
LABEL_164:
                          __break(1u);
LABEL_165:
                          __break(1u);
                          goto LABEL_166;
                        }

                        unint64_t v37 = v54;
                        goto LABEL_78;
                      }

                      int v50 = 1LL;
                      unint64_t v37 = v52;
                    }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          char v108 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v117 << 8);
LABEL_141:
          swift_unknownObjectRetain();
          uint64_t v107 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v95, v108, v89, v40, v94);
          unint64_t result = swift_unknownObjectRelease_n();
          Swift::String v111 = v10 - v2;
          if (__OFSUB__(v10, v2)) {
            goto LABEL_400;
          }
          goto LABEL_162;
        }

        uint64_t v95 = v341[11];
        uint64_t v94 = v341[9];
        id v63 = (uint64_t)v323;
      }

      else
      {
        uint64_t v10 = v324 >> 11;
        if (v324 >= 0x800) {
          goto LABEL_413;
        }
      }

      swift_unknownObjectRetain_n();
      char v108 = specialized Rope._endPath.getter(v40);
      swift_unknownObjectRelease();
      uint64_t v89 = 0LL;
      unint64_t v2 = 0LL;
      if (v40) {
        goto LABEL_141;
      }
      uint64_t v107 = 0LL;
      Swift::String v111 = v10;
LABEL_162:
      *(void *)&v365 = v95;
      *((void *)&v365 + 1) = v108;
      *(void *)&v366 = v89;
      *((void *)&v366 + 1) = v107;
      *(void *)&v367 = v111;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v365,  0LL,  v10,  (void *)v3,  (uint64_t *)&v347,  v330,  v63,  (uint64_t)&v353);
      swift_bridgeObjectRelease();
      swift_release();
      char v119 = (void *)v3;
      unint64_t v77 = v367;
      uint64_t v120 = v119[8];
      __int128 v121 = v119[9];
      id v122 = v119[10];
      __int128 v123 = v119[11];
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( 0LL,  v338 & 1,  v120,  v121,  v122,  v123,  (uint64_t *)&v433);
      __int128 v124 = v435;
      swift_unknownObjectRelease();
    }

    while (v124 < v77 && *(void *)(v347 + 16));
  }

  swift_release();
  int64_t v3 = (int64_t)v341;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v365 = v344;
  id v125 = v341[8];
  char v126 = v341[9];
  uint64_t v127 = v341[10];
  uint64_t v40 = v341[11];
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v344 - 1,  v338 & 1,  v125,  v126,  v127,  v40,  (uint64_t *)&v433);
  v331 = v433;
  v325 = v434;
  char v128 = v435;
  swift_unknownObjectRelease();
  v446[0] = v331;
  v446[1] = v325;
  v447 = v128;
  unint64_t v129 = v341[8];
  unint64_t v130 = v341[9];
  uint64_t v131 = v341[10];
  uint64_t v132 = v341[11];
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v446, v129, v130, v131, v132);
  char v134 = v133;
  unint64_t v2 = v135;
  swift_unknownObjectRelease();
  uint64_t v10 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)( (uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:),  0LL,  v134);
  uint64_t v19 = v136;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v15 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  unint64_t result = Set.init(minimumCapacity:)();
  uint64_t v5 = 0LL;
  *(void *)&v347 = result;
  unint64_t v137 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v46 = -1LL;
  if (v137 < 64) {
    uint64_t v46 = ~(-1LL << v137);
  }
  uint64_t v13 = v10 + 64;
  unint64_t v138 = v46 & *(void *)(v10 + 64);
  unint64_t v139 = (unint64_t)(v137 + 63) >> 6;
  while (1)
  {
    if (v138)
    {
      unint64_t v140 = __clz(__rbit64(v138));
      v138 &= v138 - 1;
      uint64_t v141 = v140 | (v5 << 6);
      goto LABEL_168;
    }

    Swift::String v43 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_370;
    }
    if (v43 >= v139)
    {
LABEL_188:
      swift_release();
      unint64_t v145 = *((_OWORD *)v341 + 2);
      v443 = *((_OWORD *)v341 + 1);
      v444 = v145;
      v445 = *((_OWORD *)v341 + 3);
      BigString.utf8.getter();
      uint64_t v146 = BigString.UTF8View.count.getter();
      unint64_t result = outlined release of Locale((uint64_t)v376);
      if (v146 < v344) {
        goto LABEL_404;
      }
      unint64_t v2 = v341[8];
      uint64_t v147 = v341[9];
      uint64_t v148 = v341[10];
      uint64_t v149 = v341[11];
      swift_unknownObjectRetain();
      swift_retain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v344,  v338 & 1,  v2,  v147,  v148,  v149,  (uint64_t *)&v433);
      v339 = v433;
      uint64_t v151 = *((void *)&v434 + 1);
      uint64_t v150 = v434;
      uint64_t v152 = v435;
      swift_unknownObjectRelease();
      v433 = v339;
      v434 = __PAIR128__(v151, v150);
      Swift::String v32 = v344;
      *(void *)&v435 = v152;
      if (v344 != v146) {
        goto LABEL_193;
      }
LABEL_194:
      AttributedString._InternalRunsSlice.startIndex.getter(v341, v32, v377);
      for (uint64_t i = &v378; v152 < *i && !specialized Collection.isEmpty.getter(v347); uint64_t i = &v380)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v433,  v32,  v146,  v341,  (uint64_t *)&v347,  v10,  v19,  (uint64_t)&v365);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( v341,  v32,  v146,  (uint64_t *)&v433);
        uint64_t v152 = v435;
        if (v32 == v146) {
          goto LABEL_194;
        }
LABEL_193:
        unint64_t v2 = v341[8];
        uint64_t v153 = v341[9];
        uint64_t v154 = v341[10];
        uint64_t v155 = v341[11];
        uint64_t v156 = swift_unknownObjectRetain();
        uint64_t v157 = v154;
        Swift::String v32 = v344;
        AttributedString._InternalRuns.endIndex.getter(v156, v153, v157, v155, v379);
        swift_unknownObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v33 = v365;
      v316 = v353;
      uint64_t v5 = v328;
      uint64_t v31 = v332;
      goto LABEL_198;
    }

    uint64_t v143 = *(void *)(v13 + 8 * v43);
    ++v5;
    if (!v143)
    {
      uint64_t v5 = v43 + 1;
      if (v43 + 1 >= v139) {
        goto LABEL_188;
      }
      uint64_t v143 = *(void *)(v13 + 8 * v5);
      if (!v143)
      {
        uint64_t v5 = v43 + 2;
        if (v43 + 2 >= v139) {
          goto LABEL_188;
        }
        uint64_t v143 = *(void *)(v13 + 8 * v5);
        if (!v143)
        {
          uint64_t v5 = v43 + 3;
          if (v43 + 3 >= v139) {
            goto LABEL_188;
          }
          uint64_t v143 = *(void *)(v13 + 8 * v5);
          if (!v143)
          {
            uint64_t v5 = v43 + 4;
            if (v43 + 4 >= v139) {
              goto LABEL_188;
            }
            uint64_t v143 = *(void *)(v13 + 8 * v5);
            if (!v143) {
              break;
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
                goto LABEL_164;
              }

              uint64_t v5 = v15;
            }
          }
        }

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v68);
  return swift_release();
}

            uint64_t v175 = v96;
            swift_retain();
            swift_retain();
            if (_foundation_swift_url_feature_enabled())
            {
              v409 = v6;
              v421._uint64_t countAndFlagsBits = (uint64_t)v175;
              v421._unint64_t object = (void *)v7;
              v422 = v8;
              unint64_t v176 = v175;
              v417 = v7;
              swift_retain();
              swift_retain();
              uint64_t v177 = URL.path(percentEncoded:)(1);
              v421 = v177;
              swift_bridgeObjectRetain();
              if (String.count.getter() > 1
                && (specialized BidirectionalCollection.last.getter( v177._countAndFlagsBits,  (unint64_t)v177._object) & 0x1FF) == 0x2F)
              {
                specialized RangeReplaceableCollection<>.popLast()();
                swift_bridgeObjectRelease();
              }

              v418._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
              unint64_t v178 = specialized Set._Variant.insert(_:)(&v419, 0x2FuLL);
              unint64_t v179 = v418._countAndFlagsBits;
              uint64_t v180 = v421._countAndFlagsBits;
              uint64_t v181 = v421._object;
              uint64_t v182 = ((unint64_t)v421._object >> 56) & 0xF;
              if (v182)
              {
                v418 = v421;
                MEMORY[0x1895F8858](v178);
                v404 = (uint64_t)&v418;
                v405 = v179;
                swift_bridgeObjectRetain();
                specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v403,  v180,  (unint64_t)v181);
                if (v183 == 1)
                {
                  uint64_t v185 = (unint64_t)v418._object;
                  unint64_t v184 = v418._countAndFlagsBits;
                  swift_bridgeObjectRetain();
                  specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v184, v185, v179);
                  swift_bridgeObjectRelease();
                }

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v6 = v409;
                unint64_t v8 = v406;
                unint64_t v7 = v417;
              }

              else
              {
                swift_bridgeObjectRelease();
                unint64_t v7 = v417;
                uint64_t v6 = v409;
                unint64_t v8 = v406;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL(v6, v7, v8, 1);
            }

            else
            {
              uint64_t v186 = objc_msgSend(v175, sel__parameterString);
              if (v186)
              {
                unint64_t v187 = v186;
                uint64_t v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
                uint64_t v190 = v189;

                if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                  && (uint64_t v191 = objc_msgSend(v175, sel_path)) != 0)
                {
                  uint64_t v192 = v191;
                  uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v191);
                  uint64_t v195 = v194;

                  v421._uint64_t countAndFlagsBits = (uint64_t)v193;
                  v421._unint64_t object = v195;
                  swift_bridgeObjectRetain();
                  v196._uint64_t countAndFlagsBits = 59LL;
                  v196._unint64_t object = (void *)0xE100000000000000LL;
                  String.append(_:)(v196);
                  unint64_t v8 = v406;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v197._uint64_t countAndFlagsBits = (uint64_t)v188;
                  v197._unint64_t object = v190;
                  String.append(_:)(v197);
                  swift_bridgeObjectRelease();
                }

                else
                {
                  v421._uint64_t countAndFlagsBits = 59LL;
                  v421._unint64_t object = (void *)0xE100000000000000LL;
                  v221._uint64_t countAndFlagsBits = (uint64_t)v188;
                  v221._unint64_t object = v190;
                  String.append(_:)(v221);
                }

                swift_bridgeObjectRelease();
                outlined consume of PathOrURL(v6, v7, v8, 1);
                goto LABEL_255;
              }

              __int128 v222 = objc_msgSend(v175, sel_path);
              if (v222)
              {
                __int128 v223 = v222;
                static String._unconditionallyBridgeFromObjectiveC(_:)(v222);
              }
            }

            outlined consume of PathOrURL(v6, v7, v8, 1);
LABEL_255:
            v305 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v306 = v175;
            outlined consume of PathOrURL(v6, v7, v8, 1);
            if (v97)
            {
              v421._uint64_t countAndFlagsBits = (uint64_t)v97;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              int64_t v97 = v97;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
              }

              else
              {
                swift_allocError();
                *v308 = v97;
              }

              v307 = (void *)_swift_stdlib_bridgeErrorToNSError();
            }

            else
            {
              v307 = 0LL;
            }

             objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v414,  v305,  v306,  v307,  0,  0,  0);

            swift_unknownObjectRelease();
            outlined consume of PathOrURL(v6, v7, v8, 1);
            char v64 = v412;
            goto LABEL_262;
          }

          goto LABEL_360;
        }

        CocoaError.Code.init(fileErrno:reading:)(v65, 0);
        char v128 = (uint64_t (*)(void))v418._countAndFlagsBits;
        if (v65 == 102)
        {
          unint64_t v129 = 0LL;
LABEL_174:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v128,  (uint64_t)v6,  v7,  v129,  0LL,  0LL,  0LL,  0LL,  &v421,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
LABEL_262:
          swift_willThrow();

          close(v416);
          goto LABEL_263;
        }

        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v160 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v161 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v162 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          unint64_t v129 = objc_msgSend(v161, sel_initWithDomain_code_userInfo_, v162, v160, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v163 = objc_msgSend(v129, sel_domain);
          unint64_t v164 = static String._unconditionallyBridgeFromObjectiveC(_:)(v163);
          uint64_t v166 = v165;

          if (v164 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v166 == v167)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            unint64_t v198 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v198 & 1) == 0) {
              goto LABEL_354;
            }
          }

          goto LABEL_174;
        }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v8 = v50 & 0xFFFFFFFFFFFFF0FFLL | (v75 << 8);
        }

        else
        {
          unint64_t v8 = ((-15LL << ((4 * v50 + 8) & 0x3C)) - 1) & v50 | ((unint64_t)*(unsigned __int16 *)(v47 + 16) << ((4 * v50 + 8) & 0x3C));
          swift_unknownObjectRetain();
          uint64_t v6 = 0LL;
          unint64_t v9 = 0LL;
        }

        swift_unknownObjectRetain();
        uint64_t v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v80, v8, v9, v47, v49);
        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        Swift::String v44 = a5;
        a3 = v84;
      }

      else
      {
        uint64_t v6 = 0LL;
        unint64_t v9 = 0LL;
        unint64_t v8 = 0LL;
        uint64_t v10 = 0LL;
      }

      uint64_t v11 = v44 - v6;
      uint64_t v46 = a2;
      if (__OFSUB__(v44, v6)) {
        goto LABEL_189;
      }
LABEL_95:
      --v45;
      unint64_t v7 = v80;
      if (v45 <= v46) {
        goto LABEL_162;
      }
    }
  }

  if (!a2)
  {
LABEL_162:
    *a6 = v7;
    a6[1] = v8;
    a6[2] = v9;
    a6[3] = v10;
    a6[4] = v11;
    return result;
  }

  int v12 = 0LL;
  while (1)
  {
    uint64_t v13 = a3[8];
    uint64_t v6 = a3[10];
    uint64_t v14 = a3[11];
    uint64_t v86 = v7;
    uint64_t v87 = v8;
    uint64_t v88 = v9;
    int v15 = __OFADD__(v10++, 1LL);
    if (v15) {
      goto LABEL_169;
    }
    if (v7 != v14) {
      break;
    }
    if (v9)
    {
      uint64_t v6 = *(void *)(v9 + 24 * ((v8 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v6 = specialized Rope._Node.subscript.getter(v8, v13);
    }

    swift_bridgeObjectRelease();
    unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    int v15 = __OFADD__(v11, v6);
    v11 += v6;
    if (v15) {
      goto LABEL_171;
    }
    if (!v13) {
      goto LABEL_172;
    }
    unsigned int v16 = ((-15LL << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v13 + 18) | ((unint64_t)*(unsigned __int16 *)(v13 + 16) << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C));
    unint64_t result = (uint64_t *)swift_unknownObjectRetain();
    if (v8 >= v16) {
      goto LABEL_172;
    }
    if (v9
      && (uint64_t v17 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C, v18 = ((v8 >> v17) & 0xF) + 1,
                                                      v18 < *(unsigned __int16 *)(v9 + 16)))
    {
      unint64_t v8 = (v18 << v17) | ((-15LL << v17) - 1) & v8;
      unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    }

    else
    {
      uint64_t v19 = *(unsigned __int8 *)(v13 + 18);
      uint64_t v6 = (4 * (_BYTE)v19 + 8) & 0x3C;
      unint64_t v20 = (v8 >> v6) & 0xF;
      uint64_t v85 = v20;
      if (v19)
      {
        uint64_t v6 = v13 + 24;
        swift_unknownObjectRetain();
        int v21 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v13 + 24, &v85, (uint64_t)&v86, v13, v19);
        swift_unknownObjectRelease();
        if ((v21 & 1) == 0) {
          goto LABEL_27;
        }
        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        unint64_t v7 = v86;
        unint64_t v8 = v87;
        unint64_t v9 = v88;
      }

      else
      {
        unsigned int v22 = v20 + 1;
        if (v20 + 1 >= (unint64_t)*(unsigned __int16 *)(v13 + 16))
        {
LABEL_27:
          uint64_t v24 = *(unsigned __int8 *)(v13 + 18);
          uint64_t v6 = *(unsigned __int16 *)(v13 + 16);
          unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
          unint64_t v8 = ((-15LL << ((4 * v24 + 8) & 0x3C)) - 1) & v24 | (unint64_t)(v6 << ((4 * v24 + 8) & 0x3C));
          uint64_t v23 = a5;
          a3 = v84;
          unint64_t v9 = 0LL;
          uint64_t v86 = v7;
          if (v11 < a5) {
            goto LABEL_6;
          }
          goto LABEL_28;
        }

        unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        unint64_t v8 = (v22 << v6) | ((-15LL << v6) - 1) & v8;
        unint64_t v9 = v13;
      }
    }

    uint64_t v23 = a5;
    a3 = v84;
    if (v11 < a5) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v25 = a3[8];
    if (a4 != v23)
    {
      unint64_t v7 = a3[11];
      if (v25)
      {
        unint64_t v9 = 0LL;
        uint64_t v10 = a3[9];
        uint64_t v11 = a3[10];
        unint64_t v8 = ((-15LL << ((4 * *(_BYTE *)(v25 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v25 + 18) | ((unint64_t)*(unsigned __int16 *)(v25 + 16) << ((4 * *(_BYTE *)(v25 + 18) + 8) & 0x3C));
      }

      else
      {
        unint64_t v8 = 0LL;
        unint64_t v9 = 0LL;
        uint64_t v10 = 0LL;
        uint64_t v11 = 0LL;
      }

      goto LABEL_6;
    }

    if (v25) {
      unint64_t v26 = a3[10];
    }
    else {
      unint64_t v26 = 0LL;
    }
    if (a4 < 0 || v26 < a4) {
      goto LABEL_186;
    }
    uint64_t v27 = a3[11];
    if (v25)
    {
      uint64_t v78 = a3[9];
      uint64_t v28 = *(unsigned __int8 *)(v25 + 18);
      if (*(_WORD *)(v25 + 16) && a3[10] > a4)
      {
        if (*(_BYTE *)(v25 + 18))
        {
          unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
          uint64_t v6 = a4;
          unint64_t v29 = v25;
          while (1)
          {
            uint64_t v31 = *(unsigned __int16 *)(v29 + 16);
            if (!*(_WORD *)(v29 + 16)) {
              goto LABEL_40;
            }
            Swift::String v32 = *(void *)(v29 + 40);
            unint64_t v33 = v6 - v32;
            if (__OFSUB__(v6, v32)) {
              goto LABEL_176;
            }
            if (__OFADD__(v33, 1LL)) {
              goto LABEL_177;
            }
            if (v33 + 1 <= 0)
            {
              uint64_t v31 = 0LL;
            }

            else
            {
              if ((_DWORD)v31 == 1)
              {
                v6 -= v32;
LABEL_40:
                if (v6) {
                  goto LABEL_173;
                }
                goto LABEL_41;
              }

              unint64_t v34 = *(void *)(v29 + 64);
              int v15 = __OFSUB__(v33, v34);
              Swift::Int v35 = v33 - v34;
              if (v15) {
                goto LABEL_184;
              }
              if (__OFADD__(v35, 1LL)) {
                goto LABEL_185;
              }
              if (v35 + 1 >= 1)
              {
                if ((_DWORD)v31 != 2)
                {
                  id v36 = (void *)(v29 + 88);
                  unint64_t v37 = 2LL;
                  while (v31 != v37)
                  {
                    uint64_t v6 = v35 - *v36;
                    if (__OFSUB__(v35, *v36)) {
                      goto LABEL_166;
                    }
                    if (__OFADD__(v6, 1LL)) {
                      goto LABEL_167;
                    }
                    if (v6 + 1 < 1)
                    {
                      uint64_t v31 = v37;
                      uint64_t v6 = v35;
                      goto LABEL_41;
                    }

                    ++v37;
                    v36 += 3;
                    Swift::Int v35 = v6;
                    if (v31 == v37) {
                      goto LABEL_40;
                    }
                  }

double URLComponents.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0LL;
  *(_BYTE *)(a1 + 96) = 1;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  return result;
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    *(void *)&__int128 v18 = *(void *)a1;
    *((void *)&v18 + 1) = v4;
    *(void *)&__int128 v19 = v6;
    uint64_t v7 = URL.absoluteString.getter();
    unint64_t v9 = v8;
  }

  else
  {
    swift_retain();
    id v10 = v5;
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if ((_DWORD)result)
    {
      if (!v4)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = *(void *)(v4 + 16);
      unint64_t v9 = *(void *)(v4 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
    }

    else
    {
      id v12 = objc_msgSend(v10, sel_relativeString);
      uint64_t v7 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      unint64_t v9 = v13;
      swift_release();
      swift_release();
    }
  }

  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v7, v9, 1, (uint64_t)v17);
  outlined init with take of LocalePreferences?( (uint64_t)v17,  (uint64_t)&v18,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v18) == 1)
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)v15);
  }

  else
  {
    void v15[6] = v24;
    v15[7] = v25;
    v16[0] = v26[0];
    *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v26 + 10);
    v15[2] = v20;
    v15[3] = v21;
    void v15[4] = v22;
    v15[5] = v23;
    v15[0] = v18;
    v15[1] = v19;
    destructiveProjectEnumData for PredicateCodableError(v15, v14);
  }

  return outlined init with take of LocalePreferences?( (uint64_t)v15,  a3,  &demangling cache variable for type metadata for URLComponents?);
}

uint64_t URLComponents.init(string:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v11) == 1)
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)v8);
  }

  else
  {
    v8[6] = v11[6];
    v8[7] = v11[7];
    v9[0] = v12[0];
    *(_OWORD *)((char *)v9 + 10) = *(_OWORD *)((char *)v12 + 10);
    v8[2] = v11[2];
    v8[3] = v11[3];
    void v8[4] = v11[4];
    v8[5] = v11[5];
    v8[0] = v11[0];
    v8[1] = v11[1];
    destructiveProjectEnumData for PredicateCodableError(v8, v6);
  }

  return outlined init with take of LocalePreferences?( (uint64_t)v8,  a3,  &demangling cache variable for type metadata for URLComponents?);
}

uint64_t URLComponents.init(string:encodingInvalidCharacters:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v13) == 1)
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)v10);
  }

  else
  {
    v10[6] = v13[6];
    v10[7] = v13[7];
    v11[0] = v14[0];
    *(_OWORD *)((char *)v11 + 10) = *(_OWORD *)((char *)v14 + 10);
    v10[2] = v13[2];
    v10[3] = v13[3];
    v10[4] = v13[4];
    v10[5] = v13[5];
    v10[0] = v13[0];
    v10[1] = v13[1];
    destructiveProjectEnumData for PredicateCodableError(v10, v8);
  }

  return outlined init with take of LocalePreferences?( (uint64_t)v10,  a4,  &demangling cache variable for type metadata for URLComponents?);
}

void URLComponents.url.getter(uint64_t *a1@<X8>)
{
  __int128 v3 = v1[7];
  __int128 v4 = v1[5];
  __int128 v94 = v1[6];
  __int128 v95 = v3;
  __int128 v5 = v1[7];
  *(_OWORD *)uint64_t v96 = v1[8];
  *(_OWORD *)&v96[10] = *(__int128 *)((char *)v1 + 138);
  __int128 v6 = v1[3];
  __int128 v7 = v1[1];
  __int128 v90 = v1[2];
  __int128 v91 = v6;
  __int128 v8 = v1[3];
  __int128 v9 = v1[5];
  __int128 v92 = v1[4];
  __int128 v93 = v9;
  __int128 v10 = v1[1];
  __int128 v88 = *v1;
  __int128 v89 = v10;
  __int128 v85 = v94;
  __int128 v86 = v5;
  v87[0] = v1[8];
  *(_OWORD *)((char *)v87 + 10) = *(__int128 *)((char *)v1 + 138);
  __int128 v81 = v90;
  __int128 v82 = v8;
  __int128 v83 = v92;
  __int128 v84 = v4;
  __int128 v79 = v88;
  __int128 v80 = v7;
  if (BYTE8(v88) == 1)
  {
    if ((void)v88)
    {
      uint64_t v12 = *(void *)(v88 + 16);
      unint64_t v11 = *(void *)(v88 + 24);
      swift_bridgeObjectRetain();
      if (_foundation_swift_url_feature_enabled())
      {
LABEL_4:
        URL.init(string:)(v12, v11, a1);
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_106;
    }

LABEL_122:
      uint64_t v36 = _StringObject.sharedUTF8.getter();
      goto LABEL_58;
    }

    v76._uint64_t countAndFlagsBits = v20;
    v76._unint64_t object = (void *)(v21 & 0xFFFFFFFFFFFFFFLL);
    char v37 = *((_BYTE *)&v76._countAndFlagsBits + v31);
  }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v11 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v62 << 8);
      __int128 v3 = v80;
      __int128 v8 = v76;
      goto LABEL_123;
    }

    swift_unknownObjectRetain_n();
    unint64_t v11 = ((-15LL << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v5 + 18) | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C));
  }

  else
  {
    swift_unknownObjectRetain_n();
    unint64_t v11 = 0LL;
  }

  swift_unknownObjectRelease();
  __int128 v4 = 0LL;
  uint64_t v1 = 0LL;
  if (v5)
  {
LABEL_123:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v11, v1, v5, v8);
    swift_unknownObjectRelease_n();
  }

  uint64_t v68 = v81 - v4;
  if (__OFSUB__(v81, v4))
  {
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }

  __int128 v4 = v81;
  if (v2 != v68)
  {
LABEL_18:
    unint64_t v13 = v0[3];
    if (v13 != v3[11]) {
      goto LABEL_164;
    }
    __int128 v78 = v2;
    int v15 = v0[4];
    uint64_t v14 = v0[5];
    if (v14)
    {
      Swift::String v16 = *(void *)(v14 + 24 * ((v15 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }

    else
    {
      Swift::String v17 = v3[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v15, v17);
      swift_unknownObjectRelease();
      if (v13 != v3[11])
      {
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
        goto LABEL_180;
      }

      uint64_t v18 = v3;
      unint64_t v19 = v3[8];
      swift_unknownObjectRetain();
      Swift::String v16 = specialized Rope._Node.subscript.getter(v15, v19);
      __int128 v3 = v18;
      swift_unknownObjectRelease();
      __int128 v4 = v81;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v20 = v78 + v16;
    if (__OFADD__(v78, v16)) {
      goto LABEL_165;
    }
    if (v77 >= v78) {
      unint64_t v21 = v78;
    }
    else {
      unint64_t v21 = v77;
    }
    if (v78 < v4) {
      unint64_t v21 = v4;
    }
    if (v20 <= v4) {
      uint64_t v22 = v4;
    }
    else {
      uint64_t v22 = v78 + v16;
    }
    if (v77 >= v20) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = v77;
    }
    if (v21 == v23)
    {
LABEL_166:
      __break(1u);
    }

    else if (!__OFSUB__(v23, v21))
    {
      unint64_t v75 = v0;
      uint64_t v24 = v0[6];
      __int128 v25 = v3;
      unint64_t v26 = v3[8];
      Swift::String v28 = v25[9];
      __int16 v27 = v25[10];
      __int128 v79 = v25;
      unint64_t v29 = v25[11];
      __int128 v82 = v13;
      __int128 v83 = v15;
      __int128 v84 = v14;
      unint64_t v30 = v24 + 1;
      if (!__OFADD__(v24, 1LL))
      {
        if (v13 == v29)
        {
          if (v14)
          {
            uint64_t v31 = *(void *)(v14 + 24 * ((v15 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
          }

          else
          {
            swift_retain();
            swift_unknownObjectRetain();
            uint64_t v31 = specialized Rope._Node.subscript.getter(v15, v26);
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v32 = __OFADD__(v78, v31);
          uint64_t v33 = v78 + v31;
          if (!v32)
          {
            swift_unknownObjectRetain();
            specialized Rope.formIndex(after:)(&v82, v26, v28, v27, v13);
            swift_unknownObjectRelease_n();
            if (v33 < v77)
            {
              unint64_t v34 = v82;
              __int16 v35 = v83;
              uint64_t v36 = v84;
              swift_release();
              __int128 v9 = v30;
LABEL_155:
              v75[3] = v34;
              v75[4] = v35;
              v75[5] = v36;
              v75[6] = v9;
              v75[7] = v33;
              return;
            }

            char v37 = v81;
            uint64_t v1 = v79[8];
            __int128 v9 = v79[9];
            uint64_t v33 = v79[10];
            unint64_t v34 = v79[11];
            if (v81 != v77)
            {
              swift_unknownObjectRetain();
              if (v1)
              {
                unsigned int v57 = v34;
                uint64_t v58 = *(unsigned __int8 *)(v1 + 18);
                Swift::String v59 = *(unsigned __int16 *)(v1 + 16);
                swift_release();
                swift_unknownObjectRelease();
                uint64_t v36 = 0LL;
                Swift::String v60 = (4 * v58 + 8) & 0x3C;
                uint64_t v61 = ((-15LL << v60) - 1) & v58;
                unint64_t v34 = v57;
                __int16 v35 = v61 | (v59 << v60);
              }

              else
              {
                swift_release();
                __int16 v35 = 0LL;
                uint64_t v36 = 0LL;
                __int128 v9 = 0LL;
                uint64_t v33 = 0LL;
              }

              goto LABEL_155;
            }

            if (v1) {
              uint64_t v38 = v79[10];
            }
            else {
              uint64_t v38 = 0LL;
            }
            if ((v81 & 0x8000000000000000LL) == 0 && v38 >= v81)
            {
              if (v1)
              {
                if (v81 < v33 && *(_WORD *)(v1 + 16))
                {
                  __int128 v6 = v79[11];
                  uint64_t v39 = *(unsigned __int8 *)(v1 + 18);
                  if (!*(_BYTE *)(v1 + 18))
                  {
                    swift_unknownObjectRetain_n();
                    uint64_t v36 = v1;
LABEL_129:
                    CFURLRef v69 = *(unsigned __int16 *)(v36 + 16);
                    if (*(_WORD *)(v36 + 16))
                    {
                      uint64_t v70 = *(void *)(v36 + 24);
                      uint64_t v45 = v37 - v70;
                      if (__OFSUB__(v37, v70))
                      {
LABEL_189:
                        __break(1u);
                        goto LABEL_190;
                      }

                      if (__OFADD__(v45, 1LL))
                      {
LABEL_190:
                        __break(1u);
                        goto LABEL_191;
                      }

                      if (v45 + 1 <= 0)
                      {
                        CFURLRef v69 = 0LL;
                        goto LABEL_152;
                      }

                      if ((_DWORD)v69 == 1)
                      {
                        v37 -= v70;
                      }

                      else
                      {
                        __int128 v71 = *(void *)(v36 + 48);
                        unint64_t v32 = __OFSUB__(v45, v71);
                        uint64_t v72 = v45 - v71;
                        if (v32)
                        {
LABEL_191:
                          __break(1u);
                          goto LABEL_192;
                        }

                        if (__OFADD__(v72, 1LL))
                        {
LABEL_192:
                          __break(1u);
                          return;
                        }

                        if (v72 + 1 < 1) {
                          goto LABEL_144;
                        }
                        if ((_DWORD)v69 != 2)
                        {
                          Swift::String v73 = (void *)(v36 + 72);
                          uint64_t v74 = 2LL;
                          while (v69 != v74)
                          {
                            char v37 = v72 - *v73;
                            if (__OFSUB__(v72, *v73)) {
                              goto LABEL_186;
                            }
                            if (__OFADD__(v37, 1LL)) {
                              goto LABEL_187;
                            }
                            if (v37 + 1 < 1)
                            {
                              CFURLRef v69 = v74;
                              char v37 = v72;
                              goto LABEL_152;
                            }

                            ++v74;
                            v73 += 3;
                            uint64_t v72 = v37;
                            if (v69 == v74) {
                              goto LABEL_151;
                            }
                          }

                          goto LABEL_185;
                        }

                        char v37 = v72;
                      }
                    }

  unint64_t v19 = 0LL;
  if ((v122 & 1) != 0) {
    goto LABEL_125;
  }
  Swift::String v111 = v24 > v20;
  unint64_t v20 = (unint64_t)v126;
  if (!v111) {
LABEL_42:
  }

  if (__OFSUB__(a4, v19))
  {
    __break(1u);
LABEL_46:
    LODWORD(v17) = MEMORY[0x186E1B0E8]();
    v27._uint64_t countAndFlagsBits = 1684104562LL;
    v27._unint64_t object = (void *)0xE400000000000000LL;
    logFileIOErrno(_:at:)((Swift::Int32)v17, v27);
    if ((v123 & 1) != 0)
    {
      Swift::String v28 = v119;
      unint64_t v29 = 263LL;
      unint64_t v30 = v120;
      switch((int)v17)
      {
        case 1:
        case 13:
          unint64_t v29 = 257LL;
          goto LABEL_68;
        case 2:
          unint64_t v29 = 260LL;
          goto LABEL_68;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_63;
        case 27:
          goto LABEL_68;
        default:
          unint64_t v30 = v120;
          if ((_DWORD)v17 == 63)
          {
            unint64_t v29 = 258LL;
          }

          else
          {
            if ((_DWORD)v17 == 102)
            {
              swift_retain_n();
              Swift::String v17 = v121;
              uint64_t v41 = v121;
              swift_retain_n();
              unsigned int v42 = v41;
              Swift::String v43 = 0LL;
              unint64_t v29 = 256LL;
              goto LABEL_73;
            }

    id v115 = (v129 - 1) & v129;
    char v118 = __clz(__rbit64(v129)) + (v112 << 6);
LABEL_101:
    char v119 = 16 * v118;
    uint64_t v120 = (uint64_t *)(*(void *)(v5 + 48) + v119);
    id v122 = *v120;
    __int128 v121 = v120[1];
    __int128 v123 = (uint64_t *)(*(void *)(v5 + 56) + v119);
    __int128 v124 = *v123;
    id v125 = v123[1];
    char v126 = (void *)(*(void *)(v20 + 48) + v119);
    *char v126 = v122;
    v126[1] = v121;
    uint64_t v127 = (void *)(*(void *)(v20 + 56) + v119);
    *uint64_t v127 = v124;
    v127[1] = v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  unint64_t v130 = v128 + 6;
  if (v130 >= v116) {
    goto LABEL_123;
  }
  unint64_t v129 = *(void *)(v110 + 8 * v130);
  if (v129)
  {
    Swift::String v112 = v130;
    unint64_t v20 = v1;
    goto LABEL_122;
  }

  while (1)
  {
    Swift::String v112 = v130 + 1;
    if (__OFADD__(v130, 1LL)) {
      goto LABEL_193;
    }
    unint64_t v20 = v1;
    if (v112 >= v116) {
      break;
    }
    unint64_t v129 = *(void *)(v110 + 8 * v112);
    ++v130;
    if (v129) {
      goto LABEL_122;
    }
  }

          Double.description.getter();
          BigString.init(_:)();
          AttributedString.init(_:attributes:)(v255, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v243);
          swift_bridgeObjectRelease();
          goto LABEL_123;
        }

        swift_bridgeObjectRelease();
      }
    }

    uint64_t v214 = v225;
    uint64_t v40 = v228;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v225, v27, v228);
    goto LABEL_126;
  }

  uint64_t v23 = (void *)v243;
  v255[0] = v243;
  uint64_t v24 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)v255, v12);
  __int16 v27 = v4;
  if (!v25)
  {
LABEL_54:

    goto LABEL_87;
  }

  Swift::String v28 = (void *)v24;
  unint64_t v29 = v25;
  unint64_t v30 = v26;
  v255[0] = *(_OWORD *)(v4 + 8);
  swift_unknownObjectRetain();
  uint64_t v31 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v28, v29, (uint64_t)v255);
  swift_unknownObjectRelease();
  if (!v31)
  {
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }

  ICUNumberFormatterBase.attributedFormatPositions(_:)(v30, 0LL, 0x100000000LL);
  if (!v33)
  {
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v255, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v243);
    swift_bridgeObjectRelease();

LABEL_123:
    swift_release();
    uint64_t v38 = v243;
    uint64_t v214 = v225;
    uint64_t v40 = v228;
    goto LABEL_124;
  }

  __int16 v35 = v32;
  uint64_t v36 = v33;
  char v37 = v34;
  char v220 = v31;
  char v221 = v29;
  __int128 v222 = v23;
  swift_bridgeObjectRetain();
  *(void *)&v233[8] = v35;
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v253, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v255);
  uint64_t v38 = *(void *)&v255[0];
  uint64_t v39 = *(void *)(v37 + 16);
  uint64_t v40 = v228;
  if (!v39) {
    goto LABEL_82;
  }
  *(void *)uint64_t v233 = v36;
  unint64_t v230 = (__int128 *)((char *)&v243 + 8);
  uint64_t v231 = v256;
  swift_bridgeObjectRetain();
  uint64_t v232 = (_OWORD *)lazy protocol witness table accessor for type String and conformance String();
  __int128 v219 = v37;
  uint64_t v41 = v37 + 48;
  uint64_t v229 = 0x80000001839CC230LL;
  __int128 v223 = 0x80000001839CC1F0LL;
  unsigned int v42 = *(void *)&v233[8];
  do
  {
    Swift::String v43 = *(unsigned int *)(v41 - 16);
    unint64_t v239 = v41;
    uint64_t v44 = *(void *)v233;
    *(void *)&v243 = v42;
    *((void *)&v243 + 1) = *(void *)v233;
    swift_bridgeObjectRetain();
    uint64_t v45 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)&v243 = v42;
    *((void *)&v243 + 1) = v44;
    swift_bridgeObjectRetain();
    Swift::String v46 = String.Index.init<A>(utf16Offset:in:)();
    if (v46 >> 14 < v45 >> 14)
    {
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18309A1C0LL);
    }

    uint64_t v47 = v46;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v45, v47, (_OWORD *)v38, (unint64_t *)&v243);
    uint64_t v48 = v245;
    if (v245 == 2) {
      goto LABEL_135;
    }
    unint64_t v235 = *((void *)&v243 + 1);
    unint64_t v236 = v243;
    v234 = v244;
    Swift::String v50 = v246;
    char v49 = v247;
    uint64_t v237 = v249;
    unint64_t v238 = v248;
    __int128 v252 = MEMORY[0x18961AFF0];
    uint64_t v51 = 0;
    uint64_t v52 = 2;
    switch((int)v43)
    {
      case 0:
        goto LABEL_11;
      case 1:
        uint64_t v51 = 1;
LABEL_11:
        specialized AttributeContainer.subscript.setter( v51,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  0xD00000000000001BLL,  v223);
        break;
      case 2:
        goto LABEL_16;
      case 6:
        uint64_t v52 = 0;
        goto LABEL_16;
      case 7:
        uint64_t v52 = 3;
        goto LABEL_16;
      case 8:
        uint64_t v52 = 4;
        goto LABEL_16;
      case 10:
        uint64_t v52 = 1;
LABEL_16:
        specialized AttributeContainer.subscript.setter(v52);
        break;
      default:
        break;
    }

    AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v43, &v243);
    if (v243 != 2) {
      specialized AttributeContainer.subscript.setter( v243,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  0xD00000000000001FLL,  v229);
    }
    __int128 v251 = v252;
    uint64_t v53 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v233[16] = v39;
    if ((v53 & 1) == 0)
    {
      uint64_t v54 = *(_OWORD *)(v38 + 32);
      v271 = *(_OWORD *)(v38 + 16);
      v272 = v54;
      v273 = *(_OWORD *)(v38 + 48);
      Swift::String v55 = *(void *)(v38 + 64);
      uint64_t v56 = *(void *)(v38 + 72);
      uint64_t v58 = *(void *)(v38 + 80);
      unsigned int v57 = *(void *)(v38 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v271);
      swift_unknownObjectRetain();
      Swift::String v59 = AttributedString.Guts.init(string:runs:)(&v271, v55, v56, v58, v57);
      swift_release();
      uint64_t v38 = v59;
    }

    __int16 v27 = v240;
    Swift::String v60 = v241;
    uint64_t v61 = *(_OWORD *)(v38 + 32);
    __int128 v268 = *(_OWORD *)(v38 + 16);
    uint64_t v269 = v61;
    v270 = *(_OWORD *)(v38 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    uint64_t v260 = v236;
    v261 = v235;
    __int128 v262 = v234;
    __int128 v263 = v48;
    __int128 v264 = v50;
    __int128 v265 = v49;
    __int128 v266 = v238;
    __int128 v267 = v237;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v254);
    outlined release of Locale((uint64_t)v255);
    Swift::String v63 = v230;
    uint64_t v62 = v231;
    uint64_t v64 = *((_OWORD *)v231 + 1);
    *unint64_t v230 = *(_OWORD *)v231;
    v63[1] = v64;
    unint64_t v65 = *((_OWORD *)v62 + 3);
    v63[2] = *((_OWORD *)v62 + 2);
    v63[3] = v65;
    *(void *)&v243 = v38;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    Swift::String v66 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    char v67 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v67);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v66, &v242);
    uint64_t v241 = v60;
    os_unfair_lock_unlock(v67);
    swift_release();
    uint64_t v68 = v242;
    __int128 v250 = v242;
    BigString.init()();
    unint64_t v242 = 0LL;
    MEMORY[0x186E20E78](&v242, 8LL);
    CFURLRef v69 = v242;
    type metadata accessor for AttributedString.Guts();
    uint64_t v70 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_129;
    }
    __int128 v71 = v258;
    *(_OWORD *)(v70 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v257;
    *(_OWORD *)(v70 + 32) = v71;
    *(_OWORD *)(v70 + 48) = v259;
    *(void *)(v70 + 64) = 0LL;
    *(void *)(v70 + 72) = 0LL;
    *(void *)(v70 + 80) = 0LL;
    *(void *)(v70 + 88) = v69;
    swift_release();
    LOBYTE(v242) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v251, (char *)&v242);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v250 != v68) {
      goto LABEL_139;
    }
    uint64_t v41 = v239 + 24;
    uint64_t v38 = v243;
    swift_release();
    unsigned int v42 = *(void *)&v233[8];
    uint64_t v39 = *(void *)&v233[16] - 1LL;
  }

  while (*(void *)&v233[16] != 1LL);
  swift_bridgeObjectRelease();
  uint64_t v40 = v228;
LABEL_82:
  swift_bridgeObjectRelease();

LABEL_118:
  swift_release();
LABEL_119:
  swift_bridgeObjectRelease();
LABEL_120:
  swift_bridgeObjectRelease();
  uint64_t v214 = v225;
LABEL_124:
  uint64_t v22 = v224;
  (*(void (**)(char *, uint64_t, uint64_t))(v224 + 16))(v214, v27, v40);
  if (v38)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v214, v40);
    *unint64_t v226 = v38;
    return result;
  }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          char v118 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
LABEL_103:
          swift_unknownObjectRetain();
          id v117 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v104, v118, v32, v102, v103);
          uint64_t result = swift_unknownObjectRelease_n();
          __int128 v121 = v105 - v31;
          if (__OFSUB__(v105, v31)) {
            goto LABEL_367;
          }
          goto LABEL_124;
        }

        uint64_t v103 = *(void *)(a1 + 72);
      }

      else
      {
        unint64_t v105 = v364;
        char v37 = v359;
        if (v337 >= 0x800) {
          goto LABEL_379;
        }
      }

      swift_unknownObjectRetain_n();
      char v118 = specialized Rope._endPath.getter(v102);
      swift_unknownObjectRelease();
      unint64_t v32 = 0LL;
      uint64_t v31 = 0LL;
      if (v102) {
        goto LABEL_103;
      }
      id v117 = 0LL;
      __int128 v121 = v105;
LABEL_124:
      *(void *)&v390 = v104;
      *((void *)&v390 + 1) = v118;
      *(void *)&v391 = v32;
      *((void *)&v391 + 1) = v117;
      *(void *)&v392 = v121;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v390,  0LL,  v105,  (void *)a1,  (uint64_t *)&v373,  v37,  v356,  (uint64_t)&v379);
      swift_bridgeObjectRelease();
      swift_release();
      __int128 v85 = v392;
      unint64_t v129 = *(void *)(a1 + 64);
      unint64_t v130 = *(void *)(a1 + 72);
      uint64_t v131 = *(void *)(a1 + 80);
      uint64_t v132 = *(void *)(a1 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( 0LL,  v366 & 1,  v129,  v130,  v131,  v132,  (uint64_t *)&v448);
      uint64_t v133 = v450;
      swift_unknownObjectRelease();
      if (v133 >= v85 || !*(void *)(v373 + 16))
      {
        swift_release();
        __int128 v90 = v371;
        goto LABEL_128;
      }
    }
  }

  swift_release();
LABEL_128:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v390 = v90;
  char v134 = *(void *)(a1 + 64);
  uint64_t v135 = *(void *)(a1 + 72);
  uint64_t v136 = *(void *)(a1 + 80);
  char v37 = *(void *)(a1 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v90 - 1,  v366 & 1,  v134,  v135,  v136,  v37,  (uint64_t *)&v448);
  v357 = v449;
  v360 = v448;
  unint64_t v137 = v450;
  swift_unknownObjectRelease();
  v461[0] = v360;
  v461[1] = v357;
  v462 = v137;
  unint64_t v138 = *(void *)(a1 + 64);
  unint64_t v139 = *(void *)(a1 + 72);
  unint64_t v140 = *(void *)(a1 + 80);
  uint64_t v141 = *(void *)(a1 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v461, v138, v139, v140, v141);
  uint64_t v143 = v142;
  swift_unknownObjectRelease();
  uint64_t v36 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)( (uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:),  0LL,  v143);
  unint64_t v29 = v144;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v36 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v32 = 0LL;
  *(void *)&v373 = result;
  unint64_t v145 = 1LL << *(_BYTE *)(v36 + 32);
  Swift::String v43 = -1LL;
  if (v145 < 64) {
    Swift::String v43 = ~(-1LL << v145);
  }
  uint64_t v146 = v36 + 64;
  uint64_t v147 = v43 & *(void *)(v36 + 64);
  uint64_t v38 = (unint64_t)(v145 + 63) >> 6;
  while (1)
  {
    if (v147)
    {
      uint64_t v148 = __clz(__rbit64(v147));
      v147 &= v147 - 1;
      uint64_t v149 = v148 | (v32 << 6);
      goto LABEL_132;
    }

    uint64_t v40 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      goto LABEL_338;
    }
    if (v40 >= v38)
    {
LABEL_152:
      swift_release();
      uint64_t v154 = *(_OWORD *)(a1 + 32);
      v458 = *(_OWORD *)(a1 + 16);
      v459 = v154;
      v460 = *(_OWORD *)(a1 + 48);
      BigString.utf8.getter();
      uint64_t v31 = BigString.UTF8View.count.getter();
      uint64_t result = outlined release of Locale((uint64_t)v402);
      if (v31 < v371) {
        goto LABEL_370;
      }
      uint64_t v155 = *(void *)(a1 + 64);
      uint64_t v156 = *(void *)(a1 + 72);
      uint64_t v157 = *(void *)(a1 + 80);
      unint64_t v158 = *(void *)(a1 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t v159 = v158;
      uint64_t v160 = v371;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v371,  v366 & 1,  v155,  v156,  v157,  v159,  (uint64_t *)&v448);
      v367 = v448;
      uint64_t v161 = v449;
      uint64_t v162 = v450;
      swift_unknownObjectRelease();
      v448 = v367;
      v449 = v161;
      *(void *)&v450 = v162;
      if (v371 != v31) {
        goto LABEL_157;
      }
LABEL_158:
      AttributedString._InternalRunsSlice.startIndex.getter((void *)a1, v160, v403);
      for (uint64_t i = &v404; v162 < *i && *(void *)(v373 + 16); uint64_t i = &v406)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v448,  v160,  v31,  (void *)a1,  (uint64_t *)&v373,  v36,  v29,  (uint64_t)&v390);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( (void *)a1,  v160,  v31,  (uint64_t *)&v448);
        uint64_t v162 = v450;
        if (v160 == v31) {
          goto LABEL_158;
        }
LABEL_157:
        uint64_t v163 = *(void *)(a1 + 72);
        unint64_t v164 = *(void *)(a1 + 80);
        uint64_t v165 = *(void *)(a1 + 88);
        uint64_t v166 = swift_unknownObjectRetain();
        uint64_t v167 = v165;
        uint64_t v160 = v371;
        AttributedString._InternalRuns.endIndex.getter(v166, v163, v164, v167, v405);
        swift_unknownObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      v358 = v390;
      v337 = v379;
      __int128 v3 = v362;
      Swift::String v55 = v354;
      goto LABEL_162;
    }

    uint64_t v152 = *(void *)(v146 + 8 * v40);
    ++v32;
    if (!v152)
    {
      unint64_t v32 = v40 + 1;
      if (v40 + 1 >= v38) {
        goto LABEL_152;
      }
      uint64_t v152 = *(void *)(v146 + 8 * v32);
      if (!v152)
      {
        unint64_t v32 = v40 + 2;
        if (v40 + 2 >= v38) {
          goto LABEL_152;
        }
        uint64_t v152 = *(void *)(v146 + 8 * v32);
        if (!v152)
        {
          unint64_t v32 = v40 + 3;
          if (v40 + 3 >= v38) {
            goto LABEL_152;
          }
          uint64_t v152 = *(void *)(v146 + 8 * v32);
          if (!v152)
          {
            unint64_t v32 = v40 + 4;
            if (v40 + 4 >= v38) {
              goto LABEL_152;
            }
            uint64_t v152 = *(void *)(v146 + 8 * v32);
            if (!v152) {
              break;
            }
          }
        }
      }
    }

        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
        uint64_t v98 = v6;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_133;
        }
        __int128 v93 = v99;
        __int128 v94 = v100;
        __int128 v95 = v8;
        __int128 v91 = v5;
        __int128 v92 = v7;
        memcpy(v101, v102, 0x11AuLL);
        int64_t v97 = 0;
        uint64_t v96 = 0;
        _handleCalendarError(_:date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( (uint64_t)&v93,  (uint64_t *)&v95,  &v91,  v101,  (unsigned __int8 *)&v97 + 1,  (unsigned __int8 *)&v97,  &v96);

LABEL_127:
        outlined release of DateComponents((uint64_t)v102);
        memcpy(v101, v103, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v101);
        swift_unknownObjectRelease();
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        swift_unknownObjectRelease();
        __break(1u);
        goto LABEL_130;
      }

      goto LABEL_39;
    }

  v187[0] = v101;
  v187[1] = v108;
  v187[2] = v107;
  v187[3] = v122;
  v187[4] = v121;
  v187[5] = v113;
  v187[6] = v114;
  v187[7] = v165;
  __int128 v123 = *(void *)(v45 + 16);
  uint64_t v181 = v122;
  if (!v123)
  {
LABEL_126:
    outlined release of Locale((uint64_t)v214);
LABEL_127:
    uint64_t result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v215);
    id v125 = v108;
    char v126 = v181;
    goto LABEL_128;
  }

  __int128 v124 = 40LL;
  while (!*(void *)(v45 + v124))
  {
    v124 += 16LL;
    if (!--v123) {
      goto LABEL_126;
    }
  }

  char v128 = v107;
  id v125 = v108;
  unint64_t v129 = v101;
  swift_bridgeObjectRetain();
  unint64_t v130 = (unint64_t *)(v45 + 40);
  uint64_t v131 = (char *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v132 = *v130;
    if (*v130)
    {
      uint64_t v133 = *(v130 - 1);
      if ((v132 & 0x2000000000000000LL) != 0 ? HIBYTE(v132) & 0xF : v133 & 0xFFFFFFFFFFFFLL)
      {
        if ((v132 & 0x1000000000000000LL) != 0)
        {
          uint64_t v135 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v132 & 0x2000000000000000LL) != 0)
          {
            uint64_t v188 = *(v130 - 1);
            unint64_t v189 = v132 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }

          else
          {
            if ((v133 & 0x1000000000000000LL) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }

          uint64_t v135 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v131 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v131 + 2) + 1LL,  1,  v131);
        }
        unint64_t v137 = *((void *)v131 + 2);
        uint64_t v136 = *((void *)v131 + 3);
        if (v137 >= v136 >> 1) {
          uint64_t v131 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v136 > 1),  v137 + 1,  1,  v131);
        }
        *((void *)v131 + 2) = v137 + 1;
        *(_DWORD *)&v131[4 * v137 + 32] = v135;
      }
    }

    v130 += 2;
    --v106;
  }

  while (v106);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v213);
  unint64_t v138 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v131);
  unint64_t v140 = v139;
  uint64_t v142 = v141;
  __int128 v144 = v143;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v188);
  outlined release of Locale((uint64_t)v214);
  uint64_t result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v215);
  uint64_t v101 = v129;
  uint64_t v107 = v128;
  char v126 = v181;
  if (v144 == 2)
  {
LABEL_128:
    uint64_t v127 = v154;
    *uint64_t v154 = v101;
    v127[1] = v125;
    v127[2] = v107;
    v127[3] = v126;
  }

  else
  {
    if (v162 >= v138 >> 10)
    {
      uint64_t v101 = v138;
      id v125 = v140;
      uint64_t v107 = v142;
      char v126 = v144;
      goto LABEL_128;
    }

  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  _StringGuts.grow(_:)(75LL);
  v87._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  v87._unint64_t object = (void *)0x80000001839CF420LL;
  String.append(_:)(v87);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v88._uint64_t countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  v89._uint64_t countAndFlagsBits = 0x797420646E612027LL;
  v89._unint64_t object = (void *)0xEC00000027206570LL;
  String.append(_:)(v89);
  v90._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  v91._unint64_t object = (void *)0x80000001839CF3C0LL;
  v91._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v91);
  v92._uint64_t countAndFlagsBits = a2;
  v92._unint64_t object = v8;
  String.append(_:)(v92);
  v93._uint64_t countAndFlagsBits = 39LL;
  v93._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v93);
LABEL_126:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_127:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
  *(void *)uint64_t v142 = 0LL;
  *(void *)&v142[8] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(57LL);
  v98._unint64_t object = (void *)0x80000001839CF3A0LL;
  v98._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v98);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  unint64_t v99 = *(_DWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v142 = *(_OWORD *)v9;
  *(_DWORD *)&v142[16] = v99;
  swift_getAtKeyPath();
  swift_release();
  v100._uint64_t countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  v101._uint64_t countAndFlagsBits = 46LL;
  v101._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v101);
  v102._uint64_t countAndFlagsBits = v8;
  v102._unint64_t object = v7;
  String.append(_:)(v102);
  v103._uint64_t countAndFlagsBits = 92LL;
  v103._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v103);
  swift_bridgeObjectRelease();
  v104._uint64_t countAndFlagsBits = 0x2720646E612027LL;
  v104._unint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v104);
  v105._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  v106._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v106._unint64_t object = (void *)0x80000001839CF3C0LL;
  String.append(_:)(v106);
  String.append(_:)(v136);
  v107._uint64_t countAndFlagsBits = 39LL;
  v107._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v107);
LABEL_126:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_127:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

      swift_bridgeObjectRelease();
      *(void *)(v107 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v107 = MEMORY[0x18961AFE8];
  }

  else
  {
    __int128 v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference));
    __int128 v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
    uint64_t v107 = v7;
    __dst = (char *)(v7 + 32);
  }

  __int128 v9 = 0LL;
  __int128 v10 = *a1;
  char v106 = *a1 + 16;
  unint64_t v104 = *a1 - 48;
  unint64_t v11 = (char *)MEMORY[0x18961AFE8];
  uint64_t v109 = v3;
  uint64_t v110 = *a1;
  while (1)
  {
    unint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_51;
    }
    uint64_t v14 = v10 + 48 * v9;
    if (*(_BYTE *)(v14 + 16)) {
      goto LABEL_167;
    }
    int v15 = v10 + 48 * v13;
    if (*(_BYTE *)(v15 + 16)) {
      goto LABEL_167;
    }
    if (*(void *)v14 == *(void *)v15 && *(void *)(v14 + 8) == *(void *)(v15 + 8))
    {
      uint64_t v18 = v13 + 2;
      if (v13 + 2 >= v3)
      {
        __int128 v9 = v13 + 2;
        goto LABEL_51;
      }

      Swift::String v17 = 0;
    }

    else
    {
      Swift::String v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v18 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_41;
      }
    }

    unint64_t v19 = (_BYTE *)(v106 + 48 * v18);
    do
    {
      if (*v19) {
        goto LABEL_167;
      }
      unint64_t v21 = v10 + 48 * v9;
      if (*(_BYTE *)(v21 + 16)) {
        goto LABEL_167;
      }
      if (*((void *)v19 - 2) == *(void *)v21 && *((void *)v19 - 1) == *(void *)(v21 + 8))
      {
        if ((v17 & 1) != 0) {
          goto LABEL_42;
        }
      }

      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_41;
      }

      v19 += 48;
      unint64_t v20 = v18 + 1;
      __int128 v9 = v18;
      uint64_t v18 = v20;
    }

    while (v20 < v3);
    uint64_t v18 = v20;
LABEL_41:
    __int128 v9 = v18;
    if ((v17 & 1) != 0)
    {
LABEL_42:
      if (v18 < v13) {
        goto LABEL_162;
      }
      if (v13 < v18)
      {
        uint64_t v23 = 48 * v18;
        uint64_t v24 = 48 * v13;
        __int128 v25 = v18;
        unint64_t v26 = v13;
        do
        {
          if (v26 != --v25)
          {
            if (!v10) {
              goto LABEL_165;
            }
            __int16 v27 = (_OWORD *)(v10 + v24);
            Swift::String v28 = *(_BYTE *)(v10 + v24 + 16);
            unint64_t v29 = v10 + v23;
            unint64_t v30 = *(_BYTE *)(v10 + v24 + 40);
            uint64_t v31 = *(_OWORD *)(v10 + v24);
            unint64_t v32 = *(_OWORD *)(v10 + v24 + 24);
            unint64_t v34 = *(_OWORD *)(v10 + v23 - 32);
            uint64_t v33 = *(_OWORD *)(v10 + v23 - 16);
            *__int16 v27 = *(_OWORD *)(v10 + v23 - 48);
            v27[1] = v34;
            _OWORD v27[2] = v33;
            *(_OWORD *)(v29 - 48) = v31;
            *(_BYTE *)(v29 - 32) = v28;
            *(_OWORD *)(v29 - 24) = v32;
            *(_BYTE *)(v29 - 8) = v30;
          }

          ++v26;
          v23 -= 48LL;
          v24 += 48LL;
        }

        while (v26 < v25);
      }

      __int128 v9 = v18;
    }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v120 = v35 & 0xFFFFFFFFFFFFF0FFLL | (v129 << 8);
LABEL_103:
          swift_unknownObjectRetain();
          char v119 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v105, v120, v31, v103, v104);
          uint64_t result = swift_unknownObjectRelease_n();
          __int128 v123 = v37 - v30;
          if (__OFSUB__(v37, v30)) {
            goto LABEL_367;
          }
          goto LABEL_124;
        }

        unint64_t v104 = *(void *)(a1 + 72);
      }

      else
      {
        char v37 = v370;
        char v106 = v365;
        if (v344 >= 0x800) {
          goto LABEL_379;
        }
      }

      swift_unknownObjectRetain_n();
      uint64_t v120 = specialized Rope._endPath.getter(v103);
      swift_unknownObjectRelease();
      uint64_t v31 = 0LL;
      unint64_t v30 = 0LL;
      if (v103) {
        goto LABEL_103;
      }
      char v119 = 0LL;
      __int128 v123 = v37;
LABEL_124:
      *(void *)&v395 = v105;
      *((void *)&v395 + 1) = v120;
      *(void *)&v396 = v31;
      *((void *)&v396 + 1) = v119;
      *(void *)&v397 = v123;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v395,  0LL,  v37,  (void *)a1,  (uint64_t *)&v378,  v106,  v361,  (uint64_t)&v384);
      swift_bridgeObjectRelease();
      swift_release();
      __int128 v86 = v397;
      uint64_t v131 = *(void *)(a1 + 64);
      uint64_t v132 = *(void *)(a1 + 72);
      uint64_t v133 = *(void *)(a1 + 80);
      char v134 = *(void *)(a1 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( 0LL,  v372 & 1,  v131,  v132,  v133,  v134,  (uint64_t *)&v453);
      uint64_t v135 = v455;
      swift_unknownObjectRelease();
      if (v135 >= v86 || !*(void *)(v378 + 16))
      {
        swift_release();
        __int128 v91 = v376;
        goto LABEL_128;
      }
    }
  }

  swift_release();
LABEL_128:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v395 = v91;
  uint64_t v136 = *(void *)(a1 + 64);
  unint64_t v137 = *(void *)(a1 + 72);
  unint64_t v138 = *(void *)(a1 + 80);
  unint64_t v139 = *(void *)(a1 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v91 - 1,  v372 & 1,  v136,  v137,  v138,  v139,  (uint64_t *)&v453);
  v362 = v454;
  v366 = v453;
  unint64_t v140 = v455;
  swift_unknownObjectRelease();
  v466[0] = v366;
  v466[1] = v362;
  v467 = v140;
  uint64_t v141 = *(void *)(a1 + 64);
  uint64_t v142 = *(void *)(a1 + 72);
  uint64_t v143 = *(void *)(a1 + 80);
  __int128 v144 = *(void *)(a1 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v466, v141, v142, v143, v144);
  uint64_t v146 = v145;
  char v37 = v147;
  swift_unknownObjectRelease();
  __int16 v35 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)( (uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:),  0LL,  v146);
  uint64_t v149 = v148;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v30 = *(void *)(v35 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v31 = 0LL;
  *(void *)&v378 = result;
  uint64_t v150 = 1LL << *(_BYTE *)(v35 + 32);
  Swift::String v43 = -1LL;
  if (v150 < 64) {
    Swift::String v43 = ~(-1LL << v150);
  }
  uint64_t v151 = v35 + 64;
  uint64_t v152 = v43 & *(void *)(v35 + 64);
  uint64_t v38 = (unint64_t)(v150 + 63) >> 6;
  while (1)
  {
    if (v152)
    {
      uint64_t v153 = __clz(__rbit64(v152));
      v152 &= v152 - 1;
      uint64_t v154 = v153 | (v31 << 6);
      goto LABEL_132;
    }

    uint64_t v40 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      goto LABEL_338;
    }
    if (v40 >= v38)
    {
LABEL_152:
      swift_release();
      uint64_t v159 = *(_OWORD *)(a1 + 32);
      v463 = *(_OWORD *)(a1 + 16);
      v464 = v159;
      v465 = *(_OWORD *)(a1 + 48);
      BigString.utf8.getter();
      unint64_t v30 = BigString.UTF8View.count.getter();
      uint64_t result = outlined release of Locale((uint64_t)v407);
      if (v30 < v376) {
        goto LABEL_370;
      }
      uint64_t v160 = *(void *)(a1 + 64);
      uint64_t v161 = *(void *)(a1 + 72);
      uint64_t v162 = *(void *)(a1 + 80);
      uint64_t v163 = *(void *)(a1 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      unint64_t v164 = v163;
      uint64_t v165 = v376;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v376,  v372 & 1,  v160,  v161,  v162,  v164,  (uint64_t *)&v453);
      v373 = v453;
      uint64_t v166 = v454;
      uint64_t v167 = v455;
      swift_unknownObjectRelease();
      v453 = v373;
      v454 = v166;
      *(void *)&v455 = v167;
      if (v376 != v30) {
        goto LABEL_157;
      }
LABEL_158:
      AttributedString._InternalRunsSlice.startIndex.getter((void *)a1, v165, v408);
      for (uint64_t i = &v409; v167 < *i && *(void *)(v378 + 16); uint64_t i = &v411)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v453,  v165,  v30,  (void *)a1,  (uint64_t *)&v378,  v35,  v149,  (uint64_t)&v395);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( (void *)a1,  v165,  v30,  (uint64_t *)&v453);
        uint64_t v167 = v455;
        if (v165 == v30) {
          goto LABEL_158;
        }
LABEL_157:
        uint64_t v168 = *(void *)(a1 + 72);
        unint64_t v169 = *(void *)(a1 + 80);
        uint64_t v170 = *(void *)(a1 + 88);
        unint64_t v171 = swift_unknownObjectRetain();
        uint64_t v172 = v170;
        uint64_t v165 = v376;
        AttributedString._InternalRuns.endIndex.getter(v171, v168, v169, v172, v410);
        swift_unknownObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      v364 = v395;
      v344 = v384;
      __int128 v3 = v368;
      Swift::String v55 = v359;
      goto LABEL_162;
    }

    uint64_t v157 = *(void *)(v151 + 8 * v40);
    ++v31;
    if (!v157)
    {
      uint64_t v31 = v40 + 1;
      if (v40 + 1 >= v38) {
        goto LABEL_152;
      }
      uint64_t v157 = *(void *)(v151 + 8 * v31);
      if (!v157)
      {
        uint64_t v31 = v40 + 2;
        if (v40 + 2 >= v38) {
          goto LABEL_152;
        }
        uint64_t v157 = *(void *)(v151 + 8 * v31);
        if (!v157)
        {
          uint64_t v31 = v40 + 3;
          if (v40 + 3 >= v38) {
            goto LABEL_152;
          }
          uint64_t v157 = *(void *)(v151 + 8 * v31);
          if (!v157)
          {
            uint64_t v31 = v40 + 4;
            if (v40 + 4 >= v38) {
              goto LABEL_152;
            }
            uint64_t v157 = *(void *)(v151 + 8 * v31);
            if (!v157) {
              break;
            }
          }
        }
      }
    }

          __break(1u);
          goto LABEL_123;
        }

              __break(1u);
              goto LABEL_123;
            }

LABEL_114:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v37 == 47)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v88);
    goto LABEL_34;
  }

              swift_unknownObjectRetain();
              __int128 v9 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v34, v35, v36, v1, v9);
              swift_release();
              swift_unknownObjectRelease_n();
              goto LABEL_154;
            }

    __int128 v90 = v77 + *(unsigned __int16 *)(v40 + 46) - *(unsigned __int16 *)(v22 + 46);
    Swift::String v76 = v90 + 0xFFFF;
    *((_WORD *)v63._rawValue + 23) = v90 - 1;
    if (v70 != 7)
    {
LABEL_160:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
LABEL_161:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_162:
      type metadata accessor for NSComparisonResult(0LL);
      char v126 = v40;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return result;
    }

    LODWORD(v77) = HIWORD(v76);
    __int128 v78 = 8LL;
LABEL_116:
    if (v78 >= v64) {
      goto LABEL_128;
    }
    if (!HIWORD(v76))
    {
      while (v78 < *((void *)v63._rawValue + 2))
      {
        __int128 v91 = *(unsigned __int16 *)(v75 + 2 * v78);
        uint64_t v61 = v91 + 0xFFFF;
        v62[v78] = v91 - 1;
        if (v64 - 1 == v78) {
          goto LABEL_135;
        }
        ++v78;
        if (v91) {
          goto LABEL_121;
        }
      }

      goto LABEL_152;
    }

    goto LABEL_121;
  }

  if (!v64)
  {
    if (v65)
    {
      __int128 v78 = 0LL;
      LODWORD(v77) = 1;
      goto LABEL_129;
    }

    __int128 v83 = 8LL;
LABEL_138:
    if (!v62[v83 - 1])
    {
      do
      {
        *((void *)v63._rawValue + 2) = v83 - 1;
        if (v83 == 1) {
          break;
        }
      }

      while (!*((unsigned __int16 *)v63._rawValue + v83-- + 14));
    }

      swift_bridgeObjectRelease();
      *(void *)(v93 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    __int128 v93 = MEMORY[0x18961AFE8];
  }

  else
  {
    __int128 v6 = v5 >> 1;
    __int128 v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
    __int128 v3 = v95;
    __int128 v93 = v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }

  __int128 v9 = 0LL;
  __int128 v92 = v2;
  __int128 v10 = *v2;
  unint64_t v11 = (char *)MEMORY[0x18961AFE8];
  uint64_t v96 = *v2;
  while (1)
  {
    unint64_t v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(unsigned __int8 *)(v10 + v9);
      int v15 = *(unsigned __int8 *)(v10 + v13);
      __int128 v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        Swift::String v16 = v14;
        while (1)
        {
          Swift::String v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          Swift::String v16 = v17;
          if (v3 == v9)
          {
            __int128 v9 = v3;
            break;
          }
        }
      }

      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          uint64_t v18 = v9 - 1;
          unint64_t v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              unint64_t v20 = *(_BYTE *)(v10 + v19);
              *(_BYTE *)(v10 + v19) = *(_BYTE *)(v10 + v18);
              *(_BYTE *)(v10 + v18) = v20;
            }

            Swift::String v59 = ++v19 < v18--;
          }

          while (v59);
        }
      }
    }

    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v94) {
      goto LABEL_47;
    }
    unint64_t v21 = v13 + v94;
    if (__OFADD__(v13, v94)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      unint64_t v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (_BYTE *)(v10 + v9);
      do
      {
        uint64_t v23 = *(unsigned __int8 *)(v10 + v9);
        uint64_t v24 = v13;
        __int128 v25 = v22;
        do
        {
          unint64_t v26 = *(v25 - 1);
          if (v23 >= v26) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *__int128 v25 = v26;
          *--__int128 v25 = v23;
          ++v24;
        }

        while (v9 != v24);
        ++v9;
        ++v22;
      }

      while (v9 != v21);
      __int128 v9 = v21;
    }

      swift_bridgeObjectRelease();
      *(void *)(v93 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    __int128 v93 = MEMORY[0x18961AFE8];
  }

  else
  {
    __int128 v6 = v5 >> 1;
    __int128 v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
    __int128 v3 = v95;
    __int128 v93 = v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }

  __int128 v9 = 0LL;
  __int128 v92 = v2;
  __int128 v10 = *v2;
  unint64_t v11 = (char *)MEMORY[0x18961AFE8];
  uint64_t v96 = *v2;
  while (1)
  {
    unint64_t v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(unsigned __int8 *)(v10 + v9);
      int v15 = *(unsigned __int8 *)(v10 + v13);
      __int128 v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        Swift::String v16 = v14;
        while (1)
        {
          Swift::String v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          Swift::String v16 = v17;
          if (v3 == v9)
          {
            __int128 v9 = v3;
            break;
          }
        }
      }

      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          uint64_t v18 = v9 - 1;
          unint64_t v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              unint64_t v20 = *(_BYTE *)(v10 + v19);
              *(_BYTE *)(v10 + v19) = *(_BYTE *)(v10 + v18);
              *(_BYTE *)(v10 + v18) = v20;
            }

            Swift::String v59 = ++v19 < v18--;
          }

          while (v59);
        }
      }
    }

    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v94) {
      goto LABEL_47;
    }
    unint64_t v21 = v13 + v94;
    if (__OFADD__(v13, v94)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      unint64_t v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (_BYTE *)(v10 + v9);
      do
      {
        uint64_t v23 = *(unsigned __int8 *)(v10 + v9);
        uint64_t v24 = v13;
        __int128 v25 = v22;
        do
        {
          unint64_t v26 = *(v25 - 1);
          if (v23 >= v26) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *__int128 v25 = v26;
          *--__int128 v25 = v23;
          ++v24;
        }

        while (v9 != v24);
        ++v9;
        ++v22;
      }

      while (v9 != v21);
      __int128 v9 = v21;
    }

      Swift::String v112 = swift_bridgeObjectRelease();
      char v113 = (void *)(*(void *)(v121 + 56) + 16 * v118);
      void *v113 = v110;
      v113[1] = v111;
LABEL_115:
      char v108 = specialized LazyMapSequence.Iterator.next()(v112);
      uint64_t v109 = v114;
      uint64_t v110 = v115;
      Swift::String v111 = v116;
      a2 = 1LL;
      a1 = v121;
      if (!v114) {
        goto LABEL_158;
      }
      continue;
    }

    break;
  }

  if ((a2 & 1) != 0)
  {
    if ((v117 & 1) == 0) {
      goto LABEL_123;
    }
    goto LABEL_114;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
  char v128 = static _DictionaryStorage.copy(original:)();
  __int128 v121 = v128;
  if (!*(void *)(a1 + 16))
  {
LABEL_155:
    Swift::String v112 = swift_release();
    uint64_t v233 = (void *)v121;
    if ((v122 & 1) == 0) {
      goto LABEL_123;
    }
    goto LABEL_114;
  }

  unint64_t v129 = (void *)(v128 + 64);
  unint64_t v130 = (unint64_t)((1LL << *(_BYTE *)(v121 + 32)) + 63) >> 6;
  uint64_t v207 = a1 + 64;
  uint64_t v131 = 0LL;
  *(void *)(v121 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a1 + 16);
  uint64_t v132 = 1LL << *(_BYTE *)(a1 + 32);
  if (v132 < 64) {
    uint64_t v133 = ~(-1LL << v132);
  }
  else {
    uint64_t v133 = -1LL;
  }
  a2 = v133 & *(void *)(a1 + 64);
  unint64_t v226 = (unint64_t)(v132 + 63) >> 6;
  while (2)
  {
    if (a2)
    {
      char v134 = __clz(__rbit64(a2));
      a2 &= a2 - 1;
      uint64_t v135 = v134 | (v131 << 6);
LABEL_134:
      uint64_t v136 = 16 * v135;
      unint64_t v137 = (uint64_t *)(*(void *)(a1 + 48) + v136);
      unint64_t v139 = *v137;
      unint64_t v138 = v137[1];
      unint64_t v140 = *(_OWORD *)(*(void *)(a1 + 56) + v136);
      uint64_t v141 = (void *)(*(void *)(v121 + 48) + v136);
      *uint64_t v141 = v139;
      v141[1] = v138;
      *(_OWORD *)(*(void *)(v121 + 56) + v136) = v140;
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  Swift::String v60 = __OFADD__(v131++, 1LL);
  if (v60) {
    goto LABEL_265;
  }
  if (v131 >= v226) {
    goto LABEL_155;
  }
  uint64_t v142 = *(void *)(v207 + 8 * v131);
  if (v142)
  {
LABEL_150:
    a2 = (v142 - 1) & v142;
    uint64_t v135 = __clz(__rbit64(v142)) + (v131 << 6);
    goto LABEL_134;
  }

  uint64_t v143 = v131 + 1;
  if (v131 + 1 >= v226) {
    goto LABEL_155;
  }
  uint64_t v142 = *(void *)(v207 + 8 * v143);
  if (v142) {
    goto LABEL_149;
  }
  uint64_t v143 = v131 + 2;
  if (v131 + 2 >= v226) {
    goto LABEL_155;
  }
  uint64_t v142 = *(void *)(v207 + 8 * v143);
  if (v142) {
    goto LABEL_149;
  }
  uint64_t v143 = v131 + 3;
  if (v131 + 3 >= v226) {
    goto LABEL_155;
  }
  uint64_t v142 = *(void *)(v207 + 8 * v143);
  if (v142) {
    goto LABEL_149;
  }
  uint64_t v143 = v131 + 4;
  if (v131 + 4 >= v226) {
    goto LABEL_155;
  }
  uint64_t v142 = *(void *)(v207 + 8 * v143);
  if (v142) {
    goto LABEL_149;
  }
  uint64_t v143 = v131 + 5;
  if (v131 + 5 >= v226) {
    goto LABEL_155;
  }
  uint64_t v142 = *(void *)(v207 + 8 * v143);
  if (v142)
  {
LABEL_149:
    uint64_t v131 = v143;
    goto LABEL_150;
  }

  while (1)
  {
    uint64_t v131 = v143 + 1;
    if (__OFADD__(v143, 1LL)) {
      break;
    }
    if (v131 >= v226) {
      goto LABEL_155;
    }
    uint64_t v142 = *(void *)(v207 + 8 * v131);
    ++v143;
    if (v142) {
      goto LABEL_150;
    }
  }

      __int128 v95 = (v103 - 1) & v103;
      uint64_t v101 = __clz(__rbit64(v103)) + (v104 << 6);
      int64_t v97 = v104;
      goto LABEL_115;
    }

      __break(1u);
      goto LABEL_115;
    }

                    swift_release();
                    __int128 v4 = v3;
                    __int128 v6 = v74;
LABEL_106:
                    void *v4 = v10;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v6);
                    uint64_t result = Hasher._finalize()();
                    char v67 = -1LL << *(_BYTE *)(v10 + 32);
                    a2 = result & ~v67;
                    if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
                    {
                      uint64_t v68 = *(void *)(v10 + 48);
                      if (*(unsigned __int8 *)(v68 + a2) == (_DWORD)v6)
                      {
LABEL_111:
                        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }

                      else
                      {
                        CFURLRef v69 = ~v67;
                        while (1)
                        {
                          a2 = (a2 + 1) & v69;
                          if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
                            break;
                          }
                        }
                      }
                    }

                    goto LABEL_112;
                  }

                  Swift::String v46 = v58;
                }
              }
            }
          }

                    swift_release_n();
                    __int128 v6 = v79;
LABEL_106:
                    *__int128 v3 = v10;
                    Hasher.init(_seed:)();
                    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v80);
                    uint64_t result = Hasher._finalize()();
                    CFURLRef v69 = -1LL << *(_BYTE *)(v10 + 32);
                    a2 = result & ~v69;
                    if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
                    {
                      uint64_t v70 = swift_retain();
                      __int128 v71 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v70, v6);
                      uint64_t result = swift_release();
                      if ((v71 & 1) != 0)
                      {
LABEL_111:
                        type metadata accessor for _BPlistEncodingFormat.Reference();
                        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }

                      else
                      {
                        uint64_t v72 = ~v69;
                        while (1)
                        {
                          a2 = (a2 + 1) & v72;
                          if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
                            break;
                          }
                          Swift::String v73 = swift_retain();
                          uint64_t v74 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v73, v6);
                          uint64_t result = swift_release();
                          if ((v74 & 1) != 0) {
                            goto LABEL_111;
                          }
                        }
                      }
                    }

                    goto LABEL_112;
                  }

                  uint64_t v54 = v60;
                }
              }
            }
          }

                    swift_release();
                    __int128 v6 = v74;
                    __int128 v4 = v3;
LABEL_106:
                    void *v4 = v10;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v6);
                    uint64_t result = Hasher._finalize()();
                    char v67 = -1LL << *(_BYTE *)(v10 + 32);
                    a2 = result & ~v67;
                    if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
                    {
                      uint64_t v68 = *(void *)(v10 + 48);
                      if (*(_DWORD *)(v68 + 4 * a2) == v6)
                      {
LABEL_111:
                        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }

                      else
                      {
                        CFURLRef v69 = ~v67;
                        while (1)
                        {
                          a2 = (a2 + 1) & v69;
                          if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
                            break;
                          }
                          if (*(_DWORD *)(v68 + 4 * a2) == v6) {
                            goto LABEL_111;
                          }
                        }
                      }
                    }

                    goto LABEL_112;
                  }

                  Swift::String v46 = v58;
                }
              }
            }
          }

                    swift_release();
                    __int128 v4 = v3;
                    __int128 v6 = v74;
LABEL_106:
                    void *v4 = v10;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v6);
                    uint64_t result = Hasher._finalize()();
                    char v67 = -1LL << *(_BYTE *)(v10 + 32);
                    a2 = result & ~v67;
                    if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
                    {
                      uint64_t v68 = *(void *)(v10 + 48);
                      if (*(unsigned __int8 *)(v68 + a2) == (_DWORD)v6)
                      {
LABEL_111:
                        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }

                      else
                      {
                        CFURLRef v69 = ~v67;
                        while (1)
                        {
                          a2 = (a2 + 1) & v69;
                          if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
                            break;
                          }
                        }
                      }
                    }

                    goto LABEL_112;
                  }

                  Swift::String v46 = v58;
                }
              }
            }
          }

                __int16 v27 = -[NSPresentationIntent parentIntent](v27, "parentIntent");
                goto LABEL_115;
              }

              if (type != *(_DWORD *)_NS_CMARK_NODE_TABLE_CELL) {
                goto LABEL_115;
              }
              if (v26 == 3) {
                goto LABEL_114;
              }
              if (v26 != 2) {
                goto LABEL_115;
              }
              unint64_t v30 = v105 + 1;
              __int16 v27 = +[NSPresentationIntent tableCellIntentWithIdentity:column:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "tableCellIntentWithIdentity:column:nestedInsideIntent:");
              ++v95;
            }

            goto LABEL_61;
          }

          if (!-[NSAttributedStringMarkdownParsingOptions allowsExtendedAttributes](a4, "allowsExtendedAttributes")) {
            goto LABEL_115;
          }
          if (v26 == 3)
          {
            uint64_t v87 = v106;
            goto LABEL_176;
          }

          if (v26 != 2) {
            goto LABEL_115;
          }
          attributes = (const char *)_NS_cmark_node_get_attributes(node);
          unint64_t v65 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:attributes length:strlen(attributes) freeWhenDone:0];
          char v108 = 0LL;
          Swift::String v66 = [a1 parseExtendedAttributesFromData:v65 error:&v108];

          if (v66)
          {
            char v67 = (void *)objc_msgSend((id)objc_msgSend(v106, "lastObject"), "mutableCopy");
            [v67 addEntriesFromDictionary:v66];
            [v106 addObject:v67];

            goto LABEL_115;
          }

          if (-[NSAttributedStringMarkdownParsingOptions failurePolicy](a4, "failurePolicy"))
          {
            objc_msgSend(v106, "addObject:", objc_msgSend(v106, "lastObject"));
            goto LABEL_115;
          }

          if (a6) {
            *a6 = v108;
          }
LABEL_186:
          uint64_t v22 = 0LL;
          uint64_t v23 = v101;
LABEL_22:
          _NS_cmark_iter_free(v20);
          _NS_cmark_node_free(v23);
          _NS_cmark_parser_free(v14);
          return v22;
      }
  }

LABEL_73:
  uint64_t v47 = URLComponents._URLComponents.encodedHost.getter();
  if (v48)
  {
    String.append(_:)(*(Swift::String *)&v47);
    swift_bridgeObjectRelease();
  }

  URLComponents._URLComponents.port.getter();
  if ((v49 & 1) == 0)
  {
    v76._uint64_t countAndFlagsBits = 58LL;
    v76._unint64_t object = (void *)0xE100000000000000LL;
    v50._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
LABEL_77:
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_81;
  }

  if ((BYTE13(v88) & 1) != 0 && (void)v88 && (*(_BYTE *)(v88 + 144) & 1) == 0)
  {
    uint64_t v54 = String.subscript.getter();
    v76._uint64_t countAndFlagsBits = 58LL;
    v76._unint64_t object = (void *)0xE100000000000000LL;
    v55._uint64_t countAndFlagsBits = MEMORY[0x186E1B610](v54);
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }

          uint64_t v56 = v17;
          swift_retain();
          swift_retain();
          if (_foundation_swift_url_feature_enabled())
          {
            __int128 v124 = v29;
            id v125 = v43;
            uint64_t v131 = v30;
            unsigned int v57 = v56;
            swift_retain();
            swift_retain();
            uint64_t v58 = URL.path(percentEncoded:)(1);
            uint64_t countAndFlagsBits = v58._countAndFlagsBits;
            unint64_t v130 = v58;
            swift_bridgeObjectRetain();
            if (String.count.getter() <= 1)
            {
              unint64_t object = (unint64_t)v58._object;
            }

            else
            {
              unint64_t object = (unint64_t)v58._object;
              if ((specialized BidirectionalCollection.last.getter( v58._countAndFlagsBits,  (unint64_t)v58._object) & 0x1FF) == 0x2F)
              {
                specialized RangeReplaceableCollection<>.popLast()();
                swift_bridgeObjectRelease();
                uint64_t countAndFlagsBits = v130._countAndFlagsBits;
                unint64_t object = (unint64_t)v130._object;
              }
            }

            uint64_t v127 = Set.init(minimumCapacity:)();
            uint64_t v74 = specialized Set._Variant.insert(_:)(&v129, 0x2FuLL);
            unint64_t v75 = v127;
            Swift::String v76 = HIBYTE(object) & 0xF;
            if ((object & 0x2000000000000000LL) == 0) {
              Swift::String v76 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (v76)
            {
              uint64_t v127 = countAndFlagsBits;
              char v128 = object;
              MEMORY[0x1895F8858](v74);
              char v114 = (uint64_t)&v127;
              id v115 = v75;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v113,  countAndFlagsBits,  object);
              if (v77 == 1)
              {
                __int128 v78 = v127;
                __int128 v79 = v128;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v78, v79, v75);
                swift_bridgeObjectRelease();
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              Swift::String v28 = v119;
              unint64_t v30 = v120;
            }

            else
            {
              swift_bridgeObjectRelease();
              Swift::String v28 = v119;
              unint64_t v30 = v120;
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Swift::String v17 = v121;
            outlined consume of PathOrURL(v121, v28, v30, 1);
            outlined consume of PathOrURL(v17, v28, v30, 1);
            unint64_t v29 = v124;
            Swift::String v43 = v125;
          }

          else
          {
            uint64_t v61 = objc_msgSend(v56, sel__parameterString);
            if (v61)
            {
              uint64_t v62 = v61;
              Swift::String v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              unint64_t v65 = v64;

              if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                && (Swift::String v66 = objc_msgSend(v56, sel_path)) != 0)
              {
                char v67 = v66;
                uint64_t v68 = v56;
                CFURLRef v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
                id v125 = v43;
                __int128 v71 = v70;

                v130._uint64_t countAndFlagsBits = (uint64_t)v69;
                v130._unint64_t object = v71;
                swift_bridgeObjectRetain();
                v72._uint64_t countAndFlagsBits = 59LL;
                v72._unint64_t object = (void *)0xE100000000000000LL;
                String.append(_:)(v72);
                Swift::String v43 = v125;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v73._uint64_t countAndFlagsBits = (uint64_t)v63;
                v73._unint64_t object = v65;
                String.append(_:)(v73);
                swift_bridgeObjectRelease();
                uint64_t v56 = v68;
                Swift::String v17 = v121;
              }

              else
              {
                v130._uint64_t countAndFlagsBits = 59LL;
                v130._unint64_t object = (void *)0xE100000000000000LL;
                v80._uint64_t countAndFlagsBits = (uint64_t)v63;
                v80._unint64_t object = v65;
                String.append(_:)(v80);
              }

              swift_bridgeObjectRelease();
              outlined consume of PathOrURL(v17, v119, v30, 1);
            }

            else
            {
              __int128 v81 = objc_msgSend(v56, sel_path);
              if (v81)
              {
                __int128 v82 = v81;
                static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
              }

              outlined consume of PathOrURL(v17, v119, v30, 1);
            }
          }

          __int128 v92 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          __int128 v93 = v56;
          outlined consume of PathOrURL(v17, v28, v30, 1);
          if (v43)
          {
            __int128 v94 = v30;
            __int128 v95 = v28;
            uint64_t v96 = v29;
            v130._uint64_t countAndFlagsBits = (uint64_t)v43;
            lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
            int64_t v97 = v43;
            if (_getErrorEmbeddedNSError<A>(_:)())
            {
              uint64_t v98 = v97;
            }

            else
            {
              swift_allocError();
              uint64_t v98 = v97;
              *uint64_t v100 = v97;
            }

            unint64_t v99 = (void *)_swift_stdlib_bridgeErrorToNSError();
            Swift::String v43 = v98;
            unint64_t v29 = v96;
            Swift::String v28 = v95;
            unint64_t v30 = v94;
            Swift::String v17 = v121;
          }

          else
          {
            unint64_t v99 = 0LL;
          }

           objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v29,  v92,  v93,  v99,  0,  0,  0);

          swift_unknownObjectRelease();
          outlined consume of PathOrURL(v17, v28, v30, 1);
          break;
      }

      goto LABEL_110;
    }

    goto LABEL_55;
  }

      __break(1u);
      goto LABEL_74;
    }

    int v15 = a2 + 3;
    Swift::String v16 = 1LL;
    while (1)
    {
      Swift::String v17 = *v15;
      v15 += 3;
      unint64_t v11 = v12 - v17;
      if (__OFSUB__(v12, v17))
      {
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }

      if (__OFADD__(v11, 1LL)) {
        goto LABEL_69;
      }
      if (v11 + 1 < 1) {
        break;
      }
      ++v16;
      uint64_t v12 = v11;
      if (v10 == v16) {
        goto LABEL_15;
      }
    }

    __int128 v10 = v16;
    unint64_t v13 = __OFSUB__(a4, a3);
    uint64_t v14 = a4 - a3;
    if (v13) {
      goto LABEL_38;
    }
  }

    *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v53;
LABEL_74:
    swift_bridgeObjectRelease();
    uint64_t v12 = v23;
LABEL_75:
    if (++v11 == v9)
    {
LABEL_150:
      uint64_t v154 = v12;
      swift_bridgeObjectRelease();
      goto LABEL_152;
    }
  }

  Swift::String v16 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&__src[0] = v12;
  uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  unint64_t v19 = *(void *)(v12 + 16);
  unint64_t v20 = (v17 & 1) == 0;
  unint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_225:
    __break(1u);
    goto LABEL_226;
  }

  uint64_t v22 = v17;
  if (*(void *)(v12 + 24) < v21)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, v16);
    uint64_t v23 = *(void *)&__src[0];
    uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    if ((v22 & 1) != (v25 & 1)) {
      goto LABEL_239;
    }
    uint64_t v18 = v24;
    if ((v22 & 1) == 0) {
      goto LABEL_72;
    }
LABEL_23:
    unsigned int v42 = *(void *)(v23 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v42 + 8 * v18) = MEMORY[0x18961AFE8];
    goto LABEL_74;
  }

  if ((v16 & 1) != 0)
  {
    uint64_t v23 = v12;
    if ((v17 & 1) != 0) {
      goto LABEL_23;
    }
LABEL_72:
    *(void *)(v23 + 8 * (v18 >> 6) + 64) |= 1LL << v18;
    *(_BYTE *)(*(void *)(v23 + 48) + v18) = v14;
    *(void *)(*(void *)(v23 + 56) + 8 * v18) = MEMORY[0x18961AFE8];
    __int128 v71 = *(void *)(v23 + 16);
    uint64_t v52 = __OFADD__(v71, 1LL);
    uint64_t v53 = v71 + 1;
    if (!v52) {
      goto LABEL_73;
    }
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
  Swift::String v55 = static _DictionaryStorage.copy(original:)();
  uint64_t v23 = v55;
  uint64_t v56 = v12;
  if (!*(void *)(v12 + 16))
  {
LABEL_71:
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }

  unsigned int v57 = (char *)(v55 + 64);
  uint64_t v58 = (char *)(v12 + 64);
  Swift::String v59 = (unint64_t)((1LL << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  uint64_t v155 = v12 + 64;
  if (v23 != v12 || v57 >= &v58[8 * v59]) {
    memmove(v57, v58, 8 * v59);
  }
  Swift::String v60 = 0LL;
  *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v56 + 16);
  uint64_t v61 = 1LL << *(_BYTE *)(v56 + 32);
  if (v61 < 64) {
    uint64_t v62 = ~(-1LL << v61);
  }
  else {
    uint64_t v62 = -1LL;
  }
  Swift::String v63 = v62 & *(void *)(v56 + 64);
  uint64_t v64 = (unint64_t)(v61 + 63) >> 6;
  while (2)
  {
    if (v63)
    {
      unint64_t v65 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      Swift::String v66 = v65 | (v60 << 6);
LABEL_46:
      char v67 = *(void *)(*(void *)(v56 + 56) + 8 * v66);
      *(_BYTE *)(*(void *)(v23 + 48) + v66) = *(_BYTE *)(*(void *)(v56 + 48) + v66);
      *(void *)(*(void *)(v23 + 56) + 8 * v66) = v67;
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  uint64_t v68 = v60 + 1;
  if (__OFADD__(v60, 1LL)) {
    goto LABEL_233;
  }
  __int128 v10 = v161;
  if (v68 >= v64) {
    goto LABEL_71;
  }
  CFURLRef v69 = *(void *)(v155 + 8 * v68);
  ++v60;
  if (v69) {
    goto LABEL_70;
  }
  Swift::String v60 = v68 + 1;
  if (v68 + 1 >= v64) {
    goto LABEL_71;
  }
  CFURLRef v69 = *(void *)(v155 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  Swift::String v60 = v68 + 2;
  if (v68 + 2 >= v64) {
    goto LABEL_71;
  }
  CFURLRef v69 = *(void *)(v155 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  Swift::String v60 = v68 + 3;
  if (v68 + 3 >= v64) {
    goto LABEL_71;
  }
  CFURLRef v69 = *(void *)(v155 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  Swift::String v60 = v68 + 4;
  if (v68 + 4 >= v64) {
    goto LABEL_71;
  }
  CFURLRef v69 = *(void *)(v155 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  Swift::String v60 = v68 + 5;
  if (v68 + 5 >= v64) {
    goto LABEL_71;
  }
  CFURLRef v69 = *(void *)(v155 + 8 * v60);
  if (v69) {
    goto LABEL_70;
  }
  Swift::String v60 = v68 + 6;
  if (v68 + 6 >= v64) {
    goto LABEL_71;
  }
  CFURLRef v69 = *(void *)(v155 + 8 * v60);
  if (v69)
  {
LABEL_70:
    Swift::String v63 = (v69 - 1) & v69;
    Swift::String v66 = __clz(__rbit64(v69)) + (v60 << 6);
    goto LABEL_46;
  }

  uint64_t v70 = v68 + 7;
  if (v70 >= v64) {
    goto LABEL_71;
  }
  CFURLRef v69 = *(void *)(v155 + 8 * v70);
  if (v69)
  {
    Swift::String v60 = v70;
    goto LABEL_70;
  }

  __int128 v10 = v161;
  while (1)
  {
    Swift::String v60 = v70 + 1;
    if (__OFADD__(v70, 1LL)) {
      break;
    }
    if (v60 >= v64) {
      goto LABEL_71;
    }
    CFURLRef v69 = *(void *)(v155 + 8 * v60);
    ++v70;
    if (v69) {
      goto LABEL_70;
    }
  }

      __break(1u);
      JUMPOUT(0x18319E5C8LL);
    }

    __int16 v35 = (unsigned __int8 *)(static ICURelativeDateFormatter.sortedAllowedComponents + 32);
    while (2)
    {
      uint64_t v36 = *v35++;
      char v37 = v36 - 1;
      if (((0x63Fu >> (v36 - 1)) & 1) != 0)
      {
        switch((char)v76)
        {
          case 1:
            if (((0x63Eu >> v37) & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_63;
          case 2:
            if (((0x63Cu >> v37) & 1) != 0) {
              goto LABEL_63;
            }
            goto LABEL_51;
          case 3:
            if (((0x38u >> v37) & 1) != 0) {
              goto LABEL_63;
            }
            goto LABEL_51;
          case 4:
            if (((0x30u >> v37) & 1) != 0) {
              goto LABEL_63;
            }
            goto LABEL_51;
          case 5:
            goto LABEL_51;
          case 6:
            goto LABEL_51;
          case 10:
          case 11:
            if (((0x3Cu >> v37) & 1) != 0)
            {
LABEL_63:
              switch(v37)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                  goto LABEL_65;
                default:
                  goto LABEL_69;
              }
            }

                        __break(1u);
                        goto LABEL_74;
                      }

        Swift::String v73 = (unsigned __int8 *)&outlined read-only object #0 of Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:);
        goto LABEL_80;
      }

      Swift::String v66 = *(void *)&v148[10];
      if ((v59 & 1) != 0) {
        goto LABEL_69;
      }
LABEL_52:
      Swift::String v46 = v138;
      LOBYTE(v42) = v136;
      if ((v44 & 1) != 0) {
        goto LABEL_71;
      }
      char v67 = __OFADD__(v66, -1000000000LL);
      v66 -= 1000000000LL;
      if (!v67) {
        goto LABEL_70;
      }
      __break(1u);
    }

    if ((v147 & 1) != 0) {
      goto LABEL_72;
    }
    time = v146._time;
    uint64_t v68 = *(void *)(static ICURelativeDateFormatter.sortedAllowedComponents + 16);
    if (!v68) {
      goto LABEL_73;
    }
    CFURLRef v69 = (unsigned __int8 *)(static ICURelativeDateFormatter.sortedAllowedComponents + 32);
    do
    {
      uint64_t v72 = *v69++;
      __int128 v71 = v72;
      if (v72 == 6)
      {
        if (v44 < 6u) {
          goto LABEL_67;
        }
      }

      else if (v71 == 5 && v44 < 5u)
      {
LABEL_67:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        Swift::String v73 = (unsigned __int8 *)swift_allocObject();
        *((_OWORD *)v73 + 1) = xmmword_1837232D0;
        v73[32] = v71;
        v73[33] = 13;
        goto LABEL_80;
      }

      --v68;
    }

    while (v68);
    Swift::String v73 = (unsigned __int8 *)&outlined read-only object #0 of Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:);
LABEL_80:
    Swift::String v76 = -1LL;
    if ((v59 & 1) == 0) {
      Swift::String v76 = 1LL;
    }
    uint64_t v133 = v76;
    uint64_t v77 = *((void *)v73 + 2);
    if (v77)
    {
      unint64_t v137 = swift_getObjectType();
      __int128 v78 = *(uint64_t (**)(double *, double *, _OWORD *, uint64_t, void))(*(void *)&v46 + 144LL);
      __int128 v10 = 1LL;
      else {
        __int128 v79 = -1LL;
      }
      uint64_t v131 = v79;
      uint64_t v132 = v78;
      if (v14 <= 1.59271755e13) {
        __int128 v80 = v14;
      }
      else {
        __int128 v80 = 1.59271755e13;
      }
      __int128 v81 = fmax(v80, -2.11845067e11);
      swift_bridgeObjectRetain();
      __int128 v82 = 0LL;
      unint64_t v130 = (uint64_t)v73;
      while (1)
      {
        a5 = v73[v82 + 32];
        __int128 v83 = v77;
        __int128 v84 = (_DWORD)a5 != 13 || v77 == 1;
        LOBYTE(v143[0]) = v73[v82 + 32];
        if (v84) {
          __int128 v85 = v133;
        }
        else {
          __int128 v85 = v131;
        }
        LOBYTE(v142[0]) = v42;
        *(double *)uint64_t v148 = v81;
        swift_unknownObjectRetain();
        __int128 v86 = v132(v143, v142, v148, v137, *(void *)&v46);
        uint64_t v12 = v87;
        __int128 v9 = v88;
        swift_unknownObjectRelease();
        if ((v9 & 1) != 0)
        {
LABEL_108:
          uint64_t result = swift_bridgeObjectRelease_n();
          __int128 v94 = v129;
          *unint64_t v129 = time;
          *((_BYTE *)v94 + 8) = 1;
          return result;
        }

        __int128 v89 = (uint64_t)&v12[-v86];
        if (__OFSUB__(v12, v86)) {
          break;
        }
        __int128 v90 = v85 * v89;
        memset(v148, 0, 40);
        BYTE8(v148[2]) = 1;
        *(void *)&v148[3] = 0LL;
        BYTE8(v148[3]) = 1;
        *(void *)&v148[4] = 0LL;
        BYTE8(v148[4]) = 1;
        *(void *)&v148[5] = 0LL;
        BYTE8(v148[5]) = 1;
        *(void *)&v148[6] = 0LL;
        BYTE8(v148[6]) = 1;
        *(void *)&v148[7] = 0LL;
        BYTE8(v148[7]) = 1;
        *(void *)&v148[8] = 0LL;
        BYTE8(v148[8]) = 1;
        *(void *)&v148[9] = 0LL;
        BYTE8(v148[9]) = 1;
        *(void *)&v148[10] = 0LL;
        BYTE8(v148[10]) = 1;
        *(void *)&v148[11] = 0LL;
        BYTE8(v148[11]) = 1;
        *(void *)&v148[12] = 0LL;
        BYTE8(v148[12]) = 1;
        *(void *)&v148[13] = 0LL;
        BYTE8(v148[13]) = 1;
        *(void *)&v148[14] = 0LL;
        BYTE8(v148[14]) = 1;
        *(void *)&v148[15] = 0LL;
        BYTE8(v148[15]) = 1;
        __int128 v91 = v135;
        void *v135 = 1;
        *(void *)&v148[16] = 0LL;
        *(void *)&v148[17] = 0LL;
        v91[16] = 1;
        BYTE9(v148[17]) = 2;
        v156.value = v90 / 2;
        LOBYTE(v143[0]) = a5;
        v156.is_nil = 0;
        DateComponents.setValue(_:for:)(v156, (Foundation::Calendar::Component)v143);
        memcpy(v143, v148, 0x11AuLL);
        __int128 v92 = time <= 1.59271755e13 ? time : 1.59271755e13;
        memcpy(v142, v148, 0x11AuLL);
        uint64_t v141 = fmax(v92, -2.11845067e11);
        Swift::String v46 = v138;
        __int128 v93 = *(void (**)(double *__return_ptr, double *, double *, void, uint64_t, void))(*(void *)&v138 + 200LL);
        swift_unknownObjectRetain();
        v93(&v144, v142, &v141, 0LL, v137, *(void *)&v46);
        outlined release of DateComponents((uint64_t)v143);
        swift_unknownObjectRelease();
        if ((v145 & 1) != 0) {
          goto LABEL_108;
        }
        ++v82;
        time = v144;
        uint64_t v77 = v83;
        LOBYTE(v42) = v136;
        Swift::String v73 = (unsigned __int8 *)v130;
        if (v83 == v82)
        {
          swift_bridgeObjectRelease();
          Swift::String v43 = v129;
          goto LABEL_106;
        }
      }

      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      swift_once();
      continue;
    }

    break;
  }

        swift_bridgeObjectRelease();
        return swift_release();
      }

      if (v5 == a1) {
        Swift::String v28 = v26;
      }
      else {
        Swift::String v28 = 1;
      }
    }

    while ((v28 & 1) != 0);
    if ((a4 & 1) == 0) {
      goto LABEL_73;
    }
    __int128 v5 = *(void *)(v6 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0) {
      break;
    }
LABEL_10:
    swift_bridgeObjectRelease();
  }

  unint64_t v32 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = *(void *)(v6 + 8);
  *(void *)(v6 + 8) = 0x8000000000000000LL;
  if ((v32 & 1) != 0)
  {
    int v15 = v33;
LABEL_9:
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v29, v15);
    __int128 v5 = *(void *)(v6 + 8);
    *(void *)(v6 + 8) = v15;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  unint64_t v34 = static _DictionaryStorage.copy(original:)();
  int v15 = v34;
  if (!*(void *)(v33 + 16))
  {
LABEL_70:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  __int16 v35 = (char *)(v34 + 64);
  uint64_t v36 = (char *)(v33 + 64);
  char v37 = (unint64_t)((1LL << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  uint64_t v101 = v33 + 64;
  if (v15 != v33 || v35 >= &v36[8 * v37]) {
    memmove(v35, v36, 8 * v37);
  }
  uint64_t v38 = 0LL;
  *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v33 + 16);
  uint64_t v39 = 1LL << *(_BYTE *)(v33 + 32);
  if (v39 < 64) {
    uint64_t v40 = ~(-1LL << v39);
  }
  else {
    uint64_t v40 = -1LL;
  }
  uint64_t v41 = v40 & *(void *)(v33 + 64);
  unint64_t v102 = (unint64_t)(v39 + 63) >> 6;
  while (2)
  {
    if (v41)
    {
      uint64_t v103 = (v41 - 1) & v41;
      unint64_t v104 = v38;
      unsigned int v42 = __clz(__rbit64(v41)) | (v38 << 6);
LABEL_48:
      Swift::String v43 = 16 * v42;
      uint64_t v44 = (uint64_t *)(*(void *)(v33 + 48) + v43);
      Swift::String v46 = *v44;
      uint64_t v45 = v44[1];
      uint64_t v47 = *(void *)(v33 + 56) + v43;
      uint64_t v48 = *(void *)v47;
      LOBYTE(v47) = *(_BYTE *)(v47 + 8);
      char v49 = (void *)(*(void *)(v15 + 48) + v43);
      *char v49 = v46;
      v49[1] = v45;
      Swift::String v50 = *(void *)(v15 + 56) + v43;
      *(void *)Swift::String v50 = v48;
      *(_BYTE *)(v50 + 8) = v47;
      swift_bridgeObjectRetain();
      uint64_t v41 = v103;
      uint64_t v38 = v104;
      continue;
    }

    break;
  }

  uint64_t v51 = v38 + 1;
  if (__OFADD__(v38, 1LL))
  {
    __break(1u);
    goto LABEL_121;
  }

  if (v51 >= v102) {
    goto LABEL_70;
  }
  uint64_t v52 = *(void *)(v101 + 8 * v51);
  uint64_t v53 = v38 + 1;
  if (v52) {
    goto LABEL_69;
  }
  uint64_t v53 = v38 + 2;
  if (v38 + 2 >= v102) {
    goto LABEL_70;
  }
  uint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52) {
    goto LABEL_69;
  }
  uint64_t v53 = v38 + 3;
  if (v38 + 3 >= v102) {
    goto LABEL_70;
  }
  uint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52) {
    goto LABEL_69;
  }
  uint64_t v53 = v38 + 4;
  if (v38 + 4 >= v102) {
    goto LABEL_70;
  }
  uint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52) {
    goto LABEL_69;
  }
  uint64_t v53 = v38 + 5;
  if (v38 + 5 >= v102) {
    goto LABEL_70;
  }
  uint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52) {
    goto LABEL_69;
  }
  uint64_t v53 = v38 + 6;
  if (v38 + 6 >= v102) {
    goto LABEL_70;
  }
  uint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52)
  {
LABEL_69:
    uint64_t v103 = (v52 - 1) & v52;
    unint64_t v104 = v53;
    unsigned int v42 = __clz(__rbit64(v52)) + (v53 << 6);
    goto LABEL_48;
  }

  uint64_t v54 = v38 + 7;
  if (v38 + 7 >= v102) {
    goto LABEL_70;
  }
  uint64_t v52 = *(void *)(v101 + 8 * v54);
  if (v52)
  {
    uint64_t v53 = v38 + 7;
    goto LABEL_69;
  }

  while (1)
  {
    uint64_t v53 = v54 + 1;
    if (__OFADD__(v54, 1LL)) {
      break;
    }
    if (v53 >= v102) {
      goto LABEL_70;
    }
    uint64_t v52 = *(void *)(v101 + 8 * v53);
    ++v54;
    if (v52) {
      goto LABEL_69;
    }
  }

    Swift::String v55 = (v64 - 1) & v64;
    uint64_t v58 = __clz(__rbit64(v64)) + (v52 << 6);
LABEL_48:
    Swift::String v59 = 8 * v58;
    Swift::String v60 = *(void *)(*(void *)(v88 + 48) + 8 * v58);
    uint64_t v61 = 16 * v58;
    uint64_t v62 = *(_OWORD *)(*(void *)(v88 + 56) + v61);
    *(void *)(*(void *)(v23 + 48) + v59) = v60;
    *(_OWORD *)(*(void *)(v23 + 56) + v61) = v62;
    swift_unknownObjectRetain();
  }

  unint64_t v65 = v63 + 8;
  if (v65 >= v56) {
    goto LABEL_75;
  }
  uint64_t v64 = *(void *)&__src[8 * v65];
  if (v64)
  {
    uint64_t v52 = v65;
    goto LABEL_73;
  }

  while (1)
  {
    uint64_t v52 = v65 + 1;
    if (__OFADD__(v65, 1LL)) {
      break;
    }
    if (v52 >= v56) {
      goto LABEL_75;
    }
    uint64_t v64 = *(void *)&__src[8 * v52];
    ++v65;
    if (v64) {
      goto LABEL_73;
    }
  }

  __break(1u);
  return result;
}

                  uint64_t v48 = v101;
                  if (!v101)
                  {
                    uint64_t v1 = MEMORY[0x18961AFF0];
                    goto LABEL_139;
                  }

                  if (v101 == *(void *)(v1 + 16))
                  {
                    swift_retain();
                    goto LABEL_139;
                  }

                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  Swift::String v73 = static _DictionaryStorage.allocate(capacity:)();
                  uint64_t v74 = 0LL;
                  unint64_t v75 = *v100;
                  Swift::String v76 = v73 + 64;
                  while (1)
                  {
                    if (v75)
                    {
                      __int128 v80 = __clz(__rbit64(v75));
                      v75 &= v75 - 1;
                      __int128 v81 = v80 | (v74 << 6);
                    }

                    else
                    {
                      __int128 v82 = v74 + 1;
                      if (__OFADD__(v74, 1LL)) {
                        goto LABEL_149;
                      }
                      if (v82 >= v99) {
                        goto LABEL_138;
                      }
                      __int128 v83 = v100[v82];
                      ++v74;
                      if (!v83)
                      {
                        uint64_t v74 = v82 + 1;
                        if (v82 + 1 >= v99) {
                          goto LABEL_138;
                        }
                        __int128 v83 = v100[v74];
                        if (!v83)
                        {
                          uint64_t v74 = v82 + 2;
                          if (v82 + 2 >= v99) {
                            goto LABEL_138;
                          }
                          __int128 v83 = v100[v74];
                          if (!v83)
                          {
                            uint64_t v74 = v82 + 3;
                            if (v82 + 3 >= v99) {
                              goto LABEL_138;
                            }
                            __int128 v83 = v100[v74];
                            if (!v83)
                            {
                              __int128 v84 = v82 + 4;
                              if (v84 >= v99) {
                                goto LABEL_138;
                              }
                              __int128 v83 = v100[v84];
                              if (!v83)
                              {
                                while (1)
                                {
                                  uint64_t v74 = v84 + 1;
                                  if (__OFADD__(v84, 1LL)) {
                                    goto LABEL_151;
                                  }
                                  if (v74 >= v99) {
                                    break;
                                  }
                                  __int128 v83 = v100[v74];
                                  ++v84;
                                  if (v83) {
                                    goto LABEL_128;
                                  }
                                }

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  __int128 v7 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *v3;
  __int128 v8 = *v3;
  *__int128 v3 = 0x8000000000000000LL;
  __int128 v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  unint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = (v10 & 1) == 0;
  unint64_t v13 = __OFADD__(v11, v12);
  uint64_t v14 = v11 + v12;
  if (v13)
  {
    __break(1u);
    goto LABEL_15;
  }

  int v15 = v10;
  if (*(void *)(v8 + 24) < v14)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, v7);
    Swift::String v16 = v54;
    __int128 v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v15 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_6;
    }

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  __int128 v7 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v52 = *v3;
  __int128 v8 = *v3;
  *__int128 v3 = 0x8000000000000000LL;
  __int128 v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  unint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = (v10 & 1) == 0;
  unint64_t v13 = __OFADD__(v11, v12);
  uint64_t v14 = v11 + v12;
  if (v13)
  {
    __break(1u);
    goto LABEL_15;
  }

  int v15 = v10;
  if (*(void *)(v8 + 24) < v14)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, v7);
    Swift::String v16 = v52;
    __int128 v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v15 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_6;
    }

    uint64_t v53 = (v62 - 1) & v62;
    Swift::String v55 = __clz(__rbit64(v62)) + (v50 << 6);
LABEL_52:
    uint64_t v56 = 16 * v55;
    unsigned int v57 = (uint64_t *)(*(void *)(v19 + 48) + v56);
    Swift::String v59 = *v57;
    uint64_t v58 = v57[1];
    uint64_t v68 = *(_OWORD *)(*(void *)(v19 + 56) + v56);
    Swift::String v60 = (void *)(*(void *)(v27 + 48) + v56);
    *Swift::String v60 = v59;
    v60[1] = v58;
    *(_OWORD *)(*(void *)(v27 + 56) + v56) = v68;
    swift_bridgeObjectRetain();
    uint64_t result = (char *)outlined copy of Data._Representation(v68, *((unint64_t *)&v68 + 1));
  }

  Swift::String v63 = v61 + 6;
  if (v63 >= v65) {
    goto LABEL_75;
  }
  uint64_t v62 = *(void *)&__src[8 * v63];
  if (v62)
  {
    Swift::String v50 = v63;
    goto LABEL_73;
  }

  while (1)
  {
    Swift::String v50 = v63 + 1;
    if (__OFADD__(v63, 1LL)) {
      break;
    }
    if (v50 >= v65) {
      goto LABEL_75;
    }
    uint64_t v62 = *(void *)&__src[8 * v50];
    ++v63;
    if (v62) {
      goto LABEL_73;
    }
  }

  __break(1u);
  return result;
}

                        if (v44)
                        {
                          *(void *)&v90[0] = v44;
                          *((void *)&v90[0] + 1) = v42;
                          if (v43)
                          {
                            *(void *)&v89[0] = v43;
                            *((void *)&v89[0] + 1) = v38;
                            swift_unknownObjectRetain_n();
                            unint64_t v32 = specialized static TimeZone.== infix(_:_:)((uint64_t)v90, (uint64_t)v89);
                            swift_unknownObjectRelease();
                            swift_unknownObjectRelease();
                            if ((v32 & 1) == 0) {
                              return 0LL;
                            }
                            goto LABEL_80;
                          }

                          swift_unknownObjectRetain();
                        }

                        else if (!v43)
                        {
LABEL_80:
                          if (v41)
                          {
                            if (v40) {
                              return v37 == v36 && v39 == v35
                            }
                                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                          }

                          else if (!v40)
                          {
                            return 1LL;
                          }

                          __int128 v25 = v33;
                          unint64_t v26 = v40;
                          outlined copy of Locale.LanguageCode?(v33, v40);
                          __int16 v27 = v34;
                          Swift::String v28 = v41;
                          goto LABEL_37;
                        }

                        swift_unknownObjectRelease();
                        return 0LL;
                      }

                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                    }

                    else if (!v53)
                    {
                      goto LABEL_73;
                    }

                    __int128 v25 = v45;
                    unint64_t v26 = v53;
                    outlined copy of Locale.LanguageCode?(v45, v53);
                    __int16 v27 = v46;
                    Swift::String v28 = v54;
LABEL_37:
                    outlined consume of Locale.LanguageCode?(v27, v28);
                    uint64_t v22 = v25;
                    uint64_t v23 = v26;
                    goto LABEL_38;
                  }

                  __int128 v25 = v50;
                  unint64_t v26 = v61;
                  outlined copy of Locale.LanguageCode?(v50, v61);
                  __int16 v27 = v51;
                  Swift::String v28 = v62;
                  goto LABEL_37;
                }

                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }

              else if (!v67)
              {
                goto LABEL_55;
              }

              __int128 v25 = v58;
              unint64_t v26 = v67;
              outlined copy of Locale.LanguageCode?(v58, v67);
              __int16 v27 = v59;
              Swift::String v28 = v68;
              goto LABEL_37;
            }

            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }

          else if (!v80)
          {
            goto LABEL_32;
          }

          __int128 v25 = v73;
          unint64_t v26 = v80;
          outlined copy of Locale.LanguageCode?(v73, v80);
          __int16 v27 = v74;
          Swift::String v28 = v81;
          goto LABEL_37;
        }

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else if (!v15)
      {
        goto LABEL_23;
      }

      outlined copy of Locale.LanguageCode?(v16, v15);
      outlined consume of Locale.LanguageCode?(v78, v85);
      uint64_t v22 = v16;
      uint64_t v23 = v15;
LABEL_38:
      outlined consume of Locale.LanguageCode?(v22, v23);
      return 0LL;
    }

      LODWORD(v92) = 0;
      __int128 v91 = 48LL;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }

    __int128 v10 = 1LL;
  }

uint64_t URLComponents.string.getter()
{
  __int128 v1 = v0[7];
  v7[6] = v0[6];
  v7[7] = v1;
  v8[0] = v0[8];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  v7[2] = v0[2];
  v7[3] = v2;
  __int128 v3 = v0[5];
  v7[4] = v0[4];
  v7[5] = v3;
  __int128 v4 = v0[1];
  v7[0] = *v0;
  v7[1] = v4;
  if ((BYTE8(v7[0]) & 1) == 0) {
    return URLComponents._URLComponents.computedString.getter();
  }
  outlined init with take of LocalePreferences?( (uint64_t)v7,  (uint64_t)v9,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v9,  (uint64_t)&v10,  &demangling cache variable for type metadata for URLParseInfo?);
  if (!v10) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  return v5;
}

void URLComponents.url(relativeTo:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v4 = v2[7];
  __int128 v5 = v2[5];
  __int128 v40 = v2[6];
  __int128 v41 = v4;
  __int128 v6 = v2[7];
  v42[0] = v2[8];
  *(_OWORD *)((char *)v42 + 10) = *(__int128 *)((char *)v2 + 138);
  __int128 v7 = v2[3];
  __int128 v8 = v2[1];
  __int128 v36 = v2[2];
  __int128 v37 = v7;
  __int128 v9 = v2[3];
  __int128 v10 = v2[5];
  __int128 v38 = v2[4];
  __int128 v39 = v10;
  __int128 v11 = v2[1];
  __int128 v34 = *v2;
  __int128 v35 = v11;
  _BYTE v32[8] = v40;
  v32[9] = v6;
  v33[0] = v2[8];
  *(_OWORD *)((char *)v33 + 10) = *(__int128 *)((char *)v2 + 138);
  v32[4] = v36;
  v32[5] = v9;
  v32[6] = v38;
  v32[7] = v5;
  unint64_t v13 = *(void **)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  void v32[2] = v34;
  v32[3] = v8;
  if (BYTE8(v34) == 1)
  {
    if ((void)v34)
    {
      uint64_t v16 = *(void *)(v34 + 16);
      unint64_t v15 = *(void *)(v34 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_5;
    }

uint64_t URLComponents.scheme.getter()
{
  if (v0[4])
  {
    uint64_t v1 = v0[3];
  }

  else
  {
    uint64_t v2 = *v0;
    BOOL v3 = *((_BYTE *)v0 + 9) != 1 || v2 == 0;
    if (v3 || (*(_BYTE *)(v2 + 48) & 1) != 0)
    {
      uint64_t v1 = 0LL;
    }

    else
    {
      uint64_t v4 = String.subscript.getter();
      uint64_t v1 = MEMORY[0x186E1B610](v4);
      swift_bridgeObjectRelease();
    }
  }

  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.scheme.setter(uint64_t a1, uint64_t a2)
{
  return URLComponents.scheme.setter(a1, a2, (void (*)(void))URLComponents._URLComponents.setScheme(_:));
}

uint64_t (*URLComponents.scheme.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  if (*(void *)(v1 + 32))
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = *(void *)(v1 + 32);
  }

  else
  {
    uint64_t v5 = *(void *)v1;
    BOOL v6 = *(_BYTE *)(v1 + 9) != 1 || v5 == 0;
    if (v6 || (*(_BYTE *)(v5 + 48) & 1) != 0)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = 0LL;
    }

    else
    {
      uint64_t v7 = String.subscript.getter();
      uint64_t v3 = MEMORY[0x186E1B610](v7);
      uint64_t v4 = v8;
      swift_bridgeObjectRelease();
    }
  }

  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return URLComponents.scheme.modify;
}

uint64_t URLComponents.scheme.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (void *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v4.value._uint64_t countAndFlagsBits = v3;
    v4.value._unint64_t object = v2;
    URLComponents._URLComponents.setScheme(_:)(v4);
    if (!v5)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    v6.value._uint64_t countAndFlagsBits = *a1;
    v6.value._unint64_t object = v2;
    URLComponents._URLComponents.setScheme(_:)(v6);
    if (!v5) {
      return swift_bridgeObjectRelease();
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*URLComponents.user.getter(uint64_t a1))()
{
  return URLComponents._URLComponents.user.getter(a1);
}

uint64_t URLComponents.user.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 10) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 40) = a1;
    *(void *)(v3 + 48) = a2;
    return result;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    __int128 v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    __int128 v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (v11)
    {
      unint64_t v27 = a1;
      uint64_t v28 = a2;
      StringProtocol._ephemeralString.getter();
      unint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v11,  (uint64_t)v14,  2u,  0);
    }

    else
    {
      char v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 2);
    }

    char v16 = v15;
    uint64_t v8 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v27 = a1;
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      Swift::String_optional v6 = (char *)&v27;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      Swift::String_optional v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      Swift::String_optional v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    uint64_t v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    if ((v8 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    MEMORY[0x1895F8858](v8);
    v25[2] = &v27;
    char v26 = 2;
    swift_bridgeObjectRetain();
    id v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v25,  a1,  a2);
    if (v19)
    {
      uint64_t v20 = (uint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }

    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 40) = v20;
  *(void *)(v3 + 48) = v21;
  return result;
}

void (*URLComponents.user.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  __int128 v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  __int128 v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  __int128 v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.user.getter((uint64_t)v3);
  *((void *)v3 + 21) = v8;
  return URLComponents.user.modify;
}

void URLComponents.user.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 160LL);
  uint64_t v4 = *(void *)a1 + 176LL;
  uint64_t v5 = *(void *)(*(void *)a1 + 192LL);
  unint64_t v6 = *(void *)(*(void *)a1 + 168LL);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 10) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000LL) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        __int128 v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        __int128 v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        id v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          __int128 v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v36,  v39,  2u,  0);
          uint64_t v17 = swift_bridgeObjectRelease();
          if ((v39 & 1) != 0) {
            goto LABEL_33;
          }
        }

        else
        {
          uint64_t v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
          uint64_t v17 = swift_bridgeObjectRelease();
          if ((v41 & 1) != 0) {
            goto LABEL_33;
          }
        }

uint64_t (*URLComponents.password.getter(uint64_t a1))()
{
  return URLComponents._URLComponents.password.getter(a1);
}

uint64_t key path getter for URLComponents.user : URLComponents@<X0>( _OWORD *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  __int128 v5 = a1[7];
  void v14[6] = a1[6];
  v14[7] = v5;
  v15[0] = a1[8];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)a1 + 138);
  __int128 v6 = a1[3];
  _OWORD v14[2] = a1[2];
  v14[3] = v6;
  __int128 v7 = a1[5];
  void v14[4] = a1[4];
  v14[5] = v7;
  __int128 v8 = a1[1];
  v14[0] = *a1;
  v14[1] = v8;
  uint64_t v9 = outlined retain of URLComponents((uint64_t)v14);
  uint64_t v10 = a2(v9);
  uint64_t v12 = v11;
  uint64_t result = outlined release of URLComponents((uint64_t)v14);
  *a3 = v10;
  a3[1] = v12;
  return result;
}

uint64_t URLComponents.password.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 11) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 56) = a1;
    *(void *)(v3 + 64) = a2;
    return result;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (v11)
    {
      unint64_t v27 = a1;
      uint64_t v28 = a2;
      StringProtocol._ephemeralString.getter();
      uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v11,  (uint64_t)v14,  2u,  0);
    }

    else
    {
      char v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 2);
    }

    char v16 = v15;
    uint64_t v8 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v27 = a1;
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      __int128 v6 = (char *)&v27;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      __int128 v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    uint64_t v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    if ((v8 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    MEMORY[0x1895F8858](v8);
    v25[2] = &v27;
    char v26 = 2;
    swift_bridgeObjectRetain();
    uint64_t v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v25,  a1,  a2);
    if (v19)
    {
      uint64_t v20 = (uint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }

    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 56) = v20;
  *(void *)(v3 + 64) = v21;
  return result;
}

void (*URLComponents.password.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  __int128 v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  __int128 v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  __int128 v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.password.getter((uint64_t)v3);
  *((void *)v3 + 21) = v8;
  return URLComponents.password.modify;
}

void URLComponents.password.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 160LL);
  uint64_t v4 = *(void *)a1 + 176LL;
  uint64_t v5 = *(void *)(*(void *)a1 + 192LL);
  unint64_t v6 = *(void *)(*(void *)a1 + 168LL);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 11) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000LL) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        __int128 v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        __int128 v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        id v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          __int128 v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v36,  v39,  2u,  0);
          uint64_t v17 = swift_bridgeObjectRelease();
          if ((v39 & 1) != 0) {
            goto LABEL_33;
          }
        }

        else
        {
          uint64_t v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
          uint64_t v17 = swift_bridgeObjectRelease();
          if ((v41 & 1) != 0) {
            goto LABEL_33;
          }
        }

uint64_t URLComponents.host.getter(uint64_t a1)
{
  char v2 = *(_BYTE *)(v1 + 152);
  if (!*(void *)(v1 + 80))
  {
    uint64_t v5 = *(_BYTE **)v1;
    int v6 = *(unsigned __int8 *)(v1 + 10);
    int v7 = *(unsigned __int8 *)(v1 + 11);
    uint64_t v8 = *(void *)(v1 + 48);
    uint64_t v9 = *(void *)(v1 + 64);
    BOOL v10 = *(_BYTE *)(v1 + 12) != 1 || v5 == 0LL;
    if (!v10 && (v5[120] & 1) == 0)
    {
      uint64_t v18 = String.subscript.getter();
      uint64_t v3 = MEMORY[0x186E1B610](v18);
      unint64_t v4 = v19;
      a1 = swift_bridgeObjectRelease();
      goto LABEL_22;
    }

    if (!*(_BYTE *)(v1 + 96))
    {
LABEL_21:
      uint64_t v3 = 0LL;
      unint64_t v4 = 0xE000000000000000LL;
      goto LABEL_22;
    }

    if (*(_BYTE *)(v1 + 13) && v5 && (v5[144] & 1) == 0)
    {
      unint64_t v11 = String.subscript.getter();
      if (!((v11 ^ v12) >> 14))
      {
        a1 = swift_bridgeObjectRelease();
        if (v8) {
          goto LABEL_19;
        }
LABEL_54:
        if (!v6 || !v5 || (v5[72] & 1) != 0)
        {
          if (v9) {
            goto LABEL_21;
          }
          uint64_t v26 = 0LL;
          if (!v7 || !v5) {
            return v26;
          }
          if ((v5[96] & 1) != 0) {
            return 0LL;
          }
          uint64_t v48 = String.subscript.getter();
          MEMORY[0x186E1B610](v48);
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }

        uint64_t v47 = String.subscript.getter();
        MEMORY[0x186E1B610](v47);
        swift_bridgeObjectRelease();
LABEL_19:
        swift_bridgeObjectRetain();
LABEL_20:
        a1 = swift_bridgeObjectRelease();
        goto LABEL_21;
      }

      uint64_t v15 = v12;
      unint64_t v53 = v13;
      unint64_t v54 = v11;
      unint64_t v55 = v14;
      _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v11,  v12,  v13,  v14,  10LL);
      if ((v16 & 0x100) != 0) {
        specialized _parseInteger<A, B>(ascii:radix:)(v54, v15, v53, v55, 10LL);
      }
      char v17 = v16;
      a1 = swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }

    if (v8) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }

  uint64_t v3 = *(void *)(v1 + 72);
  unint64_t v4 = *(void *)(v1 + 80);
LABEL_22:
  uint64_t v20 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000LL) != 0) {
    uint64_t v21 = HIBYTE(v4) & 0xF;
  }
  else {
    uint64_t v21 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    if ((v2 & 1) != 0)
    {
      Swift::String v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
      uint64_t v60 = v4;
      MEMORY[0x1895F8858](a1);
      uint64_t v51 = &v59;
      uint64_t v52 = MEMORY[0x18961AFF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v22 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)&v50,  v3,  v4);
      if (v23 == 1)
      {
        unint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v59;
        unint64_t v25 = v60;
        swift_bridgeObjectRetain();
        uint64_t v26 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (Swift::Int)v24,  v25,  MEMORY[0x18961AFF8]);
        swift_bridgeObjectRelease_n();
LABEL_51:
        swift_bridgeObjectRelease();
        return v26;
      }

      uint64_t v26 = (uint64_t)v22;
      goto LABEL_40;
    }

    if ((v4 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      if ((v4 & 0x2000000000000000LL) != 0)
      {
        Swift::String v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
        uint64_t v60 = v4 & 0xFFFFFFFFFFFFFFLL;
        unsigned int v57 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v58 = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v59,  HIBYTE(v4) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57,  0,  (unsigned __int8 *)&v59,  HIBYTE(v4) & 0xF,  v56);
        uint64_t v26 = v56[0];
        uint64_t v29 = v56[1];
        swift_release();
      }

      else
      {
        if ((v3 & 0x1000000000000000LL) != 0)
        {
          unint64_t v27 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          unint64_t v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v20 = v43;
        }

        Swift::String v59 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v60 = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v27,  v20,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v59,  0,  v27,  v20);
        uint64_t v29 = v28;
      }

      swift_bridgeObjectRelease();
      if (v29 != 1)
      {
LABEL_40:
        swift_bridgeObjectRelease_n();
        return v26;
      }
    }

    Swift::String v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
    uint64_t v60 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    __int128 v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v31 = objc_msgSend(v30, sel__fastCharacterContents);
    id v32 = v30;
    if (v31)
    {
      Swift::String v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
      uint64_t v60 = v4;
      StringProtocol._ephemeralString.getter();
      uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v34 = objc_msgSend(v33, sel_length);
      uint64_t v35 = swift_unknownObjectRelease();
      uint64_t v36 = MEMORY[0x1895F8858](v35);
      LOBYTE(v51) = 0;
      MEMORY[0x1895F8858](v36);
      v49[2] = v31;
      v49[3] = v34;
      uint64_t v26 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v31,  (uint64_t)v34,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  v37,  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)v49);
      swift_bridgeObjectRelease_n();
      return v26;
    }

    Swift::String v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
    uint64_t v60 = v4;
    swift_bridgeObjectRetain();
    uint64_t v39 = String.init<A>(_:)();
    unint64_t v40 = v38;
    if ((v38 & 0x1000000000000000LL) != 0)
    {
      uint64_t v39 = static String._copying(_:)();
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      unint64_t v40 = v45;
      if ((v45 & 0x2000000000000000LL) == 0) {
        goto LABEL_43;
      }
    }

    else if ((v38 & 0x2000000000000000LL) == 0)
    {
LABEL_43:
      if ((v39 & 0x1000000000000000LL) != 0)
      {
        uint64_t v41 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }

      Swift::String v59 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v60 = 0LL;
      uint64_t v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v41,  v42,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v59,  0,  v41,  v42);
      goto LABEL_50;
    }

    Swift::String v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v39;
    uint64_t v60 = v40 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v57 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v58 = 0LL;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v59,  HIBYTE(v40) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57,  0,  (unsigned __int8 *)&v59,  HIBYTE(v40) & 0xF,  v56);
    uint64_t v26 = v56[0];
    swift_release();
LABEL_50:
    swift_bridgeObjectRelease_n();
    goto LABEL_51;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return 0LL;
}

void (*URLComponents.host.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x108uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 176);
  *((void *)v3 + 32) = v1;
  __int128 v5 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v6 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v6;
  __int128 v7 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v7;
  __int128 v8 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v8;
  outlined init with take of LocalePreferences?( (uint64_t)(v3 + 72),  (uint64_t)(v3 + 176),  &demangling cache variable for type metadata for String?);
  uint64_t v9 = outlined init with take of LocalePreferences?( (uint64_t)(v3 + 176),  (uint64_t)(v3 + 192),  &demangling cache variable for type metadata for String?);
  unint64_t v10 = *((void *)v3 + 25);
  if (v10)
  {
    uint64_t v11 = *((void *)v3 + 24);
  }

  else if ((v3[12] & 1) != 0 {
         && (outlined init with take of LocalePreferences?( (uint64_t)v3,  (uint64_t)(v3 + 248),  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)(v3 + 248),  (uint64_t)(v3 + 232),  &demangling cache variable for type metadata for URLParseInfo?),  (uint64_t v12 = *((void *)v3 + 29)) != 0)
  }
         && (*(_BYTE *)(v12 + 120) & 1) == 0)
  {
    uint64_t v18 = String.subscript.getter();
    uint64_t v11 = MEMORY[0x186E1B610](v18);
    unint64_t v10 = v19;
    uint64_t v9 = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v9 = URLComponents._URLComponents.port.getter();
    if ((v13 & 1) != 0)
    {
      uint64_t v14 = URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v16 = v15;
      uint64_t v9 = swift_bridgeObjectRelease();
      unint64_t v17 = 0LL;
      if (!v16) {
        goto LABEL_40;
      }
      unint64_t v10 = 0xE000000000000000LL;
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v11 = 0LL;
      unint64_t v10 = 0xE000000000000000LL;
    }
  }

  uint64_t v20 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0x2000000000000000LL) != 0) {
    uint64_t v21 = HIBYTE(v10) & 0xF;
  }
  else {
    uint64_t v21 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    if ((v3[152] & 1) != 0)
    {
      *((void *)v3 + 20) = v11;
      *((void *)v3 + 21) = v10;
      MEMORY[0x1895F8858](v9);
      uint64_t v50 = v3 + 160;
      uint64_t v51 = MEMORY[0x18961AFF8];
      outlined retain of String?(v4);
      swift_bridgeObjectRetain();
      unint64_t v24 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v49,  v11,  v10);
      if (v25 != 1)
      {
        uint64_t v14 = (uint64_t)v24;
        unint64_t v17 = v25;
LABEL_39:
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }

      Swift::Int v26 = *((void *)v3 + 20);
      unint64_t v27 = *((void *)v3 + 21);
      swift_bridgeObjectRetain();
      uint64_t v14 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v26,  v27,  MEMORY[0x18961AFF8]);
      unint64_t v17 = v28;
    }

    else
    {
      if ((v10 & 0x1000000000000000LL) != 0)
      {
        outlined retain of String?(v4);
        swift_bridgeObjectRetain();
      }

      else
      {
        if ((v10 & 0x2000000000000000LL) != 0)
        {
          *((void *)v3 + 20) = v11;
          *((void *)v3 + 21) = v10 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          uint64_t v55 = 0LL;
          swift_bridgeObjectRetain();
          outlined retain of String?(v4);
          swift_bridgeObjectRetain();
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)(v3 + 160),  HIBYTE(v10) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54,  0,  (unsigned __int8 *)v3 + 160,  HIBYTE(v10) & 0xF,  &v52);
          uint64_t v14 = v52;
          unint64_t v17 = v53;
          swift_release();
        }

        else
        {
          if ((v11 & 0x1000000000000000LL) != 0)
          {
            unint64_t v22 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }

          else
          {
            unint64_t v22 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            uint64_t v20 = v44;
          }

          unint64_t v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          uint64_t v55 = 0LL;
          swift_bridgeObjectRetain();
          outlined retain of String?(v4);
          swift_bridgeObjectRetain();
          uint64_t v14 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v22,  v20,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54,  0,  v22,  v20);
          unint64_t v17 = v23;
        }

        swift_bridgeObjectRelease();
        if (v17 != 1) {
          goto LABEL_39;
        }
      }

      *((void *)v3 + 20) = v11;
      *((void *)v3 + 21) = v10;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      uint64_t v29 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v30 = objc_msgSend(v29, sel__fastCharacterContents);
      id v31 = v29;
      if (v30)
      {
        *((void *)v3 + 20) = v11;
        *((void *)v3 + 21) = v10;
        StringProtocol._ephemeralString.getter();
        id v32 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v33 = objc_msgSend(v32, sel_length);
        uint64_t v34 = swift_unknownObjectRelease();
        uint64_t v35 = MEMORY[0x1895F8858](v34);
        LOBYTE(v50) = 0;
        MEMORY[0x1895F8858](v35);
        v48[2] = v30;
        v48[3] = v33;
        uint64_t v14 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v30,  (uint64_t)v33,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v36,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v48);
        unint64_t v17 = v37;
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }

      *((void *)v3 + 20) = v11;
      *((void *)v3 + 21) = v10;
      swift_bridgeObjectRetain();
      uint64_t v39 = String.init<A>(_:)();
      unint64_t v40 = v38;
      if ((v38 & 0x1000000000000000LL) != 0)
      {
        uint64_t v39 = static String._copying(_:)();
        unint64_t v46 = v45;
        swift_bridgeObjectRelease();
        unint64_t v40 = v46;
        if ((v46 & 0x2000000000000000LL) == 0) {
          goto LABEL_31;
        }
      }

      else if ((v38 & 0x2000000000000000LL) == 0)
      {
LABEL_31:
        if ((v39 & 0x1000000000000000LL) != 0)
        {
          uint64_t v41 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }

        unint64_t v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v55 = 0LL;
        uint64_t v14 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v41,  v42,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54,  0,  v41,  v42);
        unint64_t v17 = v43;
        goto LABEL_38;
      }

      *((void *)v3 + 20) = v39;
      *((void *)v3 + 21) = v40 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v55 = 0LL;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)(v3 + 160),  HIBYTE(v40) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54,  0,  (unsigned __int8 *)v3 + 160,  HIBYTE(v40) & 0xF,  &v52);
      uint64_t v14 = v52;
      unint64_t v17 = v53;
      swift_release();
    }

void URLComponents.host.modify(uint64_t a1, char a2)
{
  char v2 = *(void **)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 208LL);
  unint64_t v4 = *(void *)(*(void *)a1 + 216LL);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    URLComponents._URLComponents.host.setter(v3, v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    URLComponents._URLComponents.host.setter(*(void *)(*(void *)a1 + 208LL), v4);
  }

  free(v2);
}

uint64_t URLComponents.port.getter()
{
  if (*(_BYTE *)(v0 + 96)) {
    uint64_t result = 0LL;
  }
  else {
    uint64_t result = *(void *)(v0 + 88);
  }
  if (*(_BYTE *)(v0 + 96) == 1 && (*(_BYTE *)(v0 + 13) & 1) != 0)
  {
    if (!*(void *)v0 || (*(_BYTE *)(*(void *)v0 + 144LL) & 1) != 0) {
      return 0LL;
    }
    unint64_t v2 = String.subscript.getter();
    uint64_t v6 = v5;
    if (!((v2 ^ v3) >> 14))
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }

    uint64_t v7 = v2;
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    uint64_t v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v2,  v3,  v4,  v5,  10LL);
    if ((v11 & 0x100) != 0)
    {
      uint64_t v12 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10LL);
      char v16 = v15;
      swift_bridgeObjectRelease();
      int v14 = v16 & 1;
    }

    else
    {
      uint64_t v12 = v10;
      char v13 = v11;
      swift_bridgeObjectRelease();
      int v14 = v13 & 1;
    }

    if (v14) {
      return 0LL;
    }
    else {
      return v12;
    }
  }

  return result;
}

uint64_t key path setter for URLComponents.port : URLComponents(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result;
  char v3 = *(_BYTE *)(result + 8);
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 13) = 0;
  if ((v3 & 1) == 0 && v2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 88) = v2;
    *(_BYTE *)(a2 + 96) = v3;
  }

  return result;
}

uint64_t URLComponents.port.setter(uint64_t result, char a2)
{
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 13) = 0;
  if ((a2 & 1) == 0 && result < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 88) = result;
    *(_BYTE *)(v2 + 96) = a2 & 1;
  }

  return result;
}

uint64_t (*URLComponents.port.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  uint64_t v3 = *(void *)(v1 + 88);
  int v4 = *(unsigned __int8 *)(v1 + 96);
  if (*(_BYTE *)(v1 + 96)) {
    uint64_t v3 = 0LL;
  }
  if (v4 == 1 && (*(_BYTE *)(v1 + 13) & 1) != 0)
  {
    if (!*(void *)v1 || (*(_BYTE *)(*(void *)v1 + 144LL) & 1) != 0) {
      goto LABEL_7;
    }
    unint64_t v5 = String.subscript.getter();
    uint64_t v9 = v8;
    if (!((v5 ^ v6) >> 14))
    {
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v3 = 0LL;
      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
      goto LABEL_15;
    }

    uint64_t v10 = v5;
    uint64_t v11 = v6;
    uint64_t v12 = v7;
    uint64_t v13 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v5,  v6,  v7,  v8,  10LL);
    if ((v14 & 0x100) != 0)
    {
      uint64_t v15 = specialized _parseInteger<A, B>(ascii:radix:)(v10, v11, v12, v9, 10LL);
      char v18 = v17;
      swift_bridgeObjectRelease();
      int v4 = v18 & 1;
    }

    else
    {
      uint64_t v15 = v13;
      char v16 = v14;
      swift_bridgeObjectRelease();
      int v4 = v16 & 1;
    }

    if (v4) {
      uint64_t v3 = 0LL;
    }
    else {
      uint64_t v3 = v15;
    }
  }

uint64_t URLComponents.port.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = *(void *)result;
  char v3 = *(_BYTE *)(result + 8);
  *(_BYTE *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 13) = 0;
  if (v2 >= 0) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  if ((v4 & 1) != 0)
  {
    *(void *)(v1 + 88) = v2;
    *(_BYTE *)(v1 + 96) = v3;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t (*URLComponents.path.getter())()
{
  return URLComponents._URLComponents.path.getter();
}

uint64_t key path getter for URLComponents.path : URLComponents@<X0>( _OWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  __int128 v3 = a1[7];
  v11[6] = a1[6];
  _OWORD v11[7] = v3;
  v12[0] = a1[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 138);
  __int128 v4 = a1[3];
  _OWORD v11[2] = a1[2];
  v11[3] = v4;
  __int128 v5 = a1[5];
  v11[4] = a1[4];
  v11[5] = v5;
  __int128 v6 = a1[1];
  v11[0] = *a1;
  v11[1] = v6;
  outlined retain of URLComponents((uint64_t)v11);
  unint64_t v7 = URLComponents._URLComponents.path.getter();
  uint64_t v9 = v8;
  uint64_t result = outlined release of URLComponents((uint64_t)v11);
  *a2 = v7;
  a2[1] = v9;
  return result;
}

uint64_t URLComponents.path.setter(unint64_t a1, unint64_t a2)
{
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 14) = 0;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    uint64_t v4 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(a1, a2);
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = 0LL;
    unint64_t v6 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 104) = v4;
  *(void *)(v2 + 112) = v6;
  return result;
}

void (*URLComponents.path.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xB8uLL);
  *a1 = v3;
  *((void *)v3 + 22) = v1;
  __int128 v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  __int128 v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  __int128 v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.path.getter();
  *((void *)v3 + 21) = v8;
  return URLComponents.path.modify;
}

void URLComponents.path.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 160LL);
  unint64_t v4 = *(void *)(*(void *)a1 + 168LL);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    URLComponents._URLComponents.path.setter(v3, v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    URLComponents._URLComponents.path.setter(*(void *)(*(void *)a1 + 160LL), v4);
  }

  free(v2);
}

uint64_t (*URLComponents.query.getter(uint64_t a1))()
{
  return URLComponents._URLComponents.query.getter(a1);
}

uint64_t URLComponents.query.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 15) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 120) = a1;
    *(void *)(v3 + 128) = a2;
    return result;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (v11)
    {
      unint64_t v27 = a1;
      uint64_t v28 = a2;
      StringProtocol._ephemeralString.getter();
      uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v11,  (uint64_t)v14,  0x40u,  0);
    }

    else
    {
      char v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 64);
    }

    char v16 = v15;
    uint64_t v8 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v27 = a1;
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      __int128 v6 = (char *)&v27;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      __int128 v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    uint64_t v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    if ((v8 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    MEMORY[0x1895F8858](v8);
    v25[2] = &v27;
    char v26 = 64;
    swift_bridgeObjectRetain();
    char v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v25,  a1,  a2);
    if (v19)
    {
      uint64_t v20 = (uint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }

    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 120) = v20;
  *(void *)(v3 + 128) = v21;
  return result;
}

void (*URLComponents.query.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  __int128 v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  __int128 v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  __int128 v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.query.getter((uint64_t)v3);
  *((void *)v3 + 21) = v8;
  return URLComponents.query.modify;
}

void URLComponents.query.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 160LL);
  uint64_t v4 = *(void *)a1 + 176LL;
  uint64_t v5 = *(void *)(*(void *)a1 + 192LL);
  unint64_t v6 = *(void *)(*(void *)a1 + 168LL);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 15) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000LL) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        id v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v36,  v39,  0x40u,  0);
          uint64_t v17 = swift_bridgeObjectRelease();
          if ((v39 & 1) != 0) {
            goto LABEL_33;
          }
        }

        else
        {
          uint64_t v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
          uint64_t v17 = swift_bridgeObjectRelease();
          if ((v41 & 1) != 0) {
            goto LABEL_33;
          }
        }

uint64_t (*URLComponents.fragment.getter(uint64_t a1))()
{
  return URLComponents._URLComponents.fragment.getter(a1);
}

uint64_t URLComponents.fragment.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 136) = a1;
    *(void *)(v3 + 144) = a2;
    return result;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    BOOL v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (v11)
    {
      unint64_t v27 = a1;
      uint64_t v28 = a2;
      StringProtocol._ephemeralString.getter();
      uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v11,  (uint64_t)v14,  0x40u,  0);
    }

    else
    {
      char v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 64);
    }

    char v16 = v15;
    uint64_t v8 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v27 = a1;
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v27;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      unint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    uint64_t v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    if ((v8 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    MEMORY[0x1895F8858](v8);
    v25[2] = &v27;
    char v26 = 64;
    swift_bridgeObjectRetain();
    uint64_t v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v25,  a1,  a2);
    if (v19)
    {
      uint64_t v20 = (uint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }

    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 136) = v20;
  *(void *)(v3 + 144) = v21;
  return result;
}

void (*URLComponents.fragment.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  __int128 v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  __int128 v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  __int128 v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.fragment.getter((uint64_t)v3);
  *((void *)v3 + 21) = v8;
  return URLComponents.fragment.modify;
}

void URLComponents.fragment.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 160LL);
  uint64_t v4 = *(void *)a1 + 176LL;
  uint64_t v5 = *(void *)(*(void *)a1 + 192LL);
  unint64_t v6 = *(void *)(*(void *)a1 + 168LL);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000LL) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        id v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v36,  v39,  0x40u,  0);
          uint64_t v17 = swift_bridgeObjectRelease();
          if ((v39 & 1) != 0) {
            goto LABEL_33;
          }
        }

        else
        {
          uint64_t v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
          uint64_t v17 = swift_bridgeObjectRelease();
          if ((v41 & 1) != 0) {
            goto LABEL_33;
          }
        }

uint64_t URLComponents.percentEncodedUser.getter()
{
  if (v0[6])
  {
    uint64_t v1 = v0[5];
    goto LABEL_15;
  }

  uint64_t v2 = *v0;
  int v3 = *((unsigned __int8 *)v0 + 11);
  BOOL v4 = *((_BYTE *)v0 + 10) != 1 || v2 == 0;
  if (!v4 && (*(_BYTE *)(v2 + 72) & 1) == 0)
  {
    uint64_t v5 = String.subscript.getter();
    uint64_t v1 = MEMORY[0x186E1B610](v5);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  if (v0[8])
  {
LABEL_9:
    uint64_t v1 = 0LL;
    goto LABEL_15;
  }

  uint64_t v1 = 0LL;
  if (v3 && v2)
  {
    if ((*(_BYTE *)(v2 + 96) & 1) != 0)
    {
      uint64_t v1 = 0LL;
      goto LABEL_15;
    }

    uint64_t v7 = String.subscript.getter();
    MEMORY[0x186E1B610](v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

uint64_t URLComponents.percentEncodedUser.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 10) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 40) = a1;
    *(void *)(v3 + 48) = a2;
    return result;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      uint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v10,  (uint64_t)v13,  2u,  1);
    }

    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 2u, 1);
    }

    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v16;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      unint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1)) {
      goto LABEL_8;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedUser.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  *uint64_t v3 = URLComponents.percentEncodedUser.getter();
  v3[1] = v4;
  return URLComponents.percentEncodedUser.modify;
}

void URLComponents.percentEncodedUser.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 10) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000LL) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        unint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        id v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          unint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v21,  (uint64_t)v24,  2u,  1);
        }

        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
        }

        char v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_30;
        }
      }

      else
      {
        if ((v5 & 0x2000000000000000LL) != 0)
        {
          uint64_t v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v9 = (char *)v3;
        }

        else if ((v6 & 0x1000000000000000LL) != 0)
        {
          uint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
        }

        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 1)) {
          goto LABEL_30;
        }
      }
    }

    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 40) = v6;
    *(void *)(v13 + 48) = v5;
    goto LABEL_18;
  }

  if (!v5)
  {
LABEL_14:
    unint64_t v12 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v12 + 40) = v6;
    *(void *)(v12 + 48) = v5;
    swift_bridgeObjectRelease();
LABEL_18:
    free(v2);
    return;
  }

  if ((v5 & 0x1000000000000000LL) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    id v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v15,  (uint64_t)v18,  2u,  1);
    }

    else
    {
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
    }

    char v26 = v19;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0) {
      goto LABEL_14;
    }
  }

  else
  {
    if ((v5 & 0x2000000000000000LL) != 0)
    {
      uint64_t v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v3;
    }

    else if ((v6 & 0x1000000000000000LL) != 0)
    {
      uint64_t v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 1);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_14;
    }
  }

uint64_t URLComponents.percentEncodedPassword.getter()
{
  if (v0[8])
  {
    uint64_t v1 = v0[7];
  }

  else
  {
    uint64_t v2 = *v0;
    BOOL v3 = *((_BYTE *)v0 + 11) != 1 || v2 == 0;
    if (v3 || (*(_BYTE *)(v2 + 96) & 1) != 0)
    {
      uint64_t v1 = 0LL;
    }

    else
    {
      uint64_t v4 = String.subscript.getter();
      uint64_t v1 = MEMORY[0x186E1B610](v4);
      swift_bridgeObjectRelease();
    }
  }

  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedPassword.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 11) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 56) = a1;
    *(void *)(v3 + 64) = a2;
    return result;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      unint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v10,  (uint64_t)v13,  2u,  1);
    }

    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 2u, 1);
    }

    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v16;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      unint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1)) {
      goto LABEL_8;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedPassword.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[8])
  {
    uint64_t v4 = v1[7];
    uint64_t v5 = v1[8];
  }

  else
  {
    uint64_t v6 = *v1;
    BOOL v7 = *((_BYTE *)v1 + 11) != 1 || v6 == 0;
    if (v7 || (*(_BYTE *)(v6 + 96) & 1) != 0)
    {
      uint64_t v4 = 0LL;
      uint64_t v5 = 0LL;
    }

    else
    {
      uint64_t v8 = String.subscript.getter();
      uint64_t v4 = MEMORY[0x186E1B610](v8);
      uint64_t v5 = v9;
      swift_bridgeObjectRelease();
    }
  }

  *uint64_t v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedPassword.modify;
}

void URLComponents.percentEncodedPassword.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 11) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000LL) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        unint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        id v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          unint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v21,  (uint64_t)v24,  2u,  1);
        }

        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
        }

        char v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_30;
        }
      }

      else
      {
        if ((v5 & 0x2000000000000000LL) != 0)
        {
          uint64_t v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v9 = (char *)v3;
        }

        else if ((v6 & 0x1000000000000000LL) != 0)
        {
          uint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
        }

        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 1)) {
          goto LABEL_30;
        }
      }
    }

    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 56) = v6;
    *(void *)(v13 + 64) = v5;
    goto LABEL_18;
  }

  if (!v5)
  {
LABEL_14:
    unint64_t v12 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v12 + 56) = v6;
    *(void *)(v12 + 64) = v5;
    swift_bridgeObjectRelease();
LABEL_18:
    free(v2);
    return;
  }

  if ((v5 & 0x1000000000000000LL) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    id v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v15,  (uint64_t)v18,  2u,  1);
    }

    else
    {
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
    }

    char v26 = v19;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0) {
      goto LABEL_14;
    }
  }

  else
  {
    if ((v5 & 0x2000000000000000LL) != 0)
    {
      uint64_t v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      BOOL v7 = (char *)v3;
    }

    else if ((v6 & 0x1000000000000000LL) != 0)
    {
      BOOL v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      BOOL v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 1);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_14;
    }
  }

unint64_t URLComponents.percentEncodedHost.getter()
{
  return URLComponents._URLComponents.percentEncodedHost.getter();
}

uint64_t key path setter for URLComponents.scheme : URLComponents( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  a5(v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t URLComponents.percentEncodedHost.setter(uint64_t a1, uint64_t a2)
{
  return URLComponents.scheme.setter(a1, a2, (void (*)(void))URLComponents._URLComponents.setPercentEncodedHost(_:));
}

uint64_t URLComponents.scheme.setter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_bridgeObjectRelease();
}

void (*URLComponents.percentEncodedHost.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xB8uLL);
  *a1 = v3;
  *((void *)v3 + 22) = v1;
  __int128 v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  __int128 v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  __int128 v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.percentEncodedHost.getter();
  *((void *)v3 + 21) = v8;
  return URLComponents.percentEncodedHost.modify;
}

void URLComponents.percentEncodedHost.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 160LL);
  __int128 v4 = *(void **)(*(void *)a1 + 168LL);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v5.value._uint64_t countAndFlagsBits = v3;
    v5.value._unint64_t object = v4;
    URLComponents._URLComponents.setPercentEncodedHost(_:)(v5);
    if (!v6)
    {
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      free(v2);
      return;
    }
  }

  else
  {
    v7.value._uint64_t countAndFlagsBits = *(void *)(*(void *)a1 + 160LL);
    v7.value._unint64_t object = v4;
    URLComponents._URLComponents.setPercentEncodedHost(_:)(v7);
    if (!v6) {
      goto LABEL_5;
    }
  }

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t URLComponents.encodedHost.getter()
{
  return URLComponents._URLComponents.encodedHost.getter();
}

uint64_t URLComponents.encodedHost.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 12) = 0;
  *(_WORD *)(v2 + 152) = 0;
  if (!a2)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v2 + 72) = a1;
    *(void *)(v2 + 80) = 0LL;
    return result;
  }

  unint64_t v6 = specialized Collection.first.getter(a1, a2);
  if ((v6 & 0x1FF) != 0x5B) {
    goto LABEL_23;
  }
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    uint64_t v8 = (a1 >> 59) & 1;
    unint64_t v6 = MEMORY[0x186E1B838](15LL, result - 1, a1, a2);
  }

  else
  {
    uint64_t v7 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (!v7)
    {
      __break(1u);
      goto LABEL_36;
    }

    unint64_t v6 = (v7 << 16) - 65532;
    LOBYTE(v8) = 1;
  }

  if ((v6 & 0xC) == 4LL << v8) {
LABEL_36:
  }
    unint64_t v6 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, a1, a2);
  unint64_t v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    unint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v10 = v6 >> 16;
  if (v6 >> 16 >= v9)
  {
    __break(1u);
    goto LABEL_38;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    char v12 = String.UTF8View._foreignSubscript(position:)();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    unint64_t v28 = a1;
    uint64_t v29 = a2 & 0xFFFFFFFFFFFFFFLL;
    char v12 = *((_BYTE *)&v28 + v10);
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v11 = _StringObject.sharedUTF8.getter();
    }
    char v12 = *(_BYTE *)(v11 + v10);
  }

  if (v12 != 93) {
    goto LABEL_23;
  }
  if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) == 0)
  {
    do
    {
      while (1)
      {
        swift_bridgeObjectRelease();
        int v27 = 0;
        uint64_t v26 = 876LL;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_23:
        if ((a2 & 0x1000000000000000LL) == 0) {
          break;
        }
        unint64_t v28 = a1;
        uint64_t v29 = a2;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain_n();
        StringProtocol._ephemeralString.getter();
        id v18 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        char v19 = (unsigned __int16 *)objc_msgSend(v18, sel__fastCharacterContents);
        id v20 = v18;
        if (v19)
        {
          unint64_t v28 = a1;
          uint64_t v29 = a2;
          StringProtocol._ephemeralString.getter();
          unint64_t v21 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v22 = objc_msgSend(v21, sel_length);
          swift_unknownObjectRelease();
          char v23 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v19,  (uint64_t)v22,  4u,  1);
        }

        else
        {
          char v23 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 4u, 1);
        }

        char v24 = v23;
        swift_bridgeObjectRelease_n();
        if ((v24 & 1) != 0) {
          goto LABEL_29;
        }
      }

      if ((a2 & 0x2000000000000000LL) != 0)
      {
        uint64_t v15 = HIBYTE(a2) & 0xF;
        unint64_t v28 = a1;
        uint64_t v29 = a2 & 0xFFFFFFFFFFFFFFLL;
        char v14 = (char *)&v28;
      }

      else if ((a1 & 0x1000000000000000LL) != 0)
      {
        char v14 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v15 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
LABEL_38:
        char v14 = (char *)_StringObject.sharedUTF8.getter();
      }
    }

    while (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v14, v15, 4u, 1));
  }

void (*URLComponents.encodedHost.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  __int128 v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  __int128 v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  __int128 v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.encodedHost.getter();
  *((void *)v3 + 21) = v8;
  return URLComponents.encodedHost.modify;
}

void URLComponents.encodedHost.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  unint64_t v4 = *(void *)(*(void *)a1 + 160LL);
  uint64_t v5 = *(void *)a1 + 176LL;
  uint64_t v6 = *(void *)(*(void *)a1 + 192LL);
  unint64_t v7 = *(void *)(*(void *)a1 + 168LL);
  *(_BYTE *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 12) = 0;
  *(_WORD *)(v6 + 152) = 0;
  if ((a2 & 1) == 0)
  {
    if (!v7)
    {
      uint64_t v20 = v3[24];
      swift_bridgeObjectRelease();
      *(void *)(v20 + 72) = v4;
      *(void *)(v20 + 80) = 0LL;
      goto LABEL_61;
    }

    unint64_t v8 = specialized Collection.first.getter(v4, v7);
    if ((v8 & 0x1FF) != 0x5B) {
      goto LABEL_54;
    }
    if ((v7 & 0x1000000000000000LL) != 0)
    {
      Swift::Int v44 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v44, 1LL)) {
        goto LABEL_87;
      }
      uint64_t v15 = (v4 >> 59) & 1;
      unint64_t v8 = MEMORY[0x186E1B838](15LL, v44 - 1, v4, v7);
    }

    else
    {
      uint64_t v14 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000LL) == 0) {
        uint64_t v14 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (!v14) {
        goto LABEL_73;
      }
      unint64_t v8 = (v14 << 16) - 65532;
      LOBYTE(v15) = 1;
    }

    if ((v8 & 0xC) != 4LL << v15) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }

  if (!v7)
  {
    uint64_t v19 = v3[24];
    swift_bridgeObjectRelease();
    *(void *)(v19 + 72) = v4;
    *(void *)(v19 + 80) = 0LL;
    goto LABEL_49;
  }

  unint64_t v8 = specialized Collection.first.getter(v4, v7);
  if ((v8 & 0x1FF) != 0x5B) {
    goto LABEL_42;
  }
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v43 = String.UTF8View._foreignCount()();
    if (!__OFSUB__(v43, 1LL))
    {
      uint64_t v10 = (v4 >> 59) & 1;
      unint64_t v8 = MEMORY[0x186E1B838](15LL, v43 - 1, v4, v7);
LABEL_9:
      if ((v8 & 0xC) != 4LL << v10) {
        goto LABEL_10;
      }
      goto LABEL_71;
    }

    __break(1u);
LABEL_87:
    __break(1u);
    return;
  }

  uint64_t v9 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    unint64_t v8 = (v9 << 16) - 65532;
    LOBYTE(v10) = 1;
    goto LABEL_9;
  }

  __break(1u);
LABEL_71:
  unint64_t v8 = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, v4, v7);
LABEL_10:
  unint64_t v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v2 = v8 >> 16;
  if (v8 >> 16 >= v11)
  {
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    unint64_t v8 = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, v4, v7);
LABEL_26:
    unint64_t v16 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000LL) == 0) {
      unint64_t v16 = v4 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v2 = v8 >> 16;
    if (v8 >> 16 >= v16)
    {
      __break(1u);
      goto LABEL_76;
    }

    if ((v7 & 0x1000000000000000LL) != 0)
    {
      char v18 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((v7 & 0x2000000000000000LL) != 0)
    {
      unint64_t v48 = v4;
      uint64_t v49 = v7 & 0xFFFFFFFFFFFFFFLL;
      char v18 = *((_BYTE *)&v48 + v2);
    }

    else
    {
      if ((v4 & 0x1000000000000000LL) != 0) {
        uint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v17 = _StringObject.sharedUTF8.getter();
      }
      char v18 = *(_BYTE *)(v17 + v2);
    }

    if (v18 == 93)
    {
      swift_bridgeObjectRetain();
      unint64_t v2 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v4, v7);
      swift_bridgeObjectRelease();
      if ((v2 & 1) == 0) {
        goto LABEL_83;
      }
      goto LABEL_60;
    }

LABEL_54:
    if ((v7 & 0x1000000000000000LL) != 0)
    {
      v3[22] = v4;
      v3[23] = v7;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      id v37 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v38 = (unsigned __int16 *)objc_msgSend(v37, sel__fastCharacterContents);
      id v39 = v37;
      if (v38)
      {
        v3[22] = v4;
        v3[23] = v7;
        StringProtocol._ephemeralString.getter();
        uint64_t v40 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v41 = objc_msgSend(v40, sel_length);
        swift_unknownObjectRelease();
        uint64_t v42 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v38,  (uint64_t)v41,  4u,  1);
      }

      else
      {
        uint64_t v42 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v7, 4u, 1);
      }

      unint64_t v2 = v42;
      swift_bridgeObjectRelease_n();
      if ((v2 & 1) == 0) {
        goto LABEL_83;
      }
    }

    else
    {
      if ((v7 & 0x2000000000000000LL) != 0)
      {
        uint64_t v27 = HIBYTE(v7) & 0xF;
        v3[22] = v4;
        v3[23] = v7 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v26 = (char *)v5;
      }

      else if ((v4 & 0x1000000000000000LL) != 0)
      {
        uint64_t v26 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v27 = v4 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v26 = (char *)_StringObject.sharedUTF8.getter();
      }

      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v26, v27, 4u, 1)) {
        goto LABEL_83;
      }
    }

    swift_bridgeObjectRelease();
    *((void *)&v124[1] + 1) = v56;
    *(void *)&v124[2] = v57;
    __int128 v121 = 7;
    CFURLRef v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    __int128 v71 = v69;
    uint64_t v72 = v70;
    BYTE8(v122) = 0;
    LOBYTE(v123[0]) = 0;
    if (!v70)
    {
      unint64_t v75 = v9;
LABEL_72:
      swift_bridgeObjectRelease();
      *((void *)&v124[2] + 1) = v71;
      *(void *)&v124[3] = v72;
      (*(void (**)(char *, uint64_t))(v117 + 8))(v53, v116);
      __int128 v91 = v124[1];
      v75[6] = v124[0];
      v75[7] = v91;
      v75[8] = v124[2];
      *(_OWORD *)((char *)v75 + 138) = *(_OWORD *)((char *)&v124[2] + 10);
      __int128 v92 = v123[2];
      v75[2] = v123[1];
      v75[3] = v92;
      __int128 v93 = v123[4];
      v75[4] = v123[3];
      v75[5] = v93;
      __int128 v94 = v123[0];
      *unint64_t v75 = v122;
      v75[1] = v94;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
    }

    if ((v70 & 0x1000000000000000LL) != 0)
    {
      char v119 = v69;
      uint64_t v120 = v70;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      uint64_t v107 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v108 = (unsigned __int16 *)objc_msgSend(v107, sel__fastCharacterContents);
      uint64_t v109 = v107;
      if (v108)
      {
        char v119 = v71;
        uint64_t v120 = v72;
        StringProtocol._ephemeralString.getter();
        uint64_t v110 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        Swift::String v111 = objc_msgSend(v110, sel_length);
        swift_unknownObjectRelease();
        Swift::String v112 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v108,  (uint64_t)v111,  0x40u,  0);
      }

      else
      {
        Swift::String v112 = specialized Sequence.allSatisfy(_:)(v71, v72, 64);
      }

      Swift::String v76 = swift_bridgeObjectRelease();
      if ((v112 & 1) == 0)
      {
LABEL_62:
        uint64_t v77 = HIBYTE(v72) & 0xF;
        if ((v72 & 0x2000000000000000LL) == 0) {
          uint64_t v77 = v71 & 0xFFFFFFFFFFFFLL;
        }
        if (v77)
        {
          char v119 = v71;
          uint64_t v120 = v72;
          MEMORY[0x1895F8858](v76);
          char v113 = (uint64_t)&v119;
          LOBYTE(v114) = 64;
          swift_bridgeObjectRetain();
          __int128 v78 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)(&v115 - 4),  v71,  v72);
          if (v79)
          {
            __int128 v71 = (uint64_t)v78;
            __int128 v80 = v79;
            swift_bridgeObjectRelease_n();
            uint64_t v72 = v80;
          }

          else
          {
            __int128 v88 = v119;
            uint64_t v87 = v120;
            swift_bridgeObjectRetain();
            __int128 v71 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v88, v87, 0x40u);
            __int128 v90 = v89;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            uint64_t v72 = v90;
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          __int128 v71 = 0LL;
          uint64_t v72 = 0xE000000000000000LL;
        }
      }
    }

    else
    {
      if ((v70 & 0x2000000000000000LL) != 0)
      {
        uint64_t v74 = HIBYTE(v70) & 0xF;
        char v119 = v69;
        uint64_t v120 = v72 & 0xFFFFFFFFFFFFFFLL;
        Swift::String v73 = (char *)&v119;
      }

      else if ((v69 & 0x1000000000000000LL) != 0)
      {
        Swift::String v73 = (char *)((v70 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v74 = v71 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        Swift::String v73 = (char *)_StringObject.sharedUTF8.getter();
      }

      Swift::String v76 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v73, v74, 0x40u, 0);
      if ((v76 & 1) == 0) {
        goto LABEL_62;
      }
    }

    unint64_t v75 = v9;
    unint64_t v53 = v115;
    goto LABEL_72;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
}

      __break(1u);
      goto LABEL_55;
    }

    unint64_t v129 = v60;
    unint64_t v130 = v62;
    unint64_t v145 = v65;
    uint64_t v146 = v69;
    if (one-time initialization token for cache == -1)
    {
LABEL_23:
      uint64_t v77 = static RegexPatternCache.cache;
      swift_retain();
      __int128 v78 = MEMORY[0x186E1B610](v70, v71, v72, v146);
      __int128 v80 = v79;
      __int128 v144 = &v129;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v77 + 24));
      __int128 v81 = v141;
      closure #1 in RegexPatternCache.regex(for:caseInsensitive:)( (uint64_t *)(v77 + 16),  v78,  (uint64_t)v80,  v32 & 1,  v78,  v80,  v32 & 1,  v141);
      __int128 v82 = (char)v32;
      os_unfair_lock_unlock((os_unfair_lock_t)(v77 + 24));
      swift_bridgeObjectRelease();
      swift_release_n();
      __int128 v84 = v138;
      __int128 v83 = v139;
      __int128 v85 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v139 + 48))(v81, 1LL, v138);
      __int128 v86 = v81;
      if (v85 == 1)
      {
        outlined destroy of Any?((uint64_t)v81, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }

      __int128 v89 = v137;
      (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v137, v86, v84);
      if ((v82 & 8) != 0)
      {
        v152[0] = v129;
        v152[1] = v130;
        v152[2] = v140;
        v152[3] = v145;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        __int128 v90 = (uint64_t)v133;
        BidirectionalCollection<>.prefixMatch<A>(of:)();
        __int128 v92 = v135;
        __int128 v91 = v136;
        int64_t v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v90, 1LL, v136);
        Swift::String v59 = v147;
        __int128 v94 = v149;
        if (v97 != 1)
        {
          __int128 v95 = v132;
          (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v132, v90, v91);
          goto LABEL_36;
        }
      }

      else
      {
        v152[0] = v129;
        v152[1] = v130;
        v152[2] = v140;
        v152[3] = v145;
        type metadata accessor for AnyRegexOutput();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        __int128 v90 = (uint64_t)v134;
        BidirectionalCollection<>.firstMatch<A, B>(of:)();
        __int128 v92 = v135;
        __int128 v91 = v136;
        __int128 v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v90, 1LL, v136);
        Swift::String v59 = v147;
        __int128 v94 = v149;
        if (v93 != 1)
        {
          __int128 v95 = v131;
          (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v131, v90, v91);
LABEL_36:
          Regex.Match.range.getter();
          (*(void (**)(char *, uint64_t))(v92 + 8))(v95, v91);
          (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v137, v138);
          swift_bridgeObjectRelease();
          goto LABEL_37;
        }
      }

      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v89, v84);
      outlined destroy of Any?(v90, &demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }

  uint64_t v28 = __dst[26] * a1;
  if ((unsigned __int128)(__dst[26] * (__int128)a1) >> 64 != (__dst[26] * a1) >> 63)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }

  if (v28 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = __dst[26] * a1;
  }
  uint64_t v42 = v28 == 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v20 = __dst[28];
  if ((__dst[29] & 1) != 0)
  {
LABEL_14:
    if ((__dst[31] & 1) != 0) {
      goto LABEL_15;
    }
    goto LABEL_64;
  }

  unint64_t v116 = v26;
  *(void *)&id v115 = *(void *)&v118[9];
  v117[0] = xmmword_183729420;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  uint64_t v58 = v12[2];
  unsigned int v57 = v12[3];
  if (v58 >= v57 >> 1) {
    char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v57 > 1),  v58 + 1,  1,  v12);
  }
  _OWORD v12[2] = v58 + 1;
  Swift::String v59 = &v12[6 * v58];
  uint64_t v60 = v117[0];
  uint64_t v61 = v117[2];
  v59[3] = v117[1];
  v59[4] = v61;
  v59[2] = v60;
  if ((BYTE8(v118[10]) & 1) != 0)
  {
LABEL_20:
    if ((BYTE8(v118[11]) & 1) != 0) {
      goto LABEL_21;
    }
    goto LABEL_64;
  }

          specialized RangeReplaceableCollection<>.removeLast(_:)(*(void *)(v13 + 16) - a4);
          return v22;
        }

        goto LABEL_31;
      }

    specialized _NativeDictionary._insert(at:key:value:)(v49, 16LL, v2, v1, (void *)v3);
LABEL_55:
    unint64_t v242 = v3;
    swift_bridgeObjectRelease();
    unint64_t v8 = v6;
    unint64_t v7 = v46;
    uint64_t v6 = v5;
    if (v5 < 2) {
      goto LABEL_16;
    }
LABEL_56:
    swift_bridgeObjectRetain();
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(32LL);
    uint64_t v58 = *(void *)(v3 + 16);
    Swift::String v59 = (v57 & 1) == 0;
    uint64_t v60 = v58 + v59;
    if (__OFADD__(v58, v59)) {
      goto LABEL_80;
    }
    uint64_t v1 = v57;
    if (*(void *)(v3 + 24) < v60)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, v4);
      unint64_t v4 = v3;
      uint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(32LL);
      if ((v1 & 1) != (v62 & 1)) {
        goto LABEL_334;
      }
      unint64_t v2 = v61;
      if ((v1 & 1) == 0) {
        goto LABEL_63;
      }
      goto LABEL_60;
    }

    if ((v4 & 1) != 0)
    {
      unint64_t v4 = v3;
      if ((v57 & 1) == 0) {
        goto LABEL_63;
      }
      goto LABEL_60;
    }

    uint64_t v232 = v7;
    unint64_t v184 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    uint64_t v185 = static _DictionaryStorage.copy(original:)();
    unint64_t v4 = v185;
    if (!*(void *)(v3 + 16)) {
      goto LABEL_316;
    }
    uint64_t v5 = v6;
    uint64_t v186 = (void *)(v185 + 64);
    unint64_t v187 = v3 + 64;
    uint64_t v188 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
    unint64_t v189 = 0LL;
    *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v3 + 16);
    uint64_t v190 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v191 = -1LL;
    if (v190 < 64) {
      uint64_t v191 = ~(-1LL << v190);
    }
    uint64_t v192 = v191 & *(void *)(v3 + 64);
    uint64_t v193 = (unint64_t)(v190 + 63) >> 6;
    while (2)
    {
      if (v192)
      {
        uint64_t v194 = __clz(__rbit64(v192));
        v192 &= v192 - 1;
        uint64_t v195 = v194 | (v189 << 6);
LABEL_251:
        uint64_t v196 = 8 * v195;
        unint64_t v197 = *(void *)(*(void *)(v3 + 48) + 8 * v195);
        unint64_t v198 = 16 * v195;
        unint64_t v199 = (uint64_t *)(*(void *)(v3 + 56) + v198);
        unint64_t v201 = *v199;
        uint64_t v200 = v199[1];
        *(void *)(*(void *)(v4 + 48) + v196) = v197;
        unint64_t v202 = (void *)(*(void *)(v4 + 56) + v198);
        *unint64_t v202 = v201;
        v202[1] = v200;
        swift_bridgeObjectRetain();
        continue;
      }

      break;
    }

    uint64_t v203 = v189 + 1;
    if (__OFADD__(v189, 1LL)) {
      goto LABEL_325;
    }
    uint64_t v6 = v5;
    if (v203 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v203);
    ++v189;
    if (v204) {
      goto LABEL_274;
    }
    unint64_t v189 = v203 + 1;
    if (v203 + 1 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    unint64_t v189 = v203 + 2;
    if (v203 + 2 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    unint64_t v189 = v203 + 3;
    if (v203 + 3 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    unint64_t v189 = v203 + 4;
    if (v203 + 4 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    unint64_t v189 = v203 + 5;
    if (v203 + 5 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204) {
      goto LABEL_274;
    }
    unint64_t v189 = v203 + 6;
    if (v203 + 6 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v189);
    if (v204)
    {
LABEL_274:
      uint64_t v192 = (v204 - 1) & v204;
      uint64_t v195 = __clz(__rbit64(v204)) + (v189 << 6);
      goto LABEL_251;
    }

    uint64_t v205 = v203 + 7;
    if (v205 >= v193) {
      goto LABEL_316;
    }
    unint64_t v204 = *(void *)(v187 + 8 * v205);
    if (v204)
    {
      unint64_t v189 = v205;
      goto LABEL_274;
    }

    while (1)
    {
      unint64_t v189 = v205 + 1;
      if (__OFADD__(v205, 1LL)) {
        goto LABEL_332;
      }
      uint64_t v6 = v5;
      if (v189 >= v193) {
        break;
      }
      unint64_t v204 = *(void *)(v187 + 8 * v189);
      ++v205;
      if (v204) {
        goto LABEL_274;
      }
    }

      if (*((void *)v24 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v56 = (void *)swift_allocObject();
        uint64_t v77 = _swift_stdlib_malloc_size(v56);
        uint64_t v56[2] = 0LL;
        v56[3] = 2 * v77 - 64;
      }

      else
      {
        uint64_t v56 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v56;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }

    if (v3 == 226)
    {
      uint64_t v42 = *(void *)(v0 + 16);
      Swift::Int v43 = *(unsigned __int8 **)(v42 + 8);
      if (v43 == *(unsigned __int8 **)(v42 + 16))
      {
        __int128 v91 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v91;
        __int128 v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }

      else
      {
        Swift::Int v44 = *v43;
        uint64_t v19 = *v43;
        *(void *)(v42 + 8) = v43 + 1;
        unint64_t v45 = *(void **)(v0 + 16);
        if (v44 != 128)
        {
          uint64_t v22 = (char *)v45[3];
          __int128 v71 = swift_isUniquelyReferenced_nonNull_native();
          v45[3] = v22;
          if ((v71 & 1) == 0)
          {
            __int128 v95 = *(void *)(v0 + 16);
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
            *(void *)(v95 + 24) = v22;
          }

          Swift::String v66 = *((void *)v22 + 2);
          uint64_t v72 = *((void *)v22 + 3);
          char v67 = v66 + 1;
          if (v66 >= v72 >> 1) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v72 > 1),  v66 + 1,  1,  v22);
          }
          uint64_t v68 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v67;
          CFURLRef v69 = &v22[v66];
          uint64_t v70 = -30;
LABEL_74:
          v69[32] = v70;
          *(void *)(v68 + 24) = v22;
          Swift::String v73 = *((void *)v22 + 3);
          uint64_t v74 = v66 + 2;
          if (v74 > (uint64_t)(v73 >> 1)) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v73 > 1),  v74,  1,  v22);
          }
          unint64_t v75 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v74;
          Swift::String v76 = &v22[v67];
          goto LABEL_77;
        }

        uint64_t v46 = (unsigned __int8 *)v45[1];
        if (v46 != (unsigned __int8 *)v45[2])
        {
          int v47 = *v46;
          uint64_t v19 = *v46;
          v45[1] = v46 + 1;
          unint64_t v21 = *(void *)(v0 + 16);
          uint64_t v22 = *(char **)(v21 + 24);
          if ((v47 & 0xFE) == 0xA8)
          {
            if (!*((void *)v22 + 2))
            {
              uint64_t v87 = swift_isUniquelyReferenced_nonNull_native();
              __int128 v88 = *(void *)(v21 + 24);
              if ((v87 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v88 + 16));
                return swift_task_switch();
              }

              if (*(void *)(v88 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                __int128 v89 = (void *)swift_allocObject();
                __int128 v90 = _swift_stdlib_malloc_size(v89);
                v89[2] = 0LL;
                v89[3] = 2 * v90 - 64;
              }

              else
              {
                __int128 v89 = (void *)MEMORY[0x18961AFE8];
              }

              *(void *)(*(void *)(v0 + 16) + 24LL) = v89;
              goto LABEL_80;
            }

            goto LABEL_46;
          }

          __int128 v78 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v21 + 24) = v22;
          if ((v78 & 1) == 0)
          {
            uint64_t v96 = *(void *)(v0 + 16);
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
            *(void *)(v96 + 24) = v22;
          }

          __int128 v80 = *((void *)v22 + 2);
          __int128 v79 = *((void *)v22 + 3);
          __int128 v81 = v80 + 1;
          if (v80 >= v79 >> 1) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v79 > 1),  v80 + 1,  1,  v22);
          }
          __int128 v82 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v81;
          v22[v80 + 32] = -30;
          *(void *)(v82 + 24) = v22;
          __int128 v83 = *((void *)v22 + 3);
          __int128 v84 = v80 + 2;
          if ((uint64_t)(v80 + 2) > (uint64_t)(v83 >> 1)) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v83 > 1),  v80 + 2,  1,  v22);
          }
          __int128 v85 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v84;
          v22[v81 + 32] = 0x80;
          *(void *)(v85 + 24) = v22;
          __int128 v86 = *((void *)v22 + 3);
          if ((uint64_t)(v80 + 3) > (uint64_t)(v86 >> 1)) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v86 > 1),  v80 + 3,  1,  v22);
          }
          unint64_t v75 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v80 + 3;
          Swift::String v76 = &v22[v84];
LABEL_77:
          v76[32] = v19;
          *(void *)(v75 + 24) = v22;
          return swift_task_switch();
        }

        __int128 v91 = (void *)swift_task_alloc();
        *(void *)(v0 + 88) = v91;
        __int128 v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }

    else
    {
      if (v3 != 194)
      {
        uint64_t v49 = *(void *)(v0 + 16);
        uint64_t v50 = *(char **)(v49 + 24);
        uint64_t v51 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v49 + 24) = v50;
        if ((v51 & 1) == 0)
        {
          __int128 v93 = *(void *)(v0 + 16);
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v50 + 2) + 1LL,  1,  v50);
          *(void *)(v93 + 24) = v50;
        }

        unint64_t v53 = *((void *)v50 + 2);
        uint64_t v52 = *((void *)v50 + 3);
        if (v53 >= v52 >> 1) {
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v52 > 1),  v53 + 1,  1,  v50);
        }
        unint64_t v54 = *(void *)(v0 + 16);
        *((void *)v50 + 2) = v53 + 1;
        v50[v53 + 32] = v3;
        *(void *)(v54 + 24) = v50;
        return swift_task_switch();
      }

      uint64_t v17 = *(void *)(v0 + 16);
      char v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18 != *(unsigned __int8 **)(v17 + 16))
      {
        uint64_t v20 = *v18;
        uint64_t v19 = *v18;
        *(void *)(v17 + 8) = v18 + 1;
        unint64_t v21 = *(void *)(v0 + 16);
        uint64_t v22 = *(char **)(v21 + 24);
        if (v20 == 133)
        {
          if (!*((void *)v22 + 2))
          {
            uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v24 = *(char **)(v21 + 24);
            if ((v23 & 1) != 0)
            {
              char v25 = *((void *)v24 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25,  1,  v24);
              }
              goto LABEL_35;
            }

            goto LABEL_54;
          }

      if (*((void *)v26 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v58 = (void *)swift_allocObject();
        __int128 v79 = _swift_stdlib_malloc_size(v58);
        v58[2] = 0LL;
        v58[3] = 2 * v79 - 64;
      }

      else
      {
        uint64_t v58 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v58;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }

    if (v2 == 226)
    {
      Swift::Int v44 = *(void *)(v0 + 16);
      unint64_t v45 = *(unsigned __int8 **)(v44 + 8);
      if (v45 == *(unsigned __int8 **)(v44 + 16))
      {
        __int128 v93 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v93;
        __int128 v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }

      else
      {
        uint64_t v46 = *v45;
        unint64_t v21 = *v45;
        *(void *)(v44 + 8) = v45 + 1;
        int v47 = *(void **)(v0 + 16);
        if (v46 != 128)
        {
          uint64_t v24 = (char *)v47[3];
          Swift::String v73 = swift_isUniquelyReferenced_nonNull_native();
          void v47[3] = v24;
          if ((v73 & 1) == 0)
          {
            int64_t v97 = *(void *)(v0 + 16);
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
            *(void *)(v97 + 24) = v24;
          }

          uint64_t v68 = *((void *)v24 + 2);
          uint64_t v74 = *((void *)v24 + 3);
          CFURLRef v69 = v68 + 1;
          if (v68 >= v74 >> 1) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v74 > 1),  v68 + 1,  1,  v24);
          }
          uint64_t v70 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v69;
          __int128 v71 = &v24[v68];
          uint64_t v72 = -30;
LABEL_74:
          v71[32] = v72;
          *(void *)(v70 + 24) = v24;
          unint64_t v75 = *((void *)v24 + 3);
          Swift::String v76 = v68 + 2;
          if (v76 > (uint64_t)(v75 >> 1)) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v75 > 1),  v76,  1,  v24);
          }
          uint64_t v77 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v76;
          __int128 v78 = &v24[v69];
          goto LABEL_77;
        }

        unint64_t v48 = (unsigned __int8 *)v47[1];
        if (v48 != (unsigned __int8 *)v47[2])
        {
          uint64_t v49 = *v48;
          unint64_t v21 = *v48;
          v47[1] = v48 + 1;
          uint64_t v23 = *(void *)(v0 + 16);
          uint64_t v24 = *(char **)(v23 + 24);
          if ((v49 & 0xFE) == 0xA8)
          {
            if (!*((void *)v24 + 2))
            {
              __int128 v89 = swift_isUniquelyReferenced_nonNull_native();
              __int128 v90 = *(void *)(v23 + 24);
              if ((v89 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v90 + 16));
                return swift_task_switch();
              }

              if (*(void *)(v90 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                __int128 v91 = (void *)swift_allocObject();
                __int128 v92 = _swift_stdlib_malloc_size(v91);
                v91[2] = 0LL;
                v91[3] = 2 * v92 - 64;
              }

              else
              {
                __int128 v91 = (void *)MEMORY[0x18961AFE8];
              }

              *(void *)(*(void *)(v0 + 16) + 24LL) = v91;
              goto LABEL_80;
            }

            goto LABEL_46;
          }

          __int128 v80 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v23 + 24) = v24;
          if ((v80 & 1) == 0)
          {
            uint64_t v98 = *(void *)(v0 + 16);
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
            *(void *)(v98 + 24) = v24;
          }

          __int128 v82 = *((void *)v24 + 2);
          __int128 v81 = *((void *)v24 + 3);
          __int128 v83 = v82 + 1;
          if (v82 >= v81 >> 1) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v81 > 1),  v82 + 1,  1,  v24);
          }
          __int128 v84 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v83;
          v24[v82 + 32] = -30;
          *(void *)(v84 + 24) = v24;
          __int128 v85 = *((void *)v24 + 3);
          __int128 v86 = v82 + 2;
          if ((uint64_t)(v82 + 2) > (uint64_t)(v85 >> 1)) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v85 > 1),  v82 + 2,  1,  v24);
          }
          uint64_t v87 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v86;
          v24[v83 + 32] = 0x80;
          *(void *)(v87 + 24) = v24;
          __int128 v88 = *((void *)v24 + 3);
          if ((uint64_t)(v82 + 3) > (uint64_t)(v88 >> 1)) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v88 > 1),  v82 + 3,  1,  v24);
          }
          uint64_t v77 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v82 + 3;
          __int128 v78 = &v24[v86];
LABEL_77:
          v78[32] = v21;
          *(void *)(v77 + 24) = v24;
          return swift_task_switch();
        }

        __int128 v93 = (void *)swift_task_alloc();
        *(void *)(v0 + 88) = v93;
        __int128 v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }

    else
    {
      if (v2 != 194)
      {
        uint64_t v51 = *(void *)(v0 + 16);
        uint64_t v52 = *(char **)(v51 + 24);
        unint64_t v53 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v51 + 24) = v52;
        if ((v53 & 1) == 0)
        {
          __int128 v95 = *(void *)(v0 + 16);
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v52 + 2) + 1LL,  1,  v52);
          *(void *)(v95 + 24) = v52;
        }

        uint64_t v55 = *((void *)v52 + 2);
        unint64_t v54 = *((void *)v52 + 3);
        if (v55 >= v54 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v54 > 1),  v55 + 1,  1,  v52);
        }
        uint64_t v56 = *(void *)(v0 + 16);
        *((void *)v52 + 2) = v55 + 1;
        v52[v55 + 32] = v2;
        *(void *)(v56 + 24) = v52;
        return swift_task_switch();
      }

      uint64_t v19 = *(void *)(v0 + 16);
      uint64_t v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20 != *(unsigned __int8 **)(v19 + 16))
      {
        uint64_t v22 = *v20;
        unint64_t v21 = *v20;
        *(void *)(v19 + 8) = v20 + 1;
        uint64_t v23 = *(void *)(v0 + 16);
        uint64_t v24 = *(char **)(v23 + 24);
        if (v22 == 133)
        {
          if (!*((void *)v24 + 2))
          {
            char v25 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v26 = *(char **)(v23 + 24);
            if ((v25 & 1) != 0)
            {
              uint64_t v27 = *((void *)v26 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v27,  1,  v26);
              }
              goto LABEL_35;
            }

            goto LABEL_54;
          }

      if (*((void *)v24 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v56 = (void *)swift_allocObject();
        uint64_t v77 = _swift_stdlib_malloc_size(v56);
        uint64_t v56[2] = 0LL;
        v56[3] = 2 * v77 - 64;
      }

      else
      {
        uint64_t v56 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v56;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }

    if (v3 == 226)
    {
      uint64_t v42 = *(void *)(v0 + 16);
      Swift::Int v43 = *(unsigned __int8 **)(v42 + 8);
      if (v43 == *(unsigned __int8 **)(v42 + 16))
      {
        __int128 v91 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v91;
        __int128 v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }

      else
      {
        Swift::Int v44 = *v43;
        uint64_t v19 = *v43;
        *(void *)(v42 + 8) = v43 + 1;
        unint64_t v45 = *(void **)(v0 + 16);
        if (v44 != 128)
        {
          uint64_t v22 = (char *)v45[3];
          __int128 v71 = swift_isUniquelyReferenced_nonNull_native();
          v45[3] = v22;
          if ((v71 & 1) == 0)
          {
            __int128 v95 = *(void *)(v0 + 16);
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
            *(void *)(v95 + 24) = v22;
          }

          Swift::String v66 = *((void *)v22 + 2);
          uint64_t v72 = *((void *)v22 + 3);
          char v67 = v66 + 1;
          if (v66 >= v72 >> 1) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v72 > 1),  v66 + 1,  1,  v22);
          }
          uint64_t v68 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v67;
          CFURLRef v69 = &v22[v66];
          uint64_t v70 = -30;
LABEL_74:
          v69[32] = v70;
          *(void *)(v68 + 24) = v22;
          Swift::String v73 = *((void *)v22 + 3);
          uint64_t v74 = v66 + 2;
          if (v74 > (uint64_t)(v73 >> 1)) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v73 > 1),  v74,  1,  v22);
          }
          unint64_t v75 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v74;
          Swift::String v76 = &v22[v67];
          goto LABEL_77;
        }

        uint64_t v46 = (unsigned __int8 *)v45[1];
        if (v46 != (unsigned __int8 *)v45[2])
        {
          int v47 = *v46;
          uint64_t v19 = *v46;
          v45[1] = v46 + 1;
          unint64_t v21 = *(void *)(v0 + 16);
          uint64_t v22 = *(char **)(v21 + 24);
          if ((v47 & 0xFE) == 0xA8)
          {
            if (!*((void *)v22 + 2))
            {
              uint64_t v87 = swift_isUniquelyReferenced_nonNull_native();
              __int128 v88 = *(void *)(v21 + 24);
              if ((v87 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v88 + 16));
                return swift_task_switch();
              }

              if (*(void *)(v88 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                __int128 v89 = (void *)swift_allocObject();
                __int128 v90 = _swift_stdlib_malloc_size(v89);
                v89[2] = 0LL;
                v89[3] = 2 * v90 - 64;
              }

              else
              {
                __int128 v89 = (void *)MEMORY[0x18961AFE8];
              }

              *(void *)(*(void *)(v0 + 16) + 24LL) = v89;
              goto LABEL_80;
            }

            goto LABEL_46;
          }

          __int128 v78 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v21 + 24) = v22;
          if ((v78 & 1) == 0)
          {
            uint64_t v96 = *(void *)(v0 + 16);
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
            *(void *)(v96 + 24) = v22;
          }

          __int128 v80 = *((void *)v22 + 2);
          __int128 v79 = *((void *)v22 + 3);
          __int128 v81 = v80 + 1;
          if (v80 >= v79 >> 1) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v79 > 1),  v80 + 1,  1,  v22);
          }
          __int128 v82 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v81;
          v22[v80 + 32] = -30;
          *(void *)(v82 + 24) = v22;
          __int128 v83 = *((void *)v22 + 3);
          __int128 v84 = v80 + 2;
          if ((uint64_t)(v80 + 2) > (uint64_t)(v83 >> 1)) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v83 > 1),  v80 + 2,  1,  v22);
          }
          __int128 v85 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v84;
          v22[v81 + 32] = 0x80;
          *(void *)(v85 + 24) = v22;
          __int128 v86 = *((void *)v22 + 3);
          if ((uint64_t)(v80 + 3) > (uint64_t)(v86 >> 1)) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v86 > 1),  v80 + 3,  1,  v22);
          }
          unint64_t v75 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v80 + 3;
          Swift::String v76 = &v22[v84];
LABEL_77:
          v76[32] = v19;
          *(void *)(v75 + 24) = v22;
          return swift_task_switch();
        }

        __int128 v91 = (void *)swift_task_alloc();
        *(void *)(v0 + 88) = v91;
        __int128 v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }

    else
    {
      if (v3 != 194)
      {
        uint64_t v49 = *(void *)(v0 + 16);
        uint64_t v50 = *(char **)(v49 + 24);
        uint64_t v51 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v49 + 24) = v50;
        if ((v51 & 1) == 0)
        {
          __int128 v93 = *(void *)(v0 + 16);
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v50 + 2) + 1LL,  1,  v50);
          *(void *)(v93 + 24) = v50;
        }

        unint64_t v53 = *((void *)v50 + 2);
        uint64_t v52 = *((void *)v50 + 3);
        if (v53 >= v52 >> 1) {
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v52 > 1),  v53 + 1,  1,  v50);
        }
        unint64_t v54 = *(void *)(v0 + 16);
        *((void *)v50 + 2) = v53 + 1;
        v50[v53 + 32] = v3;
        *(void *)(v54 + 24) = v50;
        return swift_task_switch();
      }

      uint64_t v17 = *(void *)(v0 + 16);
      char v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18 != *(unsigned __int8 **)(v17 + 16))
      {
        uint64_t v20 = *v18;
        uint64_t v19 = *v18;
        *(void *)(v17 + 8) = v18 + 1;
        unint64_t v21 = *(void *)(v0 + 16);
        uint64_t v22 = *(char **)(v21 + 24);
        if (v20 == 133)
        {
          if (!*((void *)v22 + 2))
          {
            uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v24 = *(char **)(v21 + 24);
            if ((v23 & 1) != 0)
            {
              char v25 = *((void *)v24 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25,  1,  v24);
              }
              goto LABEL_35;
            }

            goto LABEL_54;
          }

      if (*((void *)v26 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v58 = (void *)swift_allocObject();
        __int128 v79 = _swift_stdlib_malloc_size(v58);
        v58[2] = 0LL;
        v58[3] = 2 * v79 - 64;
      }

      else
      {
        uint64_t v58 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v58;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }

    if (v2 == 226)
    {
      Swift::Int v44 = *(void *)(v0 + 16);
      unint64_t v45 = *(unsigned __int8 **)(v44 + 8);
      if (v45 == *(unsigned __int8 **)(v44 + 16))
      {
        __int128 v93 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v93;
        __int128 v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }

      else
      {
        uint64_t v46 = *v45;
        unint64_t v21 = *v45;
        *(void *)(v44 + 8) = v45 + 1;
        int v47 = *(void **)(v0 + 16);
        if (v46 != 128)
        {
          uint64_t v24 = (char *)v47[3];
          Swift::String v73 = swift_isUniquelyReferenced_nonNull_native();
          void v47[3] = v24;
          if ((v73 & 1) == 0)
          {
            int64_t v97 = *(void *)(v0 + 16);
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
            *(void *)(v97 + 24) = v24;
          }

          uint64_t v68 = *((void *)v24 + 2);
          uint64_t v74 = *((void *)v24 + 3);
          CFURLRef v69 = v68 + 1;
          if (v68 >= v74 >> 1) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v74 > 1),  v68 + 1,  1,  v24);
          }
          uint64_t v70 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v69;
          __int128 v71 = &v24[v68];
          uint64_t v72 = -30;
LABEL_74:
          v71[32] = v72;
          *(void *)(v70 + 24) = v24;
          unint64_t v75 = *((void *)v24 + 3);
          Swift::String v76 = v68 + 2;
          if (v76 > (uint64_t)(v75 >> 1)) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v75 > 1),  v76,  1,  v24);
          }
          uint64_t v77 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v76;
          __int128 v78 = &v24[v69];
          goto LABEL_77;
        }

        unint64_t v48 = (unsigned __int8 *)v47[1];
        if (v48 != (unsigned __int8 *)v47[2])
        {
          uint64_t v49 = *v48;
          unint64_t v21 = *v48;
          v47[1] = v48 + 1;
          uint64_t v23 = *(void *)(v0 + 16);
          uint64_t v24 = *(char **)(v23 + 24);
          if ((v49 & 0xFE) == 0xA8)
          {
            if (!*((void *)v24 + 2))
            {
              __int128 v89 = swift_isUniquelyReferenced_nonNull_native();
              __int128 v90 = *(void *)(v23 + 24);
              if ((v89 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v90 + 16));
                return swift_task_switch();
              }

              if (*(void *)(v90 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                __int128 v91 = (void *)swift_allocObject();
                __int128 v92 = _swift_stdlib_malloc_size(v91);
                v91[2] = 0LL;
                v91[3] = 2 * v92 - 64;
              }

              else
              {
                __int128 v91 = (void *)MEMORY[0x18961AFE8];
              }

              *(void *)(*(void *)(v0 + 16) + 24LL) = v91;
              goto LABEL_80;
            }

            goto LABEL_46;
          }

          __int128 v80 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v23 + 24) = v24;
          if ((v80 & 1) == 0)
          {
            uint64_t v98 = *(void *)(v0 + 16);
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
            *(void *)(v98 + 24) = v24;
          }

          __int128 v82 = *((void *)v24 + 2);
          __int128 v81 = *((void *)v24 + 3);
          __int128 v83 = v82 + 1;
          if (v82 >= v81 >> 1) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v81 > 1),  v82 + 1,  1,  v24);
          }
          __int128 v84 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v83;
          v24[v82 + 32] = -30;
          *(void *)(v84 + 24) = v24;
          __int128 v85 = *((void *)v24 + 3);
          __int128 v86 = v82 + 2;
          if ((uint64_t)(v82 + 2) > (uint64_t)(v85 >> 1)) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v85 > 1),  v82 + 2,  1,  v24);
          }
          uint64_t v87 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v86;
          v24[v83 + 32] = 0x80;
          *(void *)(v87 + 24) = v24;
          __int128 v88 = *((void *)v24 + 3);
          if ((uint64_t)(v82 + 3) > (uint64_t)(v88 >> 1)) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v88 > 1),  v82 + 3,  1,  v24);
          }
          uint64_t v77 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v82 + 3;
          __int128 v78 = &v24[v86];
LABEL_77:
          v78[32] = v21;
          *(void *)(v77 + 24) = v24;
          return swift_task_switch();
        }

        __int128 v93 = (void *)swift_task_alloc();
        *(void *)(v0 + 88) = v93;
        __int128 v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }

    else
    {
      if (v2 != 194)
      {
        uint64_t v51 = *(void *)(v0 + 16);
        uint64_t v52 = *(char **)(v51 + 24);
        unint64_t v53 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v51 + 24) = v52;
        if ((v53 & 1) == 0)
        {
          __int128 v95 = *(void *)(v0 + 16);
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v52 + 2) + 1LL,  1,  v52);
          *(void *)(v95 + 24) = v52;
        }

        uint64_t v55 = *((void *)v52 + 2);
        unint64_t v54 = *((void *)v52 + 3);
        if (v55 >= v54 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v54 > 1),  v55 + 1,  1,  v52);
        }
        uint64_t v56 = *(void *)(v0 + 16);
        *((void *)v52 + 2) = v55 + 1;
        v52[v55 + 32] = v2;
        *(void *)(v56 + 24) = v52;
        return swift_task_switch();
      }

      uint64_t v19 = *(void *)(v0 + 16);
      uint64_t v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20 != *(unsigned __int8 **)(v19 + 16))
      {
        uint64_t v22 = *v20;
        unint64_t v21 = *v20;
        *(void *)(v19 + 8) = v20 + 1;
        uint64_t v23 = *(void *)(v0 + 16);
        uint64_t v24 = *(char **)(v23 + 24);
        if (v22 == 133)
        {
          if (!*((void *)v24 + 2))
          {
            char v25 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v26 = *(char **)(v23 + 24);
            if ((v25 & 1) != 0)
            {
              uint64_t v27 = *((void *)v26 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v27,  1,  v26);
              }
              goto LABEL_35;
            }

            goto LABEL_54;
          }

      if (*((void *)v24 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v56 = (void *)swift_allocObject();
        uint64_t v77 = _swift_stdlib_malloc_size(v56);
        uint64_t v56[2] = 0LL;
        v56[3] = 2 * v77 - 64;
      }

      else
      {
        uint64_t v56 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v56;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }

    if (v3 == 226)
    {
      uint64_t v42 = *(void *)(v0 + 16);
      Swift::Int v43 = *(unsigned __int8 **)(v42 + 8);
      if (v43 == *(unsigned __int8 **)(v42 + 16))
      {
        __int128 v91 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v91;
        __int128 v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }

      else
      {
        Swift::Int v44 = *v43;
        uint64_t v19 = *v43;
        *(void *)(v42 + 8) = v43 + 1;
        unint64_t v45 = *(void **)(v0 + 16);
        if (v44 != 128)
        {
          uint64_t v22 = (char *)v45[3];
          __int128 v71 = swift_isUniquelyReferenced_nonNull_native();
          v45[3] = v22;
          if ((v71 & 1) == 0)
          {
            __int128 v95 = *(void *)(v0 + 16);
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
            *(void *)(v95 + 24) = v22;
          }

          Swift::String v66 = *((void *)v22 + 2);
          uint64_t v72 = *((void *)v22 + 3);
          char v67 = v66 + 1;
          if (v66 >= v72 >> 1) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v72 > 1),  v66 + 1,  1,  v22);
          }
          uint64_t v68 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v67;
          CFURLRef v69 = &v22[v66];
          uint64_t v70 = -30;
LABEL_74:
          v69[32] = v70;
          *(void *)(v68 + 24) = v22;
          Swift::String v73 = *((void *)v22 + 3);
          uint64_t v74 = v66 + 2;
          if (v74 > (uint64_t)(v73 >> 1)) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v73 > 1),  v74,  1,  v22);
          }
          unint64_t v75 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v74;
          Swift::String v76 = &v22[v67];
          goto LABEL_77;
        }

        uint64_t v46 = (unsigned __int8 *)v45[1];
        if (v46 != (unsigned __int8 *)v45[2])
        {
          int v47 = *v46;
          uint64_t v19 = *v46;
          v45[1] = v46 + 1;
          unint64_t v21 = *(void *)(v0 + 16);
          uint64_t v22 = *(char **)(v21 + 24);
          if ((v47 & 0xFE) == 0xA8)
          {
            if (!*((void *)v22 + 2))
            {
              uint64_t v87 = swift_isUniquelyReferenced_nonNull_native();
              __int128 v88 = *(void *)(v21 + 24);
              if ((v87 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v88 + 16));
                return swift_task_switch();
              }

              if (*(void *)(v88 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                __int128 v89 = (void *)swift_allocObject();
                __int128 v90 = _swift_stdlib_malloc_size(v89);
                v89[2] = 0LL;
                v89[3] = 2 * v90 - 64;
              }

              else
              {
                __int128 v89 = (void *)MEMORY[0x18961AFE8];
              }

              *(void *)(*(void *)(v0 + 16) + 24LL) = v89;
              goto LABEL_80;
            }

            goto LABEL_46;
          }

          __int128 v78 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v21 + 24) = v22;
          if ((v78 & 1) == 0)
          {
            uint64_t v96 = *(void *)(v0 + 16);
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
            *(void *)(v96 + 24) = v22;
          }

          __int128 v80 = *((void *)v22 + 2);
          __int128 v79 = *((void *)v22 + 3);
          __int128 v81 = v80 + 1;
          if (v80 >= v79 >> 1) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v79 > 1),  v80 + 1,  1,  v22);
          }
          __int128 v82 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v81;
          v22[v80 + 32] = -30;
          *(void *)(v82 + 24) = v22;
          __int128 v83 = *((void *)v22 + 3);
          __int128 v84 = v80 + 2;
          if ((uint64_t)(v80 + 2) > (uint64_t)(v83 >> 1)) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v83 > 1),  v80 + 2,  1,  v22);
          }
          __int128 v85 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v84;
          v22[v81 + 32] = 0x80;
          *(void *)(v85 + 24) = v22;
          __int128 v86 = *((void *)v22 + 3);
          if ((uint64_t)(v80 + 3) > (uint64_t)(v86 >> 1)) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v86 > 1),  v80 + 3,  1,  v22);
          }
          unint64_t v75 = *(void *)(v0 + 16);
          *((void *)v22 + 2) = v80 + 3;
          Swift::String v76 = &v22[v84];
LABEL_77:
          v76[32] = v19;
          *(void *)(v75 + 24) = v22;
          return swift_task_switch();
        }

        __int128 v91 = (void *)swift_task_alloc();
        *(void *)(v0 + 88) = v91;
        __int128 v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }

    else
    {
      if (v3 != 194)
      {
        uint64_t v49 = *(void *)(v0 + 16);
        uint64_t v50 = *(char **)(v49 + 24);
        uint64_t v51 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v49 + 24) = v50;
        if ((v51 & 1) == 0)
        {
          __int128 v93 = *(void *)(v0 + 16);
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v50 + 2) + 1LL,  1,  v50);
          *(void *)(v93 + 24) = v50;
        }

        unint64_t v53 = *((void *)v50 + 2);
        uint64_t v52 = *((void *)v50 + 3);
        if (v53 >= v52 >> 1) {
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v52 > 1),  v53 + 1,  1,  v50);
        }
        unint64_t v54 = *(void *)(v0 + 16);
        *((void *)v50 + 2) = v53 + 1;
        v50[v53 + 32] = v3;
        *(void *)(v54 + 24) = v50;
        return swift_task_switch();
      }

      uint64_t v17 = *(void *)(v0 + 16);
      char v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18 != *(unsigned __int8 **)(v17 + 16))
      {
        uint64_t v20 = *v18;
        uint64_t v19 = *v18;
        *(void *)(v17 + 8) = v18 + 1;
        unint64_t v21 = *(void *)(v0 + 16);
        uint64_t v22 = *(char **)(v21 + 24);
        if (v20 == 133)
        {
          if (!*((void *)v22 + 2))
          {
            uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v24 = *(char **)(v21 + 24);
            if ((v23 & 1) != 0)
            {
              char v25 = *((void *)v24 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25,  1,  v24);
              }
              goto LABEL_35;
            }

            goto LABEL_54;
          }

      if (*((void *)v26 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v58 = (void *)swift_allocObject();
        __int128 v79 = _swift_stdlib_malloc_size(v58);
        v58[2] = 0LL;
        v58[3] = 2 * v79 - 64;
      }

      else
      {
        uint64_t v58 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v58;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }

    if (v2 == 226)
    {
      Swift::Int v44 = *(void *)(v0 + 16);
      unint64_t v45 = *(unsigned __int8 **)(v44 + 8);
      if (v45 == *(unsigned __int8 **)(v44 + 16))
      {
        __int128 v93 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v93;
        __int128 v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }

      else
      {
        uint64_t v46 = *v45;
        unint64_t v21 = *v45;
        *(void *)(v44 + 8) = v45 + 1;
        int v47 = *(void **)(v0 + 16);
        if (v46 != 128)
        {
          uint64_t v24 = (char *)v47[3];
          Swift::String v73 = swift_isUniquelyReferenced_nonNull_native();
          void v47[3] = v24;
          if ((v73 & 1) == 0)
          {
            int64_t v97 = *(void *)(v0 + 16);
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
            *(void *)(v97 + 24) = v24;
          }

          uint64_t v68 = *((void *)v24 + 2);
          uint64_t v74 = *((void *)v24 + 3);
          CFURLRef v69 = v68 + 1;
          if (v68 >= v74 >> 1) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v74 > 1),  v68 + 1,  1,  v24);
          }
          uint64_t v70 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v69;
          __int128 v71 = &v24[v68];
          uint64_t v72 = -30;
LABEL_74:
          v71[32] = v72;
          *(void *)(v70 + 24) = v24;
          unint64_t v75 = *((void *)v24 + 3);
          Swift::String v76 = v68 + 2;
          if (v76 > (uint64_t)(v75 >> 1)) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v75 > 1),  v76,  1,  v24);
          }
          uint64_t v77 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v76;
          __int128 v78 = &v24[v69];
          goto LABEL_77;
        }

        unint64_t v48 = (unsigned __int8 *)v47[1];
        if (v48 != (unsigned __int8 *)v47[2])
        {
          uint64_t v49 = *v48;
          unint64_t v21 = *v48;
          v47[1] = v48 + 1;
          uint64_t v23 = *(void *)(v0 + 16);
          uint64_t v24 = *(char **)(v23 + 24);
          if ((v49 & 0xFE) == 0xA8)
          {
            if (!*((void *)v24 + 2))
            {
              __int128 v89 = swift_isUniquelyReferenced_nonNull_native();
              __int128 v90 = *(void *)(v23 + 24);
              if ((v89 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v90 + 16));
                return swift_task_switch();
              }

              if (*(void *)(v90 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                __int128 v91 = (void *)swift_allocObject();
                __int128 v92 = _swift_stdlib_malloc_size(v91);
                v91[2] = 0LL;
                v91[3] = 2 * v92 - 64;
              }

              else
              {
                __int128 v91 = (void *)MEMORY[0x18961AFE8];
              }

              *(void *)(*(void *)(v0 + 16) + 24LL) = v91;
              goto LABEL_80;
            }

            goto LABEL_46;
          }

          __int128 v80 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v23 + 24) = v24;
          if ((v80 & 1) == 0)
          {
            uint64_t v98 = *(void *)(v0 + 16);
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
            *(void *)(v98 + 24) = v24;
          }

          __int128 v82 = *((void *)v24 + 2);
          __int128 v81 = *((void *)v24 + 3);
          __int128 v83 = v82 + 1;
          if (v82 >= v81 >> 1) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v81 > 1),  v82 + 1,  1,  v24);
          }
          __int128 v84 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v83;
          v24[v82 + 32] = -30;
          *(void *)(v84 + 24) = v24;
          __int128 v85 = *((void *)v24 + 3);
          __int128 v86 = v82 + 2;
          if ((uint64_t)(v82 + 2) > (uint64_t)(v85 >> 1)) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v85 > 1),  v82 + 2,  1,  v24);
          }
          uint64_t v87 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v86;
          v24[v83 + 32] = 0x80;
          *(void *)(v87 + 24) = v24;
          __int128 v88 = *((void *)v24 + 3);
          if ((uint64_t)(v82 + 3) > (uint64_t)(v88 >> 1)) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v88 > 1),  v82 + 3,  1,  v24);
          }
          uint64_t v77 = *(void *)(v0 + 16);
          *((void *)v24 + 2) = v82 + 3;
          __int128 v78 = &v24[v86];
LABEL_77:
          v78[32] = v21;
          *(void *)(v77 + 24) = v24;
          return swift_task_switch();
        }

        __int128 v93 = (void *)swift_task_alloc();
        *(void *)(v0 + 88) = v93;
        __int128 v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }

    else
    {
      if (v2 != 194)
      {
        uint64_t v51 = *(void *)(v0 + 16);
        uint64_t v52 = *(char **)(v51 + 24);
        unint64_t v53 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v51 + 24) = v52;
        if ((v53 & 1) == 0)
        {
          __int128 v95 = *(void *)(v0 + 16);
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v52 + 2) + 1LL,  1,  v52);
          *(void *)(v95 + 24) = v52;
        }

        uint64_t v55 = *((void *)v52 + 2);
        unint64_t v54 = *((void *)v52 + 3);
        if (v55 >= v54 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v54 > 1),  v55 + 1,  1,  v52);
        }
        uint64_t v56 = *(void *)(v0 + 16);
        *((void *)v52 + 2) = v55 + 1;
        v52[v55 + 32] = v2;
        *(void *)(v56 + 24) = v52;
        return swift_task_switch();
      }

      uint64_t v19 = *(void *)(v0 + 16);
      uint64_t v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20 != *(unsigned __int8 **)(v19 + 16))
      {
        uint64_t v22 = *v20;
        unint64_t v21 = *v20;
        *(void *)(v19 + 8) = v20 + 1;
        uint64_t v23 = *(void *)(v0 + 16);
        uint64_t v24 = *(char **)(v23 + 24);
        if (v22 == 133)
        {
          if (!*((void *)v24 + 2))
          {
            char v25 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v26 = *(char **)(v23 + 24);
            if ((v25 & 1) != 0)
            {
              uint64_t v27 = *((void *)v26 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v27,  1,  v26);
              }
              goto LABEL_35;
            }

            goto LABEL_54;
          }

    __break(1u);
    goto LABEL_55;
  }

  if (v9 >= a6 && v10 <= a7)
  {
    *(void *)(a8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
    *(void *)(a8 + 24) = a2;
    *(void *)(a8 + 32) = a3;
    *(void *)a8 = a3;
    *(void *)(a8 + 8) = v8;
    *(_BYTE *)(a8 + 40) = 0;
    return result;
  }

  if (v9 <= a6 && v10 >= a6)
  {
    uint64_t v19 = a6 - v9;
    if (!__OFSUB__(a6, v9))
    {
      char v13 = __OFADD__(a3, v19);
      uint64_t v20 = a3 + v19;
      if (!v13)
      {
        if (v8 >= v20 && v20 >= a3 && v11 <= a6 && v9 >= v11)
        {
          *(void *)(a8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
          *(void *)(a8 + 24) = a2;
          *(void *)(a8 + 32) = a3;
          *(void *)a8 = v20;
          *(void *)(a8 + 8) = v8;
          *(_BYTE *)(a8 + 40) = 0;
          return result;
        }

        goto LABEL_62;
      }

    id v31 = (v39 - 1) & v39;
    id v35 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_29:
    uint64_t v36 = 8 * v35;
    id v37 = *(void *)(*(void *)(v14 + 56) + v36);
    *(void *)(*(void *)(v22 + 48) + v36) = *(void *)(*(void *)(v14 + 48) + v36);
    *(void *)(*(void *)(v22 + 56) + v36) = v37;
  }

  uint64_t v40 = v38 + 8;
  if (v40 >= v32) {
    goto LABEL_55;
  }
  id v39 = *(void *)(v33 + 8 * v40);
  if (v39)
  {
    uint64_t v28 = v40;
    id v33 = v14 + 64;
    goto LABEL_54;
  }

  while (1)
  {
    uint64_t v28 = v40 + 1;
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    if (v28 >= v32) {
      goto LABEL_55;
    }
    id v33 = v14 + 64;
    id v39 = *(void *)(v26 + 8 * v28);
    ++v40;
    if (v39) {
      goto LABEL_54;
    }
  }

        __break(1u);
        goto LABEL_55;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_54;
  }

  if (EnumCaseMultiPayload == 2)
  {
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v6,  v1,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    if ((*(_BYTE *)(v1 + 8) & 1) == 0)
    {
      if ((~*(void *)v1 & 0x7FF0000000000000LL) == 0)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }

      if (*(double *)v1 <= -2147483650.0)
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }

      if (*(double *)v1 >= 2147483650.0)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }

      unum_setAttribute();
    }

    uint64_t v19 = *(void *)(v1 + 64);
    uint64_t v20 = *(_BYTE *)(v1 + 72);
    unint64_t v21 = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v7 - 160) = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v7 - 144) = v21;
    *(_OWORD *)(v7 - 128) = *(_OWORD *)(v1 + 48);
    *(void *)(v7 - 112) = v19;
    *(_BYTE *)(v7 - 104) = v20;
    setPrecision(_:formatter:)(v7 - 160);
    if ((*(_BYTE *)(v1 + 73) & 1) != 0) {
      unum_setAttribute();
    }
    if ((*(_BYTE *)(v1 + 78) & 1) != 0) {
      unum_setAttribute();
    }
    uint64_t v22 = v1 + *(int *)(*(void *)(v7 - 184) + 40LL);
    uint64_t v23 = *(unsigned __int8 *)(v22 + 8);
    if (v23 != 255)
    {
      uint64_t v24 = *(void *)v22;
      if ((v23 & 1) != 0)
      {
        unum_setDoubleAttribute();
      }

      else
      {
        if (v24 < (uint64_t)0xFFFFFFFF80000000LL)
        {
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
        }

        if (v24 > 0x7FFFFFFF) {
          goto LABEL_63;
        }
        unum_setAttribute();
      }
    }

    uint64_t v29 = *(_DWORD *)(v1 + 74);
    outlined destroy of ICUNumberFormatter.Signature( v1,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    goto LABEL_51;
  }

  char v25 = *v6;
  if (v6[1] != 5LL)
  {
    *(_DWORD *)(v7 - 160) = 0;
    unum_setContext();
  }

  if (v25 < 2) {
    goto LABEL_51;
  }
  uint64_t v26 = specialized _copyCollectionToContiguousArray<A>(_:)(0xD000000000000012LL, 0x80000001839CC920LL);
  *(_DWORD *)(v7 - 160) = 0;
  if (v26[2] >> 31) {
    goto LABEL_60;
  }
  unum_setTextAttribute();
  swift_release();
  if (*(int *)(v7 - 160) > 0)
  {
    uint64_t v27 = specialized _copyCollectionToContiguousArray<A>(_:)(0xD00000000000001CLL, 0x80000001839CC940LL);
    *(_DWORD *)(v7 - 160) = 0;
    if (v27[2] >> 31)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }

    unum_setTextAttribute();
    swift_release();
  }

  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    uint64_t v15 = 9LL;
    goto LABEL_55;
  }

  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  uint64_t v15 = 1LL;
LABEL_55:
  *(void *)uint64_t v14 = v15;
  *(double *)(v14 + 8) = v6;
  *(_BYTE *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  return (double *)swift_willThrow();
}

  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

        specialized _NativeDictionary._insert(at:key:value:)(v19, &v83, v15, v28);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v83);
        goto LABEL_55;
      }

      goto LABEL_21;
    }
  }

  __break(1u);
LABEL_21:
  uint64_t v58 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUByteCountNumberFormatter.Signature, ICUByteCountNumberFormatter?>);
  id v32 = static _DictionaryStorage.copy(original:)();
  uint64_t v28 = v32;
  if (!*(void *)(v12 + 16))
  {
LABEL_53:
    swift_bridgeObjectRelease();
    uint64_t v19 = v58;
    unint64_t v21 = v59;
    goto LABEL_54;
  }

  uint64_t result = (char *)(v32 + 64);
  __srca = (char *)(v12 + 64);
  uint64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v28 + 32)) + 63) >> 6;
  if (v28 != v12 || result >= &__srca[8 * v34]) {
    uint64_t result = (char *)memmove(result, __srca, 8 * v34);
  }
  id v35 = 0LL;
  *(void *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v12 + 16);
  uint64_t v36 = 1LL << *(_BYTE *)(v12 + 32);
  id v37 = -1LL;
  if (v36 < 64) {
    id v37 = ~(-1LL << v36);
  }
  unint64_t v38 = v37 & *(void *)(v12 + 64);
  uint64_t v61 = (unint64_t)(v36 + 63) >> 6;
  while (1)
  {
    if (v38)
    {
      id v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      uint64_t v40 = v39 | (v35 << 6);
      goto LABEL_29;
    }

    uint64_t v52 = v35 + 1;
    if (__OFADD__(v35, 1LL))
    {
      __break(1u);
      goto LABEL_58;
    }

    if (v52 >= v61) {
      goto LABEL_53;
    }
    unint64_t v53 = *(void *)&__srca[8 * v52];
    ++v35;
    if (!v53)
    {
      id v35 = v52 + 1;
      if (v52 + 1 >= v61) {
        goto LABEL_53;
      }
      unint64_t v53 = *(void *)&__srca[8 * v35];
      if (!v53)
      {
        id v35 = v52 + 2;
        if (v52 + 2 >= v61) {
          goto LABEL_53;
        }
        unint64_t v53 = *(void *)&__srca[8 * v35];
        if (!v53)
        {
          id v35 = v52 + 3;
          if (v52 + 3 >= v61) {
            goto LABEL_53;
          }
          unint64_t v53 = *(void *)&__srca[8 * v35];
          if (!v53)
          {
            id v35 = v52 + 4;
            if (v52 + 4 >= v61) {
              goto LABEL_53;
            }
            unint64_t v53 = *(void *)&__srca[8 * v35];
            if (!v53)
            {
              id v35 = v52 + 5;
              if (v52 + 5 >= v61) {
                goto LABEL_53;
              }
              unint64_t v53 = *(void *)&__srca[8 * v35];
              if (!v53)
              {
                id v35 = v52 + 6;
                if (v52 + 6 >= v61) {
                  goto LABEL_53;
                }
                unint64_t v53 = *(void *)&__srca[8 * v35];
                if (!v53) {
                  break;
                }
              }
            }
          }
        }
      }
    }

        specialized _NativeDictionary._insert(at:key:value:)(v19, &v83, v15, v28);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v83);
        goto LABEL_55;
      }

      goto LABEL_21;
    }
  }

  __break(1u);
LABEL_21:
  uint64_t v58 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUMeasurementNumberFormatter.Signature, ICUMeasurementNumberFormatter?>);
  id v32 = static _DictionaryStorage.copy(original:)();
  uint64_t v28 = v32;
  if (!*(void *)(v12 + 16))
  {
LABEL_53:
    swift_bridgeObjectRelease();
    uint64_t v19 = v58;
    unint64_t v21 = v59;
    goto LABEL_54;
  }

  uint64_t result = (char *)(v32 + 64);
  __srca = (char *)(v12 + 64);
  uint64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v28 + 32)) + 63) >> 6;
  if (v28 != v12 || result >= &__srca[8 * v34]) {
    uint64_t result = (char *)memmove(result, __srca, 8 * v34);
  }
  id v35 = 0LL;
  *(void *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v12 + 16);
  uint64_t v36 = 1LL << *(_BYTE *)(v12 + 32);
  id v37 = -1LL;
  if (v36 < 64) {
    id v37 = ~(-1LL << v36);
  }
  unint64_t v38 = v37 & *(void *)(v12 + 64);
  uint64_t v61 = (unint64_t)(v36 + 63) >> 6;
  while (1)
  {
    if (v38)
    {
      id v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      uint64_t v40 = v39 | (v35 << 6);
      goto LABEL_29;
    }

    uint64_t v52 = v35 + 1;
    if (__OFADD__(v35, 1LL))
    {
      __break(1u);
      goto LABEL_58;
    }

    if (v52 >= v61) {
      goto LABEL_53;
    }
    unint64_t v53 = *(void *)&__srca[8 * v52];
    ++v35;
    if (!v53)
    {
      id v35 = v52 + 1;
      if (v52 + 1 >= v61) {
        goto LABEL_53;
      }
      unint64_t v53 = *(void *)&__srca[8 * v35];
      if (!v53)
      {
        id v35 = v52 + 2;
        if (v52 + 2 >= v61) {
          goto LABEL_53;
        }
        unint64_t v53 = *(void *)&__srca[8 * v35];
        if (!v53)
        {
          id v35 = v52 + 3;
          if (v52 + 3 >= v61) {
            goto LABEL_53;
          }
          unint64_t v53 = *(void *)&__srca[8 * v35];
          if (!v53)
          {
            id v35 = v52 + 4;
            if (v52 + 4 >= v61) {
              goto LABEL_53;
            }
            unint64_t v53 = *(void *)&__srca[8 * v35];
            if (!v53)
            {
              id v35 = v52 + 5;
              if (v52 + 5 >= v61) {
                goto LABEL_53;
              }
              unint64_t v53 = *(void *)&__srca[8 * v35];
              if (!v53)
              {
                id v35 = v52 + 6;
                if (v52 + 6 >= v61) {
                  goto LABEL_53;
                }
                unint64_t v53 = *(void *)&__srca[8 * v35];
                if (!v53) {
                  break;
                }
              }
            }
          }
        }
      }
    }

        char v25 = v3;
        LODWORD(v8) = 0;
        goto LABEL_38;
      }

      __break(1u);
    }

    __break(1u);
LABEL_53:
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 1;
    goto LABEL_54;
  }

  if ((a1 & 0x1000000000000000LL) != 0) {
    uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  unint64_t v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10LL);
  char v25 = BYTE4(v7) & 1;
  LODWORD(v8) = (_DWORD)v7;
LABEL_38:
  char v18 = v25;
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0) {
    goto LABEL_48;
  }
LABEL_39:
  uint64_t v19 = 0;
  return v8 | ((unint64_t)v19 << 32);
}

        uint64_t v26 = v3;
        unint64_t v7 = 0LL;
        goto LABEL_36;
      }

      __break(1u);
    }

    __break(1u);
LABEL_53:
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 1;
    goto LABEL_54;
  }

  unint64_t v7 = specialized _parseInteger<A, B>(ascii:radix:)( a1,  a2,  10LL,  (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
  char v18 = v24;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0) {
    return 0LL;
  }
  else {
    return v7;
  }
}

    __break(1u);
    JUMPOUT(0x183204A84LL);
  }

  uint64_t v14 = (v9 + 978307200.0) * 1000.0;
  uint64_t v15 = (double)a3 * 0.000001;
  unint64_t v16 = v15 * floor(v14 / v15);
  if (v14 >= v16) {
    uint64_t v14 = v16;
  }
  if ((v10 & 1) != 0)
  {
    uint64_t v17 = v14 / 1000.0 + -978307200.0;
    if (v9 < v17) {
      uint64_t v17 = *result;
    }
  }

  else
  {
    uint64_t v17 = (v15 + v14) / 1000.0 + -978307200.0;
    if (v9 >= v17) {
      uint64_t v17 = *result;
    }
  }

  *(double *)a5 = v17;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

    uint64_t v96 = (v90 - 1) & v90;
    int64_t v97 = v91;
    char v67 = __clz(__rbit64(v90)) + (v91 << 6);
LABEL_31:
    uint64_t v68 = 96 * v67;
    CFURLRef v69 = *(void *)(v50 + 48) + 96 * v67;
    uint64_t v70 = *(void *)v69;
    __int128 v71 = *(void *)(v69 + 8);
    uint64_t v72 = *(_BYTE *)(v69 + 16);
    Swift::String v73 = *(_BYTE *)(v69 + 24);
    uint64_t v74 = *(void *)(v69 + 32);
    unint64_t v75 = *(void *)(v69 + 48);
    Swift::String v76 = *(_BYTE *)(v69 + 56);
    uint64_t v77 = *(_BYTE *)(v69 + 57);
    __int128 v78 = *(_WORD *)(v69 + 62);
    __int128 v79 = *(void *)(v69 + 64);
    __int128 v80 = *(_WORD *)(v69 + 72);
    __int128 v82 = *(void *)(v69 + 80);
    __int128 v81 = *(void *)(v69 + 88);
    __int128 v83 = 16 * v67;
    __int128 v84 = (uint64_t *)(*(void *)(v50 + 56) + v83);
    __int128 v85 = *v84;
    __int128 v86 = v84[1];
    uint64_t v87 = *(void *)(v56 + 48) + v68;
    LODWORD(v68) = *(_DWORD *)(v69 + 40);
    LODWORD(v69) = *(_DWORD *)(v69 + 58);
    *(void *)uint64_t v87 = v70;
    *(void *)(v87 + 8) = v71;
    *(_BYTE *)(v87 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v72;
    *(_BYTE *)(v87 + 24) = v73;
    *(void *)(v87 + 32) = v74;
    *(_DWORD *)(v87 + 40) = v68;
    *(void *)(v87 + 48) = v75;
    *(_BYTE *)(v87 + 56) = v76;
    *(_BYTE *)(v87 + 57) = v77;
    *(_DWORD *)(v87 + 58) = v69;
    *(_WORD *)(v87 + 62) = v78;
    *(void *)(v87 + 64) = v79;
    *(_WORD *)(v87 + 72) = v80;
    *(void *)(v87 + 80) = v82;
    *(void *)(v87 + 88) = v81;
    __int128 v88 = (void *)(*(void *)(v56 + 56) + v83);
    *__int128 v88 = v85;
    v88[1] = v86;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::String v66 = v96;
    Swift::String v63 = v97;
  }

  __int128 v92 = v63 + 8;
  if (v63 + 8 >= v95) {
    goto LABEL_55;
  }
  __int128 v90 = *(void *)(v94 + 8 * v92);
  if (v90)
  {
    __int128 v91 = v63 + 8;
    goto LABEL_54;
  }

  while (1)
  {
    __int128 v91 = v92 + 1;
    if (__OFADD__(v92, 1LL)) {
      break;
    }
    if (v91 >= v95) {
      goto LABEL_55;
    }
    __int128 v90 = *(void *)(v94 + 8 * v91);
    ++v92;
    if (v90) {
      goto LABEL_54;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter.DateFormatInfo.UpdateSchedule>);
  unint64_t v54 = static _DictionaryStorage.copy(original:)();
  uint64_t v50 = v54;
  if (!*(void *)(v27 + 16))
  {
LABEL_86:
    swift_bridgeObjectRelease();
    Swift::Int v44 = v85;
    goto LABEL_51;
  }

  uint64_t v55 = (void *)(v54 + 64);
  uint64_t v56 = (unint64_t)((1LL << *(_BYTE *)(v50 + 32)) + 63) >> 6;
  __int128 v86 = v27 + 64;
  unsigned int v57 = 0LL;
  *(void *)(v50 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v27 + 16);
  uint64_t v58 = 1LL << *(_BYTE *)(v27 + 32);
  Swift::String v59 = -1LL;
  if (v58 < 64) {
    Swift::String v59 = ~(-1LL << v58);
  }
  uint64_t v60 = v59 & *(void *)(v27 + 64);
  *(void *)&uint64_t v87 = (unint64_t)(v58 + 63) >> 6;
  while (2)
  {
    if (v60)
    {
      uint64_t v61 = __clz(__rbit64(v60));
      v60 &= v60 - 1;
      uint64_t v62 = v61 | (v57 << 6);
LABEL_62:
      Swift::String v63 = 96 * v62;
      uint64_t v64 = *(void *)(v27 + 48) + 96 * v62;
      unint64_t v65 = *(void *)(v64 + 8);
      Swift::String v66 = *(void *)(v64 + 16);
      char v67 = *(void *)(v64 + 24);
      uint64_t v68 = *(_BYTE *)(v64 + 32);
      CFURLRef v69 = *(_BYTE *)(v64 + 56);
      uint64_t v70 = *(void *)(v64 + 64);
      __int128 v71 = *(void *)(v64 + 72);
      uint64_t v72 = *(_BYTE *)(v64 + 80);
      Swift::String v73 = *(void *)(v64 + 88);
      uint64_t v74 = 16 * v62;
      unint64_t v75 = *(void *)(v27 + 56) + v74;
      Swift::String v76 = *(void *)v75;
      LOBYTE(v75) = *(_BYTE *)(v75 + 8);
      uint64_t v77 = *(void *)(v50 + 48) + v63;
      __int128 v78 = *(_OWORD *)(v64 + 40);
      *(void *)uint64_t v77 = *(void *)v64;
      *(void *)(v77 + 8) = v65;
      *(void *)(v77 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v66;
      *(void *)(v77 + 24) = v67;
      *(_BYTE *)(v77 + 32) = v68;
      *(_OWORD *)(v77 + 40) = v78;
      *(_BYTE *)(v77 + 56) = v69;
      *(void *)(v77 + 64) = v70;
      *(void *)(v77 + 72) = v71;
      *(_BYTE *)(v77 + 80) = v72;
      *(void *)(v77 + 88) = v73;
      __int128 v79 = *(void *)(v50 + 56) + v74;
      *(void *)__int128 v79 = v76;
      *(_BYTE *)(v79 + 8) = v75;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  __int128 v80 = v57 + 1;
  if (__OFADD__(v57, 1LL))
  {
    __break(1u);
    goto LABEL_91;
  }

  __int128 v81 = *(void *)(v86 + 8 * v80);
  ++v57;
  if (v81) {
    goto LABEL_85;
  }
  unsigned int v57 = v80 + 1;
  __int128 v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  unsigned int v57 = v80 + 2;
  __int128 v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  unsigned int v57 = v80 + 3;
  __int128 v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  unsigned int v57 = v80 + 4;
  __int128 v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  unsigned int v57 = v80 + 5;
  __int128 v81 = *(void *)(v86 + 8 * v57);
  if (v81) {
    goto LABEL_85;
  }
  unsigned int v57 = v80 + 6;
  __int128 v81 = *(void *)(v86 + 8 * v57);
  if (v81)
  {
LABEL_85:
    uint64_t v60 = (v81 - 1) & v81;
    uint64_t v62 = __clz(__rbit64(v81)) + (v57 << 6);
    goto LABEL_62;
  }

  __int128 v82 = v80 + 7;
  __int128 v81 = *(void *)(v86 + 8 * v82);
  if (v81)
  {
    unsigned int v57 = v82;
    goto LABEL_85;
  }

  while (1)
  {
    unsigned int v57 = v82 + 1;
    if (__OFADD__(v82, 1LL)) {
      break;
    }
    __int128 v81 = *(void *)(v86 + 8 * v57);
    ++v82;
    if (v81) {
      goto LABEL_85;
    }
  }

  __break(1u);
LABEL_55:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    unint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
    unint64_t v54 = (void *)v11;
    uint64_t v55 = 0LL;
    uint64_t v56 = v11 + 64;
    do
    {
      unsigned int v57 = outlined read-only object #1 of _CalendarBridged.ordinality(of:in:for:)[v55 + 32];
      if (v57 == 18) {
        break;
      }
      uint64_t v58 = *(void *)&outlined read-only object #1 of _CalendarBridged.ordinality(of:in:for:)[v55 + 40];
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #1 of _CalendarBridged.ordinality(of:in:for:)[v55 + 32]);
      if (v12) {
        goto LABEL_96;
      }
      *(void *)(v56 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      *(_BYTE *)(v54[6] + v11) = v57;
      *(void *)(v54[7] + 8 * v11) = v58;
      Swift::String v59 = v54[2];
      unint64_t v21 = __OFADD__(v59, 1LL);
      uint64_t v60 = v59 + 1;
      if (v21) {
        goto LABEL_97;
      }
      v54[2] = v60;
      v55 += 16LL;
    }

    while (v55 != 256);
    uint64_t v61 = 0LL;
    uint64_t v62 = 0LL;
    Swift::String v63 = 1LL << *(_BYTE *)(v43 + 32);
    uint64_t v64 = *(void *)(v43 + 56);
    unint64_t v65 = -1LL;
    if (v63 < 64) {
      unint64_t v65 = ~(-1LL << v63);
    }
    Swift::String v66 = v65 & v64;
    char v67 = (unint64_t)(v63 + 63) >> 6;
    if ((v65 & v64) == 0) {
      goto LABEL_64;
    }
LABEL_62:
    uint64_t v68 = __clz(__rbit64(v66));
    v66 &= v66 - 1;
    CFURLRef v69 = v68 | (v61 << 6);
    if (v54[2])
    {
      while (1)
      {
        unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v43 + 48) + v69));
        if (!v12) {
          goto LABEL_91;
        }
        Swift::String v73 = *(void *)(v54[7] + 8 * v11);
        if ((v73 & ~v62) == 0) {
          Swift::String v73 = 0LL;
        }
        v62 |= v73;
        if (v66) {
          goto LABEL_62;
        }
LABEL_64:
        uint64_t v70 = v61 + 1;
        if (__OFADD__(v61, 1LL)) {
          goto LABEL_93;
        }
        if (v70 >= v67)
        {
LABEL_85:
          swift_release();
          swift_release();
          uint64_t v74 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v7);
          unint64_t v75 = objc_msgSend(v76, sel_ordinalityOfUnit_inUnit_forDate_, v31, v62, v74);

          char v12 = v75 == (id)0x7FFFFFFFFFFFFFFFLL;
          if (v75 == (id)0x7FFFFFFFFFFFFFFFLL) {
            unint64_t v11 = 0LL;
          }
          else {
            unint64_t v11 = (unint64_t)v75;
          }
          goto LABEL_102;
        }

        __int128 v71 = *(void *)(v44 + 8 * v70);
        ++v61;
        if (!v71)
        {
          uint64_t v61 = v70 + 1;
          if (v70 + 1 >= v67) {
            goto LABEL_85;
          }
          __int128 v71 = *(void *)(v44 + 8 * v61);
          if (!v71)
          {
            uint64_t v61 = v70 + 2;
            if (v70 + 2 >= v67) {
              goto LABEL_85;
            }
            __int128 v71 = *(void *)(v44 + 8 * v61);
            if (!v71)
            {
              uint64_t v61 = v70 + 3;
              if (v70 + 3 >= v67) {
                goto LABEL_85;
              }
              __int128 v71 = *(void *)(v44 + 8 * v61);
              if (!v71)
              {
                uint64_t v72 = v70 + 4;
                if (v72 >= v67) {
                  goto LABEL_85;
                }
                __int128 v71 = *(void *)(v44 + 8 * v72);
                if (!v71)
                {
                  while (1)
                  {
                    uint64_t v61 = v72 + 1;
                    if (__OFADD__(v72, 1LL)) {
                      goto LABEL_99;
                    }
                    if (v61 >= v67) {
                      goto LABEL_85;
                    }
                    __int128 v71 = *(void *)(v44 + 8 * v61);
                    ++v72;
                    if (v71) {
                      goto LABEL_79;
                    }
                  }
                }

                uint64_t v61 = v72;
              }
            }
          }
        }

      Swift::String v66 = one-time initialization token for formatSpecifierConfiguration;
      char v67 = v58;
      if (v66 != -1) {
        goto LABEL_325;
      }
      goto LABEL_55;
    }

    Swift::String v63 = v650;
    uint64_t v28 = 0LL;
LABEL_51:
    outlined init with take of LocalePreferences?( (uint64_t)(v63 + 3),  (uint64_t)v902,  &demangling cache variable for type metadata for AttributedString.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?( (uint64_t)v902,  (uint64_t)&v1086,  &demangling cache variable for type metadata for AttributedString.LocalizationOptions._PluralizationNumber?);
    if ((v1087 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v1086, (uint64_t)&v1088),
          !v58))
    {
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v900, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v744);
      LODWORD(v671) = 0;
      int64_t v97 = *(void *)&v744[0];
      goto LABEL_77;
    }

    LODWORD(v671) = 0;
    *(void *)&v826[0] = MEMORY[0x18961AFF0];
    goto LABEL_54;
  }

  if (!v673[2])
  {
    uint64_t v58 = 0LL;
    v643 = 0LL;
    Swift::String v63 = v650;
    goto LABEL_51;
  }

  v669 = 0LL;
  v643 = 0LL;
  *(void *)&v826[0] = MEMORY[0x18961AFF0];
  LODWORD(v671) = 1;
  while (1)
  {
LABEL_56:
    CFURLRef v69 = objc_allocWithZone((Class)&OBJC_CLASS___NSAttributedString);
    uint64_t v70 = String._bridgeToObjectiveCImpl()();
    type metadata accessor for NSAttributedStringKey(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey,  (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    swift_bridgeObjectRetain();
    __int128 v71 = objc_msgSend(v69, sel_initWithString_attributes_, v70, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v72 = v639;
    swift_unknownObjectRetain();
    Swift::String v73 = v640;
    uint64_t v74 = (_OWORD *)v28;
    unint64_t v75 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTm( (uint64_t)v673,  v72,  v640,  (uint64_t)&v678,  (uint64_t (*)(void))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTf4ng_n);
    Swift::String v76 = *((_OWORD *)v650 + 1);
    v744[0] = *(_OWORD *)v650;
    v744[1] = v76;
    v744[2] = *((_OWORD *)v650 + 2);
    *(__int128 *)((char *)&v744[2] + 9) = *(_OWORD *)((char *)v650 + 41);
    uint64_t v77 = AttributedString.LocalizationOptions._nsOptions.getter();
    __int128 v79 = v78;
    v665 = v77 | 2;
    uint64_t ObjectType = swift_getObjectType();
    __int128 v81 = *(uint64_t (**)(void, void))(v73 + 488);
    v666 = v79;
    __int128 v82 = (void *)v81(ObjectType, v73);
    __int128 v83 = *(void *)(v75 + 16);
    v668 = v75;
    if (v83)
    {
      v663 = v74;
      v664 = v71;
      *(void *)&v816[0] = MEMORY[0x18961AFE8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 0);
      __int128 v84 = v75 + 32;
      __int128 v85 = *(void *)&v816[0];
      __int128 v86 = v83;
      do
      {
        outlined init with copy of (Hashable & Sendable)?( v84,  (uint64_t)v744,  &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v744,  (uint64_t)v743);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v743, (uint64_t)&v710);
        outlined destroy of Any?( (uint64_t)v744,  &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v85 + 16) + 1LL,  1);
          __int128 v85 = *(void *)&v816[0];
        }

        __int128 v88 = *(void *)(v85 + 16);
        uint64_t v87 = *(void *)(v85 + 24);
        if (v88 >= v87 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v87 > 1,  v88 + 1,  1);
          __int128 v85 = *(void *)&v816[0];
        }

        *(void *)(v85 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v88 + 1;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v710, v85 + 40 * v88 + 32);
        v84 += 64LL;
        --v86;
      }

      while (v86);
      __int128 v71 = v664;
      uint64_t v74 = v663;
    }

    __int128 v89 = objc_opt_self();
    __int128 v90 = getVaList(_:)();
    swift_bridgeObjectRelease();
    __int128 v91 = (void *)v89;
    __int128 v92 = v666;
    __int128 v93 =  objc_msgSend( v91,  sel__attributedStringWithFormat_attributeOptions_formattingOptions_locale_arguments_,  v71,  v665,  v666,  v82,  v90);

    __int128 v94 = v93;
    specialized static AttributeScope.scopeDescription.getter();
    uint64_t v96 = v95;
    swift_bridgeObjectRelease();
    AttributedString.init(_:attributeTable:options:)(v94, v96, 0LL, v744);
    uint64_t v28 = (unint64_t)v74;
    if (v74)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v900, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v744);
      swift_bridgeObjectRelease();

      uint64_t v58 = v669;
      uint64_t v28 = 0LL;
      int64_t v97 = *(void *)&v744[0];
    }

    else
    {
      *(void *)&v710 = *(void *)&v744[0];
      uint64_t v98 = MEMORY[0x18961AFE8];
      if (v83)
      {
        v674 = v94;
        v664 = v71;
        v644 = 0LL;
        *(void *)&v816[0] = MEMORY[0x18961AFE8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 0);
        unint64_t v99 = v668 + 32;
        uint64_t v98 = *(void *)&v816[0];
        do
        {
          outlined init with copy of (Hashable & Sendable)?( v99,  (uint64_t)v744,  &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v744,  (uint64_t)v743);
          uint64_t v100 = *((void *)&v744[2] + 1);
          uint64_t v101 = *(void *)&v744[3];
          unint64_t v102 = BYTE8(v744[3]);
          *((void *)&v743[2] + 1) = *((void *)&v744[2] + 1);
          *(void *)&v743[3] = *(void *)&v744[3];
          BYTE8(v743[3]) = BYTE8(v744[3]);
          outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?( *((uint64_t *)&v744[2] + 1),  *(uint64_t *)&v744[3],  BYTE8(v744[3]));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v743);
          outlined destroy of Any?( (uint64_t)v744,  &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v98 + 16) + 1LL,  1);
            uint64_t v98 = *(void *)&v816[0];
          }

          unint64_t v104 = *(void *)(v98 + 16);
          uint64_t v103 = *(void *)(v98 + 24);
          if (v104 >= v103 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v103 > 1,  v104 + 1,  1);
            uint64_t v98 = *(void *)&v816[0];
          }

          *(void *)(v98 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v104 + 1;
          unint64_t v105 = v98 + 24 * v104;
          *(void *)(v105 + 32) = v100;
          *(void *)(v105 + 40) = v101;
          *(_BYTE *)(v105 + 48) = v102;
          v99 += 64LL;
          --v83;
        }

        while (v83);
        uint64_t v28 = (unint64_t)v644;
        __int128 v71 = v664;
        __int128 v92 = v666;
        __int128 v94 = v674;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.LocalizationValue.restoreAttributedStringArguments(_:in:)(v98);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t v58 = v669;
      int64_t v97 = v710;
    }

    id v35 = v647;
LABEL_77:
    char v106 = *(_OWORD *)(v97 + 16);
    uint64_t v107 = *(_OWORD *)(v97 + 32);
    v1085 = *(_OWORD *)(v97 + 48);
    v1084[1] = v107;
    v1084[0] = v106;
    char v108 = *(_OWORD *)(v97 + 16);
    uint64_t v109 = *(_OWORD *)(v97 + 32);
    v1089[2] = v1085;
    v1089[1] = v109;
    v1089[0] = v108;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1089, (uint64_t)v1090);
    outlined retain of Locale((uint64_t)v1090);
    v664 = (void *)MEMORY[0x186E1B6D0](v1084);
    Swift::String v111 = v110;
    if (v643)
    {
      URL.init(reference:)(v643, v744);
      v674 = (id)*((void *)&v744[0] + 1);
      v675 = *(void **)&v744[0];
      v668 = *(void *)&v744[1];
    }

    else
    {
      v675 = 0LL;
      v674 = 0LL;
      v668 = 0LL;
    }

    v645 = v58;
    v112._uint64_t countAndFlagsBits = 0x65686361636F6E2ELL;
    v112._unint64_t object = (void *)0xE800000000000000LL;
    char v113 = String.hasSuffix(_:)(v112);
    swift_bridgeObjectRelease();
    LODWORD(v114) = (v113 || v35 != 0) | v672 ^ 1;
    v661 = v111;
    v662 = v97;
    if (one-time initialization token for attributedStringsCacheLock != -1) {
LABEL_292:
    }
      swift_once();
    id v115 = static String.LocalizationValue.attributedStringsCacheLock + 16;
    unint64_t v116 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
    swift_retain();
    os_unfair_lock_lock(v116);
    specialized closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( v115,  (uint64_t)v664,  (uint64_t)v111,  (int)v671,  (uint64_t)v744);
    os_unfair_lock_unlock(v116);
    swift_release();
    id v117 = *(_OWORD **)&v744[0];
    if (!*(void *)&v744[0])
    {
LABEL_84:
      LODWORD(v670) = v114;
      v669 = v58;
      v644 = (void *)v28;
      if (one-time initialization token for localizedAttributedString != -1) {
LABEL_286:
      }
        swift_once();
      char v119 = static AttributedString.MarkdownParsingOptions.localizedAttributedString;
      uint64_t v120 = byte_18C5D63E1;
      LODWORD(v667) = byte_18C5D63E2;
      id v122 = (NSError *)qword_18C5D63E8;
      __int128 v121 = (NSError *)unk_18C5D63F0;
      if (v675)
      {
        *(void *)&v744[0] = v675;
        *((void *)&v744[0] + 1) = v674;
        *(void *)&v744[1] = v668;
        swift_bridgeObjectRetain();
        __int128 v123 = URL.pathComponents.getter();
        __int128 v124 = v123;
        id v125 = *(void *)(v123 + 16);
        if (v125)
        {
          char v126 = v123 + 16 * v125 + 24;
          while (v125 <= *(void *)(v124 + 16))
          {
            swift_bridgeObjectRetain();
            v127._uint64_t countAndFlagsBits = 0x6A6F72706C2ELL;
            v127._unint64_t object = (void *)0xE600000000000000LL;
            if (String.hasSuffix(_:)(v127) && String.count.getter() >= 7)
            {
              swift_bridgeObjectRelease();
              String.index(_:offsetBy:)();
              char v128 = String.subscript.getter();
              unint64_t v130 = v129;
              uint64_t v132 = v131;
              char v134 = v133;
              swift_bridgeObjectRelease();
              id v122 = (NSError *)MEMORY[0x186E1B610](v128, v130, v132, v134);
              uint64_t v136 = v135;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __int128 v121 = v136;
              Swift::String v111 = v661;
              int64_t v97 = v662;
              goto LABEL_93;
            }

            --v125;
            swift_bridgeObjectRelease();
            v126 -= 16LL;
            if (!v125) {
              goto LABEL_280;
            }
          }

          __break(1u);
LABEL_280:
          swift_bridgeObjectRelease();
          Swift::String v111 = v661;
          int64_t v97 = v662;
        }

        else
        {
          swift_bridgeObjectRelease();
          Swift::String v111 = v661;
        }
      }

      else
      {
        swift_bridgeObjectRetain();
      }

      if (v121 || (v672 & 1) == 0)
      {
LABEL_93:
        unint64_t v137 = v119 | (v120 << 8);
        if (v669)
        {
          *(void *)&v743[0] = 0xD000000000000022LL;
          *((void *)&v743[0] + 1) = 0x80000001839D0660LL;
          unint64_t v138 =  objc_msgSend( v645,  sel___swift_objectForKeyedSubscript_,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          unint64_t v139 = (char)v670;
          if (v138)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }

          else
          {
            memset(v743, 0, 32);
          }

          outlined init with take of LocalePreferences?( (uint64_t)v743,  (uint64_t)v744,  &demangling cache variable for type metadata for Any?);
          if (*((void *)&v744[1] + 1))
          {
            if (swift_dynamicCast())
            {
              __int128 v144 = v743[0];
              if ((_DWORD)v667) {
                unint64_t v145 = 0x10000;
              }
              else {
                unint64_t v145 = 0;
              }
              uint64_t v146 = v137 | v145;
              swift_bridgeObjectRetain();
              uint64_t v147 = v644;
              uint64_t v148 = specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( v743,  v144,  *((unint64_t *)&v144 + 1),  v146,  v122,  v121,  (int)v671,  0LL);
              if (v147)
              {
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                if ((v139 & 1) == 0)
                {
LABEL_262:
                  if (one-time initialization token for attributedStringsCacheLock != -1) {
LABEL_334:
                  }
                    swift_once();
                  v556 = (uint64_t *)(static String.LocalizationValue.attributedStringsCacheLock + 16);
                  v557 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
                  swift_retain();
                  os_unfair_lock_lock(v557);
                  specialized closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( v556,  (uint64_t)v664,  (uint64_t)v111,  (char)v671);
                  os_unfair_lock_unlock(v557);
                  swift_release();
                }

      __int128 v89 = (4 * *(_BYTE *)(v88 + 18) + 8) & 0x3C;
      uint64_t v87 = ((-15LL << v89) - 1) & v87 | (v90 << v89);
      uint64_t v64 = *(void *)(v88 + 24 + 24 * v90);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      __int128 v88 = v64;
      if (!*(_BYTE *)(v64 + 18)) {
        goto LABEL_86;
      }
    }
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v288);
  swift_unknownObjectRetain();
  uint64_t v64 = v82;
LABEL_86:
  uint64_t v100 = *(unsigned __int16 *)(v64 + 16);
  if (!*(_WORD *)(v64 + 16)) {
    goto LABEL_100;
  }
  uint64_t v101 = v62 - 1;
  if (__OFSUB__(v62, 1LL)) {
    goto LABEL_183;
  }
  if (!__OFADD__(v101, 1LL))
  {
    if (v62 <= 0)
    {
      uint64_t v100 = 0LL;
    }

    else
    {
      if ((_DWORD)v100 == 1) {
        goto LABEL_99;
      }
      __int128 v92 = __OFSUB__(v101, 1LL);
      uint64_t v101 = v62 - 2;
      if (v92) {
        goto LABEL_190;
      }
      if (__OFADD__(v101, 1LL)) {
        goto LABEL_191;
      }
      if (v62 - 1 < 1)
      {
        uint64_t v100 = 1LL;
      }

      else
      {
        if ((_DWORD)v100 == 2) {
          goto LABEL_99;
        }
        __int128 v92 = __OFSUB__(v101, 1LL);
        uint64_t v101 = v62 - 3;
        if (v92) {
          goto LABEL_192;
        }
        if (__OFADD__(v101, 1LL)) {
          goto LABEL_193;
        }
        if (v62 - 2 < 1)
        {
          uint64_t v100 = 2LL;
        }

        else
        {
          if ((_DWORD)v100 != 3)
          {
            unint64_t v102 = 0LL;
            uint64_t v103 = 3LL;
            if (v100 > 3) {
              uint64_t v103 = *(unsigned __int16 *)(v64 + 16);
            }
            unint64_t v104 = v103 - 3;
            if (v101 >= v100 - 4) {
              unint64_t v105 = v100 - 4;
            }
            else {
              unint64_t v105 = v62 - 3;
            }
            if (v105 >= v62 + 0x7FFFFFFFFFFFFFFDLL) {
              unint64_t v105 = v62 + 0x7FFFFFFFFFFFFFFDLL;
            }
            while (v104 > v105)
            {
              if (v62 + 0x7FFFFFFFFFFFFFFDLL == v102) {
                goto LABEL_189;
              }
              if (v101 == v102)
              {
                uint64_t v100 = v62;
                goto LABEL_119;
              }

              if (v100 - 3 == ++v102)
              {
                if (v101 == v102) {
                  goto LABEL_119;
                }
                goto LABEL_182;
              }
            }

            goto LABEL_188;
          }

  *(void *)(v22 + 8 * (result >> 6) + 64) |= 1LL << result;
  *(void *)(*(void *)(v22 + 48) + 8 * result) = a2;
  id v41 = (void *)(*(void *)(v22 + 56) + 16 * result);
  *id v41 = v3;
  v41[1] = v47;
  uint64_t v42 = *(void *)(v22 + 16);
  uint64_t v20 = __OFADD__(v42, 1LL);
  Swift::Int v43 = v42 + 1;
  if (!v20)
  {
    *(void *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v43;
    goto LABEL_56;
  }

  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
  return result;
}

          v51(v52, v8);
          __int128 v80 = type metadata accessor for DecodingError();
          swift_allocError();
          __int128 v82 = v81;
          *(void *)&uint64_t v98 = 0LL;
          *((void *)&v98 + 1) = 0xE000000000000000LL;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52LL);
          v83._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
          v83._unint64_t object = (void *)0x80000001839D13E0LL;
          String.append(_:)(v83);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v84._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._unint64_t object = (void *)0x80000001839D1400LL;
          v85._uint64_t countAndFlagsBits = 0xD000000000000012LL;
          String.append(_:)(v85);
          v86._uint64_t countAndFlagsBits = 947154505LL;
          v86._unint64_t object = (void *)0xE400000000000000LL;
          String.append(_:)(v86);
          v87._uint64_t countAndFlagsBits = 46LL;
          v87._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v87);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v80 - 8) + 104LL))( v82,  *MEMORY[0x189619360],  v80);
LABEL_55:
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          return;
        }

          v51(v52, v8);
          __int128 v80 = type metadata accessor for DecodingError();
          swift_allocError();
          __int128 v82 = v81;
          *(void *)&uint64_t v98 = 0LL;
          *((void *)&v98 + 1) = 0xE000000000000000LL;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52LL);
          v83._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
          v83._unint64_t object = (void *)0x80000001839D13E0LL;
          String.append(_:)(v83);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v84._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._unint64_t object = (void *)0x80000001839D1400LL;
          v85._uint64_t countAndFlagsBits = 0xD000000000000012LL;
          String.append(_:)(v85);
          v86._uint64_t countAndFlagsBits = 0x3631746E49LL;
          v86._unint64_t object = (void *)0xE500000000000000LL;
          String.append(_:)(v86);
          v87._uint64_t countAndFlagsBits = 46LL;
          v87._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v87);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v80 - 8) + 104LL))( v82,  *MEMORY[0x189619360],  v80);
LABEL_55:
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          return;
        }

          char v25 = (v30 - 1) & v30;
          uint64_t v28 = __clz(__rbit64(v30)) + (v21 << 6);
        }

        if (*(void *)(*(void *)(v2 + 56) + 16 * v28))
        {
          *(unint64_t *)((char *)v19 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v28;
          char v18 = __OFADD__(v20++, 1LL);
          if (v18)
          {
            __break(1u);
            goto LABEL_58;
          }
        }
      }
    }
  }

  MEMORY[0x1895F8858](isStackAllocationSafe);
  uint64_t v5 = (unint64_t *)((char *)&v92 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v5, v4);
  uint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  unint64_t v8 = v2 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  char v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      char v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      uint64_t v14 = v13 | (v7 << 6);
    }

    else
    {
      uint64_t v15 = v7 + 1;
      if (__OFADD__(v7, 1LL))
      {
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }

      if (v15 >= v12) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v8 + 8 * v15);
      ++v7;
      if (!v16)
      {
        unint64_t v7 = v15 + 1;
        if (v15 + 1 >= v12) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16)
        {
          unint64_t v7 = v15 + 2;
          if (v15 + 2 >= v12) {
            goto LABEL_28;
          }
          unint64_t v16 = *(void *)(v8 + 8 * v7);
          if (!v16)
          {
            unint64_t v7 = v15 + 3;
            if (v15 + 3 >= v12) {
              goto LABEL_28;
            }
            unint64_t v16 = *(void *)(v8 + 8 * v7);
            if (!v16)
            {
              uint64_t v17 = v15 + 4;
              if (v17 >= v12) {
                goto LABEL_28;
              }
              unint64_t v16 = *(void *)(v8 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  unint64_t v7 = v17 + 1;
                  if (__OFADD__(v17, 1LL)) {
                    break;
                  }
                  if (v7 >= v12) {
                    goto LABEL_28;
                  }
                  unint64_t v16 = *(void *)(v8 + 8 * v7);
                  ++v17;
                  if (v16) {
                    goto LABEL_24;
                  }
                }

          __break(1u);
          goto LABEL_55;
        }
      }

      if (v52) {
        goto LABEL_44;
      }
      goto LABEL_54;
    }

          unint64_t v16 = ((-15LL << ((4 * v16 + 8) & 0x3C)) - 1) & v16 | (v17 << ((4 * v16 + 8) & 0x3C));
          swift_unknownObjectRetain();
          id v37 = 0LL;
          char v18 = 0LL;
LABEL_55:
          swift_unknownObjectRetain();
          uint64_t v175 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, (uint64_t)v10);
          uint64_t result = (void *)swift_unknownObjectRelease_n();
          uint64_t v10 = v181;
          goto LABEL_56;
        }

        if (a2 > 0) {
          goto LABEL_385;
        }
        id v37 = 0LL;
        char v18 = 0LL;
        unint64_t v16 = 0LL;
        uint64_t v175 = 0LL;
LABEL_56:
        uint64_t v20 = __OFSUB__(v8, v37);
        unint64_t v21 = v8 - v37;
        uint64_t v9 = a3;
        if (v20) {
          goto LABEL_375;
        }
      }

      else
      {
        unint64_t v21 = 0LL;
        uint64_t v175 = 0LL;
        char v18 = 0LL;
        unint64_t v16 = 0LL;
        char v12 = v181[11];
        if (v5)
        {
          char v18 = 0LL;
          unint64_t v21 = v181[10];
          uint64_t v175 = v181[9];
          unint64_t v16 = ((-15LL << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v5 + 18) | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C));
        }
      }
    }
  }

      __break(1u);
      goto LABEL_55;
    }

    uint64_t v34 = *(void *)(v6 + 24);
    id v35 = v4 - v34;
    if (__OFSUB__(v4, v34)) {
      continue;
    }
    break;
  }

  unint64_t v7 = v5;
  if (v35 > 0)
  {
    if ((_DWORD)v33 != 1)
    {
      uint64_t v36 = (uint64_t *)(v6 + 48);
      uint64_t v5 = 1LL;
      unint64_t v4 = v35;
      while (1)
      {
        id v37 = *v36;
        v36 += 3;
        unint64_t v38 = v4 - v37;
        if (__OFSUB__(v4, v37)) {
          break;
        }
        if (v38 < 1) {
          goto LABEL_56;
        }
        ++v5;
        unint64_t v4 = v38;
        if (v33 == v5) {
          goto LABEL_54;
        }
      }

          unint64_t v16 = ((-15LL << ((4 * v16 + 8) & 0x3C)) - 1) & v16 | (v17 << ((4 * v16 + 8) & 0x3C));
          swift_unknownObjectRetain();
          id v37 = 0LL;
          char v18 = 0LL;
LABEL_55:
          swift_unknownObjectRetain();
          uint64_t v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, (uint64_t)v10);
          uint64_t result = (void *)swift_unknownObjectRelease_n();
          uint64_t v10 = v180;
          goto LABEL_56;
        }

        if (a2 > 0) {
          goto LABEL_385;
        }
        id v37 = 0LL;
        char v18 = 0LL;
        unint64_t v16 = 0LL;
        uint64_t v174 = 0LL;
LABEL_56:
        uint64_t v20 = __OFSUB__(v8, v37);
        unint64_t v21 = v8 - v37;
        uint64_t v9 = a3;
        if (v20) {
          goto LABEL_375;
        }
      }

      else
      {
        unint64_t v21 = 0LL;
        uint64_t v174 = 0LL;
        char v18 = 0LL;
        unint64_t v16 = 0LL;
        char v12 = v180[11];
        if (v5)
        {
          char v18 = 0LL;
          unint64_t v21 = v180[10];
          uint64_t v174 = v180[9];
          unint64_t v16 = ((-15LL << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v5 + 18) | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C));
        }
      }
    }
  }

              __break(1u);
              return result;
            }
          }
        }
      }

        swift_bridgeObjectRelease();
        goto LABEL_55;
      }

      __dst[0] = *(_OWORD *)&v337._nsError._domain;
      __dst[1] = v338;
      *(void *)&__dst[2] = v339;
      __tp.tv_sec = 0LL;
      __tp.tv_nsec = 0LL;
      clock_gettime(_CLOCK_REALTIME, &__tp);
      *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
      unint64_t v45 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
      code = (unint64_t)v45._object;
      *(void *)&__dst[0] = 0LL;
      *((void *)&__dst[0] + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(88LL);
      v46._uint64_t countAndFlagsBits = 0x7020746F6E6E6143LL;
      v46._unint64_t object = (void *)0xED00002065737261LL;
      String.append(_:)(v46);
      v47._uint64_t countAndFlagsBits = a1;
      v47._unint64_t object = a2;
      String.append(_:)(v47);
      v48._unint64_t object = (void *)0x80000001839CAB20LL;
      v48._uint64_t countAndFlagsBits = 0xD000000000000046LL;
      String.append(_:)(v48);
      String.append(_:)(v45);
      v49._uint64_t countAndFlagsBits = 46LL;
      v49._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v49);
      uint64_t v50 = __dst[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v51 = swift_allocObject();
      uint64_t v52 = specialized static Array._adoptStorage(_:count:)(v51, 1LL);
      unint64_t v54 = v53;
      *unint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      v54[1] = v55;
      _OWORD v54[5] = (id)MEMORY[0x189617FA8];
      *((_OWORD *)v54 + 1) = v50;
      uint64_t v56 = destructiveProjectEnumData for PredicateCodableError(v52, v55);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      unsigned int v57 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(v56 + 32, (uint64_t)__dst);
      uint64_t v58 = __dst[0];
      swift_retain();
      Swift::String v59 = specialized __RawDictionaryStorage.find<A>(_:)(v58, *((uint64_t *)&v58 + 1));
      if ((v60 & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        v57[(v59 >> 6) + 8] |= 1LL << v59;
        *(_OWORD *)(v57[6] + 16 * v59) = v58;
        outlined init with take of Any(&__dst[1], (_OWORD *)(v57[7] + 32 * v59));
        uint64_t v61 = v57[2];
        uint64_t v40 = __OFADD__(v61, 1LL);
        uint64_t v62 = v61 + 1;
        if (!v40)
        {
          v57[2] = v62;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          Swift::String v63 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v64 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          unint64_t v7 = objc_msgSend(v63, sel_initWithDomain_code_userInfo_, v64, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          a3 = (char *)objc_msgSend(v7, sel_domain);
          unint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
          uint64_t v28 = v66;

          char v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          a2 = v68;
          if (v65 == v67 && v28 == v68) {
            goto LABEL_176;
          }
          a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((a1 & 1) != 0) {
            goto LABEL_216;
          }
          __break(1u);
          goto LABEL_54;
        }
      }

      __break(1u);
      goto LABEL_264;
    }

    id v37 = (unsigned __int128)(v34 * (__int128)10LL) >> 64;
    unint64_t v38 = 10 * v34;
    if (v37 != v38 >> 63) {
      break;
    }
    id v39 = *v28 - 48;
    uint64_t v40 = __OFADD__(v38, v39);
    uint64_t v34 = v38 + v39;
    if (v40) {
      goto LABEL_222;
    }
    reserved = v36 + 1;
    ++v33;
    ++v36;
    if (v32 == v33)
    {
      uint64_t v28 = &a3[v33];
      v337._nsError._reserved = &a3[v33];
      goto LABEL_32;
    }
  }

  v337._nsError._reserved = reserved;
  __break(1u);
LABEL_222:
  v337._nsError._reserved = reserved;
  __break(1u);
LABEL_223:
  v309 = 0;
LABEL_224:
  v320 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( 2LL,  0,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
  if (v7) {
    goto LABEL_217;
  }
  v321 = v320;
  else {
    v322 = 0;
  }
  v323 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( 2LL,  0,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
  v324 = (unsigned __int8 *)v337._nsError._reserved;
  else {
    v325 = 0;
  }
  if ((unint64_t)v324 >= v337._nsError._code || *v324 - 48 > 9)
  {
LABEL_252:
    v331 = 3600 * v321;
    if ((unsigned __int128)(v321 * (__int128)3600LL) >> 64 == (3600 * v321) >> 63)
    {
      v332 = 60 * v323;
      if ((unsigned __int128)(v323 * (__int128)60LL) >> 64 == (60 * v323) >> 63)
      {
        v323 = v331 + v332;
        if (!__OFADD__(v331, v332)) {
          goto LABEL_255;
        }
        goto LABEL_280;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }

  v326 = v323;
  v327 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( 2LL,  0,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
  v328 = 3600 * v321;
  if ((unsigned __int128)(v321 * (__int128)3600LL) >> 64 != (3600 * v321) >> 63)
  {
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }

  v329 = 60 * v326;
  if ((unsigned __int128)(v326 * (__int128)60LL) >> 64 != (60 * v326) >> 63)
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }

  uint64_t v40 = __OFADD__(v328, v329);
  v330 = v328 + v329;
  if (v40)
  {
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }

  uint64_t v40 = __OFADD__(v330, v327);
  v323 = v330 + v327;
  if (v40)
  {
    __break(1u);
    goto LABEL_252;
  }

    uint64_t v55 = v12 + v11 - 1;
    uint64_t v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v55);
    if ((v56 - 58) > 0xF5u)
    {
      closure #1 in Double.init(prevalidatedBuffer:)((const char *)v12, v11, (uint64_t)&v226);
      if ((v227 & 1) == 0)
      {
        if ((~*(void *)&v226 & 0x7FF0000000000000LL) == 0) {
          goto LABEL_179;
        }
        unint64_t v7 = v226;
        if (v226 != 0.0) {
          return v7;
        }
        __int128 v85 = v11;
        __int128 v86 = v12;
        if (v11 >= 4)
        {
          __int128 v85 = v11;
          __int128 v86 = v12;
          do
          {
            uint64_t v87 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86);
            if ((v87 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v88 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 1);
            if ((v88 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v89 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 2);
            if ((v89 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 3);
            if ((v90 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v86 = specialized BufferView.dropFirst(_:)(4LL, v86, v85);
            __int128 v85 = v91;
          }

          while (v91 >= 4);
        }

        goto LABEL_215;
      }

      Swift::String v73 = specialized BufferView.suffix(from:)(v31, v12, v11);
      unint64_t v11 = v73;
      unint64_t v75 = v74;
      Swift::String v76 = v73 + v74;
      if (v74 <= 0)
      {
        __int128 v84 = v73;
      }

      else
      {
        uint64_t v77 = _asciiNumbers.getter();
        __int128 v78 = v77;
        __int128 v79 = 0LL;
        __int128 v80 = HIBYTE(v77);
        __int128 v81 = v75;
        while (1)
        {
          if (v79 < 0) {
            goto LABEL_289;
          }
          __int128 v82 = v81-- < 1;
          if (v82) {
            goto LABEL_289;
          }
          __int128 v83 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v11 + v79);
          ++v79;
          __int128 v84 = v11 + v79;
          if (v11 + v79 >= v76) {
            goto LABEL_118;
          }
        }

        __int128 v84 = v11 + v79;
      }

    uint64_t v55 = v12 + v11 - 1;
    uint64_t v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v55);
    if ((v56 - 58) >= 0xF6u)
    {
      closure #1 in Double.init(prevalidatedBuffer:)((const char *)v12, v11, (uint64_t)&v226);
      if ((v227 & 1) == 0)
      {
        if ((~*(void *)&v226 & 0x7FF0000000000000LL) == 0) {
          goto LABEL_179;
        }
        unint64_t v7 = v226;
        if (v226 != 0.0) {
          return v7;
        }
        __int128 v85 = v11;
        __int128 v86 = v12;
        if (v11 >= 4)
        {
          __int128 v85 = v11;
          __int128 v86 = v12;
          do
          {
            uint64_t v87 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86);
            if ((v87 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v88 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 1);
            if ((v88 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v89 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 2);
            if ((v89 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 3);
            if ((v90 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v86 = specialized BufferView.dropFirst(_:)(4LL, v86, v85);
            __int128 v85 = v91;
          }

          while (v91 >= 4);
        }

        goto LABEL_215;
      }

      Swift::String v73 = specialized BufferView.suffix(from:)(v31, v12, v11);
      unint64_t v11 = v73;
      unint64_t v75 = v74;
      Swift::String v76 = v73 + v74;
      if (v74 <= 0)
      {
        __int128 v84 = v73;
      }

      else
      {
        uint64_t v77 = _asciiNumbers.getter();
        __int128 v78 = v77;
        __int128 v79 = 0LL;
        __int128 v80 = HIBYTE(v77);
        __int128 v81 = v75;
        while (1)
        {
          if (v79 < 0) {
            goto LABEL_290;
          }
          __int128 v82 = v81-- < 1;
          if (v82) {
            goto LABEL_290;
          }
          __int128 v83 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v11 + v79);
          ++v79;
          __int128 v84 = v11 + v79;
          if (v11 + v79 >= v76) {
            goto LABEL_118;
          }
        }

        __int128 v84 = v11 + v79;
      }

    uint64_t v55 = v12 + v11 - 1;
    uint64_t v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v55);
    if ((v56 - 58) > 0xF5u)
    {
      specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
      if ((v74 & 1) == 0)
      {
        if ((~*(void *)&v73 & 0x7FF0000000000000LL) == 0) {
          goto LABEL_179;
        }
        unint64_t v7 = v73;
        if (v73 != 0.0) {
          return v7;
        }
        unint64_t v75 = v11;
        Swift::String v76 = v12;
        if (v11 >= 4)
        {
          unint64_t v75 = v11;
          Swift::String v76 = v12;
          do
          {
            uint64_t v77 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76);
            if ((v77 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v78 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76 + 1);
            if ((v78 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v79 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76 + 2);
            if ((v79 | 0x20) == 0x65) {
              return v7;
            }
            __int128 v80 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76 + 3);
            if ((v80 | 0x20) == 0x65) {
              return v7;
            }
            Swift::String v76 = specialized BufferView.dropFirst(_:)(4LL, v76, v75);
            unint64_t v75 = v81;
          }

          while (v81 >= 4);
        }

        goto LABEL_215;
      }

      __int128 v82 = specialized BufferView.suffix(from:)(v31, v12, v11);
      unint64_t v11 = v82;
      __int128 v84 = v83;
      __int128 v85 = v82 + v83;
      if (v83 <= 0)
      {
        __int128 v93 = v82;
      }

      else
      {
        __int128 v86 = _asciiNumbers.getter();
        uint64_t v87 = v86;
        __int128 v88 = 0LL;
        __int128 v89 = HIBYTE(v86);
        __int128 v90 = v84;
        while (1)
        {
          if (v88 < 0) {
            goto LABEL_289;
          }
          __int128 v91 = v90-- < 1;
          if (v91) {
            goto LABEL_289;
          }
          __int128 v92 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v11 + v88);
          ++v88;
          __int128 v93 = v11 + v88;
          if (v11 + v88 >= v85) {
            goto LABEL_118;
          }
        }

        __int128 v93 = v11 + v88;
      }

          __int128 v71 = (4 * *(_BYTE *)(v70 + 18) + 8) & 0x3C;
          uint64_t v68 = ((-15LL << v71) - 1) & v68 | (v72 << v71);
          uint64_t v61 = *(void *)(v70 + 24 + 24 * v72);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v70 = v61;
          if (!*(_BYTE *)(v61 + 18)) {
            goto LABEL_87;
          }
        }
      }

      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v209);
      uint64_t result = swift_unknownObjectRetain();
      CFURLRef v69 = v26;
      uint64_t v61 = v60;
LABEL_87:
      __int128 v83 = *(unsigned __int16 *)(v61 + 16);
      if (*(_WORD *)(v61 + 16))
      {
        __int128 v84 = v69 - 1;
        if (__OFSUB__(v69, 1LL)) {
          goto LABEL_175;
        }
        if (__OFADD__(v84, 1LL)) {
          goto LABEL_176;
        }
        if (v69 <= 0)
        {
          __int128 v83 = 0LL;
          goto LABEL_119;
        }

        if ((_DWORD)v83 != 1)
        {
          uint64_t v74 = __OFSUB__(v84, 1LL);
          __int128 v84 = v69 - 2;
          if (v74) {
            goto LABEL_179;
          }
          if (__OFADD__(v84, 1LL)) {
            goto LABEL_180;
          }
          if (v69 - 1 < 1)
          {
            __int128 v83 = 1LL;
            goto LABEL_119;
          }

          if ((_DWORD)v83 != 2)
          {
            uint64_t v74 = __OFSUB__(v84, 1LL);
            __int128 v84 = v69 - 3;
            if (v74) {
              goto LABEL_181;
            }
            if (__OFADD__(v84, 1LL)) {
              goto LABEL_182;
            }
            if (v69 - 2 >= 1)
            {
              if ((_DWORD)v83 != 3)
              {
                __int128 v85 = 0LL;
                __int128 v86 = 3LL;
                if (v83 > 3) {
                  __int128 v86 = *(unsigned __int16 *)(v61 + 16);
                }
                uint64_t v87 = v86 - 3;
                if (v84 >= v83 - 4) {
                  __int128 v88 = v83 - 4;
                }
                else {
                  __int128 v88 = v69 - 3;
                }
                if (v88 >= v69 + 0x7FFFFFFFFFFFFFFDLL) {
                  __int128 v88 = v69 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v87 > v88)
                {
                  if (v69 + 0x7FFFFFFFFFFFFFFDLL == v85) {
                    goto LABEL_178;
                  }
                  if (v84 == v85)
                  {
                    __int128 v83 = v69;
                    goto LABEL_119;
                  }

                  if (v83 - 3 == ++v85)
                  {
                    v84 -= v85;
                    goto LABEL_113;
                  }
                }

  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
}

  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

            if (v49 >= 0x101) {
              free(v35);
            }
          }
        }

        archive_entry_free();
      }
    }

    else if (a5)
    {
      char v30 = *__error();
      uint64_t v15 = 0;
      *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo( v30,  [MEMORY[0x189604030] fileURLWithFileSystemRepresentation:fts_accpath isDirectory:0 relativeToURL:0],  1,  0,  0);
    }

    else
    {
      uint64_t v15 = 0;
    }

    close(v27);
    if (!v15)
    {
LABEL_58:
      Swift::Int v44 = v14 == 0LL;
      a4 = v51;
      disk_new = v52;
      if (v11) {
        goto LABEL_75;
      }
      goto LABEL_78;
    }
  }

  a4 = v51;
  disk_new = v52;
  if (a5)
  {
    uint64_t v46 = *__error();
    *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo( v46,  [MEMORY[0x189604030] fileURLWithFileSystemRepresentation:v23->fts_path isDirectory:0 relativeToURL:0],  1,  0,  0);
  }

  uint64_t v15 = 0;
  Swift::Int v44 = v14 == 0LL;
  if (!v11) {
    goto LABEL_78;
  }
LABEL_75:
  if (a5)
  {
    int v47 = archive_errno();
    uint64_t v15 = 0;
    *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(v47, (uint64_t)a4, 0, 0LL, 0LL);
    goto LABEL_78;
  }

  uint64_t v15 = 0;
  if (disk_new) {
LABEL_79:
  }
    archive_read_free();
LABEL_80:
  if (!v44) {
    fts_close(v14);
  }
  return v15;
}

uint64_t URLComponents.percentEncodedPath.getter()
{
  if (v0[14])
  {
    uint64_t v1 = v0[13];
  }

  else
  {
    uint64_t v2 = *v0;
    if (*((_BYTE *)v0 + 14) != 1 || v2 == 0)
    {
      uint64_t v1 = 0LL;
    }

    else
    {
      if ((*(_BYTE *)(v2 + 168) & 1) != 0) {
        uint64_t v4 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
      }
      else {
        uint64_t v4 = String.subscript.getter();
      }
      uint64_t v1 = MEMORY[0x186E1B610](v4);
      swift_bridgeObjectRelease();
    }
  }

  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedPath.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 14) = 0;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      char v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v10,  (uint64_t)v13,  0x10u,  1);
    }

    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 0x10u, 1);
    }

    char v15 = v14;
    swift_bridgeObjectRelease_n();
    if ((v15 & 1) != 0) {
      goto LABEL_7;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v16;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x10u, 1))
    {
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v3 + 104) = a1;
      *(void *)(v3 + 112) = a2;
      return result;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedPath.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[14])
  {
    uint64_t v4 = v1[13];
    unint64_t v5 = v1[14];
  }

  else
  {
    uint64_t v6 = *v1;
    if (*((_BYTE *)v1 + 14) != 1 || v6 == 0)
    {
      uint64_t v4 = 0LL;
      unint64_t v5 = 0xE000000000000000LL;
    }

    else
    {
      if ((*(_BYTE *)(v6 + 168) & 1) != 0) {
        uint64_t v8 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
      }
      else {
        uint64_t v8 = String.subscript.getter();
      }
      uint64_t v4 = MEMORY[0x186E1B610](v8);
      unint64_t v5 = v9;
      swift_bridgeObjectRelease();
    }
  }

  *uint64_t v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedPath.modify;
}

void URLComponents.percentEncodedPath.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 14) = 0;
  if ((a2 & 1) == 0)
  {
    if ((v5 & 0x1000000000000000LL) != 0)
    {
      v2[2] = v6;
      v2[3] = v5;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
      id v22 = v20;
      if (v21)
      {
        v2[2] = v6;
        v2[3] = v5;
        StringProtocol._ephemeralString.getter();
        uint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v24 = objc_msgSend(v23, sel_length);
        swift_unknownObjectRelease();
        char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v21,  (uint64_t)v24,  0x10u,  1);
      }

      else
      {
        char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x10u, 1);
      }

      char v27 = v25;
      swift_bridgeObjectRelease_n();
      if ((v27 & 1) == 0) {
        goto LABEL_28;
      }
    }

    else
    {
      if ((v5 & 0x2000000000000000LL) != 0)
      {
        uint64_t v10 = HIBYTE(v5) & 0xF;
        v2[2] = v6;
        v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v9 = (char *)v3;
      }

      else if ((v6 & 0x1000000000000000LL) != 0)
      {
        unint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        unint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
      }

      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x10u, 1)) {
        goto LABEL_28;
      }
    }

    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 104) = v6;
    *(void *)(v13 + 112) = v5;
    goto LABEL_16;
  }

  if ((v5 & 0x1000000000000000LL) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    id v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v15,  (uint64_t)v18,  0x10u,  1);
    }

    else
    {
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x10u, 1);
    }

    char v26 = v19;
    swift_bridgeObjectRelease_n();
    if ((v26 & 1) != 0) {
      goto LABEL_12;
    }
  }

  else
  {
    if ((v5 & 0x2000000000000000LL) != 0)
    {
      uint64_t v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v3;
    }

    else if ((v6 & 0x1000000000000000LL) != 0)
    {
      uint64_t v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x10u, 1);
    swift_bridgeObjectRetain();
    if (v11)
    {
LABEL_12:
      unint64_t v12 = v2[4];
      swift_bridgeObjectRelease();
      *(void *)(v12 + 104) = v6;
      *(void *)(v12 + 112) = v5;
      swift_bridgeObjectRelease();
LABEL_16:
      free(v2);
      return;
    }
  }