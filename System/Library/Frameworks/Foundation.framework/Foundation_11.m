uint64_t sub_1832F5A44()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_1832F5A58()
{
  return 0x5255656C646E7562LL;
}

unint64_t sub_1832F5A74()
{
  return 0xD000000000000015LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LocalizedStringResource.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized LocalizedStringResource.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LocalizedStringResource.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LocalizedStringResource.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void LocalizedStringResource.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LocalizedStringResource.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  v6 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v133 = v1[2];
  *(void *)&__int128 v134 = v7;
  uint64_t v9 = v1[4];
  uint64_t v131 = v1[3];
  uint64_t v132 = v9;
  v10 = (void *)v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = v1[7];
  os_log_t object = (os_log_t)v1[8];
  id v130 = v10;
  uint64_t v13 = v1[10];
  *(void *)&__int128 v124 = v1[9];
  *((void *)&v124 + 1) = v13;
  uint64_t v127 = v1[11];
  uint64_t v128 = v11;
  v125 = (_DWORD *)v1[12];
  uint64_t v126 = v12;
  uint64_t v123 = v1[13];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();
  uint64_t v14 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v139[0]) = 0;
  uint64_t v15 = v141;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v15)
  {
    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18 = v6;
LABEL_4:
    v16(v18, v14);
    return;
  }

  os_log_t v17 = object;
  uint64_t v121 = v8;
  uint64_t v122 = v4;
  v139[0] = v133;
  v139[1] = v131;
  v139[2] = v132;
  LOBYTE(v138[0]) = 1;
  lazy protocol witness table accessor for type String.LocalizationValue and conformance String.LocalizationValue();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v140 = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v141 = v14;
  uint64_t v19 = v126;
  uint64_t ObjectType = swift_getObjectType();
  v21 = (uint64_t (*)(uint64_t, os_log_t))*((void *)v17 + 8);
  swift_unknownObjectRetain();
  uint64_t v22 = v21(ObjectType, v17);
  Locale.Components.init(identifier:)(v22, v23, v138);
  *(void *)&__int128 v137 = v19;
  *((void *)&v137 + 1) = v17;
  Locale.Components.applyPreferencesOverride(_:)(&v137);
  swift_unknownObjectRelease();
  memcpy(v139, v138, sizeof(v139));
  memcpy(v138, v139, sizeof(v138));
  Locale.Components.icuIdentifier.getter();
  uint64_t v26 = v24;
  uint64_t v27 = v25;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v28 = static LocaleCache.cache + 16;
  v29 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v29);
  closure #1 in LocaleCache.fixed(_:)(v28, v26, v27, v138);
  os_unfair_lock_unlock(v29);
  swift_bridgeObjectRelease();
  swift_release_n();
  __int128 v134 = v138[0];
  LOBYTE(v137) = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v30 = v127;
  __int128 v31 = v124;
  v138[0] = v124;
  *(void *)&v138[1] = v127;
  LOBYTE(v137) = 4;
  lazy protocol witness table accessor for type URL and conformance URL();
  id v32 = (id)v31;
  swift_retain();
  swift_retain();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_release();
  swift_release();

  if (v123)
  {
    LOBYTE(v138[0]) = 5;
    uint64_t v33 = v141;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v6, v33);
    outlined release of Locale.Components(v139);
    swift_unknownObjectRelease();
    return;
  }

  uint64_t v131 = *MEMORY[0x1895F8000];
  id v34 = v32;
  swift_retain();
  swift_retain();
  int v35 = _foundation_swift_url_feature_enabled();
  v120 = v6;
  if (v35)
  {
    *(void *)&v138[0] = v34;
    *((void *)&v138[0] + 1) = *((void *)&v31 + 1);
    *(void *)&v138[1] = v30;
    id v130 = v34;
    id v36 = v34;
    swift_retain();
    swift_retain();
    Swift::String v37 = URL.path(percentEncoded:)(1);
    v138[0] = v37;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v37._countAndFlagsBits, (unint64_t)v37._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    os_log_t object = (os_log_t)v37._object;
    *(void *)&__int128 v137 = Set.init(minimumCapacity:)();
    uint64_t v38 = specialized Set._Variant.insert(_:)(&v136, 0x2FuLL);
    uint64_t v39 = v137;
    __int128 v40 = v138[0];
    uint64_t v41 = HIBYTE(*((void *)&v138[0] + 1)) & 0xFLL;
    if ((*((void *)&v138[0] + 1) & 0x2000000000000000LL) == 0) {
      uint64_t v41 = *(void *)&v138[0] & 0xFFFFFFFFFFFFLL;
    }
    if (v41)
    {
      __int128 v137 = v138[0];
      MEMORY[0x1895F8858](v38);
      *(&v119 - 2) = (uint64_t)&v137;
      *(&v119 - 1) = v39;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v119 - 4),  v40,  *((unint64_t *)&v40 + 1));
      if (v42 == 1)
      {
        __int128 v43 = v137;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v43,  *((unint64_t *)&v43 + 1),  v39);
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    id v34 = v130;
  }

  else
  {
    id v44 = objc_msgSend(v34, sel__parameterString);
    if (v44)
    {
      v45 = v44;
      id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v48 = v47;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v49 = objc_msgSend(v34, sel_path)) != 0)
      {
        v50 = v49;
        id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        id v130 = v34;
        id v52 = v51;
        uint64_t v54 = v53;

        *(void *)&v138[0] = v52;
        *((void *)&v138[0] + 1) = v54;
        swift_bridgeObjectRetain();
        v55._countAndFlagsBits = 59LL;
        v55._os_log_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v56._countAndFlagsBits = (uint64_t)v46;
        v56._os_log_t object = v48;
        String.append(_:)(v56);
        id v34 = v130;
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      else
      {
        *(void *)&v138[0] = 59LL;
        *((void *)&v138[0] + 1) = 0xE100000000000000LL;
        v57._countAndFlagsBits = (uint64_t)v46;
        v57._os_log_t object = v48;
        String.append(_:)(v57);
        swift_release();
        swift_release();
      }

      swift_bridgeObjectRelease();
    }

    else
    {
      id v58 = objc_msgSend(v34, sel_path);
      if (v58)
      {
        v59 = v58;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        swift_release();
        swift_release();
      }

      else
      {
        swift_release();
        swift_release();
      }
    }
  }

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v60 = sandbox_extension_issue_file();
  swift_release();
  if (!v60)
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)localizedStringLogger);
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    id v63 = v34;
    uint64_t v64 = *((void *)&v124 + 1);
    swift_retain_n();
    uint64_t v65 = v127;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v66 = v63;
    v67 = (void *)Logger.logObject.getter();
    int v68 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v67, (os_log_type_t)v68))
    {
      v88 = v120;
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();

      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      swift_unknownObjectRelease();
      outlined release of Locale.Components(v139);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v88, v141);
      return;
    }

    LODWORD(v124) = v68;
    os_log_t object = (os_log_t)v67;
    v69 = (_DWORD *)swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    uint64_t v136 = v70;
    _DWORD *v69 = 136315394;
    id v71 = v66;
    swift_retain();
    swift_retain();
    int v72 = _foundation_swift_url_feature_enabled();
    v125 = v69;
    uint64_t v123 = v70;
    id v130 = v71;
    if (!v72)
    {
      id v89 = objc_msgSend(v71, sel__parameterString);
      if (v89)
      {
        v90 = v89;
        id v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
        v93 = v92;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v94 = objc_msgSend(v71, sel_path)) != 0)
        {
          v95 = v94;
          id v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
          uint64_t v98 = v97;

          *(void *)&v138[0] = v96;
          *((void *)&v138[0] + 1) = v98;
          swift_bridgeObjectRetain();
          v99._countAndFlagsBits = 59LL;
          v99._os_log_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v99);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v100._countAndFlagsBits = (uint64_t)v91;
          v100._os_log_t object = v93;
          String.append(_:)(v100);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v131 = *((void *)&v138[0] + 1);
          uint64_t v101 = *(void *)&v138[0];
        }

        else
        {
          *(void *)&v138[0] = 59LL;
          *((void *)&v138[0] + 1) = 0xE100000000000000LL;
          v107._countAndFlagsBits = (uint64_t)v91;
          v107._os_log_t object = v93;
          String.append(_:)(v107);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          uint64_t v131 = *((void *)&v138[0] + 1);
          uint64_t v101 = *(void *)&v138[0];
        }
      }

      else
      {
        id v108 = objc_msgSend(v71, sel_path);
        v109 = v71;
        if (v108)
        {
          v110 = v108;
          id v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
          uint64_t v131 = v112;
          swift_release();
          swift_release();

          uint64_t v101 = (uint64_t)v111;
        }

        else
        {
          swift_release();
          swift_release();

          uint64_t v101 = 0LL;
          uint64_t v131 = 0xE000000000000000LL;
        }
      }

      uint64_t v113 = v141;
      goto LABEL_65;
    }

    uint64_t v119 = 0LL;
    *(void *)&v138[0] = v71;
    *((void *)&v138[0] + 1) = v64;
    *(void *)&v138[1] = v65;
    id v73 = v71;
    swift_retain();
    swift_retain();
    Swift::String v74 = URL.path(percentEncoded:)(1);
    v138[0] = v74;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v74._countAndFlagsBits, (unint64_t)v74._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    *(void *)&__int128 v137 = Set.init(minimumCapacity:)();
    uint64_t v75 = specialized Set._Variant.insert(_:)(&v135, 0x2FuLL);
    uint64_t v76 = v137;
    __int128 v77 = v138[0];
    uint64_t v78 = HIBYTE(*((void *)&v138[0] + 1)) & 0xFLL;
    if ((*((void *)&v138[0] + 1) & 0x2000000000000000LL) == 0) {
      uint64_t v78 = *(void *)&v138[0] & 0xFFFFFFFFFFFFLL;
    }
    if (v78)
    {
      __int128 v137 = v138[0];
      MEMORY[0x1895F8858](v75);
      *(&v119 - 2) = (uint64_t)&v137;
      *(&v119 - 1) = v76;
      swift_bridgeObjectRetain();
      uint64_t v79 = v119;
      v80 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)(&v119 - 4),  v77,  *((unint64_t *)&v77 + 1));
      uint64_t v119 = v79;
      uint64_t v131 = v81;
      if (v81 == 1)
      {
        __int128 v82 = v137;
        swift_bridgeObjectRetain();
        v83 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v82,  *((unint64_t *)&v82 + 1),  v76);
        uint64_t v131 = v84;
        swift_bridgeObjectRelease();
      }

      else
      {
        v83 = v80;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v131)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v83 = 0LL;
        uint64_t v131 = 0xE000000000000000LL;
        goto LABEL_62;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      v83 = 0LL;
      uint64_t v131 = 0xE000000000000000LL;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_62:
    swift_release();
    swift_release();

    uint64_t v113 = v141;
    uint64_t v101 = (uint64_t)v83;
LABEL_65:
    v114 = v125;
    *(void *)&v138[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v131, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    id v115 = v130;

    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v116 = swift_bridgeObjectRelease();
    *((_WORD *)v114 + 6) = 1026;
    LODWORD(v138[0]) = MEMORY[0x186E1B0E8](v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v117 = object;
    _os_log_impl( &dword_182EB1000,  object,  (os_log_type_t)v124,  "Unable to issue sandbox extension for path '%s' (errno: %{public}d)",  (uint8_t *)v114,  0x12u);
    uint64_t v118 = v123;
    swift_arrayDestroy();
    MEMORY[0x186E20E60](v118, -1LL, -1LL);
    MEMORY[0x186E20E60](v114, -1LL, -1LL);

    swift_unknownObjectRelease();
    outlined release of Locale.Components(v139);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v120, v113);
    return;
  }

  MEMORY[0x186E1B634](v60);
  if (v61) {
    goto LABEL_46;
  }
  id v85 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCString_encoding_, v60, 4);
  if (v85)
  {
    v86 = v85;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v85);

LABEL_46:
    LOBYTE(v138[0]) = 5;
    uint64_t v14 = v141;
    v87 = v120;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    MEMORY[0x186E20E60](v60, -1LL, -1LL);
    swift_unknownObjectRelease();
    outlined release of Locale.Components(v139);
    v16 = *(void (**)(char *, uint64_t))(v122 + 8);
    v18 = v87;
    goto LABEL_4;
  }

  uint64_t v102 = type metadata accessor for EncodingError();
  swift_allocError();
  v104 = v103;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
  v104[3] = MEMORY[0x189617FA8];
  void *v104 = 0LL;
  v104[1] = 0xE000000000000000LL;
  uint64_t v105 = v141;
  v106 = v120;
  KeyedDecodingContainer.codingPath.getter();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v102 - 8) + 104LL))( v104,  *MEMORY[0x1896193B8],  v102);
  swift_willThrow();
  MEMORY[0x186E20E60](v60, -1LL, -1LL);
  swift_unknownObjectRelease();
  outlined release of Locale.Components(v139);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v106, v105);
}

uint64_t LocalizedStringResource.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LocalizedStringResource.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v54) = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  char v57 = 1;
  lazy protocol witness table accessor for type String.LocalizationValue and conformance String.LocalizationValue();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v50 = v10;
  uint64_t v53 = v12;
  uint64_t v49 = *((void *)&v54 + 1);
  uint64_t v13 = v54;
  uint64_t v14 = v55;
  LOBYTE(v54) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v52 = v16;
  uint64_t v42 = v15;
  uint64_t v47 = v13;
  uint64_t v48 = v14;
  char v57 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  swift_bridgeObjectRetain();
  uint64_t v46 = 0LL;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __int128 v41 = v54;
  char v57 = 4;
  lazy protocol witness table accessor for type URL and conformance URL();
  uint64_t v18 = v41;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v45 = v18;
  __int128 v19 = v54;
  uint64_t v20 = v55;
  swift_retain_n();
  id v21 = (id)v19;
  swift_retain_n();
  id v22 = v21;
  int v23 = _foundation_swift_url_feature_enabled();
  id v43 = v22;
  uint64_t v44 = *((void *)&v19 + 1);
  uint64_t v51 = v20;
  if (v23)
  {
    *(void *)&__int128 v54 = v22;
    *((void *)&v54 + 1) = *((void *)&v19 + 1);
    uint64_t v55 = v20;
    URL.scheme.getter();
    if (!v24)
    {
      swift_unknownObjectRelease();
      swift_release_n();
      swift_release_n();

      goto LABEL_18;
    }

    Swift::String v25 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v25._countAndFlagsBits == 1701603686 && v25._object == (void *)0xE400000000000000LL)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
LABEL_16:
      LOBYTE(v54) = 5;
      uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v28 = v27;
      v29 = *(void (**)(char *, uint64_t))(v6 + 8);
      uint64_t v46 = v26;
      v29(v8, v5);
      swift_bridgeObjectRetain();
      uint64_t v30 = v53;
      swift_bridgeObjectRetain();
      uint64_t v31 = v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v32 = v51;
      *(void *)a2 = v50;
      *(void *)(a2 + 8) = v30;
      uint64_t v33 = v49;
      *(void *)(a2 + 16) = v31;
      *(void *)(a2 + 24) = v33;
      uint64_t v34 = v42;
      id v35 = v43;
      *(void *)(a2 + 32) = v48;
      *(void *)(a2 + 40) = v34;
      *(void *)(a2 + 48) = v52;
      *(_OWORD *)(a2 + 56) = v41;
      uint64_t v36 = v44;
      *(void *)(a2 + 72) = v35;
      *(void *)(a2 + 80) = v36;
      uint64_t v37 = v46;
      *(void *)(a2 + 88) = v32;
      *(void *)(a2 + 96) = v37;
      *(void *)(a2 + 104) = v28;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    unsigned int v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    if ((v56 & 1) != 0) {
      goto LABEL_16;
    }
  }

  else
  {
    unsigned int v56 = objc_msgSend(v22, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v56 & 1) != 0) {
      goto LABEL_16;
    }
  }

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  id v22 = v43;
LABEL_18:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v40 = v39;
  KeyedDecodingContainer.codingPath.getter();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v38 - 8) + 104LL))( v40,  *MEMORY[0x189619360],  v38);
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v46;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v17) {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();

  swift_release();
  return swift_release();
}

uint64_t specialized LocalizedStringResource._withExtensionForBundle<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v8 = a1;
  outlined init with take of LocalePreferences?( a1 + 96,  (uint64_t)v121,  &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?( (uint64_t)v121,  (uint64_t)v130,  &demangling cache variable for type metadata for String?);
  uint64_t v115 = a2;
  uint64_t v113 = a3;
  unint64_t v112 = a4;
  if (!v130[1])
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    v114 = v4;
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)localizedStringLogger);
    int v23 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_33;
    }
    Swift::String v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v25 = 0;
    uint64_t v26 = "LocalizedStringResource did not contain a sandbox extension token. Proceeding to lookup localized string witho"
          "ut consuming a sandbox extension.";
    goto LABEL_32;
  }

  uint64_t v10 = (void *)v130[0];
  Swift::String v119 = *(Swift::String *)(v8 + 72);
  uint64_t v120 = *(void *)(v8 + 88);
  outlined retain of URL((void **)&v119);
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    v114 = v10;
    Swift::String v122 = v119;
    uint64_t v123 = v120;
    outlined retain of URL((void **)&v119);
    Swift::String v11 = URL.path(percentEncoded:)(1);
    Swift::String v122 = v11;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v117._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v12 = specialized Set._Variant.insert(_:)(&v116, 0x2FuLL);
    uint64_t countAndFlagsBits = v117._countAndFlagsBits;
    Swift::String v14 = v122;
    uint64_t v15 = ((unint64_t)v122._object >> 56) & 0xF;
    if (v15)
    {
      uint64_t v111 = v8;
      Swift::String v117 = v122;
      MEMORY[0x1895F8858](v12);
      uint64_t v102 = &v117;
      uint64_t v103 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      uint64_t v16 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v101,  v14._countAndFlagsBits,  (unint64_t)v14._object);
      if (v17 == 1)
      {
        Swift::String v18 = v117;
        swift_bridgeObjectRetain();
        __int128 v19 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v18._countAndFlagsBits,  (unint64_t)v18._object,  countAndFlagsBits);
        unint64_t v21 = v20;
        swift_bridgeObjectRelease();
      }

      else
      {
        __int128 v19 = v16;
        unint64_t v21 = v17;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v115;
      uint64_t v5 = v4;
      if (!v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v119);
        __int128 v19 = 0LL;
        unint64_t v21 = 0xE000000000000000LL;
        uint64_t v8 = v111;
        goto LABEL_24;
      }

      uint64_t v8 = v111;
    }

    else
    {
      swift_bridgeObjectRelease();
      __int128 v19 = 0LL;
      unint64_t v21 = 0xE000000000000000LL;
      a2 = v115;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v119);
LABEL_24:
    int v27 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v19, v21);
    swift_bridgeObjectRelease();
    a3 = v113;
    a4 = v112;
    goto LABEL_25;
  }

  if (!objc_msgSend( (id) v119._countAndFlagsBits, sel_fileSystemRepresentation))
  {
    outlined release of URL((id *)&v119);
    goto LABEL_26;
  }

  int v27 = foundation_sandbox_check_path();
LABEL_25:
  outlined release of URL((id *)&v119);
  if (!v27)
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    v114 = v5;
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)localizedStringLogger);
    int v23 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_33;
    }
    Swift::String v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v25 = 0;
    uint64_t v26 = "LocalizedStringResource contained a sandbox extension token but sandbox check passed without consuming the tok"
          "en. Proceeding to lookup localized string without consuming a sandbox extension.";
LABEL_32:
    _os_log_impl(&dword_182EB1000, v23, v24, v26, v25, 2u);
    MEMORY[0x186E20E60](v25, -1LL, -1LL);
LABEL_33:

LABEL_34:
    uint64_t v28 = 0LL;
    uint64_t v29 = 1LL;
    goto LABEL_35;
  }

uint64_t specialized LocalizedStringResource._withExtensionForBundle<A>(_:)@<X0>( void (*a1)(void *__return_ptr, void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v78)(void *__return_ptr, void);
  os_log_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  char v83;
  Swift::String v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  Swift::String v88;
  uint64_t v89;
  _BYTE v90[16];
  void v91[3];
  uint64_t v92;
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  outlined init with take of LocalePreferences?( v3 + 96,  (uint64_t)v90,  &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?( (uint64_t)v90,  (uint64_t)v91,  &demangling cache variable for type metadata for String?);
  if (!v91[1])
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)localizedStringLogger);
    os_log_type_t v24 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_46;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    int v27 = "LocalizedStringResource did not contain a sandbox extension token. Proceeding to lookup localized string witho"
          "ut consuming a sandbox extension.";
LABEL_32:
    _os_log_impl(&dword_182EB1000, v24, v25, v27, v26, 2u);
    MEMORY[0x186E20E60](v26, -1LL, -1LL);
LABEL_46:

    char v30 = 1;
    goto LABEL_47;
  }

  uint64_t v10 = (os_log_s *)v91[0];
  v88 = *(Swift::String *)(v3 + 72);
  id v89 = *(void *)(v3 + 88);
  outlined retain of URL((void **)&v88);
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    uint64_t v79 = v10;
    v80 = a2;
    id v81 = v4;
    id v85 = v89;
    outlined retain of URL((void **)&v88);
    Swift::String v11 = URL.path(percentEncoded:)(1);
    id v84 = v11;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v82._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v12 = specialized Set._Variant.insert(_:)(&v92, 0x2FuLL);
    uint64_t countAndFlagsBits = v82._countAndFlagsBits;
    Swift::String v14 = v84;
    uint64_t v15 = ((unint64_t)v84._object >> 56) & 0xF;
    if (v15)
    {
      id v78 = a1;
      uint64_t v77 = a3;
      __int128 v82 = v84;
      MEMORY[0x1895F8858](v12);
      uint64_t v73 = &v82;
      uint64_t v74 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      uint64_t v16 = v81;
      unint64_t v17 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v72,  v14._countAndFlagsBits,  (unint64_t)v14._object);
      if (v18 == 1)
      {
        Swift::String v19 = v82;
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v19._countAndFlagsBits,  (unint64_t)v19._object,  countAndFlagsBits);
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v20 = v17;
        unint64_t v22 = v18;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v77;
      uint64_t v5 = v16;
      if (!v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v88);
        unint64_t v20 = 0LL;
        unint64_t v22 = 0xE000000000000000LL;
        a1 = v78;
        goto LABEL_24;
      }

      a1 = v78;
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v20 = 0LL;
      unint64_t v22 = 0xE000000000000000LL;
      uint64_t v5 = v81;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v88);
LABEL_24:
    int v28 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v20, v22);
    swift_bridgeObjectRelease();
    a2 = v80;
    goto LABEL_25;
  }

  if (!objc_msgSend( (id) v88._countAndFlagsBits, sel_fileSystemRepresentation))
  {
    outlined release of URL((id *)&v88);
    goto LABEL_26;
  }

  int v28 = foundation_sandbox_check_path();
LABEL_25:
  outlined release of URL((id *)&v88);
  if (!v28)
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)localizedStringLogger);
    os_log_type_t v24 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_46;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    int v27 = "LocalizedStringResource contained a sandbox extension token but sandbox check passed without consuming the tok"
          "en. Proceeding to lookup localized string without consuming a sandbox extension.";
    goto LABEL_32;
  }

uint64_t protocol witness for Decodable.init(from:) in conformance LocalizedStringResource@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return LocalizedStringResource.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance LocalizedStringResource(void *a1)
{
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance LocalizedStringResource@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 80);
  uint64_t v10 = *(void *)(v1 + 104);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v11 = v9;
  swift_retain();
  return swift_retain();
}

double protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance LocalizedStringResource@<D0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = LocalizedStringResource.init(stringLiteral:)(*a1, a1[1], a2).n128_u64[0];
  return result;
}

id _NSLocalizedStringResourceSwiftWrapper.init(key:defaultValue:table:locale:bundleURL:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t *a8)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  __int128 v18 = *a7;
  uint64_t v27 = *a8;
  __int128 v28 = *(_OWORD *)(a8 + 1);
  __int128 v29 = v18;
  Swift::String v19 = v8;
  LocalizedStringResource.init(key:defaultValue:table:locale:bundleURL:sandboxExtensionToken:)( a1,  a2,  a3,  a4,  a5,  a6,  &v29,  (uint64_t)&v27,  (uint64_t)&v30,  0LL,  0LL);
  uint64_t v20 = v32;
  uint64_t v21 = v33;
  uint64_t v22 = v36;
  uint64_t v23 = &v19[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  *(void *)uint64_t v23 = v30;
  *(_OWORD *)(v23 + 8) = v31;
  *((void *)v23 + 3) = v20;
  *((void *)v23 + 4) = v21;
  *(_OWORD *)(v23 + 40) = v34;
  *(_OWORD *)(v23 + 56) = v35;
  *((void *)v23 + 9) = v22;
  __int128 v24 = v38;
  *((_OWORD *)v23 + 5) = v37;
  *((_OWORD *)v23 + 6) = v24;

  v26.receiver = v19;
  v26.super_class = ObjectType;
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t _NSLocalizedStringResourceSwiftWrapper.isEqual(_:)(uint64_t a1)
{
  if (!v35)
  {
    outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for Any?);
LABEL_6:
    char v18 = 0;
    return v18 & 1;
  }

  outlined init with take of Any(&v33, v44);
  outlined init with copy of Any((uint64_t)v44, (uint64_t)&v33);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    goto LABEL_6;
  }

  objc_super v26 = (void *)v27[0];
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 8);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 24);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 40);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48);
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 72);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 104);
  *(void *)&__int128 v33 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped);
  *((void *)&v33 + 1) = v3;
  uint64_t v34 = v5;
  uint64_t v35 = v4;
  uint64_t v36 = v7;
  uint64_t v37 = v6;
  __int128 v39 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 56);
  uint64_t v38 = v8;
  Swift::String v40 = v10;
  uint64_t v41 = v9;
  __int128 v42 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 88);
  uint64_t v43 = v11;
  uint64_t v12 = v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped;
  uint64_t v13 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 24);
  uint64_t v20 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16);
  uint64_t v15 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32);
  uint64_t v14 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 40);
  uint64_t v21 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48);
  uint64_t v16 = *(void **)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 72);
  uint64_t v24 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80);
  uint64_t v25 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 8);
  uint64_t v17 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 104);
  v27[0] = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped);
  v27[1] = v25;
  v27[2] = v20;
  v27[3] = v13;
  v27[4] = v15;
  v27[5] = v14;
  v27[6] = v21;
  __int128 v28 = *(_OWORD *)(v12 + 56);
  __int128 v29 = v16;
  uint64_t v30 = v24;
  __int128 v31 = *(_OWORD *)(v12 + 88);
  uint64_t v32 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v23 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v22 = v16;
  swift_retain();
  swift_retain();
  char v18 = specialized static LocalizedStringResource.== infix(_:_:)((uint64_t)&v33, (uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return v18 & 1;
}

id _NSLocalizedStringResourceSwiftWrapper.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = v1;
  if (objc_msgSend(a1, sel_allowsKeyedCoding)
    && (uint64_t v5 = specialized NSCoder.decodeObject<A>(of:forKey:)( 0xD000000000000020LL,  0x80000001839D02C0LL,  (unint64_t *)&lazy cache variable for type metadata for NSData)) != 0)
  {
    uint64_t v6 = (void *)v5;
    type metadata accessor for PropertyListDecoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = MEMORY[0x18961AFF0];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v8 = swift_allocObject();
    *(_DWORD *)(v8 + 16) = 0;
    *(void *)(inited + 24) = v8;
    id v9 = specialized Data.init(referencing:)(v6);
    unint64_t v11 = v10;
    specialized PropertyListDecoder.decode<A>(_:from:format:)((uint64_t)v9, v10);
    swift_release();

    outlined consume of Data._Representation((uint64_t)v9, v11);
    uint64_t v13 = v26;
    uint64_t v14 = v27;
    uint64_t v15 = v30;
    __int128 v16 = v25;
    __int128 v17 = v29;
    __int128 v18 = v28;
    __int128 v19 = v31;
    __int128 v20 = v32;
    uint64_t v21 = &v4[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
    *(void *)uint64_t v21 = v24;
    *(_OWORD *)(v21 + 8) = v16;
    *((void *)v21 + 3) = v13;
    *((void *)v21 + 4) = v14;
    *(_OWORD *)(v21 + 40) = v18;
    *(_OWORD *)(v21 + 56) = v17;
    *((void *)v21 + 9) = v15;
    *((_OWORD *)v21 + 5) = v19;
    *((_OWORD *)v21 + 6) = v20;

    v23.receiver = v4;
    v23.super_class = ObjectType;
    id v22 = objc_msgSendSuper2(&v23, sel_init);
  }

  else
  {

    swift_deallocPartialClassInstance();
    return 0LL;
  }

  return v22;
}

Swift::Void __swiftcall _NSLocalizedStringResourceSwiftWrapper.encode(with:)(NSCoder with)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (-[objc_class allowsKeyedCoding](with.super.isa, sel_allowsKeyedCoding))
  {
    type metadata accessor for PropertyListEncoder();
    uint64_t inited = (void *)swift_initStackObject();
    uint64_t v3 = MEMORY[0x18961AFF0];
    inited[2] = 200LL;
    inited[3] = v3;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v4 = swift_allocObject();
    *(_DWORD *)(v4 + 16) = 0;
    uint64_t v5 = (os_unfair_lock_s *)(v4 + 16);
    inited[4] = v4;
    __int128 v6 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 64);
    __int128 v7 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 96);
    v12[5] = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80);
    v12[6] = v7;
    __int128 v8 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32);
    v12[3] = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48);
    v12[4] = v6;
    __int128 v9 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16);
    v12[0] = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped);
    v12[1] = v9;
    v12[2] = v8;
    swift_retain();
    outlined retain of LocalizedStringResource((uint64_t)v12);
    os_unfair_lock_lock(v5);
    swift_release();
    swift_retain();
    os_unfair_lock_unlock(v5);
    swift_release();
    specialized PropertyListEncoder._encodeBPlist<A>(_:)(v12);
    uint64_t v11 = v10;
    outlined release of LocalizedStringResource((uint64_t)v12);
    __asm { BR              X10 }
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x1832F9DB4LL);
}

__n128 LocalizedStringResource.init(nsLocalizedStringResource:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(v22, sel_resource);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1);
  type metadata accessor for _NSLocalizedStringResourceSwiftWrapper();
  swift_dynamicCast();
  uint64_t v5 = &v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  uint64_t v6 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 8];
  uint64_t v7 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16];
  uint64_t v18 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 24];
  uint64_t v19 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  uint64_t v8 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32];
  uint64_t v9 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48];
  uint64_t v10 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80];
  __int128 v16 = *(void **)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 72];
  uint64_t v17 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 40];
  uint64_t v11 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 88];
  uint64_t v20 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 96];
  uint64_t v12 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 104];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __n128 v15 = *(__n128 *)(v5 + 56);
  swift_unknownObjectRetain();
  id v13 = v16;
  swift_retain();
  swift_retain();

  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v18;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v9;
  __n128 result = v15;
  *(__n128 *)(a2 + 56) = v15;
  *(void *)(a2 + 72) = v13;
  *(void *)(a2 + 80) = v10;
  *(void *)(a2 + 88) = v11;
  *(void *)(a2 + 96) = v20;
  *(void *)(a2 + 104) = v12;
  return result;
}

uint64_t LocalizedStringResource.nsLocalizedStringResource.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v17 = v1[3];
  uint64_t v18 = (void *)v1[9];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[13];
  uint64_t v19 = v1[10];
  uint64_t v20 = v1[12];
  uint64_t v10 = (objc_class *)type metadata accessor for _NSLocalizedStringResourceSwiftWrapper();
  __int128 v22 = *(_OWORD *)(v1 + 7);
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  uint64_t v12 = &v11[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  *(void *)uint64_t v12 = v2;
  *((void *)v12 + 1) = v3;
  *((void *)v12 + 2) = v4;
  *((void *)v12 + 3) = v17;
  *((void *)v12 + 4) = v6;
  *((void *)v12 + 5) = v5;
  *((void *)v12 + 6) = v7;
  *(_OWORD *)(v12 + 56) = v22;
  *((void *)v12 + 9) = v18;
  *((void *)v12 + 10) = v19;
  *((void *)v12 + 11) = v8;
  *((void *)v12 + 12) = v20;
  *((void *)v12 + 13) = v9;
  v23.receiver = v11;
  v23.super_class = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v13 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v14 = objc_msgSendSuper2(&v23, sel_init);
  id v15 = objc_msgSend(objc_allocWithZone((Class)_NSLocalizedStringResource), sel_initWithResource_, v14);

  uint64_t result = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for _NSLocalizedStringResource);
  a1[3] = result;
  *a1 = v15;
  return result;
}

uint64_t AttributedString.init(localized:)@<X0>(__int128 *a1@<X0>, void *a2@<X8>)
{
  __int128 v3 = a1[5];
  __int128 v25 = a1[4];
  __int128 v26 = v3;
  __int128 v27 = a1[6];
  __int128 v4 = a1[1];
  __int128 v21 = *a1;
  __int128 v22 = v4;
  __int128 v5 = a1[3];
  __int128 v23 = a1[2];
  __int128 v24 = v5;
  v14[0] = 0LL;
  v14[1] = 0LL;
  __int16 v15 = 1;
  uint64_t v16 = 0LL;
  __int16 v17 = 256;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  char v20 = 0;
  outlined retain of LocalizedStringResource((uint64_t)&v21);
  specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v21, (uint64_t)v14, (uint64_t)&v21, &v13);
  uint64_t v6 = v13;
  if (v13)
  {
    uint64_t result = outlined release of LocalizedStringResource((uint64_t)&v21);
  }

  else
  {
    uint64_t v9 = (void *)*((void *)&v22 + 1);
    uint64_t v8 = v22;
    uint64_t v10 = (void *)v23;
    uint64_t v11 = *((void *)&v24 + 1);
    uint64_t v12 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v14,  0LL,  0LL,  0LL,  v11,  v12,  0,  v8,  v9,  v10);
    outlined release of LocalizedStringResource((uint64_t)&v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v6 = v13;
  }

  *a2 = v6;
  return result;
}

uint64_t AttributedString.init<A>(localized:including:)@<X0>( uint64_t *a1@<X0>, _OWORD *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[9];
  uint64_t v18 = *a1;
  __int128 v19 = *(_OWORD *)(a1 + 1);
  uint64_t v20 = v5;
  uint64_t v21 = v6;
  __int128 v8 = *(_OWORD *)(a1 + 7);
  __int128 v22 = *(_OWORD *)(a1 + 5);
  __int128 v23 = v8;
  uint64_t v24 = v7;
  __int128 v9 = *((_OWORD *)a1 + 6);
  __int128 v25 = *((_OWORD *)a1 + 5);
  __int128 v26 = v9;
  __int128 v11 = 0uLL;
  __int16 v12 = 1;
  uint64_t v13 = 0LL;
  __int16 v14 = 256;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  char v17 = 0;
  AttributedString.init<A>(localized:options:including:)((__int128 *)&v18, &v11, (uint64_t)a2, a2, a3, &v27);
  uint64_t result = swift_release();
  *a4 = v27;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:including:)@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  __int128 v10 = a1[5];
  *(_OWORD *)&v32[16] = a1[4];
  __int128 v33 = v10;
  __int128 v34 = a1[6];
  __int128 v11 = a1[1];
  __int128 v29 = *a1;
  __int128 v30 = v11;
  __int128 v12 = a1[3];
  __int128 v31 = a1[2];
  *(_OWORD *)__int128 v32 = v12;
  __int128 v13 = *a2;
  __int128 v14 = a2[1];
  __int128 v15 = a2[2];
  *(_OWORD *)((char *)v37 + 9) = *(__int128 *)((char *)a2 + 41);
  __int128 v36 = v14;
  v37[0] = v15;
  __int128 v35 = v13;
  __int128 v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = &v35;
  __int128 v22 = &v29;
  uint64_t v23 = a3;
  specialized LocalizedStringResource._withExtensionForBundle<A>(_:)( (void (*)(void *__return_ptr, void))partial apply for closure #1 in AttributedString.init<A>(localized:options:including:),  (uint64_t)v18,  (uint64_t *)v25);
  uint64_t v16 = *(void *)&v25[0];
  if (*(void *)&v25[0])
  {
    outlined release of AttributedString.LocalizationOptions((uint64_t)&v35);
    uint64_t result = outlined release of LocalizedStringResource((uint64_t)&v29);
  }

  else
  {
    __int128 v38 = v30;
    uint64_t v39 = v31;
    v26[2] = v30;
    uint64_t v27 = v31;
    v25[0] = v35;
    v25[1] = v36;
    v26[0] = v37[0];
    *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)((char *)v37 + 9);
    __int128 v40 = *(_OWORD *)&v32[8];
    __int128 v24 = *(_OWORD *)&v32[8];
    outlined retain of String.LocalizationValue((uint64_t)&v38);
    outlined retain of Locale((uint64_t)&v40);
    String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v25,  0LL,  0LL,  0LL,  (uint64_t)&v24,  a3,  0,  a4,  a5);
    outlined release of LocalizedStringResource((uint64_t)&v29);
    outlined release of Locale((uint64_t)&v40);
    outlined release of String.LocalizationValue((uint64_t)&v38);
    uint64_t result = outlined release of AttributedString.LocalizationOptions((uint64_t)&v35);
    uint64_t v16 = v28;
  }

  *a6 = v16;
  return result;
}

uint64_t AttributedString.init(localized:options:)@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, void *a3@<X8>)
{
  __int128 v4 = a1[5];
  __int128 v24 = a1[4];
  __int128 v25 = v4;
  __int128 v26 = a1[6];
  __int128 v5 = a1[1];
  __int128 v20 = *a1;
  __int128 v21 = v5;
  __int128 v6 = a1[3];
  __int128 v22 = a1[2];
  __int128 v23 = v6;
  __int128 v7 = *a2;
  __int128 v8 = a2[1];
  __int128 v9 = a2[2];
  *(_OWORD *)&v19[9] = *(__int128 *)((char *)a2 + 41);
  v18[1] = v8;
  *(_OWORD *)__int128 v19 = v9;
  v18[0] = v7;
  outlined retain of AttributedString.LocalizationOptions((uint64_t)v18);
  outlined retain of LocalizedStringResource((uint64_t)&v20);
  specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v20, (uint64_t)v18, (uint64_t)&v20, &v17);
  uint64_t v10 = v17;
  if (v17)
  {
    outlined release of AttributedString.LocalizationOptions((uint64_t)v18);
    uint64_t result = outlined release of LocalizedStringResource((uint64_t)&v20);
  }

  else
  {
    __int128 v13 = (void *)*((void *)&v21 + 1);
    uint64_t v12 = v21;
    __int128 v14 = (void *)v22;
    uint64_t v15 = *((void *)&v23 + 1);
    uint64_t v16 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v18,  0LL,  0LL,  0LL,  v15,  v16,  0,  v12,  v13,  v14);
    outlined release of LocalizedStringResource((uint64_t)&v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t result = outlined release of AttributedString.LocalizationOptions((uint64_t)v18);
    uint64_t v10 = v17;
  }

  *a3 = v10;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:including:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[9];
  char v9 = *(_BYTE *)(a2 + 16);
  char v10 = *(_BYTE *)(a2 + 17);
  uint64_t v11 = *(void *)(a2 + 24);
  char v12 = *(_BYTE *)(a2 + 32);
  char v13 = *(_BYTE *)(a2 + 33);
  char v14 = *(_BYTE *)(a2 + 56);
  uint64_t v25 = *a1;
  __int128 v26 = *(_OWORD *)(a1 + 1);
  uint64_t v27 = v6;
  uint64_t v28 = v7;
  __int128 v29 = *(_OWORD *)(a1 + 5);
  __int128 v30 = *(_OWORD *)(a1 + 7);
  uint64_t v31 = v8;
  __int128 v15 = *((_OWORD *)a1 + 6);
  __int128 v32 = *((_OWORD *)a1 + 5);
  __int128 v33 = v15;
  __int128 v17 = *(_OWORD *)a2;
  char v18 = v9;
  char v19 = v10;
  uint64_t v20 = v11;
  char v21 = v12;
  char v22 = v13;
  __int128 v23 = *(_OWORD *)(a2 + 40);
  char v24 = v14;
  AttributedString.init<A>(localized:options:including:)((__int128 *)&v25, &v17, (uint64_t)a3, a3, a4, &v34);
  uint64_t result = swift_release();
  *a5 = v34;
  return result;
}

id closure #1 in AttributedString.init<A>(localized:options:including:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)NSBundle), sel_initWithURL_, *a1);
  if (!result)
  {
    *a7 = 0LL;
    return result;
  }

  char v14 = result;
  uint64_t v46 = a4;
  unint64_t v47 = a7;
  uint64_t v15 = *(void *)(a2 + 48);
  unint64_t v44 = a6;
  uint64_t v45 = a5;
  uint64_t v43 = result;
  if (!v15)
  {
    outlined retain of AttributedString.LocalizationOptions(a2);
    id v17 = objc_msgSend(v14, sel_localizations);
    if (!v17) {
      id v17 = (id)_ContiguousArrayBuffer._asCocoaArray()();
    }
    char v18 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_183720D90;
    v60[0] = *(_OWORD *)(a3 + 56);
    uint64_t v20 = *((void *)&v60[0] + 1);
    uint64_t ObjectType = swift_getObjectType();
    char v22 = *(uint64_t (**)(uint64_t, uint64_t))(*((void *)&v60[0] + 1) + 64LL);
    outlined retain of Locale((uint64_t)v60);
    uint64_t v23 = v22(ObjectType, v20);
    uint64_t v25 = v24;
    outlined release of Locale((uint64_t)v60);
    *(void *)(v19 + 32) = v23;
    *(void *)(v19 + 40) = v25;
    id v26 =  objc_msgSend( v18,  sel_preferredLocalizationsFromArray_forPreferences_,  v17,  _ContiguousArrayBuffer._asCocoaArray()());

    swift_unknownObjectRelease();
    if (v26)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      uint64_t v27 = swift_dynamicCastClass();
      if (v27)
      {
        uint64_t v28 = (void *)v27;

        if (!v28[2]) {
          goto LABEL_14;
        }
LABEL_16:
        uint64_t v16 = v28[4];
        uint64_t v15 = v28[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }

      swift_unknownObjectRelease();
      objc_msgSend(v26, sel_copy);
      unint64_t v29 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v28 = (void *)specialized _arrayForceCast<A, B>(_:)(v29);

      swift_bridgeObjectRelease();
      if (v28[2]) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v28 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_16;
      }
    }

void *specialized _PlistDecoder.init(referencing:options:codingPathNode:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = v3;
  v3[3] = a1;
  v3[2] = MEMORY[0x18961AFE8];
  uint64_t v8 = *(void *)(a1 + 48);
  swift_retain();
  unint64_t v9 = BPlistMap.loadValue(at:)(v8);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_BPlistDecodingFormat>);
    swift_deallocPartialClassInstance();
  }

  else
  {
    unint64_t v10 = v9;
    uint64_t v11 = (void *)v5[2];
    outlined copy of BPlistMap.Value(v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v5[2] = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v11[2] + 1LL,  1,  v11);
      v5[2] = v11;
    }

    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v14 + 1,  1,  v11);
    }
    v11[2] = v14 + 1;
    v11[v14 + 4] = v10;
    v5[2] = v11;
    outlined consume of BPlistMap.Value(v10);
    swift_release();
    v5[4] = a2;
    v5[5] = a3;
  }

  return v5;
}

uint64_t specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(char a1)
{
  if ((a1 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull_native(), !(_DWORD)result))
  {
    __int128 v3 = *(os_unfair_lock_s **)(*(void *)(v1 + 24) + 64LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3 + 10);
    closure #1 in XMLPlistMap.copyInBuffer()((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 10);
    swift_release();
    return swift_release();
  }

  return result;
}

{
  uint64_t v1;
  uint64_t result;
  os_unfair_lock_s *v3;
  if ((a1 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull_native(), !(_DWORD)result))
  {
    __int128 v3 = *(os_unfair_lock_s **)(*(void *)(v1 + 24) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3 + 10);
    closure #1 in XMLPlistMap.copyInBuffer()((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 10);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t specialized AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = String.utf8CString.getter();
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = (void *)objc_opt_self();
  __int128 v29 = 0u;
  *(_OWORD *)uint64_t v30 = 0u;
  BOOL v24 = 1;
  *(int64x2_t *)&v30[16] = vdupq_n_s64(1uLL);
  objc_msgSend(v8, sel_calculateOffsetsForLine_column_inString_size_withExistingOffsets_, v3, v4, v6, v7, &v29);
  uint64_t v9 = 0LL;
  if ((void)v25 == 0x7FFFFFFFFFFFFFFFLL
    || *((void *)&v25 + 1) == 0x7FFFFFFFFFFFFFFFLL
    || v26 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v10 = v7;
    uint64_t v11 = v6;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    if ((void)v27 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v19 = v1[2];
      uint64_t v20 = v1[3];
      __int128 v29 = v25;
      *(void *)uint64_t v30 = v26;
      *(_OWORD *)&v30[8] = v27;
      *(void *)&v30[24] = v28;
      objc_msgSend(v8, (SEL)&selRef_containsIndexes_ + 6, v19, v20, v11, v10, &v29);
      BOOL v24 = (void)v27 == 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v12 = *((void *)&v25 + 1);
      uint64_t v9 = v25;
      uint64_t v13 = v26;
      uint64_t v14 = v27;
      uint64_t v16 = *((void *)&v25 + 1);
      uint64_t v15 = v25;
      uint64_t v17 = v26;
      uint64_t v18 = v27;
    }
  }

  uint64_t v21 = v12;
  uint64_t v22 = v13;
  uint64_t result = swift_release();
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v21;
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = v14;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v16;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v18;
  *(_BYTE *)(a1 + 64) = v24;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = MEMORY[0x1896191F8];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain();
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)( uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v3 > 1,  v4 + 1,  1,  (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( Swift::String *a1, uint64_t a2, NSDecimal **a3)
{
  uint64_t v5 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL);
  MEMORY[0x1895F8858](v5);
  int64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v8 = *a3;
  Swift::String v10 = *a1;
  String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.locale(_:)(&v10._countAndFlagsBits, (uint64_t)v7);
  Swift::String v10 = String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.format(_:)(v8);
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v7,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  return String.init<A>(_:)();
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>( uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, __dst);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 72);
  v8[5] = *(void *)a2;
  __int128 v9 = *(_OWORD *)(a2 + 8);
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  __int128 v12 = *(_OWORD *)(a2 + 40);
  __int128 v13 = *(_OWORD *)(a2 + 56);
  uint64_t v14 = v5;
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v15 = *(_OWORD *)(a2 + 80);
  __int128 v16 = v6;
  v8[3] = type metadata accessor for __PlistEncoderBPlist();
  v8[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist,  (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  v8[0] = a1;
  swift_retain();
  LocalizedStringResource.encode(to:)(v8);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t specialized static InflectionConcept.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)a2;
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    {
      outlined copy of InflectionConcept();
      outlined copy of InflectionConcept();
      char v5 = specialized static Array<A>.== infix(_:_:)(v2, v3);
      goto LABEL_13;
    }

    goto LABEL_9;
  }

  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
LABEL_9:
    outlined copy of InflectionConcept();
    outlined copy of InflectionConcept();
    char v5 = 0;
    goto LABEL_13;
  }

  if (v2 == v3 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined copy of InflectionConcept();
  outlined copy of InflectionConcept();
LABEL_13:
  outlined consume of InflectionConcept();
  outlined consume of InflectionConcept();
  return v5 & 1;
}

uint64_t specialized static LocalizedStringResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 72);
  __int128 v20 = *(_OWORD *)(a1 + 80);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  __int128 v21 = *(_OWORD *)(a2 + 56);
  __int128 v22 = *(_OWORD *)(a1 + 56);
  uint64_t v17 = *(void *)(a2 + 72);
  __int128 v18 = *(_OWORD *)(a2 + 80);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), v13 = 0, (v12 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Array<A>.== infix(_:_:)(v2, v7) & 1) != 0)
    {
      if (v4 == v8 && v3 == v10)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }

      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unsigned __int8 v13 = 0;
        if ((v15 & 1) == 0) {
          return v13 & 1;
        }
      }

      if (v5)
      {
        if (v11)
        {
          if (v6 != v9 || v5 != v11)
          {
            char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            unsigned __int8 v13 = 0;
            if ((v16 & 1) == 0) {
              return v13 & 1;
            }
          }

          goto LABEL_19;
        }
      }

      else if (!v11)
      {
LABEL_19:
        *(_OWORD *)BOOL v24 = v22;
        *(_OWORD *)uint64_t v23 = v21;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)v24, (uint64_t)v23) & 1) != 0)
        {
          *(void *)BOOL v24 = v19;
          *(_OWORD *)&v24[8] = v20;
          v23[0] = v17;
          *(_OWORD *)&v23[1] = v18;
          unsigned __int8 v13 = specialized static URL.== infix(_:_:)((uint64_t)v24, v23);
          return v13 & 1;
        }
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    unsigned __int8 v13 = 0;
  }

  return v13 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x18961AFE8];
  if (v6)
  {
    uint64_t v25 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v25;
    for (uint64_t i = a1 + 32; ; i += 120LL)
    {
      closure #1 in String.LocalizationValue.argumentsWithReplacements(_:locale:)(i, a2, a3, a4, (uint64_t)v23);
      if (v5) {
        break;
      }
      uint64_t v5 = 0LL;
      uint64_t v25 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v25;
      }

      *(void *)(v7 + 16) = v14 + 1;
      uint64_t v15 = v7 + 120 * v14;
      __int128 v16 = v23[0];
      __int128 v17 = v23[1];
      __int128 v18 = v23[3];
      *(_OWORD *)(v15 + 64) = v23[2];
      *(_OWORD *)(v15 + 80) = v18;
      *(_OWORD *)(v15 + 32) = v16;
      *(_OWORD *)(v15 + 48) = v17;
      __int128 v19 = v23[4];
      __int128 v20 = v23[5];
      __int128 v21 = v23[6];
      *(_BYTE *)(v15 + 144) = v24;
      *(_OWORD *)(v15 + 112) = v20;
      *(_OWORD *)(v15 + 128) = v21;
      *(_OWORD *)(v15 + 96) = v19;
      if (!--v6) {
        return v7;
      }
    }

    swift_release();
  }

  return v7;
}

char *specialized withVaList<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6 = (void *)swift_allocObject();
  v6[2] = 8LL;
  v6[3] = 0LL;
  uint64_t v7 = v6 + 3;
  v6[4] = 0LL;
  v6[5] = 0LL;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_25:
    uint64_t v26 = __VaListBuilder.va_list()();
    __int128 v27 = (void *)objc_opt_self();
    uint64_t v28 = String._bridgeToObjectiveCImpl()();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v30 = (void *)(*(uint64_t (**)(uint64_t))(a5 + 488))(ObjectType);
    id v31 = String.LocalizationOptions._nsOptions.getter();
    id v32 = objc_msgSend(v27, sel__stringWithFormat_locale_options_arguments_, v28, v30, v31, v26);
    swift_unknownObjectRelease();

    id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    swift_release();

    return (char *)v33;
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v10 + 40 * v9,  (uint64_t)v35);
    uint64_t v11 = v36;
    uint64_t v12 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    uint64_t result = (char *)MEMORY[0x186E1CF6C](v11, v12);
    uint64_t v14 = *v7;
    uint64_t v15 = *((void *)result + 2);
    BOOL v16 = __OFADD__(*v7, v15);
    uint64_t v17 = *v7 + v15;
    if (v16) {
      break;
    }
    __int128 v18 = result;
    uint64_t v19 = v6[4];
    if (v19 >= v17) {
      goto LABEL_18;
    }
    if (v19 + 0x4000000000000000LL < 0) {
      goto LABEL_28;
    }
    __int128 v20 = (char *)v6[5];
    if (2 * v19 > v17) {
      uint64_t v17 = 2 * v19;
    }
    v6[4] = v17;
    uint64_t result = (char *)swift_slowAlloc();
    v6[5] = result;
    if (v20)
    {
      if (result != v20 || result >= &v20[8 * v14]) {
        memmove(result, v20, 8 * v14);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      uint64_t result = (char *)v6[5];
    }

    if (!result) {
      goto LABEL_30;
    }
    uint64_t v22 = *((void *)v18 + 2);
    if (v22)
    {
      uint64_t v23 = (uint64_t *)(v18 + 32);
      uint64_t v24 = *v7;
      while (1)
      {
        uint64_t v25 = *v23++;
        *(void *)&result[8 * v24] = v25;
        uint64_t v24 = *v7 + 1;
        if (__OFADD__(*v7, 1LL)) {
          break;
        }
        *uint64_t v7 = v24;
        if (!--v22) {
          goto LABEL_3;
        }
      }

      __break(1u);
      break;
    }

{
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  type metadata accessor for __VaListBuilder();
  int64_t v6 = (void *)swift_allocObject();
  v6[2] = 8LL;
  v6[3] = 0LL;
  uint64_t v7 = v6 + 3;
  v6[4] = 0LL;
  v6[5] = 0LL;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_25:
    uint64_t v26 = __VaListBuilder.va_list()();
    if (a4)
    {
      *((void *)&v34 + 1) = &type metadata for Locale;
      *(void *)&id v33 = a4;
      *((void *)&v33 + 1) = a5;
    }

    else
    {
      id v33 = 0u;
      uint64_t v34 = 0u;
    }

    type metadata accessor for NSString();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    __int128 v27 = NSString.__allocating_init(format:locale:arguments:)(a2, a3, &v33, v26);
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    swift_release();

    return (char *)v28;
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v10 + 40 * v9,  (uint64_t)&v33);
    uint64_t v11 = *((void *)&v34 + 1);
    uint64_t v12 = v35;
    __swift_project_boxed_opaque_existential_1(&v33, *((uint64_t *)&v34 + 1));
    uint64_t result = (char *)MEMORY[0x186E1CF6C](v11, v12);
    uint64_t v14 = *v7;
    uint64_t v15 = *((void *)result + 2);
    BOOL v16 = __OFADD__(*v7, v15);
    uint64_t v17 = *v7 + v15;
    if (v16) {
      break;
    }
    __int128 v18 = result;
    uint64_t v19 = v6[4];
    if (v19 >= v17) {
      goto LABEL_18;
    }
    if (v19 + 0x4000000000000000LL < 0) {
      goto LABEL_31;
    }
    __int128 v20 = (char *)v6[5];
    if (2 * v19 > v17) {
      uint64_t v17 = 2 * v19;
    }
    v6[4] = v17;
    uint64_t result = (char *)swift_slowAlloc();
    v6[5] = result;
    if (v20)
    {
      if (result != v20 || result >= &v20[8 * v14]) {
        memmove(result, v20, 8 * v14);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      uint64_t result = (char *)v6[5];
    }

    if (!result) {
      goto LABEL_33;
    }
    uint64_t v22 = *((void *)v18 + 2);
    if (v22)
    {
      uint64_t v23 = (uint64_t *)(v18 + 32);
      uint64_t v24 = *v7;
      while (1)
      {
        uint64_t v25 = *v23++;
        *(void *)&result[8 * v24] = v25;
        uint64_t v24 = *v7 + 1;
        if (__OFADD__(*v7, 1LL)) {
          break;
        }
        *uint64_t v7 = v24;
        if (!--v22) {
          goto LABEL_3;
        }
      }

      __break(1u);
      break;
    }

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n( uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v12;
    uint64_t v4 = a1 + 32;
    do
    {
      specialized String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)();
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v8, v9, v10);
      uint64_t v12 = v2;
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v12;
      }

      *(void *)(v2 + 16) = v6 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v11, v2 + 40 * v6 + 32);
      v4 += 120LL;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *specialized LocalizedStringResource._withExtensionForBundle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with take of LocalePreferences?( a1 + 96,  (uint64_t)v142,  &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?( (uint64_t)v142,  (uint64_t)v148,  &demangling cache variable for type metadata for String?);
  if (!v148[1])
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)localizedStringLogger);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_32;
    }
    uint64_t v26 = a2;
    __int128 v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)__int128 v27 = 0;
    uint64_t v28 = "LocalizedStringResource did not contain a sandbox extension token. Proceeding to lookup localized string witho"
          "ut consuming a sandbox extension.";
    goto LABEL_31;
  }

  uint64_t v8 = v148[0];
  Swift::String v140 = *(Swift::String *)(a1 + 72);
  uint64_t v141 = *(void *)(a1 + 88);
  outlined retain of URL((void **)&v140);
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    uint64_t v131 = v8;
    uint64_t v129 = a2;
    v132._uint64_t countAndFlagsBits = v3;
    Swift::String v143 = v140;
    uint64_t v144 = v141;
    outlined retain of URL((void **)&v140);
    Swift::String v9 = URL.path(percentEncoded:)(1);
    Swift::String v143 = v9;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v9._countAndFlagsBits, (unint64_t)v9._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v138._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v10 = specialized Set._Variant.insert(_:)(&v134, 0x2FuLL);
    uint64_t countAndFlagsBits = v138._countAndFlagsBits;
    Swift::String v12 = v143;
    uint64_t v13 = ((unint64_t)v143._object >> 56) & 0xF;
    if (v13)
    {
      uint64_t v128 = a3;
      Swift::String v138 = v143;
      MEMORY[0x1895F8858](v10);
      Swift::String v122 = &v138;
      uint64_t v123 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      uint64_t v14 = v132._countAndFlagsBits;
      uint64_t v15 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v121,  v12._countAndFlagsBits,  (unint64_t)v12._object);
      uint64_t v4 = v14;
      if (v16 == 1)
      {
        uint64_t v17 = v14;
        unint64_t object = (unint64_t)v138._object;
        Swift::Int v18 = v138._countAndFlagsBits;
        swift_bridgeObjectRetain();
        __int128 v20 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v18,  object,  countAndFlagsBits);
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v17;
      }

      else
      {
        __int128 v20 = v15;
        unint64_t v22 = v16;
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      a3 = v128;
      a2 = v129;
      if (!v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v140);
        __int128 v20 = 0LL;
        unint64_t v22 = 0xE000000000000000LL;
        goto LABEL_23;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      __int128 v20 = 0LL;
      unint64_t v22 = 0xE000000000000000LL;
      uint64_t v4 = v132._countAndFlagsBits;
      a2 = v129;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v140);
LABEL_23:
    int v29 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v20, v22);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }

  if (!objc_msgSend( (id) v140._countAndFlagsBits, sel_fileSystemRepresentation))
  {
    outlined release of URL((id *)&v140);
    goto LABEL_25;
  }

  int v29 = foundation_sandbox_check_path();
LABEL_24:
  outlined release of URL((id *)&v140);
  if (!v29)
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)localizedStringLogger);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_32;
    }
    uint64_t v26 = a2;
    __int128 v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)__int128 v27 = 0;
    uint64_t v28 = "LocalizedStringResource contained a sandbox extension token but sandbox check passed without consuming the tok"
          "en. Proceeding to lookup localized string without consuming a sandbox extension.";
LABEL_31:
    _os_log_impl(&dword_182EB1000, v24, v25, v28, v27, 2u);
    id v32 = v27;
    a2 = v26;
    MEMORY[0x186E20E60](v32, -1LL, -1LL);
LABEL_32:

LABEL_33:
    uint64_t v130 = 0LL;
    uint64_t v131 = 1LL;
    goto LABEL_34;
  }

void *specialized String.init(localized:options:)(__int128 *a1, __int128 *a2)
{
  __int128 v2 = a1[5];
  *(_OWORD *)&_BYTE v18[16] = a1[4];
  __int128 v19 = v2;
  __int128 v20 = a1[6];
  __int128 v3 = a1[1];
  __int128 v15 = *a1;
  __int128 v16 = v3;
  __int128 v4 = a1[3];
  __int128 v17 = a1[2];
  *(_OWORD *)Swift::Int v18 = v4;
  __int128 v5 = *a2;
  __int128 v6 = a2[1];
  *(_OWORD *)((char *)v22 + 9) = *(__int128 *)((char *)a2 + 25);
  __int128 v21 = v5;
  v22[0] = v6;
  outlined retain of String.LocalizationOptions((uint64_t)&v21);
  outlined retain of LocalizedStringResource((uint64_t)&v15);
  uint64_t v7 = specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v15, (uint64_t)&v21, (uint64_t)&v15);
  uint64_t v9 = v8;
  outlined release of LocalizedStringResource((uint64_t)&v15);
  outlined release of String.LocalizationOptions((uint64_t)&v21);
  if (v9)
  {
    outlined release of String.LocalizationOptions((uint64_t)&v21);
    outlined release of LocalizedStringResource((uint64_t)&v15);
  }

  else
  {
    __int128 v23 = v16;
    uint64_t v24 = v17;
    v13[2] = v16;
    uint64_t v14 = v17;
    __int128 v12 = v21;
    v13[0] = v22[0];
    *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v22 + 9);
    __int128 v25 = *(_OWORD *)&v18[8];
    __int128 v11 = *(_OWORD *)&v18[8];
    outlined retain of String.LocalizationValue((uint64_t)&v23);
    outlined retain of Locale((uint64_t)&v25);
    uint64_t v7 = String.LocalizationValue.resolve(key:options:table:bundle:locale:performLocalization:)( v7,  0LL,  &v12,  (uint64_t)v7,  0LL,  0LL,  (uint64_t *)&v11,  0);
    outlined release of LocalizedStringResource((uint64_t)&v15);
    outlined release of Locale((uint64_t)&v25);
    outlined release of String.LocalizationValue((uint64_t)&v23);
    outlined release of String.LocalizationOptions((uint64_t)&v21);
  }

  return v7;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.CodingKeys,  &unk_189C896E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.CodingKeys,  &unk_189C896E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.CodingKeys,  &unk_189C896E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.CodingKeys,  &unk_189C896E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys,  &unk_189C89798);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys,  &unk_189C89798);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys,  &unk_189C89798);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys,  &unk_189C89778);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys,  &unk_189C89778);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys,  &unk_189C89778);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys,  &unk_189C89778);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.CodingKeys,  &unk_189C895B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.CodingKeys,  &unk_189C895B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.CodingKeys,  &unk_189C895B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.CodingKeys,  &unk_189C895B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.ObjectCodingKeys,  &unk_189C89658);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.ObjectCodingKeys,  &unk_189C89658);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.ObjectCodingKeys,  &unk_189C89658);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.DoubleCodingKeys,  &unk_189C89638);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.DoubleCodingKeys,  &unk_189C89638);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.DoubleCodingKeys,  &unk_189C89638);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.FloatCodingKeys,  &unk_189C89618);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.FloatCodingKeys,  &unk_189C89618);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.FloatCodingKeys,  &unk_189C89618);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.UintCodingKeys,  &unk_189C895F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.UintCodingKeys,  &unk_189C895F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.UintCodingKeys,  &unk_189C895F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.IntCodingKeys,  &unk_189C895D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.IntCodingKeys,  &unk_189C895D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder.IntCodingKeys,  &unk_189C895D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys);
  }

  return result;
}

uint64_t sub_1832FD668()
{
  return 24LL;
}

__n128 sub_1832FD674(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for implicit closure #1 in String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:format:)()
{
  return swift_getAtKeyPath();
}

uint64_t outlined retain of String.LocalizationOptions(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of String.LocalizationOptions(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for InflectionConcept.CodingKeys, &unk_189C89408);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for InflectionConcept.CodingKeys, &unk_189C89408);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for InflectionConcept.CodingKeys, &unk_189C89408);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for InflectionConcept.CodingKeys, &unk_189C89408);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for InflectionConcept.LocalizedPhraseCodingKeys,  &unk_189C89528);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for InflectionConcept.LocalizedPhraseCodingKeys,  &unk_189C89528);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for InflectionConcept.LocalizedPhraseCodingKeys,  &unk_189C89528);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for InflectionConcept.LocalizedPhraseCodingKeys,  &unk_189C89528);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for InflectionConcept.TermsOfAddressCodingKeys,  &unk_189C89498);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for InflectionConcept.TermsOfAddressCodingKeys,  &unk_189C89498);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for InflectionConcept.TermsOfAddressCodingKeys,  &unk_189C89498);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for InflectionConcept.TermsOfAddressCodingKeys,  &unk_189C89498);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type [TermOfAddress] and conformance <A> [A]( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TermOfAddress]);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys,  &unk_189C892C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys,  &unk_189C892C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys,  &unk_189C892C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys,  &unk_189C892C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys,  &unk_189C89378);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys,  &unk_189C89378);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys,  &unk_189C89378);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys,  &unk_189C89358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys,  &unk_189C89358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys,  &unk_189C89358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys,  &unk_189C89358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }

  return result;
}

uint64_t outlined release of AttributedString.LocalizationOptions(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.CodingKeys,  &unk_189C89238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.CodingKeys,  &unk_189C89238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.CodingKeys,  &unk_189C89238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.CodingKeys,  &unk_189C89238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }

  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTf4ng_n( uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x18961AFE8];
  if (v3)
  {
    uint64_t v18 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v18;
    uint64_t v8 = a1 + 32;
    do
    {
      specialized String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)( v16,  (char *)v17 + 8,  1LL,  a2,  a3);
      uint64_t v18 = v4;
      unint64_t v10 = *(void *)(v4 + 16);
      unint64_t v9 = *(void *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v4 = v18;
      }

      *(void *)(v4 + 16) = v10 + 1;
      __int128 v11 = (_OWORD *)(v4 + (v10 << 6));
      __int128 v12 = v16[0];
      __int128 v13 = v16[1];
      __int128 v14 = v17[0];
      *(_OWORD *)((char *)v11 + 73) = *(_OWORD *)((char *)v17 + 9);
      v11[3] = v13;
      v11[4] = v14;
      v11[2] = v12;
      v8 += 120LL;
      --v3;
    }

    while (v3);
  }

  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJ14CodableStorageOs5NeverOTg506_sSS10d3E17ef90V6encode33_6BD3BCCACE0AF34AB8D7E61AF16B4164LL2to14fallbackLocaleys7Encoder_p_AA0O0VtKFAC14gh3V14iJ8OALXEfU_AF6LocaleVTf1cn_nTf4ng_n( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v10 = (_DWORD *)((char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x18961AFE8];
  if (v11)
  {
    uint64_t v17 = v3;
    uint64_t v20 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v12 = v20;
    uint64_t v13 = a1 + 32;
    do
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v13, (uint64_t)v19);
      v18[0] = a2;
      v18[1] = a3;
      swift_unknownObjectRetain();
      String.LocalizationValue.FormatArgument.CodableStorage.init(_:fallbackLocale:)((uint64_t)v19, v18, v10);
      uint64_t v20 = v12;
      unint64_t v15 = *(void *)(v12 + 16);
      unint64_t v14 = *(void *)(v12 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v12 = v20;
      }

      *(void *)(v12 + 16) = v15 + 1;
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v10,  v12 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v15,
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      v13 += 120LL;
      --v11;
    }

    while (v11);
  }

  return v12;
}

uint64_t lazy protocol witness table accessor for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A]( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String.LocalizationValue.FormatArgument.CodableStorage]);
    uint64_t v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( a2,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage,  a3);
    uint64_t result = MEMORY[0x186E20D4C](a4, v9, &v10);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( Swift::String *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  v1 + v4,  (NSDecimal **)(v1 + ((*(void *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL)));
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL)
                                      - 8)
                          + 80LL);
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
LABEL_6:
    uint64_t v4 = *(int *)(v3 + 20);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      return swift_deallocObject();
    }
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle(0LL);
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v6 = v0 + ((v1 + 16) & ~v1) + v4 + *(int *)(v5 + 36);
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  v1 + v4,  *(void *)v5,  *(void *)(v5 + 8),  *(_DWORD *)(v5 + 16));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  v1 + v4,  *(double *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[6];
  __int16 v7;
  __int128 v2 = *(_OWORD *)(v1 + 96);
  v6[4] = *(_OWORD *)(v1 + 80);
  v6[5] = v2;
  uint64_t v7 = *(_WORD *)(v1 + 112);
  uint64_t v3 = *(_OWORD *)(v1 + 32);
  v6[0] = *(_OWORD *)(v1 + 16);
  v6[1] = v3;
  unint64_t v4 = *(_OWORD *)(v1 + 64);
  v6[2] = *(_OWORD *)(v1 + 48);
  v6[3] = v4;
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  (uint64_t)v6,  *(double *)(v1 + 120),  *(double *)(v1 + 128)) & 1;
}

{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v6[6];
  _OWORD v7[2];
  __int128 v2 = *(_OWORD *)(v1 + 96);
  v6[4] = *(_OWORD *)(v1 + 80);
  v6[5] = v2;
  v7[0] = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v7 + 10) = *(_OWORD *)(v1 + 122);
  uint64_t v3 = *(_OWORD *)(v1 + 32);
  v6[0] = *(_OWORD *)(v1 + 16);
  v6[1] = v3;
  unint64_t v4 = *(_OWORD *)(v1 + 64);
  v6[2] = *(_OWORD *)(v1 + 48);
  v6[3] = v4;
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  v6,  *(double *)(v1 + 144)) & 1;
}

uint64_t partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0LL)
                                      - 8)
                          + 80LL);
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( *a1,  a1[1],  v1 + ((v3 + 16) & ~v3));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( *a1,  a1[1],  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[6];
  __int16 v9;
  uint64_t v3 = *a1;
  __int128 v2 = a1[1];
  unint64_t v4 = *(_OWORD *)(v1 + 96);
  v8[4] = *(_OWORD *)(v1 + 80);
  v8[5] = v4;
  uint64_t v9 = *(_WORD *)(v1 + 112);
  uint64_t v5 = *(_OWORD *)(v1 + 32);
  v8[0] = *(_OWORD *)(v1 + 16);
  v8[1] = v5;
  uint64_t v6 = *(_OWORD *)(v1 + 64);
  v8[2] = *(_OWORD *)(v1 + 48);
  v8[3] = v6;
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( v3,  v2,  (uint64_t)v8,  *(double *)(v1 + 120),  *(double *)(v1 + 128));
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0LL)
                                      - 8)
                          + 80LL);
  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
LABEL_6:
    uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v3) + 36);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      return swift_deallocObject();
    }
    swift_unknownObjectRelease();
    uint64_t v3 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v6 = v0 + ((v1 + 16) & ~v1) + v4 + *(int *)(v5 + 36);
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  return swift_deallocObject();
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL)
                                      - 8)
                          + 80LL);
  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
LABEL_6:
    uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v3) + 36);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      return swift_deallocObject();
    }
    swift_unknownObjectRelease();
    uint64_t v3 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v6 = v0 + ((v1 + 16) & ~v1) + v4 + *(int *)(v5 + 36);
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  return swift_deallocObject();
}

uint64_t sub_1832FE2B0()
{
  return objectdestroy_17Tm();
}

uint64_t sub_1832FE304()
{
  return objectdestroy_17Tm();
}

uint64_t sub_1832FE354()
{
  return objectdestroy_17Tm();
}

uint64_t objectdestroy_17Tm()
{
  return swift_deallocObject();
}

uint64_t sub_1832FE39C()
{
  return objectdestroy_26Tm();
}

void partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  __int128 v4 = v1[6];
  v7[4] = v1[5];
  v7[5] = v4;
  v8[0] = v1[7];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)v1 + 122);
  __int128 v5 = v1[2];
  v7[0] = v1[1];
  v7[1] = v5;
  __int128 v6 = v1[4];
  v7[2] = v1[3];
  v7[3] = v6;
  specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( v3,  v2,  v7);
}

uint64_t sub_1832FE3F8()
{
  return objectdestroy_26Tm();
}

uint64_t sub_1832FE450()
{
  return objectdestroy_26Tm();
}

uint64_t objectdestroy_26Tm()
{
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type NSNumber and conformance NSObject( unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = type metadata accessor for NSMorphologyPronoun(255LL, a2);
    uint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961BB20], v4);
    atomic_store(result, a1);
  }

  return result;
}

void *outlined consume of LocalizedStringResource.BundleDescription( void *result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1)
  {

    swift_release();
    return (void *)swift_release();
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalizedStringResource.CodingKeys,  &unk_189C891A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalizedStringResource.CodingKeys,  &unk_189C891A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalizedStringResource.CodingKeys,  &unk_189C891A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalizedStringResource.CodingKeys,  &unk_189C891A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue and conformance String.LocalizationValue()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue,  &type metadata for String.LocalizationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue,  &type metadata for String.LocalizationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue,  &type metadata for String.LocalizationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue,  &type metadata for String.LocalizationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue,  &type metadata for String.LocalizationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }

  return result;
}

uint64_t type metadata accessor for _NSLocalizedStringResourceSwiftWrapper()
{
  return objc_opt_self();
}

uint64_t outlined retain of LocalizedStringResource(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v3 = v2;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of LocalizedStringResource(uint64_t a1)
{
  return a1;
}

id partial apply for closure #1 in AttributedString.init<A>(localized:options:including:)@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in AttributedString.init<A>(localized:options:including:)( a1,  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(_OWORD **)(v2 + 16),  *(void **)(v2 + 24),  a2);
}

uint64_t outlined retain of String.LocalizationValue(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of String.LocalizationValue(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of AttributedString.LocalizationOptions(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber,  &type metadata for String.LocalizationOptions._PluralizationNumber);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.StringInterpolation,  &type metadata for String.LocalizationValue.StringInterpolation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept and conformance InflectionConcept()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept and conformance InflectionConcept;
  if (!lazy protocol witness table cache variable for type InflectionConcept and conformance InflectionConcept)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for InflectionConcept,  &type metadata for InflectionConcept);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept and conformance InflectionConcept);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber,  &type metadata for AttributedString.LocalizationOptions._PluralizationNumber);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.FormattingOptions,  &type metadata for AttributedString.FormattingOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.FormattingOptions,  &type metadata for AttributedString.FormattingOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.FormattingOptions,  &type metadata for AttributedString.FormattingOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.FormattingOptions,  &type metadata for AttributedString.FormattingOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.InterpolationOptions,  &type metadata for AttributedString.InterpolationOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.InterpolationOptions,  &type metadata for AttributedString.InterpolationOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.InterpolationOptions,  &type metadata for AttributedString.InterpolationOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.InterpolationOptions,  &type metadata for AttributedString.InterpolationOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }

  return result;
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int()
{
  return MEMORY[0x18961A510];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int8()
{
  return MEMORY[0x18961A4A0];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt()
{
  return MEMORY[0x18961A910];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt8()
{
  return MEMORY[0x18961A8A8];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Float()
{
  return MEMORY[0x189618658];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Double()
{
  return MEMORY[0x1896185C0];
}

unint64_t instantiation function for generic protocol witness table for CGFloat(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for String.LocalizationOptions()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for String.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for String.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationOptions(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 41)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationOptions( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationOptions()
{
  return &type metadata for String.LocalizationOptions;
}

ValueMetadata *type metadata accessor for String.LocalizationOptions._PluralizationNumber()
{
  return &type metadata for String.LocalizationOptions._PluralizationNumber;
}

ValueMetadata *type metadata accessor for String.LocalizationValue()
{
  return &type metadata for String.LocalizationValue;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.Placeholder()
{
  return &type metadata for String.LocalizationValue.Placeholder;
}

void *initializeBufferWithCopyOfBuffer for String.LocalizationValue(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for String.LocalizationValue(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for String.LocalizationValue(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return &type metadata for String.LocalizationValue.StringInterpolation;
}

uint64_t outlined copy of InflectionConcept()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for InflectionConcept()
{
  return outlined consume of InflectionConcept();
}

uint64_t outlined consume of InflectionConcept()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for InflectionConcept(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((_BYTE *)a2 + 16);
  outlined copy of InflectionConcept();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for InflectionConcept(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((_BYTE *)a2 + 16);
  outlined copy of InflectionConcept();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of InflectionConcept();
  return a1;
}

uint64_t assignWithTake for InflectionConcept(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of InflectionConcept();
  return a1;
}

ValueMetadata *type metadata accessor for InflectionConcept()
{
  return &type metadata for InflectionConcept;
}

uint64_t destroy for AttributedString.LocalizationOptions()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for AttributedString.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.LocalizationOptions(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.LocalizationOptions( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.LocalizationOptions()
{
  return &type metadata for AttributedString.LocalizationOptions;
}

uint64_t getEnumTagSinglePayload for AttributedString.LocalizationOptions._PluralizationNumber( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AttributedString.LocalizationOptions._PluralizationNumber( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for AttributedString.LocalizationOptions._PluralizationNumber(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t destructiveInjectEnumTag for AttributedString.LocalizationOptions._PluralizationNumber( uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber()
{
  return &type metadata for AttributedString.LocalizationOptions._PluralizationNumber;
}

ValueMetadata *type metadata accessor for AttributedString.FormattingOptions()
{
  return &type metadata for AttributedString.FormattingOptions;
}

ValueMetadata *type metadata accessor for AttributedString.InterpolationOptions()
{
  return &type metadata for AttributedString.InterpolationOptions;
}

uint64_t dispatch thunk of _FormatSpecifiable._arg.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t destroy for LocalizedStringResource(uint64_t a1)
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LocalizedStringResource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *(void **)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v6;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v9 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LocalizedStringResource(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[8];
  a1[7] = a2[7];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[8] = v4;
  uint64_t v5 = (void *)a2[9];
  uint64_t v6 = (void *)a1[9];
  a1[9] = v5;
  id v7 = v5;

  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LocalizedStringResource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  uint64_t v5 = *(void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);

  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalizedStringResource(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalizedStringResource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LocalizedStringResource()
{
  return &type metadata for LocalizedStringResource;
}

uint64_t outlined copy of LocalizedStringResource.BundleDescription( uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1)
  {
    uint64_t v4 = (void *)result;
    swift_retain();
    id v5 = v4;
    return swift_retain();
  }

  return result;
}

void *destroy for LocalizedStringResource.BundleDescription(uint64_t a1)
{
  return outlined consume of LocalizedStringResource.BundleDescription( *(void **)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for LocalizedStringResource.BundleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of LocalizedStringResource.BundleDescription(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for LocalizedStringResource.BundleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of LocalizedStringResource.BundleDescription(*(void *)a2, v4, v5, v6);
  id v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of LocalizedStringResource.BundleDescription(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for LocalizedStringResource.BundleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of LocalizedStringResource.BundleDescription(v5, v7, v6, v8);
  return a1;
}

ValueMetadata *type metadata accessor for LocalizedStringResource.BundleDescription()
{
  return &type metadata for LocalizedStringResource.BundleDescription;
}

uint64_t dispatch thunk of CustomLocalizedStringResourceConvertible.localizedStringResource.getter( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for LocalizedStringResource.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1832FFC28 + 4 * byte_183814D09[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1832FFC5C + 4 * byte_183814D04[v4]))();
}

uint64_t sub_1832FFC5C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832FFC64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832FFC6CLL);
  }
  return result;
}

uint64_t sub_1832FFC78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832FFC80LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1832FFC84(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832FFC8C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for LocalizedStringResource.CodingKeys()
{
  return &unk_189C891A8;
}

void *type metadata accessor for String.LocalizationValue.CodingKeys()
{
  return &unk_189C89238;
}

void *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return &unk_189C892C8;
}

void *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return &unk_189C89358;
}

void *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return &unk_189C89378;
}

void *type metadata accessor for InflectionConcept.CodingKeys()
{
  return &unk_189C89408;
}

void *type metadata accessor for InflectionConcept.TermsOfAddressCodingKeys()
{
  return &unk_189C89498;
}

void *type metadata accessor for InflectionConcept.LocalizedPhraseCodingKeys()
{
  return &unk_189C89528;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.Placeholder( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1832FFD6C + 4 * byte_183814D13[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1832FFDA0 + 4 * byte_183814D0E[v4]))();
}

uint64_t sub_1832FFDA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832FFDA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832FFDB0LL);
  }
  return result;
}

uint64_t sub_1832FFDBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832FFDC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1832FFDC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832FFDD0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.CodingKeys()
{
  return &unk_189C895B8;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.IntCodingKeys()
{
  return &unk_189C895D8;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.UintCodingKeys()
{
  return &unk_189C895F8;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  return &unk_189C89618;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  return &unk_189C89638;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  return &unk_189C89658;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1832FFE88 + 4 * byte_183814D1D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1832FFEBC + 4 * byte_183814D18[v4]))();
}

uint64_t sub_1832FFEBC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832FFEC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832FFECCLL);
  }
  return result;
}

uint64_t sub_1832FFED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832FFEE0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1832FFEE4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832FFEEC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return &unk_189C896E8;
}

uint64_t storeEnumTagSinglePayload for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1832FFF48 + 4 * byte_183814D22[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1832FFF68 + 4 * byte_183814D27[v4]))();
  }
}

_BYTE *sub_1832FFF48(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1832FFF68(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1832FFF70(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1832FFF78(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1832FFF80(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1832FFF88(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return &unk_189C89778;
}

void *type metadata accessor for String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return &unk_189C89798;
}

void specialized _PlistDecoder.init(referencing:options:codingPathNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v3[3] = a1;
  v3[2] = MEMORY[0x18961AFE8];
  swift_retain();
  XMLPlistMap.loadValue(at:)(0LL);
  if ((~v7 & 0xF000000000000007LL) != 0)
  {
    unint64_t v8 = v7;
    uint64_t v9 = (void *)v4[2];
    outlined copy of XMLPlistMap.Value(v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4[2] = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      v4[2] = v9;
    }

    unint64_t v12 = v9[2];
    unint64_t v11 = v9[3];
    if (v12 >= v11 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
    }
    v9[2] = v12 + 1;
    v9[v12 + 4] = v8;
    v4[2] = v9;
    outlined consume of XMLPlistMap.Value?(v8);
    v4[4] = a2;
    v4[5] = a3;
  }

  else
  {
    __break(1u);
  }

uint64_t specialized String.LocalizationValue.Placeholder.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7630441 && a2 == 0xE300000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 1953393013 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x74616F6C66LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x656C62756F64LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t specialized InflectionConcept.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x41664F736D726574LL && a2 == 0xEE00737365726464LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x657A696C61636F6CLL && a2 == 0xEF65736172685064LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized String.LocalizationOptions._PluralizationNumber.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6369666963657073LL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6E776F6E6B6E75LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized String.LocalizationValue.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7955819 && a2 == 0xE300000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x746E656D75677261LL && a2 == 0xE900000000000073LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized LocalizedStringResource.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7955819 && a2 == 0xE300000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x56746C7561666564LL && a2 == 0xEC00000065756C61LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x656C626174LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x5255656C646E7562LL && a2 == 0xE90000000000004CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0xD000000000000015LL && a2 == 0x80000001839D0210LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_183301490()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:)( _DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:)( a1,  a2,  *(void *)(v3 + 16),  *(void (**)(uint64_t *__return_ptr, void *))(v3 + 24),  *(void **)(v3 + 40),  a3);
}

void partial apply for specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:)( a1,  a2,  *(void *)(v3 + 16),  *(void (**)(uint64_t *__return_ptr, void *))(v3 + 24),  *(void **)(v3 + 40),  a3);
}

void partial apply for specialized closure #3 in PropertyListDecoder._decode<A>(_:from:format:)( unint64_t a1, unint64_t a2)
{
}

uint64_t partial apply for specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16),  *(void *(**)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))(v3 + 40),  *(void (**)(id))(v3 + 56),  a3);
}

unint64_t outlined consume of XMLPlistMap.Value?(unint64_t result)
{
  if ((~result & 0xF000000000000007LL) != 0) {
    return outlined consume of XMLPlistMap.Value(result);
  }
  return result;
}

void **outlined retain of URL(void **a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  id v3 = v2;
  swift_retain();
  return a1;
}

id *outlined release of URL(id *a1)
{
  return a1;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleVSgWOg(uint64_t a1)
{
  else {
    return 0LL;
  }
}

void outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  if ((a16 & 0xFEF8) != 0
    || (a9 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL
    || ((a13 | a11 | a15) & 0xF000000000000007LL) != 0)
  {
    outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16);
  }

uint64_t outlined consume of Date.IntervalFormatStyle?(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t outlined retain of Date.IntervalFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of LocalePreferences?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of (Date, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)( uint64_t a1)
{
  return a1;
}

void partial apply for closure #1 in String.LocalizationValue._formatAttributedString<A>(_:preparedArguments:options:scope:formatConfiguration:locale:)()
{
}

uint64_t type metadata accessor for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _FoundationPlusScope);
}

uint64_t _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 136);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return ((_DWORD)v1 - 1) & ~(((int)v1 - 1) >> 31);
}

uint64_t sub_183301868()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)()
{
  return closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(v0);
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t, char *), uint64_t a5)
{
  return closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  a2,  a3,  a4,  a5,  v5);
}

uint64_t sub_1833018B4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( a1,  a2,  a3,  a4,  a5,  *(uint64_t (**)(void))(v5 + 16));
}

uint64_t partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t, char *), uint64_t a4)
{
  return closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  a2,  a3,  a4,  v4);
}

uint64_t sub_1833018D4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( a1,  a2,  a3,  a4,  *(uint64_t (**)(void))(v4 + 16));
}

uint64_t sub_1833018EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t, uint64_t, char *), uint64_t a4)
{
  return closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  a2,  a3,  a4,  *(uint64_t **)(v4 + 16));
}

uint64_t sub_183301904()
{
  return swift_deallocObject();
}

uint64_t sub_183301914()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( void *a1, uint64_t a2, uint64_t a3)
{
  return closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  a2,  a3,  *(uint64_t **)(v3 + 16));
}

uint64_t sub_18330192C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()( a1,  a2,  a3,  *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_183301944()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2)
{
  return closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  a2,  *(void **)(v2 + 16));
}

uint64_t sub_18330195C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)( uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_183301974()
{
  return swift_deallocObject();
}

double partial apply for closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  a2,  a3,  *(void **)(v4 + 16),  a4);
}

uint64_t sub_18330198C()
{
  return swift_deallocObject();
}

uint64_t sub_18330199C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2)
{
  return closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  a2,  *(uint64_t **)(v2 + 16));
}

uint64_t sub_1833019B4()
{
  return swift_deallocObject();
}

uint64_t sub_1833019C4()
{
  return swift_deallocObject();
}

void partial apply for closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1833019F0()
{
  return swift_deallocObject();
}

uint64_t sub_183301A00()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, __int128 *a3)
{
  return closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  a2,  a3,  *(uint64_t **)(v3 + 16),  *(void **)(v3 + 24));
}

uint64_t sub_183301A2C()
{
  return swift_deallocObject();
}

double partial apply for closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  *(void *)(v2 + 16),  a2);
}

uint64_t sub_183301A48()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(uint64_t a1)
{
  return thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(a1, *(uint64_t (**)(void))(v1 + 16));
}

double _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = 2LL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return result;
}

uint64_t sub_183301A84()
{
  return swift_deallocObject();
}

uint64_t sub_183301A94()
{
  return swift_deallocObject();
}

uint64_t sub_183301AA4()
{
  return swift_deallocObject();
}

uint64_t sub_183301AB4()
{
  return swift_deallocObject();
}

uint64_t sub_183301AC4()
{
  return swift_deallocObject();
}

uint64_t sub_183301AD4()
{
  return swift_deallocObject();
}

uint64_t sub_183301AE4()
{
  return swift_deallocObject();
}

uint64_t sub_183301AF4()
{
  return swift_deallocObject();
}

uint64_t sub_183301B04()
{
  return swift_deallocObject();
}

uint64_t sub_183301B14()
{
  return swift_deallocObject();
}

uint64_t sub_183301B24()
{
  return swift_deallocObject();
}

uint64_t sub_183301B34()
{
  return swift_deallocObject();
}

uint64_t sub_183301B44()
{
  return swift_deallocObject();
}

uint64_t sub_183301B54()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_132Tm()
{
  return swift_deallocObject();
}

uint64_t sub_183301B94()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(void *)a2 = v2;
  return a2;
}

uint64_t sub_183301BBC()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 <= 0xFD) {
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v1 & 1);
  }
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for String.LocalizationValue.AttributedStringCache()
{
  return &type metadata for String.LocalizationValue.AttributedStringCache;
}

uint64_t type metadata completion function for _FoundationPlusScope()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _FoundationPlusScope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = ~v5;
  if (v5 > 7 || (*(_DWORD *)(v4 + 80) & 0x100000) != 0 || *(void *)(v4 + 64) > 0x18uLL)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }

  else
  {
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))( ((unint64_t)a1 + v5) & v6,  ((unint64_t)a2 + v5) & v6);
  }

  return v3;
}

uint64_t destroy for _FoundationPlusScope(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL) + a1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL));
}

uint64_t initializeWithCopy for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))( (*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithCopy for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))( (*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t initializeWithTake for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))( (*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))( (*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _FoundationPlusScope(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183301EDC + 4 * byte_183814D37[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _FoundationPlusScope( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t TermOfAddress.isSupportedInLanguage(_:)(__int128 *a1)
{
  __int128 v2 = a1[3];
  __int128 v56 = a1[2];
  __int128 v57 = v2;
  __int128 v3 = a1[5];
  __int128 v58 = a1[4];
  __int128 v59 = v3;
  __int128 v4 = a1[1];
  __int128 v54 = *a1;
  __int128 v55 = v4;
  uint64_t v5 = v1[12];
  if (!v5)
  {
    __int128 v7 = v54;
    __int128 v8 = v55;
    outlined retain of Locale.Language( (uint64_t *)&v54,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v10 = *((void *)&v7 + 1);
    uint64_t v9 = v7;
    unint64_t object = (void *)*((void *)&v8 + 1);
    uint64_t countAndFlagsBits = v8;
    if (!*((void *)&v7 + 1))
    {
      uint64_t v13 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v54);
      uint64_t v10 = v14;
      if (v14)
      {
        uint64_t v9 = v13;
        Swift::String v15 = String.lowercased()();
        uint64_t countAndFlagsBits = v15._countAndFlagsBits;
        unint64_t object = v15._object;
      }

      else
      {
        uint64_t v9 = 0LL;
        uint64_t countAndFlagsBits = 0LL;
        unint64_t object = 0LL;
      }
    }

    outlined copy of Locale.LanguageCode?(v7, *((uint64_t *)&v7 + 1));
    outlined retain of Locale.Language( (uint64_t *)&v54,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    Swift::String v33 = String.lowercased()();
    if (v10)
    {
      if (countAndFlagsBits == v33._countAndFlagsBits && object == v33._object) {
        char v6 = 1;
      }
      else {
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v9, v10);
      return v6 & 1;
    }

    outlined consume of Locale.LanguageCode?(v9, 0LL);
    uint64_t v34 = 28261LL;
    uint64_t v35 = 0xE200000000000000LL;
LABEL_31:
    outlined consume of Locale.LanguageCode?(v34, v35);
    char v6 = 0;
    return v6 & 1;
  }

  uint64_t v47 = v1[1];
  uint64_t v48 = *v1;
  uint64_t v16 = v1[2];
  uint64_t v17 = v1[3];
  uint64_t v18 = v1[4];
  uint64_t v19 = v1[5];
  uint64_t v21 = v1[6];
  uint64_t v20 = v1[7];
  uint64_t v23 = v1[8];
  uint64_t v22 = v1[9];
  uint64_t v25 = v1[10];
  uint64_t v24 = v1[11];
  v60[0] = v48;
  v60[1] = v47;
  _OWORD v60[2] = v16;
  v60[3] = v17;
  v60[4] = v18;
  v60[5] = v19;
  v60[6] = v21;
  v60[7] = v20;
  v60[8] = v23;
  v60[9] = v22;
  v60[10] = v25;
  v60[11] = v24;
  outlined copy of Locale.LanguageCode?(v48, v47);
  uint64_t v49 = v19;
  uint64_t v50 = v18;
  uint64_t v26 = v19;
  uint64_t v27 = v16;
  outlined copy of Locale.LanguageCode?(v18, v26);
  uint64_t v28 = v47;
  uint64_t v29 = v48;
  outlined copy of Locale.LanguageCode?(v23, v22);
  uint64_t v30 = v48;
  uint64_t v53 = v47;
  uint64_t v46 = v27;
  uint64_t v51 = (void *)v17;
  if (!v47)
  {
    outlined copy of Locale.LanguageCode?(v48, 0LL);
    outlined copy of Locale.LanguageCode?(v50, v49);
    outlined copy of Locale.LanguageCode?(v23, v22);
    uint64_t v52 = specialized _withFixedCharBuffer(size:_:)(257LL, v60);
    uint64_t v53 = v31;
    outlined consume of Locale.LanguageCode?(v48, 0LL);
    outlined consume of Locale.LanguageCode?(v50, v49);
    outlined consume of Locale.LanguageCode?(v23, v22);
    if (v53)
    {
      uint64_t v30 = v52;
      Swift::String v32 = String.lowercased()();
      uint64_t v46 = v32._countAndFlagsBits;
      uint64_t v51 = v32._object;
    }

    else
    {
      uint64_t v30 = 0LL;
      uint64_t v53 = 0LL;
      uint64_t v46 = 0LL;
      uint64_t v51 = 0LL;
    }

    uint64_t v28 = 0LL;
    uint64_t v29 = v48;
  }

  outlined copy of Locale.LanguageCode?(v29, v28);
  outlined consume of Locale.LanguageCode?(v29, v28);
  outlined consume of Locale.LanguageCode?(v50, v49);
  outlined consume of Locale.LanguageCode?(v23, v22);
  __int128 v36 = v54;
  __int128 v37 = v55;
  outlined retain of Locale.Language( (uint64_t *)&v54,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  uint64_t v39 = *((void *)&v36 + 1);
  uint64_t v38 = v36;
  id v41 = (void *)*((void *)&v37 + 1);
  uint64_t v40 = v37;
  if (!*((void *)&v36 + 1))
  {
    uint64_t v42 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v54);
    uint64_t v39 = v43;
    if (v43)
    {
      uint64_t v38 = v42;
      Swift::String v44 = String.lowercased()();
      uint64_t v40 = v44._countAndFlagsBits;
      id v41 = v44._object;
    }

    else
    {
      uint64_t v38 = 0LL;
      uint64_t v40 = 0LL;
      id v41 = 0LL;
    }
  }

  outlined copy of Locale.LanguageCode?(v36, *((uint64_t *)&v36 + 1));
  outlined retain of Locale.Language( (uint64_t *)&v54,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  if (!v53)
  {
    if (!v39)
    {
LABEL_2:
      char v6 = 1;
      return v6 & 1;
    }

    goto LABEL_30;
  }

  if (!v39)
  {
LABEL_30:
    outlined consume of Locale.LanguageCode?(v30, v53);
    uint64_t v34 = v38;
    uint64_t v35 = v39;
    goto LABEL_31;
  }

  if (v46 == v40 && v51 == v41) {
    char v6 = 1;
  }
  else {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined copy of Locale.LanguageCode?(v30, v53);
  outlined consume of Locale.LanguageCode?(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v30, v53);
  return v6 & 1;
}

void TermOfAddress.morphology(for:)(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = a1[3];
  __int128 v64 = a1[2];
  __int128 v65 = v4;
  __int128 v5 = a1[5];
  __int128 v66 = a1[4];
  __int128 v67 = v5;
  __int128 v6 = a1[1];
  __int128 v62 = *a1;
  __int128 v63 = v6;
  uint64_t v8 = *v2;
  uint64_t v7 = v2[1];
  uint64_t v9 = v2[2];
  uint64_t v10 = v2[3];
  uint64_t v11 = v2[4];
  uint64_t v12 = v2[5];
  uint64_t v13 = v2[6];
  uint64_t v14 = v2[7];
  uint64_t v15 = v2[8];
  uint64_t v16 = v2[9];
  uint64_t v17 = v2[10];
  uint64_t v18 = v2[11];
  unint64_t v19 = v2[12];
  char v20 = 1;
  uint64_t v21 = 3586LL;
  switch(v19)
  {
    case 0uLL:
      goto LABEL_5;
    case 1uLL:
      uint64_t v21 = 3584LL;
      goto LABEL_5;
    case 2uLL:
      uint64_t v21 = 3585LL;
      goto LABEL_5;
    case 3uLL:
      objc_opt_self();
      id v31 = (id)+[NSMorphology _userMorphologyWithOverrides]();
      if (v31)
      {
        Swift::String v32 = v31;
        memset(v61, 0, 21);
        specialized static Morphology._conditionallyBridgeFromObjectiveC(_:result:)(v31, (uint64_t)v61);

        char v34 = BYTE2(v61[0]);
        uint64_t v33 = v61[1];
        unint64_t v35 = LODWORD(v61[2]) | ((unint64_t)BYTE4(v61[2]) << 32);
        if (v61[1])
        {
          v36.i64[0] = 0xFFFFFFFFFFLL;
          v36.i64[1] = 0xFFFFFFFFFFLL;
          uint64x2_t v37 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v35), v36);
          int16x8_t v38 = (int16x8_t)vshlq_u64(v37, (uint64x2_t)xmmword_183728FF0);
          *(_WORD *)a2 = v61[0];
          *(_BYTE *)(a2 + 2) = v34;
          *(void *)(a2 + 8) = v33;
          *(_BYTE *)(a2 + 16) = v35;
          *(int32x2_t *)v37.i8 = vmovn_s64((int64x2_t)vshlq_u64(v37, (uint64x2_t)xmmword_183728FE0));
          *(int32x2_t *)v38.i8 = vmovn_s64((int64x2_t)v38);
          v38.i16[1] = v38.i16[2];
          v38.i16[2] = v37.i16[0];
          v38.i16[3] = v37.i16[2];
          *(_DWORD *)(a2 + 17) = vmovn_s16(v38).u32[0];
        }

        else
        {
          *(void *)a2 = v61[0];
          *(void *)(a2 + 8) = 0LL;
          *(_DWORD *)(a2 + 16) = v35;
          *(_BYTE *)(a2 + 20) = BYTE4(v35);
        }
      }

      else
      {
        *(void *)a2 = 0LL;
        *(void *)(a2 + 8) = 0LL;
        *(void *)(a2 + 13) = 0LL;
      }

      return;
    default:
      char v20 = 0;
      uint64_t v21 = 3587LL;
LABEL_5:
      char v58 = v20;
      uint64_t v47 = v10;
      uint64_t v48 = v9;
      uint64_t v49 = v7;
      uint64_t v50 = v14;
      uint64_t v59 = v21;
      uint64_t v51 = v13;
      uint64_t v52 = v12;
      uint64_t v53 = v11;
      uint64_t v54 = v15;
      uint64_t v55 = v18;
      uint64_t v56 = v17;
      uint64_t v57 = v16;
      __int128 v22 = v62;
      __int128 v23 = v63;
      outlined retain of Locale.Language( (uint64_t *)&v62,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
      uint64_t v25 = *((void *)&v22 + 1);
      uint64_t v24 = v22;
      unint64_t object = (void *)*((void *)&v23 + 1);
      uint64_t countAndFlagsBits = v23;
      if (!*((void *)&v22 + 1))
      {
        uint64_t v28 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v62);
        uint64_t v25 = v29;
        if (v29)
        {
          uint64_t v24 = v28;
          Swift::String v30 = String.lowercased()();
          uint64_t countAndFlagsBits = v30._countAndFlagsBits;
          unint64_t object = v30._object;
        }

        else
        {
          uint64_t v24 = 0LL;
          uint64_t countAndFlagsBits = 0LL;
          unint64_t object = 0LL;
        }
      }

      outlined copy of Locale.LanguageCode?(v22, *((uint64_t *)&v22 + 1));
      outlined retain of Locale.Language( (uint64_t *)&v62,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
      Swift::String v39 = String.lowercased()();
      if (!v25)
      {
        outlined consume of Locale.LanguageCode?(v24, 0LL);
        outlined consume of Locale.LanguageCode?(28261LL, 0xE200000000000000LL);
        goto LABEL_20;
      }

      if (countAndFlagsBits != v39._countAndFlagsBits || object != v39._object)
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Locale.LanguageCode?(v24, v25);
        if ((v40 & 1) != 0) {
          goto LABEL_18;
        }
LABEL_20:
        if ((v58 & 1) == 0)
        {
          *(void *)a2 = 0LL;
          *(void *)(a2 + 8) = 0LL;
          *(void *)(a2 + 13) = 0LL;
          return;
        }

        uint64_t v41 = 393216LL;
        goto LABEL_33;
      }

      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v24, v25);
LABEL_18:
      if (v19 < 3)
      {
        uint64_t v41 = qword_1838169C8[v19];
        goto LABEL_33;
      }

      outlined copy of TermOfAddress._TermOfAddress(v8, v49, v48, v47, v53, v52, v51, v50, v54, v57, v56, v55, v19);
      outlined consume of Locale.LanguageCode?(v8, v49);
      outlined consume of Locale.LanguageCode?(v53, v52);
      outlined consume of Locale.LanguageCode?(v54, v57);
      uint64_t v42 = *(void *)(v19 + 16);
      if (v42)
      {
        swift_bridgeObjectRetain();
        unint64_t v43 = v19 + 40;
        do
        {
          if (!*(_BYTE *)(v43 + 24))
          {
            String.lowercased()();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v44._uint64_t countAndFlagsBits = 31077LL;
            v44._unint64_t object = (void *)0xE200000000000000LL;
            Swift::Bool v45 = String.hasSuffix(_:)(v44);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v45)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v41 = 0x20000LL;
              goto LABEL_33;
            }
          }

          v43 += 64LL;
          --v42;
        }

        while (v42);
        swift_bridgeObjectRelease_n();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      uint64_t v41 = 0LL;
LABEL_33:
      uint64_t v46 = MEMORY[0x18961AFF0];
      *(void *)a2 = v41 | v59;
      *(void *)(a2 + 8) = v46;
      *(_BYTE *)(a2 + 20) = 2;
      *(_DWORD *)(a2 + 16) = 33751822;
      return;
  }

Swift::Bool __swiftcall NSTermOfAddress.isSupportedInLanguage(_:)(Swift::String a1)
{
  uint64_t v132 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  LODWORD(v119) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v3 = swift_release();
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  if (Language > 0)
  {
    v107[Language] = 0;
    uint64_t v3 = MEMORY[0x186E1B634](v107, 0LL);
    uint64_t v4 = v3;
  }

  uint64_t v104 = v5;
  MEMORY[0x1895F8858](v3);
  LODWORD(v119) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v7 = swift_release();
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  if ((int)v119 <= 0 && Script > 0)
  {
    v83[Script] = 0;
    uint64_t v7 = MEMORY[0x186E1B634](v83, 0LL);
    uint64_t v8 = v7;
  }

  uint64_t v105 = v9;
  MEMORY[0x1895F8858](v7);
  LODWORD(v119) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0LL;
  if ((int)v119 > 0)
  {
    uint64_t v106 = 0LL;
    uint64_t v12 = v104;
  }

  else
  {
    uint64_t v106 = 0LL;
    uint64_t v12 = v104;
    if (Country > 0)
    {
      v83[Country] = 0;
      uint64_t v11 = MEMORY[0x186E1B634](v83);
      uint64_t v106 = v13;
    }
  }

  swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v14 = v4;
    Swift::String v15 = String.lowercased()();
    unint64_t object = v15._object;
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
  }

  else
  {
    uint64_t v14 = 0LL;
    unint64_t object = 0LL;
    uint64_t countAndFlagsBits = 0LL;
  }

  uint64_t v16 = v8;
  uint64_t v17 = v106;
  if (v105)
  {
    uint64_t v119 = v8;
    uint64_t v120 = v105;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v18 = String._capitalized()();
    uint64_t v19 = v18._countAndFlagsBits;
    uint64_t v100 = v18._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_15:
      Swift::String v20 = String.uppercased()();
      id v98 = v20._object;
      uint64_t v99 = v20._countAndFlagsBits;
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v100 = 0LL;
    if (v106) {
      goto LABEL_15;
    }
  }

  uint64_t v11 = 0LL;
  id v98 = 0LL;
  uint64_t v99 = 0LL;
LABEL_18:
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v21 = (void *)objc_opt_self();
  id v22 = v1;
  id v23 = objc_msgSend(v21, sel_neutral);
  char v24 = static NSObject.== infix(_:_:)();

  uint64_t v103 = v16;
  uint64_t v92 = v14;
  if ((v24 & 1) != 0)
  {
    uint64_t v25 = v19;
    uint64_t v26 = v11;
    uint64_t v27 = v14;
    uint64_t v28 = v22;
    uint64_t v29 = v104;

    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    uint64x2_t v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
    goto LABEL_57;
  }

  id v43 = objc_msgSend(v21, sel_feminine);
  char v44 = static NSObject.== infix(_:_:)();

  if ((v44 & 1) != 0)
  {
    uint64_t v25 = v19;
    uint64_t v26 = v11;
    uint64_t v27 = v14;
    Swift::Bool v45 = v22;
    uint64_t v29 = v104;

    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    uint64x2_t v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    uint64_t v42 = 1LL;
    goto LABEL_57;
  }

  id v46 = objc_msgSend(v21, sel_masculine);
  char v47 = static NSObject.== infix(_:_:)();

  if ((v47 & 1) != 0)
  {
    uint64_t v25 = v19;
    uint64_t v26 = v11;
    uint64_t v27 = v14;
    uint64_t v48 = v22;
    uint64_t v29 = v104;

    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    uint64x2_t v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    uint64_t v42 = 2LL;
    goto LABEL_57;
  }

  id v49 = objc_msgSend(v21, sel_currentUser);
  char v50 = static NSObject.== infix(_:_:)();

  if ((v50 & 1) != 0)
  {
    uint64_t v25 = v19;
    uint64_t v26 = v11;
    uint64_t v27 = v14;
    uint64_t v51 = v22;
    uint64_t v29 = v104;

    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    uint64x2_t v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    uint64_t v42 = 3LL;
    goto LABEL_57;
  }

  id v52 = objc_msgSend(v22, sel_languageIdentifier);
  id v89 = v22;
  if (v52)
  {
    uint64_t v53 = v52;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v52);

    MEMORY[0x1895F8858](v54);
    LODWORD(v119) = 0;
    String.utf8CString.getter();
    int v55 = uloc_getLanguage();
    swift_release();
    uint64_t v56 = 0LL;
    if ((int)v119 > 0)
    {
      uint64_t v95 = 0LL;
    }

    else
    {
      uint64_t v95 = 0LL;
      if (v55 > 0)
      {
        v83[v55] = 0;
        uint64_t v56 = MEMORY[0x186E1B634](v83);
        uint64_t v95 = v57;
      }
    }

    uint64_t v93 = v56;
    MEMORY[0x1895F8858](v56);
    LODWORD(v119) = 0;
    String.utf8CString.getter();
    int v58 = uloc_getScript();
    uint64_t v59 = swift_release();
    uint64_t v94 = 0LL;
    if ((int)v119 > 0)
    {
      uint64_t v29 = v104;
      uint64_t v97 = 0LL;
    }

    else
    {
      uint64_t v29 = v104;
      uint64_t v97 = 0LL;
      if (v58 > 0)
      {
        v83[v58] = 0;
        uint64_t v59 = MEMORY[0x186E1B634](v83);
        uint64_t v94 = v59;
        uint64_t v97 = v60;
      }
    }

    MEMORY[0x1895F8858](v59);
    LODWORD(v119) = 0;
    String.utf8CString.getter();
    int v61 = uloc_getCountry();
    swift_release();
    uint64_t v62 = 0LL;
    uint64_t v30 = v93;
    uint64_t v63 = 0LL;
    if ((int)v119 <= 0 && v61 > 0)
    {
      v83[v61] = 0;
      uint64_t v62 = MEMORY[0x186E1B634](v83, 0LL);
    }

    uint64_t v87 = v62;
    uint64_t v88 = v63;
    uint64_t v25 = v19;
    swift_bridgeObjectRelease();
    uint64_t v31 = (uint64_t)v95;
    uint64_t v26 = v11;
    if (v95)
    {
      Swift::String v65 = String.lowercased()();
      __int128 v64 = v65._object;
      uint64_t v86 = v65._countAndFlagsBits;
    }

    else
    {
      uint64_t v30 = 0LL;
      uint64_t v86 = 0LL;
      __int128 v64 = 0LL;
    }

    uint64_t v27 = v92;
    uint64_t v34 = v94;
    uint64_t v94 = (uint64_t)v64;
    if (v97)
    {
      uint64_t v119 = v34;
      uint64_t v120 = v97;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v66 = String._capitalized()();
      uint64_t v93 = v66._countAndFlagsBits;
      uint64_t v96 = v66._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v88)
      {
LABEL_44:
        Swift::String v67 = String.uppercased()();
        uint64_t v84 = v67._object;
        uint64_t v85 = v67._countAndFlagsBits;
        goto LABEL_47;
      }
    }

    else
    {
      uint64_t v34 = 0LL;
      uint64_t v93 = 0LL;
      uint64_t v96 = 0LL;
      if (v88) {
        goto LABEL_44;
      }
    }

    uint64_t v87 = 0LL;
    uint64_t v88 = 0LL;
    uint64_t v84 = 0LL;
    uint64_t v85 = 0LL;
    goto LABEL_47;
  }

  uint64_t v25 = v19;
  uint64_t v26 = v11;
  uint64_t v27 = v14;
  uint64_t v29 = v104;
  uint64_t v30 = 0LL;
  uint64_t v86 = 0LL;
  uint64_t v87 = 0LL;
  uint64_t v93 = 0LL;
  uint64_t v94 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v96 = 0LL;
  uint64_t v97 = 0LL;
  uint64_t v88 = 0LL;
  uint64_t v84 = 0LL;
  uint64_t v85 = 0LL;
  uint64_t v31 = 1LL;
LABEL_47:
  uint64_t v68 = objc_msgSend(v89, sel_pronouns, v84, v85);
  if (v68)
  {
    unint64_t v69 = v68;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v70 = swift_dynamicCastClass();
    unint64_t v71 = v69;
    if (v70)
    {
      unint64_t v71 = *(void **)(v70 + 24);
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v95 = v71;
    uint64_t v72 = swift_dynamicCastClass();
    if (v72)
    {
      unint64_t v73 = v72;
    }

    else
    {
      swift_unknownObjectRelease();
      uint64_t v95 = objc_msgSend(v69, sel_copy);
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      unint64_t v73 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }

    uint64_t v95 = specialized Sequence.compactMap<A>(_:)(v73);
    LOBYTE(v68) = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v95 = (void *)MEMORY[0x18961AFE8];
  }

  uint64_t v35 = v97;
  if (v31 == 1)
  {
    __break(1u);
    return (char)v68;
  }

  uint64_t v32 = v86;
  uint64_t v38 = v87;
  uint64_t v36 = v93;
  uint64_t v33 = v94;
  uint64_t v39 = v88;
  uint64_t v42 = (uint64_t)v95;
  uint64x2_t v37 = v96;
  uint64_t v41 = (uint64_t)v84;
  uint64_t v40 = v85;
LABEL_57:
  uint64_t v95 = (void *)v31;
  uint64_t v96 = v37;
  uint64_t v93 = v30;
  uint64_t v94 = v34;
  uint64_t v97 = v35;
  uint64_t v119 = v30;
  uint64_t v120 = v31;
  uint64_t v121 = v32;
  uint64_t v122 = v33;
  uint64_t v123 = v34;
  uint64_t v124 = v35;
  uint64_t v125 = v36;
  uint64_t v126 = v37;
  uint64_t v127 = v38;
  uint64_t v128 = v39;
  uint64_t v129 = v40;
  uint64_t v130 = v41;
  uint64_t v131 = v42;
  *(void *)&__int128 v108 = v27;
  *((void *)&v108 + 1) = v29;
  uint64_t v109 = countAndFlagsBits;
  uint64_t v110 = object;
  uint64_t v111 = v103;
  uint64_t v112 = v105;
  uint64_t v90 = v25;
  uint64_t v91 = v26;
  uint64_t v113 = v25;
  Swift::String v114 = v100;
  uint64_t v115 = v26;
  uint64_t v116 = v106;
  uint64_t v117 = v99;
  os_log_type_t v118 = v98;
  uint64_t v74 = v38;
  uint64_t v75 = v40;
  unint64_t v76 = v42;
  uint64_t v77 = v32;
  uint64_t v78 = v33;
  uint64_t v79 = v39;
  uint64_t v80 = v41;
  char v81 = TermOfAddress.isSupportedInLanguage(_:)(&v108);
  outlined consume of TermOfAddress._TermOfAddress( v93,  (uint64_t)v95,  v77,  v78,  v94,  v97,  v36,  (uint64_t)v96,  v74,  v79,  v75,  v80,  v76);
  outlined consume of Locale.LanguageCode?(v92, v104);
  outlined consume of Locale.LanguageCode?(v103, v105);
  outlined consume of Locale.LanguageCode?(v91, v106);
  LOBYTE(v68) = v81 & 1;
  return (char)v68;
}

Foundation::Morphology_optional __swiftcall NSTermOfAddress.morphologyForLanguage(_:)(Swift::String a1)
{
  uint64_t v3 = v1;
  uint64_t v120 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v5 = swift_release();
  uint64_t v94 = 0LL;
  uint64_t v6 = 0LL;
  if (Language > 0)
  {
    v95[Language] = 0;
    uint64_t v5 = MEMORY[0x186E1B634](v95);
    uint64_t v94 = v5;
    uint64_t v6 = v7;
  }

  MEMORY[0x1895F8858](v5);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v9 = 0LL;
  uint64_t v80 = v3;
  uint64_t v10 = 0LL;
  if ((int)v107 <= 0 && Script > 0)
  {
    v71[Script] = 0;
    uint64_t v9 = MEMORY[0x186E1B634](v71, 0LL);
  }

  uint64_t v93 = v10;
  uint64_t v11 = v9;
  MEMORY[0x1895F8858](v9);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  if ((int)v107 <= 0 && Country > 0)
  {
    v71[Country] = 0;
    uint64_t v13 = MEMORY[0x186E1B634](v71);
    uint64_t v14 = v15;
  }

  swift_bridgeObjectRelease();
  if (v6)
  {
    Swift::String v16 = String.lowercased()();
    unint64_t object = v16._object;
    uint64_t countAndFlagsBits = v16._countAndFlagsBits;
  }

  else
  {
    uint64_t v94 = 0LL;
    unint64_t object = 0LL;
    uint64_t countAndFlagsBits = 0LL;
  }

  uint64_t v17 = v11;
  if (v93)
  {
    uint64_t v107 = v11;
    uint64_t v108 = v93;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v18 = String._capitalized()();
    uint64_t v88 = v18._object;
    uint64_t v89 = v18._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_14:
      Swift::String v19 = String.uppercased()();
      uint64_t v85 = v19._object;
      uint64_t v86 = v19._countAndFlagsBits;
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v17 = 0LL;
    uint64_t v88 = 0LL;
    uint64_t v89 = 0LL;
    if (v14) {
      goto LABEL_14;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v85 = 0LL;
  uint64_t v86 = 0LL;
LABEL_17:
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSTermOfAddress);
  Swift::String v20 = (void *)objc_opt_self();
  id v21 = v2;
  id v22 = objc_msgSend(v20, sel_neutral);
  char v23 = static NSObject.== infix(_:_:)();

  uint64_t v92 = v13;
  uint64_t v87 = v14;
  if ((v23 & 1) != 0)
  {

    char v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    goto LABEL_55;
  }

  id v37 = objc_msgSend(v20, sel_feminine);
  char v38 = static NSObject.== infix(_:_:)();

  if ((v38 & 1) != 0)
  {

    char v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 1LL;
    goto LABEL_55;
  }

  id v39 = objc_msgSend(v20, sel_masculine);
  char v40 = static NSObject.== infix(_:_:)();

  if ((v40 & 1) != 0)
  {

    char v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 2LL;
    goto LABEL_55;
  }

  id v41 = objc_msgSend(v20, sel_currentUser);
  char v42 = static NSObject.== infix(_:_:)();

  if ((v42 & 1) != 0)
  {

    char v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 3LL;
    goto LABEL_55;
  }

  id v43 = objc_msgSend(v21, sel_languageIdentifier);
  char v24 = v43;
  if (v43)
  {
    uint64_t v84 = v21;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v43);

    MEMORY[0x1895F8858](v44);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    int v45 = uloc_getLanguage();
    swift_release();
    uint64_t v46 = 0LL;
    char v47 = 0LL;
    if ((int)v107 <= 0 && v45 > 0)
    {
      v71[v45] = 0;
      uint64_t v46 = MEMORY[0x186E1B634](v71, 0LL);
    }

    v83 = v47;
    char v81 = (void *)v46;
    MEMORY[0x1895F8858](v46);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    int v48 = uloc_getScript();
    uint64_t v49 = swift_release();
    uint64_t v50 = 0LL;
    uint64_t v51 = 0LL;
    if ((int)v107 <= 0 && v48 > 0)
    {
      v71[v48] = 0;
      uint64_t v49 = MEMORY[0x186E1B634](v71, 0LL);
      uint64_t v50 = v49;
    }

    uint64_t v82 = v51;
    MEMORY[0x1895F8858](v49);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    int v52 = uloc_getCountry();
    swift_release();
    uint64_t v53 = 0LL;
    if ((int)v107 > 0)
    {
      uint64_t v76 = 0LL;
      id v21 = v84;
    }

    else
    {
      uint64_t v76 = 0LL;
      id v21 = v84;
      if (v52 > 0)
      {
        v71[v52] = 0;
        uint64_t v53 = MEMORY[0x186E1B634](v71);
        uint64_t v76 = v54;
      }
    }

    uint64_t v77 = v53;
    swift_bridgeObjectRelease();
    uint64_t v25 = (uint64_t)v83;
    if (v83)
    {
      char v24 = v81;
      Swift::String v55 = String.lowercased()();
      uint64_t v75 = v55._countAndFlagsBits;
      uint64_t v84 = v55._object;
    }

    else
    {
      char v24 = 0LL;
      uint64_t v75 = 0LL;
      uint64_t v84 = 0LL;
    }

    uint64_t v28 = v50;
    uint64_t v29 = v82;
    if (v82)
    {
      uint64_t v107 = v28;
      uint64_t v108 = v82;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v56 = String._capitalized()();
      char v81 = (void *)v56._countAndFlagsBits;
      uint64_t v74 = v56._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v33 = v76;
      if (v76)
      {
LABEL_42:
        Swift::String v57 = String.uppercased()();
        uint64_t v72 = v57._object;
        uint64_t v73 = v57._countAndFlagsBits;
        goto LABEL_45;
      }
    }

    else
    {
      uint64_t v28 = 0LL;
      char v81 = 0LL;
      uint64_t v74 = 0LL;
      uint64_t v33 = v76;
      if (v76) {
        goto LABEL_42;
      }
    }

    uint64_t v77 = 0LL;
    uint64_t v72 = 0LL;
    uint64_t v73 = 0LL;
    goto LABEL_45;
  }

  uint64_t v74 = 0LL;
  uint64_t v75 = 0LL;
  uint64_t v84 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  char v81 = 0LL;
  uint64_t v77 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v72 = 0LL;
  uint64_t v73 = 0LL;
  uint64_t v25 = 1LL;
LABEL_45:
  int v58 = objc_msgSend(v21, sel_pronouns, v72, v73);
  if (v58)
  {
    int v61 = v58;
    uint64_t v76 = v33;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v62 = swift_dynamicCastClass();
    uint64_t v63 = v61;
    if (v62)
    {
      uint64_t v63 = *(void **)(v62 + 24);
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    v83 = v63;
    uint64_t v64 = swift_dynamicCastClass();
    if (v64)
    {
      unint64_t v65 = v64;
    }

    else
    {
      swift_unknownObjectRelease();
      v83 = objc_msgSend(v61, sel_copy);
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      unint64_t v65 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }

    v83 = specialized Sequence.compactMap<A>(_:)(v65);
    int v58 = (void *)swift_bridgeObjectRelease();
    uint64_t v33 = v76;
  }

  else
  {
    v83 = (void *)MEMORY[0x18961AFE8];
  }

  if (v25 == 1)
  {
    __break(1u);
    goto LABEL_57;
  }

  uint64_t v32 = v77;
  uint64_t v31 = (uint64_t)v74;
  uint64_t v26 = v75;
  uint64_t v36 = (uint64_t)v83;
  uint64_t v27 = v84;
  uint64_t v30 = (uint64_t)v81;
  uint64_t v35 = (uint64_t)v72;
  uint64_t v34 = v73;
LABEL_55:
  char v81 = v24;
  uint64_t v82 = v29;
  v83 = (void *)v25;
  uint64_t v84 = v27;
  uint64_t v77 = v28;
  uint64_t v78 = v6;
  uint64_t v107 = (uint64_t)v24;
  uint64_t v108 = v25;
  uint64_t v109 = v26;
  uint64_t v110 = v27;
  uint64_t v111 = v28;
  uint64_t v112 = v29;
  uint64_t v113 = v30;
  uint64_t v114 = v31;
  uint64_t v115 = v32;
  uint64_t v116 = v33;
  uint64_t v117 = v34;
  uint64_t v118 = v35;
  uint64_t v119 = v36;
  *(void *)&__int128 v96 = v94;
  *((void *)&v96 + 1) = v6;
  uint64_t v97 = countAndFlagsBits;
  id v98 = object;
  uint64_t v99 = v17;
  uint64_t v79 = v17;
  uint64_t v100 = v93;
  uint64_t v101 = v89;
  id v102 = v88;
  uint64_t v103 = v92;
  uint64_t v104 = v87;
  uint64_t v105 = v86;
  uint64_t v106 = v85;
  uint64_t v66 = v32;
  uint64_t v67 = v34;
  unint64_t v68 = v36;
  uint64_t v69 = v26;
  uint64_t v70 = v30;
  TermOfAddress.morphology(for:)(&v96, v80);
  outlined consume of TermOfAddress._TermOfAddress( (uint64_t)v81,  (uint64_t)v83,  v69,  (uint64_t)v84,  v77,  v82,  v70,  v31,  v66,  v33,  v67,  v35,  v68);
  outlined consume of Locale.LanguageCode?(v94, v78);
  outlined consume of Locale.LanguageCode?(v79, v93);
  int v58 = (void *)outlined consume of Locale.LanguageCode?(v92, v87);
LABEL_57:
  *(_DWORD *)&result.value.grammaticalCase.value = v60;
  result.value.definiteness.value = BYTE4(v60);
  result.value.customPronouns._rawValue = v59;
  *(void *)&result.value.grammaticalGender.value = v58;
  return result;
}

uint64_t PredicateExpressions.UnaryMinus.wrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.UnaryMinus.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t PredicateExpressions.UnaryMinus.evaluate(_:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v13[1] = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v9 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v11 = (char *)v13 - v10;
  uint64_t v14 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v5 + 16))(&v14, v6, v5, v9);
  if (!v3)
  {
    dispatch thunk of RawRepresentable.init(rawValue:)();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.UnaryMinus<A>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.UnaryMinus.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_UnaryMinus<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, a1);
}

uint64_t PredicateExpressions.UnaryMinus.description.getter()
{
  v0._unint64_t object = (void *)0x80000001839D06E0LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 41LL;
  v1._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 0LL;
}

uint64_t PredicateExpressions.UnaryMinus<>.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.UnaryMinus<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v24 = *(void *)(a2 - 8);
  uint64_t v25 = a3;
  MEMORY[0x1895F8858](a1);
  uint64_t v27 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PredicateExpressions.UnaryMinus(0LL, v8, v9, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v19 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    Swift::String v20 = v14;
    uint64_t v21 = v12;
    uint64_t v22 = v11;
    uint64_t v15 = v24;
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    Swift::String v16 = v27;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v16, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v23, v17, v22);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for PredicateExpressions.UnaryMinus( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.UnaryMinus);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.UnaryMinus<A>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.UnaryMinus<A>);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v6 = *(void *)(v5 + 24);
  v10[0] = v7;
  v10[1] = v6;
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.UnaryMinus<A>, a2, v10);
  v9[0] = v7;
  v9[1] = v6;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.UnaryMinus<A>, a2, v9);
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.UnaryMinus<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.UnaryMinus<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.UnaryMinus<A>( void *a1)
{
  return PredicateExpressions.UnaryMinus<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.UnaryMinus(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183304688 + 4 * byte_1838169E0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.UnaryMinus( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

void __ParseOldStylePropertyList(utf16:)( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (String.UTF16View.count.getter() < 1)
  {
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    swift_allocError();
    void *v10 = 0xD000000000000031LL;
    v10[1] = 0x80000001839D0700LL;
    swift_willThrow();
    return;
  }

  unint64_t v60 = a1;
  unint64_t v61 = a2;
  __int128 v62 = xmmword_183816B10;
  swift_bridgeObjectRetain();
  if ((advanceToNonSpace(_:)(&v60) & 1) == 0)
  {
    *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_bridgeObjectRelease();
    *(void *)a3 = MEMORY[0x18961AFF0];
    return;
  }

  if ((advanceToNonSpace(_:)(&v60) & 1) != 0)
  {
    unsigned __int16 v6 = specialized _ParseInfo.currChar.getter(a1, a2, v62);
    _ParseInfo.advance()();
    switch(v6)
    {
      case '""':
      case '\'':
        uint64_t v7 = parseQuotedPlistString(_:quote:)((uint64_t)&v60, v6);
        if (!v8) {
          goto LABEL_12;
        }
        goto LABEL_6;
      case '#':
      case '$':
      case '%':
      case '&':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
        goto LABEL_24;
      case '(':
        uint64_t v35 = parsePlistArray(_:depth:)((uint64_t)&v60, 0);
        if (!v35) {
          goto LABEL_12;
        }
        uint64_t v19 = v35;
        Swift::String v20 = &demangling cache variable for type metadata for [Any];
        goto LABEL_41;
      case '<':
        uint64_t v7 = parsePlistData(_:)((uint64_t)&v60);
        if (v8 >> 60 == 15) {
          goto LABEL_12;
        }
        BOOL v9 = &type metadata for Data;
        goto LABEL_44;
      default:
        if (v6 != 123)
        {
LABEL_24:
          if ((unsigned __int16)(v6 - 58) > 0xFFF5u
            || (unsigned __int16)((v6 & 0xFFDF) - 91) > 0xFFE5u
            || v6 - 36 <= 0x3B && ((1LL << (v6 - 36)) & 0x800000000400E01LL) != 0)
          {
            _ParseInfo.retreat()();
            unint64_t v30 = v62;
            uint64_t v31 = HIBYTE(a2) & 0xF;
            if ((a2 & 0x2000000000000000LL) == 0) {
              uint64_t v31 = a1 & 0xFFFFFFFFFFFFLL;
            }
            unint64_t v32 = 4 * v31;
            unint64_t v33 = (unint64_t)v62 >> 14;
            unint64_t v53 = (unint64_t)v62 >> 14;
            uint64_t v63 = v62;
            do
            {
              unsigned __int16 v34 = specialized _ParseInfo.currChar.getter(a1, a2, v30);
              if ((unsigned __int16)(v34 - 58) <= 0xFFF5u
                && (unsigned __int16)((v34 & 0xFFDF) - 91) <= 0xFFE5u
                && (v34 - 36 > 0x3B || ((1LL << (v34 - 36)) & 0x800000000400E01LL) == 0))
              {
                break;
              }

              _ParseInfo.advance()();
              unint64_t v30 = v62;
              unint64_t v33 = (unint64_t)v62 >> 14;
            }

            while ((unint64_t)v62 >> 14 < v32);
            if (v33 == v53)
            {
LABEL_38:
              lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
              uint64_t v12 = swift_allocError();
              unsigned int v13 = "Unexpected EOF while parsing string";
              unint64_t v14 = 0xD000000000000023LL;
              goto LABEL_10;
            }

            if (v33 < v53)
            {
              __break(1u);
              JUMPOUT(0x183305050LL);
            }

            uint64_t v48 = MEMORY[0x186E1B8D4](v63, v30, a1, a2);
            uint64_t v7 = MEMORY[0x186E1B928](v48);
            if (v8)
            {
LABEL_6:
              BOOL v9 = (ValueMetadata *)MEMORY[0x189617FA8];
LABEL_44:
              *((void *)&v59 + 1) = v9;
              *(void *)&__int128 v58 = v7;
              *((void *)&v58 + 1) = v8;
              break;
            }

            __break(1u);
          }

          _ParseInfo.retreat()();
          _StringGuts.grow(_:)(38LL);
          swift_bridgeObjectRelease();
          *(void *)&__int128 v56 = 0xD000000000000018LL;
          *((void *)&v56 + 1) = 0x80000001839D07D0LL;
          lazy protocol witness table accessor for type UInt16 and conformance UInt16();
          v49._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v49);
          swift_bridgeObjectRelease();
          v50._uint64_t countAndFlagsBits = 0x6E696C2074612027LL;
          v50._unint64_t object = (void *)0xEA00000000002065LL;
          String.append(_:)(v50);
          *(void *)&__int128 v54 = specialized lineNumberStrings(_:)(a1, a2, v62);
          v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v51);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
          uint64_t v12 = swift_allocError();
          *int v52 = v56;
          goto LABEL_11;
        }

        uint64_t v18 = parsePlistDict(_:depth:)((uint64_t)&v60);
        if (!v18) {
          goto LABEL_12;
        }
        uint64_t v19 = v18;
        Swift::String v20 = &demangling cache variable for type metadata for [String : Any];
LABEL_41:
        *((void *)&v59 + 1) = __swift_instantiateConcreteTypeFromMangledName(v20);
        *(void *)&__int128 v58 = v19;
        break;
    }
  }

  else
  {
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v12 = swift_allocError();
    unsigned int v13 = "Unexpected EOF while parsing plist";
    unint64_t v14 = 0xD000000000000022LL;
LABEL_10:
    *unsigned int v11 = v14;
    v11[1] = (unint64_t)(v13 - 32) | 0x8000000000000000LL;
LABEL_11:

    *((void *)&v62 + 1) = v12;
LABEL_12:
    __int128 v58 = 0u;
    __int128 v59 = 0u;
  }

  outlined init with copy of Any?((uint64_t)&v58, (uint64_t)&v56);
  uint64_t v15 = *((void *)&v57 + 1);
  outlined destroy of Any?((uint64_t)&v56);
  if (!v15 || (advanceToNonSpace(_:)(&v60) & 1) == 0) {
    goto LABEL_47;
  }
  outlined init with copy of Any?((uint64_t)&v58, (uint64_t)&v56);
  if (!*((void *)&v57 + 1))
  {
    outlined destroy of Any?((uint64_t)&v56);
    goto LABEL_23;
  }

  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    *(void *)&__int128 v56 = 0LL;
    *((void *)&v56 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v56 = 0xD000000000000019LL;
    *((void *)&v56 + 1) = 0x80000001839D07B0LL;
    unint64_t v21 = v60;
    unint64_t v22 = v61;
    __int128 v23 = v62;
    swift_bridgeObjectRetain();
    id v24 = *((id *)&v23 + 1);
    unint64_t v25 = specialized lineNumberStrings(_:)(v21, v22, v23);
    swift_bridgeObjectRelease();

    *(void *)&__int128 v54 = v25;
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    __int128 v27 = v56;
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v28 = swift_allocError();
    _OWORD *v29 = v27;
    outlined destroy of Any?((uint64_t)&v58);

    *((void *)&v62 + 1) = v28;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    goto LABEL_47;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();

  unint64_t v60 = a1;
  unint64_t v61 = a2;
  __int128 v62 = xmmword_183816B10;
  uint64_t v16 = parsePlistDictContent(_:depth:)((uint64_t)&v60, 0);
  if (v16)
  {
    uint64_t v17 = v16;
    *((void *)&v57 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&__int128 v56 = v17;
    outlined destroy of Any?((uint64_t)&v58);
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v58);
    __int128 v56 = 0u;
    __int128 v57 = 0u;
  }

  outlined init with take of Any?((uint64_t)&v56, (uint64_t)&v58);
LABEL_47:
  outlined init with copy of Any?((uint64_t)&v58, (uint64_t)&v54);
  if (v55)
  {
    outlined destroy of Any?((uint64_t)&v58);
    outlined init with take of Any(&v54, &v56);
    outlined init with take of Any(&v56, (_OWORD *)a3);
    swift_bridgeObjectRelease();
    uint64_t v36 = (void *)*((void *)&v62 + 1);
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v54);
    id v37 = (void *)*((void *)&v62 + 1);
    if (*((void *)&v62 + 1))
    {
      char v38 = (void *)*((void *)&v62 + 1);
    }

    else
    {
      *(void *)&__int128 v56 = 0LL;
      *((void *)&v56 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(50LL);
      swift_bridgeObjectRelease();
      *(void *)&__int128 v56 = 0xD000000000000030LL;
      *((void *)&v56 + 1) = 0x80000001839D0770LL;
      unint64_t v40 = v60;
      unint64_t v39 = v61;
      unint64_t v41 = v62;
      swift_bridgeObjectRetain();
      unint64_t v42 = specialized lineNumberStrings(_:)(v40, v39, v41);
      swift_bridgeObjectRelease();
      *(void *)&__int128 v54 = v42;
      v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      uint64_t v45 = *((void *)&v56 + 1);
      uint64_t v44 = v56;
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      swift_allocError();
      char v38 = 0LL;
      *uint64_t v46 = v44;
      v46[1] = v45;
      id v37 = (void *)*((void *)&v62 + 1);
    }

    id v47 = v38;
    swift_willThrow();
    outlined destroy of Any?((uint64_t)&v58);
    swift_bridgeObjectRelease();
    uint64_t v36 = v37;
  }
}

unint64_t _ParseInfo.advance()()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v4 = ((unint64_t)*v0 >> 59) & 1;
  if ((v1 & 0x1000000000000000LL) == 0) {
    LOBYTE(v4) = 1;
  }
  if ((v0[2] & 0xC) == 4LL << v4) {
    unint64_t v3 = _StringGuts._slowEnsureMatchingEncoding(_:)(v3, *v0, v0[1]);
  }
  unint64_t v5 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000LL) == 0) {
    unint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v6 = v3 >> 16;
  if (v3 >> 16 >= v5)
  {
    __break(1u);
    goto LABEL_23;
  }

  if ((v1 & 0x1000000000000000LL) != 0)
  {
LABEL_23:
    unint64_t result = MEMORY[0x186E1B868]();
    goto LABEL_29;
  }

  uint64_t v7 = (v1 >> 62) & 1;
  if ((v1 & 0x2000000000000000LL) == 0) {
    LOBYTE(v7) = v2 < 0;
  }
  if ((v7 & 1) == 0)
  {
    if ((v3 & 0xC001) != 0)
    {
      if ((v1 & 0x2000000000000000LL) == 0)
      {
LABEL_15:
        if ((v2 & 0x1000000000000000LL) != 0)
        {
          LODWORD(v9) = *(unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32 + v6);
          if ((v9 & 0x80) != 0) {
            goto LABEL_17;
          }
LABEL_26:
          uint64_t v9 = 1LL;
          goto LABEL_27;
        }

        unint64_t v13 = v3;
        unint64_t v12 = v6;
        uint64_t v9 = _StringObject.sharedUTF8.getter();
        unint64_t v3 = v13;
        LODWORD(v9) = *(unsigned __int8 *)(v9 + v12);
        if ((v9 & 0x80) == 0) {
          goto LABEL_26;
        }
LABEL_17:
        LODWORD(v9) = __clz(v9 ^ 0xFF) - 24;
        if ((_DWORD)v9 == 4)
        {
          if ((v3 & 0xC000) == 0)
          {
            unsigned __int16 v10 = 16388;
LABEL_28:
            unint64_t result = v3 & 0xFFFFFFFFFFFF0000LL | v10;
            goto LABEL_29;
          }

          uint64_t v9 = 4LL;
        }

        else
        {
          uint64_t v9 = v9;
        }

void _ParseInfo.retreat()()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = (*(void *)v0 >> 59) & 1LL;
  if ((v2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v4) = 1;
  }
  if ((*(void *)(v0 + 16) & 0xCLL) != 4LL << v4)
  {
    if (v3 >= 0x4000) {
      goto LABEL_5;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  unint64_t v3 = _StringGuts._slowEnsureMatchingEncoding(_:)(*(void *)(v0 + 16), *(void *)v0, *(void *)(v0 + 8));
  if (v3 < 0x4000) {
    goto LABEL_23;
  }
LABEL_5:
  uint64_t v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v5 < v3 >> 14) {
    goto LABEL_24;
  }
  if ((v2 & 0x1000000000000000LL) != 0)
  {
LABEL_25:
    unint64_t v7 = MEMORY[0x186E1B874](v3, v1, v2);
    goto LABEL_21;
  }

  uint64_t v6 = (v2 >> 62) & 1;
  if ((v2 & 0x2000000000000000LL) == 0) {
    LOBYTE(v6) = v1 < 0;
  }
  if ((v6 & 1) != 0)
  {
    unint64_t v7 = (v3 & 0xFFFFFFFFFFFF0000LL) - 65523;
LABEL_21:
    *(void *)(v0 + 16) = v7;
    return;
  }

  if ((v3 & 0xC000) != 0)
  {
    unint64_t v7 = v3 & 0xFFFFFFFFFFFF0000LL | 5;
    goto LABEL_21;
  }

  if ((v3 & 1) == 0) {
    unint64_t v3 = _StringGuts.scalarAlignSlow(_:)(v3, v1, v2) & 0xFFFFFFFFFFFFFFF2LL | 1;
  }
  Swift::Int v8 = _StringGuts.fastUTF8ScalarLength(endingAt:)(v3 >> 16);
  if (v8 == 4)
  {
    unint64_t v7 = (v3 & 0xFFFFFFFFFFFF0000LL) - 245756;
    goto LABEL_21;
  }

  if (!__OFSUB__(0LL, v8))
  {
    unint64_t v7 = (((v3 >> 16) - v8) << 16) | 5;
    goto LABEL_21;
  }

  __break(1u);
}

uint64_t advanceToNonSpace(_:)(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  uint64_t v4 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v5 = 4 * v4;
  if (4 * v4 <= v3 >> 14) {
    return 0LL;
  }
  while (1)
  {
    unsigned __int16 v8 = specialized _ParseInfo.currChar.getter(v1, v2, v3);
    _ParseInfo.advance()();
    if (v8 <= 0x1Fu)
    {
      goto LABEL_6;
    }

void parsePlistObject(_:requireObject:depth:)( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 >= 0x201)
  {
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease();
    unint64_t v27 = 0xD00000000000002FLL;
    unint64_t v28 = 0x80000001839D09F0LL;
    unint64_t v6 = *(void *)a1;
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 16);
LABEL_3:
    specialized lineNumberStrings(_:)(v6, v7, v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v10 = swift_allocError();
    *unint64_t v11 = v27;
    v11[1] = v28;
    goto LABEL_4;
  }

  if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) != 0)
  {
    unint64_t v14 = *(void *)a1;
    unint64_t v15 = *(void *)(a1 + 8);
    unsigned __int16 v16 = specialized _ParseInfo.currChar.getter(*(void *)a1, v15, *(void *)(a1 + 16));
    _ParseInfo.advance()();
    switch(v16)
    {
      case '""':
      case '\'':
        uint64_t v17 = parseQuotedPlistString(_:quote:)(a1, v16);
        if (!v18) {
          goto LABEL_5;
        }
        goto LABEL_20;
      case '#':
      case '$':
      case '%':
      case '&':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
        goto LABEL_15;
      case '(':
        uint64_t v24 = parsePlistArray(_:depth:)(a1, a3);
        if (!v24) {
          goto LABEL_5;
        }
        uint64_t v21 = v24;
        unint64_t v22 = &demangling cache variable for type metadata for [Any];
        goto LABEL_23;
      case '<':
        uint64_t v17 = parsePlistData(_:)(a1);
        if (v18 >> 60 == 15) {
          goto LABEL_5;
        }
        unint64_t v23 = &type metadata for Data;
        goto LABEL_26;
      default:
        if (v16 == 123)
        {
          uint64_t v20 = parsePlistDict(_:depth:)(a1);
          if (!v20) {
            goto LABEL_5;
          }
          uint64_t v21 = v20;
          unint64_t v22 = &demangling cache variable for type metadata for [String : Any];
LABEL_23:
          *(void *)(a4 + 24) = __swift_instantiateConcreteTypeFromMangledName(v22);
          *(void *)a4 = v21;
          return;
        }

uint64_t parsePlistDictContent(_:depth:)(uint64_t a1, int a2)
{
  uint64_t v4 = MEMORY[0x18961AFF0];
  uint64_t v48 = MEMORY[0x18961AFF0];
  if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
  {
LABEL_43:

    *(void *)(a1 + 24) = 0LL;
    return v4;
  }

  uint64_t v5 = (a2 + 1);
  BOOL v6 = a2 == -1;
  uint64_t v7 = MEMORY[0x189617FA8];
  while (1)
  {
    unsigned __int16 v8 = specialized _ParseInfo.currChar.getter(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
    unsigned __int16 v9 = v8;
    if (v8 == 39 || v8 == 34)
    {
      _ParseInfo.advance()();
      uint64_t v10 = parseQuotedPlistString(_:quote:)(a1, v9);
    }

    else
    {
      if ((unsigned __int16)(v8 - 58) <= 0xFFF5u
        && (unsigned __int16)((v8 & 0xFFDF) - 91) <= 0xFFE5u
        && (v8 - 36 > 0x3B || ((1LL << (v8 - 36)) & 0x800000000400E01LL) == 0))
      {
LABEL_42:
        uint64_t v4 = v48;
        goto LABEL_43;
      }

      uint64_t v10 = parseUnquotedPlistString(_:)(a1);
    }

    uint64_t v12 = v10;
    uint64_t v13 = v11;
    if (!v11) {
      goto LABEL_42;
    }
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&__int128 v46 = 0LL;
      *((void *)&v46 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      *(void *)&__int128 v46 = 0xD000000000000014LL;
      *((void *)&v46 + 1) = 0x80000001839D09B0LL;
      *(void *)&__int128 v44 = specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
      v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      __int128 v29 = v46;
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v26 = swift_allocError();
      *unint64_t v30 = v29;
      goto LABEL_47;
    }

    unint64_t v14 = *(void *)a1;
    unint64_t v15 = *(void *)(a1 + 8);
    unint64_t v16 = *(void *)(a1 + 16);
    if ((unsigned __int16)specialized _ParseInfo.currChar.getter(*(void *)a1, v15, v16) == 59)
    {
      uint64_t v47 = v7;
      *(void *)&__int128 v46 = v12;
      *((void *)&v46 + 1) = v13;
      swift_bridgeObjectRetain();
      goto LABEL_39;
    }

    if ((unsigned __int16)specialized _ParseInfo.currChar.getter(v14, v15, v16) != 61)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v26 = swift_allocError();
      *unint64_t v31 = 0xD000000000000014LL;
      v31[1] = 0x80000001839D09D0LL;
      goto LABEL_47;
    }

    _ParseInfo.advance()();
    if (v6) {
      break;
    }
    if (!depthIsValid(_:depth:)(a1, v5)) {
      goto LABEL_50;
    }
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
    {
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v32 = swift_allocError();
      *unint64_t v33 = 0xD000000000000022LL;
      v33[1] = 0x80000001839D0740LL;
      goto LABEL_49;
    }

    unsigned __int16 v17 = specialized _ParseInfo.currChar.getter(v14, v15, *(void *)(a1 + 16));
    _ParseInfo.advance()();
    switch(v17)
    {
      case '""':
      case '\'':
        uint64_t v18 = parseQuotedPlistString(_:quote:)(a1, v17);
        if (!v19) {
          goto LABEL_50;
        }
        goto LABEL_32;
      case '#':
      case '$':
      case '%':
      case '&':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
        goto LABEL_27;
      case '(':
        uint64_t v22 = parsePlistArray(_:depth:)(a1, v5);
        if (!v22) {
          goto LABEL_50;
        }
        uint64_t v23 = v22;
        *((void *)&v45 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
        *(void *)&__int128 v44 = v23;
        goto LABEL_38;
      case '<':
        uint64_t v18 = parsePlistData(_:)(a1);
        if (v19 >> 60 == 15) {
          goto LABEL_50;
        }
        *((void *)&v45 + 1) = &type metadata for Data;
        goto LABEL_37;
      default:
        if (v17 == 123)
        {
          uint64_t v20 = parsePlistDictContent(_:depth:)(a1, v5);
          if (!v20) {
            goto LABEL_50;
          }
          uint64_t v21 = v20;
          if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0
            || (unsigned __int16)specialized _ParseInfo.currChar.getter( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16)) != 125)
          {
            swift_bridgeObjectRelease();
            _StringGuts.grow(_:)(50LL);
            swift_bridgeObjectRelease();
            unint64_t v42 = 0xD000000000000030LL;
            unint64_t v43 = 0x80000001839D0820LL;
            unint64_t v35 = *(void *)a1;
            unint64_t v36 = *(void *)(a1 + 8);
            unint64_t v37 = *(void *)(a1 + 16);
            goto LABEL_53;
          }

          _ParseInfo.advance()();
          *((void *)&v45 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
          *(void *)&__int128 v44 = v21;
        }

        else
        {
LABEL_27:
          if ((unsigned __int16)(v17 - 58) <= 0xFFF5u
            && (unsigned __int16)((v17 & 0xFFDF) - 91) <= 0xFFE5u
            && (v17 - 36 > 0x3B || ((1LL << (v17 - 36)) & 0x800000000400E01LL) == 0))
          {
            goto LABEL_55;
          }

          _ParseInfo.retreat()();
          uint64_t v18 = parseUnquotedPlistString(_:)(a1);
          if (!v19) {
            goto LABEL_50;
          }
LABEL_32:
          *((void *)&v45 + 1) = v7;
LABEL_37:
          *(void *)&__int128 v44 = v18;
          *((void *)&v44 + 1) = v19;
        }

BOOL depthIsValid(_:depth:)(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x201)
  {
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease();
    specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v5 = swift_allocError();
    void *v6 = 0xD00000000000002FLL;
    v6[1] = 0x80000001839D09F0LL;

    *(void *)(a1 + 24) = v5;
  }

  return a2 < 0x201;
}

uint64_t parsePlistDict(_:depth:)(uint64_t a1)
{
  uint64_t v2 = parsePlistDictContent(_:depth:)();
  if (v2)
  {
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) != 0
      && (unsigned __int16)specialized _ParseInfo.currChar.getter( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16)) == 125)
    {
      _ParseInfo.advance()();
    }

    else
    {
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(50LL);
      swift_bridgeObjectRelease();
      specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v4 = swift_allocError();
      *uint64_t v5 = 0xD000000000000030LL;
      v5[1] = 0x80000001839D0820LL;

      uint64_t v2 = 0LL;
      *(void *)(a1 + 24) = v4;
    }
  }

  return v2;
}

uint64_t parsePlistArray(_:depth:)(uint64_t result, int a2)
{
  uint64_t v2 = (a2 + 1);
  if (a2 == -1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = result;
    parsePlistObject(_:requireObject:depth:)(result, 0, v2, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v4 = (void *)MEMORY[0x18961AFE8];
      while (1)
      {
        outlined init with take of Any(&v15, v17);
        outlined init with copy of Any((uint64_t)v17, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
        }
        unint64_t v6 = v4[2];
        unint64_t v5 = v4[3];
        if (v6 >= v5 >> 1) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v5 > 1),  v6 + 1,  1,  v4);
        }
        v4[2] = v6 + 1;
        outlined init with take of Any(&v15, &v4[4 * v6 + 4]);
        if ((advanceToNonSpace(_:)((unint64_t *)v3) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          *(void *)&__int128 v15 = 0LL;
          *((void *)&v15 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(33LL);
          swift_bridgeObjectRelease();
          *(void *)&__int128 v15 = 0xD00000000000001FLL;
          *((void *)&v15 + 1) = 0x80000001839D0890LL;
          specialized lineNumberStrings(_:)(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16));
          v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v7);
          swift_bridgeObjectRelease();
          __int128 v8 = v15;
          lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
          uint64_t v9 = swift_allocError();
          _OWORD *v10 = v8;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
          goto LABEL_20;
        }

        if ((unsigned __int16)specialized _ParseInfo.currChar.getter( *(void *)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16)) != 44) {
          break;
        }
        _ParseInfo.advance()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        parsePlistObject(_:requireObject:depth:)(v3, 0, v2, (uint64_t)&v15);
        if (!v16) {
          goto LABEL_13;
        }
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }

    else
    {
      uint64_t v4 = (void *)MEMORY[0x18961AFE8];
LABEL_13:
      outlined destroy of Any?((uint64_t)&v15);
    }

    if ((advanceToNonSpace(_:)((unint64_t *)v3) & 1) != 0
      && (uint64_t v11 = *(void **)(v3 + 24),
          (unsigned __int16)specialized _ParseInfo.currChar.getter( *(void *)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16)) == 41))
    {

      *(void *)(v3 + 24) = 0LL;
      _ParseInfo.advance()();
    }

    else
    {
      swift_bridgeObjectRelease();
      *(void *)&v17[0] = 0LL;
      *((void *)&v17[0] + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(45LL);
      swift_bridgeObjectRelease();
      *(void *)&v17[0] = 0xD00000000000002BLL;
      *((void *)&v17[0] + 1) = 0x80000001839D0860LL;
      *(void *)&__int128 v15 = specialized lineNumberStrings(_:)(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16));
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      __int128 v13 = v17[0];
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v9 = swift_allocError();
      *unint64_t v14 = v13;
LABEL_20:

      uint64_t v4 = 0LL;
      *(void *)(v3 + 24) = v9;
    }

    return (uint64_t)v4;
  }

  return result;
}

uint64_t parsePlistData(_:)(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  __int128 v25 = xmmword_18372EE30;
  uint64_t v2 = getDataBytes(_:bytes:)((unint64_t *)a1, (uint64_t)v24, 400LL);
  if (v2 >= 1)
  {
    uint64_t v3 = v24;
    do
    {
      uint64_t v4 = specialized Data.append<A>(contentsOf:)(0LL, v2, (uint64_t)v3, 400LL);
      MEMORY[0x1895F8858](v4);
      uint64_t v3 = v20;
      uint64_t v2 = getDataBytes(_:bytes:)((unint64_t *)a1, (uint64_t)v20, 400LL);
    }

    while (v2 > 0);
  }

  if (v2 == -2)
  {
    unint64_t v22 = 0LL;
    unint64_t v23 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(52LL);
    v5._unint64_t object = (void *)0x80000001839D08E0LL;
    v5._uint64_t countAndFlagsBits = 0xD000000000000023LL;
    String.append(_:)(v5);
    unint64_t v21 = specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = 0x6E6576656E75203BLL;
    unint64_t v8 = 0xEF6874676E656C20LL;
LABEL_14:
    String.append(_:)(*(Swift::String *)&v7);
    goto LABEL_15;
  }

  if (v2 < 0)
  {
    unint64_t v22 = 0LL;
    unint64_t v23 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    unint64_t v22 = 0xD000000000000023LL;
    unint64_t v23 = 0x80000001839D08E0LL;
    unint64_t v21 = specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v7 = 0x696C61766E69203BLL;
    unint64_t v8 = 0xED00007865682064LL;
    goto LABEL_14;
  }

  *(void *)(a1 + 24) = 0LL;
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  unint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000LL) == 0) {
    uint64_t v12 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 >> 14 < 4 * v12
    && (unsigned __int16)specialized _ParseInfo.currChar.getter( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16)) == 62)
  {
    _ParseInfo.advance()();
    return v25;
  }

  unint64_t v22 = 0LL;
  unint64_t v23 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(45LL);
  swift_bridgeObjectRelease();
  unint64_t v22 = 0xD00000000000002BLL;
  unint64_t v23 = 0x80000001839D08B0LL;
  unint64_t v21 = specialized lineNumberStrings(_:)(v9, v10, v11);
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
LABEL_15:
  unint64_t v16 = v22;
  unint64_t v17 = v23;
  lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
  uint64_t v18 = swift_allocError();
  *unint64_t v19 = v16;
  v19[1] = v17;

  *(void *)(a1 + 24) = v18;
  outlined consume of Data._Representation(v25, *((unint64_t *)&v25 + 1));
  return 0LL;
}

uint64_t parseQuotedPlistString(_:quote:)(uint64_t a1, unsigned __int16 a2)
{
  __int128 v39 = 0uLL;
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v7 = 4 * v6;
  unint64_t v8 = v4 >> 14;
  if (v4 >> 14 >= 4 * v6) {
    goto LABEL_34;
  }
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  unint64_t v37 = *(void *)(a1 + 16);
  do
  {
    unint64_t v12 = v4;
    while (1)
    {
      int v13 = (unsigned __int16)specialized _ParseInfo.currChar.getter(v5, v3, v12);
      if (v13 == a2) {
        goto LABEL_27;
      }
      if (v13 == 92) {
        break;
      }
      _ParseInfo.advance()();
      unint64_t v5 = *(void *)a1;
      unint64_t v3 = *(void *)(a1 + 8);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000LL) == 0) {
        uint64_t v14 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v7 = 4 * v14;
      unint64_t v8 = v12 >> 14;
      if (v12 >> 14 >= 4 * v14) {
        goto LABEL_27;
      }
    }

    if (!v10) {
      __int128 v39 = xmmword_183725730;
    }
    if (v8 < v4 >> 14)
    {
      __break(1u);
      goto LABEL_43;
    }

    uint64_t v15 = MEMORY[0x186E1B8D4](v4, v12, v5, v3);
    uint64_t v16 = MEMORY[0x186E1B928](v15);
    if (!v17) {
      goto LABEL_46;
    }
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    _ParseInfo.advance()();
    unint64_t v18 = *(void *)(a1 + 16);
    if (v7 <= v18 >> 14)
    {
      _StringGuts.grow(_:)(42LL);
      swift_bridgeObjectRelease();
      *(void *)&__int128 v38 = 0xD000000000000028LL;
      *((void *)&v38 + 1) = 0x80000001839D0940LL;
      unint64_t v27 = v5;
      unint64_t v28 = v3;
      unint64_t v29 = v18;
      goto LABEL_35;
    }

    unsigned __int16 v19 = specialized _ParseInfo.currChar.getter(v5, v3, *(void *)(a1 + 16));
    _ParseInfo.advance()();
    if ((unsigned __int16)(v19 - 56) <= 0xFFF7u)
    {
      switch(v19)
      {
        case 'U':
          unsigned __int16 v20 = parseU16Scalar(_:)((unint64_t *)a1);
          goto LABEL_21;
        case 'a':
        case 'b':
        case 'f':
        case 'n':
        case 'r':
        case 't':
        case 'v':
          goto LABEL_23;
        default:
          goto LABEL_22;
      }
    }

    unsigned __int16 v20 = parseOctal(startingWith:_:)(v19, a1);
LABEL_21:
    unsigned __int16 v19 = v20;
LABEL_22:
    if (v19 >> 11 == 27) {
      goto LABEL_45;
    }
LABEL_23:
    if (!*((void *)&v39 + 1)) {
      goto LABEL_47;
    }
    String.UnicodeScalarView.append(_:)();
    uint64_t v10 = *((void *)&v39 + 1);
    uint64_t v11 = v39;
    unint64_t v3 = *(void *)(a1 + 8);
    unint64_t v4 = *(void *)(a1 + 16);
    unint64_t v5 = *(void *)a1;
    uint64_t v21 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000LL) == 0) {
      uint64_t v21 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v7 = 4 * v21;
    unint64_t v8 = v4 >> 14;
    unint64_t v12 = *(void *)(a1 + 16);
  }

  while (v4 >> 14 < 4 * v21);
LABEL_27:
  if (v8 >= v7)
  {
    unint64_t v4 = v37;
LABEL_34:
    *(void *)(a1 + 16) = v4;
    _StringGuts.grow(_:)(46LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v38 = 0xD00000000000002CLL;
    *((void *)&v38 + 1) = 0x80000001839D0910LL;
    unint64_t v27 = v5;
    unint64_t v28 = v3;
    unint64_t v29 = v4;
LABEL_35:
    specialized lineNumberStrings(_:)(v27, v28, v29);
    v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v31 = swift_allocError();
    *uint64_t v32 = v38;

    *(void *)(a1 + 24) = v31;
    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v22 = *(void **)(a1 + 24);
  unint64_t v23 = v4 >> 14;
  if (v10)
  {
    if (v23 == v8) {
      goto LABEL_39;
    }
    if (v8 >= v23)
    {
      uint64_t v24 = MEMORY[0x186E1B8D4](v4, v12, v5, v3);
      uint64_t v25 = MEMORY[0x186E1B928](v24);
      if (v26)
      {
        String.append(_:)(*(Swift::String *)&v25);
        swift_bridgeObjectRelease();
        uint64_t v11 = v39;
        goto LABEL_39;
      }

uint64_t parseUnquotedPlistString(_:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)a1;
  uint64_t v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v6 = 4 * v5;
  unint64_t v7 = v3 >> 14;
  if (v3 >> 14 >= 4 * v5) {
    goto LABEL_11;
  }
  unint64_t v14 = v3 >> 14;
  uint64_t v15 = *(void *)(a1 + 16);
  do
  {
    unsigned __int16 v8 = specialized _ParseInfo.currChar.getter(v4, v2, v3);
    if ((unsigned __int16)(v8 - 58) <= 0xFFF5u
      && (unsigned __int16)((v8 & 0xFFDF) - 91) <= 0xFFE5u
      && (v8 - 36 > 0x3B || ((1LL << (v8 - 36)) & 0x800000000400E01LL) == 0))
    {
      break;
    }

    _ParseInfo.advance()();
    unint64_t v3 = *(void *)(a1 + 16);
    unint64_t v7 = v3 >> 14;
  }

  while (v3 >> 14 < v6);
  uint64_t result = v15;
  if (v7 == v14)
  {
LABEL_11:
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v10 = swift_allocError();
    *uint64_t v11 = 0xD000000000000023LL;
    v11[1] = 0x80000001839D07F0LL;

    uint64_t result = 0LL;
    *(void *)(a1 + 24) = v10;
    return result;
  }

  if (v7 >= v14)
  {
    uint64_t v12 = MEMORY[0x186E1B8D4](v15, v3, v4, v2);
    uint64_t result = MEMORY[0x186E1B928](v12);
    if (v13) {
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenStepPlistError and conformance OpenStepPlistError;
  if (!lazy protocol witness table cache variable for type OpenStepPlistError and conformance OpenStepPlistError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for OpenStepPlistError,  &type metadata for OpenStepPlistError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenStepPlistError and conformance OpenStepPlistError);
  }

  return result;
}

uint64_t parseOctal(startingWith:_:)(__int16 a1, uint64_t a2)
{
  char v2 = a1 - 48;
  if ((unsigned __int16)(a1 - 48) >= 0x100u)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    unint64_t v4 = *(void *)a2;
    unint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000LL) == 0) {
      uint64_t v6 = *(void *)a2 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v7 = 4 * v6;
    unint64_t v8 = *(void *)(a2 + 16);
    if (4 * v6 > v8 >> 14)
    {
      __int16 v9 = specialized _ParseInfo.currChar.getter(*(void *)a2, *(void *)(a2 + 8), v8);
      if ((unsigned __int16)(v9 - 56) >= 0xFFF8u)
      {
        char v2 = v9 + 8 * v2 - 48;
        _ParseInfo.advance()();
        unint64_t v10 = *(void *)(a2 + 16);
        if (v7 > v10 >> 14)
        {
          __int16 v11 = specialized _ParseInfo.currChar.getter(v4, v5, v10);
          if ((unsigned __int16)(v11 - 56) >= 0xFFF8u)
          {
            char v2 = v11 + 8 * v2 - 48;
            _ParseInfo.advance()();
          }
        }
      }
    }

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(_BYTE *)(inited + 32) = v2;
    id v13 = specialized String.init<A>(bytes:encoding:)(inited, 2LL);
    unint64_t v15 = v14;
    swift_setDeallocating();
    if (v15)
    {
      unsigned int v16 = specialized Collection.first.getter((uint64_t)v13, v15);
      swift_bridgeObjectRelease();
      if ((v16 & 0x10000) != 0) {
        return 0LL;
      }
      else {
        return v16;
      }
    }

    else
    {
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v18 = swift_allocError();
      *unsigned __int16 v19 = 0xD000000000000032LL;
      v19[1] = 0x80000001839D0970LL;

      uint64_t result = 0LL;
      *(void *)(a2 + 24) = v18;
    }
  }

  return result;
}

uint64_t parseU16Scalar(_:)(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v4 = 4 * v3;
  unint64_t v5 = a1[2];
  if (4 * v3 <= v5 >> 14) {
    return 0LL;
  }
  int v7 = specialized _ParseInfo.currChar.getter(*a1, v2, v5);
  if ((unsigned __int16)v7 <= 0x7Fu && isxdigit((unsigned __int16)v7))
  {
    _ParseInfo.advance()();
    unsigned int v8 = v7 - 87;
    else {
      uint64_t v9 = v8;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  unint64_t v10 = a1[2];
  if (v4 > v10 >> 14)
  {
    int v11 = specialized _ParseInfo.currChar.getter(v1, v2, v10);
    if ((unsigned __int16)v11 <= 0x7Fu && isxdigit((unsigned __int16)v11))
    {
      _ParseInfo.advance()();
      if ((unsigned __int16)v11 <= 0x39u)
      {
        int v12 = (unsigned __int16)(16 * v9);
        uint64_t v9 = v12 + (unsigned __int16)(v11 - 48);
        if ((v9 & 0x10000) != 0) {
          goto LABEL_41;
        }
      }

      else if ((unsigned __int16)v11 <= 0x46u)
      {
        uint64_t v9 = (16 * v9 + v11 - 55);
      }

      else
      {
        int v12 = (unsigned __int16)(16 * v9);
        uint64_t v9 = v12 + (unsigned __int16)(v11 - 87);
        if ((v9 & 0x10000) != 0) {
          goto LABEL_39;
        }
      }
    }

    unint64_t v13 = a1[2];
    if (v4 <= v13 >> 14) {
      return v9;
    }
    int v14 = specialized _ParseInfo.currChar.getter(v1, v2, v13);
    if ((unsigned __int16)v14 <= 0x7Fu && isxdigit((unsigned __int16)v14))
    {
      _ParseInfo.advance()();
      if ((unsigned __int16)v14 <= 0x39u)
      {
        int v12 = (unsigned __int16)(16 * v9);
        uint64_t v9 = v12 + (unsigned __int16)(v14 - 48);
        if ((v9 & 0x10000) != 0) {
          goto LABEL_41;
        }
      }

      else if ((unsigned __int16)v14 <= 0x46u)
      {
        uint64_t v9 = (16 * v9 + v14 - 55);
      }

      else
      {
        int v12 = (unsigned __int16)(16 * v9);
        uint64_t v9 = v12 + (unsigned __int16)(v14 - 87);
        if ((v9 & 0x10000) != 0) {
          goto LABEL_39;
        }
      }
    }

    unint64_t v15 = a1[2];
    if (v4 <= v15 >> 14) {
      return v9;
    }
    LODWORD(v1) = specialized _ParseInfo.currChar.getter(v1, v2, v15);
    _ParseInfo.advance()();
    int v12 = 16 * v9;
    int v12 = (unsigned __int16)(16 * v9);
    uint64_t v9 = v12 + (unsigned __int16)(v1 - 87);
    if ((v9 & 0x10000) == 0) {
      return v9;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    int v12 = (unsigned __int16)v12;
    uint64_t v9 = (unsigned __int16)v12 + (unsigned __int16)(v1 - 48);
    if ((v9 & 0x10000) != 0)
    {
LABEL_41:
      __break(1u);
      return (v12 + v1 - 55);
    }
  }

  return v9;
}

uint64_t getDataBytes(_:bytes:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v7 = 4 * v6;
  unint64_t v8 = a1[2];
  if (4 * v6 <= v8 >> 14 || a3 < 1) {
    return 0LL;
  }
  uint64_t v12 = 0LL;
  while (1)
  {
    while (1)
    {
      unsigned __int16 v13 = specialized _ParseInfo.currChar.getter(v4, v5, v8);
      if (v13 == 62) {
        return v12;
      }
      if (v13 >= 0x100u) {
        goto LABEL_37;
      }
      char v14 = v13;
      if ((v13 & 0xFEu) - 58 > 0xFFFFFFF5)
      {
        char v16 = -48;
        goto LABEL_21;
      }

      if ((v13 - 103) > 0xF9u)
      {
        char v16 = -87;
        goto LABEL_21;
      }

      unsigned int v15 = v13;
      uint64_t result = -1LL;
      if (v15 > 0x20 || ((1LL << v14) & 0x100002400LL) == 0) {
        return result;
      }
      _ParseInfo.advance()();
      unint64_t v8 = a1[2];
      if (v7 <= v8 >> 14) {
        return v12;
      }
    }

    char v16 = -55;
LABEL_21:
    _ParseInfo.advance()();
    unint64_t v17 = a1[2];
    if (v7 <= v17 >> 14) {
      return -2LL;
    }
    unsigned __int16 v18 = specialized _ParseInfo.currChar.getter(v4, v5, v17);
    if (v18 >= 0x100u) {
      goto LABEL_37;
    }
    if ((v18 & 0xFEu) - 58 > 0xFFFFFFF5)
    {
      char v19 = -48;
    }

    else if ((v18 - 103) > 0xF9u)
    {
      char v19 = -87;
    }

    else
    {
      char v19 = -55;
    }

    unsigned int v20 = 16 * ((v16 + v14) & 0xF) + (v19 + v18);
    if (((v20 >> 8) & 1) != 0) {
      break;
    }
    *(_BYTE *)(a2 + v12++) = v20;
    _ParseInfo.advance()();
    unint64_t v8 = a1[2];
    if (v7 <= v8 >> 14) {
      return v12;
    }
    uint64_t result = v12;
    if (v12 >= a3) {
      return result;
    }
  }

  __break(1u);
LABEL_37:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeMutableBufferPointer<UInt8>>);
  v11[3] = v8;
  v11[4] = lazy protocol witness table accessor for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>();
  uint64_t v9 = (void *)swift_allocObject();
  v11[0] = v9;
  void v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  __swift_project_boxed_opaque_existential_1(v11, v8);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t specialized _ParseInfo.currChar.getter( unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((a3 & 0xC) == 4LL << v6) {
    unint64_t v3 = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a1, a2);
  }
  unint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    unint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3 >> 16 >= v7)
  {
    __break(1u);
    return String.UTF16View._foreignSubscript(position:)();
  }

  if ((a2 & 0x1000000000000000LL) != 0) {
    return String.UTF16View._foreignSubscript(position:)();
  }
  if ((v3 & 1) == 0) {
    _StringGuts.scalarAlignSlow(_:)(v3, a1, a2);
  }
  uint64_t result = _StringGuts.fastUTF8Scalar(startingAt:)();
  if ((v3 & 0xC000) != 0x4000)
  {
    if (WORD1(result))
    {
      uint64_t v9 = (unsigned __int16)((result + 67043328) >> 10) + 55296;
      if ((v9 & 0x10000) == 0) {
        return v9;
      }
      __break(1u);
    }

    return result;
  }

  __break(1u);
  return result;
}

unint64_t specialized lineNumberStrings(_:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    uint64_t v5 = result;
    unint64_t v6 = 0LL;
    uint64_t v7 = (result >> 59) & 1;
    if ((a2 & 0x1000000000000000LL) == 0) {
      LOBYTE(v7) = 1;
    }
    uint64_t v8 = 4LL << v7;
    uint64_t v27 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (a2 >> 62) & 1;
    if ((a2 & 0x2000000000000000LL) == 0) {
      LOBYTE(v9) = (result & 0x8000000000000000LL) != 0LL;
    }
    char v30 = v9;
    unint64_t v29 = a3 >> 14;
    if (4 * v3 >= a3 >> 14) {
      uint64_t v10 = a3 >> 14;
    }
    else {
      uint64_t v10 = 4 * v3;
    }
    unint64_t v26 = v10;
    uint64_t v11 = 1LL;
    unint64_t v12 = 15LL;
    while (1)
    {
      if (v6 >= v29) {
        return v11;
      }
      unint64_t v13 = v12 & 0xC;
      unint64_t v14 = v12;
      if (v13 == v8)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
        unint64_t v14 = result;
      }

      if (v14 >> 16 >= v3)
      {
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
        return result;
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        uint64_t result = String.UTF16View._foreignSubscript(position:)();
        goto LABEL_32;
      }

      if ((v14 & 1) != 0)
      {
        if ((a2 & 0x2000000000000000LL) == 0) {
          goto LABEL_22;
        }
      }

      else
      {
        _StringGuts.scalarAlignSlow(_:)(v14, v5, a2);
        if ((a2 & 0x2000000000000000LL) == 0)
        {
LABEL_22:
          if ((v5 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          goto LABEL_27;
        }
      }

      uint64_t v31 = v5;
      uint64_t v32 = v28;
LABEL_27:
      uint64_t result = _decodeScalar(_:startingAt:)();
      if ((v14 & 0xC000) == 0x4000)
      {
        goto LABEL_40;
      }

      if (WORD1(result))
      {
        uint64_t result = (unsigned __int16)((result + 67043328) >> 10) + 55296;
        if ((result & 0x10000) != 0) {
          goto LABEL_128;
        }
      }

unint64_t lazy protocol witness table accessor for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeMutableBufferPointer<UInt8>>);
    unint64_t v2 = &protocol witness table for <A> UnsafeMutableBufferPointer<A>;
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>);
  }

  return result;
}

uint64_t sub_18330810C()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for OpenStepPlistError()
{
  return &type metadata for OpenStepPlistError;
}

uint64_t specialized ICULegacyNumberFormatter.parseAsInt<A>(_:upperBound:)( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  v16[5] = *MEMORY[0x1895F89C0];
  uint64_t v10 = String.UTF16View.distance(from:to:)();
  if (v10)
  {
    uint64_t v11 = v10;
    unint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v10, 0LL);
    uint64_t v13 = specialized Sequence._copySequenceContents(initializing:)(v16, (uint64_t)(v12 + 4), v11, a1, a2, a3, a4);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if (v13 != v11) {
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v12 = (void *)MEMORY[0x18961AFE8];
  }

  LODWORD(v16[0]) = 0;
  if (v12[2] >> 31)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  uint64_t v14 = unum_parseInt64();
  swift_release();
  if (SLODWORD(v16[0]) > 0) {
    return 0LL;
  }
  *a5 = 0LL;
  return v14;
}

uint64_t IntegerParseStrategy.init<A>(format:lenient:)@<X0>( _OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return IntegerParseStrategy.init<A>(format:lenient:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>,  a5);
}

{
  return IntegerParseStrategy.init<A>(format:lenient:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent,  a5);
}

uint64_t type metadata accessor for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerParseStrategy);
}

uint64_t IntegerParseStrategy.init<A>(format:lenient:)@<X0>( __int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v10);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for IntegerFormatStyle.Currency(0LL, a3, a4, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v15 + 16))(a5, a1, v14);
  uint64_t v16 = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, v14);
  unint64_t v17 = (int *)type metadata accessor for IntegerParseStrategy(0LL, v14, v16, a4);
  *(_BYTE *)(a5 + v17[11]) = a2;
  uint64_t v18 = v17[13];
  __int128 v21 = *a1;
  *(_OWORD *)(a5 + v18) = v21;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)a1 + *(int *)(v14 + 40),  (uint64_t)v12,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  unint64_t v19 = *(void (**)(__int128 *, uint64_t))(v15 + 8);
  swift_unknownObjectRetain();
  v19(a1, v14);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v12,  a5 + v17[12],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t IntegerParseStrategy.init<A>(format:lenient:)@<X0>( _OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12 = a5(0LL, a3, a4);
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a7, a1, v12);
  uint64_t v13 = MEMORY[0x186E20D4C](a6, v12);
  uint64_t v14 = (int *)type metadata accessor for IntegerParseStrategy(0LL, v12, v13, a4);
  *(_BYTE *)(a7 + v14[11]) = a2;
  *(_OWORD *)(a7 + v14[13]) = *a1;
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)a1 + *(int *)(v12 + 36),  a7 + v14[12],  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  return swift_storeEnumTagMultiPayload();
}

uint64_t IntegerParseStrategy.parse(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, int *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v13 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v13);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v91 - v15;
  unint64_t v107 = a3;
  if (a3 >> 14 >= a4 >> 14)
  {
    swift_getAssociatedTypeWitness();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56LL))( a6,  1LL,  1LL,  TupleTypeMetadata2);
  }

  uint64_t v105 = v17;
  uint64_t v106 = v16;
  uint64_t v99 = a1;
  unint64_t v100 = a4;
  uint64_t v101 = a2;
  uint64_t v103 = a6;
  unint64_t v19 = (uint64_t *)(v6 + a5[13]);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  char v22 = *(_BYTE *)(v6 + a5[11]);
  outlined init with copy of ICUNumberFormatter.Signature( v6 + a5[12],  (uint64_t)&v91 - v15,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v25 = v24(ObjectType, v20);
  uint64_t v27 = v26;
  uint64_t v104 = v21;
  swift_unknownObjectRelease();
  uint64_t v28 = (uint64_t *)&v18[*(int *)(v13 + 20)];
  *uint64_t v28 = v25;
  v28[1] = v27;
  v18[*(int *)(v13 + 24)] = v22;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v30 = static ICULegacyNumberFormatter.cache;
  uint64_t v29 = unk_18C5CB2B0;
  uint64_t v31 = v106;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v18,  v106,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v32 = (*(unsigned __int8 *)(v105 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
  uint64_t v102 = swift_allocObject();
  outlined init with take of ICUNumberFormatter.Signature( v31,  v102 + v32,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  uint64_t v33 = (void *)(v29 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v29 + 16, (uint64_t)v18, (uint64_t *)&v108);
  os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 24));
  swift_release();
  if (v108)
  {
    swift_release();
    goto LABEL_6;
  }

  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  uint64_t v55 = v54;
  swift_retain();
  os_unfair_lock_t v98 = (os_unfair_lock_t)(v29 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  uint64_t v56 = *(void *)(*(void *)(v29 + 16) + 16LL);
  uint64_t v97 = *(void *)(v29 + 16);
  if (v30 >= v56) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v33 = MEMORY[0x18961AFF0];
  }
  uint64_t v57 = v55;
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v112[0] = *v33;
  uint64_t v59 = v112[0];
  *uint64_t v33 = 0x8000000000000000LL;
  unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18);
  uint64_t v62 = *(void *)(v59 + 16);
  BOOL v63 = (v60 & 1) == 0;
  uint64_t v64 = v62 + v63;
  if (__OFADD__(v62, v63))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v59 + 24) < v64)
    {
      char v65 = v60;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v64,  isUniquelyReferenced_nonNull_native);
      uint64_t v66 = v112[0];
      unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18);
      if ((v65 & 1) != (v68 & 1)) {
        goto LABEL_65;
      }
      unint64_t v61 = v67;
      LOBYTE(v60) = v65;
LABEL_23:
      if ((v60 & 1) != 0)
      {
LABEL_24:
        uint64_t v69 = *(void *)(v66 + 56);
        uint64_t v70 = 8 * v61;
        swift_release();
        *(void *)(v69 + v70) = v57;
LABEL_62:
        *(void *)(v29 + 16) = v66;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v98);
        swift_release_n();
        swift_bridgeObjectRelease();
LABEL_6:
        outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v18,  type metadata accessor for ICULegacyNumberFormatter.Signature);
        swift_unknownObjectRelease();
        swift_release();
        unint64_t v34 = String.subscript.getter();
        unint64_t v36 = v35;
        uint64_t v38 = v37;
        unint64_t v40 = v39;
        v112[0] = 0LL;
        uint64_t v41 = specialized ICULegacyNumberFormatter.parseAsInt<A>(_:upperBound:)(v34, v35, v37, v39, v112);
        if ((v42 & 1) != 0)
        {
          uint64_t v49 = specialized ICULegacyNumberFormatter.parseAsInt<A>(_:upperBound:)(v34, v36, v38, v40, v112);
          if ((v50 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_getAssociatedTypeWitness();
            uint64_t v53 = swift_getTupleTypeMetadata2();
            return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL))( v103,  1LL,  1LL,  v53);
          }

          uint64_t v51 = v49;
          unint64_t v108 = v34;
          unint64_t v109 = v36;
          uint64_t v110 = v38;
          unint64_t v111 = v40;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          uint64_t v52 = String.Index.init<A>(utf16Offset:in:)();
          swift_getAssociatedTypeWitness();
          uint64_t v45 = swift_getTupleTypeMetadata2();
          __int128 v46 = v103;
          uint64_t *v103 = v52;
          unint64_t v108 = v51;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          dispatch thunk of BinaryInteger.init<A>(clamping:)();
        }

        else
        {
          uint64_t v43 = v41;
          unint64_t v108 = v34;
          unint64_t v109 = v36;
          uint64_t v110 = v38;
          unint64_t v111 = v40;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          uint64_t v44 = String.Index.init<A>(utf16Offset:in:)();
          swift_getAssociatedTypeWitness();
          uint64_t v45 = swift_getTupleTypeMetadata2();
          __int128 v46 = v103;
          uint64_t *v103 = v44;
          unint64_t v108 = v43;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
        }

        swift_release();
        return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))( v46,  0LL,  1LL,  v45);
      }

uint64_t IntegerParseStrategy.parse(_:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v220._uint64_t countAndFlagsBits = a1;
  v220._id object = a2;
  uint64_t v205 = a4;
  uint64_t v228 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v218 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  v212 = (char *)v190 - v10;
  uint64_t v201 = *(void *)(a3 + 32);
  uint64_t v207 = *(void *)(v201 + 24);
  uint64_t v211 = *(void *)(v207 + 16);
  uint64_t v210 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v210);
  v209 = (char *)v190 - v11;
  uint64_t v213 = v8;
  uint64_t v214 = v7;
  uint64_t v216 = swift_getAssociatedTypeWitness();
  uint64_t v208 = *(void *)(v216 - 8);
  MEMORY[0x1895F8858](v216);
  v217 = (char *)v190 - v12;
  uint64_t v219 = AssociatedTypeWitness;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v203 = *(void *)(v13 - 8);
  uint64_t v204 = v13;
  MEMORY[0x1895F8858](v13);
  v200 = (char *)v190 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  v206 = (char *)v190 - v16;
  uint64_t v17 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  uint64_t v224 = *(void *)(v17 - 8);
  uint64_t v18 = *(void *)(v224 + 64);
  MEMORY[0x1895F8858](v17);
  unint64_t v19 = (char *)v190 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (uint64_t)v190 - v21;
  uint64_t v23 = *(int *)(a3 + 44);
  uint64_t v24 = v4 + *(int *)(a3 + 48);
  uint64_t v25 = (uint64_t *)(v4 + *(int *)(a3 + 52));
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v215 = v4;
  LODWORD(v222) = *(unsigned __int8 *)(v4 + v23);
  outlined init with copy of ICUNumberFormatter.Signature( v24,  (uint64_t)v190 - v21,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v30 = v29(ObjectType, v26);
  uint64_t v32 = v31;
  uint64_t v221 = v27;
  swift_unknownObjectRelease();
  uint64_t v33 = (uint64_t *)(v22 + *(int *)(v17 + 20));
  *uint64_t v33 = v30;
  v33[1] = v32;
  uint64_t v199 = v17;
  *(_BYTE *)(v22 + *(int *)(v17 + 24)) = v222;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v35 = static ICULegacyNumberFormatter.cache;
  unint64_t v34 = (char *)unk_18C5CB2B0;
  outlined init with copy of ICUNumberFormatter.Signature( v22,  (uint64_t)v19,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v36 = (*(unsigned __int8 *)(v224 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80);
  uint64_t v222 = swift_allocObject();
  v202 = (os_unfair_lock_s *)((char *)v190 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v19,  v222 + v36,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  uint64_t v37 = (unint64_t *)(v34 + 16);
  uint64_t v38 = (os_unfair_lock_s *)(v34 + 24);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)v34 + 6);
  unint64_t v39 = v223;
  specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)(v34 + 16), v22, v226);
  v223 = v39;
  if (v39)
  {
LABEL_112:
    os_unfair_lock_unlock(v38);
    __break(1u);
    goto LABEL_113;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)v34 + 6);
  swift_release();
  uint64_t v40 = v226[0];
  if (!v226[0])
  {
    unint64_t v74 = v223;
    implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    if (v74)
    {

      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( v22,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v77;
      v226[0] = 0LL;
      v226[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v226, "Cannot parse ");
      HIWORD(v226[1]) = -4864;
      String.append(_:)(v220);
      v78._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v78._id object = (void *)0x80000001839D0A20LL;
      String.append(_:)(v78);
      uint64_t v79 = v226[0];
      uint64_t v80 = v226[1];
      *(void *)(inited + 72) = MEMORY[0x189617FA8];
      *(void *)(inited + 48) = v79;
      *(void *)(inited + 56) = v80;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      unint64_t v46 = static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (Hashable & Sendable)?( inited + 32,  (uint64_t)v226,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
      uint64_t v22 = v226[0];
      unint64_t v34 = (char *)v226[1];
      swift_retain();
      unint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(v22, (uint64_t)v34);
      if ((v47 & 1) == 0)
      {
        *(void *)(v46 + 8 * (v81 >> 6) + 64) |= 1LL << v81;
        unint64_t v82 = (uint64_t *)(*(void *)(v46 + 48) + 16 * v81);
        *unint64_t v82 = v22;
        v82[1] = (uint64_t)v34;
        outlined init with take of Any(v227, (_OWORD *)(*(void *)(v46 + 56) + 32 * v81));
        uint64_t v83 = *(void *)(v46 + 16);
        BOOL v66 = __OFADD__(v83, 1LL);
        uint64_t v84 = v83 + 1;
        if (!v66)
        {
          *(void *)(v46 + 16) = v84;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v85 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v86 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v87 = objc_msgSend(v85, sel_initWithDomain_code_userInfo_, v86, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v34 = (char *)objc_msgSend(v87, sel_domain);
          id v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          unint64_t v46 = v89;

          if (v88 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v46 == v90)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v22 & 1) == 0) {
              goto LABEL_68;
            }
          }

          return swift_willThrow();
        }

        goto LABEL_63;
      }

      goto LABEL_62;
    }

    uint64_t v198 = v75;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)v34 + 6);
    uint64_t v40 = *((void *)v34 + 2);
    uint64_t v137 = *(void *)(v40 + 16);
    v223 = 0LL;
    if (v35 >= v137) {
      swift_bridgeObjectRetain();
    }
    else {
      *uint64_t v37 = MEMORY[0x18961AFF0];
    }
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v225 = *v37;
    unint64_t v46 = v225;
    *uint64_t v37 = 0x8000000000000000LL;
    unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    uint64_t v158 = *(void *)(v46 + 16);
    BOOL v159 = (v47 & 1) == 0;
    uint64_t v160 = v158 + v159;
    if (__OFADD__(v158, v159)) {
      goto LABEL_67;
    }
    uint64_t v161 = *(void *)(v46 + 24);
    os_unfair_lock_t v197 = (os_unfair_lock_t)(v34 + 24);
    if (v161 >= v160)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_71;
      }
    }

    else
    {
      char v162 = v47;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v160,  isUniquelyReferenced_nonNull_native);
      unint64_t v46 = v225;
      unint64_t v163 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
      if ((v162 & 1) != (v164 & 1)) {
        goto LABEL_114;
      }
      unint64_t v48 = v163;
      LOBYTE(v47) = v162;
    }

    uint64_t v165 = (uint64_t)v202;
    if ((v47 & 1) == 0) {
      goto LABEL_106;
    }
    goto LABEL_55;
  }

  swift_release();
  uint64_t countAndFlagsBits = v220._countAndFlagsBits;
  id object = v220._object;
  while (1)
  {
    outlined destroy of ICUNumberFormatter.Signature(v22, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    specialized BidirectionalCollection._trimmingCharacters(while:)(countAndFlagsBits, (unint64_t)object);
    unint64_t v34 = v43;
    swift_bridgeObjectRelease();
    uint64_t v44 = String.init(_:)();
    unint64_t v46 = v45;
    swift_bridgeObjectRetain();
    uint64_t v22 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v44, v46);
    swift_bridgeObjectRelease();
    LODWORD(v226[0]) = 0;
    if (*(void *)(v22 + 16) >> 31)
    {
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }

    unint64_t v34 = (char *)unum_parseInt64();
    swift_release();
    if (SLODWORD(v226[0]) <= 0)
    {
      swift_bridgeObjectRelease();
      v226[0] = (uint64_t)v34;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v91 = (uint64_t)v206;
      uint64_t v92 = v219;
      dispatch thunk of Numeric.init<A>(exactly:)();
      uint64_t v93 = v218;
      (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v91, v204);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v94 = swift_initStackObject();
      *(_OWORD *)(v94 + 16) = xmmword_183720D90;
      *(void *)(v94 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(v94 + 40) = v95;
      v226[0] = 0LL;
      v226[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(94LL);
      v96._uint64_t countAndFlagsBits = 0x7020746F6E6E6143LL;
      v96._id object = (void *)0xED00002065737261LL;
      String.append(_:)(v96);
      v97._uint64_t countAndFlagsBits = countAndFlagsBits;
      v97._id object = object;
      String.append(_:)(v97);
      v98._id object = (void *)0x80000001839D0A40LL;
      v98._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
      String.append(_:)(v98);
      uint64_t v99 = v226[0];
      uint64_t v100 = v226[1];
      *(void *)(v94 + 72) = MEMORY[0x189617FA8];
      *(void *)(v94 + 48) = v99;
      *(void *)(v94 + 56) = v100;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      unint64_t v46 = static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (Hashable & Sendable)?( v94 + 32,  (uint64_t)v226,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
      uint64_t v22 = v226[0];
      unint64_t v34 = (char *)v226[1];
      swift_retain();
      unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v22, (uint64_t)v34);
      if ((v47 & 1) != 0) {
        goto LABEL_65;
      }
      *(void *)(v46 + 8 * (v101 >> 6) + 64) |= 1LL << v101;
      uint64_t v102 = (uint64_t *)(*(void *)(v46 + 48) + 16 * v101);
      *uint64_t v102 = v22;
      v102[1] = (uint64_t)v34;
      outlined init with take of Any(v227, (_OWORD *)(*(void *)(v46 + 56) + 32 * v101));
      uint64_t v103 = *(void *)(v46 + 16);
      BOOL v66 = __OFADD__(v103, 1LL);
      uint64_t v104 = v103 + 1;
      if (v66) {
        goto LABEL_66;
      }
      *(void *)(v46 + 16) = v104;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v105 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v106 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id object = objc_msgSend(v105, sel_initWithDomain_code_userInfo_, v106, 2048, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v107 = objc_msgSend(object, sel_domain);
      id v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      uint64_t v110 = v109;

      if (v108 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v110 == v111) {
        goto LABEL_47;
      }
      char v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v112 & 1) != 0) {
        goto LABEL_57;
      }
      __break(1u);
    }

    else
    {
      swift_bridgeObjectRetain();
      uint64_t v49 = specialized _copyCollectionToContiguousArray<A>(_:)(v44, v46);
      swift_bridgeObjectRelease();
      LODWORD(v226[0]) = 0;
      if (v49[2] >> 31) {
        goto LABEL_59;
      }
      unum_parseDouble();
      double v5 = v50;
      swift_bridgeObjectRelease();
      swift_release();
      if (SLODWORD(v226[0]) > 0)
      {
        uint64_t v51 = v210;
        uint64_t v52 = v219;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        MEMORY[0x186E1CDF8](&unk_183816E90, 2048LL, v51, AssociatedConformanceWitness);
        uint64_t v54 = v212;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        (*(void (**)(char *, uint64_t))(v214 + 48))(v54, v213);
        (*(void (**)(char *, uint64_t))(v218 + 8))(v54, v52);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
        uint64_t v55 = swift_initStackObject();
        *(_OWORD *)(v55 + 16) = xmmword_183720D90;
        *(void *)(v55 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
        *(void *)(v55 + 40) = v56;
        v226[0] = 0LL;
        v226[1] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(73LL);
        v57._uint64_t countAndFlagsBits = 0x7020746F6E6E6143LL;
        v57._id object = (void *)0xED00002065737261LL;
        String.append(_:)(v57);
        v58._uint64_t countAndFlagsBits = countAndFlagsBits;
        v58._id object = object;
        String.append(_:)(v58);
        v59._uint64_t countAndFlagsBits = 0xD000000000000038LL;
        v59._id object = (void *)0x80000001839CA390LL;
        String.append(_:)(v59);
        uint64_t v60 = v216;
        _print_unlocked<A, B>(_:_:)();
        uint64_t v61 = v226[0];
        uint64_t v62 = v226[1];
        *(void *)(v55 + 72) = MEMORY[0x189617FA8];
        *(void *)(v55 + 48) = v61;
        *(void *)(v55 + 56) = v62;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        unint64_t v46 = static _DictionaryStorage.allocate(capacity:)();
        outlined init with copy of (Hashable & Sendable)?( v55 + 32,  (uint64_t)v226,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
        uint64_t v22 = v226[0];
        unint64_t v34 = (char *)v226[1];
        swift_retain();
        unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v22, (uint64_t)v34);
        if ((v47 & 1) == 0)
        {
          *(void *)(v46 + 8 * (v63 >> 6) + 64) |= 1LL << v63;
          uint64_t v64 = (uint64_t *)(*(void *)(v46 + 48) + 16 * v63);
          *uint64_t v64 = v22;
          v64[1] = (uint64_t)v34;
          outlined init with take of Any(v227, (_OWORD *)(*(void *)(v46 + 56) + 32 * v63));
          uint64_t v65 = *(void *)(v46 + 16);
          BOOL v66 = __OFADD__(v65, 1LL);
          uint64_t v67 = v65 + 1;
          if (!v66)
          {
            *(void *)(v46 + 16) = v67;
            swift_release();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
            id v68 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            uint64_t v69 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v70 = objc_msgSend(v68, sel_initWithDomain_code_userInfo_, v69, 2048, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v34 = (char *)objc_msgSend(v70, sel_domain);
            id v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
            unint64_t v46 = v72;

            if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
              && v46 == v73)
            {
              swift_bridgeObjectRelease_n();
LABEL_38:
              swift_willThrow();
              swift_release();
              return (*(uint64_t (**)(char *, uint64_t))(v208 + 8))(v217, v60);
            }

            uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v22 & 1) != 0) {
              goto LABEL_38;
            }
            goto LABEL_64;
          }

uint64_t IntegerParseStrategy.formatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t IntegerParseStrategy.formatStyle.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 40LL))(v2, a1);
}

uint64_t (*IntegerParseStrategy.formatStyle.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t IntegerParseStrategy.lenient.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t IntegerParseStrategy.lenient.setter(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*IntegerParseStrategy.lenient.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void IntegerParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v21 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v6);
  void v18[2] = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  v18[1] = (char *)v18 - v9;
  MEMORY[0x1895F8858](v10);
  v18[0] = (char *)v18 - v11;
  uint64_t v19 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v20 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v22);
  MEMORY[0x1895F8858](v13);
  uint64_t v14 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 44)));
  uint64_t v25 = v2;
  uint64_t v26 = a2;
  outlined init with copy of ICUNumberFormatter.Signature( v2 + *(int *)(a2 + 48),  (uint64_t)v16,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t v17 = (char *)sub_18330A930 + 4 * byte_183816BC0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_18330A930()
{
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v5 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v5;
    }
    else {
      Swift::UInt64 v6 = 0LL;
    }
    Hasher._combine(_:)(v6);
  }

  uint64_t v8 = *(int **)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  outlined init with take of LocalePreferences?( v2 + 16,  v4 - 152,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v9 = *(unsigned __int8 *)(v2 + 73);
  if (v9 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v10 = v9 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }

  int v11 = *(unsigned __int16 *)(v2 + 74);
  unsigned int v12 = v11 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v11 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12 & 1);
    Hasher._combine(_:)((v12 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v12) & 1);
  }

  int v13 = *(unsigned __int8 *)(v2 + 77);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }

  uint64_t v15 = *(void *)(v0 + 64);
  uint64_t v16 = *(void *)v0;
  outlined init with copy of (Hashable & Sendable)?( v2 + v8[9],  *(void *)v0,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v16, 1LL, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v17, v16, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v15);
  }

  uint64_t v18 = v2 + v8[10];
  int v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v20 = *(void *)v18;
    Hasher._combine(_:)(1u);
    if ((v19 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v21 = v20;
      }
      else {
        Swift::UInt64 v21 = 0LL;
      }
      Hasher._combine(_:)(v21);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v20);
    }
  }

  uint64_t v22 = *(void *)(v0 + 80);
  Swift::UInt v23 = *(unsigned __int8 *)(v2 + v8[11]);
  if (v23 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
  }

  uint64_t v24 = *(void *)(v0 + 72);
  outlined destroy of ICUNumberFormatter.Signature( v2,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v25 = *(void *)(v24 + *(int *)(v22 + 52) + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 48);
  swift_unknownObjectRetain();
  if ((v27(ObjectType, v25) & 1) != 0)
  {
    Swift::UInt8 v28 = 1;
LABEL_34:
    Hasher._combine(_:)(v28);
    return swift_unknownObjectRelease();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v25 + 64))(ObjectType, v25);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v25 + 464);
  swift_unknownObjectRetain();
  v29(ObjectType, v25);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( v0 + 376,  v0 + 520,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( v0 + 520,  v0 + 664,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg(v0 + 664) == 1)
  {
    Swift::UInt8 v28 = 0;
    goto LABEL_34;
  }

  outlined init with take of LocalePreferences?( v0 + 520,  v0 + 232,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  int v30 = *(unsigned __int8 *)(v0 + 232);
  if (v30 == 2)
  {
    Swift::UInt8 v31 = 0;
  }

  else
  {
    Swift::UInt8 v31 = v30 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v31);
  uint64_t v32 = *(void *)(v0 + 240);
  if (!v32)
  {
    Hasher._combine(_:)(0);
    uint64_t v37 = (void *)(v0 + 232);
    goto LABEL_49;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v32 + 16));
  uint64_t v33 = *(void *)(v32 + 16);
  if (!v33)
  {
    outlined init with take of LocalePreferences?( v0 + 520,  v0 + 88,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v37 = (void *)(v0 + 88);
LABEL_49:
    outlined retain of LocalePreferences(v37);
    if (!*(void *)(v0 + 256)) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }

  outlined retain of LocalePreferences?( v0 + 520,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v34 = v32 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v34 += 16LL;
    --v33;
  }

  while (v33);
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 256))
  {
LABEL_43:
    Hasher._combine(_:)(0);
    if (!*(void *)(v0 + 272)) {
      goto LABEL_44;
    }
    goto LABEL_51;
  }

uint64_t static IntegerParseStrategy.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (uint64_t v10 = type metadata accessor for IntegerParseStrategy(0LL, a3, a4, a5),
        *(unsigned __int8 *)(a1 + *(int *)(v10 + 44)) == *(unsigned __int8 *)(a2 + *(int *)(v10 + 44)))
    && (uint64_t v11 = v10,
        specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)( a1 + *(int *)(v10 + 48),  a2 + *(int *)(v10 + 48)),  (v12 & 1) != 0))
  {
    uint64_t v13 = *(int *)(v11 + 52);
    __int128 v14 = *(_OWORD *)(a1 + v13);
    __int128 v17 = *(_OWORD *)(a2 + v13);
    __int128 v18 = v14;
    char v15 = specialized static Locale.== infix(_:_:)((uint64_t)&v18, (uint64_t)&v17);
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t IntegerParseStrategy.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18330B958 + 4 * byte_183816BC4[a1]))( 0x745374616D726F66LL,  0xEB00000000656C79LL);
}

uint64_t sub_18330B958()
{
  return 0x746E65696E656CLL;
}

unint64_t sub_18330B970()
{
  return 0xD000000000000010LL;
}

uint64_t sub_18330B98C()
{
  return 0x656C61636F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerParseStrategy<A>.CodingKeys()
{
  return IntegerParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerParseStrategy<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerParseStrategy<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerParseStrategy.encode(to:)(void *a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  v15[0] = a2;
  v15[1] = v3;
  uint64_t v5 = type metadata accessor for IntegerParseStrategy.CodingKeys(255LL, v3, v4, a2[4]);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerParseStrategy<A>.CodingKeys, v5);
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  int v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  uint64_t v10 = v15[2];
  uint64_t v11 = v15[3];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v13 = v7;
  uint64_t v14 = v15[0];
  LOBYTE(v16) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v16) = 2;
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType,  (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  __int128 v16 = *(_OWORD *)(v10 + *(int *)(v14 + 52));
  char v17 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v9, v6);
}

Swift::Int IntegerParseStrategy.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t IntegerParseStrategy.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v31 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v31);
  uint64_t v34 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v38 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for IntegerParseStrategy.CodingKeys(255LL, a2, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerParseStrategy<A>.CodingKeys, v12);
  uint64_t v37 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v32 = *(void *)(v37 - 8);
  MEMORY[0x1895F8858](v37);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v35 = a3;
  uint64_t v36 = a2;
  uint64_t v15 = type metadata accessor for IntegerParseStrategy(0LL, a2, a3, a4);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  __int128 v18 = (char *)&v30 - v17;
  uint64_t v19 = a1[3];
  uint64_t v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  unint64_t v39 = v14;
  uint64_t v20 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  }
  uint64_t v41 = v16;
  uint64_t v22 = v33;
  uint64_t v21 = (uint64_t)v34;
  uint64_t v23 = v32;
  LOBYTE(v42) = 0;
  uint64_t v24 = v36;
  uint64_t v25 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v18, v38, v24);
  LOBYTE(v42) = 1;
  char v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v38 = (char *)v15;
  v18[*(int *)(v15 + 44)] = v26 & 1;
  LOBYTE(v42) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType,  (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature( v21,  (uint64_t)&v18[*((int *)v38 + 12)],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  char v43 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v39, v25);
  uint64_t v27 = v38;
  *(_OWORD *)&v18[*((int *)v38 + 13)] = v42;
  uint64_t v28 = v41;
  (*(void (**)(uint64_t, char *, char *))(v41 + 16))(v30, v18, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  return (*(uint64_t (**)(char *, char *))(v28 + 8))(v18, v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerParseStrategy<A>@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerParseStrategy.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerParseStrategy<A>( void *a1, void *a2)
{
  return IntegerParseStrategy.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerParseStrategy<A>( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerParseStrategy<A>( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static IntegerParseStrategy.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t protocol witness for ParseStrategy.parse(_:) in conformance IntegerParseStrategy<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerParseStrategy.parse(_:)(*(void *)a1, *(void **)(a1 + 8), a2, a3);
}

uint64_t type metadata accessor for IntegerParseStrategy.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerParseStrategy.CodingKeys);
}

void base witness table accessor for Equatable in IntegerParseStrategy<A>()
{
}

uint64_t instantiation function for generic protocol witness table for IntegerParseStrategy<A>( void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerParseStrategy<A>);
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerParseStrategy<A>, a2);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerParseStrategy<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t type metadata completion function for IntegerParseStrategy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(319LL);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for IntegerParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 | 7;
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v12 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 64) + 1LL;
  }
  if (((v12 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL) + 11 <= ((v12 + 7 + ((v10 + 78) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL)
                                                                      + 10)
    unint64_t v13 = ((v12 + 7 + ((v10 + 78) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  else {
    unint64_t v13 = ((v12 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  unsigned int v14 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v13 + (((v10 | 7) + v7 + 1) & ~(v10 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    __int128 v18 = (void *)(v17 + (((v14 | 7) + 16LL) & ~(unint64_t)(v14 | 7)));
    swift_retain();
  }

  else
  {
    uint64_t v52 = v10 + 79;
    size_t __n = v12;
    uint64_t v54 = v10 + 78;
    uint64_t v55 = v8;
    uint64_t v56 = v12 + 7;
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    *((_BYTE *)a1 + v7) = *((_BYTE *)a2 + v7);
    uint64_t v19 = ((unint64_t)a1 + v7 + v11 + 1) & ~v11;
    uint64_t v20 = ((unint64_t)a2 + v7 + v11 + 1) & ~v11;
    uint64_t v22 = ~v10;
    __int128 v18 = a1;
    switch(*(_BYTE *)(v20 + v13))
    {
      case 0:
        uint64_t v23 = *(void *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(void *)uint64_t v19 = v23;
        __int128 v24 = *(_OWORD *)(v20 + 16);
        __int128 v25 = *(_OWORD *)(v20 + 32);
        __int128 v26 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v25;
        *(_OWORD *)(v19 + 48) = v26;
        *(_OWORD *)(v19 + 16) = v24;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        LOWORD(v23) = *(_WORD *)(v20 + 74);
        *(_BYTE *)(v19 + 76) = *(_BYTE *)(v20 + 76);
        *(_WORD *)(v19 + 74) = v23;
        *(_BYTE *)(v19 + 77) = *(_BYTE *)(v20 + 77);
        uint64_t v27 = (void *)((v54 + v19) & v22);
        uint64_t v28 = (const void *)((v54 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v28, 1LL, v55))
        {
          memcpy(v27, v28, __n);
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v27, v28, v55);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v27, 0LL, 1LL, v55);
        }

        char v41 = 0;
        unint64_t v42 = ((unint64_t)v27 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v43 = ((unint64_t)v28 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v44 = *(void *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(void *)unint64_t v42 = v44;
        *(_BYTE *)(v42 + 9) = *(_BYTE *)(v43 + 9);
        break;
      case 1:
        uint64_t v29 = *(void *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(void *)uint64_t v19 = v29;
        __int128 v30 = *(_OWORD *)(v20 + 16);
        __int128 v31 = *(_OWORD *)(v20 + 32);
        __int128 v32 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v31;
        *(_OWORD *)(v19 + 48) = v32;
        *(_OWORD *)(v19 + 16) = v30;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        LOWORD(v29) = *(_WORD *)(v20 + 74);
        *(_BYTE *)(v19 + 76) = *(_BYTE *)(v20 + 76);
        *(_WORD *)(v19 + 74) = v29;
        *(_BYTE *)(v19 + 77) = *(_BYTE *)(v20 + 77);
        uint64_t v33 = (void *)((v54 + v19) & v22);
        uint64_t v34 = (const void *)((v54 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v34, 1LL, v55))
        {
          memcpy(v33, v34, __n);
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v33, v34, v55);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v33, 0LL, 1LL, v55);
        }

        unint64_t v45 = ((unint64_t)v33 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v46 = ((unint64_t)v34 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v47 = *(void *)v46;
        *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
        *(void *)unint64_t v45 = v47;
        *(_BYTE *)(v45 + 9) = *(_BYTE *)(v46 + 9);
        char v41 = 1;
        break;
      case 2:
        uint64_t v35 = *(void *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(void *)uint64_t v19 = v35;
        __int128 v36 = *(_OWORD *)(v20 + 16);
        __int128 v37 = *(_OWORD *)(v20 + 32);
        __int128 v38 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v37;
        *(_OWORD *)(v19 + 48) = v38;
        *(_OWORD *)(v19 + 16) = v36;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        *(_DWORD *)(v19 + 74) = *(_DWORD *)(v20 + 74);
        *(_BYTE *)(v19 + 78) = *(_BYTE *)(v20 + 78);
        unint64_t v39 = (void *)((v52 + v19) & v22);
        uint64_t v40 = (const void *)((v52 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v40, 1LL, v55))
        {
          memcpy(v39, v40, __n);
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v39, v40, v55);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v39, 0LL, 1LL, v55);
        }

        unint64_t v48 = ((unint64_t)v39 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v49 = ((unint64_t)v40 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v50 = *(void *)v49;
        *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
        *(void *)unint64_t v48 = v50;
        *(_BYTE *)(v48 + 9) = *(_BYTE *)(v49 + 9);
        *(_BYTE *)(v48 + 10) = *(_BYTE *)(v49 + 10);
        char v41 = 2;
        break;
      case 3:
        *(_WORD *)uint64_t v19 = *(_WORD *)v20;
        char v41 = 3;
        break;
      default:
        else {
          int v21 = 4;
        }
        __asm { BR              X11 }

        return result;
    }

    *(_BYTE *)(v19 + v13) = v41;
    *(_OWORD *)(((v19 | 7) + v13 + 1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((v20 | 7) + v13 + 1) & 0xFFFFFFFFFFFFF8LL);
    swift_unknownObjectRetain();
  }

  return v18;
}

uint64_t destroy for IntegerParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (a1 + (v7 | 7) + v4 + 1) & ~(v7 | 7);
  uint64_t v9 = (v7 + 78) & ~v7;
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v11 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v11 = *(void *)(v6 + 64) + 1LL;
  }
  unint64_t v12 = ((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  if (((v11 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8LL) + 11 <= v12) {
    unint64_t v13 = ((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  }
  else {
    unint64_t v13 = ((v11 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  int v14 = *(unsigned __int8 *)(v8 + v13);
  uint64_t v16 = ~v7;
  switch(v14)
  {
    case 0:
    case 1:
      uint64_t v17 = v7 + 78 + v8;
      goto LABEL_15;
    case 2:
      uint64_t v17 = v8 + v7 + 79;
LABEL_15:
      uint64_t v18 = v17 & v16;
      break;
    case 3:
      return swift_unknownObjectRelease();
    default:
      else {
        int v15 = 4;
      }
      __asm { BR              X14 }

      return result;
  }

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(_BYTE *)(v6 + a1) = *(_BYTE *)(v6 + a2);
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (v12 + v8) & ~(v11 | 7);
  uint64_t v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v16 = *(void *)(v10 + 64);
  }
  else {
    size_t v16 = *(void *)(v10 + 64) + 1LL;
  }
  size_t v17 = v16 + 7;
  uint64_t v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL)
                                                                      + 10)
    unint64_t v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  else {
    unint64_t v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  uint64_t v21 = ~v11;
  switch(*(_BYTE *)(v14 + v19))
  {
    case 0:
      uint64_t v22 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v22;
      __int128 v23 = *(_OWORD *)(v14 + 16);
      __int128 v24 = *(_OWORD *)(v14 + 32);
      __int128 v25 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v24;
      *(_OWORD *)(v13 + 48) = v25;
      *(_OWORD *)(v13 + 16) = v23;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v22) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v22;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      __int128 v26 = (void *)((v15 + v13) & v21);
      uint64_t v27 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v27, 1LL, v9))
      {
        memcpy(v26, v27, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v26, v27, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v26, 0LL, 1LL, v9);
      }

      char v40 = 0;
      unint64_t v41 = ((unint64_t)v26 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v42 = ((unint64_t)v27 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v43 = *(void *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(void *)unint64_t v41 = v43;
      *(_BYTE *)(v41 + 9) = *(_BYTE *)(v42 + 9);
      break;
    case 1:
      uint64_t v28 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v28;
      __int128 v29 = *(_OWORD *)(v14 + 16);
      __int128 v30 = *(_OWORD *)(v14 + 32);
      __int128 v31 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v30;
      *(_OWORD *)(v13 + 48) = v31;
      *(_OWORD *)(v13 + 16) = v29;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v28) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v28;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      __int128 v32 = (void *)((v15 + v13) & v21);
      uint64_t v33 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v33, 1LL, v9))
      {
        memcpy(v32, v33, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v32, v33, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v32, 0LL, 1LL, v9);
      }

      unint64_t v44 = ((unint64_t)v32 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v45 = ((unint64_t)v33 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v46 = *(void *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(void *)unint64_t v44 = v46;
      *(_BYTE *)(v44 + 9) = *(_BYTE *)(v45 + 9);
      char v40 = 1;
      break;
    case 2:
      uint64_t v34 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v34;
      __int128 v35 = *(_OWORD *)(v14 + 16);
      __int128 v36 = *(_OWORD *)(v14 + 32);
      __int128 v37 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v36;
      *(_OWORD *)(v13 + 48) = v37;
      *(_OWORD *)(v13 + 16) = v35;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      __int128 v38 = (void *)((v18 + v13) & v21);
      unint64_t v39 = (const void *)((v18 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v39, 1LL, v9))
      {
        memcpy(v38, v39, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v38, v39, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v38, 0LL, 1LL, v9);
      }

      unint64_t v47 = ((unint64_t)v38 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v48 = ((unint64_t)v39 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v49 = *(void *)v48;
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(void *)unint64_t v47 = v49;
      *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
      *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
      char v40 = 2;
      break;
    case 3:
      *(_WORD *)uint64_t v13 = *(_WORD *)v14;
      char v40 = 3;
      break;
    default:
      else {
        int v20 = 4;
      }
      __asm { BR              X14 }

      return result;
  }

  *(_BYTE *)(v13 + v19) = v40;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8LL);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (unint64_t)&v8[v12] & ~(v11 | 7);
  if (v13 == v14)
  {
    int v24 = *(_DWORD *)(v10 + 84);
    size_t v25 = *(void *)(v10 + 64);
    uint64_t v26 = (v11 + 79) & ~v11;
    uint64_t v17 = (v11 + 78) & ~v11;
  }

  else
  {
    uint64_t v15 = v9;
    uint64_t v72 = a1;
    uint64_t v16 = v11 + 78;
    uint64_t v17 = (v11 + 78) & ~v11;
    if (*(_DWORD *)(v10 + 84)) {
      uint64_t v18 = *(void *)(v10 + 64);
    }
    else {
      uint64_t v18 = *(void *)(v10 + 64) + 1LL;
    }
    unint64_t v19 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
    unint64_t v20 = (v18 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v21 = v20 + 11;
    if (v20 + 11 <= v19) {
      unint64_t v22 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
    }
    else {
      unint64_t v22 = v20 + 11;
    }
    size_t __n = v18;
    uint64_t v27 = ~v11;
    int v75 = *(_DWORD *)(v10 + 84);
    size_t v74 = *(void *)(v10 + 64);
    switch(*(_BYTE *)(v13 + v22))
    {
      case 0:
      case 1:
        uint64_t v71 = v11 + 78;
        uint64_t v28 = v16 + v13;
        goto LABEL_16;
      case 2:
        uint64_t v71 = v11 + 78;
        uint64_t v28 = v13 + v11 + 79;
LABEL_16:
        uint64_t v29 = v28 & v27;
        uint64_t v17 = (v11 + 78) & ~v11;
        size_t v30 = v74;
        uint64_t v16 = v71;
        if (!v75) {
          goto LABEL_19;
        }
        goto LABEL_20;
      case 3:
LABEL_19:
        size_t v30 = __n;
LABEL_20:
        unint64_t v31 = ((v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 10;
        if (v19 > v31) {
          unint64_t v31 = v19;
        }
        if (v21 > v31) {
          unint64_t v31 = v21;
        }
        switch(*(_BYTE *)(v14 + v31))
        {
          case 0:
            uint64_t v33 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v33;
            __int128 v34 = *(_OWORD *)(v14 + 16);
            __int128 v35 = *(_OWORD *)(v14 + 32);
            __int128 v36 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v35;
            *(_OWORD *)(v13 + 48) = v36;
            *(_OWORD *)(v13 + 16) = v34;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v33) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v33;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            __int128 v37 = (void *)((v16 + v13) & v27);
            __int128 v38 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v38, 1LL, v15))
            {
              size_t v39 = __n;
              memcpy(v37, v38, __n);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v37, v38, v15);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v37, 0LL, 1LL, v15);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v39 = __n;
            }

            unint64_t v56 = ((unint64_t)v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v57 = ((unint64_t)v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v58 = *(void *)v57;
            *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
            *(void *)unint64_t v56 = v58;
            *(_BYTE *)(v56 + 9) = *(_BYTE *)(v57 + 9);
            *(_BYTE *)(v13 + v22) = 0;
            goto LABEL_43;
          case 1:
            uint64_t v40 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v40;
            __int128 v41 = *(_OWORD *)(v14 + 16);
            __int128 v42 = *(_OWORD *)(v14 + 32);
            __int128 v43 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v42;
            *(_OWORD *)(v13 + 48) = v43;
            *(_OWORD *)(v13 + 16) = v41;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v40) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v40;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            unint64_t v44 = (void *)((v16 + v13) & v27);
            unint64_t v45 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v45, 1LL, v15))
            {
              size_t v46 = __n;
              memcpy(v44, v45, __n);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v44, v45, v15);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v44, 0LL, 1LL, v15);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v46 = __n;
            }

            unint64_t v59 = ((unint64_t)v44 + v46 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v60 = ((unint64_t)v45 + v46 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v61 = *(void *)v60;
            *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
            *(void *)unint64_t v59 = v61;
            *(_BYTE *)(v59 + 9) = *(_BYTE *)(v60 + 9);
            *(_BYTE *)(v13 + v22) = 1;
LABEL_43:
            a1 = v72;
            break;
          case 2:
            uint64_t v47 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v47;
            __int128 v48 = *(_OWORD *)(v14 + 16);
            __int128 v49 = *(_OWORD *)(v14 + 32);
            __int128 v50 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v49;
            *(_OWORD *)(v13 + 48) = v50;
            *(_OWORD *)(v13 + 16) = v48;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
            id v51 = (const void *)((v11 + 79 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v51, 1LL, v15))
            {
              size_t v52 = __n;
              memcpy((void *)((v13 + v11 + 79) & v27), v51, __n);
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v10 + 16))((v13 + v11 + 79) & v27, v51, v15);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))( (v13 + v11 + 79) & v27,  0LL,  1LL,  v15);
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v52 = __n;
            }

            unint64_t v53 = (((v13 + v11 + 79) & v27) + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v54 = ((unint64_t)v51 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v55 = *(void *)v54;
            *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
            *(void *)unint64_t v53 = v55;
            *(_BYTE *)(v53 + 9) = *(_BYTE *)(v54 + 9);
            *(_BYTE *)(v53 + 10) = *(_BYTE *)(v54 + 10);
            *(_BYTE *)(v13 + v22) = 2;
            a1 = v72;
            int v24 = v75;
            uint64_t v17 = (v11 + 78) & ~v11;
            size_t v25 = v74;
            break;
          case 3:
            *(_WORD *)uint64_t v13 = *(_WORD *)v14;
            *(_BYTE *)(v13 + v22) = 3;
            uint64_t v26 = (v11 + 79) & ~v11;
            a1 = v72;
            int v24 = v75;
            size_t v25 = v74;
            break;
          default:
            else {
              int v32 = 4;
            }
            __asm { BR              X11 }

            return result;
        }

        return result;
      default:
        else {
          int v23 = 4;
        }
        __asm { BR              X11 }

        return result;
    }
  }

  if (v24) {
    size_t v62 = v25;
  }
  else {
    size_t v62 = v25 + 1;
  }
  size_t v63 = v62 + 7;
  unint64_t v64 = ((v63 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  unint64_t v65 = ((v63 + v26) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  if (v65 <= v64) {
    unint64_t v65 = v64;
  }
  unint64_t v66 = v65 + 1;
  uint64_t v67 = (void *)(((v13 | 7) + v66) & 0xFFFFFFFFFFFFFFF8LL);
  id v68 = (void *)(((v14 | 7) + v66) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v69 = v68[1];
  void *v67 = *v68;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v67[1] = v69;
  return a1;
}

uint64_t initializeWithTake for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(_BYTE *)(v6 + a1) = *(_BYTE *)(v6 + a2);
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (v12 + v8) & ~(v11 | 7);
  uint64_t v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v16 = *(void *)(v10 + 64);
  }
  else {
    size_t v16 = *(void *)(v10 + 64) + 1LL;
  }
  size_t v17 = v16 + 7;
  uint64_t v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL)
                                                                      + 10)
    unint64_t v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  else {
    unint64_t v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  uint64_t v21 = ~v11;
  switch(*(_BYTE *)(v14 + v19))
  {
    case 0:
      uint64_t v22 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v22;
      __int128 v23 = *(_OWORD *)(v14 + 16);
      __int128 v24 = *(_OWORD *)(v14 + 32);
      __int128 v25 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v24;
      *(_OWORD *)(v13 + 48) = v25;
      *(_OWORD *)(v13 + 16) = v23;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v22) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v22;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      uint64_t v26 = (void *)((v15 + v13) & v21);
      uint64_t v27 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v27, 1LL, v9))
      {
        memcpy(v26, v27, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v26, v27, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v26, 0LL, 1LL, v9);
      }

      char v40 = 0;
      unint64_t v41 = ((unint64_t)v26 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v42 = ((unint64_t)v27 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v43 = *(void *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(void *)unint64_t v41 = v43;
      *(_BYTE *)(v41 + 9) = *(_BYTE *)(v42 + 9);
      break;
    case 1:
      uint64_t v28 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v28;
      __int128 v29 = *(_OWORD *)(v14 + 16);
      __int128 v30 = *(_OWORD *)(v14 + 32);
      __int128 v31 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v30;
      *(_OWORD *)(v13 + 48) = v31;
      *(_OWORD *)(v13 + 16) = v29;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v28) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v28;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      int v32 = (void *)((v15 + v13) & v21);
      uint64_t v33 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v33, 1LL, v9))
      {
        memcpy(v32, v33, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v32, v33, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v32, 0LL, 1LL, v9);
      }

      unint64_t v44 = ((unint64_t)v32 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v45 = ((unint64_t)v33 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v46 = *(void *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(void *)unint64_t v44 = v46;
      *(_BYTE *)(v44 + 9) = *(_BYTE *)(v45 + 9);
      char v40 = 1;
      break;
    case 2:
      uint64_t v34 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v34;
      __int128 v35 = *(_OWORD *)(v14 + 16);
      __int128 v36 = *(_OWORD *)(v14 + 32);
      __int128 v37 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v36;
      *(_OWORD *)(v13 + 48) = v37;
      *(_OWORD *)(v13 + 16) = v35;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      __int128 v38 = (void *)((v18 + v13) & v21);
      size_t v39 = (const void *)((v18 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v39, 1LL, v9))
      {
        memcpy(v38, v39, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v38, v39, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v38, 0LL, 1LL, v9);
      }

      unint64_t v47 = ((unint64_t)v38 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v48 = ((unint64_t)v39 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v49 = *(void *)v48;
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(void *)unint64_t v47 = v49;
      *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
      *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
      char v40 = 2;
      break;
    case 3:
      *(_WORD *)uint64_t v13 = *(_WORD *)v14;
      char v40 = 3;
      break;
    default:
      else {
        int v20 = 4;
      }
      __asm { BR              X14 }

      return result;
  }

  *(_BYTE *)(v13 + v19) = v40;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (unint64_t)&v8[v12] & ~(v11 | 7);
  if (v13 == v14)
  {
    int v24 = *(_DWORD *)(v10 + 84);
    size_t v25 = *(void *)(v10 + 64);
    uint64_t v26 = (v11 + 79) & ~v11;
    uint64_t v17 = (v11 + 78) & ~v11;
  }

  else
  {
    uint64_t v15 = v9;
    uint64_t v72 = a1;
    uint64_t v16 = v11 + 78;
    uint64_t v17 = (v11 + 78) & ~v11;
    if (*(_DWORD *)(v10 + 84)) {
      uint64_t v18 = *(void *)(v10 + 64);
    }
    else {
      uint64_t v18 = *(void *)(v10 + 64) + 1LL;
    }
    unint64_t v19 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
    unint64_t v20 = (v18 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v21 = v20 + 11;
    if (v20 + 11 <= v19) {
      unint64_t v22 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
    }
    else {
      unint64_t v22 = v20 + 11;
    }
    size_t __n = v18;
    uint64_t v27 = ~v11;
    int v75 = *(_DWORD *)(v10 + 84);
    size_t v74 = *(void *)(v10 + 64);
    switch(*(_BYTE *)(v13 + v22))
    {
      case 0:
      case 1:
        uint64_t v71 = v11 + 78;
        uint64_t v28 = v16 + v13;
        goto LABEL_16;
      case 2:
        uint64_t v71 = v11 + 78;
        uint64_t v28 = v13 + v11 + 79;
LABEL_16:
        uint64_t v29 = v28 & v27;
        uint64_t v17 = (v11 + 78) & ~v11;
        size_t v30 = v74;
        uint64_t v16 = v71;
        if (!v75) {
          goto LABEL_19;
        }
        goto LABEL_20;
      case 3:
LABEL_19:
        size_t v30 = __n;
LABEL_20:
        unint64_t v31 = ((v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 10;
        if (v19 > v31) {
          unint64_t v31 = v19;
        }
        if (v21 > v31) {
          unint64_t v31 = v21;
        }
        switch(*(_BYTE *)(v14 + v31))
        {
          case 0:
            uint64_t v33 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v33;
            __int128 v34 = *(_OWORD *)(v14 + 16);
            __int128 v35 = *(_OWORD *)(v14 + 32);
            __int128 v36 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v35;
            *(_OWORD *)(v13 + 48) = v36;
            *(_OWORD *)(v13 + 16) = v34;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v33) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v33;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            __int128 v37 = (void *)((v16 + v13) & v27);
            __int128 v38 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v38, 1LL, v15))
            {
              size_t v39 = __n;
              memcpy(v37, v38, __n);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v37, v38, v15);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v37, 0LL, 1LL, v15);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v39 = __n;
            }

            unint64_t v56 = ((unint64_t)v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v57 = ((unint64_t)v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v58 = *(void *)v57;
            *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
            *(void *)unint64_t v56 = v58;
            *(_BYTE *)(v56 + 9) = *(_BYTE *)(v57 + 9);
            *(_BYTE *)(v13 + v22) = 0;
            goto LABEL_43;
          case 1:
            uint64_t v40 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v40;
            __int128 v41 = *(_OWORD *)(v14 + 16);
            __int128 v42 = *(_OWORD *)(v14 + 32);
            __int128 v43 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v42;
            *(_OWORD *)(v13 + 48) = v43;
            *(_OWORD *)(v13 + 16) = v41;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v40) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v40;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            unint64_t v44 = (void *)((v16 + v13) & v27);
            unint64_t v45 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v45, 1LL, v15))
            {
              size_t v46 = __n;
              memcpy(v44, v45, __n);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v44, v45, v15);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v44, 0LL, 1LL, v15);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v46 = __n;
            }

            unint64_t v59 = ((unint64_t)v44 + v46 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v60 = ((unint64_t)v45 + v46 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v61 = *(void *)v60;
            *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
            *(void *)unint64_t v59 = v61;
            *(_BYTE *)(v59 + 9) = *(_BYTE *)(v60 + 9);
            *(_BYTE *)(v13 + v22) = 1;
LABEL_43:
            a1 = v72;
            break;
          case 2:
            uint64_t v47 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v47;
            __int128 v48 = *(_OWORD *)(v14 + 16);
            __int128 v49 = *(_OWORD *)(v14 + 32);
            __int128 v50 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v49;
            *(_OWORD *)(v13 + 48) = v50;
            *(_OWORD *)(v13 + 16) = v48;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
            id v51 = (const void *)((v11 + 79 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v51, 1LL, v15))
            {
              size_t v52 = __n;
              memcpy((void *)((v13 + v11 + 79) & v27), v51, __n);
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v10 + 32))((v13 + v11 + 79) & v27, v51, v15);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))( (v13 + v11 + 79) & v27,  0LL,  1LL,  v15);
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v52 = __n;
            }

            unint64_t v53 = (((v13 + v11 + 79) & v27) + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v54 = ((unint64_t)v51 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v55 = *(void *)v54;
            *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
            *(void *)unint64_t v53 = v55;
            *(_BYTE *)(v53 + 9) = *(_BYTE *)(v54 + 9);
            *(_BYTE *)(v53 + 10) = *(_BYTE *)(v54 + 10);
            *(_BYTE *)(v13 + v22) = 2;
            a1 = v72;
            int v24 = v75;
            uint64_t v17 = (v11 + 78) & ~v11;
            size_t v25 = v74;
            break;
          case 3:
            *(_WORD *)uint64_t v13 = *(_WORD *)v14;
            *(_BYTE *)(v13 + v22) = 3;
            uint64_t v26 = (v11 + 79) & ~v11;
            a1 = v72;
            int v24 = v75;
            size_t v25 = v74;
            break;
          default:
            else {
              int v32 = 4;
            }
            __asm { BR              X11 }

            return result;
        }

        return result;
      default:
        else {
          int v23 = 4;
        }
        __asm { BR              X11 }

        return result;
    }
  }

  if (v24) {
    size_t v62 = v25;
  }
  else {
    size_t v62 = v25 + 1;
  }
  size_t v63 = v62 + 7;
  unint64_t v64 = ((v63 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  unint64_t v65 = ((v63 + v26) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  if (v65 <= v64) {
    unint64_t v65 = v64;
  }
  unint64_t v66 = v65 + 1;
  uint64_t v67 = (void *)(((v13 | 7) + v66) & 0xFFFFFFFFFFFFFFF8LL);
  id v68 = (void *)(((v14 | 7) + v66) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v69 = v68[1];
  void *v67 = *v68;
  swift_unknownObjectRelease();
  v67[1] = v69;
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerParseStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = *(_DWORD *)(v8 + 84);
  uint64_t v11 = *(void *)(v8 + 64);
  else {
    unsigned int v12 = v7;
  }
  if (!v10) {
    ++v11;
  }
  uint64_t v13 = v11 + 7;
  unint64_t v14 = ((v13 + ((v9 + 78) & ~v9)) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  if (((v13 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8LL) + 11 > v14) {
    unint64_t v14 = ((v13 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = v9 | 7;
  if (v12 < a2)
  {
    if (((((v14 + ((v15 + v16 + 1) & ~v16) + 8) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v12 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0LL;
    }
    __asm { BR              X16 }
  }

  unint64_t v21 = *(void *)((((a1 + v15 + v16 + 1) & ~v16 | 7) + v14 + 1) & 0xFFFFFFFFFFFFF8LL);
  if (v21 >= 0xFFFFFFFF) {
    LODWORD(v21) = -1;
  }
  return (v21 + 1);
}

void storeEnumTagSinglePayload for IntegerParseStrategy( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 78) & ~v10;
  uint64_t v12 = *(void *)(v9 + 64);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v8;
  }
  uint64_t v14 = (v10 + 79) & ~v10;
  uint64_t v15 = v10 | 7;
  if (!*(_DWORD *)(v9 + 84)) {
    ++v12;
  }
  uint64_t v16 = v12 + 7;
  unint64_t v17 = ((v16 + v11) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  unint64_t v18 = ((v16 + v14) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  if (v18 > v17) {
    unint64_t v17 = v18;
  }
  if (v13 >= a3)
  {
    int v21 = 0u;
    if (a2 <= v13) {
      goto LABEL_21;
    }
  }

  else
  {
    if ((((_DWORD)v17 + ((*(_DWORD *)(v7 + 64) + (_DWORD)v15 + 1) & ~(_DWORD)v15) + 8) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v19 = a3 - v13 + 1;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    if (a2 <= v13) {
LABEL_21:
    }
      __asm { BR              X14 }
  }

  if ((((_DWORD)v17 + ((*(_DWORD *)(v7 + 64) + (_DWORD)v15 + 1) & ~(_DWORD)v15) + 8) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v22 = ~v13 + a2;
    bzero(a1, ((v17 + ((*(void *)(v7 + 64) + v15 + 1) & ~v15) + 8) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v22;
  }

  __asm { BR              X10 }

void sub_18330E130()
{
  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x18330E1C8LL);
}

void sub_18330E138()
{
  *(_DWORD *)(v0 + v2) = 0;
  if (v1) {
    JUMPOUT(0x18330E140LL);
  }
  JUMPOUT(0x18330E1C8LL);
}

void sub_18330E1A0()
{
  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x18330E1C8LL);
}

void sub_18330E1A8()
{
  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x18330E1C8LL);
}

uint64_t sub_18330E1B0()
{
  *(_WORD *)(v1 + v5) = 0;
  if (!(_DWORD)v2) {
    JUMPOUT(0x18330E1C8LL);
  }
  if (v4 < 0x7FFFFFFF)
  {
    if ((v2 & 0x80000000) == 0) {
      JUMPOUT(0x18330E1C4LL);
    }
    JUMPOUT(0x18330E1BCLL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v1, v2, v4, v3);
}

uint64_t storeEnumTagSinglePayload for IntegerParseStrategy.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_18330E230 + 4 * byte_183816C1C[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18330E264 + 4 * byte_183816C17[v4]))();
}

uint64_t sub_18330E264(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330E26C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18330E274LL);
  }
  return result;
}

uint64_t sub_18330E280(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18330E288LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_18330E28C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18330E294(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in IntegerParseStrategy<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in IntegerParseStrategy<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in IntegerParseStrategy<A>.CodingKeys()
{
}

void encodingFromDataForExtendedAttribute(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (v7 == 1)
  {
    outlined copy of Data._Representation(a1, a2);
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
    uint64_t v9 = (unsigned __int8 *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 16);
    uint64_t v11 = static String._tryFromUTF8(_:)();
    if (v12)
    {
      uint64_t v13 = v11;
      unint64_t v14 = v12;
      swift_release();
      outlined consume of Data._Representation(a1, a2);
    }

    else
    {
      uint64_t v13 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v9, v10);
      unint64_t v14 = v15;
      swift_release();
      outlined consume of Data._Representation(a1, a2);
      if (!v14) {
        goto LABEL_18;
      }
    }
  }

  else
  {
    uint64_t v13 = v6;
    unint64_t v14 = v7;
    if (!v7) {
      goto LABEL_18;
    }
  }

  specialized Collection<>.firstIndex(of:)(59LL, 0xE100000000000000LL, v13, v14);
  if ((v16 & 1) != 0) {
    goto LABEL_14;
  }
  unint64_t v17 = String.index(after:)();
  uint64_t v18 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 >> 14 >= 4 * v18)
  {
LABEL_14:
    uint64_t v31 = String.subscript.getter();
    unint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((v31 ^ v33) >= 0x4000)
    {
      MEMORY[0x186E1B610](v31, v33, v35, v37);
      swift_bridgeObjectRelease();
      __int128 v38 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      CFStringEncoding v39 = CFStringConvertIANACharSetNameToEncoding(v38);
      swift_unknownObjectRelease();
      if (v39 != -1)
      {
        unint64_t v40 = CFStringConvertEncodingToNSStringEncoding(v39);
        char v41 = 0;
LABEL_19:
        *(void *)a3 = v40;
        *(_BYTE *)(a3 + 8) = v41;
        return;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

uint64_t specialized UTF16EndianAdaptor.Iterator.next()()
{
  if ((*(_BYTE *)(v0 + 65) & 1) != 0)
  {
LABEL_2:
    Swift::UInt8_optional v1 = Data.Iterator.next()();
    if ((*(_WORD *)&v1 & 0x100) != 0) {
      goto LABEL_20;
    }
    Swift::UInt8 value = v1.value;
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = Data.Iterator.next()();
    if ((v3 & 0x100) != 0) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }

  int v4 = 1;
  *(_BYTE *)(v0 + 65) = 1;
  Swift::UInt8_optional v5 = Data.Iterator.next()();
  if ((*(_WORD *)&v5 & 0x100) != 0)
  {
    LOWORD(v8) = 0;
    return (unsigned __int16)v8 | (v4 << 16);
  }

  Swift::UInt8 value = v5.value;
  unsigned int v6 = v5.value;
  LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = Data.Iterator.next()();
  if (v6 < 0xFE)
  {
    if ((v3 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_20:
    LOWORD(v8) = 0;
    int v4 = 1;
    return (unsigned __int16)v8 | (v4 << 16);
  }

  if ((v3 & 0x100) != 0) {
    goto LABEL_20;
  }
  if (v6 == 255 && v3 == 254)
  {
    int v7 = *(unsigned __int8 *)(v0 + 64);
    if (v7 != 2)
    {
      int v4 = 0;
      if ((v7 & 1) != 0) {
        LOWORD(v8) = -2;
      }
      else {
        LOWORD(v8) = -257;
      }
      return (unsigned __int16)v8 | (v4 << 16);
    }

    *(_BYTE *)(v0 + 64) = 0;
    goto LABEL_2;
  }

  if (v6 == 254 && v3 == 255)
  {
    int v13 = *(unsigned __int8 *)(v0 + 64);
    if (v13 != 2)
    {
      int v4 = 0;
      if ((v13 & 1) != 0) {
        LOWORD(v8) = -257;
      }
      else {
        LOWORD(v8) = -2;
      }
      return (unsigned __int16)v8 | (v4 << 16);
    }

    *(_BYTE *)(v0 + 64) = 1;
    goto LABEL_2;
  }

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t result;
  int v22;
  int v23;
  if (*((_BYTE *)v0 + 17) == 1)
  {
    Swift::UInt8_optional v1 = *v0;
    uint64_t v2 = v0[1];
LABEL_3:
    int v3 = *(void *)(v1 + 16);
    if (v2 == v3)
    {
LABEL_6:
      LOWORD(v6) = 0;
      int v7 = 1;
      return (unsigned __int16)v6 | (v7 << 16);
    }

    if (v2 < v3)
    {
      int v4 = v1 + 32;
      Swift::UInt8_optional v5 = *(unsigned __int8 *)(v1 + 32 + v2);
      v0[1] = v2 + 1;
      if (v2 + 1 == v3) {
        goto LABEL_6;
      }
      if (v2 + 1 < v3)
      {
        int v7 = 0;
        unint64_t v15 = *(unsigned __int8 *)(v4 + v2 + 1);
        v0[1] = v2 + 2;
        unsigned int v6 = v5 | (v15 << 8);
LABEL_22:
        uint64_t v18 = *((unsigned __int8 *)v0 + 16);
        unint64_t v19 = (v18 & 1) != 0 || v18 == 2;
        unint64_t v20 = bswap32(v6) >> 16;
LABEL_26:
        if (v19) {
          LOWORD(v6) = v20;
        }
        return (unsigned __int16)v6 | (v7 << 16);
      }

      goto LABEL_46;
    }

    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  int v7 = 1;
  *((_BYTE *)v0 + 17) = 1;
  Swift::UInt8_optional v1 = *v0;
  unsigned int v8 = v0[1];
  unsigned int v9 = *(void *)(*v0 + 16);
  if (v8 == v9)
  {
LABEL_8:
    LOWORD(v6) = 0;
    return (unsigned __int16)v6 | (v7 << 16);
  }

  if (v8 >= v9) {
    goto LABEL_45;
  }
  int v10 = v1 + 32;
  BOOL v11 = *(unsigned __int8 *)(v1 + 32 + v8);
  unint64_t v12 = v8 + 1;
  v0[1] = v8 + 1;
  if (v11 > 0xFD)
  {
    if (v12 != v9)
    {
      if (v12 >= v9)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }

      int v13 = *(unsigned __int8 *)(v10 + v12);
      uint64_t v2 = v8 + 2;
      v0[1] = v2;
      if (v11 == 255 && v13 == 254)
      {
        unint64_t v14 = *((unsigned __int8 *)v0 + 16);
        if (v14 != 2)
        {
          int v7 = 0;
          if ((v14 & 1) != 0) {
            LOWORD(v6) = -2;
          }
          else {
            LOWORD(v6) = -257;
          }
          return (unsigned __int16)v6 | (v7 << 16);
        }

        *((_BYTE *)v0 + 16) = 0;
      }

      else
      {
        if (v11 != 254 || v13 != 255)
        {
          int v7 = 0;
          unsigned int v6 = v11 | (v13 << 8);
          uint64_t v23 = *((unsigned __int8 *)v0 + 16);
          unint64_t v19 = (v23 & 1) != 0 || v23 == 2;
          LOWORD(v20) = __rev16(v6);
          goto LABEL_26;
        }

        unint64_t v22 = *((unsigned __int8 *)v0 + 16);
        if (v22 != 2)
        {
          int v7 = 0;
          if ((v22 & 1) != 0) {
            LOWORD(v6) = -257;
          }
          else {
            LOWORD(v6) = -2;
          }
          return (unsigned __int16)v6 | (v7 << 16);
        }

        *((_BYTE *)v0 + 16) = 1;
      }

      goto LABEL_3;
    }

    goto LABEL_8;
  }

  if (v12 == v9) {
    goto LABEL_8;
  }
  if (v12 < v9)
  {
    int v7 = 0;
    char v16 = v8 + 2;
    unint64_t v17 = *(unsigned __int8 *)(v10 + v12);
    v0[1] = v16;
    unsigned int v6 = v11 | (v17 << 8);
    goto LABEL_22;
  }

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  int v14;
  int v15;
  Swift::UInt8_optional v1 = *v0;
  if ((*((_BYTE *)v0 + 17) & 1) != 0)
  {
    if (!v1)
    {
LABEL_24:
      int v3 = 1;
      return (unsigned __int16)v1 | (v3 << 16);
    }
  }

  else
  {
    int v3 = 1;
    *((_BYTE *)v0 + 17) = 1;
    if (!v1) {
      return (unsigned __int16)v1 | (v3 << 16);
    }
    Swift::UInt8_optional v5 = v0[1];
    if (v1 == v5) {
      goto LABEL_23;
    }
    unsigned int v6 = v1 + 1;
    *uint64_t v0 = v1 + 1;
    int v4 = *v1;
    if (v4 <= 0xFD)
    {
      if (v6 != v5)
      {
        int v3 = 0;
        goto LABEL_16;
      }

      goto LABEL_23;
    }

    if (v6 == v5)
    {
LABEL_23:
      LOWORD(v1) = 0;
      goto LABEL_24;
    }

    int v7 = v1 + 2;
    *uint64_t v0 = v1 + 2;
    unsigned int v8 = v1[1];
    if (v4 == 255 && v8 == 254)
    {
      unsigned int v9 = *((unsigned __int8 *)v0 + 16);
      if (v9 != 2)
      {
        int v3 = 0;
        if ((v9 & 1) != 0) {
          LOWORD(v1) = -2;
        }
        else {
          LOWORD(v1) = -257;
        }
        return (unsigned __int16)v1 | (v3 << 16);
      }

      *((_BYTE *)v0 + 16) = 0;
    }

    else
    {
      if (v4 != 254 || v8 != 255)
      {
        int v3 = 0;
        LODWORD(v1) = v4 | (v8 << 8);
        unint64_t v15 = *((unsigned __int8 *)v0 + 16);
        BOOL v11 = (v15 & 1) != 0 || v15 == 2;
        LOWORD(v12) = __rev16(v1);
        goto LABEL_20;
      }

      unint64_t v14 = *((unsigned __int8 *)v0 + 16);
      if (v14 != 2)
      {
        int v3 = 0;
        if ((v14 & 1) != 0) {
          LOWORD(v1) = -257;
        }
        else {
          LOWORD(v1) = -2;
        }
        return (unsigned __int16)v1 | (v3 << 16);
      }

      *((_BYTE *)v0 + 16) = 1;
    }

    Swift::UInt8_optional v1 = v7;
  }

  uint64_t v2 = v0[1];
  if (v1 == v2) {
    goto LABEL_23;
  }
  *uint64_t v0 = v1 + 1;
  if (v1 + 1 == v2) {
    goto LABEL_23;
  }
  int v3 = 0;
  int v4 = *v1;
LABEL_16:
  *uint64_t v0 = v1 + 2;
  LODWORD(v1) = v4 | (v1[1] << 8);
  int v10 = *((unsigned __int8 *)v0 + 16);
  BOOL v11 = (v10 & 1) != 0 || v10 == 2;
  unint64_t v12 = bswap32(v1) >> 16;
LABEL_20:
  if (v11) {
    LOWORD(v1) = v12;
  }
  return (unsigned __int16)v1 | (v3 << 16);
}

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  unsigned int v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  int v12;
  if ((*((_BYTE *)v0 + 17) & 1) != 0)
  {
LABEL_2:
    Swift::UInt8_optional v1 = *v0;
    if (*v0 >= v0[1]) {
      goto LABEL_20;
    }
    uint64_t v2 = *v1;
    *uint64_t v0 = v1 + 1;
    int v3 = specialized BufferViewIterator.next()();
    if ((v3 & 0x100) != 0) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }

  int v4 = 1;
  *((_BYTE *)v0 + 17) = 1;
  Swift::UInt8_optional v5 = *v0;
  if (*v0 >= v0[1])
  {
    LOWORD(v7) = 0;
    return (unsigned __int16)v7 | (v4 << 16);
  }

  uint64_t v2 = *v5;
  *uint64_t v0 = v5 + 1;
  int v3 = specialized BufferViewIterator.next()();
  if (v2 <= 0xFD)
  {
    if ((v3 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_20:
    LOWORD(v7) = 0;
    int v4 = 1;
    return (unsigned __int16)v7 | (v4 << 16);
  }

  if ((v3 & 0x100) != 0) {
    goto LABEL_20;
  }
  if (v2 == 255 && v3 == 254)
  {
    unsigned int v6 = *((unsigned __int8 *)v0 + 16);
    if (v6 != 2)
    {
      int v4 = 0;
      if ((v6 & 1) != 0) {
        LOWORD(v7) = -2;
      }
      else {
        LOWORD(v7) = -257;
      }
      return (unsigned __int16)v7 | (v4 << 16);
    }

    *((_BYTE *)v0 + 16) = 0;
    goto LABEL_2;
  }

  if (v2 == 254 && v3 == 255)
  {
    unint64_t v12 = *((unsigned __int8 *)v0 + 16);
    if (v12 != 2)
    {
      int v4 = 0;
      if ((v12 & 1) != 0) {
        LOWORD(v7) = -257;
      }
      else {
        LOWORD(v7) = -2;
      }
      return (unsigned __int16)v7 | (v4 << 16);
    }

    *((_BYTE *)v0 + 16) = 1;
    goto LABEL_2;
  }

unint64_t specialized UTF32EndianAdaptor.Iterator.next()()
{
  if ((*(_BYTE *)(v0 + 65) & 1) != 0)
  {
LABEL_2:
    Swift::UInt8_optional v1 = Data.Iterator.next()();
    if ((*(_WORD *)&v1 & 0x100) != 0) {
      goto LABEL_24;
    }
    Swift::UInt8 value = v1.value;
LABEL_15:
    Swift::UInt8_optional v12 = Data.Iterator.next()();
    if ((*(_WORD *)&v12 & 0x100) == 0)
    {
      Swift::UInt8_optional v7 = v12;
      Swift::UInt8_optional v13 = Data.Iterator.next()();
      if ((*(_WORD *)&v13 & 0x100) == 0)
      {
        Swift::UInt8 v9 = v13.value;
        LOWORD(v10) = Data.Iterator.next()();
        if ((v10 & 0x100) == 0) {
          goto LABEL_18;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t result;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  if (*((_BYTE *)v0 + 17) == 1)
  {
    Swift::UInt8_optional v1 = *v0;
    uint64_t v2 = v0[1];
LABEL_3:
    unsigned __int8 v3 = *(void *)(v1 + 16);
    if (v2 == v3) {
      goto LABEL_34;
    }
    if (v2 < v3)
    {
      Swift::UInt8_optional v4 = v1 + 32;
      int v5 = *(unsigned __int8 *)(v1 + 32 + v2);
      v0[1] = v2 + 1;
      if (v2 + 1 == v3) {
        goto LABEL_34;
      }
      if (v2 + 1 < v3)
      {
        Swift::UInt8_optional v6 = *(unsigned __int8 *)(v4 + v2 + 1);
        v0[1] = v2 + 2;
        if (v2 + 2 != v3)
        {
          if (v2 + 2 < v3)
          {
            Swift::UInt8_optional v7 = *(unsigned __int8 *)(v4 + v2 + 2);
            v0[1] = v2 + 3;
            if (v2 + 3 != v3)
            {
              if (v2 + 3 < v3)
              {
                Swift::UInt8_optional v8 = 0;
                Swift::UInt8 v9 = *(unsigned __int8 *)(v4 + v2 + 3);
                v0[1] = v2 + 4;
                int v10 = v5 | (v6 << 8) | (v7 << 16) | (v9 << 24);
LABEL_49:
                uint64_t v25 = *((unsigned __int8 *)v0 + 16);
                uint64_t v26 = (v25 & 1) != 0 || v25 == 2;
                uint64_t v27 = bswap32(v10);
                if (v26) {
                  int v10 = v27;
                }
                return v10 | ((unint64_t)v8 << 32);
              }

              goto LABEL_65;
            }

            goto LABEL_34;
          }

          goto LABEL_62;
        }

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v18;
  Swift::UInt8_optional v1 = *v0;
  if ((*((_BYTE *)v0 + 17) & 1) != 0)
  {
    if (!v1)
    {
LABEL_30:
      Swift::UInt8_optional v4 = 1;
      return v1 | ((unint64_t)v4 << 32);
    }

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  int v2;
  __int16 v3;
  unsigned __int8 v4;
  __int16 v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  __int16 v19;
  __int16 v20;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  if ((*((_BYTE *)v0 + 17) & 1) != 0) {
    goto LABEL_2;
  }
  Swift::UInt8_optional v8 = 1;
  *((_BYTE *)v0 + 17) = 1;
  int v10 = *v0;
  if (*v0 >= v0[1])
  {
    Swift::UInt8 v9 = 0;
    return v9 | ((unint64_t)v8 << 32);
  }

  Swift::UInt8_optional v12 = *v10;
  int v11 = v12;
  *uint64_t v0 = v10 + 1;
  if (v12 && v11 != 255)
  {
    int v19 = specialized BufferViewIterator.next()();
    if ((v19 & 0x100) != 0) {
      goto LABEL_22;
    }
    unsigned int v14 = v19;
    unint64_t v20 = specialized BufferViewIterator.next()();
    if ((v20 & 0x100) != 0) {
      goto LABEL_22;
    }
    BOOL v16 = v20;
    unsigned int v17 = specialized BufferViewIterator.next()();
    if ((v17 & 0x100) != 0) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }

  Swift::UInt8_optional v13 = specialized BufferViewIterator.next()();
  if ((v13 & 0x100) != 0) {
    goto LABEL_22;
  }
  unsigned int v14 = v13;
  int v15 = specialized BufferViewIterator.next()();
  if ((v15 & 0x100) != 0) {
    goto LABEL_22;
  }
  BOOL v16 = v15;
  unsigned int v17 = specialized BufferViewIterator.next()();
  if ((v17 & 0x100) != 0) {
    goto LABEL_22;
  }
  if (v11 == 255 && v14 == 254 && !(v16 | v17))
  {
    uint64_t v18 = *((unsigned __int8 *)v0 + 16);
    if (v18 != 2)
    {
      Swift::UInt8_optional v8 = 0;
      if ((v18 & 1) != 0) {
        Swift::UInt8 v9 = -131072;
      }
      else {
        Swift::UInt8 v9 = 65279;
      }
      return v9 | ((unint64_t)v8 << 32);
    }

    *((_BYTE *)v0 + 16) = 0;
    goto LABEL_2;
  }

  if (v11 | v14 || v16 != 254 || v17 != 255)
  {
LABEL_29:
    Swift::UInt8_optional v8 = 0;
    Swift::UInt8 v9 = (unsigned __int16)(v11 | (v14 << 8)) | (v16 << 16) | (v17 << 24);
    goto LABEL_30;
  }

  unint64_t v22 = *((unsigned __int8 *)v0 + 16);
  if (v22 != 2)
  {
    Swift::UInt8_optional v8 = 0;
    if ((v22 & 1) != 0) {
      Swift::UInt8 v9 = 65279;
    }
    else {
      Swift::UInt8 v9 = -131072;
    }
    return v9 | ((unint64_t)v8 << 32);
  }

  *((_BYTE *)v0 + 16) = 1;
LABEL_2:
  Swift::UInt8_optional v1 = *v0;
  if (*v0 >= v0[1]
    || (v2 = *v1, *v0 = v1 + 1, unsigned __int8 v3 = specialized BufferViewIterator.next()(), (v3 & 0x100) != 0)
    || (Swift::UInt8_optional v4 = v3, v5 = specialized BufferViewIterator.next()(), (v5 & 0x100) != 0)
    || (v6 = v5, Swift::UInt8_optional v7 = specialized BufferViewIterator.next()(), (v7 & 0x100) != 0))
  {
LABEL_22:
    Swift::UInt8 v9 = 0;
    Swift::UInt8_optional v8 = 1;
    return v9 | ((unint64_t)v8 << 32);
  }

  Swift::UInt8_optional v8 = 0;
  Swift::UInt8 v9 = v2 & 0xFF0000FF | (unsigned __int16)(v4 << 8) | (v6 << 16) | (v7 << 24);
LABEL_30:
  uint64_t v23 = *((unsigned __int8 *)v0 + 16);
  uint64_t v24 = (v23 & 1) != 0 || v23 == 2;
  uint64_t v25 = bswap32(v9);
  if (v24) {
    Swift::UInt8 v9 = v25;
  }
  return v9 | ((unint64_t)v8 << 32);
}

uint64_t specialized String.init<A>(bytes:encoding:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3 > 2415919359LL)
  {
    if (a3 > 2550137087LL)
    {
      if (a3 != 2550137088LL && a3 != 2617245952LL) {
        goto LABEL_28;
      }
      goto LABEL_24;
    }

    if (a3 != 2415919360LL && a3 != 2483028224LL) {
      goto LABEL_28;
    }
LABEL_21:
    specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
    if (v20 < 2)
    {
      outlined copy of Data._Representation(a1, a2);
      specialized String.init<A, B>(_validating:as:)(a1, a2);
      if (!v22) {
        return 0LL;
      }
      return v21;
    }

    return v19;
  }

  if (a3 > 9)
  {
    if (a3 != 10)
    {
      if (a3 != 2348810496LL)
      {
LABEL_28:
        specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
        uint64_t v13 = v26;
        if (!v26) {
          return v13;
        }
        if (v26 != 1) {
          return v25;
        }
        outlined copy of Data._Representation(a1, a2);
        specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
        id v28 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  v27 + 32,  *(void *)(v27 + 16),  a3);
        if (v28)
        {
          unint64_t v29 = v28;
          uint64_t v13 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          swift_release();

          goto LABEL_32;
        }

        swift_release();
        outlined consume of Data._Representation(a1, a2);
        return 0LL;
      }

id specialized String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t a2)
{
  if (a2 > 2415919359LL)
  {
    if (a2 > 2550137087LL)
    {
      if (a2 == 2550137088LL)
      {
        uint64_t v9 = 1LL;
      }

      else
      {
        if (a2 != 2617245952LL) {
          goto LABEL_30;
        }
        uint64_t v9 = 0LL;
      }

      goto LABEL_25;
    }

    if (a2 == 2415919360LL)
    {
      uint64_t v9 = 1LL;
    }

    else
    {
      if (a2 != 2483028224LL) {
        goto LABEL_30;
      }
      uint64_t v9 = 0LL;
    }

id specialized String.init<A>(bytes:encoding:)(char *a1, uint64_t a2, uint64_t a3)
{
  if (a3 > 2415919359LL)
  {
    if (a3 > 2550137087LL)
    {
      if (a3 == 2550137088LL)
      {
        uint64_t v9 = 1LL;
      }

      else
      {
        if (a3 != 2617245952LL) {
          goto LABEL_29;
        }
        uint64_t v9 = 0LL;
      }

{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  void *v16;
  _BYTE *v17;
  id v18;
  void *v19;
  __int128 v20;
  if (a3 > 2415919359LL)
  {
    if (a3 > 2550137087LL)
    {
      if (a3 == 2550137088LL)
      {
        uint64_t v9 = 1LL;
      }

      else
      {
        if (a3 != 2617245952LL) {
          goto LABEL_30;
        }
        uint64_t v9 = 0LL;
      }

      goto LABEL_25;
    }

    if (a3 == 2415919360LL)
    {
      uint64_t v9 = 1LL;
    }

    else
    {
      if (a3 != 2483028224LL) {
        goto LABEL_30;
      }
      uint64_t v9 = 0LL;
    }

uint64_t String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = a1;
  uint64_t v7 = type metadata accessor for UTF32EndianAdaptor(0LL, a3, a4, a4);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v66 - v8;
  uint64_t v68 = a4;
  uint64_t v11 = type metadata accessor for UTF16EndianAdaptor(0LL, a3, a4, v10);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v66 - v12;
  uint64_t v66 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v14);
  MEMORY[0x1895F8858](v15);
  id v17 = (char *)&v66 - v16;
  MEMORY[0x1895F8858](v18);
  MEMORY[0x1895F8858](v19);
  unint64_t v23 = (char *)&v66 - v22;
  uint64_t v24 = *a2;
  if (*a2 > 2415919359LL)
  {
    char v36 = 1;
    if (v24 > 2550137087LL)
    {
      if (v24 != 2550137088LL)
      {
        if (v24 != 2617245952LL) {
          goto LABEL_34;
        }
        char v36 = 0;
      }

void specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  0LL,  0,  MEMORY[0x18961AFE8]);
  __asm { BR              X10 }

uint64_t sub_183310724()
{
  uint64_t v42 = v2;
  unint64_t v43 = v0;
  outlined consume of Data._Representation(v2, v0);
  char v49 = v1;
  char v50 = 0;
  unsigned int v44 = 0;
  unsigned __int8 v45 = 0;
  unint64_t v40 = v48;
  uint64_t v41 = v47;
  outlined copy of Data._Representation(v47, v48);
  uint64_t v4 = 1LL;
LABEL_2:
  uint64_t v5 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v5 & 0x10000) != 0)
  {
LABEL_73:
    outlined consume of Data._Representation(v47, v48);
    outlined consume of Data._Representation(v41, v40);
    swift_bridgeObjectRetain();
    uint64_t v36 = static String._tryFromUTF8(_:)();
    uint64_t v38 = v37;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v42, v43);
    swift_bridgeObjectRelease();
    if (v38) {
      return v36;
    }
    else {
      return 0LL;
    }
  }

  LOWORD(v6) = v5;
  if ((v5 & 0xF800) == 0xD800)
  {
    unsigned int v6 = (unsigned __int16)v5 | (HIWORD(v44) << 16);
    unsigned __int8 v7 = 16;
    goto LABEL_5;
  }

  while (1)
  {
    unsigned int v6 = (unsigned __int16)v6;
    char v21 = 1;
LABEL_48:
    if ((unsigned __int16)v6 >= 0x80u)
    {
      int v29 = (v6 & 0x3F) << 8;
      if ((unsigned __int16)v6 >= 0x800u)
      {
        if ((v6 & 0xF800) == 0xD800)
        {
          if ((v21 & 1) != 0)
          {
            int v32 = (v6 & 0x3F) << 8;
            int v33 = (v32 | ((unsigned __int16)v6 >> 6)) + 33217;
            int v34 = (((unsigned __int16)v6 >> 12) | ((v32 | ((unsigned __int16)v6 >> 6) & 0x3F) << 8)) + 8487393;
            else {
              int v23 = v33;
            }
            goto LABEL_50;
          }

          unsigned int v35 = ((v6 & 0x3FF) << 10) | HIWORD(v6) & 0x3FF;
          unsigned int v30 = ((v35 + 0x10000) >> 4) & 0x3F00 | ((v35 + 0x10000) >> 18) | (((v35 >> 6) & 0x3F | (((v35 + 0x10000) & 0x3F) << 8)) << 16);
          int v31 = -2122219023;
        }

        else
        {
          unsigned int v30 = ((v29 | ((unsigned __int16)v6 >> 6) & 0x3F) << 8) | ((unsigned __int16)v6 >> 12);
          int v31 = 8487393;
        }
      }

      else
      {
        unsigned int v30 = v29 | ((unsigned __int16)v6 >> 6);
        int v31 = 33217;
      }

      int v23 = v30 + v31;
      goto LABEL_50;
    }

    int v23 = (v6 + 1);
    if ((_BYTE)v6 == 0xFF)
    {
LABEL_58:
      uint64_t v28 = v4;
      goto LABEL_59;
    }

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, char a2)
{
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  0LL,  0,  MEMORY[0x18961AFE8]);
  uint64_t v39 = a1;
  uint64_t v40 = 0LL;
  char v41 = a2;
  char v42 = 0;
  unsigned int v37 = 0;
  unsigned __int8 v38 = 0;
  swift_bridgeObjectRetain_n();
  uint64_t v5 = 1LL;
LABEL_2:
  uint64_t v6 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v6 & 0x10000) != 0) {
    goto LABEL_50;
  }
  LOWORD(v7) = v6;
  if ((v6 & 0xF800) != 0xD800)
  {
    while (1)
    {
      unsigned int v7 = (unsigned __int16)v7;
      char v17 = 1;
LABEL_25:
      if ((unsigned __int16)v7 >= 0x80u)
      {
        int v25 = (v7 & 0x3F) << 8;
        if ((unsigned __int16)v7 < 0x800u)
        {
          unsigned int v26 = v25 | ((unsigned __int16)v7 >> 6);
          int v27 = 33217;
LABEL_40:
          int v19 = v26 + v27;
          goto LABEL_27;
        }

        if ((v7 & 0xF800) != 0xD800)
        {
          unsigned int v26 = ((v25 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
          int v27 = 8487393;
          goto LABEL_40;
        }

        if ((v17 & 1) == 0)
        {
          unsigned int v31 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
          unsigned int v26 = ((v31 + 0x10000) >> 4) & 0x3F00 | ((v31 + 0x10000) >> 18) | (((v31 >> 6) & 0x3F | (((v31 + 0x10000) & 0x3F) << 8)) << 16);
          int v27 = -2122219023;
          goto LABEL_40;
        }

        int v28 = (v7 & 0x3F) << 8;
        int v29 = (v28 | ((unsigned __int16)v7 >> 6)) + 33217;
        int v30 = (((unsigned __int16)v7 >> 12) | ((v28 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8)) + 8487393;
        else {
          int v19 = v29;
        }
      }

      else
      {
        int v19 = (v7 + 1);
        if ((_BYTE)v7 == 0xFF)
        {
LABEL_35:
          uint64_t v24 = v5;
          goto LABEL_36;
        }
      }

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  0LL,  0,  MEMORY[0x18961AFE8]);
  uint64_t v7 = a1 + a2;
  if (!a1) {
    uint64_t v7 = 0LL;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v7;
  char v44 = a3;
  char v45 = 0;
  unsigned int v40 = 0;
  unsigned __int8 v41 = 0;
  uint64_t v8 = 1LL;
LABEL_4:
  uint64_t v9 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v9 & 0x10000) != 0) {
    goto LABEL_52;
  }
  LOWORD(v10) = v9;
  if ((v9 & 0xF800) != 0xD800)
  {
    while (1)
    {
      unsigned int v10 = (unsigned __int16)v10;
      char v20 = 1;
LABEL_27:
      if ((unsigned __int16)v10 >= 0x80u)
      {
        int v28 = (v10 & 0x3F) << 8;
        if ((unsigned __int16)v10 < 0x800u)
        {
          unsigned int v29 = v28 | ((unsigned __int16)v10 >> 6);
          int v30 = 33217;
LABEL_42:
          int v22 = v29 + v30;
          goto LABEL_29;
        }

        if ((v10 & 0xF800) != 0xD800)
        {
          unsigned int v29 = ((v28 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8) | ((unsigned __int16)v10 >> 12);
          int v30 = 8487393;
          goto LABEL_42;
        }

        if ((v20 & 1) == 0)
        {
          unsigned int v34 = ((v10 & 0x3FF) << 10) | HIWORD(v10) & 0x3FF;
          unsigned int v29 = ((v34 + 0x10000) >> 4) & 0x3F00 | ((v34 + 0x10000) >> 18) | (((v34 >> 6) & 0x3F | (((v34 + 0x10000) & 0x3F) << 8)) << 16);
          int v30 = -2122219023;
          goto LABEL_42;
        }

        int v31 = (v10 & 0x3F) << 8;
        int v32 = (v31 | ((unsigned __int16)v10 >> 6)) + 33217;
        int v33 = (((unsigned __int16)v10 >> 12) | ((v31 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8)) + 8487393;
        else {
          int v22 = v32;
        }
      }

      else
      {
        int v22 = (v10 + 1);
        if ((_BYTE)v10 == 0xFF)
        {
LABEL_37:
          uint64_t v27 = v8;
          goto LABEL_38;
        }
      }

{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  BOOL v17;
  char v18;
  char v19;
  uint64_t (*v20)();
  int v21;
  unint64_t v22;
  unsigned int i;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  0LL,  0,  MEMORY[0x18961AFE8]);
  unsigned __int8 v41 = a1;
  uint64_t v42 = a1 + a2;
  uint64_t v43 = a3;
  char v44 = 0;
  uint64_t v7 = 1LL;
  uint64_t v39 = 0;
  unsigned int v40 = 0;
LABEL_2:
  uint64_t v8 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v8 & 0x10000) != 0) {
    goto LABEL_50;
  }
  LOWORD(v9) = v8;
  if ((v8 & 0xF800) != 0xD800)
  {
    while (1)
    {
      uint64_t v9 = (unsigned __int16)v9;
      char v19 = 1;
LABEL_25:
      if ((unsigned __int16)v9 >= 0x80u)
      {
        uint64_t v27 = (v9 & 0x3F) << 8;
        if ((unsigned __int16)v9 < 0x800u)
        {
          int v28 = v27 | ((unsigned __int16)v9 >> 6);
          unsigned int v29 = 33217;
LABEL_40:
          char v21 = v28 + v29;
          goto LABEL_27;
        }

        if ((v9 & 0xF800) != 0xD800)
        {
          int v28 = ((v27 | ((unsigned __int16)v9 >> 6) & 0x3F) << 8) | ((unsigned __int16)v9 >> 12);
          unsigned int v29 = 8487393;
          goto LABEL_40;
        }

        if ((v19 & 1) == 0)
        {
          int v33 = ((v9 & 0x3FF) << 10) | HIWORD(v9) & 0x3FF;
          int v28 = ((v33 + 0x10000) >> 4) & 0x3F00 | ((v33 + 0x10000) >> 18) | (((v33 >> 6) & 0x3F | (((v33 + 0x10000) & 0x3F) << 8)) << 16);
          unsigned int v29 = -2122219023;
          goto LABEL_40;
        }

        int v30 = (v9 & 0x3F) << 8;
        int v31 = (v30 | ((unsigned __int16)v9 >> 6)) + 33217;
        int v32 = (((unsigned __int16)v9 >> 12) | ((v30 | ((unsigned __int16)v9 >> 6) & 0x3F) << 8)) + 8487393;
        else {
          char v21 = v31;
        }
      }

      else
      {
        char v21 = (v9 + 1);
        if ((_BYTE)v9 == 0xFF)
        {
LABEL_35:
          BOOL v26 = v7;
          goto LABEL_36;
        }
      }

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unsigned int v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  unsigned __int8 v13 = (char *)&v43 - v12;
  uint64_t v14 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14 & ~(v14 >> 63),  0,  MEMORY[0x18961AFE8]);
  uint64_t v46 = v4;
  uint64_t v47 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  char v44 = v13;
  uint64_t v45 = v8;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, AssociatedTypeWitness);
  unsigned int v50 = 0;
  unsigned __int8 v51 = 0;
  uint64_t v16 = 1LL;
LABEL_2:
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v49 & 1) != 0)
  {
LABEL_48:
    uint64_t v37 = *(void (**)(char *, uint64_t))(v45 + 8);
    v37(v10, AssociatedTypeWitness);
    v37(v44, AssociatedTypeWitness);
    swift_bridgeObjectRetain();
    uint64_t v38 = static String._tryFromUTF8(_:)();
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, a2);
    swift_bridgeObjectRelease();
    if (v40) {
      return v38;
    }
    else {
      return 0LL;
    }
  }

  unsigned int v17 = v48;
  if ((v48 & 0xF800) == 0xD800)
  {
    unsigned int v50 = ((-65535 << v51) - 1) & v50 | (v48 << v51);
    v51 += 16;
    goto LABEL_5;
  }

  while (1)
  {
    int v22 = 1;
LABEL_23:
    if ((unsigned __int16)v17 >= 0x80u)
    {
      int v30 = (v17 & 0x3F) << 8;
      if ((unsigned __int16)v17 >= 0x800u)
      {
        if ((v17 & 0xF800) == 0xD800)
        {
          if (v22)
          {
            int v33 = (v17 & 0x3F) << 8;
            int v34 = (v33 | ((unsigned __int16)v17 >> 6)) + 33217;
            int v35 = (((unsigned __int16)v17 >> 12) | ((v33 | ((unsigned __int16)v17 >> 6) & 0x3F) << 8)) + 8487393;
            else {
              int v24 = v34;
            }
            goto LABEL_25;
          }

          unsigned int v36 = ((v17 & 0x3FF) << 10) | HIWORD(v17) & 0x3FF;
          unsigned int v31 = ((v36 + 0x10000) >> 4) & 0x3F00 | ((v36 + 0x10000) >> 18) | (((v36 >> 6) & 0x3F | (((v36 + 0x10000) & 0x3F) << 8)) << 16);
          int v32 = -2122219023;
        }

        else
        {
          unsigned int v31 = ((v30 | ((unsigned __int16)v17 >> 6) & 0x3F) << 8) | ((unsigned __int16)v17 >> 12);
          int v32 = 8487393;
        }
      }

      else
      {
        unsigned int v31 = v30 | ((unsigned __int16)v17 >> 6);
        int v32 = 33217;
      }

      int v24 = v31 + v32;
      goto LABEL_25;
    }

    int v24 = (v17 + 1);
    if ((_BYTE)v17 == 0xFF)
    {
LABEL_33:
      uint64_t v29 = v16;
      goto LABEL_34;
    }

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unsigned int v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  unsigned __int8 v13 = (char *)&v39 - v12;
  uint64_t v14 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14 & ~(v14 >> 63),  0,  MEMORY[0x18961AFE8]);
  uint64_t v43 = v4;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  unsigned int v17 = AssociatedTypeWitness;
  unsigned __int8 v18 = a1;
  v16(v6, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v17);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v45 & 1) != 0)
  {
LABEL_2:
    char v20 = *(void (**)(char *, uint64_t))(v8 + 8);
    v20(v10, v17);
    v20(v13, v17);
    swift_bridgeObjectRetain();
    char v21 = static String._tryFromUTF8(_:)();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v18, a2);
    swift_bridgeObjectRelease();
    if (v23) {
      return v21;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unint64_t v25 = 1LL;
    BOOL v26 = v44;
    while (1)
    {
      unint64_t v27 = HIWORD(v26);
      if (HIWORD(v26) > 0x10u || (v26 & 0xFFFFF800) == 0xD800) {
        break;
      }
      unsigned __int8 v41 = v8;
      uint64_t v42 = v18;
      uint64_t v40 = AssociatedConformanceWitness;
      if (v26 > 0x7F)
      {
        int v34 = (v26 & 0x3F) << 8;
        if (v26 > 0x7FF)
        {
          int v35 = v26 >> 12;
          unsigned int v36 = (v34 | (v26 >> 6) & 0x3F) << 8;
          BOOL v28 = (((v36 | (v26 >> 12) & 0x3F) << 8) | (v26 >> 18)) - 2122219023;
          uint64_t v37 = (v36 | v35) + 8487393;
          if (!v27) {
            BOOL v28 = v37;
          }
        }

        else
        {
          BOOL v28 = (v34 | (v26 >> 6)) + 33217;
        }
      }

      else
      {
        BOOL v28 = v26 + 1;
      }

      uint64_t v29 = *((void *)v15 + 2);
      int v30 = v28;
      do
      {
        while (1)
        {
          unsigned int v31 = *((void *)v15 + 3);
          if (v29 >= v31 >> 1) {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v31 > 1),  v29 + 1,  1,  v15);
          }
          *((void *)v15 + 2) = v29 + 1;
          v15[v29 + 32] = v30 - 1;
          int v33 = 0LL;
          unint64_t v25 = 0LL;
          ++v29;
          if (v30 < 0x100) {
            goto LABEL_18;
          }
          v30 >>= 8;
        }

        ++v29;
        int v32 = v30 >= 0x100;
        v30 >>= 8;
      }

      while (v32);
      int v33 = v25;
LABEL_18:
      uint64_t AssociatedConformanceWitness = v40;
      dispatch thunk of IteratorProtocol.next()();
      BOOL v26 = v44;
      unint64_t v25 = v33;
      uint64_t v8 = v41;
      unsigned __int8 v18 = v42;
      if ((v45 & 1) != 0) {
        goto LABEL_2;
      }
    }

    uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
    v38(v10, v17);
    v38(v13, v17);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v18, a2);
    swift_bridgeObjectRelease();
    return 0LL;
  }

uint64_t sub_183311D8C()
{
  unint64_t v3 = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((v3 & 0x100000000LL) == 0)
  {
    uint64_t v4 = 1LL;
    while (1)
    {
      if (WORD1(v3) > 0x10u || (v3 & 0xFFFFF800) == 0xD800)
      {
        outlined consume of Data._Representation(v19, v20);
        outlined consume of Data._Representation(v19, v20);
        outlined consume of Data._Representation(v1, v0);
        swift_bridgeObjectRelease();
        return 0LL;
      }

      if ((v3 & 0xFFFFFF80) != 0) {
        break;
      }
      unsigned int v5 = (v3 + 1);
      if ((_BYTE)v3 != 0xFF) {
        goto LABEL_8;
      }
LABEL_16:
      uint64_t v10 = v4;
LABEL_17:
      unint64_t v3 = specialized UTF32EndianAdaptor.Iterator.next()();
      uint64_t v4 = v10;
      if ((v3 & 0x100000000LL) != 0) {
        goto LABEL_24;
      }
    }

    int v11 = (v3 & 0x3F) << 8;
    unsigned int v12 = (v11 | (v3 >> 6) & 0x3F) << 8;
    unsigned int v13 = (((v12 | (v3 >> 12) & 0x3F) << 8) | (v3 >> 18)) - 2122219023;
    unsigned int v14 = (v12 | (v3 >> 12)) + 8487393;
    if (WORD1(v3)) {
      unsigned int v14 = v13;
    }
    unsigned int v5 = (v11 | (v3 >> 6)) + 33217;
LABEL_8:
    unint64_t v6 = *((void *)v2 + 2);
    for (unsigned int i = v5; ; i >>= 8)
    {
      while (1)
      {
        unint64_t v8 = *((void *)v2 + 3);
        if (v6 >= v8 >> 1) {
          uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v8 > 1),  v6 + 1,  1,  v2);
        }
        *((void *)v2 + 2) = v6 + 1;
        v2[v6 + 32] = i - 1;
        ++v6;
        BOOL v9 = i >= 0x100;
        i >>= 8;
        if (!v9) {
          goto LABEL_16;
        }
      }

      uint64_t v10 = 0LL;
      uint64_t v4 = 0LL;
      ++v6;
      if (i < 0x100) {
        break;
      }
    }

    goto LABEL_17;
  }

unint64_t specialized String.init<A, B>(_validating:as:)()
{
  unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  0LL,  0,  MEMORY[0x18961AFE8]);
  swift_bridgeObjectRetain_n();
  unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((result & 0x100000000LL) == 0)
  {
    uint64_t v2 = 1LL;
    while (1)
    {
      if (WORD1(result) > 0x10u || (result & 0xFFFFF800) == 0xD800)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0LL;
      }

      if ((result & 0xFFFFFF80) != 0) {
        break;
      }
      if (result > 0xFF)
      {
        __break(1u);
        return result;
      }

      unsigned int v3 = (result + 1);
      if ((_BYTE)result != 0xFF) {
        goto LABEL_8;
      }
LABEL_16:
      uint64_t v8 = v2;
LABEL_17:
      unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
      uint64_t v2 = v8;
      if ((result & 0x100000000LL) != 0) {
        goto LABEL_24;
      }
    }

    int v9 = (result & 0x3F) << 8;
    unsigned int v10 = (v9 | (result >> 6) & 0x3F) << 8;
    unsigned int v11 = (((v10 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    unsigned int v12 = (v10 | (result >> 12)) + 8487393;
    if (WORD1(result)) {
      unsigned int v12 = v11;
    }
    unsigned int v3 = (v9 | (result >> 6)) + 33217;
LABEL_8:
    unint64_t v4 = *((void *)v0 + 2);
    for (unsigned int i = v3; ; i >>= 8)
    {
      while (1)
      {
        unint64_t v6 = *((void *)v0 + 3);
        if (v4 >= v6 >> 1) {
          unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v4 + 1,  1,  v0);
        }
        *((void *)v0 + 2) = v4 + 1;
        v0[v4 + 32] = i - 1;
        ++v4;
        BOOL v7 = i >= 0x100;
        i >>= 8;
        if (!v7) {
          goto LABEL_16;
        }
      }

      uint64_t v8 = 0LL;
      uint64_t v2 = 0LL;
      ++v4;
      if (i < 0x100) {
        break;
      }
    }

    goto LABEL_17;
  }

{
  char *v0;
  unint64_t result;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int i;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  0LL,  0,  MEMORY[0x18961AFE8]);
  unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((result & 0x100000000LL) == 0)
  {
    uint64_t v2 = 1LL;
    while (1)
    {
      if (result >> 11 == 27 || WORD1(result) > 0x10u)
      {
        swift_bridgeObjectRelease();
        return 0LL;
      }

      if ((result & 0xFFFFFF80) != 0) {
        break;
      }
      if (result > 0xFF)
      {
        __break(1u);
        return result;
      }

      unsigned int v3 = (result + 1);
      if ((_BYTE)result != 0xFF) {
        goto LABEL_8;
      }
LABEL_16:
      uint64_t v8 = v2;
LABEL_17:
      unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
      uint64_t v2 = v8;
      if ((result & 0x100000000LL) != 0) {
        goto LABEL_24;
      }
    }

    int v9 = (result & 0x3F) << 8;
    unsigned int v10 = (v9 | (result >> 6) & 0x3F) << 8;
    unsigned int v11 = (((v10 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    unsigned int v12 = (v10 | (result >> 12)) + 8487393;
    if (WORD1(result)) {
      unsigned int v3 = v11;
    }
    else {
      unsigned int v3 = v12;
    }
LABEL_8:
    unint64_t v4 = *((void *)v0 + 2);
    for (unsigned int i = v3; ; i >>= 8)
    {
      while (1)
      {
        unint64_t v6 = *((void *)v0 + 3);
        if (v4 >= v6 >> 1) {
          unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v4 + 1,  1,  v0);
        }
        *((void *)v0 + 2) = v4 + 1;
        v0[v4 + 32] = i - 1;
        ++v4;
        BOOL v7 = i >= 0x100;
        i >>= 8;
        if (!v7) {
          goto LABEL_16;
        }
      }

      uint64_t v8 = 0LL;
      uint64_t v2 = 0LL;
      ++v4;
      if (i < 0x100) {
        break;
      }
    }

    goto LABEL_17;
  }

{
  char *v0;
  unint64_t result;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int i;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  0LL,  0,  MEMORY[0x18961AFE8]);
  unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((result & 0x100000000LL) == 0)
  {
    uint64_t v2 = 1LL;
    while (1)
    {
      if (result >> 11 == 27 || WORD1(result) > 0x10u)
      {
        swift_bridgeObjectRelease();
        return 0LL;
      }

      if ((result & 0xFFFFFF80) != 0) {
        break;
      }
      if (result > 0xFF)
      {
        __break(1u);
        return result;
      }

      unsigned int v3 = (result + 1);
      if ((_BYTE)result != 0xFF) {
        goto LABEL_8;
      }
LABEL_16:
      uint64_t v8 = v2;
LABEL_17:
      unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
      uint64_t v2 = v8;
      if ((result & 0x100000000LL) != 0) {
        goto LABEL_24;
      }
    }

    int v9 = (result & 0x3F) << 8;
    unsigned int v10 = (v9 | (result >> 6) & 0x3F) << 8;
    unsigned int v11 = (((v10 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    unsigned int v12 = (v10 | (result >> 12)) + 8487393;
    if (WORD1(result)) {
      unsigned int v3 = v11;
    }
    else {
      unsigned int v3 = v12;
    }
LABEL_8:
    unint64_t v4 = *((void *)v0 + 2);
    for (unsigned int i = v3; ; i >>= 8)
    {
      while (1)
      {
        unint64_t v6 = *((void *)v0 + 3);
        if (v4 >= v6 >> 1) {
          unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v4 + 1,  1,  v0);
        }
        *((void *)v0 + 2) = v4 + 1;
        v0[v4 + 32] = i - 1;
        ++v4;
        BOOL v7 = i >= 0x100;
        i >>= 8;
        if (!v7) {
          goto LABEL_16;
        }
      }

      uint64_t v8 = 0LL;
      uint64_t v2 = 0LL;
      ++v4;
      if (i < 0x100) {
        break;
      }
    }

    goto LABEL_17;
  }

uint64_t specialized String.init<A, B>(_validating:as:)(char *a1, uint64_t a2)
{
  unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a2 & ~(a2 >> 63),  0,  MEMORY[0x18961AFE8]);
  unsigned int v5 = v4;
  if (a1 && a2)
  {
    int v6 = *a1;
    if (v6 < 0)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      return 0LL;
    }

    unint64_t v7 = *((void *)v4 + 2);
    uint64_t v8 = a2 - 1;
    int v9 = a1 + 1;
    while (1)
    {
      unint64_t v10 = *((void *)v5 + 3);
      if (v7 >= v10 >> 1) {
        unsigned int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v10 > 1),  v7 + 1,  1,  v5);
      }
      *((void *)v5 + 2) = v7 + 1;
      v5[v7 + 32] = v6;
      if (!v8) {
        break;
      }
      int v11 = *v9++;
      LOBYTE(v6) = v11;
      --v8;
      ++v7;
      if (v11 < 0) {
        goto LABEL_13;
      }
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v12 = static String._tryFromUTF8(_:)();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease_n();
  if (v14) {
    return v12;
  }
  else {
    return 0LL;
  }
}

uint64_t (*specialized String.init<A, B>(_validating:as:)(unsigned __int8 *a1, uint64_t a2))()
{
  unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a2 & ~(a2 >> 63),  0,  MEMORY[0x18961AFE8]);
  unsigned int v5 = 0;
  unsigned __int8 v6 = 0;
  if (a1) {
    unint64_t v7 = (char *)&a1[a2];
  }
  else {
    unint64_t v7 = 0LL;
  }
  unsigned int v30 = 0;
  unsigned __int8 v31 = 0;
  uint64_t v8 = MEMORY[0x18961AB88];
  char v9 = 1;
  while (v6)
  {
    if ((v5 & 0x80) != 0)
    {
      if (!a1) {
        goto LABEL_25;
      }
      int v11 = a1;
LABEL_12:
      a1 = v11 + 1;
      unsigned int v5 = ((-255 << v6) - 1) & v5 | (*v11 << v6);
      unsigned __int8 v15 = v6 + 8;
      if (a1 != (unsigned __int8 *)v7)
      {
        a1 = v11 + 2;
        unsigned int v5 = ((-255 << v15) - 1) & v5 | (v11[1] << v15);
        unsigned __int8 v15 = v6 + 16;
        if (a1 != (unsigned __int8 *)v7)
        {
          a1 = v11 + 3;
          unsigned int v5 = ((-255 << v15) - 1) & v5 | (v11[2] << v15);
          unsigned __int8 v15 = v6 + 24;
          if (a1 != (unsigned __int8 *)v7)
          {
            a1 = v11 + 4;
            unsigned int v5 = ((-255 << v15) - 1) & v5 | (v11[3] << v15);
            unsigned __int8 v15 = v6 + 32;
            if (v6 >= 0xE0u)
            {
              unsigned int v5 = ((-255 << v6) - 1) & v5 | (v11[4] << v6);
              unsigned __int8 v15 = v6 + 40;
              a1 = v11 + 5;
            }

uint64_t String.init(data:encoding:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return specialized String.init<A>(bytes:encoding:)(a1, a2, *a3);
}

uint64_t specialized thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<UInt8>) -> (@owned String?, @error @owned Error)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = static String._tryFromUTF8(_:)();
  if (!v7) {
    uint64_t result = (uint64_t)specialized String.init<A, B>(_validating:as:)(a1, a2);
  }
  *a3 = result;
  a3[1] = v7;
  return result;
}

uint64_t specialized thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<UInt8>) -> (@owned String?, @error @owned Error)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized String.init<A, B>(_validating:as:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

id makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, a1, a2, a3);
  if (!v3) {
    return 0LL;
  }
  unint64_t v4 = v3;
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

id partial apply for makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t a2)
{
  return makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<UInt8>) -> (@owned String?, @error @owned Error)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }

  return result;
}

void *closure #2 in String.init<A>(bytes:encoding:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)( a1,  a2,  a3,  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:),  a4);
}

uint64_t closure #1 in closure #2 in String.init<A>(bytes:encoding:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t *a5@<X8>)
{
  unsigned __int8 v6 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = a2 + a3;
  if (!a2) {
    uint64_t v8 = 0LL;
  }
  uint64_t v27 = a2;
  uint64_t v28 = v8;
  char v29 = a4;
  char v30 = 0;
  unsigned int v31 = 0;
  for (i = 0; ; unsigned __int8 v6 = i)
  {
    if (v6)
    {
      unsigned int v10 = v31;
      if ((v31 & 0xF800) != 0xD800)
      {
        lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
        int v17 = Locale.Language.components.modify();
        specialized RangeReplaceableCollection.remove(at:)(0LL);
        uint64_t result = ((uint64_t (*)(char *, void))v17)(v26, 0LL);
LABEL_28:
        unsigned int v10 = (unsigned __int16)v10;
        char v16 = 1;
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t result = specialized UTF16EndianAdaptor.Iterator.next()();
      if ((result & 0x10000) != 0) {
        goto LABEL_45;
      }
      LOWORD(v10) = result;
      if ((result & 0xF800) != 0xD800) {
        goto LABEL_28;
      }
      unsigned int v10 = (unsigned __int16)result | (HIWORD(v31) << 16);
      unsigned __int8 v6 = 16;
    }

    uint64_t result = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((result & 0x10000) != 0) {
      break;
    }
    unsigned int v10 = ((-65535 << v6) - 1) & v10 | ((unsigned __int16)result << v6);
    unsigned __int8 v11 = v6 + 16;
    if ((v6 + 16) <= 0x1Fu)
    {
      uint64_t result = specialized UTF16EndianAdaptor.Iterator.next()();
      if ((result & 0x10000) != 0) {
        goto LABEL_16;
      }
      unsigned int v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)result << v11);
      unsigned __int8 v11 = v6 + 32;
      if (v6 >= 0xE0u)
      {
        uint64_t result = specialized UTF16EndianAdaptor.Iterator.next()();
        if ((result & 0x10000) != 0) {
          goto LABEL_16;
        }
        unsigned int v10 = ((-65535 << v6) - 1) & v10 | ((unsigned __int16)result << v6);
        unsigned __int8 v11 = v6 + 48;
      }
    }

void *closure #3 in String.init<A>(bytes:encoding:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)( a1,  a2,  a3,  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:),  a4);
}

void *closure #2 in String.init<A>(bytes:encoding:)@<X0>( uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v7 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3LL) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }

  if (v7 < 0) {
    goto LABEL_10;
  }
  uint64_t v11 = isStackAllocationSafe;
  if (v7 <= 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    unsigned int v12 = &v16;
    __n128 v13 = MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t result = ((void *(*)(__int128 *__return_ptr, __n128))a4)(&v16, v13);
    char v15 = v5;
    if (!v5)
    {
      *a5 = v16;
      return result;
    }

    swift_willThrow();

    __break(1u);
  }

  else
  {
    unsigned int v12 = (__int128 *)swift_slowAlloc();
    a4(v12, v7, v11, a2, a3);
    char v15 = v5;
    if (!v5) {
      return (void *)MEMORY[0x186E20E60](v12, -1LL, -1LL);
    }
  }

  uint64_t result = (void *)MEMORY[0x186E20E60](v12, -1LL, -1LL);
  __break(1u);
  return result;
}

void *partial apply for closure #3 in String.init<A>(bytes:encoding:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)( a1,  a2,  *(unsigned __int8 *)(v3 + 16),  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:),  a3);
}

void *partial apply for closure #2 in String.init<A>(bytes:encoding:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)( a1,  a2,  *(unsigned __int8 *)(v3 + 16),  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:),  a3);
}

unint64_t closure #1 in closure #3 in String.init<A>(bytes:encoding:)@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = 0LL;
LABEL_2:
  while (1)
  {
    unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
    if ((result & 0x100000000LL) != 0) {
      break;
    }
    if (WORD1(result) > 0x10u || (result & 0xFFFFF800) == 55296)
    {
      *a2 = 0LL;
      a2[1] = 0LL;
      return result;
    }

    if ((result & 0xFFFFFF80) != 0)
    {
      int v10 = (result & 0x3F) << 8;
      unsigned int v11 = (v10 | (result >> 6) & 0x3F) << 8;
      unsigned int v12 = (((v11 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
      unsigned int v13 = (v11 | (result >> 12)) + 8487393;
      if (WORD1(result)) {
        unsigned int v7 = v12;
      }
      else {
        unsigned int v7 = v13;
      }
LABEL_10:
      uint64_t v8 = v4;
      while (1)
      {
        *(_BYTE *)(a1 + v8) = v7 - 1;
        uint64_t v4 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          break;
        }
        ++v8;
        BOOL v9 = v7 >= 0x100;
        v7 >>= 8;
        if (!v9) {
          goto LABEL_2;
        }
      }

const __CFString *String.init(contentsOfFile:encoding:)(uint64_t a1, uint64_t a2, const __CFString **a3)
{
  uint64_t v4 = *a3;
  uint64_t v24 = MEMORY[0x18961AFF0];
  *(void *)&__int128 v21 = a1;
  *((void *)&v21 + 1) = a2;
  uint64_t v22 = 0LL;
  LOBYTE(v23) = 0;
  swift_bridgeObjectRetain();
  uint64_t v5 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( &v21,  1,  0LL,  1,  0LL,  MEMORY[0x18961AFE8],  &v24);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    uint64_t v8 = specialized String.init<A>(bytes:encoding:)(v5, v7, (uint64_t)v4);
    if (v9)
    {
      uint64_t v4 = (const __CFString *)v8;
      outlined consume of Data._Representation(v5, v7);
      return v4;
    }

    uint64_t v4 = @"NSCocoaErrorDomain";
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v11 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend( v11,  sel_initWithDomain_code_userInfo_,  v12,  259,  _NativeDictionary.bridged()(),  (void)v21,  *((void *)&v21 + 1),  v22,  v23);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v14 = objc_msgSend(v13, sel_domain);
    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v17 != v18)
    {
      uint64_t v4 = v18;
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
LABEL_12:
        swift_willThrow();
        outlined consume of Data._Representation(v5, v7);
        return v4;
      }

      __break(1u);
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }

  return v4;
}

const __CFString *String.init(contentsOf:encoding:)(uint64_t *a1, const __CFString **a2)
{
  uint64_t v3 = *a2;
  uint64_t v21 = *a1;
  __int128 v22 = *(_OWORD *)(a1 + 1);
  id v4 = specialized Data.init(contentsOf:options:)((uint64_t)&v21, 0LL);
  if (!v2)
  {
    uint64_t v6 = (uint64_t)v4;
    unint64_t v7 = v5;
    uint64_t v8 = specialized String.init<A>(bytes:encoding:)((uint64_t)v4, v5, (uint64_t)v3);
    if (v9)
    {
      uint64_t v3 = (const __CFString *)v8;
      outlined consume of Data._Representation(v6, v7);
      return v3;
    }

    uint64_t v3 = @"NSCocoaErrorDomain";
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v11 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 259, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v14 = objc_msgSend(v13, sel_domain);
    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v17 != v18)
    {
      uint64_t v3 = v18;
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
LABEL_12:
        swift_willThrow();
        outlined consume of Data._Representation(v6, v7);
        return v3;
      }

      __break(1u);
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }

  return v3;
}

uint64_t String.init(contentsOfFile:usedEncoding:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v42 = MEMORY[0x18961AFF0];
  *(void *)&__int128 v39 = a1;
  *((void *)&v39 + 1) = a2;
  uint64_t v40 = 0LL;
  char v41 = 0;
  swift_bridgeObjectRetain();
  uint64_t v6 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( &v39,  0,  0LL,  1,  0LL,  (uint64_t)&outlined read-only object #0 of String.init(contentsOfFile:usedEncoding:),  &v42);
  unint64_t v8 = v7;
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  uint64_t v9 = v42;
  if (v3) {
    goto LABEL_2;
  }
  if (!*(void *)(v42 + 16)
    || (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016LL, 0x80000001839C8850LL), (v11 & 1) == 0))
  {
LABEL_7:
    outlined copy of Data._Representation(v6, v8);
    specialized String.init(dataOfUnknownEncoding:usedEncoding:)(v6, v8);
    if (v16)
    {
      id v4 = v15;
      outlined consume of Data._Representation(v6, v8);
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v18 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v19 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 259, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v4 = objc_msgSend(v20, sel_domain);
    id v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v23 = v22;

    if (v21 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v23 != v24)
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
      {
LABEL_17:
        swift_willThrow();
LABEL_18:
        outlined consume of Data._Representation(v6, v8);
LABEL_2:
        swift_bridgeObjectRelease();
        return (uint64_t)v4;
      }

      __break(1u);
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }

  uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
  uint64_t v14 = *v12;
  unint64_t v13 = v12[1];
  outlined copy of Data._Representation(*v12, v13);
  encodingFromDataForExtendedAttribute(_:)(v14, v13, (uint64_t)&v39);
  if ((BYTE8(v39) & 1) != 0)
  {
    outlined consume of Data._Representation(v14, v13);
    goto LABEL_7;
  }

  unint64_t v38 = v13;
  uint64_t v27 = v39;
  uint64_t v28 = specialized String.init<A>(bytes:encoding:)(v6, v8, v39);
  if (v29)
  {
    id v4 = (id)v28;
    outlined consume of Data._Representation(v14, v38);
    outlined consume of Data._Representation(v6, v8);
    swift_bridgeObjectRelease();
    *a3 = v27;
    return (uint64_t)v4;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v30 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v31 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v32 = objc_msgSend(v30, sel_initWithDomain_code_userInfo_, v31, 259, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v33 = objc_msgSend(v32, sel_domain);
  id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  id v4 = v35;

  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v4 == v36)
  {
    swift_bridgeObjectRelease_n();
LABEL_25:
    swift_willThrow();
    outlined consume of Data._Representation(v14, v38);
    goto LABEL_18;
  }

  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v37 & 1) != 0) {
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t String.init(contentsOf:usedEncoding:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v46 = MEMORY[0x18961AFF0];
  *(void *)&__int128 v43 = v6;
  *((void *)&v43 + 1) = v5;
  uint64_t v44 = v7;
  char v45 = 1;
  swift_retain();
  id v8 = v6;
  swift_retain();
  id v9 = &outlined read-only object #0 of String.init(contentsOf:usedEncoding:);
  uint64_t v10 = v3;
  uint64_t v11 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( &v43,  0,  0LL,  1,  0LL,  (uint64_t)&outlined read-only object #0 of String.init(contentsOf:usedEncoding:),  &v46);
  unint64_t v13 = v12;
  swift_arrayDestroy();
  swift_release();
  swift_release();

  uint64_t v14 = v46;
  if (v10) {
    goto LABEL_2;
  }
  if (*(void *)(v46 + 16))
  {
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016LL, 0x80000001839C8850LL);
    if ((v16 & 1) != 0)
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
      uint64_t v19 = *v17;
      unint64_t v18 = v17[1];
      outlined copy of Data._Representation(*v17, v18);
      encodingFromDataForExtendedAttribute(_:)(v19, v18, (uint64_t)&v43);
      if ((BYTE8(v43) & 1) == 0)
      {
        unint64_t v42 = v18;
        uint64_t v31 = v43;
        uint64_t v32 = specialized String.init<A>(bytes:encoding:)(v11, v13, v43);
        if (v33)
        {
          id v9 = (id)v32;
          outlined consume of Data._Representation(v19, v42);
          outlined consume of Data._Representation(v11, v13);
          swift_bridgeObjectRelease();
          *a2 = v31;
          return (uint64_t)v9;
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v34 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v35 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v36 = objc_msgSend(v34, sel_initWithDomain_code_userInfo_, v35, 259, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v37 = objc_msgSend(v36, sel_domain);
        id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        id v9 = v39;

        if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v9 == v40)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v41 & 1) == 0) {
            goto LABEL_24;
          }
        }

        swift_willThrow();
        outlined consume of Data._Representation(v19, v42);
        goto LABEL_15;
      }

      outlined consume of Data._Representation(v19, v18);
    }
  }

  outlined copy of Data._Representation(v11, v13);
  specialized String.init(dataOfUnknownEncoding:usedEncoding:)(v11, v13);
  if (v21)
  {
    id v9 = v20;
    outlined consume of Data._Representation(v11, v13);
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v23 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v24 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, 259, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v9 = objc_msgSend(v25, sel_domain);
  id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v28 = v27;

  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
LABEL_14:
    swift_willThrow();
LABEL_15:
    outlined consume of Data._Representation(v11, v13);
LABEL_2:
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }

  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v30 & 1) != 0) {
    goto LABEL_14;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

unint64_t extendedAttributeData(for:)(unint64_t *a1)
{
  CFStringEncoding v1 = CFStringConvertNSStringEncodingToEncoding(*a1);
  if (v1 == -1) {
    return 0LL;
  }
  uint64_t v2 = (id)CFStringConvertEncodingToIANACharSetName(v1);
  if (v2)
  {
    uint64_t v3 = (__CFString *)v2;
    unint64_t v11 = 0xE000000000000000LL;
    type metadata accessor for CFStringRef(0LL);
    id v4 = v3;
    _print_unlocked<A, B>(_:_:)();
    v5._uint64_t countAndFlagsBits = 59LL;
    v5._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t v10 = 4LL;
    unint64_t v7 = String.data(using:allowLossyConversion:)(&v10, 0, 0LL, 0xE000000000000000LL);
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v11 = 0xE100000000000000LL;
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = 4LL;
    unint64_t v7 = String.data(using:allowLossyConversion:)(&v10, 0, 0x3BuLL, 0xE100000000000000LL);
    swift_bridgeObjectRelease();
  }

  return v7;
}

unint64_t StringProtocol.write<A>(toFile:atomically:encoding:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v9 = a5;
  uint64_t v59 = a2;
  uint64_t v60 = a1;
  uint64_t v10 = *((void *)a5 - 1);
  MEMORY[0x1895F8858](a1);
  unint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = *v13;
  id v61 = *v13;
  uint64_t v15 = StringProtocol.data(using:allowLossyConversion:)((uint64_t *)&v61, 0);
  if (v16 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v17 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v18 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v17, sel_initWithDomain_code_userInfo_, v18, 517, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v9 = objc_msgSend(v14, sel_domain);
    id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v21 = v20;

    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v21 == v22)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      uint64_t v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v15 = swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        __break(1u);
        goto LABEL_8;
      }
    }

    return swift_willThrow();
  }

unint64_t StringProtocol.write(to:atomically:encoding:)(uint64_t a1, uint64_t a2, id *a3)
{
  Swift::String v6 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  id v8 = *a3;
  id v55 = *a3;
  uint64_t v9 = StringProtocol.data(using:allowLossyConversion:)((uint64_t *)&v55, 0);
  if (v10 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v11 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 517, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v8 = objc_msgSend(v13, sel_domain);
    id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v16 = v15;

    if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v16 == v17)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      uint64_t v5 = v17;
      uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
        __break(1u);
        goto LABEL_8;
      }
    }

    return swift_willThrow();
  }

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Su_SsTG5SiTf1cn_n( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    id v11 = v14;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    id v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    id v11 = (void *)_StringObject.sharedUTF8.getter();
  }

  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Su_SsTG5SiTf1nnc_nTf4xnn_n( (uint64_t)v11,  a1,  a2,  a3,  a4,  a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000LL) != 0;
  }

  return result;
}

uint64_t (*specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = a1;
  Swift::String v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  (a2 - a1) & ~((a2 - a1) >> 63),  0,  MEMORY[0x18961AFE8]);
  unsigned int v7 = 0;
  unsigned __int8 v8 = 0;
  unsigned int v38 = 0;
  unsigned __int8 v39 = 0;
  uint64_t v9 = MEMORY[0x18961AB88];
  char v10 = 1;
  while (v8)
  {
    if ((v7 & 0x80) != 0) {
      goto LABEL_8;
    }
    lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser();
    uint64_t result = Locale.Language.components.modify();
    char v32 = *(_BYTE *)(v31 + 4);
    if (!v32)
    {
      __break(1u);
      return result;
    }

    *(_DWORD *)v31 >>= 8;
    *(_BYTE *)(v31 + 4) = v32 - 8;
    ((void (*)(char *, void))result)(v37, 0LL);
    unsigned int v13 = (v7 + 1);
    uint64_t v9 = MEMORY[0x18961AB88];
    if ((_BYTE)v7 != 0xFF) {
      goto LABEL_36;
    }
LABEL_2:
    unsigned __int8 v8 = v39;
    unsigned int v7 = v38;
  }

  if (v5 == a2) {
    goto LABEL_50;
  }
  int v11 = *(char *)(a3 + v5);
  int v12 = *(unsigned __int8 *)(a3 + v5++);
  if ((v11 & 0x80000000) == 0)
  {
    unsigned int v13 = v12 + 1;
LABEL_36:
    unint64_t v23 = *((void *)v6 + 2);
    do
    {
      unsigned int v24 = v13;
      while (1)
      {
        unint64_t v25 = *((void *)v6 + 3);
        if (v23 >= v25 >> 1)
        {
          unint64_t v27 = v6;
          uint64_t v28 = v9;
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v23 + 1,  1,  v27);
          uint64_t v9 = v28;
          Swift::String v6 = v29;
        }

        unsigned int v13 = v24 >> 8;
        *((void *)v6 + 2) = v23 + 1;
        v6[v23 + 32] = v24 - 1;
        ++v23;
        BOOL v26 = v24 >= 0x100;
        v24 >>= 8;
        if (!v26) {
          goto LABEL_2;
        }
      }

      char v10 = 0;
      ++v23;
    }

    while (v24 >= 0x100);
    goto LABEL_2;
  }

  unsigned int v7 = v7 & 0xFFFFFF00 | v12;
  unsigned __int8 v8 = 8;
LABEL_8:
  if (v5 == a2)
  {
    unsigned __int8 v14 = v8;
    uint64_t v5 = a2;
    goto LABEL_24;
  }

  uint64_t v15 = v5 + 1;
  unsigned int v7 = (*(unsigned __int8 *)(a3 + v5) << v8) | ((-255 << v8) - 1) & v7;
  unsigned __int8 v14 = v8 + 8;
  if (v15 != a2)
  {
    char v16 = v8 + 8;
    int v17 = *(unsigned __int8 *)(a3 + v15);
    uint64_t v15 = v5 + 2;
    unsigned int v7 = ((-255 << v14) - 1) & v7 | (v17 << v14);
    unsigned __int8 v18 = v8 + 16;
    if ((v8 + 8) < 0x18u)
    {
      if (v15 == a2)
      {
LABEL_16:
        unsigned __int8 v14 = v18;
        uint64_t v5 = a2;
        goto LABEL_24;
      }

      int v19 = *(unsigned __int8 *)(a3 + v15);
      uint64_t v15 = v5 + 3;
      unsigned int v7 = ((-65280 << v16) - 1) & v7 | (v19 << v18);
      unsigned __int8 v18 = v8 + 24;
      if ((v8 + 8) <= 0xFu)
      {
        if (v15 == a2) {
          goto LABEL_16;
        }
        int v20 = *(unsigned __int8 *)(a3 + v15);
        uint64_t v15 = v5 + 4;
        unsigned int v7 = ((-16711680 << v16) - 1) & v7 | (v20 << v18);
        unsigned __int8 v18 = v8 + 32;
        if (v8 >= 0xF8u)
        {
          if (v15 == a2) {
            goto LABEL_16;
          }
          int v21 = *(unsigned __int8 *)(a3 + v15);
          uint64_t v15 = v5 + 5;
          unsigned int v7 = ((0x1000000 << v16) - 1) & v7 | (v21 << v18);
          unsigned __int8 v18 = v16 + 32;
        }
      }
    }

    unsigned __int8 v14 = v18;
LABEL_23:
    uint64_t v5 = v15;
LABEL_24:
    if ((v7 & 0xC0E0) == 0x80C0)
    {
      if ((v7 & 0x1E) == 0) {
        goto LABEL_49;
      }
      unsigned int v22 = 16;
    }

    else if ((v7 & 0xC0C0F0) == 0x8080E0)
    {
      if ((v7 & 0x200F) == 0 || (v7 & 0x200F) == 0x200D) {
        goto LABEL_49;
      }
      unsigned int v22 = 24;
    }

    else
    {
      if ((v7 & 0xC0C0C0F8) != 0x808080F0 || (v7 & 0x3007) == 0 || __rev16(v7 & 0x3007) > 0x400)
      {
LABEL_49:
        Swift::UInt8 v33 = Unicode.UTF8.ForwardParser._invalidLength()();
        unsigned int v38 = (unint64_t)v7 >> ((8 * v33) & 0x38);
        unsigned __int8 v39 = v14 - 8 * v33;
        swift_bridgeObjectRelease();
        return 0LL;
      }

      unsigned int v22 = 32;
    }

    unsigned int v38 = (unint64_t)v7 >> v22;
    unsigned __int8 v39 = v14 - v22;
    unsigned int v13 = ((1 << (v22 >> 1) << (v22 >> 1)) - 1) & (v7 + 16843009);
    if (v13) {
      goto LABEL_36;
    }
    goto LABEL_2;
  }

  uint64_t v5 = a2;
  if (v8 != 0xF8) {
    goto LABEL_24;
  }
LABEL_50:
  swift_bridgeObjectRetain();
  uint64_t v34 = static String._tryFromUTF8(_:)();
  uint64_t v36 = v35;
  swift_bridgeObjectRelease_n();
  if (v36) {
    return (uint64_t (*)())v34;
  }
  else {
    return 0LL;
  }
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Su_SsTG5SiTf1nnc_nTf4xnn_n( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4LL << v12)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_96;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }

void specialized String.init(dataOfUnknownEncoding:usedEncoding:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_183315934()
{
  if (BYTE6(v1) < 4uLL)
  {
    if (BYTE6(v1) < 2uLL)
    {
LABEL_18:
      uint64_t v15 = 4LL;
      goto LABEL_19;
    }

uint64_t _s10Foundation11writeToFile4path4data7options10attributes14reportProgressyAA9PathOrURLO_AA4DataVSo20NSDataWritingOptionsVSDySSAKGSbtKFySWKXEfU_TA_0( void *a1, uint64_t a2)
{
  return partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:)(a1, a2);
}

Swift::Void __swiftcall TimeZoneCache.State.check()()
{
  uint64_t NoteCount = _CFLocaleGetNoteCount();
  uint64_t v2 = _CFTimeZoneGetNoteCount();
  BOOL v3 = __OFADD__(NoteCount, v2);
  uint64_t v4 = NoteCount + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_8;
  }

  Midnightuint64_t NoteCount = _CFCalendarGetMidnightNoteCount();
  uint64_t v6 = v4 + MidnightNoteCount;
  if (__OFADD__(v4, MidnightNoteCount))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v6 == *(void *)(v0 + 56)) {
    return;
  }
  TimeZoneCache.State.findCurrentTimeZone()((uint64_t)v15);
  uint64_t v7 = v15[0];
  uint64_t v8 = v15[1];
  swift_unknownObjectRelease();
  *(void *)uint64_t v0 = v7;
  *(void *)(v0 + 8) = v8;
  *(void *)(v0 + 56) = v6;
  unsigned __int8 v9 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  char v10 = (char *)objc_allocWithZone(v9);
  unsigned __int8 v11 = &v10[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(void *)unsigned __int8 v11 = v7;
  *((void *)v11 + 1) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 16) = xmmword_1837ADD10;
  *(void *)&v10[OBJC_IVAR____NSSwiftTimeZone_lock] = v12;
  v14.receiver = v10;
  v14.super_class = v9;
  swift_unknownObjectRetain();
  id v13 = objc_msgSendSuper2(&v14, sel_init);

  *(void *)(v0 + 80) = v13;
  if (!*MEMORY[0x189605218])
  {
LABEL_9:
    __break(1u);
    return;
  }

  _CFNotificationCenterInitializeDependentNotificationIfNecessary();
}

uint64_t TimeZoneCache.State.findCurrentTimeZone()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)objc_opt_self();
  id v5 = objc_msgSend(v4, sel_processInfo);
  uint64_t v6 = objc_msgSend(v5, sel_environment);

  uint64_t v7 = (void *)MEMORY[0x18961AFC0];
  uint64_t v8 = (void *)MEMORY[0x189617FA8];
  if (!v6)
  {
    unsigned __int8 v9 = (void *)MEMORY[0x18961AFF0];
    if (!*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_47;
    }
    goto LABEL_44;
  }

  if (MEMORY[0x18961AFC0] + 8LL == MEMORY[0x189617FA8])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    unsigned __int8 v9 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v9) {
      goto LABEL_43;
    }
    __src = v4;
    id v10 = objc_msgSend(v6, sel_count);
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      unsigned __int8 v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
      uint64_t v12 = (void *)v9[6];
      uint64_t v13 = v9[7];
      swift_retain();
      uint64_t v14 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v12,  v13,  v6,  v11);
      if ((v14 & 0x8000000000000000LL) == 0 && v11 >= v14)
      {
        void v9[2] = v14;
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          unint64_t v16 = (unint64_t)(v9 + 8);
          uint64_t v209 = (uint64_t)(v7 + 1);
          while (1)
          {
            while (((*(void *)(v16 + (((unint64_t)v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
            {
              if (--v15 < 0) {
                goto LABEL_40;
              }
            }

            uint64_t v17 = v2;
            uint64_t v2 = v7;
            uint64_t v18 = a1;
            int v19 = (uint64_t *)(v9[6] + 16 * v15);
            uint64_t v20 = *v19;
            uint64_t v21 = v19[1];
            swift_bridgeObjectRetain();
            unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            a1 = v23;
            swift_bridgeObjectRelease();
            if ((a1 & 1) != 0)
            {
              swift_arrayDestroy();
              unint64_t v24 = swift_arrayDestroy();
              uint64_t v25 = v9[2];
              BOOL v26 = __OFSUB__(v25, 1LL);
              uint64_t v27 = v25 - 1;
              if (v26) {
                goto LABEL_137;
              }
              void v9[2] = v27;
            }

            else
            {
              *(void *)(v16 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
              if (v15 >= (uint64_t)v22)
              {
                a1 = v18;
                if (v22 == v15)
                {
                  --v15;
                }

                else
                {
                  uint64_t v32 = v9[6];
                  unsigned __int8 v33 = (uint64_t *)(v32 + 16 * v22);
                  unsigned __int8 v34 = (uint64_t *)(v32 + 16 * v15);
                  uint64_t v35 = *v33;
                  uint64_t v36 = v33[1];
                  uint64_t v37 = v34[1];
                  *unsigned __int8 v33 = *v34;
                  v33[1] = v37;
                  *unsigned __int8 v34 = v35;
                  v34[1] = v36;
                  uint64_t v38 = v9[7];
                  char v39 = (_OWORD *)(v38 + 32 * v22);
                  unint64_t v40 = (_OWORD *)(v38 + 32 * v15);
                  outlined init with take of Any(v39, v213);
                  outlined init with take of Any(v40, v39);
                  outlined init with take of Any(v213, v40);
                }

                goto LABEL_17;
              }

              *(_OWORD *)(v9[6] + 16 * v22) = *(_OWORD *)(v9[6] + 16 * v15);
              uint64_t v28 = v9[7];
              uint64_t v29 = (_OWORD *)(v28 + 32 * v15);
              __int128 v30 = v29[1];
              unsigned __int8 v31 = (_OWORD *)(v28 + 32 * v22);
              *unsigned __int8 v31 = *v29;
              v31[1] = v30;
            }

            --v15;
            a1 = v18;
LABEL_17:
            uint64_t v7 = v2;
            uint64_t v2 = v17;
            if (v15 < 0) {
              goto LABEL_40;
            }
          }
        }

        goto LABEL_40;
      }

      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
      goto LABEL_181;
    }

LABEL_174:
    unint64_t v196 = (v205 - 1) & v205;
    unint64_t v199 = __clz(__rbit64(v205)) + (v193 << 6);
LABEL_149:
    uint64_t v200 = 8 * v199;
    uint64_t v201 = *(void *)(*(void *)(v22 + 48) + 8 * v199);
    uint64_t v202 = 16 * v199;
    __int128 v203 = *(_OWORD *)(*(void *)(v22 + 56) + v202);
    *(void *)(*(void *)(v184 + 48) + v200) = v201;
    *(_OWORD *)(*(void *)(v184 + 56) + v202) = v203;
    swift_unknownObjectRetain();
  }

  int64_t v206 = v204 + 8;
  if (v206 >= v197) {
    goto LABEL_176;
  }
  unint64_t v205 = *(void *)&__srca[8 * v206];
  if (v205)
  {
    int64_t v193 = v206;
    uint64_t v2 = v207;
    goto LABEL_174;
  }

  while (1)
  {
    int64_t v193 = v206 + 1;
    if (__OFADD__(v206, 1LL)) {
      break;
    }
    uint64_t v2 = v207;
    if (v193 >= v197) {
      goto LABEL_176;
    }
    unint64_t v205 = *(void *)&__srca[8 * v193];
    ++v206;
    if (v205) {
      goto LABEL_174;
    }
  }

          swift_bridgeObjectRelease();
          if ((v177 & 1) != 0)
          {
LABEL_134:
            swift_bridgeObjectRelease();
            goto LABEL_135;
          }
        }
      }

      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v176,  isUniquelyReferenced_nonNull_native);
        uint64_t v18 = v292;
        uint64_t v178 = specialized __RawDictionaryStorage.find<A>(_:)(v169, v170);
        if ((v177 & 1) != (v179 & 1)) {
          goto LABEL_242;
        }
        unint64_t v173 = v178;
        if ((v177 & 1) != 0) {
          goto LABEL_134;
        }
      }

      *(void *)(v18 + 8 * (v173 >> 6) + 64) |= 1LL << v173;
      char v180 = (uint64_t *)(*(void *)(v18 + 48) + 16 * v173);
      void *v180 = v169;
      v180[1] = v170;
      uint64_t v181 = *(void *)(v18 + 56) + 24 * v173;
      *(void *)uint64_t v181 = v289;
      *(void *)(v181 + 8) = v286;
      *(_BYTE *)(v181 + 16) = v165;
      BOOL v182 = *(void *)(v18 + 16);
      unint64_t v130 = __OFADD__(v182, 1LL);
      uint64_t v183 = v182 + 1;
      if (v130) {
        goto LABEL_226;
      }
      *(void *)(v18 + 16) = v183;
LABEL_135:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v166;
      unint64_t v156 = JSONMap.loadValue(at:)(v166);
      char v157 = v159;
      char v158 = v160;
      uint64_t v14 = v18;
      if (v160 > 0xFDu) {
        goto LABEL_10;
      }
    }
  }

  if (v8 != 1)
  {
    swift_retain();
    v278 = (void (*)(__int128 *__return_ptr, void *))v8;
    outlined copy of JSONEncoder.KeyEncodingStrategy(v8);
    v281 = (void *)_CodingPathNode.path.getter(a4);
    int v19 = JSONMap.loadValue(at:)(a1);
    if (v21 > 0xFDu)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v278);
      return v296;
    }

    uint64_t v207 = v19;
    unint64_t v208 = v20;
    uint64_t v209 = v21;
    while (1)
    {
      v212 = JSONMap.offset(after:)(a1);
      uint64_t v213 = JSONMap.loadValue(at:)(v212);
      v287 = v215;
      v290 = v213;
      if (v214 > 0xFDu) {
        goto LABEL_237;
      }
      uint64_t v216 = v214;
      a1 = JSONMap.offset(after:)(v212);
      v217 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v207, v208, v209, a4, 0LL, 0LL, 0LL, 255);
      if (v6) {
        goto LABEL_246;
      }
      uint64_t v219 = v217;
      Swift::String v220 = v218;
      uint64_t v221 = v281;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v281[2] + 1LL,  1,  v281);
      }
      v223 = v221[2];
      uint64_t v222 = v221[3];
      if (v223 >= v222 >> 1) {
        uint64_t v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v222 > 1),  v223 + 1,  1,  v221);
      }
      v294 = &type metadata for _CodingKey;
      v295 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v224 = swift_allocObject();
      *(void *)&v292 = v224;
      *(void *)(v224 + 16) = v219;
      *(void *)(v224 + 24) = v220;
      *(void *)(v224 + 32) = 0LL;
      *(_BYTE *)(v224 + 40) = 0;
      v221[2] = v223 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v292, (uint64_t)&v221[5 * v223 + 4]);
      v278(&v292, v221);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(&v292, (uint64_t)v294);
      unint64_t v225 = dispatch thunk of CodingKey.stringValue.getter();
      v227 = v226;
      uint64_t v228 = v296;
      v229 = swift_isUniquelyReferenced_nonNull_native();
      v296 = 0x8000000000000000LL;
      swift_bridgeObjectRetain();
      v231 = specialized __RawDictionaryStorage.find<A>(_:)(v225, v227);
      v232 = *(void *)(v228 + 16);
      v233 = (v230 & 1) == 0;
      v234 = v232 + v233;
      if (__OFADD__(v232, v233)) {
        goto LABEL_224;
      }
      v235 = v230;
      if (*(void *)(v228 + 24) >= v234)
      {
        if ((v229 & 1) != 0)
        {
          v236 = v228;
          uint64_t v6 = 0LL;
          if ((v230 & 1) != 0) {
            goto LABEL_177;
          }
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
          v243 = static _DictionaryStorage.copy(original:)();
          v236 = v243;
          if (*(void *)(v228 + 16))
          {
            v244 = (char *)(v243 + 64);
            v245 = (char *)(v228 + 64);
            v246 = (unint64_t)((1LL << *(_BYTE *)(v236 + 32)) + 63) >> 6;
            v274 = v228 + 64;
            if (v236 != v228 || v244 >= &v245[8 * v246]) {
              memmove(v244, v245, 8 * v246);
            }
            v247 = 0LL;
            *(void *)(v236 + 16) = *(void *)(v228 + 16);
            v248 = 1LL << *(_BYTE *)(v228 + 32);
            if (v248 < 64) {
              v249 = ~(-1LL << v248);
            }
            else {
              v249 = -1LL;
            }
            v250 = v249 & *(void *)(v228 + 64);
            v276 = (unint64_t)(v248 + 63) >> 6;
            while (1)
            {
              if (v250)
              {
                v251 = __clz(__rbit64(v250));
                v250 &= v250 - 1;
                v252 = v251 | (v247 << 6);
              }

              else
              {
                v263 = v247 + 1;
                if (__OFADD__(v247, 1LL)) {
                  goto LABEL_234;
                }
                if (v263 >= v276) {
                  break;
                }
                v264 = *(void *)(v274 + 8 * v263);
                ++v247;
                if (!v264)
                {
                  v247 = v263 + 1;
                  if (v263 + 1 >= v276) {
                    break;
                  }
                  v264 = *(void *)(v274 + 8 * v247);
                  if (!v264)
                  {
                    v247 = v263 + 2;
                    if (v263 + 2 >= v276) {
                      break;
                    }
                    v264 = *(void *)(v274 + 8 * v247);
                    if (!v264)
                    {
                      v247 = v263 + 3;
                      if (v263 + 3 >= v276) {
                        break;
                      }
                      v264 = *(void *)(v274 + 8 * v247);
                      if (!v264)
                      {
                        v265 = v263 + 4;
                        if (v265 >= v276) {
                          break;
                        }
                        v264 = *(void *)(v274 + 8 * v265);
                        if (!v264)
                        {
                          while (1)
                          {
                            v247 = v265 + 1;
                            if (__OFADD__(v265, 1LL)) {
                              break;
                            }
                            if (v247 >= v276) {
                              goto LABEL_221;
                            }
                            v264 = *(void *)(v274 + 8 * v247);
                            ++v265;
                            if (v264) {
                              goto LABEL_220;
                            }
                          }

uint64_t TimeZoneCache.State.fixed(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  BOOL v5 = a1 == 5524807 && a2 == 0xE300000000000000LL;
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v27 = *(void *)(v2 + 40);
    if (*(void *)(v27 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v29 & 1) != 0)
      {
        uint64_t v11 = *(void **)(*(void *)(v27 + 56) + 16 * v28);
        swift_unknownObjectRetain();
LABEL_37:
        swift_bridgeObjectRelease();
        return (uint64_t)v11;
      }

      swift_bridgeObjectRelease();
    }

    type metadata accessor for _TimeZoneICU();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v11 = _TimeZoneICU.init(identifier:)(a1, a2);
    if (!v11) {
      return (uint64_t)v11;
    }
    uint64_t v34 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneICU,  (uint64_t)&protocol conformance descriptor for _TimeZoneICU);
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = *(void *)(v4 + 40);
    *(void *)(v4 + 40) = 0x8000000000000000LL;
    unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    uint64_t v38 = *(void *)(v89 + 16);
    BOOL v39 = (v37 & 1) == 0;
    BOOL v32 = __OFADD__(v38, v39);
    uint64_t v40 = v38 + v39;
    if (v32)
    {
      __break(1u);
    }

    else
    {
      char v3 = v37;
      if (*(void *)(v89 + 24) < v40)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v40,  isUniquelyReferenced_nonNull_native);
        uint64_t v41 = v89;
        unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
        if ((v3 & 1) != (v42 & 1)) {
          goto LABEL_118;
        }
        if ((v3 & 1) == 0)
        {
LABEL_34:
          while (1)
          {
            *(void *)(v41 + 8 * (v36 >> 6) + 64) |= 1LL << v36;
            uint64_t v44 = (uint64_t *)(*(void *)(v41 + 48) + 16 * v36);
            *uint64_t v44 = a1;
            v44[1] = a2;
            uint64_t v45 = (void *)(*(void *)(v41 + 56) + 16 * v36);
            void *v45 = v11;
            v45[1] = v34;
            uint64_t v46 = *(void *)(v41 + 16);
            BOOL v32 = __OFADD__(v46, 1LL);
            uint64_t v47 = v46 + 1;
            if (!v32) {
              break;
            }
            __break(1u);
LABEL_111:
            swift_bridgeObjectRelease();
            unint64_t v36 = v84;
            if ((v3 & 1) != 0) {
              goto LABEL_30;
            }
          }

          *(void *)(v41 + 16) = v47;
          swift_bridgeObjectRetain();
          goto LABEL_36;
        }

__n128 TimeZoneCache.State.setDefaultTimeZone(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  TimeZoneCache.State.check()();
  __n128 v12 = *(__n128 *)(v2 + 24);
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = v5;
  if (v4)
  {
    uint64_t v6 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
    uint64_t v7 = (char *)objc_allocWithZone(v6);
    uint64_t v8 = &v7[OBJC_IVAR____NSSwiftTimeZone_timeZone];
    *(void *)uint64_t v8 = v4;
    *((void *)v8 + 1) = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
    uint64_t v9 = swift_allocObject();
    *(_DWORD *)(v9 + 32) = 0;
    *(_OWORD *)(v9 + 16) = xmmword_1837ADD10;
    *(void *)&v7[OBJC_IVAR____NSSwiftTimeZone_lock] = v9;
    v13.receiver = v7;
    v13.super_class = v6;
    swift_unknownObjectRetain_n();
    id v10 = objc_msgSendSuper2(&v13, sel_init);

    *(void *)(v2 + 96) = v10;
  }

  else
  {

    *(void *)(v2 + 96) = 0LL;
  }

  __n128 result = v12;
  *a2 = v12;
  return result;
}

char *TimeZoneCache.State.bridgedFixed(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(v2 + 104);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v9 & 1) != 0)
    {
      unint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      id v11 = (id)v10;
      goto LABEL_142;
    }

    swift_bridgeObjectRelease();
  }

  uint64_t v12 = *(void *)(v4 + 40);
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v14 & 1) != 0)
    {
      __int128 v116 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v13);
      uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 16 * v13);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v16 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
      char v17 = (char *)objc_allocWithZone(v16);
      *(_OWORD *)&v17[OBJC_IVAR____NSSwiftTimeZone_timeZone] = v116;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
      uint64_t v18 = swift_allocObject();
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_1837ADD10;
      *(void *)&v17[OBJC_IVAR____NSSwiftTimeZone_lock] = v18;
      v119.receiver = v17;
      v119.super_class = v16;
      swift_unknownObjectRetain();
      id v19 = objc_msgSendSuper2(&v119, sel_init);
      swift_bridgeObjectRetain();
      unint64_t v10 = (unint64_t)v19;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v121 = *(void *)(v4 + 104);
      uint64_t v21 = v121;
      *(void *)(v4 + 104) = 0x8000000000000000LL;
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      uint64_t v24 = *(void *)(v21 + 16);
      BOOL v25 = (v23 & 1) == 0;
      BOOL v26 = __OFADD__(v24, v25);
      uint64_t v27 = v24 + v25;
      if (!v26)
      {
        LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v23;
        if (*(void *)(v21 + 24) >= v27)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v109 = v22;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftTimeZone>);
            uint64_t v91 = static _DictionaryStorage.copy(original:)();
            uint64_t v28 = v91;
            if (!*(void *)(v21 + 16)) {
              goto LABEL_138;
            }
            __n128 result = (char *)(v91 + 64);
            __srcb = (char *)(v21 + 64);
            unint64_t v92 = (unint64_t)((1LL << *(_BYTE *)(v28 + 32)) + 63) >> 6;
            if (v28 != v21 || result >= &__srcb[8 * v92]) {
              __n128 result = (char *)memmove(result, __srcb, 8 * v92);
            }
            int64_t v118 = 0LL;
            *(void *)(v28 + 16) = *(void *)(v21 + 16);
            uint64_t v93 = 1LL << *(_BYTE *)(v21 + 32);
            uint64_t v94 = -1LL;
            if (v93 < 64) {
              uint64_t v94 = ~(-1LL << v93);
            }
            unint64_t v95 = v94 & *(void *)(v21 + 64);
            int64_t v112 = (unint64_t)(v93 + 63) >> 6;
            while (1)
            {
              if (v95)
              {
                unint64_t v96 = __clz(__rbit64(v95));
                v95 &= v95 - 1;
                unint64_t v97 = v96 | (v118 << 6);
              }

              else
              {
                int64_t v104 = v118 + 1;
                if (__OFADD__(v118, 1LL)) {
                  goto LABEL_146;
                }
                if (v104 >= v112) {
                  goto LABEL_138;
                }
                unint64_t v105 = *(void *)&__srcb[8 * v104];
                int64_t v106 = v118 + 1;
                if (!v105)
                {
                  int64_t v106 = v118 + 2;
                  if (v118 + 2 >= v112) {
                    goto LABEL_138;
                  }
                  unint64_t v105 = *(void *)&__srcb[8 * v106];
                  if (!v105)
                  {
                    int64_t v106 = v118 + 3;
                    if (v118 + 3 >= v112) {
                      goto LABEL_138;
                    }
                    unint64_t v105 = *(void *)&__srcb[8 * v106];
                    if (!v105)
                    {
                      int64_t v106 = v118 + 4;
                      if (v118 + 4 >= v112) {
                        goto LABEL_138;
                      }
                      unint64_t v105 = *(void *)&__srcb[8 * v106];
                      if (!v105)
                      {
                        int64_t v106 = v118 + 5;
                        if (v118 + 5 >= v112) {
                          goto LABEL_138;
                        }
                        unint64_t v105 = *(void *)&__srcb[8 * v106];
                        if (!v105)
                        {
                          int64_t v106 = v118 + 6;
                          if (v118 + 6 >= v112) {
                            goto LABEL_138;
                          }
                          unint64_t v105 = *(void *)&__srcb[8 * v106];
                          if (!v105)
                          {
                            int64_t v106 = v118 + 7;
                            if (v118 + 7 >= v112) {
                              goto LABEL_138;
                            }
                            unint64_t v105 = *(void *)&__srcb[8 * v106];
                            if (!v105)
                            {
                              int64_t v107 = v118 + 8;
                              if (v118 + 8 >= v112) {
                                goto LABEL_138;
                              }
                              unint64_t v105 = *(void *)&__srcb[8 * v107];
                              if (!v105)
                              {
                                while (1)
                                {
                                  int64_t v106 = v107 + 1;
                                  if (__OFADD__(v107, 1LL)) {
                                    goto LABEL_149;
                                  }
                                  if (v106 >= v112) {
                                    break;
                                  }
                                  unint64_t v105 = *(void *)&__srcb[8 * v106];
                                  ++v107;
                                  if (v105) {
                                    goto LABEL_137;
                                  }
                                }

char *TimeZoneCache.State.bridgedOffsetFixed(_:)(uint64_t a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = *(void *)(v1 + 112);
  if (*(void *)(v7 + 16))
  {
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v9 & 1) != 0)
    {
      id v2 = *(id *)(*(void *)(v7 + 56) + 8 * v8);
      id v10 = v2;
      return (char *)v2;
    }
  }

  uint64_t v11 = *(void *)(v5 + 48);
  if (*(void *)(v11 + 16))
  {
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v13 & 1) != 0)
    {
      unint64_t v14 = v12;
      uint64_t v15 = *(void *)(v11 + 56);
      uint64_t v16 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
      *(_OWORD *)__srcc = *(_OWORD *)(v15 + 16 * v14);
      char v17 = (char *)objc_allocWithZone(v16);
      *(_OWORD *)&v17[OBJC_IVAR____NSSwiftTimeZone_timeZone] = *(_OWORD *)__srcc;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
      uint64_t v18 = swift_allocObject();
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_1837ADD10;
      *(void *)&v17[OBJC_IVAR____NSSwiftTimeZone_lock] = v18;
      v104.receiver = v17;
      v104.super_class = v16;
      swift_unknownObjectRetain_n();
      id v2 = objc_msgSendSuper2(&v104, sel_init);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v105 = *(void *)(v5 + 112);
      uint64_t v4 = v105;
      *(void *)(v5 + 112) = 0x8000000000000000LL;
      uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      uint64_t v22 = *(void *)(v4 + 16);
      BOOL v23 = (v20 & 1) == 0;
      uint64_t v24 = v22 + v23;
      if (!__OFADD__(v22, v23))
      {
        uint64_t v3 = v20;
        if (*(void *)(v4 + 24) < v24)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v24,  isUniquelyReferenced_nonNull_native);
          uint64_t v25 = v105;
          unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
          if ((v3 & 1) != (v27 & 1)) {
            goto LABEL_103;
          }
          uint64_t v21 = v26;
          if ((v3 & 1) == 0) {
            goto LABEL_64;
          }
LABEL_23:
          uint64_t v43 = *(void *)(v25 + 56);

          *(void *)(v43 + 8 * v21) = v2;
LABEL_65:
          *(void *)(v5 + 112) = v25;
          swift_unknownObjectRelease();
          goto LABEL_144;
        }

        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v25 = v4;
          if ((v20 & 1) != 0) {
            goto LABEL_23;
          }
LABEL_64:
          specialized _NativeDictionary._insert(at:key:value:)(v21, a1, (uint64_t)v2, (void *)v25);
          goto LABEL_65;
        }

unint64_t one-time initialization function for cache()
{
  uint64_t v0 = (void *)static _DictionaryStorage.allocate(capacity:)();
  swift_retain();
  uint64_t v1 = 0LL;
  while (1)
  {
    id v2 = (char *)&outlined read-only object #0 of TimeZoneCache.State.init() + v1;
    uint64_t v3 = *(void *)((char *)&outlined read-only object #0 of TimeZoneCache.State.init() + v1 + 40);
    uint64_t v4 = *(void *)((char *)&outlined read-only object #0 of TimeZoneCache.State.init() + v1 + 56);
    if (!v3)
    {
      swift_bridgeObjectRetain();
LABEL_8:
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<TimeZoneCache.State>._Buffer);
      unint64_t result = swift_allocObject();
      *(_DWORD *)(result + 144) = 0;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      uint64_t v14 = MEMORY[0x18961AFF0];
      *(void *)(result + 48) = 0LL;
      *(void *)(result + 56) = v14;
      *(void *)(result + 64) = v14;
      *(void *)(result + 72) = -1LL;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(void *)(result + 112) = 0LL;
      *(void *)(result + 120) = v14;
      *(void *)(result + 128) = v14;
      *(void *)(result + 136) = v0;
      static TimeZoneCache.cache = result;
      return result;
    }

    uint64_t v5 = *((void *)v2 + 4);
    uint64_t v6 = *((void *)v2 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v3);
    if ((v8 & 1) != 0) {
      break;
    }
    *(void *)((char *)v0 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v9 = (uint64_t *)(v0[6] + 16 * result);
    *char v9 = v5;
    v9[1] = v3;
    id v10 = (void *)(v0[7] + 16 * result);
    void *v10 = v6;
    v10[1] = v4;
    uint64_t v11 = v0[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_10;
    }
    v0[2] = v13;
    v1 += 32LL;
    if (v1 == 1632) {
      goto LABEL_8;
    }
  }

  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

void closure #1 in TimeZoneCache.reset()(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  a1[7] = -1LL;
  swift_unknownObjectRetain();
  TimeZoneCache.State.check()();
  *a2 = v3;
  a2[1] = v4;
}

uint64_t closure #1 in TimeZoneCache.current.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    *a2 = result;
    a2[1] = v5;
    return swift_unknownObjectRetain();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t closure #1 in TimeZoneCache.default.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = a1[4];
    *a2 = v4;
    a2[1] = v5;
    return swift_unknownObjectRetain();
  }

  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t v7 = a1[1];
    *a2 = result;
    a2[1] = v7;
    swift_unknownObjectRetain();
    return swift_unknownObjectRetain();
  }

  __break(1u);
  return result;
}

uint64_t TimeZoneCache.setDefault(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *v1;
  swift_retain();
  os_unfair_lock_lock(v4 + 36);
  v15[0] = v2;
  v15[1] = v3;
  TimeZoneCache.State.setDefaultTimeZone(_:)(v15, &v14);
  os_unfair_lock_unlock(v4 + 36);
  swift_release();
  __n128 v5 = v14;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static CalendarCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.reset()(v6);
  os_unfair_lock_unlock(v7);
  uint64_t result = swift_release_n();
  if (v5.n128_u64[0])
  {
    char v9 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = *(uint64_t (**)(uint64_t, unint64_t))(v5.n128_u64[1] + 120);
    swift_unknownObjectRetain();
    id v12 = (id) v11(ObjectType, v5.n128_u64[1]);
    uint64_t v13 = CFNotificationCenterGetLocalCenter();
    swift_unknownObjectRetain();
    CFNotificationCenterPostNotification(v13, v9, v12, 0LL, 1u);

    swift_unknownObjectRelease_n();
    return swift_unknownObjectRelease_n();
  }

  return result;
}

uint64_t closure #1 in TimeZoneCache.fixed(_:)@<X0>( uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = TimeZoneCache.State.fixed(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

unint64_t closure #1 in TimeZoneCache.offsetFixed(_:)@<X0>( unint64_t result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v6 = result;
  uint64_t v8 = *(void *)(result + 48);
  if (*(void *)(v8 + 16))
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      __int128 v48 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * result);
      uint64_t result = swift_unknownObjectRetain();
      __int128 v10 = v48;
LABEL_58:
      *a3 = v10;
      return result;
    }
  }

  uint64_t v11 = a2;
  if (a2 < 0)
  {
    uint64_t v11 = -a2;
    if (__OFSUB__(0LL, a2))
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }

  type metadata accessor for _TimeZoneGMTICU();
  uint64_t v3 = (void *)swift_allocObject();
  uint64_t v12 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a2);
  if (!v13)
  {
LABEL_12:
    uint64_t result = swift_deallocPartialClassInstance();
    __int128 v10 = 0uLL;
    goto LABEL_58;
  }

  uint64_t v14 = v12;
  uint64_t v15 = v13;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU,  (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
  v3[3] = v14;
  v3[4] = v15;
  v3[2] = a2;
  if (__ROR8__(0xFEDCBA987654321LL * v11 + 0x91A2B3C4D5E6F8LL, 3) >= 0x2468ACF13579BFuLL)
  {
LABEL_57:
    *(void *)&__int128 v10 = v3;
    *((void *)&v10 + 1) = result;
    goto LABEL_58;
  }

  unint64_t v47 = result;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v49 = *(void *)(v6 + 48);
  uint64_t v4 = v49;
  *(void *)(v6 + 48) = 0x8000000000000000LL;
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v18 = *(void *)(v49 + 16);
  BOOL v19 = (v17 & 1) == 0;
  BOOL v20 = __OFADD__(v18, v19);
  uint64_t v21 = v18 + v19;
  if (v20) {
    goto LABEL_18;
  }
  LOBYTE(v11) = v17;
  if (*(void *)(v49 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v22 = v49;
      goto LABEL_15;
    }

uint64_t closure #1 in TimeZoneCache.autoupdatingCurrent()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = v4;
  }

  else
  {
    type metadata accessor for _TimeZoneAutoupdating();
    uint64_t v5 = swift_allocObject();
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }

  *a2 = v5;
  return swift_retain();
}

uint64_t closure #1 in TimeZoneCache.timeZoneAbbreviations()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 72);
  if (!v4)
  {
    *(void *)(a1 + 72) = *(void *)(a1 + 120);
    uint64_t v4 = swift_bridgeObjectRetain();
  }

  *a2 = v4;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2;
  return result;
}

void closure #1 in TimeZoneCache.bridgedCurrent.getter(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *a2 = v4;
    id v5 = v4;
  }

  else
  {
    __break(1u);
  }

id closure #1 in TimeZoneCache.bridgedAutoupdatingCurrent.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    id v4 = *(id *)(a1 + 88);
  }

  else
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v6 = *(void *)(a1 + 16);
    }

    else
    {
      type metadata accessor for _TimeZoneAutoupdating();
      uint64_t v6 = swift_allocObject();
      *(void *)(a1 + 16) = v6;
      swift_retain();
    }

    uint64_t v7 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
    uint64_t v8 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
    char v9 = (char *)objc_allocWithZone(v8);
    __int128 v10 = (uint64_t *)&v9[OBJC_IVAR____NSSwiftTimeZone_timeZone];
    uint64_t *v10 = v6;
    v10[1] = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
    uint64_t v11 = swift_allocObject();
    *(_DWORD *)(v11 + 32) = 0;
    *(_OWORD *)(v11 + 16) = xmmword_1837ADD10;
    *(void *)&v9[OBJC_IVAR____NSSwiftTimeZone_lock] = v11;
    v14.receiver = v9;
    v14.super_class = v8;
    swift_retain();
    id v12 = objc_msgSendSuper2(&v14, sel_init);
    *(void *)(a1 + 88) = v12;
    id v4 = v12;
    uint64_t v3 = 0LL;
  }

  *a2 = v4;
  return v3;
}

void closure #1 in TimeZoneCache.bridgedDefault.getter(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v4 = *(void **)(a1 + 96);
  if (v4)
  {
    id v5 = *(id *)(a1 + 96);
LABEL_5:
    *a2 = v5;
    id v7 = v4;
    return;
  }

  uint64_t v6 = *(void **)(a1 + 80);
  if (v6)
  {
    id v5 = v6;
    id v4 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
}

char *closure #1 in TimeZoneCache.bridgedFixed(_:)@<X0>( uint64_t a1@<X1>, unint64_t a2@<X2>, char **a3@<X8>)
{
  uint64_t result = TimeZoneCache.State.bridgedFixed(_:)(a1, a2);
  *a3 = result;
  return result;
}

char *closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)@<X0>(uint64_t a1@<X1>, char **a2@<X8>)
{
  uint64_t result = TimeZoneCache.State.bridgedOffsetFixed(_:)(a1);
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for TimeZoneCache()
{
  return &type metadata for TimeZoneCache;
}

uint64_t destroy for TimeZoneCache.State(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TimeZoneCache.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  id v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  id v7 = *(void **)(a2 + 88);
  uint64_t v6 = *(void **)(a2 + 96);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v6;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v5;
  id v10 = v7;
  id v11 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TimeZoneCache.State(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = v5;
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)a1[10];
  id v7 = (void *)a2[10];
  a1[10] = v7;
  id v8 = v7;

  id v9 = (void *)a1[11];
  id v10 = (void *)a2[11];
  a1[11] = v10;
  id v11 = v10;

  id v12 = (void *)a1[12];
  uint64_t v13 = (void *)a2[12];
  a1[12] = v13;
  id v14 = v13;

  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimeZoneCache.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeZoneCache.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeZoneCache.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 128) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for TimeZoneCache.State()
{
  return &type metadata for TimeZoneCache.State;
}

uint64_t Predicate.expression.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v1, a1);
}

uint64_t Predicate.variable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void **a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFELL),  a2,  a3);
    uint64_t v9 = TupleTypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v7)
    {
      uint64_t v13 = (uint64_t *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      id v14 = (uint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v15 = v7;
      do
      {
        uint64_t v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255LL, v16, v10, v11);
        --v15;
      }

      while (v15);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v9 = TupleTypeMetadata;
  }

  __n128 v17 = MEMORY[0x1895F8858](TupleTypeMetadata);
  BOOL v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))( v19,  v4 + *(int *)(a1 + 36),  v9,  v17);
  if (v7)
  {
    uint64_t v22 = (int *)(v9 + 32);
    uint64_t v23 = v7;
    do
    {
      if (v7 == 1) {
        int v24 = 0;
      }
      else {
        int v24 = *v22;
      }
      uint64_t v25 = *a4++;
      *uint64_t v25 = *(void *)&v19[v24];
      v22 += 4;
      --v23;
    }

    while (v23);
  }

  return result;
}

uint64_t Predicate.init(_:)@<X0>( void (*a1)(__int128 *__return_ptr, char **)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (*v41)(__int128 *__return_ptr, char **);
  __int128 v42[2];
  v40[1] = a2;
  uint64_t v41 = a1;
  id v8 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v9 = 8 * a3;
  if (a3 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0LL, *v8, 1LL, a4);
    uint64_t v11 = TupleTypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (a3)
    {
      id v14 = (void *)((char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v15 = a3;
      do
      {
        uint64_t v16 = *v8++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255LL, v16, v12, v13);
        --v15;
      }

      while (v15);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v11 = TupleTypeMetadata;
  }

  uint64_t v17 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata);
  BOOL v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v40[0] = v40;
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)v40 - v21;
  MEMORY[0x1895F8858](v23);
  uint64_t v26 = (char *)v40 - v25;
  if (a3)
  {
    if (one-time initialization token for nextID != -1) {
      swift_once();
    }
    uint64_t v27 = 0LL;
    do
    {
      if (a3 == 1) {
        int v28 = 0;
      }
      else {
        int v28 = *(_DWORD *)(v11 + 16 * v27 + 32);
      }
      do
        unint64_t v29 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
      while (__stxr(v29 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
      *(void *)&v26[v28] = v29;
      ++v27;
    }

    while (v27 != a3);
  }

  uint64_t v30 = a5 + *(int *)(type metadata accessor for Predicate(0LL, a3, a4, v24) + 36);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v30, v26, v11);
  __n128 v32 = MEMORY[0x1895F8858](v31);
  unint64_t v33 = (char **)((char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v19, v30, v11, v32);
  if (a3)
  {
    uint64_t v34 = (int *)(v11 + 32);
    uint64_t v35 = v33;
    uint64_t v36 = a3;
    do
    {
      if (a3 == 1)
      {
        LODWORD(v37) = 0;
        int64_t v38 = v22;
      }

      else
      {
        uint64_t v37 = *v34;
        int64_t v38 = &v22[v37];
      }

      *(void *)int64_t v38 = *(void *)&v19[(int)v37];
      *v35++ = v38;
      v34 += 4;
      --v36;
    }

    while (v36);
  }

  v41(v42, v33);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v42, a5);
}

uint64_t type metadata accessor for Predicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Predicate);
}

uint64_t Predicate.evaluate(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = 8 * v8;
  uint64_t v68 = v8;
  if (v8 == 1)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0LL, *v10, a3, a4);
    uint64_t v12 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](TupleTypeMetadata);
    id v14 = (char *)&v58 - v13;
    type metadata accessor for PredicateExpressions.Variable(255LL, *v10, v15, v16);
    uint64_t v17 = v12;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v19 = TupleTypeMetadata2;
  }

  else
  {
    uint64_t v66 = (char **)v4;
    MEMORY[0x1895F8858](a1);
    unint64_t v22 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (v8)
    {
      uint64_t v23 = (uint64_t *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v24 = (uint64_t *)((char *)&v58 - v22);
      uint64_t v25 = v68;
      do
      {
        uint64_t v26 = *v23++;
        *v24++ = type metadata accessor for PredicateExpressions.Variable(255LL, v26, v20, v21);
        --v25;
      }

      while (v25);
    }

    uint64_t v27 = v68;
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v65 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](TupleTypeMetadata);
    uint64_t v67 = (char *)&v58 - v28;
    unint64_t v63 = &v58;
    MEMORY[0x1895F8858](v29);
    __n128 v32 = (uint64_t *)((char *)&v58 - v22);
    if (v27)
    {
      unint64_t v33 = (uint64_t *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v34 = v32;
      uint64_t v35 = v68;
      do
      {
        uint64_t v36 = *v33++;
        type metadata accessor for PredicateExpressions.Variable(255LL, v36, v30, v31);
        *v34++ = swift_getTupleTypeMetadata2();
        --v35;
      }

      while (v35);
    }

    uint64_t v8 = v68;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata();
    uint64_t v19 = TupleTypeMetadata2;
    uint64_t v5 = (uint64_t)v66;
    id v14 = v67;
    uint64_t v17 = v65;
  }

  unint64_t v63 = &v58;
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v67 = (char *)&v58 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v5, (uint64_t)v71);
  uint64_t v60 = v73;
  uint64_t v61 = v72;
  unint64_t v59 = __swift_project_boxed_opaque_existential_1(v71, v72);
  uint64_t v62 = &v58;
  __n128 v38 = MEMORY[0x1895F8858](v59);
  uint64_t v66 = (char **)((char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
  int64_t v40 = v14;
  v39(v14, v5 + *(int *)(a2 + 36), TupleTypeMetadata, v38);
  uint64_t v65 = *(void *)(a2 + 24);
  if (v8)
  {
    uint64_t v43 = v66;
    char v44 = (uint64_t *)(v65 & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v45 = (int *)(TupleTypeMetadata + 32);
    unint64_t v46 = (int *)(v19 + 32);
    uint64_t v47 = v8;
    do
    {
      if (v8 == 1) {
        int v52 = 0;
      }
      else {
        int v52 = *v46;
      }
      uint64_t v53 = *v44;
      type metadata accessor for PredicateExpressions.Variable(255LL, *v44, v41, v42);
      uint64_t v54 = swift_getTupleTypeMetadata2();
      if (v68 == 1) {
        int v48 = 0;
      }
      else {
        int v48 = *v45;
      }
      uint64_t v49 = &v67[v52];
      unint64_t v50 = &v49[*(int *)(v54 + 48)];
      *(void *)uint64_t v49 = *(void *)&v40[v48];
      uint64_t v51 = *v7++;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16LL))(v50, v51, v53);
      *v43++ = v49;
      v45 += 4;
      v46 += 4;
      ++v44;
      --v47;
      uint64_t v8 = v68;
    }

    while (v47);
  }

  PredicateBindings.init<each A>(_:)((uint64_t)v66, v8, v65, v42, &v70);
  uint64_t v69 = v70;
  char v55 = (char)v59;
  uint64_t v56 = v64;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*(void *)(v60 + 8) + 16LL))(&v74, &v69, v61);
  swift_bridgeObjectRelease();
  if (!v56) {
    char v55 = v74;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  return v55 & 1;
}

unint64_t static Predicate.true.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFELL);
  if (a1 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0LL, *v8, a3, a4);
    uint64_t v10 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](TupleTypeMetadata);
    uint64_t v13 = (char *)&v27 - v12;
LABEL_7:
    if (one-time initialization token for nextID != -1) {
      swift_once();
    }
    uint64_t v22 = 0LL;
    do
    {
      if (a1 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *(_DWORD *)(TupleTypeMetadata + 16 * v22 + 32);
      }
      do
        unint64_t v24 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
      while (__stxr(v24 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
      *(void *)&v13[v23] = v24;
      ++v22;
    }

    while (v22 != a1);
    goto LABEL_15;
  }

  MEMORY[0x1895F8858](a1);
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  if (a1)
  {
    uint64_t v18 = (uint64_t *)((char *)&v27 - v17);
    uint64_t v19 = a1;
    do
    {
      uint64_t v20 = *v8++;
      *v18++ = type metadata accessor for PredicateExpressions.Variable(255LL, v20, v14, v15);
      --v19;
    }

    while (v19);
  }

  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v10 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v13 = (char *)&v27 - v21;
  if (a1) {
    goto LABEL_7;
  }
LABEL_15:
  uint64_t v25 = type metadata accessor for Predicate(0LL, a1, a2, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5 + *(int *)(v25 + 36), v13, TupleTypeMetadata);
  *(void *)(a5 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  unint64_t result = lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>();
  *(void *)(a5 + 32) = result;
  *(_BYTE *)a5 = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
    v2[0] = MEMORY[0x1896184E8];
    v2[1] = MEMORY[0x1896184D0];
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1, v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>);
  }

  return result;
}

unint64_t static Predicate.false.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFELL);
  if (a1 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0LL, *v8, a3, a4);
    uint64_t v10 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](TupleTypeMetadata);
    uint64_t v13 = (char *)&v27 - v12;
LABEL_7:
    if (one-time initialization token for nextID != -1) {
      swift_once();
    }
    uint64_t v22 = 0LL;
    do
    {
      if (a1 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *(_DWORD *)(TupleTypeMetadata + 16 * v22 + 32);
      }
      do
        unint64_t v24 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
      while (__stxr(v24 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
      *(void *)&v13[v23] = v24;
      ++v22;
    }

    while (v22 != a1);
    goto LABEL_15;
  }

  MEMORY[0x1895F8858](a1);
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  if (a1)
  {
    uint64_t v18 = (uint64_t *)((char *)&v27 - v17);
    uint64_t v19 = a1;
    do
    {
      uint64_t v20 = *v8++;
      *v18++ = type metadata accessor for PredicateExpressions.Variable(255LL, v20, v14, v15);
      --v19;
    }

    while (v19);
  }

  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v10 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v13 = (char *)&v27 - v21;
  if (a1) {
    goto LABEL_7;
  }
LABEL_15:
  uint64_t v25 = type metadata accessor for Predicate(0LL, a1, a2, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5 + *(int *)(v25 + 36), v13, TupleTypeMetadata);
  *(void *)(a5 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  unint64_t result = lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>();
  *(void *)(a5 + 32) = result;
  *(_BYTE *)a5 = 0;
  return result;
}

uint64_t Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v7 = MEMORY[0x1895F8858](a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v9 + 16))( &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v3,  a2,  v7);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a1;
  return Sequence.filter(_:)();
}

uint64_t closure #1 in Sequence.filter(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v4 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v13 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v13 - v5, a1, AssociatedTypeWitness, v4);
  uint64_t v13 = AssociatedTypeWitness;
  uint64_t v14 = v6;
  uint64_t v8 = type metadata accessor for Predicate(0LL, 1LL, (uint64_t)&v13, v7);
  char v11 = Predicate.evaluate(_:)((uint64_t *)&v14, v8, v9, v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
  return v11 & 1;
}

uint64_t partial apply for closure #1 in Sequence.filter(_:)(uint64_t a1)
{
  return closure #1 in Sequence.filter(_:)(a1) & 1;
}

uint64_t type metadata completion function for Predicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = "(";
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 319LL,  *(void *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
    if (v7 > 0x3F) {
      return TupleTypeMetadata;
    }
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
    if (v8 > 0x3F) {
      return TupleTypeMetadata;
    }
LABEL_9:
    v18[1] = *(void *)(TupleTypeMetadata - 8) + 64LL;
    swift_initStructMetadata();
    return 0LL;
  }

  MEMORY[0x1895F8858](a1);
  if (v5)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v13 = (void *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v14 = v5;
    do
    {
      uint64_t v15 = *v12++;
      *v13++ = type metadata accessor for PredicateExpressions.Variable(255LL, v15, v9, v10);
      --v14;
    }

    while (v14);
  }

  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  if (v16 <= 0x3F) {
    goto LABEL_9;
  }
  return TupleTypeMetadata;
}

void *initializeBufferWithCopyOfBuffer for Predicate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __n128 v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *__n128 v4 = *a2;
    __n128 v4 = (void *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    uint64_t v8 = (**(uint64_t (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v11 = *(int *)(a3 + 36);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = *(void *)(a3 + 16);
    if (v14 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v9,  v10);
    }

    else
    {
      MEMORY[0x1895F8858](v8);
      if (v14)
      {
        uint64_t v20 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v21 = (uint64_t *)((char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        uint64_t v22 = v14;
        do
        {
          uint64_t v23 = *v20++;
          *v21++ = type metadata accessor for PredicateExpressions.Variable(255LL, v23, v17, v18);
          --v22;
        }

        while (v22);
      }

      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }

    (*(void (**)(char *, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16LL))(v12, v13);
  }

  return v4;
}

uint64_t initializeWithCopy for Predicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v7 = (**(uint64_t (***)(void))(v6 - 8))();
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v8,  v9);
  }

  else
  {
    MEMORY[0x1895F8858](v7);
    if (v11)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v17 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v18 = v11;
      do
      {
        uint64_t v19 = *v16++;
        *v17++ = type metadata accessor for PredicateExpressions.Variable(255LL, v19, v13, v14);
        --v18;
      }

      while (v18);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16LL))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t *assignWithCopy for Predicate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __int128 v6 = __swift_assign_boxed_opaque_existential_1(a1, a2);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v7,  v8);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    if (v10)
    {
      uint64_t v15 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v16 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v17 = v10;
      do
      {
        uint64_t v18 = *v15++;
        *v16++ = type metadata accessor for PredicateExpressions.Variable(255LL, v18, v12, v13);
        --v17;
      }

      while (v17);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(char *, char *))(*(void *)(TupleTypeMetadata - 8) + 24LL))((char *)a1 + v9, (char *)a2 + v9);
  return a1;
}

uint64_t initializeWithTake for Predicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v8)
    {
      uint64_t v13 = (uint64_t *)(*(void *)(v10 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v14 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v15 = v8;
      do
      {
        uint64_t v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255LL, v16, v10, v11);
        --v15;
      }

      while (v15);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for Predicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_destroy_boxed_opaque_existential_1(a1);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v7,  v8);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    if (v11)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v17 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v18 = v11;
      do
      {
        uint64_t v19 = *v16++;
        *v17++ = type metadata accessor for PredicateExpressions.Variable(255LL, v19, v13, v14);
        --v18;
      }

      while (v18);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40LL))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Predicate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18331B474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 24);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
    }

    else
    {
      MEMORY[0x1895F8858](a1);
      if (v9)
      {
        uint64_t v14 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v15 = (uint64_t *)((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        uint64_t v16 = v9;
        do
        {
          uint64_t v17 = *v14++;
          *v15++ = type metadata accessor for PredicateExpressions.Variable(255LL, v17, v11, v12);
          --v16;
        }

        while (v16);
      }

      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48LL))( a1 + *(int *)(a3 + 36),  a2);
  }

uint64_t storeEnumTagSinglePayload for Predicate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18331B5A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if ((_DWORD)a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = *(void *)(a4 + 16);
    if (v7 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a4 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
    }

    else
    {
      MEMORY[0x1895F8858](result);
      if (v7)
      {
        uint64_t v12 = (uint64_t *)(*(void *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v13 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        uint64_t v14 = v7;
        do
        {
          uint64_t v15 = *v12++;
          *v13++ = type metadata accessor for PredicateExpressions.Variable(255LL, v15, v9, v10);
          --v14;
        }

        while (v14);
      }

      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56LL))( v5 + *(int *)(a4 + 36),  a2,  a2);
  }

  return result;
}

ValueMetadata *type metadata accessor for PredicateExpressions()
{
  return &type metadata for PredicateExpressions;
}

uint64_t one-time initialization function for IDNScriptAllowedList()
{
  uint64_t result = closure #1 in variable initialization expression of static URL.UnicodeLookalikeTable.IDNScriptAllowedList();
  static URL.UnicodeLookalikeTable.IDNScriptAllowedList = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static URL.UnicodeLookalikeTable.IDNScriptAllowedList()
{
  uint64_t v24 = MEMORY[0x18961AFF8];
  __int128 v23 = xmmword_183816F30;
  unsigned int v0 = MEMORY[0x186E21064](4106LL, &v23);
  if (v0 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v0);
  }
  __int128 v23 = xmmword_183816F40;
  unsigned int v1 = MEMORY[0x186E21064](4106LL, &v23);
  if (v1 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v1);
  }
  __int128 v23 = xmmword_183816F50;
  unsigned int v2 = MEMORY[0x186E21064](4106LL, &v23);
  if (v2 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v2);
  }
  __int128 v23 = xmmword_183816F60;
  unsigned int v3 = MEMORY[0x186E21064](4106LL, &v23);
  if (v3 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v3);
  }
  __int128 v23 = xmmword_183816F70;
  unsigned int v4 = MEMORY[0x186E21064](4106LL, &v23);
  if (v4 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v4);
  }
  if (((unint64_t)"n3URL21UnicodeLookalikeTable" & 0x1000000000000000LL) != 0)
  {
    _StringGuts._slowWithCString<A>(_:)();
    unint64_t v6 = v23;
    if ((unint64_t)v23 < 0xC8) {
LABEL_16:
    }
      specialized Set._Variant.insert(_:)((unint64_t *)&v23, v6);
  }

  else
  {
    if (((unint64_t)"n3URL21UnicodeLookalikeTable" & 0x2000000000000000LL) != 0)
    {
      *(void *)&__int128 v23 = 0xD000000000000013LL;
      *((void *)&v23 + 1) = (unint64_t)"n3URL21UnicodeLookalikeTable" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v5 = &v23;
    }

    else
    {
      uint64_t v5 = (__int128 *)(((unint64_t)"n3URL21UnicodeLookalikeTable" & 0xFFFFFFFFFFFFFFFLL) + 32);
    }

    unint64_t v6 = (int)MEMORY[0x186E21064](4106LL, v5);
    if (v6 < 0xC8) {
      goto LABEL_16;
    }
  }

  __int128 v23 = xmmword_183816F80;
  unsigned int v7 = MEMORY[0x186E21064](4106LL, &v23);
  if (v7 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v7);
  }
  __int128 v23 = xmmword_183816F90;
  unsigned int v8 = MEMORY[0x186E21064](4106LL, &v23);
  if (v8 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v8);
  }
  __int128 v23 = xmmword_183816FA0;
  unsigned int v9 = MEMORY[0x186E21064](4106LL, &v23);
  if (v9 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v9);
  }
  __int128 v23 = xmmword_183816FB0;
  unsigned int v10 = MEMORY[0x186E21064](4106LL, &v23);
  if (v10 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v10);
  }
  __int128 v23 = xmmword_183816FC0;
  unsigned int v11 = MEMORY[0x186E21064](4106LL, &v23);
  if (v11 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v11);
  }
  __int128 v23 = xmmword_183816FD0;
  unsigned int v12 = MEMORY[0x186E21064](4106LL, &v23);
  if (v12 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v12);
  }
  __int128 v23 = xmmword_183816FE0;
  unsigned int v13 = MEMORY[0x186E21064](4106LL, &v23);
  if (v13 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v13);
  }
  __int128 v23 = xmmword_183816FF0;
  unsigned int v14 = MEMORY[0x186E21064](4106LL, &v23);
  if (v14 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v14);
  }
  if (((unint64_t)"Canadian_Aboriginal" & 0x1000000000000000LL) != 0)
  {
    _StringGuts._slowWithCString<A>(_:)();
    unint64_t v16 = v23;
    if ((unint64_t)v23 < 0xC8) {
LABEL_38:
    }
      specialized Set._Variant.insert(_:)((unint64_t *)&v23, v16);
  }

  else
  {
    if (((unint64_t)"Canadian_Aboriginal" & 0x2000000000000000LL) != 0)
    {
      *(void *)&__int128 v23 = 0xD000000000000014LL;
      *((void *)&v23 + 1) = (unint64_t)"Canadian_Aboriginal" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v15 = &v23;
    }

    else
    {
      uint64_t v15 = (__int128 *)(((unint64_t)"Canadian_Aboriginal" & 0xFFFFFFFFFFFFFFFLL) + 32);
    }

    unint64_t v16 = (int)MEMORY[0x186E21064](4106LL, v15);
    if (v16 < 0xC8) {
      goto LABEL_38;
    }
  }

  __int128 v23 = xmmword_183817000;
  unsigned int v17 = MEMORY[0x186E21064](4106LL, &v23);
  if (v17 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v17);
  }
  __int128 v23 = xmmword_183817010;
  unsigned int v18 = MEMORY[0x186E21064](4106LL, &v23);
  if (v18 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v18);
  }
  __int128 v23 = xmmword_183817020;
  unsigned int v19 = MEMORY[0x186E21064](4106LL, &v23);
  if (v19 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v19);
  }
  __int128 v23 = xmmword_183817030;
  unsigned int v20 = MEMORY[0x186E21064](4106LL, &v23);
  if (v20 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v20);
  }
  __int128 v23 = xmmword_183817040;
  unsigned int v21 = MEMORY[0x186E21064](4106LL, &v23);
  if (v21 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v21);
  }
  return v24;
}

uint64_t closure #1 in allowIDNScript #1 (_:to:) in closure #1 in variable initialization expression of static URL.UnicodeLookalikeTable.IDNScriptAllowedList@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = MEMORY[0x186E21064](4106LL, a1);
  *a2 = (int)result;
  return result;
}

uint64_t type metadata accessor for URL.UnicodeLookalikeTable()
{
  return objc_opt_self();
}

uint64_t Unicode.Scalar.isLookalikeScalarOfScriptType(_:)(int a1, int a2)
{
  uint64_t result = 0LL;
  switch(a1)
  {
    case 3:
      else {
        uint64_t result = (0x2221000000002221uLL >> (a2 - 72)) & 1;
      }
      break;
    case 35:
      uint64_t result = a2 == 3046;
      break;
    case 38:
      uint64_t result = a2 == 3585;
      break;
    case 40:
      uint64_t result = 1LL;
      if (a2 <= 5550)
      {
        if (((a2 - 5229) > 0x3D || ((1LL << (a2 - 109)) & 0x2000000000000025LL) == 0)
          && a2 != 5500
          && a2 != 5511)
        {
LABEL_16:
          uint64_t result = 0LL;
        }
      }

      else
      {
        switch(a2)
        {
          case 5551:
          case 5556:
          case 5573:
          case 5598:
          case 5609:
          case 5617:
          case 5620:
            return result;
          case 5552:
          case 5553:
          case 5554:
          case 5555:
          case 5557:
          case 5558:
          case 5559:
          case 5560:
          case 5561:
          case 5562:
          case 5563:
          case 5564:
          case 5565:
          case 5566:
          case 5567:
          case 5568:
          case 5569:
          case 5570:
          case 5571:
          case 5572:
          case 5574:
          case 5575:
          case 5576:
          case 5577:
          case 5578:
          case 5579:
          case 5580:
          case 5581:
          case 5582:
          case 5583:
          case 5584:
          case 5585:
          case 5586:
          case 5587:
          case 5588:
          case 5589:
          case 5590:
          case 5591:
          case 5592:
          case 5593:
          case 5594:
          case 5595:
          case 5596:
          case 5597:
          case 5599:
          case 5600:
          case 5601:
          case 5602:
          case 5603:
          case 5604:
          case 5605:
          case 5606:
          case 5607:
          case 5608:
          case 5610:
          case 5611:
          case 5612:
          case 5613:
          case 5614:
          case 5615:
          case 5616:
          case 5618:
          case 5619:
            goto LABEL_16;
          default:
            break;
        }
      }

      break;
    default:
      return result;
  }

  return result;
}

unint64_t String.UnicodeScalarView.hasSuffix(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = a1;
  }
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  else {
    uint64_t v9 = 7LL;
  }
  unint64_t v10 = v9 | (v8 << 16);
  int64_t v11 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, a1, a2);
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v12 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v13 = 11LL;
  }
  else {
    uint64_t v13 = 7LL;
  }
  unint64_t v14 = v13 | (v12 << 16);
  if (v11 >= (uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v14, a3, a4))
  {
    char v16 = 0;
    return v16 & 1;
  }

  unint64_t result = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, a1, a2);
  if (__OFSUB__(0LL, result))
  {
    __break(1u);
  }

  else
  {
    unint64_t result = String.UnicodeScalarView.index(_:offsetBy:)(v14, -(uint64_t)result, a3, a4);
    if (4 * v12 >= result >> 14)
    {
      String.UnicodeScalarView.subscript.getter();
      lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
      String.UnicodeScalarView.append<A>(contentsOf:)();
      char v16 = specialized Sequence<>.elementsEqual<A>(_:)(a1, a2, 0LL, 0xE000000000000000LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16 & 1;
    }
  }

  __break(1u);
  return result;
}

unint64_t String.UnicodeScalarView.index(_:offsetBy:limitedBy:)( unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7 = a3;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4LL << v10;
  if ((a3 & 0xC) == 4LL << v10) {
LABEL_55:
  }
    unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a4, a5);
  unint64_t v12 = a1;
  if ((a1 & 0xC) == v11) {
    unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a4, a5);
  }
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a4, a5);
  v7 >>= 14;
  if (a2 < 0)
  {
    uint64_t v11 = 0LL;
    a1 = v12 >> 14;
    unsigned int v20 = (char *)&v28 + 6;
    while (a1 < v7 || v7 < result >> 14)
    {
      if (result < 0x10000)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }

      if ((a5 & 0x1000000000000000LL) != 0)
      {
        uint64_t v27 = v20;
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        unsigned int v20 = v27;
      }

      else
      {
        unint64_t v21 = result >> 16;
        if ((a5 & 0x2000000000000000LL) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v29 + v21 - 1) & 0xC0) == 0x80)
          {
            uint64_t v24 = 0LL;
            do
              int v25 = v20[v21 + v24--] & 0xC0;
            while (v25 == 128);
            uint64_t v26 = 1 - v24;
          }

          else
          {
            uint64_t v26 = 1LL;
          }

          v21 -= v26;
        }

        else
        {
          uint64_t v22 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000LL) == 0)
          {
            uint64_t v28 = v20;
            uint64_t v22 = _StringObject.sharedUTF8.getter();
            unsigned int v20 = v28;
          }

          do
            int v23 = *(_BYTE *)(v22 - 1 + v21--) & 0xC0;
          while (v23 == 128);
        }

        unint64_t result = (v21 << 16) | 5;
      }

      if (--v11 <= a2)
      {
        if (a1 < v7 || result >> 14 >= v7) {
          return result;
        }
        return 0LL;
      }
    }

    return 0LL;
  }

  a1 = v12 >> 14;
  if (a2)
  {
    if ((a5 & 0x2000000000000000LL) != 0) {
      unint64_t v14 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = a5 & 0xFFFFFFFFFFFFFFLL;
    while (v7 < a1 || result >> 14 < v7)
    {
      unint64_t v15 = result >> 16;
      if (result >> 16 >= v14)
      {
        __break(1u);
        goto LABEL_54;
      }

      if ((a5 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--a2) {
          goto LABEL_26;
        }
      }

      else
      {
        if ((a5 & 0x2000000000000000LL) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          int v17 = *((unsigned __int8 *)&v29 + v15);
        }

        else
        {
          uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000LL) == 0) {
            uint64_t v16 = _StringObject.sharedUTF8.getter();
          }
          int v17 = *(unsigned __int8 *)(v16 + v15);
        }

        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        unint64_t result = ((v15 + v19) << 16) | 5;
        if (!--a2) {
          goto LABEL_26;
        }
      }
    }

    return 0LL;
  }

unint64_t specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)( int a1, uint64_t c, int a3)
{
  int v3 = c;
  unint64_t result = 0LL;
  if ((_DWORD)c != 47 && (c & 0x100000000LL) == 0)
  {
    if (a3 == 2)
    {
      if ((a1 - 1632) >= 0xFFFFFFEB)
      {
        if ((c & 0x80000000) == 0) {
          return ublock_getCode(c) != UBLOCK_ARABIC;
        }
        __break(1u);
        goto LABEL_28;
      }

      return 0LL;
    }

    if ((Unicode.Scalar.isLookalikeScalarOfScriptType(_:)(a3, a1) & 1) != 0)
    {
      if (v3 < 0)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }

      if (uscript_getScript() != a3)
      {
        if ((v3 - 65) > 0xFFFFFFDF)
        {
        }

        else
        {
          unint64_t result = 1LL;
        }
      }
    }

    if ((Unicode.Scalar.isLookalikeScalarOfScriptType(_:)(a3, v3) & 1) == 0) {
      return 0LL;
    }
    if (a1 < 0) {
      goto LABEL_29;
    }
    if ((a1 - 65) > 0xFFFFFFDF)
    {
      return 0LL;
    }

    return 1LL;
  }

  return result;
}

uint64_t specialized URL.UnicodeLookalikeTable.isLookalikeScalar(_:withPreviousScalar:)( UChar32 a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_46;
  }

  unint64_t v2 = a2;
  UChar32 v3 = a1;
  UBlockCode Code = ublock_getCode(v3);
  LOBYTE(a1) = 1;
  if (Code == UBLOCK_IPA_EXTENSIONS || Code == UBLOCK_DESERET) {
    return a1 & 1;
  }
  if (v3 > 5940)
  {
    if (v3 > 8530)
    {
    }

    else
    {
      if (v3 > 7933)
      {
        switch(v3)
        {
          case 8208:
          case 8209:
          case 8228:
          case 8231:
          case 8249:
          case 8250:
          case 8257:
          case 8260:
          case 8274:
            return a1 & 1;
          case 8210:
          case 8211:
          case 8212:
          case 8213:
          case 8214:
          case 8215:
          case 8216:
          case 8217:
          case 8218:
          case 8219:
          case 8220:
          case 8221:
          case 8222:
          case 8223:
          case 8224:
          case 8225:
          case 8226:
          case 8227:
          case 8229:
          case 8230:
          case 8232:
          case 8233:
          case 8234:
          case 8235:
          case 8236:
          case 8237:
          case 8238:
          case 8239:
          case 8240:
          case 8241:
          case 8242:
          case 8243:
          case 8244:
          case 8245:
          case 8246:
          case 8247:
          case 8248:
          case 8251:
          case 8252:
          case 8253:
          case 8254:
          case 8255:
          case 8256:
          case 8258:
          case 8259:
          case 8261:
          case 8262:
          case 8263:
          case 8264:
          case 8265:
          case 8266:
          case 8267:
          case 8268:
          case 8269:
          case 8270:
          case 8271:
          case 8272:
          case 8273:
            goto LABEL_42;
          default:
            break;
        }

        return a1 & 1;
      }

      if ((v3 - 7428) <= 0x1E && ((1 << (v3 - 4)) & 0x71000801) != 0
        || (v3 - 7836) < 2
        || v3 == 5941)
      {
        return a1 & 1;
      }
    }
  }

  else
  {
    if (v3 > 1459)
    {
      switch(v3)
      {
        case 1460:
        case 1465:
        case 1466:
        case 1468:
        case 1473:
        case 1474:
        case 1475:
        case 1476:
        case 1524:
        case 1545:
        case 1546:
          return a1 & 1;
        case 1461:
        case 1462:
        case 1463:
        case 1464:
        case 1467:
        case 1469:
        case 1470:
        case 1471:
        case 1472:
        case 1477:
        case 1478:
        case 1479:
        case 1480:
        case 1481:
        case 1482:
        case 1483:
        case 1484:
        case 1485:
        case 1486:
        case 1487:
        case 1488:
        case 1489:
        case 1490:
        case 1491:
        case 1492:
        case 1493:
        case 1494:
        case 1495:
        case 1496:
        case 1497:
        case 1498:
        case 1499:
        case 1500:
        case 1501:
        case 1502:
        case 1503:
        case 1504:
        case 1505:
        case 1506:
        case 1507:
        case 1508:
        case 1509:
        case 1510:
        case 1511:
        case 1512:
        case 1513:
        case 1514:
        case 1515:
        case 1516:
        case 1517:
        case 1518:
        case 1519:
        case 1520:
        case 1521:
        case 1522:
        case 1523:
        case 1525:
        case 1526:
        case 1527:
        case 1528:
        case 1529:
        case 1530:
        case 1531:
        case 1532:
        case 1533:
        case 1534:
        case 1535:
        case 1536:
        case 1537:
        case 1538:
        case 1539:
        case 1540:
        case 1541:
        case 1542:
        case 1543:
        case 1544:
          goto LABEL_42;
        default:
          if (((v3 - 1748) > 0x30 || ((1LL << (v3 + 44)) & 0x1E00010000001LL) == 0)
            && ((v3 - 1616) > 0x1A || ((1 << (v3 - 80)) & 0x4010001) == 0))
          {
            goto LABEL_42;
          }

          break;
      }

      return a1 & 1;
    }

    if (v3 <= 566)
    {
    }

    else if (v3 > 820)
    {
    }

    else if ((v3 - 567) <= 0x2A && ((1LL << (v3 - 55)) & 0x40004000001LL) != 0 {
           || v3 == 720)
    }
    {
      return a1 & 1;
    }
  }

uint64_t specialized URL.UnicodeLookalikeTable.allCharactersInIDNScriptAllowList(in:)( uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    char v7 = 1;
    while (1)
    {
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        UChar32 v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a2 & 0x2000000000000000LL) == 0 && (a1 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        UChar32 v8 = _decodeScalar(_:startingAt:)();
      }

      UChar32 v10 = v8;
      uint64_t v11 = v9;
      if (v8 < 0) {
        break;
      }
      int Script = uscript_getScript();
      if (one-time initialization token for IDNScriptAllowedList != -1) {
        swift_once();
      }
      uint64_t v13 = static URL.UnicodeLookalikeTable.IDNScriptAllowedList;
      if (!*(void *)(static URL.UnicodeLookalikeTable.IDNScriptAllowedList + 16)) {
        goto LABEL_24;
      }
      uint64_t v14 = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1LL << *(_BYTE *)(v13 + 32);
      unint64_t v16 = v14 & ~v15;
      if (((*(void *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(v13 + 48);
      if (*(void *)(v17 + 8 * v16) != Script)
      {
        uint64_t v18 = ~v15;
        while (1)
        {
          unint64_t v16 = (v16 + 1) & v18;
          if (((*(void *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            break;
          }
          if (*(void *)(v17 + 8 * v16) == Script) {
            goto LABEL_21;
          }
        }

uint64_t specialized BidirectionalCollection.dropLast(_:)( uint64_t result, unint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v3 = a2;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -result, 0xFuLL, a2, a3);
    return String.UnicodeScalarView.subscript.getter();
  }

  return result;
}

uint64_t specialized String.UnicodeScalarView.init<A>(_:)(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  if (v2)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0LL;
    while (1)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 4 * v4 + 32);
      if (v5 >> 11 == 27) {
        break;
      }
      if (HIWORD(v5) > 0x10u)
      {
        __break(1u);
        break;
      }

      unint64_t v7 = *(void *)(v8 + 16);
      unint64_t v6 = *(void *)(v8 + 24);
      if (v7 >= v6 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v6 > 1,  v7 + 1,  1);
      }
      ++v4;
      *(void *)(v8 + 16) = v7 + 1;
      *(_DWORD *)(v8 + 4 * v7 + 32) = v5;
      if (v2 == v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
    lazy protocol witness table accessor for type [Unicode.Scalar] and conformance [A]();
    String.UnicodeScalarView.append<A>(contentsOf:)();
    swift_release();
    return 0LL;
  }

  return result;
}

BOOL specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a1 >> 14;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) == 0 && (a3 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v9 = _decodeScalar(_:startingAt:)();
      }

      int v10 = v9;
      if (v9 != 1105 && (v9 - 1072) >= 0x20 && v9 != 45 && (v9 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v10 == 46;
      }
    }

    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
  }

  return 1LL;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;
  BOOL v12;
  unint64_t v4 = a1 >> 14;
  unsigned int v5 = 1LL;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) == 0 && (a3 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }

      uint64_t v11 = v10;
      if ((v10 - 1104) <= 0xFFFFFFDF)
      {
        unint64_t v12 = (v10 - 1105) > 0xD || ((1 << (v10 - 81)) & 0x2021) == 0;
        if (v12 && v10 != 8217 && v10 != 45 && (v10 - 48) > 9)
        {
          swift_bridgeObjectRelease();
          return v11 == 46;
        }
      }
    }

    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1LL;
  }

  return v5;
}

{
  unint64_t v4;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v4 = a1 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 1LL;
  }
  swift_bridgeObjectRetain();
  do
  {
    Substring.UnicodeScalarView.formIndex(before:)();
    _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000LL) != 0)
    {
      int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a4 & 0x2000000000000000LL) == 0 && (a3 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      int v9 = _decodeScalar(_:startingAt:)();
    }

    int v10 = v9;
    if ((v9 - 1104) <= 0xFFFFFFDF)
    {
      if (v9 <= 1170)
      {
        if (v9 == 1105 || v9 == 1110) {
          continue;
        }
      }

      else
      {
        uint64_t v11 = (v9 - 1171) > 0x28 || ((1LL << (v9 + 109)) & 0x10050010101LL) == 0;
        if (!v11 || v9 == 1241 || v9 == 1257) {
          continue;
        }
      }

      if (v9 != 45 && (v9 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v10 == 46;
      }
    }
  }

  while (v4 != a2 >> 14);
  swift_bridgeObjectRelease();
  return 1LL;
}

{
  unint64_t v4;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v4 = a1 >> 14;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) == 0 && (a3 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v9 = _decodeScalar(_:startingAt:)();
      }

      int v10 = v9;
      if ((v9 - 1104) <= 0xFFFFFFDF)
      {
        uint64_t v11 = (v9 - 1110) > 0x3B || ((1LL << (v9 - 86)) & 0x800000000000003LL) == 0;
        if (v11 && v9 != 1028 && v9 != 1105 && v9 != 45 && (v9 - 48) > 9)
        {
          swift_bridgeObjectRelease();
          return v10 == 46;
        }
      }
    }

    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
  }

  return 1LL;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;
  unint64_t v4 = a1 >> 14;
  unsigned int v5 = 1LL;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) == 0 && (a3 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }

      uint64_t v11 = v10;
      if ((v10 - 1081) <= 0xFFFFFFF6
        && (v10 - 1097) <= 0xFFFFFFF0
        && ((v10 - 1106) > 0xD || ((1 << (v10 - 82)) & 0x23C1) == 0)
        && v10 != 45
        && (v10 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v11 == 46;
      }
    }

    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1LL;
  }

  return v5;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;
  unint64_t v4 = a1 >> 14;
  unsigned int v5 = 1LL;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) == 0 && (a3 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }

      uint64_t v11 = v10;
      if ((v10 - 1081) <= 0xFFFFFFF6
        && (v10 - 1097) <= 0xFFFFFFF0
        && ((v10 - 1107) > 0xC || ((1 << (v10 - 83)) & 0x12E5) == 0)
        && v10 != 45
        && (v10 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v11 == 46;
      }
    }

    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1LL;
  }

  return v5;
}

{
  unint64_t v4;
  int v9;
  int v10;
  unint64_t v4 = a1 >> 14;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) == 0 && (a3 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v9 = _decodeScalar(_:startingAt:)();
      }

      int v10 = v9;
      if ((v9 - 1104) <= 0xFFFFFFDF
        && v9 != 1105
        && v9 != 1199
        && v9 != 1257
        && v9 != 45
        && (v9 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v10 == 46;
      }
    }

    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
  }

  return 1LL;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;
  unint64_t v4 = a1 >> 14;
  unsigned int v5 = 1LL;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) == 0 && (a3 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }

      uint64_t v11 = v10;
      if (v10 != 1100
        && (v10 - 1072) >= 0x1B
        && ((v10 - 1102) > 0xF || ((1 << (v10 - 78)) & 0x8007) == 0)
        && v10 != 45
        && (v10 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v11 == 46;
      }
    }

    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1LL;
  }

  return v5;
}

BOOL specialized URL.UnicodeLookalikeTable.allCharactersAllowedByTLDRules(in:)( unint64_t a1, unint64_t a2)
{
  v2._uint64_t countAndFlagsBits = 46LL;
  v2._id object = (void *)0xE100000000000000LL;
  if (String.hasSuffix(_:)(v2)) {
    specialized RangeReplaceableCollection<>.removeLast(_:)(1uLL);
  }
  uint64_t v279 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3LL, 0);
  uint64_t v3 = v279;
  unint64_t v5 = *(void *)(v279 + 16);
  unint64_t v4 = *(void *)(v279 + 24);
  int64_t v6 = v4 >> 1;
  unint64_t v7 = v5 + 1;
  if (v4 >> 1 <= v5)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1);
    uint64_t v3 = v279;
    unint64_t v4 = *(void *)(v279 + 24);
    int64_t v6 = v4 >> 1;
  }

  *(void *)(v3 + 16) = v7;
  *(_DWORD *)(v3 + 4 * v5 + 32) = 46;
  int64_t v8 = v5 + 2;
  if (v6 < v8)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v8, 1);
    uint64_t v3 = v279;
  }

  *(void *)(v3 + 16) = v8;
  *(_DWORD *)(v3 + 4 * v7 + 32) = 1088;
  unint64_t v10 = *(void *)(v3 + 16);
  unint64_t v9 = *(void *)(v3 + 24);
  if (v10 >= v9 >> 1) {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
  }
  *(void *)(v279 + 16) = v10 + 1;
  *(_DWORD *)(v279 + 4 * v10 + 32) = 1092;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
  lazy protocol witness table accessor for type [Unicode.Scalar] and conformance [A]();
  String.UnicodeScalarView.append<A>(contentsOf:)();
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v11 = String.count.getter();
  swift_bridgeObjectRelease();
  int64_t v12 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v13 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v14 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v14 = 11LL;
  }
  unint64_t v15 = v14 | (v13 << 16);
  unint64_t v16 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
  if (__OFSUB__(0LL, v16))
  {
    __break(1u);
    goto LABEL_175;
  }

  if (4 * v13 < String.UnicodeScalarView.index(_:offsetBy:)(v15, -(uint64_t)v16, a1, a2) >> 14)
  {
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
    goto LABEL_179;
  }

  swift_bridgeObjectRetain();
  String.UnicodeScalarView.subscript.getter();
  lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  String.UnicodeScalarView.append<A>(contentsOf:)();
  char v17 = specialized Sequence<>.elementsEqual<A>(_:)(0LL, 0xE000000000000000LL, 0LL, 0xE000000000000000LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
    unint64_t v18 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized BidirectionalCollection.dropLast(_:)(v18, a1, a2);
    unint64_t v21 = v20;
    uint64_t v23 = v22;
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    if (v19 >> 14 != v21 >> 14)
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        _StringGuts.validateScalarIndex(_:in:)(v21, v19, v21, v23, v25);
        if ((v25 & 0x1000000000000000LL) != 0)
        {
          int v26 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v25 & 0x2000000000000000LL) == 0 && (v23 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          int v26 = _decodeScalar(_:startingAt:)();
        }

        int v27 = v26;
        if (v19 >> 14 == v21 >> 14) {
          goto LABEL_173;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v29 = v27 == 46;
      goto LABEL_104;
    }

    goto LABEL_173;
  }

unint64_t lazy protocol witness table accessor for type [Unicode.Scalar] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Unicode.Scalar]);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618470], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A]);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618BB0], MEMORY[0x189618BA0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618BA8], MEMORY[0x189618BA0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618BB8], MEMORY[0x189618BA0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView);
  }

  return result;
}

uint64_t PredicateExpressions.Equal.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.Equal.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 60));
}

void PredicateExpressions.Equal.init(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_18331F998(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 60),  v2,  v1);
}

void type metadata accessor for PredicateExpressions.Equal()
{
}

uint64_t PredicateExpressions.Equal.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v21 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = *a1;
  uint64_t v22 = v15;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v6 + 16))(&v22, v7, v6, v12);
  if (!v3)
  {
    uint64_t v16 = v9;
    uint64_t v22 = v15;
    char v17 = v21;
    (*(void (**)(uint64_t *, void))(a2[5] + 16LL))(&v22, a2[3]);
    char v2 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v19 = *(void (**)(char *, uint64_t))(v16 + 8);
    v19(v17, AssociatedTypeWitness);
    v19(v14, AssociatedTypeWitness);
  }

  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Equal<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Equal.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

void static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_18331FBE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 60),  v2,  v1);
}

uint64_t PredicateExpressions.Equal.description.getter()
{
  v0._uint64_t countAndFlagsBits = 0x686C286C61757145LL;
  v0._id object = (void *)0xEB00000000203A73LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v1._id object = (void *)0xE700000000000000LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.Equal<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.Equal<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  v13[5] = a5;
  v13[6] = a4;
  v13[9] = a3;
  v13[4] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v13[7] = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  v13[8] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v13[10] = v8;
  v13[11] = v8;
  v13[12] = v9;
  v13[13] = v10;
  v13[14] = v11;
  v13[15] = v12;
  type metadata accessor for PredicateExpressions.Equal();
}

uint64_t sub_18331FEB4(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  *(void *)(v4 - 200) = v6;
  *(void *)(v4 - 192) = a1;
  *(void *)(v4 - 72) = v2;
  uint64_t v10 = *(void *)(v4 - 152);
  uint64_t v11 = v3;
  *(void *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v12 = *(void *)(v4 - 144);
  uint64_t v13 = *(void *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(*(void *)(v4 - 184), v12, v13);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 192);
  uint64_t v15 = *(void *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 176) + 32LL))(v15 + *(int *)(v14 + 60), v10, v11);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  uint64_t v16 = *(void *)(v4 - 200);
  (*(void (**)(void, uint64_t, uint64_t))(v16 + 16))(*(void *)(v4 - 168), v15, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Equal<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Equal<A, B>( void *a1)
{
  return PredicateExpressions.Equal<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Equal(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_183320218 + 4 * byte_183817178[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Equal( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

void Substring._enumerateComponents(separatedBy:options:withBlock:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(uint64_t), uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v99 = a5;
  uint64_t v95 = a7;
  uint64_t v96 = a6;
  unint64_t v93 = a3;
  uint64_t v94 = a4;
  uint64_t v102 = a10;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
  MEMORY[0x1895F8858](v14);
  int v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  unint64_t v19 = (char *)&v74 - v18;
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match);
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1895F8858](v81);
  int v78 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  unint64_t v77 = (char *)&v74 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1895F8858](v23);
  uint64_t v82 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v91 = v25;
  uint64_t v92 = v26;
  MEMORY[0x1895F8858](v25);
  unint64_t v90 = (char *)&v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v101 = a9;
  unint64_t v28 = a9 >> 14;
  unint64_t v29 = a8 >> 14;
  if (a8 >> 14 < a9 >> 14)
  {
    uint64_t v75 = v19;
    unint64_t v76 = v16;
    unint64_t v89 = a1;
    unint64_t v79 = a2 ^ a1;
    unint64_t v30 = a8;
    uint64_t v86 = a11;
    unint64_t v87 = a8;
    unint64_t v85 = a2;
    unint64_t v88 = a9 >> 14;
    while (1)
    {
      if (v28 < v29) {
        goto LABEL_39;
      }
      swift_bridgeObjectRetain();
      unint64_t v31 = Substring.subscript.getter();
      unint64_t v33 = v32;
      uint64_t v35 = v34;
      uint64_t v107 = v36;
      swift_bridgeObjectRelease();
      unint64_t v37 = v99;
      unint64_t v100 = v30;
      if ((v99 & 0x400) != 0)
      {
        uint64_t v84 = v35;
        unint64_t v83 = v31;
        unint64_t v97 = v29;
        unint64_t v43 = v89;
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        uint64_t v44 = static RegexPatternCache.cache;
        swift_retain();
        uint64_t v45 = MEMORY[0x186E1B610](v43, a2, v93, v94);
        char v47 = v46;
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v44 + 24));
        unint64_t v48 = v82;
        uint64_t v49 = v98;
        closure #1 in RegexPatternCache.regex(for:caseInsensitive:)( (uint64_t *)(v44 + 16),  v45,  (uint64_t)v47,  v37 & 1,  v45,  v47,  v37 & 1,  v82);
        uint64_t v98 = v49;
        unint64_t v50 = (os_unfair_lock_s *)(v44 + 24);
        if (v49)
        {
          os_unfair_lock_unlock(v50);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();
          return;
        }

        os_unfair_lock_unlock(v50);
        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v52 = v91;
        uint64_t v51 = v92;
        int v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48))(v48, 1LL, v91);
        uint64_t v54 = v84;
        if (v53 == 1)
        {
          outlined destroy of Any?( (uint64_t)v48,  &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
          goto LABEL_35;
        }

        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v90, v48, v52);
        if ((v99 & 8) != 0)
        {
          unint64_t v103 = v83;
          unint64_t v104 = v33;
          uint64_t v105 = v54;
          uint64_t v106 = v107;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
          uint64_t v66 = (uint64_t)v75;
          BidirectionalCollection<>.prefixMatch<A>(of:)();
          uint64_t v56 = v80;
          uint64_t v57 = v81;
          int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v66, 1LL, v81);
          a2 = v85;
          if (v67 == 1)
          {
            (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v52);
            uint64_t v73 = v66;
            goto LABEL_34;
          }

          unsigned int v60 = v77;
          (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v77, v66, v57);
        }

        else
        {
          unint64_t v103 = v83;
          unint64_t v104 = v33;
          uint64_t v105 = v54;
          uint64_t v106 = v107;
          type metadata accessor for AnyRegexOutput();
          lazy protocol witness table accessor for type Substring and conformance Substring();
          lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
          uint64_t v55 = (uint64_t)v76;
          BidirectionalCollection<>.firstMatch<A, B>(of:)();
          uint64_t v56 = v80;
          uint64_t v57 = v81;
          int v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v55, 1LL, v81);
          a2 = v85;
          if (v58 == 1)
          {
            (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v52);
            uint64_t v73 = v55;
LABEL_34:
            outlined destroy of Any?(v73, &demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
LABEL_35:
            unint64_t v29 = v97;
LABEL_36:
            swift_bridgeObjectRelease();
LABEL_37:
            if (v88 >= v29) {
              goto LABEL_28;
            }
            goto LABEL_38;
          }

          unint64_t v59 = v78;
          (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v78, v55, v57);
          unsigned int v60 = v59;
        }

        uint64_t v68 = v56;
        unint64_t v38 = Regex.Match.range.getter();
        unint64_t v40 = v69;
        (*(void (**)(char *, uint64_t))(v68 + 8))(v60, v57);
        (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v91);
        swift_bridgeObjectRelease();
        unint64_t v29 = v97;
      }

      else
      {
        if ((v31 ^ v33) < 0x4000 || v79 < 0x4000) {
          goto LABEL_36;
        }
        if ((v99 & 2) != 0)
        {
          unint64_t v61 = v35;
          unint64_t v62 = v107;
          swift_bridgeObjectRetain();
          unint64_t v97 = v29;
          unint64_t v63 = v94;
          swift_bridgeObjectRetain();
          unint64_t v38 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v89,  v85,  v93,  v63,  BYTE1(v37) & 1,  (v37 & 0x80) != 0,  v37 & 1,  (v37 >> 3) & 1,  (v37 & 4) != 0,  v31,  v33,  v61,  v62);
          unint64_t v40 = v64;
          char v42 = v65;
          swift_bridgeObjectRelease_n();
          unint64_t v29 = v97;
          a2 = v85;
        }

        else
        {
          unint64_t v38 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v89,  a2,  v93,  v94,  (v99 >> 8) & 1,  (v99 >> 7) & 1,  v99 & 1,  (v99 >> 3) & 1,  (v99 & 4) != 0,  v31,  v33,  v35,  v107);
          unint64_t v40 = v39;
          char v42 = v41;
        }

        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0) {
          goto LABEL_37;
        }
      }

      unint64_t v70 = v40 >> 14;
      if (v38 >> 14 == v40 >> 14) {
        goto LABEL_37;
      }
      if (v38 >> 14 < v29) {
        goto LABEL_40;
      }
      uint64_t v71 = Substring.subscript.getter();
      v96(v71);
      swift_bridgeObjectRelease();
      unint64_t v30 = v40;
      unint64_t v29 = v40 >> 14;
      unint64_t v28 = v88;
      if (v70 >= v88) {
        goto LABEL_27;
      }
    }
  }

  unint64_t v70 = a8 >> 14;
LABEL_27:
  if (v28 < v70)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
  }

  else
  {
LABEL_28:
    uint64_t v72 = Substring.subscript.getter();
    v96(v72);
    swift_bridgeObjectRelease();
  }

uint64_t UInt8._lowercased.getter(int a1)
{
  return ((0x3FFE000000000uLL >> ((a1 - 1) >> 1)) & 0x20) + a1;
}

uint64_t static UInt8.newline.getter()
{
  return 10LL;
}

uint64_t static UInt8.carriageReturn.getter()
{
  return 13LL;
}

uint64_t UInt8._numericValue.getter(char a1)
{
  else {
    return 0;
  }
}

uint64_t UInt8._uppercased.getter(int a1)
{
  return a1 - 32 * ((0x1FFF000000000000uLL >> ((a1 - 1) >> 1)) & 1);
}

Swift::String __swiftcall Character._transform(toHalfWidth:stripDiacritics:caseFolding:)( Swift::Bool toHalfWidth, Swift::Bool stripDiacritics, Swift::Bool caseFolding)
{
  unint64_t v5 = v4;
  unint64_t v6 = v3;
  BOOL v45 = caseFolding;
  uint64_t v50 = *MEMORY[0x1895F89C0];
  uint64_t v9 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v43 = v9;
  MEMORY[0x1895F8858](v9);
  unsigned int v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((v6 != 2573 || v5 != 0xE200000000000000LL) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if ((Character._isSingleScalar.getter() & 1) != 0)
    {
      unint64_t v12 = specialized Collection.first.getter(v6, v5);
      if ((v12 & 0x100000000LL) != 0)
      {
        __break(1u);
        goto LABEL_67;
      }

      if ((v12 & 0xFFFFFF80) == 0)
      {
        unint64_t v12 = specialized Collection.first.getter(v6, v5);
        if ((v12 & 0x100000000LL) == 0)
        {
          if ((v12 & 0xFFFFFF00) != 0) {
            __break(1u);
          }
          goto LABEL_9;
        }

unint64_t Character.isExtendCharacter.getter(unint64_t a1, unint64_t a2)
{
  if (a1 == 2573 && a2 == 0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0LL;
  }
  if ((Character._isSingleScalar.getter() & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000LL) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }

  if ((result & 0xFFFFFF80) != 0)
  {
LABEL_10:
    if ((a2 & 0x2000000000000000LL) != 0) {
      uint64_t v6 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (!v6) {
      return 1LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = 0LL;
    while (1)
    {
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        uint64_t v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a2 & 0x2000000000000000LL) == 0 && (a1 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        uint64_t v8 = _decodeScalar(_:startingAt:)();
      }

      if (BYTE2(v8) > 0xEu) {
        break;
      }
      uint64_t v10 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_1 + BYTE2(v8));
      v7 += v9;
      if (v7 >= v6)
      {
        uint64_t v5 = 1LL;
        goto LABEL_27;
      }
    }

    uint64_t v5 = 0LL;
LABEL_27:
    swift_bridgeObjectRelease();
    return v5;
  }

  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000LL) == 0)
  {
    if ((result & 0xFFFFFF00) != 0) {
      __break(1u);
    }
    return 0LL;
  }

uint64_t Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)( char a1, char a2, char a3, uint64_t a4)
{
  v19[1] = *MEMORY[0x1895F89C0];
  uint64_t v8 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  unsigned int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 1) != 0 && a4 >> 8 >= 0xFF && a4 <= 0xFFEE)
  {
    LODWORD(v19[0]) = a4;
    CFUniCharCompatibilityDecompose();
    a4 = LODWORD(v19[0]);
    if (LODWORD(v19[0]) >> 11 == 27) {
      __break(1u);
    }
    if (HIWORD(LODWORD(v19[0])) > 0x10u)
    {
      __break(1u);
      goto LABEL_17;
    }
  }

  if ((a2 & 1) == 0)
  {
LABEL_10:
    if ((a3 & 1) != 0)
    {
      Unicode.Scalar.properties.getter();
      uint64_t v13 = Unicode.Scalar.Properties._caseFolded.getter();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return v13;
    }

    if (a4 <= 0x7F)
    {
      unsigned int v14 = a4 + 1;
LABEL_14:
      v19[0] = (v14 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v14) >> 3))));
      return MEMORY[0x186E1B6AC](v19);
    }

uint64_t Substring._unlocalizedCompare(other:options:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9)
{
  if (!a5)
  {
    if (a8 == a3)
    {
      BOOL v18 = a9 == a4 && a6 >> 16 == a1 >> 16;
      if (v18 && a7 >> 16 == a2 >> 16) {
        return 0LL;
      }
    }

    uint64_t v17 = 1LL;
    if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0) {
      return -1LL;
    }
    if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0) {
      return 0LL;
    }
    return v17;
  }

  if ((a5 & 2) != 0)
  {
    unsigned int v22 = (a5 >> 9) & 1;
    uint64_t v25 = (a5 >> 6) & 1;
    int v24 = a5 & 1;
    uint64_t v23 = (a5 >> 8) & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( a1,  a2,  a3,  a4,  v23,  (a5 >> 7) & 1,  v24,  v25,  v22,  a6,  a7,  a8,  a9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((a5 & 0x200) == 0) {
      return v17;
    }
  }

  else
  {
    uint64_t v17 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( a1,  a2,  a3,  a4,  (a5 >> 8) & 1,  (a5 >> 7) & 1,  a5 & 1,  (a5 >> 6) & 1,  (a5 & 0x200) != 0,  a6,  a7,  a8,  a9);
    if ((a5 & 0x200) == 0) {
      return v17;
    }
  }

  if (!v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = Substring.UnicodeScalarView._compare(_:)(a1, a2, a3, a4, a6, a7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }

  return v17;
}

uint64_t Substring.UnicodeScalarView._compare(_:)( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v7 = a6 >> 14;
  unint64_t v8 = a5 >> 14;
  if (a5 >> 14 >= a6 >> 14 || (unint64_t v12 = a2 >> 14, a2 >> 14 <= a1 >> 14))
  {
LABEL_6:
    if (v8 == v7)
    {
      if ((a1 ^ a2) >> 14) {
        return -1LL;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  else
  {
    while (1)
    {
      unsigned int v9 = Substring.UnicodeScalarView.subscript.getter();
      unsigned int v10 = Substring.UnicodeScalarView.subscript.getter();
      if (v9 != v10) {
        break;
      }
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v8 = a5 >> 14;
      if (a5 >> 14 >= v7 || v12 <= a1 >> 14) {
        goto LABEL_6;
      }
    }

    if (v9 >= v10) {
      return v10 < v9;
    }
    else {
      return -1LL;
    }
  }

uint64_t _allASCII(_:)(char *a1, uint64_t a2)
{
  if (!a2) {
    return 1LL;
  }
  if ((a1 & 7) != 0)
  {
    if (a2 >= 1)
    {
      if (*a1 < 0) {
        return 0LL;
      }
      uint64_t v2 = 1LL;
      uint64_t v3 = 9LL;
      if (a2 >= 2 && (((_BYTE)a1 + 1) & 7) != 0)
      {
        if (a1[1] < 0) {
          return 0LL;
        }
        uint64_t v2 = 2LL;
        uint64_t v3 = 10LL;
        if (a2 >= 3 && (((_BYTE)a1 + 2) & 7) != 0)
        {
          if (a1[2] < 0) {
            return 0LL;
          }
          uint64_t v2 = 3LL;
          uint64_t v3 = 11LL;
          if (a2 >= 4 && (((_BYTE)a1 + 3) & 7) != 0)
          {
            if (a1[3] < 0) {
              return 0LL;
            }
            uint64_t v2 = 4LL;
            uint64_t v3 = 12LL;
            if (a2 >= 5 && (((_BYTE)a1 + 4) & 7) != 0)
            {
              if (a1[4] < 0) {
                return 0LL;
              }
              uint64_t v2 = 5LL;
              uint64_t v3 = 13LL;
              if (a2 >= 6 && (((_BYTE)a1 + 5) & 7) != 0)
              {
                if (a1[5] < 0) {
                  return 0LL;
                }
                uint64_t v2 = 6LL;
                uint64_t v3 = 14LL;
                if (a2 >= 7 && (((_BYTE)a1 + 6) & 7) != 0)
                {
                  if (a1[6] < 0) {
                    return 0LL;
                  }
                  uint64_t v2 = 7LL;
                  uint64_t v3 = 15LL;
                  if (a2 >= 8 && (((_BYTE)a1 - 1) & 7) != 0)
                  {
                    if (a1[7] < 0) {
                      return 0LL;
                    }
                    uint64_t v2 = 8LL;
                    uint64_t v3 = 16LL;
                  }
                }
              }
            }
          }
        }
      }

      if (v3 <= a2) {
        goto LABEL_40;
      }
      if (v2 < a2)
      {
LABEL_30:
        if (a1[v2] < 0) {
          return 0LL;
        }
        goto LABEL_35;
      }
    }

    return 1LL;
  }

  if (a2 > 7)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 8LL;
LABEL_40:
    while ((*(void *)&a1[v2] & 0x8080808080808080LL) == 0)
    {
      uint64_t v8 = v3 + 8;
      uint64_t v2 = v3;
      uint64_t v3 = v8;
      if (v8 > a2)
      {
        uint64_t v2 = v8 - 8;
        if (v8 - 8 < a2) {
          goto LABEL_30;
        }
        return 1LL;
      }
    }

    return 0LL;
  }

  if (a2 <= 0) {
    return 1LL;
  }
  uint64_t v2 = 0LL;
  if (*a1 < 0) {
    return 0LL;
  }
LABEL_35:
  uint64_t v4 = v2 + 1;
  do
  {
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      break;
    }
    int v6 = a1[v4++];
  }

  while ((v6 & 0x80000000) == 0);
  return v5;
}

unint64_t lazy protocol witness table accessor for type Character and conformance Character()
{
  unint64_t result = lazy protocol witness table cache variable for type Character and conformance Character;
  if (!lazy protocol witness table cache variable for type Character and conformance Character)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Character, MEMORY[0x189617AB0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Character and conformance Character);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for String(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Substring(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Substring and conformance Substring();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.Scalar and conformance Unicode.Scalar()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.Scalar and conformance Unicode.Scalar;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar and conformance Unicode.Scalar)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Unicode.Scalar, MEMORY[0x18961AE38]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar and conformance Unicode.Scalar);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for String.UnicodeScalarView( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String.UnicodeScalarView and conformance String.UnicodeScalarView();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.UnicodeScalarView and conformance String.UnicodeScalarView()
{
  unint64_t result = lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189617D58], MEMORY[0x189617D50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for String.UnicodeScalarView, MEMORY[0x189617D50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189617D60], MEMORY[0x189617D50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Substring.UnicodeScalarView( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.UTF8View(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View()
{
  unint64_t result = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189617EF8], MEMORY[0x189617EF0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for String.UTF8View, MEMORY[0x189617EF0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Substring.UTF8View( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Substring.UTF8View and conformance Substring.UTF8View();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring.UTF8View and conformance Substring.UTF8View()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring.UTF8View and conformance Substring.UTF8View;
  if (!lazy protocol witness table cache variable for type Substring.UTF8View and conformance Substring.UTF8View)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618C30], MEMORY[0x189618C28]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring.UTF8View and conformance Substring.UTF8View);
  }

  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:in:)( unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9 = (a5 & 0x1000000000000000LL) == 0 || (a4 & 0x800000000000000LL) != 0;
  unint64_t v10 = result & 0xC;
  uint64_t v11 = 4LL << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a4, a5);
    }
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }

    else if ((result & 1) != 0)
    {
      return result;
    }

    return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a4, a5) & 0xFFFFFFFFFFFFFFF3LL | 1;
  }

  unint64_t v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (uint64_t v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }

  return result;
}

unint64_t specialized Substring.UnicodeScalarView._rangeOfCharacter(anchored:backwards:matchingPredicate:)( unint64_t result, char a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v7 = a3 >> 14;
  unint64_t v8 = a4 >> 14;
  if (a3 >> 14 == a4 >> 14)
  {
    return 0LL;
  }

  else
  {
    char v14 = result;
    if ((a2 & 1) != 0)
    {
      unint64_t result = Substring.UnicodeScalarView.index(before:)();
      unint64_t v9 = result;
      if ((v14 & 1) != 0) {
        unint64_t v15 = result;
      }
      else {
        unint64_t v15 = a3;
      }
    }

    else
    {
      if ((result & 1) != 0)
      {
        unint64_t v15 = a3;
      }

      else
      {
        unint64_t result = Substring.UnicodeScalarView.index(before:)();
        unint64_t v15 = result;
      }

      unint64_t v9 = a3;
    }

    uint64_t v16 = (a5 >> 59) & 1;
    if ((a6 & 0x1000000000000000LL) == 0) {
      LOBYTE(v16) = 1;
    }
    uint64_t v17 = 4LL << v16;
    unint64_t v20 = v15;
    for (i = 4LL << v16; ; uint64_t v17 = i)
    {
      if ((v9 & 0xC) == v17 || (v9 & 1) == 0)
      {
        unint64_t result = v9;
        if ((v9 & 0xC) == v17) {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a5, a6);
        }
        if (result >> 14 < v7 || result >> 14 >= v8)
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }

        if ((result & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(result, a5, a6);
        }
      }

      else
      {
        if (v9 >> 14 < v7) {
          goto LABEL_39;
        }
        unint64_t result = v9;
        if (v9 >> 14 >= v8) {
          goto LABEL_39;
        }
      }

      if ((a6 & 0x1000000000000000LL) != 0)
      {
        UTF32Char v19 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a6 & 0x2000000000000000LL) == 0 && (a5 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        UTF32Char v19 = _decodeScalar(_:startingAt:)();
        unint64_t v15 = v20;
      }

      if (CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(a7 + 16), v19)) {
        break;
      }
      if ((v9 ^ v15) < 0x4000) {
        return 0LL;
      }
      unint64_t result = Substring.UnicodeScalarView.index(_:offsetBy:)();
      unint64_t v9 = result;
    }

    unint64_t result = Substring.UnicodeScalarView.index(after:)();
    if (result >> 14 >= v9 >> 14) {
      return v9;
    }
LABEL_40:
    __break(1u);
  }

  return result;
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (NSLocale)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 488))(ObjectType, v1);
}

id static Locale._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v2 = result;
    type metadata accessor for _NSSwiftLocale();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      unint64_t result = (id)swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _LocaleBridged();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v2;
      uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
      unint64_t result = v2;
    }

    *a2 = v5;
    a2[1] = v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id @objc static NSLocale._autoupdatingCurrent.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.autoupdatingCurrentNSLocale()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

id @objc static NSLocale._current.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  return (id)LocaleCache.currentNSLocale()();
}

id @objc static NSLocale._system.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)(static LocaleCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.systemNSLocale()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

uint64_t @objc static NSLocale._newLocaleWithIdentifier(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (one-time initialization token for cache != -1) {
    uint64_t v3 = swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1895F8858](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 31);
  partial apply for closure #1 in LocaleCache.fixedNSLocale(identifier:)(&v6);
  os_unfair_lock_unlock(v4 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  return v6;
}

id @objc static NSLocale._newLocaleAsIfCurrent(_:overrides:disableBundleMatching:)( uint64_t a1, uint64_t a2, void *a3, void *a4, char a5)
{
  if (a3)
  {
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v9 = v8;
  }

  else
  {
    id v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  id v10 = a4;
  id v11 = specialized static NSLocale._newLocaleAsIfCurrent(_:overrides:disableBundleMatching:)((uint64_t)v7, v9, a4, a5);

  swift_bridgeObjectRelease();
  return v11;
}

id @objc static NSLocale._currentLocaleWithBundleLocalizations(_:allowsMixedLocalizations:)( uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v6 = specialized static NSLocale._currentLocaleWithBundleLocalizations(_:allowsMixedLocalizations:)(v5, a4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t @objc static NSLocale._resetCurrent()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.reset()(v0);
  os_unfair_lock_unlock(v1);
  return swift_release_n();
}

id @objc static NSLocale._preferredLanguagesForCurrentUser(_:)(uint64_t a1, uint64_t a2, char a3)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.preferredLanguages(forCurrentUser:)(a3);
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._availableLocaleIdentifiers.getter()
{
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._isoLanguageCodes.getter(uint64_t a1, uint64_t a2)
{
  return @objc static NSLocale._isoLanguageCodes.getter( a1,  a2,  &one-time initialization token for _isoLanguageCodeStrings);
}

uint64_t static Locale.isoLanguageCodes.getter()
{
  return static Locale.isoLanguageCodes.getter(&one-time initialization token for _isoLanguageCodeStrings);
}

id @objc static NSLocale._isoCountryCodes.getter(uint64_t a1, uint64_t a2)
{
  return @objc static NSLocale._isoLanguageCodes.getter(a1, a2, &one-time initialization token for isoCountries);
}

id @objc static NSLocale._isoLanguageCodes.getter(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1LL) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

uint64_t static Locale.isoRegionCodes.getter()
{
  return static Locale.isoLanguageCodes.getter(&one-time initialization token for isoCountries);
}

uint64_t static Locale.isoLanguageCodes.getter(void *a1)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

id @objc static NSLocale._isoCurrencyCodes.getter()
{
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._commonISOCurrencyCodes.getter()
{
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._preferredLanguages.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.preferredLanguages(forCurrentUser:)(0);
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._components(fromLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  return (id)_NativeDictionary.bridged()();
}

id @objc static NSLocale._localeIdentifier(fromComponents:)(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static Locale.identifier(fromAnyComponents:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v4;
}

id @objc static NSLocale._canonicalLocaleIdentifier(from:)(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = (const __CFAllocator *)*MEMORY[0x189604DD0];
  uint64_t v4 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v3, v4);
  swift_unknownObjectRelease();
  if (CanonicalLocaleIdentifierFromString)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  id v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v6;
}

id @objc static NSLocale._canonicalLanguageIdentifier(from:)(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = (const __CFAllocator *)*MEMORY[0x189604DD0];
  uint64_t v4 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v3, v4);
  swift_unknownObjectRelease();
  if (CanonicalLanguageIdentifierFromString)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  id v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v6;
}

id @objc static NSLocale._localeIdentifier(fromWindowsLocaleCode:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (v3)
  {
    uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

uint64_t @objc static NSLocale._windowsLocaleCode(fromLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = specialized static NSLocale._windowsLocaleCode(fromLocaleIdentifier:)();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t static Locale.characterDirection(forLanguage:)(uint64_t a1, uint64_t a2)
{
  return static Locale.characterDirection(forLanguage:)(a1, a2, Locale.Language.characterDirection.getter);
}

uint64_t @objc static NSLocale._characterDirection(forLanguage:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc static NSLocale._characterDirection(forLanguage:)(a1, a2, a3, Locale.Language.characterDirection.getter);
}

uint64_t static Locale.lineDirection(forLanguage:)(uint64_t a1, uint64_t a2)
{
  return static Locale.characterDirection(forLanguage:)(a1, a2, Locale.Language.lineLayoutDirection.getter);
}

uint64_t static Locale.characterDirection(forLanguage:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v37 = a3;
  uint64_t v54 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  LODWORD(v42) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v4 = swift_release();
  if (Language <= 0)
  {
    uint64_t v5 = 0LL;
    uint64_t v39 = 0LL;
  }

  else
  {
    v41[Language] = 0;
    uint64_t v4 = MEMORY[0x186E1B634](v41);
    uint64_t v5 = v4;
    uint64_t v39 = v6;
  }

  MEMORY[0x1895F8858](v4);
  LODWORD(v42) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  if ((int)v42 <= 0 && Script > 0)
  {
    v30[Script] = 0;
    uint64_t v8 = MEMORY[0x186E1B634](v30, 0LL);
  }

  uint64_t v38 = v9;
  uint64_t v40 = v8;
  MEMORY[0x1895F8858](v8);
  LODWORD(v42) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  if ((int)v42 <= 0 && Country > 0)
  {
    v30[Country] = 0;
    uint64_t v11 = MEMORY[0x186E1B634](v30);
    uint64_t v12 = v13;
  }

  swift_bridgeObjectRelease();
  uint64_t v14 = v40;
  if (v39)
  {
    Swift::String v15 = String.lowercased()();
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    id object = v15._object;
    uint64_t v18 = v38;
    if (v38) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v40 = 0LL;
    int v35 = 0LL;
    uint64_t v36 = 0LL;
    if (v12) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t v23 = v12;
    uint64_t v24 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    goto LABEL_17;
  }

  uint64_t v5 = 0LL;
  uint64_t countAndFlagsBits = 0LL;
  id object = 0LL;
  uint64_t v18 = v38;
  if (!v38) {
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v42 = v14;
  uint64_t v43 = v18;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v19 = String._capitalized()();
  int v35 = v19._object;
  uint64_t v36 = v19._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_16;
  }
LABEL_13:
  Swift::String v22 = String.uppercased()();
  uint64_t v21 = v22._object;
  uint64_t v20 = v22._countAndFlagsBits;
  uint64_t v23 = v12;
  uint64_t v24 = v11;
LABEL_17:
  uint64_t v31 = v23;
  uint64_t v32 = v5;
  uint64_t v33 = v20;
  int v34 = v21;
  uint64_t v42 = v5;
  uint64_t v25 = v39;
  uint64_t v26 = v40;
  uint64_t v43 = v39;
  uint64_t v44 = countAndFlagsBits;
  BOOL v45 = object;
  uint64_t v46 = v40;
  uint64_t v27 = v38;
  uint64_t v47 = v38;
  uint64_t v48 = v36;
  unint64_t v49 = v35;
  uint64_t v50 = v24;
  uint64_t v51 = v23;
  uint64_t v52 = v20;
  int v53 = v21;
  uint64_t v28 = v37();
  outlined consume of Locale.LanguageCode?(v32, v25);
  outlined consume of Locale.LanguageCode?(v26, v27);
  outlined consume of Locale.LanguageCode?(v24, v31);
  return v28;
}

uint64_t @objc static NSLocale._lineDirection(forLanguage:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc static NSLocale._characterDirection(forLanguage:)(a1, a2, a3, Locale.Language.lineLayoutDirection.getter);
}

uint64_t @objc static NSLocale._characterDirection(forLanguage:)( uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v7 = static Locale.characterDirection(forLanguage:)((uint64_t)v5, v6, a4);
  swift_bridgeObjectRelease();
  return v7;
}

id @objc static NSLocale._numberingSystem(forLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSLocale._numberingSystem(forLocaleIdentifier:)((uint64_t)v3, v4);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

id @objc static NSLocale._validNumberingSystems(forLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSLocale._validNumberingSystems(forLocaleIdentifier:)((uint64_t)v3, v4);
  swift_bridgeObjectRelease();
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._localeIdentifierByReplacingLanguageCodeAndScriptCode(_:desiredComponents:)( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v7 = v6;
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)( (uint64_t)v5,  v7,  (uint64_t)v8,  v9);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    uint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  return v12;
}

id @objc static NSLocale._localeIdentifierByAddingLikelySubtags(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t)v3, v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7) {
    swift_bridgeObjectRelease();
  }
  id v8 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v8;
}

id @objc NSLocale._localeWithNewCalendarIdentifier(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    id v3 = 0LL;
  }
  else {
    id v3 = a1;
  }
  return v3;
}

uint64_t @objc NSLocale._doesNotRequireSpecialCaseHandling()(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  LOBYTE(v2) = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t _NSSwiftLocale.classForCoder.getter()
{
  __int128 v10 = *(_OWORD *)(v0 + OBJC_IVAR____NSSwiftLocale_locale);
  uint64_t v1 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  id v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v9[0];
  uint64_t v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  v9[0] = v4;
  v9[1] = v5;
  char v6 = specialized static Locale.== infix(_:_:)((uint64_t)&v10, (uint64_t)v9);
  swift_unknownObjectRelease();
  swift_release();
  if ((v6 & 1) != 0) {
    uint64_t v7 = (unint64_t *)&lazy cache variable for type metadata for NSAutoLocale;
  }
  else {
    uint64_t v7 = &lazy cache variable for type metadata for NSLocale;
  }
  return type metadata accessor for NSMorphologyPronoun(0LL, v7);
}

id _NSSwiftLocale.init(localeIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  v2[OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling] = 2;
  uint64_t v6 = one-time initialization token for cache;
  uint64_t v7 = v2;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache + 16;
  uint64_t v9 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in LocaleCache.fixed(_:)(v8, a1, a2, &v14);
  os_unfair_lock_unlock(v9);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_OWORD *)&v7[OBJC_IVAR____NSSwiftLocale_locale] = v14;
  LOBYTE(v8) = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
  swift_bridgeObjectRelease();
  v2[v5] = v8 & 1;

  uint64_t v10 = String._bridgeToObjectiveCImpl()();
  v13.receiver = v7;
  v13.super_class = (Class)type metadata accessor for _NSSwiftLocale();
  id v11 = objc_msgSendSuper2(&v13, sel_initWithLocaleIdentifier_, v10);
  swift_unknownObjectRelease();
  return v11;
}

uint64_t _NSSwiftLocale.init(coder:)(void *a1)
{
  uint64_t v3 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  *((_BYTE *)v1 + OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling) = 2;
  uint64_t v4 = v1;
  if (!objc_msgSend(a1, sel_allowsKeyedCoding))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 40) = v8;
    *(void *)(inited + 48) = 0xD000000000000026LL;
    *(void *)(inited + 56) = 0x80000001839CC750LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v50);
    uint64_t v10 = *((void *)&v50 + 1);
    uint64_t v9 = v50;
    swift_retain();
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    if ((v12 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      v1[(v11 >> 6) + 8] |= 1LL << v11;
      objc_super v13 = (uint64_t *)(v1[6] + 16 * v11);
      *objc_super v13 = v9;
      v13[1] = v10;
      outlined init with take of Any(v51, (_OWORD *)(v1[7] + 32 * v11));
      uint64_t v14 = v1[2];
      BOOL v15 = __OFADD__(v14, 1LL);
      uint64_t v16 = v14 + 1;
      if (!v15)
      {
        v1[2] = v16;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v17 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v18 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v1 = objc_msgSend(v17, sel_initWithDomain_code_userInfo_, v18, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v19 = objc_msgSend(v1, sel_domain);
        id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        uint64_t v22 = v21;

        if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v22 == v23) {
          goto LABEL_20;
        }
        uint64_t v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) != 0)
        {
LABEL_22:
          objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
          swift_unknownObjectRelease();

          type metadata accessor for _NSSwiftLocale();
          swift_deallocPartialClassInstance();
          return 0LL;
        }

        __break(1u);
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v5 = (uint64_t)v49;
  id v6 = objc_msgSend(a1, sel_decodeObjectForKey_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    goto LABEL_11;
  }

Swift::Void __swiftcall _NSSwiftLocale.encode(with:)(NSCoder with)
{
  if (-[objc_class allowsKeyedCoding](with.super.isa, sel_allowsKeyedCoding))
  {
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 64);
    swift_unknownObjectRetain();
    v5(ObjectType, v3);
    swift_unknownObjectRelease();
    uint64_t v6 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = 0xD000000000000026LL;
  *(void *)(inited + 56) = 0x80000001839D0F70LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)v27);
  uint64_t v10 = v27[0];
  uint64_t v11 = v27[1];
  swift_retain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v13 & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  v9[(v12 >> 6) + 8] |= 1LL << v12;
  uint64_t v14 = (uint64_t *)(v9[6] + 16 * v12);
  *uint64_t v14 = v10;
  v14[1] = v11;
  outlined init with take of Any(&v28, (_OWORD *)(v9[7] + 32 * v12));
  uint64_t v15 = v9[2];
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  void v9[2] = v17;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v18 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v19 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v21 = objc_msgSend(v20, sel_domain);
  id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
LABEL_9:
    -[objc_class failWithError:](with.super.isa, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
    swift_unknownObjectRelease();
    return;
  }

  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
}

void _NSSwiftLocale.object(forKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v79)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  void **v82;
  id v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t *__return_ptr, uint64_t, uint64_t);
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149[4];
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AC8]);
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_15:
    id v21 = objc_msgSend(v2, sel_localeIdentifier);
    goto LABEL_16;
  }

  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AD0]);
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }

  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
LABEL_19:
    id v21 = objc_msgSend(v2, sel_languageCode);
    goto LABEL_16;
  }

  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A98]);
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
LABEL_21:
    id v28 = objc_msgSend(v2, sel_countryCode);
    goto LABEL_22;
  }

  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0) {
    goto LABEL_21;
  }
  id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603B08]);
  uint64_t v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v31 == v32)
  {
    swift_bridgeObjectRelease_n();
LABEL_28:
    id v28 = objc_msgSend(v2, sel_scriptCode);
    goto LABEL_22;
  }

  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0) {
    goto LABEL_28;
  }
  id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603B30]);
  uint64_t v36 = v35;
  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v36 == v37)
  {
    swift_bridgeObjectRelease_n();
LABEL_33:
    id v28 = objc_msgSend(v2, sel_variantCode);
    goto LABEL_22;
  }

  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) != 0) {
    goto LABEL_33;
  }
  id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AB8]);
  uint64_t v41 = v40;
  if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v41 == v42)
  {
    swift_bridgeObjectRelease_n();
LABEL_38:
    id v44 = objc_msgSend(v2, sel_exemplarCharacterSet);
    objc_msgSend(v44, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0LL);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v148;
    *(_BYTE *)(v45 + 24) = 0;

    *(void *)(a2 + 24) = &type metadata for CharacterSet;
    *(void *)a2 = v45;
    return;
  }

  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v43 & 1) != 0) {
    goto LABEL_38;
  }
  id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A80]);
  uint64_t v48 = v47;
  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v48 == v49)
  {
    swift_bridgeObjectRelease_n();
LABEL_43:
    id v21 = objc_msgSend(v2, sel_calendarIdentifier);
    goto LABEL_16;
  }

  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) != 0) {
    goto LABEL_43;
  }
  id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A78]);
  uint64_t v53 = v52;
  if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v53 == v54)
  {
    swift_bridgeObjectRelease_n();
LABEL_48:
    uint64_t v56 = &v2[OBJC_IVAR____NSSwiftLocale_locale];
    uint64_t v57 = *(void *)&v2[OBJC_IVAR____NSSwiftLocale_locale];
    uint64_t v58 = *((void *)v56 + 1);
    *(void *)(a2 + 24) = &type metadata for Calendar;
    uint64_t ObjectType = swift_getObjectType();
    unsigned int v60 = *(void (**)(uint64_t, uint64_t))(v58 + 192);
    swift_unknownObjectRetain();
    v60(ObjectType, v58);
    v149[0] = v57;
    v149[1] = v58;
    Calendar.locale.setter(v149);
    return;
  }

  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v55 & 1) != 0) {
    goto LABEL_48;
  }
  id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A88]);
  uint64_t v63 = v62;
  if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v63 == v64)
  {
    swift_bridgeObjectRelease_n();
LABEL_53:
    id v28 = objc_msgSend(v2, sel_collationIdentifier);
    goto LABEL_22;
  }

  char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v65 & 1) != 0) {
    goto LABEL_53;
  }
  id v66 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603B28]);
  uint64_t v68 = v67;
  if (v66 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v68 == v69)
  {
    swift_bridgeObjectRelease_n();
LABEL_58:
    unsigned __int8 v71 = objc_msgSend(v2, sel_usesMetricSystem);
    *(void *)(a2 + 24) = MEMORY[0x1896184C8];
    *(_BYTE *)a2 = v71;
    return;
  }

  char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v70 & 1) != 0) {
    goto LABEL_58;
  }
  id v72 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AD8]);
  uint64_t v74 = v73;
  if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
LABEL_63:
    uint64_t v77 = *(void *)&v2[OBJC_IVAR____NSSwiftLocale_locale + 8];
    uint64_t v78 = swift_getObjectType();
    unint64_t v79 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v77 + 296);
    swift_unknownObjectRetain();
    v79(v149, v78, v77);
    swift_unknownObjectRelease();
    uint64_t v80 = v149[2];
    uint64_t v81 = v149[3];
    if (one-time initialization token for us != -1) {
      swift_once();
    }
    if (xmmword_18C5C6138 == __PAIR128__(v81, v80) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = (void **)MEMORY[0x189603AF0];
    }

    else
    {
      if (one-time initialization token for uk != -1) {
        swift_once();
      }
      if (xmmword_18C5D4120 == __PAIR128__(v81, v80) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v82 = (void **)MEMORY[0x189603AE8];
      }

      else
      {
        if (one-time initialization token for metric != -1) {
          swift_once();
        }
        if (xmmword_18C5C5CF0 != __PAIR128__(v81, v80)) {
          _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v82 = (void **)MEMORY[0x189603AE0];
      }
    }

    goto LABEL_68;
  }

  char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) != 0) {
    goto LABEL_63;
  }
  unint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603B10]);
  unint64_t v87 = v86;
  if (v85 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v87 == v88)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_78;
  }

  unint64_t v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v89 & 1) == 0)
  {
    unint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AB0]);
    uint64_t v95 = v94;
    if (v93 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v95 == v96)
    {
      swift_bridgeObjectRelease_n();
LABEL_90:
      id v21 = objc_msgSend(v2, sel_decimalSeparator);
      goto LABEL_16;
    }

    unint64_t v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v97 & 1) != 0) {
      goto LABEL_90;
    }
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AC0]);
    unint64_t v100 = v99;
    if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v100 == v101)
    {
      swift_bridgeObjectRelease_n();
LABEL_95:
      id v21 = objc_msgSend(v2, sel_groupingSeparator);
      goto LABEL_16;
    }

    uint64_t v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v102 & 1) != 0) {
      goto LABEL_95;
    }
    unint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AA8]);
    uint64_t v105 = v104;
    if (v103 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v105 == v106)
    {
      swift_bridgeObjectRelease_n();
LABEL_100:
      id v21 = objc_msgSend(v2, sel_currencySymbol);
      goto LABEL_16;
    }

    uint64_t v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v107 & 1) != 0) {
      goto LABEL_100;
    }
    unint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AA0]);
    uint64_t v110 = v109;
    if (v108 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v110 == v111)
    {
      swift_bridgeObjectRelease_n();
LABEL_105:
      id v28 = objc_msgSend(v2, sel_currencyCode);
LABEL_22:
      id v22 = v28;
      if (!v22)
      {
LABEL_23:
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        return;
      }

id _NSSwiftLocale.displayName(forKey:value:)(void *a1, uint64_t a2)
{
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AC8]);
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AD0]);
      uint64_t v12 = v11;
      if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v12 == v13)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A98]);
          uint64_t v18 = v17;
          if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v18 == v19)
          {
            swift_bridgeObjectRelease_n();
LABEL_22:
            uint64_t v28 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForCountryCode_, v28);
            goto LABEL_19;
          }

          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v27 & 1) != 0) {
            goto LABEL_22;
          }
          id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603B08]);
          uint64_t v31 = v30;
          if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v31 == v32)
          {
            swift_bridgeObjectRelease_n();
LABEL_27:
            uint64_t v34 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForScriptCode_, v34);
            goto LABEL_19;
          }

          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0) {
            goto LABEL_27;
          }
          id v35 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603B30]);
          uint64_t v37 = v36;
          if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v37 == v38)
          {
            swift_bridgeObjectRelease_n();
LABEL_32:
            uint64_t v40 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForVariantCode_, v40);
            goto LABEL_19;
          }

          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v39 & 1) != 0) {
            goto LABEL_32;
          }
          id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AB8]);
          uint64_t v43 = v42;
          if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v43 == v44)
          {
LABEL_35:
            swift_bridgeObjectRelease_n();
LABEL_37:
            swift_bridgeObjectRelease();
            return 0LL;
          }

          char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v45 & 1) != 0) {
            goto LABEL_37;
          }
          id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A80]);
          uint64_t v49 = v48;
          if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v49 == v50) {
            goto LABEL_45;
          }
          char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v51 & 1) != 0)
          {
LABEL_46:
            uint64_t v56 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForCalendarIdentifier_, v56);
            goto LABEL_19;
          }

          id v52 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A78]);
          uint64_t v54 = v53;
          if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v54 == v55)
          {
LABEL_45:
            swift_bridgeObjectRelease_n();
            goto LABEL_46;
          }

          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v57 & 1) != 0) {
            goto LABEL_46;
          }
          id v58 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A88]);
          uint64_t v60 = v59;
          if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v60 == v61)
          {
            swift_bridgeObjectRelease_n();
LABEL_52:
            uint64_t v63 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForCollationIdentifier_, v63);
            goto LABEL_19;
          }

          char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v62 & 1) != 0) {
            goto LABEL_52;
          }
          id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603B28]);
          uint64_t v66 = v65;
          if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v66 == v67) {
            goto LABEL_35;
          }
          char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v68 & 1) != 0) {
            goto LABEL_37;
          }
          id v69 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AD8]);
          uint64_t v71 = v70;
          if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v71 == v72) {
            goto LABEL_35;
          }
          char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v73 & 1) != 0) {
            goto LABEL_37;
          }
          id v74 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AB0]);
          uint64_t v76 = v75;
          if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v76 == v77) {
            goto LABEL_35;
          }
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v78 & 1) != 0) {
            goto LABEL_37;
          }
          id v79 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AC0]);
          uint64_t v81 = v80;
          if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v81 == v82) {
            goto LABEL_35;
          }
          char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v83 & 1) != 0) {
            goto LABEL_37;
          }
          id v84 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AA8]);
          uint64_t v86 = v85;
          if (v84 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v86 == v87)
          {
            swift_bridgeObjectRelease_n();
LABEL_69:
            uint64_t v89 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v25 = objc_msgSend(v2, sel_localizedStringForCurrencySymbol_, v89);
            goto LABEL_19;
          }

          char v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v88 & 1) != 0) {
            goto LABEL_69;
          }
          id v90 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AA0]);
          uint64_t v92 = v91;
          if (v90 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v92 == v93)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v94 & 1) == 0)
            {
              id v96 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A90]);
              uint64_t v98 = v97;
              if (v96 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v98 == v99)
              {
                swift_bridgeObjectRelease_n();
              }

              else
              {
                char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v100 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  id v102 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AF8]);
                  uint64_t v104 = v103;
                  if (v102 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v104 == v105) {
                    goto LABEL_82;
                  }
                  char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v106 & 1) != 0) {
                    return 0LL;
                  }
                  id v107 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603B00]);
                  uint64_t v109 = v108;
                  if (v107 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v109 == v110) {
                    goto LABEL_82;
                  }
                  char v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v111 & 1) != 0) {
                    return 0LL;
                  }
                  id v112 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A68]);
                  uint64_t v114 = v113;
                  if (v112 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v114 == v115)
                  {
LABEL_82:
                    swift_bridgeObjectRelease_n();
                    return 0LL;
                  }

                  char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v116 & 1) != 0) {
                    return 0LL;
                  }
                  id v117 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A70]);
                  uint64_t v119 = v118;
                  if (v117 != static String._unconditionallyBridgeFromObjectiveC(_:)(a1) || v119 != v120) {
                    _stringCompareWithSmolCheck(_:_:expecting:)();
                  }
                  swift_bridgeObjectRelease();
                  goto LABEL_37;
                }
              }

              uint64_t v101 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v25 = objc_msgSend(v2, sel_localizedStringForCollatorIdentifier_, v101);
LABEL_19:
              id v26 = v25;
              swift_unknownObjectRelease();
              if (v26)
              {
                id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);

                return v23;
              }

              return 0LL;
            }
          }

          uint64_t v95 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v25 = objc_msgSend(v2, sel_localizedStringForCurrencyCode_, v95);
          goto LABEL_19;
        }
      }

      uint64_t v24 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v25 = objc_msgSend(v2, sel_localizedStringForLanguageCode_, v24);
      goto LABEL_19;
    }
  }

  uint64_t v20 = *(void *)&v2[OBJC_IVAR____NSSwiftLocale_locale + 8];
  uint64_t ObjectType = swift_getObjectType();
  id v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 72);
  swift_unknownObjectRetain();
  id v23 = (id)v22(v121, v122, ObjectType, v20);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v23;
}

uint64_t _NSSwiftLocale.languageIdentifier.getter()
{
  void (*v3)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v1 + 352);
  swift_unknownObjectRetain();
  v3(v24, ObjectType, v1);
  swift_unknownObjectRelease();
  id v4 = *((void *)&v24[0] + 1);
  uint64_t v5 = v26;
  id v21 = *(void *)&v24[0];
  id v22 = v25;
  uint64_t v6 = v27;
  uint64_t v7 = v28;
  uint64_t v8 = v30;
  id v23 = v29;
  char v9 = v31;
  id v10 = v32;
  if (*((void *)&v24[0] + 1)) {
    String.append(_:)((Swift::String)v24[1]);
  }
  if (v5)
  {
    v11._uint64_t countAndFlagsBits = 45LL;
    v11._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = v6;
    v12._id object = v7;
    String.append(_:)(v12);
  }

  if (v8)
  {
    v13._uint64_t countAndFlagsBits = 95LL;
    v13._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = v9;
    v14._id object = v10;
    String.append(_:)(v14);
  }

  outlined consume of Locale.LanguageCode?(v21, v4);
  outlined consume of Locale.LanguageCode?(v22, v5);
  outlined consume of Locale.LanguageCode?(v23, v8);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v15 = static LocaleCache.cache + 16;
  id v16 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  closure #1 in LocaleCache.fixed(_:)(v15, 0LL, 0xE000000000000000LL, v24);
  os_unfair_lock_unlock(v16);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v17 = *((void *)&v24[0] + 1);
  uint64_t v18 = swift_getObjectType();
  LOBYTE(v24[0]) = 1;
  uint64_t v19 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 416))(v24, v18, v17);
  swift_unknownObjectRelease();
  return v19;
}

id @objc _NSSwiftLocale.countryCode.getter(char *a1)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v2 = *(void *)&a1[OBJC_IVAR____NSSwiftLocale_locale + 8];
  uint64_t ObjectType = swift_getObjectType();
  id v4 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = a1;
  swift_unknownObjectRetain();
  v4(&v10, ObjectType, v2);
  swift_unknownObjectRelease();
  uint64_t v6 = v11;
  if (v11)
  {
    uint64_t v7 = v10;
    swift_bridgeObjectRetain();
    outlined consume of Locale.LanguageCode?(v7, v6);

    uint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    return v8;
  }

  else
  {

    return 0LL;
  }

uint64_t _NSSwiftLocale.variantCode.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 168);
  swift_unknownObjectRetain();
  uint64_t v5 = v3(ObjectType, v1);
  if (v4)
  {
    if ((v4 & 0x2000000000000000LL) != 0) {
      uint64_t v6 = HIBYTE(v4) & 0xF;
    }
    else {
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    swift_unknownObjectRelease();
    if (!v6)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  else
  {
    swift_unknownObjectRelease();
  }

  return v5;
}

uint64_t _NSSwiftLocale.exemplarCharacterSet.getter@<X0>(uint64_t *a1@<X8>)
{
  void (*v5)(CFAllocatorRef *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;
  CFAllocatorRef alloc;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(void (**)(CFAllocatorRef *__return_ptr, uint64_t, uint64_t))(v3 + 184);
  swift_unknownObjectRetain();
  v5(&alloc, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)alloc;
  if (alloc) {
    goto LABEL_4;
  }
  uint64_t result = (uint64_t)CFCharacterSetCreateMutable(0LL);
  if (result)
  {
    uint64_t v7 = result;
    type metadata accessor for __CharacterSetStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v7;
    *(_BYTE *)(result + 24) = 1;
LABEL_4:
    *a1 = result;
    return result;
  }

  __break(1u);
  return result;
}

Swift::String_optional __swiftcall _NSSwiftLocale.localizedString(forCalendarIdentifier:)( Swift::String forCalendarIdentifier)
{
  uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
  static Calendar._fromNSCalendarIdentifier(_:)(v2, &v14);
  swift_unknownObjectRelease();
  char v3 = v14;
  if (v14 == 16)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v13 = v3;
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 112);
    swift_unknownObjectRetain();
    uint64_t v4 = v8(&v13, ObjectType, v6);
    uint64_t v5 = v9;
    swift_unknownObjectRelease();
  }

  uint64_t v10 = v4;
  uint64_t v11 = v5;
  result.value._id object = v11;
  result.value._uint64_t countAndFlagsBits = v10;
  return result;
}

NSLocale_optional __swiftcall _NSSwiftLocale._localeWithNewCalendarIdentifier(_:)(Swift::String_optional a1)
{
  if (a1.value._object)
  {
    uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
    static Calendar._fromNSCalendarIdentifier(_:)(v2, &v19);
    swift_unknownObjectRelease();
    char v4 = v19;
    if (v19 == 16)
    {
      uint64_t v1 = 0LL;
    }

    else
    {
      uint64_t v6 = *(uint64_t *)((char *)&v1[1].isa + OBJC_IVAR____NSSwiftLocale_locale);
      uint64_t ObjectType = swift_getObjectType();
      char v19 = v4;
      uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 40);
      swift_unknownObjectRetain();
      uint64_t v9 = v8(&v19, ObjectType, v6);
      uint64_t v11 = v10;
      swift_unknownObjectRelease();
      uint64_t v12 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      char v13 = objc_allocWithZone(v12);
      uint64_t v14 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
      char v15 = (uint64_t *)&v13[OBJC_IVAR____NSSwiftLocale_locale];
      *char v15 = v9;
      v15[1] = v11;
      v13[v14] = 2;
      uint64_t v16 = String._bridgeToObjectiveCImpl()();
      v18.receiver = v13;
      v18.super_class = v12;
      swift_unknownObjectRetain();
      uint64_t v1 = (objc_class *)objc_msgSendSuper2(&v18, sel_initWithLocaleIdentifier_, v16);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
  }

  else
  {
    uint64_t v5 = v1;
  }

  uint64_t v17 = v1;
  result.value.super.isa = v17;
  result.is_nil = v3;
  return result;
}

id _NSSwiftLocale.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _NSSwiftLocale();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static Locale._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    id result = (id)swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    id result = a1;
  }

  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t static Locale._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    id v7 = a1;
  }

  *a2 = v5;
  a2[1] = v6;
  return 1LL;
}

uint64_t type metadata accessor for _NSSwiftLocale()
{
  return objc_opt_self();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Locale()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 488))(ObjectType, v1);
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Locale( void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    id result = (id)swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    id result = a1;
  }

  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Locale( void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    id v7 = a1;
  }

  *a2 = v5;
  a2[1] = v6;
  return 1LL;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Locale@<X0>( id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    objc_super v2 = result;
    type metadata accessor for _NSSwiftLocale();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      id result = (id)swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _LocaleBridged();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v2;
      uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
      id result = v2;
    }

    *a2 = v5;
    a2[1] = v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t NSLocale._toCustomAnyHashable()()
{
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _LocaleBridged();
    *(void *)(swift_allocObject() + 16) = v0;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    id v1 = v0;
  }

  lazy protocol witness table accessor for type Locale and conformance Locale();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSLocale()
{
  id v1 = *v0;
  type metadata accessor for _NSSwiftLocale();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _LocaleBridged();
    *(void *)(swift_allocObject() + 16) = v1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    id v2 = v1;
  }

  lazy protocol witness table accessor for type Locale and conformance Locale();
  AnyHashable.init<A>(_:)();
}

uint64_t one-time initialization function for cfLocaleCollatorID()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSLocaleKey.cfLocaleCollatorID = result;
  return result;
}

uint64_t one-time initialization function for languageIdentifier()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSLocaleKey.languageIdentifier = result;
  return result;
}

id specialized static NSLocale._newLocaleAsIfCurrent(_:overrides:disableBundleMatching:)( uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  swift_retain();
  LocaleCache.preferences()(v21);
  if (a3)
  {
    uint64_t v8 = a3;
    LocalePreferences.apply(_:)(v8);
  }

  v19[6] = v21[6];
  v20[0] = v22[0];
  *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)((char *)v22 + 12);
  void v19[2] = v21[2];
  v19[3] = v21[3];
  v19[4] = v21[4];
  v19[5] = v21[5];
  v19[0] = v21[0];
  v19[1] = v21[1];
  type metadata accessor for _LocaleICU();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v9 = _LocaleICU.init(name:prefs:disableBundleMatching:)(a1, a2, (uint64_t *)v19, a4 & 1);
  swift_release();
  uint64_t v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
  uint64_t v11 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  uint64_t v12 = objc_allocWithZone(v11);
  uint64_t v13 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  uint64_t v14 = (uint64_t *)&v12[OBJC_IVAR____NSSwiftLocale_locale];
  *uint64_t v14 = v9;
  v14[1] = v10;
  v12[v13] = 2;
  uint64_t v15 = String._bridgeToObjectiveCImpl()();
  v18.receiver = v12;
  v18.super_class = v11;
  swift_retain();
  id v16 = objc_msgSendSuper2(&v18, sel_initWithLocaleIdentifier_, v15);
  swift_release();
  swift_unknownObjectRelease();
  return v16;
}

id specialized static NSLocale._currentLocaleWithBundleLocalizations(_:allowsMixedLocalizations:)( uint64_t a1, char a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  if ((a2 & 1) == 0)
  {
    swift_retain();
    uint64_t v12 = LocaleCache.preferredLanguages(forCurrentUser:)(0);
    uint64_t v13 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CFPropertyListRef v14 = CFPreferencesCopyAppValue(v13, (CFStringRef)*MEMORY[0x189605188]);
    swift_unknownObjectRelease();
    if (!v14 || (*(void *)&v67[0] = v14, (swift_dynamicCast() & 1) == 0))
    {
      swift_release();
LABEL_34:
      swift_bridgeObjectRelease();
      return 0LL;
    }

    unint64_t v15 = *((void *)&v63[0] + 1);
    uint64_t v62 = *(void *)&v63[0];
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16)
    {
      unint64_t v58 = *((void *)&v63[0] + 1);
      uint64_t v60 = v12;
      uint64_t v17 = (const __CFAllocator *)*MEMORY[0x189604DD0];
      swift_bridgeObjectRetain();
      uint64_t v18 = a1 + 40;
      char v19 = (void *)MEMORY[0x18961AFE8];
      do
      {
        uint64_t v20 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString( v17,  v20);
        swift_unknownObjectRelease();
        if (CanonicalLanguageIdentifierFromString)
        {
          id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
          unint64_t v24 = v23;
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
          id v22 = 0LL;
          unint64_t v24 = 0xE000000000000000LL;
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
        }
        unint64_t v26 = v19[2];
        unint64_t v25 = v19[3];
        if (v26 >= v25 >> 1) {
          char v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v25 > 1),  v26 + 1,  1,  v19);
        }
        v18 += 16LL;
        void v19[2] = v26 + 1;
        char v27 = &v19[2 * v26];
        v27[4] = v22;
        v27[5] = v24;
        --v16;
      }

      while (v16);
      swift_bridgeObjectRelease();
      unint64_t v15 = v58;
      uint64_t v12 = v60;
      if (!v19[2]) {
        goto LABEL_32;
      }
    }

    else if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
    {
      goto LABEL_32;
    }

    if (v12[2])
    {
      uint64_t v28 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000LL) == 0) {
        uint64_t v28 = v62 & 0xFFFFFFFFFFFFLL;
      }
      if (v28)
      {
        specialized static Locale.canonicalizeLocalizations(_:)((uint64_t)v12);
        id v29 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        uint64_t v30 = _ContiguousArrayBuffer._asCocoaArray()();
        id v31 =  objc_msgSend( v29,  sel_preferredLocalizationsFromArray_forPreferences_,  v30,  _ContiguousArrayBuffer._asCocoaArray()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v31)
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();
          }

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v32 = swift_dynamicCastClass();
          if (v32)
          {
            char v33 = (void *)v32;
          }

          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v31, sel_copy);
            unint64_t v35 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            char v33 = (void *)specialized _arrayForceCast<A, B>(_:)(v35);

            swift_bridgeObjectRelease();
          }
        }

        else
        {
          char v33 = (void *)MEMORY[0x18961AFE8];
        }

        if (!v33[2])
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }

        uint64_t v36 = v33[4];
        uint64_t v37 = v33[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v38 = specialized _withFixedCharBuffer(size:_:)(257LL, v62, v15);
        uint64_t v40 = v39;
        swift_bridgeObjectRelease();
        if (v40)
        {
          Locale.Components.init(identifier:)(v38, v40, v63);
          if (*((void *)&v63[0] + 1))
          {
            id v41 = v65;
            if (v65)
            {
              uint64_t v61 = v36;
              unint64_t v42 = v15;
              uint64_t v43 = v64;
              v67[0] = v63[0];
              outlined copy of Locale.LanguageCode?(v64, (uint64_t)v65);
              swift_bridgeObjectRetain();
              v44._uint64_t countAndFlagsBits = 45LL;
              v44._id object = (void *)0xE100000000000000LL;
              String.append(_:)(v44);
              swift_bridgeObjectRetain();
              outlined consume of Locale.LanguageCode?(v43, (uint64_t)v41);
              v45._uint64_t countAndFlagsBits = v43;
              unint64_t v15 = v42;
              uint64_t v36 = v61;
              v45._id object = v41;
              String.append(_:)(v45);
              swift_bridgeObjectRelease();
              outlined release of Locale.Components((uint64_t *)v63);
              uint64_t v46 = *((void *)&v67[0] + 1);
              uint64_t v38 = *(void *)&v67[0];
              goto LABEL_47;
            }
          }

          outlined release of Locale.Components((uint64_t *)v63);
          uint64_t v38 = 0LL;
        }

        uint64_t v46 = 0LL;
LABEL_47:
        swift_bridgeObjectRetain();
        uint64_t v47 = specialized _withFixedCharBuffer(size:_:)(257LL, v36, v37);
        uint64_t v49 = v48;
        swift_bridgeObjectRelease();
        if (v49)
        {
          Locale.Components.init(identifier:)(v47, v49, v63);
          if (*((void *)&v63[0] + 1) && (uint64_t v50 = v65) != 0LL)
          {
            uint64_t v59 = v46;
            uint64_t v51 = v64;
            v67[0] = v63[0];
            outlined copy of Locale.LanguageCode?(v64, (uint64_t)v65);
            swift_bridgeObjectRetain();
            v52._uint64_t countAndFlagsBits = 45LL;
            v52._id object = (void *)0xE100000000000000LL;
            String.append(_:)(v52);
            swift_bridgeObjectRetain();
            outlined consume of Locale.LanguageCode?(v51, (uint64_t)v50);
            v53._uint64_t countAndFlagsBits = v51;
            uint64_t v46 = v59;
            v53._id object = v50;
            String.append(_:)(v53);
            swift_bridgeObjectRelease();
            outlined release of Locale.Components((uint64_t *)v63);
            uint64_t v49 = *((void *)&v67[0] + 1);
            uint64_t v47 = *(void *)&v67[0];
          }

          else
          {
            outlined release of Locale.Components((uint64_t *)v63);
            uint64_t v47 = 0LL;
            uint64_t v49 = 0LL;
          }
        }

        if (!v46 || !v49)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }

        if (v38 == v47 && v46 == v49)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v54 & 1) == 0)
          {
            uint64_t v62 = specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)( v36,  v37,  v62,  v15);
            unint64_t v57 = v56;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v57)
            {
              swift_release();
              return 0LL;
            }

            unint64_t v15 = v57;
LABEL_62:
            LocaleCache.preferences()(v63);
            destructiveProjectEnumData for PredicateCodableError(v63, v55);
            outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v67,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
            type metadata accessor for _LocaleICU();
            swift_allocObject();
            uint64_t v4 = (uint64_t)specialized _LocaleICU.init(identifier:prefs:)(v62, v15, (uint64_t)v67);
            swift_bridgeObjectRelease();
            goto LABEL_5;
          }

          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_62;
      }
    }

uint64_t specialized static Locale.isoCurrencyCodes.getter()
{
  uint64_t v0 = specialized static Locale.Currency.isoCurrencies.getter();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v10 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v10;
    Swift::Bool v3 = (uint64_t *)(v0 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v6 = *(void *)(v10 + 16);
      unint64_t v7 = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v6 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v6 + 1, 1);
      }
      v3 += 4;
      *(void *)(v10 + 16) = v6 + 1;
      uint64_t v8 = v10 + 16 * v6;
      *(void *)(v8 + 32) = v5;
      *(void *)(v8 + 40) = v4;
      --v1;
    }

    while (v1);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x18961AFE8];
  }

  return v2;
}

uint64_t specialized static Locale.components(fromIdentifier:)()
{
  uint64_t v0 = (const __CFAllocator *)*MEMORY[0x189604DD0];
  int64_t v1 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CFDictionaryRef ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v0, v1);
  swift_unknownObjectRelease();
  if (ComponentsFromLocaleIdentifier
    && (uint64_t v6 = 0LL,
        CFDictionaryRef v3 = ComponentsFromLocaleIdentifier,
        specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v6),
        v3,
        (uint64_t v4 = v6) != 0))
  {
  }

  else
  {

    return MEMORY[0x18961AFF0];
  }

  return v4;
}

unint64_t instantiation function for generic protocol witness table for Locale(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Locale and conformance Locale();
  a1[2] = lazy protocol witness table accessor for type Locale and conformance Locale();
  a1[3] = lazy protocol witness table accessor for type Locale and conformance Locale();
  unint64_t result = lazy protocol witness table accessor for type Locale and conformance Locale();
  a1[4] = result;
  return result;
}

uint64_t specialized static NSLocale._windowsLocaleCode(fromLocaleIdentifier:)()
{
  uint64_t LCID = uloc_getLCID();
  swift_release();
  return LCID;
}

uint64_t specialized static NSLocale._numberingSystem(forLocaleIdentifier:)(uint64_t a1, uint64_t a2)
{
  id object = v9;
  if (v9)
  {
    uint64_t countAndFlagsBits = v8[21];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined release of Locale.Components(v8);
  }

  else
  {
    static Locale.NumberingSystem.defaultNumberingSystem(for:)(a1, a2, &v7);
    outlined release of Locale.Components(v8);
    id object = v7._object;
    if (!v7._object) {
      return 0LL;
    }
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
  }

  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(countAndFlagsBits, (uint64_t)object);
  return countAndFlagsBits;
}

uint64_t specialized static NSLocale._validNumberingSystems(forLocaleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized static Locale.NumberingSystem.validNumberingSystems(for:)(a1, a2);
  int64_t v3 = v2[2];
  if (v3)
  {
    uint64_t v12 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v12;
    uint64_t v5 = v2 + 5;
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v8 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v8 + 1, 1);
      }
      v5 += 4;
      *(void *)(v12 + 16) = v8 + 1;
      uint64_t v10 = v12 + 16 * v8;
      *(void *)(v10 + 32) = v7;
      *(void *)(v10 + 40) = v6;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x18961AFE8];
  }

  return v4;
}

uint64_t partial apply for closure #1 in LocaleCache.fixedNSLocale(identifier:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in LocaleCache.fixedNSLocale(identifier:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t KeyedEncodingContainer.encode<A, B>(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v25[4] = a5;
  v25[1] = a2;
  _OWORD v25[2] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  CFPropertyListRef v14 = (char *)v25 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  __n128 v21 = MEMORY[0x1895F8858](v19);
  unint64_t v23 = (char *)v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))((char *)v25 - v22, a1, v19, v21);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v23, a4);
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(void))(a9 + 16))();
  (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a7 + 16))(v28, v14, a4, a7);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a4);
}

void KeyedDecodingContainer.decode<A, B>(_:forKey:)()
{
}

uint64_t sub_183328E68(uint64_t a1)
{
  uint64_t v6 = (char *)&v10 - v5;
  if ((KeyedDecodingContainer.contains(_:)() & 1) != 0)
  {
    MEMORY[0x186E20D4C](&protocol conformance descriptor for CodableConfiguration<A, B>, a1);
    uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v1) {
      return result;
    }
    uint64_t v8 = *(void *)(v2 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v3, v6, v2);
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v8 = *(void *)(v2 - 8);
    uint64_t v9 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v3, v9, 1LL, v2);
}

void type metadata accessor for CodableConfiguration()
{
}

uint64_t CodableConfiguration.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t KeyedEncodingContainer.encode<A, B>(_:forKey:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v17[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v15 = (char *)v17 - v14;
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a7 + 16))(v18, v15, a5, a7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A, B>(_:forKey:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = a6;
  uint64_t v26 = a8;
  v24[0] = a2;
  v24[1] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v24 - v16;
  uint64_t v18 = *(void *)(a5 - 8);
  __n128 v20 = MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v17, a1, v14, v20);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v17, a5);
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
  (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a7 + 16))(v29, v13, a5, a7);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, a5);
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[1] = a4;
  uint64_t v21 = a3;
  v19[0] = a2;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v19 - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  __n128 v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, a1, v9, v15);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a5);
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a6 + 16))(v20, v21, a5, a6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, a5);
}

uint64_t KeyedDecodingContainer.decode<A, B>(_:forKey:configuration:)@<X0>( uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v16 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = &v15[-v11 - 8];
  uint64_t result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v5)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    return (*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v15, v12, a1, a3);
  }

  return result;
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A, B>(_:forKey:configuration:)@<X0>( uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v18 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = (char *)v15 - v11;
  if ((KeyedDecodingContainer.contains(_:)() & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( a5,  1LL,  1LL,  a1);
  }
  v15[1] = a2;
  uint64_t v16 = a5;
  uint64_t v13 = v18;
  uint64_t result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v5)
  {
    (*(void (**)(void))(v13 + 16))();
    (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v17, v12, a1, a3);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( v16,  0LL,  1LL,  a1);
  }

  return result;
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:configuration:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v12 = a1;
  uint64_t v14 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = &v13[-v9 - 8];
  uint64_t result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v13, v10, a2, a3);
  }

  return result;
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:configuration:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v15 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v13 - v9;
  if ((KeyedDecodingContainer.contains(_:)() & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a4,  1LL,  1LL,  a2);
  }
  uint64_t v14 = a4;
  uint64_t v11 = v17;
  uint64_t result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v15, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v16, v10, a2, a3);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( v14,  0LL,  1LL,  a2);
  }

  return result;
}

uint64_t UnkeyedEncodingContainer.encode<A, B>(_:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17[1] = a6;
  _OWORD v17[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v15 = (char *)v17 - v14;
  dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a5, a8);
  (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a7 + 16))(v18, v15, a4, a7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t UnkeyedEncodingContainer.encode<A>(_:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t UnkeyedDecodingContainer.decode<A, B>(_:configuration:)@<X0>( uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v16 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = &v15[-v11 - 8];
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
  if (!v5)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    return (*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v15, v12, a1, a3);
  }

  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A, B>(_:configuration:)@<X0>( uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v19 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v5)
  {
    uint64_t v16 = a3;
    uint64_t v17 = a5;
    uint64_t v14 = v19;
    if ((result & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( v17,  1LL,  1LL,  a1);
    }

    else
    {
      dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
      (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a2, v14);
      (*(void (**)(_BYTE *, char *, uint64_t))(v16 + 16))(v18, v12, a1);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( v17,  0LL,  1LL,  a1);
    }
  }

  return result;
}

uint64_t UnkeyedDecodingContainer.decode<A>(_:configuration:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v12 = a1;
  uint64_t v14 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = &v13[-v9 - 8];
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
  if (!v4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v13, v10, a2, a3);
  }

  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:configuration:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v12 = a1;
  uint64_t v14 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = &v13[-v9 - 8];
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v4)
  {
    if ((result & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( v14,  1LL,  1LL,  a2);
    }

    else
    {
      dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, AssociatedTypeWitness);
      (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v13, v10, a2, a3);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( v14,  0LL,  1LL,  a2);
    }
  }

  return result;
}

uint64_t CodableConfiguration.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t CodableConfiguration.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 40LL))(v2, a1);
}

uint64_t (*CodableConfiguration.wrappedValue.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t CodableConfiguration.init(wrappedValue:from:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t CodableConfiguration.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v8 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  (*(void (**)(__n128))(a2[7] + 16LL))(v8);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 16))(a1, v10, v5, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t CodableConfiguration.init(from:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v22 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v14 = &v21[-v13 - 8];
  uint64_t v15 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = &v21[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v21);
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(a4 + 16))(v21, v14, a2, a4);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v6) {
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v22, v18, a2);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableConfiguration<A, B>@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CodableConfiguration.init(from:)(a1, a2[2], a2[3], a2[4], a2[6], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableConfiguration<A, B>( uint64_t a1, void *a2)
{
  return CodableConfiguration.encode(to:)(a1, a2);
}

uint64_t static CodableConfiguration<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> CodableConfiguration<A, B>()
{
  return static CodableConfiguration<>.== infix(_:_:)() & 1;
}

uint64_t CodableConfiguration<>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int CodableConfiguration<>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> CodableConfiguration<A, B>()
{
  return CodableConfiguration<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> CodableConfiguration<A, B>()
{
  return CodableConfiguration<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> CodableConfiguration<A, B>()
{
  return Hasher._finalize()();
}

uint64_t Optional<A>.encode(to:configuration:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = &v21[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, __n128))(v8 + 16))(v10, v18, v15);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v10, 1LL, v12) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, a3);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
    dispatch thunk of SingleValueEncodingContainer.encodeNil()();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v17, v10, v12);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, a2, v12, a4);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v17, v12);
  }

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance <A> A?( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Optional<A>.encode(to:configuration:)(a1, a2, a3, *(void *)(a4 - 8));
}

uint64_t Optional<A>.init(from:configuration:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v35 = (char *)&v31 - v8;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  __n128 v15 = (char *)&v31 - v14;
  uint64_t v16 = a1[3];
  uint64_t v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  uint64_t v17 = v39;
  dispatch thunk of Decoder.singleValueContainer()();
  if (v17)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v45, AssociatedTypeWitness);
    uint64_t v18 = (uint64_t)v40;
    return __swift_destroy_boxed_opaque_existential_1(v18);
  }

  uint64_t v32 = v12;
  char v33 = v15;
  uint64_t v39 = 0LL;
  uint64_t v20 = AssociatedTypeWitness;
  uint64_t v34 = v10;
  uint64_t v21 = v43;
  uint64_t v22 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  if ((MEMORY[0x186E1CBE8](v21, v22) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v45, v20);
    unint64_t v23 = v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))(v33, 1LL, 1LL, a3);
    uint64_t v24 = v37;
    uint64_t v25 = v34;
    uint64_t v18 = (uint64_t)v40;
  }

  else
  {
    uint64_t v18 = (uint64_t)v40;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v40,  (uint64_t)v41);
    uint64_t v26 = v35;
    uint64_t v27 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v35, v45, v20);
    uint64_t v28 = v32;
    uint64_t v29 = v39;
    (*(void (**)(_BYTE *, char *, uint64_t))(v36 + 16))(v41, v26, a3);
    uint64_t v24 = v37;
    uint64_t v39 = v29;
    if (v29)
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v20);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      return __swift_destroy_boxed_opaque_existential_1(v18);
    }

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))(v28, 0LL, 1LL, a3);
    uint64_t v30 = v28;
    unint64_t v23 = v33;
    uint64_t v25 = v34;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v33, v30, v9);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v24, v23, v9);
  return __swift_destroy_boxed_opaque_existential_1(v18);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance <A> A?@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional<A>.init(from:configuration:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t Array<A>.encode(to:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a4;
  uint64_t v27 = a2;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v26 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = v10;
  MEMORY[0x1895F8858](v11);
  uint64_t v31 = (char *)&v20 - v12;
  __swift_project_boxed_opaque_existential_1(v13, v13[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v25 = MEMORY[0x186E1BB2C](v14, v7);
  if (!v25)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }

  uint64_t v15 = 0LL;
  unint64_t v23 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a5 + 16);
  uint64_t v24 = v7;
  unint64_t v21 = a3 & 0xC000000000000001LL;
  uint64_t v22 = a3;
  uint64_t v16 = a5;
  uint64_t v17 = v26;
  while (1)
  {
    if ((_swift_isClassOrObjCExistentialType() & 1) == 0 || !v21)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))( v31,  a3 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v15,
        v7);
      uint64_t v18 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_12;
      }
      goto LABEL_6;
    }

    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v20 != 8) {
      break;
    }
    v28[0] = result;
    (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v31, v28, v7);
    swift_unknownObjectRelease();
    uint64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance <A> [A]( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Array<A>.encode(to:configuration:)(a1, a2, *v4, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

char *Array<A>.init(from:configuration:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = a2;
  uint64_t v37 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v36 = (char *)&v34 - v8;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = (char *)MEMORY[0x18961AFE8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = v41;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v40, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v12;
  }

  id v41 = v12;
  uint64_t v38 = v9;
  uint64_t v14 = v37;
  unint64_t v35 = a1;
  __swift_project_boxed_opaque_existential_1(v43, v44);
  char v15 = dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter();
  uint64_t v39 = AssociatedTypeWitness;
  if ((v15 & 1) == 0)
  {
    uint64_t v18 = MEMORY[0x18961AFE8];
    uint64_t v16 = v7;
    uint64_t v19 = v14;
    uint64_t v20 = v36;
    while (1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
      dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, v40, v39);
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v19 + 16))(v42, v20, a3, v19);
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        uint64_t v45 = (char *)v18;
        if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0
          || (_swift_isClassOrObjCExistentialType() & 1) != 0 && (v18 < 0 || (v18 & 0x4000000000000000LL) != 0))
        {
LABEL_20:
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v18 < 0 || (v18 & 0x4000000000000000LL) != 0))
          {
            specialized _ArrayBuffer._nonNative.getter(v18);
            swift_unknownObjectRetain();
            uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
            swift_unknownObjectRelease();
          }

          else
          {
            char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            uint64_t v26 = v18 & 0xFFFFFFFFFFFFF8LL;
            if ((isClassOrObjCExistentialType & 1) == 0) {
              uint64_t v26 = v18;
            }
            uint64_t v27 = *(void *)(v26 + 16);
          }

          uint64_t v18 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 + 1, 1, v18, a3);
          uint64_t v45 = (char *)v18;
        }
      }

      else
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v45 = (char *)v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_20;
        }
      }

      if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
        uint64_t v28 = v18 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v28 = v18;
      }
      uint64_t v29 = *(void *)(v28 + 16);
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
        uint64_t v30 = v18 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v30 = v18;
      }
      unint64_t v31 = *(void *)(v30 + 24);
      uint64_t v32 = v29 + 1;
      if (v29 + 1 > (uint64_t)(v31 >> 1))
      {
        Swift::Bool v33 = v31 > 1;
        type metadata accessor for Array();
        Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33, v29 + 1, 1);
        uint64_t v18 = (uint64_t)v45;
      }

      if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
      {
        uint64_t v21 = v18 & 0xFFFFFFFFFFFFFF8LL;
        *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v32;
      }

      else
      {
        *(void *)(v18 + 16) = v32;
        uint64_t v21 = v18 & 0xFFFFFFFFFFFFFF8LL;
      }

      if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = v18;
      }
      (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))( v22 + ((*(unsigned __int8 *)(v38 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))
      + *(void *)(v38 + 72) * v29,
        v41,
        a3);
      uint64_t v45 = (char *)v18;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0) {
        goto LABEL_5;
      }
    }
  }

  uint64_t v16 = v7;
LABEL_5:
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v40, v39);
  uint64_t v12 = v45;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v12;
}

char *protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance <A> [A]@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t result = Array<A>.init(from:configuration:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in <> CodableConfiguration<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 - 8) + 8LL);
  return MEMORY[0x186E20D4C](&protocol conformance descriptor for <> CodableConfiguration<A, B>, a1, &v4);
}

uint64_t dispatch thunk of EncodableWithConfiguration.encode(to:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static DecodingConfigurationProviding.decodingConfiguration.getter( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DecodableWithConfiguration.init(from:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t type metadata completion function for CodableConfiguration()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for CodableConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_18332AFA0 + 4 * byte_1838234E0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CodableConfiguration( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t specialized swift_willThrowTyped(__int128 *a1)
{
  return swift_willThrowTypedImpl();
}

void _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = v8;
  char v10 = a7;
  uint64_t v11 = a6;
  char v12 = a5;
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  __int128 v16 = *a3;
  double v17 = *(double *)a8;
  uint64_t v18 = 2299161LL;
  char v19 = *(_BYTE *)(a8 + 8);
  *(void *)(v9 + 88) = 0LL;
  *(_OWORD *)(v9 + 16) = xmmword_183823760;
  *(_OWORD *)(v9 + 32) = xmmword_183823770;
  *(void *)(v9 + 48) = 2299161LL;
  *(void *)(v9 + 80) = 0x4290000000000000LL;
  *(void *)(v9 + 120) = 0LL;
  *(void *)(v9 + 96) = 0LL;
  *(_BYTE *)(v9 + 128) = 1;
  *(void *)(v9 + 136) = 0LL;
  *(_BYTE *)(v9 + 144) = 1;
  if (v14)
  {
    *(void *)(v9 + 104) = v14;
    *(void *)(v9 + 112) = v15;
    if ((v19 & 1) != 0)
    {
LABEL_3:
      *(_OWORD *)(v9 + 56) = xmmword_183823780;
      *(void *)(v9 + 72) = 0xC208951B28000000LL;
      goto LABEL_18;
    }
  }

  else
  {
    __int128 v29 = v16;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v20 = (uint64_t *)(static TimeZoneCache.cache + 16);
    uint64_t v21 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v21);
    closure #1 in TimeZoneCache.default.getter(v20, &v31);
    os_unfair_lock_unlock(v21);
    swift_release_n();
    double v22 = v32;
    uint64_t v11 = a6;
    char v12 = a5;
    char v10 = a7;
    __int128 v16 = v29;
    *(void *)(v9 + 104) = v31;
    *(double *)(v9 + 112) = v22;
    if ((v19 & 1) != 0) {
      goto LABEL_3;
    }
  }

  *(double *)(v9 + 72) = v17;
  double v23 = floor(v17 / 86400.0 + 2451910.5 + 0.5);
  BOOL v24 = v23 > 2130706430.0 || v23 < -2130706430.0;
  __int128 v30 = v16;
  if (!v24)
  {
    if ((~*(void *)&v23 & 0x7FF0000000000000LL) != 0)
    {
      if (v23 > -9.22337204e18)
      {
        if (v23 < 9.22337204e18)
        {
          uint64_t v18 = (uint64_t)v23;
          goto LABEL_17;
        }

uint64_t _CalendarGregorian.firstWeekday.getter()
{
  void (*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  if (*((_BYTE *)v0 + 128) != 1) {
    return v0[15];
  }
  if (!v0[11]) {
    return 1LL;
  }
  uint64_t v1 = v0[12];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 328);
  swift_unknownObjectRetain();
  v3(&v9, ObjectType, v1);
  uint64_t v4 = v9;
  if (one-time initialization token for weekdays != -1) {
    swift_once();
  }
  uint64_t v0 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  unsigned int v5 = specialized Collection<>.firstIndex(of:)(v4, (uint64_t)v0);
  unsigned int v7 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    __break(1u);
    return result;
  }

  swift_unknownObjectRelease();
  uint64_t result = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return v0[15];
  }

  return result;
}

uint64_t _CalendarGregorian.minimumDaysInFirstWeek.getter()
{
  if (*(_BYTE *)(v0 + 144) != 1) {
    return *(void *)(v0 + 136);
  }
  if (!*(void *)(v0 + 88)) {
    return 1LL;
  }
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 344);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t _CalendarGregorian.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)( uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (*a2)
  {
    uint64_t v12 = a2[1];
    uint64_t v13 = *a2;
    uint64_t v14 = *a1;
    if (v10) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v13 = *(void *)(v6 + 104);
    uint64_t v12 = *(void *)(v6 + 112);
    swift_unknownObjectRetain();
    uint64_t v14 = v10;
    if (v10)
    {
LABEL_3:
      if ((a4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      a3 = *(void *)(v6 + 120);
      char v15 = *(_BYTE *)(v6 + 128);
      if ((a6 & 1) != 0) {
        goto LABEL_5;
      }
LABEL_9:
      char v17 = 0;
      uint64_t v16 = a5;
      goto LABEL_10;
    }
  }

  uint64_t v11 = *(void *)(v6 + 96);
  uint64_t v14 = swift_unknownObjectRetain();
  if ((a4 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  char v15 = 0;
  if ((a6 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v16 = *(void *)(v6 + 136);
  char v17 = *(_BYTE *)(v6 + 144);
LABEL_10:
  v25[0] = v13;
  v25[1] = v12;
  *(void *)&__int128 v24 = v14;
  *((void *)&v24 + 1) = v11;
  uint64_t v22 = 0LL;
  char v23 = 1;
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t v19 = swift_unknownObjectRetain();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( v19,  v25,  &v24,  a3,  v15,  v16,  v17,  (uint64_t)&v22);
  lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian( &lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian,  (uint64_t)&protocol conformance descriptor for _CalendarGregorian);
  return v18;
}

void _CalendarGregorian.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t ObjectType = swift_getObjectType();
  unsigned int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  v5(a1, ObjectType, v3);
  swift_unknownObjectRelease();
  Swift::UInt v6 = _CalendarGregorian.firstWeekday.getter();
  Hasher._combine(_:)(v6);
  if (*(_BYTE *)(v1 + 144) == 1)
  {
    if (*(void *)(v1 + 88))
    {
      uint64_t v7 = *(void *)(v1 + 96);
      uint64_t v8 = swift_getObjectType();
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 344);
      swift_unknownObjectRetain();
      Swift::UInt v10 = v9(v8, v7);
      swift_unknownObjectRelease();
    }

    else
    {
      Swift::UInt v10 = 1LL;
    }
  }

  else
  {
    Swift::UInt v10 = *(void *)(v1 + 136);
  }

  Hasher._combine(_:)(v10);
  if (*(void *)(v1 + 88))
  {
    uint64_t v11 = *(void *)(v1 + 96);
    uint64_t v12 = swift_getObjectType();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
    swift_unknownObjectRetain();
    v13(v12, v11);
    swift_unknownObjectRelease();
  }

  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(0);
}

void _CalendarGregorian.maximumRange(of:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_18332B94C()
{
  return 0LL;
}

Swift::Int _CalendarGregorian._algorithmA(smaller:larger:at:)(char *a1, char *a2, void *a3)
{
  char v3 = *a1;
  char v4 = *a2;
  *(Foundation::Date *)&v5._Swift::Double time = (Foundation::Date)*a3;
  char v11 = *a2;
  Swift::Double time = v5._time;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v11, v5);
  if ((v14 & 1) != 0) {
    goto LABEL_6;
  }
  double v7 = v12._time;
  double v6 = v13;
  LOBYTE(time) = v3;
  char v11 = v4;
  v12._Swift::Double time = v12._time + 0.1;
  Swift::Int_optional v15 = _CalendarGregorian.ordinality(of:in:for:)( (Foundation::Calendar::Component)&time,  (Foundation::Calendar::Component)&v11,  v12);
  if (v15.is_nil
    || (Swift::Int value = v15.value,
        LOBYTE(time) = v3,
        char v11 = v4,
        v12._Swift::Double time = v6 + v7 + -0.1,
        Swift::Int_optional v16 = _CalendarGregorian.ordinality(of:in:for:)( (Foundation::Calendar::Component)&time,  (Foundation::Calendar::Component)&v11,  v12),  v16.is_nil))
  {
LABEL_6:
    Swift::Int value = 0LL;
  }

  else if (v16.value >= value)
  {
    if (__OFADD__(v16.value, 1LL))
    {
      __break(1u);
    }

    else if (v16.value + 1 >= value)
    {
      goto LABEL_7;
    }

    __break(1u);
    return v16.value;
  }

Foundation::DateInterval_optional __swiftcall _CalendarGregorian.dateInterval(of:for:)( Foundation::Calendar::Component of, Foundation::Date a2)
{
  __asm { BR              X9 }

  return result;
}

uint64_t sub_18332BCF0(double a1)
{
  LOBYTE(v27[0]) = 3;
  v28[0] = v6;
  Foundation::Date_optional v30 = _CalendarGregorian.firstInstant(of:at:)((Foundation::Calendar::Component)v27, *(Foundation::Date *)&a1);
  if ((v29[1] & 1) != 0) {
    goto LABEL_2;
  }
  uint64_t v7 = v29[0];
  double v8 = *(double *)v29;
  LOBYTE(v26) = 3;
  *(void *)&__int128 v25 = v29[0];
  *Foundation::Date v5 = *(_OWORD *)(v2 + 104);
  swift_unknownObjectRetain();
  _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v26,  (double *)&v25,  1LL,  (double *)v27);
  swift_unknownObjectRelease();
  double v9 = *(double *)v27;
  *(void *)&v27[0] = 8447LL;
  *(double *)&__int128 v25 = v9;
  *Foundation::Date v5 = *(_OWORD *)(v2 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v27, (double *)&v25, v28, v29);
  swift_unknownObjectRelease();
  LOBYTE(v27[0]) = 4;
  memcpy(v28, v29, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)v29);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v27, v28);
  uint64_t v12 = v11 & 1;
  if ((v11 & 1) != 0) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = v10;
  }
  LOBYTE(v27[0]) = 5;
  memcpy(v28, v29, 0x11AuLL);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v27, v28);
  char v16 = v15 & 1;
  if ((v15 & 1) != 0) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = v14;
  }
  LOBYTE(v27[0]) = 6;
  memcpy(v28, v29, 0x11AuLL);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v27, v28);
  __int128 v20 = v5[19];
  *Foundation::Date v5 = v5[18];
  v5[1] = v20;
  v28[4] = v29[4];
  LOBYTE(v28[5]) = v29[5];
  v28[6] = v29[6];
  LOBYTE(v28[7]) = v29[7];
  v28[8] = v29[8];
  LOBYTE(v28[9]) = v29[9];
  v28[10] = v29[10];
  LOBYTE(v28[11]) = v29[11];
  v28[12] = v29[12];
  LOBYTE(v28[13]) = v29[13];
  v28[14] = v13;
  LOBYTE(v28[15]) = v12;
  v28[16] = v17;
  LOBYTE(v28[17]) = v16;
  if ((v19 & 1) != 0) {
    uint64_t v21 = 0LL;
  }
  else {
    uint64_t v21 = v18;
  }
  v28[18] = v21;
  LOBYTE(v28[19]) = v19 & 1;
  v28[22] = v29[22];
  LOBYTE(v28[23]) = v29[23];
  v28[24] = v29[24];
  LOBYTE(v28[25]) = v29[25];
  v28[26] = v29[26];
  LOBYTE(v28[27]) = v29[27];
  v28[28] = v29[28];
  LOBYTE(v28[29]) = v29[29];
  v28[30] = v29[30];
  LOBYTE(v28[31]) = v29[31];
  *char v4 = *v3;
  v4[16] = v3[16];
  v28[32] = v29[32];
  v28[34] = v29[34];
  BYTE1(v28[35]) = BYTE1(v29[35]);
  v28[20] = 0LL;
  LOBYTE(v28[21]) = 0;
  memcpy(v27, v28, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)v28);
  _CalendarGregorian.date(from:)(v27, (uint64_t)&v25);
  outlined release of DateComponents((uint64_t)v28);
  if ((BYTE8(v25) & 1) != 0)
  {
LABEL_22:
    __break(1u);
    JUMPOUT(0x18332C244LL);
  }

  double v22 = *(double *)&v25;
  *(void *)&double v26 = v25;
  __int128 v25 = *(_OWORD *)(v2 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v26, (uint64_t)&v25, (uint64_t)v27);
  outlined release of DateComponents((uint64_t)v29);
  swift_unknownObjectRelease();
  *(void *)&v30.is_nil = outlined release of DateComponents((uint64_t)v28);
  if ((v27[1] & 1) == 0)
  {
    if (v22 - *((double *)v27 + 1) >= v8)
    {
      double v23 = v22 - *((double *)v27 + 1) - v8;
      goto LABEL_19;
    }

    __break(1u);
    goto LABEL_21;
  }

  if (v9 > v8)
  {
    if (v22 >= v8)
    {
      double v23 = v22 - v8;
LABEL_19:
      *(void *)uint64_t v1 = v7;
      *(double *)(v1 + 8) = v23;
      *(_BYTE *)(v1 + 16) = 0;
      goto LABEL_24;
    }

Swift::Int_optional __swiftcall _CalendarGregorian.ordinality(of:in:for:)( Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  char v4 = *(_BYTE *)in;
  double v5 = *v3;
  char v12 = *(_BYTE *)of;
  char v11 = v4;
  double v10 = v5;
  Swift::Int v6 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( &v12,  &v11,  &v10,  (uint64_t)v9,  a3._time);
  Swift::Bool v8 = v7 & 1;
  result.Swift::Int value = v6;
  result.is_nil = v8;
  return result;
}

Swift::Int _CalendarGregorian._algorithmB(smaller:larger:at:)(char *a1, char *a2, Swift::Double *a3)
{
  char v3 = *a1;
  v4._Swift::Double time = *a3;
  char v39 = *a2;
  Swift::Double time = v4._time;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v39, v4);
  if ((v36 & 1) != 0) {
    return 0LL;
  }
  double v7 = v34;
  double v6 = v35;
  char v39 = 2;
  Swift::Double time = v34 + 1.0;
  *(void *)&double v8 = (unint64_t)_CalendarGregorian.dateInterval(of:for:)( (Foundation::Calendar::Component)&v39,  COERCE_FOUNDATION_DATE(v34 + 1.0));
  double v10 = v34;
  double v9 = v35;
  char v39 = v3;
  char v37 = 2;
  Swift::Double time = v34 + 0.1;
  Swift::Int v11 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( &v39,  &v37,  &time,  (uint64_t)&v34,  v8);
  if ((v13 & 1) != 0) {
    return 0LL;
  }
  Swift::Int v5 = v11;
  double v14 = v9 + v10;
  char v39 = v3;
  char v37 = 2;
  Swift::Double time = v14 + -0.1;
  Swift::Int result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( &v39,  &v37,  &time,  (uint64_t)&v34,  v12);
  if ((v16 & 1) != 0) {
    return 0LL;
  }
  if (result < v5) {
    return v5;
  }
  Swift::Int v17 = result + 1;
  if (__OFADD__(result, 1LL))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  if (v17 >= v5)
  {
    double v18 = v6 + v7 + -1.0;
    v19._Swift::Double time = v14 + 1.0;
    if (v14 + 1.0 < v18)
    {
      uint64_t v20 = -13LL;
      Swift::Int v21 = v5;
      while (1)
      {
        char v39 = 2;
        Swift::Double time = v19._time;
        *(void *)&double v22 = (unint64_t)_CalendarGregorian.dateInterval(of:for:)( (Foundation::Calendar::Component)&v39,  v19);
        if ((v36 & 1) != 0) {
          return v21;
        }
        double v24 = v34;
        double v23 = v35;
        char v39 = v3;
        char v37 = 2;
        Swift::Double time = v34 + 0.1;
        Swift::Int v25 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( &v39,  &v37,  &time,  (uint64_t)&v34,  v22);
        if ((v27 & 1) != 0) {
          return v21;
        }
        Swift::Int v5 = v25;
        double v28 = v23 + v24;
        char v39 = v3;
        char v37 = 2;
        Swift::Double time = v28 + -0.1;
        Swift::Int result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( &v39,  &v37,  &time,  (uint64_t)&v34,  v26);
        if ((v29 & 1) != 0) {
          return v21;
        }
        if (v21 == v17) {
          break;
        }
        if (v5 >= v21) {
          Swift::Int v5 = v21;
        }
        Swift::Int v30 = v17 - v21;
        if (__OFSUB__(v17, v21)) {
          goto LABEL_33;
        }
        BOOL v31 = __OFADD__(v5, v30);
        Swift::Int v32 = v5 + v30;
        if (v31) {
          goto LABEL_34;
        }
        Swift::Int v17 = v32 + result;
        if (__OFADD__(v32, result)) {
          goto LABEL_35;
        }
        if (v17 < v5) {
          goto LABEL_36;
        }
        v19._Swift::Double time = v28 + 1.0;
        BOOL v33 = v28 + 1.0 >= v18 || v20++ == 0;
        Swift::Int v21 = v5;
        if (v33) {
          return v5;
        }
      }

      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    return v5;
  }

Swift::Int _CalendarGregorian._algorithmC(smaller:larger:at:)(char *a1, char *a2, void *a3)
{
  char v3 = *a1;
  *(Foundation::Date *)&v4._Swift::Double time = (Foundation::Date)*a3;
  char v16 = *a2;
  Swift::Double time = v4._time;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v16, v4);
  if ((v13 & 1) != 0) {
    return 0LL;
  }
  double v6 = v12[0];
  double v5 = v12[1];
  char v16 = v3;
  char v14 = 1;
  Swift::Double time = v12[0] + 0.1;
  Swift::Int v7 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( &v16,  &v14,  &time,  (uint64_t)v12,  0.1);
  if ((v8 & 1) != 0) {
    return 0LL;
  }
  Swift::Int v9 = v7;
  char v16 = v3;
  char v14 = 1;
  Swift::Double time = v5 + v6 + -0.1;
  Swift::Int result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( &v16,  &v14,  &time,  (uint64_t)v12,  v5 + v6);
  if ((v11 & 1) != 0) {
    return 0LL;
  }
  if (result < v9) {
    return v9;
  }
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else if (result + 1 >= v9)
  {
    return v9;
  }

  __break(1u);
  return result;
}

Swift::Int _CalendarGregorian._algorithmD(at:)(double *a1, double a2)
{
  double v2 = *a1;
  char v14 = 10;
  double v13 = v2;
  unint64_t v3 = (unint64_t)_CalendarGregorian.dateInterval(of:for:)( (Foundation::Calendar::Component)&v14,  *(Foundation::Date *)&a2);
  if ((v11 & 1) != 0) {
    return 0LL;
  }
  char v14 = 2;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v14, (Foundation::Date)v3);
  double v4 = v10[1] + v10[0];
  char v14 = 3;
  char v12 = 2;
  double v13 = v10[0] + 0.1;
  Swift::Int v5 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( &v14,  &v12,  &v13,  (uint64_t)v10,  0.1);
  if ((v6 & 1) != 0) {
    return 0LL;
  }
  Swift::Int v7 = v5;
  char v14 = 3;
  char v12 = 2;
  double v13 = v4 + -0.1;
  Swift::Int result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( &v14,  &v12,  &v13,  (uint64_t)v10,  -0.1);
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  if (result < v7) {
    return v7;
  }
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else if (result + 1 >= v7)
  {
    return v7;
  }

  __break(1u);
  return result;
}

void _CalendarGregorian.range(of:in:for:)(_BYTE *a1, _BYTE *a2, double *a3)
{
  unsigned int v4 = *a2;
  if (v4 > 0xF || ((1 << v4) & 0xE100) == 0)
  {
    unsigned int v6 = *a1;
    double v7 = *a3;
    switch(*a1)
    {
      case 4:
        if (v4 - 4 >= 3)
        {
          char v8 = 4;
          goto LABEL_20;
        }

        break;
      case 5:
        if (v4 - 5 >= 2)
        {
          char v8 = 5;
          goto LABEL_20;
        }

        break;
      case 6:
        if (v4 != 6)
        {
          char v8 = 6;
          goto LABEL_20;
        }

        break;
      case 7:
        if (v4 - 3 >= 5)
        {
          char v8 = 7;
          goto LABEL_20;
        }

        break;
      case 0xD:
        char v8 = 13;
LABEL_20:
        LOBYTE(v15[0]) = v8;
LABEL_21:
        _CalendarGregorian.maximumRange(of:)((uint64_t)v15);
        break;
      default:
        switch(*a2)
        {
          case 0:
            if (v6 <= 0xB && ((1 << v6) & 0xE0E) != 0)
            {
              LOBYTE(v15[0]) = *a1;
              goto LABEL_21;
            }

            break;
          case 1:
            switch(*a1)
            {
              case 3:
              case 0x11:
                uint64_t v14 = 2LL;
                double v13 = v7;
                *(_OWORD *)char v12 = *(_OWORD *)(v3 + 104);
                swift_unknownObjectRetain();
                _CalendarGregorian.dateComponents(_:from:in:)(&v14, &v13, v12, v15);
                swift_unknownObjectRelease();
                outlined release of DateComponents((uint64_t)v15);
                if ((v16 & 1) != 0)
                {
                  __break(1u);
                  JUMPOUT(0x18332D904LL);
                }

                return;
              case 8:
              case 0xA:
                LOBYTE(v12[0]) = *a1;
                char v10 = 1;
                goto LABEL_40;
              case 9:
              case 0xB:
                LOBYTE(v12[0]) = *a1;
                char v9 = 1;
                goto LABEL_42;
              default:
                return;
            }

          case 2:
            switch(*a1)
            {
              case 3:
              case 8:
              case 0xA:
                LOBYTE(v12[0]) = *a1;
                char v9 = 2;
                goto LABEL_42;
              case 0xB:
                LOBYTE(v12[0]) = 11;
                char v11 = 2;
                goto LABEL_44;
              default:
                return;
            }

          case 9:
            if (v6 <= 0xB)
            {
              if (((1 << v6) & 0x508) != 0)
              {
                LOBYTE(v12[0]) = *a1;
                char v10 = 9;
                goto LABEL_40;
              }

              if (((1 << v6) & 0x804) != 0)
              {
                LOBYTE(v12[0]) = *a1;
                char v11 = 9;
LABEL_44:
                LOBYTE(v14) = v11;
                v15[0] = v7;
                _CalendarGregorian._algorithmC(smaller:larger:at:)((char *)v12, (char *)&v14, v15);
              }
            }

            break;
          case 0xA:
            if (v6 == 3)
            {
              v15[0] = *a3;
              _CalendarGregorian._algorithmD(at:)(v15, v7);
            }

            break;
          case 0xC:
            if (v6 <= 0xB)
            {
              if (((1 << v6) & 0xA04) != 0)
              {
                LOBYTE(v12[0]) = *a1;
                char v9 = 12;
LABEL_42:
                LOBYTE(v14) = v9;
                v15[0] = v7;
                _CalendarGregorian._algorithmA(smaller:larger:at:)((char *)v12, (char *)&v14, v15);
              }

              else if (((1 << v6) & 0x108) != 0)
              {
                LOBYTE(v12[0]) = *a1;
                char v10 = 12;
LABEL_40:
                LOBYTE(v14) = v10;
                v15[0] = v7;
                _CalendarGregorian._algorithmB(smaller:larger:at:)((char *)v12, (char *)&v14, v15);
              }
            }

            break;
          default:
            return;
        }

        break;
    }
  }

Swift::Int __swiftcall _CalendarGregorian.dateComponent(_:from:)( Foundation::Calendar::Component _, Foundation::Date from)
{
  uint64_t v4 = *(unsigned __int8 *)_;
  uint64_t v5 = *v2;
  uint64_t v9 = qword_183823A40[(char)v4];
  uint64_t v8 = v5;
  *(_OWORD *)double v7 = *(_OWORD *)(v3 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v9, (double *)&v8, v7, v10);
  swift_unknownObjectRelease();
  outlined release of DateComponents((uint64_t)v10);
  __asm { BR              X9 }

  return result;
}

uint64_t sub_18332DA50()
{
  if ((v2 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x18332DB54LL);
  }

  return v1;
}

void _CalendarGregorian.minMaxRange(of:in:)(unsigned __int8 *a1, const void *a2)
{
  uint64_t v2 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  __asm { BR              X9 }

uint64_t sub_18332DCC0()
{
  return 0LL;
}

uint64_t actualMax #1 (inRange:) in _CalendarGregorian.minMaxRange(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    JUMPOUT(0x18332E4E4LL);
  }

  uint64_t v6 = a2;
  if (a2 != a1)
  {
    _CalendarGregorian.date(from:)((__int128 *)a4, (uint64_t)__dst);
    if ((__dst[1] & 1) == 0)
    {
      double v10 = *(double *)__dst;
      if (*(void *)(a4 + 16))
      {
        uint64_t v11 = *(void *)(a4 + 24);
        uint64_t v12 = *(void *)(a4 + 16);
      }

      else
      {
        uint64_t v12 = *(void *)(a3 + 104);
        uint64_t v11 = *(void *)(a3 + 112);
        swift_unknownObjectRetain();
      }

      BOOL v13 = __OFADD__(a1, 1LL);
      swift_unknownObjectRetain();
      if (!v13)
      {
        unsigned __int8 v23 = a5;
        double v22 = v10;
        __dst[42] = v12;
        __dst[43] = v11;
        _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( &v23,  &v22,  1LL,  v24);
        uint64_t v19 = a6;
        double v18 = v24[0];
        v17[0] = v12;
        v17[1] = v11;
        _CalendarGregorian.dateComponents(_:from:in:)(&v19, &v18, v17, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        __asm { BR              X8 }
      }

      __break(1u);
      swift_unknownObjectRelease();
    }

    return 0LL;
  }

  return v6;
}

uint64_t _CalendarGregorian.date(from:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v6 = a1 + 2;
  __int128 __src = *a1;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  *(_OWORD *)((char *)v40 + 10) = *(__int128 *)((char *)a1 + 266);
  __int128 v7 = a1[15];
  __int128 v38 = a1[14];
  __int128 v39 = v7;
  v40[0] = a1[16];
  __int128 v8 = a1[11];
  __int128 v34 = a1[10];
  __int128 v35 = v8;
  __int128 v9 = a1[13];
  __int128 v36 = a1[12];
  __int128 v37 = v9;
  __int128 v10 = a1[7];
  __int128 v30 = a1[6];
  __int128 v31 = v10;
  __int128 v11 = a1[9];
  __int128 v32 = a1[8];
  __int128 v33 = v11;
  __int128 v12 = a1[3];
  __int128 v26 = a1[2];
  __int128 v27 = v12;
  __int128 v13 = a1[5];
  __int128 v28 = a1[4];
  __int128 v29 = v13;
  uint64_t result = specialized static _CalendarGregorian.isComponentsInSupportedRange(_:)((uint64_t)&__src);
  if ((result & 1) != 0)
  {
    __int128 __src = *a1;
    uint64_t v24 = v4;
    uint64_t v25 = v5;
    *(_OWORD *)((char *)v40 + 10) = *(__int128 *)((char *)v6 + 234);
    __int128 v15 = v6[13];
    __int128 v38 = v6[12];
    __int128 v39 = v15;
    v40[0] = v6[14];
    __int128 v16 = v6[9];
    __int128 v34 = v6[8];
    __int128 v35 = v16;
    __int128 v17 = v6[11];
    __int128 v36 = v6[10];
    __int128 v37 = v17;
    __int128 v18 = v6[5];
    __int128 v30 = v6[4];
    __int128 v31 = v18;
    __int128 v19 = v6[7];
    __int128 v32 = v6[6];
    __int128 v33 = v19;
    __int128 v20 = v6[1];
    __int128 v26 = *v6;
    __int128 v27 = v20;
    __int128 v21 = v6[3];
    __int128 v28 = v6[2];
    __int128 v29 = v21;
    if (!v4) {
      swift_unknownObjectRetain();
    }
    swift_unknownObjectRetain();
    _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(&__src);
    uint64_t result = swift_unknownObjectRelease();
    *(void *)a2 = v22;
    *(_BYTE *)(a2 + 8) = 0;
  }

  else
  {
    *(void *)a2 = 0LL;
    *(_BYTE *)(a2 + 8) = 1;
  }

  return result;
}

unsigned __int8 *_s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF@<X0>( unsigned __int8 *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  double v4 = *a2;
  if (a3)
  {
    uint64_t v5 = *result;
    fmod(v4, 1.0);
    __asm { BR              X10 }
  }

  *a4 = v4;
  return result;
}

void sub_18332EE48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _BYTE *a18)
{
  STACK[0x3D0] = 14577LL;
  STACK[0x2B0] = v25;
  STACK[0x4F0] = v21;
  STACK[0x4F8] = v20;
  _CalendarGregorian.dateComponents(_:from:in:)( (uint64_t *)&STACK[0x3D0],  (double *)&STACK[0x2B0],  (uint64_t *)&STACK[0x4F0],  &STACK[0x610]);
  unint64_t v26 = STACK[0x630];
  char v27 = STACK[0x638];
  unint64_t v28 = v19;
  if ((STACK[0x638] & 1) != 0 || (unint64_t v28 = v19, v26) || (unint64_t v28 = -(uint64_t)v19, !__OFSUB__(0LL, v19)))
  {
    if ((v23[16] & 1) != 0 || (v29 = STACK[0x720], BOOL v30 = __OFADD__(STACK[0x720], v28), v28 += STACK[0x720], !v30))
    {
      BOOL v34 = v28 == 0x7FFFFFFFFFFFFFFFLL;
      if (v28 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v35 = 0LL;
      }
      else {
        unint64_t v35 = v28;
      }
      STACK[0x720] = v35;
      v23[16] = v34;
      unint64_t v36 = STACK[0x660];
      char v37 = STACK[0x668];
      Swift::Int v38 = STACK[0x650];
      char v39 = LOBYTE(STACK[0x668]) ^ 1 | LOBYTE(STACK[0x658]);
      if ((STACK[0x668] & 1) == 0 && (STACK[0x658] & 1) == 0)
      {
        if ((STACK[0x648] & 1) != 0)
        {
          char v39 = 0;
        }

        else
        {
          uint64_t v49 = STACK[0x650];
          v48[0] = v27;
          uint64_t v46 = v35;
          uint64_t v47 = v26;
          BOOL v45 = v34;
          uint64_t v43 = STACK[0x660];
          v44[0] = STACK[0x668];
          Swift::Int v40 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(v38, STACK[0x640]);
          char v37 = v44[0];
          BOOL v34 = v45;
          unint64_t v35 = v46;
          unint64_t v26 = v47;
          char v27 = v48[0];
          char v39 = 0;
          if (v43 <= 1) {
            uint64_t v41 = 1LL;
          }
          else {
            uint64_t v41 = v43;
          }
          if (v40 >= v43) {
            unint64_t v36 = v41;
          }
          else {
            unint64_t v36 = v40;
          }
          Swift::Int v38 = v49;
        }
      }

      *a18 = *v23;
      a18[16] = v34;
      STACK[0x510] = v26;
      LOBYTE(STACK[0x518]) = v27;
      STACK[0x520] = STACK[0x640];
      LOBYTE(STACK[0x528]) = STACK[0x648];
      STACK[0x530] = v38;
      LOBYTE(STACK[0x538]) = v39;
      STACK[0x540] = v36;
      LOBYTE(STACK[0x548]) = v37;
      STACK[0x550] = STACK[0x670];
      LOBYTE(STACK[0x558]) = STACK[0x678];
      STACK[0x560] = STACK[0x680];
      LOBYTE(STACK[0x568]) = STACK[0x688];
      STACK[0x570] = STACK[0x690];
      LOBYTE(STACK[0x578]) = STACK[0x698];
      STACK[0x580] = STACK[0x6A0];
      LOBYTE(STACK[0x588]) = STACK[0x6A8];
      STACK[0x590] = STACK[0x6B0];
      LOBYTE(STACK[0x598]) = STACK[0x6B8];
      STACK[0x5A0] = STACK[0x6C0];
      LOBYTE(STACK[0x5A8]) = STACK[0x6C8];
      STACK[0x5B0] = STACK[0x6D0];
      LOBYTE(STACK[0x5B8]) = STACK[0x6D8];
      STACK[0x5C0] = STACK[0x6E0];
      LOBYTE(STACK[0x5C8]) = STACK[0x6E8];
      STACK[0x5D0] = STACK[0x6F0];
      LOBYTE(STACK[0x5D8]) = STACK[0x6F8];
      STACK[0x5E0] = STACK[0x700];
      LOBYTE(STACK[0x5E8]) = STACK[0x708];
      STACK[0x5F0] = STACK[0x710];
      STACK[0x600] = v35;
      LOBYTE(STACK[0x609]) = STACK[0x729];
      __int128 v42 = *(_OWORD *)&STACK[0x620];
      *(_OWORD *)&STACK[0x4F0] = *(_OWORD *)&STACK[0x610];
      *(_OWORD *)&STACK[0x500] = v42;
      memcpy(&STACK[0x3D0], &STACK[0x4F0], 0x11AuLL);
      outlined retain of DateComponents((uint64_t)&STACK[0x4F0]);
      _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(&STACK[0x3D0]);
      outlined release of DateComponents((uint64_t)&STACK[0x4F0]);
      outlined release of DateComponents((uint64_t)&STACK[0x4F0]);
      if (v18) {
        JUMPOUT(0x18332F478LL);
      }
      JUMPOUT(0x18332F490LL);
    }

    *(void *)uint64_t v22 = 12LL;
    *(void *)(v22 + 8) = v24;
    *(void *)(v22 + 16) = 0LL;
    *(void *)(v22 + 24) = 0LL;
    *(_BYTE *)(v22 + 32) = 1;
    STACK[0x3D0] = 12LL;
    STACK[0x3D8] = v24;
    STACK[0x3E8] = 0LL;
    STACK[0x3E0] = 0LL;
    LOBYTE(STACK[0x3F0]) = 1;
    char v31 = v27;
    unint64_t v32 = v26;
    lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
    swift_willThrowTypedImpl();
    STACK[0x510] = v32;
    LOBYTE(STACK[0x518]) = v31;
    STACK[0x520] = STACK[0x640];
    LOBYTE(STACK[0x528]) = STACK[0x648];
    STACK[0x530] = STACK[0x650];
    LOBYTE(STACK[0x538]) = STACK[0x658];
    STACK[0x540] = STACK[0x660];
    LOBYTE(STACK[0x548]) = STACK[0x668];
    STACK[0x550] = STACK[0x670];
    LOBYTE(STACK[0x558]) = STACK[0x678];
    STACK[0x560] = STACK[0x680];
    LOBYTE(STACK[0x568]) = STACK[0x688];
    STACK[0x570] = STACK[0x690];
    LOBYTE(STACK[0x578]) = STACK[0x698];
    STACK[0x580] = STACK[0x6A0];
    LOBYTE(STACK[0x588]) = STACK[0x6A8];
    STACK[0x590] = STACK[0x6B0];
    LOBYTE(STACK[0x598]) = STACK[0x6B8];
    STACK[0x5A0] = STACK[0x6C0];
    LOBYTE(STACK[0x5A8]) = STACK[0x6C8];
    STACK[0x5B0] = STACK[0x6D0];
    LOBYTE(STACK[0x5B8]) = STACK[0x6D8];
    STACK[0x5C0] = STACK[0x6E0];
    LOBYTE(STACK[0x5C8]) = STACK[0x6E8];
    STACK[0x5D0] = STACK[0x6F0];
    LOBYTE(STACK[0x5D8]) = STACK[0x6F8];
    STACK[0x5E0] = STACK[0x700];
    LOBYTE(STACK[0x5E8]) = STACK[0x708];
    *a18 = *v23;
    STACK[0x5F0] = STACK[0x710];
    STACK[0x600] = v29;
    a18[16] = 0;
    LOBYTE(STACK[0x609]) = STACK[0x729];
    __int128 v33 = *(_OWORD *)&STACK[0x620];
    *(_OWORD *)&STACK[0x4F0] = *(_OWORD *)&STACK[0x610];
    *(_OWORD *)&STACK[0x500] = v33;
    JUMPOUT(0x18332F068LL);
  }

  __break(1u);
  JUMPOUT(0x18332F518LL);
}

void sub_18332F078()
{
}

void *_CalendarGregorian.dateComponents(_:from:in:)@<X0>( uint64_t *a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = v5;
  uint64_t v12 = *a1;
  double v13 = *a2;
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__int128 __src = v13;
  double v17 = v13 + (double)(*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v15 + 40))(__src, ObjectType, v15);
  double v18 = floor(v17);
  double v19 = *(double *)(v5 + 72);
  double v20 = 86400.0;
  double v21 = remainder(v18, 86400.0);
  if (v21 < 0.0) {
    double v21 = v21 + 86400.0;
  }
  double v22 = v21 / 3600.0;
  if (v21 / 3600.0 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_230;
  }

  if (v22 >= 9.22337204e18)
  {
LABEL_230:
    __break(1u);
    goto LABEL_231;
  }

  double v23 = fmod(v21, 3600.0);
  double v9 = v23 / 60.0;
  if (v23 / 60.0 <= -9.22337204e18)
  {
LABEL_231:
    __break(1u);
    goto LABEL_232;
  }

  if (v9 >= 9.22337204e18)
  {
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }

  double v20 = fmod(v23, 60.0);
  if (v20 <= -9.22337204e18)
  {
LABEL_233:
    __break(1u);
    goto LABEL_234;
  }

  if (v20 >= 9.22337204e18)
  {
LABEL_234:
    __break(1u);
LABEL_235:
    __break(1u);
    goto LABEL_236;
  }

  double v17 = (v17 - v18) * 1000000000.0;
  if ((~*(void *)&v17 & 0x7FF0000000000000LL) == 0
    || (*(void *)&v20 & 0x7FF0000000000000LL) == 0x7FF0000000000000LL)
  {
    goto LABEL_235;
  }

  if ((*(void *)&v22 & 0x7FF0000000000000LL) == 0x7FF0000000000000LL
    || (*(void *)&v9 & 0x7FF0000000000000LL) == 0x7FF0000000000000LL)
  {
    goto LABEL_235;
  }

  if (v17 <= -9.22337204e18)
  {
LABEL_236:
    __break(1u);
    goto LABEL_237;
  }

  if (v17 >= 9.22337204e18)
  {
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
    goto LABEL_239;
  }

  double v26 = floor(v18 / 86400.0 + 2451910.5 + 0.5);
  if (v26 > 2130706430.0 || v26 < -2130706430.0)
  {
    *(void *)&__src[0] = 18LL;
    *((double *)__src + 1) = v18;
    __src[1] = 0uLL;
LABEL_47:
    LOBYTE(__src[2]) = 1;
    lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
    swift_willThrowTypedImpl();
    char v41 = 0;
    Swift::Int dayOfPeriod = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    Swift::Int v6 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v114 = 0x7FFFFFFFFFFFFFFFLL;
    Swift::Int v117 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_48;
  }

  if ((~*(void *)&v26 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_238;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_239:
    __break(1u);
    goto LABEL_240;
  }

  if (v26 >= 9.22337204e18)
  {
LABEL_240:
    __break(1u);
LABEL_241:
    __break(1u);
    goto LABEL_242;
  }

  uint64_t v28 = (uint64_t)v26;
  uint64_t v29 = specialized static _CalendarGregorian.yearMonthDayFromJulianDay(_:useJulianRef:)((uint64_t)v26, v18 < v19);
  uint64_t v7 = v29;
  Swift::Int v6 = *(void *)(v10 + 64);
  uint64_t v32 = v29 & 3;
  BOOL v33 = (v29 & 3) == 0 && v29 < v6;
  if (v29 >= v6 && v32 == 0)
  {
    BOOL v35 = __ROR8__(0x8F5C28F5C28F5C29LL * v29 + 0x51EB851EB851EB0LL, 4) < 0xA3D70A3D70A3D7uLL;
    BOOL v33 = __ROR8__(0x8F5C28F5C28F5C29LL * v29 + 0x51EB851EB851EB8LL, 2) > 0x28F5C28F5C28F5CuLL || v35;
  }

  uint64_t v36 = v30 - 2;
  if (__OFSUB__(v30, 2LL)) {
    goto LABEL_241;
  }
  uint64_t v37 = v29 + 4716;
  if (__OFADD__(v29, 4716LL))
  {
LABEL_46:
    __src[0] = xmmword_1837BEE50;
    __src[1] = xmmword_18372C2E0;
    goto LABEL_47;
  }

  if (__OFSUB__(12LL, v36))
  {
    __break(1u);
    goto LABEL_244;
  }

  uint64_t v38 = (14 - v30) / 12;
  BOOL v39 = __OFSUB__(v37, v38);
  uint64_t v40 = v37 - v38;
  if (v39)
  {
LABEL_244:
    __break(1u);
    goto LABEL_245;
  }

  if (__OFSUB__(v36, 1LL))
  {
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }

  if (__OFADD__(v30 - 3, 12LL))
  {
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
    goto LABEL_248;
  }

  Swift::Int v58 = v31 + 1461 * v40 / 4;
  if (__OFADD__(v31, 1461 * v40 / 4))
  {
LABEL_248:
    __break(1u);
    goto LABEL_249;
  }

  BOOL v39 = __OFSUB__(v58, 1LL);
  Swift::Int v59 = v58 - 1;
  if (v39)
  {
LABEL_249:
    __break(1u);
    goto LABEL_250;
  }

  BOOL v39 = __OFSUB__(v59, 1401LL);
  Swift::Int v60 = v59 - 1401;
  if (v39)
  {
LABEL_250:
    __break(1u);
    goto LABEL_251;
  }

  int v61 = 26215 * (__int16)(153 * ((__int16)(v30 + 9) % 12) + 2);
  BOOL v39 = __OFADD__(v60, (int)((v61 >> 17) + (v61 >> 31)));
  Swift::Int v62 = v60 + (int)((v61 >> 17) + (v61 >> 31));
  if (v39)
  {
LABEL_251:
    __break(1u);
    goto LABEL_252;
  }

  uint64_t v63 = 3 * ((v40 + 184) / 100);
  Swift::Int v64 = v62 - v63 / 4;
  if (__OFSUB__(v62, v63 / 4))
  {
LABEL_252:
    __break(1u);
    goto LABEL_253;
  }

  Swift::Int v65 = v64 + 38;
  if (__OFADD__(v64, 38LL))
  {
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }

  if (v29 < v6)
  {
    uint64_t v66 = 4LL;
    goto LABEL_130;
  }

  if ((v29 & 3) != 0)
  {
    uint64_t v67 = &outlined read-only object #0 of _CalendarGregorian.dateComponents(_:from:in:);
    unint64_t v68 = v30 - 1;
    if (v30 >= 1) {
      goto LABEL_134;
    }
    goto LABEL_146;
  }

  if (__ROR8__(0x8F5C28F5C28F5C29LL * v29 + 0x51EB851EB851EB8LL, 2) >= 0x28F5C28F5C28F5DuLL)
  {
    uint64_t v67 = &outlined read-only object #1 of _CalendarGregorian.dateComponents(_:from:in:);
    unint64_t v68 = v30 - 1;
    if (v30 >= 1) {
      goto LABEL_134;
    }
LABEL_146:
    __break(1u);
    goto LABEL_147;
  }

  uint64_t v66 = 400LL;
LABEL_130:
  if (v29 % v66) {
    uint64_t v67 = &outlined read-only object #0 of _CalendarGregorian.dateComponents(_:from:in:);
  }
  else {
    uint64_t v67 = &outlined read-only object #1 of _CalendarGregorian.dateComponents(_:from:in:);
  }
  unint64_t v68 = v30 - 1;
  if (v30 < 1) {
    goto LABEL_146;
  }
LABEL_134:
  uint64_t v118 = v30;
  uint64_t v119 = v28;
  uint64_t v115 = v32;
  Swift::Int v117 = v15;
  Swift::Int dayOfPeriod = v31;
  if (v68 >= v67[2])
  {
LABEL_254:
    __break(1u);
    goto LABEL_255;
  }

  unint64_t v4 = (unint64_t)a4;
  Swift::Int v69 = v65;
  BOOL v70 = v33;
  Swift::Int v71 = *(void *)(v10 + 56);
  uint64_t v72 = v67[v68 + 4];
  swift_bridgeObjectRelease();
  unint64_t v122 = v72 + dayOfPeriod;
  if (__OFADD__(v72, dayOfPeriod))
  {
LABEL_255:
    __break(1u);
    goto LABEL_256;
  }

  char v41 = v70;
  if (v7 != v6)
  {
    a4 = (void *)v4;
    goto LABEL_162;
  }

  BOOL v104 = v69 < v71;
  a4 = (void *)v4;
  if (v104) {
    goto LABEL_162;
  }
  uint64_t v73 = v7 - 1;
  if (__OFSUB__(v7, 1LL))
  {
LABEL_264:
    __break(1u);
    goto LABEL_265;
  }

  uint64_t v74 = ((unsigned __int128)(v73 * (__int128)0x5C28F5C28F5C28F5LL) >> 64) - v73;
  uint64_t v75 = v73 / 400 + (v74 >> 6) + ((unint64_t)v74 >> 63) + 2;
  BOOL v39 = __OFADD__(v122, v75);
  v122 += v75;
  if (!v39)
  {
LABEL_162:
    if (__OFADD__(v119, 1LL))
    {
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
      goto LABEL_258;
    }

    uint64_t v79 = (v119 + 1) % 7;
    if (v79 >= 0) {
      uint64_t v80 = (v119 + 1) % 7;
    }
    else {
      uint64_t v80 = v79 + 7;
    }
    uint64_t v81 = _CalendarGregorian.firstWeekday.getter();
    uint64_t v82 = v80 + 8 - v81;
    if (__OFSUB__(v80 + 8, v81)) {
      goto LABEL_257;
    }
    Swift::Int weekdaya = v80 + 1;
    unint64_t v83 = v80 + 1 - v122;
    if (__OFSUB__(v80 + 1, v122))
    {
LABEL_258:
      __break(1u);
      goto LABEL_259;
    }

    unint64_t v84 = v83 + 7001;
    if (__OFADD__(v83, 7001LL))
    {
LABEL_259:
      __break(1u);
      goto LABEL_260;
    }

    uint64_t v85 = _CalendarGregorian.firstWeekday.getter();
    uint64_t v86 = v84 - v85;
    if (__OFSUB__(v84, v85))
    {
LABEL_260:
      __break(1u);
      goto LABEL_261;
    }

    uint64_t v120 = v82;
    Swift::Int v87 = v122;
    unint64_t v88 = v122 - 1;
    if (__OFSUB__(v122, 1LL))
    {
LABEL_261:
      __break(1u);
      goto LABEL_262;
    }

    uint64_t v89 = (uint64_t)((unsigned __int128)(v86 * (__int128)0x4924924924924925LL) >> 64) >> 1;
    uint64_t v90 = v86 % 7;
    BOOL v39 = __OFADD__(v88, v86 % 7);
    int64_t v91 = v88 + v86 % 7;
    if (v39)
    {
LABEL_262:
      __break(1u);
      goto LABEL_263;
    }

    uint64_t v113 = v91 / 7;
    if (*(_BYTE *)(v10 + 144) == 1)
    {
      if (!*(void *)(v10 + 88))
      {
LABEL_177:
        ++v113;
LABEL_178:
        uint64_t v109 = a4;
        if (v113)
        {
          uint64_t v15 = v117;
          if (v7 >= v6)
          {
            if (v115) {
              goto LABEL_189;
            }
            if (__ROR8__(0x8F5C28F5C28F5C29LL * v7 + 0x51EB851EB851EB8LL, 2) >= 0x28F5C28F5C28F5DuLL)
            {
LABEL_197:
              Swift::Int v6 = 366LL;
              goto LABEL_198;
            }

            uint64_t v94 = 400LL;
          }

          else
          {
            uint64_t v94 = 4LL;
          }

          if (!(v7 % v94)) {
            goto LABEL_197;
          }
LABEL_189:
          Swift::Int v6 = 365LL;
LABEL_198:
          if (v87 < v6 - 5)
          {
            uint64_t v119 = v7;
            Swift::Int v6 = v113;
LABEL_224:
            Swift::Int v98 = weekdaya;
            goto LABEL_225;
          }

          uint64_t v89 = v120 % 7;
          uint64_t v99 = (v120 % 7 - v87 + v6) % 7;
          if (v99 >= 0) {
            uint64_t v15 = (v120 % 7 - v87 + v6) % 7;
          }
          else {
            uint64_t v15 = v99 + 7;
          }
          if (*(_BYTE *)(v10 + 144) != 1)
          {
            uint64_t v101 = *(void *)(v10 + 136);
LABEL_207:
            if (6 - v15 < v101)
            {
LABEL_208:
              uint64_t v119 = v7;
              uint64_t v15 = v117;
              Swift::Int v6 = v113;
              goto LABEL_224;
            }

LABEL_214:
          if (v15 > 5) {
            goto LABEL_208;
          }
          goto LABEL_215;
        }

        Swift::Int v95 = v7 - 1;
        uint64_t v15 = v117;
        if (__OFSUB__(v7, 1LL))
        {
LABEL_265:
          __break(1u);
          goto LABEL_266;
        }

        uint64_t v119 = v7 - 1;
        if (v95 >= v6)
        {
          if ((v95 & 3) != 0) {
            goto LABEL_194;
          }
          if (__ROR8__(0x8F5C28F5C28F5C29LL * v119 + 0x51EB851EB851EB8LL, 2) >= 0x28F5C28F5C28F5DuLL) {
            goto LABEL_211;
          }
          uint64_t v96 = 400LL;
        }

        else
        {
          uint64_t v96 = 4LL;
        }

        if (!(v119 % v96))
        {
LABEL_211:
          Swift::Int v97 = v87 + 366;
          if (!__OFADD__(v87, 366LL)) {
            goto LABEL_195;
          }
          goto LABEL_213;
        }

              uint64_t v105 = (v112 - 1) & v112;
              uint64_t v108 = __clz(__rbit64(v112)) + (v101 << 6);
            }

            uint64_t v109 = (unint64_t *)(*(void *)(v57 + 48) + 16 * v108);
            uint64_t v110 = *v109;
            double v9 = v109[1];
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)((unint64_t *)&v164, v110, v9);
            uint64_t result = swift_bridgeObjectRelease();
          }
        }

Swift::Int __swiftcall _CalendarGregorian.numberOfDaysInMonth(_:year:)(Swift::Int _, Swift::Int year)
{
  if (_ >= 13)
  {
    unint64_t v3 = (_ - 1) / 0xCuLL;
    BOOL v4 = __OFADD__(year, v3);
    year += v3;
    if (!v4)
    {
      _ = (_ - 1) % 0xCuLL + 1;
      goto LABEL_8;
    }

    __break(1u);
    goto LABEL_25;
  }

  if (_ <= 0)
  {
    unint64_t v5 = -_ / 0xCuLL;
    unint64_t v6 = year + v5;
    if (__OFSUB__(year, -(uint64_t)v5))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    year = v6 - 1;
    if (__OFSUB__(v6, 1LL))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    _ += 12 * v5 + 12;
  }

Foundation::Date_optional __swiftcall _CalendarGregorian.firstInstant(of:at:)( Foundation::Calendar::Component of, Foundation::Date at)
{
  uint64_t v4 = v3;
  unint64_t v5 = *v2;
  LOBYTE(v20[0]) = *(_BYTE *)of;
  id v22 = v5;
  v8._Swift::Double time = _CalendarGregorian._firstInstant(of:at:)((Foundation::Calendar::Component)v20, at)._time;
  if (*(Foundation::Date *)&v7._time)
  {
    id v22 = *(id *)&v7._time;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (!swift_dynamicCast())
    {

      char v6 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_16;
    }

    if (v21 < 0)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static _CalendarGregorian.logger);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11)) {
        goto LABEL_14;
      }
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v20[0] = v13;
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v18 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      __int128 v16 = "Not advancing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }

    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static _CalendarGregorian.logger);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11)) {
        goto LABEL_14;
      }
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v20[0] = v13;
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v14 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      __int128 v16 = "Overflowing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }

    _os_log_impl(&dword_182EB1000, v10, v11, v16, (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E20E60](v13, -1LL, -1LL);
    MEMORY[0x186E20E60](v12, -1LL, -1LL);
LABEL_14:

    *(void *)uint64_t v4 = 0LL;
    *(_BYTE *)(v4 + 8) = 1;

    goto LABEL_16;
  }

  *(void *)uint64_t v4 = v20[1];
  *(_BYTE *)(v4 + 8) = 0;
LABEL_16:
  result.Swift::Int value = v8;
  result.is_nil = v6;
  return result;
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _CalendarGregorian._firstInstant(of:at:)( Foundation::Calendar::Component of, Foundation::Date at)
{
  void (*v31)(void *__return_ptr, void, void);
  char v32;
  void *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  double v67;
  Foundation::Date result;
  __int128 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  double v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  double v82;
  unsigned __int8 v83;
  double v84;
  char v85;
  _OWORD v86[18];
  _OWORD v87[18];
  uint64_t v88[36];
  uint64_t __dst[37];
  __int128 __src[18];
  double v91;
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  Foundation::Date v8 = v3;
  uint64_t v9 = *v2;
  unsigned int v10 = *(unsigned __int8 *)of;
  if (v10 - 10 >= 3) {
    uint64_t v11 = 8319LL;
  }
  else {
    uint64_t v11 = 14577LL;
  }
  v88[0] = v11;
  *(void *)&v87[0] = v9;
  *(_OWORD *)__dst = *(_OWORD *)(v4 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(v88, (double *)v87, __dst, __src);
  swift_unknownObjectRelease();
  switch(v10)
  {
    case 0u:
      LOBYTE(v88[0]) = 1;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v88, __src);
      uint64_t v13 = v12;
      char v15 = v14;
      outlined release of DateComponents((uint64_t)__dst);
      if ((v15 & 1) != 0) {
        uint64_t v16 = 0LL;
      }
      else {
        uint64_t v16 = v13;
      }
      *(void *)&__src[3] = v16;
      BYTE8(__src[3]) = v15 & 1;
      goto LABEL_9;
    case 1u:
LABEL_9:
      LOBYTE(v88[0]) = 2;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v88, __src);
      uint64_t v18 = v17;
      char v20 = v19;
      outlined release of DateComponents((uint64_t)__dst);
      if ((v20 & 1) != 0) {
        uint64_t v21 = 0LL;
      }
      else {
        uint64_t v21 = v18;
      }
      *(void *)&__src[4] = v21;
      BYTE8(__src[4]) = v20 & 1;
      BYTE9(__src[17]) = 0;
      goto LABEL_44;
    case 2u:
      goto LABEL_44;
    case 3u:
    case 7u:
    case 8u:
    case 0x11u:
      goto LABEL_48;
    case 4u:
      goto LABEL_52;
    case 5u:
      goto LABEL_56;
    case 6u:
      goto LABEL_60;
    case 9u:
      if ((BYTE8(__src[4]) & 1) != 0) {
        goto LABEL_91;
      }
      BOOL v39 = *(void *)&__src[4] - 1LL;
      if (__OFSUB__(*(void *)&__src[4], 1LL)) {
        goto LABEL_80;
      }
      if (v39 > 0xC) {
        goto LABEL_81;
      }
      uint64_t v40 = outlined read-only object #2 of _CalendarGregorian._firstInstant(of:at:)[v39 + 4];
      char v41 = __OFADD__(v40, 1LL);
      uint64_t v42 = v40 + 1;
      if (v41) {
        goto LABEL_82;
      }
      uint64_t v43 = v42 == 0x7FFFFFFFFFFFFFFFLL;
      if (v42 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v42 = 0LL;
      }
      *(void *)&__src[4] = v42;
      uint64_t v44 = v43;
      BYTE8(__src[4]) = v44;
      BYTE9(__src[17]) = 0;
      unsigned int v10 = 2;
LABEL_44:
      LOBYTE(v88[0]) = 3;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v88, __src);
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      outlined release of DateComponents((uint64_t)__dst);
      if ((v48 & 1) != 0) {
        uint64_t v49 = 0LL;
      }
      else {
        uint64_t v49 = v46;
      }
      *(void *)&__src[5] = v49;
      BYTE8(__src[5]) = v48 & 1;
      goto LABEL_48;
    case 0xAu:
    case 0xBu:
      goto LABEL_15;
    case 0xCu:
      LOBYTE(v88[0]) = 1;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v88, __src);
      uint64_t v23 = v22;
      char v25 = v24;
      outlined release of DateComponents((uint64_t)__dst);
      if ((v25 & 1) != 0) {
        goto LABEL_90;
      }
      *(void *)&__src[16] = v23;
      BYTE8(__src[16]) = 0;
LABEL_15:
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.date(from:)(__src, (uint64_t)&v84);
      outlined release of DateComponents((uint64_t)__dst);
      if ((v85 & 1) != 0) {
        goto LABEL_88;
      }
      uint64_t v75 = v11;
      double v26 = v84;
      *(void *)&uint64_t v80 = 128LL;
      *(double *)&uint64_t v81 = v84;
      v86[0] = *(_OWORD *)(v7 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v80, (double *)&v81, (uint64_t *)v86, v87);
      swift_unknownObjectRelease();
      memcpy(v88, v87, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v88);
      if ((v88[23] & 1) != 0) {
        goto LABEL_89;
      }
      uint64_t v27 = v88[22];
      break;
    default:
      goto LABEL_61;
  }

  while (*(_BYTE *)(v7 + 128) != 1)
  {
    uint64_t v37 = *(void *)(v7 + 120);
LABEL_26:
    if (v27 == v37) {
      goto LABEL_76;
    }
LABEL_27:
    LOBYTE(v91) = 3;
    *(double *)&Swift::Int v77 = v26;
    uint64_t v80 = *(_OWORD *)(v7 + 104);
    swift_unknownObjectRetain();
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v91,  (double *)&v77,  -3LL,  (double *)&v81);
    if (v6) {
      goto LABEL_72;
    }
    swift_unknownObjectRelease();
    unint64_t v83 = 3;
    *(void *)&uint64_t v82 = v81;
    uint64_t v81 = *(_OWORD *)(v7 + 104);
    swift_unknownObjectRetain();
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( &v83,  &v82,  2LL,  &v91);
    uint64_t v6 = 0LL;
    swift_unknownObjectRelease();
    uint64_t v38 = v91;
    uint64_t v79 = 128LL;
    uint64_t v78 = v91;
    Swift::Int v77 = *(_OWORD *)(v7 + 104);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)(&v79, &v78, (uint64_t *)&v77, v86);
    swift_unknownObjectRelease();
    memcpy(v87, v86, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v87);
    if ((BYTE8(v87[11]) & 1) != 0) {
      goto LABEL_84;
    }
    if (v26 == v38 || v27 == *(void *)&v87[11])
    {
      lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
      swift_allocError();
      *(double *)uint64_t v74 = v38;
      *(double *)(v74 + 8) = v26;
      *(void *)(v74 + 16) = 0LL;
      *(void *)(v74 + 24) = 0LL;
      *(_BYTE *)(v74 + 32) = 0x80;
      swift_willThrow();
      memcpy(v86, __src, 0x11AuLL);
      uint64_t v73 = v86;
      goto LABEL_75;
    }

    double v26 = v38;
    uint64_t v27 = *(void *)&v87[11];
  }

  if (*(void *)(v7 + 88))
  {
    uint64_t v28 = v8;
    uint64_t v29 = *(void *)(v7 + 96);
    uint64_t ObjectType = swift_getObjectType();
    Swift::Int v31 = *(void (**)(void *__return_ptr, void, void))(v29 + 328);
    swift_unknownObjectRetain();
    v31(v87, ObjectType, v29);
    uint64_t v32 = v87[0];
    if (one-time initialization token for weekdays != -1) {
      swift_once();
    }
    BOOL v33 = static Locale.Weekday.weekdays;
    swift_bridgeObjectRetain();
    BOOL v34 = specialized Collection<>.firstIndex(of:)(v32, (uint64_t)v33);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    if ((v36 & 1) != 0) {
      goto LABEL_87;
    }
    swift_unknownObjectRelease();
    uint64_t v37 = v34 + 1;
    if (__OFADD__(v34, 1LL))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
      JUMPOUT(0x1833313F4LL);
    }

    Foundation::Date v8 = v28;
    goto LABEL_26;
  }

  if (v27 != 1) {
    goto LABEL_27;
  }
LABEL_76:
  *(void *)&v86[0] = v75;
  *(double *)&uint64_t v80 = v26;
  v87[0] = *(_OWORD *)(v7 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v86, (double *)&v80, (uint64_t *)v87, __src);
  swift_unknownObjectRelease();
  outlined release of DateComponents((uint64_t)__dst);
  unsigned int v10 = 3;
LABEL_48:
  LOBYTE(v88[0]) = 4;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v88, __src);
  unint64_t v51 = v50;
  uint64_t v53 = v52;
  outlined release of DateComponents((uint64_t)__dst);
  if ((v53 & 1) != 0) {
    uint64_t v54 = 0LL;
  }
  else {
    uint64_t v54 = v51;
  }
  *(void *)&__src[7] = v54;
  BYTE8(__src[7]) = v53 & 1;
LABEL_52:
  LOBYTE(v88[0]) = 5;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v88, __src);
  uint64_t v56 = v55;
  Swift::Int v58 = v57;
  outlined release of DateComponents((uint64_t)__dst);
  if ((v58 & 1) != 0) {
    Swift::Int v59 = 0LL;
  }
  else {
    Swift::Int v59 = v56;
  }
  *(void *)&__src[8] = v59;
  BYTE8(__src[8]) = v58 & 1;
LABEL_56:
  LOBYTE(v88[0]) = 6;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v88, __src);
  int v61 = v60;
  uint64_t v63 = v62;
  outlined release of DateComponents((uint64_t)__dst);
  if ((v63 & 1) != 0) {
    Swift::Int v64 = 0LL;
  }
  else {
    Swift::Int v64 = v61;
  }
  *(void *)&__src[9] = v64;
  BYTE8(__src[9]) = v63 & 1;
LABEL_60:
  *(void *)&__src[10] = 0LL;
  BYTE8(__src[10]) = 0;
LABEL_61:
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  _CalendarGregorian.date(from:)(__src, (uint64_t)v88);
  outlined release of DateComponents((uint64_t)__dst);
  if ((v88[1] & 1) != 0) {
    goto LABEL_85;
  }
  Swift::Int v65 = *(double *)v88;
  if (v10 <= 8 && ((1 << v10) & 0x188) != 0)
  {
    *(void *)&uint64_t v80 = 8LL;
    *(void *)&uint64_t v81 = v88[0];
    v86[0] = *(_OWORD *)(v7 + 104);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v80, (double *)&v81, (uint64_t *)v86, v87);
    swift_unknownObjectRelease();
    memcpy(v88, v87, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v88);
    if ((v88[11] & 1) != 0) {
      goto LABEL_86;
    }
    uint64_t v66 = v88[10];
    while (1)
    {
      LOBYTE(v84) = 6;
      *(double *)&Swift::Int v77 = v65;
      uint64_t v80 = *(_OWORD *)(v7 + 104);
      swift_unknownObjectRetain();
      _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v84,  (double *)&v77,  -1LL,  (double *)&v81);
      if (v6) {
        break;
      }
      uint64_t v6 = 0LL;
      swift_unknownObjectRelease();
      uint64_t v67 = *(double *)&v81;
      if (*(double *)&v81 >= v65)
      {
        lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
        swift_allocError();
        *(double *)uint64_t v72 = v67;
        *(double *)(v72 + 8) = v65;
        *(void *)(v72 + 16) = 0LL;
        *(void *)(v72 + 24) = 0LL;
        *(_BYTE *)(v72 + 32) = 0x80;
        swift_willThrow();
        goto LABEL_74;
      }

      *(void *)&uint64_t v81 = 8LL;
      *(double *)&Swift::Int v77 = v67;
      uint64_t v80 = *(_OWORD *)(v7 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v81, (double *)&v77, (uint64_t *)&v80, v86);
      swift_unknownObjectRelease();
      memcpy(v87, v86, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v87);
      if ((BYTE8(v87[5]) & 1) != 0) {
        goto LABEL_83;
      }
      if (v66 != *(void *)&v87[5]) {
        goto LABEL_71;
      }
      Swift::Int v65 = v67;
    }

Foundation::Date_optional __swiftcall _CalendarGregorian.start(of:at:)( Foundation::Calendar::Component of, Foundation::Date at)
{
  __asm { BR              X9 }

  return result;
}

void sub_183331480( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, id a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  LOBYTE(v48[0]) = v34;
  id v50 = v35;
  _CalendarGregorian._firstInstant(of:at:)((Foundation::Calendar::Component)v48, *(Foundation::Date *)&a9);
  if (!v36)
  {
    *(void *)uint64_t v33 = v48[1];
    *(_BYTE *)(v33 + 8) = 0;
    return;
  }

  id v50 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if (v49 < 0)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static _CalendarGregorian.logger);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v38, v39)) {
        goto LABEL_14;
      }
      uint64_t v40 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v48[0] = v41;
      *(_DWORD *)uint64_t v40 = 136446466;
      uint64_t v46 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v44 = "Not advancing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }

    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static _CalendarGregorian.logger);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v38, v39)) {
        goto LABEL_14;
      }
      uint64_t v40 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v48[0] = v41;
      *(_DWORD *)uint64_t v40 = 136446466;
      uint64_t v42 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v44 = "Overflowing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }

    _os_log_impl(&dword_182EB1000, v38, v39, v44, (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E20E60](v41, -1LL, -1LL);
    MEMORY[0x186E20E60](v40, -1LL, -1LL);
LABEL_14:

    *(void *)uint64_t v33 = 0LL;
    *(_BYTE *)(v33 + 8) = 1;

    return;
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF( double *a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  double v8 = *a2;
  __dst[0] = 128LL;
  v60[0] = v8;
  *(_OWORD *)__int128 __src = *(_OWORD *)(v4 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(__dst, v60, __src, v63);
  swift_unknownObjectRelease();
  uint64_t result = outlined release of DateComponents((uint64_t)v63);
  if ((v65 & 1) != 0) {
    goto LABEL_73;
  }
  if (v64 == a3)
  {
    uint64_t result = 0LL;
    *a1 = v8;
    return result;
  }

  uint64_t v52 = a1;
  uint64_t v10 = 0LL;
  uint64_t v54 = a3;
  while (1)
  {
    double v11 = *(double *)(v5 + 104);
    double v12 = *(double *)(v5 + 112);
    double v13 = fmod(v8, 1.0);
    double v14 = v13 >= 0.0 ? v8 - v13 : v8 - v13 + -1.0;
    double v15 = v13 >= 0.0 ? v13 : v13 + 1.0;
    v59[0] = 112LL;
    *(double *)Swift::Int v58 = v8;
    v60[0] = v11;
    v60[1] = v12;
    swift_unknownObjectRetain_n();
    _CalendarGregorian.dateComponents(_:from:in:)(v59, (double *)v58, (uint64_t *)v60, __src);
    swift_unknownObjectRelease();
    uint64_t result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
    if ((__dst[15] & 1) != 0 || (__dst[17] & 1) != 0 || (__dst[19] & 1) != 0) {
      break;
    }
    uint64_t v16 = __dst[14];
    uint64_t v17 = __dst[16];
    uint64_t v18 = __dst[18];
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    uint64_t v19 = 3600 * v16;
    if ((unsigned __int128)(v16 * (__int128)3600LL) >> 64 != (3600 * v16) >> 63)
    {
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      break;
    }

    uint64_t v20 = 60 * v17;
    BOOL v21 = __OFADD__(v19, v20);
    uint64_t v22 = v19 + v20;
    if (v21) {
      goto LABEL_56;
    }
    BOOL v21 = __OFADD__(v22, v18);
    uint64_t v23 = v22 + v18;
    if (v21) {
      goto LABEL_57;
    }
    double v24 = v14 + 86400.0;
    v57[0] = 112LL;
    v55[0] = v14 + 86400.0;
    v58[0] = *(_OWORD *)(v5 + 104);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)(v57, v55, (uint64_t *)v58, v60);
    swift_unknownObjectRelease();
    uint64_t result = (uint64_t)memcpy(v59, v60, 0x11AuLL);
    if ((v59[15] & 1) != 0 || (v59[17] & 1) != 0 || (v59[19] & 1) != 0) {
      goto LABEL_70;
    }
    uint64_t v25 = v59[14];
    uint64_t v26 = v59[16];
    uint64_t v27 = v59[18];
    uint64_t result = outlined release of DateComponents((uint64_t)v59);
    uint64_t v28 = 3600 * v25;
    uint64_t v29 = 60 * v26;
    BOOL v21 = __OFADD__(v28, v29);
    uint64_t v30 = v28 + v29;
    if (v21) {
      goto LABEL_60;
    }
    BOOL v21 = __OFADD__(v30, v27);
    uint64_t v31 = v30 + v27;
    if (v21) {
      goto LABEL_61;
    }
    double v32 = (double)v23;
    if ((double)v23 == (double)v31
      || (uint64_t ObjectType = swift_getObjectType(),
          *(double *)Swift::Int v58 = v24,
          char v34 = *(uint64_t (**)(_OWORD *, uint64_t, void))(*(void *)&v12 + 40LL),
          uint64_t v35 = v34(v58, ObjectType, *(void *)&v12),
          *(double *)Swift::Int v58 = v8,
          uint64_t result = v34(v58, ObjectType, *(void *)&v12),
          v35 == result))
    {
      double v36 = v24;
      if (v24 < -3187299600.0) {
        goto LABEL_47;
      }
    }

    else
    {
      uint64_t v43 = result;
      if (__OFSUB__(result, v35)) {
        goto LABEL_63;
      }
      double v36 = v24 + (double)(result - v35);
      *(void *)&double v66 = 112LL;
      double v56 = v36;
      *(_OWORD *)uint64_t v55 = *(_OWORD *)(v5 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v66, &v56, (uint64_t *)v55, v58);
      swift_unknownObjectRelease();
      uint64_t result = (uint64_t)memcpy(v57, v58, 0x11AuLL);
      if ((v57[15] & 1) != 0 || (v57[17] & 1) != 0 || (v57[19] & 1) != 0) {
        goto LABEL_72;
      }
      uint64_t v44 = v57[14];
      uint64_t v45 = v57[16];
      uint64_t v46 = v57[18];
      uint64_t result = outlined release of DateComponents((uint64_t)v57);
      uint64_t v47 = 3600 * v44;
      uint64_t v48 = 60 * v45;
      BOOL v21 = __OFADD__(v47, v48);
      uint64_t v49 = v47 + v48;
      if (v21) {
        goto LABEL_66;
      }
      BOOL v21 = __OFADD__(v49, v46);
      uint64_t v50 = v49 + v46;
      if (v21) {
        goto LABEL_67;
      }
      a3 = v54;
      if (v36 < -3187299600.0)
      {
LABEL_47:
        swift_unknownObjectRelease();
        goto LABEL_48;
      }
    }

    uint64_t v37 = swift_getObjectType();
    *(double *)uint64_t v57 = v36 + -172800.0;
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t, double))(*(void *)&v12 + 80LL))( v58,  v57,  v37,  COERCE_DOUBLE(*(void *)&v12));
    if ((BYTE8(v58[0]) & 1) != 0) {
      goto LABEL_47;
    }
    double v38 = *(double *)v58;
    *(double *)Swift::Int v58 = *(double *)v58 + -1.0;
    os_log_type_t v39 = *(uint64_t (**)(_OWORD *, uint64_t, void))(*(void *)&v12 + 40LL);
    uint64_t v40 = v39(v58, v37, *(void *)&v12);
    *(double *)Swift::Int v58 = v38 + 1.0;
    uint64_t v41 = v39(v58, v37, *(void *)&v12);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v42 = v40 - v41;
    if (__OFSUB__(v40, v41)) {
      goto LABEL_68;
    }
    a3 = v54;
LABEL_48:
    double v51 = v15 + v36 + 0.0;
    if (v8 >= v51)
    {
      *(double *)a4 = v51;
      *(double *)(a4 + 8) = v8;
      *(void *)(a4 + 16) = 0LL;
      *(void *)(a4 + 24) = 0LL;
      *(_BYTE *)(a4 + 32) = 0x80;
      *(double *)Swift::Int v58 = v15 + v36 + 0.0;
      *((double *)v58 + 1) = v8;
      v58[1] = 0uLL;
      LOBYTE(v58[2]) = 0x80;
      lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
      return swift_willThrowTypedImpl();
    }

    *(void *)&v55[0] = 128LL;
    double v66 = v15 + v36 + 0.0;
    v58[0] = *(_OWORD *)(v5 + 104);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v55, &v66, (uint64_t *)v58, v57);
    swift_unknownObjectRelease();
    memcpy(v58, v57, 0x11AuLL);
    uint64_t result = outlined release of DateComponents((uint64_t)v58);
    if ((BYTE8(v58[11]) & 1) != 0) {
      goto LABEL_71;
    }
    uint64_t result = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_62;
    }
    ++v10;
    double v8 = v15 + v36 + 0.0;
    if (*(void *)&v58[11] == a3)
    {
      *uint64_t v52 = v51;
      return result;
    }
  }

  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

Swift::Int _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( _BYTE *a1, _BYTE *a2, double *a3, uint64_t a4, double a5)
{
  uint64_t v7 = v6;
  uint64_t v8 = 0LL;
  uint64_t v10 = v5;
  LODWORD(v11) = *a1;
  double v12 = *a3;
  switch(*a2)
  {
    case 0:
      switch(*a1)
      {
        case 1:
          goto LABEL_361;
        case 2:
          LOBYTE(__dst[0]) = 0;
          *(double *)v336 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
          if ((BYTE8(__src[0]) & 1) != 0) {
            return 0LL;
          }
          Swift::Double v275 = *(double *)__src;
          double v276 = floor((v12 - *(double *)__src) / 86400.0 * 0.03125 * 0.96875);
          if ((~*(void *)&v276 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_511;
          }
          if (v276 <= -9.22337204e18) {
            goto LABEL_513;
          }
          if (v276 >= 9.22337204e18) {
            goto LABEL_515;
          }
          else {
            uint64_t v277 = (uint64_t)v276 - 10;
          }
          double v278 = *(double *)__src;
          while (2)
          {
            uint64_t v8 = v277 + 1;
            if (__OFADD__(v277, 1LL)) {
              goto LABEL_464;
            }
            unsigned __int8 v332 = 2;
            from._Swift::Double time = v275;
            v336[0] = *(_OWORD *)(v5 + 104);
            swift_unknownObjectRetain();
            _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( &v332,  &from._time,  v277 + 1,  (double *)__dst);
            if (v7)
            {
              swift_unknownObjectRelease();
              goto LABEL_422;
            }

            uint64_t v7 = 0LL;
            swift_unknownObjectRelease();
            if (v278 < *(double *)__dst)
            {
              ++v277;
              double v278 = *(double *)__dst;
              continue;
            }

            break;
          }

          *(void *)&__int128 v338 = *(void *)&__dst[0];
          *((double *)&v338 + 1) = v278;
          uint64_t v340 = 0LL;
          uint64_t v339 = 0LL;
          char v341 = 0x80;
          outlined init with take of PredicateCodableError(&v338, a4);
          specialized swift_willThrowTyped(&v338);
          return v8;
        case 3:
          LOBYTE(__dst[0]) = 0;
          *(double *)v336 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
          if ((BYTE8(__src[0]) & 1) != 0) {
            return 0LL;
          }
          double v302 = floor((v12 - *(double *)__src) / 86400.0);
          if ((~*(void *)&v302 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_512;
          }
          if (v302 <= -9.22337204e18) {
            goto LABEL_514;
          }
          if (v302 >= 9.22337204e18) {
            goto LABEL_516;
          }
          uint64_t v8 = (uint64_t)v302 + 1;
          goto LABEL_517;
        case 4:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 0;
          *(double *)v336 = v12;
          uint64_t v279 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v279;
          uint64_t v7 = 0LL;
          if ((v280 & 1) != 0) {
            return v8;
          }
          a4 = v279 - 1;
          if (__OFSUB__(v279, 1LL)) {
            goto LABEL_576;
          }
          if (a4 > 0x555555555555554LL) {
            return 0LL;
          }
          LOBYTE(v336[0]) = 4;
          *(double *)__int128 __src = v12;
          Swift::Int v282 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v281);
          uint64_t v283 = 24 * a4;
          BOOL v72 = __OFADD__(v283, v282);
          uint64_t v284 = v283 + v282;
          if (v72) {
            goto LABEL_591;
          }
          uint64_t v8 = v284 + 1;
          if (!__OFADD__(v284, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_386:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 0;
          *(double *)v336 = v12;
          uint64_t v285 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v285;
          uint64_t v7 = 0LL;
          if ((v286 & 1) != 0) {
            return v8;
          }
          a4 = v285 - 1;
          if (__OFSUB__(v285, 1LL)) {
            goto LABEL_577;
          }
          if (a4 > 0x222222222222221LL) {
            return 0LL;
          }
          LOBYTE(v336[0]) = 5;
          *(double *)__int128 __src = v12;
          Swift::Int v288 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v287);
          uint64_t v289 = 60 * a4;
          BOOL v72 = __OFADD__(v289, v288);
          uint64_t v290 = v289 + v288;
          if (v72) {
            goto LABEL_593;
          }
          uint64_t v8 = v290 + 1;
          if (!__OFADD__(v290, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_395:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 0;
          *(double *)v336 = v12;
          uint64_t v291 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v291;
          if ((v292 & 1) != 0) {
            return v8;
          }
          uint64_t v294 = v291 - 1;
          if (__OFSUB__(v291, 1LL)) {
            goto LABEL_578;
          }
          if (v294 > 0x222222222222221LL) {
            return 0LL;
          }
          LOBYTE(v336[0]) = 6;
          *(double *)__int128 __src = v12;
          Swift::Int v295 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v293);
          uint64_t v296 = 60 * v294;
          BOOL v72 = __OFADD__(v296, v295);
          uint64_t v297 = v296 + v295;
          if (v72) {
            goto LABEL_595;
          }
          uint64_t v8 = v297 + 1;
          if (__OFADD__(v297, 1LL)) {
            __break(1u);
          }
          return v8;
        case 5:
          goto LABEL_386;
        case 6:
          goto LABEL_395;
        case 7:
        case 8:
          LOBYTE(__dst[0]) = 0;
          *(double *)v336 = v12;
          unint64_t v18 = (unint64_t)_CalendarGregorian.start(of:at:)( (Foundation::Calendar::Component)__dst,  *(Foundation::Date *)&a5);
          if ((BYTE8(__src[0]) & 1) != 0) {
            return 0LL;
          }
          double v19 = *(double *)__src;
          LOBYTE(v336[0]) = 7;
          *(double *)__int128 __src = v12;
          Swift::Int v20 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, (Foundation::Date)v18);
          *(double *)__dst = v19;
          _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF( (double *)v336,  (double *)__dst,  v20,  (uint64_t)__src);
          if (v6) {
            goto LABEL_422;
          }
          double v21 = floor((v12 - v19) / 86400.0 / 7.0);
          if ((~*(void *)&v21 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_518;
          }
          if (v21 <= -9.22337204e18) {
            goto LABEL_520;
          }
          if (v21 >= 9.22337204e18) {
            goto LABEL_522;
          }
          Swift::Double v22 = *(double *)v336;
          else {
            uint64_t v23 = (uint64_t)v21 - 10;
          }
          double v24 = *(double *)v336;
          break;
        case 9:
          LOBYTE(__dst[0]) = 1;
          LOBYTE(from._time) = 0;
          *(double *)v336 = v12;
          uint64_t v298 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v298;
          if ((v299 & 1) != 0) {
            return v8;
          }
          LOBYTE(__dst[0]) = 9;
          LOBYTE(from._time) = 1;
          *(double *)v336 = v12;
          uint64_t v106 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if ((v300 & 1) != 0) {
            return v106;
          }
          uint64_t v301 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_597;
          }
          uint64_t v8 = v106 + 4 * v301;
          if (!__OFADD__(v106, 4 * v301)) {
            return v8;
          }
          __break(1u);
LABEL_413:
          char v137 = 12;
          goto LABEL_414;
        case 0xA:
        case 0xB:
          goto LABEL_189;
        case 0xC:
          goto LABEL_413;
        default:
          return 0LL;
      }

      while (2)
      {
        uint64_t v8 = v23 + 1;
        if (__OFADD__(v23, 1LL)) {
          goto LABEL_465;
        }
        unsigned __int8 v332 = 11;
        from._Swift::Double time = v22;
        v336[0] = *(_OWORD *)(v5 + 104);
        swift_unknownObjectRetain();
        _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( &v332,  &from._time,  v23 + 1,  (double *)__dst);
        swift_unknownObjectRelease();
        if (v24 < *(double *)__dst)
        {
          ++v23;
          double v24 = *(double *)__dst;
          continue;
        }

        break;
      }

      *(void *)&__int128 v346 = *(void *)&__dst[0];
      *((double *)&v346 + 1) = v24;
      uint64_t v348 = 0LL;
      uint64_t v347 = 0LL;
      char v349 = 0x80;
      outlined init with take of PredicateCodableError(&v346, a4);
      specialized swift_willThrowTyped(&v346);
      return v8;
    case 1:
      uint64_t v8 = 0LL;
      switch(*a1)
      {
        case 2:
          goto LABEL_275;
        case 3:
        case 0x11:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.ComponentSet>);
          uint64_t v25 = swift_allocObject();
          uint64_t v26 = specialized static Array._adoptStorage(_:count:)(v25, 3LL);
          *(_OWORD *)uint64_t v27 = xmmword_1837232D0;
          *(void *)(v27 + 16) = 8LL;
          uint64_t v28 = (void *)destructiveProjectEnumData for PredicateCodableError(v26, v27);
          uint64_t v29 = v28[4];
          uint64_t v30 = v28[5];
          if ((v30 & ~v29) == 0) {
            uint64_t v30 = 0LL;
          }
          uint64_t v31 = v30 | v29;
          uint64_t v32 = v28[6];
          swift_bridgeObjectRelease();
          if ((v32 & ~v31) != 0) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = 0LL;
          }
          *(void *)&__dst[0] = v33 | v31;
          from._Swift::Double time = v12;
          v336[0] = *(_OWORD *)(v10 + 104);
          uint64_t v8 = *(void *)&v336[0];
          swift_unknownObjectRetain();
          _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)__dst, &from._time, (uint64_t *)v336, __src);
          swift_unknownObjectRelease();
          if ((BYTE8(__src[3]) & 1) != 0) {
            goto LABEL_603;
          }
          if ((BYTE8(__src[4]) & 1) != 0) {
            goto LABEL_604;
          }
          if ((BYTE8(__src[5]) & 1) != 0) {
            goto LABEL_605;
          }
          uint64_t v34 = _s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKF( *(uint64_t *)&__src[3],  *(uint64_t *)&__src[4],  *(uint64_t *)&__src[5],  (uint64_t)v336);
          if (v6)
          {
            outlined release of DateComponents((uint64_t)__src);
            char v35 = v336[2];
            __int128 v36 = v336[0];
            __int128 v37 = v336[1];
            goto LABEL_423;
          }

          uint64_t v8 = v34;
          outlined release of DateComponents((uint64_t)__src);
          return v8;
        case 4:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 1;
          *(double *)v336 = v12;
          uint64_t v190 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v190;
          uint64_t v7 = 0LL;
          if ((v191 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 4;
          *(double *)__int128 __src = v12;
          Swift::Int v193 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v192);
          uint64_t v194 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_552;
          }
          uint64_t v195 = (unsigned __int128)(v194 * (__int128)24LL) >> 64;
          uint64_t v196 = 24 * v194;
          if (v195 != v196 >> 63) {
            goto LABEL_560;
          }
          BOOL v72 = __OFADD__(v196, v193);
          uint64_t v197 = v196 + v193;
          if (v72) {
            goto LABEL_568;
          }
          uint64_t v8 = v197 + 1;
          if (!__OFADD__(v197, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_284:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 1;
          *(double *)v336 = v12;
          uint64_t v198 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v198;
          uint64_t v7 = 0LL;
          if ((v199 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 5;
          *(double *)__int128 __src = v12;
          Swift::Int v201 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v200);
          uint64_t v202 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_553;
          }
          uint64_t v203 = 60 * v202;
          uint64_t v204 = v203 + v201;
          if (__OFADD__(v203, v201)) {
            goto LABEL_569;
          }
          uint64_t v8 = v204 + 1;
          if (!__OFADD__(v204, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_292:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 1;
          *(double *)v336 = v12;
          uint64_t v205 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v205;
          if ((v206 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 6;
          *(double *)__int128 __src = v12;
          Swift::Int v208 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v207);
          uint64_t v209 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_554;
          }
          uint64_t v210 = 60 * v209;
          uint64_t v211 = v210 + v208;
          if (__OFADD__(v210, v208)) {
            goto LABEL_570;
          }
          uint64_t v8 = v211 + 1;
          if (!__OFADD__(v211, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_300:
          LOBYTE(v336[0]) = 2;
          *(double *)__int128 __src = v12;
          Swift::Int v212 = _CalendarGregorian.dateComponent(_:from:)( (Foundation::Calendar::Component)v336,  *(Foundation::Date *)&a5);
          Swift::Int v213 = v212 - 1;
          if (__OFSUB__(v212, 1LL)) {
            goto LABEL_480;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v214 = swift_allocObject();
          uint64_t v215 = specialized static Array._adoptStorage(_:count:)(v214, 13LL);
          *(int64x2_t *)uint64_t v216 = vdupq_n_s64(1uLL);
          *(_OWORD *)(v216 + 16) = xmmword_183720D90;
          *(int64x2_t *)(v216 + 32) = vdupq_n_s64(2uLL);
          *(int64x2_t *)(v216 + 48) = vdupq_n_s64(3uLL);
          *(_OWORD *)(v216 + 64) = xmmword_183823880;
          *(int64x2_t *)(v216 + 80) = vdupq_n_s64(4uLL);
          *(void *)(v216 + 96) = 4LL;
          uint64_t v217 = destructiveProjectEnumData for PredicateCodableError(v215, v216);
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v213, 1LL, v217);
          uint64_t v8 = *(void *)(v217 + 8 * v213 + 32);
          goto LABEL_328;
        case 5:
          goto LABEL_284;
        case 6:
          goto LABEL_292;
        case 7:
        case 8:
          goto LABEL_171;
        case 9:
          goto LABEL_300;
        case 0xB:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.ComponentSet>);
          uint64_t v218 = swift_allocObject();
          uint64_t v219 = specialized static Array._adoptStorage(_:count:)(v218, 3LL);
          *(_OWORD *)uint64_t v220 = xmmword_1837232D0;
          *(void *)(v220 + 16) = 8LL;
          unint64_t v221 = (void *)destructiveProjectEnumData for PredicateCodableError(v219, v220);
          uint64_t v222 = v221[4];
          uint64_t v223 = v221[5];
          if ((v223 & ~v222) == 0) {
            uint64_t v223 = 0LL;
          }
          uint64_t v224 = v223 | v222;
          uint64_t v225 = v221[6];
          swift_bridgeObjectRelease();
          if ((v225 & ~v224) != 0) {
            uint64_t v226 = v225;
          }
          else {
            uint64_t v226 = 0LL;
          }
          *(void *)&__dst[0] = v226 | v224;
          from._Swift::Double time = v12;
          v336[0] = *(_OWORD *)(v10 + 104);
          swift_unknownObjectRetain();
          _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)__dst, &from._time, (uint64_t *)v336, __src);
          swift_unknownObjectRelease();
          if ((BYTE8(__src[3]) & 1) != 0) {
            goto LABEL_606;
          }
          if ((BYTE8(__src[4]) & 1) != 0) {
            goto LABEL_607;
          }
          if ((BYTE8(__src[5]) & 1) != 0) {
            goto LABEL_608;
          }
          uint64_t v227 = *(void *)&__src[3];
          uint64_t v228 = *(void *)&__src[4];
          uint64_t v229 = *(void *)&__src[5];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v230 = swift_allocObject();
          uint64_t v231 = specialized static Array._adoptStorage(_:count:)(v230, 12LL);
          *unint64_t v232 = xmmword_1838237D0;
          v232[1] = xmmword_1838237E0;
          v232[2] = xmmword_1838237F0;
          v232[3] = xmmword_183823800;
          v232[4] = xmmword_183823810;
          v232[5] = xmmword_183823820;
          uint64_t v233 = destructiveProjectEnumData for PredicateCodableError(v231, v232);
          uint64_t v234 = swift_allocObject();
          uint64_t v235 = specialized static Array._adoptStorage(_:count:)(v234, 12LL);
          *unint64_t v236 = xmmword_1838237D0;
          v236[1] = xmmword_183823830;
          v236[2] = xmmword_183823840;
          v236[3] = xmmword_183823850;
          v236[4] = xmmword_183823860;
          v236[5] = xmmword_183823870;
          uint64_t v237 = destructiveProjectEnumData for PredicateCodableError(v235, v236);
          uint64_t v238 = v228 - 2;
          if (__OFSUB__(v228, 2LL)) {
            goto LABEL_481;
          }
          uint64_t v8 = v237;
          uint64_t v239 = v227 + 4716;
          if (__OFADD__(v227, 4716LL)) {
            goto LABEL_317;
          }
          if (__OFSUB__(12LL, v238)) {
            goto LABEL_507;
          }
          uint64_t v240 = (14 - v228) / 12;
          BOOL v72 = __OFSUB__(v239, v240);
          uint64_t v241 = v239 - v240;
          if (v72) {
            goto LABEL_508;
          }
          if (__OFSUB__(v238, 1LL)) {
            goto LABEL_509;
          }
          if (__OFADD__(v228 - 3, 12LL)) {
            goto LABEL_510;
          }
          if ((unsigned __int128)(v241 * (__int128)1461LL) >> 64 != (1461 * v241) >> 63)
          {
LABEL_317:
            v336[0] = xmmword_1837BEE50;
            v336[1] = xmmword_18372C2E0;
            LOBYTE(v336[2]) = 1;
            lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
            swift_willThrowTypedImpl();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined release of DateComponents((uint64_t)__src);
            *(_OWORD *)a4 = xmmword_1837BEE50;
            *(_OWORD *)(a4 + 16) = xmmword_18372C2E0;
            char v35 = 1;
LABEL_424:
            *(_BYTE *)(a4 + 32) = v35;
            return v8;
          }

          uint64_t v304 = v229 + 1461 * v241 / 4;
          if (__OFADD__(v229, 1461 * v241 / 4)) {
            goto LABEL_536;
          }
          BOOL v72 = __OFSUB__(v304, 1LL);
          uint64_t v305 = v304 - 1;
          if (v72) {
            goto LABEL_537;
          }
          BOOL v72 = __OFSUB__(v305, 1401LL);
          uint64_t v306 = v305 - 1401;
          if (v72) {
            goto LABEL_538;
          }
          int v307 = 26215 * (__int16)(153 * ((__int16)(v228 + 9) % 12) + 2);
          BOOL v72 = __OFADD__(v306, (int)((v307 >> 17) + (v307 >> 31)));
          uint64_t v308 = v306 + (int)((v307 >> 17) + (v307 >> 31));
          if (v72) {
            goto LABEL_539;
          }
          uint64_t v331 = v229;
          uint64_t v309 = 3 * ((v241 + 184) / 100);
          uint64_t v310 = v308 - v309 / 4;
          if (__OFSUB__(v308, v309 / 4)) {
            goto LABEL_540;
          }
          uint64_t v311 = v310 + 38;
          if (__OFADD__(v310, 38LL)) {
            goto LABEL_541;
          }
          uint64_t v312 = *(void *)(v10 + 64);
          if (v227 < v312)
          {
            uint64_t v313 = 4LL;
            goto LABEL_434;
          }

          if ((v227 & 3) != 0)
          {
            uint64_t v8 = v233;
            goto LABEL_444;
          }

          if (__ROR8__(0x8F5C28F5C28F5C29LL * v227 + 0x51EB851EB851EB8LL, 2) < 0x28F5C28F5C28F5DuLL)
          {
            uint64_t v313 = 400LL;
LABEL_434:
            if (v227 % v313) {
              uint64_t v8 = v233;
            }
          }

LABEL_444:
          uint64_t v314 = *(void *)(v10 + 56);
          swift_bridgeObjectRelease();
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v228 - 1, 1LL, v8);
          uint64_t v315 = *(void *)(v8 + 8 * (v228 - 1) + 32);
          swift_bridgeObjectRelease();
          uint64_t v316 = v315 + v331;
          if (__OFADD__(v315, v331)) {
            goto LABEL_542;
          }
          if (v311 < v314 || v227 != v312) {
            goto LABEL_449;
          }
          uint64_t v317 = v227 - 1;
          if (__OFSUB__(v227, 1LL)) {
            goto LABEL_579;
          }
          uint64_t v318 = ((unsigned __int128)(v317 * (__int128)0x5C28F5C28F5C28F5LL) >> 64) - v317;
          uint64_t v319 = v317 / 400 + (v318 >> 6) + ((unint64_t)v318 >> 63) + 2;
          BOOL v72 = __OFADD__(v316, v319);
          v316 += v319;
          if (v72) {
            goto LABEL_580;
          }
LABEL_449:
          memcpy(__dst, __src, 0x11AuLL);
          DateComponents.day.setter(1LL, 0);
          DateComponents.month.setter(1LL, 0);
          memcpy(v336, __dst, 0x11AuLL);
          outlined retain of DateComponents((uint64_t)__src);
          outlined retain of DateComponents((uint64_t)v336);
          _CalendarGregorian.date(from:)(__dst, (uint64_t)&from);
          outlined release of DateComponents((uint64_t)v336);
          if ((v334 & 1) != 0) {
            goto LABEL_609;
          }
          unsigned __int8 v332 = 7;
          Swift::Int v320 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)&v332, from);
          BOOL v72 = __OFADD__(v316, 7LL);
          uint64_t v321 = v316 + 7;
          if (v72) {
            goto LABEL_543;
          }
          Swift::Int v322 = v320;
          uint64_t v323 = _CalendarGregorian.minimumDaysInFirstWeek.getter();
          BOOL v72 = __OFSUB__(v321, v323);
          uint64_t v324 = v321 - v323;
          if (v72) {
            goto LABEL_544;
          }
          uint64_t v325 = _CalendarGregorian.minimumDaysInFirstWeek.getter();
          BOOL v72 = __OFADD__(v322, v325);
          Swift::Int v326 = v322 + v325;
          if (v72) {
            goto LABEL_545;
          }
          uint64_t v327 = _CalendarGregorian.firstWeekday.getter();
          outlined release of DateComponents((uint64_t)__src);
          outlined release of DateComponents((uint64_t)v336);
          Swift::Int v328 = v326 - v327;
          if (__OFSUB__(v326, v327)) {
            goto LABEL_546;
          }
          if (__OFADD__(v328, 6LL)) {
            goto LABEL_547;
          }
          uint64_t v329 = (v328 + 6) % 7;
          BOOL v72 = __OFADD__(v324, v329);
          uint64_t v330 = v324 + v329;
          if (v72) {
            goto LABEL_548;
          }
          uint64_t v40 = (unsigned __int128)(v330 * (__int128)0x4924924924924925LL) >> 64;
LABEL_457:
          uint64_t v8 = (v40 >> 1) + ((unint64_t)v40 >> 63);
          break;
        case 0xD:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 1;
          *(double *)v336 = v12;
          uint64_t v242 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v242;
          if ((v243 & 1) != 0) {
            return v8;
          }
          a5 = (v12 - floor(v12) + (double)v242 + -1.0) * 1000000000.0;
          if ((~*(void *)&a5 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_555;
          }
          if (a5 <= -9.22337204e18) {
            goto LABEL_563;
          }
          if (a5 >= 9.22337204e18) {
            goto LABEL_571;
          }
          uint64_t v8 = (uint64_t)a5 + 1;
          __break(1u);
          goto LABEL_326;
        default:
          return v8;
      }

      return v8;
    case 2:
      uint64_t v8 = 0LL;
      switch(*a1)
      {
        case 3:
          char v137 = 3;
          goto LABEL_414;
        case 4:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 2;
          *(double *)v336 = v12;
          uint64_t v138 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v138;
          uint64_t v7 = 0LL;
          if ((v139 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 4;
          *(double *)__int128 __src = v12;
          Swift::Int v141 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v140);
          uint64_t v142 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_524;
          }
          uint64_t v143 = (unsigned __int128)(v142 * (__int128)24LL) >> 64;
          uint64_t v144 = 24 * v142;
          if (v143 != v144 >> 63) {
            goto LABEL_528;
          }
          BOOL v72 = __OFADD__(v144, v141);
          uint64_t v145 = v144 + v141;
          if (v72) {
            goto LABEL_532;
          }
          uint64_t v8 = v145 + 1;
          if (!__OFADD__(v145, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_214:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 2;
          *(double *)v336 = v12;
          uint64_t v146 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v146;
          uint64_t v7 = 0LL;
          if ((v147 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 5;
          *(double *)__int128 __src = v12;
          Swift::Int v149 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v148);
          uint64_t v150 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_525;
          }
          uint64_t v151 = 60 * v150;
          uint64_t v152 = v151 + v149;
          if (__OFADD__(v151, v149)) {
            goto LABEL_533;
          }
          uint64_t v8 = v152 + 1;
          if (!__OFADD__(v152, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_222:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 2;
          *(double *)v336 = v12;
          uint64_t v153 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          uint64_t v8 = v153;
          if ((v154 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 6;
          *(double *)__int128 __src = v12;
          Swift::Int v156 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v155);
          uint64_t v157 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_526;
          }
          uint64_t v158 = 60 * v157;
          uint64_t v159 = v158 + v156;
          if (__OFADD__(v158, v156)) {
            goto LABEL_534;
          }
          uint64_t v8 = v159 + 1;
          if (!__OFADD__(v159, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_230:
          char v137 = 10;
          break;
        case 5:
          goto LABEL_214;
        case 6:
          goto LABEL_222;
        case 7:
        case 8:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 2;
          *(double *)v336 = v12;
          uint64_t v38 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v38;
          if ((v39 & 1) != 0) {
            return v8;
          }
          if (__OFADD__(v38, 6LL)) {
            goto LABEL_506;
          }
          uint64_t v40 = (unsigned __int128)((v38 + 6) * (__int128)0x4924924924924925LL) >> 64;
          goto LABEL_457;
        case 0xA:
          goto LABEL_230;
        case 0xD:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 2;
          *(double *)v336 = v12;
          uint64_t v160 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          uint64_t v8 = v160;
          uint64_t v7 = 0LL;
          if ((v161 & 1) != 0) {
            return v8;
          }
          double v162 = (v12 - floor(v12) + (double)v160 + -1.0) * 1000000000.0;
          if ((~*(void *)&v162 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_527;
          }
          if (v162 <= -9.22337204e18) {
            goto LABEL_531;
          }
          if (v162 >= 9.22337204e18) {
            goto LABEL_535;
          }
          uint64_t v8 = (uint64_t)v162 + 1;
          __break(1u);
          goto LABEL_239;
        default:
          return v8;
      }

      goto LABEL_414;
    case 3:
    case 7:
    case 0x11:
      uint64_t v8 = 0LL;
      switch(*a1)
      {
        case 4:
          LOBYTE(v336[0]) = 4;
          *(double *)__int128 __src = v12;
          Swift::Int v13 = _CalendarGregorian.dateComponent(_:from:)( (Foundation::Calendar::Component)v336,  *(Foundation::Date *)&a5);
          uint64_t v8 = v13 + 1;
          if (!__OFADD__(v13, 1LL)) {
            return v8;
          }
          __break(1u);
          break;
        case 5:
          goto LABEL_75;
        case 6:
          goto LABEL_83;
        case 0xD:
          goto LABEL_91;
        default:
          return v8;
      }

      break;
    case 4:
LABEL_50:
      if ((_DWORD)v11 == 13) {
        goto LABEL_139;
      }
      if ((_DWORD)v11 == 6) {
        goto LABEL_147;
      }
      if ((_DWORD)v11 != 5) {
        return 0LL;
      }
      LOBYTE(v336[0]) = 5;
      *(double *)__int128 __src = v12;
      Swift::Int v41 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, *(Foundation::Date *)&a5);
      uint64_t v8 = v41 + 1;
      if (!__OFADD__(v41, 1LL)) {
        return v8;
      }
      __break(1u);
LABEL_56:
      if ((_DWORD)v11 != 13)
      {
        if ((_DWORD)v11 != 6) {
          return 0LL;
        }
        LOBYTE(v336[0]) = 6;
        *(double *)__int128 __src = v12;
        Swift::Int v42 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, *(Foundation::Date *)&a5);
        uint64_t v8 = v42 + 1;
        if (!__OFADD__(v42, 1LL)) {
          return v8;
        }
        __break(1u);
LABEL_61:
        if ((_DWORD)v11 != 13) {
          return 0LL;
        }
        double v43 = (v12 - floor(v12)) * 1000000000.0 + 1.0;
        if ((~*(void *)&v43 & 0x7FF0000000000000LL) != 0)
        {
          if (v43 > -9.22337204e18)
          {
            if (v43 < 9.22337204e18) {
              return (uint64_t)v43;
            }
            goto LABEL_463;
          }

LABEL_462:
          __break(1u);
LABEL_463:
          __break(1u);
LABEL_464:
          __break(1u);
LABEL_465:
          __break(1u);
LABEL_466:
          __break(1u);
LABEL_467:
          __break(1u);
LABEL_468:
          __break(1u);
LABEL_469:
          __break(1u);
LABEL_470:
          __break(1u);
LABEL_471:
          __break(1u);
LABEL_472:
          __break(1u);
LABEL_473:
          __break(1u);
LABEL_474:
          __break(1u);
LABEL_475:
          __break(1u);
LABEL_476:
          __break(1u);
LABEL_477:
          __break(1u);
LABEL_478:
          __break(1u);
LABEL_479:
          __break(1u);
LABEL_480:
          __break(1u);
LABEL_481:
          __break(1u);
LABEL_482:
          __break(1u);
LABEL_483:
          __break(1u);
LABEL_484:
          __break(1u);
LABEL_485:
          __break(1u);
          goto LABEL_486;
        }

  __break(1u);
  return result;
}

LABEL_461:
        __break(1u);
        goto LABEL_462;
      }

LABEL_414:
      LOBYTE(v336[0]) = v137;
      *(double *)__int128 __src = v12;
      return _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, *(Foundation::Date *)&a5);
    default:
      return v8;
  }

  uint64_t v8 = 0LL;
  switch((int)v11)
  {
    case 3:
    case 7:
      LOBYTE(v336[0]) = 7;
      *(double *)__int128 __src = v12;
      Swift::Int v14 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, *(Foundation::Date *)&a5);
      Swift::Int v15 = v14 + 1;
      if (__OFADD__(v14, 1LL))
      {
        __break(1u);
        goto LABEL_460;
      }

      uint64_t v16 = _CalendarGregorian.firstWeekday.getter();
      uint64_t v17 = v15 - v16;
      if (__OFSUB__(v15, v16))
      {
LABEL_460:
        __break(1u);
        goto LABEL_461;
      }

      if (v17 <= 0) {
        return v17 + 7;
      }
      else {
        return v15 - v16;
      }
    case 4:
      goto LABEL_107;
    case 5:
      goto LABEL_123;
    case 6:
      goto LABEL_131;
    case 13:
      goto LABEL_115;
    default:
      return v8;
  }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          Swift::Int v55 = v224 & 0xFFFFFFFFFFFFF0FFLL | (v236 << 8);
          goto LABEL_391;
        }
      }

      else if (a3 > 0)
      {
        goto LABEL_480;
      }

      swift_unknownObjectRetain_n();
      Swift::Int v55 = specialized Rope._endPath.getter(v221);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v4 = 0LL;
      uint64_t v225 = 0LL;
      if (!v221)
      {
        uint64_t v251 = 0LL;
        goto LABEL_416;
      }

uint64_t _s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKF( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2 - 2;
  if (__OFSUB__(a2, 2LL))
  {
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v7 = result;
  uint64_t v8 = result + 4716;
  if (__OFADD__(result, 4716LL))
  {
LABEL_8:
    lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
    uint64_t result = swift_willThrowTypedImpl();
    *(_OWORD *)a4 = xmmword_1837BEE50;
    *(_OWORD *)(a4 + 16) = xmmword_18372C2E0;
    *(_BYTE *)(a4 + 32) = 1;
    return result;
  }

  if (__OFSUB__(12LL, v5)) {
    goto LABEL_40;
  }
  uint64_t v9 = (14 - a2) / 12;
  BOOL v10 = __OFSUB__(v8, v9);
  uint64_t v11 = v8 - v9;
  if (v10)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  if (__OFSUB__(v5, 1LL))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  if (__OFADD__(a2 - 3, 12LL))
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  uint64_t v13 = a3 + 1461 * v11 / 4;
  if (__OFADD__(a3, 1461 * v11 / 4)) {
    goto LABEL_44;
  }
  BOOL v10 = __OFSUB__(v13, 1LL);
  uint64_t v14 = v13 - 1;
  if (v10)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  BOOL v10 = __OFSUB__(v14, 1401LL);
  uint64_t v15 = v14 - 1401;
  if (v10)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  int v16 = 26215 * (__int16)(153 * ((__int16)(a2 + 9) % 12) + 2);
  BOOL v10 = __OFADD__(v15, (int)((v16 >> 17) + (v16 >> 31)));
  uint64_t v17 = v15 + (int)((v16 >> 17) + (v16 >> 31));
  if (v10)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  uint64_t v18 = 3 * ((v11 + 184) / 100);
  uint64_t v19 = v17 - v18 / 4;
  if (__OFSUB__(v17, v18 / 4))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  uint64_t v20 = v19 + 38;
  if (!__OFADD__(v19, 38LL))
  {
    uint64_t v21 = *(void *)(v4 + 64);
    if (v21 > result)
    {
      for (uint64_t i = 4LL; ; uint64_t i = 400LL)
      {
        if (v7 % i) {
          uint64_t result = (uint64_t)&_s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKFTv_r;
        }
        else {
          uint64_t result = (uint64_t)&_s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKFTv0_r;
        }
        unint64_t v23 = a2 - 1;
        if (a2 >= 1) {
          goto LABEL_24;
        }
LABEL_37:
        __break(1u);
LABEL_38:
        ;
      }
    }

    if ((result & 3) == 0) {
      goto LABEL_35;
    }
    uint64_t result = (uint64_t)&_s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKFTv_r;
    unint64_t v23 = a2 - 1;
    if (a2 < 1) {
      goto LABEL_37;
    }
LABEL_24:
    while (v23 < *(void *)(result + 16))
    {
      uint64_t v4 = *(void *)(v4 + 56);
      uint64_t v24 = *(void *)(result + 8 * v23 + 32);
      swift_bridgeObjectRelease();
      uint64_t result = v24 + a3;
      if (__OFADD__(v24, a3)) {
        goto LABEL_51;
      }
      if (v20 < v4 || v21 != v7) {
        return result;
      }
      uint64_t v26 = v7 - 1;
      if (__OFSUB__(v7, 1LL)) {
        goto LABEL_52;
      }
      uint64_t v27 = ((unsigned __int128)(v26 * (__int128)0x5C28F5C28F5C28F5LL) >> 64) - v26;
      uint64_t v28 = v26 / 400 + (v27 >> 6) + ((unint64_t)v27 >> 63) + 2;
      BOOL v10 = __OFADD__(result, v28);
      result += v28;
      if (!v10) {
        return result;
      }
      __break(1u);
LABEL_35:
      if (__ROR8__(0x8F5C28F5C28F5C29LL * v7 + 0x51EB851EB851EB8LL, 2) < 0x28F5C28F5C28F5DuLL) {
        goto LABEL_38;
      }
      uint64_t result = (uint64_t)&_s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKFTv0_r;
      unint64_t v23 = a2 - 1;
      if (a2 < 1) {
        goto LABEL_37;
      }
    }

    goto LABEL_50;
  }

double *_CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = *result;
  if (*result < -3187299600.0
    || (uint64_t v5 = *(void *)(a2 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        double v12 = v4 + -172800.0,
        uint64_t result = (double *)(*(void *(**)(double *__return_ptr, double *, uint64_t, uint64_t))(v5 + 80))( &v13,  &v12,  ObjectType,  v5),  (v14 & 1) != 0)
    || (double v7 = v13, v8 = v13, v4 + -172800.0 + 345600000.0 <= v13)
    || v4 < v13)
  {
LABEL_9:
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }

  double v13 = v13 + -1.0;
  uint64_t v9 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v5 + 40);
  uint64_t v10 = v9(&v13, ObjectType, v5);
  double v13 = v8 + 1.0;
  uint64_t result = (double *)v9(&v13, ObjectType, v5);
  uint64_t v11 = v10 - (void)result;
  if (!__OFSUB__(v10, result))
  {
    if (v11 >= 1 && v4 < v8 + (double)v11)
    {
      *(double *)a3 = v7;
      *(double *)(a3 + 8) = (double)v11;
      *(_BYTE *)(a3 + 16) = 0;
      return result;
    }

    goto LABEL_9;
  }

  __break(1u);
  return result;
}

Swift::Double __swiftcall _CalendarGregorian.timeInDay(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v15 = 112LL;
  uint64_t v14 = v3;
  __int128 v13 = *(_OWORD *)(v2 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v15, (double *)&v14, (uint64_t *)&v13, v16);
  swift_unknownObjectRelease();
  if ((v18 & 1) != 0 || (v20 & 1) != 0 || (v22 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v5 = v17;
  uint64_t v6 = v19;
  uint64_t v7 = v21;
  outlined release of DateComponents((uint64_t)v16);
  uint64_t v8 = 3600 * v5;
  if ((unsigned __int128)(v5 * (__int128)3600LL) >> 64 != (3600 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v9 = 60 * v6;
  if ((unsigned __int128)(v6 * (__int128)60LL) >> 64 != (60 * v6) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFADD__(v8, v9);
  uint64_t v11 = v8 + v9;
  if (!v10)
  {
    BOOL v10 = __OFADD__(v11, v7);
    uint64_t v12 = v11 + v7;
    if (!v10) {
      return (double)v12;
    }
    goto LABEL_12;
  }

Swift::Double __swiftcall _CalendarGregorian.timeInDay(inSmallComponent:for:)( Foundation::Calendar::Component inSmallComponent, Foundation::Date a2)
{
  int v4 = *(unsigned __int8 *)inSmallComponent;
  uint64_t v5 = *v2;
  uint64_t v12 = 8288LL;
  uint64_t v11 = v5;
  __int128 v10 = *(_OWORD *)(v3 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v12, (double *)&v11, (uint64_t *)&v10, v13);
  swift_unknownObjectRelease();
  if ((v15 & 1) != 0 || (v17 & 1) != 0 || (v19 & 1) != 0) {
    goto LABEL_11;
  }
  uint64_t v7 = v14;
  uint64_t v8 = v16;
  uint64_t v9 = v18;
  outlined release of DateComponents((uint64_t)v13);
  Swift::Double result = 0.0;
  if (v4 != 13)
  {
    Swift::Double result = (double)v9 / 1000000000.0 + 0.0;
    if (v4 != 6)
    {
      Swift::Double result = result + (double)v8;
      if (v4 != 5)
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
    }
  }

  return result;
}

Swift::Bool __swiftcall _CalendarGregorian.isDateInWeekend(_:)(Foundation::Date a1)
{
  void (*v7)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  _BYTE weekendRange[56];
  char v14;
  uint64_t v3 = *v1;
  __int128 v4 = xmmword_183724BA0;
  if (*(void *)(v2 + 88))
  {
    uint64_t v5 = *(void *)(v2 + 96);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v5 + 336);
    swift_unknownObjectRetain();
    v7(&weekendRange[8], ObjectType, v5);
    swift_unknownObjectRelease();
    if ((v14 & 1) != 0)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0;
      __int128 v10 = 0;
      uint64_t v11 = 0x40F5180000000000LL;
      __int128 v4 = xmmword_183724BA0;
    }

    else
    {
      uint64_t v8 = *(void *)&weekendRange[8];
      uint64_t v11 = *(void *)&weekendRange[24];
      __int128 v4 = *(_OWORD *)&weekendRange[40];
      uint64_t v9 = weekendRange[16] & 1;
      __int128 v10 = weekendRange[32] & 1;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0;
    __int128 v10 = 0;
    uint64_t v11 = 0x40F5180000000000LL;
  }

  *(void *)weekendRange = v3;
  *(void *)&weekendRange[8] = v8;
  weekendRange[16] = v9;
  *(void *)&weekendRange[24] = v11;
  weekendRange[32] = v10;
  *(_OWORD *)&weekendRange[40] = v4;
  return _CalendarGregorian.isDateInWeekend(_:weekendRange:)( (Foundation::Date)v4,  (Foundation::WeekendRange *)weekendRange);
}

Swift::Bool __swiftcall _CalendarGregorian.isDateInWeekend(_:weekendRange:)( Foundation::Date _, Foundation::WeekendRange *weekendRange)
{
  Swift::Double value = weekendRange->onsetTime.value;
  double v5 = *(double *)v2;
  char v6 = *(_BYTE *)(v2 + 8);
  double v7 = *(double *)(v2 + 16);
  char v8 = *(_BYTE *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  *(void *)&__dst[0] = 128LL;
  uint64_t v32 = *(void *)&value;
  *(_OWORD *)__int128 __src = *(_OWORD *)(v3 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)__dst, (double *)&v32, __src, v33);
  swift_unknownObjectRelease();
  Swift::Bool result = outlined release of DateComponents((uint64_t)v33);
  if ((v35 & 1) != 0) {
    goto LABEL_47;
  }
  if (v10 == v9 && v34 != v10) {
    return 0;
  }
  if (v10 >= v9 || (Swift::Bool result = 0, v34 >= v10) && v9 >= v34)
  {
    if (v9 < v10 && v9 < v34 && v34 < v10) {
      return 0;
    }
    if (v34 == v10)
    {
      if (v5 == 0.0) {
        char v12 = 1;
      }
      else {
        char v12 = v6;
      }
      if ((v12 & 1) != 0) {
        return 1;
      }
      uint64_t v32 = 112LL;
      Swift::Double v29 = value;
      __dst[0] = *(_OWORD *)(v3 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)(&v32, &v29, (uint64_t *)__dst, __src);
      swift_unknownObjectRelease();
      Swift::Bool result = memcpy(__dst, __src, 0x11AuLL);
      if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0) {
        goto LABEL_48;
      }
      uint64_t v22 = *(void *)&__dst[7];
      uint64_t v23 = *(void *)&__dst[8];
      uint64_t v24 = *(void *)&__dst[9];
      Swift::Bool result = outlined release of DateComponents((uint64_t)__dst);
      uint64_t v25 = 3600 * v22;
      if ((unsigned __int128)(v22 * (__int128)3600LL) >> 64 == (3600 * v22) >> 63)
      {
        uint64_t v26 = 60 * v23;
        if ((unsigned __int128)(v23 * (__int128)60LL) >> 64 == (60 * v23) >> 63)
        {
          BOOL v19 = __OFADD__(v25, v26);
          uint64_t v27 = v25 + v26;
          if (!v19)
          {
            BOOL v19 = __OFADD__(v27, v24);
            uint64_t v28 = v27 + v24;
            if (!v19) {
              return v5 <= (double)v28;
            }
            goto LABEL_46;
          }

          goto LABEL_44;
        }

void _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF( void *__src)
{
  __asm { BR              X11 }

uint64_t sub_1833356C4@<X0>(char a1@<W8>)
{
  char v13 = a1 & 0x1F;
  uint64_t v4 = v3 - 2;
  if (__OFSUB__(v3, 2LL))
  {
    __break(1u);
    JUMPOUT(0x1833358C8LL);
  }

  uint64_t v5 = v2 + 4716;
  if (!__OFADD__(v2, 4716LL))
  {
    if (__OFSUB__(12LL, v4))
    {
      __break(1u);
    }

    else
    {
      uint64_t v6 = (14 - v3) / 12;
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v8 = v5 - v6;
      if (!v7)
      {
        if (!__OFSUB__(v4, 1LL))
        {
          if (!__OFADD__(v3 - 3, 12LL))
          {
            if ((unsigned __int128)(v8 * (__int128)1461LL) >> 64 == (1461 * v8) >> 63)
            {
              _CalendarGregorian.relativeWeekday(fromJulianDay:)( 1461 * v8 / 4 + (int)(((26215 * (__int16)(153 * (((int)v3 + 9) % 12) + 2)) >> 17)
                    + ((26215 * (__int16)(153 * (((int)v3 + 9) % 12) + 2)) >> 31))
              - 1402
              - 3 * ((v8 + 184) / 100) / 4
              + 39);
              outlined init with take of ResolvedDateComponents(&v10, &v11);
              __asm { BR              X11 }
            }

            goto LABEL_8;
          }

Swift::Int __swiftcall _CalendarGregorian.relativeWeekday(fromJulianDay:)(Swift::Int fromJulianDay)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v6;
  char v7;
  Swift::Int result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v3 = fromJulianDay + 1;
  if (__OFADD__(fromJulianDay, 1LL))
  {
    __break(1u);
    goto LABEL_14;
  }

  if (*((_BYTE *)v2 + 128) != 1) {
    goto LABEL_9;
  }
  if (!*((void *)v2 + 11))
  {
    uint64_t v9 = 1LL;
    goto LABEL_11;
  }

  uint64_t v1 = *((void *)v2 + 12);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 328);
  swift_unknownObjectRetain();
  v5(&v13, ObjectType, v1);
  LOBYTE(v1) = v13;
  if (one-time initialization token for weekdays != -1) {
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t v2 = static Locale.Weekday.weekdays;
    swift_bridgeObjectRetain();
    uint64_t v1 = specialized Collection<>.firstIndex(of:)(v1, (uint64_t)v2);
    BOOL v7 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v7 & 1) != 0) {
      break;
    }
    swift_unknownObjectRelease();
    uint64_t v9 = v1 + 1;
    if (__OFADD__(v1, 1LL))
    {
      __break(1u);
LABEL_9:
      uint64_t v9 = *((void *)v2 + 15);
    }

Swift::Int __swiftcall _CalendarGregorian.wrapAroundRelativeWeekday(_:)(Swift::Int a1)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v6;
  char v7;
  Swift::Int result;
  uint64_t v9;
  BOOL v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  if (*((_BYTE *)v1 + 128) != 1) {
    goto LABEL_8;
  }
  if (*((void *)v1 + 11))
  {
    uint64_t v2 = *((void *)v1 + 12);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 328);
    swift_unknownObjectRetain();
    v5(&v13, ObjectType, v2);
    LOBYTE(v2) = v13;
    if (one-time initialization token for weekdays != -1) {
      goto LABEL_16;
    }
    while (1)
    {
      uint64_t v1 = static Locale.Weekday.weekdays;
      swift_bridgeObjectRetain();
      uint64_t v2 = specialized Collection<>.firstIndex(of:)(v2, (uint64_t)v1);
      BOOL v7 = v6;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v7 & 1) != 0) {
        break;
      }
      swift_unknownObjectRelease();
      uint64_t v9 = v2 + 1;
      if (__OFADD__(v2, 1LL))
      {
        __break(1u);
LABEL_8:
        uint64_t v9 = *((void *)v1 + 15);
      }

      __int128 v10 = __OFSUB__(a1, v9);
      __int128 v11 = a1 - v9;
      if (!v10) {
        goto LABEL_10;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      swift_once();
    }

    __break(1u);
  }

  else
  {
    __int128 v11 = a1 - 1;
    if (__OFSUB__(a1, 1LL)) {
      goto LABEL_15;
    }
LABEL_10:
    char v12 = v11 % 7;
    if (v12 >= 0) {
      return v12;
    }
    else {
      return v12 + 7;
    }
  }

  return result;
}

Swift::Int __swiftcall _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)( Swift::Int desiredDay, Swift::Int dayOfPeriod, Swift::Int weekday)
{
  Swift::Int result = _CalendarGregorian.firstWeekday.getter();
  Swift::Int v8 = weekday - result;
  if (__OFSUB__(weekday, result))
  {
    __break(1u);
    goto LABEL_17;
  }

  BOOL v9 = __OFSUB__(v8, dayOfPeriod);
  Swift::Int v10 = v8 - dayOfPeriod;
  if (v9)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  BOOL v9 = __OFADD__(v10, 1LL);
  Swift::Int v11 = v10 + 1;
  if (v9)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v12 = v11 % 7;
  if (v12 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v12 + 7;
  }
  Swift::Int v14 = desiredDay + v13;
  if (__OFADD__(desiredDay, v13)) {
    goto LABEL_19;
  }
  BOOL v9 = __OFSUB__(v14, 1LL);
  Swift::Int v15 = v14 - 1;
  if (!v9)
  {
    Swift::Int v16 = v15 / 7;
    if (*(_BYTE *)(v3 + 144) == 1)
    {
      if (!*(void *)(v3 + 88)) {
        return ++v16;
      }
      uint64_t v17 = *(void *)(v3 + 96);
      uint64_t ObjectType = swift_getObjectType();
      BOOL v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 344);
      swift_unknownObjectRetain();
      uint64_t v20 = v19(ObjectType, v17);
      swift_unknownObjectRelease();
    }

    else
    {
      uint64_t v20 = *(void *)(v3 + 136);
    }

    if (7 - v13 < v20) {
      return v16;
    }
    return ++v16;
  }

Swift::Int __swiftcall _CalendarGregorian.relativeWeekdayForLastDayOfPeriod(periodLength:referenceDayOfPeriod:referenceDayWeekday:)( Swift::Int periodLength, Swift::Int referenceDayOfPeriod, Swift::Int referenceDayWeekday)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v9;
  char v10;
  Swift::Int result;
  uint64_t v12;
  BOOL v13;
  Swift::Int v14;
  uint64_t v15;
  Swift::Int v6 = periodLength - referenceDayOfPeriod;
  if (__OFSUB__(periodLength, referenceDayOfPeriod)) {
    goto LABEL_16;
  }
  Swift::Int v5 = v6 + referenceDayWeekday;
  if (__OFADD__(v6, referenceDayWeekday)) {
    goto LABEL_17;
  }
  if (*((_BYTE *)v4 + 128) != 1) {
    goto LABEL_10;
  }
  if (*((void *)v4 + 11))
  {
    uint64_t v3 = *((void *)v4 + 12);
    uint64_t ObjectType = swift_getObjectType();
    Swift::Int v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 328);
    swift_unknownObjectRetain();
    v8(&v15, ObjectType, v3);
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v15;
    if (one-time initialization token for weekdays != -1) {
      goto LABEL_18;
    }
    while (1)
    {
      uint64_t v4 = static Locale.Weekday.weekdays;
      swift_bridgeObjectRetain();
      uint64_t v3 = specialized Collection<>.firstIndex(of:)(v3, (uint64_t)v4);
      Swift::Int v10 = v9;
      Swift::Int result = swift_bridgeObjectRelease();
      if ((v10 & 1) != 0) {
        break;
      }
      swift_unknownObjectRelease();
      uint64_t v12 = v3 + 1;
      if (__OFADD__(v3, 1LL))
      {
        __break(1u);
LABEL_10:
        uint64_t v12 = *((void *)v4 + 15);
      }

      uint64_t v13 = __OFSUB__(v5, v12);
      Swift::Int v14 = v5 - v12;
      if (!v13) {
        return v14 % 7;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      swift_once();
    }

    __break(1u);
  }

  else
  {
    Swift::Int v14 = v5 - 1;
    if (__OFSUB__(v5, 1LL)) {
      goto LABEL_15;
    }
    return v14 % 7;
  }

  return result;
}

uint64_t _CalendarGregorian.dayOfMonthConsideringGregorianCutover(_:inTimeZone:)( double *a1, double *a2, __int128 *a3)
{
  double v5 = *a2;
  uint64_t v17 = 14LL;
  double v16 = v5;
  __int128 v15 = *a3;
  uint64_t result = (uint64_t)_CalendarGregorian.dateComponents(_:from:in:)(&v17, &v16, (uint64_t *)&v15, v18);
  if ((v20 & 1) != 0 || (v22 & 1) != 0 || (v24 & 1) != 0) {
    goto LABEL_21;
  }
  Swift::Int v7 = year;
  uint64_t v8 = v23;
  Swift::Int v9 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(_, year);
  uint64_t result = outlined release of DateComponents((uint64_t)v18);
  if (v7 == *(void *)(v3 + 64))
  {
    double v10 = *(double *)(v3 + 72);
    uint64_t v11 = v8;
    if (v5 >= v10)
    {
      uint64_t v11 = v8 - 10;
      if (__OFSUB__(v8, 10LL)) {
        goto LABEL_20;
      }
    }

    uint64_t v12 = v11 - 1;
    if (__OFSUB__(v11, 1LL))
    {
      __break(1u);
    }

    else if ((unsigned __int128)(v12 * (__int128)86400LL) >> 64 == (86400 * v12) >> 63)
    {
      double v13 = v5 - (double)(86400 * v12);
      *a1 = v13;
      return v8;
    }

    __break(1u);
  }

  else
  {
    uint64_t v14 = v8 - 1;
    if (!__OFSUB__(v8, 1LL))
    {
      if ((unsigned __int128)(v14 * (__int128)86400LL) >> 64 == (86400 * v14) >> 63)
      {
        *a1 = v5 - (double)(86400 * v14);
        return v8;
      }

      goto LABEL_19;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF@<X0>( uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a3) {
    __asm { BR              X10 }
  }

  *a4 = *a2;
  return result;
}

uint64_t _s10Foundation18_CalendarGregorianC4date19byAddingAndWrapping2toAA4DateVAA0J10ComponentsV_AHtAA0cB5ErrorOYKF@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  char v9 = *(_BYTE *)(a1 + 56);
  uint64_t v36 = *(void *)(a1 + 64);
  char v39 = *(_BYTE *)(a1 + 72);
  uint64_t v38 = *(void *)(a1 + 208);
  uint64_t v10 = *a2;
  char v41 = *(_BYTE *)(a1 + 216);
  char v11 = *(_BYTE *)(a1 + 280);
  char v33 = *(_BYTE *)(a1 + 232);
  char v35 = *(_BYTE *)(a1 + 248);
  uint64_t v34 = *(void *)(a1 + 256);
  char v37 = *(_BYTE *)(a1 + 264);
  uint64_t v40 = *(void *)(a1 + 272);
  uint64_t v14 = *(void *)(a1 + 160);
  int v17 = *(unsigned __int8 *)(a1 + 168);
  uint64_t v16 = *(void *)(a1 + 144);
  char v19 = *(_BYTE *)(a1 + 152);
  uint64_t v18 = *(void *)(a1 + 128);
  char v21 = *(_BYTE *)(a1 + 136);
  uint64_t v20 = *(void *)(a1 + 112);
  char v23 = *(_BYTE *)(a1 + 120);
  uint64_t v22 = *(void *)(a1 + 176);
  char v25 = *(_BYTE *)(a1 + 184);
  uint64_t v24 = *(void *)(a1 + 96);
  char v27 = *(_BYTE *)(a1 + 104);
  uint64_t v26 = *(void *)(a1 + 80);
  char v30 = *(_BYTE *)(a1 + 88);
  uint64_t v28 = *(void *)(a1 + 192);
  uint64_t v29 = *(void *)(a1 + 224);
  char v32 = *(_BYTE *)(a1 + 200);
  uint64_t v31 = *(void *)(a1 + 240);
  if (*(void *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 40)) {
      goto LABEL_3;
    }
  }

  else
  {
    swift_unknownObjectRetain();
    if (v7)
    {
LABEL_3:
      swift_unknownObjectRetain();
      if ((v9 & 1) != 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  char v47 = 0;
  uint64_t v46 = v10;
  swift_unknownObjectRetain();
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v6,  v48);
  if (v5) {
    goto LABEL_51;
  }
  uint64_t v5 = 0LL;
  uint64_t v10 = v48[0];
  if ((v9 & 1) != 0)
  {
LABEL_4:
    if ((v11 & 1) != 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t _s10Foundation18_CalendarGregorianC4date33byAddingAndCarryingOverComponents2toAA4DateVAA0lJ0V_AHtAA0cB5ErrorOYKF@<X0>( uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v170 = *(void *)(a1 + 64);
  char v8 = *(_BYTE *)(a1 + 72);
  uint64_t v185 = *(void *)(a1 + 80);
  char v173 = *(_BYTE *)(a1 + 104);
  char v174 = *(_BYTE *)(a1 + 88);
  uint64_t v168 = *(void *)(a1 + 112);
  uint64_t v166 = *(void *)(a1 + 128);
  char v169 = *(_BYTE *)(a1 + 136);
  uint64_t v164 = *(void *)(a1 + 144);
  char v167 = *(_BYTE *)(a1 + 152);
  uint64_t v162 = *(void *)(a1 + 160);
  int v165 = *(unsigned __int8 *)(a1 + 168);
  uint64_t v179 = *(void *)(a1 + 96);
  uint64_t v180 = *(void *)(a1 + 176);
  char v171 = *(_BYTE *)(a1 + 120);
  char v172 = *(_BYTE *)(a1 + 184);
  uint64_t v178 = *(void *)(a1 + 224);
  int v175 = *(unsigned __int8 *)(a1 + 232);
  char v176 = *(_BYTE *)(a1 + 200);
  uint64_t v181 = *(void *)(a1 + 192);
  uint64_t v182 = *(void *)(a1 + 240);
  double v9 = *a2;
  char v177 = *(_BYTE *)(a1 + 248);
  char v10 = *(_BYTE *)(a1 + 280);
  uint64_t v184 = *(void *)(a1 + 256);
  int v183 = *(unsigned __int8 *)(a1 + 264);
  uint64_t v11 = *(void *)(a1 + 272);
  if (*(void *)(a1 + 16))
  {
    uint64_t v12 = v4;
    uint64_t v187 = *(void *)(a1 + 24);
    double v13 = *(double *)(a1 + 16);
    if (*(_BYTE *)(a1 + 56)) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v12 = v4;
    uint64_t v187 = *(void *)(v4 + 112);
    double v13 = *(double *)(v4 + 104);
    swift_unknownObjectRetain();
    if (v7)
    {
LABEL_3:
      swift_unknownObjectRetain();
      uint64_t v14 = v12;
      uint64_t v15 = v5;
      if ((v10 & 1) != 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  LOBYTE(v190) = 1;
  *(double *)Swift::Int v193 = v9;
  *(double *)__dst = v13;
  *((void *)&__dst[0] + 1) = v187;
  swift_unknownObjectRetain();
  uint64_t v14 = v12;
  _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v190,  (double *)v193,  v6,  v194);
  if (v5) {
    goto LABEL_213;
  }
  uint64_t v15 = 0LL;
  double v9 = v194[0];
  if ((v10 & 1) != 0)
  {
LABEL_4:
    if ((v8 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }

uint64_t _CalendarGregorian.date(byAdding:to:wrappingComponents:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  if ((a3 & 1) != 0) {
    uint64_t result = _s10Foundation18_CalendarGregorianC4date19byAddingAndWrapping2toAA4DateVAA0J10ComponentsV_AHtAA0cB5ErrorOYKF( a1,  &v7,  (uint64_t)v6,  &v8);
  }
  else {
    uint64_t result = _s10Foundation18_CalendarGregorianC4date33byAddingAndCarryingOverComponents2toAA4DateVAA0lJ0V_AHtAA0cB5ErrorOYKF( a1,  (double *)&v7,  (uint64_t)v6,  (double *)&v8);
  }
  *(void *)a4 = v8;
  *(_BYTE *)(a4 + 8) = 0;
  return result;
}

void *_CalendarGregorian.dateComponents(_:from:to:)@<X0>( uint64_t *a1@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = 0LL;
  uint64_t v8 = *a1;
  double v9 = *a2;
  double v10 = *a3;
  double v11 = *a3;
  double v12 = *a2;
  if ((*a1 & 0x2000) != 0)
  {
    __src[0] = *a2;
    *(double *)&__int128 __dst = v10;
    double v13 = specialized static Date.subsecondsOffsetInNanoScale(_:_:)(__src, (double *)&__dst);
    uint64_t v7 = v13;
    if ((uint64_t)v13 >= 1000000000)
    {
      uint64_t v7 = v13 - 125000000;
      if (v9 != v10)
      {
        if (v9 < v10)
        {
LABEL_5:
          double v12 = floor(v9);
          BOOL v14 = v10 < v9;
          if (v10 != v9) {
            goto LABEL_6;
          }
LABEL_11:
          double v11 = v10;
          goto LABEL_12;
        }

        goto LABEL_96;
      }
    }

    else if (v9 != v10)
    {
      if (v9 >= v10) {
        goto LABEL_5;
      }
LABEL_96:
      double v12 = ceil(v9);
      BOOL v14 = v10 < v9;
      if (v10 == v9) {
        goto LABEL_11;
      }
      goto LABEL_6;
    }

    double v12 = v9;
    BOOL v14 = v10 < v9;
    if (v10 == v9) {
      goto LABEL_11;
    }
LABEL_6:
    if (v14) {
      double v11 = ceil(v10);
    }
    else {
      double v11 = floor(v10);
    }
  }

char *orderedComponents #1 (_:) in _CalendarGregorian.dateComponents(_:from:to:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((*a1 & 1) == 0)
  {
    uint64_t v2 = (char *)MEMORY[0x18961AFE8];
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }

  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v3 > 1),  v4 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  if ((v1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
    }
    unint64_t v6 = *((void *)v2 + 2);
    unint64_t v5 = *((void *)v2 + 3);
    if (v6 >= v5 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v5 > 1),  v6 + 1,  1,  v2);
    }
    *((void *)v2 + 2) = v6 + 1;
    v2[v6 + 32] = 1;
  }

NSCalendar __swiftcall _CalendarGregorian.bridgeToNSCalendar()()
{
  uint64_t v1 = lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian( &lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian,  (uint64_t)&protocol conformance descriptor for _CalendarGregorian);
  uint64_t v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  unint64_t v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = v0;
  *(void *)(v4 + 24) = v1;
  *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  uint64_t v5 = *MEMORY[0x1896039C8];
  v7.receiver = v3;
  v7.super_class = v2;
  swift_retain();
  result.super.isa = (Class)objc_msgSendSuper2(&v7, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result.super.isa) {
    __break(1u);
  }
  return result;
}

uint64_t _CalendarGregorian.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _CalendarGregorian()
{
  return objc_opt_self();
}

uint64_t protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarGregorian( uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  char v12 = *((_BYTE *)a8 + 8);
  char v13 = a5 & 1;
  char v14 = a7 & 1;
  uint64_t v17 = *a8;
  char v18 = v12;
  uint64_t v15 = swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( v15,  a2,  a3,  a4,  v13,  a6,  v14,  (uint64_t)&v17);
  return v15;
}

uint64_t protocol witness for _CalendarProtocol.locale.getter in conformance _CalendarGregorian@<X0>( _OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 88);
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarGregorian@<X0>( _OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 104);
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarGregorian( uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  return _CalendarGregorian.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)( a1,  a2,  a3,  a4 & 1,  a5,  a6 & 1);
}

uint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarGregorian( unsigned __int8 *a1)
{
  return specialized _CalendarGregorian.minimumRange(of:)(a1);
}

void protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarGregorian(uint64_t a1)
{
}

void protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarGregorian( _BYTE *a1, _BYTE *a2, double *a3)
{
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarGregorian( Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarGregorian.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:) in conformance _CalendarGregorian@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v9 = *a1;
  uint64_t v8 = v5;
  __int128 v7 = *(_OWORD *)(v3 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v9, (double *)&v8, (uint64_t *)&v7, a3);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CalendarGregorian()
{
  return 0LL;
}

uint64_t instantiation function for generic protocol witness table for _CalendarGregorian(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian( &lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian,  (uint64_t)&protocol conformance descriptor for _CalendarGregorian);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for _CalendarGregorian();
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError()
{
  unint64_t result = lazy protocol witness table cache variable for type GregorianCalendarError and conformance GregorianCalendarError;
  if (!lazy protocol witness table cache variable for type GregorianCalendarError and conformance GregorianCalendarError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for GregorianCalendarError,  &type metadata for GregorianCalendarError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GregorianCalendarError and conformance GregorianCalendarError);
  }

  return result;
}

uint64_t specialized static _CalendarGregorian.yearMonthDayFromJulianDay(_:useJulianRef:)( uint64_t result, char a2)
{
  uint64_t v2 = result + 1401;
  if (__OFADD__(result, 1401LL))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if ((a2 & 1) != 0) {
    goto LABEL_7;
  }
  if ((unint64_t)(result - 0x2000000000000000LL) >> 62 != 3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (__OFADD__(274277LL, 4 * result))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  BOOL v3 = __OFADD__(v2, 3 * ((4 * result + 274277) / 146097) / 4);
  uint64_t v4 = v2 + 3 * ((4 * result + 274277) / 146097) / 4;
  if (v3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  BOOL v3 = __OFSUB__(v4, 38LL);
  uint64_t v2 = v4 - 38;
  if (!v3)
  {
LABEL_7:
    if ((unint64_t)(v2 - 0x2000000000000000LL) >> 62 == 3)
    {
      uint64_t v5 = (4 * v2) | 3;
      unint64_t v6 = 5 * ((v5 % 1461 + (v5 % 1461 < 0 ? 0x5B5uLL : 0)) >> 2);
      if ((uint64_t)(v6 + 2) < 0)
      {
        unint64_t v7 = ~((-3LL - v6) / 0x99);
        if ((v2 & 0x8000000000000000LL) == 0) {
          goto LABEL_10;
        }
      }

      else
      {
        unint64_t v7 = (v6 + 2) / 0x99;
        if ((v2 & 0x8000000000000000LL) == 0)
        {
LABEL_10:
          unint64_t v8 = v5 / 0x5B5uLL;
LABEL_13:
          char v9 = v7 + 2;
          uint64_t v10 = (unsigned __int128)((uint64_t)(v7 + 2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
          return (13 - (v9 - 12 * ((v10 >> 1) + (v10 < 0)))) / 0xCu + v8 - 4716;
        }
      }

      unint64_t v8 = ~((-4 - 4 * v2) / 0x5B5uLL);
      goto LABEL_13;
    }

    goto LABEL_15;
  }

uint64_t specialized _CalendarGregorian.minimumRange(of:)(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void, uint64_t, void))((char *)sub_18333BF10 + 4 * byte_1838238E2[*a1]))( 0LL,  2LL,  0LL);
}

uint64_t sub_18333BF10()
{
  return 1LL;
}

uint64_t sub_18333BF20()
{
  return 0LL;
}

uint64_t sub_18333BF30()
{
  return 0LL;
}

uint64_t sub_18333BF40()
{
  return 1LL;
}

uint64_t sub_18333BF54()
{
  return 1LL;
}

uint64_t sub_18333BF64()
{
  return 1LL;
}

uint64_t sub_18333BF74()
{
  return 0LL;
}

uint64_t sub_18333BF84()
{
  return 1LL;
}

uint64_t sub_18333BF94()
{
  return 140742LL;
}

uint64_t sub_18333BFA8()
{
  return 0LL;
}

uint64_t sub_18333BFBC()
{
  return 1LL;
}

uint64_t sub_18333BFCC()
{
  return 1LL;
}

uint64_t specialized static _CalendarGregorian.isComponentsInSupportedRange(_:)(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  int v3 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  int v5 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  int v7 = *(unsigned __int8 *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  int v9 = *(unsigned __int8 *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 128);
  int v11 = *(unsigned __int8 *)(a1 + 136);
  uint64_t v12 = *(void *)(a1 + 144);
  unsigned int v13 = *(unsigned __int8 *)(a1 + 152);
  uint64_t v14 = *(void *)(a1 + 176);
  int v15 = *(unsigned __int8 *)(a1 + 184);
  uint64_t v16 = *(void *)(a1 + 192);
  int v17 = *(unsigned __int8 *)(a1 + 200);
  int v18 = *(unsigned __int8 *)(a1 + 248);
  int v19 = *(unsigned __int8 *)(a1 + 264);
  if (v1 != 1) {
    return 0LL;
  }
  int v20 = (unint64_t)(*(void *)(a1 + 208) + 18856LL) < 0x1F3711 ? 1 : *(unsigned __int8 *)(a1 + 216);
  if (v20 != 1) {
    return 0LL;
  }
  if (v19 != 1) {
    return 0LL;
  }
  if (v18 != 1) {
    return 0LL;
  }
  int v21 = (unint64_t)(*(void *)(a1 + 272) + 4714LL) < 0x7CDC5 ? 1 : *(unsigned __int8 *)(a1 + 280);
  if (v21 != 1) {
    return 0LL;
  }
  int v22 = (unint64_t)(v14 + 1715896) < 0xB1892B1 ? 1 : v15;
  if (v22 != 1) {
    return 0LL;
  }
  int v23 = (unint64_t)(v16 + 245128) < 0x195CBD1 ? 1 : v17;
  if (v23 != 1) {
    return 0LL;
  }
  int v24 = (unint64_t)(v2 + 56568) < 0x5DA531 ? 1 : v3;
  if (v24 != 1) {
    return 0LL;
  }
  if (v7 != 1) {
    return 0LL;
  }
  if (v5 != 1) {
    return 0LL;
  }
  if (v9 != 1) {
    return 0LL;
  }
  int v25 = v10 == (int)v10 ? 1 : v11;
  if (v25 != 1) {
    return 0LL;
  }
  return v13;
}

uint64_t specialized static ResolvedDateComponents.yearOrYearForWOYAdjustingEra(from:)(uint64_t a1)
{
  int v1 = (_BYTE *)(a1 + 264);
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(_BYTE *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  char v5 = *(_BYTE *)(a1 + 72);
  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 56)) {
      uint64_t result = 1LL;
    }
    else {
      uint64_t result = *(void *)(a1 + 48);
    }
  }

  else
  {
    uint64_t result = *(void *)(a1 + 272);
    if ((*v1 & 1) == 0) {
      goto LABEL_11;
    }
  }

  if (v2) {
    char v7 = 1;
  }
  else {
    char v7 = v3;
  }
  if ((v7 & 1) == 0)
  {
    BOOL v8 = __OFSUB__(1LL, result);
    uint64_t result = 1 - result;
    if (v8)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }

uint64_t specialized ResolvedDateComponents.init(dateComponents:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = specialized static ResolvedDateComponents.yearOrYearForWOYAdjustingEra(from:)((uint64_t)v14);
  uint64_t v6 = v5;
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  uint64_t v8 = __dst[10];
  if (LOBYTE(__dst[11]) == 1)
  {
    if ((__dst[25] & 1) != 0 || (__dst[23] & 1) != 0)
    {
      uint64_t v9 = __dst[32];
      if ((__dst[33] & 1) != 0 || (__dst[23] & 1) != 0)
      {
        if ((__dst[31] & 1) != 0 || (__dst[23] & 1) != 0)
        {
          if (LOBYTE(__dst[13]) == 1)
          {
            if ((__dst[35] & 1) != 0)
            {
              if ((__dst[7] & 1) != 0)
              {
                if (LOBYTE(__dst[33]))
                {
                  if ((__dst[31] & 1) != 0)
                  {
                    if ((__dst[25] & 1) != 0)
                    {
                      if ((__dst[23] & 1) != 0)
                      {
                        char v10 = 33;
                        uint64_t v11 = 1LL;
                      }

                      else
                      {
                        uint64_t v9 = 0LL;
                        char v10 = 64;
                        uint64_t v11 = __dst[22];
                        uint64_t v8 = 1LL;
                      }
                    }

                    else
                    {
                      uint64_t v11 = __dst[22];
                      uint64_t v9 = LOBYTE(__dst[23]);
                      char v10 = 64;
                      uint64_t v8 = __dst[24];
                    }
                  }

                  else
                  {
                    uint64_t v11 = __dst[22];
                    uint64_t v9 = LOBYTE(__dst[23]);
                    char v10 = 0x80;
                    uint64_t v8 = __dst[30];
                  }
                }

                else
                {
                  uint64_t v8 = 0LL;
                  uint64_t v11 = __dst[22];
                  uint64_t v6 = __dst[32];
                  uint64_t v9 = LOBYTE(__dst[23]);
                  char v10 = 96;
                }
              }

              else
              {
                char v10 = LOBYTE(__dst[33]) | 0x20;
                uint64_t v11 = 1LL;
              }
            }

            else
            {
              uint64_t v11 = __dst[22];
              uint64_t v6 = __dst[32];
              uint64_t v9 = LOBYTE(__dst[23]);
              char v10 = 96;
              uint64_t v8 = LOBYTE(__dst[33]);
            }
          }

          else
          {
            uint64_t v8 = 0LL;
            uint64_t v11 = 0LL;
            uint64_t v9 = 0LL;
            char v10 = 0;
            uint64_t v6 = __dst[12];
          }
        }

        else
        {
          uint64_t v9 = 0LL;
          char v10 = 0x80;
          uint64_t v11 = __dst[22];
          uint64_t v8 = __dst[30];
        }
      }

      else
      {
        uint64_t v8 = 0LL;
        char v10 = 96;
        uint64_t v11 = __dst[22];
        uint64_t v6 = __dst[32];
        uint64_t v9 = 0LL;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
      char v10 = 64;
      uint64_t v11 = __dst[22];
      uint64_t v8 = __dst[24];
    }

    goto LABEL_38;
  }

  uint64_t v9 = __dst[32];
  char v12 = LOBYTE(__dst[35]) ^ 1 | LOBYTE(__dst[33]);
  if ((__dst[35] & 1) != 0 || (__dst[33] & 1) != 0)
  {
LABEL_23:
    uint64_t v11 = 0LL;
    char v10 = v12 | 0x20;
LABEL_38:
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v8;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v9;
    *(_BYTE *)(a2 + 40) = v10;
    return result;
  }

  if ((__dst[9] & 1) != 0)
  {
LABEL_22:
    char v12 = 0;
    goto LABEL_23;
  }

  if (__dst[8] == 1LL && __dst[32] >= 52LL)
  {
    BOOL v13 = __OFADD__(v4++, 1LL);
    if (!v13) {
      goto LABEL_22;
    }
    __break(1u);
  }

  else
  {
    char v12 = 0;
    if (__dst[8] < 2LL || __dst[32] != 1LL) {
      goto LABEL_23;
    }
    BOOL v13 = __OFSUB__(v4--, 1LL);
    if (!v13)
    {
      char v12 = 0;
      uint64_t v9 = 1LL;
      goto LABEL_23;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized _CalendarGregorian.add(amount:to:wrappingTo:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result) {
    return a2;
  }
  uint64_t v4 = a2 + result;
  if (__OFADD__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v5 = v4 - a3;
  if (__OFSUB__(v4, a3))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (!v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v5 == 0x8000000000000000LL && v6 == -1) {
    goto LABEL_17;
  }
  uint64_t v7 = v5 % v6;
  if (v7 < 0)
  {
    BOOL v8 = __OFADD__(v7, v6);
    v7 += v6;
    if (v8) {
      goto LABEL_18;
    }
  }

  a2 = v7 + a3;
  if (!__OFADD__(v7, a3)) {
    return a2;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

double *specialized static Date.subsecondsOffsetInNanoScale(_:_:)(double *result, double *a2)
{
  double v2 = *result;
  if (*result == *a2) {
    return 0LL;
  }
  if (*result >= *a2) {
    double v3 = *result;
  }
  else {
    double v3 = *a2;
  }
  if (*result >= *a2) {
    double v2 = *a2;
  }
  double v4 = round((ceil(v2) - v2 + v3 - floor(v3)) * 1000000000.0);
  if ((~*(void *)&v4 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (v4 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v4 < 9.22337204e18) {
    return (double *)(uint64_t)v4;
  }
LABEL_14:
  __break(1u);
  return result;
}

_OWORD *outlined init with take of ResolvedDateComponents(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t outlined init with take of Int?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for ResolvedDateComponents(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 40) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ResolvedDateComponents( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 124;
    if (a3 >= 0x7C) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7C) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0LL;
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }

  return result;
}

uint64_t getEnumTag for ResolvedDateComponents(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 5;
}

uint64_t destructiveProjectEnumData for ResolvedDateComponents(uint64_t result)
{
  *(_BYTE *)(result + 40) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for ResolvedDateComponents(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = *(_BYTE *)(result + 40) & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for ResolvedDateComponents()
{
  return &type metadata for ResolvedDateComponents;
}

uint64_t getEnumTagSinglePayload for GregorianCalendarError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for GregorianCalendarError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = 2LL * -a2;
      *(void *)(result + 24) = 0LL;
      *(_BYTE *)(result + 32) = 0;
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t getEnumTag for GregorianCalendarError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 7;
}

uint64_t destructiveProjectEnumData for GregorianCalendarError(uint64_t result)
{
  *(_BYTE *)(result + 32) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for GregorianCalendarError(uint64_t result, char a2)
{
  char v2 = *(_BYTE *)(result + 32) & 1 | (a2 << 7);
  *(void *)(result + 16) &= 1uLL;
  *(_BYTE *)(result + 32) = v2;
  return result;
}

ValueMetadata *type metadata accessor for GregorianCalendarError()
{
  return &type metadata for GregorianCalendarError;
}

uint64_t PredicateExpressions.Filter.sequence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.Filter.filter.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 60));
}

uint64_t PredicateExpressions.Filter.variable.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 64));
  return result;
}

void PredicateExpressions.Filter.init(_:_:)(uint64_t a1)
{
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  do
    unint64_t v1 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v1 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  type metadata accessor for PredicateExpressions.Filter();
}

void type metadata accessor for PredicateExpressions.Filter()
{
}

uint64_t PredicateExpressions.Filter.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v17 = *a1;
  uint64_t v16 = v17;
  uint64_t v9 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  uint64_t v10 = v9(&v16, v7, v6);
  if (v3)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    MEMORY[0x1895F8858](v10);
    uint64_t v11 = a2[3];
    *(&v15 - 8) = v7;
    *(&v15 - 7) = v11;
    uint64_t v13 = a2[5];
    uint64_t v12 = a2[6];
    *(&v15 - 6) = v6;
    *(&v15 - 5) = v13;
    *(&v15 - 4) = v12;
    *(&v15 - 3) = (uint64_t)&v17;
    *(&v15 - 2) = v2;
    uint64_t v2 = Sequence.filter(_:)();
    swift_bridgeObjectRelease();
  }

  return v2;
}

void closure #1 in PredicateExpressions.Filter.evaluate(_:)()
{
  uint64_t v0 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v0);
  type metadata accessor for PredicateExpressions.Filter();
}

uint64_t sub_18333CC4C(uint64_t a1)
{
  uint64_t v8 = *(void *)(v4 + *(int *)(a1 + 64));
  uint64_t v9 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v5, *(void *)(v7 - 136), v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v5, 0LL, 1LL, v2);
  *(void *)(v7 - 120) = v8;
  PredicateBindings.subscript.setter(v5, (uint64_t *)(v7 - 120), v2);
  *(void *)(v7 - 120) = *v3;
  uint64_t v10 = *(void *)(v7 - 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v7 - 120, v6, v1);
  if (!v10) {
    char v11 = *(_BYTE *)(v7 - 65);
  }
  return v11 & 1;
}

void partial apply for closure #1 in PredicateExpressions.Filter.evaluate(_:)()
{
}

uint64_t sub_18333CD18(char a1)
{
  return a1 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Filter<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Filter.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

void static PredicateExpressions.build_filter<A, B>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  uint64_t v20 = a3;
  uint64_t v21 = a2;
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v14 = MEMORY[0x1895F8858](v13);
  (*(void (**)(char *, __n128))(v12 + 16))((char *)&v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL), v14);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  do
    unint64_t v16 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v16 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = v18;
  uint64_t v26 = v19;
  type metadata accessor for PredicateExpressions.Filter();
}

uint64_t PredicateExpressions.Filter.description.getter()
{
  v0._id object = (void *)0x80000001839D1180LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x626169726176202CLL;
  v1._id object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 41LL;
  v3._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 0x656C626169726156LL;
  v4._id object = (void *)0xE900000000000028LL;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x7265746C6966202CLL;
  v5._id object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 41LL;
  v6._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return 0LL;
}

uint64_t PredicateExpressions.Filter<>.encode(to:)(void *a1, uint64_t a2)
{
  if (!v3)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    uint64_t v12 = *(void *)(v2 + *(int *)(a2 + 64));
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v8 = type metadata accessor for PredicateExpressions.Variable(0LL, AssociatedTypeWitness, v6, v7);
    MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v8);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

void PredicateExpressions.Filter<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  v14[11] = a3;
  v14[6] = a4;
  v14[3] = a5;
  v14[8] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v14[7] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[9] = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v7);
  v14[10] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[13] = v9;
  v14[14] = v10;
  v14[4] = v11;
  v14[5] = v12;
  v14[15] = v11;
  v14[16] = v13;
  v14[17] = v12;
  type metadata accessor for PredicateExpressions.Filter();
}

uint64_t sub_18333D2BC(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 128);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 216) = v6;
  *(void *)(v4 - 208) = v8;
  *(void *)(v4 - 128) = v3;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v10 = *(void *)(v4 - 144);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v11 = *(void *)(v4 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 152) + 32LL))(v11, v10, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v12 = *(void *)(v4 - 168);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 160) + 32LL))(v11 + *(int *)(a1 + 60), v12, v2);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for PredicateExpressions.Variable(0LL, AssociatedTypeWitness, v14, v15);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v16);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  *(void *)(v11 + *(int *)(a1 + 64)) = *(void *)(v4 - 72);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  uint64_t v17 = *(void *)(v4 - 216);
  (*(void (**)(void, uint64_t, uint64_t))(v17 + 16))(*(void *)(v4 - 200), v11, a1);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v11, a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Filter<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Filter<A, B>);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v10 = *(void *)(v6 + 16);
  uint64_t v9 = *(void *)(v6 + 24);
  v13[0] = v8;
  v13[1] = v7;
  void v13[2] = v10;
  _OWORD v13[3] = v9;
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Filter<A, B>, a2, v13);
  v12[0] = v8;
  v12[1] = v7;
  double v12[2] = v10;
  uint64_t v12[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Filter<A, B>, a2, v12);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Filter<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Filter<A, B>( void *a1, uint64_t a2)
{
  return PredicateExpressions.Filter<>.encode(to:)(a1, a2);
}

uint64_t type metadata completion function for PredicateExpressions.Filter()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.Filter( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = *(void *)(v7 + 64) + 7LL;
  unsigned int v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + (((v11 | 7) + 16LL) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }

  else
  {
    uint64_t v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    unint64_t v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( ((unint64_t)v4 + v9) & v15,  v16,  v5);
    *(void *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v10 + v16) & 0xFFFFFFFFFFFFF8LL);
  }

  return v4;
}

uint64_t initializeWithCopy for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(void *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(void *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(void *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(void *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Filter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  if (v8 >= a2)
  {
    if (v8)
    {
      if (v5 >= v7) {
        return (*(uint64_t (**)(uint64_t, void))(v4 + 48))(a1, *(unsigned int *)(v4 + 84));
      }
      else {
        return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
    }

    return 0LL;
  }

  if (((((*(void *)(v6 + 64) + (v10 & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
    unsigned int v11 = 2;
  }
  else {
    unsigned int v11 = a2 - v8 + 1;
  }
  if (v11 >= 0x10000) {
    unsigned int v12 = 4;
  }
  else {
    unsigned int v12 = 2;
  }
  if (v11 < 0x100) {
    unsigned int v12 = 1;
  }
  if (v11 >= 2) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_18333DACC + 4 * byte_183823AD0[v13]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Filter( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (a2 <= v7) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v9 = a3 - v7 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_17:
    }
      __asm { BR              X16 }
  }

  if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + ((*(void *)(v5 + 64) + v8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_18333DC68()
{
  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18333DC70(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x18333DC78LL);
  }
}

void sub_18333DCB4()
{
  *(_WORD *)(v0 + v1) = v2;
}

void sub_18333DCBC()
{
  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_18333DCC4(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v9 + v10) = 0;
  if (!a2) {
    JUMPOUT(0x18333DCCCLL);
  }
  if (v4 >= a3) {
    return (*(uint64_t (**)(uint64_t))(v7 + 56))(v9);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(v6 + 56))((v8 + v9) & v5);
  }
}

Swift::String __swiftcall BinaryFloatingPoint.formatted()()
{
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for FloatingPointFormatStyle(0LL, v0, v1, v2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (uint64_t *)((char *)&v24 - v7);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v9 = static LocaleCache.cache + 16;
  uint64_t v10 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v9, &v25);
  os_unfair_lock_unlock(v10);
  swift_release_n();
  uint64_t v11 = v25;
  unint64_t v12 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  uint64_t v13 = (char *)v8 + *(int *)(v5 + 36);
  *(void *)uint64_t v13 = 0LL;
  v13[8] = 1;
  *((void *)v13 + 2) = 0LL;
  *((void *)v13 + 3) = 0LL;
  *((void *)v13 + 4) = 0LL;
  *((void *)v13 + 5) = 0x1FFFFFFFELL;
  *((void *)v13 + 7) = 0LL;
  *((void *)v13 + 8) = 0LL;
  *((void *)v13 + 6) = 0LL;
  *((_DWORD *)v13 + 18) = 131584;
  *((_WORD *)v13 + 38) = 512;
  uint64_t v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v15 = &v13[v14[9]];
  uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = &v13[v14[10]];
  *(void *)uint64_t v17 = 0LL;
  v17[8] = -1;
  v13[v14[11]] = 3;
  *uint64_t v8 = v11;
  v8[1] = v12;
  uint64_t v18 = FloatingPointFormatStyle.format(_:)(v4, v5);
  uint64_t v20 = v19;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v21 = v18;
  uint64_t v22 = v20;
  result._id object = v22;
  result._uint64_t countAndFlagsBits = v21;
  return result;
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(v5, a3, a5);
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  void v19[2] = a5;
  v19[3] = a1;
  v19[1] = a6;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v15 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v17 = (char *)v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, v6, a2, v15);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v17, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
}

uint64_t BinaryFloatingPoint.init<A>(_:strategy:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v25[2] = a7;
  v25[3] = a5;
  v25[0] = a8;
  v25[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)v25 - v19;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(a6 + 48);
  uint64_t v26 = a1;
  v21(a1, a4, a6, v18);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a2, a4);
    uint64_t v22 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(v26, v22);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, AssociatedTypeWitness);
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a2, a4);
    uint64_t v24 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))(v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, AssociatedTypeWitness);
  }

uint64_t BinaryFloatingPoint.init<A>(_:strategy:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
}

uint64_t BinaryFloatingPoint.init(_:format:lenient:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return BinaryFloatingPoint.init(_:format:lenient:)( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>,  a7,  0);
}

{
  return BinaryFloatingPoint.init(_:format:lenient:)( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent,  a7,  1);
}

uint64_t BinaryFloatingPoint.init(_:format:lenient:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10)
{
  uint64_t v41 = a1;
  int v38 = a4;
  uint64_t v37 = a2;
  v36[1] = a9;
  int v40 = a10;
  uint64_t v14 = a7(0LL, a5, a6);
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = MEMORY[0x1895F8858](v14);
  __n128 v18 = (_OWORD *)((char *)v36 - v17);
  uint64_t v19 = MEMORY[0x186E20D4C](a8, v14, v16);
  v36[2] = a6;
  uint64_t v20 = (int *)type metadata accessor for FloatingPointParseStrategy(0LL, v14, v19, a6);
  uint64_t v39 = *((void *)v20 - 1);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)v36 - v21;
  v36[0] = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v27 = MEMORY[0x1895F8858](v26);
  unint64_t v29 = (char *)v36 - v28;
  uint64_t v43 = v15;
  unint64_t v30 = *(void (**)(_OWORD *, uint64_t, uint64_t, __n128))(v15 + 16);
  uint64_t v44 = a3;
  uint64_t v31 = a3;
  unint64_t v32 = v37;
  v30(v18, v31, v14, v27);
  ((void (*)(char *, _OWORD *, uint64_t))v30)(v22, v18, v14);
  v22[v20[11]] = v38;
  *(_OWORD *)&v22[v20[13]] = *v18;
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v18 + *(int *)(v14 + 36),  (uint64_t)&v22[v20[12]],  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v42;
  FloatingPointParseStrategy.parse(_:)(v41, v32, (uint64_t)v20, (uint64_t)v29);
  if (v33)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v14);
    return (*(uint64_t (**)(char *, int *))(v39 + 8))(v22, v20);
  }

  else
  {
    (*(void (**)(char *, int *))(v39 + 8))(v22, v20);
    swift_bridgeObjectRelease();
    uint64_t v35 = v36[0];
    (*(void (**)(char *, char *, uint64_t))(v36[0] + 16LL))(v25, v29, a5);
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v29, a5);
  }

uint64_t BinaryFloatingPoint.init(_:format:lenient:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v50 = a1;
  LODWORD(v48) = a4;
  uint64_t v52 = a3;
  os_log_type_t v47 = a2;
  uint64_t v43 = a7;
  uint64_t v49 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v49);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, a5, a6, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = MEMORY[0x1895F8858](v12);
  __n128 v16 = (__int128 *)((char *)&v40 - v15);
  uint64_t v17 = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, v12, v14);
  uint64_t v44 = a6;
  __n128 v18 = (int *)type metadata accessor for FloatingPointParseStrategy(0LL, v12, v17, a6);
  uint64_t v46 = *((void *)v18 - 1);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v45 = a5;
  uint64_t v42 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v41 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v27 = MEMORY[0x1895F8858](v26);
  unint64_t v29 = (char *)&v40 - v28;
  unint64_t v30 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v13 + 16);
  v30(v16, (uint64_t)v52, v12, v27);
  ((void (*)(char *, __int128 *, uint64_t))v30)(v20, v16, v12);
  uint64_t v31 = v47;
  v20[v18[11]] = v48;
  uint64_t v32 = v18[13];
  __int128 v48 = *v16;
  *(_OWORD *)&v20[v32] = v48;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection( (uint64_t)v16 + *(int *)(v12 + 40),  (uint64_t)v10);
  uint64_t v33 = *(void (**)(__int128 *, uint64_t))(v13 + 8);
  swift_unknownObjectRetain();
  v33(v16, v12);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = (uint64_t)v10;
  uint64_t v35 = v46;
  outlined init with take of ICUNumberFormatter.Signature( v34,  (uint64_t)&v20[v18[12]],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  (*(void (**)(char *, char *, int *))(v35 + 32))(v23, v20, v18);
  uint64_t v36 = v51;
  FloatingPointParseStrategy.parse(_:)(v50, v31, (uint64_t)v18, (uint64_t)v29);
  if (v36)
  {
    swift_bridgeObjectRelease();
    v33(v52, v12);
    return (*(uint64_t (**)(char *, int *))(v35 + 8))(v23, v18);
  }

  else
  {
    (*(void (**)(char *, int *))(v35 + 8))(v23, v18);
    swift_bridgeObjectRelease();
    uint64_t v38 = v42;
    uint64_t v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v41, v29, v45);
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    v33(v52, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v29, v39);
  }

Foundation::Date_optional __swiftcall _TimeZoneBridged.nextDaylightSavingTimeTransition(after:)(Foundation::Date after)
{
  uint64_t v4 = v2;
  uint64_t v5 = *(void **)(v3 + 16);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *v1);
  id v7 = objc_msgSend(v5, sel_nextDaylightSavingTimeTransitionAfterDate_, v6);

  if (v7)
  {
    objc_msgSend(v7, sel_timeIntervalSinceReferenceDate);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  *(void *)uint64_t v4 = v11;
  *(_BYTE *)(v4 + 8) = v7 == 0LL;
  result.Swift::Double value = *(Foundation::Date *)&v9;
  result.is_nil = v8;
  return result;
}

id _TimeZoneBridged.localizedName(for:locale:)(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(v2 + 16);
  if (*a2)
  {
    uint64_t v5 = a2[1];
    uint64_t ObjectType = swift_getObjectType();
    id v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 488))(ObjectType, v5);
  }

  else
  {
    id v7 = 0LL;
  }

  id v8 = objc_msgSend(v4, sel_localizedName_locale_, a1, v7);

  if (!v8) {
    return 0LL;
  }
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v9;
}

uint64_t type metadata accessor for _TimeZoneBridged()
{
  return objc_opt_self();
}

void protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneBridged()
{
}

void protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneBridged()
{
}

id protocol witness for _TimeZoneProtocol.identifier.getter in conformance _TimeZoneBridged()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_name);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id protocol witness for _TimeZoneProtocol.secondsFromGMT(for:) in conformance _TimeZoneBridged(double *a1)
{
  id v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  id v4 = objc_msgSend(v2, sel_secondsFromGMTForDate_, v3);

  return v4;
}

double protocol witness for _TimeZoneProtocol.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:) in conformance _TimeZoneBridged( double *a1)
{
  double v2 = *a1;
  id v3 = *(void **)(v1 + 16);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  objc_msgSend(v3, sel_secondsFromGMTForDate_, v4);

  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
  objc_msgSend(v3, sel_daylightSavingTimeOffsetForDate_, v5);
  double v7 = v6;

  return v7;
}

id protocol witness for _TimeZoneProtocol.abbreviation(for:) in conformance _TimeZoneBridged(double *a1)
{
  double v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  id v4 = objc_msgSend(v2, sel_abbreviationForDate_, v3);

  if (!v4) {
    return 0LL;
  }
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

id protocol witness for _TimeZoneProtocol.isDaylightSavingTime(for:) in conformance _TimeZoneBridged( double *a1)
{
  double v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  id v4 = objc_msgSend(v2, sel_isDaylightSavingTimeForDate_, v3);

  return v4;
}

double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneBridged( double *a1)
{
  double v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  objc_msgSend(v2, sel_daylightSavingTimeOffsetForDate_, v3);
  double v5 = v4;

  return v5;
}

uint64_t protocol witness for _TimeZoneProtocol.bridgeToNSTimeZone() in conformance _TimeZoneBridged()
{
  return v2;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneBridged()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_name);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneBridged(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneBridged and conformance _TimeZoneBridged();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneBridged and conformance _TimeZoneBridged()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged;
  if (!lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged)
  {
    uint64_t v1 = type metadata accessor for _TimeZoneBridged();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _TimeZoneBridged, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged);
  }

  return result;
}

unint64_t type metadata accessor for NSTimeZone()
{
  unint64_t result = lazy cache variable for type metadata for NSTimeZone;
  if (!lazy cache variable for type metadata for NSTimeZone)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTimeZone);
  }

  return result;
}

unint64_t BinaryInteger.numericStringRepresentation.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  id v3 = (char *)&v8 - v2;
  dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
  char v4 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v6 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)( (uint64_t)v3,  v4 & 1,  AssociatedTypeWitness,  *(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8LL));
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v6;
}

unint64_t numericStringRepresentationForBinaryInteger<A>(words:isSigned:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  v17[1] = *MEMORY[0x1895F89C0];
  uint64_t isStackAllocationSafe = dispatch thunk of Collection.count.getter();
  if (isStackAllocationSafe < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v9 = isStackAllocationSafe;
  if ((unint64_t)(isStackAllocationSafe + 0x1000000000000000LL) >> 61)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }

  if (8 * isStackAllocationSafe <= 1024
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v11 = (void *)((char *)v17 - v10);
    uint64_t v12 = specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, (uint64_t)v17 - v10, v9, a3, a4);
    if ((v12 & 0x8000000000000000LL) == 0) {
      return numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(v11, v12, a2 & 1);
    }
    __break(1u);
    goto LABEL_11;
  }

  __n128 v14 = (void *)swift_slowAlloc();
  uint64_t v15 = specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, (uint64_t)v14, v9, a3, a4);
  if (v15 < 0) {
    goto LABEL_13;
  }
  unint64_t v16 = numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(v14, v15, a2 & 1);
  MEMORY[0x186E20E60](v14, -1LL, -1LL);
  return v16;
}

unint64_t numericStringRepresentationForMutableBinaryInteger(words:isSigned:)( void *a1, uint64_t a2, char a3)
{
  unsigned int v3 = 0;
  void v17[2] = *MEMORY[0x1895F89C0];
  v17[0] = a1;
  v17[1] = a2;
  if ((a3 & 1) != 0 && a2)
  {
    if ((a1[a2 - 1] & 0x8000000000000000LL) != 0)
    {
      if (a2 < 0) {
        goto LABEL_23;
      }
      char v4 = 1;
      uint64_t v5 = a2;
      do
      {
        uint64_t v6 = v4 & 1;
        uint64_t v7 = ~*a1;
        BOOL v8 = __CFADD__(v7, v6);
        uint64_t v9 = v7 + v6;
        char v4 = v8;
        *a1++ = v9;
        --v5;
      }

      while (v5);
      unsigned int v3 = 1;
    }

    else
    {
      unsigned int v3 = 0;
    }
  }

  if ((unint64_t)(a2 - 0x200000000000000LL) >> 58 != 63)
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t isStackAllocationSafe = maxDecimalDigitCountForUnsignedInteger(bitWidth:)(a2 << 6);
  int64_t v11 = isStackAllocationSafe + v3;
  if (__OFADD__(isStackAllocationSafe, v3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (v11 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }

  if (v11 <= 1024 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)( (unint64_t)&v15 - v12,  v11,  (uint64_t)v17,  v3,  &v16);
    return v16;
  }

  else
  {
    unint64_t v14 = swift_slowAlloc();
    closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(v14, v11, (uint64_t)v17, v3, &v16);
    MEMORY[0x186E20E60](v14, -1LL, -1LL);
    return v16;
  }

uint64_t maxDecimalDigitCountForUnsignedInteger(bitWidth:)(uint64_t a1)
{
  if (a1 < 0) {
    goto LABEL_13;
  }
  double v1 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(a1));
  if ((v2 & 1) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  double v3 = v1 * 0.301029996;
  if ((~COERCE__INT64(v1 * 0.301029996) & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v3 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = (uint64_t)v3 + 1;
  if (__OFADD__((uint64_t)v3, 1LL))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  return result;
}

unint64_t closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)@<X0>( unint64_t __b@<X0>, int64_t __len@<X2>, uint64_t a3@<X3>, char a4@<W4>, unint64_t *a5@<X8>)
{
  unint64_t v8 = __b;
  if (__b && __len)
  {
    if (__len < 1) {
      goto LABEL_31;
    }
    memset((void *)__b, 48, __len);
  }

  __b = formQuotientWithRemainderForUnsignedInteger(words:dividingBy:)( *(void *)a3,  *(void *)(a3 + 8),  0x8AC7230489E80000LL);
  uint64_t v11 = *(void *)(a3 + 8);
  if ((v11 & 0x8000000000000000LL) == 0)
  {
    int64_t v12 = __len;
    do
    {
      if (v11 && !*(void *)(*(void *)a3 + 8 * (v11 - 1)))
      {
        if (v11 == 1)
        {
          uint64_t v11 = 0LL;
        }

        else
        {
          uint64_t v13 = v11;
          while (!*(void *)(*(void *)a3 - 16LL + 8 * v13))
          {
            if (--v13 == 1)
            {
              uint64_t v14 = 0LL;
              goto LABEL_16;
            }
          }

          uint64_t v14 = v13 - 1;
LABEL_16:
          BOOL v15 = v11 < v14;
          uint64_t v11 = v14;
          if (v15)
          {
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
            return __b;
          }
        }
      }

      *(void *)(a3 + 8) = v11;
      uint64_t v16 = v12;
      do
      {
        int64_t v10 = v16 - 1;
        if (v16 < 1)
        {
          __break(1u);
          goto LABEL_29;
        }

        *(_BYTE *)(v8 - 1 + v16--) = (__b % 0xA) | 0x30;
        BOOL v15 = __b > 9;
        __b /= 0xAuLL;
      }

      while (v15);
      if (!v11) {
        goto LABEL_23;
      }
      v12 -= 19LL;
      __b = formQuotientWithRemainderForUnsignedInteger(words:dividingBy:)( *(void *)a3,  *(void *)(a3 + 8),  0x8AC7230489E80000LL);
      uint64_t v11 = *(void *)(a3 + 8);
    }

    while ((v11 & 0x8000000000000000LL) == 0);
  }

  __break(1u);
LABEL_23:
  if ((a4 & 1) != 0)
  {
    if (!v10) {
      goto LABEL_32;
    }
    unint64_t v17 = v8 + v10--;
    *(_BYTE *)(v17 - 1) = 45;
  }

  __b = __len - v10;
  if (__len < v10) {
    goto LABEL_30;
  }
  MEMORY[0x1895F8858](__b);
  __b = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
  *a5 = __b;
  a5[1] = v18;
  return __b;
}

uint64_t formQuotientWithRemainderForUnsignedInteger(words:dividingBy:)( uint64_t result, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return a2;
  }
  if (a3)
  {
    uint64_t v4 = a2;
    a2 = 0LL;
    uint64_t v5 = result - 8;
    while (1)
    {
      uint64_t v6 = v4 - 1;
      if (v4 < 1) {
        break;
      }
      if (a2 >= a3) {
        goto LABEL_9;
      }
      uint64_t v7 = 8 * v4;
      uint64_t v8 = *(void *)(v5 + 8 * v4);
      uint64_t result = __udivti3();
      a2 = v8 - result * a3;
      *(void *)(v5 + v7) = result;
      uint64_t v4 = v6;
      if (!v6) {
        return a2;
      }
    }

    __break(1u);
LABEL_9:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)( char *a1, int64_t a2, char *__src, int64_t __n)
{
  if (!__src || !__n) {
    return __n;
  }
  if (a2 < __n)
  {
    __break(1u);
  }

  else
  {
    if (!a1) {
      return __n;
    }
    if ((__n & 0x8000000000000000LL) == 0 && (&a1[__n] <= __src || &__src[__n] <= a1))
    {
      memcpy(a1, __src, __n);
      return __n;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)( char *a1, int64_t a2)
{
  return closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)( a1,  a2,  *(char **)(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t specialized static Comparable.>= infix(_:_:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3 || a6)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    if (a1 == a4 && a2 == a5) {
      char v6 = 1;
    }
    else {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    }
    return v6 & 1;
  }

  return result;
}

BOOL specialized static Comparable.>= infix(_:_:)(double a1, double a2, double a3, double a4)
{
  BOOL v4 = a1 < a3;
  if (a3 >= a1 && a3 <= a1) {
    BOOL v4 = a2 < a4;
  }
  return !v4;
}

uint64_t specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, unint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v53 = a8;
  uint64_t v54 = a5;
  LODWORD(v55) = a6;
  uint64_t v58 = a9;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v18 = v17;
    unint64_t v56 = a7;
    uint64_t v57 = v17;
    unint64_t v19 = a1;
    uint64_t v20 = *(void *)(v9 + 56);
    unint64_t v21 = *(void *)(v9 + 64);
    uint64_t v23 = *(void *)(v9 + 80);
    unint64_t v22 = *(void *)(v9 + 88);
    uint64_t v25 = *(void *)(v9 + 104);
    unint64_t v24 = *(void *)(v9 + 112);
    uint64_t v26 = *(void (**)(char *, unint64_t, unint64_t))(v15 + 16);
    unint64_t v27 = a7;
    char v28 = *(_BYTE *)(v9 + 72);
    char v29 = *(_BYTE *)(v9 + 96);
    char v30 = *(_BYTE *)(v9 + 120);
    v26(v18, v19, v27);
    outlined copy of _XMLPlistEncodingFormat.Reference(v20, v21, v28);
    outlined copy of _XMLPlistEncodingFormat.Reference(v23, v22, v29);
    outlined copy of _XMLPlistEncodingFormat.Reference(v25, v24, v30);
    swift_dynamicCast();
    char v31 = v28;
    uint64_t v32 = v59;
    outlined consume of _XMLPlistEncodingFormat.Reference(v20, v21, v31);
    outlined consume of _XMLPlistEncodingFormat.Reference(v23, v22, v29);
    uint64_t result = outlined consume of _XMLPlistEncodingFormat.Reference(v25, v24, v30);
    uint64_t v34 = 0LL;
    char v35 = 4;
  }

  else
  {
    unint64_t v49 = a2;
    uint64_t v50 = a3;
    uint64_t v51 = a4;
    unint64_t v52 = a1;
    if (!swift_dynamicCastMetatype())
    {
      MEMORY[0x1895F8858](0LL);
      unint64_t v47 = v53;
      uint64_t v46 = v54;
      *(&v49 - 4) = a7;
      *(&v49 - 3) = v47;
      uint64_t v48 = v51;
      *(&v49 - 2) = v52;
      return specialized __PlistEncoderXML._wrapGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:),  v49,  v50,  v48,  v46,  v55,  (uint64_t)v58);
    }

    uint64_t v37 = *(void *)(v9 + 56);
    unint64_t v36 = *(void *)(v9 + 64);
    uint64_t v38 = *(void *)(v9 + 80);
    unint64_t v39 = *(void *)(v9 + 88);
    uint64_t v53 = *(void *)(v9 + 104);
    unint64_t v55 = *(void *)(v9 + 112);
    uint64_t v40 = *(void (**)(char *, unint64_t, unint64_t))(v15 + 16);
    char v41 = *(_BYTE *)(v9 + 72);
    unsigned __int8 v42 = *(_BYTE *)(v9 + 96);
    LODWORD(v54) = v42;
    char v43 = *(_BYTE *)(v9 + 120);
    v40(v17, v52, a7);
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v36, v41);
    outlined copy of _XMLPlistEncodingFormat.Reference(v38, v39, v42);
    uint64_t v44 = v53;
    outlined copy of _XMLPlistEncodingFormat.Reference(v53, v55, v43);
    swift_dynamicCast();
    uint64_t v32 = v59;
    uint64_t v34 = v60;
    outlined consume of _XMLPlistEncodingFormat.Reference(v37, v36, v41);
    outlined consume of _XMLPlistEncodingFormat.Reference(v38, v39, v54);
    uint64_t result = outlined consume of _XMLPlistEncodingFormat.Reference(v44, v55, v43);
    char v35 = 5;
  }

  uint64_t v45 = v58;
  *uint64_t v58 = v32;
  v45[1] = v34;
  *((_BYTE *)v45 + 16) = v35;
  return result;
}

uint64_t __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  unint64_t v53 = a7;
  uint64_t v54 = a8;
  unint64_t v50 = a6;
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (swift_dynamicCastMetatype())
  {
    unint64_t v17 = v16;
    unint64_t v51 = a4;
    unint64_t v52 = v16;
    unint64_t v18 = a1;
    uint64_t v19 = *(void *)(v8 + 56);
    unint64_t v20 = *(void *)(v8 + 64);
    uint64_t v22 = *(void *)(v8 + 80);
    unint64_t v21 = *(void *)(v8 + 88);
    uint64_t v24 = *(void *)(v8 + 104);
    unint64_t v23 = *(void *)(v8 + 112);
    uint64_t v25 = *(void (**)(char *, unint64_t, unint64_t))(v14 + 16);
    unint64_t v26 = a4;
    char v27 = *(_BYTE *)(v8 + 72);
    char v28 = *(_BYTE *)(v8 + 96);
    char v29 = *(_BYTE *)(v8 + 120);
    v25(v17, v18, v26);
    outlined copy of _XMLPlistEncodingFormat.Reference(v19, v20, v27);
    outlined copy of _XMLPlistEncodingFormat.Reference(v22, v21, v28);
    outlined copy of _XMLPlistEncodingFormat.Reference(v24, v23, v29);
    swift_dynamicCast();
    char v30 = v27;
    uint64_t v31 = v55;
    outlined consume of _XMLPlistEncodingFormat.Reference(v19, v20, v30);
    outlined consume of _XMLPlistEncodingFormat.Reference(v22, v21, v28);
    uint64_t result = outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, v29);
    uint64_t v33 = 0LL;
    char v34 = 4;
  }

  else
  {
    unint64_t v47 = a2;
    uint64_t v48 = a3;
    uint64_t v35 = v53;
    unint64_t v49 = a1;
    if (!swift_dynamicCastMetatype())
    {
      MEMORY[0x1895F8858](0LL);
      *(&v47 - 6) = a4;
      *(&v47 - 5) = a5;
      *(&v47 - 4) = v50;
      *(&v47 - 3) = v35;
      uint64_t v46 = v48;
      *(&v47 - 2) = v49;
      return __PlistEncoderXML._wrapGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:),  (uint64_t)(&v47 - 8),  v47,  v46,  a5,  v35,  v54);
    }

    uint64_t v37 = *(void *)(v8 + 56);
    unint64_t v36 = *(void *)(v8 + 64);
    uint64_t v38 = *(void *)(v8 + 80);
    unint64_t v39 = *(void *)(v8 + 88);
    uint64_t v48 = *(void *)(v8 + 104);
    unint64_t v53 = *(void *)(v8 + 112);
    uint64_t v40 = *(void (**)(char *, unint64_t, unint64_t))(v14 + 16);
    char v41 = *(_BYTE *)(v8 + 72);
    unsigned __int8 v42 = *(_BYTE *)(v8 + 96);
    LODWORD(v50) = v42;
    char v43 = *(_BYTE *)(v8 + 120);
    v40(v16, v49, a4);
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v36, v41);
    outlined copy of _XMLPlistEncodingFormat.Reference(v38, v39, v42);
    uint64_t v44 = v48;
    outlined copy of _XMLPlistEncodingFormat.Reference(v48, v53, v43);
    swift_dynamicCast();
    uint64_t v31 = v55;
    uint64_t v33 = v56;
    outlined consume of _XMLPlistEncodingFormat.Reference(v37, v36, v41);
    outlined consume of _XMLPlistEncodingFormat.Reference(v38, v39, v50);
    uint64_t result = outlined consume of _XMLPlistEncodingFormat.Reference(v44, v53, v43);
    char v34 = 5;
  }

  uint64_t v45 = v54;
  *uint64_t v54 = v31;
  v45[1] = v33;
  *((_BYTE *)v45 + 16) = v34;
  return result;
}

void specialized String.withUTF8<A>(_:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = (char *)v10;
    goto LABEL_7;
  }

  uint64_t v3 = static String._copying(_:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v9;
  unint64_t v4 = v9;
  if ((v9 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000LL) != 0)
  {
    uint64_t v5 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v5 = (char *)_StringObject.sharedUTF8.getter();
  }

uint64_t __PlistEncoderXML.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3 + 2;
  uint64_t result = (*(uint64_t (**)(void))(*v3 + 240))();
  if ((result & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = MEMORY[0x18961AFF0];
    uint64_t v9 = *v6;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v6 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v9 + 16) + 1LL,  1);
      uint64_t v9 = *v6;
    }

    unint64_t v13 = *(void *)(v9 + 16);
    unint64_t v12 = *(void *)(v9 + 24);
    if (v13 >= v12 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      uint64_t v9 = *v6;
    }

    *(void *)(v9 + 16) = v13 + 1;
    uint64_t v14 = v9 + 24 * v13;
    *(void *)(v14 + 32) = v8;
    *(void *)(v14 + 40) = 0LL;
    *(_BYTE *)(v14 + 48) = 7;
    uint64_t *v6 = v9;
    goto LABEL_10;
  }

  uint64_t v15 = *(void *)(*v6 + 16);
  if (v15)
  {
    if (*(_BYTE *)(*v6 + 24 * v15 + 24) == 7)
    {
      swift_retain();
LABEL_10:
      uint64_t v16 = type metadata accessor for _PlistKeyedEncodingContainerXML(0LL, a2, a3, v11);
      swift_retain();
      swift_retain();
      MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistKeyedEncodingContainerXML<A>, v16);
      return KeyedEncodingContainer.init<A>(_:)();
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t __PlistEncoderXML.unkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  unint64_t v4 = v1 + 2;
  uint64_t result = (*(uint64_t (**)(void))(*v1 + 240))();
  if ((result & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<ContiguousArray<_XMLPlistEncodingFormat.Reference>>);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = MEMORY[0x18961AFE8];
    uint64_t v7 = *v4;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v4 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v7 + 16) + 1LL,  1);
      uint64_t v7 = *v4;
    }

    unint64_t v10 = *(void *)(v7 + 16);
    unint64_t v9 = *(void *)(v7 + 24);
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      uint64_t v7 = *v4;
    }

    uint64_t v11 = 0LL;
    *(void *)(v7 + 16) = v10 + 1;
    uint64_t v12 = v7 + 24 * v10;
    *(void *)(v12 + 32) = v6;
    *(void *)(v12 + 40) = 0LL;
    *(_BYTE *)(v12 + 48) = 6;
    *unint64_t v4 = v7;
    goto LABEL_10;
  }

  uint64_t v13 = *(void *)(*v4 + 16);
  if (v13)
  {
    uint64_t v14 = *v4 + 24 * v13;
    if (*(_BYTE *)(v14 + 24) == 6)
    {
      uint64_t v6 = *(void *)(v14 + 8);
      uint64_t v11 = *(void *)(v14 + 16);
      swift_retain();
LABEL_10:
      uint64_t v15 = v2[5];
      a1[3] = (uint64_t)&unk_189C8B350;
      a1[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML();
      uint64_t v16 = swift_allocObject();
      *a1 = v16;
      *(void *)(v16 + 16) = v2;
      *(void *)(v16 + 24) = v6;
      *(void *)(v16 + 32) = v11;
      *(_BYTE *)(v16 + 40) = 6;
      *(void *)(v16 + 48) = v15;
      swift_retain();
      return swift_retain();
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t __PlistEncoderXML.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 80);
  unint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 104);
  unint64_t v4 = *(void *)(v0 + 112);
  char v5 = *(_BYTE *)(v0 + 96);
  char v6 = *(_BYTE *)(v0 + 120);
  outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)(v0 + 56), *(void *)(v0 + 64), *(_BYTE *)(v0 + 72));
  outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, v5);
  outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, v6);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistEncoderXML()
{
  return objc_opt_self();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __PlistEncoderXML( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __PlistEncoderXML.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __PlistEncoderXML@<X0>( uint64_t *a1@<X8>)
{
  return __PlistEncoderXML.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __PlistEncoderXML@<X0>( void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __PlistEncoderXML();
  a1[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML,  v4,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderXML,  (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  *a1 = v3;
  return swift_retain();
}

uint64_t _PlistKeyedEncodingContainerXML.codingPath.getter()
{
  return _CodingPathNode.path.getter(*(void *)(v0 + 32));
}

uint64_t _PlistKeyedEncodingContainerXML.encodeNil(forKey:)()
{
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(*(void *)v0 + 56LL);
  unint64_t v4 = *(void *)(*(void *)v0 + 64LL);
  char v5 = *(_BYTE *)(*(void *)v0 + 72LL);
  int v6 = *(unsigned __int8 *)(v0 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v2, v1, *(_BYTE *)(v0 + 24));
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
  uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
  if (v6 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v9 = v7;
  unint64_t v10 = v8;
  outlined copy of _XMLPlistEncodingFormat.Reference(v2, v1, 7);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = 0x8000000000000000LL;
  uint64_t v54 = v9;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10, 0);
  uint64_t v14 = *(void *)(v55 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v55 + 24) < v16)
    {
      char v17 = v12;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v16,  isUniquelyReferenced_nonNull_native);
      uint64_t v18 = v55;
      uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v10, 0);
      if ((v17 & 1) != (v20 & 1)) {
        goto LABEL_51;
      }
      unint64_t v13 = v19;
      if ((v17 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v21 = *(void *)(v18 + 56) + 24 * v13;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v21, *(void *)(v21 + 8), *(_BYTE *)(v21 + 16));
      *(void *)uint64_t v21 = v3;
      *(void *)(v21 + 8) = v4;
      *(_BYTE *)(v21 + 16) = v5;
LABEL_47:
      *(void *)(v2 + 16) = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v2, v1, 7);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
      return outlined consume of _XMLPlistEncodingFormat.Reference(v2, v1, 7);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v18 = v55;
      if ((v12 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v13, v54, v10, 0, v3, v4, v5, (void *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  unint64_t v46 = v13;
  char v47 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v22 = static _DictionaryStorage.copy(original:)();
  uint64_t v18 = v22;
  if (!*(void *)(v55 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    unint64_t v13 = v46;
    if ((v47 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  unint64_t v23 = (char *)(v22 + 64);
  uint64_t v24 = (char *)(v55 + 64);
  unint64_t v25 = (unint64_t)((1LL << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  uint64_t v48 = v55 + 64;
  if (v18 != v55 || v23 >= &v24[8 * v25]) {
    memmove(v23, v24, 8 * v25);
  }
  int64_t v26 = 0LL;
  *(void *)(v18 + 16) = *(void *)(v55 + 16);
  uint64_t v27 = 1LL << *(_BYTE *)(v55 + 32);
  uint64_t v28 = -1LL;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  unint64_t v29 = v28 & *(void *)(v55 + 64);
  int64_t v49 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      uint64_t v52 = (v29 - 1) & v29;
      int64_t v53 = v26;
      unint64_t v30 = __clz(__rbit64(v29)) | (v26 << 6);
      goto LABEL_19;
    }

    int64_t v41 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v41 >= v49) {
      goto LABEL_45;
    }
    unint64_t v42 = *(void *)(v48 + 8 * v41);
    int64_t v43 = v26 + 1;
    if (!v42)
    {
      int64_t v43 = v26 + 2;
      if (v26 + 2 >= v49) {
        goto LABEL_45;
      }
      unint64_t v42 = *(void *)(v48 + 8 * v43);
      if (!v42)
      {
        int64_t v43 = v26 + 3;
        if (v26 + 3 >= v49) {
          goto LABEL_45;
        }
        unint64_t v42 = *(void *)(v48 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v26 + 4;
          if (v26 + 4 >= v49) {
            goto LABEL_45;
          }
          unint64_t v42 = *(void *)(v48 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v26 + 5;
            if (v26 + 5 >= v49) {
              goto LABEL_45;
            }
            unint64_t v42 = *(void *)(v48 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v26 + 6;
              if (v26 + 6 >= v49) {
                goto LABEL_45;
              }
              unint64_t v42 = *(void *)(v48 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v26 + 7;
                if (v26 + 7 >= v49) {
                  goto LABEL_45;
                }
                unint64_t v42 = *(void *)(v48 + 8 * v43);
                if (!v42)
                {
                  int64_t v43 = v26 + 8;
                  if (v26 + 8 >= v49) {
                    goto LABEL_45;
                  }
                  unint64_t v42 = *(void *)(v48 + 8 * v43);
                  if (!v42) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(char a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v2 = *(void *)(v1 + 16);
  unint64_t v4 = (uint64_t *)(*(void *)v1 + 80LL);
  char v5 = (char *)(*(void *)v1 + 120LL);
  if ((a1 & 1) == 0) {
    unint64_t v4 = (uint64_t *)(*(void *)v1 + 104LL);
  }
  uint64_t v6 = *v4;
  if ((a1 & 1) != 0) {
    uint64_t v7 = (unint64_t *)(*(void *)v1 + 88LL);
  }
  else {
    uint64_t v7 = (unint64_t *)(*(void *)v1 + 112LL);
  }
  unint64_t v8 = *v7;
  if ((a1 & 1) != 0) {
    char v5 = (char *)(*(void *)v1 + 96LL);
  }
  char v9 = *v5;
  int v10 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)(v1 + 8), *(void *)(v1 + 16), *(_BYTE *)(v1 + 24));
  outlined copy of _XMLPlistEncodingFormat.Reference(v6, v8, v9);
  uint64_t v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (v10 != 7)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  uint64_t v13 = v11;
  unint64_t v14 = v12;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v2, 7);
  outlined copy of _XMLPlistEncodingFormat.Reference(v6, v8, v9);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v59 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  uint64_t v58 = v13;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14, 0);
  uint64_t v18 = *(void *)(v59 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v59 + 24) < v20)
    {
      char v21 = v16;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v20,  isUniquelyReferenced_nonNull_native);
      uint64_t v22 = v59;
      uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v58, v14, 0);
      if ((v21 & 1) != (v24 & 1)) {
        goto LABEL_58;
      }
      unint64_t v17 = v23;
      if ((v21 & 1) == 0) {
        goto LABEL_53;
      }
LABEL_16:
      uint64_t v25 = *(void *)(v22 + 56) + 24 * v17;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v25, *(void *)(v25 + 8), *(_BYTE *)(v25 + 16));
      *(void *)uint64_t v25 = v6;
      *(void *)(v25 + 8) = v8;
      *(_BYTE *)(v25 + 16) = v9;
LABEL_54:
      *(void *)(v3 + 16) = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v2, 7);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v6, v8, v9);
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v2, 7);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v22 = v59;
      if ((v16 & 1) != 0) {
        goto LABEL_16;
      }
LABEL_53:
      specialized _NativeDictionary._insert(at:key:value:)(v17, v58, v14, 0, v6, v8, v9, (void *)v22);
      swift_bridgeObjectRetain();
      goto LABEL_54;
    }
  }

  unint64_t v50 = v17;
  char v51 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v26 = static _DictionaryStorage.copy(original:)();
  uint64_t v22 = v26;
  if (!*(void *)(v59 + 16))
  {
LABEL_52:
    swift_bridgeObjectRelease();
    unint64_t v17 = v50;
    if ((v51 & 1) != 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }

  uint64_t v27 = (char *)(v26 + 64);
  uint64_t v28 = (char *)(v59 + 64);
  unint64_t v29 = (unint64_t)((1LL << *(_BYTE *)(v22 + 32)) + 63) >> 6;
  uint64_t v52 = v59 + 64;
  if (v22 != v59 || v27 >= &v28[8 * v29]) {
    memmove(v27, v28, 8 * v29);
  }
  int64_t v30 = 0LL;
  *(void *)(v22 + 16) = *(void *)(v59 + 16);
  uint64_t v31 = 1LL << *(_BYTE *)(v59 + 32);
  uint64_t v32 = -1LL;
  if (v31 < 64) {
    uint64_t v32 = ~(-1LL << v31);
  }
  unint64_t v33 = v32 & *(void *)(v59 + 64);
  int64_t v53 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      uint64_t v56 = (v33 - 1) & v33;
      int64_t v57 = v30;
      unint64_t v34 = __clz(__rbit64(v33)) | (v30 << 6);
      goto LABEL_26;
    }

    int64_t v45 = v30 + 1;
    if (__OFADD__(v30, 1LL))
    {
      __break(1u);
      goto LABEL_56;
    }

    if (v45 >= v53) {
      goto LABEL_52;
    }
    unint64_t v46 = *(void *)(v52 + 8 * v45);
    int64_t v47 = v30 + 1;
    if (!v46)
    {
      int64_t v47 = v30 + 2;
      if (v30 + 2 >= v53) {
        goto LABEL_52;
      }
      unint64_t v46 = *(void *)(v52 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v30 + 3;
        if (v30 + 3 >= v53) {
          goto LABEL_52;
        }
        unint64_t v46 = *(void *)(v52 + 8 * v47);
        if (!v46)
        {
          int64_t v47 = v30 + 4;
          if (v30 + 4 >= v53) {
            goto LABEL_52;
          }
          unint64_t v46 = *(void *)(v52 + 8 * v47);
          if (!v46)
          {
            int64_t v47 = v30 + 5;
            if (v30 + 5 >= v53) {
              goto LABEL_52;
            }
            unint64_t v46 = *(void *)(v52 + 8 * v47);
            if (!v46)
            {
              int64_t v47 = v30 + 6;
              if (v30 + 6 >= v53) {
                goto LABEL_52;
              }
              unint64_t v46 = *(void *)(v52 + 8 * v47);
              if (!v46)
              {
                int64_t v47 = v30 + 7;
                if (v30 + 7 >= v53) {
                  goto LABEL_52;
                }
                unint64_t v46 = *(void *)(v52 + 8 * v47);
                if (!v46)
                {
                  int64_t v47 = v30 + 8;
                  if (v30 + 8 >= v53) {
                    goto LABEL_52;
                  }
                  unint64_t v46 = *(void *)(v52 + 8 * v47);
                  if (!v46) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  unint64_t v8 = v6;
  char v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  unint64_t v14 = (v11 & 1) == 0;
  BOOL v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    unint64_t v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      char v16 = v51;
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      char v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        BOOL v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference( *(void *)v19,  *(void *)(v19 + 8),  *(_BYTE *)(v19 + 16));
        *(void *)BOOL v19 = a1;
        *(void *)(v19 + 8) = 0LL;
        *(_BYTE *)(v19 + 16) = 2;
      }

      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0LL, 2, (void *)v16);
        swift_bridgeObjectRetain();
      }

      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  char v21 = static _DictionaryStorage.copy(original:)();
  char v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  char v24 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  uint64_t v25 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1LL << *(_BYTE *)(v51 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  uint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }

    uint64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v40 >= v45) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void *)(v44 + 8 * v40);
    char v42 = v25 + 1;
    if (!v41)
    {
      char v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      uint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        char v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        uint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          char v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          uint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            char v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            uint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              char v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              uint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                char v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                uint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  char v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  uint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(__int16 a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference( *(void *)v19,  *(void *)(v19 + 8),  *(_BYTE *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0LL;
        *(_BYTE *)(v19 + 16) = 2;
      }

      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0LL, 2, (void *)v16);
        swift_bridgeObjectRetain();
      }

      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1LL << *(_BYTE *)(v51 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }

    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(int a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference( *(void *)v19,  *(void *)(v19 + 8),  *(_BYTE *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0LL;
        *(_BYTE *)(v19 + 16) = 2;
      }

      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0LL, 2, (void *)v16);
        swift_bridgeObjectRetain();
      }

      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1LL << *(_BYTE *)(v51 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }

    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      if ((v2 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(_BYTE *)(v19 + 16));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = 0LL;
      *(_BYTE *)(v19 + 16) = 2;
LABEL_47:
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v51;
      if ((v11 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0LL, 2, (void *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v20 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v20;
  if (!*(void *)(v51 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v2 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v21 = (char *)(v20 + 64);
  uint64_t v22 = (char *)(v51 + 64);
  unint64_t v23 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v21 >= &v22[8 * v23]) {
    memmove(v21, v22, 8 * v23);
  }
  int64_t v24 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v25 = 1LL << *(_BYTE *)(v51 + 32);
  uint64_t v26 = -1LL;
  if (v25 < 64) {
    uint64_t v26 = ~(-1LL << v25);
  }
  unint64_t v27 = v26 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      uint64_t v48 = (v27 - 1) & v27;
      int64_t v49 = v24;
      unint64_t v28 = __clz(__rbit64(v27)) | (v24 << 6);
      goto LABEL_19;
    }

    int64_t v39 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v39 >= v45) {
      goto LABEL_45;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v39);
    int64_t v41 = v24 + 1;
    if (!v40)
    {
      int64_t v41 = v24 + 2;
      if (v24 + 2 >= v45) {
        goto LABEL_45;
      }
      unint64_t v40 = *(void *)(v44 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v24 + 3;
        if (v24 + 3 >= v45) {
          goto LABEL_45;
        }
        unint64_t v40 = *(void *)(v44 + 8 * v41);
        if (!v40)
        {
          int64_t v41 = v24 + 4;
          if (v24 + 4 >= v45) {
            goto LABEL_45;
          }
          unint64_t v40 = *(void *)(v44 + 8 * v41);
          if (!v40)
          {
            int64_t v41 = v24 + 5;
            if (v24 + 5 >= v45) {
              goto LABEL_45;
            }
            unint64_t v40 = *(void *)(v44 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v24 + 6;
              if (v24 + 6 >= v45) {
                goto LABEL_45;
              }
              unint64_t v40 = *(void *)(v44 + 8 * v41);
              if (!v40)
              {
                int64_t v41 = v24 + 7;
                if (v24 + 7 >= v45) {
                  goto LABEL_45;
                }
                unint64_t v40 = *(void *)(v44 + 8 * v41);
                if (!v40)
                {
                  int64_t v41 = v24 + 8;
                  if (v24 + 8 >= v45) {
                    goto LABEL_45;
                  }
                  unint64_t v40 = *(void *)(v44 + 8 * v41);
                  if (!v40) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      if ((v2 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(_BYTE *)(v19 + 16));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = 0LL;
      *(_BYTE *)(v19 + 16) = 1;
LABEL_47:
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v51;
      if ((v11 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0LL, 1, (void *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v20 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v20;
  if (!*(void *)(v51 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v2 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v21 = (char *)(v20 + 64);
  uint64_t v22 = (char *)(v51 + 64);
  unint64_t v23 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v21 >= &v22[8 * v23]) {
    memmove(v21, v22, 8 * v23);
  }
  int64_t v24 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v25 = 1LL << *(_BYTE *)(v51 + 32);
  uint64_t v26 = -1LL;
  if (v25 < 64) {
    uint64_t v26 = ~(-1LL << v25);
  }
  unint64_t v27 = v26 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      uint64_t v48 = (v27 - 1) & v27;
      int64_t v49 = v24;
      unint64_t v28 = __clz(__rbit64(v27)) | (v24 << 6);
      goto LABEL_19;
    }

    int64_t v39 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v39 >= v45) {
      goto LABEL_45;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v39);
    int64_t v41 = v24 + 1;
    if (!v40)
    {
      int64_t v41 = v24 + 2;
      if (v24 + 2 >= v45) {
        goto LABEL_45;
      }
      unint64_t v40 = *(void *)(v44 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v24 + 3;
        if (v24 + 3 >= v45) {
          goto LABEL_45;
        }
        unint64_t v40 = *(void *)(v44 + 8 * v41);
        if (!v40)
        {
          int64_t v41 = v24 + 4;
          if (v24 + 4 >= v45) {
            goto LABEL_45;
          }
          unint64_t v40 = *(void *)(v44 + 8 * v41);
          if (!v40)
          {
            int64_t v41 = v24 + 5;
            if (v24 + 5 >= v45) {
              goto LABEL_45;
            }
            unint64_t v40 = *(void *)(v44 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v24 + 6;
              if (v24 + 6 >= v45) {
                goto LABEL_45;
              }
              unint64_t v40 = *(void *)(v44 + 8 * v41);
              if (!v40)
              {
                int64_t v41 = v24 + 7;
                if (v24 + 7 >= v45) {
                  goto LABEL_45;
                }
                unint64_t v40 = *(void *)(v44 + 8 * v41);
                if (!v40)
                {
                  int64_t v41 = v24 + 8;
                  if (v24 + 8 >= v45) {
                    goto LABEL_45;
                  }
                  unint64_t v40 = *(void *)(v44 + 8 * v41);
                  if (!v40) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(unsigned __int8 a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference( *(void *)v19,  *(void *)(v19 + 8),  *(_BYTE *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0LL;
        *(_BYTE *)(v19 + 16) = 1;
      }

      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0LL, 1, (void *)v16);
        swift_bridgeObjectRetain();
      }

      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  uint64_t v22 = (char *)(v21 + 64);
  unint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1LL << *(_BYTE *)(v51 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }

    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(unsigned __int16 a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference( *(void *)v19,  *(void *)(v19 + 8),  *(_BYTE *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0LL;
        *(_BYTE *)(v19 + 16) = 1;
      }

      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0LL, 1, (void *)v16);
        swift_bridgeObjectRetain();
      }

      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  uint64_t v22 = (char *)(v21 + 64);
  unint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1LL << *(_BYTE *)(v51 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }

    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(unsigned int a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference( *(void *)v19,  *(void *)(v19 + 8),  *(_BYTE *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0LL;
        *(_BYTE *)(v19 + 16) = 1;
      }

      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0LL, 1, (void *)v16);
        swift_bridgeObjectRetain();
      }

      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  uint64_t v22 = (char *)(v21 + 64);
  unint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1LL << *(_BYTE *)(v51 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }

    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v6 = *(void *)(v2 + 16);
  int v7 = *(unsigned __int8 *)(v2 + 24);
  swift_bridgeObjectRetain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  uint64_t v8 = dispatch thunk of CodingKey.stringValue.getter();
  if (v7 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v10 = v8;
  unint64_t v11 = v9;
  swift_bridgeObjectRetain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0x8000000000000000LL;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, 0);
  uint64_t v15 = *(void *)(v54 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v3 = v13;
    if (*(void *)(v54 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v17,  isUniquelyReferenced_nonNull_native);
      uint64_t v18 = v54;
      uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, 0);
      if ((v3 & 1) != (v20 & 1)) {
        goto LABEL_51;
      }
      unint64_t v14 = v19;
      if ((v3 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v21 = *(void *)(v18 + 56) + 24 * v14;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v21, *(void *)(v21 + 8), *(_BYTE *)(v21 + 16));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      *(_BYTE *)(v21 + 16) = 0;
LABEL_47:
      *(void *)(v5 + 16) = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 7);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v18 = v54;
      if ((v13 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v14, v10, v11, 0, a1, a2, 0, (void *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  unint64_t v46 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v22 = static _DictionaryStorage.copy(original:)();
  uint64_t v18 = v22;
  if (!*(void *)(v54 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    unint64_t v14 = v46;
    if ((v3 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  unint64_t v23 = (char *)(v22 + 64);
  unint64_t v24 = (char *)(v54 + 64);
  unint64_t v25 = (unint64_t)((1LL << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  uint64_t v47 = v54 + 64;
  if (v18 != v54 || v23 >= &v24[8 * v25]) {
    memmove(v23, v24, 8 * v25);
  }
  int64_t v26 = 0LL;
  *(void *)(v18 + 16) = *(void *)(v54 + 16);
  uint64_t v27 = 1LL << *(_BYTE *)(v54 + 32);
  uint64_t v28 = -1LL;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  unint64_t v29 = v28 & *(void *)(v54 + 64);
  int64_t v48 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      uint64_t v51 = (v29 - 1) & v29;
      int64_t v52 = v26;
      unint64_t v30 = __clz(__rbit64(v29)) | (v26 << 6);
      goto LABEL_19;
    }

    int64_t v41 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v41 >= v48) {
      goto LABEL_45;
    }
    unint64_t v42 = *(void *)(v47 + 8 * v41);
    int64_t v43 = v26 + 1;
    if (!v42)
    {
      int64_t v43 = v26 + 2;
      if (v26 + 2 >= v48) {
        goto LABEL_45;
      }
      unint64_t v42 = *(void *)(v47 + 8 * v43);
      if (!v42)
      {
        int64_t v43 = v26 + 3;
        if (v26 + 3 >= v48) {
          goto LABEL_45;
        }
        unint64_t v42 = *(void *)(v47 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v26 + 4;
          if (v26 + 4 >= v48) {
            goto LABEL_45;
          }
          unint64_t v42 = *(void *)(v47 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v26 + 5;
            if (v26 + 5 >= v48) {
              goto LABEL_45;
            }
            unint64_t v42 = *(void *)(v47 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v26 + 6;
              if (v26 + 6 >= v48) {
                goto LABEL_45;
              }
              unint64_t v42 = *(void *)(v47 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v26 + 7;
                if (v26 + 7 >= v48) {
                  goto LABEL_45;
                }
                unint64_t v42 = *(void *)(v47 + 8 * v43);
                if (!v42)
                {
                  int64_t v43 = v26 + 8;
                  if (v26 + 8 >= v48) {
                    goto LABEL_45;
                  }
                  unint64_t v42 = *(void *)(v47 + 8 * v43);
                  if (!v42) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(float a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v5) = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v5 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      double v19 = a1;
      if ((v5 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v20 = *(void *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v20, *(void *)(v20 + 8), *(_BYTE *)(v20 + 16));
      *(double *)uint64_t v20 = v19;
      *(void *)(v20 + 8) = 0LL;
      *(_BYTE *)(v20 + 16) = 3;
LABEL_47:
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v51;
      double v19 = a1;
      if ((v11 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, *(uint64_t *)&v19, 0LL, 3, (void *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    double v19 = a1;
    if ((v5 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v22 = (char *)(v21 + 64);
  unint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v45 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1LL << *(_BYTE *)(v51 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v46 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v49 = (v28 - 1) & v28;
      int64_t v50 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_19;
    }

    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v40 >= v46) {
      goto LABEL_45;
    }
    unint64_t v41 = *(void *)(v45 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v46) {
        goto LABEL_45;
      }
      unint64_t v41 = *(void *)(v45 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v46) {
          goto LABEL_45;
        }
        unint64_t v41 = *(void *)(v45 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v46) {
            goto LABEL_45;
          }
          unint64_t v41 = *(void *)(v45 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v46) {
              goto LABEL_45;
            }
            unint64_t v41 = *(void *)(v45 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v46) {
                goto LABEL_45;
              }
              unint64_t v41 = *(void *)(v45 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v46) {
                  goto LABEL_45;
                }
                unint64_t v41 = *(void *)(v45 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v46) {
                    goto LABEL_45;
                  }
                  unint64_t v41 = *(void *)(v45 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(double a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v50 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v50 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v5) = v11;
    if (*(void *)(v50 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v50;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v5 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      if ((v5 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(_BYTE *)(v19 + 16));
      *(double *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = 0LL;
      *(_BYTE *)(v19 + 16) = 3;
LABEL_47:
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v50;
      if ((v11 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, *(uint64_t *)&a1, 0LL, 3, (void *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v20 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v20;
  if (!*(void *)(v50 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v21 = (char *)(v20 + 64);
  uint64_t v22 = (char *)(v50 + 64);
  unint64_t v23 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v50 + 64;
  if (v16 != v50 || v21 >= &v22[8 * v23]) {
    memmove(v21, v22, 8 * v23);
  }
  int64_t v24 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v50 + 16);
  uint64_t v25 = 1LL << *(_BYTE *)(v50 + 32);
  uint64_t v26 = -1LL;
  if (v25 < 64) {
    uint64_t v26 = ~(-1LL << v25);
  }
  unint64_t v27 = v26 & *(void *)(v50 + 64);
  int64_t v45 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      uint64_t v48 = (v27 - 1) & v27;
      int64_t v49 = v24;
      unint64_t v28 = __clz(__rbit64(v27)) | (v24 << 6);
      goto LABEL_19;
    }

    int64_t v39 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v39 >= v45) {
      goto LABEL_45;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v39);
    int64_t v41 = v24 + 1;
    if (!v40)
    {
      int64_t v41 = v24 + 2;
      if (v24 + 2 >= v45) {
        goto LABEL_45;
      }
      unint64_t v40 = *(void *)(v44 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v24 + 3;
        if (v24 + 3 >= v45) {
          goto LABEL_45;
        }
        unint64_t v40 = *(void *)(v44 + 8 * v41);
        if (!v40)
        {
          int64_t v41 = v24 + 4;
          if (v24 + 4 >= v45) {
            goto LABEL_45;
          }
          unint64_t v40 = *(void *)(v44 + 8 * v41);
          if (!v40)
          {
            int64_t v41 = v24 + 5;
            if (v24 + 5 >= v45) {
              goto LABEL_45;
            }
            unint64_t v40 = *(void *)(v44 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v24 + 6;
              if (v24 + 6 >= v45) {
                goto LABEL_45;
              }
              unint64_t v40 = *(void *)(v44 + 8 * v41);
              if (!v40)
              {
                int64_t v41 = v24 + 7;
                if (v24 + 7 >= v45) {
                  goto LABEL_45;
                }
                unint64_t v40 = *(void *)(v44 + 8 * v41);
                if (!v40)
                {
                  int64_t v41 = v24 + 8;
                  if (v24 + 8 >= v45) {
                    goto LABEL_45;
                  }
                  unint64_t v40 = *(void *)(v44 + 8 * v41);
                  if (!v40) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.encode<A>(_:forKey:)( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v73 = a4;
  unint64_t v74 = a5;
  unint64_t v72 = a1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v66 - v12;
  uint64_t v70 = a2;
  unint64_t v71 = v5;
  unint64_t v14 = *(void *)(*(void *)v5 + 40LL);
  uint64_t v15 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v66 - v12, a2, v8, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0LL, 1LL, v8);
  unint64_t v16 = *(void *)(a3 + 24);
  swift_retain();
  unint64_t v17 = v77;
  __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(v72, v14, (uint64_t)v13, v73, v8, v74, v16, v75);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release();
  }

  unint64_t v73 = 0LL;
  unint64_t v74 = v9;
  unint64_t v19 = v71;
  char v20 = v76;
  if (v76 == 255)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    char v20 = 7;
    unint64_t v21 = swift_allocObject();
    unint64_t v77 = 0LL;
    *(void *)(v21 + 16) = MEMORY[0x18961AFF0];
  }

  else
  {
    unint64_t v21 = v75[0];
    unint64_t v77 = v75[1];
  }

  (*(void (**)(char *, unint64_t))(v10 + 8))(v13, v74);
  swift_release();
  uint64_t v22 = *(void *)(v19 + 8);
  unint64_t v23 = *(void *)(v19 + 16);
  int v24 = *(unsigned __int8 *)(v19 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v22, v23, *(_BYTE *)(v19 + 24));
  uint64_t v25 = dispatch thunk of CodingKey.stringValue.getter();
  if (v24 != 7)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

  uint64_t v27 = v25;
  unint64_t v28 = v26;
  outlined copy of _XMLPlistEncodingFormat.Reference(v22, v23, 7);
  swift_bridgeObjectRetain();
  unint64_t v72 = v21;
  char v29 = v20;
  outlined copy of _XMLPlistEncodingFormat.Reference(v21, v77, v20);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v31 = *(void *)(v22 + 16);
  unint64_t v74 = v27;
  v75[0] = v31;
  *(void *)(v22 + 16) = 0x8000000000000000LL;
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28, 0);
  uint64_t v34 = *(void *)(v31 + 16);
  BOOL v35 = (v32 & 1) == 0;
  uint64_t v36 = v34 + v35;
  if (__OFADD__(v34, v35))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v21) = v32;
    if (*(void *)(v31 + 24) < v36)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v36,  isUniquelyReferenced_nonNull_native);
      uint64_t v37 = v75[0];
      uint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v28, 0);
      if ((v21 & 1) != (v39 & 1)) {
        goto LABEL_57;
      }
      unint64_t v33 = v38;
      if ((v21 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v40 = *(void *)(v37 + 56) + 24 * v33;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v40, *(void *)(v40 + 8), *(_BYTE *)(v40 + 16));
      uint64_t v41 = v72;
      unint64_t v42 = v77;
      *(void *)uint64_t v40 = v72;
      *(void *)(v40 + 8) = v42;
      *(_BYTE *)(v40 + 16) = v29;
LABEL_52:
      *(void *)(v22 + 16) = v37;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v22, v23, 7);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v22, v23, 7);
      return outlined consume of _XMLPlistEncodingFormat.Reference(v41, v42, v29);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v37 = v31;
      if ((v32 & 1) != 0) {
        goto LABEL_14;
      }
LABEL_51:
      uint64_t v41 = v72;
      unint64_t v42 = v77;
      specialized _NativeDictionary._insert(at:key:value:)(v33, v74, v28, 0, v72, v77, v29, (void *)v37);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }

  unint64_t v66 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v43 = static _DictionaryStorage.copy(original:)();
  uint64_t v37 = v43;
  if (!*(void *)(v31 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    unint64_t v33 = v66;
    if ((v21 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  uint64_t v44 = (char *)(v43 + 64);
  uint64_t v45 = 1LL << *(_BYTE *)(v37 + 32);
  uint64_t v68 = (char *)(v31 + 64);
  unint64_t v46 = (unint64_t)(v45 + 63) >> 6;
  if (v37 != v31 || v44 >= &v68[8 * v46]) {
    memmove(v44, v68, 8 * v46);
  }
  int64_t v69 = 0LL;
  *(void *)(v37 + 16) = *(void *)(v31 + 16);
  uint64_t v47 = 1LL << *(_BYTE *)(v31 + 32);
  uint64_t v48 = -1LL;
  if (v47 < 64) {
    uint64_t v48 = ~(-1LL << v47);
  }
  unint64_t v71 = v48 & *(void *)(v31 + 64);
  int64_t v67 = (unint64_t)(v47 + 63) >> 6;
  while (1)
  {
    if (v71)
    {
      unint64_t v49 = __clz(__rbit64(v71));
      v71 &= v71 - 1;
      unint64_t v50 = v49 | (v69 << 6);
      goto LABEL_24;
    }

    int64_t v62 = v69 + 1;
    if (__OFADD__(v69, 1LL))
    {
      __break(1u);
      goto LABEL_55;
    }

    if (v62 >= v67) {
      goto LABEL_50;
    }
    unint64_t v63 = *(void *)&v68[8 * v62];
    int64_t v64 = v69 + 1;
    if (!v63)
    {
      int64_t v64 = v69 + 2;
      if (v69 + 2 >= v67) {
        goto LABEL_50;
      }
      unint64_t v63 = *(void *)&v68[8 * v64];
      if (!v63)
      {
        int64_t v64 = v69 + 3;
        if (v69 + 3 >= v67) {
          goto LABEL_50;
        }
        unint64_t v63 = *(void *)&v68[8 * v64];
        if (!v63)
        {
          int64_t v64 = v69 + 4;
          if (v69 + 4 >= v67) {
            goto LABEL_50;
          }
          unint64_t v63 = *(void *)&v68[8 * v64];
          if (!v63)
          {
            int64_t v64 = v69 + 5;
            if (v69 + 5 >= v67) {
              goto LABEL_50;
            }
            unint64_t v63 = *(void *)&v68[8 * v64];
            if (!v63)
            {
              int64_t v64 = v69 + 6;
              if (v69 + 6 >= v67) {
                goto LABEL_50;
              }
              unint64_t v63 = *(void *)&v68[8 * v64];
              if (!v63)
              {
                int64_t v64 = v69 + 7;
                if (v69 + 7 >= v67) {
                  goto LABEL_50;
                }
                unint64_t v63 = *(void *)&v68[8 * v64];
                if (!v63)
                {
                  int64_t v64 = v69 + 8;
                  if (v69 + 8 >= v67) {
                    goto LABEL_50;
                  }
                  unint64_t v63 = *(void *)&v68[8 * v64];
                  if (!v63) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.nestedContainer<A>(keyedBy:forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7 = v6;
  uint64_t v114 = a5;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v116 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](a1);
  double v111 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v117 = *(void *)(v14 - 8);
  uint64_t v118 = v14;
  MEMORY[0x1895F8858](v14);
  unint64_t v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  unint64_t v19 = (char *)&v102 - v18;
  uint64_t v20 = *(void *)(a3 + 24);
  uint64_t v115 = a2;
  uint64_t v110 = v20;
  uint64_t v120 = dispatch thunk of CodingKey.stringValue.getter();
  if (*((_BYTE *)v7 + 24) != 7) {
    goto LABEL_65;
  }
  unint64_t v22 = v21;
  uint64_t v24 = v7[1];
  unint64_t v23 = v7[2];
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v26 = *(void *)(v25 + 16);
  unint64_t v121 = v21;
  uint64_t v112 = a6;
  uint64_t v113 = a4;
  uint64_t v119 = v12;
  if (v26)
  {
    uint64_t v27 = v16;
    outlined copy of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v28 = v22;
    uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v22, 0);
    if ((v30 & 1) != 0)
    {
      uint64_t v31 = *(void *)(v25 + 56) + 24 * v29;
      uint64_t v33 = *(void *)v31;
      unint64_t v32 = *(void *)(v31 + 8);
      int v34 = *(unsigned __int8 *)(v31 + 16);
      outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)v31, v32, *(_BYTE *)(v31 + 16));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
      if (v34 == 7)
      {
LABEL_53:
        uint64_t v74 = *v7;
        unint64_t v75 = v7[4];
        uint64_t v76 = v116;
        unint64_t v77 = v19;
        uint64_t v78 = v19;
        uint64_t v79 = v119;
        (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v78, v115, v119);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v77, 0LL, 1LL, v79);
        uint64_t v80 = v117;
        uint64_t v81 = v27;
        uint64_t v82 = v79;
        double v83 = v77;
        uint64_t v84 = v77;
        uint64_t v85 = v118;
        (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v81, v84, v118);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v81, 1LL, v82) == 1)
        {
          uint64_t v86 = *(void (**)(char *, uint64_t))(v80 + 8);
          swift_retain();
          v86(v83, v85);
          v86(v81, v85);
          swift_retain();
LABEL_61:
          uint64_t v122 = v74;
          uint64_t v123 = v33;
          unint64_t v124 = v32;
          char v125 = 7;
          unint64_t v126 = v75;
          swift_retain();
          outlined copy of _XMLPlistEncodingFormat.Reference(v33, v32, 7);
          uint64_t v100 = type metadata accessor for _PlistKeyedEncodingContainerXML(0LL, v113, v114, v99);
          swift_retain();
          MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistKeyedEncodingContainerXML<A>, v100);
          KeyedEncodingContainer.init<A>(_:)();
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of _XMLPlistEncodingFormat.Reference(v33, v32, 7);
          return swift_release();
        }

        uint64_t v120 = v33;
        uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
        uint64_t v88 = v81;
        uint64_t v89 = v111;
        v87(v111, v88, v82);
        uint64_t v90 = v83;
        uint64_t v91 = v80;
        BOOL v92 = (uint64_t *)swift_allocObject();
        uint64_t v93 = v110;
        v92[5] = v82;
        v92[6] = v93;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v92 + 2);
        v87((char *)boxed_opaque_existential_1, v89, v82);
        uint64_t v95 = *(void (**)(char *, uint64_t))(v91 + 8);
        swift_retain();
        v95(v90, v85);
        v92[7] = v75;
        if (v75 >> 62)
        {
          if (v75 >> 62 != 1)
          {
            uint64_t v33 = v120;
            uint64_t v98 = 1LL;
            goto LABEL_60;
          }

          uint64_t v96 = (uint64_t *)((v75 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          uint64_t v96 = (uint64_t *)(v75 + 64);
        }

        uint64_t v33 = v120;
        uint64_t v97 = *v96;
        swift_retain();
        uint64_t v98 = v97 + 1;
        if (!__OFADD__(v97, 1LL))
        {
LABEL_60:
          v92[8] = v98;
          unint64_t v75 = (unint64_t)v92;
          goto LABEL_61;
        }

        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }

      __break(1u);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
    unint64_t v22 = v28;
    unint64_t v16 = v27;
    uint64_t v12 = v119;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = MEMORY[0x18961AFF0];
  outlined copy of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v122 = *(void *)(v24 + 16);
  uint64_t v36 = v122;
  *(void *)(v24 + 16) = 0x8000000000000000LL;
  unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v22, 0);
  uint64_t v39 = *(void *)(v36 + 16);
  BOOL v40 = (v37 & 1) == 0;
  uint64_t v41 = v39 + v40;
  if (__OFADD__(v39, v40))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v36 + 24) < v41)
    {
      char v42 = v37;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v41,  isUniquelyReferenced_nonNull_native);
      uint64_t v43 = v122;
      uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v121, 0);
      if ((v42 & 1) != (v45 & 1)) {
        goto LABEL_67;
      }
      unint64_t v38 = v44;
      uint64_t v27 = v16;
      if ((v42 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v46 = *(void *)(v43 + 56) + 24 * v38;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v46, *(void *)(v46 + 8), *(_BYTE *)(v46 + 16));
      *(void *)uint64_t v46 = v33;
      *(void *)(v46 + 8) = 0LL;
      *(_BYTE *)(v46 + 16) = 7;
LABEL_52:
      *(void *)(v24 + 16) = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
      swift_release();
      outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
      unint64_t v32 = 0LL;
      goto LABEL_53;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v43 = v36;
      uint64_t v27 = v16;
      if ((v37 & 1) != 0) {
        goto LABEL_14;
      }
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v38, v120, v121, 0, v33, 0LL, 7, (void *)v43);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }

  unint64_t v102 = v38;
  int v103 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v47 = static _DictionaryStorage.copy(original:)();
  uint64_t v43 = v47;
  if (!*(void *)(v36 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    unint64_t v38 = v102;
    uint64_t v27 = v16;
    if ((v103 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  uint64_t v48 = (void *)(v47 + 64);
  unint64_t v49 = (unint64_t)((1LL << *(_BYTE *)(v43 + 32)) + 63) >> 6;
  uint64_t v104 = v36 + 64;
  int64_t v50 = 0LL;
  *(void *)(v43 + 16) = *(void *)(v36 + 16);
  uint64_t v51 = 1LL << *(_BYTE *)(v36 + 32);
  uint64_t v52 = -1LL;
  if (v51 < 64) {
    uint64_t v52 = ~(-1LL << v51);
  }
  unint64_t v53 = v52 & *(void *)(v36 + 64);
  int64_t v105 = (unint64_t)(v51 + 63) >> 6;
  while (1)
  {
    if (v53)
    {
      uint64_t v108 = (v53 - 1) & v53;
      int64_t v109 = v50;
      unint64_t v54 = __clz(__rbit64(v53)) | (v50 << 6);
      goto LABEL_24;
    }

    int64_t v66 = v50 + 1;
    if (__OFADD__(v50, 1LL)) {
      goto LABEL_64;
    }
    if (v66 >= v105) {
      goto LABEL_50;
    }
    unint64_t v67 = *(void *)(v104 + 8 * v66);
    int64_t v68 = v50 + 1;
    if (!v67)
    {
      int64_t v68 = v50 + 2;
      if (v50 + 2 >= v105) {
        goto LABEL_50;
      }
      unint64_t v67 = *(void *)(v104 + 8 * v68);
      if (!v67)
      {
        int64_t v68 = v50 + 3;
        if (v50 + 3 >= v105) {
          goto LABEL_50;
        }
        unint64_t v67 = *(void *)(v104 + 8 * v68);
        if (!v67)
        {
          int64_t v68 = v50 + 4;
          if (v50 + 4 >= v105) {
            goto LABEL_50;
          }
          unint64_t v67 = *(void *)(v104 + 8 * v68);
          if (!v67)
          {
            int64_t v68 = v50 + 5;
            if (v50 + 5 >= v105) {
              goto LABEL_50;
            }
            unint64_t v67 = *(void *)(v104 + 8 * v68);
            if (!v67)
            {
              int64_t v68 = v50 + 6;
              if (v50 + 6 >= v105) {
                goto LABEL_50;
              }
              unint64_t v67 = *(void *)(v104 + 8 * v68);
              if (!v67)
              {
                int64_t v68 = v50 + 7;
                if (v50 + 7 >= v105) {
                  goto LABEL_50;
                }
                unint64_t v67 = *(void *)(v104 + 8 * v68);
                if (!v67)
                {
                  int64_t v68 = v50 + 8;
                  if (v50 + 8 >= v105) {
                    goto LABEL_50;
                  }
                  unint64_t v67 = *(void *)(v104 + 8 * v68);
                  if (!v67) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.nestedUnkeyedContainer(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v103 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v98 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = type metadata accessor for Optional();
  uint64_t v101 = *(void *)(v104 - 8);
  MEMORY[0x1895F8858](v104);
  int64_t v105 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v90 - v12;
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v102 = a1;
  uint64_t v97 = v14;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*((_BYTE *)v4 + 24) != 7)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }

  uint64_t v17 = v15;
  unint64_t v18 = v16;
  uint64_t v20 = v4[1];
  unint64_t v19 = v4[2];
  uint64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v100 = a3;
  unint64_t v106 = v16;
  if (v22)
  {
    outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
    swift_bridgeObjectRetain();
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18, 0);
    if ((v24 & 1) != 0)
    {
      uint64_t v25 = *(void *)(v21 + 56) + 24 * v23;
      uint64_t v27 = *(void *)v25;
      unint64_t v26 = *(void *)(v25 + 8);
      int v28 = *(unsigned __int8 *)(v25 + 16);
      outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)v25, v26, *(_BYTE *)(v25 + 16));
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
      if (v28 != 6)
      {
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }

      uint64_t v99 = v26;
      uint64_t v29 = v105;
LABEL_53:
      uint64_t v70 = *v4;
      unint64_t v71 = v4[4];
      uint64_t v72 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v13, v102, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v13, 0LL, 1LL, v8);
      uint64_t v73 = v101;
      uint64_t v74 = v104;
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v29, v13, v104);
      unint64_t v75 = v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v29, 1LL, v8) == 1)
      {
        uint64_t v76 = *(void (**)(char *, uint64_t))(v73 + 8);
        swift_retain();
        v76(v75, v74);
        v76(v29, v74);
        swift_retain();
        swift_bridgeObjectRelease();
LABEL_61:
        uint64_t v88 = v100;
        v100[3] = (uint64_t)&unk_189C8B350;
        v88[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML();
        uint64_t result = swift_allocObject();
        uint64_t *v88 = result;
        *(void *)(result + 16) = v70;
        *(void *)(result + 24) = v27;
        *(void *)(result + 32) = v99;
        *(_BYTE *)(result + 40) = 6;
        *(void *)(result + 48) = v71;
        return result;
      }

      unint64_t v77 = v29;
      uint64_t v78 = v27;
      uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
      uint64_t v80 = v98;
      v79(v98, v77, v8);
      uint64_t v81 = (uint64_t *)swift_allocObject();
      uint64_t v82 = v97;
      v81[5] = v8;
      v81[6] = v82;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81 + 2);
      v79((char *)boxed_opaque_existential_1, v80, v8);
      uint64_t v84 = *(void (**)(char *, uint64_t))(v73 + 8);
      swift_retain();
      v84(v75, v74);
      v81[7] = v71;
      if (v71 >> 62)
      {
        if (v71 >> 62 != 1)
        {
          uint64_t v27 = v78;
          uint64_t v87 = 1LL;
          goto LABEL_60;
        }

        uint64_t v85 = (uint64_t *)((v71 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        uint64_t v85 = (uint64_t *)(v71 + 64);
      }

      uint64_t v27 = v78;
      uint64_t v86 = *v85;
      swift_retain();
      uint64_t v87 = v86 + 1;
      if (!__OFADD__(v86, 1LL))
      {
LABEL_60:
        v81[8] = v87;
        swift_bridgeObjectRelease();
        unint64_t v71 = (unint64_t)v81;
        goto LABEL_61;
      }

      __break(1u);
      goto LABEL_64;
    }

    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<ContiguousArray<_XMLPlistEncodingFormat.Reference>>);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = MEMORY[0x18961AFE8];
  outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v31 = v18;
  char v32 = isUniquelyReferenced_nonNull_native;
  uint64_t v107 = *(void *)(v20 + 16);
  uint64_t v33 = v107;
  *(void *)(v20 + 16) = 0x8000000000000000LL;
  uint64_t v99 = v17;
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v31, 0);
  uint64_t v36 = *(void *)(v33 + 16);
  BOOL v37 = (v34 & 1) == 0;
  uint64_t v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v33 + 24) < v38)
    {
      char v39 = v34;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v32);
      uint64_t v40 = v106;
      uint64_t v41 = v107;
      uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v106, 0);
      if ((v39 & 1) != (v43 & 1)) {
        goto LABEL_68;
      }
      unint64_t v35 = v42;
      uint64_t v29 = v105;
      if ((v39 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v44 = *(void *)(v41 + 56) + 24 * v35;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v44, *(void *)(v44 + 8), *(_BYTE *)(v44 + 16));
      *(void *)uint64_t v44 = v27;
      *(void *)(v44 + 8) = 0LL;
      *(_BYTE *)(v44 + 16) = 6;
LABEL_52:
      *(void *)(v20 + 16) = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
      swift_release();
      outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
      uint64_t v99 = 0LL;
      goto LABEL_53;
    }

    if ((v32 & 1) != 0)
    {
      uint64_t v41 = v33;
      uint64_t v29 = v105;
      uint64_t v40 = v106;
      if ((v34 & 1) != 0) {
        goto LABEL_14;
      }
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v35, v99, v40, 0, v27, 0LL, 6, (void *)v41);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }

  unint64_t v90 = v35;
  int v91 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v45 = static _DictionaryStorage.copy(original:)();
  uint64_t v41 = v45;
  uint64_t v29 = v105;
  uint64_t v40 = v106;
  if (!*(void *)(v33 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    unint64_t v35 = v90;
    if ((v91 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  uint64_t v46 = (void *)(v45 + 64);
  unint64_t v47 = (unint64_t)((1LL << *(_BYTE *)(v41 + 32)) + 63) >> 6;
  BOOL v92 = (const void *)(v33 + 64);
  int64_t v48 = 0LL;
  *(void *)(v41 + 16) = *(void *)(v33 + 16);
  uint64_t v49 = 1LL << *(_BYTE *)(v33 + 32);
  uint64_t v50 = -1LL;
  if (v49 < 64) {
    uint64_t v50 = ~(-1LL << v49);
  }
  unint64_t v51 = v50 & *(void *)(v33 + 64);
  int64_t v93 = (unint64_t)(v49 + 63) >> 6;
  while (1)
  {
    uint64_t v29 = v105;
    uint64_t v40 = v106;
    if (v51)
    {
      int64_t v95 = v48;
      uint64_t v96 = (v51 - 1) & v51;
      unint64_t v52 = __clz(__rbit64(v51)) | (v48 << 6);
      goto LABEL_24;
    }

    int64_t v64 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      goto LABEL_65;
    }
    if (v64 >= v93) {
      goto LABEL_50;
    }
    unint64_t v65 = *((void *)v92 + v64);
    int64_t v66 = v48 + 1;
    if (!v65)
    {
      int64_t v66 = v48 + 2;
      if (v48 + 2 >= v93) {
        goto LABEL_50;
      }
      unint64_t v65 = *((void *)v92 + v66);
      if (!v65)
      {
        int64_t v66 = v48 + 3;
        if (v48 + 3 >= v93) {
          goto LABEL_50;
        }
        unint64_t v65 = *((void *)v92 + v66);
        if (!v65)
        {
          int64_t v66 = v48 + 4;
          if (v48 + 4 >= v93) {
            goto LABEL_50;
          }
          unint64_t v65 = *((void *)v92 + v66);
          if (!v65)
          {
            int64_t v66 = v48 + 5;
            if (v48 + 5 >= v93) {
              goto LABEL_50;
            }
            unint64_t v65 = *((void *)v92 + v66);
            if (!v65)
            {
              int64_t v66 = v48 + 6;
              if (v48 + 6 >= v93) {
                goto LABEL_50;
              }
              unint64_t v65 = *((void *)v92 + v66);
              if (!v65)
              {
                int64_t v66 = v48 + 7;
                if (v48 + 7 >= v93) {
                  goto LABEL_50;
                }
                unint64_t v65 = *((void *)v92 + v66);
                if (!v65)
                {
                  int64_t v66 = v48 + 8;
                  if (v48 + 8 >= v93) {
                    goto LABEL_50;
                  }
                  unint64_t v65 = *((void *)v92 + v66);
                  if (!v65) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _PlistKeyedEncodingContainerXML.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(*(void *)v1 + 40LL);
  unint64_t v6 = *(void *)(v1 + 16);
  char v7 = *(_BYTE *)(v1 + 24);
  uint64_t v8 = type metadata accessor for __PlistReferencingEncoderXML();
  uint64_t v9 = swift_allocObject();
  swift_retain();
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v6, v7);
  uint64_t v10 = specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)( v3,  0x7265707573LL,  0xE500000000000000LL,  0LL,  0,  v5,  v4,  v6,  v7,  v9);
  a1[3] = v8;
  uint64_t result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistReferencingEncoderXML and conformance __PlistEncoderXML,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderXML,  (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  a1[4] = result;
  *a1 = v10;
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.superEncoder(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](a1);
  char v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)v3;
  uint64_t v9 = *(void *)(v3 + 8);
  unint64_t v10 = *(void *)(*(void *)v3 + 40LL);
  unint64_t v11 = *(void *)(v3 + 16);
  char v12 = *(_BYTE *)(v3 + 24);
  v21[0] = v9;
  v21[1] = v11;
  char v22 = v12;
  uint64_t v13 = type metadata accessor for __PlistReferencingEncoderXML();
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v18, v4);
  swift_retain();
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v9, v11, v12);
  uint64_t v15 = specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)( v8,  (uint64_t)v7,  v10,  v21,  v14,  v4,  *(void *)(v19 + 24));
  unint64_t v16 = v20;
  v20[3] = v13;
  uint64_t result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistReferencingEncoderXML and conformance __PlistEncoderXML,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderXML,  (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  v16[4] = result;
  *unint64_t v16 = v15;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _PlistKeyedEncodingContainerXML<A>()
{
  return _PlistKeyedEncodingContainerXML.encodeNil(forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( char a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( uint64_t a1, uint64_t a2)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( double a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( float a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( uint64_t a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( __int16 a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( int a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( unsigned __int8 a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( unsigned __int16 a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( unsigned int a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>( unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return _PlistKeyedEncodingContainerXML.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _PlistKeyedEncodingContainerXML.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

void _PlistUnkeyedEncodingContainerXML.encodeNil()()
{
  if (*(_BYTE *)(v0 + 24) == 6)
  {
    unint64_t v1 = *(void *)(v0 + 16);
    uint64_t v3 = *(void *)(*(void *)v0 + 56LL);
    unint64_t v4 = *(void *)(*(void *)v0 + 64LL);
    char v5 = *(_BYTE *)(*(void *)v0 + 72LL);
    uint64_t v2 = *(void *)(v0 + 8);
    uint64_t v6 = (uint64_t *)(v2 + 16);
    uint64_t v7 = *(void *)(v2 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
    outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
    outlined copy of _XMLPlistEncodingFormat.Reference(v2, v1, 6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 16) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v7 + 16) + 1LL,  1);
      uint64_t v7 = *v6;
    }

    unint64_t v10 = *(void *)(v7 + 16);
    unint64_t v9 = *(void *)(v7 + 24);
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      uint64_t v7 = *v6;
    }

    *(void *)(v7 + 16) = v10 + 1;
    uint64_t v11 = v7 + 24 * v10;
    *(void *)(v11 + 32) = v3;
    *(void *)(v11 + 40) = v4;
    *(_BYTE *)(v11 + 48) = v5;
    *(void *)(v2 + 16) = v7;
    outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
    outlined consume of _XMLPlistEncodingFormat.Reference(v2, v1, 6);
  }

  else
  {
    __break(1u);
  }

uint64_t _PlistUnkeyedEncodingContainerXML.encode(_:)(uint64_t result)
{
  if ((result & 1) != 0) {
    uint64_t v2 = (uint64_t *)(*(void *)v1 + 80LL);
  }
  else {
    uint64_t v2 = (uint64_t *)(*(void *)v1 + 104LL);
  }
  if ((result & 1) != 0) {
    uint64_t v3 = (unint64_t *)(*(void *)v1 + 88LL);
  }
  else {
    uint64_t v3 = (unint64_t *)(*(void *)v1 + 112LL);
  }
  if ((result & 1) != 0) {
    unint64_t v4 = (char *)(*(void *)v1 + 96LL);
  }
  else {
    unint64_t v4 = (char *)(*(void *)v1 + 120LL);
  }
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    unint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = *v2;
    unint64_t v8 = *v3;
    char v9 = *v4;
    uint64_t v5 = *(void *)(v1 + 8);
    unint64_t v10 = (uint64_t *)(v5 + 16);
    uint64_t v11 = *(void *)(v5 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(*v2, *v3, *v4);
    outlined copy of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
    outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v11 + 16) + 1LL,  1);
      uint64_t v11 = *v10;
    }

    unint64_t v14 = *(void *)(v11 + 16);
    unint64_t v13 = *(void *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      uint64_t v11 = *v10;
    }

    *(void *)(v11 + 16) = v14 + 1;
    uint64_t v15 = v11 + 24 * v14;
    *(void *)(v15 + 32) = v7;
    *(void *)(v15 + 40) = v8;
    *(_BYTE *)(v15 + 48) = v9;
    *(void *)(v5 + 16) = v11;
    outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
    return outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      unint64_t v6 = *v5;
    }

    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 2;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      unint64_t v6 = *v5;
    }

    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 2;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      unint64_t v6 = *v5;
    }

    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 2;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      unint64_t v6 = *v5;
    }

    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 2;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      unint64_t v6 = *v5;
    }

    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 1;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      unint64_t v6 = *v5;
    }

    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 1;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      unint64_t v6 = *v5;
    }

    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 1;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      unint64_t v6 = *v5;
    }

    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 1;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void _PlistUnkeyedEncodingContainerXML.encode(_:)(float a1)
{
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    uint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      uint64_t v6 = *v5;
    }

    unint64_t v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      uint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    uint64_t v10 = v6 + 24 * v9;
    *(double *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 3;
    *(void *)(v3 + 16) = v6;
    outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

void _PlistUnkeyedEncodingContainerXML.encode(_:)(double a1)
{
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    uint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      uint64_t v6 = *v5;
    }

    unint64_t v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      uint64_t v6 = *v5;
    }

    *(void *)(v6 + 16) = v9 + 1;
    uint64_t v10 = v6 + 24 * v9;
    *(double *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 3;
    *(void *)(v3 + 16) = v6;
    outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }

  else
  {
    __break(1u);
  }

uint64_t _PlistUnkeyedEncodingContainerXML.encode(_:)(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(v2 + 24) == 6)
  {
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(v2 + 16);
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v7 = (uint64_t *)(v5 + 16);
    uint64_t v8 = *(void *)(v5 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 16) = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v8 + 16) + 1LL,  1);
      uint64_t v8 = *v7;
    }

    unint64_t v11 = *(void *)(v8 + 16);
    unint64_t v10 = *(void *)(v8 + 24);
    if (v11 >= v10 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      uint64_t v8 = *v7;
    }

    *(void *)(v8 + 16) = v11 + 1;
    uint64_t v12 = v8 + 24 * v11;
    *(void *)(v12 + 32) = v4;
    *(void *)(v12 + 40) = a2;
    *(_BYTE *)(v12 + 48) = 0;
    *(void *)(v5 + 16) = v8;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _PlistUnkeyedEncodingContainerXML.encode<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  unint64_t v6 = v3;
  uint64_t v9 = *(void *)(a2 - 8);
  __n128 v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v30[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v3;
  uint64_t result = (*(uint64_t (**)(char *, __n128))(v9 + 16))(v12, v10);
  unint64_t v15 = *(void *)(v13 + 40);
  int v16 = *((unsigned __int8 *)v6 + 24);
  if (v16 != 7 && v16 != 6)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v17 = *(void *)(*(void *)(v6[1] + 16LL) + 16LL);
  swift_retain();
  specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)((unint64_t)v12, v15, v17, 0LL, 0LL, 2, a2, a3, v30);
  if (v5)
  {
    swift_release();
    return (*(uint64_t (**)(char *, unint64_t))(v9 + 8))(v12, a2);
  }

  char v18 = v31;
  if (v31 == 255)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    char v18 = 7;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = MEMORY[0x18961AFF0];
    swift_release();
    unint64_t v32 = 0LL;
  }

  else
  {
    uint64_t v19 = v30[0];
    unint64_t v32 = v30[1];
    swift_release();
  }

  uint64_t result = (*(uint64_t (**)(char *, unint64_t))(v9 + 8))(v12, a2);
  if (*((_BYTE *)v6 + 24) != 6) {
    goto LABEL_15;
  }
  uint64_t v21 = v6[1];
  unint64_t v20 = v6[2];
  char v22 = (uint64_t *)(v21 + 16);
  uint64_t v23 = *(void *)(v21 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(v21, v20, 6);
  outlined copy of _XMLPlistEncodingFormat.Reference(v19, v32, v18);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v21 + 16) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v23 + 16) + 1LL,  1);
    uint64_t v23 = *v22;
  }

  unint64_t v26 = *(void *)(v23 + 16);
  unint64_t v25 = *(void *)(v23 + 24);
  if (v26 >= v25 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
    uint64_t v23 = *v22;
  }

  *(void *)(v23 + 16) = v26 + 1;
  uint64_t v27 = v23 + 24 * v26;
  unint64_t v28 = v32;
  *(void *)(v27 + 32) = v19;
  *(void *)(v27 + 40) = v28;
  *(_BYTE *)(v27 + 48) = v18;
  *(void *)(v21 + 16) = v23;
  outlined consume of _XMLPlistEncodingFormat.Reference(v21, v20, 6);
  return outlined consume of _XMLPlistEncodingFormat.Reference(v19, v28, v18);
}

void _PlistUnkeyedEncodingContainerXML.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v3 + 8);
  unint64_t v7 = *(void *)(v3 + 16);
  int v8 = *(unsigned __int8 *)(v3 + 24);
  if (v8 != 7 && v8 != 6) {
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)(*(void *)(v6 + 16) + 16LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x18961AFF0];
  if (v8 == 6)
  {
    uint64_t v11 = v10;
    uint64_t v12 = (uint64_t *)(v6 + 16);
    uint64_t v13 = *(void *)(v6 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v6, v7, 6);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 16) = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v13 + 16) + 1LL,  1);
      uint64_t v13 = *v12;
    }

    unint64_t v16 = *(void *)(v13 + 16);
    unint64_t v15 = *(void *)(v13 + 24);
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      uint64_t v13 = *v12;
    }

    *(void *)(v13 + 16) = v16 + 1;
    uint64_t v17 = v13 + 24 * v16;
    *(void *)(v17 + 32) = v11;
    *(void *)(v17 + 40) = 0LL;
    *(_BYTE *)(v17 + 48) = 7;
    *(void *)(v6 + 16) = v13;
    outlined consume of _XMLPlistEncodingFormat.Reference(v6, v7, 6);
    unint64_t v18 = *(void *)(v4 + 32);
    uint64_t v19 = (void *)swift_allocObject();
    v19[5] = &type metadata for _CodingKey;
    v19[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v20 = swift_allocObject();
    void v19[2] = v20;
    *(void *)(v20 + 24) = 0LL;
    *(void *)(v20 + 32) = 0LL;
    *(void *)(v20 + 16) = v9;
    *(_BYTE *)(v20 + 40) = 2;
    _OWORD v19[7] = v18;
    if (v18 >> 62)
    {
      uint64_t v22 = 0LL;
      if (v18 >> 62 != 1)
      {
LABEL_13:
        if (!__OFADD__(v22, 1LL))
        {
          v19[8] = v22 + 1;
          uint64_t v24 = type metadata accessor for _PlistKeyedEncodingContainerXML(0LL, a2, a3, v21);
          swift_retain();
          MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistKeyedEncodingContainerXML<A>, v24);
          KeyedEncodingContainer.init<A>(_:)();
          return;
        }

        __break(1u);
        goto LABEL_16;
      }

      uint64_t v23 = (uint64_t *)((v18 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v23 = (uint64_t *)(v18 + 64);
    }

    uint64_t v22 = *v23;
    swift_retain();
    goto LABEL_13;
  }

void _PlistUnkeyedEncodingContainerXML.nestedUnkeyedContainer()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (uint64_t *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  unint64_t v5 = *(void *)(v1 + 16);
  int v6 = *(unsigned __int8 *)(v1 + 24);
  if (v6 != 7 && v6 != 6) {
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)(*(void *)(v4 + 16) + 16LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<ContiguousArray<_XMLPlistEncodingFormat.Reference>>);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = MEMORY[0x18961AFE8];
  if (v6 == 6)
  {
    uint64_t v9 = v8;
    uint64_t v10 = (uint64_t *)(v4 + 16);
    uint64_t v11 = *(void *)(v4 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v4, v5, 6);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v4 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v11 + 16) + 1LL,  1);
      uint64_t v11 = *v10;
    }

    unint64_t v14 = *(void *)(v11 + 16);
    unint64_t v13 = *(void *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      uint64_t v11 = *v10;
    }

    *(void *)(v11 + 16) = v14 + 1;
    uint64_t v15 = v11 + 24 * v14;
    *(void *)(v15 + 32) = v9;
    *(void *)(v15 + 40) = 0LL;
    *(_BYTE *)(v15 + 48) = 6;
    *(void *)(v4 + 16) = v11;
    outlined consume of _XMLPlistEncodingFormat.Reference(v4, v5, 6);
    uint64_t v16 = *v2;
    unint64_t v17 = v2[4];
    unint64_t v18 = (void *)swift_allocObject();
    v18[5] = &type metadata for _CodingKey;
    v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v19 = swift_allocObject();
    void v18[2] = v19;
    *(void *)(v19 + 24) = 0LL;
    *(void *)(v19 + 32) = 0LL;
    *(void *)(v19 + 16) = v7;
    *(_BYTE *)(v19 + 40) = 2;
    v18[7] = v17;
    if (v17 >> 62)
    {
      uint64_t v20 = 0LL;
      if (v17 >> 62 != 1)
      {
LABEL_13:
        if (!__OFADD__(v20, 1LL))
        {
          v18[8] = v20 + 1;
          a1[3] = (uint64_t)&unk_189C8B350;
          a1[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML();
          uint64_t v22 = swift_allocObject();
          *a1 = v22;
          *(void *)(v22 + 16) = v16;
          *(void *)(v22 + 24) = v9;
          *(void *)(v22 + 32) = 0LL;
          *(_BYTE *)(v22 + 40) = 6;
          *(void *)(v22 + 48) = v18;
          swift_retain();
          return;
        }

        __break(1u);
        goto LABEL_16;
      }

      uint64_t v21 = (uint64_t *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v21 = (uint64_t *)(v17 + 64);
    }

    uint64_t v20 = *v21;
    swift_retain();
    goto LABEL_13;
  }

void _PlistUnkeyedEncodingContainerXML.superEncoder()(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v5 = *(void *)(v1 + 16);
  int v6 = *(unsigned __int8 *)(v1 + 24);
  if (v6 == 7 || v6 == 6)
  {
    uint64_t v7 = *(void *)(*(void *)(v3 + 16) + 16LL);
    unint64_t v8 = *(void *)(v4 + 40);
    v11[0] = v3;
    v11[1] = v5;
    char v12 = v6;
    uint64_t v9 = type metadata accessor for __PlistReferencingEncoderXML();
    swift_allocObject();
    swift_retain();
    swift_retain();
    outlined copy of _XMLPlistEncodingFormat.Reference(v3, v5, v6);
    uint64_t v10 = __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(v4, v7, v8, (uint64_t)v11);
    a1[3] = v9;
    a1[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistReferencingEncoderXML and conformance __PlistEncoderXML,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderXML,  (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
    *a1 = v10;
  }

  else
  {
    __break(1u);
  }

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _PlistUnkeyedEncodingContainerXML()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 == 7 || v1 == 6) {
    return *(void *)(*(void *)(*(void *)(v0 + 8) + 16LL) + 16LL);
  }
  __break(1u);
  return result;
}

void protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _PlistUnkeyedEncodingContainerXML()
{
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML( uint64_t a1)
{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML( uint64_t a1, uint64_t a2)
{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1, a2);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML( double a1)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML( float a1)
{
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _PlistUnkeyedEncodingContainerXML( uint64_t a1, unint64_t a2, uint64_t a3)
{
  return _PlistUnkeyedEncodingContainerXML.encode<A>(_:)(a1, a2, a3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encodeNil()()
{
  if (((*(uint64_t (**)(void))(*(void *)v0 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v4, 1);
    uint64_t v7 = *(void *)v0;
    goto LABEL_5;
  }

  uint64_t v8 = *((void *)v0 + 2);
  v0 += 16;
  uint64_t v7 = v8;
  uint64_t v1 = *((void *)v0 + 5);
  unint64_t v2 = *((void *)v0 + 6);
  char v3 = v0[56];
  outlined copy of _XMLPlistEncodingFormat.Reference(v1, v2, v3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v0 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v7 + 16) + 1LL,  1);
    uint64_t v7 = *(void *)v0;
  }

  unint64_t v5 = *(void *)(v7 + 16);
  unint64_t v6 = *(void *)(v7 + 24);
  int64_t v4 = v5 + 1;
  if (v5 >= v6 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v7 + 16) = v4;
  uint64_t v10 = v7 + 24 * v5;
  *(void *)(v10 + 32) = v1;
  *(void *)(v10 + 40) = v2;
  *(_BYTE *)(v10 + 48) = v3;
  *(void *)uint64_t v0 = v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::Bool a1)
{
  uint64_t v6 = a1;
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_15:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v4, 1);
    uint64_t v8 = *v1;
    goto LABEL_13;
  }

  uint64_t v9 = v1[2];
  v1 += 2;
  uint64_t v8 = v9;
  uint64_t v10 = v1 + 8;
  BOOL v11 = (v6 & 1) == 0;
  if ((v6 & 1) == 0) {
    uint64_t v10 = v1 + 11;
  }
  uint64_t v6 = *v10;
  if (v11) {
    char v12 = v1 + 12;
  }
  else {
    char v12 = v1 + 9;
  }
  unint64_t v2 = *v12;
  if (v11) {
    unint64_t v13 = (char *)(v1 + 13);
  }
  else {
    unint64_t v13 = (char *)(v1 + 10);
  }
  char v3 = *v13;
  outlined copy of _XMLPlistEncodingFormat.Reference(v6, v2, *v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v8 + 16) + 1LL,  1);
    uint64_t v8 = *v1;
  }

  unint64_t v5 = *(void *)(v8 + 16);
  unint64_t v7 = *(void *)(v8 + 24);
  int64_t v4 = v5 + 1;
  if (v5 >= v7 >> 1) {
    goto LABEL_15;
  }
LABEL_13:
  *(void *)(v8 + 16) = v4;
  uint64_t v15 = v8 + 24 * v5;
  *(void *)(v15 + 32) = v6;
  *(void *)(v15 + 40) = v2;
  *(_BYTE *)(v15 + 48) = v3;
  void *v1 = v8;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::Int8 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 2;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::Int16 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 2;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::Int32 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 2;
  void *v1 = v6;
}

uint64_t __PlistEncoderXML.encode(_:)(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 2;
  void *v1 = v6;
  return result;
}

{
  void *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 1;
  void *v1 = v6;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::UInt8 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 1;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::UInt16 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 1;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::UInt32 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 1;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::String a1)
{
  id object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v2, 1);
    uint64_t v7 = *v1;
    goto LABEL_5;
  }

  uint64_t v8 = v1[2];
  v1 += 2;
  uint64_t v7 = v8;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v7 + 16) + 1LL,  1);
    uint64_t v7 = *v1;
  }

  unint64_t v3 = *(void *)(v7 + 16);
  unint64_t v6 = *(void *)(v7 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v6 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v7 + 16) = v2;
  uint64_t v10 = v7 + 24 * v3;
  *(void *)(v10 + 32) = countAndFlagsBits;
  *(void *)(v10 + 40) = object;
  *(_BYTE *)(v10 + 48) = 0;
  void *v1 = v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::Float a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(double *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 3;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)( Swift::Double a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }

  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
    uint64_t v6 = *v1;
  }

  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(Swift::Double *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0LL;
  *(_BYTE *)(v9 + 48) = 3;
  void *v1 = v6;
}

uint64_t __PlistEncoderXML.encode<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = v4;
  if (((*(uint64_t (**)(void))(*v3 + 240LL))() & 1) == 0)
  {
    __break(1u);
LABEL_12:
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, a2, 1);
    uint64_t v14 = *v3;
    goto LABEL_10;
  }

  unint64_t v12 = v3[5];
  swift_retain();
  specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1, v12, 0LL, 0LL, 0LL, 255, a2, a3, v17);
  if (v7) {
    return swift_release();
  }
  LOBYTE(a1) = v18;
  if (v18 == 255)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    LOBYTE(a1) = 7;
    a3 = swift_allocObject();
    *(void *)(a3 + 16) = MEMORY[0x18961AFF0];
    swift_release();
    uint64_t v5 = 0LL;
  }

  else
  {
    a3 = v17[0];
    uint64_t v5 = v17[1];
    swift_release();
  }

  uint64_t v15 = v3[2];
  v3 += 2;
  uint64_t v14 = v15;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v3 = v15;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v14 + 16) + 1LL,  1);
    uint64_t v14 = *v3;
  }

  unint64_t v6 = *(void *)(v14 + 16);
  unint64_t v11 = *(void *)(v14 + 24);
  a2 = v6 + 1;
  if (v6 >= v11 >> 1) {
    goto LABEL_12;
  }
LABEL_10:
  *(void *)(v14 + 16) = a2;
  uint64_t v16 = v14 + 24 * v6;
  *(void *)(v16 + 32) = a3;
  *(void *)(v16 + 40) = v5;
  *(_BYTE *)(v16 + 48) = a1;
  *unint64_t v3 = v14;
  return result;
}

void protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __PlistEncoderXML()
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( Swift::Bool a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( uint64_t a1, uint64_t a2)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( Swift::Double a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( Swift::Float a1)
{
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( uint64_t a1)
{
  return __PlistEncoderXML.encode(_:)(a1);
}

{
  return __PlistEncoderXML.encode(_:)(a1);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(a1);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( Swift::Int8 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( Swift::Int16 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( Swift::Int32 a1)
{
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( Swift::UInt8 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( Swift::UInt16 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML( Swift::UInt32 a1)
{
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __PlistEncoderXML( unint64_t a1, unint64_t a2, uint64_t a3)
{
  return __PlistEncoderXML.encode<A>(_:)(a1, a2, a3);
}

uint64_t specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v4[3] = type metadata accessor for __PlistEncoderXML();
  v4[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderXML,  (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v4[3] = type metadata accessor for __PlistEncoderXML();
  v4[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderXML,  (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t specialized __PlistEncoderXML._wrapGeneric<A>(_:for:_:)@<X0>( void (*a1)(void *)@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t v9 = v7;
  uint64_t v15 = a1;
  uint64_t v16 = v9 + 2;
  unint64_t v36 = *(void *)(v9[2] + 16LL);
  if (a6 != -1)
  {
    uint64_t v33 = a1;
    uint64_t v32 = v8;
    unint64_t v17 = (void *)swift_allocObject();
    v17[5] = &type metadata for _CodingKey;
    v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v18 = swift_allocObject();
    void v17[2] = v18;
    *(void *)(v18 + 16) = a3;
    *(void *)(v18 + 24) = a4;
    *(void *)(v18 + 32) = a5;
    *(_BYTE *)(v18 + 40) = a6;
    v17[7] = a2;
    uint64_t v31 = a3;
    uint64_t v19 = a4;
    if (a2 >> 62)
    {
      if (a2 >> 62 != 1)
      {
        uint64_t v25 = a5;
        uint64_t v23 = 1LL;
LABEL_10:
        v17[8] = v23;
        uint64_t v21 = v9[5];
        uint64_t v22 = v9[6];
        v9[5] = v17;
        uint64_t v16 = v9 + 2;
LABEL_11:
        outlined copy of _CodingKey?(v31, v19, v25, a6);
        unint64_t v24 = v36;
        uint64_t v8 = v32;
        goto LABEL_12;
      }

      uint64_t v20 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v20 = (uint64_t *)(a2 + 64);
    }

    uint64_t v25 = a5;
    uint64_t v26 = *v20;
    uint64_t result = swift_retain();
    uint64_t v23 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      goto LABEL_22;
    }

    goto LABEL_10;
  }

  uint64_t v21 = v9[5];
  uint64_t v22 = v9[6];
  v9[5] = a2;
  if (!(a2 >> 62))
  {
    uint64_t v31 = a3;
    uint64_t v32 = v8;
    uint64_t v19 = a4;
    uint64_t v25 = a5;
    uint64_t v33 = a1;
    uint64_t v23 = *(void *)(a2 + 64);
    swift_retain();
    goto LABEL_11;
  }

  if (a2 >> 62 == 1)
  {
    uint64_t v33 = a1;
    uint64_t v23 = *(void *)(a2 + 32);
    swift_retain();
    unint64_t v24 = v36;
LABEL_12:
    swift_retain();
    uint64_t v15 = v33;
    goto LABEL_13;
  }

  uint64_t v23 = 0LL;
  unint64_t v24 = v36;
LABEL_13:
  v9[6] = v23;
  v15(v9);
  if (!v8)
  {
    v9[5] = v21;
    swift_retain();
    swift_release();
    v9[6] = v22;
    swift_release();
    uint64_t result = swift_release();
    if (v24 < *(void *)(v9[2] + 16LL))
    {
      uint64_t result = specialized ContiguousArray._customRemoveLast()((uint64_t)&v34);
      unsigned __int8 v28 = v35;
      if (v35 == 255)
      {
        uint64_t result = specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16LL) - 1LL, (uint64_t)&v34);
        __int128 v29 = v34;
        unsigned __int8 v28 = v35;
      }

      else
      {
        __int128 v29 = v34;
      }

      *(_OWORD *)a7 = v29;
      *(_BYTE *)(a7 + 16) = v28;
      return result;
    }

uint64_t __PlistEncoderXML._wrapGeneric<A>(_:for:_:)@<X0>( void (*a1)(void *)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v8 = v7;
  uint64_t v48 = a6;
  uint64_t v49 = a2;
  unint64_t v55 = a3;
  uint64_t v45 = a7;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v47 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t v21 = v8[2];
  uint64_t v46 = (char *)(v8 + 2);
  unint64_t v52 = *(void *)(v21 + 16);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v22((char *)&v45 - v19, a4, v13, v18);
  ((void (*)(char *, char *, uint64_t))v22)(v16, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1LL, a5) != 1)
  {
    __int128 v29 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    char v30 = v47;
    v29(v47, v16, a5);
    uint64_t v31 = (uint64_t *)swift_allocObject();
    uint64_t v32 = v48;
    v31[5] = a5;
    v31[6] = v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31 + 2);
    v29((char *)boxed_opaque_existential_1, v30, a5);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    unint64_t v34 = v55;
    v31[7] = v55;
    unint64_t v35 = v34 >> 62;
    if (v34 >> 62)
    {
      if ((_DWORD)v35 != 1)
      {
        uint64_t v28 = 1LL;
        if (!__OFSUB__((_DWORD)v35, 1)) {
          goto LABEL_12;
        }
        goto LABEL_24;
      }

      unint64_t v36 = (uint64_t *)((v34 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      unint64_t v36 = (uint64_t *)(v34 + 64);
    }

    uint64_t v37 = *v36;
    swift_retain();
    BOOL v38 = __OFADD__(v37, 1LL);
    uint64_t v28 = v37 + 1;
    if (!v38)
    {
LABEL_12:
      v31[8] = v28;
      uint64_t v24 = v8[5];
      uint64_t v25 = v8[6];
      v8[5] = v31;
      goto LABEL_13;
    }

uint64_t __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(unsigned __int8 *)(a4 + 16);
  *(void *)(v4 + 128) = a1;
  *(_OWORD *)(v4 + 136) = *(_OWORD *)a4;
  *(void *)(v4 + 152) = v7;
  *(void *)(v4 + 160) = a2;
  *(void *)(v4 + 168) = 0LL;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v10 = (void *)swift_allocObject();
  v10[5] = &type metadata for _CodingKey;
  v10[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  void v10[2] = result;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = a2;
  *(_BYTE *)(result + 40) = 2;
  unint64_t v12 = a3 >> 62;
  v10[7] = a3;
  if (a3 >> 62)
  {
    uint64_t v13 = 0LL;
    if ((_DWORD)v12 != 1) {
      goto LABEL_6;
    }
    uint64_t v14 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v14 = (uint64_t *)(a3 + 64);
  }

  uint64_t v13 = *v14;
  uint64_t result = swift_retain();
LABEL_6:
  if (__OFADD__(v13, 1LL))
  {
    __break(1u);
  }

  else
  {
    v10[8] = v13 + 1;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
      {
        uint64_t v15 = *(void *)(a3 + 32);
        swift_bridgeObjectRetain();
        swift_release();
      }

      else
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = 0LL;
      }
    }

    else
    {
      uint64_t v15 = *(void *)(a3 + 64);
      swift_bridgeObjectRetain();
      swift_release();
    }

    *(void *)(v4 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v4 + 24) = v9;
    *(void *)(v4 + 32) = v8;
    *(void *)(v4 + 40) = v10;
    *(void *)(v4 + 56) = 0LL;
    *(void *)(v4 + 64) = 0LL;
    *(void *)(v4 + 48) = v15;
    *(_BYTE *)(v4 + 72) = 8;
    *(_OWORD *)(v4 + 80) = xmmword_18372C2E0;
    *(_BYTE *)(v4 + 96) = 8;
    *(_OWORD *)(v4 + 104) = xmmword_18372C9F0;
    *(_BYTE *)(v4 + 120) = 8;
    return v4;
  }

  return result;
}

BOOL __PlistReferencingEncoderXML.canEncodeNewValue.getter()
{
  uint64_t v1 = *(void *)(v0[2] + 16LL);
  unint64_t v2 = v0[5];
  swift_retain();
  uint64_t v3 = _CodingPathNode.path.getter(v2);
  swift_release();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v0[16] + 40LL);
  swift_retain();
  uint64_t v6 = _CodingPathNode.path.getter(v5);
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v1 == v4 + ~v7;
}

uint64_t __PlistReferencingEncoderXML.__ivar_destroyer()
{
  return outlined consume of __PlistReferencingEncoderXML.Reference( *(void *)(v0 + 136),  *(void *)(v0 + 144),  *(void *)(v0 + 152));
}

uint64_t __PlistReferencingEncoderXML.__deallocating_deinit()
{
  uint64_t v3 = v0;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + 16;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6 == 1)
  {
    specialized ContiguousArray._customRemoveLast()((uint64_t)&v65);
    char v9 = v67;
    if (v67 == 255)
    {
      specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v4 + 16LL) - 1LL, (uint64_t)&v65);
      uint64_t v11 = v65;
      unint64_t v10 = v66;
      char v9 = v67;
    }

    else
    {
      uint64_t v11 = v65;
      unint64_t v10 = v66;
    }
  }

  else
  {
    if (v6) {
      goto LABEL_68;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    char v9 = 7;
    uint64_t v11 = swift_allocObject();
    unint64_t v10 = 0LL;
    *(void *)(v11 + 16) = MEMORY[0x18961AFF0];
  }

  uint64_t v12 = *(void *)(v3 + 136);
  uint64_t v13 = *(void *)(v3 + 152);
  uint64_t v14 = *(void *)(v3 + 160);
  if ((v13 & 0x8000000000000000LL) == 0)
  {
    if (*(void *)(v3 + 152) == 6LL)
    {
      uint64_t v15 = *(void *)(v12 + 16);
      v12 += 16LL;
      if (*(void *)(v15 + 16) < v14)
      {
        __break(1u);
      }

      else if ((v14 & 0x8000000000000000LL) == 0)
      {
        specialized ContiguousArray.replaceSubrange<A>(_:with:)( *(void *)(v3 + 160),  *(void *)(v3 + 160),  v11,  v10,  v9);
LABEL_63:
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v49 = *(void *)(v3 + 80);
        unint64_t v50 = *(void *)(v3 + 88);
        uint64_t v51 = *(void *)(v3 + 104);
        unint64_t v52 = *(void *)(v3 + 112);
        char v53 = *(_BYTE *)(v3 + 96);
        char v54 = *(_BYTE *)(v3 + 120);
        outlined consume of _XMLPlistEncodingFormat.Reference( *(void *)(v3 + 56),  *(void *)(v3 + 64),  *(_BYTE *)(v3 + 72));
        outlined consume of _XMLPlistEncodingFormat.Reference(v49, v50, v53);
        outlined consume of _XMLPlistEncodingFormat.Reference(v51, v52, v54);
        swift_release();
        outlined consume of __PlistReferencingEncoderXML.Reference( *(void *)(v3 + 136),  *(void *)(v3 + 144),  *(void *)(v3 + 152));
        return swift_deallocClassInstance();
      }

      __break(1u);
      goto LABEL_23;
    }

    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }

  unint64_t v16 = *(void *)(v3 + 144);
  unint64_t v1 = *(void *)(v3 + 168);
  outlined copy of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
  outlined copy of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
  outlined copy of __PlistReferencingEncoderXML.Reference(v12, v16, v13);
  unint64_t v64 = v16;
  outlined copy of _XMLPlistEncodingFormat.Reference(v12, v16, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v65 = *(void *)(v12 + 16);
  uint64_t v2 = v65;
  *(void *)(v12 + 16) = 0x8000000000000000LL;
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v1, 0);
  uint64_t v18 = *(void *)(v2 + 16);
  BOOL v19 = (v7 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (*(void *)(v2 + 24) < v20)
  {
    char v21 = v7;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
    uint64_t v22 = v65;
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v1, 0);
    if ((v21 & 1) != (v24 & 1)) {
      goto LABEL_69;
    }
    unint64_t v8 = v23;
    char v25 = v21;
    unint64_t v26 = v64;
    if ((v25 & 1) == 0) {
      goto LABEL_61;
    }
    goto LABEL_20;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    uint64_t v22 = v2;
    unint64_t v26 = v64;
    if ((v7 & 1) == 0)
    {
LABEL_61:
      specialized _NativeDictionary._insert(at:key:value:)(v8, v14, v1, 0, v11, v10, v9, (void *)v22);
      swift_bridgeObjectRetain();
      goto LABEL_62;
    }

uint64_t type metadata accessor for __PlistReferencingEncoderXML()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for _XMLPlistEncodingFormat.Reference.Box()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t _XMLPlistEncodingFormat.Reference.Box.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _XMLPlistEncodingFormat.Reference.Box( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _XMLPlistEncodingFormat.Reference.Box);
}

uint64_t outlined copy of __PlistReferencingEncoderXML.Reference(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000LL) == 0) {
    return outlined copy of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  }
  outlined copy of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  return swift_bridgeObjectRetain();
}

uint64_t destroy for __PlistReferencingEncoderXML.Reference(uint64_t a1)
{
  return outlined consume of __PlistReferencingEncoderXML.Reference( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16));
}

uint64_t outlined consume of __PlistReferencingEncoderXML.Reference( uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000LL) == 0) {
    return outlined consume of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  }
  outlined consume of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for __PlistReferencingEncoderXML.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of __PlistReferencingEncoderXML.Reference(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for __PlistReferencingEncoderXML.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of __PlistReferencingEncoderXML.Reference(*a2, v4, v5);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of __PlistReferencingEncoderXML.Reference(v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for __PlistReferencingEncoderXML.Reference(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  __int128 v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v7;
  a1[4] = v3;
  outlined consume of __PlistReferencingEncoderXML.Reference(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for __PlistReferencingEncoderXML.Reference(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 4;
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for __PlistReferencingEncoderXML.Reference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 24) = 0LL;
      *(void *)(result + 32) = 0LL;
      *(void *)(result + 16) = 16LL * -a2;
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t getEnumTag for __PlistReferencingEncoderXML.Reference(uint64_t a1)
{
  return *(void *)(a1 + 16) >> 63;
}

uint64_t destructiveProjectEnumData for __PlistReferencingEncoderXML.Reference(uint64_t result)
{
  *(void *)(result + 16) &= ~0x8000000000000000LL;
  return result;
}

uint64_t destructiveInjectEnumTag for __PlistReferencingEncoderXML.Reference(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = *(void *)(result + 16) & 0xFLL | (a2 << 63);
  return result;
}

void *type metadata accessor for __PlistReferencingEncoderXML.Reference()
{
  return &unk_189C8B0E8;
}

uint64_t destroy for _XMLPlistEncodingFormat(uint64_t a1)
{
  return outlined consume of _XMLPlistEncodingFormat.Reference( *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for _XMLPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 24);
  unint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(_BYTE *)(v2 + 40);
  outlined copy of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(v2 + 48);
  unint64_t v11 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(_BYTE *)(v2 + 64);
  outlined copy of _XMLPlistEncodingFormat.Reference(v10, v11, v2);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v2;
  return a1;
}

uint64_t assignWithCopy for _XMLPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
  uint64_t v10 = *(void *)(v2 + 24);
  unint64_t v11 = *(void *)(v2 + 32);
  char v12 = *(_BYTE *)(v2 + 40);
  outlined copy of _XMLPlistEncodingFormat.Reference(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 24);
  unint64_t v14 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  char v15 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v12;
  outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, v15);
  uint64_t v16 = *(void *)(v2 + 48);
  unint64_t v17 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(_BYTE *)(v2 + 64);
  outlined copy of _XMLPlistEncodingFormat.Reference(v16, v17, v2);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  char v20 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v2;
  outlined consume of _XMLPlistEncodingFormat.Reference(v18, v19, v20);
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for _XMLPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  char v8 = *(_BYTE *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  char v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of _XMLPlistEncodingFormat.Reference(v9, v10, v11);
  char v12 = *(_BYTE *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 48);
  unint64_t v14 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  char v15 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v12;
  outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for _XMLPlistEncodingFormat(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF8 && *(_BYTE *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 248);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 8) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _XMLPlistEncodingFormat( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 248;
    if (a3 >= 0xF8) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF8) {
      *(_BYTE *)(result + 65) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _XMLPlistEncodingFormat()
{
  return &type metadata for _XMLPlistEncodingFormat;
}

void *type metadata accessor for _PlistEncodingStorageXML()
{
  return &unk_189C8B190;
}

_UNKNOWN **associated type witness table accessor for PlistEncodingFormat.Writer : PlistWriting in _XMLPlistEncodingFormat()
{
  return &protocol witness table for _XMLPlistEncodingFormat.Writer;
}

_UNKNOWN **associated type witness table accessor for PlistWriting.Reference : PlistEncodingReference in _XMLPlistEncodingFormat.Writer()
{
  return &protocol witness table for _XMLPlistEncodingFormat.Reference;
}

unint64_t lazy protocol witness table accessor for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference()
{
  unint64_t result = lazy protocol witness table cache variable for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference;
  if (!lazy protocol witness table cache variable for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _XMLPlistEncodingFormat.Reference,  &type metadata for _XMLPlistEncodingFormat.Reference);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference);
  }

  return result;
}

void _XMLPlistEncodingFormat.Writer.append(_:)( unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X8>)
{
  if ((a3 & 1) == 0)
  {
    if (a1)
    {
      _XMLPlistEncodingFormat.Writer.append(_:)(a1, a2);
      return;
    }

    __break(1u);
    goto LABEL_11;
  }

  a4 = HIDWORD(a1);
  if (HIDWORD(a1))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    int v4 = (a1 & 0x3F) << 8;
    if (a1 <= 0x7FF)
    {
      unsigned int v5 = (v4 | (a1 >> 6)) + 33217;
      goto LABEL_9;
    }

void _XMLPlistEncodingFormat.Writer.append(_:indentation:)(uint64_t a1, Swift::Int a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 16);
  _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a2);
  __asm { BR              X9 }

uint64_t sub_183349184()
{
  *(void *)(v0 + 176) = 60LL;
  *(void *)(v0 + 184) = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176));
  swift_bridgeObjectRelease();
  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"string", 6LL);
  *(void *)(v0 + 176) = 62LL;
  *(void *)(v0 + 184) = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176));
  swift_bridgeObjectRelease();
  *(void *)(v0 + 176) = v1;
  *(void *)(v0 + 184) = v2;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176), v3);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 176) = 12092LL;
  *(void *)(v0 + 184) = 0xE200000000000000LL;
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176));
  swift_bridgeObjectRelease();
  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"string", 6LL);
  *(void *)(v0 + 176) = 2622LL;
  *(void *)(v0 + 184) = 0xE200000000000000LL;
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176));
  return swift_bridgeObjectRelease();
}

void _XMLPlistEncodingFormat.Writer.append(_:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 1) {
    return;
  }
  unsigned int v3 = v2;
  uint64_t v4 = v2[2];
  if ((unint64_t)a2 < 0x2000)
  {
    uint64_t v5 = 0x2000 - v4;
    if (__OFSUB__(0x2000LL, v4))
    {
      __break(1u);
    }

    else
    {
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = 0x2000 - v4;
      }
      if (v5 < a2) {
        goto LABEL_8;
      }
      if (!*v3)
      {
LABEL_17:
        __break(1u);
        return;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      if (!__OFADD__(v4, v6))
      {
        v3[2] = v4 + v6;
        return;
      }
    }

    __break(1u);
    goto LABEL_17;
  }

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendIndents(_:)(Swift::Int a1)
{
  unint64_t v1 = a1;
  if (a1 >= 4)
  {
    do
    {
      __int128 v4 = xmmword_183823CC0;
      _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)&v4, 4LL);
      swift_bridgeObjectRelease();
      v1 -= 4LL;
    }

    while (v1 > 3);
  }

  switch(v1)
  {
    case 1uLL:
      uint64_t v2 = 9LL;
      unint64_t v3 = 0xE100000000000000LL;
      break;
    case 2uLL:
      uint64_t v2 = 2313LL;
      unint64_t v3 = 0xE200000000000000LL;
      break;
    case 3uLL:
      uint64_t v2 = 592137LL;
      unint64_t v3 = 0xE300000000000000LL;
      break;
    default:
      return;
  }

  *(void *)&__int128 v4 = v2;
  *((void *)&v4 + 1) = v3;
  specialized String.withUTF8<A>(_:)((uint64_t *)&v4);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)( Foundation::XMLPlistTag _, Swift::Bool withNewLine)
{
  uint64_t v8 = 60LL;
  unint64_t v9 = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)(&v8);
  swift_bridgeObjectRelease();
  unint64_t v4 = XMLPlistTag.tagName.getter(_);
  _XMLPlistEncodingFormat.Writer.append(_:)(v4, v5, v6, v7);
  if (withNewLine)
  {
    uint64_t v8 = 2622LL;
    unint64_t v9 = 0xE200000000000000LL;
  }

  else
  {
    uint64_t v8 = 62LL;
    unint64_t v9 = 0xE100000000000000LL;
  }

  specialized String.withUTF8<A>(_:)(&v8);
  swift_bridgeObjectRelease();
}

uint64_t _XMLPlistEncodingFormat.Writer.append(_:)( uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  v6[0] = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  a3(v6, v3);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation::XMLPlistTag a1)
{
  uint64_t v6 = 12092LL;
  unint64_t v7 = 0xE200000000000000LL;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
  unint64_t v2 = XMLPlistTag.tagName.getter(a1);
  _XMLPlistEncodingFormat.Writer.append(_:)(v2, v3, v4, v5);
  uint64_t v6 = 2622LL;
  unint64_t v7 = 0xE200000000000000LL;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
}

uint64_t _XMLPlistEncodingFormat.Writer.appendArray(_:indentation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = 60LL;
    unint64_t v7 = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)(&v6);
    swift_bridgeObjectRelease();
    _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"array", 5LL);
    uint64_t v6 = 2622LL;
    unint64_t v7 = 0xE200000000000000LL;
    specialized String.withUTF8<A>(_:)(&v6);
    swift_bridgeObjectRelease();
    if (!__OFADD__(a2, 1LL))
    {
      swift_retain();
      uint64_t v2 = *(unsigned __int8 *)(a1 + 48);
      outlined copy of _XMLPlistEncodingFormat.Reference( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(_BYTE *)(a1 + 48));
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a2 + 1);
      __asm { BR              X8 }
    }

    __break(1u);
    JUMPOUT(0x18334B344LL);
  }

  uint64_t v6 = 60LL;
  unint64_t v7 = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"array", 5LL);
  uint64_t v6 = 671279LL;
  unint64_t v7 = 0xE300000000000000LL;
  specialized String.withUTF8<A>(_:)(&v6);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendDictionary(_:indentation:)( Swift::OpaquePointer _, Swift::Int indentation)
{
  uint64_t v3 = v2;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*((void *)_._rawValue + 2))
  {
    uint64_t v18 = 60LL;
    unint64_t v19 = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)(&v18);
    swift_bridgeObjectRelease();
    _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"dict", 4LL);
    uint64_t v18 = 2622LL;
    unint64_t v19 = 0xE200000000000000LL;
    specialized String.withUTF8<A>(_:)(&v18);
    swift_bridgeObjectRelease();
    uint64_t v4 = swift_bridgeObjectRetain();
    unint64_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4);
    swift_bridgeObjectRelease();
    uint64_t v18 = (uint64_t)v5;
    specialized MutableCollection<>.sort(by:)((void **)&v18);
    uint64_t v6 = (void *)v18;
    if (specialized Array._getCount()(v18))
    {
      if (!__OFADD__(indentation, 1LL))
      {
        char v15 = v6 + 4;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, 1LL, v6);
        uint64_t v7 = v6[4];
        unint64_t v8 = v6[5];
        uint64_t v9 = v6[7];
        unint64_t v10 = v15[4];
        char v11 = v3;
        uint64_t v12 = *((unsigned __int8 *)v15 + 40);
        int v13 = *((unsigned __int8 *)v15 + 16);
        outlined copy of _XMLPlistEncodingFormat.Reference(*v15, v15[1], *((_BYTE *)v15 + 16));
        outlined copy of _XMLPlistEncodingFormat.Reference(v9, v10, v12);
        _XMLPlistEncodingFormat.Writer.appendIndents(_:)(indentation + 1);
        uint64_t v16 = 60LL;
        unint64_t v17 = 0xE100000000000000LL;
        specialized String.withUTF8<A>(_:)(&v16);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"key", 3LL);
        uint64_t v16 = 62LL;
        unint64_t v17 = 0xE100000000000000LL;
        specialized String.withUTF8<A>(_:)(&v16);
        swift_bridgeObjectRelease();
        if (!v13)
        {
          uint64_t v16 = v7;
          unint64_t v17 = v8;
          swift_bridgeObjectRetain_n();
          specialized String.withUTF8<A>(_:)(&v16, v11);
          swift_bridgeObjectRelease();
          outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, 0);
          uint64_t v16 = 12092LL;
          unint64_t v17 = 0xE200000000000000LL;
          specialized String.withUTF8<A>(_:)(&v16);
          swift_bridgeObjectRelease();
          _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"key", 3LL);
          uint64_t v16 = 2622LL;
          unint64_t v17 = 0xE200000000000000LL;
          specialized String.withUTF8<A>(_:)(&v16);
          swift_bridgeObjectRelease();
          _XMLPlistEncodingFormat.Writer.appendIndents(_:)(indentation + 1);
          __asm { BR              X8 }
        }

        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x18334D850LL);
      }

      __break(1u);
      JUMPOUT(0x18334D7CCLL);
    }

    swift_release();
    _XMLPlistEncodingFormat.Writer.appendIndents(_:)(indentation);
    _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_dict);
  }

  else
  {
    _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(Foundation_XMLPlistTag_dict);
  }

void _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  v4[0] = v5;
  v4[3] = v4;
  v4[4] = v5;
  if (a3 >= 8) {
    uint64_t v3 = 8LL;
  }
  else {
    uint64_t v3 = a3;
  }
  void v4[5] = v3;
  v4[7] = v5;
  v4[8] = 80LL;
  __asm { BR              X10 }

void sub_18334D9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5)
{
  uint64_t v8 = v5;
  __int16 v9 = v7;
  char v10 = BYTE2(v7);
  char v11 = BYTE3(v7);
  char v12 = BYTE4(v7);
  char v13 = BYTE5(v7);
  closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)( &v8,  BYTE6(v7),  (uint64_t)&v14,  (uint64_t)v15,  a5,  v6,  (uint64_t)v15);
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendDate(_:)(Foundation::Date a1)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  double v2 = *v1;
  if (one-time initialization token for cache != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v3 = static CalendarCache.cache + 16;
  uint64_t v4 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in CalendarCache.fixed(_:)(v3, 7LL, v49);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  __int128 v39 = v49[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v5 = static TimeZoneCache.cache + 16;
  uint64_t v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v5, 0LL, v49);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  if (!*(void *)&v49[0])
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  Calendar.timeZone.setter((uint64_t *)v49);
  __int128 v35 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v7 = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = 0LL;
  uint64_t v9 = v7 + 56;
  do
  {
    Swift::UInt v10 = outlined read-only object #0 of _XMLPlistEncodingFormat.Writer.appendDate(_:)[v8 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v10);
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v13 = v11 & ~v12;
    unint64_t v14 = v13 >> 6;
    uint64_t v15 = *(void *)(v9 + 8 * (v13 >> 6));
    uint64_t v16 = 1LL << v13;
    uint64_t v17 = *(void *)(v7 + 48);
    if (((1LL << v13) & v15) != 0)
    {
      uint64_t v18 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v18;
        unint64_t v14 = v13 >> 6;
        uint64_t v15 = *(void *)(v9 + 8 * (v13 >> 6));
        uint64_t v16 = 1LL << v13;
        if ((v15 & (1LL << v13)) == 0) {
          break;
        }
      }
    }

    *(void *)(v9 + 8 * v14) = v16 | v15;
    *(_BYTE *)(v17 + v13) = v10;
    uint64_t v19 = *(void *)(v7 + 16);
    BOOL v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
      goto LABEL_23;
    }

    *(void *)(v7 + 16) = v21;
LABEL_6:
    ++v8;
  }

  while (v8 != 7);
  __int128 v45 = v35;
  swift_unknownObjectRetain();
  uint64_t v22 = swift_retain();
  Calendar.ComponentSet.init(_:)(v22, &v43);
  double v23 = 1.59271755e13;
  if (v2 <= 1.59271755e13) {
    double v23 = v2;
  }
  *(void *)&__int128 v42 = fmax(v23, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v43, (double *)&v42, v49);
  swift_unknownObjectRelease();
  swift_release();
  unint64_t v24 = static TimeZoneCache.cache + 16;
  char v25 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v25);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v24, 0LL, &v45);
  os_unfair_lock_unlock(v25);
  swift_release_n();
  uint64_t v26 = v45;
  if (!(void)v45) {
    goto LABEL_25;
  }
  uint64_t v27 = *((void *)&v45 + 1);
  uint64_t v28 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  swift_retain_n();
  os_unfair_lock_lock(v28 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v28[4], 0LL, &v45);
  os_unfair_lock_unlock(v28 + 36);
  swift_release_n();
  if (!(void)v45) {
    goto LABEL_26;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v43 = v26;
  uint64_t v44 = v27;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  uint64_t v30 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleUnlocalized,  (uint64_t)&protocol conformance descriptor for _LocaleUnlocalized);
  *(void *)&__int128 v42 = inited;
  *((void *)&v42 + 1) = v30;
  uint64_t v40 = 0LL;
  char v41 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (uint64_t)&v38,  &v43,  &v42,  2LL,  0,  4LL,  0,  (uint64_t)&v40);
  LODWORD(v45) = 0x10000;
  BYTE4(v45) = 1;
  *((void *)&v45 + 1) = 0LL;
  uint64_t v46 = v31;
  uint64_t v47 = v26;
  uint64_t v48 = v27;
  char v37 = 0;
  MEMORY[0x1895F8858](v31);
  closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( (uint64_t)&v34,  129LL,  (uint64_t)&v45,  (uint64_t)v49,  &v37,  0LL,  0,  v36);
  uint64_t v32 = v36[0];
  uint64_t v33 = v36[1];
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v43 = v32;
  uint64_t v44 = v33;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)(&v43);
  swift_bridgeObjectRelease();
  outlined release of DateComponents((uint64_t)v49);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(Foundation::XMLPlistTag a1)
{
  uint64_t v6 = 60LL;
  unint64_t v7 = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
  unint64_t v2 = XMLPlistTag.tagName.getter(a1);
  _XMLPlistEncodingFormat.Writer.append(_:)(v2, v3, v4, v5);
  uint64_t v6 = 671279LL;
  unint64_t v7 = 0xE300000000000000LL;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
}

void closure #1 in _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(char *__src, uint64_t a2, void *a3)
{
  if (__src)
  {
    if (a2 < 1) {
      return;
    }
    char v4 = __src;
    unint64_t v5 = &__src[a2];
    while (1)
    {
      uint64_t v6 = v5 - v4;
      if (v5 == v4)
      {
        uint64_t v15 = v5;
        if (v6 < 1) {
          return;
        }
        goto LABEL_27;
      }

      unsigned int v7 = *v4;
      BOOL v8 = v7 > 0x3E;
      uint64_t v9 = (1LL << v7) & 0x5000004000000000LL;
      if (v8 || v9 == 0) {
        break;
      }
      uint64_t v11 = 0LL;
LABEL_10:
      _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)v4, v11);
      _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(v4[v11]);
      if (__OFADD__(v11, 1LL))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }

      v4 += v11 + 1;
      if (v4 >= v5) {
        return;
      }
    }

    if (v6 == 1)
    {
      uint64_t v15 = v4;
    }

    else
    {
      uint64_t v11 = 1LL;
      while (1)
      {
        unsigned int v12 = v4[v11];
        BOOL v8 = v12 > 0x3E;
        uint64_t v13 = (1LL << v12) & 0x5000004000000000LL;
        if (!v8 && v13 != 0) {
          break;
        }
        if (v6 == ++v11) {
          goto LABEL_24;
        }
      }

      if ((v11 & 0x8000000000000000LL) == 0) {
        goto LABEL_10;
      }
      __break(1u);
LABEL_24:
      uint64_t v15 = v4;
      if (v6 < 1) {
        return;
      }
LABEL_27:
      if ((unint64_t)v6 >> 13)
      {
        goto LABEL_37;
      }
    }

    uint64_t v16 = a3[2];
    uint64_t v17 = 0x2000 - v16;
    if (__OFSUB__(0x2000LL, v16)) {
      goto LABEL_45;
    }
    if (v17 >= v6) {
      uint64_t v18 = v5 - v4;
    }
    else {
      uint64_t v18 = 0x2000 - v16;
    }
    if (v17 >= v6)
    {
      if (!*a3) {
        goto LABEL_48;
      }
      memmove((void *)(*a3 + v16), v15, v5 - v4);
      if (!__OFADD__(v16, v18))
      {
        a3[2] = v16 + v18;
        return;
      }

      goto LABEL_46;
    }

    if (v16 <= 0) {
      goto LABEL_38;
    }
LABEL_37:
    Data._Representation.append(contentsOf:)();
    a3[2] = 0LL;
LABEL_38:
    if (v5 != v4) {
      Data._Representation.append(contentsOf:)();
    }
    return;
  }

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(Swift::UInt8 a1)
{
  switch(a1)
  {
    case '&':
      uint64_t v1 = 0x3B706D6126LL;
      unint64_t v2 = 0xE500000000000000LL;
LABEL_8:
      uint64_t v8 = v1;
      unint64_t v9 = v2;
      specialized String.withUTF8<A>(_:)(&v8);
      swift_bridgeObjectRelease();
      return;
    case '>':
      uint64_t v1 = 997484326LL;
LABEL_7:
      unint64_t v2 = 0xE400000000000000LL;
      goto LABEL_8;
    case '<':
      uint64_t v1 = 997485606LL;
      goto LABEL_7;
  }

  _StringGuts.grow(_:)(48LL);
  swift_bridgeObjectRelease();
  uint64_t v8 = 0xD00000000000002DLL;
  unint64_t v9 = 0x80000001839D12B0LL;
  unsigned int v4 = (((a1 & 0x3F) << 8) | (a1 >> 6)) + 33217;
  if ((a1 & 0x80) == 0) {
    unsigned int v4 = (a1 + 1);
  }
  uint64_t v7 = (v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v4) >> 3)) & 7)));
  v5._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](&v7);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 39LL;
  v6._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void one-time initialization function for dataEncodeTable()
{
  static _XMLPlistEncodingFormat.Writer.dataEncodeTable = &outlined read-only object #0 of one-time initialization function for dataEncodeTable;
}

void closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)( _BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, uint64_t a7)
{
  if (a2 < 1)
  {
    LOBYTE(v7) = 0;
LABEL_27:
    if (a2 % 3 != 1)
    {
      if (!(a2 % 3))
      {
        uint64_t v32 = *(_BYTE **)a3;
        goto LABEL_37;
      }

      uint64_t v11 = *(_BYTE **)a3;
      if (one-time initialization token for dataEncodeTable != -1) {
        goto LABEL_54;
      }
      goto LABEL_34;
    }

    uint64_t v11 = *(_BYTE **)a3;
    if (one-time initialization token for dataEncodeTable != -1) {
      goto LABEL_52;
    }
    goto LABEL_31;
  }

  unint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  unsigned int v12 = &a1[a2];
  uint64_t v13 = 8 * a5;
  unint64_t v14 = (void *)&unk_18C5C6000;
  uint64_t v15 = (void *)&unk_18C5D1000;
  unint64_t v16 = (unint64_t)(a5 - 0x1000000000000000LL) >> 61;
  unint64_t v44 = v16;
  while (!__OFADD__(v10, 1LL))
  {
    unint64_t v7 = a1[v10];
    if (v10 == 3 * (v10 / 3))
    {
      uint64_t v17 = *(_BYTE **)a3;
      if (v14[347] != -1LL)
      {
        unint64_t v48 = a1[v10];
        char v41 = a1;
        uint64_t v11 = (_BYTE *)a5;
        unint64_t v30 = v16;
        swift_once();
        unint64_t v16 = v30;
        uint64_t v15 = (void *)&unk_18C5D1000;
        unint64_t v14 = (void *)&unk_18C5C6000;
        a1 = v41;
        unint64_t v7 = v48;
        a5 = (Swift::Int)v11;
      }

      uint64_t v18 = v15[45];
      unint64_t v19 = v7 >> 2;
      if (*(void *)(v18 + 16) <= v7 >> 2) {
        goto LABEL_47;
      }
LABEL_15:
      BOOL v20 = (_BYTE *)(v18 + v19 + 32);
      uint64_t v21 = 1LL;
      goto LABEL_21;
    }

    if (v10 % 3 == 1)
    {
      uint64_t v17 = *(_BYTE **)a3;
      if (v14[347] != -1LL)
      {
        unint64_t v47 = a1[v10];
        Swift::Int v38 = a5;
        uint64_t v40 = a1;
        unint64_t v29 = v16;
        swift_once();
        unint64_t v16 = v29;
        uint64_t v15 = (void *)&unk_18C5D1000;
        unint64_t v14 = (void *)&unk_18C5C6000;
        a5 = v38;
        a1 = v40;
        unint64_t v7 = v47;
      }

      uint64_t v18 = v15[45];
      unint64_t v19 = ((unint64_t)(v7 | ((_DWORD)v11 << 8)) >> 4) & 0x3F;
      if (v19 >= *(void *)(v18 + 16)) {
        goto LABEL_46;
      }
      goto LABEL_15;
    }

    uint64_t v22 = *(_BYTE **)a3;
    if (v14[347] != -1LL)
    {
      unint64_t v49 = a1[v10];
      Swift::Int v39 = a5;
      __int128 v42 = a1;
      unint64_t v31 = v16;
      swift_once();
      unint64_t v16 = v31;
      uint64_t v15 = (void *)&unk_18C5D1000;
      unint64_t v14 = (void *)&unk_18C5C6000;
      a5 = v39;
      a1 = v42;
      unint64_t v7 = v49;
    }

    uint64_t v23 = v15[45];
    unint64_t v24 = ((unint64_t)(v7 | ((_DWORD)v11 << 8)) >> 6) & 0x3F;
    unint64_t v25 = *(void *)(v23 + 16);
    if (v24 >= v25) {
      goto LABEL_48;
    }
    uint64_t v26 = v23 + 32;
    *uint64_t v22 = *(_BYTE *)(v26 + v24);
    if ((v7 & 0x3F) >= v25) {
      goto LABEL_49;
    }
    uint64_t v17 = (_BYTE *)(*(void *)a3 + 1LL);
    BOOL v20 = (_BYTE *)(v26 + (v7 & 0x3F));
    uint64_t v21 = 2LL;
LABEL_21:
    *uint64_t v17 = *v20;
    uint64_t v27 = (_BYTE *)(*(void *)a3 + v21);
    *(void *)a3 = v27;
    if (v16 < 7) {
      goto LABEL_43;
    }
    if (__OFADD__(&v27[-a4], v13)) {
      goto LABEL_44;
    }
    if ((uint64_t)&v27[v13 - a4] >= 76)
    {
      uint64_t v46 = (_BYTE *)v7;
      unint64_t v7 = (unint64_t)a1;
      *uint64_t v27 = 10;
      uint64_t v28 = *(void *)a3 - a4 + 1;
      uint64_t v11 = (_BYTE *)a5;
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a5);
      if (v28 < 0) {
        goto LABEL_45;
      }
      _XMLPlistEncodingFormat.Writer.append(_:)(a7, v28);
      *(void *)a3 = a4;
      a5 = (Swift::Int)v11;
      a1 = (_BYTE *)v7;
      unint64_t v7 = (unint64_t)v46;
      unint64_t v14 = &unk_18C5C6000;
      uint64_t v15 = &unk_18C5D1000;
      unint64_t v16 = v44;
    }

    ++v10;
    uint64_t v11 = (_BYTE *)v7;
    if (&a1[v10] >= v12) {
      goto LABEL_27;
    }
  }

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    Swift::Int v36 = a5;
    swift_once();
    a5 = v36;
LABEL_31:
    unint64_t v33 = 16 * (v7 & 3);
    if (v33 < *((void *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + 2))
    {
      *uint64_t v11 = *((_BYTE *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + v33 + 32);
      *(_BYTE *)(*(void *)a3 + 1LL) = 61;
      *(_BYTE *)(*(void *)a3 + 2LL) = 61;
      uint64_t v32 = (_BYTE *)(*(void *)a3 + 3LL);
LABEL_36:
      *(void *)a3 = v32;
LABEL_37:
      uint64_t v11 = &v32[-a4];
      *uint64_t v32 = 10;
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a5);
      uint64_t v35 = (uint64_t)(v11 + 1);
      if (__OFADD__(v11, 1LL)) {
        continue;
      }
      if ((v35 & 0x8000000000000000LL) == 0)
      {
        _XMLPlistEncodingFormat.Writer.append(_:)(a7, v35);
        return;
      }

      goto LABEL_51;
    }

    break;
  }

  __break(1u);
LABEL_54:
  Swift::Int v37 = a5;
  swift_once();
  a5 = v37;
LABEL_34:
  unint64_t v34 = 4 * (v7 & 0xF);
  if (v34 < *((void *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + 2))
  {
    *uint64_t v11 = *((_BYTE *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + v34 + 32);
    *(_BYTE *)(*(void *)a3 + 1LL) = 61;
    uint64_t v32 = (_BYTE *)(*(void *)a3 + 2LL);
    goto LABEL_36;
  }

  __break(1u);
}

Swift::Int _XMLPlistEncodingFormat.Reference.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v3)
  {
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, 0);
    return Hasher._finalize()();
  }

  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _XMLPlistEncodingFormat.Reference()
{
  if (*(_BYTE *)(v0 + 16))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t v3 = v0;
    uint64_t v1 = *(void *)v0;
    unint64_t v2 = *(void *)(v3 + 8);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    return outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, 0);
  }

  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _XMLPlistEncodingFormat.Reference()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v3)
  {
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, 0);
    return Hasher._finalize()();
  }

  return result;
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.<= infix(_:_:));
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.>= infix(_:_:));
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int8 *)(a2 + 16));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference( uint64_t *a1, uint64_t *a2)
{
  if (*((_BYTE *)a2 + 16) || *((_BYTE *)a1 + 16))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t v2 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    if (v4 == v2 && v5 == v3) {
      return 0LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)( uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1);
}

char *specialized ContiguousArray.replaceSubrange<A>(_:with:)( uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v7 = *v5;
  int64_t v8 = *(void *)(*v5 + 16);
  if (v8 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v11 = 1 - v10;
  if (__OFSUB__(1LL, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v5 = v7;
  if (!isUniquelyReferenced_nonNull_native || v12 > *(void *)(v7 + 24) >> 1)
  {
    if (v8 <= v12) {
      int64_t v16 = v8 + v11;
    }
    else {
      int64_t v16 = v8;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v16,  1);
    uint64_t v7 = *v5;
  }

  uint64_t v17 = v7 + 32 + 24 * a1;
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)(v7 + 16);
  BOOL v20 = __OFSUB__(v19, a2);
  uint64_t v21 = v19 - a2;
  if (v20) {
    goto LABEL_26;
  }
  if ((v21 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = (char *)(v17 + 24);
    uint64_t v22 = (char *)(v7 + 32 + 24 * a2);
    size_t v23 = 24 * v21;
    uint64_t v24 = *(void *)(v7 + 16);
    BOOL v20 = __OFADD__(v24, v11);
    uint64_t v25 = v24 + v11;
    if (!v20)
    {
      *(void *)(v7 + 16) = v25;
LABEL_20:
      *(void *)uint64_t v17 = a3;
      *(void *)(v17 + 8) = a4;
      *(_BYTE *)(v17 + 16) = a5;
      *uint64_t v5 = v7;
      return result;
    }

    goto LABEL_27;
  }

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (__OFADD__(v6, v9))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v6 + v9 > *(void *)(v5 + 24) >> 1)
  {
    MEMORY[0x186E1C444]();
    uint64_t v5 = *v3;
  }

  int64_t v12 = (void *)(v5 + 32 + 8 * a1);
  type metadata accessor for _BPlistEncodingFormat.Reference();
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(v5 + 16);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_23;
  }
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    int64_t v16 = (char *)(v12 + 1);
    uint64_t v17 = (char *)(v5 + 32 + 8 * a2);
    if (v12 + 1 != (void *)v17 || v16 >= &v17[8 * v15]) {
      memmove(v16, v17, 8 * v15);
    }
    uint64_t v18 = *(void *)(v5 + 16);
    BOOL v14 = __OFADD__(v18, v9);
    uint64_t v19 = v18 + v9;
    if (!v14)
    {
      *(void *)(v5 + 16) = v19;
LABEL_17:
      *int64_t v12 = a3;
      return specialized ContiguousArray._endMutation()();
    }

    goto LABEL_24;
  }

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)( uint64_t a1, int64_t a2, uint64_t a3, unsigned int a4)
{
  if (a1 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v6 = *v4;
  int64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v11 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  int64_t v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = v6;
  if (!(_DWORD)result || v12 > *(void *)(v6 + 24) >> 1)
  {
    if (v7 <= v12) {
      int64_t v15 = v7 + v11;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v15, 1);
    uint64_t v6 = *v4;
  }

  uint64_t v16 = v6 + 32;
  uint64_t v17 = (char *)(v6 + 32 + a1);
  uint64_t v18 = &v17[a3];
  if (!v11)
  {
LABEL_20:
    if (a3 < 1)
    {
LABEL_34:
      *uint64_t v4 = v6;
      return result;
    }

    unint64_t v25 = a3 + a1 + v6 + 32;
    if (v25 <= v6 + a1 + 33) {
      unint64_t v25 = v6 + a1 + 33;
    }
    unint64_t v26 = v25 - (v6 + a1) - 33;
    if (v26 >= a3) {
      unint64_t v26 = a3;
    }
    unint64_t v27 = v26 + 1;
    if (v27 > 0x20)
    {
      uint64_t v29 = v27 & 0x1F;
      if ((v27 & 0x1F) == 0) {
        uint64_t v29 = 32LL;
      }
      unint64_t v28 = v27 - v29;
      v17 += v28;
      int8x16_t v30 = vdupq_n_s8(a4);
      unint64_t v31 = (int8x16_t *)(a1 + v6 + 48);
      unint64_t v32 = v28;
      do
      {
        v31[-1] = v30;
        *unint64_t v31 = v30;
        v31 += 2;
        v32 -= 32LL;
      }

      while (v32);
    }

    else
    {
      unint64_t v28 = 0LL;
    }

    unint64_t v33 = a3 - v28;
    while (v33)
    {
      *v17++ = a4;
      --v33;
      if (v17 >= v18) {
        goto LABEL_34;
      }
    }

    __break(1u);
    goto LABEL_36;
  }

  uint64_t v19 = *(void *)(v6 + 16);
  size_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  if ((v20 & 0x8000000000000000LL) == 0)
  {
    uint64_t v21 = (char *)(v16 + a2);
    uint64_t v22 = *(void *)(v6 + 16);
    BOOL v23 = __OFADD__(v22, v11);
    uint64_t v24 = v22 + v11;
    if (v23) {
      goto LABEL_42;
    }
    *(void *)(v6 + 16) = v24;
    goto LABEL_20;
  }

uint64_t outlined consume of _XMLPlistEncodingFormat.Reference?(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of _XMLPlistEncodingFormat.Reference(result, a2, a3);
  }
  return result;
}

uint64_t sub_18334FD84()
{
  return swift_deallocObject();
}

uint64_t sub_18334FDB4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v51 = a6;
  v52[3] = &type metadata for _CodingKey;
  unint64_t v48 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v52[4] = v48;
  uint64_t v17 = swift_allocObject();
  v52[0] = v17;
  *(void *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  *(void *)(v17 + 32) = a4;
  *(_BYTE *)(v17 + 40) = a5;
  *(void *)(a10 + 128) = a1;
  swift_retain();
  swift_retain();
  _CodingKey.stringValue.getter(a2, a3, a4, a5);
  *(void *)(a10 + 136) = a7;
  *(void *)(a10 + 144) = a8;
  *(void *)(a10 + 152) = a9 | 0x8000000000000000LL;
  *(void *)(a10 + 160) = v18;
  *(void *)(a10 + 168) = v19;
  swift_release();
  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v50 = v20;
  uint64_t v21 = __swift_project_boxed_opaque_existential_1(v52, (uint64_t)&type metadata for _CodingKey);
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  MEMORY[0x1895F8858](v22);
  unint64_t v25 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  initializeWithCopy for _CodingKey((uint64_t)v25, (uint64_t)v21);
  uint64_t v26 = storeEnumTagSinglePayload for _CodingKey((uint64_t)v25, 0, 1u);
  MEMORY[0x1895F8858](v26);
  unint64_t v28 = (char *)&v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v30 = MEMORY[0x1895F8858](v29);
  (*(void (**)(char *, char *, uint64_t, __n128))(v23 + 16))(v25, v25, v22, v30);
  if (getEnumTagSinglePayload for _CodingKey((uint64_t)v25, 1u) == 1)
  {
    unint64_t v31 = *(void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v32 = v50;
    swift_bridgeObjectRetain();
    v31(v25, v22);
    v31(v25, v22);
    unint64_t v33 = v51;
    swift_retain();
    swift_release();
    unint64_t v34 = v33 >> 62;
    uint64_t v35 = (uint64_t *)v33;
    uint64_t v36 = v32;
    if (v33 >> 62)
    {
LABEL_3:
      if ((_DWORD)v34 != 1)
      {
        uint64_t v42 = 0LL;
LABEL_14:
        uint64_t v46 = v49;
        *(void *)(a10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFE8];
        *(void *)(a10 + 24) = v46;
        *(void *)(a10 + 32) = v36;
        *(void *)(a10 + 40) = v35;
        *(void *)(a10 + 56) = 0LL;
        *(void *)(a10 + 64) = 0LL;
        *(void *)(a10 + 48) = v42;
        *(_BYTE *)(a10 + 72) = 8;
        *(_OWORD *)(a10 + 80) = xmmword_18372C2E0;
        *(_BYTE *)(a10 + 96) = 8;
        *(_OWORD *)(a10 + 104) = xmmword_18372C9F0;
        *(_BYTE *)(a10 + 120) = 8;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
        return a10;
      }

      Swift::Int v37 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v42 = *v37;
      swift_release();
      goto LABEL_14;
    }

uint64_t specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v52 = a3;
  *(void *)&__int128 v54 = a6;
  *((void *)&v54 + 1) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(boxed_opaque_existential_1, a2, a6);
  uint64_t v13 = *a4;
  uint64_t v14 = a4[1];
  uint64_t v15 = *((unsigned __int8 *)a4 + 16);
  *(void *)(a5 + 128) = a1;
  swift_retain();
  swift_retain();
  uint64_t v16 = dispatch thunk of CodingKey.stringValue.getter();
  *(void *)(a5 + 136) = v13;
  *(void *)(a5 + 144) = v14;
  *(void *)(a5 + 152) = v15 | 0x8000000000000000LL;
  *(void *)(a5 + 160) = v16;
  *(void *)(a5 + 168) = v17;
  swift_release();
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v50 = a1;
  uint64_t v51 = *(void *)(a1 + 32);
  __int128 v48 = v54;
  uint64_t v18 = v54;
  uint64_t v19 = __swift_project_boxed_opaque_existential_1(v53, v54);
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  __n128 v23 = MEMORY[0x1895F8858](v20);
  unint64_t v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v25 = *(void *)(v18 - 8);
  (*(void (**)(char *, void *, uint64_t, __n128))(v25 + 16))((char *)&v48 - v24, v19, v18, v23);
  uint64_t v26 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v25 + 56))((char *)&v48 - v24, 0LL, 1LL, v18);
  MEMORY[0x1895F8858](v26);
  unint64_t v28 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v30 = MEMORY[0x1895F8858](v29);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))((char *)&v48 - v24, (char *)&v48 - v24, v20, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))((char *)&v48 - v24, 1LL, v18) == 1)
  {
    unint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v32 = v51;
    swift_bridgeObjectRetain();
    v31((char *)&v48 - v24, v20);
    v31((char *)&v48 - v24, v20);
    unint64_t v33 = v52;
    swift_retain();
    swift_release();
    unint64_t v34 = v33 >> 62;
    uint64_t v35 = v33;
    uint64_t v36 = v32;
    if (v33 >> 62)
    {
LABEL_3:
      if ((_DWORD)v34 != 1)
      {
        uint64_t v43 = 0LL;
LABEL_14:
        uint64_t v47 = v49;
        *(void *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFE8];
        *(void *)(a5 + 24) = v47;
        *(void *)(a5 + 32) = v36;
        *(void *)(a5 + 40) = v35;
        *(void *)(a5 + 56) = 0LL;
        *(void *)(a5 + 64) = 0LL;
        *(void *)(a5 + 48) = v43;
        *(_BYTE *)(a5 + 72) = 8;
        *(_OWORD *)(a5 + 80) = xmmword_18372C2E0;
        *(_BYTE *)(a5 + 96) = 8;
        *(_OWORD *)(a5 + 104) = xmmword_18372C9F0;
        *(_BYTE *)(a5 + 120) = 8;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
        return a5;
      }

      Swift::Int v37 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v43 = *v37;
      swift_release();
      goto LABEL_14;
    }

uint64_t specialized static _XMLPlistEncodingFormat.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a2 + 16))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    return 1LL;
  }

  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  return result;
}

uint64_t specialized static _XMLPlistEncodingFormat.Reference.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a2 + 16))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    return 0LL;
  }

  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistUnkeyedEncodingContainerXML, &unk_189C8B350);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML);
  }

  return result;
}

uint64_t sub_183350670()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for _PlistKeyedEncodingContainerXML( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _PlistKeyedEncodingContainerXML);
}

uint64_t specialized _XMLPlistEncodingFormat.Writer.realDescription(_:)(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000LL)
  {
    if (a1 <= 0.0) {
      return 0x74696E69666E692DLL;
    }
    else {
      return 0x74696E69666E692BLL;
    }
  }

  else
  {
    uint64_t v1 = Double.description.getter();
    swift_bridgeObjectRetain();
    v2._uint64_t countAndFlagsBits = 12334LL;
    v2._id object = (void *)0xE200000000000000LL;
    Swift::Bool v3 = String.hasSuffix(_:)(v2);
    swift_bridgeObjectRelease();
    if (v3) {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
    }
  }

  return v1;
}

void partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)( _BYTE *a1, uint64_t a2)
{
}

{
  uint64_t *v2;
  closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)( a1,  a2,  v2[2],  v2[3],  v2[4],  v2[5],  v2[6]);
}

uint64_t outlined release of Date.ISO8601FormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _PlistKeyedEncodingContainerXML(uint64_t a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  char v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  char v7 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

void *type metadata accessor for _PlistUnkeyedEncodingContainerXML()
{
  return &unk_189C8B350;
}

uint64_t destroy for _XMLPlistEncodingFormat.Writer(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t initializeWithCopy for _XMLPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 32);
  outlined copy of Data._Representation(v3, v4);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  return a1;
}

void *assignWithCopy for _XMLPlistEncodingFormat.Writer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v3 = a2[3];
  unint64_t v4 = a2[4];
  outlined copy of Data._Representation(v3, v4);
  uint64_t v5 = a1[3];
  unint64_t v6 = a1[4];
  a1[3] = v3;
  a1[4] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for _XMLPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  outlined consume of Data._Representation(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for _XMLPlistEncodingFormat.Writer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _XMLPlistEncodingFormat.Writer( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2)
    {
      *(void *)(result + 24) = 0LL;
      *(void *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _XMLPlistEncodingFormat.Writer()
{
  return &type metadata for _XMLPlistEncodingFormat.Writer;
}

uint64_t destroy for _XMLPlistEncodingFormat.Reference(uint64_t a1)
{
  return outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  outlined consume of _XMLPlistEncodingFormat.Reference(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  outlined consume of _XMLPlistEncodingFormat.Reference(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _XMLPlistEncodingFormat.Reference(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF8 && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 248);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 8) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _XMLPlistEncodingFormat.Reference( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    *(void *)unint64_t result = a2 - 248;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xF8) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF8) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for _XMLPlistEncodingFormat.Reference(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 8);
  }
}

uint64_t destructiveInjectEnumTag for _XMLPlistEncodingFormat.Reference(uint64_t result, unsigned int a2)
{
  if (a2 >= 8)
  {
    *(void *)unint64_t result = a2 - 8;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 8;
  }

  *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _XMLPlistEncodingFormat.Reference()
{
  return &type metadata for _XMLPlistEncodingFormat.Reference;
}

uint64_t TimeZone.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (NSTimeZone)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 120))(ObjectType, v1);
}

id static TimeZone._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    Swift::String v2 = result;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      unint64_t result = (id)swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _TimeZoneBridged();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
      uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
      unint64_t result = v2;
    }

    *a2 = v5;
    a2[1] = v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

double static TimeZone.gmt.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v2 = static TimeZoneCache.cache + 16;
  unsigned int v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v2, 0LL, &v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  double result = *(double *)&v5;
  if ((void)v5) {
    *a1 = v5;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t TimeZone.init(identifier:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.fixed(_:)(a1, a2, v9);
  os_unfair_lock_unlock(v6);
  uint64_t result = swift_release_n();
  uint64_t v8 = v9[1];
  if (!v9[0]) {
    uint64_t v8 = 0LL;
  }
  *a3 = v9[0];
  a3[1] = v8;
  return result;
}

double static TimeZone.default.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  unsigned int v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.default.getter(v2, (uint64_t *)&v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

Swift::Int __swiftcall TimeZone.secondsFromGMT(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 40))(&v7, ObjectType, v4);
}

Swift::String_optional __swiftcall TimeZone.abbreviation(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = v3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 56))(&v9, ObjectType, v4);
  result.value._id object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::Bool __swiftcall TimeZone.isDaylightSavingTime(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 64))(&v7, ObjectType, v4) & 1;
}

Swift::Double __swiftcall TimeZone.daylightSavingTimeOffset(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v3;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 72))(&v7, ObjectType, v4);
  return result;
}

Foundation::Date_optional __swiftcall TimeZone.nextDaylightSavingTimeTransition(after:)(Foundation::Date after)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = v3;
  char v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 80))(&v8, ObjectType, v4);
  result.Swift::Double value = *(Foundation::Date *)&v7;
  result.is_nil = v6;
  return result;
}

uint64_t TimeZone.localizedName(for:locale:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  v9[0] = v4;
  v9[1] = v5;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v6 + 88))(a1, v9, ObjectType, v6);
}

uint64_t static TimeZone.autoupdatingCurrent.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static TimeZoneCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v2, &v6);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v6;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  *a1 = v4;
  a1[1] = result;
  return result;
}

uint64_t static TimeZone.abbreviationDictionary.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

uint64_t static TimeZone.default.setter(__int128 *a1)
{
  __int128 v1 = *a1;
  __int128 v3 = *a1;
  if (one-time initialization token for cache != -1)
  {
    swift_once();
    __int128 v1 = v3;
  }

  uint64_t v5 = static TimeZoneCache.cache;
  *(_OWORD *)uint64_t v4 = v1;
  TimeZoneCache.setDefault(_:)(v4);
  return swift_unknownObjectRelease();
}

uint64_t TimeZone.nextDaylightSavingTimeTransition.getter()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  return (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 80))(&__tp, ObjectType, v1);
}

uint64_t TimeZone.init(secondsFromGMT:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v4 = static TimeZoneCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v4, a1, &v8);
  os_unfair_lock_unlock(v5);
  uint64_t result = swift_release_n();
  uint64_t v7 = *((void *)&v8 + 1);
  if (!(void)v8) {
    uint64_t v7 = 0LL;
  }
  *a2 = v8;
  a2[1] = v7;
  return result;
}

uint64_t TimeZone.init(abbreviation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized static TimeZone.identifierForAbbreviation(_:)(a1, a2);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = result;
  unint64_t v7 = v5;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  __int128 v8 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in TimeZoneCache.fixed(_:)(v6, v7, v11);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  uint64_t v9 = v11[0];
  uint64_t v10 = v11[1];
  uint64_t result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a3 = v9;
    a3[1] = v10;
  }

  else
  {
LABEL_6:
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  return result;
}

double static TimeZone.current.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  __int128 v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, (uint64_t *)&v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

uint64_t (*static TimeZone.default.modify(_OWORD *a1))(uint64_t *a1)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  __int128 v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.default.getter(v2, v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  *a1 = *(_OWORD *)v5;
  return static TimeZone.default.modify;
}

uint64_t static TimeZone.default.modify(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  TimeZoneCache.setDefault(_:)(v3);
  return swift_unknownObjectRelease();
}

uint64_t static TimeZone.abbreviationDictionary.setter(uint64_t a1)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static TimeZoneCache.cache + 16;
  __int128 v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(v2, a1);
  os_unfair_lock_unlock(v3);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t (*static TimeZone.abbreviationDictionary.modify(void *a1))(uint64_t *a1, char a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static TimeZoneCache.cache + 16;
  __int128 v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v2, &v5);
  a1[1] = 0LL;
  os_unfair_lock_unlock(v3);
  swift_release_n();
  *a1 = v5;
  return static TimeZone.abbreviationDictionary.modify;
}

uint64_t static TimeZone.abbreviationDictionary.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = static TimeZoneCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v5);
    closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(v4, v3);
    os_unfair_lock_unlock(v5);
    swift_release_n();
    swift_bridgeObjectRelease();
  }

  else
  {
    os_unfair_lock_lock(v5);
    closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(v4, v3);
    os_unfair_lock_unlock(v5);
    swift_release_n();
  }

  return swift_bridgeObjectRelease();
}

void static TimeZone.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 31348LL;
  a1[1] = 0xE200000000000000LL;
}

void static TimeZone.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x656E6F7A656D6974LL;
  a1[1] = 0xE800000000000000LL;
}

uint64_t TimeZone.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 112))(a1, ObjectType, v3);
}

Swift::Int TimeZone.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeZone()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TimeZone(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 112))(a1, ObjectType, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeZone()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t TimeZone.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v27[1] = a1;
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  __int128 v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __darwin_time_t v10 = *v1;
  uint64_t v9 = v1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183729E10;
  *(_OWORD *)(v11 + 32) = xmmword_18372DCC0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 32);
  swift_unknownObjectRetain();
  uint64_t v14 = v13(ObjectType, v9);
  uint64_t v16 = v15;
  swift_unknownObjectRelease();
  *(void *)(v11 + 72) = MEMORY[0x189617FA8];
  *(void *)(v11 + 48) = v14;
  *(void *)(v11 + 56) = v16;
  *(_OWORD *)(v11 + 80) = xmmword_183824370;
  *(void *)(v11 + 120) = ObjectType;
  *(void *)(v11 + 96) = v10;
  *(_OWORD *)(v11 + 128) = xmmword_183824380;
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t v17 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v9 + 56))(&__tp, ObjectType, v9);
  uint64_t v19 = v18;
  *(void *)(v11 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v11 + 144) = v17;
  *(void *)(v11 + 152) = v19;
  *(_OWORD *)(v11 + 176) = xmmword_183824390;
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t v20 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v9 + 40))(&__tp, ObjectType, v9);
  uint64_t v21 = MEMORY[0x189618740];
  *(void *)(v11 + 192) = v20;
  *(void *)(v11 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
  *(void *)(v11 + 224) = 0xD000000000000014LL;
  *(void *)(v11 + 232) = 0x80000001839D1310LL;
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  char v22 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v9 + 64))(&__tp, ObjectType, v9);
  *(void *)(v11 + 264) = MEMORY[0x1896184C8];
  *(_BYTE *)(v11 + 240) = v22 & 1;
  __tp.tv_sec = v10;
  __tp.tv_nsec = v9;
  void v27[2] = v11;
  uint64_t v23 = *MEMORY[0x18961A718];
  uint64_t v24 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v8, v23, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v8, 0LL, 1LL, v24);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961A748], v2);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t TimeZone.debugDescription.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeZone.CodingKeys()
{
  if (*v0) {
    return 0x616470756F747561LL;
  }
  else {
    return 0x696669746E656469LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeZone.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized TimeZone.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeZone.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeZone.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void TimeZone.init(from:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TimeZone.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int128 v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v22[0]) = 1;
    if ((KeyedDecodingContainer.decodeIfPresent(_:forKey:)() & 1) != 0)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v19 = static TimeZoneCache.cache + 16;
      uint64_t v20 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
      swift_retain_n();
      os_unfair_lock_lock(v20);
      closure #1 in TimeZoneCache.autoupdatingCurrent()(v19, v22);
      os_unfair_lock_unlock(v20);
      swift_release_n();
      uint64_t v12 = v22[0];
      uint64_t v13 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
    }

    else
    {
      LOBYTE(v22[0]) = 0;
      uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
      unint64_t v23 = v10;
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      v21[1] = v21;
      uint64_t v11 = (os_unfair_lock_s *)static TimeZoneCache.cache;
      v21[0] = static TimeZoneCache.cache + 16;
      swift_retain_n();
      os_unfair_lock_lock(v11 + 36);
      closure #1 in TimeZoneCache.fixed(_:)(v9, v23, v22);
      os_unfair_lock_unlock(v11 + 36);
      swift_release_n();
      uint64_t v12 = v22[0];
      uint64_t v13 = v22[1];
      swift_bridgeObjectRelease();
      if (!v12)
      {
        uint64_t v14 = type metadata accessor for DecodingError();
        swift_allocError();
        unint64_t v23 = v15;
        uint64_t v17 = a1[3];
        uint64_t v16 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v17);
        MEMORY[0x186E1CF78](v17, v16);
        unint64_t v18 = v23;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(unint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v18,  *MEMORY[0x189619360],  v14);
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        goto LABEL_11;
      }
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }

uint64_t TimeZone.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TimeZone.CodingKeys>);
  uint64_t v15 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
  swift_unknownObjectRetain();
  v10(ObjectType, v8);
  swift_unknownObjectRelease();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v5);
    return swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 104))(ObjectType, v8);
    uint64_t v13 = v15;
    if ((v12 & 1) != 0)
    {
      char v16 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v7, v5);
  }

void protocol witness for Decodable.init(from:) in conformance TimeZone(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeZone(void *a1)
{
  return TimeZone.encode(to:)(a1);
}

id static TimeZone._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    id result = (id)swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
    uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    id result = a1;
  }

  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t static TimeZone._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
    uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    id v7 = a1;
  }

  *a2 = v5;
  a2[1] = v6;
  return 1LL;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance TimeZone()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 120))(ObjectType, v1);
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance TimeZone( void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    id result = (id)swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
    uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    id result = a1;
  }

  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance TimeZone( void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
    uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    id v7 = a1;
  }

  *a2 = v5;
  a2[1] = v6;
  return 1LL;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance TimeZone@<X0>( id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v2 = result;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      id result = (id)swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _TimeZoneBridged();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
      uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
      id result = v2;
    }

    *a2 = v5;
    a2[1] = v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t NSTimeZone._toCustomAnyHashable()()
{
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _TimeZoneBridged();
    *(void *)(swift_allocObject() + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v0;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    id v1 = v0;
  }

  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSTimeZone()
{
  id v1 = *v0;
  type metadata accessor for _NSSwiftTimeZone();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _TimeZoneBridged();
    *(void *)(swift_allocObject() + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    id v2 = v1;
  }

  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  AnyHashable.init<A>(_:)();
}

BOOL static TimeZone.DaylightSavingTimePolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TimeZone.DaylightSavingTimePolicy.hash(into:)()
{
}

Swift::Int TimeZone.DaylightSavingTimePolicy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized static TimeZone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (uint64_t (*)(uint64_t, void *))v2[13];
  if ((v5(ObjectType, v2) & 1) != 0)
  {
    uint64_t v6 = swift_getObjectType();
    id v7 = (uint64_t (*)(uint64_t, void *))v3[13];
    swift_unknownObjectRetain();
    char v8 = v7(v6, v3);
    swift_unknownObjectRelease();
    if ((v8 & 1) != 0) {
      return 1LL;
    }
  }

  if ((v5(ObjectType, v2) & 1) != 0) {
    return 0LL;
  }
  uint64_t v10 = swift_getObjectType();
  uint64_t v11 = (uint64_t (*)(uint64_t, void *))v3[13];
  swift_unknownObjectRetain();
  char v12 = v11(v10, v3);
  swift_unknownObjectRelease();
  if ((v12 & 1) != 0) {
    return 0LL;
  }
  uint64_t v13 = (uint64_t (*)(uint64_t, void *))v2[12];
  swift_unknownObjectRetain();
  uint64_t v14 = v13(ObjectType, v2);
  unint64_t v16 = v15;
  swift_unknownObjectRelease();
  if (v16 >> 60 == 15) {
    goto LABEL_10;
  }
  char v17 = (uint64_t (*)(uint64_t, void *))v3[12];
  swift_unknownObjectRetain();
  uint64_t v18 = v17(v10, v3);
  unint64_t v20 = v19;
  swift_unknownObjectRelease();
  if (v20 >> 60 == 15)
  {
    outlined consume of Data?(v14, v16);
LABEL_10:
    uint64_t v21 = (uint64_t (*)(uint64_t, void *))v2[4];
    swift_unknownObjectRetain();
    uint64_t v22 = v21(ObjectType, v2);
    uint64_t v24 = v23;
    swift_unknownObjectRelease();
    uint64_t v25 = (uint64_t (*)(uint64_t, void *))v3[4];
    swift_unknownObjectRetain();
    uint64_t v26 = v25(v10, v3);
    uint64_t v28 = v27;
    swift_unknownObjectRelease();
    if (v22 == v26 && v24 == v28)
    {
      swift_bridgeObjectRelease_n();
      return 1LL;
    }

    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v29 & 1;
  }

  uint64_t v41 = v18;
  uint64_t v42 = v14;
  __n128 v30 = (uint64_t (*)(uint64_t, void *))v2[4];
  swift_unknownObjectRetain();
  uint64_t v31 = v30(ObjectType, v2);
  uint64_t v33 = v32;
  swift_unknownObjectRelease();
  unint64_t v34 = (uint64_t (*)(uint64_t, void *))v3[4];
  swift_unknownObjectRetain();
  uint64_t v35 = v34(v10, v3);
  uint64_t v37 = v36;
  swift_unknownObjectRelease();
  if (v31 == v35 && v33 == v37)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v38 = v42;
LABEL_18:
    specialized static Data.== infix(_:_:)(v38, v16);
    char v29 = v40;
    outlined consume of Data?(v41, v20);
    outlined consume of Data?(v38, v16);
    return v29 & 1;
  }

  char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = v42;
  if ((v39 & 1) != 0) {
    goto LABEL_18;
  }
  outlined consume of Data?(v41, v20);
  outlined consume of Data?(v42, v16);
  return 0LL;
}

uint64_t specialized static TimeZone.identifierForAbbreviation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static TimeZoneCache.cache + 16;
  uint64_t v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v5, &v16);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v16;
  if (*(void *)(v16 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = specialized static TimeZone.tryParseGMTName(_:)();
    if ((v12 & 1) != 0)
    {
      return 0LL;
    }

    else
    {
      uint64_t v13 = specialized static TimeZone.nameForSecondsFromGMT(_:)(v11);
      if (v14) {
        return v13;
      }
      else {
        return 0LL;
      }
    }
  }

  return v10;
}

unint64_t lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone.CodingKeys, &unk_189C8BA20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone.CodingKeys, &unk_189C8BA20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone.CodingKeys, &unk_189C8BA20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone.CodingKeys, &unk_189C8BA20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for TimeZone(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  a1[2] = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  a1[3] = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  unint64_t result = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  a1[4] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy;
  if (!lazy protocol witness table cache variable for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for TimeZone.DaylightSavingTimePolicy,  &type metadata for TimeZone.DaylightSavingTimePolicy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy);
  }

  return result;
}

ValueMetadata *type metadata accessor for TimeZone()
{
  return &type metadata for TimeZone;
}

ValueMetadata *type metadata accessor for TimeZone.DaylightSavingTimePolicy()
{
  return &type metadata for TimeZone.DaylightSavingTimePolicy;
}

uint64_t storeEnumTagSinglePayload for TimeZone.DaylightSavingTimePolicy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18335335C + 4 * byte_1838243A5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183353390 + 4 * byte_1838243A0[v4]))();
}

uint64_t sub_183353390(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183353398(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1833533A0LL);
  }
  return result;
}

uint64_t sub_1833533AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1833533B4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1833533B8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833533C0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TimeZone.CodingKeys()
{
  return &unk_189C8BA20;
}

uint64_t specialized TimeZone.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x616470756F747561LL && a2 == 0xEC000000676E6974LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized _PlistDecodingStorage.topContainer.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    outlined init with copy of Any(a1 + 32 * v3, (uint64_t)v7);
    outlined init with copy of Any?((uint64_t)v7, (uint64_t)&v5);
    if (v6)
    {
      outlined init with take of Any(&v5, a2);
      return outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Any?);
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = outlined destroy of Any?((uint64_t)&v5, &demangling cache variable for type metadata for Any?);
  __break(1u);
  return result;
}

uint64_t specialized _PlistDecodingStorage.popContainer()()
{
  __int16 v1 = *(void **)v0;
  if (!*(void *)(*(void *)v0 + 16LL))
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    __int16 v1 = (void *)result;
    uint64_t v3 = *(void *)(result + 16);
    if (v3) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v3 = v1[2];
  if (v3)
  {
LABEL_4:
    uint64_t v4 = v3 - 1;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v1[4 * v3]);
    v1[2] = v4;
    *(void *)uint64_t v0 = v1;
    return result;
  }

uint64_t __PlistDictionaryDecoder.unbox<A>(_:as:)@<X0>( void *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 == &type metadata for Date)
  {
    uint64_t result = __PlistDictionaryDecoder.unbox(_:as:)(a1, (uint64_t)&v17);
    if (v5) {
      return result;
    }
    *(void *)&v21[0] = v17;
    BYTE8(v21[0]) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
LABEL_14:
    int v16 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))( a4,  v16 ^ 1u,  1LL,  a3);
  }

  if (a2 == &type metadata for Data)
  {
    uint64_t result = specialized __PlistDictionaryDecoder.unbox(_:as:)(a1);
    if (v5) {
      return result;
    }
    uint64_t v17 = result;
    uint64_t v18 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    goto LABEL_14;
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)&v17);
  outlined init with copy of Any((uint64_t)&v17, (uint64_t)v21);
  unint64_t v8 = (void *)(v4 + 16);
  char v9 = *(void **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9;
  uint64_t v22 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
    *unint64_t v8 = v9;
  }

  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
    *unint64_t v8 = v9;
  }

  void v9[2] = v12 + 1;
  outlined init with take of Any(v21, &v9[4 * v12 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  uint64_t v19 = type metadata accessor for __PlistDictionaryDecoder();
  uint64_t v20 = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder( &lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  uint64_t v17 = v4;
  swift_retain();
  uint64_t v13 = v22;
  dispatch thunk of Decodable.init(from:)();
  if (!v5) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))(v13, 0LL, 1LL, a3);
  }
  return specialized _PlistDecodingStorage.popContainer()();
}

uint64_t __PlistDictionaryDecoder.unbox<A>(_:as:configuration:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v7 = v6;
  uint64_t v25 = a3;
  uint64_t v28 = a6;
  uint64_t v31 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v24 - v12;
  outlined init with copy of Any(a1, (uint64_t)v29);
  outlined init with copy of Any((uint64_t)v29, (uint64_t)v30);
  uint64_t v15 = (void *)(v7 + 16);
  uint64_t v14 = *(void **)(v7 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14[2] + 1LL,  1,  v14);
    *uint64_t v15 = v14;
  }

  unint64_t v18 = v14[2];
  unint64_t v17 = v14[3];
  if (v18 >= v17 >> 1)
  {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v14);
    *uint64_t v15 = v14;
  }

  void v14[2] = v18 + 1;
  outlined init with take of Any(v30, &v14[4 * v18 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  v29[3] = type metadata accessor for __PlistDictionaryDecoder();
  v29[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder( &lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  v29[0] = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v25, AssociatedTypeWitness);
  uint64_t v19 = *(void (**)(void *, char *, uint64_t, uint64_t))(a5 + 16);
  swift_retain();
  uint64_t v20 = v27;
  uint64_t v21 = v28;
  uint64_t v22 = v31;
  v19(v29, v13, v31, a5);
  if (!v20) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v21, 0LL, 1LL, v22);
  }
  return specialized _PlistDecodingStorage.popContainer()();
}

void *__PlistDictionaryDecoder.init(referencing:at:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)MEMORY[0x18961AFE8];
  uint64_t v3[2] = MEMORY[0x18961AFE8];
  outlined init with copy of Any(a1, (uint64_t)v13);
  outlined init with copy of Any((uint64_t)v13, (uint64_t)v12);
  uint64_t v3[2] = v7;
  unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, 1LL, 1, v7);
  uint64_t v3[2] = v8;
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1)
  {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v10 + 1,  1,  v8);
    uint64_t v3[2] = v8;
  }

  _OWORD v8[2] = v10 + 1;
  outlined init with take of Any(v12, &v8[4 * v10 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_1(a1);
  v3[3] = a3;
  v3[4] = a2;
  return v3;
}

uint64_t __PlistDictionaryDecoder.topValueIsNull.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v0, v6);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  uint64_t v1 = v5[3];
  outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
  if (!v1) {
    return 1LL;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v6);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v5[0] == 0x6C6C756E24LL && v5[1] == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
      return 1LL;
    }

    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t __PlistDictionaryDecoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((__PlistDictionaryDecoder.topValueIsNull.getter() & 1) != 0)
  {
    uint64_t v6 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *unint64_t v8 = type metadata accessor for KeyedDecodingContainer();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v6 - 8) + 104LL))( v8,  *MEMORY[0x189619368],  v6);
  }

  else
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v9, &v18);
    swift_bridgeObjectRelease();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v12 = *(void *)(v3 + 32);
      *(void *)&__int128 v18 = v3;
      *((void *)&v18 + 1) = v17;
      uint64_t v19 = v12;
      uint64_t v13 = type metadata accessor for _PlistDictionaryKeyedDecodingContainer(0LL, a2, a3, v11);
      swift_retain();
      swift_bridgeObjectRetain();
      MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDictionaryKeyedDecodingContainer<A>, v13);
      return KeyedDecodingContainer.init<A>(_:)();
    }

    swift_bridgeObjectRetain();
    uint64_t v15 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v15, &v18);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v10, &v18, v16);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  }

  return swift_willThrow();
}

uint64_t __PlistDictionaryDecoder.unkeyedContainer()@<X0>(void *a1@<X8>)
{
  if ((__PlistDictionaryDecoder.topValueIsNull.getter() & 1) != 0)
  {
    uint64_t v3 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v3 - 8) + 104LL))( v5,  *MEMORY[0x189619368],  v3);
  }

  else
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v6, v14);
    swift_bridgeObjectRelease();
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v8 = *(void *)(v1 + 32);
      a1[3] = &unk_189C8BC58;
      a1[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer();
      uint64_t v9 = (void *)swift_allocObject();
      *a1 = v9;
      void v9[2] = v1;
      uint64_t v9[3] = v13;
      void v9[4] = v8;
      v9[5] = 0LL;
      swift_retain();
      return swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v11, v14);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v7, v14, v12);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }

  return swift_willThrow();
}

uint64_t __PlistDictionaryDecoder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistDictionaryDecoder()
{
  return objc_opt_self();
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance __PlistDictionaryDecoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance __PlistDictionaryDecoder( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __PlistDictionaryDecoder.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance __PlistDictionaryDecoder@<X0>( void *a1@<X8>)
{
  return __PlistDictionaryDecoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance __PlistDictionaryDecoder@<X0>( void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __PlistDictionaryDecoder();
  a1[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder( &lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance __PlistDictionaryDecoder@<X0>( ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return __PlistDictionaryDecoder.decode<A>(_:)(a1, a2, a3);
}

uint64_t __PlistDictionaryDecoder.decode<A>(_:)@<X0>( ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v20 - v8;
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v10, v21);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v20[0] == 0x6C6C756E24LL && v20[1] == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v12 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v14 = v13;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v14 = a1;
      *(void *)&v21[0] = 0LL;
      *((void *)&v21[0] + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease();
      *(void *)&v21[0] = 0x6465746365707845LL;
      *((void *)&v21[0] + 1) = 0xE900000000000020LL;
      v15._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._id object = (void *)0x80000001839D1390LL;
      v16._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v16);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(ValueMetadata **, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  *MEMORY[0x189619368],  v12);
      return swift_willThrow();
    }

    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0) {
      goto LABEL_6;
    }
  }

  uint64_t v18 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v18, v21);
  swift_bridgeObjectRelease();
  __PlistDictionaryDecoder.unbox<A>(_:as:)(v21, a1, a2, (uint64_t)v9);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if (!v3)
  {
    uint64_t v19 = *(void *)(a2 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1LL, a2);
    if ((_DWORD)result == 1) {
      __break(1u);
    }
    else {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a3, v9, a2);
    }
  }

  return result;
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:configuration:) in conformance __PlistDictionaryDecoder@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __PlistDictionaryDecoder.decode<A>(_:configuration:)(a1, a2, a3, a4, a5);
}

uint64_t __PlistDictionaryDecoder.decode<A>(_:configuration:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v14, v25);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v24[0] == 0x6C6C756E24LL && v24[1] == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v16 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v18 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t *v18 = a1;
      *(void *)&v25[0] = 0LL;
      *((void *)&v25[0] + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease();
      *(void *)&v25[0] = 0x6465746365707845LL;
      *((void *)&v25[0] + 1) = 0xE900000000000020LL;
      v19._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._id object = (void *)0x80000001839D1390LL;
      v20._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v20);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619368],  v16);
      return swift_willThrow();
    }

    uint64_t v26 = a5;
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v26 = a5;
  }

  uint64_t v22 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v22, v25);
  swift_bridgeObjectRelease();
  __PlistDictionaryDecoder.unbox<A>(_:as:configuration:)((uint64_t)v25, a1, a2, a3, a4, (uint64_t)v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  if (!v5)
  {
    uint64_t v23 = *(void *)(a3 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v13, 1LL, a3);
    if ((_DWORD)result == 1) {
      __break(1u);
    }
    else {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v26, v13, a3);
    }
  }

  return result;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.allKeys.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v9[2] = a4;
  uint64_t v9[3] = a5;
  swift_bridgeObjectRetain();
  uint64_t v7 = _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5( (void (*)(void *))partial apply for closure #1 in _PlistDictionaryKeyedDecodingContainer.allKeys.getter,  (uint64_t)v9,  a2,  a4);
  swift_bridgeObjectRelease();
  return v7;
}

BOOL _PlistDictionaryKeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    BOOL v8 = *((void *)&v11 + 1) != 0LL;
  }

  else
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    swift_bridgeObjectRelease();
    BOOL v8 = 0LL;
  }

  outlined destroy of Any?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
  return v8;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.decodeNil(forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11), (v13 & 1) == 0))
  {
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v12, (uint64_t)&v26);
  swift_bridgeObjectRelease();
  if (!*((void *)&v27 + 1))
  {
LABEL_9:
    outlined destroy of Any?((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    char v29 = (char *)v16
    void v17[3] = a5;
    v17[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a5);
    *(void *)&v28[0] = 0LL;
    *((void *)&v28[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&v28[0] = 0xD00000000000001DLL;
    *((void *)&v28[0] + 1) = 0x80000001839D1B70LL;
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 2238496LL;
    v20._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    uint64_t v14 = v28;
    v22._uint64_t countAndFlagsBits = 3025186LL;
    v22._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v22);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619350],  v15);
    swift_willThrow();
    return v14 & 1;
  }

  outlined init with take of Any(&v26, v28);
  outlined init with copy of Any((uint64_t)v28, (uint64_t)&v26);
  if (swift_dynamicCast())
  {
    if (v24 == 0x6C6C756E24LL && v25 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v14) = 1;
    }

    else
    {
      LOBYTE(v14) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    LOBYTE(v14) = 0;
  }

  return v14 & 1;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v37[1] = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  char v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v17 & 1) == 0))
  {
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v16, (uint64_t)&v38);
  swift_bridgeObjectRelease();
  if (!*((void *)&v39 + 1))
  {
LABEL_13:
    outlined destroy of Any?((uint64_t)&v38, &demangling cache variable for type metadata for Any?);
    uint64_t v28 = type metadata accessor for DecodingError();
    swift_allocError();
    __n128 v30 = v29;
    uint64_t v42 = (char *)v29
    v30[3] = a5;
    v30[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&__int128 v38 = 0LL;
    *((void *)&v38 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v38 = 0xD00000000000001DLL;
    *((void *)&v38 + 1) = 0x80000001839D1B70LL;
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 2238496LL;
    v33._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v18 = &v38;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 3025186LL;
    v35._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v35);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v30,  *MEMORY[0x189619350],  v28);
    swift_willThrow();
    return v18 & 1;
  }

  outlined init with take of Any(&v38, v41);
  v37[0] = *(void *)(v11 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v37[0])(v13, a1, a5);
  uint64_t v18 = *(__int128 **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v18 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v18 + 2) + 1LL,  1,  v18);
    *(void *)(a2 + 32) = v18;
  }

  unint64_t v21 = *((void *)v18 + 2);
  unint64_t v20 = *((void *)v18 + 3);
  if (v21 >= v20 >> 1)
  {
    uint64_t v18 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v21 + 1,  1,  v18);
    *(void *)(a2 + 32) = v18;
  }

  *((void *)&v39 + 1) = a5;
  uint64_t v40 = a6;
  Swift::String v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v38);
  ((void (*)(uint64_t *, char *, uint64_t))v37[0])(v22, v13, a5);
  *((void *)v18 + 2) = v21 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v38, (uint64_t)v18 + 40 * v21 + 32);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a5);
  LOBYTE(v18) = a2;
  uint64_t v23 = v42;
  char v24 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v41);
  if (!v23)
  {
    if (v24 != 2)
    {
      LOBYTE(v18) = v24 & 1;
      $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
      return v18 & 1;
    }

    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    __int128 v27 = v26;
    uint64_t v42 = (char *)v26
    *__int128 v27 = MEMORY[0x1896184C8];
    *(void *)&__int128 v38 = 0LL;
    *((void *)&v38 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v18 = &v38;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619368],  v25);
    swift_willThrow();
  }

  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return v18 & 1;
}

uint64_t $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2[2])
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v2 = (void *)result;
    uint64_t v4 = *(void *)(result + 16);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  uint64_t v1 = a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
LABEL_4:
    uint64_t v5 = v4 - 1;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    void v2[2] = v5;
    *(void *)(v1 + 32) = v2;
    return result;
  }

__int128 *_PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_OWORD *), uint64_t a8, void (*a9)(char *, uint64_t, uint64_t), uint64_t (*a10)(_OWORD *))
{
  uint64_t v45 = a8;
  uint64_t v46 = a4;
  uint64_t v47 = a7;
  uint64_t v52 = a2;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  char v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!*((void *)&v49 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v33 = v32;
    uint64_t v47 = (uint64_t (*)(_OWORD *))((char *)v32
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&__int128 v48 = 0LL;
    *((void *)&v48 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v48 = 0xD00000000000001DLL;
    *((void *)&v48 + 1) = 0x80000001839D1B70LL;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 2238496LL;
    v36._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    char v29 = &v48;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 3025186LL;
    v38._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v33,  *MEMORY[0x189619350],  v31);
    swift_willThrow();
    return v29;
  }

  outlined init with take of Any(&v48, v51);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v44(v17, a1, a5);
  uint64_t v22 = v52;
  uint64_t v23 = *(void **)(v52 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v22 + 32) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23[2] + 1LL,  1,  v23);
    *(void *)(v22 + 32) = v23;
  }

  unint64_t v26 = v23[2];
  unint64_t v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v25 > 1),  v26 + 1,  1,  v23);
    *(void *)(v52 + 32) = v23;
  }

  *((void *)&v49 + 1) = a5;
  uint64_t v50 = a6;
  __int128 v27 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
  v44((char *)v27, (uint64_t)v17, a5);
  v23[2] = v26 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v23[5 * v26 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  uint64_t v28 = v52;
  char v29 = (__int128 *)v52;
  uint64_t v30 = v47(v51);
  if (!v10)
  {
    char v29 = (__int128 *)v30;
    if ((v30 & 0x100) != 0)
    {
      uint64_t v47 = a10;
      uint64_t v44 = a9;
      uint64_t v40 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v42 = v41;
      v43[1] = (char *)v41
      *uint64_t v42 = v45;
      *(void *)&__int128 v48 = 0LL;
      *((void *)&v48 + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      char v29 = &v48;
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v40 - 8) + 104LL))( v42,  *MEMORY[0x189619368],  v40);
      swift_willThrow();
    }
  }

  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return v29;
}

{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v40;
  void *v41;
  void *v42;
  void v43[2];
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_OWORD *);
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v45 = a8;
  uint64_t v46 = a4;
  uint64_t v47 = a7;
  uint64_t v52 = a2;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  char v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!*((void *)&v49 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v33 = v32;
    uint64_t v47 = (uint64_t (*)(_OWORD *))((char *)v32
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&__int128 v48 = 0LL;
    *((void *)&v48 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v48 = 0xD00000000000001DLL;
    *((void *)&v48 + 1) = 0x80000001839D1B70LL;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 2238496LL;
    v36._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    char v29 = &v48;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 3025186LL;
    v38._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v33,  *MEMORY[0x189619350],  v31);
    swift_willThrow();
    return v29;
  }

  outlined init with take of Any(&v48, v51);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v44(v17, a1, a5);
  uint64_t v22 = v52;
  uint64_t v23 = *(void **)(v52 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v22 + 32) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23[2] + 1LL,  1,  v23);
    *(void *)(v22 + 32) = v23;
  }

  unint64_t v26 = v23[2];
  unint64_t v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v25 > 1),  v26 + 1,  1,  v23);
    *(void *)(v52 + 32) = v23;
  }

  *((void *)&v49 + 1) = a5;
  uint64_t v50 = a6;
  __int128 v27 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
  v44((char *)v27, (uint64_t)v17, a5);
  v23[2] = v26 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v23[5 * v26 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  uint64_t v28 = v52;
  char v29 = (__int128 *)v52;
  uint64_t v30 = v47(v51);
  if (!v10)
  {
    char v29 = (__int128 *)v30;
    if ((v30 & 0x10000) != 0)
    {
      uint64_t v47 = a10;
      uint64_t v44 = a9;
      uint64_t v40 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v42 = v41;
      v43[1] = (char *)v41
      *uint64_t v42 = v45;
      *(void *)&__int128 v48 = 0LL;
      *((void *)&v48 + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      char v29 = &v48;
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v40 - 8) + 104LL))( v42,  *MEMORY[0x189619368],  v40);
      swift_willThrow();
    }
  }

  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return v29;
}

{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v40;
  void *v41;
  void *v42;
  void v43[2];
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_OWORD *);
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v45 = a8;
  uint64_t v46 = a4;
  uint64_t v47 = a7;
  uint64_t v52 = a2;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  char v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!*((void *)&v49 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v33 = v32;
    uint64_t v47 = (uint64_t (*)(_OWORD *))((char *)v32
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&__int128 v48 = 0LL;
    *((void *)&v48 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v48 = 0xD00000000000001DLL;
    *((void *)&v48 + 1) = 0x80000001839D1B70LL;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 2238496LL;
    v36._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    char v29 = &v48;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 3025186LL;
    v38._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v33,  *MEMORY[0x189619350],  v31);
    swift_willThrow();
    return v29;
  }

  outlined init with take of Any(&v48, v51);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v44(v17, a1, a5);
  uint64_t v22 = v52;
  uint64_t v23 = *(void **)(v52 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v22 + 32) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23[2] + 1LL,  1,  v23);
    *(void *)(v22 + 32) = v23;
  }

  unint64_t v26 = v23[2];
  unint64_t v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v25 > 1),  v26 + 1,  1,  v23);
    *(void *)(v52 + 32) = v23;
  }

  *((void *)&v49 + 1) = a5;
  uint64_t v50 = a6;
  __int128 v27 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
  v44((char *)v27, (uint64_t)v17, a5);
  v23[2] = v26 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v23[5 * v26 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  uint64_t v28 = v52;
  char v29 = (__int128 *)v52;
  uint64_t v30 = v47(v51);
  if (!v10)
  {
    char v29 = (__int128 *)v30;
    if ((v30 & 0x100000000LL) != 0)
    {
      uint64_t v47 = a10;
      uint64_t v44 = a9;
      uint64_t v40 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v42 = v41;
      v43[1] = (char *)v41
      *uint64_t v42 = v45;
      *(void *)&__int128 v48 = 0LL;
      *((void *)&v48 + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      char v29 = &v48;
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v40 - 8) + 104LL))( v42,  *MEMORY[0x189619368],  v40);
      swift_willThrow();
    }
  }

  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return v29;
}

{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v41;
  void *v42;
  void *v43;
  void v44[2];
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_OWORD *);
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  uint64_t v46 = a8;
  uint64_t v47 = a4;
  __int128 v48 = a7;
  char v53 = a2;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  char v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    __int128 v49 = 0u;
    uint64_t v50 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  if (!*((void *)&v50 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v49, &demangling cache variable for type metadata for Any?);
    Swift::String v32 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v34 = v33;
    __int128 v48 = (uint64_t (*)(_OWORD *))((char *)v33
    v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&__int128 v49 = 0LL;
    *((void *)&v49 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v49 = 0xD00000000000001DLL;
    *((void *)&v49 + 1) = 0x80000001839D1B70LL;
    v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 2238496LL;
    v37._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    char v29 = &v49;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 3025186LL;
    v39._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v39);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v32 - 8) + 104LL))( v34,  *MEMORY[0x189619350],  v32);
    swift_willThrow();
    return v29;
  }

  outlined init with take of Any(&v49, v52);
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v45(v17, a1, a5);
  uint64_t v22 = v53;
  uint64_t v23 = *(void **)(v53 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v22 + 32) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23[2] + 1LL,  1,  v23);
    *(void *)(v22 + 32) = v23;
  }

  unint64_t v26 = v23[2];
  unint64_t v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v25 > 1),  v26 + 1,  1,  v23);
    *(void *)(v53 + 32) = v23;
  }

  *((void *)&v50 + 1) = a5;
  uint64_t v51 = a6;
  __int128 v27 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v49);
  v45((char *)v27, (uint64_t)v17, a5);
  v23[2] = v26 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v49, (uint64_t)&v23[5 * v26 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  uint64_t v28 = v53;
  char v29 = (__int128 *)v53;
  uint64_t v30 = v48(v52);
  if (v10) {
    goto LABEL_15;
  }
  if ((v31 & 1) != 0)
  {
    __int128 v48 = a10;
    uint64_t v45 = a9;
    uint64_t v41 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v43 = v42;
    v44[1] = (char *)v42
    *uint64_t v43 = v46;
    *(void *)&__int128 v49 = 0LL;
    *((void *)&v49 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    char v29 = &v49;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v41 - 8) + 104LL))( v43,  *MEMORY[0x189619368],  v41);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    return v29;
  }

  char v29 = (__int128 *)v30;
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  return v29;
}

float _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a4;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) == 0))
  {
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v17, (uint64_t)&v42);
  swift_bridgeObjectRelease();
  if (!*((void *)&v43 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    uint64_t v41 = (char *)v27
    v28[3] = a5;
    v28[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&__int128 v42 = 0LL;
    *((void *)&v42 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v42 = 0xD00000000000001DLL;
    *((void *)&v42 + 1) = 0x80000001839D1B70LL;
    v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 2238496LL;
    v31._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 3025186LL;
    v33._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v33);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v28,  *MEMORY[0x189619350],  v26);
    swift_willThrow();
    return v6;
  }

  outlined init with take of Any(&v42, v45);
  __int128 v39 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v39(v14, a1, a5);
  uint64_t v19 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
    *(void *)(a2 + 32) = v19;
  }

  unint64_t v22 = v19[2];
  unint64_t v21 = v19[3];
  if (v22 >= v21 >> 1)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v21 > 1),  v22 + 1,  1,  v19);
    *(void *)(a2 + 32) = v19;
  }

  *((void *)&v43 + 1) = a5;
  uint64_t v44 = a6;
  uint64_t v23 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
  v39((char *)v23, (uint64_t)v14, a5);
  void v19[2] = v22 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v42, (uint64_t)&v19[5 * v22 + 4]);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a5);
  char v24 = v41;
  specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(v45);
  if (v24) {
    goto LABEL_15;
  }
  if ((v25 & 0x100000000LL) != 0)
  {
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v37 = v36;
    uint64_t v41 = (char *)v36
    *Swift::String v37 = MEMORY[0x189618620];
    *(void *)&__int128 v42 = 0LL;
    *((void *)&v42 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104LL))( v37,  *MEMORY[0x189619368],  v35);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    return v6;
  }

  float v6 = *(float *)&v25;
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  return v6;
}

double _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a4;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) == 0))
  {
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v17, (uint64_t)&v43);
  swift_bridgeObjectRelease();
  if (!*((void *)&v44 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    char v29 = v28;
    __int128 v42 = (char *)v28
    v29[3] = a5;
    v29[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&__int128 v43 = 0LL;
    *((void *)&v43 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v43 = 0xD00000000000001DLL;
    *((void *)&v43 + 1) = 0x80000001839D1B70LL;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 2238496LL;
    v32._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 3025186LL;
    v34._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v27 - 8) + 104LL))( v29,  *MEMORY[0x189619350],  v27);
    swift_willThrow();
    return v6;
  }

  outlined init with take of Any(&v43, v46);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v40(v14, a1, a5);
  uint64_t v19 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
    *(void *)(a2 + 32) = v19;
  }

  unint64_t v22 = v19[2];
  unint64_t v21 = v19[3];
  if (v22 >= v21 >> 1)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v21 > 1),  v22 + 1,  1,  v19);
    *(void *)(a2 + 32) = v19;
  }

  *((void *)&v44 + 1) = a5;
  uint64_t v45 = a6;
  uint64_t v23 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
  v40((char *)v23, (uint64_t)v14, a5);
  void v19[2] = v22 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v43, (uint64_t)&v19[5 * v22 + 4]);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a5);
  char v24 = v42;
  uint64_t v25 = specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)((uint64_t)v46);
  if (v24) {
    goto LABEL_15;
  }
  if ((v26 & 1) != 0)
  {
    uint64_t v36 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v38 = v37;
    __int128 v42 = (char *)v37
    *uint64_t v38 = MEMORY[0x189618560];
    *(void *)&__int128 v43 = 0LL;
    *((void *)&v43 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v36);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return v6;
  }

  double v6 = *(double *)&v25;
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return v6;
}

__int128 *_PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v39[1] = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v17 & 1) == 0))
  {
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v16, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    char v29 = v28;
    __int128 v44 = (char *)v28
    v29[3] = a5;
    v29[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&__int128 v40 = 0LL;
    *((void *)&v40 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v40 = 0xD00000000000001DLL;
    *((void *)&v40 + 1) = 0x80000001839D1B70LL;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 2238496LL;
    v32._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v23 = &v40;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 3025186LL;
    v34._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v27 - 8) + 104LL))( v29,  *MEMORY[0x189619350],  v27);
    swift_willThrow();
    return v23;
  }

  outlined init with take of Any(&v40, v43);
  v39[0] = *(void *)(v11 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v39[0])(v13, a1, a5);
  char v18 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v18[2] + 1LL,  1,  v18);
    *(void *)(a2 + 32) = v18;
  }

  unint64_t v21 = v18[2];
  unint64_t v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v21 + 1,  1,  v18);
    *(void *)(a2 + 32) = v18;
  }

  *((void *)&v41 + 1) = a5;
  uint64_t v42 = a6;
  unint64_t v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v40);
  ((void (*)(uint64_t *, char *, uint64_t))v39[0])(v22, v13, a5);
  void v18[2] = v21 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v40, (uint64_t)&v18[5 * v21 + 4]);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a5);
  uint64_t v23 = (__int128 *)a2;
  char v24 = v44;
  uint64_t v25 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v43);
  if (!v24)
  {
    if (v26)
    {
      uint64_t v23 = (__int128 *)v25;
      $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      return v23;
    }

    uint64_t v36 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v38 = v37;
    __int128 v44 = (char *)v37
    *uint64_t v38 = MEMORY[0x189617FA8];
    *(void *)&__int128 v40 = 0LL;
    *((void *)&v40 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v23 = &v40;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v36);
    swift_willThrow();
  }

  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  return v23;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.decode<A>(_:forKey:)@<X0>( ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v57 = a7;
  uint64_t v55 = a5;
  unint64_t v56 = a1;
  uint64_t v64 = a3;
  __int128 v54 = a9;
  uint64_t v53 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v53 - 8);
  MEMORY[0x1895F8858](v53);
  unint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v18);
  unint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a4 + 16)
    || (v59 = a4, unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v24 & 1) == 0))
  {
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  outlined init with copy of Any(*(void *)(v59 + 56) + 32 * v23, (uint64_t)&v60);
  swift_bridgeObjectRelease();
  if (!*((void *)&v61 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    uint64_t v41 = type metadata accessor for DecodingError();
    uint64_t v58 = swift_allocError();
    __int128 v43 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    void v43[3] = a6;
    v43[4] = a8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(boxed_opaque_existential_1, a2, a6);
    *(void *)&__int128 v60 = 0LL;
    *((void *)&v60 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v60 = 0xD00000000000001DLL;
    *((void *)&v60 + 1) = 0x80000001839D1B70LL;
    v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 2238496LL;
    v46._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._uint64_t countAndFlagsBits = 3025186LL;
    v48._id object = (void *)0xE300000000000000LL;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v41 - 8) + 104LL))( v43,  *MEMORY[0x189619350],  v41);
    return swift_willThrow();
  }

  uint64_t v52 = a10;
  outlined init with take of Any(&v60, v63);
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v51(v20, a2, a6);
  uint64_t v25 = v64;
  uint64_t v26 = *(void **)(v64 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v25 + 32) = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v26[2] + 1LL,  1,  v26);
    *(void *)(v64 + 32) = v26;
  }

  unint64_t v29 = v26[2];
  unint64_t v28 = v26[3];
  if (v29 >= v28 >> 1)
  {
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v28 > 1),  v29 + 1,  1,  v26);
    *(void *)(v64 + 32) = v26;
  }

  *((void *)&v61 + 1) = a6;
  uint64_t v62 = a8;
  Swift::String v30 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
  v51((char *)v30, (uint64_t)v20, a6);
  v26[2] = v29 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v60, (uint64_t)&v26[5 * v29 + 4]);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, a6);
  uint64_t v31 = v57;
  uint64_t v32 = v64;
  uint64_t v33 = v58;
  __PlistDictionaryDecoder.unbox<A>(_:as:)(v63, v56, v57, (uint64_t)v16);
  if (v33) {
    goto LABEL_14;
  }
  uint64_t v34 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v16, 1LL, v31) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v54, v16, v31);
LABEL_14:
    uint64_t v40 = v32;
    goto LABEL_15;
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v53);
  uint64_t v35 = type metadata accessor for DecodingError();
  uint64_t v58 = swift_allocError();
  Swift::String v37 = v36;
  __int128 v54 = (char *)v36
  *Swift::String v37 = v56;
  *(void *)&__int128 v60 = 0LL;
  *((void *)&v60 + 1) = 0xE000000000000000LL;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(41LL);
  swift_bridgeObjectRelease();
  *(void *)&__int128 v60 = 0x6465746365707845LL;
  *((void *)&v60 + 1) = 0xE900000000000020LL;
  v38._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v39._id object = (void *)0x80000001839D1B90LL;
  String.append(_:)(v39);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104LL))( v37,  *MEMORY[0x189619368],  v35);
  swift_willThrow();
  uint64_t v40 = v32;
LABEL_15:
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v40);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  void v43[3] = a4;
  uint64_t v44 = a6;
  uint64_t v46 = a3;
  v43[1] = a8;
  uint64_t v12 = *(void *)(a5 - 8);
  __n128 v13 = MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = *(void (**)(char *, __n128))(v12 + 16);
  v16(v15, v13);
  uint64_t v17 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v45 = a2;
  *(void *)(a2 + 32) = v17;
  uint64_t v19 = a7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
    *(void *)(v45 + 32) = v17;
  }

  unint64_t v21 = v17[2];
  unint64_t v20 = v17[3];
  if (v21 >= v20 >> 1)
  {
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v21 + 1,  1,  v17);
    *(void *)(v45 + 32) = v17;
  }

  uint64_t v47 = a9;
  uint64_t v51 = a5;
  uint64_t v52 = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v50);
  ((void (*)(uint64_t *, char *, uint64_t))v16)(boxed_opaque_existential_1, v15, a5);
  void v17[2] = v21 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v50, (uint64_t)&v17[5 * v21 + 4]);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a5);
  uint64_t v23 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v25 = v46;
  if (*(void *)(v46 + 16))
  {
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
    uint64_t v27 = v44;
    if ((v28 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v25 + 56) + 32 * v26, (uint64_t)&v48);
    }

    else
    {
      __int128 v48 = 0u;
      __int128 v49 = 0u;
    }
  }

  else
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    uint64_t v27 = v44;
  }

  uint64_t v29 = v47;
  swift_bridgeObjectRelease();
  if (*((void *)&v49 + 1))
  {
    outlined init with take of Any(&v48, &v50);
    outlined init with copy of Any((uint64_t)&v50, (uint64_t)&v48);
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v32 = v45;
      uint64_t v33 = *(void *)(v45 + 32);
      *(void *)&__int128 v48 = v45;
      *((void *)&v48 + 1) = v53;
      *(void *)&__int128 v49 = v33;
      uint64_t v34 = type metadata accessor for _PlistDictionaryKeyedDecodingContainer(0LL, v27, v29, v31);
      swift_retain();
      swift_bridgeObjectRetain();
      MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDictionaryKeyedDecodingContainer<A>, v34);
      KeyedDecodingContainer.init<A>(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
      return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v32);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v30, &v50, v42);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    uint64_t v36 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v38 = v37;
    uint64_t v44 = (uint64_t)v37
    *Swift::String v38 = type metadata accessor for KeyedDecodingContainer();
    *(void *)&__int128 v50 = 0LL;
    *((void *)&v50 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(64LL);
    v39._id object = (void *)0x80000001839D1B30LL;
    v39._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = 34LL;
    v41._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v41);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v36);
    swift_willThrow();
  }

  return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v45);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v42 = a4;
  Swift::String v41 = a7;
  uint64_t v11 = *(void *)(a5 - 8);
  __n128 v12 = MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void (**)(char *, __n128))(v11 + 16);
  uint64_t v44 = v16;
  v15(v14, v12);
  uint64_t v17 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = a2;
  *(void *)(a2 + 32) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
    *(void *)(v43 + 32) = v17;
  }

  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v19 > 1),  v20 + 1,  1,  v17);
    *(void *)(v43 + 32) = v17;
  }

  uint64_t v48 = a5;
  uint64_t v49 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
  ((void (*)(uint64_t *, char *, uint64_t))v15)(boxed_opaque_existential_1, v14, a5);
  void v17[2] = v20 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)&v17[5 * v20 + 4]);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a5);
  uint64_t v22 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a3 + 16))
  {
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
    if ((v25 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v24, (uint64_t)&v45);
    }

    else
    {
      __int128 v45 = 0u;
      __int128 v46 = 0u;
    }
  }

  else
  {
    __int128 v45 = 0u;
    __int128 v46 = 0u;
  }

  swift_bridgeObjectRelease();
  if (*((void *)&v46 + 1))
  {
    outlined init with take of Any(&v45, &v47);
    outlined init with copy of Any((uint64_t)&v47, (uint64_t)&v45);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v27 = v50;
      uint64_t v28 = v43;
      uint64_t v29 = *(void *)(v43 + 32);
      uint64_t v30 = v41;
      v41[3] = &unk_189C8BC58;
      v30[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer();
      uint64_t v31 = (void *)swift_allocObject();
      *uint64_t v30 = v31;
      v31[2] = v28;
      v31[3] = v27;
      v31[4] = v29;
      v31[5] = 0LL;
      swift_retain();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
      return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v26, &v47, v39);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v45, &demangling cache variable for type metadata for Any?);
    uint64_t v33 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v35 = v34;
    uint64_t v42 = (char *)v34
    *uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    *(void *)&__int128 v47 = 0LL;
    *((void *)&v47 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(66LL);
    v36._id object = (void *)0x80000001839D1AF0LL;
    v36._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 34LL;
    v38._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v33 - 8) + 104LL))( v35,  *MEMORY[0x189619368],  v33);
    swift_willThrow();
  }

  return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v43);
}

uint64_t _PlistDictionaryKeyedDecodingContainer._superDecoder(forKey:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v36 = a4;
  uint64_t v34 = a7;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)a1,  (uint64_t)&v41);
  uint64_t v10 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v10;
  uint64_t v35 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10[2] + 1LL,  1,  v10);
    *(void *)(a2 + 32) = v10;
  }

  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v10);
    *(void *)(a2 + 32) = v10;
  }

  __int128 v33 = v42;
  uint64_t v14 = v42;
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v41, v42);
  uint64_t v16 = *(void *)(v14 - 8);
  __n128 v17 = MEMORY[0x1895F8858](v15);
  unint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, __n128))(v16 + 16))(v19, v17);
  *(_OWORD *)&v40[8] = v33;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
  (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v19, v14);
  void v10[2] = v13 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v39, (uint64_t)&v10[5 * v13 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v21 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v23 = v35;
  if (*(void *)(v35 + 16) && (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v25 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v23 + 56) + 32 * v24, (uint64_t)&v39);
  }

  else
  {
    __int128 v39 = 0u;
    *(_OWORD *)uint64_t v40 = 0u;
  }

  swift_bridgeObjectRelease();
  if (*(void *)&v40[8])
  {
    outlined init with take of Any(&v39, &v41);
  }

  else
  {
    *(void *)&__int128 v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    uint64_t v26 = swift_allocObject();
    *(void *)&__int128 v41 = v26;
    *(_OWORD *)(v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    *(_OWORD *)(v26 + 32) = 0u;
    outlined destroy of Any?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }

  outlined init with copy of Any((uint64_t)&v41, (uint64_t)&v39);
  uint64_t v28 = *(void *)(a2 + 24);
  uint64_t v27 = *(void *)(a2 + 32);
  uint64_t v29 = type metadata accessor for __PlistDictionaryDecoder();
  uint64_t v30 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v39, v27, v28);
  uint64_t v31 = v34;
  v34[3] = v29;
  v31[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder( &lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  *uint64_t v31 = v30;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.superDecoder()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  v14[3] = &type metadata for _CodingKey;
  v14[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v12 = swift_allocObject();
  v14[0] = v12;
  *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_18372EE40;
  *(void *)(v12 + 32) = 0LL;
  *(_BYTE *)(v12 + 40) = 0;
  return _PlistDictionaryKeyedDecodingContainer._superDecoder(forKey:)(v14, a1, a2, a3, a4, a5, a6);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.superDecoder(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  v16[3] = a5;
  v16[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))(boxed_opaque_existential_1, a1, a5);
  return _PlistDictionaryKeyedDecodingContainer._superDecoder(forKey:)(v16, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1)
{
  return _PlistDictionaryKeyedDecodingContainer.allKeys.getter( *v1,  v1[1],  v1[2],  *(void *)(a1 + 16),  *(void *)(a1 + 24));
}

BOOL protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1)
{
  return _PlistDictionaryKeyedDecodingContainer.contains(_:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  _PlistDictionaryKeyedDecodingContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

__int128 *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2)
{
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( a1,  *v2,  v2[1],  v2[2],  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2)
{
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( a1,  *v2,  v2[1],  v2[2],  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2)
{
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( a1,  *v2,  v2[1],  v2[2],  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

__int128 *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x189618740],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002ALL,  (uint64_t (*)(_OWORD *))0x80000001839D1D60LL);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A350],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002BLL,  (uint64_t (*)(_OWORD *))0x80000001839D1D30LL);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A408],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002CLL,  (uint64_t (*)(_OWORD *))0x80000001839D1D00LL);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A458],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002CLL,  (uint64_t (*)(_OWORD *))0x80000001839D1CD0LL);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A4C0],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002CLL,  (uint64_t (*)(_OWORD *))0x80000001839D1CA0LL);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x189618CD8],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002BLL,  (uint64_t (*)(_OWORD *))0x80000001839D1C70LL);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A610],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002CLL,  (uint64_t (*)(_OWORD *))0x80000001839D1C40LL);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A800],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002DLL,  (uint64_t (*)(_OWORD *))0x80000001839D1C10LL);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A860],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002DLL,  (uint64_t (*)(_OWORD *))0x80000001839D1BE0LL);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A8C8],  (void (*)(char *, uint64_t, uint64_t))0xD00000000000002DLL,  (uint64_t (*)(_OWORD *))0x80000001839D1BB0LL);
}

__int128 *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *), uint64_t a5, void (*a6)(char *, uint64_t, uint64_t), uint64_t (*a7)(_OWORD *))
{
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( a1,  *v7,  v7[1],  v7[2],  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a4,  a5,  a6,  a7);
}

{
  uint64_t *v7;
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( a1,  *v7,  v7[1],  v7[2],  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a4,  a5,  a6,  a7);
}

{
  uint64_t *v7;
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( a1,  *v7,  v7[1],  v7[2],  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a4,  a5,  a6,  a7);
}

{
  uint64_t *v7;
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)( a1,  *v7,  v7[1],  v7[2],  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a4,  a5,  a6,  a7);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))_PlistDictionaryKeyedDecodingContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  MEMORY[0x18961A180]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  MEMORY[0x18961A1A0]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  MEMORY[0x18961A1A8]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  MEMORY[0x18961A1B0]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  MEMORY[0x18961A1C8]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  MEMORY[0x18961A1C0]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  MEMORY[0x18961A1D0]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  MEMORY[0x18961A1D8]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  MEMORY[0x18961A1E8]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

{
  return a4() & 0x1FFFF;
}

{
  unint64_t v4;
  uint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))_PlistDictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))
{
  return a7(a1, a2, *v7, v7[1], v7[2], *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))_PlistDictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance _PlistDictionaryKeyedDecodingContainer<A>@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _PlistDictionaryKeyedDecodingContainer.superDecoder()( *v2,  v2[1],  v2[2],  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))_PlistDictionaryKeyedDecodingContainer.superDecoder(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.decodeNil()()
{
  v18[13] = *MEMORY[0x1895F89C0];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  if (v2 < *(void *)(v1 + 16))
  {
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_14;
    }

    outlined init with copy of Any(v1 + 32 * v2 + 32, (uint64_t)v18);
    if (swift_dynamicCast())
    {
      if (v16 == 0x6C6C756E24LL && v17 == 0xE500000000000000LL)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }

      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
      {
LABEL_9:
        uint64_t v12 = v0[3];
        BOOL v13 = __OFADD__(v12, 1LL);
        uint64_t v14 = v12 + 1;
        if (!v13)
        {
          v0[3] = v14;
          char v10 = 1;
          return v10 & 1;
        }

uint64_t $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void **)(*a1 + 32);
  if (!v2[2])
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v2 = (void *)result;
    uint64_t v4 = *(void *)(result + 16);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
LABEL_4:
    uint64_t v5 = v4 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    void v2[2] = v5;
    *(void *)(v1 + 32) = v2;
    return swift_release();
  }

uint64_t _PlistDictionaryUnkeyedDecodingContainer.decode<A>(_:)@<X0>( ValueMetadata *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4;
  uint64_t v70 = *MEMORY[0x1895F89C0];
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = v6[1];
  uint64_t v16 = v6[3];
  if (v16 >= *(void *)(v15 + 16))
  {
    uint64_t v29 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v31 = a1;
    uint64_t v32 = *(void *)(*v6 + 32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    uint64_t v34 = v6[3];
    *(void *)(inited + 56) = &type metadata for _CodingKey;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v35 = swift_allocObject();
    *(void *)(inited + 32) = v35;
    *(void *)(v35 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v34;
    *(void *)(v35 + 24) = 0LL;
    *(void *)(v35 + 32) = 0LL;
    *(_BYTE *)(v35 + 40) = 2;
    *(void *)&__int128 v67 = v32;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(ValueMetadata **, void, uint64_t))(*(void *)(v29 - 8) + 104LL))( v31,  *MEMORY[0x189619368],  v29);
    return swift_willThrow();
  }

  uint64_t v61 = a3;
  uint64_t v62 = (char *)&v56 - v13;
  unint64_t v63 = v5;
  uint64_t v58 = v14;
  uint64_t v59 = v12;
  uint64_t v60 = a4;
  uint64_t v17 = *v6;
  uint64_t v18 = *(void **)(*v6 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v17 + 32) = v18;
  uint64_t v64 = a1;
  unint64_t v20 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v18[2] + 1LL,  1,  v18);
    *(void *)(v17 + 32) = v18;
  }

  unint64_t v22 = v18[2];
  unint64_t v21 = v18[3];
  uint64_t v23 = (void *)(v22 + 1);
  if (v22 >= v21 >> 1)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v21 > 1),  v22 + 1,  1,  v18);
    *(void *)(v17 + 32) = v18;
  }

  int64_t v68 = &type metadata for _CodingKey;
  unint64_t v57 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v69 = v57;
  uint64_t v24 = swift_allocObject();
  *(void *)&__int128 v67 = v24;
  *(void *)(v24 + 24) = 0LL;
  *(void *)(v24 + 32) = 0LL;
  *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
  *(_BYTE *)(v24 + 40) = 2;
  void v18[2] = v23;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v67, (uint64_t)&v18[5 * v22 + 4]);
  if (v16 < 0)
  {
    __break(1u);
  }

  else if ((unint64_t)v16 < *(void *)(v15 + 16))
  {
    outlined init with copy of Any(v15 + 32 * v16 + 32, (uint64_t)v66);
    if (v64 == &type metadata for Date)
    {
      uint64_t v37 = v63;
      __PlistDictionaryDecoder.unbox(_:as:)(v66, (uint64_t)&v67);
      if (v37) {
        goto LABEL_19;
      }
      unint64_t v22 = (unint64_t)v20;
      *(void *)&v65[0] = v67;
      BYTE8(v65[0]) = BYTE8(v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      unint64_t v20 = v62;
    }

    else
    {
      unint64_t v22 = (unint64_t)v20;
      if (v64 != &type metadata for Data)
      {
        outlined init with copy of Any((uint64_t)v66, (uint64_t)&v67);
        outlined init with copy of Any((uint64_t)&v67, (uint64_t)v65);
        uint64_t v18 = (void *)(v17 + 16);
        uint64_t v23 = *(void **)(v17 + 16);
        char v25 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v23;
        unint64_t v20 = v62;
        if ((v25 & 1) != 0) {
          goto LABEL_11;
        }
        goto LABEL_31;
      }

      uint64_t v38 = v63;
      uint64_t v39 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v66);
      unint64_t v20 = v62;
      if (v38) {
        goto LABEL_19;
      }
      *(void *)&__int128 v67 = v39;
      *((void *)&v67 + 1) = v40;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    }

    int v42 = swift_dynamicCast();
    uint64_t v41 = *(void *)(v22 - 8);
    (*(void (**)(char *, void, uint64_t, unint64_t))(v41 + 56))(v20, v42 ^ 1u, 1LL, v22);
LABEL_23:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v41 + 48))(v20, 1LL, v22) == 1)
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v20, v59);
      uint64_t v43 = type metadata accessor for DecodingError();
      swift_allocError();
      __int128 v45 = v44;
      unint64_t v63 = (char *)v44
      void *v45 = v64;
      uint64_t v46 = *(void *)(*v6 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v47 = swift_initStackObject();
      *(_OWORD *)(v47 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v48 = v6[3];
      unint64_t v49 = v57;
      *(void *)(v47 + 56) = &type metadata for _CodingKey;
      *(void *)(v47 + 64) = v49;
      uint64_t v50 = swift_allocObject();
      *(void *)(v47 + 32) = v50;
      *(void *)(v50 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v48;
      *(void *)(v50 + 24) = 0LL;
      *(void *)(v50 + 32) = 0LL;
      *(_BYTE *)(v50 + 40) = 2;
      *(void *)&__int128 v67 = v46;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v47);
      *(void *)&__int128 v67 = 0LL;
      *((void *)&v67 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      swift_bridgeObjectRelease();
      *(void *)&__int128 v67 = 0x6465746365707845LL;
      *((void *)&v67 + 1) = 0xE900000000000020LL;
      v51._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      v52._id object = (void *)0x80000001839D1830LL;
      v52._uint64_t countAndFlagsBits = 0xD000000000000018LL;
      String.append(_:)(v52);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(ValueMetadata **, void, uint64_t))(*(void *)(v43 - 8) + 104LL))( v45,  *MEMORY[0x189619368],  v43);
      swift_willThrow();
    }

    else
    {
      (*(void (**)(uint64_t, char *, unint64_t))(v41 + 32))(v60, v20, v22);
      uint64_t v53 = v6[3];
      BOOL v54 = __OFADD__(v53, 1LL);
      uint64_t v55 = v53 + 1;
      if (v54) {
        __break(1u);
      }
      v6[3] = v55;
    }

    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v6);
  }

  __break(1u);
LABEL_31:
  uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23[2] + 1LL,  1,  v23);
  void *v18 = v23;
LABEL_11:
  unint64_t v27 = v23[2];
  unint64_t v26 = v23[3];
  if (v27 >= v26 >> 1)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v26 > 1),  v27 + 1,  1,  v23);
    void *v18 = v23;
  }

  v23[2] = v27 + 1;
  outlined init with take of Any(v65, &v23[4 * v27 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
  int64_t v68 = (ValueMetadata *)type metadata accessor for __PlistDictionaryDecoder();
  uint64_t v69 = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder( &lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  *(void *)&__int128 v67 = v17;
  swift_retain();
  uint64_t v28 = v63;
  dispatch thunk of Decodable.init(from:)();
  if (!v28)
  {
    uint64_t v41 = *(void *)(v22 - 8);
    (*(void (**)(char *, void, uint64_t, unint64_t))(v41 + 56))(v20, 0LL, 1LL, v22);
    specialized _PlistDecodingStorage.popContainer()();
    goto LABEL_23;
  }

  specialized _PlistDecodingStorage.popContainer()();
LABEL_19:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v6);
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[3];
  uint64_t v8 = *(void **)(*v3 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v6 + 32) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v8[2] + 1LL,  1,  v8);
    *(void *)(v6 + 32) = v8;
  }

  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v11 + 1,  1,  v8);
    *(void *)(v6 + 32) = v8;
  }

  uint64_t v34 = &type metadata for _CodingKey;
  unint64_t v35 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v12 = swift_allocObject();
  *(void *)&__int128 v33 = v12;
  *(void *)(v12 + 24) = 0LL;
  *(void *)(v12 + 32) = 0LL;
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v12 + 40) = 2;
  _OWORD v8[2] = v11 + 1;
  uint64_t result = outlined init with take of any PredicateExpression<Self.Output == B1>(&v33, (uint64_t)&v8[5 * v11 + 4]);
  uint64_t v14 = v3[1];
  if (v7 >= *(void *)(v14 + 16))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v17 = type metadata accessor for KeyedDecodingContainer();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    swift_willThrow();
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
  }

  if (v7 < 0)
  {
    __break(1u);
  }

  else
  {
    outlined init with copy of Any(v14 + 32 * v7 + 32, (uint64_t)&v33);
    outlined init with copy of Any((uint64_t)&v33, (uint64_t)v32);
    if (swift_dynamicCast())
    {
      if (v30 == 0x6C6C756E24LL && v31 == 0xE500000000000000LL)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        uint64_t v19 = type metadata accessor for DecodingError();
        swift_allocError();
        unint64_t v21 = v20;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *unint64_t v21 = type metadata accessor for KeyedDecodingContainer();
        swift_bridgeObjectRetain();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
LABEL_18:
        swift_willThrow();
        goto LABEL_19;
      }

      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v18 & 1) != 0) {
        goto LABEL_13;
      }
    }

    outlined init with copy of Any((uint64_t)&v33, (uint64_t)v32);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t result = swift_dynamicCast();
    if (!(_DWORD)result)
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError._typeMismatch(at:expectation:reality:)(v22, &v33, v29);
      goto LABEL_18;
    }

    uint64_t v24 = v3[3];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (!v25)
    {
      v3[3] = v26;
      uint64_t v27 = *(void *)(*v3 + 32);
      v32[0] = *v3;
      v32[1] = v30;
      v32[2] = v27;
      uint64_t v28 = type metadata accessor for _PlistDictionaryKeyedDecodingContainer(0LL, a2, a3, v23);
      swift_retain();
      swift_bridgeObjectRetain();
      MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDictionaryKeyedDecodingContainer<A>, v28);
      KeyedDecodingContainer.init<A>(_:)();
LABEL_19:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
    }
  }

  __break(1u);
  return result;
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.nestedUnkeyedContainer()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[3];
  uint64_t v5 = *(void **)(*v1 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 32) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v5[2] + 1LL,  1,  v5);
    *(void *)(v3 + 32) = v5;
  }

  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v8 + 1,  1,  v5);
    *(void *)(v3 + 32) = v5;
  }

  uint64_t v31 = &type metadata for _CodingKey;
  unint64_t v32 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v9 = swift_allocObject();
  *(void *)&__int128 v30 = v9;
  *(void *)(v9 + 24) = 0LL;
  *(void *)(v9 + 32) = 0LL;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(_BYTE *)(v9 + 40) = 2;
  v5[2] = v8 + 1;
  uint64_t result = outlined init with take of any PredicateExpression<Self.Output == B1>(&v30, (uint64_t)&v5[5 * v8 + 4]);
  uint64_t v11 = v1[1];
  if (v4 >= *(void *)(v11 + 16))
  {
    uint64_t v12 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  *MEMORY[0x189619368],  v12);
    swift_willThrow();
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v1);
  }

  if (v4 < 0)
  {
    __break(1u);
  }

  else
  {
    outlined init with copy of Any(v11 + 32 * v4 + 32, (uint64_t)&v30);
    outlined init with copy of Any((uint64_t)&v30, (uint64_t)v29);
    if (swift_dynamicCast())
    {
      if (v27 == 0x6C6C756E24LL && v28 == 0xE500000000000000LL)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        uint64_t v16 = type metadata accessor for DecodingError();
        swift_allocError();
        char v18 = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        uint64_t *v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
        swift_bridgeObjectRetain();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619368],  v16);
LABEL_18:
        swift_willThrow();
        goto LABEL_19;
      }

      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0) {
        goto LABEL_13;
      }
    }

    outlined init with copy of Any((uint64_t)&v30, (uint64_t)v29);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    uint64_t result = swift_dynamicCast();
    if (!(_DWORD)result)
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError._typeMismatch(at:expectation:reality:)(v19, &v30, v26);
      goto LABEL_18;
    }

    uint64_t v20 = v1[3];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v1[3] = v22;
      uint64_t v23 = *v1;
      uint64_t v24 = *(void *)(*v1 + 32);
      a1[3] = &unk_189C8BC58;
      a1[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer();
      BOOL v25 = (void *)swift_allocObject();
      *a1 = v25;
      _OWORD v25[2] = v23;
      v25[3] = v27;
      void v25[4] = v24;
      void v25[5] = 0LL;
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_19:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
      return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v1);
    }
  }

  __break(1u);
  return result;
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.superDecoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[3];
  uint64_t v6 = *(void **)(*v1 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 32) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
    *(void *)(v4 + 32) = v6;
  }

  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
    *(void *)(v4 + 32) = v6;
  }

  BOOL v21 = &type metadata for _CodingKey;
  unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v20 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  uint64_t result = outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v6[5 * v9 + 4]);
  uint64_t v12 = v2[1];
  if (v5 >= *(void *)(v12 + 16))
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  *MEMORY[0x189619368],  v17);
    swift_willThrow();
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
  }

  if ((v5 & 0x8000000000000000LL) == 0)
  {
    uint64_t v13 = *(void *)(v4 + 32);
    v2[3] = v5 + 1;
    outlined init with copy of Any(v12 + 32 * v5 + 32, (uint64_t)&v20);
    uint64_t v14 = *(void *)(v4 + 24);
    uint64_t v15 = type metadata accessor for __PlistDictionaryDecoder();
    uint64_t v16 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v20, v13, v14);
    a1[3] = v15;
    a1[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder( &lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
    *a1 = v16;
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return *(void *)(*(void *)(v0 + 8) + 16LL);
}

BOOL protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return *(void *)(v0 + 24) >= *(void *)(*(void *)(v0 + 8) + 16LL);
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return *(void *)(v0 + 24);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return _PlistDictionaryUnkeyedDecodingContainer.decodeNil()() & 1;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)() & 1;
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

__int128 *protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x189618740]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A350]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A408]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A4C0]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x189618CD8]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A610]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A800]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A8C8]);
}

double protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)();
}

float protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)();
}

unint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A458]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( (uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:),  MEMORY[0x18961A860]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer@<X0>( ValueMetadata *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _PlistDictionaryUnkeyedDecodingContainer.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( uint64_t a1, uint64_t a2)
{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( a1,  a2,  MEMORY[0x189619DA8]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( a1,  a2,  MEMORY[0x189619DC8]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( a1,  a2,  MEMORY[0x189619DD0]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( a1,  a2,  MEMORY[0x189619DD8]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( a1,  a2,  MEMORY[0x189619DF0]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( a1,  a2,  MEMORY[0x189619DE8]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( a1,  a2,  MEMORY[0x189619DF8]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( a1,  a2,  MEMORY[0x189619E00]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( a1,  a2,  MEMORY[0x189619E10]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

{
  return a3() & 0x1FFFF;
}

{
  unint64_t v3;
  uint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent<A>(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance _PlistDictionaryUnkeyedDecodingContainer( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistDictionaryUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance _PlistDictionaryUnkeyedDecodingContainer@<X0>( void *a1@<X8>)
{
  return _PlistDictionaryUnkeyedDecodingContainer.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance _PlistDictionaryUnkeyedDecodingContainer@<X0>( uint64_t *a1@<X8>)
{
  return _PlistDictionaryUnkeyedDecodingContainer.superDecoder()(a1);
}

Swift::Bool __swiftcall __PlistDictionaryDecoder.decodeNil()()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v0, &v6);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v4 == 0x6C6C756E24LL && v5 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
      char v2 = 1;
    }

    else
    {
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    char v2 = 0;
  }

  return v2 & 1;
}

BOOL protocol witness for SingleValueDecodingContainer.decodeNil() in conformance __PlistDictionaryDecoder()
{
  return __PlistDictionaryDecoder.decodeNil()();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __PlistDictionaryDecoder()
{
  return specialized __PlistDictionaryDecoder.decode(_:)() & 1;
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

_OWORD *protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __PlistDictionaryDecoder()
{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

__int128 *specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = (__int128 *)a1;
  outlined init with copy of Any(a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((void)v98 == 0x6C6C756E24LL && *((void *)&v98 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }

    return 0LL;
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  char *v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t);
  void *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  __n128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  unint64_t v58;
  BOOL v59;
  void *v60;
  void *v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[32];
  void v87[3];
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v3 = v1;
  uint64_t v4 = (__int128 *)a1;
  outlined init with copy of Any(a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((void)v83 == 0x6C6C756E24LL && *((void *)&v83 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }

    return 0LL;
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  void (*v14)(char *, __n128);
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  void *v60;
  void *v61;
  __n128 v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t);
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  void v89[2];
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  void v101[4];
  void v102[3];
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t, __n128);
  uint64_t v3 = v1;
  uint64_t v4 = (__int128 *)a1;
  outlined init with copy of Any(a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((void)v98 == 0x6C6C756E24LL && *((void *)&v98 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }

    return 0LL;
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  char *v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t);
  void *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  __n128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  unint64_t v58;
  BOOL v59;
  void *v60;
  void *v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[32];
  void v87[3];
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v3 = v1;
  uint64_t v4 = (__int128 *)a1;
  outlined init with copy of Any(a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((void)v83 == 0x6C6C756E24LL && *((void *)&v83 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }

    return 0LL;
  }

void specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(void *a1)
{
  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((void)v83 == 0x6C6C756E24LL && *((void *)&v83 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
      return;
    }

    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return;
    }
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v78 = v3;
    uint64_t v79 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    uint64_t v8 = v88;
    uint64_t v7 = v89;
    unint64_t v9 = __swift_project_boxed_opaque_existential_1(v87, v88);
    uint64_t v82 = v72;
    uint64_t v10 = *(void **)(v8 - 8);
    uint64_t v11 = v10[8];
    __n128 v12 = MEMORY[0x1895F8858](v9);
    unint64_t v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v14 = (char *)v72 - v13;
    uint64_t v15 = (void (*)(char *, __n128))v10[2];
    v15((char *)v72 - v13, v12);
    uint64_t v16 = *(void *)(v7 + 8);
    uint64_t v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v17;
    uint64_t v81 = v72;
    __n128 v18 = MEMORY[0x1895F8858](v17);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)v72 - v13, (char *)v72 - v13, v8, v18);
    uint64_t v80 = v10;
    if ((v7 & 1) != 0)
    {
      unint64_t v77 = (char *)v72 - v13;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      __n128 v76 = v72;
      MEMORY[0x1895F8858](AssociatedTypeWitness);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v21 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v75 = v72;
      MEMORY[0x1895F8858](v21);
      __n128 v22 = v80;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = (void (*)(char *, uint64_t))v22[1];
      v23((char *)v72 - v13, v8);
      v23((char *)v72 - v13, v8);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v23(v77, v8);
LABEL_36:
        uint64_t v64 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v66 = v65;
        *(void *)&__int128 v83 = 0LL;
        *((void *)&v83 + 1) = 0xE000000000000000LL;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52LL);
        v67._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v67._id object = (void *)0x80000001839D13E0LL;
        String.append(_:)(v67);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._id object = (void *)0x80000001839D1400LL;
        v69._uint64_t countAndFlagsBits = 0xD000000000000012LL;
        String.append(_:)(v69);
        v70._uint64_t countAndFlagsBits = 0x38746E4955LL;
        v70._id object = (void *)0xE500000000000000LL;
        String.append(_:)(v70);
        v71._uint64_t countAndFlagsBits = 46LL;
        v71._id object = (void *)0xE100000000000000LL;
        String.append(_:)(v71);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v64 - 8) + 104LL))( v66,  *MEMORY[0x189619360],  v64);
LABEL_37:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        return;
      }

      uint64_t v14 = v77;
    }

    else
    {
      uint64_t v23 = (void (*)(char *, uint64_t))v10[1];
      v23((char *)v72 - v13, v8);
    }

    uint64_t v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    __n128 v49 = MEMORY[0x1895F8858](v48);
    ((void (*)(char *, char *, uint64_t, __n128))v15)( (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14,  v8,  v49);
    if (v48 <= 7)
    {
      v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
LABEL_23:
      dispatch thunk of BinaryInteger._lowWord.getter();
      v23(v14, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return;
    }

    __n128 v76 = v72;
    LOBYTE(v83) = -1;
    char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v50 & 1) != 0)
    {
      if (v51 <= 8)
      {
        unint64_t v77 = v14;
        uint64_t v74 = v16;
        uint64_t v73 = *(void *)(*(void *)(v16 + 24) + 16LL);
        uint64_t v52 = swift_getAssociatedTypeWitness();
        uint64_t v75 = v72;
        MEMORY[0x1895F8858](v52);
        uint64_t v53 = swift_getAssociatedConformanceWitness();
        uint64_t v54 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v52, v53);
        v72[1] = v72;
        MEMORY[0x1895F8858](v54);
        unint64_t v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v73) = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v56 = ((uint64_t (*)(char *, uint64_t))v23)((char *)v72 - v55, v8);
        LODWORD(v75) = v83;
        __n128 v57 = MEMORY[0x1895F8858](v56);
        ((void (*)(char *, char *, uint64_t, __n128))v80[4])((char *)v72 - v55, (char *)v72 - v55, v8, v57);
        if ((v73 & 1) == 0)
        {
          v23((char *)v72 - v55, v8);
          uint64_t v14 = v77;
          goto LABEL_23;
        }

        unsigned __int8 v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v23((char *)v72 - v55, v8);
        BOOL v59 = v75 >= v58;
        uint64_t v14 = v77;
LABEL_34:
        if (v59) {
          goto LABEL_23;
        }
        goto LABEL_35;
      }
    }

    else if (v51 <= 8)
    {
      unsigned __int8 v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
      BOOL v59 = v83 >= v63;
      goto LABEL_34;
    }

    MEMORY[0x1895F8858](v51);
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
    v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
    v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
    if ((v62 & 1) == 0) {
      goto LABEL_23;
    }
LABEL_35:
    v23(v14, v8);
    goto LABEL_36;
  }

  uint64_t v85 = 0LL;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    uint64_t v24 = __swift_project_boxed_opaque_existential_1(v87, v88);
    __n128 v25 = MEMORY[0x1895F8858](v24);
    (*(void (**)(char *, __n128))(v27 + 16))((char *)v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL), v25);
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE1(v83) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return;
    }

    uint64_t v28 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v30 = v29;
    *(void *)&__int128 v83 = 0LL;
    *((void *)&v83 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v31._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v31._id object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    v32._id object = (void *)0x80000001839D1400LL;
    v32._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = 0x38746E4955LL;
    v33._id object = (void *)0xE500000000000000LL;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = 46LL;
    v34._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v30,  *MEMORY[0x189619360],  v28);
    goto LABEL_37;
  }

  uint64_t v85 = 0LL;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    unint64_t v35 = (void *)v83;
    uint64_t v36 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v38 = v37;
    v87[0] = 0LL;
    v87[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v39._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v39._id object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v39);
    id v40 = objc_msgSend(v35, sel_description);
    id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    id v43 = v42;

    v44._uint64_t countAndFlagsBits = (uint64_t)v41;
    v44._id object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._id object = (void *)0x80000001839D1400LL;
    v45._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = 0x38746E4955LL;
    v46._id object = (void *)0xE500000000000000LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 46LL;
    v47._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v38,  *MEMORY[0x189619360],  v36);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x18961A610], a1, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  char *v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t);
  void *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  __n128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  unsigned __int16 v58;
  BOOL v59;
  void *v60;
  void *v61;
  char v62;
  unsigned __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  void v72[2];
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[32];
  void v87[3];
  uint64_t v88;
  uint64_t v89;
  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((void)v83 == 0x6C6C756E24LL && *((void *)&v83 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
      return;
    }

    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return;
    }
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v78 = v3;
    uint64_t v79 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    uint64_t v8 = v88;
    uint64_t v7 = v89;
    unint64_t v9 = __swift_project_boxed_opaque_existential_1(v87, v88);
    uint64_t v82 = v72;
    uint64_t v10 = *(void **)(v8 - 8);
    uint64_t v11 = v10[8];
    __n128 v12 = MEMORY[0x1895F8858](v9);
    unint64_t v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v14 = (char *)v72 - v13;
    uint64_t v15 = (void (*)(char *, __n128))v10[2];
    v15((char *)v72 - v13, v12);
    uint64_t v16 = *(void *)(v7 + 8);
    uint64_t v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v17;
    uint64_t v81 = v72;
    __n128 v18 = MEMORY[0x1895F8858](v17);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)v72 - v13, (char *)v72 - v13, v8, v18);
    uint64_t v80 = v10;
    if ((v7 & 1) != 0)
    {
      unint64_t v77 = (char *)v72 - v13;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      __n128 v76 = v72;
      MEMORY[0x1895F8858](AssociatedTypeWitness);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v21 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v75 = v72;
      MEMORY[0x1895F8858](v21);
      __n128 v22 = v80;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = (void (*)(char *, uint64_t))v22[1];
      v23((char *)v72 - v13, v8);
      v23((char *)v72 - v13, v8);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v23(v77, v8);
LABEL_36:
        uint64_t v64 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v66 = v65;
        *(void *)&__int128 v83 = 0LL;
        *((void *)&v83 + 1) = 0xE000000000000000LL;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52LL);
        v67._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v67._id object = (void *)0x80000001839D13E0LL;
        String.append(_:)(v67);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._id object = (void *)0x80000001839D1400LL;
        v69._uint64_t countAndFlagsBits = 0xD000000000000012LL;
        String.append(_:)(v69);
        v70._uint64_t countAndFlagsBits = 0x3631746E4955LL;
        v70._id object = (void *)0xE600000000000000LL;
        String.append(_:)(v70);
        v71._uint64_t countAndFlagsBits = 46LL;
        v71._id object = (void *)0xE100000000000000LL;
        String.append(_:)(v71);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v64 - 8) + 104LL))( v66,  *MEMORY[0x189619360],  v64);
LABEL_37:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        return;
      }

      uint64_t v14 = v77;
    }

    else
    {
      uint64_t v23 = (void (*)(char *, uint64_t))v10[1];
      v23((char *)v72 - v13, v8);
    }

    uint64_t v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    __n128 v49 = MEMORY[0x1895F8858](v48);
    ((void (*)(char *, char *, uint64_t, __n128))v15)( (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14,  v8,  v49);
    if (v48 <= 15)
    {
      v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
LABEL_23:
      dispatch thunk of BinaryInteger._lowWord.getter();
      v23(v14, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return;
    }

    __n128 v76 = v72;
    LOWORD(v83) = -1;
    char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v50 & 1) != 0)
    {
      if (v51 <= 16)
      {
        unint64_t v77 = v14;
        uint64_t v74 = v16;
        uint64_t v73 = *(void *)(*(void *)(v16 + 24) + 16LL);
        uint64_t v52 = swift_getAssociatedTypeWitness();
        uint64_t v75 = v72;
        MEMORY[0x1895F8858](v52);
        uint64_t v53 = swift_getAssociatedConformanceWitness();
        uint64_t v54 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v52, v53);
        v72[1] = v72;
        MEMORY[0x1895F8858](v54);
        unint64_t v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v73) = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v56 = ((uint64_t (*)(char *, uint64_t))v23)((char *)v72 - v55, v8);
        LODWORD(v75) = (unsigned __int16)v83;
        __n128 v57 = MEMORY[0x1895F8858](v56);
        ((void (*)(char *, char *, uint64_t, __n128))v80[4])((char *)v72 - v55, (char *)v72 - v55, v8, v57);
        if ((v73 & 1) == 0)
        {
          v23((char *)v72 - v55, v8);
          uint64_t v14 = v77;
          goto LABEL_23;
        }

        unsigned __int8 v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v23((char *)v72 - v55, v8);
        BOOL v59 = v75 >= v58;
        uint64_t v14 = v77;
LABEL_34:
        if (v59) {
          goto LABEL_23;
        }
        goto LABEL_35;
      }
    }

    else if (v51 <= 16)
    {
      unsigned __int8 v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
      BOOL v59 = (unsigned __int16)v83 >= v63;
      goto LABEL_34;
    }

    MEMORY[0x1895F8858](v51);
    lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
    v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
    v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
    if ((v62 & 1) == 0) {
      goto LABEL_23;
    }
LABEL_35:
    v23(v14, v8);
    goto LABEL_36;
  }

  uint64_t v85 = 0LL;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    uint64_t v24 = __swift_project_boxed_opaque_existential_1(v87, v88);
    __n128 v25 = MEMORY[0x1895F8858](v24);
    (*(void (**)(char *, __n128))(v27 + 16))((char *)v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL), v25);
    lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE2(v83) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return;
    }

    uint64_t v28 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v30 = v29;
    *(void *)&__int128 v83 = 0LL;
    *((void *)&v83 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v31._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v31._id object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    v32._id object = (void *)0x80000001839D1400LL;
    v32._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = 0x3631746E4955LL;
    v33._id object = (void *)0xE600000000000000LL;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = 46LL;
    v34._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v30,  *MEMORY[0x189619360],  v28);
    goto LABEL_37;
  }

  uint64_t v85 = 0LL;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    unint64_t v35 = (void *)v83;
    uint64_t v36 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v38 = v37;
    v87[0] = 0LL;
    v87[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v39._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v39._id object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v39);
    id v40 = objc_msgSend(v35, sel_description);
    id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    id v43 = v42;

    v44._uint64_t countAndFlagsBits = (uint64_t)v41;
    v44._id object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._id object = (void *)0x80000001839D1400LL;
    v45._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = 0x3631746E4955LL;
    v46._id object = (void *)0xE600000000000000LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 46LL;
    v47._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v38,  *MEMORY[0x189619360],  v36);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x18961A800], a1, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  void (*v14)(char *, __n128);
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  void *v60;
  void *v61;
  __n128 v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t);
  char v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  void v88[3];
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  char *v96;
  void (*v97)(char *, char *, uint64_t, __n128);
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _BYTE v101[32];
  void v102[3];
  uint64_t v103;
  uint64_t v104;
  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((void)v98 == 0x6C6C756E24LL && *((void *)&v98 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
      return;
    }

    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return;
    }
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v90 = v3;
    BOOL v92 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    uint64_t v8 = v103;
    uint64_t v7 = v104;
    unint64_t v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v94 = v88;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = *(void *)(v10 + 64);
    __n128 v12 = MEMORY[0x1895F8858](v9);
    unint64_t v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v14 = *(void (**)(char *, __n128))(v10 + 16);
    v14((char *)v88 - v13, v12);
    uint64_t v15 = *(void *)(v7 + 8);
    uint64_t v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v17 = v16;
    uint64_t v93 = v88;
    __n128 v18 = MEMORY[0x1895F8858](v16);
    uint64_t v97 = (void (*)(char *, char *, uint64_t, __n128))v14;
    ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)v88 - v13, (char *)v88 - v13, v8, v18);
    uint64_t v96 = (char *)v88 - v13;
    uint64_t v19 = v15;
    BOOL v20 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 8;
    Swift::String v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::String v33 = v32((char *)v88 - v13, v8);
    Swift::String v34 = MEMORY[0x1895F8858](v33);
    unint64_t v35 = (char *)v88 - v13;
    v97((char *)v88 - v13, v96, v8, v34);
    int64_t v95 = v88;
    if (v20)
    {
      LOBYTE(v98) = 0x80;
      uint64_t v36 = v19;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 8)
        {
LABEL_47:
          Swift::String v68 = dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v51 = v32;
          v32(v35, v8);
          uint64_t v52 = v96;
LABEL_25:
          uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v54 = MEMORY[0x1895F8858](v53);
          v97((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v52, v8, v54);
          uint64_t v91 = v88;
          if (v53 < 9)
          {
            __n128 v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            unint64_t v55 = v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            if (v57 == 8)
            {
              unint64_t v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
              uint64_t v56 = v55 ^ 1;
            }

            else
            {
              uint64_t v56 = 0;
            }
          }

          else
          {
            unint64_t v55 = v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            uint64_t v56 = 1;
          }

          char v62 = MEMORY[0x1895F8858](v55);
          unsigned __int8 v63 = (char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          v97(v63, v52, v8, v62);
          if ((v56 & 1) == 0)
          {
            v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            goto LABEL_44;
          }

          uint64_t v64 = v51;
          LOBYTE(v98) = 127;
          uint64_t v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v65 & 1) != 0)
          {
            if (v66 > 8)
            {
              MEMORY[0x1895F8858](v66);
              lazy protocol witness table accessor for type Int8 and conformance Int8();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              Swift::String v67 = dispatch thunk of static Comparable.< infix(_:_:)();
              uint64_t v51 = v64;
              v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
              v64(v63, v8);
              uint64_t v52 = v96;
              goto LABEL_49;
            }
          }

          else if (v66 >= 8)
          {
            uint64_t v97 = (void (*)(char *, char *, uint64_t, __n128))v88;
            v101[0] = 127;
            MEMORY[0x1895F8858](v66);
            lazy protocol witness table accessor for type Int8 and conformance Int8();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            Swift::String v67 = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v51 = v64;
            v64(v63, v8);
            v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
LABEL_49:
            if ((v67 & 1) != 0) {
              goto LABEL_54;
            }
LABEL_44:
            dispatch thunk of BinaryInteger._lowWord.getter();
            v51(v52, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            return;
          }

          dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v51 = v64;
          v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
          goto LABEL_44;
        }

        goto LABEL_32;
      }

      unsigned __int8 v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v58 & 1) != 0)
      {
        if (v37 <= 8)
        {
          uint64_t v89 = *(void *)(*(void *)(v19 + 24) + 16LL);
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v91 = v88;
          MEMORY[0x1895F8858](AssociatedTypeWitness);
          v88[1] = (char *)v88 - v70;
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          uint64_t v72 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
          v88[2] = v88;
          MEMORY[0x1895F8858](v72);
          uint64_t v73 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          uint64_t v89 = v36;
          uint64_t v74 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v51 = v32;
          uint64_t v75 = v32((char *)v88 - v73, v8);
          __n128 v76 = MEMORY[0x1895F8858](v75);
          unint64_t v77 = (char *)v88 - v73;
          (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))((char *)v88 - v73, v35, v8, v76);
          uint64_t v52 = v96;
          if ((v74 & 1) != 0)
          {
            v32(v77, v8);
          }

          else
          {
            uint64_t v78 = (char)v98;
            uint64_t v79 = dispatch thunk of BinaryInteger._lowWord.getter();
            v32(v77, v8);
            if (v78 <= v79) {
              goto LABEL_25;
            }
          }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  void (*v14)(char *, __n128);
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  void *v60;
  void *v61;
  __n128 v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t);
  char v65;
  uint64_t v66;
  char v67;
  __int16 v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  void v88[3];
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  char *v96;
  void (*v97)(char *, char *, uint64_t, __n128);
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _WORD v101[16];
  void v102[3];
  uint64_t v103;
  uint64_t v104;
  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((void)v98 == 0x6C6C756E24LL && *((void *)&v98 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
      return;
    }

    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return;
    }
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v90 = v3;
    BOOL v92 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    uint64_t v8 = v103;
    uint64_t v7 = v104;
    unint64_t v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v94 = v88;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = *(void *)(v10 + 64);
    __n128 v12 = MEMORY[0x1895F8858](v9);
    unint64_t v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v14 = *(void (**)(char *, __n128))(v10 + 16);
    v14((char *)v88 - v13, v12);
    uint64_t v15 = *(void *)(v7 + 8);
    uint64_t v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v17 = v16;
    uint64_t v93 = v88;
    __n128 v18 = MEMORY[0x1895F8858](v16);
    uint64_t v97 = (void (*)(char *, char *, uint64_t, __n128))v14;
    ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)v88 - v13, (char *)v88 - v13, v8, v18);
    uint64_t v96 = (char *)v88 - v13;
    uint64_t v19 = v15;
    BOOL v20 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 16;
    Swift::String v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::String v33 = v32((char *)v88 - v13, v8);
    Swift::String v34 = MEMORY[0x1895F8858](v33);
    unint64_t v35 = (char *)v88 - v13;
    v97((char *)v88 - v13, v96, v8, v34);
    int64_t v95 = v88;
    if (v20)
    {
      LOWORD(v98) = 0x8000;
      uint64_t v36 = v19;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 16)
        {
LABEL_47:
          Swift::String v68 = dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v51 = v32;
          v32(v35, v8);
          uint64_t v52 = v96;
LABEL_25:
          uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v54 = MEMORY[0x1895F8858](v53);
          v97((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v52, v8, v54);
          uint64_t v91 = v88;
          if (v53 < 17)
          {
            __n128 v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            unint64_t v55 = v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            if (v57 == 16)
            {
              unint64_t v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
              uint64_t v56 = v55 ^ 1;
            }

            else
            {
              uint64_t v56 = 0;
            }
          }

          else
          {
            unint64_t v55 = v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            uint64_t v56 = 1;
          }

          char v62 = MEMORY[0x1895F8858](v55);
          unsigned __int8 v63 = (char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          v97(v63, v52, v8, v62);
          if ((v56 & 1) == 0)
          {
            v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            goto LABEL_44;
          }

          uint64_t v64 = v51;
          LOWORD(v98) = 0x7FFF;
          uint64_t v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v65 & 1) != 0)
          {
            if (v66 > 16)
            {
              MEMORY[0x1895F8858](v66);
              lazy protocol witness table accessor for type Int16 and conformance Int16();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              Swift::String v67 = dispatch thunk of static Comparable.< infix(_:_:)();
              uint64_t v51 = v64;
              v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
              v64(v63, v8);
              uint64_t v52 = v96;
              goto LABEL_49;
            }
          }

          else if (v66 >= 16)
          {
            uint64_t v97 = (void (*)(char *, char *, uint64_t, __n128))v88;
            v101[0] = 0x7FFF;
            MEMORY[0x1895F8858](v66);
            lazy protocol witness table accessor for type Int16 and conformance Int16();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            Swift::String v67 = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v51 = v64;
            v64(v63, v8);
            v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
LABEL_49:
            if ((v67 & 1) != 0) {
              goto LABEL_54;
            }
LABEL_44:
            dispatch thunk of BinaryInteger._lowWord.getter();
            v51(v52, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            return;
          }

          dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v51 = v64;
          v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
          goto LABEL_44;
        }

        goto LABEL_32;
      }

      unsigned __int8 v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v58 & 1) != 0)
      {
        if (v37 <= 16)
        {
          uint64_t v89 = *(void *)(*(void *)(v19 + 24) + 16LL);
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v91 = v88;
          MEMORY[0x1895F8858](AssociatedTypeWitness);
          v88[1] = (char *)v88 - v70;
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          uint64_t v72 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
          v88[2] = v88;
          MEMORY[0x1895F8858](v72);
          uint64_t v73 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          uint64_t v89 = v36;
          uint64_t v74 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v51 = v32;
          uint64_t v75 = v32((char *)v88 - v73, v8);
          __n128 v76 = MEMORY[0x1895F8858](v75);
          unint64_t v77 = (char *)v88 - v73;
          (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))((char *)v88 - v73, v35, v8, v76);
          uint64_t v52 = v96;
          if ((v74 & 1) != 0)
          {
            v32(v77, v8);
          }

          else
          {
            uint64_t v78 = (__int16)v98;
            uint64_t v79 = dispatch thunk of BinaryInteger._lowWord.getter();
            v32(v77, v8);
            if (v78 <= v79) {
              goto LABEL_25;
            }
          }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  uint64_t v17;
  char v18;
  __n128 v19;
  uint64_t v20;
  BOOL v21;
  void *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t v34;
  __n128 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  void *v61;
  void *v62;
  __n128 v63;
  char *v64;
  uint64_t (*v65)(char *, uint64_t);
  char v66;
  uint64_t v67;
  char v68;
  int v69;
  uint64_t AssociatedTypeWitness;
  uint64_t v71;
  uint64_t AssociatedConformanceWitness;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  __n128 v77;
  char *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  void v89[2];
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _DWORD v101[8];
  void v102[3];
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t, __n128);
  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((void)v98 == 0x6C6C756E24LL && *((void *)&v98 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }

    uint64_t v7 = 1;
    goto LABEL_46;
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  char *v15;
  void (*v16)(char *, __n128);
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  void *v23;
  void (*v24)(char *, uint64_t);
  void *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  __n128 v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __n128 v58;
  unsigned int v59;
  BOOL v60;
  void *v61;
  void *v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[32];
  void v87[3];
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((void)v83 == 0x6C6C756E24LL && *((void *)&v83 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }

    uint64_t v7 = 1;
    goto LABEL_15;
  }

void *specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  outlined init with copy of Any(a1, (uint64_t)v51);
  if (swift_dynamicCast())
  {
    if ((void)v47 == 0x6C6C756E24LL && *((void *)&v47 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0) {
        goto LABEL_7;
      }
    }

    return 0LL;
  }

void specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(void *a1)
{
  if (swift_dynamicCast())
  {
    if ((void)v47 == 0x6C6C756E24LL && *((void *)&v47 + 1) == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0) {
        goto LABEL_7;
      }
    }

    char v4 = 1;
    goto LABEL_14;
  }

uint64_t __PlistDictionaryDecoder.unbox(_:as:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  if (v9 == 0x6C6C756E24LL && v10 == 0xE500000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
LABEL_11:
    *(void *)a2 = 0LL;
    *(_BYTE *)(a2 + 8) = 1;
    return result;
  }

uint64_t Float.init<A>(exactly:)(uint64_t a1, uint64_t a2)
{
  if (dispatch thunk of BinaryInteger.bitWidth.getter() > 64)
  {
    lazy protocol witness table accessor for type Float and conformance Float();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    char v4 = static BinaryFloatingPoint<>._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
    if ((v4 & 1) != 0)
    {
      LODWORD(v5) = v13;
LABEL_13:
      unsigned __int8 v12 = 0;
      uint64_t v5 = v5;
      return v5 | ((unint64_t)v12 << 32);
    }

uint64_t lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for __PlistDictionaryDecoder();
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t specialized BinaryFloatingPoint.init<A>(exactly:)(_BYTE *a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v226 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v227 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v225 = &v199[-v5];
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v223 = *(void *)(v6 - 8);
  uint64_t v224 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v222 = &v199[-v7];
  swift_getAssociatedTypeWitness();
  uint64_t v230 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v213 = *(void *)(*(void *)(v230 + 24) + 16LL);
  uint64_t v209 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v209);
  Swift::Int v208 = &v199[-v8];
  uint64_t v233 = swift_checkMetadataState();
  uint64_t v231 = *(void *)(v233 - 8);
  MEMORY[0x1895F8858](v233);
  uint64_t v215 = &v199[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v10);
  uint64_t v214 = &v199[-v11];
  MEMORY[0x1895F8858](v12);
  uint64_t v202 = &v199[-v13];
  MEMORY[0x1895F8858](v14);
  uint64_t v204 = &v199[-v15];
  MEMORY[0x1895F8858](v16);
  Swift::Int v212 = &v199[-v17];
  MEMORY[0x1895F8858](v18);
  unint64_t v221 = &v199[-v19];
  MEMORY[0x1895F8858](v20);
  uint64_t v203 = &v199[-v21];
  MEMORY[0x1895F8858](v22);
  uint64_t v205 = &v199[-v23];
  MEMORY[0x1895F8858](v24);
  char v206 = &v199[-v25];
  MEMORY[0x1895F8858](v26);
  Foundation::Date v207 = &v199[-v27];
  MEMORY[0x1895F8858](v28);
  uint64_t v228 = &v199[-v29];
  MEMORY[0x1895F8858](v30);
  uint64_t v210 = &v199[-v31];
  MEMORY[0x1895F8858](v32);
  unint64_t v232 = &v199[-v33];
  uint64_t v34 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v35);
  uint64_t v220 = &v199[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v37);
  uint64_t v217 = &v199[-v38];
  MEMORY[0x1895F8858](v39);
  uint64_t v219 = &v199[-v40];
  MEMORY[0x1895F8858](v41);
  uint64_t v216 = &v199[-v42];
  MEMORY[0x1895F8858](v43);
  uint64_t v218 = &v199[-v44];
  MEMORY[0x1895F8858](v45);
  __int128 v47 = &v199[-v46];
  MEMORY[0x1895F8858](v48);
  char v50 = &v199[-v49];
  MEMORY[0x1895F8858](v51);
  uint64_t v53 = &v199[-v52];
  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(a1, a2);
    return 0LL;
  }

  uint64_t v211 = v34;
  uint64_t v234 = a1;
  if (dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter() >= 12)
  {
    uint64_t v55 = v211;
    uint64_t v229 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v211 + 16);
    v229(v53, (uint64_t)v234, a2);
    uint64_t v56 = v233;
LABEL_7:
    char v58 = dispatch thunk of FloatingPoint.isFinite.getter();
    goto LABEL_9;
  }

  uint64_t v57 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  uint64_t v55 = v211;
  uint64_t v229 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v211 + 16);
  v229(v53, (uint64_t)v234, a2);
  uint64_t v56 = v233;
  if (v57 >= 53) {
    goto LABEL_7;
  }
  char v58 = 0;
LABEL_9:
  BOOL v59 = *(void (**)(_BYTE *, uint64_t))(v55 + 8);
  v59(v53, a2);
  v229(v50, (uint64_t)v234, a2);
  if ((v58 & 1) == 0)
  {
    v59(v50, a2);
    goto LABEL_15;
  }

  char v60 = dispatch thunk of FloatingPoint.isZero.getter();
  v59(v50, a2);
  if ((v60 & 1) != 0) {
    goto LABEL_15;
  }
  Swift::Int v201 = v47;
  dispatch thunk of FloatingPoint.exponent.getter();
  uint64_t v61 = Double.exponent.getter();
  int64_t v236 = v61;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_35:
      uint64_t v85 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v84 = v231;
      if (v85 >= v61) {
        goto LABEL_36;
      }
      goto LABEL_59;
    }

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(_BYTE *, uint64_t);
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  int v66;
  void (*v68)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v69;
  _BYTE *v70;
  int v71;
  double v72;
  void (*v73)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v74;
  _BYTE *v76;
  int v77;
  void (*v78)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v79;
  _BYTE *v80;
  unint64_t result;
  char v82;
  uint64_t v83;
  _BYTE *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  _BYTE *v95;
  __int16 v96;
  _BYTE *v97;
  void (*v98)(_BYTE *, uint64_t);
  uint64_t v99;
  char v100;
  _BYTE *v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v108;
  _BYTE *v109;
  void (*v110)(_BYTE *, uint64_t);
  uint64_t v111;
  __int16 v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  _BYTE *v117;
  void (*v118)(_BYTE *, uint64_t);
  uint64_t v119;
  unsigned __int8 v120;
  _BYTE *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t AssociatedConformanceWitness;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  char v133;
  void (*v134)(_BYTE *, uint64_t);
  _BYTE *v135;
  uint64_t v136;
  _BYTE *v137;
  _BYTE *v138;
  char v139;
  void (*v140)(_BYTE *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  _BYTE *v147;
  char v148;
  uint64_t v149;
  char v150;
  _BYTE *v151;
  uint64_t v152;
  _BYTE *v153;
  char v154;
  _BYTE *v155;
  uint64_t v156;
  void (*v157)(_BYTE *, uint64_t);
  _BYTE *v158;
  _BYTE *v159;
  uint64_t v160;
  BOOL v161;
  _BYTE *v162;
  void (*v163)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  _BYTE *v167;
  _BYTE *v168;
  _BYTE *v169;
  _BYTE *v170;
  char v171;
  void (*v172)(_BYTE *, uint64_t);
  _BYTE *v173;
  _BYTE *v174;
  int64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  char v181;
  _BYTE *v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  int64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  _BYTE *v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE v201[4];
  int v202;
  _BYTE *v203;
  _BYTE *v204;
  _BYTE *v205;
  _BYTE *v206;
  _BYTE *v207;
  _BYTE *v208;
  _BYTE *v209;
  _BYTE *v210;
  uint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  _BYTE *v214;
  uint64_t v215;
  _BYTE *v216;
  _BYTE *v217;
  _BYTE *v218;
  _BYTE *v219;
  _BYTE *v220;
  _BYTE *v221;
  _BYTE *v222;
  _BYTE *v223;
  _BYTE *v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  void (*v231)(_BYTE *, uint64_t, uint64_t);
  uint64_t v232;
  uint64_t v233;
  _BYTE *v234;
  uint64_t v235;
  _BYTE *v236;
  uint64_t v237;
  int64_t v238;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v228 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v229 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v227 = &v201[-v5];
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v225 = *(void *)(v6 - 8);
  uint64_t v226 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v224 = &v201[-v7];
  swift_getAssociatedTypeWitness();
  unint64_t v232 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v215 = *(void *)(*(void *)(v232 + 24) + 16LL);
  uint64_t v211 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v211);
  uint64_t v210 = &v201[-v8];
  uint64_t v235 = swift_checkMetadataState();
  uint64_t v233 = *(void *)(v235 - 8);
  MEMORY[0x1895F8858](v235);
  uint64_t v217 = &v201[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v10);
  uint64_t v216 = &v201[-v11];
  MEMORY[0x1895F8858](v12);
  uint64_t v204 = &v201[-v13];
  MEMORY[0x1895F8858](v14);
  char v206 = &v201[-v15];
  MEMORY[0x1895F8858](v16);
  uint64_t v214 = &v201[-v17];
  MEMORY[0x1895F8858](v18);
  uint64_t v223 = &v201[-v19];
  MEMORY[0x1895F8858](v20);
  uint64_t v205 = &v201[-v21];
  MEMORY[0x1895F8858](v22);
  Foundation::Date v207 = &v201[-v23];
  MEMORY[0x1895F8858](v24);
  Swift::Int v208 = &v201[-v25];
  MEMORY[0x1895F8858](v26);
  uint64_t v209 = &v201[-v27];
  MEMORY[0x1895F8858](v28);
  uint64_t v230 = &v201[-v29];
  MEMORY[0x1895F8858](v30);
  Swift::Int v212 = &v201[-v31];
  MEMORY[0x1895F8858](v32);
  uint64_t v234 = &v201[-v33];
  uint64_t v34 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v35);
  uint64_t v222 = &v201[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v37);
  uint64_t v219 = &v201[-v38];
  MEMORY[0x1895F8858](v39);
  unint64_t v221 = &v201[-v40];
  MEMORY[0x1895F8858](v41);
  uint64_t v218 = &v201[-v42];
  MEMORY[0x1895F8858](v43);
  uint64_t v220 = &v201[-v44];
  MEMORY[0x1895F8858](v45);
  __int128 v47 = &v201[-v46];
  MEMORY[0x1895F8858](v48);
  char v50 = &v201[-v49];
  MEMORY[0x1895F8858](v51);
  uint64_t v53 = &v201[-v52];
  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(a1, a2);
LABEL_3:
    uint64_t v54 = 0LL;
    uint64_t v55 = 1;
LABEL_29:
    LOBYTE(v238) = v55;
    return v54 | ((unint64_t)v55 << 32);
  }

  uint64_t v213 = v34;
  int64_t v236 = a1;
  if (dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter() >= 9)
  {
    uint64_t v56 = v213;
    uint64_t v231 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v213 + 16);
    v231(v53, (uint64_t)v236, a2);
    uint64_t v57 = v235;
LABEL_7:
    BOOL v59 = dispatch thunk of FloatingPoint.isFinite.getter();
    goto LABEL_9;
  }

  char v58 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  uint64_t v56 = v213;
  uint64_t v231 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v213 + 16);
  v231(v53, (uint64_t)v236, a2);
  uint64_t v57 = v235;
  if (v58 >= 24) {
    goto LABEL_7;
  }
  BOOL v59 = 0;
LABEL_9:
  char v60 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
  v60(v53, a2);
  v231(v50, (uint64_t)v236, a2);
  if ((v59 & 1) == 0)
  {
    v60(v50, a2);
    goto LABEL_15;
  }

  uint64_t v61 = dispatch thunk of FloatingPoint.isZero.getter();
  v60(v50, a2);
  if ((v61 & 1) != 0) {
    goto LABEL_15;
  }
  uint64_t v203 = v47;
  dispatch thunk of FloatingPoint.exponent.getter();
  uint64_t v62 = Float.exponent.getter();
  uint64_t v238 = v62;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_36:
      char v87 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v86 = v233;
      if (v87 >= v62) {
        goto LABEL_37;
      }
      goto LABEL_60;
    }

uint64_t specialized __PlistDictionaryDecoder.unbox(_:as:)(void *a1)
{
  if (swift_dynamicCast())
  {
    uint64_t v3 = v8;
    BOOL v4 = v8 == 0x6C6C756E24LL && v9 == 0xE500000000000000LL;
    if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  else
  {
    uint64_t v3 = *(void *)(v1 + 32);
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x189617FA8], a1, v6);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v3;
}

{
  char v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  if (v7 == 0x6C6C756E24LL && v8 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0) {
    return 2LL;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1896184C8], a1, v6);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

{
  char v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  if (v7 == 0x6C6C756E24LL && v8 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0) {
    return 0LL;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  static DecodingError._typeMismatch(at:expectation:reality:)((uint64_t)&type metadata for Data, a1, v6);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

_OWORD *specialized __PlistDictionaryDecoder.decode(_:)()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v14);
  swift_bridgeObjectRelease();
  uint64_t v2 = MEMORY[0x189617FA8];
  if (swift_dynamicCast())
  {
    if (v12 == 0x6C6C756E24LL && v13 == 0xE500000000000000LL) {
      goto LABEL_10;
    }
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
    {
LABEL_11:
      uint64_t v8 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v10 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      void *v10 = v2;
      *(void *)&v14[0] = 0LL;
      *((void *)&v14[0] + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      uint64_t v6 = v14;
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  *MEMORY[0x189619368],  v8);
      swift_willThrow();
      return v6;
    }
  }

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v14);
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)specialized __PlistDictionaryDecoder.unbox(_:as:)(v14);
  uint64_t v2 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v0 && !v2)
  {
    __break(1u);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  return v6;
}

uint64_t specialized __PlistDictionaryDecoder.decode(_:)()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24LL && v12 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0) {
        goto LABEL_7;
      }
    }

    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v10 = MEMORY[0x1896184C8];
    *(void *)&v13[0] = 0LL;
    *((void *)&v13[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  *MEMORY[0x189619368],  v8);
    swift_willThrow();
    return v7 & 1;
  }

{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v13);
  swift_bridgeObjectRelease();
  if (v11 == 0x6C6C756E24LL && v12 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
LABEL_10:
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x189618560];
    *(void *)&v13[0] = 0LL;
    *((void *)&v13[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    return swift_willThrow();
  }

{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int128 *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24LL && v14 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v10 = MEMORY[0x189618CD8];
    *(void *)&v15[0] = 0LL;
    *((void *)&v15[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = v15;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  *MEMORY[0x189619368],  v8);
    swift_willThrow();
    return (uint64_t)v0;
  }

{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int128 *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24LL && v14 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v10 = MEMORY[0x189618740];
    *(void *)&v15[0] = 0LL;
    *((void *)&v15[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = v15;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  *MEMORY[0x189619368],  v8);
    swift_willThrow();
    return (uint64_t)v0;
  }

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24LL && v12 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x18961A350];
    *(void *)&v13[0] = 0LL;
    *((void *)&v13[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = v13;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    swift_willThrow();
    return (uint64_t)v0;
  }

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24LL && v12 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x18961A408];
    *(void *)&v13[0] = 0LL;
    *((void *)&v13[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = v13;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    swift_willThrow();
    return (uint64_t)v0;
  }

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24LL && v12 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x18961A458];
    *(void *)&v13[0] = 0LL;
    *((void *)&v13[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = (unint64_t)v13;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    swift_willThrow();
    return v0;
  }

{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int128 *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24LL && v14 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v10 = MEMORY[0x18961A4C0];
    *(void *)&v15[0] = 0LL;
    *((void *)&v15[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = v15;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  *MEMORY[0x189619368],  v8);
    swift_willThrow();
    return (uint64_t)v0;
  }

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24LL && v12 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x18961A610];
    *(void *)&v13[0] = 0LL;
    *((void *)&v13[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = v13;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    swift_willThrow();
    return (uint64_t)v0;
  }

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24LL && v12 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x18961A800];
    *(void *)&v13[0] = 0LL;
    *((void *)&v13[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = v13;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    swift_willThrow();
    return (uint64_t)v0;
  }

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24LL && v12 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x18961A860];
    *(void *)&v13[0] = 0LL;
    *((void *)&v13[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = (unint64_t)v13;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    swift_willThrow();
    return v0;
  }

{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int128 *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24LL && v14 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }

    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v10 = MEMORY[0x18961A8C8];
    *(void *)&v15[0] = 0LL;
    *((void *)&v15[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v0 = v15;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  *MEMORY[0x189619368],  v8);
    swift_willThrow();
    return (uint64_t)v0;
  }

{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v13);
  swift_bridgeObjectRelease();
  if (v11 == 0x6C6C756E24LL && v12 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
LABEL_10:
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x189618620];
    *(void *)&v13[0] = 0LL;
    *((void *)&v13[0] + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    return swift_willThrow();
  }

__int128 *specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t v2 = v0;
  uint64_t v36 = *MEMORY[0x1895F89C0];
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    uint64_t v14 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v16 = MEMORY[0x189617FA8];
    uint64_t v17 = *(void *)(*v0 + 32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    uint64_t v19 = v2[3];
    *(void *)(inited + 56) = &type metadata for _CodingKey;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v20 = swift_allocObject();
    *(void *)(inited + 32) = v20;
    *(void *)(v20 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
    *(void *)(v20 + 24) = 0LL;
    *(void *)(v20 + 32) = 0LL;
    *(_BYTE *)(v20 + 40) = 2;
    *(void *)&__int128 v33 = v17;
    swift_bridgeObjectRetain();
    char v5 = &v33;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
    swift_willThrow();
    return v5;
  }

  char v5 = (__int128 *)*v0;
  uint64_t v6 = *(void **)(*v2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *((void *)v5 + 4) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
    *((void *)v5 + 4) = v6;
  }

  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
    *((void *)v5 + 4) = v6;
  }

  uint64_t v34 = &type metadata for _CodingKey;
  unint64_t v10 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  unint64_t v35 = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)&__int128 v33 = v11;
  *(void *)(v11 + 24) = 0LL;
  *(void *)(v11 + 32) = 0LL;
  *(void *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(_BYTE *)(v11 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v33, (uint64_t)&v6[5 * v9 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v33);
  uint64_t v12 = specialized __PlistDictionaryDecoder.unbox(_:as:)(&v33);
  if (!v1)
  {
    char v5 = (__int128 *)v12;
    uint64_t v22 = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    if (!v22)
    {
      uint64_t v26 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v28 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v28 = MEMORY[0x189617FA8];
      uint64_t v29 = *(void *)(*v2 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v30 = swift_initStackObject();
      *(_OWORD *)(v30 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v31 = v2[3];
      *(void *)(v30 + 56) = &type metadata for _CodingKey;
      *(void *)(v30 + 64) = v10;
      uint64_t v32 = swift_allocObject();
      *(void *)(v30 + 32) = v32;
      *(void *)(v32 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v31;
      *(void *)(v32 + 24) = 0LL;
      *(void *)(v32 + 32) = 0LL;
      *(_BYTE *)(v32 + 40) = 2;
      *(void *)&__int128 v33 = v29;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v30);
      *(void *)&__int128 v33 = 0LL;
      *((void *)&v33 + 1) = 0xE000000000000000LL;
      char v5 = &v33;
      _StringGuts.grow(_:)(35LL);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v28,  *MEMORY[0x189619368],  v26);
      swift_willThrow();
      goto LABEL_10;
    }

    uint64_t v23 = v2[3];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v2[3] = v25;
      $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
      return v5;
    }

uint64_t specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t v2 = v0;
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 < *(void *)(v3 + 16))
  {
    char v5 = (__int128 *)*v0;
    uint64_t v6 = *(void **)(*v2 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v5 + 4) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
      *((void *)v5 + 4) = v6;
    }

    unint64_t v9 = v6[2];
    unint64_t v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
      *((void *)v5 + 4) = v6;
    }

    __int128 v33 = &type metadata for _CodingKey;
    unint64_t v10 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v34 = v10;
    uint64_t v11 = swift_allocObject();
    *(void *)&__int128 v32 = v11;
    *(void *)(v11 + 24) = 0LL;
    *(void *)(v11 + 32) = 0LL;
    *(void *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
    *(_BYTE *)(v11 + 40) = 2;
    _OWORD v6[2] = v9 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v32, (uint64_t)&v6[5 * v9 + 4]);
    if (v4 < 0)
    {
      __break(1u);
    }

    else if ((unint64_t)v4 < *(void *)(v3 + 16))
    {
      outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v32);
      char v12 = specialized __PlistDictionaryDecoder.unbox(_:as:)(&v32);
      if (v1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
LABEL_13:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
        return v5 & 1;
      }

      char v20 = v12;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      if (v20 == 2)
      {
        uint64_t v21 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v23 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v23 = MEMORY[0x1896184C8];
        uint64_t v24 = *(void *)(*v2 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v26 = v2[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v10;
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v26;
        *(void *)(v27 + 24) = 0LL;
        *(void *)(v27 + 32) = 0LL;
        *(_BYTE *)(v27 + 40) = 2;
        *(void *)&__int128 v32 = v24;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&__int128 v32 = 0LL;
        *((void *)&v32 + 1) = 0xE000000000000000LL;
        char v5 = &v32;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  *MEMORY[0x189619368],  v21);
        swift_willThrow();
        goto LABEL_13;
      }

      uint64_t v29 = v2[3];
      BOOL v30 = __OFADD__(v29, 1LL);
      uint64_t v31 = v29 + 1;
      if (!v30)
      {
        LOBYTE(v5) = v20 & 1;
        v2[3] = v31;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
        return v5 & 1;
      }

__int128 *specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( uint64_t (*a1)(__int128 *), uint64_t a2)
{
  char v5 = v2;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 < *(void *)(v6 + 16))
  {
    unint64_t v9 = (__int128 *)*v2;
    unint64_t v10 = *(void **)(*v5 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v9 + 4) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10[2] + 1LL,  1,  v10);
      *((void *)v9 + 4) = v10;
    }

    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v10);
      *((void *)v9 + 4) = v10;
    }

    uint64_t v37 = &type metadata for _CodingKey;
    unint64_t v34 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v38 = v34;
    uint64_t v14 = swift_allocObject();
    *(void *)&__int128 v36 = v14;
    *(void *)(v14 + 24) = 0LL;
    *(void *)(v14 + 32) = 0LL;
    *(void *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
    *(_BYTE *)(v14 + 40) = 2;
    void v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }

    else if ((unint64_t)v7 < *(void *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v36);
      uint64_t v15 = a1(&v36);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }

      unint64_t v9 = (__int128 *)v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      if (((unsigned __int16)v9 & 0x100) != 0)
      {
        uint64_t v26 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v28 = a2;
        uint64_t v29 = *(void *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v31 = v5[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v34;
        uint64_t v32 = swift_allocObject();
        *(void *)(inited + 32) = v32;
        *(void *)(v32 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v31;
        *(void *)(v32 + 24) = 0LL;
        *(void *)(v32 + 32) = 0LL;
        *(_BYTE *)(v32 + 40) = 2;
        *(void *)&__int128 v36 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&__int128 v36 = 0LL;
        *((void *)&v36 + 1) = 0xE000000000000000LL;
        unint64_t v9 = &v36;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v28,  *MEMORY[0x189619368],  v26);
        swift_willThrow();
        goto LABEL_15;
      }

      uint64_t v23 = v5[3];
      BOOL v24 = __OFADD__(v23, 1LL);
      uint64_t v25 = v23 + 1;
      if (!v24)
      {
        v5[3] = v25;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;
  void *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  __int128 v36;
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;
  char v5 = v2;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 < *(void *)(v6 + 16))
  {
    unint64_t v9 = (__int128 *)*v2;
    unint64_t v10 = *(void **)(*v5 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v9 + 4) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10[2] + 1LL,  1,  v10);
      *((void *)v9 + 4) = v10;
    }

    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v10);
      *((void *)v9 + 4) = v10;
    }

    uint64_t v37 = &type metadata for _CodingKey;
    unint64_t v34 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v38 = v34;
    uint64_t v14 = swift_allocObject();
    *(void *)&__int128 v36 = v14;
    *(void *)(v14 + 24) = 0LL;
    *(void *)(v14 + 32) = 0LL;
    *(void *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
    *(_BYTE *)(v14 + 40) = 2;
    void v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }

    else if ((unint64_t)v7 < *(void *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v36);
      uint64_t v15 = a1(&v36);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }

      unint64_t v9 = (__int128 *)v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      if ((v9 & 0x10000) != 0)
      {
        uint64_t v26 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v28 = a2;
        uint64_t v29 = *(void *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v31 = v5[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v34;
        uint64_t v32 = swift_allocObject();
        *(void *)(inited + 32) = v32;
        *(void *)(v32 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v31;
        *(void *)(v32 + 24) = 0LL;
        *(void *)(v32 + 32) = 0LL;
        *(_BYTE *)(v32 + 40) = 2;
        *(void *)&__int128 v36 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&__int128 v36 = 0LL;
        *((void *)&v36 + 1) = 0xE000000000000000LL;
        unint64_t v9 = &v36;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v28,  *MEMORY[0x189619368],  v26);
        swift_willThrow();
        goto LABEL_15;
      }

      uint64_t v23 = v5[3];
      BOOL v24 = __OFADD__(v23, 1LL);
      uint64_t v25 = v23 + 1;
      if (!v24)
      {
        v5[3] = v25;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;
  void *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  __int128 v38;
  ValueMetadata *v39;
  unint64_t v40;
  uint64_t v41;
  char v5 = v2;
  uint64_t v41 = *MEMORY[0x1895F89C0];
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 < *(void *)(v6 + 16))
  {
    unint64_t v9 = (__int128 *)*v2;
    unint64_t v10 = *(void **)(*v5 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v9 + 4) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10[2] + 1LL,  1,  v10);
      *((void *)v9 + 4) = v10;
    }

    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v10);
      *((void *)v9 + 4) = v10;
    }

    uint64_t v39 = &type metadata for _CodingKey;
    __int128 v36 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v40 = v36;
    uint64_t v14 = swift_allocObject();
    *(void *)&unint64_t v38 = v14;
    *(void *)(v14 + 24) = 0LL;
    *(void *)(v14 + 32) = 0LL;
    *(void *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
    *(_BYTE *)(v14 + 40) = 2;
    void v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v38, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }

    else if ((unint64_t)v7 < *(void *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v38);
      uint64_t v15 = a1(&v38);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }

      unint64_t v9 = (__int128 *)v15;
      BOOL v24 = v16;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      if ((v24 & 1) != 0)
      {
        uint64_t v28 = type metadata accessor for DecodingError();
        swift_allocError();
        BOOL v30 = v29;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *BOOL v30 = a2;
        uint64_t v31 = *(void *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        __int128 v33 = v5[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v36;
        unint64_t v34 = swift_allocObject();
        *(void *)(inited + 32) = v34;
        *(void *)(v34 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v33;
        *(void *)(v34 + 24) = 0LL;
        *(void *)(v34 + 32) = 0LL;
        *(_BYTE *)(v34 + 40) = 2;
        *(void *)&unint64_t v38 = v31;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&unint64_t v38 = 0LL;
        *((void *)&v38 + 1) = 0xE000000000000000LL;
        unint64_t v9 = &v38;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v30,  *MEMORY[0x189619368],  v28);
        swift_willThrow();
        goto LABEL_15;
      }

      uint64_t v25 = v5[3];
      uint64_t v26 = __OFADD__(v25, 1LL);
      uint64_t v27 = v25 + 1;
      if (!v26)
      {
        v5[3] = v27;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }

unint64_t specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)( uint64_t (*a1)(__int128 *), uint64_t a2)
{
  char v5 = v2;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 < *(void *)(v6 + 16))
  {
    unint64_t v9 = *v2;
    unint64_t v10 = *(void **)(*v5 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v9 + 32) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10[2] + 1LL,  1,  v10);
      *(void *)(v9 + 32) = v10;
    }

    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v10);
      *(void *)(v9 + 32) = v10;
    }

    uint64_t v37 = &type metadata for _CodingKey;
    unint64_t v34 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v38 = v34;
    uint64_t v14 = swift_allocObject();
    *(void *)&__int128 v36 = v14;
    *(void *)(v14 + 24) = 0LL;
    *(void *)(v14 + 32) = 0LL;
    *(void *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
    *(_BYTE *)(v14 + 40) = 2;
    void v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }

    else if ((unint64_t)v7 < *(void *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v36);
      uint64_t v15 = a1(&v36);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }

      unint64_t v9 = v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      if ((v9 & 0x100000000LL) != 0)
      {
        uint64_t v26 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v28 = a2;
        uint64_t v29 = *(void *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v31 = v5[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v34;
        uint64_t v32 = swift_allocObject();
        *(void *)(inited + 32) = v32;
        *(void *)(v32 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v31;
        *(void *)(v32 + 24) = 0LL;
        *(void *)(v32 + 32) = 0LL;
        *(_BYTE *)(v32 + 40) = 2;
        *(void *)&__int128 v36 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&__int128 v36 = 0LL;
        *((void *)&v36 + 1) = 0xE000000000000000LL;
        unint64_t v9 = (unint64_t)&v36;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v28,  *MEMORY[0x189619368],  v26);
        swift_willThrow();
        goto LABEL_15;
      }

      uint64_t v23 = v5[3];
      BOOL v24 = __OFADD__(v23, 1LL);
      uint64_t v25 = v23 + 1;
      if (!v24)
      {
        v5[3] = v25;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }

float specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t v3 = v0;
  uint64_t v36 = *MEMORY[0x1895F89C0];
  uint64_t v4 = v0[1];
  uint64_t v5 = v0[3];
  if (v5 < *(void *)(v4 + 16))
  {
    uint64_t v6 = *v0;
    uint64_t v7 = *(void **)(*v3 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 32) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v7[2] + 1LL,  1,  v7);
      *(void *)(v6 + 32) = v7;
    }

    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v10 + 1,  1,  v7);
      *(void *)(v6 + 32) = v7;
    }

    unint64_t v34 = &type metadata for _CodingKey;
    unint64_t v11 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v35 = v11;
    uint64_t v12 = swift_allocObject();
    *(void *)&__int128 v33 = v12;
    *(void *)(v12 + 24) = 0LL;
    *(void *)(v12 + 32) = 0LL;
    *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
    *(_BYTE *)(v12 + 40) = 2;
    v7[2] = v10 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v33, (uint64_t)&v7[5 * v10 + 4]);
    if (v5 < 0)
    {
      __break(1u);
    }

    else if ((unint64_t)v5 < *(void *)(v4 + 16))
    {
      outlined init with copy of Any(v4 + 32 * v5 + 32, (uint64_t)&v33);
      specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(&v33);
      if (v1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }

      uint64_t v21 = v13;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      if ((v21 & 0x100000000LL) != 0)
      {
        uint64_t v25 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v27 = v26;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v27 = MEMORY[0x189618620];
        uint64_t v28 = *(void *)(*v3 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v30 = v3[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v11;
        uint64_t v31 = swift_allocObject();
        *(void *)(inited + 32) = v31;
        *(void *)(v31 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v30;
        *(void *)(v31 + 24) = 0LL;
        *(void *)(v31 + 32) = 0LL;
        *(_BYTE *)(v31 + 40) = 2;
        *(void *)&__int128 v33 = v28;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&__int128 v33 = 0LL;
        *((void *)&v33 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619368],  v25);
        swift_willThrow();
        goto LABEL_15;
      }

      uint64_t v22 = v3[3];
      BOOL v23 = __OFADD__(v22, 1LL);
      uint64_t v24 = v22 + 1;
      if (!v23)
      {
        float v2 = *(float *)&v21;
        v3[3] = v24;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }

double specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t v3 = v0;
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v4 = v0[1];
  uint64_t v5 = v0[3];
  if (v5 < *(void *)(v4 + 16))
  {
    uint64_t v6 = *v0;
    uint64_t v7 = *(void **)(*v3 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 32) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v7[2] + 1LL,  1,  v7);
      *(void *)(v6 + 32) = v7;
    }

    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v10 + 1,  1,  v7);
      *(void *)(v6 + 32) = v7;
    }

    uint64_t v36 = &type metadata for _CodingKey;
    unint64_t v11 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v37 = v11;
    uint64_t v12 = swift_allocObject();
    *(void *)&__int128 v35 = v12;
    *(void *)(v12 + 24) = 0LL;
    *(void *)(v12 + 32) = 0LL;
    *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
    *(_BYTE *)(v12 + 40) = 2;
    v7[2] = v10 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v35, (uint64_t)&v7[5 * v10 + 4]);
    if (v5 < 0)
    {
      __break(1u);
    }

    else if ((unint64_t)v5 < *(void *)(v4 + 16))
    {
      outlined init with copy of Any(v4 + 32 * v5 + 32, (uint64_t)&v35);
      uint64_t v13 = specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)((uint64_t)&v35);
      if (v1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }

      uint64_t v22 = v13;
      char v23 = v14;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
      if ((v23 & 1) != 0)
      {
        uint64_t v27 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v29 = v28;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        void *v29 = MEMORY[0x189618560];
        uint64_t v30 = *(void *)(*v3 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v32 = v3[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v11;
        uint64_t v33 = swift_allocObject();
        *(void *)(inited + 32) = v33;
        *(void *)(v33 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v32;
        *(void *)(v33 + 24) = 0LL;
        *(void *)(v33 + 32) = 0LL;
        *(_BYTE *)(v33 + 40) = 2;
        *(void *)&__int128 v35 = v30;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&__int128 v35 = 0LL;
        *((void *)&v35 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104LL))( v29,  *MEMORY[0x189619368],  v27);
        swift_willThrow();
        goto LABEL_15;
      }

      uint64_t v24 = v3[3];
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (!v25)
      {
        double v2 = *(double *)&v22;
        v3[3] = v26;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Int16 and conformance Int16()
{
  unint64_t result = lazy protocol witness table cache variable for type Int16 and conformance Int16;
  if (!lazy protocol witness table cache variable for type Int16 and conformance Int16)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A430], MEMORY[0x18961A408]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int16 and conformance Int16);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Int16 and conformance Int16;
  if (!lazy protocol witness table cache variable for type Int16 and conformance Int16)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A428], MEMORY[0x18961A408]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int16 and conformance Int16);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Int8 and conformance Int8()
{
  unint64_t result = lazy protocol witness table cache variable for type Int8 and conformance Int8;
  if (!lazy protocol witness table cache variable for type Int8 and conformance Int8)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A378], MEMORY[0x18961A350]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int8 and conformance Int8);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Int8 and conformance Int8;
  if (!lazy protocol witness table cache variable for type Int8 and conformance Int8)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A370], MEMORY[0x18961A350]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int8 and conformance Int8);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618628], MEMORY[0x189618620]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer;
  if (!lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _PlistDictionaryUnkeyedDecodingContainer,  &unk_189C8BC58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer);
  }

  return result;
}

uint64_t sub_18336AE50()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for _PlistDictionaryKeyedDecodingContainer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _PlistDictionaryKeyedDecodingContainer);
}

void *initializeBufferWithCopyOfBuffer for _PlistDictionaryKeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _PlistDictionaryKeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _PlistDictionaryKeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for _PlistDictionaryKeyedDecodingContainer()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for _PlistDictionaryUnkeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _PlistDictionaryUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _PlistDictionaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

void *type metadata accessor for _PlistDictionaryUnkeyedDecodingContainer()
{
  return &unk_189C8BC58;
}

uint64_t sub_18336B100()
{
  return swift_deallocObject();
}

uint64_t sub_18336B12C()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _PlistDictionaryKeyedDecodingContainer.allKeys.getter(uint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  swift_bridgeObjectRetain();
  return MEMORY[0x186E1D188](v4, v5, v2, v3);
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance __PlistDictionaryDecoder@<X0>( ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance __PlistDictionaryDecoder( a1,  a2,  a3);
}

uint64_t _CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v9 = v8;
  unsigned __int8 v11 = *a1;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  int v28 = a5 & 1;
  int v29 = a7 & 1;
  uint64_t v15 = *a3;
  uint64_t v14 = a3[1];
  uint64_t v16 = *a8;
  char v17 = *((_BYTE *)a8 + 8);
  *(void *)(v9 + 56) = 0LL;
  *(_BYTE *)(v9 + 64) = 1;
  *(void *)(v9 + 72) = 0LL;
  *(_BYTE *)(v9 + 80) = 1;
  *(_BYTE *)(v9 + 24) = v11;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
  *(void *)(v9 + 104) = v15;
  *(void *)(v9 + 112) = v14;
  if (v12)
  {
    swift_unknownObjectRetain();
  }

  else
  {
    uint64_t v27 = a6;
    uint64_t v19 = one-time initialization token for cache;
    swift_unknownObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v20 = (uint64_t *)(static TimeZoneCache.cache + 16);
    uint64_t v21 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v21);
    closure #1 in TimeZoneCache.default.getter(v20, &v33);
    os_unfair_lock_unlock(v21);
    swift_release_n();
    uint64_t v12 = v33;
    uint64_t v13 = v34;
    a6 = v27;
  }

  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 48) = v13;
  *(void *)(v9 + 56) = a4;
  *(_BYTE *)(v9 + 64) = v28 != 0;
  *(void *)(v9 + 72) = a6;
  *(_BYTE *)(v9 + 80) = v29 != 0;
  *(void *)(v9 + 88) = v16;
  *(_BYTE *)(v9 + 96) = v17;
  v32[0] = v11;
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  if (v15)
  {
    swift_unknownObjectRetain();
  }

  else
  {
    uint64_t v22 = one-time initialization token for cache;
    swift_unknownObjectRetain();
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v23 = static LocaleCache.cache + 16;
    uint64_t v24 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v24);
    closure #1 in LocaleCache.fixed(_:)(v23, 0LL, 0xE000000000000000LL, &v31);
    os_unfair_lock_unlock(v24);
    swift_release_n();
    uint64_t v14 = *((void *)&v31 + 1);
    uint64_t v15 = v31;
  }

  *(void *)&__int128 v31 = v15;
  *((void *)&v31 + 1) = v14;
  uint64_t v25 = specialized static _CalendarICU.icuCalendar(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( v32,  &v33,  (uint64_t)&v31,  a4,  v28,  a6,  v29);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(void *)(v9 + 32) = v25;
  return v9;
}

uint64_t _CalendarICU.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _CalendarICU.preferredFirstWeekday.getter()
{
  void (*v5)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  void v10[18];
  _BYTE v11[144];
  _BYTE v12[48];
  uint64_t v13;
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 104);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 112);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v5(v10, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v10,  (uint64_t)v11,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v12,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v6 = v13;
    swift_bridgeObjectRetain();
    outlined release of LocalePreferences?((uint64_t)v11);
    if (!v6)
    {
      return 0LL;
    }

    else
    {
      if (*(void *)(v6 + 16)
        && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(v1 + 24)), (v8 & 1) != 0))
      {
        uint64_t v2 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
      }

      else
      {
        uint64_t v2 = 0LL;
      }

      swift_bridgeObjectRelease();
    }
  }

  return v2;
}

uint64_t _CalendarICU.firstWeekday.getter(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  a1(&v6);
  uint64_t v4 = v6;
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return v4;
}

uint64_t _CalendarICU.preferredMinimumDaysInFirstweek.getter()
{
  void (*v5)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  void v10[18];
  _BYTE v11[144];
  _BYTE v12[56];
  uint64_t v13;
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 104);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 112);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v5(v10, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v10,  (uint64_t)v11,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v12,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v6 = v13;
    swift_bridgeObjectRetain();
    outlined release of LocalePreferences?((uint64_t)v11);
    if (!v6)
    {
      return 0LL;
    }

    else
    {
      if (*(void *)(v6 + 16)
        && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(v1 + 24)), (v8 & 1) != 0))
      {
        uint64_t v2 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
      }

      else
      {
        uint64_t v2 = 0LL;
      }

      swift_bridgeObjectRelease();
    }
  }

  return v2;
}

uint64_t _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(&v4);
  uint64_t v2 = v4;
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, char a10)
{
  uint64_t v11 = a6;
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = a2;
  if (a2)
  {
    uint64_t v18 = a4;
    if (a4) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 104);
    uint64_t v23 = *(void *)(a1 + 112);
    uint64_t v25 = a8;
    swift_unknownObjectRetain();
    a3 = v23;
    uint64_t v16 = v31;
    a8 = v25;
    uint64_t v11 = a6;
    uint64_t v18 = a4;
    if (a4)
    {
LABEL_3:
      char v19 = a10;
      if ((a7 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v11 = *(void *)(a1 + 56);
      char v20 = *(_BYTE *)(a1 + 64);
      if ((v19 & 1) != 0) {
        goto LABEL_5;
      }
LABEL_9:
      char v22 = 0;
      uint64_t v21 = a8;
      goto LABEL_10;
    }
  }

  uint64_t v26 = v11;
  uint64_t v27 = a8;
  uint64_t v28 = a3;
  swift_unknownObjectRetain();
  a3 = v28;
  a8 = v27;
  uint64_t v11 = v26;
  uint64_t v18 = v15;
  a5 = v16;
  char v19 = a10;
  if ((a7 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  char v20 = 0;
  if ((v19 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(_BYTE *)(a1 + 80);
LABEL_10:
  unsigned __int8 v37 = *(_BYTE *)(a1 + 24);
  v36[0] = v18;
  v36[1] = a5;
  v35[0] = v17;
  v35[1] = a3;
  uint64_t v33 = 0LL;
  char v34 = 1;
  type metadata accessor for _CalendarICU();
  uint64_t v29 = swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  _CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( &v37,  v36,  v35,  v11,  v20,  v21,  v22,  &v33);
  uint64_t result = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU( &lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU,  (uint64_t)&protocol conformance descriptor for _CalendarICU);
  *a9 = v29;
  a9[1] = result;
  return result;
}

uint64_t _CalendarICU.hash(into:)(uint64_t a1)
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  Swift::UInt v27;
  void v29[18];
  _BYTE v30[144];
  _BYTE v31[48];
  uint64_t v32;
  uint64_t v33;
  uint64_t v2 = v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  Swift::UInt v5 = *(unsigned __int8 *)(v1 + 24);
  Hasher._combine(_:)(v5);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 112);
  swift_unknownObjectRetain();
  v8(a1, ObjectType, v6);
  swift_unknownObjectRelease();
  if (*(_BYTE *)(v1 + 64) == 1) {
    Swift::UInt Attribute = (int)ucal_getAttribute();
  }
  else {
    Swift::UInt Attribute = *(void *)(v1 + 56);
  }
  Hasher._combine(_:)(Attribute);
  if (*(_BYTE *)(v1 + 80) == 1) {
    Swift::UInt v10 = (int)ucal_getAttribute();
  }
  else {
    Swift::UInt v10 = *(void *)(v1 + 72);
  }
  Hasher._combine(_:)(v10);
  if (*(void *)(v1 + 104))
  {
    uint64_t v11 = *(void *)(v1 + 112);
    uint64_t v12 = swift_getObjectType();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
    swift_unknownObjectRetain();
    v13(v12, v11);
    swift_unknownObjectRelease();
  }

  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 104))
  {
    uint64_t v14 = *(void *)(v1 + 112);
    uint64_t v15 = swift_getObjectType();
    uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 464);
    swift_unknownObjectRetain();
    v16(v29, v15, v14);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v29,  (uint64_t)v30,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v30,  (uint64_t)v31,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v31) != 1)
    {
      uint64_t v17 = v32;
      swift_bridgeObjectRetain();
      outlined release of LocalePreferences?((uint64_t)v30);
      if (v17)
      {
        if (*(void *)(v17 + 16))
        {
          uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
          if ((v19 & 1) != 0)
          {
            char v20 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
            swift_bridgeObjectRelease();
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v20);
            if (!*(void *)(v2 + 104)) {
              goto LABEL_24;
            }
            goto LABEL_18;
          }
        }

        swift_bridgeObjectRelease();
      }
    }
  }

  Hasher._combine(_:)(0);
  if (!*(void *)(v2 + 104))
  {
LABEL_24:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

NSCalendar __swiftcall _CalendarICU.bridgeToNSCalendar()()
{
  uint64_t v1 = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU( &lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU,  (uint64_t)&protocol conformance descriptor for _CalendarICU);
  uint64_t v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v0;
  *(void *)(v4 + 24) = v1;
  *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  uint64_t v5 = *MEMORY[0x1896039C8];
  v7.receiver = v3;
  v7.super_class = v2;
  swift_retain();
  result.super.isa = (Class)objc_msgSendSuper2(&v7, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result.super.isa) {
    __break(1u);
  }
  return result;
}

void _CalendarICU.minimumRange(of:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_18336BD50()
{
  return 0LL;
}

uint64_t closure #1 in _CalendarICU.minimumRange(of:)@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  int Limit = ucal_getLimit();
  uint64_t result = ucal_getLimit();
  if (a1 != 2)
  {
LABEL_6:
    int v7 = result + 1;
    if (!__OFADD__((_DWORD)result, 1))
    {
      if (v7 >= Limit)
      {
        uint64_t v6 = Limit;
        goto LABEL_9;
      }

uint64_t _CalendarICU.maximumRange(of:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for closure #1 in _CalendarICU.maximumRange(of:)((uint64_t)&v4);
  uint64_t v2 = v4;
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

void _CalendarICU._locked_maximumRange(of:)(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_18336C088()
{
  return 0LL;
}

Swift::Int _CalendarICU._locked_algorithmA(smaller:larger:at:)(char *a1, char *a2, uint64_t *a3)
{
  char v3 = *a1;
  char v4 = *a2;
  uint64_t v5 = *a3;
  char v11 = *a2;
  uint64_t v10 = v5;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v11);
  if ((v14 & 1) != 0) {
    goto LABEL_6;
  }
  double time = v12._time;
  double v6 = v13;
  LOBYTE(v10) = v3;
  char v11 = v4;
  v12._double time = v12._time + 0.1;
  Swift::Int_optional v15 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v10,  (Foundation::Calendar::Component)&v11,  v12);
  if (v15.is_nil
    || (Swift::Int value = v15.value,
        LOBYTE(v10) = v3,
        char v11 = v4,
        v12._double time = v6 + time + -0.1,
        Swift::Int_optional v16 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v10,  (Foundation::Calendar::Component)&v11,  v12),  v16.is_nil))
  {
LABEL_6:
    Swift::Int value = 0LL;
  }

  else if (v16.value >= value)
  {
    if (__OFADD__(v16.value, 1LL))
    {
      __break(1u);
    }

    else if (v16.value + 1 >= value)
    {
      goto LABEL_7;
    }

    __break(1u);
    return v16.value;
  }

void _CalendarICU._locked_dateInterval(of:at:)(uint64_t a1)
{
  __asm { BR              X9 }

void sub_18336C3B4()
{
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11) = v1;
  uint64_t v13 = v2;
  _CalendarICU._locked_setToFirstInstant(of:at:)((unsigned __int8 *)&v11);
  int v12 = 0;
  ucal_getMillis();
  double v4 = v3;
  double v5 = v3 / 1000.0 + -978307200.0;
  switch(v1)
  {
    case 0:
      ucal_add();
      ucal_getMillis();
      if (v6 != v4) {
        goto LABEL_8;
      }
      *(double *)uint64_t v0 = v5;
      *(void *)(v0 + 8) = 0x4290000000000000LL;
      *(_BYTE *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
      return;
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 17:
      ucal_add();
      goto LABEL_8;
    case 9:
      ucal_add();
      if (ucal_get() == 12)
      {
        ucal_add();
        int v7 = ucal_get();
      }

      goto LABEL_8;
    default:
LABEL_8:
      ucal_getLimit();
      ucal_set();
      ucal_getLimit();
      ucal_set();
      ucal_getLimit();
      ucal_set();
      ucal_set();
      int v12 = 0;
      ucal_getMillis();
      double v9 = v8 / 1000.0 + -978307200.0;
      double v11 = v9;
      _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v11, (uint64_t)&v13);
      if ((v15 & 1) == 0)
      {
        if (v9 - v14 >= v5)
        {
          double v10 = v9 - v14 - v5;
          goto LABEL_14;
        }

        __break(1u);
LABEL_17:
        __break(1u);
      }

      if (v5 < v9)
      {
        if (v9 >= v5)
        {
          double v10 = v9 - v5;
LABEL_14:
          *(double *)uint64_t v0 = v5;
          *(double *)(v0 + 8) = v10;
          *(_BYTE *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
          return;
        }

        goto LABEL_17;
      }

      *(void *)uint64_t v0 = 0LL;
      *(void *)(v0 + 8) = 0LL;
      *(_BYTE *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
      return;
  }

Swift::Int_optional __swiftcall _CalendarICU._locked_ordinality(of:in:for:)( Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  Swift::Int value = 0LL;
  uint64_t v179 = *MEMORY[0x1895F89C0];
  uint64_t v8 = 1LL;
  int v9 = *(unsigned __int8 *)of;
  double v10 = *v3;
  switch(*(_BYTE *)in)
  {
    case 0:
      switch(*(_BYTE *)of)
      {
        case 1:
        case 0xC:
          goto LABEL_340;
        case 2:
          char v176 = 0;
          double v174 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
          if ((v178 & 1) != 0) {
            goto LABEL_332;
          }
          double time = v177._time;
          LOBYTE(v177._time) = 3;
          _CalendarICU._locked_maximumRange(of:)((uint64_t)&v177);
          if ((v136 & 1) != 0)
          {
            Swift::Int value = 0LL;
            LOBYTE(v8) = 0;
            goto LABEL_401;
          }

          uint64_t v137 = v135 - v134;
          if (__OFSUB__(v135, v134)) {
            goto LABEL_519;
          }
          BOOL v52 = __OFADD__(v137, 1LL);
          uint64_t v138 = v137 + 1;
          if (v52) {
            goto LABEL_520;
          }
          double v139 = floor((v10 - time) / 86400.0 / (double)v138 * 0.96875);
          if ((~*(void *)&v139 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_521;
          }
          if (v139 <= -9.22337204e18) {
            goto LABEL_522;
          }
          if (v139 >= 9.22337204e18) {
            goto LABEL_533;
          }
          double v140 = (floor(v10) + 978307200.0) * 1000.0;
          else {
            uint64_t v141 = (uint64_t)v139 - 10;
          }
          LOBYTE(v8) = 0;
          while (1)
          {
            Swift::Int value = v141 + 1;
            if (__OFADD__(v141, 1LL)) {
              goto LABEL_404;
            }
            LODWORD(v177._time) = 0;
            MEMORY[0x186E21148](*(void *)(v4 + 32));
            ucal_setMillis();
            double v142 = _CalendarICU._locked_add(_:amount:wrap:status:)(2, ++v141, 0);
            if (v142 > v140) {
              goto LABEL_401;
            }
          }

        case 3:
          char v176 = 0;
          double v174 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
          double v143 = v177._time;
          char v144 = v178;
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32));
          ucal_setMillis();
          if ((v144 & 1) != 0) {
            goto LABEL_332;
          }
          a3._double time = floor((v10 - v143) / 86400.0);
          if ((~*(void *)&a3._time & 0x7FF0000000000000LL) == 0) {
            goto LABEL_509;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_510;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_511;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          __break(1u);
LABEL_313:
          LOBYTE(v174) = 3;
          char v176 = 0;
          v177._double time = v10;
          Swift::Int_optional v211 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v211.value;
          if (v211.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v145 = v211.value - 1;
          if (__OFSUB__(v211.value, 1LL)) {
            goto LABEL_512;
          }
          if (v145 > 0x555555555555554LL) {
            goto LABEL_332;
          }
          LODWORD(v177._time) = 0;
          uint64_t v146 = 24 * v145;
          int v147 = ucal_get();
          uint64_t v148 = v146 + v147;
          if (__OFADD__(v146, v147)) {
            goto LABEL_524;
          }
          Swift::Int value = v148 + 1;
          if (!__OFADD__(v148, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_321:
          LOBYTE(v174) = 4;
          char v176 = 0;
          v177._double time = v10;
          Swift::Int_optional v212 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v212.value;
          if (v212.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v149 = v212.value - 1;
          if (__OFSUB__(v212.value, 1LL)) {
            goto LABEL_513;
          }
          if (v149 > 0x222222222222221LL) {
            goto LABEL_332;
          }
          LODWORD(v177._time) = 0;
          uint64_t v150 = 60 * v149;
          int v151 = ucal_get();
          uint64_t v152 = v150 + v151;
          if (__OFADD__(v150, v151)) {
            goto LABEL_526;
          }
          Swift::Int value = v152 + 1;
          if (!__OFADD__(v152, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_329:
          LOBYTE(v174) = 5;
          char v176 = 0;
          v177._double time = v10;
          Swift::Int_optional v213 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v213.value;
          if (v213.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v153 = v213.value - 1;
          if (__OFSUB__(v213.value, 1LL)) {
            goto LABEL_514;
          }
          if (v153 > 0x222222222222221LL) {
            goto LABEL_332;
          }
          LODWORD(v177._time) = 0;
          uint64_t v169 = 60 * v153;
          int v170 = ucal_get();
          uint64_t v171 = v169 + v170;
          if (__OFADD__(v169, v170)) {
            goto LABEL_531;
          }
          Swift::Int value = v171 + 1;
          if (!__OFADD__(v171, 1LL)) {
            goto LABEL_400;
          }
          goto LABEL_532;
        case 4:
          goto LABEL_313;
        case 5:
          goto LABEL_321;
        case 6:
          goto LABEL_329;
        case 7:
        case 8:
          char v176 = 0;
          double v174 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
          if ((v178 & 1) != 0) {
            goto LABEL_332;
          }
          double v12 = v177._time;
          double v13 = (floor(v10) + 978307200.0) * 1000.0;
          double v14 = (floor(v177._time) + 978307200.0) * 1000.0;
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32));
          ucal_setMillis();
          int v15 = ucal_get();
          MEMORY[0x186E21148](*(void *)(v4 + 32));
          ucal_setMillis();
          double v16 = floor((v10 - v12) / 86400.0 / 7.0);
          if ((~*(void *)&v16 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_445;
          }
          if (v16 <= -9.22337204e18) {
            goto LABEL_446;
          }
          if (v16 >= 9.22337204e18) {
            goto LABEL_447;
          }
          else {
            uint64_t v17 = (uint64_t)v16 - 10;
          }
          while (1)
          {
            Swift::Int value = v17 + 1;
            if (__OFADD__(v17, 1LL)) {
              break;
            }
            LODWORD(v177._time) = 0;
            MEMORY[0x186E21148](*(void *)(v4 + 32));
            ucal_setMillis();
            double v18 = _CalendarICU._locked_add(_:amount:wrap:status:)(3, ++v17, 0);
            if (v18 >= v13) {
              goto LABEL_400;
            }
          }

          __break(1u);
          goto LABEL_403;
        case 9:
          LOBYTE(v174) = 1;
          char v176 = 0;
          v177._double time = v10;
          Swift::Int_optional v214 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v214.value;
          if (v214.is_nil) {
            goto LABEL_401;
          }
          LOBYTE(v174) = 9;
          char v176 = 1;
          v177._double time = v10;
          Swift::Int_optional v215 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  v154);
          if (v215.is_nil)
          {
            Swift::Int value = v215.value;
            goto LABEL_401;
          }

          Swift::Int v155 = value - 1;
          if (__OFSUB__(value, 1LL)) {
            goto LABEL_527;
          }
          Swift::Int value = v215.value + 4 * v155;
          if (__OFADD__(v215.value, 4 * v155))
          {
LABEL_339:
            __break(1u);
LABEL_340:
            LODWORD(v177._time) = 0;
            MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
            ucal_setMillis();
            goto LABEL_341;
          }

          goto LABEL_400;
        case 0xA:
        case 0xB:
          char v176 = 0;
          double v174 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
          if ((v178 & 1) != 0) {
            goto LABEL_332;
          }
          uint64_t v66 = 0LL;
          double v67 = v177._time;
          double v68 = (floor(v10) + 978307200.0) * 1000.0;
          LODWORD(v177._time) = 0;
          break;
        default:
          goto LABEL_332;
      }

      do
      {
        int v69 = ucal_get();
        if (*(_BYTE *)(v4 + 64) == 1) {
          uint64_t Attribute = (int)ucal_getAttribute();
        }
        else {
          uint64_t Attribute = *(void *)(v4 + 56);
        }
        if (Attribute == v69)
        {
          if (*(_BYTE *)(v4 + 80) == 1) {
            ucal_getAttribute();
          }
          double v165 = floor((v10 - v67) / 86400.0 / 7.0);
          if ((~*(void *)&v165 & 0x7FF0000000000000LL) == 0)
          {
LABEL_448:
            __break(1u);
            goto LABEL_449;
          }

          if (v165 <= -9.22337204e18)
          {
LABEL_449:
            __break(1u);
LABEL_450:
            __break(1u);
LABEL_451:
            __break(1u);
LABEL_452:
            __break(1u);
LABEL_453:
            __break(1u);
LABEL_454:
            __break(1u);
LABEL_455:
            __break(1u);
LABEL_456:
            __break(1u);
LABEL_457:
            __break(1u);
LABEL_458:
            __break(1u);
LABEL_459:
            __break(1u);
LABEL_460:
            __break(1u);
LABEL_461:
            __break(1u);
LABEL_462:
            __break(1u);
LABEL_463:
            __break(1u);
LABEL_464:
            __break(1u);
LABEL_465:
            __break(1u);
LABEL_466:
            __break(1u);
LABEL_467:
            __break(1u);
LABEL_468:
            __break(1u);
LABEL_469:
            __break(1u);
LABEL_470:
            __break(1u);
LABEL_471:
            __break(1u);
LABEL_472:
            __break(1u);
LABEL_473:
            __break(1u);
LABEL_474:
            __break(1u);
LABEL_475:
            __break(1u);
LABEL_476:
            __break(1u);
LABEL_477:
            __break(1u);
LABEL_478:
            __break(1u);
LABEL_479:
            __break(1u);
LABEL_480:
            __break(1u);
LABEL_481:
            __break(1u);
LABEL_482:
            __break(1u);
LABEL_483:
            __break(1u);
LABEL_484:
            __break(1u);
LABEL_485:
            __break(1u);
LABEL_486:
            __break(1u);
LABEL_487:
            __break(1u);
LABEL_488:
            __break(1u);
LABEL_489:
            __break(1u);
LABEL_490:
            __break(1u);
LABEL_491:
            __break(1u);
LABEL_492:
            __break(1u);
LABEL_493:
            __break(1u);
LABEL_494:
            __break(1u);
LABEL_495:
            __break(1u);
LABEL_496:
            __break(1u);
LABEL_497:
            __break(1u);
LABEL_498:
            __break(1u);
LABEL_499:
            __break(1u);
LABEL_500:
            __break(1u);
LABEL_501:
            __break(1u);
LABEL_502:
            __break(1u);
LABEL_503:
            __break(1u);
            goto LABEL_504;
          }

          if (v165 >= 9.22337204e18) {
            goto LABEL_450;
          }
          else {
            uint64_t v166 = (uint64_t)v165 - 109;
          }
          while (1)
          {
            Swift::Int value = v166 + 1;
            if (__OFADD__(v166, 1LL)) {
              break;
            }
            MEMORY[0x186E21148](*(void *)(v4 + 32));
            ucal_setMillis();
            double v167 = _CalendarICU._locked_add(_:amount:wrap:status:)(3, ++v166, 0);
            if (v167 > v68) {
              goto LABEL_400;
            }
          }

LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
          goto LABEL_405;
        }

        a3._double time = _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1LL, 0);
        BOOL v52 = __OFADD__(v66++, 1LL);
      }

      while (!v52);
      __break(1u);
LABEL_148:
      LODWORD(v177._time) = 0;
      MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
      ucal_setMillis();
LABEL_341:
      LOBYTE(v8) = 0;
      Swift::Int value = (int)ucal_get();
LABEL_401:
      Swift::Int v172 = value;
      Swift::Bool v173 = v8;
      result.Swift::Int value = v172;
      result.Swift::Bool is_nil = v173;
      return result;
    case 1:
      Swift::Int value = 0LL;
      switch(*(_BYTE *)of)
      {
        case 2:
          goto LABEL_31;
        case 3:
        case 0x11:
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          goto LABEL_341;
        case 4:
          LODWORD(v174) = 0;
          char v176 = 3;
          char v175 = 1;
          v177._double time = v10;
          Swift::Int_optional v207 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v207.value;
          if (v207.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v116 = v207.value - 1;
          if (__OFSUB__(v207.value, 1LL)) {
            goto LABEL_495;
          }
          uint64_t v117 = 24 * v116;
          int v118 = ucal_get();
          uint64_t v119 = v117 + v118;
          if (__OFADD__(v117, v118)) {
            goto LABEL_497;
          }
          Swift::Int value = v119 + 1;
          if (!__OFADD__(v119, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_266:
          LODWORD(v174) = 0;
          char v176 = 4;
          char v175 = 1;
          v177._double time = v10;
          Swift::Int_optional v208 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v208.value;
          if (v208.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v120 = v208.value - 1;
          if (__OFSUB__(v208.value, 1LL)) {
            goto LABEL_498;
          }
          uint64_t v121 = 60 * v120;
          int v122 = ucal_get();
          uint64_t v123 = v121 + v122;
          if (__OFADD__(v121, v122)) {
            goto LABEL_500;
          }
          Swift::Int value = v123 + 1;
          if (!__OFADD__(v123, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_273:
          LODWORD(v174) = 0;
          char v176 = 5;
          char v175 = 1;
          v177._double time = v10;
          Swift::Int_optional v209 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v209.value;
          if (v209.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v124 = v209.value - 1;
          if (__OFSUB__(v209.value, 1LL)) {
            goto LABEL_501;
          }
          uint64_t v125 = 60 * v124;
          int v126 = ucal_get();
          uint64_t v127 = v125 + v126;
          if (__OFADD__(v125, v126)) {
            goto LABEL_503;
          }
          Swift::Int value = v127 + 1;
          if (!__OFADD__(v127, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_280:
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          unsigned int v128 = ucal_get();
          if (*(_BYTE *)(v4 + 24) == 6)
          {
            if (v128 > 0xC)
            {
LABEL_504:
              __break(1u);
LABEL_505:
              __break(1u);
LABEL_506:
              __break(1u);
LABEL_507:
              __break(1u);
              goto LABEL_508;
            }

            LOBYTE(v8) = 0;
            uint64_t v129 = &outlined read-only object #0 of _CalendarICU._locked_ordinality(of:in:for:);
          }

          else
          {
            if (v128 > 0xC)
            {
LABEL_508:
              __break(1u);
LABEL_509:
              __break(1u);
LABEL_510:
              __break(1u);
LABEL_511:
              __break(1u);
LABEL_512:
              __break(1u);
LABEL_513:
              __break(1u);
LABEL_514:
              __break(1u);
LABEL_515:
              __break(1u);
            }

            LOBYTE(v8) = 0;
            uint64_t v129 = &outlined read-only object #1 of _CalendarICU._locked_ordinality(of:in:for:);
          }

          Swift::Int value = v129[v128 + 4];
          goto LABEL_401;
        case 5:
          goto LABEL_266;
        case 6:
          goto LABEL_273;
        case 7:
        case 8:
          goto LABEL_134;
        case 9:
          goto LABEL_280;
        case 0xB:
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          int v130 = ucal_get();
          ucal_set();
          int v131 = ucal_get();
          if (*(_BYTE *)(v4 + 64) == 1) {
            uint64_t v132 = (int)ucal_getAttribute();
          }
          else {
            uint64_t v132 = *(void *)(v4 + 56);
          }
          if (*(_BYTE *)(v4 + 80) == 1) {
            uint64_t v158 = (int)ucal_getAttribute();
          }
          else {
            uint64_t v158 = *(void *)(v4 + 72);
          }
          uint64_t v159 = v130 + 7LL;
          BOOL v52 = __OFSUB__(v159, v158);
          uint64_t v160 = v159 - v158;
          if (v52) {
            goto LABEL_440;
          }
          BOOL v52 = __OFADD__(v158, v131);
          uint64_t v161 = v158 + v131;
          if (v52) {
            goto LABEL_441;
          }
          BOOL v52 = __OFSUB__(v161, v132);
          uint64_t v162 = v161 - v132;
          if (v52) {
            goto LABEL_442;
          }
          if (__OFADD__(v162, 6LL)) {
            goto LABEL_443;
          }
          uint64_t v163 = (v162 + 6) % 7;
          BOOL v52 = __OFADD__(v160, v163);
          uint64_t v164 = v160 + v163;
          if (v52) {
            goto LABEL_444;
          }
          Swift::Int value = v164 / 7;
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32));
          ucal_setMillis();
          LOBYTE(v8) = 0;
          goto LABEL_401;
        case 0xD:
          LOBYTE(v174) = 6;
          char v176 = 1;
          v177._double time = v10;
          Swift::Int_optional v210 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v210.value;
          if (v210.is_nil) {
            goto LABEL_401;
          }
          a3._double time = (v10 - floor(v10) + (double)v210.value + -1.0) * 1000000000.0;
          if ((~*(void *)&a3._time & 0x7FF0000000000000LL) == 0) {
            goto LABEL_505;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_506;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_507;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          goto LABEL_339;
        default:
          goto LABEL_401;
      }

    case 2:
      Swift::Int value = 0LL;
      switch(*(_BYTE *)of)
      {
        case 3:
          goto LABEL_148;
        case 4:
          LODWORD(v174) = 0;
          char v176 = 3;
          char v175 = 2;
          v177._double time = v10;
          Swift::Int_optional v194 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v194.value;
          if (v194.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v71 = v194.value - 1;
          if (__OFSUB__(v194.value, 1LL)) {
            goto LABEL_451;
          }
          uint64_t v72 = 24 * v71;
          int v73 = ucal_get();
          uint64_t v74 = v72 + v73;
          if (__OFADD__(v72, v73)) {
            goto LABEL_453;
          }
          Swift::Int value = v74 + 1;
          if (!__OFADD__(v74, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_156:
          LODWORD(v174) = 0;
          char v176 = 4;
          char v175 = 2;
          v177._double time = v10;
          Swift::Int_optional v195 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v195.value;
          if (v195.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v75 = v195.value - 1;
          if (__OFSUB__(v195.value, 1LL)) {
            goto LABEL_454;
          }
          uint64_t v76 = 60 * v75;
          int v77 = ucal_get();
          uint64_t v78 = v76 + v77;
          if (__OFADD__(v76, v77)) {
            goto LABEL_456;
          }
          Swift::Int value = v78 + 1;
          if (!__OFADD__(v78, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_163:
          LODWORD(v174) = 0;
          char v176 = 5;
          char v175 = 2;
          v177._double time = v10;
          Swift::Int_optional v196 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v196.value;
          if (v196.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v79 = v196.value - 1;
          if (__OFSUB__(v196.value, 1LL)) {
            goto LABEL_457;
          }
          uint64_t v80 = 60 * v79;
          int v81 = ucal_get();
          uint64_t v82 = v80 + v81;
          if (__OFADD__(v80, v81)) {
            goto LABEL_459;
          }
          Swift::Int value = v82 + 1;
          if (!__OFADD__(v82, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_170:
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          break;
        case 5:
          goto LABEL_156;
        case 6:
          goto LABEL_163;
        case 7:
        case 8:
          LOBYTE(v174) = 3;
          char v176 = 2;
          v177._double time = v10;
          Swift::Int_optional v180 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v180.value;
          if (v180.is_nil) {
            goto LABEL_401;
          }
          if (__OFADD__(v180.value, 6LL)) {
            goto LABEL_439;
          }
          LOBYTE(v8) = 0;
          Swift::Int value = (v180.value + 6) / 7;
          goto LABEL_401;
        case 0xA:
          goto LABEL_170;
        case 0xD:
          LOBYTE(v174) = 6;
          char v176 = 2;
          v177._double time = v10;
          Swift::Int_optional v197 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v197.value;
          if (v197.is_nil) {
            goto LABEL_401;
          }
          double v83 = (v10 - floor(v10) + (double)v197.value + -1.0) * 1000000000.0;
          if ((~*(void *)&v83 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_460;
          }
          if (v83 <= -9.22337204e18) {
            goto LABEL_461;
          }
          if (v83 >= 9.22337204e18) {
            goto LABEL_462;
          }
          Swift::Int value = (uint64_t)v83 + 1;
          __break(1u);
          goto LABEL_178;
        default:
          goto LABEL_401;
      }

      goto LABEL_341;
    case 3:
    case 7:
    case 0x11:
      Swift::Int value = 0LL;
      switch(*(_BYTE *)of)
      {
        case 4:
          goto LABEL_31;
        case 5:
          LODWORD(v174) = 0;
          char v176 = 4;
          char v175 = 3;
          v177._double time = v10;
          Swift::Int_optional v183 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v183.value;
          if (v183.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v31 = v183.value - 1;
          if (__OFSUB__(v183.value, 1LL)) {
            goto LABEL_409;
          }
          uint64_t v32 = 60 * v31;
          int v33 = ucal_get();
          uint64_t v34 = v32 + v33;
          if (__OFADD__(v32, v33)) {
            goto LABEL_413;
          }
          Swift::Int value = v34 + 1;
          if (!__OFADD__(v34, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_56:
          LODWORD(v174) = 0;
          char v176 = 5;
          char v175 = 3;
          v177._double time = v10;
          Swift::Int_optional v184 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v184.value;
          if (v184.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v35 = v184.value - 1;
          if (__OFSUB__(v184.value, 1LL)) {
            goto LABEL_410;
          }
          uint64_t v36 = 60 * v35;
          int v37 = ucal_get();
          uint64_t v38 = v36 + v37;
          if (__OFADD__(v36, v37)) {
            goto LABEL_415;
          }
          Swift::Int value = v38 + 1;
          if (!__OFADD__(v38, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_63:
          LOBYTE(v174) = 6;
          char v176 = 3;
          v177._double time = v10;
          Swift::Int_optional v185 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v185.value;
          if (v185.is_nil) {
            goto LABEL_401;
          }
          a3._double time = (v10 - floor(v10) + (double)v185.value + -1.0) * 1000000000.0;
          if ((~*(void *)&a3._time & 0x7FF0000000000000LL) == 0) {
            goto LABEL_411;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_416;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_417;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          __break(1u);
          break;
        case 6:
          goto LABEL_56;
        case 0xD:
          goto LABEL_63;
        default:
          goto LABEL_401;
      }

      goto LABEL_70;
    case 4:
      switch(v9)
      {
        case 13:
          LOBYTE(v174) = 6;
          char v176 = 4;
          v177._double time = v10;
          Swift::Int_optional v191 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v191.value;
          if (v191.is_nil) {
            goto LABEL_401;
          }
          a3._double time = (v10 - floor(v10) + (double)v191.value + -1.0) * 1000000000.0;
          if ((~*(void *)&a3._time & 0x7FF0000000000000LL) == 0) {
            goto LABEL_433;
          }
          if (a3._time <= -9.22337204e18)
          {
LABEL_434:
            __break(1u);
            goto LABEL_435;
          }

          if (a3._time >= 9.22337204e18)
          {
LABEL_435:
            __break(1u);
LABEL_436:
            __break(1u);
            goto LABEL_437;
          }

          Swift::Int value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1LL))
          {
LABEL_400:
            LOBYTE(v8) = 0;
            goto LABEL_401;
          }

          __break(1u);
          break;
        case 6:
          break;
        case 5:
LABEL_31:
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          LOBYTE(v8) = 0;
          Swift::Int value = (int)ucal_get() + 1LL;
          goto LABEL_401;
        default:
          goto LABEL_332;
      }

      LODWORD(v174) = 0;
      char v176 = 5;
      char v175 = 4;
      v177._double time = v10;
      Swift::Int_optional v192 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
      Swift::Int value = v192.value;
      if (v192.is_nil) {
        goto LABEL_401;
      }
      Swift::Int v54 = v192.value - 1;
      if (__OFSUB__(v192.value, 1LL)) {
        goto LABEL_436;
      }
      uint64_t v55 = 60 * v54;
      if ((unsigned __int128)(v54 * (__int128)60LL) >> 64 != (60 * v54) >> 63)
      {
LABEL_437:
        __break(1u);
LABEL_438:
        __break(1u);
LABEL_439:
        __break(1u);
LABEL_440:
        __break(1u);
LABEL_441:
        __break(1u);
LABEL_442:
        __break(1u);
LABEL_443:
        __break(1u);
LABEL_444:
        __break(1u);
LABEL_445:
        __break(1u);
LABEL_446:
        __break(1u);
LABEL_447:
        __break(1u);
        goto LABEL_448;
      }

      int v56 = ucal_get();
      uint64_t v57 = v55 + v56;
      if (__OFADD__(v55, v56)) {
        goto LABEL_438;
      }
      Swift::Int value = v57 + 1;
      if (!__OFADD__(v57, 1LL)) {
        goto LABEL_400;
      }
      __break(1u);
LABEL_125:
      char v176 = 9;
      double v174 = v10;
      _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
      if ((v178 & 1) != 0) {
        goto LABEL_332;
      }
      double v58 = v177._time;
      LODWORD(v174) = 0;
      MEMORY[0x186E21148](*(void *)(v4 + 32));
      double v6 = (floor(v58) + 978307200.0) * 1000.0;
      ucal_setMillis();
      uint64_t v8 = 0LL;
      while (1)
      {
        int v59 = ucal_get();
        uint64_t v60 = *(_BYTE *)(v4 + 64) == 1 ? (int)ucal_getAttribute() : *(void *)(v4 + 56);
        if (v60 == v59) {
          break;
        }
        double v6 = _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1LL, 0);
        BOOL v52 = __OFADD__(v8++, 1LL);
        if (v52)
        {
          __break(1u);
LABEL_134:
          char v176 = 1;
          double v174 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
          if ((v178 & 1) == 0)
          {
            double v62 = v177._time;
            LODWORD(v174) = 0;
            char v176 = 11;
            char v175 = 1;
            v177._double time = v10;
            Swift::Int_optional v193 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  v61);
            Swift::Int v63 = v193.value;
            if (v193.is_nil)
            {
              Swift::Int value = v193.value;
              goto LABEL_401;
            }

            int v64 = ucal_get();
            LODWORD(v174) = 0;
            MEMORY[0x186E21148](*(void *)(v4 + 32));
            double v65 = (floor(v62) + 978307200.0) * 1000.0;
            ucal_setMillis();
            char v176 = 11;
            char v175 = 1;
            v177._double time = v65 / 1000.0 + -978307200.0;
            Swift::Int_optional v218 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  v177);
            Swift::Int value = v218.value;
            if (v218.is_nil) {
              goto LABEL_363;
            }
            Swift::Int v157 = v63 - v218.value;
            if (!__OFSUB__(v63, v218.value))
            {
              Swift::Int value = v157 + 1;
              if (!__OFADD__(v157, 1LL)) {
                goto LABEL_400;
              }
              __break(1u);
LABEL_363:
              LOBYTE(v8) = 1;
              goto LABEL_401;
            }

  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  __break(1u);
LABEL_427:
  __break(1u);
LABEL_428:
  __break(1u);
LABEL_429:
  __break(1u);
LABEL_430:
  __break(1u);
LABEL_431:
  __break(1u);
LABEL_432:
  __break(1u);
LABEL_433:
  __break(1u);
LABEL_434:
  __break(1u);
LABEL_435:
  __break(1u);
LABEL_436:
  __break(1u);
LABEL_437:
  __break(1u);
LABEL_438:
  __break(1u);
LABEL_439:
  __break(1u);
LABEL_440:
  __break(1u);
LABEL_441:
  __break(1u);
LABEL_442:
  __break(1u);
LABEL_443:
  __break(1u);
LABEL_444:
  __break(1u);
LABEL_445:
  __break(1u);
LABEL_446:
  __break(1u);
LABEL_447:
  __break(1u);
LABEL_448:
  __break(1u);
LABEL_449:
  __break(1u);
LABEL_450:
  __break(1u);
LABEL_451:
  __break(1u);
LABEL_452:
  __break(1u);
LABEL_453:
  __break(1u);
LABEL_454:
  __break(1u);
LABEL_455:
  __break(1u);
LABEL_456:
  __break(1u);
LABEL_457:
  __break(1u);
LABEL_458:
  __break(1u);
LABEL_459:
  __break(1u);
LABEL_460:
  __break(1u);
LABEL_461:
  __break(1u);
LABEL_462:
  __break(1u);
LABEL_463:
  __break(1u);
LABEL_464:
  __break(1u);
LABEL_465:
  __break(1u);
LABEL_466:
  __break(1u);
LABEL_467:
  __break(1u);
LABEL_468:
  __break(1u);
LABEL_469:
  __break(1u);
LABEL_470:
  __break(1u);
LABEL_471:
  __break(1u);
LABEL_472:
  __break(1u);
LABEL_473:
  __break(1u);
LABEL_474:
  __break(1u);
LABEL_475:
  __break(1u);
LABEL_476:
  __break(1u);
LABEL_477:
  __break(1u);
LABEL_478:
  __break(1u);
LABEL_479:
  __break(1u);
LABEL_480:
  __break(1u);
LABEL_481:
  __break(1u);
  return result;
}

LABEL_529:
            __break(1u);
LABEL_530:
            __break(1u);
LABEL_531:
            __break(1u);
LABEL_532:
            __break(1u);
LABEL_533:
            __break(1u);
            JUMPOUT(0x18336EF7CLL);
          }

LABEL_332:
          Swift::Int value = 0LL;
          goto LABEL_401;
        }
      }

                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                int v33 = v153 & 0xFFFFFFFFFFFFF0FFLL | (v163 << 8);
              }

              else
              {
                int v33 = ((-15LL << ((4 * v153 + 8) & 0x3C)) - 1) & v153 | ((unint64_t)*(unsigned __int16 *)(v150 + 16) << ((4 * v153 + 8) & 0x3C));
                swift_unknownObjectRetain();
                uint64_t v34 = 0LL;
                double v13 = 0LL;
              }

              swift_unknownObjectRetain();
              char v178 = v33;
              uint64_t v179 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v32, v33, (uint64_t)v13, v150, v152);
              Swift::Int_optional result = swift_unknownObjectRelease_n();
              int v9 = a2;
              goto LABEL_53;
            }

            if (v9 > 0) {
              goto LABEL_388;
            }
            uint64_t v34 = 0LL;
            double v13 = 0LL;
            char v178 = 0LL;
            uint64_t v179 = 0LL;
LABEL_53:
            Foundation::Date v20 = __OFSUB__(v9, v34);
            Swift::Int v31 = v9 - v34;
            uint64_t v8 = v180;
            if (v20) {
              goto LABEL_373;
            }
          }

          else
          {
            Swift::Int v31 = 0LL;
            char v178 = 0LL;
            uint64_t v179 = 0LL;
            double v13 = 0LL;
            uint64_t v32 = v180[11];
            if (v150)
            {
              double v13 = 0LL;
              Swift::Int v31 = v180[10];
              uint64_t v179 = v180[9];
              char v178 = ((-15LL << ((4 * *(_BYTE *)(v150 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v150 + 18) | ((unint64_t)*(unsigned __int16 *)(v150 + 16) << ((4 * *(_BYTE *)(v150 + 18) + 8) & 0x3C));
            }
          }
        }
      }

      if (*(_BYTE *)(v35 + 18))
      {
        Swift::Int_optional result = swift_unknownObjectRetain_n();
        int v7 = v9;
        uint64_t v4 = v35;
LABEL_73:
        double v27 = *(unsigned __int16 *)(v4 + 16);
        if (!*(_WORD *)(v4 + 16)) {
          goto LABEL_71;
        }
        Swift::Int v43 = *(void *)(v4 + 40);
        Foundation::Date v20 = __OFSUB__(v7, v43);
        int v29 = v7 - v43;
        if (v20) {
          goto LABEL_340;
        }
        if (__OFADD__(v29, 1LL)) {
          goto LABEL_341;
        }
        if (v29 + 1 <= 0)
        {
          double v27 = 0LL;
          goto LABEL_72;
        }

        if ((_DWORD)v27 == 1)
        {
          int v7 = v29;
LABEL_71:
          if (!v7) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_340:
          __break(1u);
LABEL_341:
          __break(1u);
          goto LABEL_342;
        }

        uint64_t v44 = (uint64_t *)(v4 + 64);
        int v45 = 1LL;
        while (1)
        {
          uint64_t v46 = *v44;
          v44 += 3;
          int v7 = v29 - v46;
          if (__OFSUB__(v29, v46)) {
            break;
          }
          if (__OFADD__(v7, 1LL)) {
            goto LABEL_335;
          }
          if (v7 + 1 < 1)
          {
            double v27 = v45;
            int v7 = v29;
LABEL_72:
            uint64_t v42 = (4 * *(_BYTE *)(v4 + 18) + 8) & 0x3C;
            int v15 = ((-15LL << v42) - 1) & v15 | (v27 << v42);
            int v9 = *(void *)(v4 + 24 + 24 * v27);
            swift_unknownObjectRetain();
            Swift::Int_optional result = swift_unknownObjectRelease();
            uint64_t v4 = v9;
            if (!*(_BYTE *)(v9 + 18)) {
              goto LABEL_87;
            }
            goto LABEL_73;
          }

          ++v45;
          int v29 = v7;
          if (v27 == v45) {
            goto LABEL_71;
          }
        }

        __break(1u);
LABEL_335:
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        double v25 = v29;
        double v14 = v27;
        continue;
      }

      break;
    }

    Swift::Int_optional result = swift_unknownObjectRetain_n();
    int v15 = 0LL;
    int v7 = v9;
    int v9 = v35;
LABEL_87:
    Swift::Int v47 = *(unsigned __int16 *)(v9 + 16);
    if (!*(_WORD *)(v9 + 16)) {
      goto LABEL_99;
    }
    uint64_t v48 = *(void *)(v9 + 24);
    Foundation::Date v20 = __OFSUB__(v7, v48);
    int v49 = v7 - v48;
    if (v20) {
      goto LABEL_386;
    }
    if (__OFADD__(v49, 1LL)) {
      goto LABEL_387;
    }
    if (v49 + 1 <= 0)
    {
      Swift::Int v47 = 0LL;
    }

    else
    {
      if ((_DWORD)v47 == 1)
      {
        int v7 = v49;
LABEL_99:
        if (v7) {
          goto LABEL_385;
        }
        goto LABEL_100;
      }

      uint64_t v50 = (uint64_t *)(v9 + 48);
      double v51 = 1LL;
      while (1)
      {
        BOOL v52 = *v50;
        v50 += 3;
        int v7 = v49 - v52;
        if (__OFSUB__(v49, v52)) {
          goto LABEL_362;
        }
        if (__OFADD__(v7, 1LL)) {
          goto LABEL_363;
        }
        if (v7 + 1 < 1) {
          break;
        }
        ++v51;
        int v49 = v7;
        if (v47 == v51) {
          goto LABEL_99;
        }
      }

      Swift::Int v47 = v51;
      int v7 = v49;
    }

LABEL_405:
                __break(1u);
LABEL_406:
                __break(1u);
LABEL_407:
                __break(1u);
LABEL_408:
                __break(1u);
LABEL_409:
                __break(1u);
LABEL_410:
                __break(1u);
LABEL_411:
                __break(1u);
LABEL_412:
                __break(1u);
LABEL_413:
                __break(1u);
LABEL_414:
                __break(1u);
LABEL_415:
                __break(1u);
LABEL_416:
                __break(1u);
LABEL_417:
                __break(1u);
LABEL_418:
                __break(1u);
                goto LABEL_419;
              }
            }
          }
        }
      }

      goto LABEL_400;
    case 6:
      if (v9 != 13) {
        goto LABEL_332;
      }
      double v19 = (v10 - floor(v10)) * 1000000000.0 + 1.0;
      if ((~*(void *)&v19 & 0x7FF0000000000000LL) == 0) {
        goto LABEL_406;
      }
      if (v19 <= -9.22337204e18) {
        goto LABEL_407;
      }
      if (v19 >= 9.22337204e18) {
        goto LABEL_408;
      }
      LOBYTE(v8) = 0;
      Swift::Int value = (uint64_t)v19;
      goto LABEL_401;
    case 9:
      Swift::Int value = 0LL;
      switch(*(_BYTE *)of)
      {
        case 2:
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          Swift::Int v98 = (int)ucal_get();
          if (*(_BYTE *)(v4 + 24) != 6) {
            goto LABEL_354;
          }
          LOBYTE(v8) = 0;
          __int128 v99 = &outlined read-only object #2 of _CalendarICU._locked_ordinality(of:in:for:);
          goto LABEL_356;
        case 3:
          char v176 = 9;
          double v174 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
          double v6 = v177._time;
          char v100 = v178;
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32));
          ucal_setMillis();
          if ((v100 & 1) != 0) {
            goto LABEL_332;
          }
          a3._double time = floor((v10 - v6) / 86400.0);
          if ((~*(void *)&a3._time & 0x7FF0000000000000LL) == 0) {
            goto LABEL_479;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_480;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_481;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          __break(1u);
LABEL_228:
          LODWORD(v174) = 0;
          char v176 = 3;
          char v175 = 9;
          v177._double time = v10;
          Swift::Int_optional v202 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v202.value;
          if (v202.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v101 = v202.value - 1;
          if (__OFSUB__(v202.value, 1LL)) {
            goto LABEL_482;
          }
          uint64_t v102 = 24 * v101;
          int v103 = ucal_get();
          uint64_t v104 = v102 + v103;
          if (__OFADD__(v102, v103)) {
            goto LABEL_484;
          }
          Swift::Int value = v104 + 1;
          if (!__OFADD__(v104, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_235:
          LODWORD(v174) = 0;
          char v176 = 4;
          char v175 = 9;
          v177._double time = v10;
          Swift::Int_optional v203 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v203.value;
          if (v203.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v105 = v203.value - 1;
          if (__OFSUB__(v203.value, 1LL)) {
            goto LABEL_485;
          }
          uint64_t v106 = 60 * v105;
          int v107 = ucal_get();
          uint64_t v108 = v106 + v107;
          if (__OFADD__(v106, v107)) {
            goto LABEL_487;
          }
          Swift::Int value = v108 + 1;
          if (!__OFADD__(v108, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_242:
          LODWORD(v174) = 0;
          char v176 = 5;
          char v175 = 9;
          v177._double time = v10;
          Swift::Int_optional v204 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v204.value;
          if (v204.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v109 = v204.value - 1;
          if (__OFSUB__(v204.value, 1LL)) {
            goto LABEL_488;
          }
          uint64_t v110 = 60 * v109;
          int v111 = ucal_get();
          uint64_t v112 = v110 + v111;
          if (__OFADD__(v110, v111)) {
            goto LABEL_490;
          }
          Swift::Int value = v112 + 1;
          if (!__OFADD__(v112, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_249:
          LOBYTE(v174) = 6;
          char v176 = 9;
          v177._double time = v10;
          Swift::Int_optional v205 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v205.value;
          if (v205.is_nil) {
            goto LABEL_401;
          }
          double v113 = (v10 - floor(v10) + (double)v205.value + -1.0) * 1000000000.0;
          if ((~*(void *)&v113 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_491;
          }
          if (v113 <= -9.22337204e18) {
            goto LABEL_492;
          }
          if (v113 >= 9.22337204e18) {
            goto LABEL_493;
          }
          Swift::Int value = (uint64_t)v113 + 1;
          __break(1u);
          break;
        case 4:
          goto LABEL_228;
        case 5:
          goto LABEL_235;
        case 6:
          goto LABEL_242;
        case 7:
        case 8:
          char v176 = 9;
          double v174 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
          if ((v178 & 1) != 0) {
            goto LABEL_332;
          }
          double v21 = v177._time;
          LODWORD(v174) = 0;
          char v176 = 11;
          char v175 = 1;
          v177._double time = v10;
          Swift::Int_optional v181 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  v20);
          Swift::Int v5 = v181.value;
          Swift::Bool is_nil = v181.is_nil;
          int v23 = ucal_get();
          if (is_nil) {
            goto LABEL_217;
          }
          int v24 = v23;
          LODWORD(v174) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32));
          double v25 = (floor(v21) + 978307200.0) * 1000.0;
          ucal_setMillis();
          goto LABEL_349;
        case 0xA:
        case 0xB:
          goto LABEL_125;
        case 0xD:
          goto LABEL_249;
        default:
          goto LABEL_401;
      }

      goto LABEL_256;
    case 0xA:
    case 0xB:
      Swift::Int value = 0LL;
      switch(*(_BYTE *)of)
      {
        case 3:
        case 7:
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          Swift::Int value = (int)ucal_get() + 1LL;
          if (*(_BYTE *)(v4 + 64) != 1) {
            goto LABEL_105;
          }
          uint64_t v11 = (int)ucal_getAttribute();
          break;
        case 4:
          goto LABEL_77;
        case 5:
          goto LABEL_84;
        case 6:
          goto LABEL_91;
        case 0xD:
          goto LABEL_98;
        default:
          goto LABEL_401;
      }

      goto LABEL_106;
    case 0xC:
      Swift::Int value = 0LL;
      switch(*(_BYTE *)of)
      {
        case 3:
LABEL_178:
          char v176 = 12;
          double v174 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
          if ((v178 & 1) != 0) {
            goto LABEL_332;
          }
          a3._double time = floor((v10 - v177._time) / 86400.0);
          if ((~*(void *)&a3._time & 0x7FF0000000000000LL) == 0) {
            goto LABEL_463;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_464;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_465;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          __break(1u);
LABEL_185:
          LODWORD(v174) = 0;
          char v176 = 3;
          char v175 = 12;
          v177._double time = v10;
          Swift::Int_optional v198 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v198.value;
          if (v198.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v84 = v198.value - 1;
          if (__OFSUB__(v198.value, 1LL)) {
            goto LABEL_466;
          }
          uint64_t v85 = 24 * v84;
          int v86 = ucal_get();
          uint64_t v87 = v85 + v86;
          if (__OFADD__(v85, v86)) {
            goto LABEL_468;
          }
          Swift::Int value = v87 + 1;
          if (!__OFADD__(v87, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_192:
          LODWORD(v174) = 0;
          char v176 = 4;
          char v175 = 12;
          v177._double time = v10;
          Swift::Int_optional v199 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v199.value;
          if (v199.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v88 = v199.value - 1;
          if (__OFSUB__(v199.value, 1LL)) {
            goto LABEL_469;
          }
          uint64_t v89 = 60 * v88;
          int v90 = ucal_get();
          uint64_t v91 = v89 + v90;
          if (__OFADD__(v89, v90)) {
            goto LABEL_471;
          }
          Swift::Int value = v91 + 1;
          if (!__OFADD__(v91, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_199:
          LODWORD(v174) = 0;
          char v176 = 5;
          char v175 = 12;
          v177._double time = v10;
          Swift::Int_optional v200 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          Swift::Int value = v200.value;
          if (v200.is_nil) {
            goto LABEL_401;
          }
          Swift::Int v92 = v200.value - 1;
          if (__OFSUB__(v200.value, 1LL)) {
            goto LABEL_472;
          }
          uint64_t v93 = 60 * v92;
          int v94 = ucal_get();
          uint64_t v95 = v93 + v94;
          if (__OFADD__(v93, v94)) {
            goto LABEL_474;
          }
          Swift::Int value = v95 + 1;
          if (!__OFADD__(v95, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_206:
          LODWORD(v177._time) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          int v96 = ucal_get();
          if (SLODWORD(v177._time) <= 0) {
            Swift::Int value = v96;
          }
          else {
            Swift::Int value = 0LL;
          }
          LOBYTE(v8) = SLODWORD(v177._time) > 0;
          goto LABEL_401;
        case 4:
          goto LABEL_185;
        case 5:
          goto LABEL_192;
        case 6:
          goto LABEL_199;
        case 7:
        case 8:
          char v176 = 12;
          double v174 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v176);
          if ((v178 & 1) != 0) {
            goto LABEL_332;
          }
          double v27 = v177._time;
          LODWORD(v174) = 0;
          char v176 = 11;
          char v175 = 12;
          v177._double time = v10;
          Swift::Int_optional v182 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  v26);
          Swift::Int v5 = v182.value;
          Swift::Bool v28 = v182.is_nil;
          int v29 = ucal_get();
          if (v28) {
            goto LABEL_217;
          }
          int v30 = v29;
          LODWORD(v174) = 0;
          MEMORY[0x186E21148](*(void *)(v4 + 32));
          double v25 = (floor(v27) + 978307200.0) * 1000.0;
          ucal_setMillis();
          char v176 = 11;
          char v175 = 12;
          v177._double time = v25 / 1000.0 + -978307200.0;
          Swift::Int_optional v216 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  v177);
          Swift::Int value = v216.value;
          if (v216.is_nil) {
            goto LABEL_363;
          }
          Swift::Int v156 = v5 - v216.value;
          if (__OFSUB__(v5, v216.value)) {
            goto LABEL_515;
          }
          Swift::Int value = v156 + 1;
          if (!__OFADD__(v156, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_349:
          char v176 = 11;
          char v175 = 1;
          v177._double time = v25 / 1000.0 + -978307200.0;
          Swift::Int_optional v217 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  v177);
          Swift::Int value = v217.value;
          if (v217.is_nil) {
            goto LABEL_363;
          }
          Swift::Int v98 = v5 - v217.value;
          if (!__OFSUB__(v5, v217.value))
          {
            Swift::Int value = v98 + 1;
            if (__OFADD__(v98, 1LL))
            {
              __break(1u);
LABEL_354:
              if (v98 <= 0xC)
              {
                LOBYTE(v8) = 0;
                __int128 v99 = &outlined read-only object #3 of _CalendarICU._locked_ordinality(of:in:for:);
LABEL_356:
                Swift::Int value = v99[v98 + 4];
                goto LABEL_401;
              }

              goto LABEL_494;
            }

            goto LABEL_400;
          }

          __break(1u);
          break;
        case 0xB:
          goto LABEL_206;
        case 0xD:
          LOBYTE(v174) = 6;
          char v176 = 12;
          v177._double time = v10;
          Swift::Int_optional v201 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
          Swift::Int value = v201.value;
          if (v201.is_nil) {
            goto LABEL_401;
          }
          double v97 = (v10 - floor(v10) + (double)v201.value + -1.0) * 1000000000.0;
          if ((~*(void *)&v97 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_475;
          }
          if (v97 <= -9.22337204e18) {
            goto LABEL_476;
          }
          if (v97 >= 9.22337204e18) {
            goto LABEL_477;
          }
          Swift::Int value = (uint64_t)v97 + 1;
          __break(1u);
LABEL_217:
          LOBYTE(v8) = 1;
          Swift::Int value = v5;
          goto LABEL_401;
        default:
          goto LABEL_401;
      }

      goto LABEL_517;
    default:
      goto LABEL_401;
  }

                __break(1u);
                goto LABEL_406;
              }

              double v65 = v74;
            }
          }
        }
      }
    }

Swift::Int _CalendarICU._locked_algorithmB(smaller:larger:at:)(char *a1, char *a2, double *a3)
{
  char v3 = *a1;
  double v4 = *a3;
  char v25 = *a2;
  Swift::Double v24 = v4;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v25);
  if ((v28 & 1) != 0) {
    goto LABEL_9;
  }
  double time = v26._time;
  double v5 = v27;
  char v25 = 2;
  Swift::Double v24 = v26._time + 1.0;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v25);
  if ((v28 & 1) == 0)
  {
    double v10 = v26._time;
    double v9 = v27;
    LOBYTE(v24) = v3;
    char v25 = 2;
    v26._double time = v26._time + 0.1;
    Swift::Int_optional v29 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v24,  (Foundation::Calendar::Component)&v25,  v26);
    if (!v29.is_nil)
    {
      Swift::Int value = v29.value;
      LOBYTE(v24) = v3;
      char v25 = 2;
      double v11 = v9 + v10;
      v26._double time = v11 + -0.1;
      Swift::Int_optional v30 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v24,  (Foundation::Calendar::Component)&v25,  COERCE_FOUNDATION_DATE(v11 + -0.1));
      if (!v30.is_nil)
      {
        if (v30.value < value) {
          goto LABEL_10;
        }
        Swift::Int v12 = v30.value + 1;
        if (__OFADD__(v30.value, 1LL))
        {
LABEL_38:
          __break(1u);
        }

        else if (v12 >= value)
        {
          double v13 = v5 + time + -1.0;
          double v14 = v11 + 1.0;
          if (v11 + 1.0 >= v13) {
            goto LABEL_10;
          }
          uint64_t v15 = -13LL;
          Swift::Int v7 = value;
          while (1)
          {
            char v25 = 2;
            Swift::Double v24 = v14;
            _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v25);
            if ((v28 & 1) != 0) {
              goto LABEL_4;
            }
            double v17 = v26._time;
            double v16 = v27;
            LOBYTE(v24) = v3;
            char v25 = 2;
            v26._double time = v26._time + 0.1;
            Swift::Int_optional v31 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v24,  (Foundation::Calendar::Component)&v25,  v26);
            if (v31.is_nil
              || (Swift::Int value = v31.value,
                  LOBYTE(v24) = v3,
                  char v25 = 2,
                  double v18 = v16 + v17,
                  v26._double time = v18 + -0.1,
                  Swift::Int_optional v30 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v24,  (Foundation::Calendar::Component)&v25,  COERCE_FOUNDATION_DATE(v18 + -0.1)),  v30.is_nil))
            {
              Swift::Int value = v7;
              goto LABEL_10;
            }

            if (v7 == v12)
            {
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }

            if (value >= v7) {
              Swift::Int value = v7;
            }
            Swift::Int v19 = v12 - v7;
            if (__OFSUB__(v12, v7)) {
              goto LABEL_34;
            }
            BOOL v20 = __OFADD__(value, v19);
            Swift::Int v21 = value + v19;
            if (v20) {
              goto LABEL_35;
            }
            Swift::Int v12 = v21 + v30.value;
            if (__OFADD__(v21, v30.value)) {
              goto LABEL_36;
            }
            if (v12 < value) {
              goto LABEL_37;
            }
            double v14 = v18 + 1.0;
            BOOL v22 = v18 + 1.0 >= v13 || v15++ == 0;
            Swift::Int v7 = value;
            if (v22) {
              goto LABEL_10;
            }
          }
        }

        __break(1u);
        return v30.value;
      }
    }

Swift::Int _CalendarICU._locked_algorithmC(smaller:larger:at:)(char *a1, char *a2, uint64_t *a3)
{
  char v3 = *a1;
  uint64_t v4 = *a3;
  char v10 = *a2;
  uint64_t v9 = v4;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v10);
  if ((v13 & 1) != 0)
  {
    Swift::Int value = 0LL;
  }

  else
  {
    double time = v11._time;
    double v6 = v12;
    LOBYTE(v9) = v3;
    char v10 = 1;
    v11._double time = v11._time + 0.1;
    Swift::Int_optional v14 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v9,  (Foundation::Calendar::Component)&v10,  v11);
    if (v14.is_nil
      || (Swift::Int value = v14.value,
          LOBYTE(v9) = v3,
          char v10 = 1,
          v11._double time = v6 + time + -0.1,
          Swift::Int_optional v15 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v9,  (Foundation::Calendar::Component)&v10,  v11),  v15.is_nil))
    {
      Swift::Int value = 0LL;
    }

    else if (v15.value >= value)
    {
      if (__OFADD__(v15.value, 1LL))
      {
        __break(1u);
      }

      else if (v15.value + 1 >= value)
      {
        goto LABEL_8;
      }

      __break(1u);
      return v15.value;
    }
  }

Swift::Int _CalendarICU._locked_algorithmD(at:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v11 = 10;
  uint64_t v10 = v1;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v11);
  if ((v14 & 1) != 0) {
    goto LABEL_12;
  }
  double v3 = v12;
  double v2 = v13;
  char v11 = 2;
  uint64_t v10 = v1;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v11);
  if ((v14 & 1) != 0) {
    goto LABEL_12;
  }
  double v5 = v12;
  double v4 = v13;
  double v6 = v3 >= v12 ? v3 : v12;
  LOBYTE(v10) = 3;
  char v11 = 2;
  double v12 = v6 + 0.1;
  Swift::Int_optional v15 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v10,  (Foundation::Calendar::Component)&v11,  COERCE_FOUNDATION_DATE(v6 + 0.1));
  if (v15.is_nil) {
    goto LABEL_12;
  }
  Swift::Int value = v15.value;
  double v8 = v2 + v3;
  if (v2 + v3 >= v4 + v5) {
    double v8 = v4 + v5;
  }
  LOBYTE(v10) = 3;
  char v11 = 2;
  double v12 = v8 + -0.1;
  Swift::Int_optional v16 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v10,  (Foundation::Calendar::Component)&v11,  COERCE_FOUNDATION_DATE(v8 + -0.1));
  if (v16.is_nil)
  {
LABEL_12:
    Swift::Int value = 0LL;
  }

  else if (v16.value >= value)
  {
    if (__OFADD__(v16.value, 1LL))
    {
      __break(1u);
    }

    else if (v16.value + 1 >= value)
    {
      goto LABEL_13;
    }

    __break(1u);
    return v16.value;
  }

uint64_t _CalendarICU.range(of:in:for:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for closure #1 in _CalendarICU.range(of:in:for:)((uint64_t)&v4);
  uint64_t v2 = v4;
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

void _CalendarICU._locked_range(of:in:for:)(char *a1, _BYTE *a2, double *a3)
{
  unsigned int v3 = *a2;
  double v4 = *a3;
  if (*a3 > 1.59271755e13) {
    double v4 = 1.59271755e13;
  }
  if (v3 > 0xF || ((1 << v3) & 0xE100) == 0)
  {
    unsigned int v6 = *a1;
    switch(*a1)
    {
      case 4:
        if (v3 - 4 < 3) {
          return;
        }
        LOBYTE(v6) = 4;
        goto LABEL_29;
      case 5:
        if (v3 - 5 < 2) {
          return;
        }
        LOBYTE(v6) = 5;
        goto LABEL_29;
      case 6:
        if (v3 == 6) {
          return;
        }
        LOBYTE(v6) = 6;
        goto LABEL_29;
      case 7:
        if (v3 - 3 < 5) {
          return;
        }
        LOBYTE(v6) = 7;
LABEL_29:
        LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
        _CalendarICU._locked_maximumRange(of:)((uint64_t)&v16);
        return;
      case 13:
        LOBYTE(v6) = 13;
        goto LABEL_29;
      default:
        double v7 = fmax(v4, -2.11845067e11);
        switch(*a2)
        {
          case 0:
            if (v6 > 0xB) {
              return;
            }
            if (((1 << v6) & 0xE0E) != 0) {
              goto LABEL_29;
            }
            if (v6 != 8) {
              return;
            }
            LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 3;
            _CalendarICU._locked_maximumRange(of:)((uint64_t)&v16);
            if ((v10 & 1) != 0) {
              return;
            }
            if (__OFSUB__(v9, v8))
            {
              __break(1u);
            }

            else if (!__OFADD__(v8, v9 - v8))
            {
              if (!__OFSUB__(v9, 1LL))
              {
                if (!__OFADD__(v9 - 1, 6LL))
                {
                  if (v9 + 5 >= -6) {
                    return;
                  }
LABEL_60:
                  __break(1u);
                  JUMPOUT(0x18336F9DCLL);
                }

Swift::Int_optional __swiftcall _CalendarICU.ordinality(of:in:for:)( Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  double v4 = *(os_unfair_lock_s **)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  partial apply for closure #1 in _CalendarICU.ordinality(of:in:for:)((uint64_t)&v9);
  Swift::Int v5 = v9;
  Swift::Bool v6 = v10;
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  Swift::Int v7 = v5;
  Swift::Bool v8 = v6;
  result.Swift::Int value = v7;
  result.Swift::Bool is_nil = v8;
  return result;
}

void _CalendarICU._locked_start(of:at:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_18336FB50@<X0>(unsigned __int8 a1@<W8>)
{
  unsigned __int8 v4 = a1;
  _CalendarICU._locked_setToFirstInstant(of:at:)(&v4);
  uint64_t result = ucal_getMillis();
  *(double *)uint64_t v1 = v3 / 1000.0 + -978307200.0;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

double _CalendarICU._locked_add(_:amount:wrap:status:)(int a1, uint64_t a2, char a3)
{
  if (a1 != 14)
  {
    switch(a1)
    {
      case 9:
      case 10:
      case 11:
      case 21:
        switch(a1)
        {
          case 9:
            double v18 = 0.0;
            double v5 = 43200000.0;
            if ((a3 & 1) == 0) {
              goto LABEL_32;
            }
            int v6 = 1;
            break;
          case 10:
          case 11:
            double v5 = 3600000.0;
            if ((a3 & 1) == 0) {
              goto LABEL_25;
            }
            goto LABEL_3;
          case 21:
            goto LABEL_2;
          default:
            int v6 = 0;
            int v19 = 0;
            int v20 = 0;
            int v21 = 0;
            double v5 = 0.0;
            double v18 = 0.0;
            if ((a3 & 1) == 0) {
              goto LABEL_35;
            }
            goto LABEL_4;
        }

        goto LABEL_4;
      case 12:
        double v5 = 60000.0;
        if ((a3 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_3;
      case 13:
        double v5 = 1000.0;
        if ((a3 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_3;
      default:
        if ((a3 & 1) != 0) {
          ucal_roll();
        }
        else {
          ucal_add();
        }
        ucal_getMillis();
        double v28 = v35;
        if (a2 >= 1)
        {
          double v36 = v35 / 1000.0 + -978307200.0;
          _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v36, (uint64_t)&v37);
          if ((v38 & 1) == 0) {
            goto LABEL_41;
          }
        }

        return v28;
    }
  }

Swift::Bool __swiftcall _CalendarICU.isDateInWeekend(_:)(Foundation::Date a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  partial apply for closure #1 in _CalendarICU.isDateInWeekend(_:)(&v5);
  Swift::Bool v3 = v5;
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  return v3;
}

uint64_t _CalendarICU.date(from:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4 = memcpy(v55, __src, 0x11AuLL);
  uint64_t v5 = v55[2];
  if (v55[2])
  {
    uint64_t v50 = a2;
    double v51 = &v20;
    int v6 = *(os_unfair_lock_s **)(v2 + 16);
    MEMORY[0x1895F8858](v4);
    swift_unknownObjectRetain_n();
    swift_retain();
    os_unfair_lock_lock(v6 + 4);
    partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(v54);
    uint64_t v52 = v54[0];
    uint64_t v48 = &v54[33];
    uint64_t v49 = v54[1];
    os_unfair_lock_unlock(v6 + 4);
    swift_unknownObjectRelease();
    swift_release();
    outlined retain of DateComponents((uint64_t)v55);
    swift_unknownObjectRelease();
    int v46 = LOBYTE(v55[35]);
    int v47 = BYTE1(v55[35]);
    uint64_t v44 = v55[32];
    uint64_t v45 = v55[34];
    int v43 = LOBYTE(v55[33]);
    uint64_t v41 = v55[30];
    int v40 = LOBYTE(v55[31]);
    uint64_t v39 = v55[28];
    int v38 = LOBYTE(v55[29]);
    uint64_t v37 = v55[26];
    int v36 = LOBYTE(v55[27]);
    uint64_t v34 = v55[24];
    int v33 = LOBYTE(v55[25]);
    uint64_t v32 = v55[22];
    int v31 = LOBYTE(v55[23]);
    uint64_t v30 = v55[20];
    int v29 = LOBYTE(v55[21]);
    uint64_t v28 = v55[18];
    int v27 = LOBYTE(v55[19]);
    uint64_t v26 = v55[16];
    int v25 = LOBYTE(v55[17]);
    uint64_t v24 = v55[14];
    int v23 = LOBYTE(v55[15]);
    uint64_t v22 = v55[12];
    int v21 = LOBYTE(v55[13]);
    uint64_t v20 = v55[10];
    LOBYTE(v6) = v55[11];
    uint64_t v7 = v55[8];
    char v8 = v55[9];
    uint64_t v9 = v55[6];
    char v10 = v55[7];
    uint64_t v11 = v55[4];
    char v12 = v55[5];
    uint64_t v42 = v5;
    uint64_t v13 = v55[0];
    uint64_t v14 = v55[1];
    uint64_t ObjectType = swift_getObjectType();
    v54[0] = v13;
    v54[1] = v14;
    v54[4] = v11;
    LOBYTE(v54[5]) = v12;
    v54[6] = v9;
    LOBYTE(v54[7]) = v10;
    v54[3] = 0LL;
    v54[2] = 0LL;
    v54[8] = v7;
    LOBYTE(v54[9]) = v8;
    v54[10] = v20;
    LOBYTE(v54[11]) = (_BYTE)v6;
    v54[12] = v22;
    LOBYTE(v54[13]) = v21;
    v54[14] = v24;
    LOBYTE(v54[15]) = v23;
    v54[16] = v26;
    LOBYTE(v54[17]) = v25;
    v54[18] = v28;
    LOBYTE(v54[19]) = v27;
    v54[20] = v30;
    LOBYTE(v54[21]) = v29;
    v54[22] = v32;
    LOBYTE(v54[23]) = v31;
    v54[24] = v34;
    LOBYTE(v54[25]) = v33;
    v54[26] = v37;
    LOBYTE(v54[27]) = v36;
    v54[28] = v39;
    LOBYTE(v54[29]) = v38;
    v54[30] = v41;
    LOBYTE(v54[31]) = v40;
    int v15 = v48;
    *(_BYTE *)uint64_t v48 = v43;
    v54[32] = v44;
    v54[34] = v45;
    *((_BYTE *)v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v46;
    BYTE1(v54[35]) = v47;
    memcpy(v53, v54, 0x11AuLL);
    uint64_t v16 = v49;
    double v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v49 + 176);
    outlined retain of DateComponents((uint64_t)v54);
    v17(v53, ObjectType, v16);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    outlined release of DateComponents((uint64_t)v54);
    return outlined release of DateComponents((uint64_t)v54);
  }

  else
  {
    int v19 = *(os_unfair_lock_s **)(v2 + 16);
    swift_retain();
    os_unfair_lock_lock(v19 + 4);
    closure #1 in _CalendarICU.date(from:)(v2, (uint64_t)v55, a2);
    os_unfair_lock_unlock(v19 + 4);
    return swift_release();
  }

void closure #1 in _CalendarICU.date(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  MEMORY[0x186E21148](*(void *)(a1 + 32));
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  outlined init with take of LocalePreferences?( a2 + 32,  (uint64_t)v30,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v30,  (uint64_t)&v31,  &demangling cache variable for type metadata for Int?);
  if ((v32 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 48,  (uint64_t)v29,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v29,  (uint64_t)&v33,  &demangling cache variable for type metadata for Int?);
  if ((v34 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 256,  (uint64_t)v28,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v28,  (uint64_t)&v35,  &demangling cache variable for type metadata for Int?);
  if ((v36 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 240,  (uint64_t)v27,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v27,  (uint64_t)&v37,  &demangling cache variable for type metadata for Int?);
  if ((v38 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 272,  (uint64_t)v26,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v26,  (uint64_t)&v39,  &demangling cache variable for type metadata for Int?);
  if ((v40 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 176,  (uint64_t)v25,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v25,  (uint64_t)&v41,  &demangling cache variable for type metadata for Int?);
  if ((v42 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 192,  (uint64_t)v24,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v24,  (uint64_t)&v43,  &demangling cache variable for type metadata for Int?);
  if ((v44 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 64,  (uint64_t)v23,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v23,  (uint64_t)&v45,  &demangling cache variable for type metadata for Int?);
  if ((v46 & 1) == 0)
  {
    if (__OFSUB__(v45, 1LL)) {
      __break(1u);
    }
    ucal_set();
  }

  outlined init with take of LocalePreferences?( a2 + 96,  (uint64_t)v22,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v22,  (uint64_t)&v47,  &demangling cache variable for type metadata for Int?);
  if ((v48 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 80,  (uint64_t)v21,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v21,  (uint64_t)&v49,  &demangling cache variable for type metadata for Int?);
  if ((v50 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 112,  (uint64_t)v20,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v20,  (uint64_t)&v51,  &demangling cache variable for type metadata for Int?);
  if ((v52 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 128,  (uint64_t)v19,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)&v53,  &demangling cache variable for type metadata for Int?);
  if ((v54 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 144,  (uint64_t)v18,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v18,  (uint64_t)&v55,  &demangling cache variable for type metadata for Int?);
  if ((v56 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?( a2 + 160,  (uint64_t)v17,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v17,  (uint64_t)&v57,  &demangling cache variable for type metadata for Int?);
  if (v58) {
    double v5 = 0.0;
  }
  else {
    double v5 = (double)v57 * 0.000000001;
  }
  outlined init with take of LocalePreferences?( a2 + 281,  (uint64_t)&v12,  &demangling cache variable for type metadata for Bool?);
  outlined init with take of LocalePreferences?( (uint64_t)&v12,  (uint64_t)&v13,  &demangling cache variable for type metadata for Bool?);
  if ((v13 & 1) != 0) {
    ucal_set();
  }
  int v11 = 0;
  ucal_getMillis();
  double v7 = v5 + v6 / 1000.0 + -978307200.0;
  double v10 = v7;
  _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v10, (uint64_t)v14);
  if ((v16 & 1) == 0) {
    double v7 = v7 - v15;
  }
  BOOL v8 = v11 > 0;
  double v9 = 0.0;
  if (v11 <= 0) {
    double v9 = v7;
  }
  *(double *)a3 = v9;
  *(_BYTE *)(a3 + 8) = v8;
}

void _CalendarICU._locked_timeZoneTransitionInterval(at:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = *a1;
  if (*a1 < -3187299600.0
    || (type metadata accessor for _TimeZoneICU(),
        double v16 = v4 + -172800.0 + 34400000.0,
        double v17 = v4 + -172800.0,
        static _TimeZoneICU.nextDaylightSavingTimeTransition(forLocked:startingAt:limit:)(&v17, &v16, (uint64_t)&v18),
        (v19 & 1) != 0)
    || (double v5 = v18, v6 = v18, v4 < v18))
  {
LABEL_8:
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    return;
  }

  uint64_t v7 = *(void *)(v2 + 48);
  uint64_t ObjectType = swift_getObjectType();
  double v18 = v6 + -1.0;
  double v9 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v7 + 40);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(&v18, ObjectType, v7);
  swift_unknownObjectRelease();
  uint64_t v11 = *(void *)(v2 + 48);
  uint64_t v12 = swift_getObjectType();
  double v18 = v6 + 1.0;
  char v13 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v11 + 40);
  swift_unknownObjectRetain();
  uint64_t v14 = v13(&v18, v12, v11);
  swift_unknownObjectRelease();
  uint64_t v15 = v10 - v14;
  if (!__OFSUB__(v10, v14))
  {
    if (v15 >= 1 && v4 < v6 + (double)v15)
    {
      *(double *)a2 = v5;
      *(double *)(a2 + 8) = (double)v15;
      *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
      return;
    }

    goto LABEL_8;
  }

  __break(1u);
}

uint64_t _CalendarICU.dateComponents(_:from:in:)@<X0>( uint64_t *a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a1;
  double v7 = *a2;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  __int128 v17 = *(_OWORD *)(v4 + 40);
  v16[0] = v8;
  v16[1] = v9;
  uint64_t v10 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v17, (uint64_t)v16);
  if ((v10 & 1) != 0)
  {
    uint64_t v11 = *(os_unfair_lock_s **)(v4 + 16);
    swift_retain();
    os_unfair_lock_lock(v11 + 4);
    closure #1 in _CalendarICU.dateComponents(_:from:)((void *)v4, v6, a4, v7);
    os_unfair_lock_unlock(v11 + 4);
    return swift_release();
  }

  else
  {
    char v13 = *(os_unfair_lock_s **)(v4 + 16);
    MEMORY[0x1895F8858](v10);
    swift_unknownObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v13 + 4);
    partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)((uint64_t *)&v17);
    uint64_t v14 = *((void *)&v17 + 1);
    os_unfair_lock_unlock(v13 + 4);
    swift_unknownObjectRelease();
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&__int128 v17 = v6;
    *(double *)double v16 = v7;
    (*(void (**)(__int128 *, void *, uint64_t, uint64_t))(v14 + 192))(&v17, v16, ObjectType, v14);
    return swift_unknownObjectRelease();
  }

void *closure #1 in _CalendarICU.dateComponents(_:from:)@<X0>( void *a1@<X0>, int a2@<W1>, void *a3@<X8>, double a4@<D0>)
{
  __src[36] = *MEMORY[0x1895F89C0];
  if (a4 > 1.59271755e13) {
    a4 = 1.59271755e13;
  }
  double v7 = fmax(a4, -2.11845067e11);
  MEMORY[0x186E21148](a1[4]);
  double v8 = floor(v7);
  ucal_setMillis();
  __int128 v15 = 0uLL;
  v14[0] = 0LL;
  v14[1] = 0LL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( &v15,  v14,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  if ((a2 & 1) != 0)
  {
    __src[4] = (int)ucal_get();
    LOBYTE(__src[5]) = 0;
    if ((a2 & 2) == 0)
    {
LABEL_5:
      if ((a2 & 0x200) == 0) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
  }

  else if ((a2 & 2) == 0)
  {
    goto LABEL_5;
  }

  __src[6] = (int)ucal_get();
  LOBYTE(__src[7]) = 0;
  if ((a2 & 0x200) == 0)
  {
LABEL_6:
    if ((a2 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

uint64_t closure #1 in _CalendarICU.date(byAdding:to:wrappingComponents:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  double v8 = fmax(a5, -2.11845067e11);
  if (a5 <= 1.59271755e13) {
    double v9 = v8;
  }
  else {
    double v9 = 1.59271755e13;
  }
  MEMORY[0x186E21148](*(void *)(a1 + 32));
  double v10 = 0.0;
  double v11 = trunc(v9);
  if ((*(void *)&v9 & 0x7FF0000000000000LL) != 0x7FF0000000000000LL) {
    double v10 = v9 - v11;
  }
  if (v10 >= 0.0) {
    double v12 = v10;
  }
  else {
    double v12 = v10 + 1.0;
  }
  ucal_setMillis();
  outlined init with take of LocalePreferences?( a2 + 32,  (uint64_t)v33,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v33,  (uint64_t)&v34,  &demangling cache variable for type metadata for Int?);
  if ((v35 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(0, v34, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 48,  (uint64_t)v32,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v32,  (uint64_t)&v36,  &demangling cache variable for type metadata for Int?);
  if ((v37 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(1, v36, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 272,  (uint64_t)v31,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v31,  (uint64_t)&v38,  &demangling cache variable for type metadata for Int?);
  if ((v39 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(17, v38, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 64,  (uint64_t)v30,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v30,  (uint64_t)&v40,  &demangling cache variable for type metadata for Int?);
  if ((v41 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(2, v40, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 256,  (uint64_t)v29,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v29,  (uint64_t)&v43,  &demangling cache variable for type metadata for Int?);
  if ((v44 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(3, v43, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 240,  (uint64_t)v28,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v28,  (uint64_t)&v45,  &demangling cache variable for type metadata for Int?);
  if ((v46 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(4, v45, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 192,  (uint64_t)v27,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v27,  (uint64_t)&v47,  &demangling cache variable for type metadata for Int?);
  if ((v48 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(8, v47, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 224,  (uint64_t)v26,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v26,  (uint64_t)&v49,  &demangling cache variable for type metadata for Int?);
  if ((v50 & 1) == 0)
  {
    uint64_t v13 = v49;
    outlined init with take of LocalePreferences?( (uint64_t)v29,  (uint64_t)v42,  &demangling cache variable for type metadata for Int?);
    if (v42[8] == 1) {
      _CalendarICU._locked_add(_:amount:wrap:status:)(3, v13, a3 & 1);
    }
  }

  outlined init with take of LocalePreferences?( a2 + 80,  (uint64_t)v25,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v25,  (uint64_t)&v51,  &demangling cache variable for type metadata for Int?);
  if ((v52 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(5, v51, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 96,  (uint64_t)v24,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v24,  (uint64_t)&v53,  &demangling cache variable for type metadata for Int?);
  if ((v54 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(6, v53, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 176,  (uint64_t)v23,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v23,  (uint64_t)&v55,  &demangling cache variable for type metadata for Int?);
  if ((v56 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(7, v55, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 112,  (uint64_t)v22,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v22,  (uint64_t)&v57,  &demangling cache variable for type metadata for Int?);
  if ((v58 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(11, v57, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 128,  (uint64_t)v21,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v21,  (uint64_t)&v59,  &demangling cache variable for type metadata for Int?);
  if ((v60 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(12, v59, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 144,  (uint64_t)v20,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v20,  (uint64_t)&v61,  &demangling cache variable for type metadata for Int?);
  if ((v62 & 1) == 0) {
    _CalendarICU._locked_add(_:amount:wrap:status:)(13, v61, a3 & 1);
  }
  outlined init with take of LocalePreferences?( a2 + 160,  (uint64_t)v19,  &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)&v63,  &demangling cache variable for type metadata for Int?);
  int v14 = v64;
  uint64_t v15 = v63;
  uint64_t result = ucal_getMillis();
  double v18 = (double)v15 * 0.000000001;
  if (v14) {
    double v18 = 0.0;
  }
  *(double *)a4 = v18 + v12 + v17 / 1000.0 + -978307200.0;
  *(_BYTE *)(a4 + 8) = 0;
  return result;
}

void *closure #1 in _CalendarICU.dateComponents(_:from:to:)@<X0>( uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  __src[36] = *MEMORY[0x1895F89C0];
  double v7 = 1.59271755e13;
  if (a4 <= 1.59271755e13)
  {
    double v8 = -2.11845067e11;
    if (a4 <= -2.11845067e11)
    {
      if (a5 <= 1.59271755e13)
      {
        double v8 = -2.11845067e11;
        double v7 = fmax(a5, -2.11845067e11);
      }
    }

    else
    {
      double v7 = 1.59271755e13;
      if (a5 <= 1.59271755e13) {
        double v7 = fmax(a5, -2.11845067e11);
      }
      double v8 = a4;
    }
  }

  else
  {
    double v8 = 1.59271755e13;
    if (a5 <= 1.59271755e13) {
      double v7 = fmax(a5, -2.11845067e11);
    }
    else {
      double v7 = 1.59271755e13;
    }
  }

  MEMORY[0x186E21148](*(void *)(a1 + 32));
  double v9 = (v7 + 978307200.0) * 1000.0 - ((v8 + 978307200.0) * 1000.0 - floor((v8 + 978307200.0) * 1000.0));
  ucal_setMillis();
  __int128 v18 = 0uLL;
  v17[0] = 0LL;
  v17[1] = 0LL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( &v18,  v17,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  if ((a2 & 1) != 0)
  {
    ucal_getMillis();
    int v10 = ucal_get();
    ucal_setMillis();
    int v11 = ucal_get();
    ucal_setMillis();
    ucal_set();
    if (__OFSUB__(v11, v10))
    {
      __break(1u);
      goto LABEL_55;
    }

    __src[4] = v11 - v10;
    LOBYTE(__src[5]) = 0;
  }

  if ((a2 & 2) != 0)
  {
    __src[6] = (int)ucal_getFieldDifference();
    LOBYTE(__src[7]) = 0;
    if ((a2 & 0x1000) == 0)
    {
LABEL_16:
      if ((a2 & 0x200) == 0) {
        goto LABEL_17;
      }
      goto LABEL_31;
    }
  }

  else if ((a2 & 0x1000) == 0)
  {
    goto LABEL_16;
  }

  __src[34] = (int)ucal_getFieldDifference();
  LOBYTE(__src[35]) = 0;
  if ((a2 & 0x200) == 0)
  {
LABEL_17:
    if ((a2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }

void _CalendarICU._locked_setToFirstInstant(of:at:)(unsigned __int8 *a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  unsigned int v1 = *a1;
  int v6 = 0;
  ucal_setMillis();
  ucal_getLimit();
  ucal_set();
  ucal_set();
  ucal_getLimit();
  ucal_set();
  ucal_getLimit();
  ucal_set();
  ucal_getLimit();
  ucal_set();
  ucal_getLimit();
  ucal_set();
  ucal_set();
  if (v1 <= 8 && ((1 << v1) & 0x188) != 0)
  {
    int v3 = ucal_get();
    do
    {
      ucal_getMillis();
      ucal_add();
    }

    while (v3 == ucal_get());
    ucal_setMillis();
  }

  ucal_getMillis();
  double v5 = v4 / 1000.0 + -978307200.0;
  _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v5, (uint64_t)v7);
  if ((v7[16] & 1) == 0) {
    ucal_setMillis();
  }
}

double _CalendarICU.totalSecondsInSmallUnits(_:status:)(int a1)
{
  double v1 = 0.0;
  if (a1 != 14 && a1 != 21)
  {
    double v1 = (double)(int)ucal_get() / 1000.0 + 0.0;
    if (a1 != 13)
    {
      double v1 = v1 + (double)(int)ucal_get();
      if (a1 != 12) {
        return v1 + (double)(int)ucal_get() * 60.0;
      }
    }
  }

  return v1;
}

uint64_t protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarICU( unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  unsigned __int8 v19 = *a1;
  char v12 = *(_BYTE *)(a8 + 8);
  char v13 = a5 & 1;
  char v14 = a7 & 1;
  uint64_t v17 = *(void *)a8;
  char v18 = v12;
  uint64_t v15 = swift_allocObject();
  _CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( &v19,  a2,  a3,  a4,  v13,  a6,  v14,  &v17);
  return v15;
}

void protocol witness for _CalendarProtocol.identifier.getter in conformance _CalendarICU(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 24);
}

uint64_t protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarICU@<X0>( _OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 40);
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _CalendarProtocol.firstWeekday.getter in conformance _CalendarICU()
{
  return _CalendarICU.firstWeekday.getter((void (*)(uint64_t *__return_ptr))partial apply for closure #1 in _CalendarICU.firstWeekday.getter);
}

uint64_t protocol witness for _CalendarProtocol.preferredFirstWeekday.getter in conformance _CalendarICU()
{
  return _CalendarICU.preferredFirstWeekday.getter();
}

uint64_t protocol witness for _CalendarProtocol.minimumDaysInFirstWeek.getter in conformance _CalendarICU()
{
  return _CalendarICU.firstWeekday.getter((void (*)(uint64_t *__return_ptr))partial apply for closure #1 in _CalendarICU.minimumDaysInFirstWeek.getter);
}

uint64_t protocol witness for _CalendarProtocol.preferredMinimumDaysInFirstweek.getter in conformance _CalendarICU()
{
  return _CalendarICU.preferredMinimumDaysInFirstweek.getter();
}

void protocol witness for _CalendarProtocol.gregorianStartDate.getter in conformance _CalendarICU( uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 96);
  *(void *)a1 = *(void *)(v1 + 88);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarICU()
{
  return _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)();
}

void protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarICU(uint64_t a1)
{
}

uint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarICU()
{
  return _CalendarICU.maximumRange(of:)();
}

uint64_t protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarICU()
{
  return _CalendarICU.range(of:in:for:)();
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarICU( Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarICU.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

uint64_t protocol witness for _CalendarProtocol.dateInterval(of:for:) in conformance _CalendarICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:) in conformance _CalendarICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t protocol witness for _CalendarProtocol.date(byAdding:to:wrappingComponents:) in conformance _CalendarICU( void *__src)
{
  char v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:to:) in conformance _CalendarICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CalendarICU()
{
  BYTE8(v2) = 0;
  *(void *)&__int128 v2 = *(unsigned __int8 *)(*(void *)v0 + 24LL);
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

void *Calendar.eraSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.longEraSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.monthSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortMonthSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.veryShortMonthSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.standaloneMonthSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortStandaloneMonthSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.veryShortStandaloneMonthSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.weekdaySymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortWeekdaySymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.veryShortWeekdaySymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.standaloneWeekdaySymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortStandaloneWeekdaySymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.veryShortStandaloneWeekdaySymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.quarterSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortQuarterSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.standaloneQuarterSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortStandaloneQuarterSymbols.getter()
{
  __int128 v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  __int128 v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  __int128 v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __int128 v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

uint64_t Calendar.amSymbol.getter()
{
  __int128 v5 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v5, (uint64_t)&v15);
  __int128 v5 = v15;
  uint64_t v6 = v16;
  uint64_t v7 = v17;
  char v8 = v18;
  __int128 v9 = v19;
  char v10 = v20;
  uint64_t v11 = v21;
  uint64_t v12 = v22;
  char v13 = v23;
  uint64_t v14 = v24;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v1)
  {
    int v3 = ICUDateFormatter.symbols(for:)();
    uint64_t result = swift_release();
    if (v3[2])
    {
LABEL_3:
      uint64_t v4 = v3[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v4;
    }
  }

  else
  {
    int v3 = (void *)MEMORY[0x18961AFE8];
    if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
      goto LABEL_3;
    }
  }

  __break(1u);
  return result;
}

uint64_t Calendar.pmSymbol.getter()
{
  __int128 v5 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v5, (uint64_t)&v15);
  __int128 v5 = v15;
  uint64_t v6 = v16;
  uint64_t v7 = v17;
  char v8 = v18;
  __int128 v9 = v19;
  char v10 = v20;
  uint64_t v11 = v21;
  uint64_t v12 = v22;
  char v13 = v23;
  uint64_t v14 = v24;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v1)
  {
    int v3 = ICUDateFormatter.symbols(for:)();
    uint64_t result = swift_release();
  }

  else
  {
    int v3 = (void *)MEMORY[0x18961AFE8];
  }

  if (v3[2] < 2uLL)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = v3[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v4;
  }

  return result;
}

uint64_t specialized static _CalendarICU.icuCalendar(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  void (*v22)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v32;
  char v33;
  uint64_t result;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  void v43[18];
  _DWORD v44[36];
  void __dst[44];
  void v46[25];
  __int16 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD __src[22];
  uint64_t v58;
  char v58 = *MEMORY[0x1895F89C0];
  unsigned int v7 = *a1;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 64);
  swift_unknownObjectRetain();
  uint64_t v13 = v12(ObjectType, v10);
  uint64_t v15 = v14;
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  char v39 = v13;
  Locale.Components.init(identifier:)(v13, v15, v46);
  __src[0] = *(_OWORD *)v46;
  __src[1] = *(_OWORD *)&v46[2];
  void __src[2] = *(_OWORD *)&v46[4];
  __src[3] = *(_OWORD *)&v46[6];
  __src[4] = *(_OWORD *)&v46[8];
  __src[5] = *(_OWORD *)&v46[10];
  LOBYTE(__src[6]) = v7;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)&v46[13];
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)&v46[15];
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)&v46[17];
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)&v46[19];
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)&v46[21];
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)&v46[23];
  WORD4(__src[12]) = v47;
  __src[13] = v48;
  __src[14] = v49;
  __src[15] = v50;
  __src[16] = v51;
  __src[17] = v52;
  _OWORD __src[18] = v53;
  _OWORD __src[19] = v54;
  __src[20] = v55;
  __src[21] = v56;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  uint64_t v16 = swift_getObjectType();
  unint64_t v17 = *(void *)(v8 + 32);
  swift_unknownObjectRetain();
  uint64_t v18 = ((uint64_t (*)(uint64_t, uint64_t))v17)(v16, v8);
  unint64_t v20 = v19;
  swift_unknownObjectRelease();
  uint64_t v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v18, v20);
  swift_bridgeObjectRelease();
  if (v21[2] >> 31)
  {
    __break(1u);
    goto LABEL_35;
  }

  String.utf8CString.getter();
  uint64_t v9 = ucal_open();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v9) {
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  unint64_t v17 = v7;
  if (v7)
  {
    if ((a5 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v22 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v22(v43, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v43,  (uint64_t)v44,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v44,  (uint64_t)__dst,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    char v23 = __dst[6];
    swift_bridgeObjectRetain();
    outlined release of LocalePreferences?((uint64_t)v44);
    if (!v23) {
      goto LABEL_25;
    }
    if (!*(void *)(v23 + 16)) {
      goto LABEL_24;
    }
    uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    if ((v25 & 1) == 0) {
      goto LABEL_24;
    }
    uint64_t v15 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
    swift_bridgeObjectRelease();
    if (v15 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v15 <= 0x7FFFFFFF)
      {
        if (one-time initialization token for weekdays == -1) {
          goto LABEL_18;
        }
        goto LABEL_39;
      }

uint64_t type metadata accessor for _CalendarICU()
{
  return objc_opt_self();
}

uint64_t instantiation function for generic protocol witness table for _CalendarICU(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU( &lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU,  (uint64_t)&protocol conformance descriptor for _CalendarICU);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for _CalendarICU();
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

void *partial apply for closure #1 in _CalendarICU.dateComponents(_:from:to:)@<X0>(void *a1@<X8>)
{
  return closure #1 in _CalendarICU.dateComponents(_:from:to:)( *(void *)(v1 + 32),  *(void *)(v1 + 40),  a1,  *(double *)(v1 + 16),  *(double *)(v1 + 24));
}

uint64_t partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in _CalendarICU.date(byAdding:to:wrappingComponents:)@<X0>( uint64_t a1@<X8>)
{
  return closure #1 in _CalendarICU.date(byAdding:to:wrappingComponents:)( *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(_BYTE *)(v1 + 40),  a1,  *(double *)(v1 + 16));
}

void *partial apply for closure #1 in _CalendarICU.dateComponents(_:from:)@<X0>(void *a1@<X8>)
{
  return closure #1 in _CalendarICU.dateComponents(_:from:)( *(void **)(v1 + 24),  *(void *)(v1 + 32),  a1,  *(double *)(v1 + 16));
}

uint64_t outlined release of LocalePreferences?(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)@<X0>( uint64_t *a1@<X8>)
{
  return closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)( *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(_BYTE *)(v1 + 64),  *(void *)(v1 + 72),  a1,  *(_BYTE *)(v1 + 80));
}

uint64_t partial apply for closure #1 in _CalendarICU.isDateInWeekend(_:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = ucal_isWeekend();
  *a1 = (_DWORD)result != 0;
  return result;
}

double partial apply for closure #1 in _CalendarICU.dateInterval(of:for:)()
{
  char v2 = *(_BYTE *)(v0 + 24);
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v2);
  return result;
}

Swift::Int partial apply for closure #1 in _CalendarICU.ordinality(of:in:for:)@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(_BYTE *)(v1 + 25);
  *(Foundation::Date *)&v4._double time = *(Foundation::Date *)(v1 + 32);
  char v7 = *(_BYTE *)(v1 + 24);
  char v6 = v3;
  Swift::Int_optional v8 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v7,  (Foundation::Calendar::Component)&v6,  v4);
  *(void *)a1 = v8.value;
  *(_BYTE *)(a1 + 8) = v8.is_nil;
  return v8.value;
}

void partial apply for closure #1 in _CalendarICU.range(of:in:for:)(uint64_t a1@<X8>)
{
  char v3 = *(_BYTE *)(v1 + 25);
  double v4 = *(double *)(v1 + 32);
  char v10 = *(_BYTE *)(v1 + 24);
  char v9 = v3;
  double v8 = v4;
  _CalendarICU._locked_range(of:in:for:)(&v10, &v9, &v8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7 & 1;
}

void partial apply for closure #1 in _CalendarICU.maximumRange(of:)(uint64_t a1@<X8>)
{
  char v6 = *(_BYTE *)(v1 + 24);
  _CalendarICU._locked_maximumRange(of:)((uint64_t)&v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5 & 1;
}

uint64_t partial apply for closure #1 in _CalendarICU.minimumRange(of:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in _CalendarICU.minimumRange(of:)(*(_BYTE *)(v1 + 28), a1);
}

void partial apply for closure #1 in _CalendarICU.minimumDaysInFirstWeek.getter(void *a1@<X8>)
{
  if (*(_BYTE *)(v1 + 80) == 1) {
    uint64_t Attribute = (int)ucal_getAttribute();
  }
  else {
    uint64_t Attribute = *(void *)(v1 + 72);
  }
  *a1 = Attribute;
}

void partial apply for closure #1 in _CalendarICU.firstWeekday.getter(void *a1@<X8>)
{
  if (*(_BYTE *)(v1 + 64) == 1) {
    uint64_t Attribute = (int)ucal_getAttribute();
  }
  else {
    uint64_t Attribute = *(void *)(v1 + 56);
  }
  *a1 = Attribute;
}

char *NSLog(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized withVaList<A>(_:_:)(a3);
}

uint64_t CVarArg<>._cVarArgEncoding.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = (id)MEMORY[0x186E1C624](a1, a3);
  swift_unknownObjectRetain();
  uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1LL;
  *(void *)(v4 + 32) = v3;
  swift_unknownObjectRelease();
  return v4;
}

char *specialized withVaList<A>(_:_:)(uint64_t a1)
{
  char v2 = (void *)swift_allocObject();
  void v2[2] = 8LL;
  v2[3] = 0LL;
  id v3 = v2 + 3;
  v2[4] = 0LL;
  v2[5] = 0LL;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_25:
    va_list v22 = (va_list)__VaListBuilder.va_list()();
    char v23 = (NSString *)String._bridgeToObjectiveCImpl()();
    NSLogv(v23, v22);
    swift_bridgeObjectRelease();
    swift_release();
    return (char *)swift_unknownObjectRelease();
  }

  uint64_t v5 = 0LL;
  uint64_t v6 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v6 + 40 * v5,  (uint64_t)v24);
    uint64_t v7 = v25;
    uint64_t v8 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    double result = (char *)MEMORY[0x186E1CF6C](v7, v8);
    uint64_t v10 = *v3;
    uint64_t v11 = *((void *)result + 2);
    BOOL v12 = __OFADD__(*v3, v11);
    uint64_t v13 = *v3 + v11;
    if (v12) {
      break;
    }
    uint64_t v14 = result;
    uint64_t v15 = v2[4];
    if (v15 >= v13) {
      goto LABEL_18;
    }
    if (v15 + 0x4000000000000000LL < 0) {
      goto LABEL_28;
    }
    uint64_t v16 = (char *)v2[5];
    if (2 * v15 > v13) {
      uint64_t v13 = 2 * v15;
    }
    v2[4] = v13;
    double result = (char *)swift_slowAlloc();
    v2[5] = result;
    if (v16)
    {
      if (result != v16 || result >= &v16[8 * v10]) {
        memmove(result, v16, 8 * v10);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      double result = (char *)v2[5];
    }

    if (!result) {
      goto LABEL_30;
    }
    uint64_t v18 = *((void *)v14 + 2);
    if (v18)
    {
      unint64_t v19 = (uint64_t *)(v14 + 32);
      uint64_t v20 = *v3;
      while (1)
      {
        uint64_t v21 = *v19++;
        *(void *)&result[8 * v20] = v21;
        uint64_t v20 = *v3 + 1;
        if (__OFADD__(*v3, 1LL)) {
          break;
        }
        *id v3 = v20;
        if (!--v18) {
          goto LABEL_3;
        }
      }

      __break(1u);
      break;
    }

uint64_t NSNotFound.getter()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)( Swift::String _, Swift::String_optional tableName, NSBundle *bundle, Swift::String value, Swift::String comment)
{
  id object = tableName.value._object;
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  if (object) {
    id object = (void *)String._bridgeToObjectiveCImpl()();
  }
  char v9 = -[NSBundle localizedStringForKey:value:table:](bundle, sel_localizedStringForKey_value_table_, v7, v8, object);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  BOOL v12 = v11;

  uint64_t v13 = (uint64_t)v10;
  uint64_t v14 = v12;
  result._id object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

NSObject __swiftcall AnyHashable._bridgeToObjectiveC()()
{
  uint64_t v0 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return (NSObject)v0;
}

uint64_t static AnyHashable._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  return AnyHashable.init<A>(_:)();
}

uint64_t outlined destroy of AnyHashable?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyHashable?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

BOOL static AnyHashable._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  v7[0] = a1;
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  id v4 = a1;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable?(a2, (uint64_t)v7);
  BOOL v5 = v7[3] != 0LL;
  outlined destroy of AnyHashable?((uint64_t)v7);
  return v5;
}

uint64_t outlined init with copy of AnyHashable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyHashable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t static AnyHashable._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    type metadata accessor for NSObject();
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    id v2 = a1;
  }

  return AnyHashable.init<A>(_:)();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AnyHashable()
{
  uint64_t v0 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v0;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AnyHashable( void *a1, uint64_t a2)
{
  id v3 = a1;
  return AnyHashable.init<A>(_:)();
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AnyHashable( void *a1, uint64_t a2)
{
  v7[0] = a1;
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  id v4 = a1;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable?(a2, (uint64_t)v7);
  BOOL v5 = v7[3] != 0LL;
  outlined destroy of AnyHashable?((uint64_t)v7);
  return v5;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AnyHashable( void *a1)
{
  if (a1)
  {
    type metadata accessor for NSObject();
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    id v2 = a1;
  }

  return AnyHashable.init<A>(_:)();
}

void NSDate.customPlaygroundQuickLook.getter(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), sel_init);
  objc_msgSend(v3, sel_setDateStyle_, 2);
  objc_msgSend(v3, sel_setTimeStyle_, 1);
  id v4 = objc_msgSend(v3, sel_stringFromDate_, v1);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 32) = 0;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance NSDate( uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), sel_init);
  objc_msgSend(v4, sel_setDateStyle_, 2);
  objc_msgSend(v4, sel_setTimeStyle_, 1);
  id v5 = objc_msgSend(v4, sel_stringFromDate_, v3);
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 32) = 0;
}

void PredicateExpressions.Range.init(lower:upper:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

void type metadata accessor for PredicateExpressions.Range()
{
}

uint64_t PredicateExpressions.Range.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v49 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v47 - v10;
  BOOL v12 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  char v50 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v47 - v17;
  uint64_t v19 = *a1;
  uint64_t v51 = v19;
  uint64_t v20 = v53;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v4 + 16))(&v51, v5, v4, v16);
  if (!v20)
  {
    uint64_t v53 = v11;
    uint64_t v22 = v49;
    char v23 = v50;
    uint64_t v51 = v19;
    (*(void (**)(uint64_t *, void))(*(void *)(v49 + 40) + 16LL))(&v51, *(void *)(v49 + 24));
    uint64_t v24 = *(void *)(v22 + 48);
    if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) != 0)
    {
      uint64_t v25 = v12;
      uint64_t v26 = v18;
      uint64_t v49 = v24;
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) != 0)
      {
        uint64_t v27 = TupleTypeMetadata2;
        uint64_t v28 = v53;
        int v29 = &v53[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v30 = (void (*)(char *, char *, uint64_t))v25[4];
        v30(v53, v26, AssociatedTypeWitness);
        int v31 = v29;
        v30(v29, v50, AssociatedTypeWitness);
        char v32 = v8;
        int v33 = &v8[*(int *)(v27 + 48)];
        uint64_t v34 = (void (*)(char *, char *, uint64_t))v25[2];
        v34(v32, v28, AssociatedTypeWitness);
        v34(v33, v31, AssociatedTypeWitness);
        char v35 = v47;
        v30(v47, v32, AssociatedTypeWitness);
        uint64_t v36 = (void (*)(char *, uint64_t))v25[1];
        v36(v33, AssociatedTypeWitness);
        char v37 = (uint64_t (*)(char *, uint64_t))v36;
        uint64_t v38 = &v32[*(int *)(TupleTypeMetadata2 + 48)];
        v30(v32, v28, AssociatedTypeWitness);
        v30(v38, v31, AssociatedTypeWitness);
        uint64_t v39 = type metadata accessor for Range();
        v30(&v35[*(int *)(v39 + 36)], v38, AssociatedTypeWitness);
        return v37(v32, AssociatedTypeWitness);
      }

      else
      {
        __break(1u);
      }
    }

    else
    {
      uint64_t v51 = 0LL;
      unint64_t v52 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(54LL);
      v40._uint64_t countAndFlagsBits = 0xD000000000000020LL;
      v40._id object = (void *)0x80000001839D1F50LL;
      String.append(_:)(v40);
      _print_unlocked<A, B>(_:_:)();
      v41._id object = (void *)0x80000001839D1F80LL;
      v41._uint64_t countAndFlagsBits = 0xD000000000000011LL;
      String.append(_:)(v41);
      _print_unlocked<A, B>(_:_:)();
      v42._uint64_t countAndFlagsBits = 41LL;
      v42._id object = (void *)0xE100000000000000LL;
      String.append(_:)(v42);
      uint64_t v43 = v51;
      unint64_t v44 = v52;
      lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
      swift_allocError();
      *(void *)uint64_t v45 = v43;
      *(void *)(v45 + 8) = v44;
      *(_BYTE *)(v45 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2;
      swift_willThrow();
      char v46 = (void (*)(char *, uint64_t))v12[1];
      v46(v23, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v46)(v18, AssociatedTypeWitness);
    }
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Range<A, B>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return PredicateExpressions.Range.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_Range<A, B>(lower:upper:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

uint64_t PredicateExpressions.Range.description.getter(int a1)
{
  return PredicateExpressions.Range.description.getter(a1, 27LL, 0x6F6C2865676E6152LL, (void *)0xED0000203A726577LL);
}

uint64_t PredicateExpressions.Range<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.Range<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Range<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.Range<>.init(from:),  a5,  a6);
}

uint64_t PredicateExpressions.ClosedRange.lower.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void PredicateExpressions.ClosedRange.init(lower:upper:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

void type metadata accessor for PredicateExpressions.ClosedRange()
{
}

uint64_t PredicateExpressions.ClosedRange.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v40 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  Swift::String v41 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *a1;
  uint64_t v43 = v19;
  uint64_t v20 = v42;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v4 + 16))(&v43, v5, v4, v16);
  if (!v20)
  {
    uint64_t v22 = v12;
    Swift::String v42 = v11;
    uint64_t v23 = v40;
    uint64_t v43 = v19;
    (*(void (**)(uint64_t *, void))(*(void *)(v40 + 40) + 16LL))(&v43, *(void *)(v40 + 24));
    uint64_t v24 = *(void *)(v23 + 48);
    uint64_t v25 = AssociatedTypeWitness;
    uint64_t v40 = v24;
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v26 = TupleTypeMetadata2;
      uint64_t v27 = v42;
      uint64_t v28 = &v42[*(int *)(TupleTypeMetadata2 + 48)];
      int v29 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
      v29(v42, v18, v25);
      char v37 = v28;
      v29(v28, v41, v25);
      uint64_t v30 = &v8[*(int *)(v26 + 48)];
      uint64_t v31 = v22;
      char v32 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
      v32(v8, v27, v25);
      v32(v30, v28, v25);
      int v33 = v38;
      v29(v38, v8, v25);
      uint64_t v34 = *(void (**)(char *, uint64_t))(v31 + 8);
      v34(v30, v25);
      char v35 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
      v29(v8, v27, v25);
      v29(v35, v37, v25);
      uint64_t v36 = type metadata accessor for ClosedRange();
      v29(&v33[*(int *)(v36 + 36)], v35, v25);
      return ((uint64_t (*)(char *, uint64_t))v34)(v8, v25);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ClosedRange<A, B>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return PredicateExpressions.ClosedRange.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_ClosedRange<A, B>(lower:upper:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

uint64_t PredicateExpressions.ClosedRange.description.getter(int a1)
{
  return PredicateExpressions.Range.description.getter(a1, 33LL, 0xD000000000000013LL, (void *)0x80000001839D1FA0LL);
}

uint64_t PredicateExpressions.Range.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  v6._uint64_t countAndFlagsBits = a3;
  v6._id object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x3A7265707075202CLL;
  v7._id object = (void *)0xE900000000000020LL;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 41LL;
  v8._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 0LL;
}

uint64_t PredicateExpressions.ClosedRange<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ClosedRange<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ClosedRange<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.ClosedRange<>.init(from:),  a5,  a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ClosedRange<A, B>( void *a1)
{
  return PredicateExpressions.ClosedRange<>.encode(to:)(a1);
}

void PredicateExpressions.RangeExpressionContains.init(range:element:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

void type metadata accessor for PredicateExpressions.RangeExpressionContains()
{
}

uint64_t PredicateExpressions.RangeExpressionContains.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v24 = *(void *)(a2 + 40);
  uint64_t v22 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v20 - v6;
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = *a1;
  uint64_t v26 = v14;
  uint64_t v15 = v25;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v7 + 16))(&v26, v8, v7, v11);
  if (!v15)
  {
    uint64_t v16 = v9;
    uint64_t v17 = AssociatedTypeWitness;
    uint64_t v26 = v14;
    uint64_t v18 = v23;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 16))(&v26, v22);
    LOBYTE(v2) = dispatch thunk of RangeExpression.contains(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v17);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v16);
  }

  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.RangeExpressionContains<A, B>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.RangeExpressionContains.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

void static PredicateExpressions.build_contains<A, B>(_:_:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

uint64_t PredicateExpressions.RangeExpressionContains.description.getter()
{
  v0._id object = (void *)0x80000001839D1FC0LL;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x6E656D656C65202CLL;
  v1._id object = (void *)0xEB00000000203A74LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.RangeExpressionContains<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.RangeExpressionContains<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Range<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Range<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Range<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Range<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ClosedRange<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.ClosedRange<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ClosedRange<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ClosedRange<A, B>);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.RangeExpressionContains<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.RangeExpressionContains<>.init(from:),  a5,  a6);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Range(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_183375B28 + 4 * byte_183824F30[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Range( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Range<A, B>( void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ClosedRange<A, B>(a1);
}

uint64_t dispatch thunk of static AttributeScope.decodingConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  Swift::String v2 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
  uint64_t v3 = (void *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v5 = *(v2 - 1);
    uint64_t v6 = *v2;
    uint64_t v7 = *(v2 - 3);
    size_t v8 = (void *)*(v2 - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = LoadedScopeCache.scopeType(for:in:)(v7, v8, v5, v6);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1LL,  1,  v3);
      }
      unint64_t v13 = v3[2];
      unint64_t v12 = v3[3];
      if (v13 >= v12 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v3);
      }
      uint64_t v3[2] = v13 + 1;
      uint64_t v4 = &v3[2 * v13];
      v4[4] = v9;
      void v4[5] = v11;
    }

    v2 += 4;
    --v1;
  }

  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[4];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  __int128 v38[4];
  char v39;
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  uint64_t v1 = *(_OWORD *)(a1 + 176);
  unint64_t v52 = *(_OWORD *)(a1 + 160);
  uint64_t v53 = v1;
  char v54 = *(_OWORD *)(a1 + 192);
  uint64_t v55 = *(void *)(a1 + 208);
  Swift::String v2 = *(_OWORD *)(a1 + 112);
  char v48 = *(_OWORD *)(a1 + 96);
  uint64_t v49 = v2;
  uint64_t v3 = *(_OWORD *)(a1 + 144);
  char v50 = *(_OWORD *)(a1 + 128);
  uint64_t v51 = v3;
  uint64_t v4 = *(_OWORD *)(a1 + 48);
  unint64_t v44 = *(_OWORD *)(a1 + 32);
  uint64_t v45 = v4;
  uint64_t v5 = *(_OWORD *)(a1 + 80);
  char v46 = *(_OWORD *)(a1 + 64);
  uint64_t v47 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 16);
  uint64_t v7 = *((void *)&v52 + 1);
  uint64_t v23 = *((void *)&v50 + 1) >> 10;
  Swift::String v42 = *(_OWORD *)a1;
  uint64_t v43 = v6;
  if (*((void *)&v50 + 1) >> 10 == *((void *)&v52 + 1) >> 10) {
    return (void *)MEMORY[0x18961AFE8];
  }
  size_t v8 = v54;
  uint64_t v9 = *((void *)&v53 + 1);
  uint64_t v10 = v53;
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  char v56 = (void *)MEMORY[0x18961AFE8];
  do
  {
    specialized AttributedString.Runs.AttributesSlice4.index(before:)(v7, v10, v9, v8, (__int128 **)&v30);
    uint64_t v10 = *((void *)&v30 + 1);
    uint64_t v7 = v30;
    uint64_t v11 = v31;
    unint64_t v12 = v32;
    unint64_t v13 = specialized AttributedString.Runs.AttributesSlice4.subscript.getter( &v30,  &v34,  &v36,  (unint64_t *)v38,  v30,  *((uint64_t *)&v30 + 1),  v31,  v32);
    int v14 = v30;
    Swift::String v41 = v15 & 1;
    uint64_t v40 = v35;
    uint64_t v39 = v37;
    char v32 = v13;
    int v33 = v15 & 1;
    closure #1 in AttributedString.enumerateInflectableRanges(in:editor:)( (uint64_t)&v30,  v13,  v15 & 1,  v34,  v35,  v36,  v37,  v38,  (uint64_t)v28);
    outlined consume of AttributedString.AttributeRunBoundaries?(v14, *((uint64_t *)&v14 + 1));
    int v16 = v29;
    if (v29)
    {
      uint64_t v26 = v28[1];
      uint64_t v27 = v28[0];
      uint64_t v24 = v28[3];
      uint64_t v25 = v28[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v56[2] + 1LL,  1,  v56);
      }
      size_t v8 = v12;
      uint64_t v18 = v56[2];
      int v17 = v56[3];
      uint64_t v9 = v11;
      if (v18 >= v17 >> 1) {
        char v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v56);
      }
      uint64_t v19 = v56;
      v56[2] = v18 + 1;
      uint64_t v20 = &v19[9 * v18];
      *((_OWORD *)v20 + 2) = v27;
      *((_OWORD *)v20 + 3) = v26;
      *((_OWORD *)v20 + 4) = v25;
      *((_OWORD *)v20 + 5) = v24;
      v20[12] = v16;
    }

    else
    {
      size_t v8 = v12;
      uint64_t v9 = v11;
    }
  }

  while (v23 != v7 >> 10);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator(a1);
  return v56;
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32[4];
  _BYTE v33[80];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v1 = *(_OWORD *)(a1 + 144);
  Swift::String v2 = *(_OWORD *)(a1 + 176);
  char v56 = *(_OWORD *)(a1 + 160);
  uint64_t v57 = v2;
  uint64_t v3 = *(_OWORD *)(a1 + 176);
  char v58 = *(_OWORD *)(a1 + 192);
  uint64_t v4 = *(_OWORD *)(a1 + 80);
  uint64_t v5 = *(_OWORD *)(a1 + 112);
  unint64_t v52 = *(_OWORD *)(a1 + 96);
  uint64_t v53 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 112);
  uint64_t v7 = *(_OWORD *)(a1 + 144);
  char v54 = *(_OWORD *)(a1 + 128);
  uint64_t v55 = v7;
  size_t v8 = *(_OWORD *)(a1 + 16);
  uint64_t v9 = *(_OWORD *)(a1 + 48);
  char v48 = *(_OWORD *)(a1 + 32);
  uint64_t v49 = v9;
  uint64_t v10 = *(_OWORD *)(a1 + 48);
  uint64_t v11 = *(_OWORD *)(a1 + 80);
  char v50 = *(_OWORD *)(a1 + 64);
  uint64_t v51 = v11;
  unint64_t v12 = *(_OWORD *)(a1 + 16);
  char v46 = *(_OWORD *)a1;
  uint64_t v47 = v12;
  int v70 = v56;
  Swift::Int v71 = v3;
  uint64_t v66 = v52;
  double v67 = v6;
  double v68 = v54;
  int v69 = v1;
  char v62 = v48;
  uint64_t v63 = v10;
  unsigned __int8 v64 = v50;
  uint64_t v65 = v4;
  uint64_t v59 = *(void *)(a1 + 208);
  uint64_t v72 = *(void *)(a1 + 192);
  unint64_t v13 = *((void *)&v56 + 1);
  int v14 = *((void *)&v54 + 1) >> 10;
  char v60 = v46;
  uint64_t v61 = v8;
  if (*((void *)&v54 + 1) >> 10 == *((void *)&v56 + 1) >> 10) {
    return (void *)MEMORY[0x18961AFE8];
  }
  unsigned int v15 = v72;
  int v16 = *((void *)&v71 + 1);
  int v17 = v71;
  uint64_t v18 = v59;
  int v73 = *((void *)&v58 + 1);
  uint64_t v25 = a1;
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  uint64_t v19 = (void *)MEMORY[0x18961AFE8];
  uint64_t v26 = v59;
  uint64_t v27 = *((void *)&v54 + 1) >> 10;
  do
  {
    uint64_t v39 = v70;
    uint64_t v40 = v71;
    Swift::String v41 = v72;
    char v35 = v66;
    uint64_t v36 = v67;
    char v37 = v68;
    uint64_t v38 = v69;
    *(_OWORD *)&v33[32] = v62;
    *(_OWORD *)&v33[48] = v63;
    *(_OWORD *)&v33[64] = v64;
    uint64_t v34 = v65;
    *(_OWORD *)int v33 = v60;
    *(_OWORD *)&_BYTE v33[16] = v61;
    v32[0] = v13;
    v32[1] = v17;
    v32[2] = v16;
    v32[3] = v15;
    outlined retain of AttributedString.Runs((uint64_t)&v60);
    AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(v32, v73, v18, &v42);
    outlined release of AttributedString.Runs((uint64_t)&v60);
    unint64_t v13 = v42;
    int v17 = v43;
    int v16 = v44;
    unsigned int v15 = v45;
    specialized AttributedString.Runs.AttributesSlice1.subscript.getter((uint64_t)v33, &v33[8], v42, v43, v44, v45);
    if ((v33[0] & 1) == 0)
    {
      uint64_t v30 = *(_OWORD *)&v33[24];
      uint64_t v31 = *(_OWORD *)&v33[8];
      uint64_t v28 = *(_OWORD *)&v33[56];
      int v29 = *(_OWORD *)&v33[40];
      uint64_t v21 = objc_msgSend((id)objc_opt_self(), sel_automatic, v25);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
      }
      uint64_t v23 = v19[2];
      uint64_t v22 = v19[3];
      if (v23 >= v22 >> 1) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v22 > 1),  v23 + 1,  1,  v19);
      }
      void v19[2] = v23 + 1;
      uint64_t v20 = &v19[9 * v23];
      *((_OWORD *)v20 + 2) = v31;
      *((_OWORD *)v20 + 3) = v30;
      *((_OWORD *)v20 + 4) = v29;
      *((_OWORD *)v20 + 5) = v28;
      v20[12] = v21;
      uint64_t v18 = v26;
      int v14 = v27;
    }
  }

  while (v14 != v13 >> 10);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator(v25);
  return v19;
}

uint64_t dispatch thunk of static AttributeScope.encodingConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for AttributeScopes()
{
  return &type metadata for AttributeScopes;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LoadedScopeCache.ScopeType( void *a1, void *a2)
{
  if (*a1) {
    BOOL v2 = *a2 == 0LL;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*a1 | *a2) == 0LL;
  }
  else {
    return *a1 == *a2;
  }
}

uint64_t LoadedScopeCache.scopeType(for:in:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    if ((v11 & 1) != 0)
    {
      unint64_t v12 = *(void **)(*(void *)(v9 + 56) + 16 * v10);
      swift_bridgeObjectRelease();
      if (v12) {
        return (uint64_t)v12;
      }
      uint32_t v13 = _dyld_image_count();
      if (*((_DWORD *)v5 + 2) == v13) {
        return 0LL;
      }
      *((_DWORD *)v5 + 2) = v13;
      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = specialized _NativeDictionary.filter(_:)(v14);
      swift_bridgeObjectRelease();
      *uint64_t v5 = v15;
    }

    swift_bridgeObjectRelease();
  }

  uint64_t v16 = String.utf8CString.getter();
  LOBYTE(v12) = v16;
  int v17 = dlopen((const char *)(v16 + 32), 16);
  swift_release();
  if (!v17
    || (uint64_t v18 = String.utf8CString.getter(),
        LOBYTE(v12) = v18,
        uint64_t v19 = dlsym(v17, (const char *)(v18 + 32)),
        swift_release(),
        !v19))
  {
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v87 = *v5;
    a4 = *v5;
    *uint64_t v5 = 0x8000000000000000LL;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    uint64_t v36 = *(void *)(a4 + 16);
    BOOL v37 = (v35 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (!__OFADD__(v36, v37))
    {
      LOBYTE(v12) = v35;
      if (*(void *)(a4 + 24) >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_38;
        }
        uint64_t v39 = a4;
        if ((v35 & 1) != 0) {
          goto LABEL_25;
        }
      }

      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v38,  isUniquelyReferenced_nonNull_native);
        uint64_t v39 = v87;
        unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
        unint64_t v21 = v40;
      }

uint64_t one-time initialization function for _loadedScopeCache()
{
  uint64_t result = swift_allocObject();
  uint64_t v1 = MEMORY[0x18961AFF0];
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = v1;
  _loadedScopeCache = result;
  return result;
}

uint64_t _loadDefaultAttributes()()
{
  if (one-time initialization token for _loadedScopeCache != -1) {
    goto LABEL_84;
  }
LABEL_2:
  Swift::String v0 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v0);
  closure #1 in _loadDefaultAttributes()( 0xD000000000000039LL,  0x80000001839D1FE0LL,  0xD000000000000032LL,  0x80000001839D2020LL,  &v71);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t v1 = v71;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v1[2] + 1LL,  1,  v1);
  }
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  unint64_t v4 = v3 + 1;
  if (v3 >= v2 >> 1) {
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v2 > 1),  v3 + 1,  1,  v1);
  }
  v1[2] = v4;
  uint64_t v5 = &v1[2 * v3];
  void v5[4] = &type metadata for AttributeScopes.FoundationAttributes;
  v5[5] = &protocol witness table for AttributeScopes.FoundationAttributes;
  uint64_t v71 = (void *)MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 + 1, 0);
  uint64_t v6 = v71;
  uint64_t v7 = v1 + 5;
  do
  {
    size_t v8 = static AttributeScope.scopeDescription.getter(*(v7 - 1), *v7);
    swift_bridgeObjectRelease();
    uint64_t v71 = v6;
    unint64_t v10 = v6[2];
    unint64_t v9 = v6[3];
    char v11 = v6;
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      char v11 = v71;
    }

    uint64_t v11[2] = v10 + 1;
    v11[v10 + 4] = v8;
    v7 += 2;
    --v4;
    uint64_t v6 = v11;
  }

  while (v4);
  unint64_t v66 = v11 + 4;
  swift_bridgeObjectRelease();
  uint64_t v65 = v6[2];
  if (!v65)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x18961AFF0];
  }

  swift_bridgeObjectRetain();
  uint64_t v12 = 0LL;
  uint64_t v13 = MEMORY[0x18961AFF0];
LABEL_13:
  uint64_t v67 = v12;
  uint64_t v14 = v66[v12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v71 = (void *)v13;
  uint64_t v68 = v14 + 64;
  uint64_t v16 = 1LL << *(_BYTE *)(v14 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & *(void *)(v14 + 64);
  int64_t v69 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t i = 0LL;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (i << 6);
      goto LABEL_36;
    }

    int64_t v22 = i + 1;
    if (__OFADD__(i, 1LL)) {
      goto LABEL_81;
    }
    if (v22 >= v69)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v12 = v67 + 1;
      swift_bridgeObjectRelease();
      if (v67 + 1 == v65)
      {
        swift_bridgeObjectRelease_n();
        return v13;
      }

      goto LABEL_13;
    }

    unint64_t v23 = *(void *)(v68 + 8 * v22);
    ++i;
    if (!v23)
    {
      int64_t i = v22 + 1;
      if (v22 + 1 >= v69) {
        goto LABEL_12;
      }
      unint64_t v23 = *(void *)(v68 + 8 * i);
      if (!v23)
      {
        int64_t i = v22 + 2;
        if (v22 + 2 >= v69) {
          goto LABEL_12;
        }
        unint64_t v23 = *(void *)(v68 + 8 * i);
        if (!v23)
        {
          int64_t i = v22 + 3;
          if (v22 + 3 >= v69) {
            goto LABEL_12;
          }
          unint64_t v23 = *(void *)(v68 + 8 * i);
          if (!v23)
          {
            int64_t v24 = v22 + 4;
            if (v24 >= v69) {
              goto LABEL_12;
            }
            unint64_t v23 = *(void *)(v68 + 8 * v24);
            for (int64_t i = v24; !v23; ++v24)
            {
              int64_t i = v24 + 1;
              if (__OFADD__(v24, 1LL)) {
                goto LABEL_82;
              }
              if (i >= v69) {
                goto LABEL_12;
              }
              unint64_t v23 = *(void *)(v68 + 8 * i);
            }
          }
        }
      }
    }

    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (i << 6);
LABEL_36:
    uint64_t v25 = 16 * v21;
    uint64_t v26 = (uint64_t *)(*(void *)(v14 + 48) + v25);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    __int128 v70 = *(_OWORD *)(*(void *)(v14 + 56) + v25);
    swift_bridgeObjectRetain();
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
    uint64_t v31 = *(void *)(v13 + 16);
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      swift_once();
      goto LABEL_2;
    }

    char v34 = v29;
    if (*(void *)(v13 + 24) >= v33) {
      break;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v33,  isUniquelyReferenced_nonNull_native & 1);
    uint64_t v35 = (uint64_t)v71;
    unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
    if ((v34 & 1) != (v37 & 1)) {
      goto LABEL_86;
    }
    unint64_t v30 = v36;
    if ((v34 & 1) != 0)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      *(_OWORD *)(*(void *)(v35 + 56) + 16 * v30) = v70;
      goto LABEL_18;
    }

uint64_t closure #1 in _loadDefaultAttributes()@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183729E20;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  *(void *)(inited + 56) = a4;
  *(void *)(inited + 64) = 0xD000000000000037LL;
  *(void *)(inited + 72) = 0x80000001839D2060LL;
  *(void *)(inited + 80) = 0xD000000000000030LL;
  *(void *)(inited + 88) = 0x80000001839D20A0LL;
  *(void *)(inited + 96) = 0xD00000000000003BLL;
  *(void *)(inited + 104) = 0x80000001839D20E0LL;
  *(void *)(inited + 112) = 0xD000000000000034LL;
  *(void *)(inited + 120) = 0x80000001839D2120LL;
  *(void *)(inited + 128) = 0xD000000000000040LL;
  *(void *)(inited + 136) = 0x80000001839D2160LL;
  *(void *)(inited + 144) = 0xD000000000000040LL;
  *(void *)(inited + 152) = 0x80000001839D21B0LL;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v11 = specialized Sequence.compactMap<A>(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  uint64_t result = swift_arrayDestroy();
  *a5 = v11;
  return result;
}

void *static AttributeScope.scopeDescription.getter(Swift::UInt a1, unint64_t a2)
{
  if (one-time initialization token for _loadedScopeCache != -1) {
    goto LABEL_257;
  }
  while (1)
  {
    unint64_t v4 = &unk_18C5D1000;
    unint64_t v5 = _loadedScopeCache + 16;
    uint64_t v6 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
    swift_retain();
    os_unfair_lock_lock(v6);
    closure #1 in static AttributeScope.scopeDescription.getter(v5, a1, &v227);
    os_unfair_lock_unlock(v6);
    swift_release();
    uint64_t v7 = v227;
    if ((void)v227) {
      return (void *)v7;
    }
    unint64_t v8 = 0LL;
    uint64_t v7 = MEMORY[0x18961AFF0];
    uint64_t v225 = MEMORY[0x18961AFF0];
LABEL_4:
    unint64_t v9 = *(void *)a1;
    if (*(void *)a1 > 0x7FFuLL)
    {
LABEL_7:
      swift_getKeyPath();
      uint64_t v10 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      char v11 = (unsigned int *)(*(void *)(a1 + v10) + 36LL);
LABEL_8:
      uint64_t v12 = *v11;
LABEL_9:
      if (v8 == v12) {
        goto LABEL_250;
      }
      goto LABEL_10;
    }

    if (v9 == 512)
    {
      swift_getKeyPath();
      uint64_t v79 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      char v11 = (unsigned int *)(*(void *)(a1 + v79) + 20LL);
      goto LABEL_8;
    }

    if (!v9) {
      goto LABEL_7;
    }
    unint64_t v80 = static Metadata.Kind.tuple.getter();
    if (v80 <= 0x7FF && v80 == v9)
    {
      MEMORY[0x186E1AB6C](a1);
      uint64_t v12 = TupleMetadata.Elements.endIndex.getter();
      if (TupleMetadata.Elements.endIndex.getter() < 0)
      {
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
        goto LABEL_269;
      }

      uint64_t v81 = TupleMetadata.Elements.endIndex.getter();
      if (v12 < 0 || v81 < v12) {
        goto LABEL_259;
      }
      goto LABEL_9;
    }

    if (!v8)
    {
LABEL_250:
      Swift::Int_optional v205 = (os_unfair_lock_s *)*((void *)v4 + 199);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v205 + 10);
      closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v205[4], v7, v225, a1);
      os_unfair_lock_unlock(v205 + 10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (void *)v7;
    }

LABEL_179:
        unint64_t v152 = (v161 - 1) & v161;
        unint64_t v154 = __clz(__rbit64(v161)) + (v149 << 6);
      }

      uint64_t v155 = 16 * v154;
      Swift::Int v156 = (uint64_t *)(*(void *)(v7 + 48) + v155);
      uint64_t v158 = *v156;
      uint64_t v157 = v156[1];
      __int128 v159 = *(_OWORD *)(*(void *)(v7 + 56) + v155);
      uint64_t v160 = (void *)(*(void *)(v145 + 48) + v155);
      *uint64_t v160 = v158;
      v160[1] = v157;
      *(_OWORD *)(*(void *)(v145 + 56) + v155) = v159;
      uint64_t result = (void *)swift_bridgeObjectRetain();
    }
  }

  if (swift_conformsToProtocol2()) {
    uint64_t v28 = v20;
  }
  else {
    uint64_t v28 = 0LL;
  }
  unint64_t v8 = v19 + 1;
  if (!v28) {
    goto LABEL_4;
  }
  unint64_t v211 = a2;
  unint64_t v214 = v19;
  uint64_t v29 = static AttributeScope.scopeDescription.getter();
  uint64_t v218 = v30;
  swift_bridgeObjectRetain();
  a2 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v233 = (void *)v7;
  uint64_t v31 = -1LL << *(_BYTE *)(v29 + 32);
  uint64_t v32 = ~v31;
  uint64_t v33 = *(void *)(v29 + 64);
  uint64_t v34 = -v31;
  if (v34 < 64) {
    uint64_t v35 = ~(-1LL << v34);
  }
  else {
    uint64_t v35 = -1LL;
  }
  *(void *)&__int128 v227 = v29;
  *((void *)&v227 + 1) = v29 + 64;
  uint64_t v228 = v32;
  uint64_t v229 = 0LL;
  uint64_t v230 = v35 & v33;
  uint64_t v231 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  uint64_t v232 = 0LL;
  uint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v37 = specialized LazyMapSequence.Iterator.next()(v36);
  if (v38)
  {
    uint64_t v41 = v37;
    uint64_t v42 = v38;
    uint64_t v43 = v39;
    uint64_t v44 = v40;
    while (1)
    {
      unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
      uint64_t v53 = *(void *)(v7 + 16);
      BOOL v54 = (v51 & 1) == 0;
      uint64_t v45 = v53 + v54;
      if (__OFADD__(v53, v54)) {
        goto LABEL_253;
      }
      char v55 = v51;
      if (*(void *)(v7 + 24) >= v45)
      {
        if ((a2 & 1) != 0)
        {
          if ((v51 & 1) != 0) {
            goto LABEL_42;
          }
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          uint64_t v62 = static _DictionaryStorage.copy(original:)();
          Swift::Int_optional v215 = (void *)v62;
          if (*(void *)(v7 + 16))
          {
            uint64_t v63 = v62;
            int64_t v64 = (void *)(v62 + 64);
            unint64_t v65 = (unint64_t)((1LL << *(_BYTE *)(v63 + 32)) + 63) >> 6;
            uint64_t v206 = v7 + 64;
            int64_t v66 = 0LL;
            v215[2] = *(void *)(v7 + 16);
            uint64_t v67 = 1LL << *(_BYTE *)(v7 + 32);
            if (v67 < 64) {
              uint64_t v68 = ~(-1LL << v67);
            }
            else {
              uint64_t v68 = -1LL;
            }
            a2 = v68 & *(void *)(v7 + 64);
            int64_t v208 = (unint64_t)(v67 + 63) >> 6;
            while (1)
            {
              if (a2)
              {
                unint64_t v69 = __clz(__rbit64(a2));
                a2 &= a2 - 1;
                unint64_t v70 = v69 | (v66 << 6);
              }

              else
              {
                BOOL v60 = __OFADD__(v66++, 1LL);
                if (v60) {
                  goto LABEL_264;
                }
                if (v66 >= v208) {
                  break;
                }
                unint64_t v77 = *(void *)(v206 + 8 * v66);
                if (!v77)
                {
                  int64_t v78 = v66 + 1;
                  if (v66 + 1 >= v208) {
                    break;
                  }
                  unint64_t v77 = *(void *)(v206 + 8 * v78);
                  if (!v77)
                  {
                    int64_t v78 = v66 + 2;
                    if (v66 + 2 >= v208) {
                      break;
                    }
                    unint64_t v77 = *(void *)(v206 + 8 * v78);
                    if (!v77)
                    {
                      int64_t v78 = v66 + 3;
                      if (v66 + 3 >= v208) {
                        break;
                      }
                      unint64_t v77 = *(void *)(v206 + 8 * v78);
                      if (!v77)
                      {
                        int64_t v78 = v66 + 4;
                        if (v66 + 4 >= v208) {
                          break;
                        }
                        unint64_t v77 = *(void *)(v206 + 8 * v78);
                        if (!v77)
                        {
                          int64_t v78 = v66 + 5;
                          if (v66 + 5 >= v208) {
                            break;
                          }
                          unint64_t v77 = *(void *)(v206 + 8 * v78);
                          if (!v77)
                          {
                            while (1)
                            {
                              int64_t v66 = v78 + 1;
                              if (__OFADD__(v78, 1LL)) {
                                break;
                              }
                              if (v66 >= v208) {
                                goto LABEL_83;
                              }
                              unint64_t v77 = *(void *)(v206 + 8 * v66);
                              ++v78;
                              if (v77) {
                                goto LABEL_78;
                              }
                            }

      int64_t v149 = (v157 - 1) & v157;
      uint64_t v155 = __clz(__rbit64(v157)) + (v158 << 6);
      uint64_t v151 = v158;
      goto LABEL_180;
    }

    break;
  }

                  uint64_t v144 = static String._fromUTF8Repairing(_:)();
                  uint64_t v146 = v145;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v39 = v144;
                  *(void *)(v39 + 8) = v146;
                  *(_OWORD *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
                  *(_OWORD *)(v39 + 32) = 0u;
                  uint64_t v104 = 11;
LABEL_248:
                  *(_BYTE *)(v39 + 48) = v104;
                  goto LABEL_249;
                }

                int64_t v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v11 + v76);
                LOBYTE(v84) = v162;
                if (__OFADD__(v76, 1LL)) {
                  goto LABEL_267;
                }
                ++v76;
                if (v11 + v76 >= v12) {
                  goto LABEL_268;
                }
              }

              uint64_t v116 = a3;
              switch(v162)
              {
                case '+':
                case '-':
                  if (v76 != 0 || (v221 & 1) == 0) {
                    goto LABEL_243;
                  }
                  uint64_t v157 = 0;
                  __int128 v159 = 0;
                  v11 += v76 + 1;
                  uint64_t v158 = 3;
                  if (v11 >= v12) {
                    goto LABEL_299;
                  }
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_243;
                case '.':
                  if ((v218 & 1) == 0)
                  {
                    uint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( v11 + v76,  a3,  v215);
                    char v95 = v193;
                    double v97 = v194;
                    LOBYTE(v84) = 46;
                    goto LABEL_244;
                  }

                  uint64_t v157 = 0;
                  __int128 v159 = 0;
                  v11 += v76 + 1;
                  uint64_t v158 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0) {
                      return v7;
                    }
                    uint64_t v85 = v11;
                    uint64_t v86 = v12;
                    if (v11 >= 4)
                    {
                      uint64_t v85 = v11;
                      uint64_t v86 = v12;
                      do
                      {
                        Swift::Int_optional v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86);
                        if ((v182 | 0x20) == 0x65) {
                          return v7;
                        }
                        Swift::Int_optional v183 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 1);
                        if ((v183 | 0x20) == 0x65) {
                          return v7;
                        }
                        Swift::Int_optional v184 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 2);
                        if ((v184 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v185 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 3);
                        if ((v185 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v86 = specialized BufferView.dropFirst(_:)(4LL, v86, v85);
                        uint64_t v85 = v186;
                      }

                      while (v186 >= 4);
                    }

                  uint64_t v144 = static String._fromUTF8Repairing(_:)();
                  uint64_t v146 = v145;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v39 = v144;
                  *(void *)(v39 + 8) = v146;
                  *(_OWORD *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
                  *(_OWORD *)(v39 + 32) = 0u;
                  uint64_t v104 = 11;
LABEL_248:
                  *(_BYTE *)(v39 + 48) = v104;
                  goto LABEL_249;
                }

                int64_t v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v11 + v76);
                LOBYTE(v84) = v162;
                if (__OFADD__(v76, 1LL)) {
                  goto LABEL_268;
                }
                ++v76;
                if (v11 + v76 >= v12) {
                  goto LABEL_269;
                }
              }

              uint64_t v116 = a3;
              switch(v162)
              {
                case '+':
                case '-':
                  if (v76 != 0 || (v221 & 1) == 0) {
                    goto LABEL_243;
                  }
                  uint64_t v157 = 0;
                  __int128 v159 = 0;
                  v11 += v76 + 1;
                  uint64_t v158 = 3;
                  if (v11 >= v12) {
                    goto LABEL_300;
                  }
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_243;
                case '.':
                  if ((v218 & 1) == 0)
                  {
                    uint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( v11 + v76,  a3,  v215);
                    char v95 = v193;
                    double v97 = v194;
                    LOBYTE(v84) = 46;
                    goto LABEL_244;
                  }

                  uint64_t v157 = 0;
                  __int128 v159 = 0;
                  v11 += v76 + 1;
                  uint64_t v158 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0) {
                      return v7;
                    }
                    uint64_t v85 = v11;
                    uint64_t v86 = v12;
                    if (v11 >= 4)
                    {
                      uint64_t v85 = v11;
                      uint64_t v86 = v12;
                      do
                      {
                        Swift::Int_optional v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86);
                        if ((v182 | 0x20) == 0x65) {
                          return v7;
                        }
                        Swift::Int_optional v183 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 1);
                        if ((v183 | 0x20) == 0x65) {
                          return v7;
                        }
                        Swift::Int_optional v184 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 2);
                        if ((v184 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v185 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 3);
                        if ((v185 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v86 = specialized BufferView.dropFirst(_:)(4LL, v86, v85);
                        uint64_t v85 = v186;
                      }

                      while (v186 >= 4);
                    }

                  uint64_t v146 = static String._fromUTF8Repairing(_:)();
                  unint64_t v148 = v147;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v39 = v146;
                  *(void *)(v39 + 8) = v148;
                  *(_OWORD *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
                  *(_OWORD *)(v39 + 32) = 0u;
                  uint64_t v106 = 11;
LABEL_248:
                  *(_BYTE *)(v39 + 48) = v106;
                  goto LABEL_249;
                }

                uint64_t v164 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v11 + v85);
                LOBYTE(v93) = v164;
                if (__OFADD__(v85, 1LL)) {
                  goto LABEL_267;
                }
                ++v85;
                if (v11 + v85 >= v12) {
                  goto LABEL_268;
                }
              }

              unint64_t v118 = a3;
              switch(v164)
              {
                case '+':
                case '-':
                  if (v85 != 0 || (v223 & 1) == 0) {
                    goto LABEL_243;
                  }
                  __int128 v159 = 0;
                  unint64_t v161 = 0;
                  v11 += v85 + 1;
                  uint64_t v160 = 3;
                  if (v11 >= v12) {
                    goto LABEL_299;
                  }
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_243;
                case '.':
                  if ((v220 & 1) == 0)
                  {
                    char v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( v11 + v85,  a3,  v217);
                    double v97 = v195;
                    uint64_t v99 = v196;
                    LOBYTE(v93) = 46;
                    goto LABEL_244;
                  }

                  __int128 v159 = 0;
                  unint64_t v161 = 0;
                  v11 += v85 + 1;
                  uint64_t v160 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0) {
                      return v7;
                    }
                    __int128 v75 = v11;
                    unint64_t v76 = v12;
                    if (v11 >= 4)
                    {
                      __int128 v75 = v11;
                      unint64_t v76 = v12;
                      do
                      {
                        Swift::Int_optional v184 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76);
                        if ((v184 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v185 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76 + 1);
                        if ((v185 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v186 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76 + 2);
                        if ((v186 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v187 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76 + 3);
                        if ((v187 | 0x20) == 0x65) {
                          return v7;
                        }
                        unint64_t v76 = specialized BufferView.dropFirst(_:)(4LL, v76, v75);
                        __int128 v75 = v188;
                      }

                      while (v188 >= 4);
                    }

LABEL_270:
  __break(1u);
LABEL_271:
  __break(1u);
LABEL_272:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  __break(1u);
  return result;
}

                  __break(1u);
                  goto LABEL_271;
                }

            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
            goto LABEL_280;
          }

          LODWORD(v7) = v46[v59];
          if (__OFADD__(&v56[v59], 1LL)) {
            goto LABEL_144;
          }
        }

        uint64_t v61 = (uint64_t)&v56[v59];
        switch(v46[v59])
        {
          case '+':
          case '-':
            if (v61 != 0 || (v55 & 1) == 0) {
              goto LABEL_140;
            }
            char v56 = 0LL;
            char v55 = 0;
            int64_t v57 = 0;
            unint64_t v58 = 0;
            v46 += v59 + 1;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v61 < 1 || (v58 & 1) == 0)
            {
              char v95 = (unint64_t)&v46[v59];
              int v96 = a4 + i;
              if (a4 + i < v95) {
                goto LABEL_274;
              }
              if (v96 <= a4)
              {
                a3 = 0LL;
                int64_t i = 1LL;
              }

              else
              {
                double v97 = i + a4;
                int64_t i = 1LL;
                uint64_t v98 = a4;
                do
                {
                  uint64_t v99 = 0LL;
                  uint64_t v100 = 0LL;
                  uint64_t v101 = v97 - v98;
                  while (1)
                  {
                    uint64_t v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10) {
                      break;
                    }
                    if (v102 == 13)
                    {
                      uint64_t v103 = v98 + v100;
                      if (v95 < v98 + v100 + 1) {
                        goto LABEL_209;
                      }
                      if (((v98 - a4 + v100 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v100 + v101) >= 1)
                      {
                        if (*(_BYTE *)(v103 + 1) == 10) {
                          uint64_t v103 = v98 + v100 + 1;
                        }
LABEL_209:
                        unint64_t v70 = __OFADD__(i++, 1LL);
                        if (!v70)
                        {
                          uint64_t v98 = v103 + 1;
                          goto LABEL_213;
                        }

            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
            goto LABEL_280;
          }

          LODWORD(v7) = v46[v59];
          if (__OFADD__(&v56[v59], 1LL)) {
            goto LABEL_144;
          }
        }

        uint64_t v61 = (uint64_t)&v56[v59];
        switch(v46[v59])
        {
          case '+':
          case '-':
            if (v61 != 0 || (v55 & 1) == 0) {
              goto LABEL_140;
            }
            char v56 = 0LL;
            char v55 = 0;
            int64_t v57 = 0;
            unint64_t v58 = 0;
            v46 += v59 + 1;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v61 < 1 || (v58 & 1) == 0)
            {
              char v95 = (unint64_t)&v46[v59];
              int v96 = a4 + i;
              if (a4 + i < v95) {
                goto LABEL_274;
              }
              if (v96 <= a4)
              {
                a3 = 0LL;
                int64_t i = 1LL;
              }

              else
              {
                double v97 = i + a4;
                int64_t i = 1LL;
                uint64_t v98 = a4;
                do
                {
                  uint64_t v99 = 0LL;
                  uint64_t v100 = 0LL;
                  uint64_t v101 = v97 - v98;
                  while (1)
                  {
                    uint64_t v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10) {
                      break;
                    }
                    if (v102 == 13)
                    {
                      uint64_t v103 = v98 + v100;
                      if (v95 < v98 + v100 + 1) {
                        goto LABEL_209;
                      }
                      if (((v98 - a4 + v100 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v100 + v101) >= 1)
                      {
                        if (*(_BYTE *)(v103 + 1) == 10) {
                          uint64_t v103 = v98 + v100 + 1;
                        }
LABEL_209:
                        unint64_t v70 = __OFADD__(i++, 1LL);
                        if (!v70)
                        {
                          uint64_t v98 = v103 + 1;
                          goto LABEL_213;
                        }

            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
            goto LABEL_280;
          }

          LODWORD(v7) = v46[v59];
          if (__OFADD__(&v56[v59], 1LL)) {
            goto LABEL_144;
          }
        }

        uint64_t v61 = (uint64_t)&v56[v59];
        switch(v46[v59])
        {
          case '+':
          case '-':
            if (v61 != 0 || (v55 & 1) == 0) {
              goto LABEL_140;
            }
            char v56 = 0LL;
            char v55 = 0;
            int64_t v57 = 0;
            unint64_t v58 = 0;
            v46 += v59 + 1;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v61 < 1 || (v58 & 1) == 0)
            {
              char v95 = (unint64_t)&v46[v59];
              int v96 = a4 + i;
              if (a4 + i < v95) {
                goto LABEL_274;
              }
              if (v96 <= a4)
              {
                a3 = 0LL;
                int64_t i = 1LL;
              }

              else
              {
                double v97 = i + a4;
                int64_t i = 1LL;
                uint64_t v98 = a4;
                do
                {
                  uint64_t v99 = 0LL;
                  uint64_t v100 = 0LL;
                  uint64_t v101 = v97 - v98;
                  while (1)
                  {
                    uint64_t v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10) {
                      break;
                    }
                    if (v102 == 13)
                    {
                      uint64_t v103 = v98 + v100;
                      if (v95 < v98 + v100 + 1) {
                        goto LABEL_209;
                      }
                      if (((v98 - a4 + v100 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v100 + v101) >= 1)
                      {
                        if (*(_BYTE *)(v103 + 1) == 10) {
                          uint64_t v103 = v98 + v100 + 1;
                        }
LABEL_209:
                        unint64_t v70 = __OFADD__(i++, 1LL);
                        if (!v70)
                        {
                          uint64_t v98 = v103 + 1;
                          goto LABEL_213;
                        }

unint64_t closure #1 in static AttributeScope.scopeDescription.getter@<X0>( unint64_t result@<X0>, Swift::UInt a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = *(void *)(result + 16);
  __int128 v5 = 0uLL;
  if (*(void *)(v4 + 16))
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    __int128 v5 = 0uLL;
    if ((v6 & 1) != 0)
    {
      __int128 v7 = *(_OWORD *)(*(void *)(v4 + 56) + 16 * result);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      __int128 v5 = v7;
    }
  }

  *a3 = v5;
  return result;
}

uint64_t closure #2 in static AttributeScope.scopeDescription.getter( uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = *(void *)(a1 + 16);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0x8000000000000000LL;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v12 = *(void *)(v39 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }

  else
  {
    char v4 = v10;
    if (*(void *)(v39 + 24) < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v14,  isUniquelyReferenced_nonNull_native);
      uint64_t v15 = v39;
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
      if ((v4 & 1) != (v17 & 1)) {
        goto LABEL_47;
      }
      unint64_t v11 = v16;
      if ((v4 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      unint64_t v18 = (uint64_t *)(*(void *)(v15 + 56) + 16 * v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t *v18 = a2;
      v18[1] = a3;
LABEL_44:
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v15;
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v15 = v39;
      if ((v10 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v11, a4, a2, a3, (void *)v15);
      goto LABEL_44;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  uint64_t v19 = static _DictionaryStorage.copy(original:)();
  uint64_t v15 = v19;
  if (!*(void *)(v39 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  uint64_t v20 = (char *)(v19 + 64);
  uint64_t v21 = (char *)(v39 + 64);
  unint64_t v22 = (unint64_t)((1LL << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  uint64_t v37 = v39 + 64;
  if (v15 != v39 || v20 >= &v21[8 * v22]) {
    memmove(v20, v21, 8 * v22);
  }
  int64_t v23 = 0LL;
  *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v39 + 16);
  uint64_t v24 = 1LL << *(_BYTE *)(v39 + 32);
  uint64_t v25 = -1LL;
  if (v24 < 64) {
    uint64_t v25 = ~(-1LL << v24);
  }
  unint64_t v26 = v25 & *(void *)(v39 + 64);
  int64_t v38 = (unint64_t)(v24 + 63) >> 6;
  while (1)
  {
    if (v26)
    {
      unint64_t v27 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v28 = v27 | (v23 << 6);
      goto LABEL_18;
    }

    int64_t v33 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v33 >= v38) {
      goto LABEL_42;
    }
    unint64_t v34 = *(void *)(v37 + 8 * v33);
    ++v23;
    if (!v34)
    {
      int64_t v23 = v33 + 1;
      if (v33 + 1 >= v38) {
        goto LABEL_42;
      }
      unint64_t v34 = *(void *)(v37 + 8 * v23);
      if (!v34)
      {
        int64_t v23 = v33 + 2;
        if (v33 + 2 >= v38) {
          goto LABEL_42;
        }
        unint64_t v34 = *(void *)(v37 + 8 * v23);
        if (!v34)
        {
          int64_t v23 = v33 + 3;
          if (v33 + 3 >= v38) {
            goto LABEL_42;
          }
          unint64_t v34 = *(void *)(v37 + 8 * v23);
          if (!v34)
          {
            int64_t v23 = v33 + 4;
            if (v33 + 4 >= v38) {
              goto LABEL_42;
            }
            unint64_t v34 = *(void *)(v37 + 8 * v23);
            if (!v34)
            {
              int64_t v23 = v33 + 5;
              if (v33 + 5 >= v38) {
                goto LABEL_42;
              }
              unint64_t v34 = *(void *)(v37 + 8 * v23);
              if (!v34)
              {
                int64_t v23 = v33 + 6;
                if (v33 + 6 >= v38) {
                  goto LABEL_42;
                }
                unint64_t v34 = *(void *)(v37 + 8 * v23);
                if (!v34) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  uint64_t v98 = *MEMORY[0x1895F89C0];
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  int64_t v95 = (unint64_t)((1LL << v3) + 63) >> 6;
  uint64_t v96 = isStackAllocationSafe;
  size_t v4 = 8 * v95;
  if ((v3 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v19 = (unint64_t *)swift_slowAlloc();
      bzero(v19, v4);
      uint64_t v20 = 0LL;
      int64_t v21 = 0LL;
      uint64_t v22 = v2 + 64;
      uint64_t v23 = 1LL << *(_BYTE *)(v2 + 32);
      if (v23 < 64) {
        uint64_t v24 = ~(-1LL << v23);
      }
      else {
        uint64_t v24 = -1LL;
      }
      unint64_t v25 = v24 & *(void *)(v2 + 64);
      int64_t v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          unint64_t v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          unint64_t v28 = v27 | (v21 << 6);
        }

        else
        {
          int64_t v29 = v21 + 1;
          if (__OFADD__(v21, 1LL)) {
            goto LABEL_133;
          }
          if (v29 >= v26) {
            goto LABEL_58;
          }
          unint64_t v30 = *(void *)(v22 + 8 * v29);
          ++v21;
          if (!v30)
          {
            int64_t v21 = v29 + 1;
            if (v29 + 1 >= v26) {
              goto LABEL_58;
            }
            unint64_t v30 = *(void *)(v22 + 8 * v21);
            if (!v30)
            {
              int64_t v21 = v29 + 2;
              if (v29 + 2 >= v26) {
                goto LABEL_58;
              }
              unint64_t v30 = *(void *)(v22 + 8 * v21);
              if (!v30)
              {
                int64_t v21 = v29 + 3;
                if (v29 + 3 >= v26) {
                  goto LABEL_58;
                }
                unint64_t v30 = *(void *)(v22 + 8 * v21);
                if (!v30)
                {
                  int64_t v31 = v29 + 4;
                  if (v31 >= v26) {
                    goto LABEL_58;
                  }
                  unint64_t v30 = *(void *)(v22 + 8 * v31);
                  if (!v30)
                  {
                    while (1)
                    {
                      int64_t v21 = v31 + 1;
                      if (__OFADD__(v31, 1LL)) {
                        goto LABEL_137;
                      }
                      if (v21 >= v26) {
                        break;
                      }
                      unint64_t v30 = *(void *)(v22 + 8 * v21);
                      ++v31;
                      if (v30) {
                        goto LABEL_54;
                      }
                    }

{
  uint64_t v1;
  char v2;
  size_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v98;
  int64_t v99;
  unint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  _BYTE *v104;
  __int128 *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[64];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE v114[72];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  unsigned __int8 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[72];
  uint64_t v127;
  uint64_t v1 = isStackAllocationSafe;
  uint64_t v127 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  uint64_t v99 = (unint64_t)((1LL << v2) + 63) >> 6;
  char v3 = 8 * v99;
  uint64_t v107 = isStackAllocationSafe;
  if ((v2 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v100 = (unint64_t *)swift_slowAlloc();
      bzero(v100, v3);
      unint64_t v28 = 0LL;
      int64_t v29 = *(void *)(v1 + 64);
      uint64_t v101 = 0LL;
      uint64_t v102 = v1 + 64;
      unint64_t v30 = 1LL << *(_BYTE *)(v1 + 32);
      if (v30 < 64) {
        int64_t v31 = ~(-1LL << v30);
      }
      else {
        int64_t v31 = -1LL;
      }
      uint64_t v32 = v31 & v29;
      uint64_t v105 = &v116;
      uint64_t v106 = v114;
      uint64_t v103 = (unint64_t)(v30 + 63) >> 6;
      uint64_t v104 = v110;
      while (1)
      {
        if (v32)
        {
          int64_t v33 = __clz(__rbit64(v32));
          v32 &= v32 - 1;
          unint64_t v34 = v33 | (v28 << 6);
        }

        else
        {
          uint64_t v35 = v28 + 1;
          if (__OFADD__(v28, 1LL)) {
            goto LABEL_144;
          }
          if (v35 >= v103) {
            goto LABEL_73;
          }
          unint64_t v36 = *(void *)(v102 + 8 * v35);
          ++v28;
          if (!v36)
          {
            unint64_t v28 = v35 + 1;
            if (v35 + 1 >= v103) {
              goto LABEL_73;
            }
            unint64_t v36 = *(void *)(v102 + 8 * v28);
            if (!v36)
            {
              unint64_t v28 = v35 + 2;
              if (v35 + 2 >= v103) {
                goto LABEL_73;
              }
              unint64_t v36 = *(void *)(v102 + 8 * v28);
              if (!v36)
              {
                uint64_t v37 = v35 + 3;
                if (v37 >= v103) {
                  goto LABEL_73;
                }
                unint64_t v36 = *(void *)(v102 + 8 * v37);
                if (!v36)
                {
                  while (1)
                  {
                    unint64_t v28 = v37 + 1;
                    if (__OFADD__(v37, 1LL)) {
                      goto LABEL_148;
                    }
                    if (v28 >= v103) {
                      break;
                    }
                    unint64_t v36 = *(void *)(v102 + 8 * v28);
                    ++v37;
                    if (v36) {
                      goto LABEL_61;
                    }
                  }

{
  uint64_t v1;
  char v2;
  size_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  Swift::Int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  void v92[2];
  int64_t v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _BYTE v110[72];
  uint64_t v111;
  uint64_t v1 = isStackAllocationSafe;
  uint64_t v111 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  uint64_t v93 = (unint64_t)((1LL << v2) + 63) >> 6;
  char v3 = 8 * v93;
  uint64_t v98 = isStackAllocationSafe;
  if ((v2 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v94 = (unint64_t *)swift_slowAlloc();
      bzero(v94, v3);
      uint64_t v24 = 0LL;
      unint64_t v25 = *(void *)(v1 + 64);
      int64_t v95 = 0LL;
      uint64_t v96 = v1 + 64;
      int64_t v26 = 1LL << *(_BYTE *)(v1 + 32);
      if (v26 < 64) {
        unint64_t v27 = ~(-1LL << v26);
      }
      else {
        unint64_t v27 = -1LL;
      }
      unint64_t v28 = v27 & v25;
      int64_t v97 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          int64_t v29 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          unint64_t v30 = v29 | (v24 << 6);
        }

        else
        {
          int64_t v31 = v24 + 1;
          if (__OFADD__(v24, 1LL)) {
            goto LABEL_139;
          }
          if (v31 >= v97) {
            goto LABEL_69;
          }
          uint64_t v32 = *(void *)(v96 + 8 * v31);
          ++v24;
          if (!v32)
          {
            uint64_t v24 = v31 + 1;
            if (v31 + 1 >= v97) {
              goto LABEL_69;
            }
            uint64_t v32 = *(void *)(v96 + 8 * v24);
            if (!v32)
            {
              uint64_t v24 = v31 + 2;
              if (v31 + 2 >= v97) {
                goto LABEL_69;
              }
              uint64_t v32 = *(void *)(v96 + 8 * v24);
              if (!v32)
              {
                int64_t v33 = v31 + 3;
                if (v33 >= v97) {
                  goto LABEL_69;
                }
                uint64_t v32 = *(void *)(v96 + 8 * v33);
                if (!v32)
                {
                  while (1)
                  {
                    uint64_t v24 = v33 + 1;
                    if (__OFADD__(v33, 1LL)) {
                      goto LABEL_142;
                    }
                    if (v24 >= v97) {
                      break;
                    }
                    uint64_t v32 = *(void *)(v96 + 8 * v24);
                    ++v33;
                    if (v32) {
                      goto LABEL_58;
                    }
                  }

uint64_t getEnumTagSinglePayload for LoadedScopeCache.ScopeType(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for LoadedScopeCache.ScopeType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

void *type metadata accessor for LoadedScopeCache.ScopeType()
{
  return &unk_189C8C420;
}

uint64_t initializeBufferWithCopyOfBuffer for LoadedScopeCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LoadedScopeCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LoadedScopeCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for LoadedScopeCache()
{
  return &unk_189C8C498;
}

void *initializeBufferWithCopyOfBuffer for ScopeDescription(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ScopeDescription(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ScopeDescription(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for ScopeDescription()
{
  return &unk_189C8C520;
}

uint64_t PredicateExpressions.StringContainsRegex.subject.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.StringContainsRegex.regex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 68));
}

void PredicateExpressions.StringContainsRegex.init(subject:regex:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183379320(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 68),  v2,  v1);
}

void type metadata accessor for PredicateExpressions.StringContainsRegex()
{
}

uint64_t PredicateExpressions.StringContainsRegex.description.getter()
{
  v0._id object = (void *)0x80000001839D2240LL;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x3A7865676572202CLL;
  v1._id object = (void *)0xE900000000000020LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.StringContainsRegex.evaluate(_:)(uint64_t *a1, void *a2)
{
  Swift::String v2 = a2;
  uint64_t v4 = a2[5];
  uint64_t v23 = v2[3];
  uint64_t v24 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v25 = (char *)&v21 - v6;
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[2];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x1895F8858](v9);
  unint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *a1;
  uint64_t v27 = v14;
  uint64_t v15 = v26;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v7 + 16))(&v27, v8, v7, v11);
  if (!v15)
  {
    uint64_t v26 = v10;
    uint64_t v16 = v9;
    uint64_t v18 = v21;
    uint64_t v17 = v22;
    uint64_t v27 = v14;
    uint64_t v19 = v25;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 16))(&v27, v23);
    LOBYTE(v2) = BidirectionalCollection<>.contains<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v17);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v16);
  }

  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringContainsRegex<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.StringContainsRegex.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t sub_1833796A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 68),  v2,  v1);
}

uint64_t type metadata accessor for PredicateExpressions.PredicateRegex(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for PredicateExpressions.PredicateRegex);
}

uint64_t PredicateExpressions.PredicateRegex.regex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0LL);
  MEMORY[0x1895F8858](v3);
  __int128 v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, v5, v7);
}

uint64_t type metadata accessor for PredicateExpressions.PredicateRegex._Storage(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for PredicateExpressions.PredicateRegex._Storage);
}

uint64_t PredicateExpressions.PredicateRegex.stringRepresentation.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PredicateExpressions.PredicateRegex(0LL) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PredicateExpressions.PredicateRegex.init<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v22[1] = a3;
  uint64_t v24 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Regex();
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PredicateExpressions.PredicateRegex(0LL);
  uint64_t v23 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  unint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch thunk of RegexComponent.regex.getter();
  Regex<A>.init<A>(_:)();
  uint64_t v14 = Regex._literalPattern.getter();
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (v16)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v10, v7);
    uint64_t v17 = (uint64_t *)&v13[*(int *)(v11 + 20)];
    *uint64_t v17 = v14;
    v17[1] = v16;
    uint64_t v18 = v24;
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v13,  v24,  type metadata accessor for PredicateExpressions.PredicateRegex);
    uint64_t v19 = 0LL;
    uint64_t v20 = v18;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v19 = 1LL;
    uint64_t v20 = v24;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v20, v19, 1LL, v11);
}

uint64_t PredicateExpressions.PredicateRegex.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v3 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  __int128 v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for PredicateExpressions.PredicateRegex(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v12 = (uint64_t)v26;
  dispatch thunk of Decoder.singleValueContainer()();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v26 = a1;
  uint64_t v21 = v8;
  uint64_t v22 = v11;
  uint64_t v13 = v24;
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  uint64_t v14 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v15 = (uint64_t)v22;
  uint64_t v16 = (uint64_t *)&v22[*(int *)(v9 + 20)];
  *uint64_t v16 = v14;
  v16[1] = v17;
  swift_bridgeObjectRetain();
  Regex<A>.init(_:)();
  uint64_t v18 = (uint64_t)v21;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v21, v5, v13);
  outlined init with take of ICUNumberFormatter.Signature( v18,  v15,  type metadata accessor for PredicateExpressions.PredicateRegex._Storage);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  outlined init with copy of ICUNumberFormatter.Signature( v15,  v23,  type metadata accessor for PredicateExpressions.PredicateRegex);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return outlined destroy of PredicateExpressions.PredicateRegex(v15);
}

uint64_t PredicateExpressions.PredicateRegex.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.PredicateRegex@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return PredicateExpressions.PredicateRegex.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.PredicateRegex( void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance PredicateExpressions.PredicateRegex@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0LL);
  MEMORY[0x1895F8858](v3);
  __int128 v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, v5, v7);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.PredicateRegex( uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t static PredicateExpressions.build_Arg<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  v32[1] = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Regex();
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v34 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.PredicateRegex?);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for PredicateExpressions.PredicateRegex(0LL);
  v32[0] = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v21 = MEMORY[0x1895F8858](v20);
  uint64_t v33 = (uint64_t)v32 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, a2, v21);
  dispatch thunk of RegexComponent.regex.getter();
  Regex<A>.init<A>(_:)();
  uint64_t v23 = v7;
  uint64_t v24 = Regex._literalPattern.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a2);
  if (v26)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v19, v9, v23);
    uint64_t v27 = (uint64_t *)&v19[*(int *)(v17 + 20)];
    *uint64_t v27 = v24;
    v27[1] = v26;
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v16,  type metadata accessor for PredicateExpressions.PredicateRegex);
    uint64_t v28 = 0LL;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v23);
    uint64_t v28 = 1LL;
  }

  uint64_t v29 = v32[0];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32[0] + 56LL))(v16, v28, 1LL, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v16, 1LL, v17) == 1)
  {
    outlined destroy of PredicateExpressions.PredicateRegex?((uint64_t)v16);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t v30 = v33;
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  v33,  type metadata accessor for PredicateExpressions.PredicateRegex);
    return outlined init with take of ICUNumberFormatter.Signature( v30,  v36,  type metadata accessor for PredicateExpressions.PredicateRegex);
  }

  return result;
}

uint64_t outlined destroy of PredicateExpressions.PredicateRegex?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.PredicateRegex?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t PredicateExpressions.StringContainsRegex<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.StringContainsRegex<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  v14[4] = a5;
  void v14[5] = a4;
  _BYTE v14[8] = a3;
  v14[3] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v14[6] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  v14[7] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[9] = v8;
  v14[10] = v8;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.StringContainsRegex();
}

uint64_t sub_18337A324(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 208) = v6;
  *(void *)(v4 - 200) = a1;
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 192) = v8;
  uint64_t v10 = v2;
  uint64_t v11 = *(void *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  uint64_t v12 = *(void *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v13 = *(void *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 32))(v13, v12, *(void *)(v4 - 136));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 184) + 32LL))(v13 + *(int *)(v14 + 68), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  uint64_t v15 = *(void *)(v4 - 208);
  (*(void (**)(void, uint64_t, uint64_t))(v15 + 16))(*(void *)(v4 - 176), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringContainsRegex<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringContainsRegex<A, B>( void *a1)
{
  return PredicateExpressions.StringContainsRegex<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.StringContainsRegex( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_18337A68C + 4 * byte_183825460[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.StringContainsRegex( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.PredicateRegex( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unsigned int v9 = (uint64_t *)((char *)a1 + v8);
    unsigned int v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *unsigned int v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t destroy for PredicateExpressions.PredicateRegex(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unsigned int v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unsigned int v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unsigned int v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.PredicateRegex()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18337ABB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.PredicateRegex()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18337AC40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void type metadata completion function for PredicateExpressions.PredicateRegex()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Regex<AnyRegexOutput>()
{
  if (!lazy cache variable for type metadata for Regex<AnyRegexOutput>)
  {
    type metadata accessor for AnyRegexOutput();
    unint64_t v0 = type metadata accessor for Regex();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Regex<AnyRegexOutput>);
    }
  }

uint64_t initializeBufferWithCopyOfBuffer for PredicateExpressions.PredicateRegex._Storage( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PredicateExpressions.PredicateRegex._Storage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t initializeWithCopy for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.PredicateRegex._Storage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18337AF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.PredicateRegex._Storage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18337AF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

void type metadata completion function for PredicateExpressions.PredicateRegex._Storage()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  char v13 = (void *)swift_allocObject();
  _OWORD v13[2] = a5;
  _OWORD v13[3] = a6;
  void v13[4] = a3;
  v13[5] = a4;
  void v15[4] = partial apply for closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:);
  v15[5] = v13;
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 1107296256LL;
  void v15[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  v15[3] = &block_descriptor_18;
  int v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_registerObjectOfClass_visibility_loadHandler_, ObjCClassFromMetadata, a2, v14);
  _Block_release(v14);
}

uint64_t sub_18337B128()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(void, _OWORD *))(v2 + 32);
  v5[1] = *(_OWORD *)(v2 + 16);
  uint64_t v6 = a1;
  uint64_t v7 = a2;
  return v3( partial apply for closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:),  v5);
}

uint64_t closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = MEMORY[0x1895F8858](v11);
  unsigned int v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v19 - v14, a1, v11, v13);
  uint64_t v16 = *(void *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v17 = MEMORY[0x186E1C624](a5, a6);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v15, a5);
  }

  a3(v17, a2);
  return swift_unknownObjectRelease();
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?)( uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(uint64_t (**)(void, uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  swift_retain();
  int v5 = (void *)v2( partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> (),  v4);
  swift_release();
  swift_release();
  return v5;
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()( uint64_t a1, id a2, uint64_t a3)
{
  if (a2)
  {
    id v5 = a2;
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  id v7 = (id)v6;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

id NSItemProvider.canLoadObject<A>(ofClass:)()
{
  return objc_msgSend(v0, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata());
}

id NSItemProvider.loadObject<A>(ofClass:completionHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v11[2] = a4;
  v11[3] = a5;
  v11[4] = a2;
  void v11[5] = a3;
  void v15[4] = partial apply for closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:);
  v15[5] = v11;
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 1107296256LL;
  void v15[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ();
  v15[3] = &block_descriptor_6_2;
  uint64_t v12 = _Block_copy(v15);
  swift_retain();
  swift_release();
  id v13 = objc_msgSend(v5, sel_loadObjectOfClass_completionHandler_, ObjCClassFromMetadata, v12);
  _Block_release(v12);
  return v13;
}

uint64_t closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:)( uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v14 - v11;
  if (a1)
  {
    v14[1] = a1;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSItemProviderReading);
    swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56LL))(v12, 0LL, 1LL, a5);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56LL))(v12, 1LL, 1LL, a5);
  }

  a3(v12, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t partial apply for closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:)( a1,  a2,  *(void (**)(char *, uint64_t))(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ()( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_18337B670()
{
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()( uint64_t a1, void *a2)
{
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)( a1,  a2,  *(void (**)(uint64_t, uint64_t))(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t initializeWithCopy for AttributedString._InternalRuns(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for AttributedString._InternalRuns(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for AttributedString._InternalRuns(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._InternalRuns(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._InternalRuns( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRuns()
{
  return &type metadata for AttributedString._InternalRuns;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<AttributedString._InternalRuns> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<AttributedString._InternalRuns>,  MEMORY[0x189619678]);
}

uint64_t AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = specialized Rope.find<A>(at:in:preferEnd:)(a1, a2, a3, a4, a5, a6);
  unint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t result = swift_unknownObjectRelease();
  if (v14 == a6)
  {
    if (a3)
    {
      swift_unknownObjectRetain();
      uint64_t v22 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a6, v16, v18, a3, a4);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v23 = a1 - v20;
      if (!__OFSUB__(a1, v20))
      {
LABEL_4:
        *a7 = a6;
        a7[1] = v16;
        a7[2] = v18;
        a7[3] = v22;
        a7[4] = v23;
        a7[5] = v20;
        return result;
      }
    }

    else
    {
      uint64_t v22 = 0LL;
      uint64_t v23 = a1 - v20;
      if (!__OFSUB__(a1, v20)) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t AttributedString._InternalRuns.subscript.getter( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(result + 16);
  if ((void)v7 == a5)
  {
    outlined init with take of LocalePreferences?( (uint64_t)&v8,  (uint64_t)v9,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    outlined init with take of LocalePreferences?( (uint64_t)v9,  (uint64_t)&v10,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    if (v10)
    {
      unint64_t v6 = *(void *)(v10 + 24 * ((*((void *)&v7 + 1) >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      unint64_t v6 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v7 + 1), a2);
      swift_unknownObjectRelease();
    }

    return v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t AttributedString._InternalRuns.index(before:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, void *a4@<X8>)
{
  __int128 v5 = *(_OWORD *)result;
  __int128 v19 = v5;
  uint64_t v6 = *(void *)(result + 24);
  uint64_t v20 = *(void *)(result + 16);
  uint64_t v7 = *(void *)(result + 32);
  __int128 v17 = v5;
  uint64_t v18 = v20;
  uint64_t v8 = v6 - 1;
  if (__OFSUB__(v6, 1LL))
  {
    __break(1u);
    goto LABEL_19;
  }

  if ((void)v5 != a3)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if (a2)
  {
    unint64_t v11 = *(unsigned __int8 *)(a2 + 18);
    swift_unknownObjectRetain();
  }

  else
  {
    unint64_t v11 = 0LL;
  }

  uint64_t result = outlined init with take of LocalePreferences?( (uint64_t)&v20,  (uint64_t)v21,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v11 >= *((void *)&v19 + 1)) {
    goto LABEL_20;
  }
  outlined init with take of LocalePreferences?( (uint64_t)v21,  (uint64_t)&v22,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v22)
  {
    char v12 = (4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C;
    if (((*((void *)&v19 + 1) >> v12) & 0xFLL) != 0)
    {
      unint64_t v13 = ((((*((void *)&v19 + 1) >> v12) & 0xFLL) - 1) << v12) | ((-15LL << v12) - 1) & *((void *)&v19 + 1);
      *((void *)&v17 + 1) = v13;
      uint64_t result = swift_unknownObjectRelease();
      goto LABEL_12;
    }
  }

  swift_unknownObjectRetain();
  char v14 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v17, a2);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v14 & 1) != 0)
  {
    unint64_t v13 = *((void *)&v17 + 1);
LABEL_12:
    if ((void)v17 == a3)
    {
      uint64_t v15 = v18;
      if (v18)
      {
        unint64_t v16 = *(void *)(v18 + 24 * ((v13 >> ((4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        swift_unknownObjectRetain();
        unint64_t v16 = specialized Rope._Node.subscript.getter(v13, a2);
        swift_unknownObjectRelease();
      }

      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (!__OFSUB__(v7, v16))
      {
        *a4 = a3;
        a4[1] = v13;
        a4[2] = v15;
        a4[3] = v8;
        a4[4] = v7 - v16;
        return result;
      }

      goto LABEL_22;
    }

uint64_t specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)( uint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v56 = a1[3];
  uint64_t v57 = a1[4];
  int v4 = (void *)a1[2];
  __int128 v64 = *(_OWORD *)a1;
  uint64_t v65 = v4;
  uint64_t v60 = specialized Rope.update<A>(at:by:)(&v64, a2, a3);
  int64_t v61 = a2;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v9 = v64;
  __int128 v67 = v64;
  unint64_t v10 = *((void *)&v64 + 1);
  uint64_t v58 = v11;
  BOOL v59 = v65;
  *(void *)&__int128 v68 = v65;
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v67, v5, v6, v8, v7);
  swift_unknownObjectRelease();
  unint64_t v13 = *((void *)&v67 + 1);
  uint64_t v12 = v67;
  uint64_t v14 = v68;
  unint64_t v15 = swift_unknownObjectRetain();
  unint64_t v16 = specialized Rope._endPath.getter(v15);
  uint64_t result = swift_unknownObjectRelease();
  if (v13 >= v16)
  {
    unint64_t v20 = v10;
    uint64_t v21 = v9;
    uint64_t v22 = *v61;
    if (!*v61) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }

  if (v12 != v7)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  if (v14)
  {
    uint64_t v18 = v14 + 24 * ((v13 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v19 = *(void *)(v18 + 32);
    unint64_t v13 = *(void *)(v18 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v13, v5);
    uint64_t v19 = v23;
    unint64_t v13 = v24;
    swift_unknownObjectRelease();
  }

  unint64_t v20 = v10;
  uint64_t v21 = v9;
  uint64_t v25 = (uint64_t *)v61;
  if ((specialized static Dictionary<>.== infix(_:_:)(v19, (uint64_t)v60) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = *v61;
    if (!*v61) {
      goto LABEL_20;
    }
LABEL_18:
    unsigned int v30 = *(unsigned __int8 *)(v22 + 18);
    goto LABEL_21;
  }

  char v26 = specialized static Set.== infix(_:_:)(v13, v58);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    unint64_t v20 = specialized Rope._remove(at:)((uint64_t)&v67, v21, v10);
    unint64_t v27 = *v61;
    unint64_t v28 = v61[3];
    if (v20 < specialized Rope._endPath.getter(*v61) && *(_BYTE *)(v27 + 18))
    {
      uint64_t v29 = (v20 >> ((4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v27 + 24, v29, v20);
      swift_unknownObjectRelease();
    }

    unint64_t v13 = v67;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v27) {
      goto LABEL_70;
    }
    uint64_t result = specialized Rope._Node._prepareModify(at:)(v20, (uint64_t)v66);
    __int128 v67 = v66[0];
    __int128 v68 = v66[1];
    __int128 v69 = v66[2];
    if (__OFADD__(*((void *)&v66[0] + 1), v13)) {
      goto LABEL_64;
    }
    *((void *)&v67 + 1) = *((void *)&v66[0] + 1) + v13;
    uint64_t v21 = v28 + 1;
    void v61[3] = v28 + 1;
    if (!*v61)
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }

    uint64_t v25 = (uint64_t *)v61;
    BOOL v59 = specialized Rope._Node._finalizeModify(_:)(v63, &v67);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v28 + 1;
  }

  uint64_t v22 = *v25;
  if (*v25) {
    goto LABEL_18;
  }
LABEL_20:
  unsigned int v30 = 0;
LABEL_21:
  if (v20 <= v30)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v48 = v56;
    uint64_t v49 = v57;
    uint64_t v50 = a1;
    int64_t v31 = v59;
LABEL_42:
    uint64_t *v50 = v21;
    v50[1] = v20;
    v50[2] = (uint64_t)v31;
    v50[3] = v48;
    v50[4] = v49;
    return result;
  }

  *(void *)&__int128 v67 = v21;
  *((void *)&v67 + 1) = v20;
  int64_t v31 = v59;
  *(void *)&__int128 v68 = v59;
  if (v21 != v7)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  if (v22)
  {
    unsigned int v32 = *(unsigned __int8 *)(v22 + 18);
    swift_unknownObjectRetain();
    if (v20 > v32) {
      goto LABEL_25;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  if (!v20) {
    goto LABEL_33;
  }
LABEL_25:
  if (v59)
  {
    char v33 = (4 * *((_BYTE *)v59 + 18) + 8) & 0x3C;
    if (((v20 >> v33) & 0xF) != 0)
    {
      unint64_t v13 = ((((v20 >> v33) & 0xF) - 1) << v33) | ((-15LL << v33) - 1) & v20;
      swift_unknownObjectRelease();
      uint64_t v34 = v59;
LABEL_31:
      uint64_t v36 = &v34[3 * ((v13 >> ((4 * *((_BYTE *)v34 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v38 = v36[4];
      uint64_t v37 = v36[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_35;
    }
  }

  swift_unknownObjectRetain();
  char v35 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v67, v22);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v35 & 1) == 0)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }

  if ((void)v67 != v21)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  unint64_t v13 = *((void *)&v67 + 1);
  uint64_t v34 = (void *)v68;
  if ((void)v68) {
    goto LABEL_31;
  }
LABEL_34:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v13, v22);
  uint64_t v38 = v39;
  uint64_t v37 = v40;
  swift_unknownObjectRelease();
LABEL_35:
  if ((specialized static Dictionary<>.== infix(_:_:)(v38, (uint64_t)v60) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }

  uint64_t v41 = v21;
  char v42 = specialized static Set.== infix(_:_:)(v37, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v42 & 1) == 0)
  {
    uint64_t v48 = v56;
    uint64_t v49 = v57;
    uint64_t v50 = a1;
    uint64_t v21 = v41;
    goto LABEL_42;
  }

  unint64_t v43 = specialized Rope._remove(at:)((uint64_t)&v67, v41, v20);
  uint64_t v44 = *v61;
  unint64_t v45 = v61[3];
  if (v43 >= specialized Rope._endPath.getter(*v61))
  {
    uint64_t v46 = 0LL;
  }

  else
  {
    uint64_t v46 = v44;
    if (*(_BYTE *)(v44 + 18))
    {
      uint64_t v47 = (v43 >> ((4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      uint64_t v46 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v44 + 24, v47, v43);
      swift_unknownObjectRelease();
    }
  }

  *(void *)&__int128 v64 = v45;
  *((void *)&v64 + 1) = v43;
  uint64_t v65 = (void *)v46;
  uint64_t v51 = v67;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v44)
  {
    if (v43) {
      goto LABEL_47;
    }
    goto LABEL_59;
  }

  unint64_t v52 = *(unsigned __int8 *)(v44 + 18);
  uint64_t result = swift_unknownObjectRetain();
  if (v52 >= v43)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

uint64_t AttributedString._InternalRuns.endIndex.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v10 = swift_unknownObjectRetain();
  unint64_t v11 = specialized Rope._endPath.getter(v10);
  uint64_t result = swift_unknownObjectRelease();
  if (a1) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (a1) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = 0LL;
  }
  *a5 = a4;
  a5[1] = v11;
  a5[2] = 0LL;
  a5[3] = v14;
  a5[4] = v13;
  return result;
}

uint64_t AttributedString._InternalRuns.index(after:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v20 = *(_OWORD *)result;
  uint64_t v7 = *(void *)(result + 24);
  uint64_t v21 = *(void *)(result + 16);
  uint64_t v8 = *(void *)(result + 32);
  __int128 v18 = v20;
  uint64_t v19 = v21;
  uint64_t v9 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((void)v20 != a5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  outlined init with take of LocalePreferences?( (uint64_t)&v21,  (uint64_t)v22,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  outlined init with take of LocalePreferences?( (uint64_t)v22,  (uint64_t)&v23,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v23)
  {
    unint64_t v14 = *(void *)(v23 + 24 * ((*((void *)&v20 + 1) >> ((4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t v14 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v20 + 1), a2);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v15 = __OFADD__(v8, v14);
  uint64_t v16 = v8 + v14;
  if (!v15)
  {
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v18, a2, a3, a4, a5);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v17 = v19;
    *(_OWORD *)a6 = v18;
    *(void *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
    *(void *)(a6 + 24) = v9;
    *(void *)(a6 + 32) = v16;
    return result;
  }

uint64_t AttributedString._InternalRuns.index(atRunOffset:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  if (a2) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (result < 0 || (uint64_t v8 = result, v7 < result))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  uint64_t v9 = a5;
  uint64_t v10 = a4;
  if (!a2 || a3 <= result || !*(_WORD *)(a2 + 16))
  {
    unint64_t v24 = swift_unknownObjectRetain();
    unint64_t v25 = specialized Rope._endPath.getter(v24);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v15 = 0LL;
    if (!a2) {
      goto LABEL_53;
    }
    goto LABEL_28;
  }

  uint64_t v13 = *(unsigned __int8 *)(a2 + 18);
  if (!*(_BYTE *)(a2 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v27 = 0LL;
    uint64_t v14 = v8;
    uint64_t v15 = a2;
    uint64_t v28 = *(unsigned __int16 *)(a2 + 16);
    if (*(_WORD *)(a2 + 16)) {
      goto LABEL_30;
    }
LABEL_41:
    unint64_t v29 = v14;
    goto LABEL_51;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v14 = v8;
  uint64_t v15 = a2;
  do
  {
    uint64_t v17 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16))
    {
      uint64_t v18 = *(void *)(v15 + 32);
      BOOL v19 = __OFSUB__(v14, v18);
      uint64_t v20 = v14 - v18;
      if (v19) {
        goto LABEL_59;
      }
      if (__OFADD__(v20, 1LL)) {
        goto LABEL_60;
      }
      if (v20 + 1 < 1)
      {
        uint64_t v17 = 0LL;
        goto LABEL_13;
      }

      if ((_DWORD)v17 != 1)
      {
        uint64_t v21 = (uint64_t *)(v15 + 56);
        uint64_t v22 = 1LL;
        while (1)
        {
          uint64_t v23 = *v21;
          v21 += 3;
          uint64_t v14 = v20 - v23;
          if (__OFSUB__(v20, v23)) {
            break;
          }
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_57;
          }
          if (v14 + 1 < 1)
          {
            uint64_t v17 = v22;
            uint64_t v14 = v20;
            goto LABEL_13;
          }

          ++v22;
          uint64_t v20 = v14;
          if (v17 == v22) {
            goto LABEL_12;
          }
        }

        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }

      uint64_t v14 = v20;
    }

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._InternalRuns.Index( uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AttributedString._InternalRuns.Index( uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) < *(void *)(a2 + 32);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AttributedString._InternalRuns.Index( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32) >= *(void *)(a1 + 32);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AttributedString._InternalRuns.Index( uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) >= *(void *)(a2 + 32);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance AttributedString._InternalRuns.Index( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32) < *(void *)(a1 + 32);
}

void *AttributedString._InternalRuns.formIndex(after:)( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = result[3];
  BOOL v6 = __OFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v9 = result;
  result[3] = v7;
  if (*result != a5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v14 = result[1];
  uint64_t v13 = result[2];
  if (v13)
  {
    unint64_t v15 = *(void *)(v13 + 24 * ((v14 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t v15 = specialized Rope._Node.subscript.getter(v14, a2);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  uint64_t v16 = v9[4];
  BOOL v6 = __OFADD__(v16, v15);
  uint64_t v17 = v16 + v15;
  if (!v6)
  {
    void v9[4] = v17;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(v9, a2, a3, a4, a5);
    return (void *)swift_unknownObjectRelease();
  }

void *AttributedString._InternalRuns.formIndex(before:)( void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = result[3];
  BOOL v6 = __OFSUB__(v5, 1LL);
  uint64_t v7 = v5 - 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v8 = a5;
  uint64_t v9 = result;
  result[3] = v7;
  if (*result != a5)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  unint64_t v11 = result[1];
  if (!a2)
  {
    if (v11) {
      goto LABEL_5;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  unint64_t v12 = *(unsigned __int8 *)(a2 + 18);
  swift_unknownObjectRetain();
  if (v12 >= v11) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v13 = v9[2];
  if (v13 && specialized closure #1 in Rope.formIndex(before:)(v13 + 16, (uint64_t)v9))
  {
    uint64_t result = (void *)swift_unknownObjectRelease();
    goto LABEL_9;
  }

  swift_unknownObjectRetain();
  char v14 = specialized Rope._Node.formPredecessor(of:)((uint64_t)v9, a2);
  uint64_t result = (void *)swift_unknownObjectRelease_n();
  if ((v14 & 1) != 0)
  {
LABEL_9:
    if (*v9 == v8)
    {
      unint64_t v8 = v9[1];
      uint64_t v15 = v9[2];
      if (v15)
      {
        unint64_t v16 = *(void *)(v15 + 24 * ((v8 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      }

uint64_t AttributedString._InternalRuns.index(_:offsetBy:limitedBy:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8 = a7;
  uint64_t v12 = a2;
  uint64_t v15 = *a1;
  if (a2 < 0)
  {
    uint64_t v16 = a1[4];
    if (v16 >= a3[4]) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v16 = a1[4];
    if (a3[4] >= v16)
    {
      uint64_t v34 = a1[2];
      unint64_t v37 = a1[1];
      unint64_t v30 = a3[1];
      uint64_t v32 = *a3;
      uint64_t v28 = a3[2];
      swift_unknownObjectRetain();
      uint64_t v17 = v8;
      uint64_t v18 = specialized Rope.distance<A>(from:to:in:)(v15, v37, v34, v32, v30, v28, a4, a5, a6, v8);
      uint64_t result = swift_unknownObjectRelease();
      if (v18 >= v12) {
        goto LABEL_7;
      }
LABEL_12:
      uint64_t v22 = 0LL;
      a6 = 0LL;
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
      uint64_t v8 = 1LL;
LABEL_13:
      *a8 = v22;
      a8[1] = a6;
      a8[2] = v8;
      a8[3] = v25;
      a8[4] = v26;
      return result;
    }
  }

  uint64_t v17 = a7;
LABEL_7:
  while (1)
  {
    uint64_t v38 = v16;
    uint64_t v40 = v15;
    int64x2_t v35 = a8;
    uint64_t v20 = a6;
    uint64_t v41 = v12;
    uint64_t v42 = v12;
    uint64_t v12 = a5;
    unint64_t v21 = a1[1];
    a5 = a1[2];
    uint64_t v43 = v15;
    unint64_t v44 = v21;
    uint64_t v45 = a5;
    swift_unknownObjectRetain();
    uint64_t v15 = v17;
    specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v43, &v42, 0, a4, v12, a6, v17);
    swift_unknownObjectRelease();
    uint64_t v22 = v43;
    a6 = v44;
    uint64_t v8 = v45;
    swift_unknownObjectRetain();
    uint64_t v16 = specialized Rope.distance<A>(from:to:in:)(v40, v21, a5, v22, a6, v8, a4, v12, v20, v15);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v23 = a1[3];
    BOOL v24 = __OFADD__(v23, v41);
    uint64_t v25 = v23 + v41;
    if (v24) {
      break;
    }
    a8 = v35;
    uint64_t v26 = v38 + v16;
    if (!__OFADD__(v38, v16)) {
      goto LABEL_13;
    }
    __break(1u);
LABEL_11:
    uint64_t v36 = a1[2];
    unint64_t v39 = a1[1];
    unint64_t v31 = a3[1];
    uint64_t v33 = *a3;
    uint64_t v29 = a3[2];
    swift_unknownObjectRetain();
    uint64_t v17 = v8;
    uint64_t v27 = specialized Rope.distance<A>(from:to:in:)(v15, v39, v36, v33, v31, v29, a4, a5, a6, v8);
    uint64_t result = swift_unknownObjectRelease();
    if (v27 > v12) {
      goto LABEL_12;
    }
  }

  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns( a1,  (void (*)(_OWORD *__return_ptr, uint64_t, void, void, void, void))AttributedString._InternalRuns.index(before:),  a2);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString._InternalRuns( void *a1)
{
  return AttributedString._InternalRuns.formIndex(before:)( a1,  *(void *)v1,  *(void *)(v1 + 8),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

void protocol witness for Collection.startIndex.getter in conformance AttributedString._InternalRuns( void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*v1) {
    uint64_t v2 = *(unsigned __int8 *)(v2 + 18);
  }
  *a1 = v1[3];
  a1[1] = v2;
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[2] = 0LL;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._InternalRuns@<X0>( void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v7 = swift_unknownObjectRetain();
  unint64_t v8 = specialized Rope._endPath.getter(v7);
  uint64_t result = swift_unknownObjectRelease();
  if (v3) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0LL;
  }
  if (v3) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = 0LL;
  }
  *a1 = v5;
  a1[1] = v8;
  a1[2] = 0LL;
  a1[3] = v11;
  a1[4] = v10;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString._InternalRuns( void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = (char *)malloc(0x68uLL);
  *a1 = v5;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *((_OWORD *)v5 + 1) = v6;
  *((void *)v5 + 4) = *(void *)(a2 + 32);
  unint64_t v7 = AttributedString._InternalRuns.subscript.read( (void (**)(void **))v5 + 5,  (uint64_t)v5,  *v2,  v2[1],  v2[2],  v2[3]);
  *((void *)v5 + 9) = v8;
  v5 += 72;
  *((void *)v5 + 2) = v9;
  *((void *)v5 + 3) = v7;
  *((void *)v5 + 1) = v10;
  return protocol witness for Collection.subscript.read in conformance AttributedString._InternalRuns;
}

void protocol witness for Collection.subscript.read in conformance AttributedString._InternalRuns( uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(*(void *)a1 + 40LL);
  free(v1);
}

void (*AttributedString._InternalRuns.subscript.read( void (**a1)(void **a1), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *((void *)result + 2) = *(void *)(a2 + 16);
  if (*(void *)result == a6)
  {
    uint64_t v11 = result;
    uint64_t v12 = (uint64_t)result + 24;
    uint64_t v13 = (uint64_t)result + 32;
    outlined init with take of LocalePreferences?( (uint64_t)result + 16,  (uint64_t)result + 32,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    outlined init with take of LocalePreferences?( v13,  v12,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    uint64_t v14 = *((void *)v11 + 3);
    if (v14)
    {
      uint64_t v15 = v14 + 24 * ((*((void *)v11 + 1) >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xFLL);
      uint64_t v16 = *(void *)(v15 + 32);
      uint64_t v17 = *(void *)(v15 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      unint64_t v18 = *((void *)v11 + 1);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v18, a3);
      uint64_t v16 = v19;
      uint64_t v17 = v20;
      swift_unknownObjectRelease();
    }

    *((void *)v11 + 5) = v16;
    *((void *)v11 + 6) = v17;
    return AttributedString._InternalRuns.subscript.read;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void AttributedString._InternalRuns.subscript.read(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._InternalRuns@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3 = a1[3];
  _OWORD v6[2] = a1[2];
  v6[3] = v3;
  v6[4] = a1[4];
  __int128 v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return specialized Collection<>.subscript.getter( (uint64_t)v6,  *(void *)v2,  *(void *)(v2 + 8),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString._InternalRuns@<X0>( void *a1@<X8>)
{
  return specialized Collection<>.indices.getter(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance AttributedString._InternalRuns()
{
  if (*v0) {
    BOOL v1 = v0[2] == 0LL;
  }
  else {
    BOOL v1 = 1;
  }
  uint64_t v2 = v1;
  unint64_t v3 = swift_unknownObjectRetain();
  specialized Rope._endPath.getter(v3);
  swift_unknownObjectRelease();
  return v2;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AttributedString._InternalRuns( void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[2] = 2LL;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString._InternalRuns@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v20 = a1[3];
  uint64_t v9 = *v3;
  uint64_t v8 = v3[1];
  uint64_t v17 = a1[4];
  uint64_t v18 = v8;
  uint64_t v11 = v3[2];
  uint64_t v10 = v3[3];
  uint64_t v22 = *a1;
  uint64_t v5 = v22;
  unint64_t v23 = v6;
  uint64_t v24 = v7;
  uint64_t v21 = a2;
  swift_unknownObjectRetain();
  specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v22, &v21, 0, v9, v8, v11, v10);
  swift_unknownObjectRelease();
  uint64_t v12 = v22;
  unint64_t v13 = v23;
  uint64_t v14 = v24;
  swift_unknownObjectRetain();
  uint64_t v15 = specialized Rope.distance<A>(from:to:in:)(v5, v6, v7, v12, v13, v14, v9, v18, v11, v10);
  uint64_t result = swift_unknownObjectRelease();
  if (__OFADD__(v20, a2))
  {
    __break(1u);
  }

  else if (!__OFADD__(v17, v15))
  {
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v14;
    a3[3] = v20 + a2;
    a3[4] = v17 + v15;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString._InternalRuns@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return outlined init with take of LocalePreferences?( (uint64_t)v7,  a4,  &demangling cache variable for type metadata for AttributedString._InternalRuns.Index?);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString._InternalRuns( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = *v2;
  uint64_t v10 = v2[1];
  uint64_t v12 = v2[2];
  uint64_t v11 = v2[3];
  swift_unknownObjectRetain();
  uint64_t v13 = specialized Rope.distance<A>(from:to:in:)(v3, v4, v5, v6, v7, v8, v9, v10, v12, v11);
  swift_unknownObjectRelease();
  return v13;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString._InternalRuns( uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(a2 + 72);
  if (v2 >= *(void *)(a2 + 32))
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v2 = *(void *)(result + 32);
  if (v2 < *(void *)(a2 + 32) || *(void *)(a2 + 72) < v2) {
    __break(1u);
  }
  return result;
}

{
  if (*(void *)(result + 32) < *(void *)(a2 + 32) || *(void *)(a2 + 72) < *(void *)(result + 72)) {
    __break(1u);
  }
  return result;
}

double protocol witness for Collection.index(after:) in conformance AttributedString._InternalRuns@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns( a1,  (void (*)(_OWORD *__return_ptr, uint64_t, void, void, void, void))AttributedString._InternalRuns.index(after:),  a2);
}

double protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns@<D0>( uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, uint64_t, void, void, void, void)@<X3>, uint64_t a3@<X8>)
{
  double result = *(double *)v7;
  __int128 v6 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(void *)(a3 + 32) = v8;
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance AttributedString._InternalRuns( void *a1)
{
  return AttributedString._InternalRuns.formIndex(after:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void protocol witness for Sequence.makeIterator() in conformance AttributedString._InternalRuns( uint64_t a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  uint64_t v4 = *v1;
  if (*v1) {
    uint64_t v4 = *(unsigned __int8 *)(v4 + 18);
  }
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 48) = 0LL;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString._InternalRuns()
{
  if (*v0) {
    return v0[1];
  }
  else {
    return 0LL;
  }
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._InternalRuns()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)( *(void *)v0,  *(void *)(v0 + 8),  *(void *)(v0 + 16),  *(void *)(v0 + 24));
  swift_unknownObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._InternalRuns( void *a1, unint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)( a1,  a2,  a3,  *(void *)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16),  *(void *)(v3 + 24));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._InternalRuns@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K4RunsVABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRuns,  &type metadata for AttributedString._InternalRuns);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRuns,  &type metadata for AttributedString._InternalRuns);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRuns,  &type metadata for AttributedString._InternalRuns);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRuns.Index,  &type metadata for AttributedString._InternalRuns.Index);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRuns.Index,  &type metadata for AttributedString._InternalRuns.Index);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRuns> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRuns>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<AttributedString._InternalRuns> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString._InternalRuns>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRuns>,  MEMORY[0x189617A18]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type Slice<AttributedString._InternalRuns> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString._InternalRuns>,  MEMORY[0x18961A5C8]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    unint64_t v7 = lazy protocol witness table accessor for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns();
    uint64_t result = MEMORY[0x186E20D4C](a3, v6, &v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t AttributedString._InternalRuns._exactIndex(atUTF8Offset:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  if (a2) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (result < 0) {
    goto LABEL_56;
  }
  uint64_t v8 = result;
  if (v7 < result) {
    goto LABEL_56;
  }
  unint64_t v9 = a5;
  uint64_t v10 = a3;
  if (!a2 || a4 <= result || !*(_WORD *)(a2 + 16))
  {
    unint64_t v23 = swift_unknownObjectRetain();
    unint64_t v24 = specialized Rope._endPath.getter(v23);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v14 = 0LL;
    uint64_t v13 = 0LL;
    if (!a2) {
      goto LABEL_47;
    }
    goto LABEL_28;
  }

  uint64_t v32 = a3;
  unint64_t v33 = a5;
  uint64_t v12 = *(unsigned __int8 *)(a2 + 18);
  if (!*(_BYTE *)(a2 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v9 = 0LL;
    uint64_t v13 = v8;
    uint64_t v14 = a2;
    uint64_t v28 = *(unsigned __int16 *)(a2 + 16);
    if (*(_WORD *)(a2 + 16)) {
      goto LABEL_34;
    }
LABEL_45:
    if (!v13)
    {
      while (1)
      {
LABEL_46:
        swift_unknownObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v24 = v9 | (v28 << 8);
        uint64_t v10 = v32;
        unint64_t v9 = v33;
        if (a2)
        {
LABEL_28:
          swift_unknownObjectRetain();
          uint64_t v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v24, v14, a2, v10);
          uint64_t result = swift_unknownObjectRelease();
          unint64_t v27 = v8 - v13;
          if (!__OFSUB__(v8, v13)) {
            goto LABEL_29;
          }
        }

        else
        {
LABEL_47:
          uint64_t v26 = 0LL;
          unint64_t v27 = v8 - v13;
          if (!__OFSUB__(v8, v13))
          {
LABEL_29:
            if (!v13)
            {
              *a6 = v9;
              a6[1] = v24;
              a6[2] = v14;
              a6[3] = v26;
              a6[4] = v27;
              return result;
            }

uint64_t specialized closure #1 in AttributedString._InternalRuns.updateAndCoalesce(at:with:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *a3 = v6;
  a3[1] = v7;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

uint64_t specialized Rope.remove(at:)(uint64_t *a1)
{
  unint64_t v3 = specialized Rope._remove(at:)((uint64_t)&v9, *a1, a1[1]);
  unint64_t v4 = *v1;
  unint64_t v5 = v1[3];
  if (v3 >= specialized Rope._endPath.getter(*v1))
  {
    unint64_t v4 = 0LL;
  }

  else if (*(_BYTE *)(v4 + 18))
  {
    uint64_t v6 = (v3 >> ((4 * *(_BYTE *)(v4 + 18) + 8) & 0x3C)) & 0xF;
    swift_unknownObjectRetain();
    uint64_t v7 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v4 + 24, v6, v3);
    swift_unknownObjectRelease();
    unint64_t v4 = v7;
  }

  *a1 = v5;
  a1[1] = v3;
  a1[2] = v4;
  return v9;
}

uint64_t specialized static Rope._Node.redistributeChildren(_:_:to:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v6 = specialized Rope._Node.copy()(*a1);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v12 = *a2;
  if ((result & 1) == 0)
  {
    uint64_t v12 = specialized Rope._Node.copy()(*a2);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t result = swift_unknownObjectRelease();
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
  }

  uint64_t v17 = *(unsigned __int16 *)(*a1 + 16);
  uint64_t v18 = *(unsigned __int16 *)(v12 + 16) + v17;
  if (v18 >= a3) {
    uint64_t v18 = a3;
  }
  uint64_t v19 = v18 - v17;
  if (__OFSUB__(v18, v17))
  {
    __break(1u);
    goto LABEL_16;
  }

  if (!v19) {
    return result;
  }
  if (v19 <= 0)
  {
    BOOL v23 = __OFSUB__(0LL, v19);
    uint64_t v19 = v17 - v18;
    if (!v23)
    {
      uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:);
      uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:);
      uint64_t v22 = a1;
      return specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(v22, v19, v20, v21);
    }

uint64_t specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(uint64_t *a1, uint64_t a2)
{
  return specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:));
}

uint64_t specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)( uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *v4;
  int v10 = *(unsigned __int8 *)(*v4 + 18LL);
  uint64_t v11 = *v4 + 24LL;
  uint64_t v12 = *a1;
  uint64_t v13 = *a1 + 24;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v14 = v9 + 16;
  uint64_t v15 = v12 + 16;
  if (v10) {
    uint64_t v16 = a4(v15, v13, a2, v14, v11);
  }
  else {
    uint64_t v16 = a3(v15, v13, a2, v14, v11);
  }
  uint64_t v18 = v16;
  uint64_t v19 = v17;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v21 = v4[1];
  BOOL v22 = __OFADD__(v21, v18);
  uint64_t v23 = v21 + v18;
  if (v22)
  {
    __break(1u);
    goto LABEL_10;
  }

  v4[1] = v23;
  uint64_t v24 = v4[2];
  BOOL v22 = __OFADD__(v24, v19);
  uint64_t v25 = v24 + v19;
  if (v22)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  v4[2] = v25;
  uint64_t v26 = a1[1];
  BOOL v22 = __OFSUB__(v26, v18);
  uint64_t v27 = v26 - v18;
  if (v22)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  a1[1] = v27;
  uint64_t v28 = a1[2];
  BOOL v22 = __OFSUB__(v28, v19);
  uint64_t v29 = v28 - v19;
  if (!v22)
  {
    a1[2] = v29;
    return result;
  }

uint64_t specialized Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:)( _WORD *a1, char *__dst, uint64_t a3, _WORD *a4, uint64_t a5)
{
  if (a3 < 1) {
    return 0LL;
  }
  int v10 = (char *)(a5 + 24LL * (unsigned __int16)*a4);
  uint64_t v11 = &__dst[24 * a3];
  if (v10 != __dst || v10 >= v11) {
    memmove(v10, __dst, 24 * a3);
  }
  uint64_t v13 = (unsigned __int16)*a1 - a3;
  if (v13 < 0) {
    goto LABEL_32;
  }
  memmove(__dst, v11, 24 * v13);
  uint64_t v14 = (unsigned __int16)*a4;
  BOOL v15 = __OFADD__(v14, a3);
  unint64_t v16 = v14 + a3;
  if (v15) {
    goto LABEL_28;
  }
  if ((v16 & 0x8000000000000000LL) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v16 >> 16)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  *a4 = v16;
  uint64_t v17 = (unsigned __int16)*a1 - a3;
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  uint64_t result = 0LL;
  *a1 = v17;
  unint64_t v19 = (unsigned __int16)*a4;
  unint64_t v20 = v19 - a3;
  if (v19 < a3) {
    unint64_t v20 = 0LL;
  }
  if (v20 != v19)
  {
    uint64_t v21 = 0LL;
    uint64_t result = 0LL;
    if (a3 >= v19) {
      uint64_t v22 = (unsigned __int16)*a4;
    }
    else {
      uint64_t v22 = a3;
    }
    for (int64_t i = (void *)(24LL * (unsigned __int16)*a4 - 24 * v22 + a5 + 16); ; i += 3)
    {
      uint64_t v24 = *(i - 1);
      BOOL v15 = __OFADD__(result, v24);
      result += v24;
      if (v15) {
        break;
      }
      BOOL v15 = __OFADD__(v21, *i);
      v21 += *i;
      if (v15) {
        goto LABEL_27;
      }
      if (!--v22) {
        return result;
      }
    }

    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  return result;
}

{
  char *v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *i;
  if (a3 < 1) {
    return 0LL;
  }
  int v10 = (char *)(a5 + 24LL * (unsigned __int16)*a4);
  uint64_t v11 = &__dst[24 * a3];
  if (v10 != __dst || v10 >= v11) {
    memmove(v10, __dst, 24 * a3);
  }
  uint64_t v13 = (unsigned __int16)*a1 - a3;
  if (v13 < 0) {
    goto LABEL_32;
  }
  memmove(__dst, v11, 24 * v13);
  uint64_t v14 = (unsigned __int16)*a4;
  BOOL v15 = __OFADD__(v14, a3);
  unint64_t v16 = v14 + a3;
  if (v15) {
    goto LABEL_28;
  }
  if ((v16 & 0x8000000000000000LL) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v16 >> 16)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  *a4 = v16;
  uint64_t v17 = (unsigned __int16)*a1 - a3;
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  uint64_t result = 0LL;
  *a1 = v17;
  unint64_t v19 = (unsigned __int16)*a4;
  unint64_t v20 = v19 - a3;
  if (v19 < a3) {
    unint64_t v20 = 0LL;
  }
  if (v20 != v19)
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    if (a3 >= v19) {
      uint64_t v23 = (unsigned __int16)*a4;
    }
    else {
      uint64_t v23 = a3;
    }
    for (int64_t i = (void *)(a5 + 24LL * (unsigned __int16)*a4 - 24 * v23); ; i += 3)
    {
      uint64_t result = v21 + 1;
      if (__OFADD__(v21, 1LL)) {
        break;
      }
      BOOL v15 = __OFADD__(v22, *i);
      v22 += *i;
      if (v15) {
        goto LABEL_27;
      }
      if (v23 == ++v21) {
        return result;
      }
    }

    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  return result;
}

char *specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:)( _WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, char *__src)
{
  if (a3 < 1) {
    return 0LL;
  }
  uint64_t result = (char *)memmove(&__src[24 * a3], __src, 24LL * (unsigned __int16)*a4);
  unint64_t v11 = a2 + 24LL * (unsigned __int16)*a1;
  uint64_t v12 = (char *)(v11 - 24 * a3);
  uint64_t v14 = (unsigned __int16)*a4;
  BOOL v15 = __OFADD__(v14, a3);
  unint64_t v16 = v14 + a3;
  if (v15)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if ((v16 & 0x8000000000000000LL) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v16 >> 16)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  *a4 = v16;
  uint64_t v17 = (unsigned __int16)*a1 - a3;
  if (v17 >= 0)
  {
    *a1 = v17;
    uint64_t v18 = (unsigned __int16)*a4;
    if (v18 >= a3) {
      uint64_t v18 = a3;
    }
    if (v18)
    {
      uint64_t v19 = 0LL;
      uint64_t result = 0LL;
      for (int64_t i = __src + 16; ; i += 3)
      {
        uint64_t v21 = *(i - 1);
        BOOL v15 = __OFADD__(result, v21);
        result += v21;
        if (v15) {
          break;
        }
        BOOL v15 = __OFADD__(v19, *i);
        v19 += *i;
        if (v15) {
          goto LABEL_21;
        }
        if (!--v18) {
          return result;
        }
      }

      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }

    return 0LL;
  }

uint64_t specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:)( _WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, char *__src)
{
  if (a3 < 1) {
    return 0LL;
  }
  unint64_t v5 = __src;
  uint64_t result = (uint64_t)memmove(&__src[24 * a3], __src, 24LL * (unsigned __int16)*a4);
  unint64_t v11 = a2 + 24LL * (unsigned __int16)*a1;
  uint64_t v12 = (void *)(v11 - 24 * a3);
  uint64_t v14 = (unsigned __int16)*a4;
  BOOL v15 = __OFADD__(v14, a3);
  unint64_t v16 = v14 + a3;
  if (v15)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((v16 & 0x8000000000000000LL) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (v16 >> 16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  *a4 = v16;
  uint64_t v17 = (unsigned __int16)*a1 - a3;
  if (v17 < 0)
  {
LABEL_27:
    __break(1u);
    return result;
  }

  *a1 = v17;
  uint64_t v18 = 0LL;
  else {
    uint64_t result = (unsigned __int16)*a4;
  }
  if (result)
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v20 = result;
    while (v19)
    {
      BOOL v15 = __OFADD__(v18, *v5);
      v18 += *v5;
      if (v15) {
        goto LABEL_23;
      }
      --v19;
      v5 += 3;
      if (!--v20) {
        return result;
      }
    }

    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  return result;
}

uint64_t specialized Rope._UnsafeHandle._removeChild(at:)(uint64_t a1, _WORD *a2, uint64_t a3)
{
  uint64_t v3 = (unsigned __int16)*a2;
  BOOL v4 = __OFSUB__(v3, a1);
  uint64_t v5 = v3 - a1;
  if (v4)
  {
    __break(1u);
    goto LABEL_7;
  }

  BOOL v4 = __OFSUB__(v5, 1LL);
  uint64_t v6 = v5 - 1;
  if (v4)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if ((v6 & 0x8000000000000000LL) == 0)
  {
    uint64_t v8 = (uint64_t *)(a3 + 24 * a1);
    uint64_t v9 = *v8;
    memmove(v8, v8 + 3, 24 * v6);
    if (*a2)
    {
      --*a2;
      return v9;
    }

    goto LABEL_8;
  }

uint64_t specialized Rope._remove(at:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (v3[3] != a2)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  unint64_t v16 = a3;
  if (!*v3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v5 = (void *)result;
  uint64_t result = specialized Rope._Node.remove(at:)(v14, v15, (uint64_t *)&v16);
  __int16 v6 = result;
  unint64_t v7 = *v3;
  if (*(_WORD *)(*v3 + 16) != 1)
  {
    if (!*(_WORD *)(*v3 + 16))
    {
      swift_unknownObjectRelease();
      unint64_t v7 = 0LL;
      *uint64_t v3 = 0LL;
      v3[1] = 0LL;
      uint64_t v3[2] = 0LL;
    }

    goto LABEL_10;
  }

  if (*(_BYTE *)(v7 + 18))
  {
    if (!v7)
    {
LABEL_17:
      __break(1u);
      return result;
    }

    unint64_t v9 = *(void *)(v7 + 32);
    unint64_t v8 = *(void *)(v7 + 40);
    unint64_t v10 = *(void *)(v7 + 24);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v3 = v10;
    v3[1] = v9;
    uint64_t v3[2] = v8;
    if (((v16 - 1) & 0xFFFFFF00) == 0)
    {
      unint64_t v16 = v16 & 0xFFFFFFFFFFFFFF00LL | (v16 - 1);
      unint64_t v7 = v10;
      goto LABEL_10;
    }

    goto LABEL_15;
  }

uint64_t specialized Rope._Node.remove(at:)(uint64_t *a1, void *a2, uint64_t *a3)
{
  BOOL v4 = v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v9 = *v3;
  if ((result & 1) == 0)
  {
    uint64_t v9 = specialized Rope._Node.copy()(*v3);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t result = swift_unknownObjectRelease();
    *BOOL v4 = v9;
    v4[1] = v11;
    v4[2] = v13;
  }

  char v14 = 4 * *(_BYTE *)(v9 + 18);
  char v15 = (v14 + 8) & 0x3C;
  unint64_t v16 = ((unint64_t)*a3 >> v15) & 0xF;
  if (v16 >= *(unsigned __int16 *)(v9 + 16))
  {
    __break(1u);
    goto LABEL_27;
  }

  if (*(_BYTE *)(v9 + 18))
  {
    char v53 = a1;
    swift_unknownObjectRetain();
    unsigned int v17 = specialized Rope._Node.remove(at:)(&v54, v56, a3);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v18 = v56[0];
    uint64_t v19 = v4[1];
    BOOL v20 = __OFSUB__(v19, v56[0]);
    uint64_t v21 = v19 - v56[0];
    if (!v20)
    {
      unint64_t v52 = a2;
      uint64_t v22 = v56[1];
      v4[1] = v21;
      uint64_t v23 = v4[2];
      BOOL v20 = __OFSUB__(v23, v22);
      uint64_t v24 = v23 - v22;
      if (!v20)
      {
        v4[2] = v24;
        uint64_t v25 = v54;
        __int128 v26 = v55;
        if ((v17 & 1) != 0)
        {
          uint64_t v50 = v54;
          __int128 v51 = v55;
          uint64_t v45 = (unsigned __int16 *)(*v4 + 16);
          uint64_t v46 = (uint64_t *)(*v4 + 24);
          swift_unknownObjectRetain();
          char v47 = specialized closure #1 in Rope._Node.fixDeficiency(on:)(v45, v46, a3);
          swift_unknownObjectRelease();
          if ((v17 & 0x100) == 0)
          {
            BOOL v28 = 0;
            __int128 v26 = v51;
            uint64_t v25 = v50;
            goto LABEL_21;
          }

          __int128 v26 = v51;
          uint64_t v25 = v50;
          if ((v47 & 1) != 0)
          {
LABEL_9:
            uint64_t v27 = ((unint64_t)*a3 >> v15) & 0xF;
            if (v27 >= *(unsigned __int16 *)(*v4 + 16) - 1LL)
            {
              BOOL v28 = 1;
            }

            else
            {
              BOOL v28 = 0;
              *a3 = (((v27 + 1) << v15) | *a3 & ((-15LL << v15) - 1)) & ((-256LL << (v14 & 0x3C)) | 0xFF);
            }

            goto LABEL_21;
          }
        }

        else if (((v17 >> 8) & 1) != 0)
        {
          goto LABEL_9;
        }

        BOOL v28 = 0;
LABEL_21:
        *char v53 = v25;
        *(_OWORD *)(v53 + 1) = v26;
        *unint64_t v52 = v18;
        v52[1] = v22;
        LODWORD(v44) = *(unsigned __int16 *)(*v4 + 16);
        goto LABEL_22;
      }

      goto LABEL_28;
    }

uint64_t specialized closure #1 in Rope._Node.fixDeficiency(on:)( unsigned __int16 *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  if (v3 < 2) {
    return 1LL;
  }
  int v7 = *((unsigned __int8 *)a1 + 2);
  uint64_t v8 = ((unint64_t)*a3 >> ((4 * v7 + 8) & 0x3C)) & 0xF;
  if (!v8)
  {
    uint64_t v20 = *(unsigned __int16 *)(*a2 + 16);
    char v14 = a2 + 3;
    unint64_t v15 = v20 + *(unsigned __int16 *)(a2[3] + 16);
    if (v15 > 0xF)
    {
      specialized static Rope._Node.redistributeChildren(_:_:to:)(a2, v14, v15 >> 1);
      return 0LL;
    }

    uint64_t v13 = 1LL;
LABEL_16:
    specialized static Rope._Node.redistributeChildren(_:_:to:)(&a2[3 * v8], v14, v15);
    specialized Rope._UnsafeHandle._removeChild(at:)(v13, a1, (uint64_t)a2);
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t v9 = &a2[3 * (int)v8 - 3];
  uint64_t v10 = *(unsigned __int16 *)(*v9 + 16);
  uint64_t v11 = &a2[3 * (((unint64_t)*a3 >> ((4 * v7 + 8) & 0x3C)) & 0xF)];
  uint64_t v12 = *(unsigned __int16 *)(*v11 + 16);
  if ((unint64_t)(v12 + v10) < 0x10)
  {
    specialized static Rope._Node.redistributeChildren(_:_:to:)( v9,  &a2[3 * (((unint64_t)*a3 >> ((4 * v7 + 8) & 0x3C)) & 0xF)],  v12 + v10);
    specialized Rope._UnsafeHandle._removeChild(at:)(v8, a1, (uint64_t)a2);
    uint64_t result = swift_unknownObjectRelease();
    if (((v7 - 1) & 0xFFFFFF00) == 0)
    {
      unint64_t v21 = *a3 & ((-15LL << ((4 * v7 + 8) & 0x3C)) - 1) | ((v8 - 1) << ((4 * v7 + 8) & 0x3C));
      uint64_t v19 = ((((v21 >> ((4 * (v7 - 1) + 8) & 0x3C)) & 0xF) + v10) << ((4 * (v7 - 1) + 8) & 0x3C)) | v21 & ((-15LL << ((4 * (v7 - 1) + 8) & 0x3C)) - 1);
      goto LABEL_14;
    }

    __break(1u);
    goto LABEL_19;
  }

  uint64_t v13 = v8 + 1;
  if (v8 + 1 < v3)
  {
    char v14 = &a2[3 * v13];
    unint64_t v15 = v12 + *(unsigned __int16 *)(*v14 + 16);
    if (v15 <= 0xF) {
      goto LABEL_16;
    }
  }

  uint64_t result = specialized static Rope._Node.redistributeChildren(_:_:to:)( v9,  &a2[3 * v8],  (unint64_t)(v12 + v10) >> 1);
  if (((v7 - 1) & 0xFFFFFF00) == 0)
  {
    char v17 = (4 * (v7 - 1) + 8) & 0x3C;
    uint64_t v18 = (((unint64_t)*a3 >> v17) & 0xF) - v12 + *(unsigned __int16 *)(*v11 + 16);
    if (v18 >= 0)
    {
      uint64_t v19 = (v18 << v17) | *a3 & ((-15LL << v17) - 1);
LABEL_14:
      *a3 = v19;
      return 1LL;
    }

    goto LABEL_20;
  }

uint64_t specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24 * a2);
  if (!*(_BYTE *)(v3 + 18)) {
    return *(void *)(a1 + 24 * a2);
  }
  uint64_t v5 = (a3 >> ((4 * *(_BYTE *)(v3 + 18) + 8) & 0x3C)) & 0xF;
  swift_unknownObjectRetain();
  uint64_t v6 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v3 + 24, v5, a3);
  swift_unknownObjectRelease();
  return v6;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRuns.Index()
{
  return &type metadata for AttributedString._InternalRuns.Index;
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5( uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TY0_()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v5;
    *uint64_t v5 = v0;
    v5[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TQ1_;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  else
  {
    uint64_t v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TQ1_( __int16 a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 56) = v1;
  swift_task_dealloc();
  if (!v1) {
    return (*(uint64_t (**)(void))(v4 + 8))(a1 & 0x1FF);
  }
  if (*(void *)(v4 + 24))
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }

  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5( uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TY0_()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v5;
    *uint64_t v5 = v0;
    v5[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TQ1_;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  else
  {
    uint64_t v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TQ1_( __int16 a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 56) = v1;
  swift_task_dealloc();
  if (!v1) {
    return (*(uint64_t (**)(void))(v4 + 8))(a1 & 0x1FF);
  }
  if (*(void *)(v4 + 24))
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }

  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TY2_()
{
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(void **a1)
{
  v6[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v1 = *a1;
  v6[0] = 0LL;
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v1, v6);
  if (v2)
  {
    id v3 = v6[0];
  }

  else
  {
    if (v6[0])
    {
      v6[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v4 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v2;
}

uint64_t URL.AsyncBytes.AsyncIterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t URL.AsyncBytes.AsyncIterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_unknownObjectRelease();
  *id v3 = a1;
  v3[1] = a2;
  uint64_t v3[2] = a3;
  return result;
}

uint64_t (*URL.AsyncBytes.AsyncIterator.buffer.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t URL.AsyncBytes.AsyncIterator.next()()
{
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v0;
  return swift_task_switch();
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)()
{
  uint64_t v1 = *(void **)(v0 + 104);
  swift_retain();
  id v2 = v1;
  swift_retain();
  int v3 = _foundation_swift_url_feature_enabled();
  id v4 = *(void **)(v0 + 104);
  if (!v3)
  {
    unsigned __int8 v8 = objc_msgSend(*(id *)(v0 + 104), sel_isFileURL);

    goto LABEL_9;
  }

  URL.scheme.getter();
  if (!v5)
  {

    swift_release();
    swift_release();
    goto LABEL_13;
  }

  Swift::String v6 = String.lowercased()();
  swift_bridgeObjectRelease();
  int v7 = *(void **)(v0 + 104);
  if (v6._countAndFlagsBits != 1701603686 || v6._object != (void *)0xE400000000000000LL)
  {
    unsigned __int8 v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();

LABEL_9:
    swift_release();
    swift_release();
    if ((v8 & 1) != 0) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v10 = *(void *)(v0 + 120);
    __int128 v16 = *(_OWORD *)(v0 + 104);
    id v11 = objc_msgSend((id)objc_opt_self(), sel_sharedSession);
    *(void *)(v0 + 136) = v11;
    type metadata accessor for NSURLSession.CancelState();
    uint64_t inited = swift_initStackObject();
    *(void *)(v0 + 144) = inited;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
    uint64_t v13 = swift_initStackObject();
    *(void *)(v0 + 152) = v13;
    *(_DWORD *)(v13 + 32) = 0;
    *(_BYTE *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    *(void *)(v13 + 24) = 0LL;
    *(void *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v13;
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 160) = v14;
    *(void *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11;
    *(_OWORD *)(v14 + 24) = v16;
    *(void *)(v14 + 40) = v10;
    *(void *)(v14 + 48) = 0LL;
    *(void *)(v14 + 56) = inited;
    unint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSURLSession.AsyncBytes, NSURLResponse));
    *unint64_t v15 = v0;
    v15[1] = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }

  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
LABEL_10:
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  return swift_task_switch();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  void *v6[4];
  uint64_t v1 = (void *)v0[14];
  id v2 = (void *)v0[15];
  int v3 = (void *)v0[13];
  type metadata accessor for NSFileHandle();
  v6[0] = v3;
  v6[1] = v1;
  id v6[2] = v2;
  id v4 = v3;
  swift_retain();
  swift_retain();
  v0[16] = @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(v6);
  return swift_task_switch();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  int *v11;
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v1 = (void *)v0[16];
  type metadata accessor for _AsyncBytesBuffer.Storage();
  id v2 = swift_allocObject();
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v2 + 24) = 0LL;
  *(_BYTE *)(v2 + 32) = 0;
  int v3 = v1;
  id v4 = objc_msgSend(v3, sel_fileDescriptor);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  Swift::String v6 = v3;
  int v7 = swift_dynamicCastClassUnconditional();
  unsigned __int8 v8 = *(void *)(v7 + 16);
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = &async function pointer to partial apply for closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
  *(void *)(v7 + 24) = v5;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);

  swift_unknownObjectRelease();
  uint64_t v9 = (uint64_t *)v0[12];
  *uint64_t v9 = v2;
  v9[1] = v2 + 33;
  void v9[2] = v2 + 33;
  uint64_t result = swift_dynamicCastClassUnconditional();
  id v11 = *(int **)(result + 16);
  v0[23] = v11;
  v0[24] = *(void *)(result + 24);
  if (v11)
  {
    uint64_t v13 = (uint64_t (*)(void))((char *)v11 + *v11);
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[25] = v12;
    *uint64_t v12 = v0;
    v12[1] = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
    return v13(v0[12]);
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;
  int *v23;
  void *v24;
  uint64_t (*v25)(void);
  uint64_t v1 = *(void **)(v0 + 136);
  swift_release();

  id v2 = *(void *)(v0 + 80);
  int v3 = *(void **)(v0 + 88);
  objc_opt_self();
  id v4 = swift_dynamicCastObjCClass();
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = (void *)v4;
  Swift::String v6 = (void *)objc_opt_self();
  int v7 = v3;
  if (objc_msgSend(v6, sel_isErrorStatusCode_, objc_msgSend(v5, sel_statusCode)))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
    unsigned __int8 v8 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v9 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = objc_msgSend(v8, sel_initWithDomain_code_userInfo_, v9, -1011, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v11 = objc_msgSend(v10, sel_domain);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v14 == v15)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      int v3 = v15;
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
        __break(1u);
        goto LABEL_9;
      }
    }

    swift_willThrow();

    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 136);
  swift_release();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(void *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 216));
}

{
  uint64_t v0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(void *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 208) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v4 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  }
  return swift_task_switch();
}

uint64_t _s10Foundation3URLV10AsyncBytesV0C8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  uint64_t v4[3] = a4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5Tu);
  int v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  *int v7 = v4;
  v7[1] = _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

uint64_t URL.AsyncBytes.makeAsyncIterator()()
{
  id v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v4 + 24) = 0LL;
  *(_BYTE *)(v4 + 32) = 0;
  uint64_t v5 = (void *)swift_allocObject();
  _OWORD v5[2] = v2;
  v5[3] = v1;
  void v5[4] = v3;
  swift_retain();
  id v6 = v2;
  swift_retain();
  uint64_t v7 = swift_dynamicCastClassUnconditional();
  uint64_t v8 = *(void *)(v7 + 16);
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = &async function pointer to partial apply for closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
  *(void *)(v7 + 24) = v5;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);
  return v4;
}

uint64_t partial apply for closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)(uint64_t a1)
{
  __int128 v7 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(void *)(v5 + 120) = v4;
  *(_OWORD *)(v5 + 104) = v7;
  *(void *)(v5 + 96) = a1;
  return swift_task_switch();
}

void protocol witness for AsyncSequence.makeAsyncIterator() in conformance URL.AsyncBytes(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  *(_BYTE *)(v6 + 32) = 0;
  __int128 v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v4;
  uint64_t v7[3] = v3;
  v7[4] = v5;
  swift_retain();
  id v8 = v4;
  swift_retain();
  uint64_t v9 = swift_dynamicCastClassUnconditional();
  uint64_t v10 = *(void *)(v9 + 16);
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = &closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)partial apply;
  *(void *)(v9 + 24) = v7;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v10);
  swift_release();
  swift_release();

  *a1 = v6;
  a1[1] = v6 + 33;
  a1[2] = v6 + 33;
}

uint64_t URL.resourceBytes.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  *a1 = *(void *)v1;
  a1[1] = v2;
  a1[2] = v4;
  swift_retain();
  id v5 = v3;
  return swift_retain();
}

uint64_t URL.lines.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  *a1 = *(void *)v1;
  a1[1] = v2;
  a1[2] = v4;
  swift_retain();
  id v5 = v3;
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator;
  if (!lazy protocol witness table cache variable for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.AsyncBytes.AsyncIterator,  &type metadata for URL.AsyncBytes.AsyncIterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator);
  }

  return result;
}

uint64_t destroy for URL.AsyncBytes(id *a1)
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for URL.AsyncBytes(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for URL.AsyncBytes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for URL.AsyncBytes(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for URL.AsyncBytes()
{
  return &type metadata for URL.AsyncBytes;
}

ValueMetadata *type metadata accessor for URL.AsyncBytes.AsyncIterator()
{
  return &type metadata for URL.AsyncBytes.AsyncIterator;
}

uint64_t objectdestroyTm_1()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)partial apply(uint64_t a1)
{
  __int128 v7 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  *(void *)(v5 + 120) = v4;
  *(_OWORD *)(v5 + 104) = v7;
  *(void *)(v5 + 96) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #2 in NSURLSession.bytes(from:delegate:)()
{
  return closure #2 in NSURLSession.bytes(from:delegate:)(v0);
}

unint64_t type metadata accessor for NSFileHandle()
{
  unint64_t result = lazy cache variable for type metadata for NSFileHandle;
  if (!lazy cache variable for type metadata for NSFileHandle)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileHandle);
  }

  return result;
}

uint64_t sub_18337FF1C()
{
  return swift_deallocObject();
}

uint64_t FloatingPointFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35[18];
  void v36[20];
  uint64_t v3 = v2;
  uint64_t v34 = a1;
  v36[18] = *MEMORY[0x1895F89C0];
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v30 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v33 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v6);
  id v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = a2;
  uint64_t v9 = v3 + *(int *)(a2 + 36);
  uint64_t v10 = *(void *)(v3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 472);
  swift_unknownObjectRetain();
  uint64_t v13 = v12(ObjectType, v10);
  uint64_t v15 = v14;
  swift_unknownObjectRelease();
  __int128 v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v16(v35, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v35,  (uint64_t)v36,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( v9,  (uint64_t)v8,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  char v17 = (uint64_t *)&v8[*(int *)(v6 + 20)];
  *char v17 = v13;
  v17[1] = v15;
  outlined init with take of LocalePreferences?( (uint64_t)v36,  (uint64_t)&v8[*(int *)(v6 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v18 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v8);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICUNumberFormatter.Signature);
  if (!v18)
  {
    uint64_t v19 = v31;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    uint64_t v22 = v32;
    uint64_t v23 = (uint64_t)v33;
    uint64_t v24 = v34;
LABEL_4:
    v20(v23, v24, v19);
    specialized BinaryFloatingPoint.init<A>(_:)(v23, v19, *(void *)(v22 + 24));
    return Double.description.getter();
  }

  uint64_t v19 = v31;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
  unint64_t v21 = (uint64_t)v33;
  v20((uint64_t)v33, v34, v31);
  uint64_t v22 = v32;
  specialized BinaryFloatingPoint.init<A>(_:)(v21, v19, *(void *)(v32 + 24));
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  __int128 v26 = swift_retain_n();
  MEMORY[0x1895F8858](v26);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v29 - 8), v35);
  uint64_t v27 = v35[0];
  BOOL v28 = v35[1];
  swift_release();
  swift_release_n();
  uint64_t v23 = (uint64_t)v33;
  uint64_t v24 = v34;
  if (!v28) {
    goto LABEL_4;
  }
  return v27;
}

uint64_t FloatingPointFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Currency.format(_:)( a1,  a2,  (uint64_t)type metadata accessor for ICUCurrencyNumberFormatter,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))static ICUCurrencyNumberFormatter.create<A>(for:));
}

uint64_t FloatingPointFormatStyle.Percent.format(_:)(uint64_t a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Currency.format(_:)( a1,  a2,  (uint64_t)type metadata accessor for ICUPercentNumberFormatter,  static ICUPercentNumberFormatter.create<A>(for:));
}

uint64_t FloatingPointFormatStyle.Currency.format(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  _OWORD v21[2] = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v13(0LL, v10);
  uint64_t v14 = *(void *)(a2 + 24);
  if (!a4(v4, v8, v14))
  {
    uint64_t v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16);
LABEL_4:
    v15(v12, a1, v8);
    specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)v12, v8, v14);
    return Double.description.getter();
  }

  uint64_t v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16);
  v15(v12, a1, v8);
  specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)v12, v8, v14);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  uint64_t v17 = swift_retain_n();
  MEMORY[0x1895F8858](v17);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v20[-64], v21);
  uint64_t v18 = v21[0];
  uint64_t v19 = v21[1];
  swift_release();
  swift_release_n();
  if (!v19) {
    goto LABEL_4;
  }
  return v18;
}

__n128 FloatingPointFormatStyle.init(locale:)@<Q0>( __n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v7 = (char *)a5 + *(int *)(type metadata accessor for FloatingPointFormatStyle(0LL, a2, a3, a4) + 36);
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  *((void *)v7 + 2) = 0LL;
  *((void *)v7 + 3) = 0LL;
  *((void *)v7 + 4) = 0LL;
  *((void *)v7 + 5) = 0x1FFFFFFFELL;
  *((void *)v7 + 7) = 0LL;
  *((void *)v7 + 8) = 0LL;
  *((void *)v7 + 6) = 0LL;
  *((_DWORD *)v7 + 18) = 131584;
  *((_WORD *)v7 + 38) = 512;
  uint64_t v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v9 = &v7[v8[9]];
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = &v7[v8[10]];
  *(void *)uint64_t v11 = 0LL;
  v11[8] = -1;
  v7[v8[11]] = 3;
  __n128 result = v13;
  *a5 = v13;
  return result;
}

double specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v76 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v72 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v73 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v71 = (char *)&v68 - v6;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(v7 - 8);
  uint64_t v70 = v7;
  MEMORY[0x1895F8858](v7);
  __int128 v68 = (char *)&v68 - v8;
  uint64_t v75 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v68 - v13;
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v68 - v16;
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v68 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v68 - v22;
  MEMORY[0x1895F8858](v24);
  __int128 v26 = (char *)&v68 - v25;
  uint64_t v27 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
  uint64_t v74 = a3;
  uint64_t v28 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  if (v27 == 11)
  {
    if (v28 == 52)
    {
      uint64_t v34 = v75;
      uint64_t v33 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v14, v76, a2);
      int v35 = swift_dynamicCast();
      _D8 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v11, v33, a2);
      if (v35)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v11, a2);
      }

      else
      {
        uint64_t v54 = dispatch thunk of FloatingPoint.sign.getter();
        __int128 v55 = v68;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        uint64_t v56 = v70;
        swift_getAssociatedConformanceWitness();
        __int16 v57 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v55, v56);
        uint64_t v58 = v71;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v11, a2);
        uint64_t v59 = v73;
        swift_getAssociatedConformanceWitness();
        uint64_t v60 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v59);
        *(void *)&_D8 = (v54 << 63) | ((unint64_t)(v57 & 0x7FF) << 52) | v60 & 0xFFFFFFFFFFFFFLL;
      }

      return _D8;
    }

uint64_t FloatingPointFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 FloatingPointFormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*FloatingPointFormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointFormatStyle.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.attributed.getter(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v3, a1);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style( 0LL,  *(void *)(a1 + 16),  *(void *)(a1 + 24),  v5);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static FloatingPointFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointFormatStyle.encode(to:)(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)( a1,  a2,  (uint64_t (*)(uint64_t, void, void))type metadata accessor for FloatingPointFormatStyle.CodingKeys,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.CodingKeys);
}

Swift::Int FloatingPointFormatStyle.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter( a1,  (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.hash(into:));
}

uint64_t FloatingPointFormatStyle.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v7);
  int v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for FloatingPointFormatStyle.CodingKeys(255LL, a2, a3, v9);
  uint64_t v35 = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.CodingKeys, v10);
  uint64_t v34 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v30 = *(void *)(v34 - 8);
  MEMORY[0x1895F8858](v34);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v14 = type metadata accessor for FloatingPointFormatStyle(0LL, a2, a3, v13);
  uint64_t v29 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (_OWORD *)((char *)&v29 - v15);
  uint64_t v18 = (char *)&v29 + *(int *)(v17 + 36) - v15;
  *(void *)uint64_t v18 = 0LL;
  v18[8] = 1;
  *((void *)v18 + 2) = 0LL;
  *((void *)v18 + 3) = 0LL;
  *((void *)v18 + 4) = 0LL;
  *((void *)v18 + 5) = 0x1FFFFFFFELL;
  *((void *)v18 + 7) = 0LL;
  *((void *)v18 + 8) = 0LL;
  *((void *)v18 + 6) = 0LL;
  *((_DWORD *)v18 + 18) = 131584;
  *((_WORD *)v18 + 38) = 512;
  uint64_t v19 = &v18[v7[9]];
  uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  uint64_t v21 = &v18[v7[10]];
  *(void *)uint64_t v21 = 0LL;
  _BYTE v21[8] = -1;
  v18[v7[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v33 = v12;
  uint64_t v22 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v18,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }

  else
  {
    uint64_t v23 = v30;
    uint64_t v24 = (uint64_t)v31;
    uint64_t v36 = v14;
    uint64_t v25 = v32;
    char v38 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *uint64_t v16 = v37;
    LOBYTE(v37) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v33, v34);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v24, (uint64_t)v18);
    uint64_t v26 = v29;
    uint64_t v27 = v36;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v29 + 16))(v25, v16, v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v26 + 8))(v16, v27);
  }

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointFormatStyle.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>( void *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>( __int128 *a1, __int128 *a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t (*FloatingPointFormatStyle.Percent.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 FloatingPointFormatStyle.Percent.init(locale:)@<Q0>( __n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v7 = (char *)a5 + *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent(0LL, a2, a3, a4) + 36);
  uint64_t v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v9 = &v7[v8[9]];
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  *(void *)uint64_t v7 = 0x4059000000000000LL;
  v7[8] = 0;
  *((void *)v7 + 2) = 0LL;
  *((void *)v7 + 3) = 0LL;
  *((void *)v7 + 4) = 0LL;
  *((void *)v7 + 5) = 0x1FFFFFFFELL;
  *((void *)v7 + 7) = 0LL;
  *((void *)v7 + 8) = 0LL;
  *((void *)v7 + 6) = 0LL;
  *((_DWORD *)v7 + 18) = 131584;
  *((_WORD *)v7 + 38) = 512;
  uint64_t v11 = &v7[v8[10]];
  *(void *)uint64_t v11 = 0LL;
  v11[8] = -1;
  v7[v8[11]] = 3;
  __n128 result = v13;
  *a5 = v13;
  return result;
}

uint64_t FloatingPointFormatStyle.Percent.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.attributed.getter(a1, a2);
}

uint64_t FloatingPointFormatStyle.rounded(rule:increment:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = a5 + *(int *)(a4 + 36);
  uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0LL, 1LL, v14);
  if ((a3 & 1) == 0)
  {
    uint64_t v17 = v11 + *(int *)(v12 + 40);
    *(void *)uint64_t v17 = a2;
    *(_BYTE *)(v17 + 8) = 1;
  }

  return result;
}

uint64_t static FloatingPointFormatStyle.Percent.== infix(_:_:)( __int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Percent.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Percent.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointFormatStyle.Percent.encode(to:)(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)( a1,  a2,  (uint64_t (*)(uint64_t, void, void))type metadata accessor for FloatingPointFormatStyle.Percent.CodingKeys,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent.CodingKeys);
}

Swift::Int FloatingPointFormatStyle.Percent.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter( a1,  (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Percent.hash(into:));
}

uint64_t FloatingPointFormatStyle.Percent.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v7);
  int v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for FloatingPointFormatStyle.Percent.CodingKeys(255LL, a2, a3, v9);
  uint64_t v35 = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent.CodingKeys, v10);
  uint64_t v34 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v30 = *(void *)(v34 - 8);
  MEMORY[0x1895F8858](v34);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v14 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, a2, a3, v13);
  uint64_t v29 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (_OWORD *)((char *)&v29 - v15);
  uint64_t v18 = (char *)&v29 + *(int *)(v17 + 36) - v15;
  uint64_t v19 = &v18[v7[9]];
  uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  *(void *)uint64_t v18 = 0x4059000000000000LL;
  v18[8] = 0;
  *((void *)v18 + 2) = 0LL;
  *((void *)v18 + 3) = 0LL;
  *((void *)v18 + 4) = 0LL;
  *((void *)v18 + 5) = 0x1FFFFFFFELL;
  *((void *)v18 + 7) = 0LL;
  *((void *)v18 + 8) = 0LL;
  *((void *)v18 + 6) = 0LL;
  *((_DWORD *)v18 + 18) = 131584;
  *((_WORD *)v18 + 38) = 512;
  uint64_t v21 = &v18[v7[10]];
  *(void *)uint64_t v21 = 0LL;
  _BYTE v21[8] = -1;
  v18[v7[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v33 = v12;
  uint64_t v22 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v18,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }

  else
  {
    uint64_t v23 = v30;
    uint64_t v24 = (uint64_t)v31;
    uint64_t v36 = v14;
    uint64_t v25 = v32;
    char v38 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *uint64_t v16 = v37;
    LOBYTE(v37) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v33, v34);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v24, (uint64_t)v18);
    uint64_t v26 = v29;
    uint64_t v27 = v36;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v29 + 16))(v25, v16, v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v26 + 8))(v16, v27);
  }

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Percent@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointFormatStyle.Percent.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Percent( void *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Percent.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Percent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Percent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Percent( __int128 *a1, __int128 *a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Percent.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t (*FloatingPointFormatStyle.Currency.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointFormatStyle.Currency.currencyCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FloatingPointFormatStyle.Currency.init(code:locale:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = *a3;
  *(void *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  *(void *)(a6 + 24) = a2;
  uint64_t v6 = a6 + *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0LL, a4, a5, a4) + 40);
  uint64_t v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v6 + v7[9];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))( v8,  1LL,  1LL,  v9);
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  *(void *)(v6 + 32) = 0LL;
  *(void *)(v6 + 40) = 0x1FFFFFFFELL;
  *(void *)(v6 + 56) = 0LL;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 48) = 0LL;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(_BYTE *)(v6 + 78) = 2;
  uint64_t v11 = v6 + v7[10];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = -1;
  *(_BYTE *)(v6 + v7[11]) = 1;
  *(_BYTE *)(v6 + v7[12]) = 3;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.attributed.getter(a1, a2);
}

uint64_t FloatingPointFormatStyle.Currency.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 40) + 73) = v6;
  return result;
}

__n128 FloatingPointFormatStyle.Currency.precision(_:)@<Q0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v11 = a1[1];
  __int128 v12 = *a1;
  __n128 v10 = (__n128)a1[2];
  uint64_t v6 = *((void *)a1 + 6);
  char v7 = *((_BYTE *)a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  uint64_t v8 = a3 + *(int *)(a2 + 40);
  *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  __n128 result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(void *)(v8 + 64) = v6;
  *(_BYTE *)(v8 + 72) = v7;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.sign(strategy:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *a1;
  int v7 = a1[1];
  int v8 = a1[2];
  int v9 = a1[3];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  if (v7) {
    int v11 = 256;
  }
  else {
    int v11 = 0;
  }
  int v12 = v11 | v6;
  if (v8) {
    int v13 = 0x10000;
  }
  else {
    int v13 = 0;
  }
  if (v9) {
    int v14 = 0x1000000;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a3 + *(int *)(a2 + 40) + 74) = v12 | v13 | v14;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.decimalSeparator(strategy:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 40) + 78) = v6;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.rounded(rule:increment:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = a5 + *(int *)(a4 + 40);
  uint64_t v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0LL, 1LL, v14);
  if ((a3 & 1) == 0)
  {
    uint64_t v17 = v11 + *(int *)(v12 + 40);
    *(void *)uint64_t v17 = a2;
    *(_BYTE *)(v17 + 8) = 1;
  }

  return result;
}

uint64_t FloatingPointFormatStyle.Currency.scale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v4, a1);
  uint64_t v9 = a2 + *(int *)(a1 + 40);
  *(double *)uint64_t v9 = a3;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.presentation(_:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 40);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  *(_BYTE *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 40);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  *(_BYTE *)(v7 + *(int *)(result + 48)) = v6;
  return result;
}

void FloatingPointFormatStyle.Currency.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  void *v46;
  void *v47;
  char *v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  uint64_t v59;
  Swift::UInt64 v60;
  Swift::UInt64 v61;
  uint64_t v62;
  int v63;
  Swift::UInt v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  Swift::UInt v68;
  int *v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  void v104[18];
  _BYTE v105[144];
  _BYTE v106[152];
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  Swift::Int v83 = v6;
  uint64_t v84 = v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v82 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
  swift_unknownObjectRetain();
  if ((v14(ObjectType, v12) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v12 + 64))(ObjectType, v12);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 464);
    swift_unknownObjectRetain();
    v16(v104, ObjectType, v12);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v104,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      Swift::UInt8 v15 = 0;
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      uint64_t v18 = 0;
    }

    else
    {
      uint64_t v18 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v18);
    uint64_t v19 = v87;
    uint64_t v80 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16LL;
          --v20;
        }

        while (v20);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89) {
            goto LABEL_15;
          }
          goto LABEL_21;
        }

uint64_t static FloatingPointFormatStyle.Currency.== infix(_:_:)( __int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8 = *a1;
  __int128 v13 = *a2;
  __int128 v14 = v8;
  uint64_t v9 = *((void *)a2 + 3);
  BOOL v10 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == v9;
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0LL;
  }
  uint64_t v11 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, a3, a4, v9);
  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)a1 + *(int *)(v11 + 40),  (char *)a2 + *(int *)(v11 + 40));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointFormatStyle.Currency.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for FloatingPointFormatStyle.Currency.CodingKeys( 255LL,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency.CodingKeys, v5);
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  BOOL v10 = (__int128 *)v13[0];
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v14 = *v10;
  char v15 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v11 = v13[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 2;
    type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int FloatingPointFormatStyle.Currency.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter( a1,  (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Currency.hash(into:));
}

uint64_t FloatingPointFormatStyle.Currency.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v27 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v27);
  uint64_t v26 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for FloatingPointFormatStyle.Currency.CodingKeys(255LL, a2, a3, v8);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency.CodingKeys, v9);
  uint64_t v28 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v25 = *(void *)(v28 - 8);
  MEMORY[0x1895F8858](v28);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v24 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, a2, a3, v12);
  uint64_t v13 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  char v15 = (char *)&v23 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v29 = v11;
  uint64_t v16 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v18 = v24;
  uint64_t v17 = v25;
  uint64_t v30 = v13;
  uint64_t v19 = (uint64_t)v26;
  char v32 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)char v15 = v31;
  LOBYTE(v31) = 1;
  *((void *)v15 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v15 + 3) = v20;
  LOBYTE(v31) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v28);
  outlined init with take of ICUNumberFormatter.Signature( v19,  (uint64_t)&v15[*(int *)(v18 + 40)],  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v21 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v23, v15, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v15, v18);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Currency@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointFormatStyle.Currency.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Currency( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FloatingPointFormatStyle.Currency.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Currency( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Currency.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Currency( __int128 *a1, __int128 *a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Currency.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance FloatingPointFormatStyle<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = FloatingPointFormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance FloatingPointFormatStyle<A>.Percent@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = FloatingPointFormatStyle.Percent.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance FloatingPointFormatStyle<A>.Currency@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = FloatingPointFormatStyle.Currency.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t FloatingPointFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.parseStrategy.getter( a1,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>,  a2);
}

uint64_t FloatingPointFormatStyle.Currency.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a1 - 8);
  __n128 v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (__int128 *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v8 + 16);
  v13(v12, v2, a1, v10);
  ((void (*)(uint64_t, __int128 *, uint64_t))v13)(a2, v12, a1);
  uint64_t v14 = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, a1);
  char v15 = (int *)type metadata accessor for FloatingPointParseStrategy(0LL, a1, v14, *(void *)(a1 + 24));
  *(_BYTE *)(a2 + v15[11]) = 1;
  uint64_t v16 = v15[13];
  __int128 v19 = *v12;
  *(_OWORD *)(a2 + v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v12 + *(int *)(a1 + 40),  (uint64_t)v7,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v17 = *(void (**)(__int128 *, uint64_t))(v8 + 8);
  swift_unknownObjectRetain();
  v17(v12, a1);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v7,  a2 + v15[12],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t FloatingPointFormatStyle.Percent.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.parseStrategy.getter( a1,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent,  a2);
}

uint64_t FloatingPointFormatStyle.parseStrategy.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = (_OWORD *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __n128 v10 = *(void (**)(_OWORD *, __n128))(v9 + 16);
  v10(v8, v6);
  ((void (*)(uint64_t, _OWORD *, uint64_t))v10)(a3, v8, a1);
  uint64_t v11 = MEMORY[0x186E20D4C](a2, a1);
  uint64_t v12 = (int *)type metadata accessor for FloatingPointParseStrategy(0LL, a1, v11, *(void *)(a1 + 24));
  *(_BYTE *)(a3 + v12[11]) = 1;
  *(_OWORD *)(a3 + v12[13]) = *v8;
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8 + *(int *)(a1 + 36),  a3 + v12[12],  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  return swift_storeEnumTagMultiPayload();
}

uint64_t FloatingPointFormatStyle.Attributed.Style.hash(into:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v6, v7, a4);
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  MEMORY[0x1895F8858](v8);
  __n128 v10 = (char *)&v33 - v9;
  uint64_t v12 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v6, v7, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  char v15 = (char *)&v33 - v14;
  uint64_t v17 = type metadata accessor for FloatingPointFormatStyle(0LL, v6, v7, v16);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v33 - v19;
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))(v24, v4, a2, v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v24, v12);
      uint64_t v27 = v36;
      Hasher._combine(_:)(1uLL);
      FloatingPointFormatStyle.Currency.hash(into:)(v27, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }

    else
    {
      uint64_t v31 = v34;
      uint64_t v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v10, v24, v35);
      uint64_t v32 = v36;
      Hasher._combine(_:)(2uLL);
      FloatingPointFormatStyle.hash(into:)(v32, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v10, v30);
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v24, v17);
    uint64_t v29 = v36;
    Hasher._combine(_:)(0LL);
    FloatingPointFormatStyle.hash(into:)(v29, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }

uint64_t static FloatingPointFormatStyle.Attributed.Style.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t v57 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, a3, a4, a4);
  uint64_t v55 = *(void *)(v57 - 8);
  MEMORY[0x1895F8858](v57);
  char v53 = (char *)&v52 - v6;
  uint64_t v58 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, a3, a4, v7);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1895F8858](v58);
  uint64_t v54 = (char *)&v52 - v8;
  uint64_t v10 = type metadata accessor for FloatingPointFormatStyle(0LL, a3, a4, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (__int128 *)((char *)&v52 - v12);
  uint64_t v15 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, a3, a4, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v59 = (char *)&v52 - v20;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v52 - v22;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v61 = *(void *)(TupleTypeMetadata2 - 8);
  __n128 v25 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v27 = (char *)&v52 - v26;
  uint64_t v29 = (char *)&v52 + *(int *)(v28 + 48) - v26;
  uint64_t v60 = v16;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  v30((char *)&v52 - v26, v62, v15, v25);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v29, v63, v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v32 = v59;
      ((void (*)(char *, char *, uint64_t))v30)(v59, v27, v15);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v33 = v56;
        uint64_t v34 = v54;
        uint64_t v35 = v29;
        uint64_t v36 = v58;
        (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v54, v35, v58);
        __int128 v37 = *(_OWORD *)v32;
        __int128 v64 = *(_OWORD *)v34;
        __int128 v65 = v37;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
          && (*((void *)v32 + 2) == *((void *)v34 + 2) && *((void *)v32 + 3) == *((void *)v34 + 3)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( &v32[*(int *)(v36 + 40)],  &v34[*(int *)(v36 + 40)]) & 1) != 0)
        {
          char v38 = *(void (**)(char *, uint64_t))(v33 + 8);
          v38(v34, v36);
          int v39 = v32;
LABEL_16:
          uint64_t v44 = v36;
LABEL_24:
          v38(v39, v44);
          uint64_t v45 = 1LL;
LABEL_29:
          uint64_t v46 = v60;
          goto LABEL_30;
        }

        char v47 = *(void (**)(char *, uint64_t))(v33 + 8);
        v47(v34, v36);
        uint64_t v48 = v32;
LABEL_26:
        uint64_t v50 = v36;
        goto LABEL_28;
      }

      (*(void (**)(char *, uint64_t))(v56 + 8))(v32, v58);
    }

    else
    {
      ((void (*)(char *, char *, uint64_t))v30)(v18, v27, v15);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v40 = v55;
        uint64_t v41 = (__int128 *)v53;
        uint64_t v42 = v29;
        uint64_t v36 = v57;
        (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v53, v42, v57);
        __int128 v43 = *(_OWORD *)v18;
        __int128 v64 = *v41;
        __int128 v65 = v43;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( &v18[*(int *)(v36 + 36)],  (char *)v41 + *(int *)(v36 + 36)) & 1) != 0)
        {
          char v38 = *(void (**)(char *, uint64_t))(v40 + 8);
          v38((char *)v41, v36);
          int v39 = v18;
          goto LABEL_16;
        }

        char v47 = *(void (**)(char *, uint64_t))(v40 + 8);
        v47((char *)v41, v36);
        uint64_t v48 = v18;
        goto LABEL_26;
      }

      (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v57);
    }
  }

  else
  {
    ((void (*)(char *, char *, uint64_t))v30)(v23, v27, v15);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(__int128 *, char *, uint64_t))(v11 + 32))(v13, v29, v10);
      __int128 v49 = *(_OWORD *)v23;
      __int128 v64 = *v13;
      __int128 v65 = v49;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( &v23[*(int *)(v10 + 36)],  (char *)v13 + *(int *)(v10 + 36)) & 1) != 0)
      {
        char v38 = *(void (**)(char *, uint64_t))(v11 + 8);
        v38((char *)v13, v10);
        int v39 = v23;
        uint64_t v44 = v10;
        goto LABEL_24;
      }

      char v47 = *(void (**)(char *, uint64_t))(v11 + 8);
      v47((char *)v13, v10);
      uint64_t v48 = v23;
      uint64_t v50 = v10;
LABEL_28:
      v47(v48, v50);
      uint64_t v45 = 0LL;
      goto LABEL_29;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v23, v10);
  }

  uint64_t v45 = 0LL;
  uint64_t v46 = v61;
  uint64_t v15 = TupleTypeMetadata2;
LABEL_30:
  (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v15);
  return v45;
}

uint64_t FloatingPointFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E6974616F6C66LL && a2 == 0xED0000746E696F50LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x79636E6572727563LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x746E6563726570LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t FloatingPointFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x676E6974616F6C66LL;
  }
  if (a1 == 1) {
    return 0x79636E6572727563LL;
  }
  return 0x746E6563726570LL;
}

uint64_t FloatingPointFormatStyle.Attributed.Style.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v75 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys(255LL, v5, v6, a4);
  uint64_t v66 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys,  v8);
  uint64_t v67 = v8;
  uint64_t v72 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v50 = *(void *)(v72 - 8);
  MEMORY[0x1895F8858](v72);
  uint64_t v70 = (char *)&v49 - v9;
  uint64_t v71 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v5, v6, v10);
  uint64_t v69 = *(void *)(v71 - 8);
  MEMORY[0x1895F8858](v71);
  __int128 v68 = (char *)&v49 - v11;
  uint64_t v13 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys(255LL, v5, v6, v12);
  uint64_t v58 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys,  v13);
  uint64_t v59 = v13;
  uint64_t v65 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v63 = *(void *)(v65 - 8);
  MEMORY[0x1895F8858](v65);
  uint64_t v62 = (char *)&v49 - v14;
  uint64_t v64 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v5, v6, v15);
  uint64_t v61 = *(void *)(v64 - 8);
  MEMORY[0x1895F8858](v64);
  uint64_t v60 = (char *)&v49 - v16;
  uint64_t v18 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys(255LL, v5, v6, v17);
  uint64_t v19 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys,  v18);
  uint64_t v53 = v18;
  uint64_t v52 = v19;
  uint64_t v57 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v51 = *(void *)(v57 - 8);
  MEMORY[0x1895F8858](v57);
  uint64_t v55 = (char *)&v49 - v20;
  uint64_t v56 = type metadata accessor for FloatingPointFormatStyle(0LL, v5, v6, v21);
  uint64_t v54 = *(void *)(v56 - 8);
  MEMORY[0x1895F8858](v56);
  uint64_t v73 = (char *)&v49 - v22;
  uint64_t v23 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CodingKeys(255LL, v5, v6, v27);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys, v28);
  uint64_t v29 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v74 = *(void *)(v29 - 8);
  MEMORY[0x1895F8858](v29);
  uint64_t v31 = (char *)&v49 - v30;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v76, v75);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v33 = v31;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v35 = v60;
      uint64_t v34 = v61;
      uint64_t v36 = v26;
      uint64_t v37 = v64;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v60, v36, v64);
      char v78 = 1;
      char v38 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, v37);
      uint64_t v39 = v65;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v40 = v63;
    }

    else
    {
      uint64_t v35 = v68;
      uint64_t v34 = v69;
      char v47 = v26;
      uint64_t v37 = v71;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v47, v71);
      char v79 = 2;
      char v38 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, v37);
      uint64_t v39 = v72;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v40 = v50;
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v37);
  }

  else
  {
    uint64_t v41 = v51;
    uint64_t v42 = v54;
    __int128 v43 = v26;
    uint64_t v44 = v56;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v73, v43, v56);
    char v77 = 0;
    uint64_t v45 = v55;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>, v44);
    uint64_t v46 = v57;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v31;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v46);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v73, v44);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v33, v29);
}

Swift::Int FloatingPointFormatStyle.Attributed.Style.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t FloatingPointFormatStyle.Attributed.Style.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  int64_t v97 = a5;
  uint64_t v93 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys(255LL, a2, a3, a4);
  uint64_t v91 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys,  v93);
  uint64_t v85 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v84 = *(void *)(v85 - 8);
  MEMORY[0x1895F8858](v85);
  unint64_t v94 = (char *)&v75 - v8;
  uint64_t v10 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys(255LL, a2, a3, v9);
  uint64_t v89 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys,  v10);
  uint64_t v90 = v10;
  uint64_t v83 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v82 = *(void *)(v83 - 8);
  MEMORY[0x1895F8858](v83);
  uint64_t v92 = (char *)&v75 - v11;
  uint64_t v13 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys(255LL, a2, a3, v12);
  uint64_t v14 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys,  v13);
  uint64_t v87 = v13;
  uint64_t v86 = v14;
  uint64_t v81 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1895F8858](v81);
  unint64_t v88 = (char *)&v75 - v15;
  uint64_t v17 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CodingKeys(255LL, a2, a3, v16);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys, v17);
  uint64_t v101 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v96 = *(void *)(v101 - 8);
  MEMORY[0x1895F8858](v101);
  uint64_t v19 = (char *)&v75 - v18;
  uint64_t v98 = a3;
  uint64_t v99 = a2;
  uint64_t v95 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, a2, a3, v20);
  uint64_t v100 = *(void *)(v95 - 8);
  MEMORY[0x1895F8858](v95);
  uint64_t v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v75 - v24;
  MEMORY[0x1895F8858](v26);
  uint64_t v28 = (char *)&v75 - v27;
  MEMORY[0x1895F8858](v29);
  uint64_t v31 = (char *)&v75 - v30;
  uint64_t v32 = a1;
  uint64_t v33 = a1[3];
  uint64_t v102 = v32;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  uint64_t v34 = v103;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v34) {
    goto LABEL_11;
  }
  uint64_t v75 = v28;
  uint64_t v76 = v25;
  char v77 = v22;
  uint64_t v35 = v98;
  char v78 = v31;
  uint64_t v37 = v96;
  uint64_t v36 = v97;
  uint64_t v103 = 0LL;
  char v79 = v19;
  uint64_t v38 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v39 = _ArrayBuffer.requestNativeBuffer()();
  if (!v39)
  {
    uint64_t v108 = v38;
    uint64_t v40 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618488], v40);
    uint64_t v39 = _copyCollectionToContiguousArray<A>(_:)();
  }

  uint64_t v41 = v39;
  swift_bridgeObjectRelease();
  uint64_t v42 = v37;
  uint64_t v43 = v100;
  uint64_t v44 = (2LL * *(void *)(v41 + 16)) | 1;
  uint64_t v104 = v41;
  uint64_t v105 = v41 + 32;
  uint64_t v106 = 0LL;
  unint64_t v107 = v44;
  uint64_t v45 = type metadata accessor for ArraySlice();
  MEMORY[0x186E20D4C](MEMORY[0x189618FA0], v45);
  Collection<>.popFirst()();
  uint64_t v46 = v99;
  if (v108 == 3 || v106 != v107 >> 1)
  {
    uint64_t v56 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v58 = v57;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v58 = v95;
    uint64_t v59 = v101;
    uint64_t v60 = v79;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v56 - 8) + 104LL))( v58,  *MEMORY[0x189619358],  v56);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v60, v59);
LABEL_11:
    uint64_t v61 = (uint64_t)v102;
    return __swift_destroy_boxed_opaque_existential_1(v61);
  }

  if (!(_BYTE)v108)
  {
    LOBYTE(v108) = 0;
    uint64_t v63 = v88;
    uint64_t v48 = v101;
    uint64_t v49 = v79;
    uint64_t v64 = v103;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v64)
    {
      uint64_t v66 = type metadata accessor for FloatingPointFormatStyle(0LL, v46, v35, v65);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>, v66);
      uint64_t v53 = v75;
      uint64_t v67 = v81;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v63, v67);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
      uint64_t v55 = v95;
      goto LABEL_18;
    }

    goto LABEL_16;
  }

  if (v108 != 1)
  {
    LOBYTE(v108) = 2;
    __int128 v68 = v94;
    uint64_t v48 = v101;
    uint64_t v49 = v79;
    uint64_t v69 = v103;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v69)
    {
      uint64_t v71 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v46, v35, v70);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, v71);
      uint64_t v53 = v77;
      uint64_t v72 = v85;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v68, v72);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
      uint64_t v55 = v95;
      goto LABEL_18;
    }

    goto LABEL_16;
  }

  LOBYTE(v108) = 1;
  char v47 = v92;
  uint64_t v48 = v101;
  uint64_t v49 = v79;
  uint64_t v50 = v103;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v50)
  {
LABEL_16:
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v49, v48);
    uint64_t v61 = (uint64_t)v102;
    return __swift_destroy_boxed_opaque_existential_1(v61);
  }

  uint64_t v52 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v46, v35, v51);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, v52);
  uint64_t v53 = v76;
  uint64_t v54 = v83;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v47, v54);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
  uint64_t v55 = v95;
LABEL_18:
  swift_storeEnumTagMultiPayload();
  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  uint64_t v74 = v78;
  v73(v78, v53, v55);
  v73(v36, v74, v55);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return FloatingPointFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = FloatingPointFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Attributed.Style@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return FloatingPointFormatStyle.Attributed.Style.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Attributed.Style( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FloatingPointFormatStyle.Attributed.Style.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Attributed.Style( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Attributed.Style.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Attributed.Style( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Attributed.Style.== infix(_:_:)( a1,  a2,  *(void *)(a3 + 16),  *(void *)(a3 + 24));
}

uint64_t FloatingPointFormatStyle.Attributed.format(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  void (*v77)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  uint64_t *v110;
  _OWORD *v111;
  __int128 v112;
  __int128 v113;
  uint64_t *v114;
  os_unfair_lock_s *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  char v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t *v148;
  _OWORD *v149;
  __int128 v150;
  __int128 v151;
  uint64_t *v152;
  os_unfair_lock_s *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t result;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t *v174;
  unint64_t v175;
  __int128 v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  __int128 v201[3];
  _BYTE v202[104];
  __int128 v203;
  __int128 v204[3];
  __int128 v205[3];
  _OWORD v206[3];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  char *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  char v181 = a1;
  Swift::Int_optional v182 = 0LL;
  uint64_t v170 = a4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v5, v6, a3);
  uint64_t v168 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v167 = (char *)&v163 - v8;
  uint64_t v10 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v5, v6, v9);
  double v165 = *(void *)(v10 - 8);
  uint64_t v166 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v164 = (char *)&v163 - v11;
  uint64_t v179 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v12);
  unint64_t v180 = (char *)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v178 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v178);
  uint64_t v15 = (char *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for FloatingPointFormatStyle(0LL, v5, v6, v16);
  uint64_t v169 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v163 - v18;
  uint64_t v21 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, v5, v6, v20);
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v163 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v163 - v23, v4, v21, v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v19, v24, v17);
    uint64_t v177 = &v19[*(int *)(v17 + 36)];
    uint64_t v72 = *((void *)v19 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t))(v72 + 472);
    swift_unknownObjectRetain();
    uint64_t v75 = v74(ObjectType, v72);
    *(void *)&unint64_t v176 = v76;
    *((void *)&v176 + 1) = v75;
    swift_unknownObjectRelease();
    char v77 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v72 + 464);
    swift_unknownObjectRetain();
    v77(&v193, ObjectType, v72);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)&v193,  (uint64_t)v201,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v177,  (uint64_t)v15,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    char v78 = v178;
    char v79 = &v15[*(int *)(v178 + 20)];
    uint64_t v80 = v176;
    *(void *)char v79 = *((void *)&v176 + 1);
    *((void *)v79 + 1) = v80;
    outlined init with take of LocalePreferences?( (uint64_t)v201,  (uint64_t)&v15[*(int *)(v78 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v81 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v15);
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v15,  type metadata accessor for ICUNumberFormatter.Signature);
    if (v81)
    {
      uint64_t v167 = v19;
      uint64_t v168 = v17;
      uint64_t v82 = (uint64_t)v180;
      (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v180, v181, v5);
      *(double *)&uint64_t v83 = specialized BinaryFloatingPoint.init<A>(_:)(v82, v5, v6);
      ICUNumberFormatterBase.attributedFormatPositions(_:)(v83, 0LL, 0x100000000LL);
      *((void *)&v176 + 1) = v86;
      if (v86)
      {
        uint64_t v87 = v84;
        unint64_t v88 = v85;
        swift_bridgeObjectRetain();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v204, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v193);
        uint64_t v89 = v193;
        uint64_t v90 = *(void *)(v88 + 16);
        if (v90)
        {
          *(void *)&unint64_t v176 = v87;
          uint64_t v166 = v81;
          uint64_t v173 = (char *)&v184 + 8;
          char v174 = &v198;
          swift_bridgeObjectRetain();
          char v175 = lazy protocol witness table accessor for type String and conformance String();
          double v165 = v88;
          uint64_t v91 = v88 + 48;
          do
          {
            char v181 = v91;
            Swift::Int_optional v182 = v90;
            uint64_t v92 = *(_DWORD *)(v91 - 16);
            uint64_t v93 = v176;
            Swift::Int_optional v184 = v176;
            swift_bridgeObjectRetain();
            unint64_t v94 = String.Index.init<A>(utf16Offset:in:)();
            Swift::Int_optional v184 = v93;
            swift_bridgeObjectRetain();
            uint64_t v95 = String.Index.init<A>(utf16Offset:in:)();
            if (v95 >> 14 < v94 >> 14) {
              goto LABEL_83;
            }
            uint64_t v96 = v95;
            swift_retain();
            specialized Range<>.init<A>(_range:in:)(v94, v96, (_OWORD *)v89, (unint64_t *)&v184);
            int64_t v97 = v186;
            if (v186 == 2) {
              goto LABEL_89;
            }
            BOOL v178 = *((void *)&v184 + 1);
            uint64_t v179 = v184;
            uint64_t v177 = (char *)v185;
            uint64_t v98 = v187;
            uint64_t v99 = v188;
            uint64_t v100 = v189;
            unint64_t v180 = v190;
            unint64_t v203 = MEMORY[0x18961AFF0];
            uint64_t v101 = 0;
            uint64_t v102 = 2;
            switch(v92)
            {
              case 0:
                goto LABEL_33;
              case 1:
                uint64_t v101 = 1;
LABEL_33:
                specialized AttributeContainer.subscript.setter(v101);
                break;
              case 2:
                goto LABEL_38;
              case 6:
                uint64_t v102 = 0;
                goto LABEL_38;
              case 7:
                uint64_t v102 = 3;
                goto LABEL_38;
              case 8:
                uint64_t v102 = 4;
                goto LABEL_38;
              case 10:
                uint64_t v102 = 1;
LABEL_38:
                specialized AttributeContainer.subscript.setter(v102);
                break;
              default:
                break;
            }

            uint64_t v192 = v203;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t v103 = *(_OWORD *)(v89 + 32);
              Swift::Int_optional v215 = *(_OWORD *)(v89 + 16);
              uint64_t v216 = v103;
              int64_t v217 = *(_OWORD *)(v89 + 48);
              uint64_t v105 = *(void *)(v89 + 64);
              uint64_t v104 = *(void *)(v89 + 72);
              uint64_t v106 = *(void *)(v89 + 80);
              uint64_t v171 = *(void *)(v89 + 88);
              uint64_t v172 = v104;
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)&v215);
              swift_unknownObjectRetain();
              unint64_t v107 = AttributedString.Guts.init(string:runs:)(&v215, v105, v172, v106, v171);
              swift_release();
              uint64_t v89 = v107;
            }

            uint64_t v108 = v180;
            uint64_t v109 = *(_OWORD *)(v89 + 32);
            unint64_t v212 = *(_OWORD *)(v89 + 16);
            unint64_t v213 = v109;
            unint64_t v214 = *(_OWORD *)(v89 + 48);
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            *(void *)&Swift::UInt v207 = v179;
            *((void *)&v207 + 1) = v178;
            *(void *)&int64_t v208 = v177;
            *((void *)&v208 + 1) = v97;
            *(void *)&Swift::UInt v209 = v98;
            *((void *)&v209 + 1) = v99;
            Swift::UInt v210 = v100;
            unint64_t v211 = v108;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)v205);
            outlined release of Locale((uint64_t)&v193);
            uint64_t v111 = v173;
            uint64_t v110 = v174;
            uint64_t v112 = *((_OWORD *)v174 + 1);
            *(_OWORD *)uint64_t v173 = *(_OWORD *)v174;
            v111[1] = v112;
            double v113 = *((_OWORD *)v110 + 3);
            v111[2] = *((_OWORD *)v110 + 2);
            v111[3] = v113;
            *(void *)&Swift::Int_optional v184 = v89;
            if (one-time initialization token for currentIdentity != -1) {
              swift_once();
            }
            uint64_t v114 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            uint64_t v115 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v115);
            closure #1 in static AttributedString._nextModifyIdentity.getter(v114, &v183);
            os_unfair_lock_unlock(v115);
            swift_release();
            uint64_t v116 = v183;
            uint64_t v191 = v183;
            BigString.init()();
            Swift::Int_optional v183 = 0LL;
            MEMORY[0x186E20E78](&v183, 8LL);
            char v117 = v183;
            type metadata accessor for AttributedString.Guts();
            unint64_t v118 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0) {
              goto LABEL_86;
            }
            uint64_t v119 = v206[1];
            *(_OWORD *)(v118 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v206[0];
            *(_OWORD *)(v118 + 32) = v119;
            *(_OWORD *)(v118 + 48) = v206[2];
            *(void *)(v118 + 64) = 0LL;
            *(void *)(v118 + 72) = 0LL;
            *(void *)(v118 + 80) = 0LL;
            *(void *)(v118 + 88) = v117;
            swift_release();
            LOBYTE(v183) = 0;
            AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v192, (char *)&v183);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v191 != v116) {
              goto LABEL_91;
            }
            uint64_t v91 = v181 + 24;
            uint64_t v89 = v184;
            swift_release();
            uint64_t v90 = v182 - 1;
          }

          while (v182 != 1);
          swift_bridgeObjectRelease();
        }

        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        Double.description.getter();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(&v193, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v184);
        swift_release();
        uint64_t v89 = v184;
      }

      uint64_t v160 = v169;
      unint64_t v161 = v167;
      int64_t v162 = v168;
      *uint64_t v170 = v89;
      return (*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v161, v162);
    }

    (*(void (**)(char *, uint64_t))(v169 + 8))(v19, v17);
LABEL_71:
    uint64_t v158 = (uint64_t)v180;
    (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v180, v181, v5);
    specialized BinaryFloatingPoint.init<A>(_:)(v158, v5, v6);
    Double.description.getter();
    BigString.init(_:)();
    uint64_t result = AttributedString.init(_:attributes:)(v201, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v193);
    *uint64_t v170 = v193;
    return result;
  }

  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v28 = v167;
    uint64_t v27 = v168;
    (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v167, v24, v7);
    type metadata accessor for ICUPercentNumberFormatter();
    BOOL v120 = static ICUPercentNumberFormatter.create<A>(for:)((uint64_t)v28, v5, v6);
    if (v120)
    {
      Swift::UInt v121 = v120;
      char v122 = (uint64_t)v180;
      (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v180, v181, v5);
      *(double *)&char v123 = specialized BinaryFloatingPoint.init<A>(_:)(v122, v5, v6);
      ICUNumberFormatterBase.attributedFormatPositions(_:)(v123, 0LL, 0x100000000LL);
      *((void *)&v176 + 1) = v126;
      if (v126)
      {
        uint64_t v127 = v124;
        uint64_t v128 = v125;
        swift_bridgeObjectRetain();
        *(void *)&unint64_t v176 = v127;
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v205, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v201);
        uint64_t v129 = *(void *)&v201[0];
        if (*(void *)(v128 + 16))
        {
          char v181 = *(void *)(v128 + 16);
          uint64_t v166 = v121;
          uint64_t v169 = v7;
          uint64_t v173 = (char *)&v193 + 8;
          char v174 = (uint64_t *)v202;
          swift_bridgeObjectRetain();
          char v175 = lazy protocol witness table accessor for type String and conformance String();
          double v165 = v128;
          unint64_t v130 = v128 + 48;
          do
          {
            int64_t v131 = *(_DWORD *)(v130 - 16);
            Swift::Int_optional v182 = v130;
            uint64_t v132 = v176;
            unint64_t v193 = v176;
            swift_bridgeObjectRetain();
            uint64_t v133 = String.Index.init<A>(utf16Offset:in:)();
            unint64_t v193 = v132;
            swift_bridgeObjectRetain();
            unint64_t v134 = String.Index.init<A>(utf16Offset:in:)();
            if (v134 >> 14 < v133 >> 14) {
              goto LABEL_84;
            }
            unint64_t v135 = v134;
            swift_retain();
            specialized Range<>.init<A>(_range:in:)(v133, v135, (_OWORD *)v129, (unint64_t *)&v193);
            uint64_t v136 = v195;
            if (v195 == 2) {
              goto LABEL_90;
            }
            BOOL v178 = *((void *)&v193 + 1);
            uint64_t v179 = v193;
            uint64_t v177 = (char *)v194;
            uint64_t v137 = v196;
            uint64_t v138 = v197;
            uint64_t v139 = v198;
            unint64_t v180 = v199;
            v204[0] = MEMORY[0x18961AFF0];
            __int128 v140 = 0;
            uint64_t v141 = 2;
            switch(v131)
            {
              case 0:
                goto LABEL_55;
              case 1:
                __int128 v140 = 1;
LABEL_55:
                specialized AttributeContainer.subscript.setter(v140);
                break;
              case 2:
                goto LABEL_60;
              case 6:
                uint64_t v141 = 0;
                goto LABEL_60;
              case 7:
                uint64_t v141 = 3;
                goto LABEL_60;
              case 8:
                uint64_t v141 = 4;
                goto LABEL_60;
              case 10:
                uint64_t v141 = 1;
LABEL_60:
                specialized AttributeContainer.subscript.setter(v141);
                break;
              default:
                break;
            }

            unint64_t v203 = v204[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              unint64_t v142 = *(_OWORD *)(v129 + 32);
              Swift::UInt v207 = *(_OWORD *)(v129 + 16);
              int64_t v208 = v142;
              Swift::UInt v209 = *(_OWORD *)(v129 + 48);
              uint64_t v144 = *(void *)(v129 + 64);
              int64_t v143 = *(void *)(v129 + 72);
              uint64_t v145 = *(void *)(v129 + 88);
              uint64_t v171 = *(void *)(v129 + 80);
              uint64_t v172 = v143;
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)&v207);
              swift_unknownObjectRetain();
              uint64_t v146 = AttributedString.Guts.init(string:runs:)(&v207, v144, v172, v171, v145);
              swift_release();
              uint64_t v129 = v146;
            }

            uint64_t v147 = *(_OWORD *)(v129 + 32);
            Swift::Int_optional v215 = *(_OWORD *)(v129 + 16);
            uint64_t v216 = v147;
            int64_t v217 = *(_OWORD *)(v129 + 48);
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            *(void *)&Swift::Int_optional v184 = v179;
            *((void *)&v184 + 1) = v178;
            uint64_t v185 = (uint64_t)v177;
            uint64_t v186 = v136;
            uint64_t v187 = v137;
            uint64_t v188 = v138;
            unint64_t v189 = v139;
            int64_t v190 = v180;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)v206);
            outlined release of Locale((uint64_t)v201);
            int64_t v149 = v173;
            unint64_t v148 = v174;
            uint64_t v150 = *((_OWORD *)v174 + 1);
            *(_OWORD *)uint64_t v173 = *(_OWORD *)v174;
            v149[1] = v150;
            uint64_t v151 = *((_OWORD *)v148 + 3);
            v149[2] = *((_OWORD *)v148 + 2);
            v149[3] = v151;
            *(void *)&unint64_t v193 = v129;
            if (one-time initialization token for currentIdentity != -1) {
              swift_once();
            }
            unint64_t v152 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            unint64_t v153 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v153);
            closure #1 in static AttributedString._nextModifyIdentity.getter(v152, (uint64_t *)&v192);
            os_unfair_lock_unlock(v153);
            swift_release();
            unint64_t v154 = v192;
            uint64_t v200 = v192;
            BigString.init()();
            *(void *)&uint64_t v192 = 0LL;
            MEMORY[0x186E20E78](&v192, 8LL);
            uint64_t v155 = v192;
            type metadata accessor for AttributedString.Guts();
            Swift::Int v156 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0) {
              goto LABEL_87;
            }
            uint64_t v157 = v213;
            *(_OWORD *)(v156 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v212;
            *(_OWORD *)(v156 + 32) = v157;
            *(_OWORD *)(v156 + 48) = v214;
            *(void *)(v156 + 64) = 0LL;
            *(void *)(v156 + 72) = 0LL;
            *(void *)(v156 + 80) = 0LL;
            *(void *)(v156 + 88) = v155;
            swift_release();
            LOBYTE(v192) = 0;
            AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v203, (char *)&v192);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v200 != v154) {
              goto LABEL_91;
            }
            unint64_t v130 = v182 + 24;
            uint64_t v129 = v193;
            swift_release();
            --v181;
          }

          while (v181);
          swift_bridgeObjectRelease();
          uint64_t v27 = v168;
          uint64_t v7 = v169;
          uint64_t v28 = v167;
        }

        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        Double.description.getter();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v201, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v193);
        swift_release();
        uint64_t v129 = v193;
      }

      *uint64_t v170 = v129;
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v28, v7);
    }

    goto LABEL_69;
  }

  uint64_t v28 = v164;
  uint64_t v27 = v165;
  uint64_t v7 = v166;
  (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v164, v24, v166);
  type metadata accessor for ICUCurrencyNumberFormatter();
  uint64_t v29 = static ICUCurrencyNumberFormatter.create<A>(for:)(v28, v5, v6);
  if (!v29)
  {
LABEL_69:
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v7);
    goto LABEL_71;
  }

  uint64_t v30 = v29;
  uint64_t v31 = (uint64_t)v180;
  (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v180, v181, v5);
  *(double *)&uint64_t v32 = specialized BinaryFloatingPoint.init<A>(_:)(v31, v5, v6);
  ICUNumberFormatterBase.attributedFormatPositions(_:)(v32, 0LL, 0x100000000LL);
  if (!v34)
  {
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v201, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v193);
    swift_release();
    uint64_t v39 = v193;
    goto LABEL_76;
  }

  uint64_t v36 = v33;
  uint64_t v37 = v34;
  uint64_t v38 = v35;
  swift_bridgeObjectRetain();
  *(void *)&unint64_t v176 = v36;
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v205, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v201);
  uint64_t v39 = *(void *)&v201[0];
  if (!*(void *)(v38 + 16)) {
    goto LABEL_72;
  }
  char v181 = *(void *)(v38 + 16);
  *((void *)&v176 + 1) = v37;
  uint64_t v169 = v30;
  uint64_t v173 = (char *)&v193 + 8;
  char v174 = (uint64_t *)v202;
  swift_bridgeObjectRetain();
  char v175 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v168 = v38;
  uint64_t v40 = (char *)(v38 + 48);
  do
  {
    int v41 = *((_DWORD *)v40 - 4);
    unint64_t v180 = v40;
    __int128 v42 = v176;
    unint64_t v193 = v176;
    swift_bridgeObjectRetain();
    unint64_t v43 = String.Index.init<A>(utf16Offset:in:)();
    unint64_t v193 = v42;
    swift_bridgeObjectRetain();
    unint64_t v44 = String.Index.init<A>(utf16Offset:in:)();
    if (v44 >> 14 < v43 >> 14)
    {
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x183385BA4LL);
    }

    unint64_t v45 = v44;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v43, v45, (_OWORD *)v39, (unint64_t *)&v193);
    uint64_t v46 = v195;
    if (v195 == 2) {
      goto LABEL_88;
    }
    uint64_t v47 = *((void *)&v193 + 1);
    uint64_t v179 = v194;
    uint64_t v48 = v197;
    uint64_t v177 = (char *)v193;
    BOOL v178 = v196;
    uint64_t v50 = v198;
    uint64_t v49 = v199;
    v204[0] = MEMORY[0x18961AFF0];
    char v51 = 0;
    char v52 = 2;
    switch(v41)
    {
      case 0:
        goto LABEL_11;
      case 1:
        char v51 = 1;
LABEL_11:
        specialized AttributeContainer.subscript.setter(v51);
        break;
      case 2:
        goto LABEL_16;
      case 6:
        char v52 = 0;
        goto LABEL_16;
      case 7:
        char v52 = 3;
        goto LABEL_16;
      case 8:
        char v52 = 4;
        goto LABEL_16;
      case 10:
        char v52 = 1;
LABEL_16:
        specialized AttributeContainer.subscript.setter(v52);
        break;
      default:
        break;
    }

    unint64_t v203 = v204[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int128 v53 = *(_OWORD *)(v39 + 32);
      Swift::UInt v207 = *(_OWORD *)(v39 + 16);
      int64_t v208 = v53;
      Swift::UInt v209 = *(_OWORD *)(v39 + 48);
      uint64_t v172 = v47;
      uint64_t v54 = *(void *)(v39 + 64);
      uint64_t v55 = *(void *)(v39 + 72);
      uint64_t v56 = *(void *)(v39 + 80);
      uint64_t v171 = *(void *)(v39 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v207);
      swift_unknownObjectRetain();
      uint64_t v57 = v55;
      uint64_t v47 = v172;
      uint64_t v58 = AttributedString.Guts.init(string:runs:)(&v207, v54, v57, v56, v171);
      swift_release();
      uint64_t v39 = v58;
    }

    uint64_t v59 = v179;
    __int128 v60 = *(_OWORD *)(v39 + 32);
    Swift::Int_optional v215 = *(_OWORD *)(v39 + 16);
    uint64_t v216 = v60;
    int64_t v217 = *(_OWORD *)(v39 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    *(void *)&Swift::Int_optional v184 = v177;
    *((void *)&v184 + 1) = v47;
    uint64_t v185 = v59;
    uint64_t v186 = v46;
    uint64_t v187 = v178;
    uint64_t v188 = v48;
    unint64_t v189 = v50;
    int64_t v190 = v49;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v206);
    outlined release of Locale((uint64_t)v201);
    uint64_t v62 = v173;
    uint64_t v61 = v174;
    __int128 v63 = *((_OWORD *)v174 + 1);
    *(_OWORD *)uint64_t v173 = *(_OWORD *)v174;
    v62[1] = v63;
    __int128 v64 = *((_OWORD *)v61 + 3);
    v62[2] = *((_OWORD *)v61 + 2);
    v62[3] = v64;
    *(void *)&unint64_t v193 = v39;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v65 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v66 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v66);
    uint64_t v67 = v182;
    closure #1 in static AttributedString._nextModifyIdentity.getter(v65, (uint64_t *)&v192);
    Swift::Int_optional v182 = v67;
    os_unfair_lock_unlock(v66);
    swift_release();
    uint64_t v68 = v192;
    uint64_t v200 = v192;
    BigString.init()();
    *(void *)&uint64_t v192 = 0LL;
    MEMORY[0x186E20E78](&v192, 8LL);
    uint64_t v69 = v192;
    type metadata accessor for AttributedString.Guts();
    uint64_t v70 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_85;
    }
    __int128 v71 = v213;
    *(_OWORD *)(v70 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v212;
    *(_OWORD *)(v70 + 32) = v71;
    *(_OWORD *)(v70 + 48) = v214;
    *(void *)(v70 + 64) = 0LL;
    *(void *)(v70 + 72) = 0LL;
    *(void *)(v70 + 80) = 0LL;
    *(void *)(v70 + 88) = v69;
    swift_release();
    LOBYTE(v192) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v203, (char *)&v192);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v200 != v68) {
      goto LABEL_91;
    }
    uint64_t v40 = v180 + 24;
    uint64_t v39 = v193;
    swift_release();
    --v181;
  }

  while (v181);
  swift_bridgeObjectRelease();
  uint64_t v27 = v165;
  uint64_t v7 = v166;
  uint64_t v28 = v164;
LABEL_72:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_76:
  *uint64_t v170 = v39;
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v28, v7);
}

uint64_t FloatingPointFormatStyle.Attributed.locale(_:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v7, v8, a3);
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v47 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (uint64_t *)((char *)&v42 - v10);
  uint64_t v13 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v7, v8, v12);
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (uint64_t *)((char *)&v42 - v14);
  uint64_t v17 = type metadata accessor for FloatingPointFormatStyle(0LL, v7, v8, v16);
  uint64_t v42 = *(void *)(v17 - 8);
  uint64_t v43 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (uint64_t *)((char *)&v42 - v18);
  uint64_t v21 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, v7, v8, v20);
  uint64_t v22 = *(void *)(v21 - 8);
  __n128 v23 = MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v42 - v24;
  uint64_t v27 = *a1;
  uint64_t v26 = a1[1];
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(a2 - 8) + 16LL);
  uint64_t v49 = a4;
  uint64_t v29 = a4;
  uint64_t v30 = v48;
  v28(v29, v48, a2, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v30, v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v33 = v44;
      uint64_t v32 = v45;
      (*(void (**)(void *, char *, uint64_t))(v44 + 32))(v15, v25, v45);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v15 = v27;
      v15[1] = v26;
      uint64_t v34 = v49;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
      (*(void (**)(uint64_t, void *, uint64_t))(v33 + 16))(v34, v15, v32);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, uint64_t))(v33 + 8))(v15, v32);
    }

    else
    {
      uint64_t v40 = v46;
      uint64_t v39 = v47;
      (*(void (**)(void *, char *, uint64_t))(v46 + 32))(v11, v25, v47);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v11 = v27;
      v11[1] = v26;
      uint64_t v41 = v49;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
      (*(void (**)(uint64_t, void *, uint64_t))(v40 + 16))(v41, v11, v39);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, uint64_t))(v40 + 8))(v11, v39);
    }
  }

  else
  {
    uint64_t v37 = v42;
    uint64_t v36 = v43;
    (*(void (**)(void *, char *, uint64_t))(v42 + 32))(v19, v25, v43);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v19 = v27;
    v19[1] = v26;
    uint64_t v38 = v49;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
    (*(void (**)(uint64_t, void *, uint64_t))(v37 + 16))(v38, v19, v36);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, uint64_t))(v37 + 8))(v19, v36);
  }

uint64_t FloatingPointFormatStyle.Attributed.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v5, v6, a4);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v11 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v5, v6, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v16 = type metadata accessor for FloatingPointFormatStyle(0LL, v5, v6, v15);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v21 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, v5, v6, v20);
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v33 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v33 - v23, v4, v21, v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v24, v11);
      uint64_t v27 = v36;
      Hasher._combine(_:)(1uLL);
      FloatingPointFormatStyle.Currency.hash(into:)(v27, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }

    else
    {
      uint64_t v31 = v34;
      uint64_t v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v9, v24, v35);
      uint64_t v32 = v36;
      Hasher._combine(_:)(2uLL);
      FloatingPointFormatStyle.hash(into:)(v32, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v30);
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v24, v16);
    uint64_t v29 = v36;
    Hasher._combine(_:)(0LL);
    FloatingPointFormatStyle.hash(into:)(v29, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointFormatStyle.Attributed.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for FloatingPointFormatStyle.Attributed.CodingKeys(255LL, v5, v6, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.CodingKeys, v7);
  uint64_t v8 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v14 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v14 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v12 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, v5, v6, v11);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style, v12);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v8);
}

Swift::Int FloatingPointFormatStyle.Attributed.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter( a1,  (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Attributed.hash(into:));
}

uint64_t FloatingPointFormatStyle.Attributed.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, a2, a3, a4);
  uint64_t v27 = *(void *)(v29 - 8);
  MEMORY[0x1895F8858](v29);
  uint64_t v30 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for FloatingPointFormatStyle.Attributed.CodingKeys(255LL, a2, a3, v9);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.CodingKeys, v10);
  uint64_t v31 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v25 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](v31);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v24 = type metadata accessor for FloatingPointFormatStyle.Attributed(0LL, a2, a3, v13);
  uint64_t v14 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v16 = (char *)&v24 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v26 = v12;
  uint64_t v17 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    uint64_t v32 = v14;
    uint64_t v18 = v25;
    uint64_t v20 = v27;
    uint64_t v19 = v28;
    uint64_t v21 = v29;
    MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style, v29);
    __n128 v22 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v31);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v16, v30, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v19, v16, v24);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Attributed@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return FloatingPointFormatStyle.Attributed.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Attributed( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FloatingPointFormatStyle.Attributed.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Attributed( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Attributed.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Attributed( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Attributed.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t FloatingPointFormatStyle.consuming(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance FloatingPointFormatStyle<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance FloatingPointFormatStyle<A>( uint64_t a1)
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t FloatingPointFormatStyle.Percent.consuming(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 1, a7);
}

uint64_t FloatingPointFormatStyle.consuming(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W7>, uint64_t *a8@<X8>)
{
  int v39 = a7;
  uint64_t v37 = a1;
  uint64_t v41 = a4;
  unint64_t v42 = a5;
  unint64_t v40 = a3;
  uint64_t v38 = a2;
  uint64_t v43 = a8;
  uint64_t v9 = *(void *)(a6 - 8);
  __n128 v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (_OWORD *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = MEMORY[0x186E20D4C](v14, v13, v10);
  uint64_t v16 = (int *)type metadata accessor for FloatingPointParseStrategy(0LL, a6, v15, *(void *)(a6 + 24));
  uint64_t v17 = *((void *)v16 - 1);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v20 = *(void *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v34 = *(void *)(v22 - 8);
  uint64_t v35 = v22;
  __n128 v23 = MEMORY[0x1895F8858](v22);
  uint64_t v25 = (uint64_t *)((char *)&v34 - v24);
  uint64_t v26 = *(void (**)(_OWORD *, uint64_t, uint64_t, __n128))(v9 + 16);
  v26(v12, v36, a6, v23);
  ((void (*)(char *, _OWORD *, uint64_t))v26)(v19, v12, a6);
  v19[v16[11]] = 0;
  *(_OWORD *)&v19[v16[13]] = *v12;
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v12 + *(int *)(a6 + 36),  (uint64_t)&v19[v16[12]],  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  swift_storeEnumTagMultiPayload();
  FloatingPointParseStrategy.parse(_:startingAt:in:)(v37, v38, v40, v42, v16, v25);
  (*(void (**)(char *, int *))(v17 + 8))(v19, v16);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v25,  1LL,  TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v25, v35);
    uint64_t v27 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))( v43,  1LL,  1LL,  v27);
  }

  else
  {
    uint64_t v29 = *v25;
    uint64_t v30 = (char *)v25 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v31 = swift_getTupleTypeMetadata2();
    uint64_t v32 = v43;
    uint64_t v33 = (char *)v43 + *(int *)(v31 + 48);
    *uint64_t v43 = v29;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v33, v30, v20);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))( v32,  0LL,  1LL,  v31);
  }

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance FloatingPointFormatStyle<A>.Percent@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.Percent.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance FloatingPointFormatStyle<A>.Percent( uint64_t a1)
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t FloatingPointFormatStyle.Currency.consuming(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v49 = a4;
  unint64_t v50 = a5;
  unint64_t v48 = a3;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  char v51 = a7;
  uint64_t v44 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v44);
  uint64_t v41 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a6 - 8);
  __n128 v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (__int128 *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, a6, v11);
  uint64_t v15 = (int *)type metadata accessor for FloatingPointParseStrategy(0LL, a6, v14, *(void *)(a6 + 24));
  uint64_t v42 = *((void *)v15 - 1);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v47 = *(void *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v39 = *(void *)(v22 - 8);
  uint64_t v40 = v22;
  __n128 v23 = MEMORY[0x1895F8858](v22);
  uint64_t v25 = (uint64_t *)((char *)&v39 - v24);
  uint64_t v26 = *(void (**)(char *, __int128 *, uint64_t))(v9 + 16);
  ((void (*)(__int128 *, void, uint64_t, __n128))v26)(v13, v43, a6, v23);
  v26(v17, v13, a6);
  v17[v15[11]] = 0;
  uint64_t v27 = v15[13];
  __int128 v43 = *v13;
  *(_OWORD *)&v17[v27] = v43;
  uint64_t v28 = v41;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v13 + *(int *)(a6 + 40),  v41,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v29 = *(void (**)(__int128 *, uint64_t))(v9 + 8);
  swift_unknownObjectRetain();
  v29(v13, a6);
  swift_storeEnumTagMultiPayload();
  outlined init with take of ICUNumberFormatter.Signature( v28,  (uint64_t)&v17[v15[12]],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t v30 = v42;
  (*(void (**)(char *, char *, int *))(v42 + 32))(v20, v17, v15);
  FloatingPointParseStrategy.parse(_:startingAt:in:)(v45, v46, v48, v50, v15, v25);
  (*(void (**)(char *, int *))(v30 + 8))(v20, v15);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v25,  1LL,  TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v25, v40);
    uint64_t v31 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))( v51,  1LL,  1LL,  v31);
  }

  else
  {
    uint64_t v33 = *v25;
    uint64_t v34 = (char *)v25 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v35 = v47;
    uint64_t v36 = swift_getTupleTypeMetadata2();
    uint64_t v37 = v51;
    uint64_t v38 = (char *)v51 + *(int *)(v36 + 48);
    *char v51 = v33;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32LL))(v38, v34, v35);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))( v37,  0LL,  1LL,  v36);
  }

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance FloatingPointFormatStyle<A>.Currency@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.Currency.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance FloatingPointFormatStyle<A>.Currency( uint64_t a1)
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.localizedDouble(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)a2
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((void *)v4 + 6) = 0LL;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __int128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0LL;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedDoublePercentage(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)a2
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __int128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  *(void *)uint64_t v4 = 0x4059000000000000LL;
  v4[8] = 0;
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((void *)v4 + 6) = 0LL;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0LL;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for FloatingPointFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.CodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Percent( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Percent);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Percent.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Percent.CodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Currency( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Currency);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Currency.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Currency.CodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.CodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>()
{
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Percent()
{
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Currency()
{
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Percent( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Currency( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency);
}

void associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in FloatingPointFormatStyle<A>()
{
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Currency( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Percent( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
  *(void *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed()
{
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Attributed( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed);
}

void base witness table accessor for RegexComponent in FloatingPointFormatStyle<A>()
{
}

void base witness table accessor for RegexComponent in FloatingPointFormatStyle<A>.Percent()
{
}

void base witness table accessor for RegexComponent in FloatingPointFormatStyle<A>.Currency()
{
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for FloatingPointFormatStyle()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle.Percent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Percent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for FloatingPointFormatStyle.Currency()
{
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle.Currency()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1833871A4(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 40)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Currency()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18338722C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 40)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for FloatingPointFormatStyle.Attributed( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for FloatingPointFormatStyle.Attributed.Style( 319LL,  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FloatingPointFormatStyle.Attributed( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  if ((v8 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v24 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v7, v6, v10) + 36);
      uint64_t v25 = a1 + v24;
      uint64_t v26 = (uint64_t)a2 + v24;
      *(void *)uint64_t v25 = *(uint64_t *)((char *)a2 + v24);
      *(_BYTE *)(v25 + 8) = *((_BYTE *)a2 + v24 + 8);
      __int128 v27 = *(_OWORD *)((char *)a2 + v24 + 32);
      *(_OWORD *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v24 + 16);
      *(_OWORD *)(v25 + 32) = v27;
      *(_OWORD *)(v25 + 48) = *(_OWORD *)((char *)a2 + v24 + 48);
      *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v24 + 57);
      *(_BYTE *)(v25 + 73) = *((_BYTE *)a2 + v24 + 73);
      *(_WORD *)(v25 + 74) = *(_WORD *)((char *)a2 + v24 + 74);
      *(_BYTE *)(v25 + 76) = *((_BYTE *)a2 + v24 + 76);
      *(_BYTE *)(v25 + 77) = *((_BYTE *)a2 + v24 + 77);
      uint64_t v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v29 = v28[9];
      uint64_t v30 = (void *)(v25 + v29);
      uint64_t v31 = (const void *)(v26 + v29);
      uint64_t v32 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
      swift_unknownObjectRetain();
      if (v34(v31, 1LL, v32))
      {
LABEL_10:
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v30, v31, *(void *)(*(void *)(v39 - 8) + 64LL));
LABEL_14:
        uint64_t v43 = v28[10];
        uint64_t v44 = v25 + v43;
        uint64_t v45 = v26 + v43;
        *(void *)uint64_t v44 = *(void *)v45;
        *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
        *(_BYTE *)(v25 + v28[11]) = *(_BYTE *)(v26 + v28[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v11 = a2[3];
        *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2[2];
        *(void *)(a1 + 24) = v11;
        uint64_t v12 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v7, v6, v10) + 40);
        uint64_t v13 = a1 + v12;
        uint64_t v14 = (uint64_t)a2 + v12;
        *(void *)uint64_t v13 = *(uint64_t *)((char *)a2 + v12);
        *(_BYTE *)(v13 + 8) = *((_BYTE *)a2 + v12 + 8);
        __int128 v15 = *(_OWORD *)((char *)a2 + v12 + 32);
        *(_OWORD *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v12 + 16);
        *(_OWORD *)(v13 + 32) = v15;
        *(_OWORD *)(v13 + 48) = *(_OWORD *)((char *)a2 + v12 + 48);
        *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)a2 + v12 + 57);
        *(_BYTE *)(v13 + 73) = *((_BYTE *)a2 + v12 + 73);
        *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)a2 + v12 + 74);
        *(_BYTE *)(v13 + 78) = *((_BYTE *)a2 + v12 + 78);
        uint64_t v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v17 = v16[9];
        __int128 __dst = (void *)(v13 + v17);
        uint64_t v18 = (const void *)(v14 + v17);
        uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v20 = *(void *)(v19 - 8);
        uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v21(v18, 1LL, v19))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(__dst, v18, v19);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0LL, 1LL, v19);
        }

        uint64_t v40 = v16[10];
        uint64_t v41 = v13 + v40;
        uint64_t v42 = v14 + v40;
        *(void *)uint64_t v41 = *(void *)v42;
        *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
        *(_BYTE *)(v13 + v16[11]) = *(_BYTE *)(v14 + v16[11]);
        *(_BYTE *)(v13 + v16[12]) = *(_BYTE *)(v14 + v16[12]);
        goto LABEL_15;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v35 = *(int *)(type metadata accessor for FloatingPointFormatStyle(0LL, v7, v6, v10) + 36);
      uint64_t v25 = a1 + v35;
      uint64_t v26 = (uint64_t)a2 + v35;
      *(void *)uint64_t v25 = *(uint64_t *)((char *)a2 + v35);
      *(_BYTE *)(v25 + 8) = *((_BYTE *)a2 + v35 + 8);
      __int128 v36 = *(_OWORD *)((char *)a2 + v35 + 32);
      *(_OWORD *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v35 + 16);
      *(_OWORD *)(v25 + 32) = v36;
      *(_OWORD *)(v25 + 48) = *(_OWORD *)((char *)a2 + v35 + 48);
      *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v35 + 57);
      *(_BYTE *)(v25 + 73) = *((_BYTE *)a2 + v35 + 73);
      *(_WORD *)(v25 + 74) = *(_WORD *)((char *)a2 + v35 + 74);
      *(_BYTE *)(v25 + 76) = *((_BYTE *)a2 + v35 + 76);
      *(_BYTE *)(v25 + 77) = *((_BYTE *)a2 + v35 + 77);
      uint64_t v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v37 = v28[9];
      uint64_t v30 = (void *)(v25 + v37);
      uint64_t v31 = (const void *)(v26 + v37);
      uint64_t v32 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
      swift_unknownObjectRetain();
      if (v38(v31, 1LL, v32)) {
        goto LABEL_10;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
    goto LABEL_14;
  }

  uint64_t v23 = *a2;
  *(void *)a1 = *a2;
  a1 = v23 + ((v8 + 16LL) & ~(unint64_t)v8);
  swift_retain();
  return a1;
}

uint64_t destroy for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, v6, v5, a4);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v6, v5, v10);
LABEL_6:
    uint64_t v11 = *(int *)(v9 + 36);
    uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v9 = type metadata accessor for FloatingPointFormatStyle(0LL, v6, v5, v8);
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v6, v5, v13) + 40);
  uint64_t v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v14 = a1 + *(int *)(v12 + 36) + v11;
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  }
  return result;
}

uint64_t initializeWithCopy for FloatingPointFormatStyle.Attributed( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, v7, v6, a4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v23 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v7, v6, v9) + 36);
    uint64_t v24 = a1 + v23;
    uint64_t v25 = a2 + v23;
    *(void *)uint64_t v24 = *(void *)(a2 + v23);
    *(_BYTE *)(v24 + 8) = *(_BYTE *)(a2 + v23 + 8);
    __int128 v26 = *(_OWORD *)(a2 + v23 + 32);
    *(_OWORD *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v23 + 16);
    *(_OWORD *)(v24 + 32) = v26;
    *(_OWORD *)(v24 + 48) = *(_OWORD *)(a2 + v23 + 48);
    *(_OWORD *)(v24 + 57) = *(_OWORD *)(a2 + v23 + 57);
    *(_BYTE *)(v24 + 73) = *(_BYTE *)(a2 + v23 + 73);
    *(_WORD *)(v24 + 74) = *(_WORD *)(a2 + v23 + 74);
    *(_BYTE *)(v24 + 76) = *(_BYTE *)(a2 + v23 + 76);
    *(_BYTE *)(v24 + 77) = *(_BYTE *)(a2 + v23 + 77);
    __int128 v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v28 = v27[9];
    uint64_t v29 = (void *)(v24 + v28);
    uint64_t v30 = (const void *)(v25 + v28);
    uint64_t v31 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
    swift_unknownObjectRetain();
    if (v33(v30, 1LL, v31))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
    }

    uint64_t v53 = v27[10];
    uint64_t v54 = v24 + v53;
    uint64_t v55 = v25 + v53;
    *(void *)uint64_t v54 = *(void *)v55;
    *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
    uint64_t v56 = v27[11];
    char v51 = (_BYTE *)(v24 + v56);
    char v52 = (_BYTE *)(v25 + v56);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 24);
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v10;
    uint64_t v11 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v7, v6, v9) + 40);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    *(void *)uint64_t v12 = *(void *)(a2 + v11);
    *(_BYTE *)(v12 + 8) = *(_BYTE *)(a2 + v11 + 8);
    __int128 v14 = *(_OWORD *)(a2 + v11 + 32);
    *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v11 + 16);
    *(_OWORD *)(v12 + 32) = v14;
    *(_OWORD *)(v12 + 48) = *(_OWORD *)(a2 + v11 + 48);
    *(_OWORD *)(v12 + 57) = *(_OWORD *)(a2 + v11 + 57);
    *(_BYTE *)(v12 + 73) = *(_BYTE *)(a2 + v11 + 73);
    *(_DWORD *)(v12 + 74) = *(_DWORD *)(a2 + v11 + 74);
    *(_BYTE *)(v12 + 78) = *(_BYTE *)(a2 + v11 + 78);
    uint64_t v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v16 = v15[9];
    uint64_t v17 = (void *)(v12 + v16);
    uint64_t v18 = (const void *)(v13 + v16);
    uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v18, 1LL, v19))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    }

    uint64_t v47 = v15[10];
    uint64_t v48 = v12 + v47;
    uint64_t v49 = v13 + v47;
    *(void *)uint64_t v48 = *(void *)v49;
    *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
    *(_BYTE *)(v12 + v15[11]) = *(_BYTE *)(v13 + v15[11]);
    uint64_t v50 = v15[12];
    char v51 = (_BYTE *)(v12 + v50);
    char v52 = (_BYTE *)(v13 + v50);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v35 = *(int *)(type metadata accessor for FloatingPointFormatStyle(0LL, v7, v6, v9) + 36);
    uint64_t v36 = a1 + v35;
    uint64_t v37 = a2 + v35;
    *(void *)uint64_t v36 = *(void *)(a2 + v35);
    *(_BYTE *)(v36 + 8) = *(_BYTE *)(a2 + v35 + 8);
    __int128 v38 = *(_OWORD *)(a2 + v35 + 32);
    *(_OWORD *)(v36 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v35 + 16);
    *(_OWORD *)(v36 + 32) = v38;
    *(_OWORD *)(v36 + 48) = *(_OWORD *)(a2 + v35 + 48);
    *(_OWORD *)(v36 + 57) = *(_OWORD *)(a2 + v35 + 57);
    *(_BYTE *)(v36 + 73) = *(_BYTE *)(a2 + v35 + 73);
    *(_WORD *)(v36 + 74) = *(_WORD *)(a2 + v35 + 74);
    *(_BYTE *)(v36 + 76) = *(_BYTE *)(a2 + v35 + 76);
    *(_BYTE *)(v36 + 77) = *(_BYTE *)(a2 + v35 + 77);
    uint64_t v39 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v40 = v39[9];
    uint64_t v41 = (void *)(v36 + v40);
    uint64_t v42 = (const void *)(v37 + v40);
    uint64_t v43 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v44 = *(void *)(v43 - 8);
    uint64_t v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
    swift_unknownObjectRetain();
    if (v45(v42, 1LL, v43))
    {
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v43);
    }

    uint64_t v57 = v39[10];
    uint64_t v58 = v36 + v57;
    uint64_t v59 = v37 + v57;
    *(void *)uint64_t v58 = *(void *)v59;
    *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
    uint64_t v60 = v39[11];
    char v51 = (_BYTE *)(v36 + v60);
    char v52 = (_BYTE *)(v37 + v60);
  }

  *char v51 = *v52;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for FloatingPointFormatStyle.Attributed( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v8 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, v7, v6, a4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v24 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v7, v6, v10);
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v11 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v7, v6, v10) + 40);
        uint64_t v12 = a1 + v11;
        uint64_t v13 = a2 + v11;
        LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11) = *(_BYTE *)(a2 + v11 + 8);
        *(void *)uint64_t v12 = *(void *)v13;
        *(_BYTE *)(v12 + 8) = v11;
        __int128 v14 = *(_OWORD *)(v13 + 57);
        __int128 v16 = *(_OWORD *)(v13 + 32);
        __int128 v15 = *(_OWORD *)(v13 + 48);
        *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(v13 + 16);
        *(_OWORD *)(v12 + 32) = v16;
        *(_OWORD *)(v12 + 48) = v15;
        *(_OWORD *)(v12 + 57) = v14;
        *(_BYTE *)(v12 + 73) = *(_BYTE *)(v13 + 73);
        *(_DWORD *)(v12 + 74) = *(_DWORD *)(v13 + 74);
        *(_BYTE *)(v12 + 78) = *(_BYTE *)(v13 + 78);
        uint64_t v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v18 = v17[9];
        __int128 __dst = (void *)(v12 + v18);
        uint64_t v19 = (const void *)(v13 + v18);
        uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v21 = *(void *)(v20 - 8);
        uint64_t v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v22(v19, 1LL, v20))
        {
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(__dst, v19, v20);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0LL, 1LL, v20);
        }

        uint64_t v46 = v17[10];
        uint64_t v47 = v12 + v46;
        uint64_t v48 = (uint64_t *)(v13 + v46);
        uint64_t v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(void *)uint64_t v47 = v49;
        *(_BYTE *)(v12 + v17[11]) = *(_BYTE *)(v13 + v17[11]);
        uint64_t v50 = v17[12];
        uint64_t v44 = (_BYTE *)(v12 + v50);
        uint64_t v45 = (_BYTE *)(v13 + v50);
LABEL_14:
        *uint64_t v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v24 = type metadata accessor for FloatingPointFormatStyle(0LL, v7, v6, v10);
    }

    uint64_t v25 = *(int *)(v24 + 36);
    uint64_t v26 = a1 + v25;
    uint64_t v27 = a2 + v25;
    LOBYTE(v25) = *(_BYTE *)(a2 + v25 + 8);
    *(void *)uint64_t v26 = *(void *)v27;
    *(_BYTE *)(v26 + 8) = v25;
    __int128 v28 = *(_OWORD *)(v27 + 57);
    __int128 v30 = *(_OWORD *)(v27 + 32);
    __int128 v29 = *(_OWORD *)(v27 + 48);
    *(_OWORD *)(v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(v27 + 16);
    *(_OWORD *)(v26 + 32) = v30;
    *(_OWORD *)(v26 + 48) = v29;
    *(_OWORD *)(v26 + 57) = v28;
    *(_BYTE *)(v26 + 73) = *(_BYTE *)(v27 + 73);
    LOWORD(v25) = *(_WORD *)(v27 + 74);
    *(_BYTE *)(v26 + 76) = *(_BYTE *)(v27 + 76);
    *(_WORD *)(v26 + 74) = v25;
    *(_BYTE *)(v26 + 77) = *(_BYTE *)(v27 + 77);
    uint64_t v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v32 = v31[9];
    uint64_t v33 = (void *)(v26 + v32);
    uint64_t v34 = (const void *)(v27 + v32);
    uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
    swift_unknownObjectRetain();
    if (v37(v34, 1LL, v35))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
    }

    uint64_t v39 = v31[10];
    uint64_t v40 = v26 + v39;
    uint64_t v41 = (uint64_t *)(v27 + v39);
    uint64_t v42 = *v41;
    *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
    *(void *)uint64_t v40 = v42;
    uint64_t v43 = v31[11];
    uint64_t v44 = (_BYTE *)(v26 + v43);
    uint64_t v45 = (_BYTE *)(v27 + v43);
    goto LABEL_14;
  }

  return a1;
}

_OWORD *initializeWithTake for FloatingPointFormatStyle.Attributed( _OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, v7, v6, a4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v22 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v7, v6, v9);
  }

  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      __int128 v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v7, v6, v9) + 40);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      *(void *)uint64_t v12 = *(void *)((char *)a2 + v11);
      v12[8] = *((_BYTE *)a2 + v11 + 8);
      __int128 v14 = *(_OWORD *)((char *)a2 + v11 + 32);
      *((_OWORD *)v12 + 1) = *(_OWORD *)((char *)a2 + v11 + 16);
      *((_OWORD *)v12 + 2) = v14;
      *((_OWORD *)v12 + 3) = *(_OWORD *)((char *)a2 + v11 + 48);
      *(_OWORD *)(v12 + 57) = *(_OWORD *)((char *)a2 + v11 + 57);
      v12[73] = *((_BYTE *)a2 + v11 + 73);
      *(_DWORD *)(v12 + 74) = *(_DWORD *)((char *)a2 + v11 + 74);
      v12[78] = *((_BYTE *)a2 + v11 + 78);
      __int128 v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v16 = v15[9];
      uint64_t v17 = &v12[v16];
      uint64_t v18 = &v13[v16];
      uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      }

      uint64_t v40 = v15[10];
      uint64_t v41 = &v12[v40];
      uint64_t v42 = &v13[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      v12[v15[11]] = v13[v15[11]];
      uint64_t v43 = v15[12];
      uint64_t v38 = &v12[v43];
      uint64_t v39 = &v13[v43];
      goto LABEL_13;
    }

    *a1 = *a2;
    uint64_t v22 = type metadata accessor for FloatingPointFormatStyle(0LL, v7, v6, v9);
  }

  uint64_t v23 = *(int *)(v22 + 36);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  *(void *)uint64_t v24 = *(void *)((char *)a2 + v23);
  v24[8] = *((_BYTE *)a2 + v23 + 8);
  __int128 v26 = *(_OWORD *)((char *)a2 + v23 + 32);
  *((_OWORD *)v24 + 1) = *(_OWORD *)((char *)a2 + v23 + 16);
  *((_OWORD *)v24 + 2) = v26;
  *((_OWORD *)v24 + 3) = *(_OWORD *)((char *)a2 + v23 + 48);
  *(_OWORD *)(v24 + 57) = *(_OWORD *)((char *)a2 + v23 + 57);
  v24[73] = *((_BYTE *)a2 + v23 + 73);
  *((_WORD *)v24 + 37) = *(_WORD *)((char *)a2 + v23 + 74);
  v24[76] = *((_BYTE *)a2 + v23 + 76);
  v24[77] = *((_BYTE *)a2 + v23 + 77);
  uint64_t v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v28 = v27[9];
  __int128 v29 = &v24[v28];
  __int128 v30 = &v25[v28];
  uint64_t v31 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
  }

  uint64_t v34 = v27[10];
  uint64_t v35 = &v24[v34];
  uint64_t v36 = &v25[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  uint64_t v37 = v27[11];
  uint64_t v38 = &v24[v37];
  uint64_t v39 = &v25[v37];
LABEL_13:
  *uint64_t v38 = *v39;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for FloatingPointFormatStyle.Attributed( _OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v8 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0LL, v7, v6, a4);
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v23 = type metadata accessor for FloatingPointFormatStyle.Percent(0LL, v7, v6, v10);
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        __int128 v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        uint64_t v12 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0LL, v7, v6, v10) + 40);
        uint64_t v13 = (char *)a1 + v12;
        __int128 v14 = (char *)a2 + v12;
        *(void *)uint64_t v13 = *(void *)((char *)a2 + v12);
        v13[8] = *((_BYTE *)a2 + v12 + 8);
        __int128 v15 = *(_OWORD *)((char *)a2 + v12 + 32);
        *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)a2 + v12 + 16);
        *((_OWORD *)v13 + 2) = v15;
        *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)a2 + v12 + 48);
        *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)a2 + v12 + 57);
        v13[73] = *((_BYTE *)a2 + v12 + 73);
        *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)a2 + v12 + 74);
        v13[78] = *((_BYTE *)a2 + v12 + 78);
        uint64_t v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v17 = v16[9];
        uint64_t v18 = &v13[v17];
        uint64_t v19 = &v14[v17];
        uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
        }

        uint64_t v41 = v16[10];
        uint64_t v42 = &v13[v41];
        uint64_t v43 = &v14[v41];
        *(void *)uint64_t v42 = *(void *)v43;
        v42[8] = v43[8];
        v13[v16[11]] = v14[v16[11]];
        uint64_t v44 = v16[12];
        uint64_t v39 = &v13[v44];
        uint64_t v40 = &v14[v44];
LABEL_14:
        *uint64_t v39 = *v40;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *a1 = *a2;
      uint64_t v23 = type metadata accessor for FloatingPointFormatStyle(0LL, v7, v6, v10);
    }

    uint64_t v24 = *(int *)(v23 + 36);
    uint64_t v25 = (char *)a1 + v24;
    __int128 v26 = (char *)a2 + v24;
    *(void *)uint64_t v25 = *(void *)((char *)a2 + v24);
    v25[8] = *((_BYTE *)a2 + v24 + 8);
    __int128 v27 = *(_OWORD *)((char *)a2 + v24 + 32);
    *((_OWORD *)v25 + 1) = *(_OWORD *)((char *)a2 + v24 + 16);
    *((_OWORD *)v25 + 2) = v27;
    *((_OWORD *)v25 + 3) = *(_OWORD *)((char *)a2 + v24 + 48);
    *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v24 + 57);
    v25[73] = *((_BYTE *)a2 + v24 + 73);
    *((_WORD *)v25 + 37) = *(_WORD *)((char *)a2 + v24 + 74);
    v25[76] = *((_BYTE *)a2 + v24 + 76);
    v25[77] = *((_BYTE *)a2 + v24 + 77);
    uint64_t v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v29 = v28[9];
    __int128 v30 = &v25[v29];
    uint64_t v31 = &v26[v29];
    uint64_t v32 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
    }

    uint64_t v35 = v28[10];
    uint64_t v36 = &v25[v35];
    uint64_t v37 = &v26[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v28[11];
    uint64_t v39 = &v25[v38];
    uint64_t v40 = &v26[v38];
    goto LABEL_14;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1833886B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1833886FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style( 0LL,  *(void *)(a4 + 16),  *(void *)(a4 + 24),  a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, a2, a2, v6);
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Percent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183388798 + 4 * byte_1838259B5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1833887CC + 4 * asc_1838259B0[v4]))();
}

uint64_t sub_1833887CC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833887D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1833887DCLL);
  }
  return result;
}

uint64_t sub_1833887E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1833887F0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1833887F4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833887FC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata completion function for FloatingPointFormatStyle.Attributed.Style( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = type metadata accessor for FloatingPointFormatStyle(319LL, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FloatingPointFormatStyle.Currency(319LL, v4, v5, v7);
    if (v10 <= 0x3F)
    {
      uint64_t result = type metadata accessor for FloatingPointFormatStyle.Percent(319LL, v4, v5, v9);
      if (v11 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FloatingPointFormatStyle.Attributed.Style( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v22 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v8)
                   + 36);
      uint64_t v23 = a1 + v22;
      uint64_t v24 = (uint64_t)a2 + v22;
      *(void *)uint64_t v23 = *(uint64_t *)((char *)a2 + v22);
      *(_BYTE *)(v23 + 8) = *((_BYTE *)a2 + v22 + 8);
      __int128 v25 = *(_OWORD *)((char *)a2 + v22 + 32);
      *(_OWORD *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v22 + 16);
      *(_OWORD *)(v23 + 32) = v25;
      *(_OWORD *)(v23 + 48) = *(_OWORD *)((char *)a2 + v22 + 48);
      *(_OWORD *)(v23 + 57) = *(_OWORD *)((char *)a2 + v22 + 57);
      *(_BYTE *)(v23 + 73) = *((_BYTE *)a2 + v22 + 73);
      *(_WORD *)(v23 + 74) = *(_WORD *)((char *)a2 + v22 + 74);
      *(_BYTE *)(v23 + 76) = *((_BYTE *)a2 + v22 + 76);
      *(_BYTE *)(v23 + 77) = *((_BYTE *)a2 + v22 + 77);
      __int128 v26 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v27 = v26[9];
      uint64_t v28 = (void *)(v23 + v27);
      uint64_t v29 = (const void *)(v24 + v27);
      uint64_t v30 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v31 = *(void *)(v30 - 8);
      uint64_t v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
      swift_unknownObjectRetain();
      if (v32(v29, 1LL, v30))
      {
LABEL_10:
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v28, v29, *(void *)(*(void *)(v37 - 8) + 64LL));
LABEL_14:
        uint64_t v41 = v26[10];
        uint64_t v42 = v23 + v41;
        uint64_t v43 = v24 + v41;
        *(void *)uint64_t v42 = *(void *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(_BYTE *)(v23 + v26[11]) = *(_BYTE *)(v24 + v26[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v9 = a2[3];
        *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2[2];
        *(void *)(a1 + 24) = v9;
        uint64_t v10 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v8)
                     + 40);
        uint64_t v11 = a1 + v10;
        uint64_t v12 = (uint64_t)a2 + v10;
        *(void *)uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
        *(_BYTE *)(v11 + 8) = *((_BYTE *)a2 + v10 + 8);
        __int128 v13 = *(_OWORD *)((char *)a2 + v10 + 32);
        *(_OWORD *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v10 + 16);
        *(_OWORD *)(v11 + 32) = v13;
        *(_OWORD *)(v11 + 48) = *(_OWORD *)((char *)a2 + v10 + 48);
        *(_OWORD *)(v11 + 57) = *(_OWORD *)((char *)a2 + v10 + 57);
        *(_BYTE *)(v11 + 73) = *((_BYTE *)a2 + v10 + 73);
        *(_DWORD *)(v11 + 74) = *(_DWORD *)((char *)a2 + v10 + 74);
        *(_BYTE *)(v11 + 78) = *((_BYTE *)a2 + v10 + 78);
        __int128 v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v15 = v14[9];
        __int128 __dst = (void *)(v11 + v15);
        uint64_t v16 = (const void *)(v12 + v15);
        uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v19(v16, 1LL, v17))
        {
          uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(__dst, v16, v17);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0LL, 1LL, v17);
        }

        uint64_t v38 = v14[10];
        uint64_t v39 = v11 + v38;
        uint64_t v40 = v12 + v38;
        *(void *)uint64_t v39 = *(void *)v40;
        *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
        *(_BYTE *)(v11 + v14[11]) = *(_BYTE *)(v12 + v14[11]);
        *(_BYTE *)(v11 + v14[12]) = *(_BYTE *)(v12 + v14[12]);
        goto LABEL_15;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v33 = *(int *)(type metadata accessor for FloatingPointFormatStyle( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v8)
                   + 36);
      uint64_t v23 = a1 + v33;
      uint64_t v24 = (uint64_t)a2 + v33;
      *(void *)uint64_t v23 = *(uint64_t *)((char *)a2 + v33);
      *(_BYTE *)(v23 + 8) = *((_BYTE *)a2 + v33 + 8);
      __int128 v34 = *(_OWORD *)((char *)a2 + v33 + 32);
      *(_OWORD *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v33 + 16);
      *(_OWORD *)(v23 + 32) = v34;
      *(_OWORD *)(v23 + 48) = *(_OWORD *)((char *)a2 + v33 + 48);
      *(_OWORD *)(v23 + 57) = *(_OWORD *)((char *)a2 + v33 + 57);
      *(_BYTE *)(v23 + 73) = *((_BYTE *)a2 + v33 + 73);
      *(_WORD *)(v23 + 74) = *(_WORD *)((char *)a2 + v33 + 74);
      *(_BYTE *)(v23 + 76) = *((_BYTE *)a2 + v33 + 76);
      *(_BYTE *)(v23 + 77) = *((_BYTE *)a2 + v33 + 77);
      __int128 v26 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v35 = v26[9];
      uint64_t v28 = (void *)(v23 + v35);
      uint64_t v29 = (const void *)(v24 + v35);
      uint64_t v30 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v31 = *(void *)(v30 - 8);
      uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
      swift_unknownObjectRetain();
      if (v36(v29, 1LL, v30)) {
        goto LABEL_10;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
    goto LABEL_14;
  }

  uint64_t v21 = *a2;
  *(void *)a1 = *a2;
  a1 = v21 + ((v5 + 16LL) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v6 = type metadata accessor for FloatingPointFormatStyle.Percent( 0LL,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  v7);
LABEL_6:
    uint64_t v8 = *(int *)(v6 + 36);
    uint64_t v9 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v6 = type metadata accessor for FloatingPointFormatStyle(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v5);
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency( 0LL,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  v10)
              + 40);
  uint64_t v9 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v11 = a1 + *(int *)(v9 + 36) + v8;
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  return result;
}

uint64_t initializeWithCopy for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v20 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                 + 36);
    uint64_t v21 = a1 + v20;
    uint64_t v22 = a2 + v20;
    *(void *)uint64_t v21 = *(void *)(a2 + v20);
    *(_BYTE *)(v21 + 8) = *(_BYTE *)(a2 + v20 + 8);
    __int128 v23 = *(_OWORD *)(a2 + v20 + 32);
    *(_OWORD *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v20 + 16);
    *(_OWORD *)(v21 + 32) = v23;
    *(_OWORD *)(v21 + 48) = *(_OWORD *)(a2 + v20 + 48);
    *(_OWORD *)(v21 + 57) = *(_OWORD *)(a2 + v20 + 57);
    *(_BYTE *)(v21 + 73) = *(_BYTE *)(a2 + v20 + 73);
    *(_WORD *)(v21 + 74) = *(_WORD *)(a2 + v20 + 74);
    *(_BYTE *)(v21 + 76) = *(_BYTE *)(a2 + v20 + 76);
    *(_BYTE *)(v21 + 77) = *(_BYTE *)(a2 + v20 + 77);
    uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v25 = v24[9];
    __int128 v26 = (void *)(v21 + v25);
    uint64_t v27 = (const void *)(v22 + v25);
    uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
    swift_unknownObjectRetain();
    if (v30(v27, 1LL, v28))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    }

    uint64_t v50 = v24[10];
    uint64_t v51 = v21 + v50;
    uint64_t v52 = v22 + v50;
    *(void *)uint64_t v51 = *(void *)v52;
    *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
    uint64_t v53 = v24[11];
    uint64_t v48 = (_BYTE *)(v21 + v53);
    uint64_t v49 = (_BYTE *)(v22 + v53);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 24);
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                + 40);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    *(void *)uint64_t v10 = *(void *)(a2 + v9);
    *(_BYTE *)(v10 + 8) = *(_BYTE *)(a2 + v9 + 8);
    __int128 v12 = *(_OWORD *)(a2 + v9 + 32);
    *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v9 + 16);
    *(_OWORD *)(v10 + 32) = v12;
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 + v9 + 48);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)(a2 + v9 + 57);
    *(_BYTE *)(v10 + 73) = *(_BYTE *)(a2 + v9 + 73);
    *(_DWORD *)(v10 + 74) = *(_DWORD *)(a2 + v9 + 74);
    *(_BYTE *)(v10 + 78) = *(_BYTE *)(a2 + v9 + 78);
    uint64_t v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v14 = v13[9];
    __int128 __dst = (void *)(v10 + v14);
    uint64_t v15 = (const void *)(v11 + v14);
    uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1LL, v16))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0LL, 1LL, v16);
    }

    uint64_t v44 = v13[10];
    uint64_t v45 = v10 + v44;
    uint64_t v46 = v11 + v44;
    *(void *)uint64_t v45 = *(void *)v46;
    *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
    *(_BYTE *)(v10 + v13[11]) = *(_BYTE *)(v11 + v13[11]);
    uint64_t v47 = v13[12];
    uint64_t v48 = (_BYTE *)(v10 + v47);
    uint64_t v49 = (_BYTE *)(v11 + v47);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v32 = *(int *)(type metadata accessor for FloatingPointFormatStyle( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                 + 36);
    uint64_t v33 = a1 + v32;
    uint64_t v34 = a2 + v32;
    *(void *)uint64_t v33 = *(void *)(a2 + v32);
    *(_BYTE *)(v33 + 8) = *(_BYTE *)(a2 + v32 + 8);
    __int128 v35 = *(_OWORD *)(a2 + v32 + 32);
    *(_OWORD *)(v33 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v32 + 16);
    *(_OWORD *)(v33 + 32) = v35;
    *(_OWORD *)(v33 + 48) = *(_OWORD *)(a2 + v32 + 48);
    *(_OWORD *)(v33 + 57) = *(_OWORD *)(a2 + v32 + 57);
    *(_BYTE *)(v33 + 73) = *(_BYTE *)(a2 + v32 + 73);
    *(_WORD *)(v33 + 74) = *(_WORD *)(a2 + v32 + 74);
    *(_BYTE *)(v33 + 76) = *(_BYTE *)(a2 + v32 + 76);
    *(_BYTE *)(v33 + 77) = *(_BYTE *)(a2 + v32 + 77);
    uint64_t v36 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v37 = v36[9];
    uint64_t v38 = (void *)(v33 + v37);
    uint64_t v39 = (const void *)(v34 + v37);
    uint64_t v40 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
    swift_unknownObjectRetain();
    if (v42(v39, 1LL, v40))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v38, v39, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
    }

    uint64_t v54 = v36[10];
    uint64_t v55 = v33 + v54;
    uint64_t v56 = v34 + v54;
    *(void *)uint64_t v55 = *(void *)v56;
    *(_BYTE *)(v55 + 8) = *(_BYTE *)(v56 + 8);
    uint64_t v57 = v36[11];
    uint64_t v48 = (_BYTE *)(v33 + v57);
    uint64_t v49 = (_BYTE *)(v34 + v57);
  }

  _BYTE *v48 = *v49;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v21 = type metadata accessor for FloatingPointFormatStyle.Percent( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7);
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v8 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                    + 40);
        uint64_t v9 = a1 + v8;
        uint64_t v10 = a2 + v8;
        LOBYTE(v8) = *(_BYTE *)(a2 + v8 + 8);
        *(void *)uint64_t v9 = *(void *)v10;
        *(_BYTE *)(v9 + 8) = v8;
        __int128 v11 = *(_OWORD *)(v10 + 57);
        __int128 v13 = *(_OWORD *)(v10 + 32);
        __int128 v12 = *(_OWORD *)(v10 + 48);
        *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v9 + 32) = v13;
        *(_OWORD *)(v9 + 48) = v12;
        *(_OWORD *)(v9 + 57) = v11;
        *(_BYTE *)(v9 + 73) = *(_BYTE *)(v10 + 73);
        *(_DWORD *)(v9 + 74) = *(_DWORD *)(v10 + 74);
        *(_BYTE *)(v9 + 78) = *(_BYTE *)(v10 + 78);
        uint64_t v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v15 = v14[9];
        __int128 __dst = (void *)(v9 + v15);
        uint64_t v16 = (const void *)(v10 + v15);
        uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v19(v16, 1LL, v17))
        {
          uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(__dst, v16, v17);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0LL, 1LL, v17);
        }

        uint64_t v43 = v14[10];
        uint64_t v44 = v9 + v43;
        uint64_t v45 = (uint64_t *)(v10 + v43);
        uint64_t v46 = *v45;
        *(_BYTE *)(v44 + 8) = *((_BYTE *)v45 + 8);
        *(void *)uint64_t v44 = v46;
        *(_BYTE *)(v9 + v14[11]) = *(_BYTE *)(v10 + v14[11]);
        uint64_t v47 = v14[12];
        uint64_t v41 = (_BYTE *)(v9 + v47);
        uint64_t v42 = (_BYTE *)(v10 + v47);
LABEL_14:
        *uint64_t v41 = *v42;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v21 = type metadata accessor for FloatingPointFormatStyle(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v7);
    }

    uint64_t v22 = *(int *)(v21 + 36);
    uint64_t v23 = a1 + v22;
    uint64_t v24 = a2 + v22;
    LOBYTE(v22) = *(_BYTE *)(a2 + v22 + 8);
    *(void *)uint64_t v23 = *(void *)v24;
    *(_BYTE *)(v23 + 8) = v22;
    __int128 v25 = *(_OWORD *)(v24 + 57);
    __int128 v27 = *(_OWORD *)(v24 + 32);
    __int128 v26 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(v24 + 16);
    *(_OWORD *)(v23 + 32) = v27;
    *(_OWORD *)(v23 + 48) = v26;
    *(_OWORD *)(v23 + 57) = v25;
    *(_BYTE *)(v23 + 73) = *(_BYTE *)(v24 + 73);
    LOWORD(v22) = *(_WORD *)(v24 + 74);
    *(_BYTE *)(v23 + 76) = *(_BYTE *)(v24 + 76);
    *(_WORD *)(v23 + 74) = v22;
    *(_BYTE *)(v23 + 77) = *(_BYTE *)(v24 + 77);
    uint64_t v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v29 = v28[9];
    uint64_t v30 = (void *)(v23 + v29);
    uint64_t v31 = (const void *)(v24 + v29);
    uint64_t v32 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
    swift_unknownObjectRetain();
    if (v34(v31, 1LL, v32))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
    }

    uint64_t v36 = v28[10];
    uint64_t v37 = v23 + v36;
    uint64_t v38 = (uint64_t *)(v24 + v36);
    uint64_t v39 = *v38;
    *(_BYTE *)(v37 + 8) = *((_BYTE *)v38 + 8);
    *(void *)uint64_t v37 = v39;
    uint64_t v40 = v28[11];
    uint64_t v41 = (_BYTE *)(v23 + v40);
    uint64_t v42 = (_BYTE *)(v24 + v40);
    goto LABEL_14;
  }

  return a1;
}

_OWORD *initializeWithTake for FloatingPointFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v20 = type metadata accessor for FloatingPointFormatStyle.Percent( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7);
  }

  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      __int128 v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                  + 40);
      uint64_t v10 = (char *)a1 + v9;
      __int128 v11 = (char *)a2 + v9;
      *(void *)uint64_t v10 = *(void *)((char *)a2 + v9);
      v10[8] = *((_BYTE *)a2 + v9 + 8);
      __int128 v12 = *(_OWORD *)((char *)a2 + v9 + 32);
      *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
      *((_OWORD *)v10 + 2) = v12;
      *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
      *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
      v10[73] = *((_BYTE *)a2 + v9 + 73);
      *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
      v10[78] = *((_BYTE *)a2 + v9 + 78);
      __int128 v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v14 = v13[9];
      uint64_t v15 = &v10[v14];
      uint64_t v16 = &v11[v14];
      uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      }

      uint64_t v38 = v13[10];
      uint64_t v39 = &v10[v38];
      uint64_t v40 = &v11[v38];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      v10[v13[11]] = v11[v13[11]];
      uint64_t v41 = v13[12];
      uint64_t v36 = &v10[v41];
      uint64_t v37 = &v11[v41];
      goto LABEL_13;
    }

    *a1 = *a2;
    uint64_t v20 = type metadata accessor for FloatingPointFormatStyle(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v7);
  }

  uint64_t v21 = *(int *)(v20 + 36);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  *(void *)uint64_t v22 = *(void *)((char *)a2 + v21);
  _BYTE v22[8] = *((_BYTE *)a2 + v21 + 8);
  __int128 v24 = *(_OWORD *)((char *)a2 + v21 + 32);
  *((_OWORD *)v22 + 1) = *(_OWORD *)((char *)a2 + v21 + 16);
  *((_OWORD *)v22 + 2) = v24;
  *((_OWORD *)v22 + 3) = *(_OWORD *)((char *)a2 + v21 + 48);
  *(_OWORD *)(v22 + 57) = *(_OWORD *)((char *)a2 + v21 + 57);
  v22[73] = *((_BYTE *)a2 + v21 + 73);
  *((_WORD *)v22 + 37) = *(_WORD *)((char *)a2 + v21 + 74);
  v22[76] = *((_BYTE *)a2 + v21 + 76);
  v22[77] = *((_BYTE *)a2 + v21 + 77);
  __int128 v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v26 = v25[9];
  __int128 v27 = &v22[v26];
  uint64_t v28 = &v23[v26];
  uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  uint64_t v32 = v25[10];
  uint64_t v33 = &v22[v32];
  uint64_t v34 = &v23[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v34[8];
  uint64_t v35 = v25[11];
  uint64_t v36 = &v22[v35];
  uint64_t v37 = &v23[v35];
LABEL_13:
  *uint64_t v36 = *v37;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for FloatingPointFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v20 = type metadata accessor for FloatingPointFormatStyle.Percent( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7);
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        __int128 v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        uint64_t v9 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                    + 40);
        uint64_t v10 = (char *)a1 + v9;
        __int128 v11 = (char *)a2 + v9;
        *(void *)uint64_t v10 = *(void *)((char *)a2 + v9);
        v10[8] = *((_BYTE *)a2 + v9 + 8);
        __int128 v12 = *(_OWORD *)((char *)a2 + v9 + 32);
        *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
        *((_OWORD *)v10 + 2) = v12;
        *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
        *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
        v10[73] = *((_BYTE *)a2 + v9 + 73);
        *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
        v10[78] = *((_BYTE *)a2 + v9 + 78);
        __int128 v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v14 = v13[9];
        uint64_t v15 = &v10[v14];
        uint64_t v16 = &v11[v14];
        uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
        {
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
        }

        uint64_t v38 = v13[10];
        uint64_t v39 = &v10[v38];
        uint64_t v40 = &v11[v38];
        *(void *)uint64_t v39 = *(void *)v40;
        v39[8] = v40[8];
        v10[v13[11]] = v11[v13[11]];
        uint64_t v41 = v13[12];
        uint64_t v36 = &v10[v41];
        uint64_t v37 = &v11[v41];
LABEL_14:
        *uint64_t v36 = *v37;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *a1 = *a2;
      uint64_t v20 = type metadata accessor for FloatingPointFormatStyle(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v7);
    }

    uint64_t v21 = *(int *)(v20 + 36);
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    *(void *)uint64_t v22 = *(void *)((char *)a2 + v21);
    _BYTE v22[8] = *((_BYTE *)a2 + v21 + 8);
    __int128 v24 = *(_OWORD *)((char *)a2 + v21 + 32);
    *((_OWORD *)v22 + 1) = *(_OWORD *)((char *)a2 + v21 + 16);
    *((_OWORD *)v22 + 2) = v24;
    *((_OWORD *)v22 + 3) = *(_OWORD *)((char *)a2 + v21 + 48);
    *(_OWORD *)(v22 + 57) = *(_OWORD *)((char *)a2 + v21 + 57);
    v22[73] = *((_BYTE *)a2 + v21 + 73);
    *((_WORD *)v22 + 37) = *(_WORD *)((char *)a2 + v21 + 74);
    v22[76] = *((_BYTE *)a2 + v21 + 76);
    v22[77] = *((_BYTE *)a2 + v21 + 77);
    __int128 v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v26 = v25[9];
    __int128 v27 = &v22[v26];
    uint64_t v28 = &v23[v26];
    uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    }

    uint64_t v32 = v25[10];
    uint64_t v33 = &v22[v32];
    uint64_t v34 = &v23[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v25[11];
    uint64_t v36 = &v22[v35];
    uint64_t v37 = &v23[v35];
    goto LABEL_14;
  }

  return a1;
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style()
{
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.CodingKeys()
{
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Percent.CodingKeys()
{
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Currency.CodingKeys()
{
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Currency.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Currency.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Percent.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Percent.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.CodingKeys()
{
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style.CodingKeys);
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Currency.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_183389CE0 + 4 * byte_1838259BF[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_183389D14 + 4 * byte_1838259BA[v4]))();
}

uint64_t sub_183389D14(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183389D1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183389D24LL);
  }
  return result;
}

uint64_t sub_183389D30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183389D38LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_183389D3C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183389D44(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Attributed.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_183389D90 + 4 * byte_1838259C4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_183389DB0 + 4 * byte_1838259C9[v4]))();
  }
}

_BYTE *sub_183389D90(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_183389DB0(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183389DB8(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183389DC0(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183389DC8(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183389DD0(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys()
{
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
}

uint64_t specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = v5[2];
  if (!*v5) {
    uint64_t v12 = 0LL;
  }
  uint64_t v141 = v12;
  ++v5[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope.builder<A>(removing:in:)(a1, a2, v13, (uint64_t)&v151);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope.Builder.insertBeforeTip<A>(_:)(a3, a4, a5);
  uint64_t v15 = v155;
  uint64_t v16 = v156;
  uint64_t v17 = v157;
  uint64_t v156 = 0LL;
  uint64_t v157 = 0LL;
  uint64_t v155 = 0LL;
  if (v16)
  {
    if (v15)
    {
      __int128 v18 = v153;
      uint64_t v19 = v154;
      uint64_t v154 = 0LL;
      __int128 v153 = 0uLL;
      if (*((void *)&v18 + 1))
      {
        specialized Rope.Builder._appendNow(_:)(v18, *((uint64_t *)&v18 + 1), v19);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(v153, *((uint64_t *)&v153 + 1));
      }

      *(void *)&__int128 v153 = v15;
      *((void *)&v153 + 1) = v16;
      uint64_t v154 = v17;
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  __int128 v20 = v153;
  uint64_t v21 = v154;
  uint64_t v154 = 0LL;
  __int128 v153 = 0uLL;
  if (*((void *)&v20 + 1)) {
    v14.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v20, *((uint64_t *)&v20 + 1), v21);
  }
LABEL_19:
  uint64_t v29 = v158;
  while (v29[2])
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      uint64_t v23 = v29[2];
      if (!v23) {
        goto LABEL_170;
      }
    }

    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
      uint64_t v29 = (void *)result;
      uint64_t v23 = *(void *)(result + 16);
      if (!v23)
      {
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
        goto LABEL_173;
      }
    }

    uint64_t v24 = v23 - 1;
    __int128 v25 = &v29[4 * v24];
    uint64_t v26 = v25[4];
    uint64_t v27 = v25[5];
    uint64_t v28 = v25[6];
    v29[2] = v24;
    uint64_t v158 = v29;
    if (v26)
    {
      specialized Rope.Builder._insertBeforeTip(_:)(v26, v27, v28);
      goto LABEL_19;
    }
  }

  uint64_t v140 = a2;
  uint64_t v139 = a1;
  __int128 v30 = v153;
  uint64_t v31 = v154;
  __int128 v153 = 0uLL;
  uint64_t v154 = 0LL;
  if (*((void *)&v30 + 1)) {
    v14.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v30, *((uint64_t *)&v30 + 1), v31);
  }
  uint64_t v32 = *((void *)&v151 + 1);
  uint64_t v34 = *((void *)&v152 + 1);
  uint64_t v33 = v152;
  *(void *)&__int128 v145 = 0LL;
  MEMORY[0x186E20E78](&v145, 8LL, v31, v14);
  unint64_t v35 = v145;
  for (i = (void *)v151; i[2]; unint64_t v35 = v46)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      uint64_t v37 = i[2];
      if (!v37) {
        goto LABEL_28;
      }
    }

    else
    {
      int64_t i = specialized _ArrayBuffer._consumeAndCreateNew()(i);
      uint64_t v37 = i[2];
      if (!v37)
      {
LABEL_28:
        __break(1u);
        break;
      }
    }

    uint64_t v38 = v37 - 1;
    uint64_t v39 = &i[4 * v38];
    uint64_t v40 = v39[4];
    uint64_t v41 = v39[5];
    uint64_t v42 = v39[6];
    uint64_t v43 = v39[7];
    i[2] = v38;
    uint64_t v32 = specialized static Rope.join(_:_:)(v40, v41, v42, v43, v32, v33, v34);
    uint64_t v33 = v44;
    uint64_t v34 = v45;
  }

  *(void *)&__int128 v151 = i;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t *v6 = v32;
  v6[1] = v33;
  id v6[2] = v34;
  v6[3] = v35;
  int64_t v143 = (unint64_t *)v6;
  __int128 v47 = v153;
  uint64_t v48 = v155;
  uint64_t v49 = v156;
  swift_bridgeObjectRelease();
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v47, *((uint64_t *)&v47 + 1));
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v48, v49);
  uint64_t result = swift_bridgeObjectRelease();
  if (v32) {
    uint64_t v50 = v34;
  }
  else {
    uint64_t v50 = 0LL;
  }
  uint64_t v51 = v50 - v141;
  if (__OFSUB__(v50, v141)) {
    goto LABEL_181;
  }
  uint64_t v52 = v140 + v51;
  if (__OFADD__(v140, v51))
  {
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }

  if (v52 < 1 || v52 >= v50) {
    goto LABEL_87;
  }
  if (!v32 || !*(_WORD *)(v32 + 16))
  {
    unint64_t v66 = swift_unknownObjectRetain();
    unint64_t v67 = specialized Rope._endPath.getter(v66);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v58 = 0LL;
    uint64_t v55 = 0LL;
    if (!v32) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }

  uint64_t v54 = *(unsigned __int8 *)(v32 + 18);
  uint64_t v142 = v140 + v51;
  if (*(_BYTE *)(v32 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v55 = v52;
    uint64_t v56 = v32;
    while (1)
    {
      uint64_t v59 = *(unsigned __int16 *)(v56 + 16);
      if (!*(_WORD *)(v56 + 16)) {
        goto LABEL_44;
      }
      uint64_t v60 = *(void *)(v56 + 40);
      BOOL v61 = __OFSUB__(v55, v60);
      uint64_t v62 = v55 - v60;
      if (v61) {
        goto LABEL_176;
      }
      if (__OFADD__(v62, 1LL))
      {
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
        goto LABEL_182;
      }

      if (v62 + 1 >= 1) {
        break;
      }
      uint64_t v59 = 0LL;
LABEL_45:
      char v57 = (4 * *(_BYTE *)(v56 + 18) + 8) & 0x3C;
      uint64_t v54 = ((-15LL << v57) - 1) & v54 | (v59 << v57);
      uint64_t v58 = *(void *)(v56 + 24 + 24 * v59);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v56 = v58;
      if (!*(_BYTE *)(v58 + 18)) {
        goto LABEL_138;
      }
    }

    if ((_DWORD)v59 != 1)
    {
      __int128 v63 = (uint64_t *)(v56 + 64);
      uint64_t v64 = 1LL;
      while (1)
      {
        uint64_t v65 = *v63;
        v63 += 3;
        uint64_t v55 = v62 - v65;
        if (__OFSUB__(v62, v65)) {
          goto LABEL_171;
        }
        if (__OFADD__(v55, 1LL)) {
          goto LABEL_172;
        }
        if (v55 + 1 < 1) {
          break;
        }
        ++v64;
        uint64_t v62 = v55;
        if (v59 == v64) {
          goto LABEL_44;
        }
      }

      uint64_t v59 = v64;
      uint64_t v55 = v62;
      goto LABEL_45;
    }

    uint64_t v55 = v62;
LABEL_44:
    if (v55) {
      goto LABEL_175;
    }
    goto LABEL_45;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v55 = v52;
  uint64_t v58 = v32;
LABEL_138:
  uint64_t v127 = *(unsigned __int16 *)(v58 + 16);
  if (!*(_WORD *)(v58 + 16)) {
    goto LABEL_157;
  }
  uint64_t v128 = *(void *)(v58 + 24);
  BOOL v61 = __OFSUB__(v55, v128);
  uint64_t v129 = v55 - v128;
  if (v61)
  {
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }

  if (__OFADD__(v129, 1LL))
  {
LABEL_197:
    __break(1u);
    goto LABEL_198;
  }

  if (v129 + 1 < 1)
  {
    uint64_t v127 = 0LL;
  }

  else
  {
    if ((_DWORD)v127 == 1)
    {
      uint64_t v55 = v129;
LABEL_157:
      if (v55)
      {
LABEL_195:
        __break(1u);
        goto LABEL_196;
      }

      goto LABEL_158;
    }

    uint64_t v133 = (uint64_t *)(v58 + 48);
    uint64_t v134 = 1LL;
    while (1)
    {
      uint64_t v135 = *v133;
      v133 += 3;
      uint64_t v55 = v129 - v135;
      if (__OFSUB__(v129, v135)) {
        goto LABEL_183;
      }
      if (__OFADD__(v55, 1LL)) {
        goto LABEL_184;
      }
      if (v55 + 1 < 1) {
        break;
      }
      ++v134;
      uint64_t v129 = v55;
      if (v127 == v134) {
        goto LABEL_157;
      }
    }

    uint64_t v127 = v134;
    uint64_t v55 = v129;
  }

{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *i;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100[8];
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char v115[8];
  __int128 v116;
  uint64_t v117;
  char v118[8];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v6 = v5;
  if (*v5) {
    uint64_t v10 = v5[2];
  }
  else {
    uint64_t v10 = 0LL;
  }
  ++v5[3];
  specialized Rope.builder<A>(removing:in:)(a1, a2, a3, (uint64_t)&v103);
  swift_unknownObjectRelease();
  __int128 v11 = swift_retain();
  specialized Rope.Builder.insertBeforeTip<A>(_:)(v11, a4, a5);
  __n128 v14 = v107;
  uint64_t v13 = v108;
  uint64_t v15 = v109;
  uint64_t v108 = 0LL;
  uint64_t v109 = 0LL;
  uint64_t v107 = 0LL;
  if (v13)
  {
    if (v14)
    {
      uint64_t v16 = v105;
      uint64_t v17 = v106;
      uint64_t v106 = 0LL;
      unint64_t v105 = 0uLL;
      if (*((void *)&v16 + 1))
      {
        specialized Rope.Builder._appendNow(_:)(v16, *((uint64_t *)&v16 + 1), v17);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(v105, *((uint64_t *)&v105 + 1));
      }

      *(void *)&unint64_t v105 = v14;
      *((void *)&v105 + 1) = v13;
      uint64_t v106 = v15;
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  __int128 v18 = v105;
  uint64_t v19 = v106;
  uint64_t v106 = 0LL;
  unint64_t v105 = 0uLL;
  if (*((void *)&v18 + 1)) {
    v12.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v18, *((uint64_t *)&v18 + 1), v19);
  }
LABEL_20:
  uint64_t v27 = v110;
  while (v27[2])
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      uint64_t v21 = v27[2];
      if (!v21) {
        goto LABEL_91;
      }
    }

    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      uint64_t v27 = (void *)result;
      uint64_t v21 = *(void *)(result + 16);
      if (!v21)
      {
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
    }

    uint64_t v22 = v21 - 1;
    uint64_t v23 = &v27[4 * v22];
    uint64_t v24 = v23[4];
    __int128 v25 = v23[5];
    uint64_t v26 = v23[6];
    void v27[2] = v22;
    unint64_t v110 = v27;
    if (v24)
    {
      specialized Rope.Builder._insertBeforeTip(_:)(v24, v25, v26);
      goto LABEL_20;
    }
  }

  uint64_t v94 = v10;
  uint64_t v28 = v105;
  uint64_t v29 = v106;
  unint64_t v105 = 0uLL;
  uint64_t v106 = 0LL;
  if (*((void *)&v28 + 1)) {
    v12.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v28, *((uint64_t *)&v28 + 1), v29);
  }
  __int128 v30 = *((void *)&v103 + 1);
  uint64_t v32 = *((void *)&v104 + 1);
  uint64_t v31 = v104;
  *(void *)&uint64_t v97 = 0LL;
  MEMORY[0x186E20E78](&v97, 8LL, v29, v12);
  uint64_t v33 = v97;
  for (i = (void *)v103; i[2]; uint64_t v33 = v44)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      unint64_t v35 = i[2];
      if (!v35) {
        goto LABEL_29;
      }
    }

    else
    {
      int64_t i = specialized _ArrayBuffer._consumeAndCreateNew()(i);
      unint64_t v35 = i[2];
      if (!v35)
      {
LABEL_29:
        __break(1u);
        break;
      }
    }

    uint64_t v36 = v35 - 1;
    uint64_t v37 = &i[4 * v36];
    uint64_t v38 = v37[4];
    uint64_t v39 = v37[5];
    uint64_t v40 = v37[6];
    uint64_t v41 = v37[7];
    i[2] = v36;
    __int128 v30 = specialized static Rope.join(_:_:)(v38, v39, v40, v41, v30, v31, v32);
    uint64_t v31 = v42;
    uint64_t v32 = v43;
  }

  *(void *)&uint64_t v103 = i;
  uint64_t *v6 = v30;
  v6[1] = v31;
  id v6[2] = v32;
  v6[3] = v33;
  char v96 = (unint64_t *)v6;
  uint64_t v45 = v105;
  unint64_t v46 = v107;
  __int128 v47 = v108;
  swift_bridgeObjectRelease();
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v45, *((uint64_t *)&v45 + 1));
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v46, v47);
  uint64_t result = swift_bridgeObjectRelease();
  if (v30) {
    uint64_t v48 = v32;
  }
  else {
    uint64_t v48 = 0LL;
  }
  uint64_t v49 = v48 - v94;
  if (__OFSUB__(v48, v94))
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  uint64_t v50 = a2 + v49;
  if (__OFADD__(a2, v49))
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  if (v50 >= 1 && v50 < v48)
  {
    AttributedString._InternalRuns._exactIndex(atUTF8Offset:)(a2 + v49, v30, v31, v32, v33, (unint64_t *)&v111);
    uint64_t v116 = v111;
    uint64_t v117 = v112;
    uint64_t result = outlined init with take of LocalePreferences?( (uint64_t)&v117,  (uint64_t)v118,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    uint64_t v52 = *((void *)&v116 + 1);
    char v113 = v116;
    char v114 = v117;
    if ((void)v116 == v33)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v118,  (uint64_t)&v119,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
      if (v119)
      {
        uint64_t v53 = v119 + 24 * ((v52 >> ((4 * *(_BYTE *)(v119 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v54 = *(void *)(v53 + 32);
        uint64_t v55 = *(void *)(v53 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30) {
          goto LABEL_43;
        }
      }

      else
      {
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v52, v30);
        uint64_t v54 = v62;
        uint64_t v55 = v63;
        swift_unknownObjectRelease();
        if (v30)
        {
LABEL_43:
          uint64_t v56 = *(unsigned __int8 *)(v30 + 18);
          swift_unknownObjectRetain();
          if (v52 > v56)
          {
LABEL_44:
            outlined init with take of LocalePreferences?( (uint64_t)v118,  (uint64_t)&v120,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
            if (v120 && (char v57 = (4 * *(_BYTE *)(v120 + 18) + 8) & 0x3C, ((v52 >> v57) & 0xF) != 0))
            {
              uint64_t v52 = ((((v52 >> v57) & 0xF) - 1) << v57) | ((-15LL << v57) - 1) & v52;
              *((void *)&v113 + 1) = v52;
              uint64_t result = swift_unknownObjectRelease();
            }

            else
            {
              swift_unknownObjectRetain();
              uint64_t v58 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v113, v30);
              uint64_t result = swift_unknownObjectRelease_n();
              if ((v58 & 1) == 0)
              {
LABEL_98:
                __break(1u);
                goto LABEL_99;
              }

              uint64_t v52 = *((void *)&v113 + 1);
            }

            if ((void)v113 != v33) {
              goto LABEL_96;
            }
            if (v114)
            {
              uint64_t v59 = v114 + 24 * ((v52 >> ((4 * *(_BYTE *)(v114 + 18) + 8) & 0x3C)) & 0xF);
              uint64_t v60 = *(void *)(v59 + 32);
              BOOL v61 = *(void *)(v59 + 40);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              goto LABEL_56;
            }

void *AttributedString.CharacterView.index(after:)@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *result >> 10;
  unint64_t v5 = v2[5] >> 10;
  if (v4 >= v2[1] >> 10 && v5 >= v4)
  {
    uint64_t v7 = *v2;
    __int128 v8 = *(_OWORD *)(*v2 + 16LL);
    __int128 v9 = *(_OWORD *)(*v2 + 48LL);
    v18[1] = *(_OWORD *)(*v2 + 32LL);
    void v18[2] = v9;
    v18[0] = v8;
    __int128 v10 = *(_OWORD *)(v7 + 16);
    v19[1] = *(_OWORD *)(v7 + 32);
    void v19[2] = v9;
    v19[0] = v10;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v19, (uint64_t)v20);
    outlined retain of Locale((uint64_t)v20);
    unint64_t v11 = BigString.index(after:)();
    unint64_t v13 = v12;
    unint64_t v15 = v14;
    unint64_t v17 = v16;
    uint64_t result = (void *)outlined release of Locale((uint64_t)v18);
    if (v5 >= v11 >> 10)
    {
      *a2 = v11;
      a2[1] = v13;
      a2[2] = v15;
      a2[3] = v17;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedString.CharacterView.index(before:)@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *result >> 10;
  unint64_t v5 = v2[1] >> 10;
  if (v4 >= v5 && v2[5] >> 10 >= v4)
  {
    uint64_t v7 = *v2;
    __int128 v8 = *(_OWORD *)(*v2 + 16LL);
    __int128 v9 = *(_OWORD *)(*v2 + 48LL);
    v18[1] = *(_OWORD *)(*v2 + 32LL);
    void v18[2] = v9;
    v18[0] = v8;
    __int128 v10 = *(_OWORD *)(v7 + 16);
    v19[1] = *(_OWORD *)(v7 + 32);
    void v19[2] = v9;
    v19[0] = v10;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v19, (uint64_t)v20);
    outlined retain of Locale((uint64_t)v20);
    unint64_t v11 = BigString.index(before:)();
    unint64_t v13 = v12;
    unint64_t v15 = v14;
    unint64_t v17 = v16;
    uint64_t result = (void *)outlined release of Locale((uint64_t)v18);
    if (v5 <= v11 >> 10)
    {
      *a2 = v11;
      a2[1] = v13;
      a2[2] = v15;
      a2[3] = v17;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(void *result)
{
  if (*result >> 10 < v1[1] >> 10)
  {
    __break(1u);
  }

  else if (v1[5] >> 10 >= result[4] >> 10)
  {
    uint64_t v2 = (_OWORD *)*v1;
    __int128 v3 = *(_OWORD *)(*v1 + 32LL);
    __int128 v25 = *(_OWORD *)(*v1 + 16LL);
    __int128 v26 = v3;
    __int128 v27 = v2[3];
    BigString.unicodeScalars.getter();
    uint64_t v4 = BigString.UnicodeScalarView.index(roundingDown:)();
    unint64_t v6 = v5;
    unint64_t v8 = v7;
    unint64_t v10 = v9;
    outlined release of Locale((uint64_t)v19);
    __int128 v11 = v2[2];
    __int128 v22 = v2[1];
    __int128 v23 = v11;
    __int128 v24 = v2[3];
    BigString.unicodeScalars.getter();
    uint64_t v12 = BigString.UnicodeScalarView.index(roundingDown:)();
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    unint64_t v18 = v17;
    outlined release of Locale((uint64_t)v20);
    v21[0] = v4;
    v21[1] = v6;
    _OWORD v21[2] = v8;
    uint64_t v21[3] = v10;
    v21[4] = v12;
    v21[5] = v14;
    v21[6] = v16;
    _OWORD v21[7] = v18;
    return (void *)specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v21);
  }

  __break(1u);
  return result;
}

void *specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(void *result, int a2)
{
  if (*result >> 10 < v2[1] >> 10)
  {
    __break(1u);
  }

  else if (v2[5] >> 10 >= result[4] >> 10)
  {
    __int128 v3 = (_OWORD *)*v2;
    __int128 v4 = *(_OWORD *)(*v2 + 32LL);
    __int128 v27 = *(_OWORD *)(*v2 + 16LL);
    __int128 v28 = v4;
    __int128 v29 = v3[3];
    BigString.unicodeScalars.getter();
    uint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
    unint64_t v7 = v6;
    unint64_t v9 = v8;
    unint64_t v11 = v10;
    outlined release of Locale((uint64_t)v21);
    __int128 v12 = v3[2];
    __int128 v24 = v3[1];
    __int128 v25 = v12;
    __int128 v26 = v3[3];
    BigString.unicodeScalars.getter();
    uint64_t v13 = BigString.UnicodeScalarView.index(roundingDown:)();
    unint64_t v15 = v14;
    unint64_t v17 = v16;
    unint64_t v19 = v18;
    outlined release of Locale((uint64_t)v22);
    v23[0] = v5;
    v23[1] = v7;
    v23[2] = v9;
    v23[3] = v11;
    uint64_t v23[4] = v13;
    v23[5] = v15;
    v23[6] = v17;
    _OWORD v23[7] = v19;
    return (void *)specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v23, a2);
  }

  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.init(repeating:count:)@<X0>( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v58[0] = 0LL;
  MEMORY[0x186E20E78](v58, 8LL);
  uint64_t v5 = v58[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v6 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0) {
    goto LABEL_10;
  }
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v54;
  *(_OWORD *)(v6 + 32) = v55;
  *(_OWORD *)(v6 + 48) = v56;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 72) = 0LL;
  *(void *)(v6 + 80) = 0LL;
  *(void *)(v6 + 88) = v5;
  uint64_t v8 = BigString.startIndex.getter();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = BigString.endIndex.getter();
  uint64_t v76 = v8;
  uint64_t v77 = v10;
  uint64_t v78 = v12;
  uint64_t v79 = v14;
  uint64_t v80 = v15;
  uint64_t v81 = v16;
  uint64_t v82 = v17;
  uint64_t v83 = v18;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v57);
  outlined release of Locale((uint64_t)v58);
  uint64_t result = swift_release();
  unint64_t v19 = v59;
  uint64_t v20 = v60;
  uint64_t v21 = v61;
  uint64_t v22 = v62;
  unint64_t v23 = v63;
  uint64_t v24 = v64;
  uint64_t v25 = v65;
  uint64_t v45 = (_OWORD *)v6;
  unint64_t v46 = v59;
  uint64_t v47 = v60;
  uint64_t v48 = v61;
  uint64_t v49 = v62;
  unint64_t v50 = v63;
  uint64_t v51 = v64;
  uint64_t v52 = v65;
  __int128 v53 = v66;
  if (a2)
  {
    if (a2 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }

    while (v50 >> 10 >= v46 >> 10)
    {
      __int128 v26 = v45[2];
      __int128 v73 = v45[1];
      __int128 v74 = v26;
      __int128 v75 = v45[3];
      BigString.unicodeScalars.getter();
      uint64_t v27 = BigString.UnicodeScalarView.index(roundingDown:)();
      unint64_t v29 = v28;
      unint64_t v31 = v30;
      uint64_t v44 = a2;
      unint64_t v33 = v32;
      outlined release of Locale((uint64_t)v67);
      __int128 v34 = v45[2];
      __int128 v70 = v45[1];
      __int128 v71 = v34;
      __int128 v72 = v45[3];
      BigString.unicodeScalars.getter();
      uint64_t v35 = BigString.UnicodeScalarView.index(roundingDown:)();
      unint64_t v37 = v36;
      unint64_t v39 = v38;
      unint64_t v41 = v40;
      outlined release of Locale((uint64_t)v68);
      v69[0] = v27;
      v69[1] = v29;
      v69[2] = v31;
      v69[3] = v33;
      v69[4] = v35;
      v69[5] = v37;
      v69[6] = v39;
      v69[7] = v41;
      uint64_t result = specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v69, a1);
      a2 = v44 - 1;
      if (v44 == 1)
      {
        uint64_t v6 = (uint64_t)v45;
        unint64_t v19 = v46;
        uint64_t v20 = v47;
        uint64_t v21 = v48;
        uint64_t v22 = v49;
        unint64_t v23 = v50;
        uint64_t v24 = v51;
        uint64_t v25 = v52;
        __int128 v42 = v53;
        goto LABEL_8;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  __int128 v42 = v66;
LABEL_8:
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v19;
  *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v20;
  *(void *)(a3 + 24) = v21;
  *(void *)(a3 + 32) = v22;
  *(void *)(a3 + 40) = v23;
  *(void *)(a3 + 48) = v24;
  *(void *)(a3 + 56) = v25;
  *(_OWORD *)(a3 + 64) = v42;
  return result;
}

uint64_t specialized RangeReplaceableCollection.init(repeating:count:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v55 = 0LL;
  MEMORY[0x186E20E78](&v55, 8LL);
  uint64_t v6 = v55;
  type metadata accessor for AttributedString.Guts();
  uint64_t v7 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0) {
    goto LABEL_10;
  }
  __int128 v9 = v65;
  *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v64;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)(v7 + 48) = v66;
  *(void *)(v7 + 64) = 0LL;
  *(void *)(v7 + 72) = 0LL;
  *(void *)(v7 + 80) = 0LL;
  *(void *)(v7 + 88) = v6;
  uint64_t v10 = BigString.startIndex.getter();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t result = BigString.endIndex.getter();
  __int128 v55 = (_OWORD *)v7;
  unint64_t v56 = v10;
  uint64_t v57 = v12;
  uint64_t v58 = v14;
  uint64_t v59 = v16;
  unint64_t v60 = result;
  uint64_t v61 = v17;
  uint64_t v62 = v18;
  __int128 v63 = v19;
  if (a3)
  {
    if (a3 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }

    while (1)
    {
      unint64_t v20 = v60;
      if (v60 >> 10 < v56 >> 10) {
        break;
      }
      uint64_t v22 = v62;
      uint64_t v21 = v63;
      uint64_t v23 = v61;
      uint64_t v24 = a3;
      uint64_t v25 = v55;
      __int128 v26 = v55[1];
      __int128 v27 = v55[3];
      v69[1] = v55[2];
      v69[2] = v27;
      v69[0] = v26;
      swift_bridgeObjectRetain();
      outlined retain of Locale((uint64_t)v69);
      uint64_t v28 = MEMORY[0x186E1AE90](v20, v23, v22, v21);
      unint64_t v30 = v29;
      unint64_t v53 = v32;
      unint64_t v54 = v31;
      outlined release of Locale((uint64_t)v69);
      __int128 v33 = v25[1];
      __int128 v34 = v25[3];
      v68[1] = v25[2];
      v68[2] = v34;
      v68[0] = v33;
      __int128 v35 = v25[1];
      v70[1] = v25[2];
      v70[2] = v34;
      v70[0] = v35;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v70, (uint64_t)v71);
      outlined retain of Locale((uint64_t)v71);
      uint64_t v36 = MEMORY[0x186E1AE90](v20, v23, v22, v21);
      unint64_t v38 = v37;
      unint64_t v40 = v39;
      unint64_t v42 = v41;
      outlined release of Locale((uint64_t)v68);
      v67[0] = v28;
      v67[1] = v30;
      v67[2] = v54;
      v67[3] = v53;
      v67[4] = v36;
      v67[5] = v38;
      v67[6] = v40;
      v67[7] = v42;
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v67, a1, a2);
      uint64_t result = swift_bridgeObjectRelease();
      a3 = v24 - 1;
      if (v24 == 1)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v7 = (uint64_t)v55;
        uint64_t v43 = v56;
        uint64_t v12 = v57;
        uint64_t v44 = v58;
        uint64_t v16 = v59;
        unint64_t v45 = v60;
        uint64_t v47 = v61;
        uint64_t v46 = v62;
        __int128 v48 = v63;
        goto LABEL_8;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v47 = v17;
  uint64_t v46 = v18;
  unint64_t v49 = v19;
  uint64_t v50 = result;
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v45 = v50;
  __int128 v48 = v49;
  uint64_t v44 = v14;
  uint64_t v43 = v10;
LABEL_8:
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = v43;
  *(void *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
  *(void *)(a4 + 24) = v44;
  *(void *)(a4 + 32) = v16;
  *(void *)(a4 + 40) = v45;
  *(void *)(a4 + 48) = v47;
  *(void *)(a4 + 56) = v46;
  *(_OWORD *)(a4 + 64) = v48;
  return result;
}

uint64_t specialized RangeReplaceableCollection.append<A>(contentsOf:)()
{
  __int16 v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __int128 v4 = (char *)&v22 - v3;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v25 = v4;
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v24 = AssociatedConformanceWitness;
  uint64_t result = dispatch thunk of IteratorProtocol.next()();
  if ((v32 & 1) != 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v26);
  }
  while (v1[5] >> 10 >= v1[1] >> 10)
  {
    int v30 = v31;
    uint64_t v7 = (_OWORD *)*v1;
    __int128 v8 = *(_OWORD *)(*v1 + 32LL);
    __int128 v39 = *(_OWORD *)(*v1 + 16LL);
    __int128 v40 = v8;
    __int128 v41 = v7[3];
    BigString.unicodeScalars.getter();
    uint64_t v9 = BigString.UnicodeScalarView.index(roundingDown:)();
    unint64_t v28 = v10;
    unint64_t v29 = v9;
    unint64_t v12 = v11;
    unint64_t v27 = v13;
    outlined release of Locale((uint64_t)&v33);
    __int128 v14 = v7[2];
    __int128 v36 = v7[1];
    __int128 v37 = v14;
    __int128 v38 = v7[3];
    BigString.unicodeScalars.getter();
    uint64_t v15 = BigString.UnicodeScalarView.index(roundingDown:)();
    unint64_t v17 = v16;
    unint64_t v19 = v18;
    unint64_t v21 = v20;
    outlined release of Locale((uint64_t)&v34);
    v35[0] = v29;
    v35[1] = v28;
    uint64_t v35[2] = v12;
    void v35[3] = v27;
    v35[4] = v15;
    v35[5] = v17;
    v35[6] = v19;
    v35[7] = v21;
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v35, v30);
    uint64_t result = dispatch thunk of IteratorProtocol.next()();
    if (v32 == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v26);
    }
  }

  __break(1u);
  return result;
}

{
  void *v0;
  void *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  char *v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void v31[2];
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40[8];
  _OWORD v41[3];
  _OWORD v42[3];
  __int128 v43[3];
  _BYTE v44[40];
  __int128 v45[3];
  _BYTE v46[48];
  __int16 v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31[0] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __int128 v4 = (char *)v31 - v3;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v32 = v4;
  uint64_t v33 = AssociatedTypeWitness;
  v31[1] = AssociatedConformanceWitness;
  while (1)
  {
    uint64_t result = dispatch thunk of IteratorProtocol.next()();
    uint64_t v7 = v39;
    if (!v39) {
      return (*(uint64_t (**)(char *, uint64_t))(v31[0] + 8LL))(v32, v33);
    }
    __int128 v8 = v1[5];
    if (v8 >> 10 < v1[1] >> 10) {
      break;
    }
    __int128 v37 = v38;
    uint64_t v9 = v1[7];
    unint64_t v10 = v1[8];
    unint64_t v11 = v1[6];
    unint64_t v12 = (_OWORD *)*v1;
    unint64_t v13 = *(_OWORD *)(*v1 + 16LL);
    __int128 v14 = *(_OWORD *)(*v1 + 48LL);
    v42[1] = *(_OWORD *)(*v1 + 32LL);
    v42[2] = v14;
    v42[0] = v13;
    uint64_t v15 = v12[1];
    v43[1] = v12[2];
    _OWORD v43[2] = v14;
    v43[0] = v15;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v43, (uint64_t)v44);
    outlined retain of Locale((uint64_t)v44);
    unint64_t v16 = MEMORY[0x186E1AE90](v8, v11, v9, v10);
    __int128 v35 = v17;
    __int128 v36 = v16;
    unint64_t v19 = v18;
    uint64_t v34 = v20;
    outlined release of Locale((uint64_t)v42);
    unint64_t v21 = v12[1];
    uint64_t v22 = v12[3];
    v41[1] = v12[2];
    _OWORD v41[2] = v22;
    v41[0] = v21;
    uint64_t v23 = v12[1];
    v45[1] = v12[2];
    _OWORD v45[2] = v22;
    v45[0] = v23;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v45, (uint64_t)v46);
    outlined retain of Locale((uint64_t)v46);
    uint64_t v24 = MEMORY[0x186E1AE90](v8, v11, v9, v10);
    uint64_t v26 = v25;
    unint64_t v28 = v27;
    int v30 = v29;
    outlined release of Locale((uint64_t)v41);
    v40[0] = v36;
    v40[1] = v19;
    void v40[2] = v35;
    _OWORD v40[3] = v34;
    v40[4] = v24;
    v40[5] = v26;
    v40[6] = v28;
    v40[7] = v30;
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v40, v37, v7);
    swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

void specialized RangeReplaceableCollection.removeFirst()()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[5];
  unint64_t v3 = v1 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v3 >= v2 >> 10)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = *v0;
  __int128 v8 = *(_OWORD *)(*v0 + 32LL);
  __int128 v24 = *(_OWORD *)(*v0 + 16LL);
  __int128 v25 = v8;
  __int128 v26 = *(_OWORD *)(v7 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v17);
  v16[0] = v1;
  v16[1] = v4;
  void v16[2] = v5;
  v16[3] = v6;
  uint64_t v9 = v0[8];
  unint64_t v13 = v2;
  __int128 v14 = *((_OWORD *)v0 + 3);
  uint64_t v15 = v9;
  AttributedString.UnicodeScalarView._index(_:offsetBy:limitedBy:)(v16, &v13, (unint64_t *)&v18);
  uint64_t v10 = v20;
  if (v20 != 2)
  {
    __int128 v11 = v18;
    if (v3 <= (unint64_t)v18 >> 10)
    {
      uint64_t v12 = v19;
      *(void *)&__int128 v18 = v1;
      *((void *)&v18 + 1) = v4;
      uint64_t v19 = v5;
      uint64_t v20 = v6;
      __int128 v21 = v11;
      uint64_t v22 = v12;
      uint64_t v23 = v10;
      specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(&v18);
      return;
    }

    goto LABEL_8;
  }

{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  void v18[4];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[3];
  __int128 v26[3];
  _BYTE v27[48];
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[5];
  unint64_t v3 = v1 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v3 >= v2 >> 10)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = *v0;
  __int128 v8 = *(_OWORD *)(*v0 + 16);
  uint64_t v9 = *(_OWORD *)(*v0 + 48);
  v25[1] = *(_OWORD *)(*v0 + 32);
  _OWORD v25[2] = v9;
  v25[0] = v8;
  uint64_t v10 = *(_OWORD *)(v7 + 16);
  v26[1] = *(_OWORD *)(v7 + 32);
  v26[2] = v9;
  v26[0] = v10;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v26, (uint64_t)v27);
  outlined retain of Locale((uint64_t)v27);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v25);
  v18[0] = v1;
  v18[1] = v4;
  void v18[2] = v5;
  _OWORD v18[3] = v6;
  __int128 v11 = v0[8];
  uint64_t v15 = v2;
  unint64_t v16 = *((_OWORD *)v0 + 3);
  unint64_t v17 = v11;
  AttributedString.CharacterView._index(_:offsetBy:limitedBy:)(v18, &v15, (unint64_t *)&v19);
  uint64_t v12 = v21;
  if (v21 != 2)
  {
    unint64_t v13 = v19;
    if (v3 <= (unint64_t)v19 >> 10)
    {
      __int128 v14 = v20;
      *(void *)&uint64_t v19 = v1;
      *((void *)&v19 + 1) = v4;
      uint64_t v20 = v5;
      __int128 v21 = v6;
      uint64_t v22 = v13;
      uint64_t v23 = v14;
      __int128 v24 = v12;
      specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)((uint64_t *)&v19);
      return;
    }

    goto LABEL_8;
  }

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)(uint64_t a1)
{
  return specialized RangeReplaceableCollection.removeFirst(_:)( a1,  (void *(*)(__int128 *__return_ptr, void *, uint64_t, _OWORD *))AttributedString.UnicodeScalarView._index(_:offsetBy:limitedBy:),  (uint64_t (*)(__int128 *))specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)( uint64_t result, void *(*a2)(__int128 *__return_ptr, void *, uint64_t, _OWORD *), uint64_t (*a3)(__int128 *))
{
  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t v5 = *(void *)(v3 + 8);
      uint64_t v6 = *(void *)(v3 + 16);
      uint64_t v7 = *(void *)(v3 + 24);
      uint64_t v8 = *(void *)(v3 + 32);
      v14[0] = v5;
      v14[1] = v6;
      void v14[2] = v7;
      uint64_t v14[3] = v8;
      __int128 v9 = *(_OWORD *)(v3 + 56);
      v13[0] = *(_OWORD *)(v3 + 40);
      v13[1] = v9;
      uint64_t result = (uint64_t)a2(&v15, v14, result, v13);
      uint64_t v10 = v17;
      if (v17 == 2)
      {
LABEL_9:
        __break(1u);
        return result;
      }

      __int128 v11 = v15;
      if ((unint64_t)v15 >> 10 >= v5 >> 10)
      {
        uint64_t v12 = v16;
        *(void *)&__int128 v15 = v5;
        *((void *)&v15 + 1) = v6;
        uint64_t v16 = v7;
        uint64_t v17 = v8;
        __int128 v18 = v11;
        uint64_t v19 = v12;
        uint64_t v20 = v10;
        return a3(&v15);
      }
    }

    __break(1u);
    goto LABEL_9;
  }

  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(uint64_t *))
{
  unint64_t v2 = (_OWORD *)*v1;
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[5];
  swift_retain();
  BigString.init()();
  uint64_t v62 = 0LL;
  MEMORY[0x186E20E78](&v62, 8LL);
  uint64_t v5 = v62;
  type metadata accessor for AttributedString.Guts();
  uint64_t v6 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }

  unint64_t v60 = v2;
  uint64_t v52 = v1;
  __int128 v8 = v73;
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v72;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v74;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 72) = 0LL;
  *(void *)(v6 + 80) = 0LL;
  *(void *)(v6 + 88) = v5;
  uint64_t v9 = BigString.startIndex.getter();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = BigString.endIndex.getter();
  uint64_t v102 = v9;
  uint64_t v103 = v11;
  uint64_t v104 = v13;
  uint64_t v105 = v15;
  uint64_t v106 = v16;
  uint64_t v107 = v17;
  uint64_t v108 = v18;
  uint64_t v109 = v19;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v75);
  outlined release of Locale((uint64_t)v76);
  uint64_t result = swift_release();
  uint64_t v20 = v78;
  uint64_t v21 = v79;
  uint64_t v22 = v80;
  unint64_t v23 = v3;
  uint64_t v24 = v81;
  uint64_t v25 = v82;
  uint64_t v26 = v83;
  unint64_t v27 = v84;
  __int128 v63 = (_OWORD *)v6;
  unint64_t v64 = v77;
  uint64_t v65 = v78;
  uint64_t v66 = v79;
  uint64_t v67 = v80;
  unint64_t v68 = v81;
  uint64_t v69 = v82;
  uint64_t v70 = v83;
  unint64_t v28 = v4 >> 10;
  __int128 v71 = v84;
  unint64_t v59 = v23 >> 10;
  if (v23 >> 10 != v4 >> 10)
  {
    uint64_t v57 = v60 + 1;
    unint64_t v32 = v23;
    unint64_t v61 = v4 >> 10;
    while (v32 >> 10 >= v59 && v32 >> 10 < v28)
    {
      __int128 v48 = v60[2];
      __int128 v99 = *v57;
      __int128 v100 = v48;
      __int128 v101 = v60[3];
      BigString.unicodeScalars.getter();
      int v49 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v85);
      __int128 v50 = v60[2];
      __int128 v96 = *v57;
      __int128 v97 = v50;
      __int128 v98 = v60[3];
      BigString.unicodeScalars.getter();
      swift_retain();
      unint64_t v32 = BigString.UnicodeScalarView.index(after:)();
      outlined release of Locale((uint64_t)v86);
      uint64_t result = swift_release();
      if (v61 < v32 >> 10) {
        goto LABEL_21;
      }
      LODWORD(v62) = v49;
      uint64_t v51 = v110;
      uint64_t result = a1(&v62);
      uint64_t v110 = v51;
      if (v51) {
        goto LABEL_16;
      }
      if ((result & 1) == 0)
      {
        if (v68 >> 10 < v64 >> 10)
        {
          __break(1u);
LABEL_16:
          swift_release();
          return swift_release();
        }

        uint64_t v33 = v63;
        __int128 v34 = v63[2];
        __int128 v93 = v63[1];
        __int128 v94 = v34;
        __int128 v95 = v63[3];
        BigString.unicodeScalars.getter();
        uint64_t v35 = BigString.UnicodeScalarView.index(roundingDown:)();
        unint64_t v55 = v36;
        unint64_t v56 = v35;
        unint64_t v53 = v38;
        unint64_t v54 = v37;
        outlined release of Locale((uint64_t)v87);
        __int128 v39 = v33[2];
        __int128 v90 = v33[1];
        __int128 v91 = v39;
        __int128 v92 = v33[3];
        BigString.unicodeScalars.getter();
        uint64_t v40 = BigString.UnicodeScalarView.index(roundingDown:)();
        unint64_t v42 = v41;
        unint64_t v44 = v43;
        unint64_t v46 = v45;
        outlined release of Locale((uint64_t)v88);
        v89[0] = v56;
        v89[1] = v55;
        void v89[2] = v54;
        v89[3] = v53;
        v89[4] = v40;
        v89[5] = v42;
        v89[6] = v44;
        v89[7] = v46;
        uint64_t result = specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v89, v49);
      }

      unint64_t v28 = v61;
      if (v32 >> 10 == v61)
      {
        uint64_t result = swift_release_n();
        uint64_t v6 = (uint64_t)v63;
        uint64_t v30 = v64;
        uint64_t v20 = v65;
        uint64_t v21 = v66;
        uint64_t v22 = v67;
        uint64_t v24 = v68;
        uint64_t v25 = v69;
        uint64_t v26 = v70;
        __int128 v31 = v71;
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v29 = v77;
  uint64_t result = swift_release_n();
  uint64_t v30 = v29;
  __int128 v31 = v27;
LABEL_18:
  *uint64_t v52 = v6;
  v52[1] = v30;
  v52[2] = v20;
  v52[3] = v21;
  v52[4] = v22;
  void v52[5] = v24;
  v52[6] = v25;
  v52[7] = v26;
  *((_OWORD *)v52 + 4) = v31;
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(void *))
{
  unint64_t v2 = v1;
  unint64_t v3 = v1[1];
  uint64_t v80 = (_OWORD *)*v1;
  unint64_t v4 = v1[5];
  swift_retain();
  BigString.init()();
  v82[0] = 0LL;
  MEMORY[0x186E20E78](v82, 8LL);
  uint64_t v5 = v82[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v6 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }

  __int128 v8 = v93;
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v92;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v94;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 72) = 0LL;
  *(void *)(v6 + 80) = 0LL;
  *(void *)(v6 + 88) = v5;
  uint64_t v9 = BigString.startIndex.getter();
  uint64_t v11 = v10;
  unint64_t v12 = v4;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t result = BigString.endIndex.getter();
  uint64_t v83 = (_OWORD *)v6;
  unint64_t v84 = v9;
  uint64_t v74 = v9;
  uint64_t v76 = v11;
  uint64_t v85 = v11;
  uint64_t v86 = v14;
  uint64_t v87 = v16;
  unint64_t v88 = result;
  uint64_t v89 = v17;
  uint64_t v90 = v18;
  __int128 v91 = v19;
  unint64_t v81 = v12 >> 10;
  unint64_t v79 = v3 >> 10;
  if (v3 >> 10 != v12 >> 10)
  {
    uint64_t v69 = v1;
    unint64_t v32 = v80 + 1;
    unint64_t v33 = v12 >> 10;
    while (v3 >> 10 >= v79 && v3 >> 10 < v33)
    {
      __int128 v57 = *v32;
      __int128 v58 = v80[3];
      v99[1] = v80[2];
      v99[2] = v58;
      v99[0] = v57;
      __int128 v59 = *v32;
      v100[1] = v80[2];
      v100[2] = v58;
      v100[0] = v59;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v100, (uint64_t)v101);
      outlined retain of Locale((uint64_t)v101);
      uint64_t v60 = BigString.subscript.getter();
      uint64_t v62 = v61;
      outlined release of Locale((uint64_t)v99);
      __int128 v63 = *v32;
      __int128 v64 = v80[3];
      v98[1] = v80[2];
      v98[2] = v64;
      v98[0] = v63;
      swift_retain();
      outlined retain of Locale((uint64_t)v98);
      unint64_t v33 = v81;
      unint64_t v3 = BigString.index(after:)();
      outlined release of Locale((uint64_t)v98);
      uint64_t result = swift_release();
      unint64_t v65 = v3 >> 10;
      if (v81 < v3 >> 10) {
        goto LABEL_21;
      }
      v82[0] = v60;
      v82[1] = v62;
      uint64_t v66 = v106;
      char v67 = a1(v82);
      uint64_t v106 = v66;
      if (v66) {
        goto LABEL_16;
      }
      if ((v67 & 1) == 0)
      {
        unint64_t v68 = v88;
        if (v88 >> 10 < v84 >> 10)
        {
          __break(1u);
LABEL_16:
          swift_release();
          swift_bridgeObjectRelease();
          return swift_release();
        }

        uint64_t v75 = v60;
        unint64_t v77 = v3;
        uint64_t v35 = v90;
        uint64_t v34 = v91;
        uint64_t v36 = v89;
        unint64_t v37 = v83;
        __int128 v38 = v83[1];
        __int128 v39 = v83[3];
        v97[1] = v83[2];
        v97[2] = v39;
        v97[0] = v38;
        __int128 v40 = v83[1];
        v102[1] = v83[2];
        v102[2] = v39;
        v102[0] = v40;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v102, (uint64_t)v103);
        outlined retain of Locale((uint64_t)v103);
        uint64_t v41 = MEMORY[0x186E1AE90](v68, v36, v35, v34);
        unint64_t v72 = v42;
        unint64_t v73 = v41;
        unint64_t v70 = v44;
        unint64_t v71 = v43;
        outlined release of Locale((uint64_t)v97);
        __int128 v45 = v37[1];
        __int128 v46 = v37[3];
        v96[1] = v37[2];
        v96[2] = v46;
        v96[0] = v45;
        __int128 v47 = v37[1];
        v104[1] = v37[2];
        v104[2] = v46;
        v104[0] = v47;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v104, (uint64_t)v105);
        outlined retain of Locale((uint64_t)v105);
        uint64_t v48 = v35;
        unint64_t v3 = v77;
        uint64_t v49 = MEMORY[0x186E1AE90](v68, v36, v48, v34);
        unint64_t v51 = v50;
        unint64_t v53 = v52;
        unint64_t v55 = v54;
        outlined release of Locale((uint64_t)v96);
        v95[0] = v73;
        v95[1] = v72;
        v95[2] = v71;
        v95[3] = v70;
        v95[4] = v49;
        v95[5] = v51;
        unint64_t v33 = v81;
        v95[6] = v53;
        v95[7] = v55;
        specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v95, v75, v62);
      }

      uint64_t result = swift_bridgeObjectRelease();
      if (v65 == v33)
      {
        uint64_t result = swift_release_n();
        uint64_t v6 = (uint64_t)v83;
        unint64_t v31 = v84;
        uint64_t v30 = v85;
        uint64_t v21 = v86;
        uint64_t v22 = v87;
        unint64_t v28 = v88;
        uint64_t v27 = v89;
        uint64_t v26 = v90;
        __int128 v29 = v91;
        unint64_t v2 = v69;
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v20 = v19;
  uint64_t v21 = v14;
  uint64_t v22 = v16;
  uint64_t v23 = result;
  uint64_t v24 = v17;
  uint64_t v25 = v18;
  uint64_t result = swift_release_n();
  uint64_t v26 = v25;
  uint64_t v27 = v24;
  unint64_t v28 = v23;
  __int128 v29 = v20;
  unint64_t v31 = v74;
  uint64_t v30 = v76;
LABEL_18:
  *unint64_t v2 = v6;
  v2[1] = v31;
  void v2[2] = v30;
  v2[3] = v21;
  void v2[4] = v22;
  v2[5] = v28;
  v2[6] = v27;
  v2[7] = v26;
  *((_OWORD *)v2 + 4) = v29;
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.characters.getter in conformance AttributedString@<X0>( void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = BigString.startIndex.getter();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = BigString.endIndex.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v8;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  a1[8] = v14;
  a1[9] = 0LL;
  return swift_retain();
}

uint64_t AttributedString.characters.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = BigString.startIndex.getter();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = BigString.endIndex.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v8;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  a1[8] = v14;
  a1[9] = 0LL;
  return swift_retain();
}

void *specialized Rope.update<A>(at:by:)(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (!*a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = result;
  uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)v9);
  v8[0] = v9[0];
  v8[1] = v9[1];
  _OWORD v8[2] = v9[2];
  if (__OFADD__(*((void *)&v9[0] + 1), a3))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  *((void *)&v8[0] + 1) = *((void *)&v9[0] + 1) + a3;
  a2[3] = v3 + 1;
  void *v6 = v3 + 1;
  if (*a2)
  {
    id v6[2] = specialized Rope._Node._finalizeModify(_:)(&v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }

{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  _OWORD v8[3];
  _OWORD v9[3];
  uint64_t v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (!*a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = result;
  uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)v9);
  v8[0] = v9[0];
  v8[1] = v9[1];
  _OWORD v8[2] = v9[2];
  if (__OFADD__(*((void *)&v9[0] + 1), a3))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  *((void *)&v8[0] + 1) = *((void *)&v9[0] + 1) + a3;
  a2[3] = v3 + 1;
  void *v6 = v3 + 1;
  if (*a2)
  {
    id v6[2] = specialized Rope._Node._finalizeModify(_:)(&v7, v8);
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }

uint64_t AttributedString.CharacterView.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v16 = 0LL;
  MEMORY[0x186E20E78](&v16, 8LL);
  uint64_t v2 = v16;
  type metadata accessor for AttributedString.Guts();
  uint64_t v3 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __int128 v5 = v18;
    *(_OWORD *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v19;
    *(void *)(v3 + 64) = 0LL;
    *(void *)(v3 + 72) = 0LL;
    *(void *)(v3 + 80) = 0LL;
    *(void *)(v3 + 88) = v2;
    uint64_t v6 = BigString.startIndex.getter();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t result = BigString.endIndex.getter();
    *a1 = v3;
    a1[1] = v6;
    a1[2] = v8;
    a1[3] = v10;
    a1[4] = v12;
    a1[5] = result;
    a1[6] = v13;
    a1[7] = v14;
    a1[8] = v15;
    a1[9] = 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t key path getter for AttributedString.characters : AttributedString@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = BigString.startIndex.getter();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = BigString.endIndex.getter();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v6;
  a2[3] = v8;
  a2[4] = v10;
  a2[5] = v11;
  a2[6] = v12;
  a2[7] = v13;
  a2[8] = v14;
  a2[9] = 0LL;
  return swift_retain();
}

uint64_t key path setter for AttributedString.characters : AttributedString(uint64_t *a1)
{
  uint64_t v1 = a1[9];
  uint64_t v3 = *a1;
  __int128 v4 = *(_OWORD *)(a1 + 1);
  __int128 v5 = *(_OWORD *)(a1 + 3);
  __int128 v6 = *(_OWORD *)(a1 + 5);
  __int128 v7 = *(_OWORD *)(a1 + 7);
  uint64_t v8 = v1;
  swift_retain();
  return AttributedString.characters.setter(&v3);
}

uint64_t AttributedString.characters.setter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (_OWORD *)*a1;
  uint64_t v4 = a1[1];
  __int128 v5 = (_OWORD *)a1[2];
  unint64_t v6 = a1[3];
  uint64_t v75 = a1[5];
  uint64_t v76 = a1[4];
  uint64_t v7 = a1[7];
  uint64_t v74 = a1[6];
  unint64_t v8 = a1[8];
  __int128 v9 = *(_OWORD *)(*(void *)v1 + 16LL);
  __int128 v10 = *(_OWORD *)(*(void *)v1 + 48LL);
  v94[4] = *(_OWORD *)(*(void *)v1 + 32LL);
  v94[5] = v10;
  v94[3] = v9;
  unint64_t v11 = BigString.startIndex.getter();
  uint64_t v70 = v13;
  uint64_t v71 = v12;
  uint64_t v69 = v14;
  unint64_t v15 = BigString.endIndex.getter();
  unint64_t v72 = v11;
  unint64_t v19 = v11 >> 10;
  if (v15 >> 10 < v19)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }

  char v67 = v3;
  unint64_t v68 = v15 >> 10;
  uint64_t v58 = v18;
  uint64_t v59 = v17;
  uint64_t v60 = v16;
  unint64_t v61 = v15;
  unint64_t v62 = v6;
  __int128 v63 = v5;
  uint64_t v64 = v4;
  unint64_t v65 = v8;
  uint64_t v66 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unint64_t v20 = *(void **)v1;
    __int128 v21 = *(_OWORD *)(*(void *)v1 + 16LL);
    __int128 v22 = *(_OWORD *)(*(void *)v1 + 48LL);
    v94[1] = *(_OWORD *)(*(void *)v1 + 32LL);
    v94[2] = v22;
    v94[0] = v21;
    uint64_t v23 = v20[8];
    uint64_t v24 = v20[9];
    uint64_t v25 = v20[10];
    uint64_t v26 = v20[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v94);
    swift_unknownObjectRetain();
    *(void *)uint64_t v2 = AttributedString.Guts.init(string:runs:)(v94, v23, v24, v25, v26);
    swift_release();
  }

  __int128 v5 = *(_OWORD **)v2;
  __int128 v27 = *(_OWORD *)(*(void *)v2 + 32LL);
  v93[3] = *(_OWORD *)(*(void *)v2 + 16LL);
  v93[4] = v27;
  v93[5] = v5[3];
  unint64_t v6 = BigString.startIndex.getter();
  unint64_t v8 = BigString.endIndex.getter();
  unint64_t v77 = v5;
  uint64_t v28 = one-time initialization token for currentIdentity;
  swift_retain();
  if (v28 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  __int128 v29 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  uint64_t v30 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v30);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v29, (uint64_t *)v83);
  os_unfair_lock_unlock(v30);
  swift_release();
  uint64_t v31 = *(void *)&v83[0];
  uint64_t v78 = *(void *)&v83[0];
  BigString.init()();
  *(void *)&v83[0] = 0LL;
  MEMORY[0x186E20E78](v83, 8LL);
  uint64_t v32 = *(void *)&v83[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v33 = swift_allocObject();
  if ((BigString.isEmpty.getter() & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  *(_OWORD *)(v33 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v79;
  *(_OWORD *)(v33 + 32) = v80;
  *(_OWORD *)(v33 + 48) = v81;
  *(void *)(v33 + 64) = 0LL;
  *(void *)(v33 + 72) = 0LL;
  *(void *)(v33 + 80) = 0LL;
  *(void *)(v33 + 88) = v32;
  *(void *)uint64_t v2 = v33;
  swift_release();
  if (v19 < v6 >> 10 || v8 >> 10 < v68) {
    goto LABEL_13;
  }
  __int128 v35 = v5[1];
  __int128 v36 = v5[2];
  uint64_t v34 = v5 + 1;
  __int128 v37 = v34[2];
  v93[1] = v36;
  v93[2] = v37;
  v93[0] = v35;
  __int128 v38 = *v34;
  v95[1] = v34[1];
  v95[2] = v37;
  v95[0] = v38;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v95, (uint64_t)v96);
  outlined retain of Locale((uint64_t)v96);
  uint64_t v39 = MEMORY[0x186E1AE90](v72, v71, v70, v69);
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v73 = v31;
  uint64_t v45 = v44;
  outlined release of Locale((uint64_t)v93);
  __int128 v46 = *v34;
  __int128 v47 = v34[2];
  v92[1] = v34[1];
  v92[2] = v47;
  v92[0] = v46;
  __int128 v48 = *v34;
  v97[1] = v34[1];
  v97[2] = v47;
  v97[0] = v48;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v97, (uint64_t)v98);
  outlined retain of Locale((uint64_t)v98);
  uint64_t v49 = MEMORY[0x186E1AE90](v61, v60, v59, v58);
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  outlined release of Locale((uint64_t)v92);
  v82[0] = v39;
  v82[1] = v41;
  void v82[2] = v43;
  v82[3] = v45;
  v82[4] = v49;
  v82[5] = v51;
  v82[6] = v53;
  v82[7] = v55;
  __int128 v56 = v67[2];
  v83[0] = v67[1];
  v83[1] = v56;
  v83[2] = v67[3];
  uint64_t v84 = v64;
  uint64_t v85 = v63;
  unint64_t v86 = v62;
  uint64_t v87 = v76;
  uint64_t v88 = v75;
  uint64_t v89 = v74;
  uint64_t v90 = v66;
  unint64_t v91 = v65;
  swift_unknownObjectRetain();
  swift_retain();
  specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v82, (uint64_t)v83);
  swift_unknownObjectRelease();
  swift_release();
  if (v78 == v73)
  {
    *(void *)uint64_t v2 = v77;
    swift_release();
    return swift_release();
  }

uint64_t AttributedString.characters.modify(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0xF8uLL);
  *a1 = v4;
  v4[29] = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v5 = (void *)*v2;
    __int128 v7 = *(_OWORD *)(*v2 + 32);
    __int128 v6 = *(_OWORD *)(*v2 + 48);
    *((_OWORD *)v4 + 5) = *(_OWORD *)(*v2 + 16);
    *((_OWORD *)v4 + 6) = v7;
    *((_OWORD *)v4 + 7) = v6;
    uint64_t v8 = v5[8];
    uint64_t v9 = v5[9];
    uint64_t v10 = v5[10];
    uint64_t v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)(v4 + 10));
    swift_unknownObjectRetain();
    *uint64_t v2 = AttributedString.Guts.init(string:runs:)((_OWORD *)v4 + 5, v8, v9, v10, v11);
    swift_release();
  }

  uint64_t v12 = *v2;
  __int128 v14 = *(_OWORD *)(*v2 + 32);
  __int128 v13 = *(_OWORD *)(*v2 + 48);
  *((_OWORD *)v4 + 8) = *(_OWORD *)(*v2 + 16);
  *((_OWORD *)v4 + 9) = v14;
  *((_OWORD *)v4 + 10) = v13;
  uint64_t v15 = BigString.startIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = BigString.endIndex.getter();
  *uint64_t v4 = v12;
  v4[1] = v15;
  v4[2] = v17;
  uint64_t v4[3] = v19;
  v4[4] = v21;
  void v4[5] = v22;
  v4[6] = v23;
  v4[7] = v24;
  v4[8] = v25;
  uint64_t v26 = one-time initialization token for currentIdentity;
  swift_retain();
  if (v26 != -1) {
    swift_once();
  }
  __int128 v27 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  uint64_t v28 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v28);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v27, &v34);
  os_unfair_lock_unlock(v28);
  swift_release();
  uint64_t v29 = v34;
  v4[30] = v34;
  v4[9] = v29;
  BigString.init()();
  v4[28] = 0LL;
  MEMORY[0x186E20E78](v4 + 28, 8LL);
  uint64_t v30 = v4[28];
  type metadata accessor for AttributedString.Guts();
  uint64_t v31 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __int128 v33 = *((_OWORD *)v4 + 12);
    *(_OWORD *)(v31 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *((_OWORD *)v4 + 11);
    *(_OWORD *)(v31 + 32) = v33;
    *(_OWORD *)(v31 + 48) = *((_OWORD *)v4 + 13);
    *(void *)(v31 + 64) = 0LL;
    *(void *)(v31 + 72) = 0LL;
    *(void *)(v31 + 80) = 0LL;
    *(void *)(v31 + 88) = v30;
    *uint64_t v2 = v31;
    swift_release();
    return (uint64_t)AttributedString.characters.modify;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void AttributedString.characters.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  if (*(void *)(*(void *)a1 + 72LL) == *(void *)(*(void *)a1 + 240LL))
  {
    *v1[29] = *v1;
    swift_retain();
    swift_release();
    swift_release();
    free(v1);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

uint64_t *specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(uint64_t *result)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >> 10 < v1[1] >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = result[4];
    if (v1[5] >> 10 >= v3 >> 10)
    {
      uint64_t v4 = result[1];
      uint64_t v5 = result[2];
      uint64_t v6 = result[3];
      uint64_t v7 = result[6];
      uint64_t v30 = result[7];
      uint64_t v8 = result[5];
      uint64_t v9 = (_OWORD *)*v1;
      __int128 v10 = *(_OWORD *)(*v1 + 16LL);
      __int128 v11 = *(_OWORD *)(*v1 + 48LL);
      v33[1] = *(_OWORD *)(*v1 + 32LL);
      v33[2] = v11;
      v33[0] = v10;
      __int128 v12 = v9[1];
      v34[1] = v9[2];
      v34[2] = v11;
      v34[0] = v12;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v34, (uint64_t)v35);
      outlined retain of Locale((uint64_t)v35);
      uint64_t v13 = MEMORY[0x186E1AE90](v2, v4, v5, v6);
      unint64_t v15 = v14;
      unint64_t v17 = v16;
      unint64_t v19 = v18;
      outlined release of Locale((uint64_t)v33);
      __int128 v20 = v9[1];
      __int128 v21 = v9[3];
      v32[1] = v9[2];
      void v32[2] = v21;
      v32[0] = v20;
      __int128 v22 = v9[1];
      v36[1] = v9[2];
      uint64_t v36[2] = v21;
      v36[0] = v22;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v36, (uint64_t)v37);
      outlined retain of Locale((uint64_t)v37);
      uint64_t v23 = MEMORY[0x186E1AE90](v3, v8, v7, v30);
      unint64_t v25 = v24;
      unint64_t v27 = v26;
      unint64_t v29 = v28;
      outlined release of Locale((uint64_t)v32);
      v31[0] = v13;
      v31[1] = v15;
      v31[2] = v17;
      v31[3] = v19;
      v31[4] = v23;
      v31[5] = v25;
      v31[6] = v27;
      v31[7] = v29;
      return (uint64_t *)specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v31);
    }
  }

  __break(1u);
  return result;
}

uint64_t *specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)( uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *result;
  if ((unint64_t)*result >> 10 < v3[1] >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = result[4];
    if (v3[5] >> 10 >= v5 >> 10)
    {
      uint64_t v7 = result[1];
      uint64_t v6 = result[2];
      uint64_t v8 = result[3];
      uint64_t v9 = result[6];
      uint64_t v32 = result[7];
      uint64_t v10 = result[5];
      __int128 v11 = (_OWORD *)*v3;
      __int128 v12 = *(_OWORD *)(*v3 + 16LL);
      __int128 v13 = *(_OWORD *)(*v3 + 48LL);
      v37[1] = *(_OWORD *)(*v3 + 32LL);
      void v37[2] = v13;
      v37[0] = v12;
      __int128 v14 = v11[1];
      v38[1] = v11[2];
      void v38[2] = v13;
      v38[0] = v14;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
      outlined retain of Locale((uint64_t)v39);
      uint64_t v15 = MEMORY[0x186E1AE90](v4, v7, v6, v8);
      unint64_t v17 = v16;
      unint64_t v19 = v18;
      unint64_t v21 = v20;
      outlined release of Locale((uint64_t)v37);
      __int128 v22 = v11[1];
      __int128 v23 = v11[3];
      v36[1] = v11[2];
      uint64_t v36[2] = v23;
      v36[0] = v22;
      __int128 v24 = v11[1];
      v40[1] = v11[2];
      void v40[2] = v23;
      v40[0] = v24;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v40, (uint64_t)v41);
      outlined retain of Locale((uint64_t)v41);
      uint64_t v25 = MEMORY[0x186E1AE90](v5, v10, v9, v32);
      unint64_t v27 = v26;
      unint64_t v29 = v28;
      unint64_t v31 = v30;
      outlined release of Locale((uint64_t)v36);
      v35[0] = v15;
      v35[1] = v17;
      uint64_t v35[2] = v19;
      void v35[3] = v21;
      v35[4] = v25;
      v35[5] = v27;
      v35[6] = v29;
      v35[7] = v31;
      return (uint64_t *)specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v35, a2, a3);
    }
  }

  __break(1u);
  return result;
}

uint64_t *specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  if ((unint64_t)*result >> 10 < v2[1] >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t v4 = result[4];
    if (v2[5] >> 10 >= v4 >> 10)
    {
      uint64_t v6 = result[1];
      uint64_t v7 = result[2];
      uint64_t v8 = result[3];
      uint64_t v9 = result[7];
      uint64_t v37 = result[6];
      uint64_t v38 = result[5];
      uint64_t v10 = (_OWORD *)*v2;
      __int128 v11 = *(_OWORD *)(*v2 + 16LL);
      __int128 v12 = *(_OWORD *)(*v2 + 48LL);
      v48[1] = *(_OWORD *)(*v2 + 32LL);
      void v48[2] = v12;
      v48[0] = v11;
      __int128 v13 = v10[1];
      v49[1] = v10[2];
      _OWORD v49[2] = v12;
      v49[0] = v13;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v49, (uint64_t)v50);
      outlined retain of Locale((uint64_t)v50);
      uint64_t v14 = MEMORY[0x186E1AE90](v3, v6, v7, v8);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      outlined release of Locale((uint64_t)v48);
      __int128 v21 = v10[1];
      __int128 v22 = v10[3];
      v47[1] = v10[2];
      v47[2] = v22;
      v47[0] = v21;
      __int128 v23 = v10[1];
      v51[1] = v10[2];
      _OWORD v51[2] = v22;
      v51[0] = v23;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v51, (uint64_t)v52);
      outlined retain of Locale((uint64_t)v52);
      uint64_t v24 = MEMORY[0x186E1AE90](v4, v38, v37, v9);
      uint64_t v26 = v25;
      uint64_t v28 = v27;
      uint64_t v30 = v29;
      outlined release of Locale((uint64_t)v47);
      v44[0] = v14;
      v44[1] = v16;
      _OWORD v44[2] = v18;
      v44[3] = v20;
      v44[4] = v24;
      v44[5] = v26;
      v44[6] = v28;
      v44[7] = v30;
      __int128 v31 = *(_OWORD *)(a2 + 16);
      v45[7] = *(_OWORD *)a2;
      v45[8] = v31;
      __int128 v32 = *(_OWORD *)(a2 + 48);
      v45[9] = *(_OWORD *)(a2 + 32);
      v45[10] = v32;
      __int128 v33 = *(_OWORD **)(a2 + 64);
      __int128 v34 = v33[1];
      __int128 v35 = v33[3];
      v46[1] = v33[2];
      _OWORD v46[2] = v35;
      v46[0] = v34;
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Locale((uint64_t)v46);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v46);
      outlined release of Locale((uint64_t)v39);
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      __int128 v36 = v33[2];
      v45[0] = v33[1];
      v45[1] = v36;
      _OWORD v45[2] = v33[3];
      v45[3] = v40;
      v45[4] = v41;
      v45[5] = v42;
      v45[6] = v43;
      swift_unknownObjectRetain();
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v44, (uint64_t)v45);
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      return (uint64_t *)swift_unknownObjectRelease();
    }
  }

  __break(1u);
  return result;
}

uint64_t *AttributedString.CharacterView.replaceSubrange<A>(_:with:)( uint64_t *result, __int128 *a2, ValueMetadata *a3)
{
  uint64_t v4 = *result;
  if ((unint64_t)*result >> 10 < v3[1] >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v5 = result[4];
  if (v3[5] >> 10 < v5 >> 10)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v8 = result[1];
  uint64_t v7 = result[2];
  uint64_t v9 = result[3];
  uint64_t v10 = result[6];
  uint64_t v46 = result[5];
  uint64_t v11 = result[7];
  __int128 v12 = (_OWORD *)*v3;
  __int128 v13 = *(_OWORD *)(*v3 + 16LL);
  __int128 v14 = *(_OWORD *)(*v3 + 48LL);
  v66[1] = *(_OWORD *)(*v3 + 32LL);
  v66[2] = v14;
  v66[0] = v13;
  __int128 v15 = v12[1];
  v67[1] = v12[2];
  v67[2] = v14;
  v67[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v67, (uint64_t)v68);
  outlined retain of Locale((uint64_t)v68);
  uint64_t v16 = MEMORY[0x186E1AE90](v4, v8, v7, v9);
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  unint64_t v22 = v21;
  outlined release of Locale((uint64_t)v66);
  __int128 v23 = v12[1];
  __int128 v24 = v12[3];
  v65[1] = v12[2];
  _OWORD v65[2] = v24;
  v65[0] = v23;
  __int128 v25 = v12[1];
  v69[1] = v12[2];
  v69[2] = v24;
  v69[0] = v25;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v69, (uint64_t)v70);
  outlined retain of Locale((uint64_t)v70);
  uint64_t v26 = MEMORY[0x186E1AE90](v5, v46, v10, v11);
  unint64_t v28 = v27;
  unint64_t v30 = v29;
  unint64_t v32 = v31;
  outlined release of Locale((uint64_t)v65);
  v62[0] = v16;
  v62[1] = v18;
  v62[2] = v20;
  v62[3] = v22;
  v62[4] = v26;
  v62[5] = v28;
  v62[6] = v30;
  v62[7] = v32;
  if (a3 == &type metadata for AttributedString.CharacterView)
  {
    uint64_t v33 = *(void *)a2;
    __int128 v34 = *(_OWORD *)(*(void *)a2 + 32LL);
    __int128 v48 = *(_OWORD *)(*(void *)a2 + 16LL);
    __int128 v49 = v34;
    __int128 v35 = *(__int128 *)((char *)a2 + 8);
    __int128 v50 = *(_OWORD *)(v33 + 48);
    __int128 v51 = v35;
    __int128 v36 = *(__int128 *)((char *)a2 + 40);
    __int128 v52 = *(__int128 *)((char *)a2 + 24);
    __int128 v53 = v36;
    __int128 v54 = *(__int128 *)((char *)a2 + 56);
    swift_unknownObjectRetain();
    swift_retain();
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v62, (uint64_t)&v48);
    swift_unknownObjectRelease();
    return (uint64_t *)swift_release();
  }

  else if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<AttributedString.CharacterView>) == a3)
  {
    __int128 v37 = a2[3];
    __int128 v50 = a2[2];
    __int128 v51 = v37;
    __int128 v38 = a2[8];
    __int128 v39 = a2[6];
    __int128 v55 = a2[7];
    __int128 v56 = v38;
    __int128 v40 = a2[5];
    __int128 v52 = a2[4];
    __int128 v53 = v40;
    __int128 v54 = v39;
    __int128 v41 = a2[1];
    __int128 v48 = *a2;
    __int128 v49 = v41;
    v63[7] = v48;
    v63[8] = v41;
    v63[9] = v50;
    v63[10] = v51;
    __int128 v42 = (_OWORD *)v52;
    __int128 v43 = *(_OWORD *)(v52 + 16);
    __int128 v44 = *(_OWORD *)(v52 + 48);
    v64[1] = *(_OWORD *)(v52 + 32);
    v64[2] = v44;
    v64[0] = v43;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined retain of Locale((uint64_t)v64);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v64);
    outlined release of Locale((uint64_t)v57);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    __int128 v45 = v42[2];
    v63[0] = v42[1];
    v63[1] = v45;
    _OWORD v63[2] = v42[3];
    _OWORD v63[3] = v58;
    v63[4] = v59;
    v63[5] = v60;
    v63[6] = v61;
    swift_unknownObjectRetain();
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v62, (uint64_t)v63);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    return (uint64_t *)swift_unknownObjectRelease();
  }

  else
  {
    return (uint64_t *)AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v62, a2, (uint64_t)a3);
  }

__n128 AttributedString.CharacterView.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  __int128 v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  return result;
}

__n128 AttributedString.CharacterView.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 40);
  __int128 v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  return result;
}

uint64_t AttributedString.CharacterView._count.getter()
{
  uint64_t v0 = BigSubstring.distance(from:to:)();
  swift_unknownObjectRelease();
  return v0;
}

void *AttributedString.CharacterView._index(_:offsetBy:)@<X0>( void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *result >> 10;
  unint64_t v5 = v2[1] >> 10;
  unint64_t v6 = v2[5] >> 10;
  if (v4 >= v5 && v6 >= v4)
  {
    uint64_t v8 = *v2;
    __int128 v9 = *(_OWORD *)(*v2 + 16LL);
    __int128 v10 = *(_OWORD *)(*v2 + 48LL);
    v19[1] = *(_OWORD *)(*v2 + 32LL);
    void v19[2] = v10;
    v19[0] = v9;
    __int128 v11 = *(_OWORD *)(v8 + 16);
    v20[1] = *(_OWORD *)(v8 + 32);
    void v20[2] = v10;
    v20[0] = v11;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v20, (uint64_t)v21);
    outlined retain of Locale((uint64_t)v21);
    unint64_t v12 = BigString.index(_:offsetBy:)();
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    unint64_t v18 = v17;
    __n128 result = (void *)outlined release of Locale((uint64_t)v19);
    if (v12 >> 10 >= v5 && v6 >= v12 >> 10)
    {
      *a2 = v12;
      a2[1] = v14;
      a2[2] = v16;
      a2[3] = v18;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedString.CharacterView._index(_:offsetBy:limitedBy:)@<X0>( void *result@<X0>, void *a2@<X2>, unint64_t *a3@<X8>)
{
  unint64_t v5 = *result >> 10;
  unint64_t v6 = v3[1] >> 10;
  unint64_t v7 = v3[5] >> 10;
  unint64_t v8 = *a2 >> 10;
  if (v7 < v8 || v8 < v6 || v5 < v6 || v7 < v5)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }

  unint64_t v23 = v3[5] >> 10;
  unint64_t v24 = v3[1] >> 10;
  uint64_t v12 = *v3;
  __int128 v13 = *(_OWORD *)(*v3 + 16LL);
  __int128 v14 = *(_OWORD *)(*v3 + 48LL);
  v25[1] = *(_OWORD *)(*v3 + 32LL);
  _OWORD v25[2] = v14;
  v25[0] = v13;
  __int128 v15 = *(_OWORD *)(v12 + 16);
  v26[1] = *(_OWORD *)(v12 + 32);
  v26[2] = v14;
  v26[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v26, (uint64_t)v27);
  outlined retain of Locale((uint64_t)v27);
  unint64_t v16 = BigString.index(_:offsetBy:limitedBy:)();
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  unint64_t v22 = v21;
  __n128 result = (void *)outlined release of Locale((uint64_t)v25);
  if (v22 == 2)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
    a3[3] = 2LL;
    return result;
  }

  if (v16 >> 10 < v24 || v23 < v16 >> 10) {
    goto LABEL_18;
  }
  *a3 = v16;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v22;
  return result;
}

void *AttributedString.CharacterView._distance(from:to:)(void *result, void *a2)
{
  unint64_t v3 = *(void *)(v2 + 40);
  unint64_t v4 = *result >> 10;
  unint64_t v5 = *(void *)(v2 + 8) >> 10;
  unint64_t v6 = *a2 >> 10;
  if (v3 >> 10 >= v6 && v6 >= v5 && v4 >= v5 && v3 >> 10 >= v4)
  {
    swift_unknownObjectRetain();
    uint64_t v10 = BigSubstring.distance(from:to:)();
    swift_unknownObjectRelease();
    return (void *)v10;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *AttributedString.CharacterView.subscript.getter(void *result)
{
  unint64_t v2 = *result >> 10;
  if (v2 < v1[1] >> 10 || v2 >= v1[5] >> 10)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = *v1;
    __int128 v5 = *(_OWORD *)(*v1 + 16LL);
    __int128 v6 = *(_OWORD *)(*v1 + 48LL);
    v9[1] = *(_OWORD *)(*v1 + 32LL);
    void v9[2] = v6;
    v9[0] = v5;
    __int128 v7 = *(_OWORD *)(v4 + 16);
    v10[1] = *(_OWORD *)(v4 + 32);
    void v10[2] = v6;
    v10[0] = v7;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v10, (uint64_t)v11);
    outlined retain of Locale((uint64_t)v11);
    uint64_t v8 = BigString.subscript.getter();
    outlined release of Locale((uint64_t)v9);
    return (void *)v8;
  }

  return result;
}

void *key path getter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView@<X0>( void *result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = *a2 >> 10;
  if (v4 < result[1] >> 10 || v4 >= result[5] >> 10)
  {
    __break(1u);
  }

  else
  {
    __int128 v6 = *(_OWORD *)(*result + 16LL);
    __int128 v7 = *(_OWORD *)(*result + 48LL);
    v11[1] = *(_OWORD *)(*result + 32LL);
    uint64_t v11[2] = v7;
    v11[0] = v6;
    swift_retain();
    outlined retain of Locale((uint64_t)v11);
    uint64_t v8 = BigString.subscript.getter();
    uint64_t v10 = v9;
    outlined release of Locale((uint64_t)v11);
    __n128 result = (void *)swift_release();
    *a3 = v8;
    a3[1] = v10;
  }

  return result;
}

uint64_t key path setter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView( uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  __int128 v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized AttributedString.CharacterView.subscript.setter(v3, v4, (uint64_t *)v7);
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.CharacterView.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v6 = (void *)*v2;
    __int128 v7 = *(_OWORD *)(*v2 + 16);
    __int128 v8 = *(_OWORD *)(*v2 + 32);
    __int128 v484 = *(_OWORD *)(*v2 + 48);
    __int128 v483 = v8;
    __int128 v482 = v7;
    unint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v11 = v6[10];
    uint64_t v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v13 = swift_allocObject();
    int v14 = BigString.isEmpty.getter();
    if (v9)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v482);
      swift_unknownObjectRelease();
    }

    else
    {
      outlined retain of Locale((uint64_t)&v482);
    }

    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v9);
    swift_unknownObjectRelease();
    if (v9)
    {
      swift_unknownObjectRelease();
      if ((((v11 == 0) ^ v14) & 1) == 0)
      {
LABEL_7:
        __int128 v15 = v483;
        *(_OWORD *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v482;
        *(_OWORD *)(v13 + 32) = v15;
        *(_OWORD *)(v13 + 48) = v484;
        *(void *)(v13 + 64) = v9;
        *(void *)(v13 + 72) = v10;
        *(void *)(v13 + 80) = v11;
        *(void *)(v13 + 88) = v12;
        *uint64_t v3 = v13;
        swift_release();
        goto LABEL_8;
      }
    }

    else
    {
      swift_unknownObjectRelease();
      if ((v14 & 1) != 0) {
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_251;
  }

uint64_t specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(unint64_t *a1)
{
  __int128 v5 = v1;
  __int128 v6 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v7 = (void *)*v1;
    __int128 v8 = *(_OWORD *)(*v1 + 16);
    __int128 v9 = *(_OWORD *)(*v1 + 32);
    __int128 v459 = *(_OWORD *)(*v1 + 48);
    __int128 v458 = v9;
    __int128 v457 = v8;
    uint64_t v10 = v7[8];
    uint64_t v11 = v7[9];
    uint64_t v12 = v7[10];
    uint64_t v13 = v7[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = BigString.isEmpty.getter();
    if (v10)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v457);
      swift_unknownObjectRelease();
      uint64_t v2 = v10;
    }

    else
    {
      outlined retain of Locale((uint64_t)&v457);
      uint64_t v2 = 0LL;
    }

    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v10);
    swift_unknownObjectRelease();
    if (v10)
    {
      swift_unknownObjectRelease();
      if ((((v12 == 0) ^ v15) & 1) == 0)
      {
LABEL_7:
        __int128 v16 = v458;
        *(_OWORD *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v457;
        *(_OWORD *)(v14 + 32) = v16;
        *(_OWORD *)(v14 + 48) = v459;
        *(void *)(v14 + 64) = v10;
        *(void *)(v14 + 72) = v11;
        *(void *)(v14 + 80) = v12;
        *(void *)(v14 + 88) = v13;
        *__int128 v5 = v14;
        swift_release();
        __int128 v6 = a1;
        goto LABEL_8;
      }
    }

    else
    {
      swift_unknownObjectRelease();
      if ((v15 & 1) != 0) {
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_41;
  }

{
  uint64_t *v1;
  uint64_t *v2;
  void *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[3];
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = (void *)*v1;
    __int128 v5 = *(_OWORD *)(*v1 + 16);
    __int128 v6 = *(_OWORD *)(*v1 + 48);
    v15[1] = *(_OWORD *)(*v1 + 32);
    void v15[2] = v6;
    v15[0] = v5;
    __int128 v7 = v4[8];
    __int128 v8 = v4[9];
    __int128 v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v15);
    swift_unknownObjectRetain();
    *uint64_t v2 = AttributedString.Guts.init(string:runs:)(v15, v7, v8, v9, v10);
    swift_release();
  }

  uint64_t v11 = AttributedString.Guts.attributesToUseForTextReplacement(in:)(a1);
  uint64_t v13 = v12;
  MEMORY[0x1895F8858](v11);
  AttributedString.CharacterView._mutateStringContents(in:attributes:with:)( a1,  v11,  v13,  (void (*)(__int128 *, void *))partial apply for specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

LABEL_371:
            __break(1u);
LABEL_372:
            __break(1u);
LABEL_373:
            __break(1u);
LABEL_374:
            __break(1u);
LABEL_375:
            __break(1u);
LABEL_376:
            __break(1u);
LABEL_377:
            __break(1u);
LABEL_378:
            __break(1u);
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
            goto LABEL_381;
          }

          uint64_t result = swift_unknownObjectRetain_n();
          uint64_t v2 = v337 >> 11;
          uint64_t v100 = v95;
LABEL_142:
          uint64_t v116 = *(unsigned __int16 *)(v100 + 16);
          if (!*(_WORD *)(v100 + 16)) {
            goto LABEL_425;
          }
          uint64_t v117 = *(void *)(v100 + 24);
          BOOL v45 = __OFSUB__(v2, v117);
          uint64_t v118 = v2 - v117;
          if (v45) {
            goto LABEL_408;
          }
          uint64_t v115 = v343;
          if (v118 <= 0)
          {
            uint64_t v121 = 0LL;
          }

          else
          {
            if ((_DWORD)v116 == 1) {
              goto LABEL_427;
            }
            uint64_t v119 = *(void *)(v100 + 48);
            uint64_t v2 = v118 - v119;
            if (__OFSUB__(v118, v119)) {
              goto LABEL_410;
            }
            if (v2 >= 1)
            {
              if ((_DWORD)v116 == 2) {
                goto LABEL_427;
              }
              unint64_t v120 = (void *)(v100 + 72);
              uint64_t v121 = 2LL;
              while (v116 != v121)
              {
                uint64_t v122 = v2 - *v120;
                if (__OFSUB__(v2, *v120)) {
                  goto LABEL_374;
                }
                if (v122 < 1) {
                  goto LABEL_157;
                }
                ++v121;
                v120 += 3;
                uint64_t v2 = v122;
                if (v116 == v121) {
                  goto LABEL_427;
                }
              }

              goto LABEL_373;
            }

            uint64_t v2 = v118;
            uint64_t v121 = 1LL;
          }

                  __break(1u);
LABEL_372:
                  __break(1u);
LABEL_373:
                  __break(1u);
LABEL_374:
                  __break(1u);
                  goto LABEL_375;
                }

                __int128 v6 = v19;
              }
            }
          }
        }
      }

LABEL_406:
                __break(1u);
LABEL_407:
                __break(1u);
LABEL_408:
                __break(1u);
LABEL_409:
                __break(1u);
LABEL_410:
                __break(1u);
LABEL_411:
                __break(1u);
LABEL_412:
                __break(1u);
LABEL_413:
                __break(1u);
LABEL_414:
                __break(1u);
LABEL_415:
                __break(1u);
LABEL_416:
                __break(1u);
LABEL_417:
                __break(1u);
LABEL_418:
                __break(1u);
LABEL_419:
                __break(1u);
LABEL_420:
                __break(1u);
LABEL_421:
                __break(1u);
LABEL_422:
                if (!v2) {
                  __break(1u);
                }
LABEL_424:
                __break(1u);
LABEL_425:
                if (!v2) {
                  __break(1u);
                }
LABEL_427:
                __break(1u);
                return result;
              }

              int64_t v142 = v151;
            }
          }
        }
      }
    }

                __break(1u);
                goto LABEL_407;
              }

              unint64_t v70 = v78;
            }
          }
        }
      }
    }

                          outlined destroy of Any?( (uint64_t)&v380,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                          v385 = 0LL;
                          uint64_t v289 = 1;
LABEL_407:
                          uint64_t v386 = v289;
                          if (one-time initialization token for name == -1)
                          {
                            if (*(void *)(v8 + 16)) {
                              goto LABEL_409;
                            }
                          }

                          else
                          {
                            swift_once();
                            if (*(void *)(v8 + 16))
                            {
LABEL_409:
                              uint64_t v290 = qword_18C5D2BA8;
                              int64_t v291 = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
                              swift_bridgeObjectRetain();
                              int64_t v292 = specialized __RawDictionaryStorage.find<A>(_:)(v291, v290);
                              if ((v293 & 1) != 0)
                              {
                                outlined init with copy of AttributedString._AttributeValue( *(void *)(v8 + 56) + 72 * v292,  (uint64_t)&v380);
                              }

                              else
                              {
                                uint64_t v384 = 0LL;
                                __int128 v382 = 0u;
                                uint64_t v383 = 0u;
                                unsigned __int128 v380 = 0u;
                                uint64_t v381 = 0u;
                              }

                              swift_bridgeObjectRelease();
                              if (*((void *)&v381 + 1))
                              {
                                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v380,  (uint64_t)v364);
                                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                                __int128 v294 = v313;
                                swift_dynamicCast();
                                outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
                                __int128 v295 = 0;
                                goto LABEL_417;
                              }

LABEL_362:
  swift_release();
  uint64_t v229 = 0LL;
  uint64_t v43 = v13 - v216;
  if (__OFSUB__(v13, v216)) {
    goto LABEL_364;
  }
LABEL_240:
  *(void *)&__int128 v366 = v213;
  *((void *)&v366 + 1) = v13;
  *(void *)&__int128 v367 = v3;
  *((void *)&v367 + 1) = v10;
  *(void *)&__int128 v368 = v228;
  *((void *)&v368 + 1) = v2;
  uint64_t v369 = v229;
  uint64_t v370 = v43;
  specialized IndexingIterator.next()();
  if (!v230)
  {
    uint64_t v264 = MEMORY[0x18961AFF0];
    goto LABEL_283;
  }

  uint64_t v231 = v230;
  char v232 = (__int128 *)v336;
  while (1)
  {
    __int128 v235 = v232[1];
    __int128 v409 = *v232;
    __int128 v410 = v235;
    __int128 v411 = v232[2];
    BigString.utf8.getter();
    unint64_t v236 = v464;
    unint64_t v237 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v239 = v238;
    uint64_t v241 = v240;
    uint64_t v243 = v242;
    outlined release of Locale((uint64_t)v400);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v244 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v231);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v334 = v241;
    uint64_t v332 = v239;
    uint64_t v333 = v243;
    uint64_t v331 = v237;
    if ((v244 & 1) != 0)
    {
      unint64_t v338 = v237 >> 10;
      if (v237 >> 10 > v236 >> 10) {
        break;
      }
    }

LABEL_386:
            __break(1u);
LABEL_387:
            __break(1u);
            goto LABEL_388;
          }
        }
      }

      int64_t v265 = v273;
    }

LABEL_298:
    unint64_t v269 = (v272 - 1) & v272;
    unint64_t v271 = __clz(__rbit64(v272)) + (v265 << 6);
    goto LABEL_299;
  }

LABEL_334:
    int64_t v319 = 0LL;
    int64_t v321 = 0LL;
    int v322 = 0;
LABEL_335:
    if ((v306 & 1) == 0 && v329 < v293)
    {
      uint64_t v364 = 0LL;
      uint64_t v365 = 0LL;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v364, v291, v329, v293);
    }

    if (v328 < v321) {
      int v323 = v322;
    }
    else {
      int v323 = 0;
    }
    if (v323 == 1)
    {
      uint64_t v364 = 0LL;
      uint64_t v365 = 0LL;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v364, v319, v328, v321);
    }

    goto LABEL_237;
  }

  __int128 v280 = *(_OWORD *)(v336 + 16);
  __int128 v366 = *(_OWORD *)v336;
  __int128 v367 = v280;
  __int128 v368 = *(_OWORD *)(v336 + 32);
  if (v279 > (unint64_t)BigString.startIndex.getter() >> 10
    && v279 < (unint64_t)BigString.endIndex.getter() >> 10)
  {
    uint64_t result = v329 - 1;
    if (__OFSUB__(v329, 1LL)) {
      goto LABEL_419;
    }
    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v329) & 1) != 0)
    {
      __int128 v281 = *(_OWORD *)v336;
      __int128 v282 = *(_OWORD *)(v336 + 32);
      __int128 v465 = *(_OWORD *)(v336 + 16);
      __int128 v466 = v282;
      __int128 v464 = v281;
      __int128 v283 = *(_OWORD *)v336;
      __int128 v354 = *(_OWORD *)(v336 + 16);
      __int128 v355 = v282;
      __int128 v353 = v283;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v353, (uint64_t)v419);
      outlined retain of Locale((uint64_t)v419);
      unint64_t v284 = BigString.index(before:)();
      uint64_t v286 = v285;
      uint64_t v288 = v287;
      uint64_t v290 = v289;
      outlined release of Locale((uint64_t)&v464);
      AttributedString.Guts._paragraphExtending(from:)(v284, v286, v288, v290, (uint64_t)&v359);
      int64_t v291 = Range<>._utf8OffsetRange.getter();
      int64_t v293 = v292;
      goto LABEL_333;
    }
  }

                          __break(1u);
LABEL_335:
                          __break(1u);
LABEL_336:
                          __break(1u);
LABEL_337:
                          __break(1u);
                          goto LABEL_338;
                        }

                        uint64_t v35 = v158;
                        goto LABEL_257;
                      }

                      uint64_t v154 = 1LL;
                      uint64_t v35 = v156;
                    }

uint64_t specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)( unint64_t *a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = v3;
  __int128 v7 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v8 = (void *)*v3;
    __int128 v9 = *(_OWORD *)(*v3 + 16);
    __int128 v10 = *(_OWORD *)(*v3 + 32);
    __int128 v450 = *(_OWORD *)(*v3 + 48);
    __int128 v449 = v10;
    __int128 v448 = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v13 = v8[10];
    uint64_t v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = BigString.isEmpty.getter();
    if (v11)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v448);
      swift_unknownObjectRelease();
    }

    else
    {
      outlined retain of Locale((uint64_t)&v448);
    }

    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v11);
    swift_unknownObjectRelease();
    if (v11)
    {
      swift_unknownObjectRelease();
      if ((((v13 == 0) ^ v16) & 1) == 0)
      {
LABEL_7:
        __int128 v17 = v449;
        *(_OWORD *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v448;
        *(_OWORD *)(v15 + 32) = v17;
        *(_OWORD *)(v15 + 48) = v450;
        *(void *)(v15 + 64) = v11;
        *(void *)(v15 + 72) = v12;
        *(void *)(v15 + 80) = v13;
        *(void *)(v15 + 88) = v14;
        *__int128 v5 = v15;
        swift_release();
        __int128 v7 = a1;
        goto LABEL_8;
      }
    }

    else
    {
      swift_unknownObjectRelease();
      if ((v16 & 1) != 0) {
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_40;
  }