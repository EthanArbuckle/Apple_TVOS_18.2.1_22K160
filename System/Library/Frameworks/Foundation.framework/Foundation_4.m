uint64_t URLComponents.percentEncodedQuery.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  if (v0[16])
  {
    v1 = v0[15];
  }

  else
  {
    v2 = *v0;
    v3 = *((_BYTE *)v0 + 15) != 1 || v2 == 0;
    if (v3 || (*(_BYTE *)(v2 + 192) & 1) != 0)
    {
      v1 = 0LL;
    }

    else
    {
      v4 = String.subscript.getter();
      v1 = MEMORY[0x186E1B610](v4);
      swift_bridgeObjectRelease();
    }
  }

  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedQuery.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 15) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 120) = a1;
    *(void *)(v3 + 128) = a2;
    return result;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v10,  (uint64_t)v13,  0x40u,  1);
    }

    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 0x40u, 1);
    }

    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v16;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1)) {
      goto LABEL_8;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedQuery.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[16])
  {
    uint64_t v4 = v1[15];
    uint64_t v5 = v1[16];
  }

  else
  {
    uint64_t v6 = *v1;
    BOOL v7 = *((_BYTE *)v1 + 15) != 1 || v6 == 0;
    if (v7 || (*(_BYTE *)(v6 + 192) & 1) != 0)
    {
      uint64_t v4 = 0LL;
      uint64_t v5 = 0LL;
    }

    else
    {
      uint64_t v8 = String.subscript.getter();
      uint64_t v4 = MEMORY[0x186E1B610](v8);
      uint64_t v5 = v9;
      swift_bridgeObjectRelease();
    }
  }

  *uint64_t v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedQuery.modify;
}

void URLComponents.percentEncodedQuery.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 15) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000LL) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        id v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v21,  (uint64_t)v24,  0x40u,  1);
        }

        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
        }

        char v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_30;
        }
      }

      else
      {
        if ((v5 & 0x2000000000000000LL) != 0)
        {
          uint64_t v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v9 = (char *)v3;
        }

        else if ((v6 & 0x1000000000000000LL) != 0)
        {
          uint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
        }

        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 1)) {
          goto LABEL_30;
        }
      }
    }

    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 120) = v6;
    *(void *)(v13 + 128) = v5;
    goto LABEL_18;
  }

  if (!v5)
  {
LABEL_14:
    unint64_t v12 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v12 + 120) = v6;
    *(void *)(v12 + 128) = v5;
    swift_bridgeObjectRelease();
LABEL_18:
    free(v2);
    return;
  }

  if ((v5 & 0x1000000000000000LL) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    id v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v15,  (uint64_t)v18,  0x40u,  1);
    }

    else
    {
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
    }

    char v26 = v19;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0) {
      goto LABEL_14;
    }
  }

  else
  {
    if ((v5 & 0x2000000000000000LL) != 0)
    {
      uint64_t v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      BOOL v7 = (char *)v3;
    }

    else if ((v6 & 0x1000000000000000LL) != 0)
    {
      BOOL v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      BOOL v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_14;
    }
  }

uint64_t URLComponents.percentEncodedFragment.getter()
{
  if (v0[18])
  {
    uint64_t v1 = v0[17];
  }

  else
  {
    uint64_t v2 = *v0;
    BOOL v3 = *((_BYTE *)v0 + 16) != 1 || v2 == 0;
    if (v3 || (*(_BYTE *)(v2 + 216) & 1) != 0)
    {
      uint64_t v1 = 0LL;
    }

    else
    {
      uint64_t v4 = String.subscript.getter();
      uint64_t v1 = MEMORY[0x186E1B610](v4);
      swift_bridgeObjectRelease();
    }
  }

  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedFragment.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 136) = a1;
    *(void *)(v3 + 144) = a2;
    return result;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      unint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v10,  (uint64_t)v13,  0x40u,  1);
    }

    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 0x40u, 1);
    }

    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v16;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      unint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1)) {
      goto LABEL_8;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedFragment.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[18])
  {
    uint64_t v4 = v1[17];
    uint64_t v5 = v1[18];
  }

  else
  {
    uint64_t v6 = *v1;
    BOOL v7 = *((_BYTE *)v1 + 16) != 1 || v6 == 0;
    if (v7 || (*(_BYTE *)(v6 + 216) & 1) != 0)
    {
      uint64_t v4 = 0LL;
      uint64_t v5 = 0LL;
    }

    else
    {
      uint64_t v8 = String.subscript.getter();
      uint64_t v4 = MEMORY[0x186E1B610](v8);
      uint64_t v5 = v9;
      swift_bridgeObjectRelease();
    }
  }

  *uint64_t v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedFragment.modify;
}

void URLComponents.percentEncodedFragment.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000LL) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        id v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v21,  (uint64_t)v24,  0x40u,  1);
        }

        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
        }

        char v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_30;
        }
      }

      else
      {
        if ((v5 & 0x2000000000000000LL) != 0)
        {
          uint64_t v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v9 = (char *)v3;
        }

        else if ((v6 & 0x1000000000000000LL) != 0)
        {
          uint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
        }

        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 1)) {
          goto LABEL_30;
        }
      }
    }

    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 136) = v6;
    *(void *)(v13 + 144) = v5;
    goto LABEL_18;
  }

  if (!v5)
  {
LABEL_14:
    unint64_t v12 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v12 + 136) = v6;
    *(void *)(v12 + 144) = v5;
    swift_bridgeObjectRelease();
LABEL_18:
    free(v2);
    return;
  }

  if ((v5 & 0x1000000000000000LL) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    id v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v15,  (uint64_t)v18,  0x40u,  1);
    }

    else
    {
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
    }

    char v26 = v19;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0) {
      goto LABEL_14;
    }
  }

  else
  {
    if ((v5 & 0x2000000000000000LL) != 0)
    {
      uint64_t v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      BOOL v7 = (char *)v3;
    }

    else if ((v6 & 0x1000000000000000LL) != 0)
    {
      BOOL v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      BOOL v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_14;
    }
  }

unint64_t URLComponents.rangeOfScheme.getter()
{
  __int128 v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  __int128 v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  __int128 v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v13,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v15,  &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 32);
  }
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v14,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0LL;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }

  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(v9 + 32);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfUser.getter()
{
  __int128 v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  __int128 v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  __int128 v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v13,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v15,  &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 56);
  }
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v14,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0LL;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }

  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(v9 + 56);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfPassword.getter()
{
  __int128 v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  __int128 v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  __int128 v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v13,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v15,  &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 80);
  }
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v14,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0LL;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }

  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(v9 + 80);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfHost.getter()
{
  __int128 v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  __int128 v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  __int128 v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v13,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v15,  &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 104);
  }
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v14,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0LL;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }

  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(v9 + 104);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfPort.getter()
{
  __int128 v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  __int128 v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  __int128 v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v13,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v15,  &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 128);
  }
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v14,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0LL;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }

  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(v9 + 128);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfPath.getter()
{
  __int128 v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  __int128 v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  __int128 v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v13,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v15,  &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 152);
  }
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v14,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0LL;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }

  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(v9 + 152);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfQuery.getter()
{
  __int128 v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  __int128 v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  __int128 v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v13,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v15,  &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 176);
  }
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v14,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0LL;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }

  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(v9 + 176);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfFragment.getter()
{
  __int128 v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  __int128 v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  __int128 v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v13,  &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v15,  &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 200);
  }
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)&v14,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0LL;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }

  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(v9 + 200);
  swift_release();
  return v5;
}

unint64_t URLComponents.queryItems.getter()
{
  return (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
}

uint64_t URLComponents.queryItems.setter(Swift::OpaquePointer_optional a1)
{
  return swift_bridgeObjectRelease();
}

void (*URLComponents.queryItems.modify(void *a1))(Swift::OpaquePointer_optional a1)
{
  __int128 v3 = (char *)malloc(0xB0uLL);
  *a1 = v3;
  *((void *)v3 + 21) = v1;
  __int128 v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  __int128 v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  __int128 v7 = v1[1];
  *(_OWORD *)__int128 v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
  return URLComponents.queryItems.modify;
}

void URLComponents.queryItems.modify(Swift::OpaquePointer_optional a1)
{
  __int128 v1 = *(void **)a1.value._rawValue;
  a1.value._rawValue = *(void **)(*(void *)a1.value._rawValue + 160LL);
  if (a1.is_nil)
  {
    v2.value._rawValue = (void *)swift_bridgeObjectRetain();
    URLComponents._URLComponents.setQueryItems(_:)(v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    URLComponents._URLComponents.setQueryItems(_:)(a1);
  }

  swift_bridgeObjectRelease();
  free(v1);
}

unint64_t URLComponents.percentEncodedQueryItems.getter()
{
  return (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
}

uint64_t key path getter for URLComponents.queryItems : URLComponents@<X0>( _OWORD *a1@<X0>, Swift::Bool a2@<W3>, unint64_t *a3@<X8>)
{
  __int128 v5 = a1[7];
  v11[6] = a1[6];
  v11[7] = v5;
  v12[0] = a1[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 138);
  __int128 v6 = a1[3];
  v11[2] = a1[2];
  v11[3] = v6;
  __int128 v7 = a1[5];
  v11[4] = a1[4];
  v11[5] = v7;
  __int128 v8 = a1[1];
  v11[0] = *a1;
  v11[1] = v8;
  outlined retain of URLComponents((uint64_t)v11);
  unint64_t v9 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(a2);
  uint64_t result = outlined release of URLComponents((uint64_t)v11);
  *a3 = v9;
  return result;
}

uint64_t URLComponents.percentEncodedQueryItems.setter(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void (*URLComponents.percentEncodedQueryItems.modify(void *a1))(uint64_t a1, char a2)
{
  __int128 v3 = (char *)malloc(0xC0uLL);
  *a1 = v3;
  *((void *)v3 + 23) = v1;
  __int128 v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  __int128 v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  __int128 v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  __int128 v7 = v1[1];
  *(_OWORD *)__int128 v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 22) = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
  return URLComponents.percentEncodedQueryItems.modify;
}

void URLComponents.percentEncodedQueryItems.modify(uint64_t a1, char a2)
{
  Swift::OpaquePointer_optional v2 = *(void **)a1;
  uint64_t v3 = *(void *)a1 + 160LL;
  uint64_t v4 = *(void *)(*(void *)a1 + 176LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 184LL);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 15) = 0;
  if ((a2 & 1) != 0)
  {
    if (v4)
    {
      int64_t v6 = *(void *)(v4 + 16);
      if (v6)
      {
        unint64_t v84 = MEMORY[0x18961AFE8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
        __int128 v7 = (unint64_t *)(v4 + 56);
        do
        {
          unint64_t v9 = *(v7 - 3);
          unint64_t v8 = *(v7 - 2);
          unint64_t v11 = *(v7 - 1);
          unint64_t v10 = *v7;
          if ((v8 & 0x1000000000000000LL) != 0)
          {
            v2[20] = v9;
            v2[21] = v8;
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            StringProtocol._ephemeralString.getter();
            v23 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v24 = (unsigned __int16 *)objc_msgSend(v23, sel__fastCharacterContents);
            id v25 = v23;
            if (v24)
            {
              v2[20] = v9;
              v2[21] = v8;
              v82 = v24;
              StringProtocol._ephemeralString.getter();
              char v26 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v27 = objc_msgSend(v26, sel_length);
              swift_unknownObjectRelease();
              char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v82,  (uint64_t)v27,  0x80u,  1);
            }

            else
            {
              char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v9,  v8,  0x80u,  1);
            }

            char v35 = v28;
            swift_bridgeObjectRelease_n();
            if ((v35 & 1) == 0) {
              goto LABEL_74;
            }
          }

          else
          {
            if ((v8 & 0x2000000000000000LL) != 0)
            {
              uint64_t v13 = HIBYTE(v8) & 0xF;
              v2[20] = v9;
              v2[21] = v8 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v12 = (char *)v3;
            }

            else if ((v9 & 0x1000000000000000LL) != 0)
            {
              unint64_t v12 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
            }

            else
            {
              unint64_t v12 = (char *)_StringObject.sharedUTF8.getter();
            }

            BOOL v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v12,  v13,  0x80u,  1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (!v14) {
              goto LABEL_74;
            }
          }

          unint64_t v86 = v9;
          if (v10)
          {
            if ((v10 & 0x1000000000000000LL) != 0)
            {
              v2[20] = v11;
              v2[21] = v10;
              lazy protocol witness table accessor for type String and conformance String();
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              StringProtocol._ephemeralString.getter();
              v29 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v30 = (unsigned __int16 *)objc_msgSend(v29, sel__fastCharacterContents);
              id v31 = v29;
              if (v30)
              {
                v2[20] = v11;
                v2[21] = v10;
                StringProtocol._ephemeralString.getter();
                v32 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v33 = objc_msgSend(v32, sel_length);
                swift_unknownObjectRelease();
                char v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v30,  (uint64_t)v33,  0x40u,  1);
              }

              else
              {
                char v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v11,  v10,  0x40u,  1);
              }

              char v36 = v34;
              swift_bridgeObjectRelease_n();
              if ((v36 & 1) == 0) {
                goto LABEL_73;
              }
            }

            else
            {
              if ((v10 & 0x2000000000000000LL) != 0)
              {
                uint64_t v16 = HIBYTE(v10) & 0xF;
                v2[20] = v11;
                v2[21] = v10 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v15 = (char *)v3;
              }

              else if ((v11 & 0x1000000000000000LL) != 0)
              {
                uint64_t v15 = (char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL;
              }

              else
              {
                uint64_t v15 = (char *)_StringObject.sharedUTF8.getter();
              }

              BOOL v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v15,  v16,  0x40u,  1);
              swift_bridgeObjectRetain();
              if (!v17) {
                goto LABEL_73;
              }
            }

            v18._countAndFlagsBits = v11;
            v18._object = (void *)v10;
            String.append(_:)(v18);
            v19._countAndFlagsBits = 61LL;
            v19._object = (void *)0xE100000000000000LL;
            String.append(_:)(v19);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v9 = v86;
          }

          else
          {
            swift_bridgeObjectRelease();
          }

          unint64_t v10 = v84;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v84 + 16) + 1LL,  1);
            unint64_t v10 = v84;
          }

          unint64_t v21 = *(void *)(v10 + 16);
          unint64_t v20 = *(void *)(v10 + 24);
          if (v21 >= v20 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v20 > 1,  v21 + 1,  1);
            unint64_t v10 = v84;
          }

          v7 += 4;
          *(void *)(v10 + 16) = v21 + 1;
          unint64_t v22 = v10 + 16 * v21;
          *(void *)(v22 + 32) = v9;
          *(void *)(v22 + 40) = v8;
          --v6;
        }

        while (v6);
        goto LABEL_75;
      }

      uint64_t v80 = v2[23];
      swift_bridgeObjectRelease();
      *(_OWORD *)(v80 + 120) = xmmword_183725730;
    }

    else
    {
      uint64_t v78 = v2[23];
      swift_bridgeObjectRelease();
      *(void *)(v78 + 120) = 0LL;
      *(void *)(v78 + 128) = 0LL;
    }

void URLComponents.hash(into:)()
{
  __int128 v1 = v0[7];
  __int128 v23 = v0[6];
  __int128 v24 = v1;
  *(_OWORD *)id v25 = v0[8];
  *(_OWORD *)&v25[10] = *(__int128 *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  __int128 v19 = v0[2];
  __int128 v20 = v2;
  __int128 v3 = v0[5];
  __int128 v21 = v0[4];
  __int128 v22 = v3;
  __int128 v4 = v0[1];
  __int128 v17 = *v0;
  __int128 v18 = v4;
  uint64_t v5 = (_BYTE *)v17;
  if ((void)v19) {
    goto LABEL_2;
  }
  if (BYTE9(v17) == 1 && (void)v17 && (*(_BYTE *)(v17 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v13 = String.subscript.getter();
    MEMORY[0x186E1B610](v13);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
LABEL_2:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }

  Hasher._combine(_:)(0);
LABEL_7:
  URLComponents.percentEncodedUser.getter();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((void)v21)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if ((void)v21) {
      goto LABEL_9;
    }
  }

  if (BYTE11(v17) == 1 && v5 && (v5[96] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v14 = String.subscript.getter();
    MEMORY[0x186E1B610](v14);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
    goto LABEL_9;
  }

  Hasher._combine(_:)(0);
LABEL_15:
  outlined retain of URLComponents((uint64_t)&v17);
  URLComponents._URLComponents.encodedHost.getter();
  uint64_t v8 = v7;
  outlined release of URLComponents((uint64_t)&v17);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v9 = URLComponents.port.getter();
  if ((v10 & 1) != 0)
  {
    Hasher._combine(_:)(0);
    if ((void)v24) {
      goto LABEL_20;
    }
  }

  else
  {
    Swift::UInt v11 = v9;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    if ((void)v24)
    {
LABEL_20:
      outlined retain of URLComponents((uint64_t)&v17);
      goto LABEL_31;
    }
  }

  if (BYTE14(v17) != 1 || !v5) {
    goto LABEL_20;
  }
  if ((v5[168] & 1) != 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v12 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v12 = String.subscript.getter();
  }

  MEMORY[0x186E1B610](v12);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)v25)
  {
    if (HIBYTE(v17) != 1 || !v5 || (v5[192] & 1) != 0)
    {
      Hasher._combine(_:)(0);
      if (*(void *)&v25[16]) {
        goto LABEL_33;
      }
      goto LABEL_38;
    }

    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v15 = String.subscript.getter();
    MEMORY[0x186E1B610](v15);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease_n();
  if (*(void *)&v25[16])
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    return;
  }

Swift::Int URLComponents.hashValue.getter()
{
  __int128 v1 = v0[7];
  __int128 v24 = v0[6];
  __int128 v25 = v1;
  *(_OWORD *)char v26 = v0[8];
  *(_OWORD *)&v26[10] = *(__int128 *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  __int128 v20 = v0[2];
  __int128 v21 = v2;
  __int128 v3 = v0[5];
  __int128 v22 = v0[4];
  __int128 v23 = v3;
  __int128 v4 = v0[1];
  __int128 v18 = *v0;
  __int128 v19 = v4;
  Hasher.init(_seed:)();
  uint64_t v5 = (_BYTE *)v18;
  if ((void)v20) {
    goto LABEL_2;
  }
  if (BYTE9(v18) == 1 && (void)v18 && (*(_BYTE *)(v18 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v13 = String.subscript.getter();
    MEMORY[0x186E1B610](v13);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_2:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }

  Hasher._combine(_:)(0);
LABEL_7:
  URLComponents.percentEncodedUser.getter();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((void)v22)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if ((void)v22) {
      goto LABEL_9;
    }
  }

  if (BYTE11(v18) == 1 && v5 && (v5[96] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v14 = String.subscript.getter();
    MEMORY[0x186E1B610](v14);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
    goto LABEL_9;
  }

  Hasher._combine(_:)(0);
LABEL_15:
  outlined retain of URLComponents((uint64_t)&v18);
  URLComponents._URLComponents.encodedHost.getter();
  uint64_t v8 = v7;
  outlined release of URLComponents((uint64_t)&v18);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  outlined retain of URLComponents((uint64_t)&v18);
  Swift::UInt v9 = URLComponents._URLComponents.port.getter();
  char v11 = v10;
  outlined release of URLComponents((uint64_t)&v18);
  if ((v11 & 1) != 0)
  {
    Hasher._combine(_:)(0);
    if ((void)v25) {
      goto LABEL_20;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    if ((void)v25)
    {
LABEL_20:
      outlined retain of URLComponents((uint64_t)&v18);
      goto LABEL_31;
    }
  }

  if (BYTE14(v18) != 1 || !v5) {
    goto LABEL_20;
  }
  if ((v5[168] & 1) != 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v12 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v12 = String.subscript.getter();
  }

  MEMORY[0x186E1B610](v12);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v18);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)v26) {
    goto LABEL_32;
  }
  if (HIBYTE(v18) == 1 && v5 && (v5[192] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v16 = String.subscript.getter();
    MEMORY[0x186E1B610](v16);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    if (*(void *)&v26[16]) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }

  Hasher._combine(_:)(0);
  if (*(void *)&v26[16]) {
    goto LABEL_33;
  }
LABEL_38:
  if (v19 != 1 || !v5 || (v5[216] & 1) != 0)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined retain of URLComponents((uint64_t)&v18);
  uint64_t v17 = String.subscript.getter();
  MEMORY[0x186E1B610](v17);
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v18);
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URLComponents()
{
  __int128 v1 = v0[7];
  __int128 v24 = v0[6];
  __int128 v25 = v1;
  *(_OWORD *)char v26 = v0[8];
  *(_OWORD *)&v26[10] = *(__int128 *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  __int128 v20 = v0[2];
  __int128 v21 = v2;
  __int128 v3 = v0[5];
  __int128 v22 = v0[4];
  __int128 v23 = v3;
  __int128 v4 = v0[1];
  __int128 v18 = *v0;
  __int128 v19 = v4;
  Hasher.init(_seed:)();
  uint64_t v5 = (_BYTE *)v18;
  if ((void)v20) {
    goto LABEL_2;
  }
  if (BYTE9(v18) == 1 && (void)v18 && (*(_BYTE *)(v18 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v13 = String.subscript.getter();
    MEMORY[0x186E1B610](v13);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_2:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }

  Hasher._combine(_:)(0);
LABEL_7:
  URLComponents.percentEncodedUser.getter();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((void)v22)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if ((void)v22) {
      goto LABEL_9;
    }
  }

  if (BYTE11(v18) == 1 && v5 && (v5[96] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v14 = String.subscript.getter();
    MEMORY[0x186E1B610](v14);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
    goto LABEL_9;
  }

  Hasher._combine(_:)(0);
LABEL_15:
  outlined retain of URLComponents((uint64_t)&v18);
  URLComponents._URLComponents.encodedHost.getter();
  uint64_t v8 = v7;
  outlined release of URLComponents((uint64_t)&v18);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  outlined retain of URLComponents((uint64_t)&v18);
  Swift::UInt v9 = URLComponents._URLComponents.port.getter();
  char v11 = v10;
  outlined release of URLComponents((uint64_t)&v18);
  if ((v11 & 1) != 0)
  {
    Hasher._combine(_:)(0);
    if ((void)v25) {
      goto LABEL_20;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    if ((void)v25)
    {
LABEL_20:
      outlined retain of URLComponents((uint64_t)&v18);
      goto LABEL_31;
    }
  }

  if (BYTE14(v18) != 1 || !v5) {
    goto LABEL_20;
  }
  if ((v5[168] & 1) != 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v12 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v12 = String.subscript.getter();
  }

  MEMORY[0x186E1B610](v12);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v18);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)v26) {
    goto LABEL_32;
  }
  if (HIBYTE(v18) == 1 && v5 && (v5[192] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v16 = String.subscript.getter();
    MEMORY[0x186E1B610](v16);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    if (*(void *)&v26[16]) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }

  Hasher._combine(_:)(0);
  if (*(void *)&v26[16]) {
    goto LABEL_33;
  }
LABEL_38:
  if (v19 != 1 || !v5 || (v5[216] & 1) != 0)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined retain of URLComponents((uint64_t)&v18);
  uint64_t v17 = String.subscript.getter();
  MEMORY[0x186E1B610](v17);
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v18);
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t URLComponents.description.getter()
{
  uint64_t v0 = type metadata accessor for Mirror();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  __int128 v3 = (char *)v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URLComponents.url.getter((uint64_t *)&v63);
  __int128 v4 = (void *)v63;
  if (!(void)v63)
  {
    URLComponents.customMirror.getter((uint64_t)v3);
    uint64_t v10 = Mirror.children.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    char v66 = 0LL;
    unint64_t v67 = 0xE000000000000000LL;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*((void *)&v65 + 1))
    {
      v57[1] = v10;
      do
      {
        __int128 v61 = v63;
        v62[0] = v64;
        v62[1] = v65;
        v60._countAndFlagsBits = 0LL;
        v60._object = (void *)0xE000000000000000LL;
        __int128 v11 = v63;
        __int128 v58 = v63;
        outlined init with copy of Any((uint64_t)v62, (uint64_t)v59);
        if (*((void *)&v11 + 1)) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0LL;
        }
        if (*((void *)&v11 + 1)) {
          uint64_t v13 = (void *)*((void *)&v11 + 1);
        }
        else {
          uint64_t v13 = (void *)0xE000000000000000LL;
        }
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
        v14._countAndFlagsBits = v12;
        v14._object = v13;
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = 8250LL;
        v15._object = (void *)0xE200000000000000LL;
        String.append(_:)(v15);
        _print_unlocked<A, B>(_:_:)();
        v16._countAndFlagsBits = 32LL;
        v16._object = (void *)0xE100000000000000LL;
        String.append(_:)(v16);
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        outlined destroy of (label: String?, value: Any)((uint64_t)&v61);
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }

      while (*((void *)&v65 + 1));
      id v17 = v66;
    }

    else
    {
      id v17 = 0LL;
    }

    swift_release();
    swift_release();
    return (uint64_t)v17;
  }

  uint64_t v6 = *((void *)&v63 + 1);
  uint64_t v5 = v64;
  swift_retain();
  id v7 = v4;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    id v18 = objc_msgSend(v7, sel_description);
    id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);

    goto LABEL_42;
  }

  *(void *)&__int128 v63 = v7;
  *((void *)&v63 + 1) = v6;
  *(void *)&__int128 v64 = v5;
  URL.scheme.getter();
  if (!v8) {
    goto LABEL_29;
  }
  Swift::String v9 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v9._countAndFlagsBits == 1635017060 && v9._object == (void *)0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      goto LABEL_29;
    }
  }

  id v20 = v7;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v6) {
      goto LABEL_45;
    }
    swift_bridgeObjectRetain();
  }

  else
  {
    id v22 = objc_msgSend(v20, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  }

  outlined consume of URL?(v4);
  uint64_t v23 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v23 < 129)
  {
LABEL_29:
    id v25 = v7;
    swift_retain();
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      id v27 = objc_msgSend(v25, sel_relativeString);
      id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      char v26 = v28;

      goto LABEL_33;
    }

    if (v6)
    {
      id v17 = *(id *)(v6 + 16);
      char v26 = *(void **)(v6 + 24);
      swift_bridgeObjectRetain();
LABEL_33:
      outlined consume of URL?(v4);
      goto LABEL_40;
    }

    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  *(void *)&__int128 v63 = 0LL;
  *((void *)&v63 + 1) = 0xE000000000000000LL;
  id v24 = v20;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v29 = objc_msgSend(v24, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v29);

    goto LABEL_35;
  }

  if (!v6)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  swift_bridgeObjectRetain();
LABEL_35:
  outlined consume of URL?(v4);
  uint64_t v30 = specialized Collection.prefix(_:)(120LL);
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = MEMORY[0x186E1B610](v30, v32, v34, v36);
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 0x202E2E2E20LL;
  v38._object = (void *)0xE500000000000000LL;
  String.append(_:)(v38);
  id v39 = v24;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v42 = objc_msgSend(v39, sel_relativeString);
    id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    unint64_t v40 = v43;

    goto LABEL_39;
  }

  if (v6)
  {
    id v41 = *(id *)(v6 + 16);
    unint64_t v40 = *(void *)(v6 + 24);
    swift_bridgeObjectRetain();
LABEL_39:
    outlined consume of URL?(v4);
    unint64_t v44 = specialized BidirectionalCollection.suffix(_:)(8uLL, (uint64_t)v41, v40);
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    v51._countAndFlagsBits = MEMORY[0x186E1B610](v44, v46, v48, v50);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v26 = (void *)*((void *)&v63 + 1);
    id v17 = (id)v63;
LABEL_40:
    *(void *)&__int128 v61 = v7;
    *((void *)&v61 + 1) = v6;
    *(void *)&v62[0] = v5;
    URL.baseURL.getter((uint64_t *)&v63);
    unint64_t v52 = (void *)v63;
    if ((void)v63)
    {
      unint64_t v54 = *((void *)&v63 + 1);
      uint64_t v53 = v64;
      *(void *)&__int128 v63 = 0LL;
      *((void *)&v63 + 1) = 0xE000000000000000LL;
      v55._countAndFlagsBits = (uint64_t)v17;
      v55._object = v26;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._countAndFlagsBits = 539831584LL;
      v56._object = (void *)0xE400000000000000LL;
      String.append(_:)(v56);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v52, v54, v53);
      outlined consume of URL?(v52);
      outlined consume of URL?(v4);
      outlined consume of URL?(v4);
      return v63;
    }

uint64_t URLComponents.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v132 = v3;
  uint64_t v133 = v4;
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v7);
  v134 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v9 = v1[7];
  __int128 v10 = v1[5];
  __int128 v163 = v1[6];
  __int128 v164 = v9;
  __int128 v11 = v1[7];
  *(_OWORD *)v165 = v1[8];
  *(_OWORD *)&v165[10] = *(__int128 *)((char *)v1 + 138);
  __int128 v12 = v1[3];
  __int128 v13 = v1[1];
  __int128 v159 = v1[2];
  __int128 v160 = v12;
  __int128 v14 = v1[3];
  __int128 v15 = v1[5];
  __int128 v161 = v1[4];
  __int128 v162 = v15;
  __int128 v16 = v1[1];
  __int128 v157 = *v1;
  __int128 v158 = v16;
  __int128 v154 = v163;
  __int128 v155 = v11;
  v156[0] = v1[8];
  *(_OWORD *)((char *)v156 + 10) = *(__int128 *)((char *)v1 + 138);
  __int128 v150 = v159;
  __int128 v151 = v14;
  __int128 v152 = v161;
  __int128 v153 = v10;
  __int128 v148 = v157;
  __int128 v149 = v13;
  uint64_t v17 = v157;
  uint64_t v18 = MEMORY[0x189617FA8];
  if ((void)v159)
  {
    uint64_t v19 = *((void *)&v158 + 1);
    uint64_t v20 = v159;
  }

  else
  {
    __int128 v21 = (void *)MEMORY[0x18961AFE8];
    if (BYTE9(v157) != 1 || !(void)v157 || (*(_BYTE *)(v157 + 48) & 1) != 0) {
      goto LABEL_6;
    }
    outlined retain of URLComponents((uint64_t)&v157);
    uint64_t v18 = MEMORY[0x189617FA8];
    uint64_t v50 = String.subscript.getter();
    uint64_t v19 = MEMORY[0x186E1B610](v50);
    uint64_t v20 = v51;
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v157);
  }

  uint64_t v147 = v18;
  *(void *)&__int128 v146 = v19;
  *((void *)&v146 + 1) = v20;
  __int128 v137 = xmmword_183725740;
  outlined init with take of Any(&v146, &v138);
  swift_bridgeObjectRetain();
  __int128 v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v23 = v21[2];
  unint64_t v22 = v21[3];
  if (v23 >= v22 >> 1) {
    __int128 v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v22 > 1),  v23 + 1,  1,  v21);
  }
  v21[2] = v23 + 1;
  id v24 = &v21[6 * v23];
  __int128 v25 = v137;
  __int128 v26 = v139;
  v24[3] = v138;
  v24[4] = v26;
  v24[2] = v25;
LABEL_6:
  uint64_t v27 = outlined retain of URLComponents((uint64_t)&v157);
  char v28 = URLComponents._URLComponents.user.getter(v27);
  uint64_t v30 = v29;
  outlined release of URLComponents((uint64_t)&v157);
  if (v30)
  {
    uint64_t v147 = v18;
    *(void *)&__int128 v146 = v28;
    *((void *)&v146 + 1) = v30;
    __int128 v137 = xmmword_183725750;
    outlined init with take of Any(&v146, &v138);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int128 v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1,  v21);
    }
    unint64_t v32 = v21[2];
    unint64_t v31 = v21[3];
    if (v32 >= v31 >> 1) {
      __int128 v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v31 > 1),  v32 + 1,  1,  v21);
    }
    v21[2] = v32 + 1;
    uint64_t v33 = &v21[6 * v32];
    __int128 v34 = v137;
    __int128 v35 = v139;
    v33[3] = v138;
    v33[4] = v35;
    v33[2] = v34;
  }

  uint64_t v36 = outlined retain of URLComponents((uint64_t)&v157);
  Swift::String v37 = URLComponents._URLComponents.password.getter(v36);
  uint64_t v39 = v38;
  outlined release of URLComponents((uint64_t)&v157);
  if (v39)
  {
    uint64_t v147 = v18;
    *(void *)&__int128 v146 = v37;
    *((void *)&v146 + 1) = v39;
    __int128 v137 = xmmword_183725760;
    outlined init with take of Any(&v146, &v138);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int128 v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1,  v21);
    }
    unint64_t v41 = v21[2];
    unint64_t v40 = v21[3];
    if (v41 >= v40 >> 1) {
      __int128 v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v40 > 1),  v41 + 1,  1,  v21);
    }
    uint64_t v42 = a1;
    v21[2] = v41 + 1;
    unint64_t v43 = &v21[6 * v41];
    __int128 v44 = v137;
    __int128 v45 = v139;
    v43[3] = v138;
    v43[4] = v45;
    v43[2] = v44;
    unint64_t v46 = v162;
    if ((void)v162) {
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v42 = a1;
    unint64_t v46 = v162;
    if ((void)v162)
    {
LABEL_18:
      uint64_t v47 = *((void *)&v161 + 1);
      uint64_t v48 = outlined retain of URLComponents((uint64_t)&v157);
      unint64_t v49 = v46;
      goto LABEL_31;
    }
  }

  if (BYTE12(v157) == 1 && v17 && (*(_BYTE *)(v17 + 120) & 1) == 0)
  {
    v131 = v6;
    outlined retain of URLComponents((uint64_t)&v157);
    uint64_t v6 = v131;
    uint64_t v55 = String.subscript.getter();
    uint64_t v47 = MEMORY[0x186E1B610](v55);
    unint64_t v49 = v56;
    uint64_t v48 = swift_bridgeObjectRelease();
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v157);
    uint64_t v48 = URLComponents._URLComponents.port.getter();
    if ((v52 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v54 = v53;
      uint64_t v48 = swift_bridgeObjectRelease();
      if (!v54)
      {
        outlined release of URLComponents((uint64_t)&v157);
        uint64_t v67 = v132;
        goto LABEL_60;
      }
    }

    uint64_t v47 = 0LL;
    unint64_t v49 = 0xE000000000000000LL;
  }

uint64_t URLComponents.debugDescription.getter()
{
  unint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  unint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v304 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v304 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  __int128 v11 = (char *)&v304 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v12 = v0[7];
  __int128 v353 = v0[6];
  __int128 v354 = v12;
  *(_OWORD *)v355 = v0[8];
  *(_OWORD *)&v355[10] = *(__int128 *)((char *)v0 + 138);
  __int128 v13 = v0[3];
  __int128 v349 = v0[2];
  __int128 v350 = v13;
  __int128 v14 = v0[5];
  __int128 v351 = v0[4];
  __int128 v352 = v14;
  __int128 v15 = v0[1];
  __int128 v347 = *v0;
  __int128 v348 = v15;
  outlined retain of URLComponents((uint64_t)&v347);
  URLComponents.url.getter((uint64_t *)&v338);
  if ((void)v338)
  {
    __int128 v17 = v338;
    uint64_t v16 = v339;
    if (!_foundation_swift_url_feature_enabled())
    {
      uint64_t v18 = (void *)v17;
      id v32 = objc_msgSend((id)v17, sel_description);
      id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);

      goto LABEL_89;
    }

    uint64_t v18 = (void *)v17;
    __int128 v338 = v17;
    *(void *)&__int128 v339 = v16;
    URL.scheme.getter();
    if (!v19) {
      goto LABEL_70;
    }
    Swift::String v20 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v20._countAndFlagsBits == 1635017060 && v20._object == (void *)0xE400000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0) {
        goto LABEL_70;
      }
    }

    swift_retain();
    id v49 = (id)v17;
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if ((_DWORD)result)
    {
      if (!*((void *)&v17 + 1)) {
        goto LABEL_304;
      }
      swift_bridgeObjectRetain();
    }

    else
    {
      id v90 = objc_msgSend(v49, sel_relativeString);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
    }

    outlined consume of URL?((void *)v17);
    uint64_t v91 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v91 >= 129)
    {
      *(void *)&__int128 v338 = 0LL;
      *((void *)&v338 + 1) = 0xE000000000000000LL;
      id v92 = v49;
      swift_retain();
      swift_retain();
      uint64_t result = _foundation_swift_url_feature_enabled();
      if (!(_DWORD)result)
      {
        id v99 = objc_msgSend(v92, sel_relativeString);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v99);

        goto LABEL_82;
      }

      if (*((void *)&v17 + 1))
      {
        swift_bridgeObjectRetain();
LABEL_82:
        outlined consume of URL?((void *)v17);
        uint64_t v100 = specialized Collection.prefix(_:)(120LL);
        uint64_t v102 = v101;
        uint64_t v104 = v103;
        uint64_t v106 = v105;
        swift_bridgeObjectRelease();
        v107._countAndFlagsBits = MEMORY[0x186E1B610](v100, v102, v104, v106);
        String.append(_:)(v107);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v108._countAndFlagsBits = 0x202E2E2E20LL;
        v108._object = (void *)0xE500000000000000LL;
        String.append(_:)(v108);
        id v109 = v92;
        swift_retain();
        swift_retain();
        uint64_t result = _foundation_swift_url_feature_enabled();
        if (!(_DWORD)result)
        {
          id v112 = objc_msgSend(v109, sel_relativeString);
          id v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
          unint64_t v110 = v113;

          goto LABEL_86;
        }

        if (*((void *)&v17 + 1))
        {
          id v111 = *(id *)(*((void *)&v17 + 1) + 16LL);
          unint64_t v110 = *(void *)(*((void *)&v17 + 1) + 24LL);
          swift_bridgeObjectRetain();
LABEL_86:
          outlined consume of URL?((void *)v17);
          unint64_t v114 = specialized BidirectionalCollection.suffix(_:)(8uLL, (uint64_t)v111, v110);
          uint64_t v116 = v115;
          uint64_t v118 = v117;
          uint64_t v120 = v119;
          swift_bridgeObjectRelease();
          v121._countAndFlagsBits = MEMORY[0x186E1B610](v114, v116, v118, v120);
          String.append(_:)(v121);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v94 = (void *)*((void *)&v338 + 1);
          id v33 = (id)v338;
LABEL_87:
          __int128 v329 = v17;
          *(void *)&__int128 v330 = v16;
          URL.baseURL.getter((uint64_t *)&v338);
          v122 = (void *)v338;
          if ((void)v338)
          {
            unint64_t v124 = *((void *)&v338 + 1);
            uint64_t v123 = v339;
            *(void *)&__int128 v338 = 0LL;
            *((void *)&v338 + 1) = 0xE000000000000000LL;
            v125._countAndFlagsBits = (uint64_t)v33;
            v125._object = v94;
            String.append(_:)(v125);
            swift_bridgeObjectRelease();
            v126._countAndFlagsBits = 539831584LL;
            v126._object = (void *)0xE400000000000000LL;
            String.append(_:)(v126);
            specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v122, v124, v123);
            outlined consume of URL?(v122);
            outlined consume of URL?((void *)v17);
            outlined release of URLComponents((uint64_t)&v347);
            return v338;
          }

LABEL_89:
          outlined consume of URL?(v18);
          goto LABEL_282;
        }

    __int128 v75 = v58 + 32;
    if (v70 <= v64) {
      unint64_t v77 = v64;
    }
    else {
      unint64_t v77 = v70;
    }
    while (v77 != v70)
    {
      if (v70 >= *(void *)(v60 + 16)) {
        goto LABEL_113;
      }
      v62[v70] = *(_WORD *)(v75 + 2 * v70);
      if ((uint64_t)++v70 >= (uint64_t)v64)
      {
        uint64_t v68 = 1;
LABEL_96:
        if ((uint64_t)v70 < (uint64_t)v65)
        {
          while (1)
          {
LABEL_97:
            if (v70 >= v65) {
              goto LABEL_156;
            }
            unint64_t v64 = *(void *)(v60 + 16);
            if (v70 < v64) {
              break;
            }
LABEL_102:
            __break(1u);
LABEL_103:
            uint64_t v68 = HIWORD(v61);
            unint64_t v70 = v64;
          }

          unint64_t v86 = v68 + (*(unsigned __int16 *)(v40 + 32 + 2 * v70) ^ 0xFFFF);
          --v65;
          unint64_t v64 = v40 + 34;
          while (1)
          {
            uint64_t v68 = HIWORD(v86);
            v62[v70] = v86;
            if (v65 == v70) {
              break;
            }
            unint64_t v86 = v68 + (*(unsigned __int16 *)(v64 + 2 * v70++) ^ 0xFFFF);
            if (v70 >= *(void *)(v60 + 16)) {
              goto LABEL_102;
            }
          }
        }

      id v24 = v26 ^ 1;
      unint64_t v26 = v24;
LABEL_129:
      uint64_t v5 = v30;
      unint64_t v56 = objc_msgSend(*(id *)(v30 + 16), sel_containsIndex_, v31, v58);
      uint64_t v57 = objc_msgSend(*(id *)(v71 + 16), sel_containsIndex_, v31);
      uint64_t v23 = v56 ^ v57;
      if ((v29 & 1) == 0)
      {
        unint64_t v28 = v61;
        if (v23) {
          unint64_t v28 = v31;
        }
        unint64_t v61 = v28;
        goto LABEL_31;
      }

      uint64_t v29 = v56 ^ v57;
      if ((v23 & 1) == 0)
      {
        uint64_t result = (char *)v61;
        if (v31 >= v61)
        {
          IndexSet.insert(integersIn:)(v61, v31);
          goto LABEL_31;
        }

        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
        goto LABEL_157;
      }
    }
  }

  uint64_t v18 = *(_BYTE *)(v4 + 24);
  uint64_t result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeAtIndex_, 0);
  Swift::String v20 = &result[v19];
  uint64_t v21 = __OFADD__(result, v19);
  if ((v18 & 1) != 0)
  {
    if (!v21)
    {
      if ((uint64_t)v20 < (uint64_t)result)
      {
        __break(1u);
        goto LABEL_22;
      }

        outlined retain of LocalePreferences?( (uint64_t)v94,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_53;
      }
    }

    else if (!v68)
    {
      goto LABEL_45;
    }

    if (v25 == v47) {
      break;
    }
    if (v39 == v37) {
      return 0LL;
    }
    uint64_t result = Substring.UnicodeScalarView.index(_:offsetBy:)();
    __int128 v17 = result;
  }

  if (v39 > v17 >> 14) {
    goto LABEL_97;
  }
  return v40;
}

      swift_release();
      if (!v103) {
        goto LABEL_97;
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_98;
    }

  uint64_t v8 = HIDWORD(v2) & 1;
  if ((specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)( v3,  v2 | (unint64_t)(v8 << 32),  3) & 1) != 0 || (specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)( v3,  v2 | (unint64_t)(v8 << 32),  35) & 1) != 0 || (specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)( v3,  v2 | (unint64_t)(v8 << 32),  40) & 1) != 0)
  {
LABEL_5:
    LOBYTE(a1) = 1;
    return a1 & 1;
  }

  LOBYTE(a1) = specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)( v3,  v2 | (unint64_t)(v8 << 32),  38);
  if ((a1 & 1) == 0 && (v2 & 0x100000000LL) == 0)
  {
    LOBYTE(a1) = 0;
    if ((v3 - 1632) >= 0xFFFFFFEB && (_DWORD)v2 != 47)
    {
      if ((v2 & 0x80000000) != 0)
      {
        __break(1u);
        JUMPOUT(0x18331C820LL);
      }

      LOBYTE(a1) = ublock_getCode(v2) != UBLOCK_ARABIC;
    }
  }

  return a1 & 1;
}

    v59(v234, a2);
    (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v144, v56);
    return 0LL;
  }

  lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v145 = v228;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  __int128 v144 = v232;
LABEL_65:
  __int128 v148 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v145, v56);
  if ((v148 & 1) != 0) {
    goto LABEL_89;
  }
LABEL_71:
  v210 = v59;
  uint64_t v207 = (_BYTE *)dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
  __int128 v149 = *(_BYTE **)(v84 + 32);
  uint64_t v150 = v84;
  char v151 = v221;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v149)(v221, v144, v56);
  char v152 = dispatch thunk of static BinaryInteger.isSigned.getter();
  unint64_t v153 = v212;
  uint64_t v232 = *(_BYTE **)(v150 + 16);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v232)(v212, v151, v56);
  if ((v152 & 1) == 0)
  {
    __int128 v155 = *(void (**)(_BYTE *, uint64_t))(v150 + 8);
    v155(v153, v56);
    goto LABEL_77;
  }

  uint64_t v206 = v149;
  unint64_t v154 = dispatch thunk of BinaryInteger.bitWidth.getter();
  __int128 v155 = *(void (**)(_BYTE *, uint64_t))(v150 + 8);
  v155(v153, v56);
  __int128 v156 = v214;
  if (v154 < 65)
  {
    uint64_t v160 = v221;
    unint64_t v161 = (void (*)(_BYTE *, _BYTE *, uint64_t))v232;
    goto LABEL_104;
  }

  __int128 v157 = v204;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v232)(v204, v221, v56);
  uint64_t v236 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      unint64_t v158 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v157, v56);
      uint64_t v159 = v158 < v236;
      uint64_t v160 = v221;
      goto LABEL_103;
    }

    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v180 = v228;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v179 = dispatch thunk of static Comparable.< infix(_:_:)();
    v155(v180, v56);
    uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v157, v56);
    uint64_t v160 = v221;
LABEL_95:
    unint64_t v161 = (void (*)(_BYTE *, _BYTE *, uint64_t))v232;
    if ((v179 & 1) != 0) {
      goto LABEL_123;
    }
LABEL_104:
    unint64_t v189 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v161(v156, v160, v56);
    if (v189 <= 64)
    {
      uint64_t v192 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v155(v156, v56);
      if (v192 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
        goto LABEL_117;
      }
    }

    else
    {
      v155(v156, v56);
    }

    __int128 v156 = v215;
    v161(v215, v160, v56);
    uint64_t v236 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v190 = dispatch thunk of static BinaryInteger.isSigned.getter();
    unint64_t v191 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v190 & 1) != 0)
    {
      if (v191 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        while (1)
        {
          uint64_t v195 = v228;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          __int128 v156 = v215;
          uint64_t v196 = dispatch thunk of static Comparable.< infix(_:_:)();
          v155(v195, v56);
          v155(v156, v56);
          if ((v196 & 1) == 0) {
            break;
          }
LABEL_114:
          __break(1u);
LABEL_115:
          unint64_t v235 = 0x7FFFFFFFFFFFFFFFLL;
          lazy protocol witness table accessor for type Int and conformance Int();
        }

        goto LABEL_117;
      }
    }

    else if (v191 >= 64)
    {
      goto LABEL_115;
    }

    char v193 = v215;
    unint64_t v194 = dispatch thunk of BinaryInteger._lowWord.getter();
    v155(v193, v56);
    if (v236 < v194) {
      goto LABEL_114;
    }
LABEL_117:
    uint64_t v197 = dispatch thunk of BinaryInteger._lowWord.getter();
    v155(v160, v56);
    unint64_t v198 = Double.exponent.getter();
    if (!__OFSUB__(v197, v198))
    {
      unint64_t v59 = (void (*)(_BYTE *, uint64_t))v210;
      __int128 v55 = v211;
      unint64_t v47 = v201;
      if (v197 - v198 < (uint64_t)v207)
      {
        unint64_t v171 = v234;
        goto LABEL_120;
      }

      goto LABEL_15;
    }

    __break(1u);
    goto LABEL_122;
  }

  unint64_t v175 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v176 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v175 & 1) == 0)
  {
    if (v176 < 64)
    {
      unint64_t v181 = v204;
      unint64_t v56 = v233;
      uint64_t v182 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v181, v56);
      uint64_t v159 = v182 < v236;
      goto LABEL_102;
    }

    unint64_t v56 = v233;
    v155(v204, v233);
LABEL_77:
    uint64_t v160 = v221;
    __int128 v156 = v214;
    unint64_t v161 = (void (*)(_BYTE *, _BYTE *, uint64_t))v232;
    goto LABEL_104;
  }

  if (v176 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    __int128 v177 = v228;
    unint64_t v56 = v233;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    __int128 v178 = v204;
    unint64_t v179 = dispatch thunk of static Comparable.< infix(_:_:)();
    v155(v177, v56);
    uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v178, v56);
    uint64_t v160 = v221;
    __int128 v156 = v214;
    goto LABEL_95;
  }

  unint64_t v56 = v233;
  uint64_t v183 = v209;
  uint64_t v184 = swift_getAssociatedConformanceWitness();
  MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v183, v184);
  uint64_t v185 = v228;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  unint64_t v186 = v204;
  LOBYTE(v183) = dispatch thunk of static Comparable.< infix(_:_:)();
  v155(v185, v56);
  __int128 v156 = v202;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v206)(v202, v186, v56);
  if ((v183 & 1) != 0)
  {
LABEL_122:
    uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v156, v56);
    goto LABEL_123;
  }

  unint64_t v187 = v236;
  unint64_t v188 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v156, v56);
  uint64_t v159 = v188 < v187;
LABEL_102:
  uint64_t v160 = v221;
  __int128 v156 = v214;
LABEL_103:
  unint64_t v161 = (void (*)(_BYTE *, _BYTE *, uint64_t))v232;
  if (!v159) {
    goto LABEL_104;
  }
LABEL_123:
  __break(1u);
  return result;
}

    unint64_t v42 = 0LL;
    goto LABEL_97;
  }

  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  unint64_t v62 = v87;
LABEL_85:
  *unint64_t v88 = v13;
  return v62;
}

    unint64_t v64 = 0LL;
    a5 = v66;
    do
    {
      [v23 setValue:*(void *)((char *)v72 + v64) forComponent:*(void *)((char *)v74 + v64)];
      v64 += 8LL;
    }

    while (v64 != 56);
    _Block_object_dispose(v70, 8);
  }

  *a5 = allowedUnits;
  return v23;
}

LABEL_306:
        __break(1u);
        goto LABEL_307;
      }

          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
        }

        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
LABEL_317:
        __break(1u);
        JUMPOUT(0x18342B4B4LL);
      }

      unint64_t v70 = v66 + 1;
      if (__OFADD__(v66, 1LL)) {
        goto LABEL_289;
      }
      ++v66;
      --v65;
      if (v64 + v66 >= v60) {
        goto LABEL_78;
      }
    }

    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }

  if (!a2)
  {
LABEL_291:
    __break(1u);
    goto LABEL_292;
  }

  __int128 v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v13 == 48)
  {
    unint64_t v215 = a4;
    if (v11 >= 1) {
      __int128 v14 = 1LL;
    }
    else {
      __int128 v14 = v11;
    }
    __int128 v15 = v12 + v14;
    uint64_t v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      __int128 v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
      uint64_t v18 = 0;
      if (v17 <= 0x57u)
      {
        uint64_t v40 = v12;
        if (v17 == 46 || v17 == 69) {
          goto LABEL_151;
        }
LABEL_107:
        unint64_t v98 = _asciiNumbers.getter();
        id v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v215);
        uint64_t v101 = v100;
        uint64_t v103 = v102;
        if (v17 < v98 || HIBYTE(v98) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)unint64_t v39 = xmmword_1837301C0;
          *(void *)(v39 + 16) = v17;
          *(void *)(v39 + 24) = v99;
          *(void *)(v39 + 32) = v101;
          *(void *)(v39 + 40) = v103;
          goto LABEL_247;
        }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)unint64_t v39 = v99;
        *(void *)(v39 + 8) = v101;
        *(void *)(v39 + 16) = v103;
        goto LABEL_110;
      }

      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          uint64_t v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19)) {
            goto LABEL_14;
          }
          id v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v215);
          id v95 = v180;
          unint64_t v97 = v181;
          __int128 v11 = v19;
          goto LABEL_237;
        }

        if (v16 < 1) {
          goto LABEL_317;
        }
        uint64_t v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
        uint64_t v106 = v15;
        Swift::String v107 = a3;
        Swift::String v108 = v215;
LABEL_236:
        id v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v106, v107, v108);
        id v95 = v174;
        unint64_t v97 = v175;
        __int128 v11 = v105;
LABEL_237:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)unint64_t v39 = xmmword_1837301C0;
        goto LABEL_238;
      }

      if (v17 != 101)
      {
        if (v17 == 88) {
          goto LABEL_12;
        }
        goto LABEL_107;
      }

    if (!v67 && !v66 && v68 == -1)
    {
      unint64_t v67 = [v73 dayOfMonth];
      unint64_t v66 = [v73 monthOfYear];
      uint64_t v68 = [v73 yearOfCommonEra];
    }

    goto LABEL_310;
  }

  uint64_t v104 = -1LL;
  if (v73) {
    goto LABEL_306;
  }
LABEL_310:
  if (!v67 && !v66 && v68 == -1 && v104 == -1) {
    return 0LL;
  }
  if (!v67)
  {
    if (!a4) {
      a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
    }
    unint64_t v67 = [a4 dayOfMonth];
  }

  if (!v66)
  {
    if (!a4) {
      a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
    }
    unint64_t v66 = [a4 monthOfYear];
  }

  if (v68 == -1)
  {
    if (!a4) {
      a4 = +[NSCalendarDate calendarDate](&OBJC_CLASS___NSCalendarDate, "calendarDate");
    }
    uint64_t v68 = [a4 yearOfCommonEra];
  }

  if (v104 == -1) {
    uint64_t v106 = 12LL;
  }
  else {
    uint64_t v106 = v104;
  }
  if (!v24) {
    id v24 = [MEMORY[0x189604020] defaultTimeZone];
  }
  a4 = 0LL;
  if ((unint64_t)(v68 - 4001) >= 0xFFFFFFFFFFFFF060LL && v66 >= 1 && v66 <= 12 && v67 >= 1 && v67 <= 31) {
    return (NSCalendarDate *)(id)[v110 dateWithYear:v68 month:v66 day:v67 hour:v106 minute:v21 second:v22 timeZone:v24];
  }
  return (NSCalendarDate *)a4;
}

LABEL_305:
      __break(1u);
      goto LABEL_306;
    }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v374 = (uint64_t)v445;
        v375 = v448;
        outlined consume of PathOrURL(v178, (uint64_t)v445, (uint64_t)v448, 1);
        outlined consume of PathOrURL(v178, v374, (uint64_t)v375, 1);
LABEL_310:
        __int128 v341 = (uint64_t)v445;
        v176 = v448;
LABEL_311:
        v378 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v379 = (id)v11;
        outlined consume of PathOrURL(v178, v341, (uint64_t)v176, 1);
        v380 = (void *)v444;
        if (v444)
        {
          *(void *)&v455.f_bsize = v444;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          v381 = v380;
          if (_getErrorEmbeddedNSError<A>(_:)())
          {
          }

          else
          {
            swift_allocError();
            *v384 = v381;
          }

          v383 = v446;
          v382 = (void *)_swift_stdlib_bridgeErrorToNSError();
        }

        else
        {
          v382 = 0LL;
          v383 = v446;
        }

         objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v383,  v378,  v379,  v382,  0,  0,  0);

        swift_unknownObjectRelease();
        outlined consume of PathOrURL(v178, v341, (uint64_t)v448, 1);
        __int128 v157 = (int)v449;
        goto LABEL_318;
      }

          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
        }

        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
        JUMPOUT(0x183429D20LL);
      }

      unint64_t v70 = v66 + 1;
      if (__OFADD__(v66, 1LL)) {
        goto LABEL_288;
      }
      ++v66;
      --v65;
      if (v64 + v66 >= v60) {
        goto LABEL_78;
      }
    }

    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
    goto LABEL_290;
  }

  if (!a2)
  {
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }

  __int128 v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v13 == 48)
  {
    unint64_t v215 = a4;
    if (v11 >= 1) {
      __int128 v14 = 1LL;
    }
    else {
      __int128 v14 = v11;
    }
    __int128 v15 = v12 + v14;
    uint64_t v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      __int128 v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
      uint64_t v18 = 0;
      if (v17 <= 0x57u)
      {
        uint64_t v40 = v12;
        if (v17 == 46 || v17 == 69) {
          goto LABEL_151;
        }
LABEL_107:
        unint64_t v98 = _asciiNumbers.getter();
        id v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v215);
        uint64_t v101 = v100;
        uint64_t v103 = v102;
        if (v17 < v98 || HIBYTE(v98) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)unint64_t v39 = xmmword_1837301C0;
          *(void *)(v39 + 16) = v17;
          *(void *)(v39 + 24) = v99;
          *(void *)(v39 + 32) = v101;
          *(void *)(v39 + 40) = v103;
          goto LABEL_247;
        }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)unint64_t v39 = v99;
        *(void *)(v39 + 8) = v101;
        *(void *)(v39 + 16) = v103;
        goto LABEL_110;
      }

      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          uint64_t v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19)) {
            goto LABEL_14;
          }
          id v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v215);
          id v95 = v180;
          unint64_t v97 = v181;
          __int128 v11 = v19;
          goto LABEL_237;
        }

        if (v16 < 1) {
          goto LABEL_316;
        }
        uint64_t v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
        uint64_t v106 = v15;
        Swift::String v107 = a3;
        Swift::String v108 = v215;
LABEL_236:
        id v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v106, v107, v108);
        id v95 = v174;
        unint64_t v97 = v175;
        __int128 v11 = v105;
LABEL_237:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)unint64_t v39 = xmmword_1837301C0;
        goto LABEL_238;
      }

      if (v17 != 101)
      {
        if (v17 == 88) {
          goto LABEL_12;
        }
        goto LABEL_107;
      }

          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
        }

        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
        JUMPOUT(0x18342CC40LL);
      }

      unint64_t v70 = v66 + 1;
      if (__OFADD__(v66, 1LL)) {
        goto LABEL_288;
      }
      ++v66;
      --v65;
      if (v64 + v66 >= v60) {
        goto LABEL_78;
      }
    }

    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
    goto LABEL_290;
  }

  if (!a2)
  {
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }

  __int128 v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v13 == 48)
  {
    uint64_t v217 = a4;
    if (v11 >= 1) {
      __int128 v14 = 1LL;
    }
    else {
      __int128 v14 = v11;
    }
    __int128 v15 = v12 + v14;
    uint64_t v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      __int128 v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
      uint64_t v18 = 0;
      if (v17 <= 0x57u)
      {
        uint64_t v40 = v12;
        if (v17 == 46 || v17 == 69) {
          goto LABEL_151;
        }
LABEL_107:
        uint64_t v100 = _asciiNumbers.getter();
        uint64_t v101 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v217);
        uint64_t v103 = v102;
        uint64_t v105 = v104;
        if (v17 < v100 || HIBYTE(v100) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)unint64_t v39 = xmmword_1837301C0;
          *(void *)(v39 + 16) = v17;
          *(void *)(v39 + 24) = v101;
          *(void *)(v39 + 32) = v103;
          *(void *)(v39 + 40) = v105;
          goto LABEL_247;
        }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)unint64_t v39 = v101;
        *(void *)(v39 + 8) = v103;
        *(void *)(v39 + 16) = v105;
        goto LABEL_110;
      }

      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          uint64_t v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19)) {
            goto LABEL_14;
          }
          id v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v217);
          unint64_t v97 = v182;
          id v99 = v183;
          __int128 v11 = v19;
          goto LABEL_237;
        }

        if (v16 < 1) {
          goto LABEL_316;
        }
        Swift::String v107 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
        Swift::String v108 = v15;
        id v109 = a3;
        unint64_t v110 = v217;
LABEL_236:
        id v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v108, v109, v110);
        unint64_t v97 = v176;
        id v99 = v177;
        __int128 v11 = v107;
LABEL_237:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)unint64_t v39 = xmmword_1837301C0;
        goto LABEL_238;
      }

      if (v17 != 101)
      {
        if (v17 == 88) {
          goto LABEL_12;
        }
        goto LABEL_107;
      }

        __break(1u);
LABEL_306:
        __break(1u);
        goto LABEL_307;
      }

      id v73 = v72;
      if (!specialized static Comparable.<= infix(_:_:)(v213, v12 + v11 - 1)) {
        goto LABEL_298;
      }
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v213 + v218))
      {
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
        goto LABEL_302;
      }

      __int128 v74 = specialized min<A>(_:_:)(v12 + v11, v213 + v218);
      if (v74 <= v213)
      {
        Swift::Int v85 = 0LL;
        uint64_t v78 = 1LL;
        goto LABEL_116;
      }

      __int128 v75 = v74;
      uint64_t v209 = v73;
      uint64_t v76 = v218 + v213;
      unint64_t v77 = -(uint64_t)v213;
      uint64_t v78 = 1LL;
      unint64_t v79 = v213;
LABEL_72:
      uint64_t v80 = 0LL;
      uint64_t v81 = 0LL;
      uint64_t v82 = v76 - v79;
      v83 = v77 + v79;
      while ((uint64_t)(v83 + v81) >= 0 && (uint64_t)(v82 + v80) >= 1)
      {
        unint64_t v84 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v79 + v81);
        if (v84 == 10)
        {
          unint64_t v86 = __OFADD__(v78++, 1LL);
          if (!v86)
          {
            v79 += v81 + 1;
            goto LABEL_89;
          }

          goto LABEL_306;
        }

        if (v84 == 13)
        {
          uint64_t v87 = v79 + v81;
          if (!specialized static Comparable.<= infix(_:_:)(v79 + v81 + 1, v71)) {
            goto LABEL_87;
          }
          if (((v79 - v213 + v81 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v81 + v82) >= 1)
          {
LABEL_87:
            unint64_t v86 = __OFADD__(v78++, 1LL);
            if (!v86)
            {
              unint64_t v79 = v87 + 1;
LABEL_89:
              uint64_t v76 = v218 + v213;
              unint64_t v77 = -(uint64_t)v213;
              if (v79 >= v75)
              {
                Swift::Int v85 = 0LL;
LABEL_91:
                id v73 = v209;
LABEL_116:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)Swift::String v108 = 0xD000000000000010LL;
                *(void *)(v108 + 8) = 0x80000001839CB4F0LL;
                *(void *)(v108 + 16) = v73;
                *(void *)(v108 + 24) = v78;
                *(void *)(v108 + 32) = v85;
                *(void *)(v108 + 40) = v71 - v213;
                *(_BYTE *)(v108 + 48) = 1;
                goto LABEL_262;
              }

              goto LABEL_72;
            }

LABEL_107:
    *((void *)&v326[0] + 1) = MEMORY[0x189617FA8];
    *(void *)&__int128 v325 = v87;
    *((void *)&v325 + 1) = v89;
    __int128 v329 = xmmword_183725770;
    outlined init with take of Any(&v325, &v330);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      unint64_t v1 = v313;
      __int128 v144 = (void *)v28;
    }

    else
    {
      __int128 v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v28 + 16) + 1LL,  1,  (void *)v28);
      unint64_t v1 = v313;
    }

    unint64_t v146 = v144[2];
    unint64_t v145 = v144[3];
    if (v146 >= v145 >> 1) {
      __int128 v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v145 > 1),  v146 + 1,  1,  v144);
    }
    v144[2] = v146 + 1;
    unint64_t v28 = (unint64_t)v144;
    uint64_t v147 = &v144[6 * v146];
    __int128 v148 = v329;
    __int128 v149 = v331;
    v147[3] = v330;
    v147[4] = v149;
    v147[2] = v148;
LABEL_112:
    outlined retain of URLComponents((uint64_t)&v347);
    uint64_t v150 = URLComponents._URLComponents.port.getter();
    char v152 = v151;
    outlined release of URLComponents((uint64_t)&v347);
    if ((v152 & 1) == 0)
    {
      *((void *)&v326[0] + 1) = MEMORY[0x189618740];
      *(void *)&__int128 v325 = v150;
      __int128 v329 = xmmword_183725780;
      outlined init with take of Any(&v325, &v330);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v28 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v28 + 16) + 1LL,  1,  (void *)v28);
      }
      unint64_t v154 = *(void *)(v28 + 16);
      unint64_t v153 = *(void *)(v28 + 24);
      if (v154 >= v153 >> 1) {
        unint64_t v28 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v153 > 1),  v154 + 1,  1,  (void *)v28);
      }
      *(void *)(v28 + 16) = v154 + 1;
      __int128 v155 = (_OWORD *)(v28 + 48 * v154);
      __int128 v156 = v329;
      __int128 v157 = v331;
      v155[3] = v330;
      v155[4] = v157;
      v155[2] = v156;
    }

    unint64_t v158 = v354;
    if ((void)v354)
    {
      uint64_t v159 = *((void *)&v353 + 1);
      uint64_t v160 = outlined retain of URLComponents((uint64_t)&v347);
      unint64_t v161 = v158;
    }

    else if (BYTE14(v347) == 1 && v309)
    {
      if ((v309[168] & 1) != 0)
      {
        outlined retain of URLComponents((uint64_t)&v347);
        uint64_t v162 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
      }

      else
      {
        outlined retain of URLComponents((uint64_t)&v347);
        uint64_t v162 = String.subscript.getter();
      }

      uint64_t v159 = MEMORY[0x186E1B610](v162);
      unint64_t v161 = v163;
      uint64_t v160 = swift_bridgeObjectRelease();
      unint64_t v1 = v313;
    }

    else
    {
      uint64_t v160 = outlined retain of URLComponents((uint64_t)&v347);
      uint64_t v159 = 0LL;
      unint64_t v161 = 0xE000000000000000LL;
    }

    uint64_t v164 = HIBYTE(v161) & 0xF;
    if ((v161 & 0x2000000000000000LL) == 0) {
      uint64_t v164 = v159 & 0xFFFFFFFFFFFFLL;
    }
    if (v164)
    {
      *(void *)&__int128 v329 = v159;
      *((void *)&v329 + 1) = v161;
      MEMORY[0x1895F8858](v160);
      *(&v304 - 2) = (uint64_t)&v329;
      *(&v304 - 1) = MEMORY[0x18961AFF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v165 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v304 - 4),  v159,  v161);
      unint64_t v312 = v39;
      if (v166 == 1)
      {
        unint64_t v168 = *((void *)&v329 + 1);
        Swift::Int v167 = v329;
        swift_bridgeObjectRetain();
        v169 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v167,  v168,  MEMORY[0x18961AFF8]);
        unint64_t v171 = v170;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }

      else
      {
        v169 = v165;
        unint64_t v171 = v166;
        swift_bridgeObjectRelease_n();
      }

      unint64_t v1 = v313;
      unint64_t v39 = v310;
      if (!v171)
      {
        outlined release of URLComponents((uint64_t)&v347);
        v169 = 0LL;
        unint64_t v171 = 0xE000000000000000LL;
        goto LABEL_137;
      }
    }

    else
    {
      unint64_t v312 = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v169 = 0LL;
      unint64_t v171 = 0xE000000000000000LL;
      unint64_t v39 = v310;
    }

    outlined release of URLComponents((uint64_t)&v347);
LABEL_137:
    *((void *)&v326[0] + 1) = MEMORY[0x189617FA8];
    *(void *)&__int128 v325 = v169;
    *((void *)&v325 + 1) = v171;
    __int128 v329 = xmmword_183725790;
    outlined init with take of Any(&v325, &v330);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      uint64_t v172 = v311;
      v173 = (void *)v28;
    }

    else
    {
LABEL_291:
      v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v28 + 16) + 1LL,  1,  (void *)v28);
      uint64_t v172 = v311;
    }

    unint64_t v175 = v173[2];
    unint64_t v174 = v173[3];
    if (v175 >= v174 >> 1) {
      v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v174 > 1),  v175 + 1,  1,  v173);
    }
    v173[2] = v175 + 1;
    v176 = &v173[6 * v175];
    __int128 v177 = v329;
    __int128 v178 = v331;
    v176[3] = v330;
    v176[4] = v178;
    v176[2] = v177;
    unint64_t v179 = *(void *)v355;
    if (*(void *)v355)
    {
      uint64_t v180 = v172;
      v305 = v173;
      unint64_t v181 = *((void *)&v354 + 1);
      outlined retain of URLComponents((uint64_t)&v347);
      unint64_t v28 = v179;
    }

    else
    {
      if (HIBYTE(v347) != 1 || !v309 || (v309[192] & 1) != 0) {
        goto LABEL_253;
      }
      v305 = v173;
      outlined retain of URLComponents((uint64_t)&v347);
      unint64_t v39 = v310;
      uint64_t v180 = v311;
      unint64_t v1 = v313;
      uint64_t v234 = String.subscript.getter();
      unint64_t v181 = MEMORY[0x186E1B610](v234);
      unint64_t v28 = v235;
      swift_bridgeObjectRelease();
    }

    uint64_t v182 = v181 & 0xFFFFFFFFFFFFLL;
    if ((v28 & 0x2000000000000000LL) != 0) {
      uint64_t v182 = HIBYTE(v28) & 0xF;
    }
    if (!v182)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v347);
      uint64_t v236 = MEMORY[0x18961AFE8];
      uint64_t v172 = v180;
LABEL_250:
      *((void *)&v326[0] + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URLQueryItem]);
      *(void *)&__int128 v325 = v236;
      __int128 v329 = xmmword_1837257A0;
      outlined init with take of Any(&v325, &v330);
      v173 = v305;
      unint64_t v263 = v305[2];
      unint64_t v262 = v305[3];
      if (v263 >= v262 >> 1) {
        v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v262 > 1),  v263 + 1,  1,  v305);
      }
      v173[2] = v263 + 1;
      v264 = &v173[6 * v263];
      __int128 v265 = v329;
      __int128 v266 = v331;
      v264[3] = v330;
      v264[4] = v266;
      v264[2] = v265;
LABEL_253:
      unint64_t v267 = *(void *)&v355[16];
      unint64_t v268 = v1;
      if (*(void *)&v355[16])
      {
        v269 = v173;
        uint64_t v270 = *(void *)&v355[8];
        uint64_t v271 = outlined retain of URLComponents((uint64_t)&v347);
        unint64_t v272 = v267;
        unint64_t v273 = v39;
        goto LABEL_255;
      }

      unint64_t v273 = v39;
      if (v348 == 1)
      {
        v282 = v308;
        if (!v309 || (v309[216] & 1) != 0) {
          goto LABEL_273;
        }
        v269 = v173;
        outlined retain of URLComponents((uint64_t)&v347);
        unint64_t v273 = v310;
        uint64_t v283 = String.subscript.getter();
        uint64_t v270 = MEMORY[0x186E1B610](v283);
        unint64_t v272 = v284;
        unint64_t v268 = v313;
        uint64_t v271 = swift_bridgeObjectRelease();
LABEL_255:
        uint64_t v274 = HIBYTE(v272) & 0xF;
        if ((v272 & 0x2000000000000000LL) == 0) {
          uint64_t v274 = v270 & 0xFFFFFFFFFFFFLL;
        }
        if (!v274)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          outlined release of URLComponents((uint64_t)&v347);
          v279 = 0LL;
          unint64_t v281 = 0xE000000000000000LL;
          uint64_t v172 = v311;
          goto LABEL_267;
        }

        *(void *)&__int128 v329 = v270;
        *((void *)&v329 + 1) = v272;
        MEMORY[0x1895F8858](v271);
        *(&v304 - 2) = (uint64_t)&v329;
        *(&v304 - 1) = MEMORY[0x18961AFF8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v275 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v304 - 4),  v270,  v272);
        if (v276 == 1)
        {
          unint64_t v278 = *((void *)&v329 + 1);
          Swift::Int v277 = v329;
          swift_bridgeObjectRetain();
          v279 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v277,  v278,  MEMORY[0x18961AFF8]);
          unint64_t v281 = v280;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }

        else
        {
          v279 = v275;
          unint64_t v281 = v276;
          swift_bridgeObjectRelease_n();
        }

        unint64_t v273 = v310;
        uint64_t v172 = v311;
        unint64_t v268 = v313;
        outlined release of URLComponents((uint64_t)&v347);
        if (v281)
        {
LABEL_267:
          *((void *)&v326[0] + 1) = MEMORY[0x189617FA8];
          *(void *)&__int128 v325 = v279;
          *((void *)&v325 + 1) = v281;
          __int128 v329 = xmmword_1837257B0;
          outlined init with take of Any(&v325, &v330);
          v173 = v269;
          unint64_t v286 = v269[2];
          unint64_t v285 = v269[3];
          if (v286 >= v285 >> 1) {
            v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v285 > 1),  v286 + 1,  1,  v269);
          }
          v282 = v308;
          v173[2] = v286 + 1;
          v287 = &v173[6 * v286];
          __int128 v288 = v329;
          __int128 v289 = v331;
          v287[3] = v330;
          v287[4] = v289;
          v287[2] = v288;
LABEL_273:
          __int128 v335 = v353;
          __int128 v336 = v354;
          v337[0] = *(_OWORD *)v355;
          *(_OWORD *)((char *)v337 + 10) = *(_OWORD *)&v355[10];
          __int128 v331 = v349;
          __int128 v332 = v350;
          __int128 v333 = v351;
          __int128 v334 = v352;
          __int128 v329 = v347;
          __int128 v330 = v348;
          *(void *)&__int128 v325 = v173;
          uint64_t v290 = *MEMORY[0x18961A718];
          uint64_t v291 = type metadata accessor for Mirror.DisplayStyle();
          uint64_t v292 = *(void *)(v291 - 8);
          v293 = v306;
          (*(void (**)(char *, uint64_t, uint64_t))(v292 + 104))(v306, v290, v291);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v293, 0LL, 1LL, v291);
          (*(void (**)(char *, void, unint64_t))(v273 + 104))( v282,  *MEMORY[0x18961A748],  v268);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
          lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A],  &demangling cache variable for type metadata for [(label: String?, value: Any)],  MEMORY[0x189618488]);
          Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
          uint64_t v294 = Mirror.children.getter();
          (*(void (**)(char *, uint64_t))(v172 + 8))(v24, v307);
          v327 = 0LL;
          unint64_t v328 = 0xE000000000000000LL;
          swift_retain();
          dispatch thunk of _AnySequenceBox._makeIterator()();
          swift_release();
          dispatch thunk of _AnyIteratorBoxBase.next()();
          if (*((void *)&v331 + 1))
          {
            uint64_t v321 = v294;
            do
            {
              __int128 v325 = v329;
              v326[0] = v330;
              v326[1] = v331;
              v324._countAndFlagsBits = 0LL;
              v324._object = (void *)0xE000000000000000LL;
              v295 = (void *)*((void *)&v329 + 1);
              uint64_t v296 = v329;
              __int128 v322 = v329;
              outlined init with copy of Any((uint64_t)v326, (uint64_t)v323);
              if (v295)
              {
                v297 = v295;
              }

              else
              {
                uint64_t v296 = 0LL;
                v297 = (void *)0xE000000000000000LL;
              }

              swift_bridgeObjectRetain();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v323);
              v298._countAndFlagsBits = v296;
              v298._object = v297;
              String.append(_:)(v298);
              swift_bridgeObjectRelease();
              v299._countAndFlagsBits = 8250LL;
              v299._object = (void *)0xE200000000000000LL;
              String.append(_:)(v299);
              _print_unlocked<A, B>(_:_:)();
              v300._countAndFlagsBits = 32LL;
              v300._object = (void *)0xE100000000000000LL;
              String.append(_:)(v300);
              String.append(_:)(v324);
              swift_bridgeObjectRelease();
              outlined destroy of (label: String?, value: Any)((uint64_t)&v325);
              dispatch thunk of _AnyIteratorBoxBase.next()();
            }

            while (*((void *)&v331 + 1));
            id v33 = v327;
          }

          else
          {
            id v33 = 0LL;
          }

          swift_release();
          swift_release();
LABEL_282:
          outlined release of URLComponents((uint64_t)&v347);
          return (uint64_t)v33;
        }

        v173 = v269;
      }

      v282 = v308;
      goto LABEL_273;
    }

    *(void *)&__int128 v325 = MEMORY[0x18961AFE8];
    unint64_t v320 = v182;
    uint64_t v321 = v181;
    unint64_t v318 = 4 * v182;
    uint64_t v183 = (v181 >> 59) & 1;
    if ((v28 & 0x1000000000000000LL) == 0) {
      LOBYTE(v183) = 1;
    }
    uint64_t v184 = 4LL << v183;
    uint64_t v314 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v315 = v28 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v185 = v184;
    unint64_t v186 = 0LL;
    unint64_t v187 = 0LL;
    LODWORD(v78) = 1;
    unint64_t v188 = 15LL;
    unint64_t v79 = 15LL;
    unint64_t v316 = v28;
    v317 = v24;
    v319 = (char *)v185;
    unint64_t v39 = v312;
    do
    {
      id v24 = (char *)(v188 & 0xC);
      unint64_t v189 = v188;
      if (v24 == (char *)v185)
      {
        unint64_t v189 = _StringGuts._slowEnsureMatchingEncoding(_:)(v188, v321, v28);
        uint64_t v185 = (uint64_t)v319;
      }

      unint64_t v1 = v189 >> 16;
      unint64_t v191 = v320;
      uint64_t v190 = v321;
      if (v189 >> 16 >= v320)
      {
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
        goto LABEL_291;
      }

      if ((v28 & 0x1000000000000000LL) != 0)
      {
        char v193 = String.UTF8View._foreignSubscript(position:)();
        uint64_t v185 = (uint64_t)v319;
        unint64_t v191 = v320;
        uint64_t v190 = v321;
      }

      else if ((v28 & 0x2000000000000000LL) != 0)
      {
        *(void *)&__int128 v329 = v321;
        *((void *)&v329 + 1) = v315;
        char v193 = *((_BYTE *)&v329 + v1);
      }

      else
      {
        uint64_t v192 = v314;
        if ((v321 & 0x1000000000000000LL) == 0)
        {
          uint64_t v192 = _StringObject.sharedUTF8.getter();
          uint64_t v185 = (uint64_t)v319;
          unint64_t v191 = v320;
          uint64_t v190 = v321;
        }

        char v193 = *(_BYTE *)(v192 + v1);
      }

      if (v193 != 38)
      {
        if ((v78 & 1) != 0) {
          unint64_t v194 = v188;
        }
        else {
          unint64_t v194 = v187;
        }
        if (v193 == 61)
        {
          unint64_t v187 = v194;
          uint64_t v78 = 0LL;
        }

        else
        {
          uint64_t v78 = v78;
        }

        goto LABEL_167;
      }

      if ((v78 & 1) != 0)
      {
        if (v186 < v79 >> 14) {
          goto LABEL_286;
        }
        uint64_t v196 = String.subscript.getter();
        uint64_t v197 = MEMORY[0x186E1B610](v196);
        unint64_t v28 = v198;
        uint64_t v199 = swift_bridgeObjectRelease();
        uint64_t v200 = 0LL;
        unint64_t v201 = 0LL;
        goto LABEL_186;
      }

      if (v187 >> 14 < v79 >> 14) {
        goto LABEL_287;
      }
      uint64_t v202 = String.subscript.getter();
      unint64_t v1 = v203;
      uint64_t v197 = MEMORY[0x186E1B610](v202);
      unint64_t v28 = v204;
      swift_bridgeObjectRelease();
      if ((char *)(v187 & 0xC) == v319)
      {
        unint64_t v187 = _StringGuts._slowEnsureMatchingEncoding(_:)(v187, v321, v316);
        if ((v316 & 0x1000000000000000LL) != 0)
        {
LABEL_182:
          if (v320 <= v187 >> 16) {
            goto LABEL_290;
          }
          unint64_t v205 = String.UTF8View._foreignIndex(after:)();
          goto LABEL_184;
        }
      }

      else if ((v316 & 0x1000000000000000LL) != 0)
      {
        goto LABEL_182;
      }

      unint64_t v205 = (v187 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_184:
      if (v186 < v205 >> 14) {
        goto LABEL_288;
      }
      uint64_t v207 = String.subscript.getter();
      uint64_t v200 = MEMORY[0x186E1B610](v207);
      unint64_t v201 = v208;
      uint64_t v199 = swift_bridgeObjectRelease();
LABEL_186:
      uint64_t v209 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000LL) == 0) {
        uint64_t v209 = v197 & 0xFFFFFFFFFFFFLL;
      }
      if (v209)
      {
        *(void *)&__int128 v329 = v197;
        *((void *)&v329 + 1) = v28;
        MEMORY[0x1895F8858](v199);
        *(&v304 - 2) = (uint64_t)&v329;
        *(&v304 - 1) = MEMORY[0x18961AFF8];
        swift_bridgeObjectRetain();
        v210 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v304 - 4),  v197,  v28);
        if (v211 == 1)
        {
          unint64_t v213 = *((void *)&v329 + 1);
          Swift::Int v212 = v329;
          swift_bridgeObjectRetain();
          unint64_t v1 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v212,  v213,  MEMORY[0x18961AFF8]);
          unint64_t v215 = v214;
          swift_bridgeObjectRelease();
        }

        else
        {
          unint64_t v1 = (unint64_t)v210;
          unint64_t v215 = v211;
        }

        swift_bridgeObjectRelease();
        uint64_t v216 = swift_bridgeObjectRelease();
        if (v215)
        {
          if (v201) {
            goto LABEL_195;
          }
          goto LABEL_201;
        }
      }

      else
      {
        uint64_t v216 = swift_bridgeObjectRelease();
      }

      unint64_t v1 = 0LL;
      unint64_t v215 = 0xE000000000000000LL;
      if (v201)
      {
LABEL_195:
        uint64_t v217 = HIBYTE(v201) & 0xF;
        if ((v201 & 0x2000000000000000LL) == 0) {
          uint64_t v217 = v200 & 0xFFFFFFFFFFFFLL;
        }
        if (v217)
        {
          unint64_t v312 = v1;
          *(void *)&__int128 v329 = v200;
          *((void *)&v329 + 1) = v201;
          MEMORY[0x1895F8858](v216);
          *(&v304 - 2) = (uint64_t)&v329;
          *(&v304 - 1) = MEMORY[0x18961AFF8];
          swift_bridgeObjectRetain();
          v218 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v304 - 4),  v200,  v201);
          if (v219 == 1)
          {
            __int128 v220 = v329;
            swift_bridgeObjectRetain();
            uint64_t v200 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v220,  *((unint64_t *)&v220 + 1),  MEMORY[0x18961AFF8]);
            unint64_t v222 = v221;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v200 = (uint64_t)v218;
            unint64_t v222 = v219;
            swift_bridgeObjectRelease_n();
          }

          unint64_t v1 = v312;
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v200 = 0LL;
          unint64_t v222 = 0xE000000000000000LL;
        }

        goto LABEL_205;
      }

    v156._countAndFlagsBits = v49;
    v156._object = (void *)v51;
    *(void *)&__int128 v157 = v50;
    unint64_t v59 = __OFADD__(v144, 1LL);
    unint64_t v145 = v144 + 1;
    if (v59)
    {
LABEL_166:
      __break(1u);
      goto LABEL_167;
    }

    if (v49 != v48)
    {
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }

    unint64_t v71 = v48;
    if (v50)
    {
      unint64_t v72 = v47;
      id v73 = *(void *)(v50 + 24 * ((v51 >> ((4 * *(_BYTE *)(v50 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      unint64_t v72 = v47;
      id v73 = specialized Rope._Node.subscript.getter(v51, v132);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v59 = __OFADD__(v46, v73);
    __int128 v74 = v46 + v73;
    if (v59)
    {
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
      goto LABEL_175;
    }

    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v156, v132, v72, v135, v71);
    swift_unknownObjectRelease_n();
    __int128 v75 = v156._countAndFlagsBits;
    unint64_t v139 = v156._object;
    uint64_t v76 = v157;
    if (v142 != 2)
    {
      v83 = v128[1];
      unint64_t v188 = *v128;
      unint64_t v189 = v83;
      uint64_t v190 = v128[2];
      BigString.utf8.getter();
      uint64_t result = v140;
      if (!__OFSUB__(v74, v140 >> 11))
      {
        uint64_t v78 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v133 = v85;
        uint64_t v134 = v84;
        uint64_t v142 = v86;
        uint64_t v82 = &v173;
        goto LABEL_117;
      }

      goto LABEL_176;
    }

    unint64_t v77 = v128[1];
    unint64_t v191 = *v128;
    uint64_t v192 = v77;
    char v193 = v128[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    uint64_t v78 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v133 = v80;
    uint64_t v134 = v79;
    uint64_t v142 = v81;
    uint64_t v82 = &v174;
LABEL_117:
    outlined release of Locale((uint64_t)v82);
    swift_release();
    uint64_t v136 = v75;
    uint64_t v137 = v76;
    __int128 v141 = v78;
    uint64_t v87 = v115[1];
    uint64_t v185 = *v115;
    unint64_t v186 = v87;
    unint64_t v187 = v115[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v175);
    unint64_t v88 = MEMORY[0x186E1B6B8](v176);
    id v90 = v89;
    uint64_t v91 = v163 & 0xFFFFFFFFFFFFLL;
    if ((v164 & 0x2000000000000000LL) != 0) {
      uint64_t v91 = HIBYTE(v164) & 0xF;
    }
    if (v91)
    {
      v92._countAndFlagsBits = 10LL;
      v92._object = (void *)0xE100000000000000LL;
      String.append(_:)(v92);
    }

    v154._countAndFlagsBits = v88;
    v154._object = v90;
    v93._countAndFlagsBits = 32LL;
    v93._object = (void *)0xE100000000000000LL;
    String.append(_:)(v93);
    v153._countAndFlagsBits = 0LL;
    v153._object = (void *)0xE000000000000000LL;
    uint64_t v94 = v30 + 64;
    id v95 = 1LL << *(_BYTE *)(v30 + 32);
    if (v95 < 64) {
      char v96 = ~(-1LL << v95);
    }
    else {
      char v96 = -1LL;
    }
    unint64_t v97 = v96 & *(void *)(v30 + 64);
    unint64_t v98 = (unint64_t)(v95 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    id v99 = 0LL;
    while (1)
    {
      if (v97)
      {
        uint64_t v100 = __clz(__rbit64(v97));
        v97 &= v97 - 1;
        uint64_t v101 = v100 | (v99 << 6);
        goto LABEL_126;
      }

      unint64_t v110 = v99 + 1;
      if (__OFADD__(v99, 1LL))
      {
        __break(1u);
        goto LABEL_158;
      }

      if (v110 >= v98) {
        break;
      }
      id v111 = *(void *)(v94 + 8 * v110);
      ++v99;
      if (!v111)
      {
        id v99 = v110 + 1;
        if (v110 + 1 >= v98) {
          break;
        }
        id v111 = *(void *)(v94 + 8 * v99);
        if (!v111)
        {
          id v99 = v110 + 2;
          if (v110 + 2 >= v98) {
            break;
          }
          id v111 = *(void *)(v94 + 8 * v99);
          if (!v111)
          {
            id v99 = v110 + 3;
            if (v110 + 3 >= v98) {
              break;
            }
            id v111 = *(void *)(v94 + 8 * v99);
            if (!v111)
            {
              id v99 = v110 + 4;
              if (v110 + 4 >= v98) {
                break;
              }
              id v111 = *(void *)(v94 + 8 * v99);
              if (!v111)
              {
                id v112 = v110 + 5;
                if (v112 >= v98) {
                  break;
                }
                id v111 = *(void *)(v94 + 8 * v112);
                if (!v111)
                {
                  while (1)
                  {
                    id v99 = v112 + 1;
                    if (__OFADD__(v112, 1LL)) {
                      goto LABEL_172;
                    }
                    if (v99 >= v98) {
                      goto LABEL_8;
                    }
                    id v111 = *(void *)(v94 + 8 * v99);
                    ++v112;
                    if (v111) {
                      goto LABEL_145;
                    }
                  }
                }

                id v99 = v112;
              }
            }
          }
        }
      }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.index(after:)();
LABEL_115:
        unint64_t v86 = String.subscript.getter();
        unint64_t v88 = v87;
        id v90 = v89;
        id v92 = v91;
        swift_bridgeObjectRelease();
        uint64_t v19 = MEMORY[0x186E1B610](v86, v88, v90, v92);
        uint64_t v21 = v93;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.index(after:)();
LABEL_115:
        unint64_t v86 = String.subscript.getter();
        unint64_t v88 = v87;
        id v90 = v89;
        id v92 = v91;
        swift_bridgeObjectRelease();
        uint64_t v19 = MEMORY[0x186E1B610](v86, v88, v90, v92);
        uint64_t v21 = v93;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }

      unint64_t v114 = (v121 - 1) & v121;
      uint64_t v117 = __clz(__rbit64(v121)) + (v111 << 6);
LABEL_88:
      uint64_t v118 = (uint64_t *)(*(void *)(v108 + 48) + 16 * v117);
      unint64_t v110 = *v118;
      uint64_t v119 = v118[1];
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((unint64_t *)&v508, v110, v119);
      uint64_t result = swift_bridgeObjectRelease();
    }

    *(void *)&id v109 = v57;
    *((void *)&v109 + 1) = v55;
    *(void *)&unint64_t v110 = v16;
    unint64_t v65 = __OFADD__(v54, 1LL);
    __int128 v12 = v54 + 1;
    if (v65) {
      goto LABEL_126;
    }
    if (v57 != v52) {
      goto LABEL_127;
    }
    if (v16)
    {
      unint64_t v79 = *(void *)(v16 + 24 * ((v55 >> ((4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      unint64_t v79 = specialized Rope._Node.subscript.getter(v55, v50);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v80 = v56 + v79;
    if (__OFADD__(v56, v79)) {
      goto LABEL_128;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v109, v50, v51, v95, v52);
    swift_unknownObjectRelease_n();
    unint64_t v98 = *((void *)&v109 + 1);
    id v99 = v109;
    uint64_t v16 = v110;
    if (v100 == 2)
    {
      uint64_t v21 = v94[1];
      unint64_t v139 = *v94;
      unint64_t v140 = v21;
      __int128 v141 = v94[2];
      uint64_t v22 = &v124;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }

    else
    {
      uint64_t v81 = v94[1];
      uint64_t v136 = *v94;
      uint64_t v137 = v81;
      uint64_t v138 = v94[2];
      BigString.utf8.getter();
      uint64_t result = v96;
      if (__OFSUB__(v80, v96 >> 11)) {
        goto LABEL_135;
      }
      uint64_t v22 = &v123;
    }

    char v96 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v18 = v23;
    uint64_t v19 = v24;
    uint64_t v100 = v25;
    outlined release of Locale((uint64_t)v22);
    outlined release of AttributedString.Runs((uint64_t)&v158);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v84, v92);
    specialized Set.hash(into:)(v84, v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v26 = v82[1];
    v134[0] = *v82;
    v134[1] = v26;
    unint64_t v135 = v82[2];
    v156[0] = v134[0];
    v156[1] = v26;
    _OWORD v156[2] = v135;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v156, (uint64_t)v157);
    outlined retain of Locale((uint64_t)v157);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v134);
    BigSubstring.hash(into:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of Locale((uint64_t)v125);
    __int128 v13 = v83;
    __int128 v15 = v98;
  }

  while (v12 != v83);
  outlined release of AttributedString.Runs((uint64_t)&v158);
LABEL_117:
  outlined release of AttributedString.Runs((uint64_t)&v158);
  return swift_release();
}

    uint64_t v58 = (v68 - 1) & v68;
    unint64_t v65 = v69;
    unint64_t v66 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_108:
    unint64_t v71 = 16 * v66;
    unint64_t v72 = (uint64_t *)(*(void *)(v3 + 48) + v71);
    __int128 v74 = *v72;
    id v73 = v72[1];
    __int128 v75 = *(void *)(v3 + 56) + v71;
    uint64_t v76 = *(void *)v75;
    unint64_t v77 = *(_BYTE *)(v75 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v78 = Hasher._finalize()();
    unint64_t v79 = -1LL << *(_BYTE *)(v56 + 32);
    uint64_t v80 = v78 & ~v79;
    uint64_t v81 = v80 >> 6;
    if (((-1LL << v80) & ~*(void *)(v59 + 8 * (v80 >> 6))) != 0)
    {
      uint64_t v60 = __clz(__rbit64((-1LL << v80) & ~*(void *)(v59 + 8 * (v80 >> 6)))) | v80 & 0x7FFFFFFFFFFFFFC0LL;
      goto LABEL_87;
    }

    uint64_t v82 = 0;
    v83 = (unint64_t)(63 - v79) >> 6;
    while (++v81 != v83 || (v82 & 1) == 0)
    {
      unint64_t v84 = v81 == v83;
      if (v81 == v83) {
        uint64_t v81 = 0LL;
      }
      v82 |= v84;
      Swift::Int v85 = *(void *)(v59 + 8 * v81);
      if (v85 != -1)
      {
        uint64_t v60 = __clz(__rbit64(~v85)) + (v81 << 6);
LABEL_87:
        *(void *)(v59 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v60;
        unint64_t v61 = 16 * v60;
        unint64_t v62 = (void *)(*(void *)(v56 + 48) + v61);
        *unint64_t v62 = v74;
        v62[1] = v73;
        Swift::Int v63 = *(void *)(v56 + 56) + v61;
        *(void *)Swift::Int v63 = v76;
        *(_BYTE *)(v63 + 8) = v77;
        ++*(void *)(v56 + 16);
        __int128 v30 = v119 - 1;
        uint64_t v3 = v123;
        uint64_t v57 = v65;
        if (v119 == 1) {
          return v56;
        }
        goto LABEL_88;
      }
    }

    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }

  return v56;
}

              unint64_t v56 = v114;
              if (v114 == 0x7FFFFFFFFFFFFFFFLL) {
                unint64_t v56 = 0LL;
              }
              *(void *)&__src[12] = v56;
              BYTE8(__src[12]) = v114 == 0x7FFFFFFFFFFFFFFFLL;
              if ((v12 & 0x200) == 0)
              {
LABEL_61:
                if ((v12 & 0x400) == 0) {
                  goto LABEL_62;
                }
                goto LABEL_150;
              }

              goto LABEL_110;
            }

            goto LABEL_247;
          }

    *(void *)(v7 + 8 * (v152 >> 6) + 64) |= 1LL << v152;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v152) = v149;
    uint64_t v159 = (void *)(*(void *)(v7 + 56) + 16 * v152);
    *uint64_t v159 = v147;
    v159[1] = v148;
    uint64_t v160 = *(void *)(v7 + 16);
    unint64_t v36 = __OFADD__(v160, 1LL);
    unint64_t v161 = v160 + 1;
    if (v36) {
      goto LABEL_147;
    }
    *(void *)(v7 + 16) = v161;
    swift_bridgeObjectRetain();
LABEL_83:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __int128 v74 = v144;
    id v131 = v194;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v151 & 1) != 0) {
      goto LABEL_82;
    }
    goto LABEL_107;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v162 = v7;
  unint64_t v163 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v163;
  unint64_t v188 = v162;
  if (!*(void *)(v162 + 16))
  {
LABEL_142:
    swift_bridgeObjectRelease();
    if ((v156 & 1) != 0) {
      goto LABEL_82;
    }
    goto LABEL_107;
  }

  uint64_t v164 = (char *)(v163 + 64);
  v165 = (char *)(v162 + 64);
  unint64_t v166 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  unint64_t v186 = v162 + 64;
  if (v7 != v162 || v164 >= &v165[8 * v166]) {
    memmove(v164, v165, 8 * v166);
  }
  Swift::Int v167 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v162 + 16);
  unint64_t v168 = 1LL << *(_BYTE *)(v162 + 32);
  if (v168 < 64) {
    v169 = ~(-1LL << v168);
  }
  else {
    v169 = -1LL;
  }
  unint64_t v170 = v169 & *(void *)(v162 + 64);
  unint64_t v187 = (unint64_t)(v168 + 63) >> 6;
  while (2)
  {
    if (v170)
    {
      unint64_t v189 = (v170 - 1) & v170;
      uint64_t v190 = v167;
      unint64_t v171 = __clz(__rbit64(v170)) | (v167 << 6);
LABEL_118:
      uint64_t v172 = 16 * v171;
      v173 = (uint64_t *)(*(void *)(v188 + 48) + v172);
      unint64_t v175 = *v173;
      unint64_t v174 = v173[1];
      v176 = (uint64_t *)(*(void *)(v188 + 56) + v172);
      __int128 v177 = *v176;
      __int128 v178 = v176[1];
      unint64_t v179 = (void *)(*(void *)(v7 + 48) + v172);
      *unint64_t v179 = v175;
      v179[1] = v174;
      uint64_t v180 = (void *)(*(void *)(v7 + 56) + v172);
      *uint64_t v180 = v177;
      v180[1] = v178;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v170 = v189;
      Swift::Int v167 = v190;
      continue;
    }

    break;
  }

  unint64_t v181 = v167 + 1;
  if (__OFADD__(v167, 1LL)) {
    goto LABEL_156;
  }
  if (v181 >= v187) {
    goto LABEL_142;
  }
  uint64_t v182 = *(void *)(v186 + 8 * v181);
  uint64_t v183 = v167 + 1;
  if (v182) {
    goto LABEL_141;
  }
  uint64_t v183 = v167 + 2;
  if (v167 + 2 >= v187) {
    goto LABEL_142;
  }
  uint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  uint64_t v183 = v167 + 3;
  if (v167 + 3 >= v187) {
    goto LABEL_142;
  }
  uint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  uint64_t v183 = v167 + 4;
  if (v167 + 4 >= v187) {
    goto LABEL_142;
  }
  uint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  uint64_t v183 = v167 + 5;
  if (v167 + 5 >= v187) {
    goto LABEL_142;
  }
  uint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  uint64_t v183 = v167 + 6;
  if (v167 + 6 >= v187) {
    goto LABEL_142;
  }
  uint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182) {
    goto LABEL_141;
  }
  uint64_t v183 = v167 + 7;
  if (v167 + 7 >= v187) {
    goto LABEL_142;
  }
  uint64_t v182 = *(void *)(v186 + 8 * v183);
  if (v182)
  {
LABEL_141:
    unint64_t v189 = (v182 - 1) & v182;
    uint64_t v190 = v183;
    unint64_t v171 = __clz(__rbit64(v182)) + (v183 << 6);
    goto LABEL_118;
  }

  uint64_t v184 = v167 + 8;
  if (v167 + 8 >= v187) {
    goto LABEL_142;
  }
  uint64_t v182 = *(void *)(v186 + 8 * v184);
  if (v182)
  {
    uint64_t v183 = v167 + 8;
    goto LABEL_141;
  }

  while (1)
  {
    uint64_t v183 = v184 + 1;
    if (__OFADD__(v184, 1LL)) {
      break;
    }
    if (v183 >= v187) {
      goto LABEL_142;
    }
    uint64_t v182 = *(void *)(v186 + 8 * v183);
    ++v184;
    if (v182) {
      goto LABEL_141;
    }
  }

              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
              goto LABEL_110;
            }

LABEL_307:
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
  }

  uint64_t v68 = v64;
  if (*(void *)(v4 + 24) < v67)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, v3);
    uint64_t v19 = v4;
    unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(64LL);
    if ((v68 & 1) != (v70 & 1)) {
      goto LABEL_334;
    }
    unint64_t v2 = v69;
    unint64_t v71 = v234;
    if ((v68 & 1) != 0)
    {
LABEL_69:
      unint64_t v72 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *unint64_t v72 = v71;
      v72[1] = v7;
      goto LABEL_73;
    }

                                if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v336 - 1, v336) & 1) != 0)
                                {
                                  unint64_t v316 = *v351;
                                  v317 = v351[1];
                                  v433 = v351[2];
                                  v432[1] = v317;
                                  v432[0] = v316;
                                  unint64_t v318 = *v351;
                                  v386 = v351[1];
                                  v387 = v433;
                                  v385 = v318;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>( &v385,  (uint64_t)v484);
                                  outlined retain of Locale((uint64_t)v484);
                                  v319 = BigString.index(before:)();
                                  uint64_t v321 = v320;
                                  v323 = v322;
                                  __int128 v325 = v324;
                                  outlined release of Locale((uint64_t)v432);
                                  AttributedString.Guts._paragraphExtending(from:)( v319,  v321,  v323,  v325,  (uint64_t)&v379);
                                  v326 = Range<>._utf8OffsetRange.getter();
                                  unint64_t v328 = v327;
                                  __int128 v329 = 1;
                                  goto LABEL_311;
                                }
                              }

                                if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v343 - 1, v343) & 1) != 0)
                                {
                                  v323 = *v356;
                                  Swift::String v324 = v356[1];
                                  v438 = v356[2];
                                  v437[1] = v324;
                                  v437[0] = v323;
                                  __int128 v325 = *v356;
                                  v391 = v356[1];
                                  v392 = v438;
                                  v390 = v325;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>( &v390,  (uint64_t)v489);
                                  outlined retain of Locale((uint64_t)v489);
                                  v326 = BigString.index(before:)();
                                  unint64_t v328 = v327;
                                  __int128 v330 = v329;
                                  __int128 v332 = v331;
                                  outlined release of Locale((uint64_t)v437);
                                  AttributedString.Guts._paragraphExtending(from:)( v326,  v328,  v330,  v332,  (uint64_t)&v384);
                                  __int128 v333 = Range<>._utf8OffsetRange.getter();
                                  __int128 v335 = v334;
                                  __int128 v336 = 1;
                                  goto LABEL_311;
                                }
                              }

            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
LABEL_311:
            __break(1u);
LABEL_312:
            __break(1u);
          }

          __break(1u);
LABEL_314:
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
        }

        Swift::Int v85 = v81 + 1;
        if (__OFADD__(v81, 1LL)) {
          goto LABEL_290;
        }
        ++v81;
        --v80;
        if (v79 + v81 >= v75) {
          goto LABEL_91;
        }
      }

      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
      goto LABEL_292;
    }

uint64_t static URLComponents._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURLComponents);
}

NSURLComponents __swiftcall URLComponents._bridgeToObjectiveC()()
{
  __int128 v1 = v0[7];
  __int128 v20 = v0[6];
  __int128 v21 = v1;
  v22[0] = v0[8];
  *(_OWORD *)((char *)v22 + 10) = *(__int128 *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  __int128 v16 = v0[2];
  __int128 v17 = v2;
  __int128 v3 = v0[5];
  __int128 v18 = v0[4];
  __int128 v19 = v3;
  __int128 v4 = v0[1];
  __int128 v14 = *v0;
  __int128 v15 = v4;
  uint64_t v5 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 172) = 0;
  __int128 v8 = v21;
  *(_OWORD *)(v7 + 112) = v20;
  *(_OWORD *)(v7 + 128) = v8;
  *(_OWORD *)(v7 + 144) = v22[0];
  *(_OWORD *)(v7 + 154) = *(_OWORD *)((char *)v22 + 10);
  __int128 v9 = v17;
  *(_OWORD *)(v7 + 48) = v16;
  *(_OWORD *)(v7 + 64) = v9;
  __int128 v10 = v19;
  *(_OWORD *)(v7 + 80) = v18;
  *(_OWORD *)(v7 + 96) = v10;
  __int128 v11 = v15;
  *(_OWORD *)(v7 + 16) = v14;
  *(_OWORD *)(v7 + 32) = v11;
  *(void *)&v6[OBJC_IVAR____NSSwiftURLComponents_lock] = v7;
  outlined retain of URLComponents((uint64_t)&v14);
  v13.receiver = v6;
  v13.super_class = v5;
  return (NSURLComponents)objc_msgSendSuper2(&v13, sel_init);
}

uint64_t static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftURLComponents_lock);
    uint64_t v6 = (_OWORD *)(v5 + 16);
    uint64_t v7 = (os_unfair_lock_s *)(v5 + 172);
    id v8 = (id)a1;
    os_unfair_lock_lock(v7);
    closure #1 in _NSSwiftURLComponents.components.getter(v6, &v277);
    os_unfair_lock_unlock(v7);

    __int128 v264 = *(_OWORD *)v280;
    __int128 v265 = *(_OWORD *)&v280[16];
    v266[0] = *(_OWORD *)&v280[32];
    *(_OWORD *)((char *)v266 + 10) = *(_OWORD *)&v280[42];
    __int128 v260 = *(_OWORD *)v279;
    __int128 v261 = *(_OWORD *)&v279[16];
    __int128 v262 = *(_OWORD *)&v279[32];
    __int128 v263 = *(_OWORD *)&v279[48];
    __int128 v258 = v277;
    __int128 v259 = v278;
    destructiveProjectEnumData for PredicateCodableError(&v258, v9);
    uint64_t v10 = a2;
LABEL_125:
    outlined init with take of LocalePreferences?( (uint64_t)&v258,  v10,  &demangling cache variable for type metadata for URLComponents?);
    return 1LL;
  }

  LOBYTE(v277) = 1;
  char v274 = 0;
  __int16 v273 = 0;
  __int16 v272 = 0;
  __int16 v271 = 0;
  BOOL v270 = 1;
  char v269 = 0;
  unsigned __int8 v268 = 0;
  id v11 = objc_msgSend((id)a1, sel_scheme);
  if (!v11)
  {
    unint64_t v13 = 0LL;
    unint64_t v15 = 0LL;
    char v276 = 0;
    char v275 = 0;
    goto LABEL_13;
  }

  __int128 v12 = v11;
  unint64_t v13 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v15 = v14;

  char v276 = 0;
  char v275 = 0;
  __int16 v16 = specialized Collection.first.getter(v13, v15);
  if ((v15 & 0x1000000000000000LL) == 0)
  {
    if ((v15 & 0x2000000000000000LL) != 0)
    {
      uint64_t v18 = HIBYTE(v15) & 0xF;
      *(void *)&__int128 v277 = v13;
      *((void *)&v277 + 1) = v15 & 0xFFFFFFFFFFFFFFLL;
      __int128 v17 = (char *)&v277;
    }

    else if ((v13 & 0x1000000000000000LL) != 0)
    {
      __int128 v17 = (char *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = v13 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v17 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v17, v18, 1u, 0)) {
      goto LABEL_13;
    }
LABEL_231:
    lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
    swift_allocError();
    *unint64_t v215 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    int v244 = 0;
    uint64_t v243 = 714LL;
    goto LABEL_284;
  }

  *(void *)&__int128 v277 = v13;
  *((void *)&v277 + 1) = v15;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  StringProtocol._ephemeralString.getter();
  uint64_t v183 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v184 = (unsigned __int16 *)objc_msgSend(v183, sel__fastCharacterContents);
  uint64_t v185 = v183;
  unint64_t v186 = v184;
  id v187 = v185;
  if (v186)
  {
    *(void *)&__int128 v277 = v13;
    *((void *)&v277 + 1) = v15;
    StringProtocol._ephemeralString.getter();
    unint64_t v188 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v189 = objc_msgSend(v188, sel_length);
    swift_unknownObjectRelease();
    char v190 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v186,  (uint64_t)v189,  1u,  0);
  }

  else
  {
    char v190 = specialized Sequence.allSatisfy(_:)(v13, v15, 1);
  }

  char v214 = v190;
  swift_bridgeObjectRelease();
  if ((v214 & 1) == 0) {
    goto LABEL_231;
  }
LABEL_13:
  unint64_t v255 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
  uint64_t v252 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v267 = v270;
  *(void *)&__int128 v277 = 0LL;
  BYTE8(v277) = v276;
  BYTE9(v277) = v275;
  BYTE10(v277) = v274;
  BYTE11(v277) = HIBYTE(v273);
  BYTE12(v277) = v273;
  BYTE13(v277) = HIBYTE(v272);
  BYTE14(v277) = v272;
  HIBYTE(v277) = HIBYTE(v271);
  LOBYTE(v278) = v271;
  *((void *)&v278 + 1) = v13;
  *(void *)v279 = v15;
  memset(&v279[8], 0, 56);
  v280[0] = v270;
  memset(&v280[8], 0, 48);
  v280[56] = v269;
  v280[57] = v268;
  URLComponents._URLComponents.encodedHost.getter();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  unint64_t v254 = v15;
  if (!v20)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    unint64_t v29 = 0LL;
    goto LABEL_59;
  }

  uint64_t v21 = URLComponents._URLComponents.encodedHost.getter();
  if (!v22)
  {
    char v276 = 0;
    LOBYTE(v273) = 0;
    char v269 = 0;
    unsigned __int8 v268 = 0;
LABEL_57:
    swift_bridgeObjectRelease();
    goto LABEL_58;
  }

  unint64_t v23 = v21;
  unint64_t v24 = v22;
  uint64_t v25 = HIBYTE(v22) & 0xF;
  uint64_t v26 = v21 & 0xFFFFFFFFFFFFLL;
  if ((v22 & 0x2000000000000000LL) != 0) {
    uint64_t v27 = HIBYTE(v22) & 0xF;
  }
  else {
    uint64_t v27 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (!v27)
  {
    swift_bridgeObjectRelease();
    unint64_t v28 = 0LL;
    char v276 = 0;
    LOBYTE(v273) = 0;
    char v269 = 0;
    unint64_t v29 = 0xE000000000000000LL;
    unsigned __int8 v268 = 0;
    __int128 v30 = v255;
    goto LABEL_42;
  }

  if ((v22 & 0x1000000000000000LL) != 0) {
    goto LABEL_250;
  }
  if ((v22 & 0x2000000000000000LL) != 0)
  {
    *(void *)&__int128 v258 = v21;
    *((void *)&v258 + 1) = v22 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v256 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v257 = 0LL;
    swift_bridgeObjectRetain_n();
    id v33 = &v258;
    id v32 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v256;
    unint64_t v35 = (unsigned __int8 *)&v258;
    uint64_t v34 = v25;
    uint64_t v36 = v25;
  }

  else
  {
    if ((v21 & 0x1000000000000000LL) != 0)
    {
      uint64_t v31 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }

    else
    {
      uint64_t v31 = _StringObject.sharedUTF8.getter();
      uint64_t v26 = v227;
    }

    *(void *)&__int128 v258 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v258 + 1) = 0LL;
    swift_bridgeObjectRetain_n();
    id v32 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v258;
    id v33 = (__int128 *)v31;
    uint64_t v34 = v26;
    unint64_t v35 = (unsigned __int8 *)v31;
    uint64_t v36 = v26;
  }

  unint64_t v28 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v33,  v34,  v32,  0,  v35,  v36);
  unint64_t v29 = v37;
  swift_bridgeObjectRelease();
  __int128 v30 = v255;
  if (v29 != 1)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_41;
  }

LABEL_228:
                uint64_t v102 = (char *)_StringObject.sharedUTF8.getter();
LABEL_123:
                if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v102,  v103,  0x40u,  1))
                {
                  goto LABEL_124;
                }

        if ((v33 & 0x1000000000000000LL) != 0)
        {
          isStackAllocationSafe = String.UTF8View._foreignCount()();
        }

        else if ((v33 & 0x2000000000000000LL) != 0)
        {
          isStackAllocationSafe = HIBYTE(v33) & 0xF;
        }

        else
        {
          isStackAllocationSafe = v98 & 0xFFFFFFFFFFFFLL;
        }

        id v241 = 3 * isStackAllocationSafe;
        if (v241 < -1) {
          goto LABEL_340;
        }
        uint64_t v242 = v241 + 1;
        if (v241 < 1024
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          unint64_t v303 = (const char *)&v301;
          MEMORY[0x1895F8858](isStackAllocationSafe);
          int v244 = (char *)&v301 - v243;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v244, v242, 1, v98, v33);
          id v246 = v245;
          swift_bridgeObjectRelease();
          if ((v246 & 1) != 0)
          {
            id v247 = (unint64_t)v310;
            if (v7) {
              goto LABEL_355;
            }
            uint64_t v304 = 0LL;
          }

          else
          {
            uint64_t v304 = strnlen(v244, 0x100uLL);
            id v247 = (unint64_t)v310;
            if (v7) {
              goto LABEL_355;
            }
          }

          unint64_t v248 = (uint64_t)v305;
        }

        else
        {
          __int128 v249 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          unint64_t v303 = v249;
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v249, v242, 1, v98, v33);
          unint64_t v251 = v250;
          swift_bridgeObjectRelease();
          if ((v251 & 1) != 0)
          {
            id v247 = (unint64_t)v310;
            unint64_t v248 = (uint64_t)v305;
            if (v7) {
              goto LABEL_349;
            }
            uint64_t v304 = 0LL;
          }

          else
          {
            id v247 = (unint64_t)v310;
            if (v303) {
              uint64_t v304 = strnlen(v303, 0x100uLL);
            }
            else {
              uint64_t v304 = 0LL;
            }
            unint64_t v248 = (uint64_t)v305;
            if (v7)
            {
LABEL_349:
              Swift::String v299 = v303;
              goto LABEL_354;
            }
          }

          MEMORY[0x186E20E60](v303, -1LL, -1LL);
        }

        uint64_t v252 = swift_bridgeObjectRelease();
        if ((v247 & 0x1000000000000000LL) != 0)
        {
          uint64_t v252 = String.UTF8View._foreignCount()();
          unint64_t v248 = v252;
        }

        unint64_t v253 = 3 * v248;
        if (v253 < -1) {
          goto LABEL_341;
        }
        unint64_t v254 = v253 + 1;
        if (v253 < 1024 || (uint64_t v252 = swift_stdlib_isStackAllocationSafe(), (v252 & 1) != 0))
        {
          v305 = &v301;
          MEMORY[0x1895F8858](v252);
          unint64_t v256 = (char *)&v301 - v255;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v256, v254, 1, v99, v247);
          __int128 v258 = v257;
          swift_bridgeObjectRelease();
          if ((v258 & 1) != 0)
          {
            id v90 = v309;
            __int128 v259 = 0LL;
          }

          else
          {
            __int128 v259 = strnlen(v256, 0x401uLL);
            id v90 = v309;
          }

          id v247 = (unint64_t)v310;
          uint64_t v133 = v302;
        }

        else
        {
          __int128 v260 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v260, v254, 1, v99, v247);
          __int128 v262 = v261;
          swift_bridgeObjectRelease();
          if ((v262 & 1) != 0)
          {
            uint64_t v133 = v302;
            __int128 v259 = 0LL;
          }

          else
          {
            if (v260) {
              __int128 v259 = strnlen(v260, 0x401uLL);
            }
            else {
              __int128 v259 = 0LL;
            }
            uint64_t v133 = v302;
          }

          MEMORY[0x186E20E60](v260, -1LL, -1LL);
          id v90 = v309;
        }

        swift_bridgeObjectRelease();
        if ((uint64_t)v304 <= 255 && v259 < 1025)
        {
          swift_bridgeObjectRelease();
          uint64_t v131 = v90;
          uint64_t v132 = v133;
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v131 = v99;
          uint64_t v132 = v247;
        }

        id v32 = v317;
LABEL_272:
        __int128 v263 = (int)v307;
        v305 = (uint64_t *)v131;
        uint64_t v304 = v132;
        switch((_DWORD)v307)
        {
          case 0xD:
            goto LABEL_275;
          case 2:
            __int128 v264 = 4LL;
            goto LABEL_279;
          case 1:
LABEL_275:
            __int128 v264 = 513LL;
            goto LABEL_279;
          case 0x3F:
            __int128 v264 = 514LL;
            goto LABEL_279;
        }

        if ((int)v307 <= 29)
        {
          if ((_DWORD)v307 != 17)
          {
            __int128 v264 = 640LL;
            if ((_DWORD)v307 == 28) {
              goto LABEL_279;
            }
            goto LABEL_294;
          }

          __int128 v264 = 516LL;
        }

        else
        {
          if ((_DWORD)v307 == 102)
          {
            uint64_t v307 = 0LL;
            char v276 = 512LL;
            goto LABEL_285;
          }

          __int128 v264 = 640LL;
          if ((_DWORD)v307 != 69)
          {
            if ((_DWORD)v307 == 30)
            {
              __int128 v264 = 642LL;
              goto LABEL_279;
            }

      if (!v14) {
        goto LABEL_261;
      }
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
      goto LABEL_232;
    }
  }

  swift_retain_n();
  id v11 = swift_unknownObjectRetain_n();
  __int128 v12 = specialized Rope._endPath.getter(v11);
  swift_unknownObjectRelease();
  unint64_t v13 = 0LL;
  unint64_t v14 = 0LL;
  if (!v4) {
    goto LABEL_262;
  }
LABEL_13:
  swift_unknownObjectRetain();
  Swift::Int v115 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v119, v12, v13, v4, v9);
  swift_release();
  uint64_t result = swift_unknownObjectRelease_n();
  unint64_t v15 = __OFSUB__(v6, v14);
  unint64_t v14 = (uint64_t)v6 - v14;
  if (v15)
  {
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
    goto LABEL_289;
  }

    uint64_t v118 = (char *)_StringObject.sharedUTF8.getter();
LABEL_177:
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v118, v119, 0x40u, 1))
    {
LABEL_178:
      swift_bridgeObjectRelease();
      *(void *)&v210[24] = v2;
      *(void *)&v210[32] = v1;
      goto LABEL_179;
    }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v82 = v59 & 0xFFFFFFFFFFFFF0FFLL | (v83 << 8);
      uint64_t v4 = v134;
      goto LABEL_229;
    }

    unint64_t v82 = ((-15LL << ((4 * v59 + 8) & 0x3C)) - 1) & v59 | ((unint64_t)*(unsigned __int16 *)(v56 + 16) << ((4 * v59 + 8) & 0x3C));
    swift_unknownObjectRetain();
    char v60 = 0LL;
    unint64_t v13 = 0LL;
LABEL_229:
    swift_unknownObjectRetain();
    uint64_t v138 = v82;
    unint64_t v135 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v136, v82, v13, v56, v135);
    swift_release();
    uint64_t result = (void *)swift_unknownObjectRelease_n();
LABEL_230:
    unint64_t v14 = v4 - v60;
    if (__OFSUB__(v4, v60)) {
      goto LABEL_345;
    }
LABEL_231:
    if (v5[2] && (id v96 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002CLL, v130), (v97 & 1) != 0))
    {
      outlined init with copy of AttributedString._AttributeValue(v5[7] + 72 * v96, (uint64_t)&v144);
    }

    else
    {
      char v148 = 0LL;
      unint64_t v146 = 0u;
      unint64_t v147 = 0u;
      unint64_t v145 = 0u;
      unint64_t v144 = 0u;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((void *)&v145 + 1))
    {
      swift_release();
      outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = (void *)outlined destroy of Any?( (uint64_t)&v144,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_291;
    }

    uint64_t v155 = v146;
    uint64_t v156 = v147;
    unint64_t v157 = v148;
    unint64_t v153 = v144;
    unint64_t v154 = v145;
    uint64_t v5 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v158,  (uint64_t)&v144,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((void *)&v145 + 1))
    {
      outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t v18 = &v144;
LABEL_15:
      uint64_t result = (void *)outlined destroy of Any?( (uint64_t)v18,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_16;
    }

    v151[2] = v146;
    v151[3] = v147;
    uint64_t v152 = v148;
    v151[0] = v144;
    v151[1] = v145;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v153,  (uint64_t)v150);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v151,  (uint64_t)v149);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v150,  (uint64_t)&v144,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v149,  (uint64_t)v132,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!*((void *)&v145 + 1)) {
      break;
    }
    if (!v148)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v144);
      goto LABEL_289;
    }

    outlined init with take of any PredicateExpression<Self.Output == B1>(&v144, (uint64_t)v141);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v132, (uint64_t)v140);
    unint64_t v98 = v142;
    uint64_t v129 = v143;
    id v128 = __swift_project_boxed_opaque_existential_1(v141, v142);
    uint64_t v133 = &v126;
    id v99 = *(void *)(v98 - 8);
    MEMORY[0x1895F8858](v128);
    unint64_t v101 = (char *)&v126 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v140,  (uint64_t)&v139);
    uint64_t v102 = type metadata accessor for Optional();
    uint64_t v103 = *(void *)(v102 - 8);
    MEMORY[0x1895F8858](v102);
    char v105 = (char *)&v126 - v104;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    char v106 = swift_dynamicCast();
    uint64_t v107 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56);
    if (v106)
    {
      v107(v105, 0LL, 1LL, v98);
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v101, v105, v98);
      uint64_t v108 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
    }

    else
    {
      v107(v105, 1LL, 1LL, v98);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v102);
      uint64_t v108 = 0;
    }

    __int128 v3 = v131;
    uint64_t v4 = v134;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v140);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
    uint64_t v5 = &demangling cache variable for type metadata for (Hashable & Sendable)?;
    outlined destroy of Any?((uint64_t)v149, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v151);
    uint64_t result = (void *)outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v108 & 1) == 0) {
      goto LABEL_290;
    }
LABEL_16:
    uint64_t v160 = v155;
    unint64_t v161 = v156;
    uint64_t v162 = v157;
    unint64_t v158 = v153;
    unint64_t v159 = v154;
  }

  if (!v148)
  {
    outlined destroy of Any?((uint64_t)v149, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v151);
    uint64_t v18 = &v158;
    goto LABEL_15;
  }

  outlined destroy of Any?((uint64_t)v132, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_289:
  outlined destroy of Any?((uint64_t)v149, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v151);
  outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_290:
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v153);
  uint64_t result = (void *)swift_release();
LABEL_291:
  char v121 = (_OWORD *)v127;
  *(void *)(v127 + 64) = 0LL;
  v121[2] = 0u;
  v121[3] = 0u;
  *char v121 = 0u;
  v121[1] = 0u;
  return result;
}

LABEL_239:
                swift_bridgeObjectRelease();
                int v244 = 0;
                uint64_t v243 = 939LL;
                goto LABEL_284;
              }

                          __break(1u);
                          goto LABEL_240;
                        }

                        unint64_t v188 = v206;
                      }
                    }
                  }
                }

              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }

            unint64_t v57 = 0LL;
            uint64_t v56 = 0;
            uint64_t v59 = 0;
            v45 += v60 + 1;
            unint64_t v58 = 1;
            if (v45 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if ((_DWORD)v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }

              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }

            unint64_t v57 = 0LL;
            uint64_t v56 = 0;
            uint64_t v59 = 0;
            v45 += v60 + 1;
            unint64_t v58 = 1;
            if (v45 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if ((_DWORD)v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }

              uint64_t v80 = &v48[v65 - a4];
              LODWORD(a3) = 46;
LABEL_240:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v56 = xmmword_1837301C0;
              *(void *)(v56 + 16) = a3;
              *(void *)(v56 + 24) = a5;
              *(void *)(v56 + 32) = v13;
              *(void *)(v56 + 40) = v80;
              unint64_t v57 = 1;
LABEL_80:
              *(_BYTE *)(v56 + 48) = v57;
              return swift_willThrow();
            }

            unint64_t v62 = 0LL;
            id v61 = 0;
            unint64_t v64 = 0;
            v48 += v65 + 1;
            unint64_t v63 = 1;
            if (v48 >= v8)
            {
              __break(1u);
              goto LABEL_115;
            }

            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)a3 != 101)
            {
LABEL_140:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v48[v65],  a4,  a5);
              unint64_t v13 = v78;
              uint64_t v80 = v79;
              goto LABEL_240;
            }

              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }

            unint64_t v57 = 0LL;
            uint64_t v56 = 0;
            uint64_t v59 = 0;
            v45 += v60 + 1;
            unint64_t v58 = 1;
            if (v45 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if ((_DWORD)v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }

              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }

            unint64_t v57 = 0LL;
            uint64_t v56 = 0;
            uint64_t v59 = 0;
            v45 += v60 + 1;
            unint64_t v58 = 1;
            if (v45 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if ((_DWORD)v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }

void static URLComponents._unconditionallyBridgeFromObjectiveC(_:)( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1)
  {
    v10[160] = 1;
    v11[0] = 0LL;
    v11[1] = 0LL;
    char v12 = 0;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    uint64_t v17 = 0LL;
    char v18 = 1;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int16 v22 = 0;
    destructiveProjectEnumData for PredicateCodableError(v11, a2);
    outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v10,  &demangling cache variable for type metadata for URLComponents?);
    id v5 = a1;
    static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)((unint64_t)v5, (uint64_t)v10);
    outlined init with take of LocalePreferences?( (uint64_t)v10,  (uint64_t)v23,  &demangling cache variable for type metadata for URLComponents?);
    outlined init with take of LocalePreferences?( (uint64_t)v23,  (uint64_t)v24,  &demangling cache variable for type metadata for URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v24) == 1)
    {
      __break(1u);
    }

    else
    {

      __int128 v6 = v24[7];
      *(_OWORD *)(a3 + 96) = v24[6];
      *(_OWORD *)(a3 + 112) = v6;
      *(_OWORD *)(a3 + 128) = v25[0];
      *(_OWORD *)(a3 + 138) = *(_OWORD *)((char *)v25 + 10);
      __int128 v7 = v24[3];
      *(_OWORD *)(a3 + 32) = v24[2];
      *(_OWORD *)(a3 + 48) = v7;
      __int128 v8 = v24[5];
      *(_OWORD *)(a3 + 64) = v24[4];
      *(_OWORD *)(a3 + 80) = v8;
      __int128 v9 = v24[1];
      *(_OWORD *)a3 = v24[0];
      *(_OWORD *)(a3 + 16) = v9;
    }
  }

  else
  {
    LOBYTE(v24[0]) = 1;
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(_BYTE *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(void *)(a3 + 88) = 0LL;
    *(_BYTE *)(a3 + 96) = 1;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_WORD *)(a3 + 152) = 0;
  }

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance URLComponents()
{
  __int128 v1 = v0[7];
  __int128 v20 = v0[6];
  __int128 v21 = v1;
  v22[0] = v0[8];
  *(_OWORD *)((char *)v22 + 10) = *(__int128 *)((char *)v0 + 138);
  __int128 v2 = v0[3];
  __int128 v16 = v0[2];
  __int128 v17 = v2;
  __int128 v3 = v0[5];
  __int128 v18 = v0[4];
  __int128 v19 = v3;
  __int128 v4 = v0[1];
  __int128 v14 = *v0;
  __int128 v15 = v4;
  id v5 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  __int128 v6 = (char *)objc_allocWithZone(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 172) = 0;
  __int128 v8 = v21;
  *(_OWORD *)(v7 + 112) = v20;
  *(_OWORD *)(v7 + 128) = v8;
  *(_OWORD *)(v7 + 144) = v22[0];
  *(_OWORD *)(v7 + 154) = *(_OWORD *)((char *)v22 + 10);
  __int128 v9 = v17;
  *(_OWORD *)(v7 + 48) = v16;
  *(_OWORD *)(v7 + 64) = v9;
  __int128 v10 = v19;
  *(_OWORD *)(v7 + 80) = v18;
  *(_OWORD *)(v7 + 96) = v10;
  __int128 v11 = v15;
  *(_OWORD *)(v7 + 16) = v14;
  *(_OWORD *)(v7 + 32) = v11;
  *(void *)&v6[OBJC_IVAR____NSSwiftURLComponents_lock] = v7;
  outlined retain of URLComponents((uint64_t)&v14);
  v13.receiver = v6;
  v13.super_class = v5;
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance URLComponents( unint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t NSURLComponents._toCustomAnyHashable()(uint64_t a1, uint64_t a2)
{
  char v7 = 1;
  v8[0] = 0LL;
  v8[1] = 0LL;
  char v9 = 0;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v14 = 0LL;
  char v15 = 1;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int16 v19 = 0;
  destructiveProjectEnumData for PredicateCodableError(v8, a2);
  outlined init with take of LocalePreferences?( (uint64_t)v8,  (uint64_t)v5,  &demangling cache variable for type metadata for URLComponents?);
  id v3 = v2;
  static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)((unint64_t)v3, (uint64_t)v5);
  outlined init with take of LocalePreferences?( (uint64_t)v5,  (uint64_t)v20,  &demangling cache variable for type metadata for URLComponents?);
  outlined init with take of LocalePreferences?( (uint64_t)v20,  (uint64_t)v21,  &demangling cache variable for type metadata for URLComponents?);
  uint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v21);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {

    v5[6] = v21[6];
    v5[7] = v21[7];
    v6[0] = v22[0];
    *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)v22 + 10);
    v5[2] = v21[2];
    v5[3] = v21[3];
    v5[4] = v21[4];
    v5[5] = v21[5];
    v5[0] = v21[0];
    v5[1] = v21[1];
    lazy protocol witness table accessor for type URLComponents and conformance URLComponents();
    return AnyHashable.init<A>(_:)();
  }

  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLComponents( uint64_t a1, uint64_t a2)
{
  id v3 = (id)*v2;
  NSURLComponents._toCustomAnyHashable()(*v2, a2);
}

uint64_t URLQueryItem.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLQueryItem.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *__int128 v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*URLQueryItem.name.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t URLQueryItem.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLQueryItem.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*URLQueryItem.value.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void URLQueryItem.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

Swift::Int URLQueryItem.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URLQueryItem()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance URLQueryItem()
{
  uint64_t v1 = *(void *)(v0 + 24);
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URLQueryItem()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

uint64_t URLQueryItem.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    uint64_t v3 = v0[2];
    uint64_t v7 = *v0;
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = 61LL;
    v4._object = (void *)0xE100000000000000LL;
    String.append(_:)(v4);
    v5._countAndFlagsBits = v3;
    v5._object = v2;
    String.append(_:)(v5);
    return v7;
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  return v1;
}

uint64_t URLQueryItem.debugDescription.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    uint64_t v3 = v0[2];
    uint64_t v7 = *v0;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = 61LL;
    v4._object = (void *)0xE100000000000000LL;
    String.append(_:)(v4);
    v5._countAndFlagsBits = v3;
    v5._object = v2;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  return v1;
}

uint64_t URLQueryItem.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  Swift::String v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v0;
  uint64_t v8 = v0[1];
  uint64_t v11 = v0[2];
  uint64_t v10 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1837232D0;
  *(_OWORD *)(v12 + 32) = xmmword_1837257C0;
  *(void *)(v12 + 72) = MEMORY[0x189617FA8];
  *(void *)(v12 + 48) = v9;
  *(void *)(v12 + 56) = v8;
  *(_OWORD *)(v12 + 80) = xmmword_1837257D0;
  *(void *)(v12 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v12 + 96) = v11;
  *(void *)(v12 + 104) = v10;
  v17[2] = v9;
  v17[3] = v8;
  v17[4] = v11;
  v17[5] = v10;
  v17[1] = v12;
  uint64_t v13 = *MEMORY[0x18961A718];
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v7, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v7, 0LL, 1LL, v14);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A],  &demangling cache variable for type metadata for [(label: String?, value: Any)],  MEMORY[0x189618488]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLQueryItem()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    uint64_t v3 = v0[2];
    uint64_t v7 = *v0;
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = 61LL;
    v4._object = (void *)0xE100000000000000LL;
    String.append(_:)(v4);
    v5._countAndFlagsBits = v3;
    v5._object = v2;
    String.append(_:)(v5);
    return v7;
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  return v1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLQueryItem()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    uint64_t v3 = v0[2];
    uint64_t v7 = *v0;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = 61LL;
    v4._object = (void *)0xE100000000000000LL;
    String.append(_:)(v4);
    v5._countAndFlagsBits = v3;
    v5._object = v2;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  return v1;
}

uint64_t static URLQueryItem._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURLQueryItem);
}

NSURLQueryItem __swiftcall URLQueryItem._bridgeToObjectiveC()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Swift::String v5 = (objc_class *)type metadata accessor for _NSSwiftURLQueryItem();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  uint64_t v7 = &v6[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
  *(void *)uint64_t v7 = v1;
  *((void *)v7 + 1) = v2;
  *((void *)v7 + 2) = v4;
  *((void *)v7 + 3) = v3;
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  if (v3) {
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v9 = 0LL;
  }
  v14.receiver = v6;
  v14.super_class = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = (objc_class *)objc_msgSendSuper2(&v14, sel_initWithName_value_, v8, v9);
  swift_unknownObjectRelease();

  uint64_t v13 = v10;
  result._value = v12;
  result._name = v11;
  result.super.isa = v13;
  return result;
}

void static URLQueryItem._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  id v4 = objc_msgSend(a1, sel_name);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  id v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;
  }

  else
  {
    id v10 = 0LL;
    uint64_t v12 = 0LL;
  }

  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
}

uint64_t static URLQueryItem._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  id v4 = objc_msgSend(a1, sel_name);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  id v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;
  }

  else
  {
    id v10 = 0LL;
    uint64_t v12 = 0LL;
  }

  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
  return 1LL;
}

void static URLQueryItem._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    id v4 = objc_msgSend(a1, sel_name);
    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;

    id v8 = objc_msgSend(a1, sel_value);
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v12 = v11;
    }

    else
    {
      id v10 = 0LL;
      uint64_t v12 = 0LL;
    }

    *a2 = v5;
    a2[1] = v7;
    a2[2] = v10;
    a2[3] = v12;
  }

  else
  {
    __break(1u);
  }

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance URLQueryItem()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  id v5 = (objc_class *)type metadata accessor for _NSSwiftURLQueryItem();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  uint64_t v7 = &v6[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
  *(void *)uint64_t v7 = v1;
  *((void *)v7 + 1) = v2;
  *((void *)v7 + 2) = v4;
  *((void *)v7 + 3) = v3;
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  if (v3) {
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v9 = 0LL;
  }
  v12.receiver = v6;
  v12.super_class = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = objc_msgSendSuper2(&v12, sel_initWithName_value_, v8, v9);
  swift_unknownObjectRelease();

  return v10;
}

void protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance URLQueryItem( void *a1, uint64_t *a2)
{
  id v4 = objc_msgSend(a1, sel_name);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  id v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;
  }

  else
  {
    id v10 = 0LL;
    uint64_t v12 = 0LL;
  }

  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance URLQueryItem( void *a1, uint64_t *a2)
{
  id v4 = objc_msgSend(a1, sel_name);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  id v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;
  }

  else
  {
    id v10 = 0LL;
    uint64_t v12 = 0LL;
  }

  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
  return 1LL;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance URLQueryItem( void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    id v4 = objc_msgSend(a1, sel_name);
    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;

    id v8 = objc_msgSend(a1, sel_value);
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v12 = v11;
    }

    else
    {
      id v10 = 0LL;
      uint64_t v12 = 0LL;
    }

    *a2 = v5;
    a2[1] = v7;
    a2[2] = v10;
    a2[3] = v12;
  }

  else
  {
    __break(1u);
  }

uint64_t NSURLQueryItem._toCustomAnyHashable()()
{
  id v1 = objc_msgSend(v0, sel_name);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  id v2 = objc_msgSend(v0, sel_value);
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLQueryItem()
{
  id v1 = *v0;
  id v2 = objc_msgSend(*v0, sel_name);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  id v3 = objc_msgSend(v1, sel_value);
  if (v3)
  {
    id v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }

  lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem();
  AnyHashable.init<A>(_:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance URLComponents.CodingKeys@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized URLComponents.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance URLComponents.CodingKeys( void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URLComponents.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182F462FC + 4 * byte_183725139[*v0]))( 0x656D65686373LL,  0xE600000000000000LL);
}

uint64_t sub_182F462FC()
{
  return 1919251317LL;
}

uint64_t sub_182F4630C()
{
  return 0x64726F7773736170LL;
}

uint64_t sub_182F46324()
{
  return 1953722216LL;
}

uint64_t sub_182F46334()
{
  return 1953656688LL;
}

uint64_t sub_182F46344()
{
  return 1752457584LL;
}

uint64_t sub_182F46354()
{
  return 0x7972657571LL;
}

uint64_t sub_182F46368()
{
  return 0x746E656D67617266LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URLComponents.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized URLComponents.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance URLComponents.CodingKeys()
{
  return *v0;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance URLComponents.CodingKeys@<X0>( unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized URLComponents.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLComponents.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLComponents.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t URLComponents.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v118 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URLComponents.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v125 = 1;
  __int128 v122 = 0uLL;
  LOBYTE(v123[0]) = 0;
  *(_OWORD *)((char *)v123 + 8) = 0u;
  *(_OWORD *)((char *)&v123[1] + 8) = 0u;
  *(_OWORD *)((char *)&v123[2] + 8) = 0u;
  *(_OWORD *)((char *)&v123[3] + 8) = 0u;
  *((void *)&v123[4] + 1) = 0LL;
  LOBYTE(v124[0]) = 1;
  *(_OWORD *)((char *)v124 + 8) = 0u;
  *(_OWORD *)((char *)&v124[1] + 8) = 0u;
  *(_OWORD *)((char *)&v124[2] + 8) = 0u;
  WORD4(v124[3]) = 0;
  uint64_t v8 = a1[3];
  uint64_t v126 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v117 = v5;
    uint64_t v9 = v118;
    char v121 = 0;
    v10.value._countAndFlagsBits = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    URLComponents._URLComponents.setScheme(_:)(v10);
    if (v11)
    {

      swift_bridgeObjectRelease();
      int v114 = 0;
      uint64_t v113 = 714LL;
      goto LABEL_96;
    }

    swift_bridgeObjectRelease();
    char v121 = 1;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v14 = v12;
    unint64_t v15 = v13;
    uint64_t v116 = v4;
    BYTE8(v122) = 0;
    BYTE10(v122) = 0;
    if (v13)
    {
      if ((v13 & 0x1000000000000000LL) != 0)
      {
        Swift::Int v115 = v7;
        unint64_t v119 = v12;
        uint64_t v120 = v13;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v81 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v82 = (unsigned __int16 *)objc_msgSend(v81, sel__fastCharacterContents);
        id v83 = v81;
        if (v82)
        {
          uint64_t v84 = v82;
          unint64_t v119 = v14;
          uint64_t v120 = v15;
          StringProtocol._ephemeralString.getter();
          char v85 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v86 = (uint64_t)objc_msgSend(v85, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v86) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v84,  v86,  2u,  0);
        }

        else
        {
          uint64_t v86 = specialized Sequence.allSatisfy(_:)(v14, v15, 2);
        }

        uint64_t v18 = swift_bridgeObjectRelease();
        uint64_t v7 = v115;
        if ((v86 & 1) != 0) {
          goto LABEL_17;
        }
      }

      else
      {
        if ((v13 & 0x2000000000000000LL) != 0)
        {
          uint64_t v17 = HIBYTE(v13) & 0xF;
          unint64_t v119 = v12;
          uint64_t v120 = v15 & 0xFFFFFFFFFFFFFFLL;
          __int128 v16 = (char *)&v119;
        }

        else if ((v12 & 0x1000000000000000LL) != 0)
        {
          __int128 v16 = (char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          __int128 v16 = (char *)_StringObject.sharedUTF8.getter();
        }

        uint64_t v18 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v16, v17, 2u, 0);
        if ((v18 & 1) != 0) {
          goto LABEL_17;
        }
      }

      uint64_t v19 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000LL) == 0) {
        uint64_t v19 = v14 & 0xFFFFFFFFFFFFLL;
      }
      if (v19)
      {
        unint64_t v119 = v14;
        uint64_t v120 = v15;
        MEMORY[0x1895F8858](v18);
        uint64_t v113 = (uint64_t)&v119;
        LOBYTE(v114) = 2;
        swift_bridgeObjectRetain();
        __int128 v20 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)(&v115 - 4),  v14,  v15);
        if (v21)
        {
          uint64_t v14 = (uint64_t)v20;
          unint64_t v22 = v21;
          swift_bridgeObjectRelease_n();
          unint64_t v15 = v22;
        }

        else
        {
          unint64_t v24 = v119;
          unint64_t v23 = v120;
          swift_bridgeObjectRetain();
          uint64_t v14 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v24, v23, 2u);
          unint64_t v26 = v25;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          unint64_t v15 = v26;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = 0LL;
        unint64_t v15 = 0xE000000000000000LL;
      }
    }

uint64_t URLComponents.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URLComponents.CodingKeys>);
  uint64_t v70 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v7 = v1[7];
  __int128 v67 = v1[6];
  __int128 v68 = v7;
  *(_OWORD *)uint64_t v69 = v1[8];
  *(_OWORD *)&v69[10] = *(__int128 *)((char *)v1 + 138);
  __int128 v8 = v1[3];
  __int128 v63 = v1[2];
  __int128 v64 = v8;
  __int128 v9 = v1[5];
  __int128 v65 = v1[4];
  __int128 v66 = v9;
  __int128 v10 = v1[1];
  __int128 v61 = *v1;
  __int128 v62 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v59[8] = v67;
  v59[9] = v68;
  v60[0] = *(_OWORD *)v69;
  *(_OWORD *)((char *)v60 + 10) = *(_OWORD *)&v69[10];
  v59[4] = v63;
  v59[5] = v64;
  v59[6] = v65;
  v59[7] = v66;
  v59[2] = v61;
  v59[3] = v62;
  uint64_t v11 = v61;
  if (!(void)v63 && BYTE9(v61) == 1 && (void)v61 && (*(_BYTE *)(v61 + 48) & 1) == 0)
  {
    uint64_t v54 = v6;
    outlined retain of URLComponents((uint64_t)&v61);
    uint64_t v6 = v54;
    uint64_t v12 = String.subscript.getter();
    MEMORY[0x186E1B610](v12);
    swift_bridgeObjectRelease();
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v61);
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v61);
  LOBYTE(v58[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = outlined retain of URLComponents((uint64_t)&v61);
    URLComponents._URLComponents.user.getter(v13);
    outlined release of URLComponents((uint64_t)&v61);
    LOBYTE(v58[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    swift_bridgeObjectRelease();
    uint64_t v14 = outlined retain of URLComponents((uint64_t)&v61);
    URLComponents._URLComponents.password.getter(v14);
    outlined release of URLComponents((uint64_t)&v61);
    LOBYTE(v58[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    swift_bridgeObjectRelease();
    unint64_t v16 = v66;
    uint64_t v53 = v4;
    if ((void)v66)
    {
      uint64_t v17 = *((void *)&v65 + 1);
      uint64_t v18 = outlined retain of URLComponents((uint64_t)&v61);
      unint64_t v19 = v16;
    }

    else if (BYTE12(v61) == 1 && v11 && (*(_BYTE *)(v11 + 120) & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v61);
      uint64_t v23 = String.subscript.getter();
      uint64_t v17 = MEMORY[0x186E1B610](v23);
      unint64_t v19 = v24;
      uint64_t v18 = swift_bridgeObjectRelease();
    }

    else
    {
      outlined retain of URLComponents((uint64_t)&v61);
      uint64_t v18 = URLComponents._URLComponents.port.getter();
      if ((v20 & 1) != 0)
      {
        URLComponents._URLComponents.percentEncodedUser.getter();
        uint64_t v22 = v21;
        uint64_t v18 = swift_bridgeObjectRelease();
        if (!v22) {
          goto LABEL_51;
        }
      }

      uint64_t v17 = 0LL;
      unint64_t v19 = 0xE000000000000000LL;
    }

    uint64_t v25 = v17 & 0xFFFFFFFFFFFFLL;
    if ((v19 & 0x2000000000000000LL) != 0) {
      uint64_t v26 = HIBYTE(v19) & 0xF;
    }
    else {
      uint64_t v26 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (!v26)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v61);
      uint64_t v4 = v53;
LABEL_52:
      LOBYTE(v58[0]) = 3;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      swift_bridgeObjectRelease();
      v58[6] = v67;
      v58[7] = v68;
      v59[0] = *(_OWORD *)v69;
      *(_OWORD *)((char *)v59 + 10) = *(_OWORD *)&v69[10];
      v58[2] = v63;
      v58[3] = v64;
      v58[4] = v65;
      v58[5] = v66;
      v58[0] = v61;
      v58[1] = v62;
      URLComponents.port.getter();
      LOBYTE(v58[0]) = 4;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      outlined retain of URLComponents((uint64_t)&v61);
      URLComponents._URLComponents.path.getter();
      outlined release of URLComponents((uint64_t)&v61);
      LOBYTE(v58[0]) = 5;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      uint64_t v51 = outlined retain of URLComponents((uint64_t)&v61);
      URLComponents._URLComponents.query.getter(v51);
      outlined release of URLComponents((uint64_t)&v61);
      LOBYTE(v58[0]) = 6;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      swift_bridgeObjectRelease();
      uint64_t v52 = outlined retain of URLComponents((uint64_t)&v61);
      URLComponents._URLComponents.fragment.getter(v52);
      outlined release of URLComponents((uint64_t)&v61);
      LOBYTE(v58[0]) = 7;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      goto LABEL_10;
    }

    if ((v69[24] & 1) != 0)
    {
      *(void *)&v58[0] = v17;
      *((void *)&v58[0] + 1) = v19;
      MEMORY[0x1895F8858](v18);
      uint64_t v27 = MEMORY[0x18961AFF8];
      *(&v53 - 2) = (uint64_t)v58;
      *(&v53 - 1) = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v53 - 4),  v17,  v19);
      if (v28 == 1)
      {
        __int128 v29 = v58[0];
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v29,  *((unint64_t *)&v29 + 1),  MEMORY[0x18961AFF8]);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v4 = v53;
      goto LABEL_51;
    }

    if ((v19 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      if ((v19 & 0x2000000000000000LL) != 0)
      {
        *(void *)&v58[0] = v17;
        *((void *)&v58[0] + 1) = v19 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v56 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v57 = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)v58,  HIBYTE(v19) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56,  0,  (unsigned __int8 *)v58,  HIBYTE(v19) & 0xF,  v55);
        uint64_t v32 = v55[1];
        swift_release();
      }

      else
      {
        if ((v17 & 0x1000000000000000LL) != 0)
        {
          uint64_t v30 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          uint64_t v30 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v25 = v48;
        }

        *(void *)&v58[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v58[0] + 1) = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v30,  v25,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v58,  0,  v30,  v25);
        uint64_t v32 = v31;
      }

      swift_bridgeObjectRelease();
      uint64_t v4 = v53;
      if (v32 != 1)
      {
        swift_bridgeObjectRelease_n();
LABEL_51:
        outlined release of URLComponents((uint64_t)&v61);
        goto LABEL_52;
      }
    }

    *(void *)&v58[0] = v17;
    *((void *)&v58[0] + 1) = v19;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v34 = objc_msgSend(v33, sel__fastCharacterContents);
    uint64_t v35 = v33;
    uint64_t v36 = (uint64_t)v34;
    id v37 = v35;
    if (v36)
    {
      *(void *)&v58[0] = v17;
      *((void *)&v58[0] + 1) = v19;
      StringProtocol._ephemeralString.getter();
      unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v39 = objc_msgSend(v38, sel_length);
      uint64_t v40 = swift_unknownObjectRelease();
      uint64_t v41 = MEMORY[0x1895F8858](v40);
      *((_BYTE *)&v53 - 16) = 0;
      MEMORY[0x1895F8858](v41);
      *(&v53 - 2) = v36;
      *(&v53 - 1) = (uint64_t)v39;
      specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( v36,  (uint64_t)v39,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v42,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)(&v53 - 4));
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v61);
      uint64_t v4 = v53;
      goto LABEL_52;
    }

    *(void *)&v58[0] = v17;
    *((void *)&v58[0] + 1) = v19;
    swift_bridgeObjectRetain();
    uint64_t v44 = String.init<A>(_:)();
    unint64_t v45 = v43;
    if ((v43 & 0x1000000000000000LL) != 0)
    {
      uint64_t v44 = static String._copying(_:)();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      unint64_t v45 = v50;
      uint64_t v4 = v53;
      if ((v50 & 0x2000000000000000LL) == 0) {
        goto LABEL_42;
      }
    }

    else
    {
      uint64_t v4 = v53;
      if ((v43 & 0x2000000000000000LL) == 0)
      {
LABEL_42:
        if ((v44 & 0x1000000000000000LL) != 0)
        {
          char v46 = (unsigned __int8 *)((v45 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v47 = v44 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          char v46 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }

        *(void *)&v58[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v58[0] + 1) = 0LL;
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v46,  v47,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v58,  0,  v46,  v47);
        goto LABEL_50;
      }
    }

    *(void *)&v58[0] = v44;
    *((void *)&v58[0] + 1) = v45 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v56 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v57 = 0LL;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)v58,  HIBYTE(v45) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56,  0,  (unsigned __int8 *)v58,  HIBYTE(v45) & 0xF,  v55);
    swift_release();
LABEL_50:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }

uint64_t protocol witness for Decodable.init(from:) in conformance URLComponents@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  return URLComponents.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URLComponents(void *a1)
{
  return URLComponents.encode(to:)(a1);
}

unint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, unint64_t a2, int a3)
{
  int v18 = a3;
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v6 = 4 * v5;
  uint64_t v7 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v7) = 1;
  }
  uint64_t v8 = 4LL << v7;
  uint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v9 = 15LL;
  while (1)
  {
    unint64_t v10 = v9 >> 14;
    if (v9 >> 14 == v6) {
      return v10 == v6;
    }
    unint64_t v11 = v9 & 0xC;
    unint64_t result = v9;
    if (v11 == v8) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a1, a2);
    }
    unint64_t v13 = result >> 16;
    if (result >> 16 >= v5) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v14 = result;
      if (v11 != v8) {
        goto LABEL_18;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v17[0] = a1;
      v17[1] = v16;
      char v14 = *((_BYTE *)v17 + v13);
      if (v11 != v8) {
        goto LABEL_18;
      }
    }

    else
    {
      unint64_t result = v15;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v14 = *(_BYTE *)(result + v13);
      if (v11 != v8)
      {
LABEL_18:
        if ((a2 & 0x1000000000000000LL) == 0) {
          goto LABEL_19;
        }
        goto LABEL_23;
      }
    }

    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a1, a2);
    unint64_t v9 = result;
    if ((a2 & 0x1000000000000000LL) == 0)
    {
LABEL_19:
      unint64_t v9 = (v9 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (v14 < 0) {
        return v10 == v6;
      }
      goto LABEL_25;
    }

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1LL;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

BOOL specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  int v3 = a1;
  uint64_t v4 = MEMORY[0x186E1CE88](*(void *)(a2 + 40), a1, 1LL);
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  int v3 = a1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  uint64_t v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3)
  {
    return 0LL;
  }

  else
  {
    uint64_t v4 = a2;
    if (*(unsigned __int8 *)(a4 + a2) == a1)
    {
      return a2;
    }

    else
    {
      while (a3 - 1 != v4)
      {
        int v6 = *(unsigned __int8 *)(a4 + 1 + v4++);
        if (v6 == a1) {
          return v4;
        }
      }

      return 0LL;
    }
  }

unint64_t specialized Collection<>.firstIndex(of:)( unsigned __int8 a1, unint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000LL) != 0) {
    unint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = 4 * v3;
  uint64_t v8 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  uint64_t v15 = a3 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v10 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v11 = 15LL;
  while (1)
  {
    unint64_t result = v11;
    if ((v11 & 0xC) == v9) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
    }
    unint64_t v13 = result >> 16;
    if (result >> 16 >= v3) {
      break;
    }
    if ((a3 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((a3 & 0x2000000000000000LL) != 0)
    {
      v16[0] = a2;
      v16[1] = v15;
      unint64_t result = *((unsigned __int8 *)v16 + v13);
    }

    else
    {
      uint64_t v14 = v10;
      if ((a2 & 0x1000000000000000LL) == 0) {
        uint64_t v14 = _StringObject.sharedUTF8.getter();
      }
      unint64_t result = *(unsigned __int8 *)(v14 + v13);
    }

    if ((v11 & 0xC) == v9)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
      unint64_t v11 = result;
      if ((a3 & 0x1000000000000000LL) == 0) {
        goto LABEL_8;
      }
LABEL_21:
      if (v3 <= v11 >> 16) {
        goto LABEL_31;
      }
      unint64_t v11 = String.UTF8View._foreignIndex(after:)();
      if (v7 == v11 >> 14) {
        return 0LL;
      }
    }

    else
    {
      if ((a3 & 0x1000000000000000LL) != 0) {
        goto LABEL_21;
      }
LABEL_8:
      unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (v7 == v11 >> 14) {
        return 0LL;
      }
    }
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = a2 + 32;
  uint64_t v5 = qword_1837256F8[a1];
  while (qword_1837256F8[*(char *)(v4 + v3)] != v5)
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    if ((v6 & 1) != 0) {
      return v3;
    }
    if (v2 == ++v3) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease_n();
  return v3;
}

uint64_t specialized Collection<>.firstIndex(of:)( unsigned __int8 a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5 = a3 >> 14;
  if (a3 >> 14 == a2 >> 14) {
    return 0LL;
  }
  uint64_t result = Substring.UTF8View.subscript.getter();
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v14 = HIBYTE(a5) & 0xF;
  }
  else {
    unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v6 = a2;
  while (1)
  {
    if ((v6 & 0xC) == v13)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, a4, a5);
      unint64_t v6 = result;
      if ((a5 & 0x1000000000000000LL) == 0)
      {
LABEL_13:
        unint64_t v6 = (v6 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_17;
      }
    }

    else if ((a5 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_13;
    }

    if (v14 <= v6 >> 16) {
      break;
    }
    unint64_t v6 = String.UTF8View._foreignIndex(after:)();
LABEL_17:
    if (v6 >> 14 == v5) {
      return 0LL;
    }
    uint64_t result = Substring.UTF8View.subscript.getter();
  }

  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v5 = swift_retain();
  char v6 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v5, a1);
  swift_release();
  uint64_t v7 = 0LL;
  if ((v6 & 1) == 0)
  {
    while (a3 - 1 != v7)
    {
      uint64_t v8 = swift_retain();
      char v9 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v8, a1);
      swift_release();
      ++v7;
      if ((v9 & 1) != 0) {
        return v7;
      }
    }

    return 0LL;
  }

  return v7;
}

unint64_t specialized Collection<>.firstIndex(of:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0LL;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15LL;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t), char a4, unsigned __int8 *a5, uint64_t a6)
{
  v9[2] = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t result = closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)(a1, a2, a3, a4 & 1, a5, a6, v9);
    if (!v6) {
      return v9[0];
    }
  }

  else
  {
    uint64_t v8 = one-time initialization token for idnaTranscoder;
    swift_retain();
    if (v8 != -1) {
      swift_once();
    }
    if ((byte_18C5C6060 & 1) != 0)
    {
      swift_release();
      return 0LL;
    }

    else
    {
      if ((swift_stdlib_isStackAllocationSafe() & 1) != 0) {
        __break(1u);
      }
      uint64_t result = swift_slowAlloc();
      __break(1u);
    }
  }

  return result;
}

uint64_t specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *), uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t (*a7)(uint64_t, void), uint64_t a8)
{
  uint64_t v8 = 0LL;
  v24[3] = *MEMORY[0x1895F89C0];
  if (a2 <= 2048)
  {
    if (one-time initialization token for idnaTranscoder != -1) {
      swift_once();
    }
    if (byte_18C5C6060 == 1)
    {
      return 0LL;
    }

    else
    {
      uint64_t v17 = static UIDNAHookICU.idnaTranscoder;
      uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if ((isStackAllocationSafe & 1) != 0)
      {
        v24[1] = v24;
        MEMORY[0x1895F8858](isStackAllocationSafe);
        return specialized closure #1 in static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)&v21,  2048LL,  a1,  a2,  a3,  a4,  v17,  a5,  a6,  a7);
      }

      else
      {
        uint64_t v23 = a8;
        uint64_t v22 = a6;
        uint64_t v19 = swift_slowAlloc();
        uint64_t v8 = specialized closure #1 in static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( v19,  2048LL,  a1,  a2,  a3,  a4,  v17,  a5,  v22,  a7);
        MEMORY[0x186E20E60](v19, -1LL, -1LL);
      }
    }
  }

  return v8;
}

uint64_t specialized closure #1 in static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *), uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9, uint64_t (*a10)(uint64_t, void))
{
  *(void *)&v18[7] = *MEMORY[0x1895F89C0];
  __int16 v17 = 16;
  *(void *)int v18 = 0LL;
  *(void *)&v18[3] = 0LL;
  int v16 = 0;
  if (!a3) {
    goto LABEL_16;
  }
  if (!a1) {
    goto LABEL_17;
  }
  if (a4 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }

  int v12 = a5(a7, a3, a4, a1, a2, &v17, &v16);
  if (v16 > 0) {
    return 0LL;
  }
  int v14 = v12;
  char v15 = a8(*(unsigned int *)&v18[1]);
  uint64_t result = 0LL;
  if ((v15 & 1) != 0 && v14 >= 1) {
    return a10(a1, v14);
  }
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unint64_t v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0LL);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)( (unint64_t)v14,  (uint64_t)(v11 + 4),  v10,  a1,  a2,  a3,  a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }

    else
    {
      unint64_t v11 = (void *)MEMORY[0x18961AFE8];
    }

    uint64_t v13 = MEMORY[0x186E1B6AC](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }

  else
  {
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0) {
LABEL_12:
      }
        JUMPOUT(0x186E1B6ACLL);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }

    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x186E1B6AC]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }

unint64_t specialized Sequence._copySequenceContents(initializing:)( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    uint64_t v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x189618308]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()( uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!(_DWORD)result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1LL, 1LL, v3);
    uint64_t *v1 = result;
  }

  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)( a1,  (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)( a1,  (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)( uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24LL);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }

  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, int a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = result + 1;
  *(_DWORD *)(v3 + 4 * result + 32) = a2;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = result + 1;
  *(void *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit._Unit>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.LanguageCode>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Region>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Collation>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Currency>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field.Option>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationIntent.TableColumn>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DateComponents>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 288);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 288 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.RecurrenceRule.Month>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  uint64_t v15 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GenericArgument>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  uint64_t v15 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 120 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ICUDateFormatter.AttributePosition>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSCalendarUnit>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_XMLPlistEncodingFormat.Reference>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExpressionStructure.Argument>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  uint64_t v15 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExpressionStructure>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Type>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Language>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<iovec>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(component: Calendar.Component, multitude: Int)>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field.Option>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8]) {
      memmove(v12, v13, 112 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[112 * v8] || v12 >= &v13[112 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(PredicateExpressions.VariableID, String)>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PredicateExpressions.VariableID, String));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : AttributedStringKey.Type]>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AttributedStringKey.Type]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: Encodable)>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 56 * v8) {
      memmove(v10 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  void *v13;
  size_t v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument._AttributeFixup?>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  uint64_t v14 = 3 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument._AttributeFixup?);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  size_t v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?)>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 + 31;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v13 = v10 + 4;
  uint64_t v14 = a4 + 4;
  uint64_t v15 = v8 << 6;
  if ((a1 & 1) != 0)
  {
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v14 >= (void *)((char *)v13 + v15) || v13 >= (void *)((char *)v14 + v15))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  void *v13;
  size_t v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference)>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  uint64_t v14 = 6 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: JSONReference)>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: JSONReference));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: NSString, value: JSONReference)>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: NSString, value: JSONReference));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument.CodableStorage>);
  unint64_t v10 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL) - 8);
  size_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  uint64_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v14 - v12 == 0x8000000000000000LL && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (char *)v13 + v17;
  char v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  char v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  uint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Substring)>);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Substring));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    size_t v11 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    size_t v11 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v9]) {
      memmove(v13, v14, v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }

  else
  {
    size_t v11 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9]) {
      memmove(v14, v15, 4 * v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

void *_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( void *(*a1)(void *__return_ptr, void, void), uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((a6 & 0x1000000000000000LL) != 0) {
    return 0LL;
  }
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    v13[0] = a5;
    v13[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    size_t v11 = v13;
  }

  else if ((a5 & 0x1000000000000000LL) != 0)
  {
    size_t v11 = (void *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    size_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }

  return _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5Tf4xnn_n( v11,  a3,  a4,  a5,  a6,  a1);
}

void *_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5( void *(*a1)(void *__return_ptr, void, void), uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((a6 & 0x1000000000000000LL) != 0) {
    return 0LL;
  }
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    v13[0] = a5;
    v13[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    size_t v11 = v13;
  }

  else if ((a5 & 0x1000000000000000LL) != 0)
  {
    size_t v11 = (void *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    size_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }

  return _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5Tf4xnn_n( v11,  a3,  a4,  a5,  a6,  a1);
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( a1,  a2,  a3,  (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
  *a4 = result;
  a4[1] = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t result = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( a1,  a2,  a3,  (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }

  return result;
}

uint64_t specialized static URLQueryItem.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v7 & 1) != 0))
  {
    uint64_t result = (v3 | v5) == 0;
    if (v3 && v5 != 0)
    {
      if (v2 == v4 && v3 == v5) {
        return 1LL;
      }
      else {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }

  return result;
}

uint64_t specialized static URLComponents.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v2 = a1[7];
  __int128 v92 = a1[6];
  __int128 v93 = v2;
  *(_OWORD *)__int128 v94 = a1[8];
  *(_OWORD *)&v94[10] = *(__int128 *)((char *)a1 + 138);
  __int128 v3 = a1[3];
  __int128 v88 = a1[2];
  __int128 v89 = v3;
  __int128 v4 = a1[5];
  __int128 v90 = a1[4];
  __int128 v91 = v4;
  __int128 v5 = a1[1];
  __int128 v86 = *a1;
  __int128 v87 = v5;
  __int128 v6 = a2[7];
  __int128 v101 = a2[6];
  __int128 v102 = v6;
  *(_OWORD *)id v103 = a2[8];
  *(_OWORD *)&v103[10] = *(__int128 *)((char *)a2 + 138);
  __int128 v7 = a2[3];
  __int128 v97 = a2[2];
  __int128 v98 = v7;
  __int128 v8 = a2[5];
  __int128 v99 = a2[4];
  __int128 v100 = v8;
  __int128 v9 = a2[1];
  __int128 v95 = *a2;
  __int128 v96 = v9;
  uint64_t v10 = (_BYTE *)v86;
  unint64_t v11 = v93;
  if ((void)v93)
  {
    uint64_t v12 = *((void *)&v92 + 1);
    outlined retain of URLComponents((uint64_t)&v86);
    unint64_t v13 = v11;
  }

  else if (BYTE14(v86) == 1 && (void)v86)
  {
    if ((*(_BYTE *)(v86 + 168) & 1) != 0)
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v14 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }

    else
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v14 = String.subscript.getter();
    }

    uint64_t v12 = MEMORY[0x186E1B610](v14);
    unint64_t v13 = v15;
    swift_bridgeObjectRelease();
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v86);
    uint64_t v12 = 0LL;
    unint64_t v13 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v86);
  uint64_t v16 = (_BYTE *)v95;
  unint64_t v17 = v102;
  if ((void)v102)
  {
    uint64_t v18 = *((void *)&v101 + 1);
    outlined retain of URLComponents((uint64_t)&v95);
    unint64_t v19 = v17;
  }

  else if (BYTE14(v95) == 1 && (void)v95)
  {
    if ((*(_BYTE *)(v95 + 168) & 1) != 0)
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v20 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }

    else
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v20 = String.subscript.getter();
    }

    uint64_t v18 = MEMORY[0x186E1B610](v20);
    unint64_t v19 = v21;
    swift_bridgeObjectRelease();
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v95);
    uint64_t v18 = 0LL;
    unint64_t v19 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v95);
  if (v12 == v18 && v13 == v19)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v23 = 0;
    if ((v22 & 1) == 0) {
      return v23 & 1;
    }
  }

  uint64_t v24 = v88;
  if ((void)v88)
  {
    uint64_t v25 = *((void *)&v87 + 1);
    outlined retain of URLComponents((uint64_t)&v86);
    uint64_t v26 = v24;
  }

  else if (BYTE9(v86) == 1 && v10 && (v10[48] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v86);
    uint64_t v27 = String.subscript.getter();
    uint64_t v25 = MEMORY[0x186E1B610](v27);
    uint64_t v26 = v28;
    swift_bridgeObjectRelease();
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v86);
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v86);
  uint64_t v29 = v97;
  if ((void)v97)
  {
    uint64_t v30 = *((void *)&v96 + 1);
    outlined retain of URLComponents((uint64_t)&v95);
    uint64_t v31 = v29;
  }

  else if (BYTE9(v95) == 1 && v16 && (v16[48] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v95);
    uint64_t v32 = String.subscript.getter();
    uint64_t v30 = MEMORY[0x186E1B610](v32);
    uint64_t v31 = v33;
    swift_bridgeObjectRelease();
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v95);
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v95);
  if (v26)
  {
    if (!v31) {
      goto LABEL_131;
    }
    if (v25 == v30 && v26 == v31)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v23 = 0;
      if ((v34 & 1) == 0) {
        return v23 & 1;
      }
    }
  }

  else if (v31)
  {
    goto LABEL_43;
  }

  outlined retain of URLComponents((uint64_t)&v86);
  uint64_t v35 = URLComponents._URLComponents.encodedHost.getter();
  uint64_t v37 = v36;
  outlined release of URLComponents((uint64_t)&v86);
  outlined retain of URLComponents((uint64_t)&v95);
  uint64_t v38 = URLComponents._URLComponents.encodedHost.getter();
  uint64_t v40 = v39;
  outlined release of URLComponents((uint64_t)&v95);
  if (v37)
  {
    if (!v40) {
      goto LABEL_131;
    }
    if (v35 == v38 && v37 == v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v23 = 0;
      if ((v41 & 1) == 0) {
        return v23 & 1;
      }
    }
  }

  else if (v40)
  {
    goto LABEL_51;
  }

  uint64_t v42 = URLComponents.port.getter();
  char v44 = v43;
  uint64_t v45 = URLComponents.port.getter();
  if ((v44 & 1) != 0)
  {
    if ((v46 & 1) == 0)
    {
      char v23 = 0;
      return v23 & 1;
    }

    goto LABEL_59;
  }

  char v23 = 0;
  if ((v46 & 1) == 0 && v42 == v45)
  {
LABEL_59:
    uint64_t v47 = *(void *)v94;
    if (*(void *)v94)
    {
      uint64_t v48 = *((void *)&v93 + 1);
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v49 = v47;
    }

    else if (HIBYTE(v86) == 1 && v10 && (v10[192] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v50 = String.subscript.getter();
      uint64_t v48 = MEMORY[0x186E1B610](v50);
      uint64_t v49 = v51;
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v48 = 0LL;
      uint64_t v49 = 0LL;
    }

    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v86);
    uint64_t v52 = *(void *)v103;
    if (*(void *)v103)
    {
      uint64_t v53 = *((void *)&v102 + 1);
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v54 = v52;
    }

    else if (HIBYTE(v95) == 1 && v16 && (v16[192] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v55 = String.subscript.getter();
      uint64_t v53 = MEMORY[0x186E1B610](v55);
      uint64_t v54 = v56;
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v53 = 0LL;
      uint64_t v54 = 0LL;
    }

    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v95);
    if (v49)
    {
      if (!v54) {
        goto LABEL_131;
      }
      if (v48 == v53 && v49 == v54)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v23 = 0;
        if ((v57 & 1) == 0) {
          return v23 & 1;
        }
      }
    }

    else if (v54)
    {
      goto LABEL_43;
    }

    uint64_t v58 = *(void *)&v94[16];
    if (*(void *)&v94[16])
    {
      uint64_t v59 = *(void *)&v94[8];
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v60 = v58;
    }

    else if (v87 == 1 && v10 && (v10[216] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v61 = String.subscript.getter();
      uint64_t v59 = MEMORY[0x186E1B610](v61);
      uint64_t v60 = v62;
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v59 = 0LL;
      uint64_t v60 = 0LL;
    }

    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v86);
    uint64_t v63 = *(void *)&v103[16];
    if (*(void *)&v103[16])
    {
      uint64_t v64 = *(void *)&v103[8];
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v65 = v63;
    }

    else if (v96 == 1 && v16 && (v16[216] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v66 = String.subscript.getter();
      uint64_t v64 = MEMORY[0x186E1B610](v66);
      uint64_t v65 = v67;
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v64 = 0LL;
      uint64_t v65 = 0LL;
    }

    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v95);
    if (v60)
    {
      if (!v65) {
        goto LABEL_131;
      }
      if (v59 == v64 && v60 == v65)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v23 = 0;
        if ((v68 & 1) == 0) {
          return v23 & 1;
        }
      }

      goto LABEL_103;
    }

    if (!v65)
    {
LABEL_103:
      uint64_t v69 = URLComponents.percentEncodedUser.getter();
      uint64_t v71 = v70;
      uint64_t v72 = URLComponents.percentEncodedUser.getter();
      if (v71)
      {
        if (!v73) {
          goto LABEL_131;
        }
        if (v69 == v72 && v71 == v73)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v23 = 0;
          if ((v74 & 1) == 0) {
            return v23 & 1;
          }
        }

        goto LABEL_111;
      }

      if (!v73)
      {
LABEL_111:
        uint64_t v75 = v90;
        if ((void)v90)
        {
          uint64_t v76 = *((void *)&v89 + 1);
          outlined retain of URLComponents((uint64_t)&v86);
          uint64_t v77 = v75;
        }

        else if (BYTE11(v86) == 1 && v10 && (v10[96] & 1) == 0)
        {
          outlined retain of URLComponents((uint64_t)&v86);
          uint64_t v78 = String.subscript.getter();
          uint64_t v76 = MEMORY[0x186E1B610](v78);
          uint64_t v77 = v79;
          swift_bridgeObjectRelease();
        }

        else
        {
          outlined retain of URLComponents((uint64_t)&v86);
          uint64_t v76 = 0LL;
          uint64_t v77 = 0LL;
        }

        swift_bridgeObjectRetain();
        outlined release of URLComponents((uint64_t)&v86);
        uint64_t v80 = v99;
        if ((void)v99)
        {
          uint64_t v81 = *((void *)&v98 + 1);
          outlined retain of URLComponents((uint64_t)&v95);
          uint64_t v82 = v80;
        }

        else if (BYTE11(v95) == 1 && v16 && (v16[96] & 1) == 0)
        {
          outlined retain of URLComponents((uint64_t)&v95);
          uint64_t v83 = String.subscript.getter();
          uint64_t v81 = MEMORY[0x186E1B610](v83);
          uint64_t v82 = v84;
          swift_bridgeObjectRelease();
        }

        else
        {
          outlined retain of URLComponents((uint64_t)&v95);
          uint64_t v81 = 0LL;
          uint64_t v82 = 0LL;
        }

        swift_bridgeObjectRetain();
        outlined release of URLComponents((uint64_t)&v95);
        if (v77)
        {
          if (v82)
          {
            if (v76 == v81 && v77 == v82)
            {
              swift_bridgeObjectRelease();
              char v23 = 1;
            }

            else
            {
              char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
            }

            goto LABEL_132;
          }

          goto LABEL_51;
        }

        if (!v82)
        {
          char v23 = 1;
          return v23 & 1;
        }

LABEL_131:
        char v23 = 0;
        goto LABEL_132;
      }

        __break(1u);
      }

      goto LABEL_128;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v75 = v69;
      uint64_t v33 = v150;
      if ((v70 & 1) != 0) {
        goto LABEL_21;
      }
LABEL_98:
      __int128 v122 = v148;
      unint64_t v123 = v71;
      outlined init with copy of ICUNumberFormatter.Signature( v33,  v148,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v123, v122, v41, (void *)v75);
      goto LABEL_99;
    }
  }

  uint64_t v140 = v71;
  uint64_t v141 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  char v106 = static _DictionaryStorage.copy(original:)();
  uint64_t v75 = v106;
  if (!*(void *)(v69 + 16))
  {
LABEL_97:
    swift_bridgeObjectRelease();
    uint64_t v67 = v152;
    uint64_t v33 = v150;
    uint64_t v48 = (os_unfair_lock_s *)(v38 + 24);
    uint64_t v71 = v140;
    if ((v141 & 1) != 0) {
      goto LABEL_21;
    }
    goto LABEL_98;
  }

  uint64_t v107 = (char *)(v106 + 64);
  uint64_t v108 = 1LL << *(_BYTE *)(v75 + 32);
  uint64_t v143 = (char *)(v69 + 64);
  id v109 = (unint64_t)(v108 + 63) >> 6;
  if (v75 != v69 || v107 >= &v143[8 * v109]) {
    memmove(v107, v143, 8 * v109);
  }
  unint64_t v146 = 0LL;
  *(void *)(v75 + 16) = *(void *)(v69 + 16);
  unint64_t v110 = 1LL << *(_BYTE *)(v69 + 32);
  id v111 = -1LL;
  if (v110 < 64) {
    id v111 = ~(-1LL << v110);
  }
  unint64_t v149 = v111 & *(void *)(v69 + 64);
  uint64_t v142 = (unint64_t)(v110 + 63) >> 6;
  char v112 = v148;
  while (1)
  {
    if (v149)
    {
      uint64_t v113 = __clz(__rbit64(v149));
      v149 &= v149 - 1;
      int v114 = v113 | (v146 << 6);
      goto LABEL_73;
    }

    uint64_t v118 = v146 + 1;
    if (__OFADD__(v146, 1LL))
    {
      __break(1u);
      goto LABEL_133;
    }

    if (v118 >= v142) {
      goto LABEL_97;
    }
    unint64_t v119 = *(void *)&v143[8 * v118];
    uint64_t v120 = v146 + 1;
    if (!v119)
    {
      uint64_t v120 = v146 + 2;
      if (v146 + 2 >= v142) {
        goto LABEL_97;
      }
      unint64_t v119 = *(void *)&v143[8 * v120];
      if (!v119)
      {
        uint64_t v120 = v146 + 3;
        if (v146 + 3 >= v142) {
          goto LABEL_97;
        }
        unint64_t v119 = *(void *)&v143[8 * v120];
        if (!v119)
        {
          uint64_t v120 = v146 + 4;
          if (v146 + 4 >= v142) {
            goto LABEL_97;
          }
          unint64_t v119 = *(void *)&v143[8 * v120];
          if (!v119)
          {
            uint64_t v120 = v146 + 5;
            if (v146 + 5 >= v142) {
              goto LABEL_97;
            }
            unint64_t v119 = *(void *)&v143[8 * v120];
            if (!v119)
            {
              uint64_t v120 = v146 + 6;
              if (v146 + 6 >= v142) {
                goto LABEL_97;
              }
              unint64_t v119 = *(void *)&v143[8 * v120];
              if (!v119)
              {
                uint64_t v120 = v146 + 7;
                if (v146 + 7 >= v142) {
                  goto LABEL_97;
                }
                unint64_t v119 = *(void *)&v143[8 * v120];
                if (!v119) {
                  break;
                }
              }
            }
          }
        }
      }
    }

        uint64_t v185 = HIBYTE(v179) & 0xF;
        if ((v179 & 0x2000000000000000LL) == 0) {
          uint64_t v185 = v178 & 0xFFFFFFFFFFFFLL;
        }
        if (v185)
        {
          uint64_t v304 = v178;
          v305 = v179;
          MEMORY[0x1895F8858](v184);
          BOOL v270 = (uint64_t)&v304;
          LOBYTE(v271) = 64;
          swift_bridgeObjectRetain();
          unint64_t v186 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v269,  v178,  v179);
          if (v187)
          {
            uint64_t v178 = (uint64_t)v186;
            unint64_t v188 = v187;
            swift_bridgeObjectRelease_n();
          }

          else
          {
            unint64_t v194 = v304;
            id v195 = v305;
            swift_bridgeObjectRetain();
            uint64_t v178 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v194, v195, 0x40u);
            unint64_t v188 = v196;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }

          uint64_t v179 = v188;
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v178 = 0LL;
          uint64_t v179 = 0xE000000000000000LL;
        }

        goto LABEL_144;
      }

      if ((v179 & 0x2000000000000000LL) != 0)
      {
        uint64_t v183 = HIBYTE(v179) & 0xF;
        uint64_t v304 = v178;
        v305 = v179 & 0xFFFFFFFFFFFFFFLL;
        Swift::String v182 = (char *)&v304;
      }

      else if ((v178 & 0x1000000000000000LL) != 0)
      {
        Swift::String v182 = (char *)((v179 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v183 = v178 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        Swift::String v182 = (char *)_StringObject.sharedUTF8.getter();
      }

      uint64_t v184 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v182,  v183,  0x40u,  0);
      if ((v184 & 1) == 0) {
        goto LABEL_131;
      }
    }

    swift_bridgeObjectRelease();
  }

  LODWORD(v11) = v133;
  if (v124 >> 14 < (unint64_t)String.index(after:)() >> 14)
  {
LABEL_143:
    __break(1u);
LABEL_144:
    LODWORD(v121) = 0;
    uint64_t v120 = 3451LL;
    unint64_t v119 = 2;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_145:
    unint64_t v135 = 0LL;
    id v136 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    unint64_t v135 = (id)0xD000000000000014LL;
    id v136 = 0x80000001839C9190LL;
    uint64_t v134 = (int)v11;
    v117._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v117);
    swift_bridgeObjectRelease();
    LODWORD(v122) = 0;
    char v121 = 73LL;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  swift_bridgeObjectRetain();
  String.index(after:)();
  unint64_t v110 = String.subscript.getter();
  char v112 = v111;
  int v114 = v113;
  uint64_t v16 = v115;
  swift_bridgeObjectRelease();
  unint64_t v15 = MEMORY[0x186E1B610](v110, v112, v114, v16);
  uint64_t v25 = v116;
LABEL_134:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v23 = v125;
  if ((v25 & 0x1000000000000000LL) != 0)
  {
LABEL_41:
    uint64_t isStackAllocationSafe = String.UTF8View._foreignCount()();
    goto LABEL_49;
  }

    swift_bridgeObjectRelease();
  }

  LODWORD(v11) = v133;
  if (v124 >> 14 < (unint64_t)String.index(after:)() >> 14)
  {
LABEL_143:
    __break(1u);
LABEL_144:
    LODWORD(v121) = 0;
    uint64_t v120 = 3451LL;
    unint64_t v119 = 2;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_145:
    unint64_t v135 = 0LL;
    id v136 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    unint64_t v135 = (id)0xD000000000000014LL;
    id v136 = 0x80000001839C9190LL;
    uint64_t v134 = (int)v11;
    v117._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v117);
    swift_bridgeObjectRelease();
    LODWORD(v122) = 0;
    char v121 = 73LL;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  swift_bridgeObjectRetain();
  String.index(after:)();
  unint64_t v110 = String.subscript.getter();
  char v112 = v111;
  int v114 = v113;
  uint64_t v16 = v115;
  swift_bridgeObjectRelease();
  unint64_t v15 = MEMORY[0x186E1B610](v110, v112, v114, v16);
  uint64_t v25 = v116;
LABEL_134:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v23 = v125;
  if ((v25 & 0x1000000000000000LL) != 0)
  {
LABEL_41:
    uint64_t isStackAllocationSafe = String.UTF8View._foreignCount()();
    goto LABEL_49;
  }

            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }

  __break(1u);
LABEL_132:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_133:

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

          v178[0] = v94;
          lazy protocol witness table accessor for type Int and conformance Int();
          char v74 = String.init<A>(_:radix:uppercase:)();
          uint64_t v76 = v159;
          goto LABEL_132;
        }

      swift_release();
      continue;
    }

    break;
  }

  __break(1u);
LABEL_284:
  __break(1u);
LABEL_285:
  __break(1u);
LABEL_286:
  __break(1u);
LABEL_287:
  __break(1u);
LABEL_288:
  swift_once();
LABEL_81:
  LODWORD(v680) = v683 != 0;
  LODWORD(v674) = static AttributedString.MarkdownParsingOptions.localizedAttributedString;
  LODWORD(v675) = byte_18C5D63E1;
  LODWORD(v677) = byte_18C5D63E2;
  uint64_t v126 = qword_18C5D63E8;
  char v125 = unk_18C5D63F0;
  if (!v114)
  {
    swift_bridgeObjectRetain();
    uint64_t v141 = v659;
    if (v125) {
      goto LABEL_104;
    }
LABEL_90:
    uint64_t v142 = objc_msgSend(v141, sel_preferredLocalizations);
    if (v142)
    {
      uint64_t v143 = v142;
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      uint64_t v65 = (unint64_t)v114;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      unint64_t v144 = swift_dynamicCastClass();
      if (v144)
      {
        unint64_t v145 = (void *)v144;

        if (!v145[2]) {
          goto LABEL_100;
        }
LABEL_98:
        uint64_t v126 = v145[4];
        char v125 = v145[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }

      swift_unknownObjectRelease();
      objc_msgSend(v143, sel_copy);
      unint64_t v146 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v145 = (void *)specialized _arrayForceCast<A, B>(_:)(v146);

      swift_bridgeObjectRelease();
      if (v145[2]) {
        goto LABEL_98;
      }
    }

    else
    {
      uint64_t v65 = (unint64_t)v114;
      unint64_t v145 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_98;
      }
    }

                    scoreOrthographyForCharacters((unint64_t)&v43[v72], v73, v74, (uint64_t)v120);
                    char v41 = v72 - v42 + v73;
LABEL_133:
                    -[CFStringRef _analyzeTokensInWordRange:paragraphRange:]( v119,  "_analyzeTokensInWordRange:paragraphRange:",  v72,  v73,  v117,  v118,  v104);
                    uint64_t v72 = v77;
                    if (v77 >= v71)
                    {
                      char v44 = v111;
                      break;
                    }
                  }
                }

                uint64_t v40 = v48;
              }

              uint64_t v45 = tokenizer;
            }

            while (CFStringTokenizerAdvanceToNextToken(tokenizer));
            if (v41)
            {
              uint64_t v83 = v116;
              location = v117;
              if (v115 > v42)
              {
                __int128 v6 = v106;
                if (!v116) {
                  uint64_t v83 = langid_create();
                }
                int v114 = langid_consume_string();
                goto LABEL_148;
              }
            }

            else
            {
              uint64_t v83 = v116;
              location = v117;
            }

            __int128 v6 = v106;
LABEL_148:
            uint64_t v84 = v110;
            if (v83)
            {
              char v85 = numberOfLanguageCodes_numCodes;
              if (numberOfLanguageCodes_numCodes < 0)
              {
                char v85 = langid_numlanguages();
                numberOfLanguageCodes_numCodes = v85;
              }

              __int128 v86 = (unsigned __int8 *)orthoIndexesForLanguageCodes();
              __int128 v87 = (unsigned int *)v114;
              if (v86 && v85 >= 1)
              {
                __int128 v88 = v85;
                do
                {
                  __int128 v90 = *v86++;
                  __int128 v89 = v90;
                  if (v90) {
                    v120[v89] += *v87;
                  }
                  ++v87;
                  --v88;
                }

                while (v88);
              }

              langid_dispose();
            }

            goto LABEL_158;
          }
        }

        return 0LL;
      }

      uint64_t v18 = v20;
      if (v20) {
        goto LABEL_17;
      }
    }

void *_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5Tf4xnn_n( void *result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void *(*a6)(void *__return_ptr, void, void))
{
  void *(*v16)(void *__return_ptr, void, void);
  unint64_t v17;
  unint64_t v18;
  void *(*v19)(void *__return_ptr, void, void);
  void *(*v20)(void *__return_ptr, void, void);
  unint64_t v21;
  void *(*v22)(void *__return_ptr, void, void);
  void *v23;
  char *v24;
  void *(*v25)(void *__return_ptr, void, void);
  uint64_t v26;
  uint64_t v27;
  unint64_t v10 = a2;
  unint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4LL << v12)
  {
    uint64_t v27 = v6;
    uint64_t v16 = a6;
    uint64_t result = (void *)_StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a6 = v16;
    a2 = (unint64_t)result;
    if ((a5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      unint64_t v15 = (char *)(a2 >> 16);
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  uint64_t v25 = a6;
  uint64_t v27 = v6;
  unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v17 = HIBYTE(a5) & 0xF;
  }
  if (v17 < a2 >> 16) {
    goto LABEL_33;
  }
  uint64_t result = (void *)String.UTF8View._foreignDistance(from:to:)();
  unint64_t v15 = (char *)result;
  uint64_t v6 = v27;
  a6 = v25;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t v18 = v10;
    unint64_t v19 = a6;
    uint64_t result = (void *)_StringGuts._slowEnsureMatchingEncoding(_:)(v18, a4, a5);
    a6 = v19;
    unint64_t v10 = (unint64_t)result;
  }

LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t v20 = a6;
    uint64_t result = (void *)_StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a6 = v20;
    a3 = (unint64_t)result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (void *)((a3 >> 16) - (v10 >> 16));
    goto LABEL_21;
  }

  unint64_t v21 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    unint64_t v21 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v21 < v10 >> 16) {
    goto LABEL_31;
  }
  if (v21 < a3 >> 16)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }

  char v22 = a6;
  uint64_t result = (void *)String.UTF8View._foreignDistance(from:to:)();
  a6 = v22;
LABEL_21:
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_30;
  }

  char v23 = result;
  if ((uint64_t)((char *)result + (unint64_t)v15) < (uint64_t)v15)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if (v11) {
    uint64_t v24 = &v15[(void)v11];
  }
  else {
    uint64_t v24 = 0LL;
  }
  uint64_t result = a6(&v26, v24, v23);
  if (!v6) {
    return (void *)v26;
  }
  return result;
}

    if ((a9 & 1) == 0)
    {
      if ((v153 & 1) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }

    goto LABEL_11;
  }

  if ((v186 & 1) != 0) {
    goto LABEL_6;
  }
  if ((a9 & 1) != 0)
  {
    if ((a6 & 1) == 0)
    {
      char v22 = v165 >> 14;
      char v23 = a11;
      if (v165 >> 14 < v163 >> 14)
      {
        uint64_t v24 = a10 >> 14;
        if (a10 >> 14 >= a11 >> 14) {
          return 0LL;
        }
        uint64_t v25 = Substring.index(before:)();
        uint64_t v26 = Substring.index(before:)();
        char v23 = v26;
        if (v22 < v25 >> 14)
        {
          if (v24 >= v26 >> 14) {
            return 0LL;
          }
          while (1)
          {
            uint64_t v27 = Substring.index(before:)();
            char v23 = Substring.index(before:)();
            if (v22 >= v27 >> 14) {
              break;
            }
            uint64_t result = 0LL;
            if (v24 >= v23 >> 14) {
              return result;
            }
          }
        }

        unint64_t v15 = v159;
      }

      uint64_t v152 = 0;
      if ((v153 & 1) != 0) {
        unint64_t v21 = v23;
      }
      else {
        unint64_t v21 = v15;
      }
      uint64_t v20 = v23;
      goto LABEL_37;
    }

      rawValue = v5._rawValue;
      uint64_t v25 = HIWORD(v3);
      uint64_t v27 = v171;
      uint64_t v26 = v172;
      LOWORD(v178) = v172;
      WORD1(v178) = v171;
      WORD2(v178) = v4;
      uint64_t v28 = v169;
      WORD3(v178) = v169;
      WORD4(v178) = v6;
      WORD5(v178) = (_WORD)v7;
      HIDWORD(v178) = v3;
      if (!_So9NSDecimala__length_getter(&rawValue))
      {
        rawValue = v5._rawValue;
        LOWORD(v178) = v26;
        WORD1(v178) = v27;
        WORD2(v178) = v4;
        WORD3(v178) = v28;
        WORD4(v178) = v6;
        WORD5(v178) = (_WORD)v7;
        HIDWORD(v178) = v3;
        if (_So9NSDecimala__isNegative_getter(&rawValue))
        {
          id v111 = 5136718LL;
          char v112 = 0xE300000000000000LL;
LABEL_127:
          unint64_t v150 = type metadata accessor for NSDecimal.FormatStyle.Currency;
          Swift::Int v151 = v166;
LABEL_140:
          outlined destroy of ICUNumberFormatter.Signature(v151, v150);
          uint64_t v160 = v111;
          unint64_t v161 = (void *)v112;
          goto LABEL_143;
        }
      }

      rawValue = v5._rawValue;
      LOWORD(v178) = v26;
      WORD1(v178) = v27;
      WORD2(v178) = v4;
      WORD3(v178) = v28;
      WORD4(v178) = v6;
      WORD5(v178) = (_WORD)v7;
      HIDWORD(v178) = v3;
      if (!_So9NSDecimala__length_getter(&rawValue))
      {
        char v112 = 0xE100000000000000LL;
        id v111 = 48LL;
        goto LABEL_127;
      }

      *(void *)unint64_t v173 = 0LL;
      *(void *)&v173[8] = 0xE000000000000000LL;
      rawValue = v5._rawValue;
      LOWORD(v178) = v26;
      WORD1(v178) = v27;
      WORD2(v178) = v4;
      WORD3(v178) = v28;
      WORD4(v178) = v6;
      WORD5(v178) = (_WORD)v7;
      HIDWORD(v178) = v3;
      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v26;
      *(_WORD *)&v176[6] = v27;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v28;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_DWORD *)&v176[16] = v3;
      if ((int)_So9NSDecimala__exponent_getter(v176) >= 1)
      {
        do
        {
          LODWORD(v172) = v25;
          v29._countAndFlagsBits = 48LL;
          v29._object = (void *)0xE100000000000000LL;
          String.append(_:)(v29);
          *(_DWORD *)v176 = v5._rawValue;
          *(_WORD *)&v176[4] = v26;
          *(_WORD *)&v176[6] = v27;
          *(_WORD *)&v176[8] = v4;
          *(_WORD *)&v176[10] = v28;
          *(_WORD *)&v176[12] = v6;
          *(_WORD *)&v176[14] = (_WORD)v7;
          *(_WORD *)&v176[16] = v3;
          *(_WORD *)&v176[18] = v172;
          uint64_t v30 = _So9NSDecimala__exponent_getter(v176);
          _So9NSDecimala__exponent_setter((v30 - 1), &rawValue);
          LODWORD(v5._rawValue) = rawValue;
          uint64_t v26 = (unsigned __int16)v178;
          uint64_t v27 = WORD1(v178);
          LOWORD(v4) = WORD2(v178);
          uint64_t v28 = WORD3(v178);
          LOWORD(v6) = WORD4(v178);
          LOWORD(v7) = WORD5(v178);
          LOWORD(v3) = WORD6(v178);
          uint64_t v25 = HIWORD(v178);
          *(_DWORD *)v176 = rawValue;
          *(_OWORD *)&v176[4] = v178;
        }

        while ((int)_So9NSDecimala__exponent_getter(v176) > 0);
      }

      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v26;
      *(_WORD *)&v176[6] = v27;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v28;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v25;
      if (!_So9NSDecimala__exponent_getter(v176))
      {
        _So9NSDecimala__exponent_setter(1LL, &rawValue);
        LODWORD(v5._rawValue) = rawValue;
        uint64_t v26 = (unsigned __int16)v178;
        uint64_t v27 = WORD1(v178);
        LOWORD(v4) = WORD2(v178);
        uint64_t v28 = WORD3(v178);
        LOWORD(v6) = WORD4(v178);
        LOWORD(v7) = WORD5(v178);
        LOWORD(v3) = WORD6(v178);
        LOWORD(v25) = HIWORD(v178);
      }

      *(_DWORD *)v176 = v5._rawValue;
      uint64_t v171 = v27;
      unint64_t v172 = v26;
      *(_WORD *)&v176[4] = v26;
      *(_WORD *)&v176[6] = v27;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v28;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v25;
      if (!_So9NSDecimala__length_getter(v176))
      {
        uint64_t v32 = v171;
        uint64_t v31 = v172;
LABEL_105:
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v31;
        *(_WORD *)&v176[6] = v32;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v28;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v25;
        uint64_t v116 = v31;
        uint64_t v117 = v32;
        uint64_t v118 = _So9NSDecimala__exponent_getter(v176);
        unint64_t v119 = v116;
        uint64_t v120 = v117;
        if (v118 <= 0)
        {
          *(_DWORD *)v176 = v5._rawValue;
          *(_WORD *)&v176[4] = v116;
          uint64_t v171 = v117;
          *(_WORD *)&v176[6] = v117;
          *(_WORD *)&v176[8] = v4;
          *(_WORD *)&v176[10] = v28;
          *(_WORD *)&v176[12] = v6;
          *(_WORD *)&v176[14] = (_WORD)v7;
          *(_WORD *)&v176[16] = v3;
          *(_WORD *)&v176[18] = v25;
          char v121 = _So9NSDecimala__exponent_getter(v176);
          unint64_t v172 = v116;
          __int128 v122 = v28;
          if (v121)
          {
            unint64_t v123 = v171;
            do
            {
              v124._countAndFlagsBits = 48LL;
              v124._object = (void *)0xE100000000000000LL;
              String.append(_:)(v124);
              *(_DWORD *)v176 = v5._rawValue;
              *(_WORD *)&v176[4] = v172;
              *(_WORD *)&v176[6] = v123;
              *(_WORD *)&v176[8] = v4;
              *(_WORD *)&v176[10] = v122;
              *(_WORD *)&v176[12] = v6;
              *(_WORD *)&v176[14] = (_WORD)v7;
              *(_WORD *)&v176[16] = v3;
              *(_WORD *)&v176[18] = v25;
              char v125 = _So9NSDecimala__exponent_getter(v176);
              _So9NSDecimala__exponent_setter((v125 + 1), &rawValue);
              LODWORD(v5._rawValue) = rawValue;
              unint64_t v123 = WORD1(v178);
              LOWORD(v4) = WORD2(v178);
              __int128 v122 = WORD3(v178);
              LOWORD(v6) = WORD4(v178);
              LOWORD(v7) = WORD5(v178);
              LOWORD(v3) = WORD6(v178);
              LOWORD(v25) = HIWORD(v178);
              *(_DWORD *)v176 = rawValue;
              unint64_t v172 = (unsigned __int16)v178;
              *(_OWORD *)&v176[4] = v178;
            }

            while (_So9NSDecimala__exponent_getter(v176));
          }

          else
          {
            unint64_t v123 = v171;
          }

          v146._countAndFlagsBits = 46LL;
          v146._object = (void *)0xE100000000000000LL;
          String.append(_:)(v146);
          v147._countAndFlagsBits = 48LL;
          v147._object = (void *)0xE100000000000000LL;
          String.append(_:)(v147);
          LOWORD(v28) = v122;
          unint64_t v119 = v172;
          uint64_t v120 = v123;
        }

        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v119;
        *(_WORD *)&v176[6] = v120;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v28;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v25;
        if (_So9NSDecimala__isNegative_getter(v176))
        {
          v148._countAndFlagsBits = 45LL;
          v148._object = (void *)0xE100000000000000LL;
          String.append(_:)(v148);
        }

        *(void *)v176 = *(void *)v173;
        *(void *)&v176[8] = *(void *)&v173[8];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
        lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
        id v111 = String.init<A>(_:)();
        char v112 = v149;
        goto LABEL_127;
      }

      uint64_t v32 = v171;
      uint64_t v31 = v172;
      while (1)
      {
        uint64_t v171 = v32;
        unint64_t v172 = v31;
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v31;
        *(_WORD *)&v176[6] = v32;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v28;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v25;
        if (!_So9NSDecimala__exponent_getter(v176))
        {
          v169 = v28;
          v33._countAndFlagsBits = 46LL;
          v33._object = (void *)0xE100000000000000LL;
          String.append(_:)(v33);
          LOWORD(v28) = v169;
        }

        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v172;
        *(_WORD *)&v176[6] = v171;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v28;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v25;
        char v34 = _So9NSDecimala__exponent_getter(v176);
        _So9NSDecimala__exponent_setter((v34 + 1), &rawValue);
        uint64_t v35 = rawValue;
        uint64_t v36 = (char *)(unsigned __int16)v178;
        LOWORD(v6) = WORD1(v178);
        uint64_t v171 = WORD3(v178);
        unint64_t v172 = WORD2(v178);
        v169 = WORD4(v178);
        Swift::Int v167 = WORD5(v178);
        LODWORD(v168) = WORD6(v178);
        LODWORD(v165) = HIWORD(v178);
        NSDecimal.asVariableLengthInteger()( rawValue | ((unint64_t)(unsigned __int16)v178 << 32) | ((unint64_t)WORD1(v178) << 48),  WORD2(v178) | ((unint64_t)WORD3(v178) << 16) | ((unint64_t)WORD4(v178) << 32) | ((unint64_t)WORD5(v178) << 48),  WORD6(v178) | (HIWORD(v178) << 16));
        uint64_t v38 = v37;
        __int128 v4 = *(void *)(v37 + 16);
        if (!v4) {
          break;
        }
        unint64_t v163 = v36;
        unint64_t v164 = v35;
        v5._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        __int128 v7 = (char *)v5._rawValue + 30;
        *((void *)v5._rawValue + 2) = v4;
        uint64_t v24 = (void *)(2 * v4);
        bzero((char *)v5._rawValue + 32, 2 * v4);
        uint64_t v39 = *(unsigned __int16 *)(2 * v4 + v38 + 30);
        LOWORD(v40) = *(_WORD *)(2 * v4 + v38 + 30) / 0xAu;
        while (1)
        {
          *(_WORD *)&v7[2 * v4] = v40;
          __int128 v3 = v39 % 0xA;
          if (v4 == 1) {
            break;
          }
          uint64_t v39 = *(unsigned __int16 *)(v38 + 28 + 2 * v4) | (v3 << 16);
          uint64_t v40 = v39 / 0xA;
          char v41 = v4 - 2;
          --v4;
          if (v41 >= *((void *)v5._rawValue + 2))
          {
            __break(1u);
            goto LABEL_96;
          }
        }

        LOWORD(v36) = (_WORD)v163;
        LODWORD(v35) = v164;
        uint64_t v42 = *((void *)v5._rawValue + 2);
        if (v42) {
          goto LABEL_24;
        }
LABEL_27:
        swift_bridgeObjectRelease();
        *(_DWORD *)v176 = v35;
        *(_WORD *)&v176[4] = (_WORD)v36;
        *(_WORD *)&v176[6] = v6;
        *(_WORD *)&v176[8] = v172;
        *(_WORD *)&v176[10] = v171;
        *(_WORD *)&v176[12] = v169;
        *(_WORD *)&v176[14] = v167;
        *(_WORD *)&v176[16] = (_WORD)v168;
        *(_WORD *)&v176[18] = v165;
        NSDecimal.copyVariableLengthInteger(_:)(v5);
        unint64_t v170 = v44;
        if (v44) {
          goto LABEL_141;
        }
        uint64_t v45 = *((void *)v5._rawValue + 2);
        swift_bridgeObjectRelease();
        if (HIDWORD(v45)) {
          goto LABEL_142;
        }
        _So9NSDecimala__length_setter(v45, v176);
        rawValue = *(_DWORD *)v176;
        uint64_t v178 = *(_OWORD *)&v176[4];
        *(void *)v176 = v3 | 0x30;
        v46._countAndFlagsBits = MEMORY[0x186E1B6AC](v176, 1LL);
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        LODWORD(v5._rawValue) = rawValue;
        uint64_t v171 = WORD1(v178);
        unint64_t v172 = (unsigned __int16)v178;
        LOWORD(v4) = WORD2(v178);
        uint64_t v28 = WORD3(v178);
        LOWORD(v6) = WORD4(v178);
        LOWORD(v7) = WORD5(v178);
        LOWORD(v3) = WORD6(v178);
        LOWORD(v25) = HIWORD(v178);
        *(_DWORD *)v176 = rawValue;
        *(_OWORD *)&v176[4] = v178;
        uint64_t v47 = _So9NSDecimala__length_getter(v176);
        uint64_t v32 = v171;
        uint64_t v31 = v172;
        if (!v47) {
          goto LABEL_105;
        }
      }

      __int128 v3 = 0;
      v5._rawValue = (void *)MEMORY[0x18961AFE8];
      uint64_t v42 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v42) {
        goto LABEL_27;
      }
LABEL_24:
      if (!*((_WORD *)v5._rawValue + v42 + 15))
      {
        do
        {
          *((void *)v5._rawValue + 2) = v42 - 1;
          if (v42 == 1) {
            break;
          }
        }

        while (!*((unsigned __int16 *)v5._rawValue + v42-- + 14));
      }

      goto LABEL_27;
    }

    uint64_t v84 = v167;
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v18,  v167,  type metadata accessor for NSDecimal.FormatStyle.Percent);
    type metadata accessor for ICUPercentNumberFormatter();
    char v85 = static ICUPercentNumberFormatter.create(for:)(v84);
    if (v85)
    {
      __int128 v86 = *(void *)(v85 + 16);
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      __int128 v87 = v170;
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v86, (uint64_t)v5._rawValue, v4, v3);
      if (v87)
      {

        swift_release();
        unint64_t v170 = 0LL;
      }

      else
      {
        unint64_t v170 = 0LL;
        id v111 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
        char v112 = v115;
        swift_release();
        swift_release();
        if (v112) {
          goto LABEL_139;
        }
      }
    }

    rawValue = v5._rawValue;
    __int128 v88 = HIWORD(v3);
    __int128 v90 = v171;
    __int128 v89 = v172;
    LOWORD(v178) = v172;
    WORD1(v178) = v171;
    WORD2(v178) = v4;
    __int128 v91 = v169;
    WORD3(v178) = v169;
    WORD4(v178) = v6;
    WORD5(v178) = (_WORD)v7;
    HIDWORD(v178) = v3;
    if (!_So9NSDecimala__length_getter(&rawValue))
    {
      rawValue = v5._rawValue;
      LOWORD(v178) = v89;
      WORD1(v178) = v90;
      WORD2(v178) = v4;
      WORD3(v178) = v91;
      WORD4(v178) = v6;
      WORD5(v178) = (_WORD)v7;
      HIDWORD(v178) = v3;
      if (_So9NSDecimala__isNegative_getter(&rawValue))
      {
        id v111 = 5136718LL;
        char v112 = 0xE300000000000000LL;
LABEL_139:
        unint64_t v150 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        Swift::Int v151 = v167;
        goto LABEL_140;
      }
    }

    rawValue = v5._rawValue;
    LOWORD(v178) = v89;
    WORD1(v178) = v90;
    WORD2(v178) = v4;
    WORD3(v178) = v91;
    WORD4(v178) = v6;
    WORD5(v178) = (_WORD)v7;
    HIDWORD(v178) = v3;
    if (!_So9NSDecimala__length_getter(&rawValue))
    {
      char v112 = 0xE100000000000000LL;
      id v111 = 48LL;
      goto LABEL_139;
    }

    *(void *)unint64_t v173 = 0LL;
    *(void *)&v173[8] = 0xE000000000000000LL;
    rawValue = v5._rawValue;
    LOWORD(v178) = v89;
    WORD1(v178) = v90;
    WORD2(v178) = v4;
    WORD3(v178) = v91;
    WORD4(v178) = v6;
    WORD5(v178) = (_WORD)v7;
    HIDWORD(v178) = v3;
    *(_DWORD *)v176 = v5._rawValue;
    *(_WORD *)&v176[4] = v89;
    *(_WORD *)&v176[6] = v90;
    *(_WORD *)&v176[8] = v4;
    *(_WORD *)&v176[10] = v91;
    *(_WORD *)&v176[12] = v6;
    *(_WORD *)&v176[14] = (_WORD)v7;
    *(_DWORD *)&v176[16] = v3;
    if ((int)_So9NSDecimala__exponent_getter(v176) >= 1)
    {
      do
      {
        LODWORD(v172) = v88;
        v92._countAndFlagsBits = 48LL;
        v92._object = (void *)0xE100000000000000LL;
        String.append(_:)(v92);
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v89;
        *(_WORD *)&v176[6] = v90;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v91;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v172;
        __int128 v93 = _So9NSDecimala__exponent_getter(v176);
        _So9NSDecimala__exponent_setter((v93 - 1), &rawValue);
        LODWORD(v5._rawValue) = rawValue;
        __int128 v89 = (unsigned __int16)v178;
        __int128 v90 = WORD1(v178);
        LOWORD(v4) = WORD2(v178);
        __int128 v91 = WORD3(v178);
        LOWORD(v6) = WORD4(v178);
        LOWORD(v7) = WORD5(v178);
        LOWORD(v3) = WORD6(v178);
        __int128 v88 = HIWORD(v178);
        *(_DWORD *)v176 = rawValue;
        *(_OWORD *)&v176[4] = v178;
      }

      while ((int)_So9NSDecimala__exponent_getter(v176) > 0);
    }

    *(_DWORD *)v176 = v5._rawValue;
    *(_WORD *)&v176[4] = v89;
    *(_WORD *)&v176[6] = v90;
    *(_WORD *)&v176[8] = v4;
    *(_WORD *)&v176[10] = v91;
    *(_WORD *)&v176[12] = v6;
    *(_WORD *)&v176[14] = (_WORD)v7;
    *(_WORD *)&v176[16] = v3;
    *(_WORD *)&v176[18] = v88;
    if (!_So9NSDecimala__exponent_getter(v176))
    {
      _So9NSDecimala__exponent_setter(1LL, &rawValue);
      LODWORD(v5._rawValue) = rawValue;
      __int128 v89 = (unsigned __int16)v178;
      __int128 v90 = WORD1(v178);
      LOWORD(v4) = WORD2(v178);
      __int128 v91 = WORD3(v178);
      LOWORD(v6) = WORD4(v178);
      LOWORD(v7) = WORD5(v178);
      LOWORD(v3) = WORD6(v178);
      LOWORD(v88) = HIWORD(v178);
    }

    *(_DWORD *)v176 = v5._rawValue;
    uint64_t v171 = v90;
    unint64_t v172 = v89;
    *(_WORD *)&v176[4] = v89;
    *(_WORD *)&v176[6] = v90;
    *(_WORD *)&v176[8] = v4;
    *(_WORD *)&v176[10] = v91;
    *(_WORD *)&v176[12] = v6;
    *(_WORD *)&v176[14] = (_WORD)v7;
    *(_WORD *)&v176[16] = v3;
    *(_WORD *)&v176[18] = v88;
    if (!_So9NSDecimala__length_getter(v176))
    {
      __int128 v95 = v171;
      __int128 v94 = v172;
LABEL_117:
      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v94;
      *(_WORD *)&v176[6] = v95;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v91;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v88;
      id v136 = v94;
      id v137 = v95;
      uint64_t v138 = _So9NSDecimala__exponent_getter(v176);
      id v139 = v136;
      uint64_t v140 = v137;
      if (v138 <= 0)
      {
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v136;
        uint64_t v171 = v137;
        *(_WORD *)&v176[6] = v137;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v91;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v88;
        uint64_t v141 = _So9NSDecimala__exponent_getter(v176);
        unint64_t v172 = v136;
        uint64_t v142 = v91;
        if (v141)
        {
          uint64_t v143 = v171;
          do
          {
            v144._countAndFlagsBits = 48LL;
            v144._object = (void *)0xE100000000000000LL;
            String.append(_:)(v144);
            *(_DWORD *)v176 = v5._rawValue;
            *(_WORD *)&v176[4] = v172;
            *(_WORD *)&v176[6] = v143;
            *(_WORD *)&v176[8] = v4;
            *(_WORD *)&v176[10] = v142;
            *(_WORD *)&v176[12] = v6;
            *(_WORD *)&v176[14] = (_WORD)v7;
            *(_WORD *)&v176[16] = v3;
            *(_WORD *)&v176[18] = v88;
            unint64_t v145 = _So9NSDecimala__exponent_getter(v176);
            _So9NSDecimala__exponent_setter((v145 + 1), &rawValue);
            LODWORD(v5._rawValue) = rawValue;
            uint64_t v143 = WORD1(v178);
            LOWORD(v4) = WORD2(v178);
            uint64_t v142 = WORD3(v178);
            LOWORD(v6) = WORD4(v178);
            LOWORD(v7) = WORD5(v178);
            LOWORD(v3) = WORD6(v178);
            LOWORD(v88) = HIWORD(v178);
            *(_DWORD *)v176 = rawValue;
            unint64_t v172 = (unsigned __int16)v178;
            *(_OWORD *)&v176[4] = v178;
          }

          while (_So9NSDecimala__exponent_getter(v176));
        }

        else
        {
          uint64_t v143 = v171;
        }

        v156._countAndFlagsBits = 46LL;
        v156._object = (void *)0xE100000000000000LL;
        String.append(_:)(v156);
        v157._countAndFlagsBits = 48LL;
        v157._object = (void *)0xE100000000000000LL;
        String.append(_:)(v157);
        LOWORD(v91) = v142;
        id v139 = v172;
        uint64_t v140 = v143;
      }

      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v139;
      *(_WORD *)&v176[6] = v140;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v91;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v88;
      if (_So9NSDecimala__isNegative_getter(v176))
      {
        v158._countAndFlagsBits = 45LL;
        v158._object = (void *)0xE100000000000000LL;
        String.append(_:)(v158);
      }

      *(void *)v176 = *(void *)v173;
      *(void *)&v176[8] = *(void *)&v173[8];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
      id v111 = String.init<A>(_:)();
      char v112 = v159;
      goto LABEL_139;
    }

    __int128 v95 = v171;
    __int128 v94 = v172;
    while (1)
    {
      uint64_t v171 = v95;
      unint64_t v172 = v94;
      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v94;
      *(_WORD *)&v176[6] = v95;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v91;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v88;
      if (!_So9NSDecimala__exponent_getter(v176))
      {
        v169 = v91;
        v96._countAndFlagsBits = 46LL;
        v96._object = (void *)0xE100000000000000LL;
        String.append(_:)(v96);
        LOWORD(v91) = v169;
      }

      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v172;
      *(_WORD *)&v176[6] = v171;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v91;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v88;
      __int128 v97 = _So9NSDecimala__exponent_getter(v176);
      _So9NSDecimala__exponent_setter((v97 + 1), &rawValue);
      __int128 v98 = rawValue;
      __int128 v99 = (char *)(unsigned __int16)v178;
      LOWORD(v6) = WORD1(v178);
      uint64_t v171 = WORD3(v178);
      unint64_t v172 = WORD2(v178);
      v169 = WORD4(v178);
      unint64_t v166 = WORD5(v178);
      LODWORD(v168) = WORD6(v178);
      LODWORD(v165) = HIWORD(v178);
      NSDecimal.asVariableLengthInteger()( rawValue | ((unint64_t)(unsigned __int16)v178 << 32) | ((unint64_t)WORD1(v178) << 48),  WORD2(v178) | ((unint64_t)WORD3(v178) << 16) | ((unint64_t)WORD4(v178) << 32) | ((unint64_t)WORD5(v178) << 48),  WORD6(v178) | (HIWORD(v178) << 16));
      __int128 v101 = v100;
      __int128 v4 = *(void *)(v100 + 16);
      if (!v4) {
        break;
      }
      unint64_t v163 = v99;
      unint64_t v164 = v98;
      v5._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      __int128 v7 = (char *)v5._rawValue + 30;
      *((void *)v5._rawValue + 2) = v4;
      uint64_t v24 = (void *)(2 * v4);
      bzero((char *)v5._rawValue + 32, 2 * v4);
      __int128 v102 = *(unsigned __int16 *)(2 * v4 + v101 + 30);
      LOWORD(v103) = *(_WORD *)(2 * v4 + v101 + 30) / 0xAu;
      while (1)
      {
        *(_WORD *)&v7[2 * v4] = v103;
        __int128 v3 = v102 % 0xA;
        if (v4 == 1) {
          break;
        }
        __int128 v102 = *(unsigned __int16 *)(v101 + 28 + 2 * v4) | (v3 << 16);
        id v103 = v102 / 0xA;
        uint64_t v104 = v4 - 2;
        --v4;
        if (v104 >= *((void *)v5._rawValue + 2)) {
          goto LABEL_97;
        }
      }

      LOWORD(v99) = (_WORD)v163;
      LODWORD(v98) = v164;
      id v105 = *((void *)v5._rawValue + 2);
      if (v105) {
        goto LABEL_80;
      }
LABEL_83:
      swift_bridgeObjectRelease();
      *(_DWORD *)v176 = v98;
      *(_WORD *)&v176[4] = (_WORD)v99;
      *(_WORD *)&v176[6] = v6;
      *(_WORD *)&v176[8] = v172;
      *(_WORD *)&v176[10] = v171;
      *(_WORD *)&v176[12] = v169;
      *(_WORD *)&v176[14] = v166;
      *(_WORD *)&v176[16] = (_WORD)v168;
      *(_WORD *)&v176[18] = v165;
      NSDecimal.copyVariableLengthInteger(_:)(v5);
      unint64_t v170 = v107;
      if (v107) {
        goto LABEL_141;
      }
      uint64_t v108 = *((void *)v5._rawValue + 2);
      swift_bridgeObjectRelease();
      if (HIDWORD(v108)) {
        goto LABEL_142;
      }
      _So9NSDecimala__length_setter(v108, v176);
      rawValue = *(_DWORD *)v176;
      uint64_t v178 = *(_OWORD *)&v176[4];
      *(void *)v176 = v3 | 0x30;
      v109._countAndFlagsBits = MEMORY[0x186E1B6AC](v176, 1LL);
      String.append(_:)(v109);
      swift_bridgeObjectRelease();
      LODWORD(v5._rawValue) = rawValue;
      uint64_t v171 = WORD1(v178);
      unint64_t v172 = (unsigned __int16)v178;
      LOWORD(v4) = WORD2(v178);
      __int128 v91 = WORD3(v178);
      LOWORD(v6) = WORD4(v178);
      LOWORD(v7) = WORD5(v178);
      LOWORD(v3) = WORD6(v178);
      LOWORD(v88) = HIWORD(v178);
      *(_DWORD *)v176 = rawValue;
      *(_OWORD *)&v176[4] = v178;
      unint64_t v110 = _So9NSDecimala__length_getter(v176);
      __int128 v95 = v171;
      __int128 v94 = v172;
      if (!v110) {
        goto LABEL_117;
      }
    }

    __int128 v3 = 0;
    v5._rawValue = (void *)MEMORY[0x18961AFE8];
    id v105 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    if (!v105) {
      goto LABEL_83;
    }
LABEL_80:
    if (!*((_WORD *)v5._rawValue + v105 + 15))
    {
      do
      {
        *((void *)v5._rawValue + 2) = v105 - 1;
        if (v105 == 1) {
          break;
        }
      }

      while (!*((unsigned __int16 *)v5._rawValue + v105-- + 14));
    }

    goto LABEL_83;
  }

  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v18,  (uint64_t)v15,  type metadata accessor for NSDecimal.FormatStyle);
  uint64_t v168 = &v15[*(int *)(v13 + 20)];
  uint64_t v48 = *((void *)v15 + 1);
  unint64_t v163 = v15;
  ObjectType = swift_getObjectType();
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t))(v48 + 472);
  swift_unknownObjectRetain();
  uint64_t v51 = v50(ObjectType, v48);
  unint64_t v166 = v52;
  Swift::Int v167 = v51;
  swift_unknownObjectRelease();
  uint64_t v53 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v48 + 464);
  swift_unknownObjectRetain();
  v53(v176, ObjectType, v48);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v176,  (uint64_t)&rawValue,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v54 = v165;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v168,  v165,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v55 = v164;
  uint64_t v56 = (void *)(v54 + *(int *)(v164 + 20));
  char v57 = v166;
  *uint64_t v56 = v167;
  v56[1] = v57;
  outlined init with take of LocalePreferences?( (uint64_t)&rawValue,  v54 + *(int *)(v55 + 24),  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v58 = specialized static ICUNumberFormatter._create(with:)(v54);
  outlined destroy of ICUNumberFormatter.Signature(v54, type metadata accessor for ICUNumberFormatter.Signature);
  if (v58)
  {
    uint64_t v59 = *(void *)(v58 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v60 = v170;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v59, (uint64_t)v5._rawValue, v4, v3);
    if (v60)
    {

      swift_release();
      unint64_t v170 = 0LL;
    }

    else
    {
      unint64_t v170 = 0LL;
      id v111 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
      char v112 = v114;
      swift_release();
      swift_release();
      if (v112) {
        goto LABEL_133;
      }
    }
  }

  *(_DWORD *)v176 = v5._rawValue;
  uint64_t v61 = HIWORD(v3);
  uint64_t v63 = v171;
  uint64_t v62 = v172;
  *(_WORD *)&v176[4] = v172;
  *(_WORD *)&v176[6] = v171;
  *(_WORD *)&v176[8] = v4;
  uint64_t v64 = v169;
  *(_WORD *)&v176[10] = v169;
  *(_WORD *)&v176[12] = v6;
  *(_WORD *)&v176[14] = (_WORD)v7;
  *(_DWORD *)&v176[16] = v3;
  if (!_So9NSDecimala__length_getter(v176))
  {
    *(_DWORD *)v176 = v5._rawValue;
    *(_WORD *)&v176[4] = v62;
    *(_WORD *)&v176[6] = v63;
    *(_WORD *)&v176[8] = v4;
    *(_WORD *)&v176[10] = v64;
    *(_WORD *)&v176[12] = v6;
    *(_WORD *)&v176[14] = (_WORD)v7;
    *(_DWORD *)&v176[16] = v3;
    if (_So9NSDecimala__isNegative_getter(v176))
    {
      id v111 = 5136718LL;
      char v112 = 0xE300000000000000LL;
LABEL_133:
      Swift::Int v151 = (uint64_t)v163;
      unint64_t v150 = type metadata accessor for NSDecimal.FormatStyle;
      goto LABEL_140;
    }
  }

  *(_DWORD *)v176 = v5._rawValue;
  *(_WORD *)&v176[4] = v62;
  *(_WORD *)&v176[6] = v63;
  *(_WORD *)&v176[8] = v4;
  *(_WORD *)&v176[10] = v64;
  *(_WORD *)&v176[12] = v6;
  *(_WORD *)&v176[14] = (_WORD)v7;
  *(_DWORD *)&v176[16] = v3;
  if (!_So9NSDecimala__length_getter(v176))
  {
    char v112 = 0xE100000000000000LL;
    id v111 = 48LL;
    goto LABEL_133;
  }

  unint64_t v174 = 0LL;
  unint64_t v175 = 0xE000000000000000LL;
  *(_DWORD *)v176 = v5._rawValue;
  *(_WORD *)&v176[4] = v62;
  *(_WORD *)&v176[6] = v63;
  *(_WORD *)&v176[8] = v4;
  *(_WORD *)&v176[10] = v64;
  *(_WORD *)&v176[12] = v6;
  *(_WORD *)&v176[14] = (_WORD)v7;
  *(_DWORD *)&v176[16] = v3;
  *(_DWORD *)unint64_t v173 = v5._rawValue;
  *(_WORD *)&v173[4] = v62;
  *(_WORD *)&v173[6] = v63;
  *(_WORD *)&v173[8] = v4;
  *(_WORD *)&v173[10] = v64;
  *(_WORD *)&v173[12] = v6;
  *(_WORD *)&v173[14] = (_WORD)v7;
  *(_DWORD *)&v173[16] = v3;
  if ((int)_So9NSDecimala__exponent_getter(v173) >= 1)
  {
    do
    {
      LODWORD(v172) = v61;
      v65._countAndFlagsBits = 48LL;
      v65._object = (void *)0xE100000000000000LL;
      String.append(_:)(v65);
      *(_DWORD *)unint64_t v173 = v5._rawValue;
      *(_WORD *)&v173[4] = v62;
      *(_WORD *)&v173[6] = v63;
      *(_WORD *)&v173[8] = v4;
      *(_WORD *)&v173[10] = v64;
      *(_WORD *)&v173[12] = v6;
      *(_WORD *)&v173[14] = (_WORD)v7;
      *(_WORD *)&v173[16] = v3;
      *(_WORD *)&v173[18] = v172;
      uint64_t v66 = _So9NSDecimala__exponent_getter(v173);
      _So9NSDecimala__exponent_setter((v66 - 1), v176);
      LODWORD(v5._rawValue) = *(_DWORD *)v176;
      uint64_t v62 = *(unsigned __int16 *)&v176[4];
      uint64_t v63 = *(unsigned __int16 *)&v176[6];
      LOWORD(v4) = *(_WORD *)&v176[8];
      uint64_t v64 = *(unsigned __int16 *)&v176[10];
      LOWORD(v6) = *(_WORD *)&v176[12];
      LOWORD(v7) = *(_WORD *)&v176[14];
      LOWORD(v3) = *(_WORD *)&v176[16];
      uint64_t v61 = *(unsigned __int16 *)&v176[18];
      *(_DWORD *)unint64_t v173 = *(_DWORD *)v176;
      *(_WORD *)&v173[4] = *(_WORD *)&v176[4];
      *(_WORD *)&v173[6] = *(_WORD *)&v176[6];
      *(_WORD *)&v173[8] = *(_WORD *)&v176[8];
      *(_WORD *)&v173[10] = *(_WORD *)&v176[10];
      *(_WORD *)&v173[12] = *(_WORD *)&v176[12];
      *(_WORD *)&v173[14] = *(_WORD *)&v176[14];
      *(_WORD *)&v173[16] = *(_WORD *)&v176[16];
      *(_WORD *)&v173[18] = *(_WORD *)&v176[18];
    }

    while ((int)_So9NSDecimala__exponent_getter(v173) > 0);
  }

  *(_DWORD *)unint64_t v173 = v5._rawValue;
  *(_WORD *)&v173[4] = v62;
  *(_WORD *)&v173[6] = v63;
  *(_WORD *)&v173[8] = v4;
  *(_WORD *)&v173[10] = v64;
  *(_WORD *)&v173[12] = v6;
  *(_WORD *)&v173[14] = (_WORD)v7;
  *(_WORD *)&v173[16] = v3;
  *(_WORD *)&v173[18] = v61;
  if (!_So9NSDecimala__exponent_getter(v173))
  {
    _So9NSDecimala__exponent_setter(1LL, v176);
    LODWORD(v5._rawValue) = *(_DWORD *)v176;
    uint64_t v62 = *(unsigned __int16 *)&v176[4];
    uint64_t v63 = *(unsigned __int16 *)&v176[6];
    LOWORD(v4) = *(_WORD *)&v176[8];
    uint64_t v64 = *(unsigned __int16 *)&v176[10];
    LOWORD(v6) = *(_WORD *)&v176[12];
    LOWORD(v7) = *(_WORD *)&v176[14];
    LOWORD(v3) = *(_WORD *)&v176[16];
    LOWORD(v61) = *(_WORD *)&v176[18];
  }

  *(_DWORD *)unint64_t v173 = v5._rawValue;
  uint64_t v171 = v63;
  unint64_t v172 = v62;
  *(_WORD *)&v173[4] = v62;
  *(_WORD *)&v173[6] = v63;
  *(_WORD *)&v173[8] = v4;
  *(_WORD *)&v173[10] = v64;
  *(_WORD *)&v173[12] = v6;
  *(_WORD *)&v173[14] = (_WORD)v7;
  *(_WORD *)&v173[16] = v3;
  *(_WORD *)&v173[18] = v61;
  if (!_So9NSDecimala__length_getter(v173))
  {
    char v68 = v171;
    uint64_t v67 = v172;
LABEL_111:
    *(_DWORD *)unint64_t v173 = v5._rawValue;
    *(_WORD *)&v173[4] = v67;
    *(_WORD *)&v173[6] = v68;
    *(_WORD *)&v173[8] = v4;
    *(_WORD *)&v173[10] = v64;
    *(_WORD *)&v173[12] = v6;
    *(_WORD *)&v173[14] = (_WORD)v7;
    *(_WORD *)&v173[16] = v3;
    *(_WORD *)&v173[18] = v61;
    uint64_t v126 = v67;
    uint64_t v127 = v68;
    id v128 = _So9NSDecimala__exponent_getter(v173);
    uint64_t v129 = v126;
    uint64_t v130 = v127;
    if (v128 <= 0)
    {
      *(_DWORD *)unint64_t v173 = v5._rawValue;
      *(_WORD *)&v173[4] = v126;
      uint64_t v171 = v127;
      *(_WORD *)&v173[6] = v127;
      *(_WORD *)&v173[8] = v4;
      *(_WORD *)&v173[10] = v64;
      *(_WORD *)&v173[12] = v6;
      *(_WORD *)&v173[14] = (_WORD)v7;
      *(_WORD *)&v173[16] = v3;
      *(_WORD *)&v173[18] = v61;
      uint64_t v131 = _So9NSDecimala__exponent_getter(v173);
      unint64_t v172 = v126;
      uint64_t v132 = v64;
      if (v131)
      {
        uint64_t v133 = v171;
        do
        {
          v134._countAndFlagsBits = 48LL;
          v134._object = (void *)0xE100000000000000LL;
          String.append(_:)(v134);
          *(_DWORD *)unint64_t v173 = v5._rawValue;
          *(_WORD *)&v173[4] = v172;
          *(_WORD *)&v173[6] = v133;
          *(_WORD *)&v173[8] = v4;
          *(_WORD *)&v173[10] = v132;
          *(_WORD *)&v173[12] = v6;
          *(_WORD *)&v173[14] = (_WORD)v7;
          *(_WORD *)&v173[16] = v3;
          *(_WORD *)&v173[18] = v61;
          unint64_t v135 = _So9NSDecimala__exponent_getter(v173);
          _So9NSDecimala__exponent_setter((v135 + 1), v176);
          LODWORD(v5._rawValue) = *(_DWORD *)v176;
          uint64_t v133 = *(_WORD *)&v176[6];
          LOWORD(v4) = *(_WORD *)&v176[8];
          uint64_t v132 = *(_WORD *)&v176[10];
          LOWORD(v6) = *(_WORD *)&v176[12];
          LOWORD(v7) = *(_WORD *)&v176[14];
          LOWORD(v3) = *(_WORD *)&v176[16];
          LOWORD(v61) = *(_WORD *)&v176[18];
          *(_DWORD *)unint64_t v173 = *(_DWORD *)v176;
          unint64_t v172 = *(unsigned __int16 *)&v176[4];
          *(_WORD *)&v173[4] = *(_WORD *)&v176[4];
          *(_WORD *)&v173[6] = *(_WORD *)&v176[6];
          *(_WORD *)&v173[8] = *(_WORD *)&v176[8];
          *(_WORD *)&v173[10] = *(_WORD *)&v176[10];
          *(_WORD *)&v173[12] = *(_WORD *)&v176[12];
          *(_WORD *)&v173[14] = *(_WORD *)&v176[14];
          *(_WORD *)&v173[16] = *(_WORD *)&v176[16];
          *(_WORD *)&v173[18] = *(_WORD *)&v176[18];
        }

        while (_So9NSDecimala__exponent_getter(v173));
      }

      else
      {
        uint64_t v133 = v171;
      }

      v152._countAndFlagsBits = 46LL;
      v152._object = (void *)0xE100000000000000LL;
      String.append(_:)(v152);
      v153._countAndFlagsBits = 48LL;
      v153._object = (void *)0xE100000000000000LL;
      String.append(_:)(v153);
      LOWORD(v64) = v132;
      uint64_t v129 = v172;
      uint64_t v130 = v133;
    }

    *(_DWORD *)unint64_t v173 = v5._rawValue;
    *(_WORD *)&v173[4] = v129;
    *(_WORD *)&v173[6] = v130;
    *(_WORD *)&v173[8] = v4;
    *(_WORD *)&v173[10] = v64;
    *(_WORD *)&v173[12] = v6;
    *(_WORD *)&v173[14] = (_WORD)v7;
    *(_WORD *)&v173[16] = v3;
    *(_WORD *)&v173[18] = v61;
    if (_So9NSDecimala__isNegative_getter(v173))
    {
      v154._countAndFlagsBits = 45LL;
      v154._object = (void *)0xE100000000000000LL;
      String.append(_:)(v154);
    }

    *(void *)unint64_t v173 = v174;
    *(void *)&v173[8] = v175;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
    id v111 = String.init<A>(_:)();
    char v112 = v155;
    goto LABEL_133;
  }

  char v68 = v171;
  uint64_t v67 = v172;
  while (1)
  {
    uint64_t v171 = v68;
    unint64_t v172 = v67;
    *(_DWORD *)unint64_t v173 = v5._rawValue;
    *(_WORD *)&v173[4] = v67;
    *(_WORD *)&v173[6] = v68;
    *(_WORD *)&v173[8] = v4;
    *(_WORD *)&v173[10] = v64;
    *(_WORD *)&v173[12] = v6;
    *(_WORD *)&v173[14] = (_WORD)v7;
    *(_WORD *)&v173[16] = v3;
    *(_WORD *)&v173[18] = v61;
    if (!_So9NSDecimala__exponent_getter(v173))
    {
      v169 = v64;
      v69._countAndFlagsBits = 46LL;
      v69._object = (void *)0xE100000000000000LL;
      String.append(_:)(v69);
      LOWORD(v64) = v169;
    }

    *(_DWORD *)unint64_t v173 = v5._rawValue;
    *(_WORD *)&v173[4] = v172;
    *(_WORD *)&v173[6] = v171;
    *(_WORD *)&v173[8] = v4;
    *(_WORD *)&v173[10] = v64;
    *(_WORD *)&v173[12] = v6;
    *(_WORD *)&v173[14] = (_WORD)v7;
    *(_WORD *)&v173[16] = v3;
    *(_WORD *)&v173[18] = v61;
    uint64_t v70 = _So9NSDecimala__exponent_getter(v173);
    _So9NSDecimala__exponent_setter((v70 + 1), v176);
    uint64_t v71 = *(unsigned int *)v176;
    uint64_t v72 = *(unsigned __int16 *)&v176[4];
    LOWORD(v6) = *(_WORD *)&v176[6];
    uint64_t v171 = *(unsigned __int16 *)&v176[10];
    unint64_t v172 = *(unsigned __int16 *)&v176[8];
    v169 = *(unsigned __int16 *)&v176[12];
    Swift::Int v167 = *(unsigned __int16 *)&v176[14];
    LODWORD(v168) = *(unsigned __int16 *)&v176[16];
    LODWORD(v166) = *(unsigned __int16 *)&v176[18];
    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v176 | ((unint64_t)*(unsigned __int16 *)&v176[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v176[6] << 48),  *(unsigned __int16 *)&v176[8] | ((unint64_t)*(unsigned __int16 *)&v176[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v176[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v176[14] << 48),  *(unsigned __int16 *)&v176[16] | (*(unsigned __int16 *)&v176[18] << 16));
    char v74 = v73;
    __int128 v4 = *(void *)(v73 + 16);
    if (v4)
    {
      unint64_t v164 = v72;
      uint64_t v165 = v71;
      v5._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      __int128 v7 = (char *)v5._rawValue + 30;
      *((void *)v5._rawValue + 2) = v4;
      uint64_t v24 = (void *)(2 * v4);
      bzero((char *)v5._rawValue + 32, 2 * v4);
      uint64_t v75 = *(unsigned __int16 *)(2 * v4 + v74 + 30);
      LOWORD(v76) = *(_WORD *)(2 * v4 + v74 + 30) / 0xAu;
      while (1)
      {
        *(_WORD *)&v7[2 * v4] = v76;
        __int128 v3 = v75 % 0xA;
        if (v4 == 1) {
          break;
        }
        uint64_t v75 = *(unsigned __int16 *)(v74 + 28 + 2 * v4) | (v3 << 16);
        uint64_t v76 = v75 / 0xA;
        uint64_t v77 = v4 - 2;
        --v4;
        if (v77 >= *((void *)v5._rawValue + 2))
        {
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          unint64_t v170 = v24;
          id v111 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
          char v112 = v113;
          swift_release();
          swift_release();
          if (!v112) {
            goto LABEL_6;
          }
          goto LABEL_127;
        }
      }

      LOWORD(v72) = v164;
      LODWORD(v71) = v165;
      uint64_t v78 = *((void *)v5._rawValue + 2);
      if (!v78) {
        goto LABEL_55;
      }
    }

    else
    {
      __int128 v3 = 0;
      v5._rawValue = (void *)MEMORY[0x18961AFE8];
      uint64_t v78 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v78) {
        goto LABEL_55;
      }
    }

    if (!*((_WORD *)v5._rawValue + v78 + 15))
    {
      do
      {
        *((void *)v5._rawValue + 2) = v78 - 1;
        if (v78 == 1) {
          break;
        }
      }

      while (!*((unsigned __int16 *)v5._rawValue + v78-- + 14));
    }

          __int128 v7 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }

      unint64_t v11 = v9 + 4;
      if (v11 < v21)
      {
        unint64_t v10 = *(void *)(v20 + 8 * v11);
        if (v10)
        {
          uint64_t v6 = v11;
          goto LABEL_22;
        }

        while (1)
        {
          uint64_t v6 = v11 + 1;
          if (__OFADD__(v11, 1LL)) {
            goto LABEL_32;
          }
          if (v6 >= v21) {
            break;
          }
          unint64_t v10 = *(void *)(v20 + 8 * v6);
          ++v11;
          if (v10) {
            goto LABEL_22;
          }
        }
      }
    }

      __int128 v8 = 512LL;
      goto LABEL_17;
  }

  if ((a3 & 0xC) == v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }

  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }

  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  uint64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }

  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }

  unint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unint64_t v19 = 0LL;
  }
  uint64_t v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        uint64_t v33 = a6 + 87;
        if (a6 > 10)
        {
          char v34 = a6 + 55;
        }

        else
        {
          uint64_t v33 = 97;
          char v34 = 65;
        }

        if (a6 <= 10) {
          uint64_t v35 = a6 + 48;
        }
        else {
          uint64_t v35 = 58;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            uint64_t v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                uint64_t v39 = -87;
              }

              else
              {
                uint64_t v39 = -55;
              }
            }

            else
            {
              uint64_t v39 = -48;
            }

            uint64_t v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_96;
            }
            char v41 = v38 + v39;
            uint64_t v24 = v40 + v41;
            if (__CFADD__((_DWORD)v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }

          while (v37);
LABEL_94:
          uint64_t v30 = 0;
          uint64_t v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }

        goto LABEL_95;
      }

      goto LABEL_96;
    }

    goto LABEL_103;
  }

  if (v20 != 45)
  {
    if (v18 != v15)
    {
      uint64_t v42 = a6 + 87;
      if (a6 > 10)
      {
        char v43 = a6 + 55;
      }

      else
      {
        uint64_t v42 = 97;
        char v43 = 65;
      }

      if (a6 <= 10) {
        char v44 = a6 + 48;
      }
      else {
        char v44 = 58;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        while (1)
        {
          uint64_t v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0;
              uint64_t v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v46 = -87;
            }

            else
            {
              char v46 = -55;
            }
          }

          else
          {
            char v46 = -48;
          }

          uint64_t v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_96;
          }
          uint64_t v48 = v45 + v46;
          uint64_t v24 = v47 + v48;
          if (__CFADD__((_DWORD)v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }

      goto LABEL_95;
    }

  uint64_t v20 = v9;
  unint64_t v21 = v8;
  if (LOBYTE(__dst[5])) {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v13 = __dst[4];
  }
  Calendar.dateIfEraHasYearForWeekOfYear(era:yearForWeekOfYear:)(v13, v7, (uint64_t)&v23);
  if (v5) {
    return (double *)outlined release of DateComponents((uint64_t)__dst);
  }
  unint64_t v14 = v23;
  if ((v24 & 1) != 0)
  {
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v14;
    goto LABEL_14;
  }

  if (v18)
  {
    unint64_t v19 = 12;
    if (v23 <= 1.59271755e13) {
      unint64_t v15 = v23;
    }
    else {
      unint64_t v15 = 1.59271755e13;
    }
    char v23 = fmax(v15, -2.11845067e11);
    (*(void (**)(double *__return_ptr, char *, double *, uint64_t, double))(*(void *)&v8 + 160LL))( &v20,  &v19,  &v23,  ObjectType,  COERCE_DOUBLE(*(void *)&v8));
    if ((v22 & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(void *)uint64_t v16 = 12LL;
      *(double *)(v16 + 8) = v14;
      *(_BYTE *)(v16 + 16) = 0;
      swift_willThrow();
      return (double *)outlined release of DateComponents((uint64_t)__dst);
    }

    unint64_t v17 = v21;
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v17 + -1.0 + v14;
    *(_BYTE *)(a4 + 8) = 0;
  }

  else
  {
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v14;
    *(_BYTE *)(a4 + 8) = 0;
  }

  return result;
}

  if ((a3 & 0xC) == v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }

  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  uint64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }

  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }

  unint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unint64_t v19 = 0LL;
  }
  uint64_t v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        uint64_t v31 = a6 + 48;
        uint64_t v32 = a6 + 55;
        uint64_t v33 = a6 + 87;
        if (a6 > 10)
        {
          uint64_t v31 = 58;
        }

        else
        {
          uint64_t v33 = 97;
          uint64_t v32 = 65;
        }

        if (v19)
        {
          uint64_t v24 = 0LL;
          char v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            uint64_t v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0LL;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                uint64_t v37 = -87;
              }

              else
              {
                uint64_t v37 = -55;
              }
            }

            else
            {
              uint64_t v37 = -48;
            }

            uint64_t v38 = v24 * a6;
            uint64_t v24 = v38 + (v36 + v37);
            ++v34;
            --v35;
          }

          while (v35);
          return v24;
        }

        return 0LL;
      }

      return 0LL;
    }

    goto LABEL_94;
  }

  if (v20 != 45)
  {
    if (v18 != v15)
    {
      uint64_t v39 = a6 + 48;
      uint64_t v40 = a6 + 55;
      char v41 = a6 + 87;
      if (a6 > 10)
      {
        uint64_t v39 = 58;
      }

      else
      {
        char v41 = 97;
        uint64_t v40 = 65;
      }

      if (v19)
      {
        uint64_t v42 = 0LL;
        do
        {
          char v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0LL;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }

            else
            {
              char v44 = -55;
            }
          }

          else
          {
            char v44 = -48;
          }

          uint64_t v45 = v42 * a6;
          uint64_t v42 = v45 + (v43 + v44);
          ++v19;
          --result;
        }

        while (result);
        return v45 + (v43 + v44);
      }

      return 0LL;
    }

    return 0LL;
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      unint64_t v21 = a6 + 48;
      char v22 = a6 + 55;
      char v23 = a6 + 87;
      if (a6 > 10)
      {
        unint64_t v21 = 58;
      }

      else
      {
        char v23 = 97;
        char v22 = 65;
      }

      if (v19)
      {
        uint64_t v24 = 0LL;
        uint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          uint64_t v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0LL;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              uint64_t v28 = -87;
            }

            else
            {
              uint64_t v28 = -55;
            }
          }

          else
          {
            uint64_t v28 = -48;
          }

          uint64_t v30 = v24 * a6;
          uint64_t v24 = v30 - (v27 + v28);
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

      swift_bridgeObjectRetain_n();
      outlined destroy of Any?( (uint64_t)&v101,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
      swift_bridgeObjectRelease();
    }

    if (!v6) {
      goto LABEL_21;
    }
  }

  switch(v9)
  {
    case 0:
      unint64_t v10 = 449;
      goto LABEL_5;
    case 1:
      unint64_t v10 = 451;
      goto LABEL_5;
    case 2:
      unint64_t v10 = 1991;
      goto LABEL_5;
    case 3:
      unint64_t v10 = 1999;
      goto LABEL_5;
    case 4:
      unint64_t v10 = 2015;
      goto LABEL_5;
    case 9:
    case 10:
      unint64_t v10 = 1987;
LABEL_5:
      if (((v10 >> v17) & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_23;
    default:
LABEL_23:
      unint64_t v19 = *(_BYTE *)(v7 + v6);
      uint64_t result = swift_bridgeObjectRelease();
      break;
  }

    uint64_t v6 = (void *)v4;
    __int128 v7 = 1LL;
    goto LABEL_27;
  }

  __int128 v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4) {
    goto LABEL_6;
  }
  __int128 v5 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
    uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    uint64_t v6 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v12 = v6[6];
  uint64_t v13 = v6[7];
  swift_retain();
  uint64_t result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v13, v12, v5);
  if (v5 < 1)
  {
    unint64_t v14 = v5;
    if (!v5)
    {
LABEL_30:
      __int128 v7 = 1LL;
      goto LABEL_24;
    }
  }

  else
  {
    unint64_t v14 = v5;
    swift_unknownObjectRetain();
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
    uint64_t result = (id)swift_unknownObjectRelease();
  }

  if (!__OFSUB__(v5, v14))
  {
    uint64_t result = (id)swift_arrayDestroy();
    __int128 v7 = 0LL;
LABEL_24:
    if (v5 >= 0)
    {
      _OWORD v6[2] = 0LL;
      swift_release();
      if ((v7 & 1) == 0)
      {
LABEL_26:
        swift_release();
        uint64_t v6 = 0LL;
      }

    uint64_t v6 = (void *)v4;
    __int128 v7 = 1LL;
    goto LABEL_24;
  }

  __int128 v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4) {
    goto LABEL_6;
  }
  __int128 v5 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    uint64_t v6 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v12 = v6[6];
  uint64_t v13 = v6[7];
  swift_retain();
  uint64_t result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v13, v12, v5);
  if (v5 < 1)
  {
    unint64_t v14 = v5;
    if (!v5)
    {
LABEL_30:
      __int128 v7 = 1LL;
      goto LABEL_25;
    }
  }

  else
  {
    unint64_t v14 = v5;
    swift_unknownObjectRetain();
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
    uint64_t result = (id)swift_unknownObjectRelease();
  }

  if (!__OFSUB__(v5, v14))
  {
    uint64_t result = (id)swift_arrayDestroy();
    __int128 v7 = 0LL;
LABEL_25:
    if (v5 >= 0)
    {
      _OWORD v6[2] = 0LL;
      swift_release();
      if ((v7 & 1) != 0) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }

    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_32;
  }

    uint64_t result = 0LL;
    __int128 v4 = v8;
    if (v3 >= v8 >> 10) {
      return result;
    }
  }

  __int128 v9 = 10LL;
  while (1)
  {
    unint64_t v10 = v9 - 7;
    if (__OFADD__(v9 - 8, 1LL)) {
      break;
    }
    if (*(_DWORD *)(v11 + 4 * v9) == (_DWORD)result) {
      return v4;
    }
    ++v9;
    if (v10 == v7) {
      goto LABEL_6;
    }
  }

  __break(1u);
  return result;
}

    unint64_t v14 = 0;
    return (__int128 *)(v14 & 1);
  }

  __break(1u);
  return result;
}

      v24 += 24LL;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v23 = v141[0];
LABEL_41:
  uint64_t result = swift_release();
  *a7 = v23;
  return result;
}

        if (v4 == v2) {
          return v7;
        }
      }

      uint64_t v13 = *(void *)(a2 + 48);
LABEL_14:
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v7 + 16) + 1LL,  1);
      }
      uint64_t v16 = *(void *)(v7 + 16);
      unint64_t v15 = *(void *)(v7 + 24);
      if (v16 >= v15 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v15 > 1,  v16 + 1,  1);
      }
      *(void *)(v7 + 16) = v16 + 1;
      *(_BYTE *)(v7 + v16 + 32) = v10;
      __int128 v5 = v17;
      if (v4 == v2) {
        return v7;
      }
    }

    unint64_t v14 = ~v11;
    while (1)
    {
      uint64_t v12 = (v12 + 1) & v14;
      if (((*(void *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_6;
      }
    }
  }

  return MEMORY[0x18961AFE8];
}

      ++v4;
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      swift_release();
      swift_release();
      if (v4 == v3) {
        goto LABEL_36;
      }
    }
  }

  return 0LL;
}

  if ((a3 & 0xC) == v14)
  {
    uint64_t v20 = a6;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a6 = v20;
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v11 >> 16);
    goto LABEL_21;
  }

  unint64_t v21 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    unint64_t v21 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v21 < v11 >> 16) {
    goto LABEL_29;
  }
  if (v21 < a3 >> 16)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    return result;
  }

  char v22 = a6;
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  a6 = v22;
LABEL_21:
  if (__OFADD__(v16, result))
  {
    __break(1u);
    goto LABEL_28;
  }

  char v23 = result;
  if (v16 + result < v16)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v12) {
    uint64_t v24 = (char *)(v12 + v16);
  }
  else {
    uint64_t v24 = 0LL;
  }
  return specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, v23, a6, a7 & 1);
}

        if (v3 == v2) {
          return v5;
        }
      }

      uint64_t v13 = *(void *)(v9 + 48);
LABEL_16:
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v5 + 16) + 1LL,  1);
      }
      uint64_t v16 = *(void *)(v5 + 16);
      unint64_t v15 = *(void *)(v5 + 24);
      if (v16 >= v15 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v15 > 1,  v16 + 1,  1);
      }
      *(void *)(v5 + 16) = v16 + 1;
      *(_BYTE *)(v5 + v16 + 32) = v7;
      if (v3 == v2) {
        return v5;
      }
    }

    unint64_t v14 = ~v11;
    while (1)
    {
      uint64_t v12 = (v12 + 1) & v14;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_6;
      }
    }
  }

  return MEMORY[0x18961AFE8];
}

    unint64_t v1 = *a1;
    __int128 v2 = a1[1];
    __int128 v3 = a1[2];
    __int128 v7 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000LL) == 0) {
      __int128 v7 = *a1 & 0xFFFFFFFFFFFFLL;
    }
    __int128 v5 = 4 * v7;
    if (4 * v7 <= v3 >> 14) {
      return 0LL;
    }
  }

  if (v8 != 47) {
    goto LABEL_86;
  }
  __int128 v9 = a1[2];
  if (v5 <= v9 >> 14) {
    goto LABEL_86;
  }
  if ((unsigned __int16)specialized _ParseInfo.currChar.getter(v1, v2, a1[2]) == 47)
  {
    _ParseInfo.advance()();
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    uint64_t v12 = a1[2];
    uint64_t v13 = (v10 & 0x2000000000000000LL) == 0;
    if ((v10 & 0x2000000000000000LL) != 0) {
      unint64_t v14 = HIBYTE(v10) & 0xF;
    }
    else {
      unint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (v12 >> 14 < 4 * v14)
    {
      while (1)
      {
        unint64_t v15 = (v11 >> 59) & 1;
        if ((v10 & 0x1000000000000000LL) == 0) {
          LOBYTE(v15) = 1;
        }
        if ((v12 & 0xC) == 4LL << v15) {
          uint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v11, v10);
        }
        uint64_t v16 = v12 >> 16;
        if (v12 >> 16 >= v14)
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
          JUMPOUT(0x1833058CCLL);
        }

        if ((v10 & 0x1000000000000000LL) == 0) {
          break;
        }
        LOWORD(v19) = String.UTF16View._foreignSubscript(position:)();
LABEL_39:
        uint64_t v20 = 1;
        if ((unsigned __int16)v19 - 8232 >= 2
          && (unsigned __int16)v19 != 10
          && (unsigned __int16)v19 != 13)
        {
          _ParseInfo.advance()();
          uint64_t v20 = 0;
        }

        unint64_t v11 = *a1;
        unint64_t v10 = a1[1];
        uint64_t v13 = (v10 & 0x2000000000000000LL) == 0;
        if ((v10 & 0x2000000000000000LL) != 0) {
          unint64_t v14 = HIBYTE(v10) & 0xF;
        }
        else {
          unint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
        }
        if ((v20 & 1) == 0)
        {
          uint64_t v12 = a1[2];
          if (v12 >> 14 < 4 * v14) {
            continue;
          }
        }

        goto LABEL_6;
      }

      if ((v12 & 1) != 0)
      {
        if (v13) {
          goto LABEL_27;
        }
      }

      else
      {
        uint64_t v16 = _StringGuts.scalarAlignSlow(_:)(v12, v11, v10) >> 16;
        if (v13)
        {
LABEL_27:
          if ((v11 & 0x1000000000000000LL) != 0) {
            unint64_t v17 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            unint64_t v17 = _StringObject.sharedUTF8.getter();
          }
          uint64_t v18 = *(unsigned __int8 *)(v17 + v16);
          if (*(char *)(v17 + v16) < 0) {
            __asm { BR              X10 }
          }

  if ((a3 & 0xC) == v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }

  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_92;
  }
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  uint64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }

  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  unint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unint64_t v19 = 0LL;
  }
  uint64_t v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        uint64_t v33 = a6 + 48;
        char v34 = a6 + 55;
        uint64_t v35 = a6 + 87;
        if (a6 > 10)
        {
          uint64_t v33 = 58;
        }

        else
        {
          uint64_t v35 = 97;
          char v34 = 65;
        }

        if (v19)
        {
          uint64_t v24 = 0LL;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            uint64_t v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0LL;
                if (v38 < 0x61 || v38 >= v35) {
                  return v29;
                }
                uint64_t v39 = -87;
              }

              else
              {
                uint64_t v39 = -55;
              }
            }

            else
            {
              uint64_t v39 = -48;
            }

            if (!is_mul_ok(v24, a6)) {
              return 0LL;
            }
            uint64_t v40 = v24 * a6;
            char v41 = v38 + v39;
            uint64_t v32 = __CFADD__(v40, v41);
            uint64_t v24 = v40 + v41;
            if (v32) {
              return 0LL;
            }
            ++v36;
            --v37;
          }

          while (v37);
          return v24;
        }

        return 0LL;
      }

      return 0LL;
    }

    goto LABEL_95;
  }

  if (v20 != 45)
  {
    if (v18 != v15)
    {
      uint64_t v42 = a6 + 48;
      char v43 = a6 + 55;
      char v44 = a6 + 87;
      if (a6 > 10)
      {
        uint64_t v42 = 58;
      }

      else
      {
        char v44 = 97;
        char v43 = 65;
      }

      if (v19)
      {
        uint64_t v24 = 0LL;
        while (1)
        {
          uint64_t v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0LL;
              if (v45 < 0x61 || v45 >= v44) {
                return v29;
              }
              char v46 = -87;
            }

            else
            {
              char v46 = -55;
            }
          }

          else
          {
            char v46 = -48;
          }

          if (!is_mul_ok(v24, a6)) {
            return 0LL;
          }
          uint64_t v47 = v24 * a6;
          uint64_t v48 = v45 + v46;
          uint64_t v32 = __CFADD__(v47, v48);
          uint64_t v24 = v47 + v48;
          if (v32) {
            return 0LL;
          }
          ++v19;
          if (!--result) {
            return v24;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      unint64_t v21 = a6 + 48;
      char v22 = a6 + 55;
      char v23 = a6 + 87;
      if (a6 > 10)
      {
        unint64_t v21 = 58;
      }

      else
      {
        char v23 = 97;
        char v22 = 65;
      }

      if (v19)
      {
        uint64_t v24 = 0LL;
        uint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          uint64_t v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0LL;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              uint64_t v28 = -87;
            }

            else
            {
              uint64_t v28 = -55;
            }
          }

          else
          {
            uint64_t v28 = -48;
          }

          if (!is_mul_ok(v24, a6)) {
            return 0LL;
          }
          uint64_t v30 = v24 * a6;
          uint64_t v31 = v27 + v28;
          uint64_t v32 = v30 >= v31;
          uint64_t v24 = v30 - v31;
          if (!v32) {
            return 0LL;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v31, v7);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
    __int128 v7 = v24;
    v23(v28, v27, v24, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v7);
    if (!v5)
    {
      ++v15;
      a3 = v22;
      if (v18 != v25) {
        continue;
      }
    }

    goto LABEL_13;
  }

  __break(1u);
  return result;
}

  unint64_t v11 = (unsigned __int16)*a2 - v6;
  if (v11 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }

  *a2 = v11;
  uint64_t v12 = &__dst[24 * v6];
  return v6;
}

  uint64_t v38 = v56;
  uint64_t v39 = v56 >> 14;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v39 < v61 >> 14)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v62 = v38;
  uint64_t v40 = v46;
  dispatch thunk of Collection.subscript.getter();
  char v41 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  String.append<A>(contentsOf:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v45 + 8);
  v42(v40, v41);
  String.append<A>(contentsOf:)();
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  char v43 = v61;
  if (v61 >> 14 >= v55 >> 14)
  {
    uint64_t v61 = v55;
    uint64_t v62 = v43;
    dispatch thunk of Collection.subscript.getter();
    String.append<A>(contentsOf:)();
    v42(v40, v41);
    return v63;
  }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unint64_t v14 = *(void *)(*v2 + 16);
    unint64_t v15 = *(void *)(*v2 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v15;
    *__int128 v2 = v16;
    swift_release();
  }

  unint64_t v17 = *(void *)(*v2 + 16);
  uint64_t v18 = *(void *)(*v2 + 24);
  __int128 v9 = __OFSUB__(v18, v17);
  unint64_t v19 = v18 - v17;
  if (v9) {
    goto LABEL_16;
  }
  if (v19 <= a1) {
    uint64_t v20 = a1;
  }
  else {
    uint64_t v20 = v19;
  }
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v20, 0);
}

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    unint64_t v15 = *(void *)(*a1 + 16);
    uint64_t v16 = *(void *)(*a1 + 24);
    type metadata accessor for Data.RangeReference();
    unint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    *a1 = v17;
    uint64_t result = swift_release();
  }

  uint64_t v18 = (void *)a1[1];
  unint64_t v19 = v18[2];
  if (!v19) {
    goto LABEL_20;
  }
  uint64_t v20 = *(void *)(*a1 + 16);
  unint64_t v21 = v18[5];
  unint64_t v10 = __OFSUB__(v20, v21);
  char v22 = v20 - v21;
  if (v10) {
    goto LABEL_17;
  }
  char v23 = *(void *)(*a1 + 24);
  unint64_t v10 = __OFSUB__(v23, v20);
  uint64_t v24 = v23 - v20;
  if (v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v25 = v18[3];
  if (v25 >= v24) {
    uint64_t v25 = v24;
  }
  uint64_t v26 = v19 + v22;
  *(void *)(a2 + 8) = v26;
  *(void *)(a2 + 16) = v26 + v25;
  return result;
}

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    unint64_t v15 = *(void *)(*v2 + 16);
    uint64_t v16 = *(void *)(*v2 + 24);
    type metadata accessor for Data.RangeReference();
    unint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    *__int128 v2 = v17;
    uint64_t result = swift_release();
  }

  uint64_t v18 = (void *)v2[1];
  unint64_t v19 = v18[2];
  if (!v19) {
    goto LABEL_20;
  }
  uint64_t v20 = *(void *)(*v2 + 16);
  unint64_t v21 = v18[5];
  unint64_t v10 = __OFSUB__(v20, v21);
  char v22 = v20 - v21;
  if (v10) {
    goto LABEL_17;
  }
  char v23 = *(void *)(*v2 + 24);
  unint64_t v10 = __OFSUB__(v23, v20);
  uint64_t v24 = v23 - v20;
  if (v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v25 = v18[3];
  if (v25 >= v24) {
    uint64_t v25 = v24;
  }
  return a1(v19 + v22, v19 + v22 + v25);
}

  type metadata accessor for __DataStorage();
  unint64_t v15 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0LL, 0LL, v8);
  v3[1] = v15;
  swift_release();
LABEL_7:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v16 = *(void *)(*v3 + 16);
    unint64_t v17 = *(void *)(*v3 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v17;
    *__int128 v3 = v18;
    swift_release();
  }

  __DataStorage.resetBytes(in:)(a1, a2);
  unint64_t v19 = *v3;
  if (*(void *)(*v3 + 24) < a2)
  {
    if (*(void *)(v19 + 16) <= a2)
    {
      *(void *)(v19 + 24) = a2;
      return;
    }

    goto LABEL_17;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    unint64_t v19 = *(void *)(*a1 + 16);
    uint64_t v20 = *(void *)(*a1 + 24);
    type metadata accessor for Data.RangeReference();
    unint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v20;
    *a1 = v21;
    uint64_t result = swift_release();
  }

  char v22 = (void *)a1[1];
  char v23 = v22[2];
  if (!v23) {
    goto LABEL_24;
  }
  uint64_t v24 = *(void *)(*a1 + 16);
  uint64_t v25 = v22[5];
  unint64_t v14 = __OFSUB__(v24, v25);
  uint64_t v26 = v24 - v25;
  if (v14) {
    goto LABEL_21;
  }
  uint64_t v27 = *(void *)(*a1 + 24);
  unint64_t v14 = __OFSUB__(v27, v24);
  uint64_t v28 = v27 - v24;
  if (v14)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v29 = a4;
  uint64_t v30 = v22[3];
  if (v30 >= v28) {
    uint64_t v31 = v28;
  }
  else {
    uint64_t v31 = v30;
  }
  uint64_t v32 = (char *)(v23 + v26);
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a2, a3, v32, v31);
  if (v29 == 2) {
    uint64_t v33 = _allASCII(_:)(v32, v31);
  }
  else {
    uint64_t v33 = v29 & 1;
  }
  swift_bridgeObjectRelease();
  return v33 & 1;
}

    uint64_t v13 = 0LL;
    goto LABEL_7;
  }

  __break(1u);
}

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    unint64_t v15 = *(void *)(*v3 + 16);
    uint64_t v16 = *(void *)(*v3 + 24);
    type metadata accessor for Data.RangeReference();
    unint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    *__int128 v3 = v17;
    uint64_t result = swift_release();
  }

  uint64_t v18 = (void *)v3[1];
  unint64_t v19 = v18[2];
  if (!v19) {
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(*v3 + 16);
  unint64_t v21 = v18[5];
  unint64_t v11 = __OFSUB__(v20, v21);
  char v22 = v20 - v21;
  if (v11) {
    goto LABEL_19;
  }
  char v23 = *(void *)(*v3 + 24);
  unint64_t v11 = __OFSUB__(v23, v20);
  uint64_t v24 = v23 - v20;
  if (v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v25 = v18[3];
  if (v25 >= v24) {
    uint64_t v25 = v24;
  }
  uint64_t result = (uint64_t)a1(&v26, v19 + v22, v19 + v22 + v25);
  if (!v2) {
    return v26;
  }
  return result;
}

        if (v3 == v2) {
          return v6;
        }
      }

  *(_DWORD *)&self->flags &= 0xFFFFFFF0;
  self->length = 0LL;
  if (!a3 || a4 == 1 || a4 == _NSCStringEncoding)
  {
    if (a3) {
      unint64_t v15 = [a3 length];
    }
    else {
      unint64_t v15 = 0LL;
    }
    self->length = v15;
    uint64_t v26 = (NSData *)[a3 copyWithZone:0];
    p_contents->d.data = v26;
    self->contents.d.dataBytes = (char *)-[NSData bytes](v26, "bytes");
LABEL_28:
    LOBYTE(v20) = 1;
    return v20;
  }

  if (a4 == 10)
  {
    __int128 v9 = [a3 length];
    unint64_t v10 = (NSData *)[a3 copyWithZone:0];
    p_contents->d.data = v10;
    unint64_t v11 = -[NSData bytes](v10, "bytes");
    self->contents.d.dataBytes = v11;
    if (v9 >= 2 && ((uint64_t v12 = *(unsigned __int16 *)v11, v12 == 65279) || v12 == 65534))
    {
      uint64_t v13 = ($12A8D912EA621CF5C78D0B17F79410D4)(*(_DWORD *)&self->flags | 4);
      self->flags = v13;
      else {
        unint64_t v14 = 10;
      }
    }

    else
    {
      uint64_t v13 = ($12A8D912EA621CF5C78D0B17F79410D4)(*(_DWORD *)&self->flags & 0xFFFFFFFB);
      unint64_t v14 = 2;
    }

    self->flags = ($12A8D912EA621CF5C78D0B17F79410D4)(v14 | *(_DWORD *)&v13 & 0xFFFFFFF5);
    self->length = (v9 >> 1) - ((*(unsigned int *)&v13 >> 2) & 1);
    if ((*(_BYTE *)&self->flags & 4) != 0) {
      self->contents.d.dataBytes += 2;
    }
    goto LABEL_28;
  }

  uint64_t v37 = 0LL;
  v38[0] = 0LL;
  uint64_t v36 = 0;
  unint64_t v17 = (unsigned __int16 *)[a3 bytes];
  uint64_t v18 = [a3 length];
  unint64_t v19 = malloc_default_zone();
  uint64_t v20 = _NSConvertToASCIIorUnicode(v17, v18, a4, v38, &v37, &v36, v19);
  if (v20)
  {
    unint64_t v21 = objc_alloc(MEMORY[0x189603F48]);
    char v22 = v37;
    char v23 = v36 == 0;
    uint64_t v24 = (NSData *)[v21 initWithBytesNoCopy:v38[0] length:v37 << (v36 == 0) freeWhenDone:1];
    p_contents->d.data = v24;
    self->contents.d.dataBytes = (char *)-[NSData bytes](v24, "bytes");
    self->flags = ($12A8D912EA621CF5C78D0B17F79410D4)(*(_DWORD *)&self->flags & 0xFFFFFFFD | (2 * v23));
    self->length = v22;
  }

  return v20;
}

  memmove(v3, (const void *)bytes, length);
}

    uint64_t v6 = 0;
    uint64_t result = 0LL;
    goto LABEL_7;
  }

  uint64_t result = 0LL;
  uint64_t v6 = 1;
LABEL_7:
  *a2 = v6;
  return result;
}

    uint64_t v6 = 0;
    uint64_t result = 0LL;
    goto LABEL_7;
  }

  uint64_t result = 0LL;
  uint64_t v6 = 1;
LABEL_7:
  *a2 = v6;
  return result;
}

  __int128 v9 = -[NSCoder requiresSecureCoding](coder, "requiresSecureCoding");
LABEL_8:
  unint64_t v10 = -[NSSortDescriptor initWithKey:ascending:](self, "initWithKey:ascending:", v5, v6);
  unint64_t v11 = v10;
  if (v8) {
    -[NSSortDescriptor _setSelectorName:](v10, "_setSelectorName:", v8);
  }
  if (v9) {
    -[NSSortDescriptor _disallowEvaluation](v11, "_disallowEvaluation");
  }
  if (v7) {
    -[NSSortDescriptor setReverseNullOrder:](v11, "setReverseNullOrder:", 1LL);
  }
  return v11;
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unsigned __int8 a7)
{
  if (!a1)
  {
LABEL_50:
    __break(1u);
    JUMPOUT(0x182F4E4F4LL);
  }

  unint64_t v30 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14)
  {
    uint64_t v10 = 0LL;
    goto LABEL_43;
  }

  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v29 = 4LL << v13;
  uint64_t v14 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = a5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v27 = v14;
  unsigned __int8 v28 = a7 & 0xF6;
  unsigned __int8 v24 = a7 & 0xF7;
  int v25 = a7 & 0x76;
  unsigned __int8 v23 = a7 & 0xD2;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0LL;
  unint64_t v15 = a3;
  while (2)
  {
    unsigned __int8 v16 = Substring.UTF8View.subscript.getter();
    if ((v15 & 0xC) == v29)
    {
      unint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
      if ((a6 & 0x1000000000000000LL) == 0)
      {
LABEL_13:
        unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_17;
      }
    }

    else if ((a6 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_13;
    }

    if (v27 <= v15 >> 16) {
      goto LABEL_46;
    }
    unint64_t v15 = String.UTF8View._foreignIndex(after:)();
LABEL_17:
    switch(v16)
    {
      case '!':
      case '$':
      case '\'':
      case '(':
      case ')':
      case '*':
      case ',':
LABEL_18:
        unsigned __int8 v18 = v28;
        goto LABEL_34;
      case '&':
LABEL_22:
        if (!v25) {
          goto LABEL_38;
        }
        goto LABEL_35;
      case '+':
        unsigned __int8 v18 = v24;
        goto LABEL_34;
      case '-':
      case '.':
        goto LABEL_33;
      case '/':
LABEL_24:
        if (a7 < 0x10u) {
          goto LABEL_38;
        }
        goto LABEL_35;
      default:
        if ((v16 - 58) <= 0xF5u)
        {
          switch(v16)
          {
            case ':':
              unsigned __int8 v18 = v23;
              goto LABEL_34;
            case ';':
              goto LABEL_18;
            case '=':
              goto LABEL_22;
            case '?':
              if (a7 < 0x40u) {
                goto LABEL_38;
              }
              goto LABEL_35;
            case '@':
              goto LABEL_24;
            default:
              if (v16 == 95) {
                goto LABEL_31;
              }
              if (v16 != 126) {
                goto LABEL_38;
              }
LABEL_31:
              if (a7 < 2u) {
                goto LABEL_38;
              }
              goto LABEL_35;
          }
        }

uint64_t specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  v17[1] = *MEMORY[0x1895F89C0];
  int64_t isStackAllocationSafe = specialized Collection.count.getter(a1, a2, a3, a4);
  uint64_t v11 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }

  if (v11 < -1) {
    goto LABEL_9;
  }
  uint64_t v12 = v11 + 1;
  if (v11 < 1024 || (int64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( (uint64_t)v17 - v13,  v12,  a1,  a2,  a3,  a4,  a5);
  }

  else
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v14 = specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( v15,  v12,  a1,  a2,  a3,  a4,  a5);
    MEMORY[0x186E20E60](v15, -1LL, -1LL);
  }

  return v14;
}

unint64_t specialized BidirectionalCollection.suffix(_:)( unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t result = String.index(_:offsetBy:limitedBy:)();
    if ((v4 & 1) != 0) {
      uint64_t result = 15LL;
    }
    if (4 * v3 >= result >> 14) {
      return String.subscript.getter();
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  if (!a1) {
    goto LABEL_60;
  }
  if ((a4 & 0x2000000000000000LL) != 0) {
    unint64_t v8 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = 0LL;
  if (v8)
  {
    uint64_t v31 = 4 * v8;
    uint64_t v11 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000LL) == 0) {
      LOBYTE(v11) = 1;
    }
    uint64_t v12 = 4LL << v11;
    unint64_t v13 = 15LL;
    uint64_t v14 = a3;
    while (1)
    {
      unint64_t v17 = v13 & 0xC;
      unint64_t v18 = v13;
      if (v17 == v12)
      {
        unint64_t v18 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v14, a4);
        uint64_t v14 = a3;
      }

      unint64_t v19 = v18 >> 16;
      if (v18 >> 16 >= v8)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        JUMPOUT(0x182F4EB08LL);
      }

      if ((a4 & 0x1000000000000000LL) != 0)
      {
        unsigned __int8 v22 = String.UTF8View._foreignSubscript(position:)();
        uint64_t v14 = a3;
        unsigned __int8 v21 = v22;
        if (v17 != v12) {
          goto LABEL_23;
        }
      }

      else if ((a4 & 0x2000000000000000LL) != 0)
      {
        v30[0] = v14;
        v30[1] = a4 & 0xFFFFFFFFFFFFFFLL;
        unsigned __int8 v21 = *((_BYTE *)v30 + v19);
        if (v17 != v12) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t v20 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v14 & 0x1000000000000000LL) == 0)
        {
          uint64_t v20 = _StringObject.sharedUTF8.getter();
          uint64_t v14 = a3;
        }

        unsigned __int8 v21 = *(_BYTE *)(v20 + v19);
        if (v17 != v12)
        {
LABEL_23:
          if ((a4 & 0x1000000000000000LL) != 0) {
            goto LABEL_27;
          }
          goto LABEL_24;
        }
      }

      uint64_t v23 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v14, a4);
      uint64_t v14 = a3;
      unint64_t v13 = v23;
      if ((a4 & 0x1000000000000000LL) != 0)
      {
LABEL_27:
        if (v8 <= v13 >> 16) {
          goto LABEL_55;
        }
        uint64_t v24 = String.UTF8View._foreignIndex(after:)();
        uint64_t v14 = a3;
        unint64_t v13 = v24;
        goto LABEL_29;
      }

uint64_t specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( unint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  v13[1] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v7 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }

  if (v7 < -1) {
    goto LABEL_14;
  }
  uint64_t v8 = v7 + 1;
  if (v7 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( (uint64_t)v13 - v9,  v8,  a1,  a2,  a3);
  }

  else
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v10 = specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v11, v8, a1, a2, a3);
    MEMORY[0x186E20E60](v11, -1LL, -1LL);
  }

  return v10;
}

uint64_t specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v16 = 1;
  Swift::Int v5 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  if (v5)
  {
    char v7 = *(_BYTE *)(v5 + 218);
    *(void *)&__int128 v9 = v5;
    *((void *)&v9 + 1) = 0x101010101010101LL;
    v10[0] = 1;
    memset(&v10[8], 0, 64);
    uint64_t v11 = 0LL;
    v12[0] = 1;
    memset(&v12[8], 0, 48);
    v12[56] = v7;
    v12[57] = 0;
    __int128 v13 = v9;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v10;
    *(_OWORD *)&v14[48] = *(_OWORD *)&v10[48];
    *(_OWORD *)&v14[64] = 0uLL;
    *(_OWORD *)&v14[16] = *(_OWORD *)&v10[16];
    *(_OWORD *)&v14[32] = *(_OWORD *)&v10[32];
    *(_OWORD *)&v15[42] = *(_OWORD *)&v12[42];
    *(_OWORD *)&v15[16] = *(_OWORD *)&v12[16];
    *(_OWORD *)&v15[32] = *(_OWORD *)&v12[32];
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v12;
    destructiveProjectEnumData for PredicateCodableError(&v13, v6);
    outlined retain of URLComponents((uint64_t)&v9);
    outlined init with take of LocalePreferences?( (uint64_t)&v13,  (uint64_t)v17,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  }

  else
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)&v13);
    outlined init with take of LocalePreferences?( (uint64_t)&v13,  (uint64_t)v17,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    char v7 = 0;
  }

  *(void *)&__int128 v13 = v5;
  *((void *)&v13 + 1) = 0x101010101010101LL;
  v14[0] = 1;
  memset(&v14[8], 0, 72);
  v15[0] = v16;
  memset(&v15[8], 0, 48);
  v15[56] = v7;
  v15[57] = 0;
  outlined release of URLComponents((uint64_t)&v13);
  return outlined init with take of LocalePreferences?( (uint64_t)v17,  a4,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
}

uint64_t _s10Foundation13URLComponentsV01_B0VSgWOg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)( a1,  a2,  (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:),  a3);
}

{
  return partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)( a1,  a2,  (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:),  a3);
}

uint64_t partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( a1,  a2,  *(unsigned __int8 *)(v4 + 24),  a3);
  *a4 = result;
  a4[1] = v7;
  return result;
}

BOOL partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(int a1)
{
  return closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)( uint64_t a1, uint64_t a2)
{
  return closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)( a1,  a2,  *(unsigned __int16 **)(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

BOOL partial apply for specialized closure #1 in Sequence<>.contains(_:)(unsigned __int8 *a1)
{
  return specialized closure #1 in Sequence<>.contains(_:)(a1, *(unsigned __int8 **)(v1 + 16));
}

double specialized URLComponents.percentEncodedQueryItems.setter(uint64_t a1)
{
  uint64_t v2 = (void *)v1;
  *(_BYTE *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 15) = 0;
  if (!a1)
  {
    swift_bridgeObjectRelease();
    *(void *)(v1 + 120) = 0LL;
    *(void *)(v1 + 128) = 0LL;
    return result;
  }

  int64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    double result = 0.0;
    *(_OWORD *)(v1 + 120) = xmmword_183725730;
    return result;
  }

  unint64_t v44 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  Swift::Int v5 = (unint64_t *)(a1 + 56);
  while (1)
  {
    unint64_t v7 = *(v5 - 3);
    unint64_t v6 = *(v5 - 2);
    unint64_t v9 = *(v5 - 1);
    unint64_t v8 = *v5;
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      unint64_t v42 = *(v5 - 3);
      uint64_t v43 = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      id v40 = (id)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v20 = (unsigned __int16 *)objc_msgSend(v40, sel__fastCharacterContents);
      id v21 = v40;
      if (v20)
      {
        unint64_t v42 = v7;
        uint64_t v43 = v6;
        StringProtocol._ephemeralString.getter();
        id v37 = (id)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v38 = objc_msgSend(v37, sel_length);
        swift_unknownObjectRelease();
        char v22 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v20,  (uint64_t)v38,  0x80u,  1);
      }

      else
      {
        char v22 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v6, 0x80u, 1);
      }

      char v29 = v22;
      swift_bridgeObjectRelease_n();
      if ((v29 & 1) == 0) {
        goto LABEL_37;
      }
    }

    else
    {
      if ((v6 & 0x2000000000000000LL) != 0)
      {
        uint64_t v11 = HIBYTE(v6) & 0xF;
        unint64_t v42 = *(v5 - 3);
        uint64_t v43 = v6 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v10 = (char *)&v42;
      }

      else if ((v7 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v10 = (char *)_StringObject.sharedUTF8.getter();
      }

      BOOL v12 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, v11, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v12) {
        goto LABEL_37;
      }
    }

    unint64_t v42 = v7;
    uint64_t v43 = v6;
    if (v8) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_19:
    unint64_t v8 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v8 + 16) + 1LL,  1);
      unint64_t v8 = v44;
    }

    unint64_t v18 = *(void *)(v8 + 16);
    unint64_t v17 = *(void *)(v8 + 24);
    if (v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      unint64_t v8 = v44;
    }

    v5 += 4;
    *(void *)(v8 + 16) = v18 + 1;
    unint64_t v19 = v8 + 16 * v18;
    *(void *)(v19 + 32) = v7;
    *(void *)(v19 + 40) = v6;
    if (!--v4) {
      goto LABEL_38;
    }
  }

  if ((v8 & 0x1000000000000000LL) == 0)
  {
    if ((v8 & 0x2000000000000000LL) != 0)
    {
      uint64_t v14 = HIBYTE(v8) & 0xF;
      v41._countAndFlagsBits = v9;
      v41._object = (void *)(v8 & 0xFFFFFFFFFFFFFFLL);
      __int128 v13 = (char *)&v41;
    }

    else if ((v9 & 0x1000000000000000LL) != 0)
    {
      __int128 v13 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v13 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v13, v14, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_36;
    }
    goto LABEL_18;
  }

  v41._countAndFlagsBits = v9;
  v41._object = (void *)v8;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  StringProtocol._ephemeralString.getter();
  uint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v24 = (unsigned __int16 *)objc_msgSend(v23, sel__fastCharacterContents);
  id v25 = v23;
  if (v24)
  {
    v41._countAndFlagsBits = v9;
    v41._object = (void *)v8;
    uint64_t v39 = v24;
    StringProtocol._ephemeralString.getter();
    char v26 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(v26, sel_length);
    swift_unknownObjectRelease();
    char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v39,  (uint64_t)v27,  0x40u,  1);
  }

  else
  {
    char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x40u, 1);
  }

  char v30 = v28;
  swift_bridgeObjectRelease_n();
  if ((v30 & 1) != 0)
  {
LABEL_18:
    v41._countAndFlagsBits = 61LL;
    v41._object = (void *)0xE100000000000000LL;
    v16._countAndFlagsBits = v9;
    v16._object = (void *)v8;
    String.append(_:)(v16);
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v7 = v42;
    unint64_t v6 = v43;
    goto LABEL_19;
  }

unint64_t lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError()
{
  unint64_t result = lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError;
  if (!lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URLComponents.InvalidComponentError,  &type metadata for URLComponents.InvalidComponentError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError;
  if (!lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URLComponents.InvalidComponentError,  &type metadata for URLComponents.InvalidComponentError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError);
  }

  return result;
}

uint64_t outlined destroy of (label: String?, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t *outlined release of URLComponents?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of URLComponents?(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URLComponents and conformance URLComponents()
{
  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem()
{
  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLComponents.CodingKeys, &unk_189C6FDE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLComponents.CodingKeys, &unk_189C6FDE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLComponents.CodingKeys, &unk_189C6FDE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLComponents.CodingKeys, &unk_189C6FDE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for URLComponents( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for URLComponents( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents,  (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents,  (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents,  (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents);
}

uint64_t instantiation function for generic protocol witness table for URLQueryItem( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for URLComponents( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem,  (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem,  (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem,  (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem);
}

uint64_t instantiation function for generic protocol witness table for URLComponents( void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  uint64_t result = a7();
  a1[4] = result;
  return result;
}

uint64_t sub_182F4F9A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.scheme.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_182F4F9C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLComponents.scheme : URLComponents( a1,  a2,  a3,  a4,  (void (*)(uint64_t, uint64_t))URLComponents._URLComponents.setScheme(_:));
}

uint64_t sub_182F4FA00@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents( a1,  (uint64_t (*)(uint64_t))URLComponents._URLComponents.user.getter,  a2);
}

uint64_t sub_182F4FA1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_46Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.user.setter);
}

uint64_t sub_182F4FA28@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents( a1,  (uint64_t (*)(uint64_t))URLComponents._URLComponents.password.getter,  a2);
}

uint64_t sub_182F4FA44(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_46Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.password.setter);
}

uint64_t sub_182F4FA50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = URLComponents.host.getter(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_182F4FA78(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return URLComponents._URLComponents.host.setter(v1, v2);
}

uint64_t sub_182F4FAB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = URLComponents.port.getter();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_182F4FAEC(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return URLComponents._URLComponents.path.setter(v1, v2);
}

uint64_t sub_182F4FB28@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents( a1,  (uint64_t (*)(uint64_t))URLComponents._URLComponents.query.getter,  a2);
}

uint64_t sub_182F4FB44(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_46Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.query.setter);
}

uint64_t sub_182F4FB50@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents( a1,  (uint64_t (*)(uint64_t))URLComponents._URLComponents.fragment.getter,  a2);
}

uint64_t sub_182F4FB6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_46Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.fragment.setter);
}

uint64_t sub_182F4FB78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedUser.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_182F4FBA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_46Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedUser.setter);
}

uint64_t sub_182F4FBAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedPassword.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_182F4FBD4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_46Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedPassword.setter);
}

uint64_t sub_182F4FBE0@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents( a1,  (uint64_t (*)(uint64_t))URLComponents._URLComponents.percentEncodedHost.getter,  a2);
}

uint64_t sub_182F4FBFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLComponents.scheme : URLComponents( a1,  a2,  a3,  a4,  (void (*)(uint64_t, uint64_t))URLComponents._URLComponents.setPercentEncodedHost(_:));
}

uint64_t sub_182F4FC34@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents( a1,  (uint64_t (*)(uint64_t))URLComponents._URLComponents.encodedHost.getter,  a2);
}

uint64_t sub_182F4FC50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_46Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.encodedHost.setter);
}

uint64_t sub_182F4FC5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedPath.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_182F4FC84(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedPath.setter(v1, v2);
}

uint64_t sub_182F4FCC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedQuery.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_182F4FCE8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_46Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedQuery.setter);
}

uint64_t sub_182F4FCF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedFragment.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_182F4FD1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_46Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedFragment.setter);
}

uint64_t keypath_set_46Tm( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t sub_182F4FD68@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return key path getter for URLComponents.queryItems : URLComponents(a1, 0, a2);
}

uint64_t sub_182F4FD80()
{
  v1.value._rawValue = (void *)swift_bridgeObjectRetain();
  URLComponents._URLComponents.setQueryItems(_:)(v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_182F4FDB0@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return key path getter for URLComponents.queryItems : URLComponents(a1, 1, a2);
}

uint64_t sub_182F4FDC8()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized URLComponents.percentEncodedQueryItems.setter(v0);
  return swift_bridgeObjectRelease();
}

__n128 __swift_memcpy154_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

ValueMetadata *type metadata accessor for URLComponents()
{
  return &type metadata for URLComponents;
}

uint64_t destroy for URLQueryItem()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for URLQueryItem(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for URLQueryItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for URLQueryItem(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URLQueryItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for URLQueryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for URLQueryItem()
{
  return &type metadata for URLQueryItem;
}

uint64_t getEnumTagSinglePayload for URLComponents.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for URLComponents.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_182F500DC + 4 * byte_183725146[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_182F50110 + 4 * byte_183725141[v4]))();
}

uint64_t sub_182F50110(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F50118(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F50120LL);
  }
  return result;
}

uint64_t sub_182F5012C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F50134LL);
  }
  *(_BYTE *)__n128 result = a2 + 7;
  return result;
}

uint64_t sub_182F50138(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F50140(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URLComponents.CodingKeys()
{
  return &unk_189C6FDE8;
}

uint64_t getEnumTagSinglePayload for URLComponents.InvalidComponentError( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

uint64_t storeEnumTagSinglePayload for URLComponents.InvalidComponentError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_182F50238 + 4 * byte_183725150[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_182F5026C + 4 * byte_18372514B[v4]))();
}

uint64_t sub_182F5026C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F50274(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F5027CLL);
  }
  return result;
}

uint64_t sub_182F50288(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F50290LL);
  }
  *(_BYTE *)__n128 result = a2 + 8;
  return result;
}

uint64_t sub_182F50294(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F5029C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for URLComponents.InvalidComponentError()
{
  return &type metadata for URLComponents.InvalidComponentError;
}

uint64_t destroy for URLComponents()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for URLComponents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  uint64_t v9 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URLComponents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 88) = v4;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  return a1;
}

uint64_t assignWithTake for URLComponents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLComponents(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 154)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URLComponents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 152) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 154) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 154) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for URLComponents._URLComponents()
{
  return &type metadata for URLComponents._URLComponents;
}

unint64_t specialized URLComponents.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 8) {
    return 8LL;
  }
  return result;
}

uint64_t specialized URLComponents.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D65686373LL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 1919251317 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x64726F7773736170LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 1953722216 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 1953656688 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 1752457584 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0x7972657571LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 0x746E656D67617266LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 7LL;
    }
    else {
      return 8LL;
    }
  }

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, unsigned __int8 a5)
{
  if (!a1) {
    goto LABEL_40;
  }
  uint64_t v5 = 0LL;
  if (a3 && a4)
  {
    while (1)
    {
      unint64_t v6 = *a3;
      switch(*a3)
      {
        case '!':
        case '$':
        case '\'':
        case '(':
        case ')':
        case '*':
        case ',':
LABEL_8:
          if ((a5 & 0xF6) == 0) {
            goto LABEL_30;
          }
          goto LABEL_27;
        case '&':
LABEL_16:
          if ((a5 & 0x76) == 0) {
            goto LABEL_30;
          }
          goto LABEL_27;
        case '+':
          if ((a5 & 0xF7) == 0) {
            goto LABEL_30;
          }
          goto LABEL_27;
        case '-':
        case '.':
          goto LABEL_26;
        case '/':
LABEL_14:
          if (a5 < 0x10u) {
            goto LABEL_30;
          }
          goto LABEL_27;
        default:
          if ((v6 - 58) <= 0xFFFFFFF5)
          {
            switch(*a3)
            {
              case ':':
                if ((a5 & 0xD2) == 0) {
                  goto LABEL_30;
                }
                goto LABEL_27;
              case ';':
                goto LABEL_8;
              case '=':
                goto LABEL_16;
              case '?':
                if (a5 < 0x40u) {
                  goto LABEL_30;
                }
                goto LABEL_27;
              case '@':
                goto LABEL_14;
              default:
                if ((_DWORD)v6 == 95) {
                  goto LABEL_24;
                }
                if ((_DWORD)v6 != 126) {
                  goto LABEL_30;
                }
LABEL_24:
                if (a5 < 2u) {
                  goto LABEL_30;
                }
                goto LABEL_27;
            }
          }

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  if (!a1) {
    goto LABEL_40;
  }
  uint64_t v5 = 0LL;
  if (a3 && a4)
  {
    while (1)
    {
      unint64_t v6 = *a3;
      switch(*a3)
      {
        case '!':
        case '$':
        case '\'':
        case '(':
        case ')':
        case '*':
        case ',':
LABEL_8:
          if ((a5 & 0xF6) == 0) {
            goto LABEL_30;
          }
          goto LABEL_27;
        case '&':
LABEL_16:
          if ((a5 & 0x76) == 0) {
            goto LABEL_30;
          }
          goto LABEL_27;
        case '+':
          if ((a5 & 0xF7) == 0) {
            goto LABEL_30;
          }
          goto LABEL_27;
        case '-':
        case '.':
          goto LABEL_26;
        case '/':
LABEL_14:
          if (a5 < 0x10u) {
            goto LABEL_30;
          }
          goto LABEL_27;
        default:
          if ((v6 - 58) <= 0xFFFFFFF5)
          {
            switch(*a3)
            {
              case ':':
                if ((a5 & 0xD2) == 0) {
                  goto LABEL_30;
                }
                goto LABEL_27;
              case ';':
                goto LABEL_8;
              case '=':
                goto LABEL_16;
              case '?':
                if (a5 < 0x40u) {
                  goto LABEL_30;
                }
                goto LABEL_27;
              case '@':
                goto LABEL_14;
              default:
                if ((_DWORD)v6 == 95) {
                  goto LABEL_24;
                }
                if ((_DWORD)v6 != 126) {
                  goto LABEL_30;
                }
LABEL_24:
                if (a5 < 2u) {
                  goto LABEL_30;
                }
                goto LABEL_27;
            }
          }

uint64_t sub_182F50DB0()
{
  return swift_deallocObject();
}

uint64_t sub_182F50DD4()
{
  return swift_deallocObject();
}

uint64_t sub_182F50DE4()
{
  return swift_deallocObject();
}

uint64_t specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3LL) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }

  if (v4 < -1) {
    goto LABEL_9;
  }
  uint64_t v8 = isStackAllocationSafe;
  uint64_t v9 = v4 + 1;
  if (v4 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    return a4();
  }

  else
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a4)(v11, v9, v8, a2, a3);
    MEMORY[0x186E20E60](v11, -1LL, -1LL);
  }

  return v10;
}

double _s10Foundation13URLComponentsV01_B0VSgWOi0_(uint64_t a1)
{
  *(void *)a1 = 1LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  return result;
}

uint64_t outlined release of URLComponents(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of URLComponents(uint64_t a1)
{
  return a1;
}

BOOL closure #1 in Sequence<>.contains(_:)specialized partial apply(unsigned __int8 *a1)
{
  return partial apply for specialized closure #1 in Sequence<>.contains(_:)(a1);
}

uint64_t closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, a3);
}

void specialized IndexingIterator.next()()
{
  uint64_t v2 = v0[7];
  uint64_t v3 = (void *)*v0;
  uint64_t v4 = v0[1];
  uint64_t v5 = *(void *)(*v0 + 64LL);
  uint64_t v81 = v4;
  uint64_t v77 = v0[2];
  if (v4 != v77)
  {
    uint64_t v12 = v3[10];
    swift_unknownObjectRetain();
    if (v5)
    {
      swift_unknownObjectRelease();
      if (v2 == v12) {
        return;
      }
    }

    else if (!v2)
    {
      return;
    }

    goto LABEL_18;
  }

  uint64_t v6 = v3[10];
  if (v5) {
    uint64_t v7 = v3[10];
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v4 < 0 || v7 < v4) {
    goto LABEL_163;
  }
  uint64_t v8 = v3[9];
  uint64_t v9 = v3[11];
  if (v5)
  {
    if (v4 < v6 && *(_WORD *)(v5 + 16) != 0)
    {
      uint64_t v76 = v3[9];
      uint64_t v80 = (void *)*v0;
      uint64_t v36 = *(unsigned __int8 *)(v5 + 18);
      if (*(_BYTE *)(v5 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t v39 = -15LL;
        uint64_t v41 = v5;
LABEL_64:
        uint64_t v43 = *(unsigned __int16 *)(v41 + 16);
        if (!*(_WORD *)(v41 + 16)) {
          goto LABEL_62;
        }
        uint64_t v44 = *(void *)(v41 + 40);
        BOOL v32 = __OFSUB__(v4, v44);
        uint64_t v45 = v4 - v44;
        if (v32) {
          goto LABEL_158;
        }
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_159;
        }
        if (v45 + 1 < 1)
        {
          uint64_t v43 = 0LL;
          goto LABEL_63;
        }

        if ((_DWORD)v43 == 1)
        {
          uint64_t v4 = v45;
LABEL_62:
          if (!v4) {
            goto LABEL_63;
          }
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }

        char v46 = (uint64_t *)(v41 + 64);
        uint64_t v47 = 1LL;
        while (1)
        {
          uint64_t v48 = *v46;
          v46 += 3;
          uint64_t v4 = v45 - v48;
          if (__OFSUB__(v45, v48)) {
            break;
          }
          if (__OFADD__(v4, 1LL)) {
            goto LABEL_143;
          }
          if (v4 + 1 < 1)
          {
            uint64_t v43 = v47;
            uint64_t v4 = v45;
LABEL_63:
            char v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
            uint64_t v36 = ((-15LL << v42) - 1) & v36 | (v43 << v42);
            uint64_t v1 = *(void *)(v41 + 24 + 24 * v43);
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            uint64_t v41 = v1;
            if (!*(_BYTE *)(v1 + 18)) {
              goto LABEL_103;
            }
            goto LABEL_64;
          }

          ++v47;
          uint64_t v45 = v4;
          if (v43 == v47) {
            goto LABEL_62;
          }
        }

        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        uint64_t v69 = 1LL;
        uint64_t v37 = v45;
        goto LABEL_152;
      }

      swift_unknownObjectRetain_n();
      uint64_t v1 = v5;
LABEL_103:
      uint64_t v62 = *(unsigned __int16 *)(v1 + 16);
      if (!*(_WORD *)(v1 + 16)) {
        goto LABEL_121;
      }
      uint64_t v63 = *(void *)(v1 + 24);
      BOOL v32 = __OFSUB__(v4, v63);
      uint64_t v64 = v4 - v63;
      if (v32)
      {
LABEL_183:
        __break(1u);
        goto LABEL_184;
      }

      if (__OFADD__(v64, 1LL))
      {
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
        goto LABEL_188;
      }

      if (v64 + 1 < 1)
      {
        uint64_t v62 = 0LL;
      }

      else
      {
        if ((_DWORD)v62 == 1)
        {
          uint64_t v4 = v64;
LABEL_121:
          if (v4)
          {
LABEL_182:
            __break(1u);
            goto LABEL_183;
          }

          goto LABEL_122;
        }

        uint64_t v65 = (uint64_t *)(v1 + 48);
        uint64_t v66 = 1LL;
        while (1)
        {
          uint64_t v67 = *v65;
          v65 += 3;
          uint64_t v4 = v64 - v67;
          if (__OFSUB__(v64, v67)) {
            goto LABEL_173;
          }
          if (__OFADD__(v4, 1LL)) {
            goto LABEL_174;
          }
          if (v4 + 1 < 1) {
            break;
          }
          ++v66;
          uint64_t v64 = v4;
          if (v62 == v66) {
            goto LABEL_121;
          }
        }

        uint64_t v62 = v66;
        uint64_t v4 = v64;
      }

LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }

          goto LABEL_170;
        }

                  id v139 = static String._fromUTF8Repairing(_:)();
                  uint64_t v141 = v140;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v55 = v139;
                  *(void *)(v55 + 8) = v141;
                  *(_OWORD *)(v55 + 16) = 0u;
                  *(_OWORD *)(v55 + 32) = 0u;
                  uint64_t v69 = 11;
LABEL_261:
                  *(_BYTE *)(v55 + 48) = v69;
                  goto LABEL_262;
                }

                unint64_t v157 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v11 + v109);
                LOBYTE(v107) = v157;
                if (__OFADD__(v109, 1LL)) {
                  goto LABEL_269;
                }
                ++v109;
                if (v11 + v109 >= v12) {
                  goto LABEL_270;
                }
              }

              switch(v157)
              {
                case '+':
                case '-':
                  if (v109 != 0 || (v217 & 1) == 0) {
                    goto LABEL_256;
                  }
                  uint64_t v152 = 0;
                  unint64_t v154 = 0;
                  v11 += v109 + 1;
                  unint64_t v153 = 3;
                  if (v11 >= v12) {
                    goto LABEL_300;
                  }
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_256;
                case '.':
                  if ((v212 & 1) == 0)
                  {
                    uint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( v11 + v109,  v213,  v218);
                    uint64_t v52 = v189;
                    uint64_t v54 = v190;
                    LOBYTE(v107) = 46;
                    goto LABEL_257;
                  }

                  uint64_t v152 = 0;
                  unint64_t v154 = 0;
                  v11 += v109 + 1;
                  unint64_t v153 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_214:
                    if (v7 != 0.0) {
                      return v7;
                    }
                    __int128 v89 = v11;
                    __int128 v90 = v12;
                    if (v11 >= 4)
                    {
                      do
                      {
                        uint64_t v160 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90);
                        if ((v160 | 0x20) == 0x65) {
                          return v7;
                        }
                        unint64_t v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90 + 1);
                        if ((v161 | 0x20) == 0x65) {
                          return v7;
                        }
                        uint64_t v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90 + 2);
                        if ((v162 | 0x20) == 0x65) {
                          return v7;
                        }
                        unint64_t v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90 + 3);
                        if ((v163 | 0x20) == 0x65) {
                          return v7;
                        }
                        __int128 v90 = specialized BufferView.dropFirst(_:)(4LL, v90, v89);
                        __int128 v89 = v164;
                      }

                      while (v164 >= 4);
                    }

LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
        goto LABEL_171;
      }

      swift_unknownObjectRetain();
      unint64_t v164 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v346, v162, v163, v147, v148);
      double result = swift_unknownObjectRelease_n();
      goto LABEL_210;
    }

void specialized IndexingIterator.next()(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 200);
  uint64_t v4 = *(void *)(v1 + 72);
  if (v3 == v4)
  {
    *(void *)(a1 + 80) = 0LL;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }

  if (v3 >= v4) {
    goto LABEL_113;
  }
  uint64_t v5 = *(void *)(v1 + 8);
  if (v3 < v5) {
    goto LABEL_113;
  }
  uint64_t v7 = *(void *)(v1 + 208);
  uint64_t v6 = *(void *)(v1 + 216);
  uint64_t v9 = *(void *)(v1 + 224);
  uint64_t v8 = *(void *)(v1 + 232);
  uint64_t v10 = *(void *)(v1 + 240);
  uint64_t v11 = *(void *)(v1 + 248);
  uint64_t v12 = *(void *)(v1 + 256);
  uint64_t v15 = *(void *)(v1 + 144);
  uint64_t v14 = *(void *)(v1 + 152);
  uint64_t v16 = *(void *)(v1 + 160);
  unint64_t v17 = *(void *)(v1 + 168);
  uint64_t v18 = *(void *)(v1 + 192);
  uint64_t v19 = *(void *)(v1 + 128);
  unint64_t v20 = *(void *)(v1 + 136);
  uint64_t v21 = *(void *)(v1 + 64);
  *(void *)&__int128 v115 = *(void *)v1;
  uint64_t v13 = v115;
  *((void *)&v115 + 1) = v5;
  __int128 v22 = *(_OWORD *)(v1 + 32);
  __int128 v116 = *(_OWORD *)(v1 + 16);
  __int128 v117 = v22;
  __int128 v118 = *(_OWORD *)(v1 + 48);
  uint64_t v119 = v21;
  uint64_t v120 = v4;
  __int128 v23 = *(_OWORD *)(v1 + 96);
  __int128 v121 = *(_OWORD *)(v1 + 80);
  __int128 v122 = v23;
  __int128 v123 = *(_OWORD *)(v1 + 112);
  uint64_t v124 = v19;
  unint64_t v125 = v20;
  uint64_t v99 = v14;
  uint64_t v100 = v15;
  uint64_t v126 = v15;
  uint64_t v127 = v14;
  unint64_t v97 = v17;
  uint64_t v98 = v16;
  uint64_t v128 = v16;
  unint64_t v129 = v17;
  uint64_t v92 = v1;
  __int128 v130 = *(_OWORD *)(v1 + 176);
  uint64_t v131 = v18;
  v114[0] = v3;
  v114[1] = v7;
  uint64_t v103 = v12;
  uint64_t v104 = v7;
  unint64_t v90 = v6;
  v114[2] = v6;
  v114[3] = v9;
  v114[4] = v8;
  v114[5] = v10;
  v114[6] = v11;
  v114[7] = v12;
  AttributedString.Runs._resolve(_:)(v114, (uint64_t *)&v108);
  if ((void)v108 != *(void *)(v13 + 88))
  {
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }

  uint64_t v101 = v3;
  unint64_t v91 = v8;
  unint64_t v24 = *((void *)&v108 + 1);
  unint64_t v25 = *((void *)&v110 + 1);
  uint64_t v26 = v111;
  uint64_t v95 = v113;
  uint64_t v96 = v112;
  uint64_t v107 = v13;
  if ((void)v109)
  {
    uint64_t v27 = (void *)(v109 + 24 * ((*((void *)&v108 + 1) >> ((4 * *(_BYTE *)(v109 + 18) + 8) & 0x3C)) & 0xFLL));
    unint64_t v28 = v27[3];
    uint64_t v29 = v27[4];
    uint64_t v30 = v27[5];
    swift_retain();
    uint64_t v94 = v29;
    swift_bridgeObjectRetain();
    uint64_t v93 = v30;
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v31 = *(void *)(v13 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    unint64_t v28 = specialized Rope._Node.subscript.getter(v24, v31);
    uint64_t v93 = v33;
    uint64_t v94 = v32;
    swift_unknownObjectRelease();
  }

  BOOL v34 = v20 >> 10 >= v25 >> 10;
  if (v20 >> 10 >= v25 >> 10) {
    uint64_t v26 = v100;
  }
  else {
    unint64_t v20 = v25;
  }
  if (v34) {
    uint64_t v35 = v99;
  }
  else {
    uint64_t v35 = v96;
  }
  if (v34) {
    uint64_t v36 = v98;
  }
  else {
    uint64_t v36 = v95;
  }
  if (__OFADD__(v28, v25 >> 11)) {
    goto LABEL_115;
  }
  else {
    unint64_t v37 = v97 >> 11;
  }
  __int128 v38 = *(_OWORD *)(v13 + 32);
  __int128 v115 = *(_OWORD *)(v13 + 16);
  __int128 v116 = v38;
  __int128 v117 = *(_OWORD *)(v13 + 48);
  BigString.utf8.getter();
  if (__OFSUB__(v37, v20 >> 11)) {
    goto LABEL_116;
  }
  unint64_t v39 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  outlined release of Locale((uint64_t)v132);
  if (v39 >> 10 < v20 >> 10)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }

  *(void *)a1 = v94;
  *(void *)(a1 + 8) = v93;
  *(void *)(a1 + 16) = v20;
  *(void *)(a1 + 24) = v26;
  *(void *)(a1 + 32) = v35;
  *(void *)(a1 + 40) = v36;
  *(void *)(a1 + 48) = v39;
  *(void *)(a1 + 56) = v41;
  *(void *)(a1 + 64) = v43;
  *(void *)(a1 + 72) = v45;
  *(void *)(a1 + 80) = v107;
  uint64_t v46 = *(void *)(v107 + 64);
  uint64_t v47 = *(void *)(v107 + 72);
  uint64_t v48 = *(void *)(v107 + 80);
  uint64_t v49 = *(void *)(v107 + 88);
  if (v9 != 1 && v104 == v49)
  {
    uint64_t v50 = v103;
    uint64_t v51 = v101;
    if (v103 == 2)
    {
      swift_retain();
      if (v46)
      {
        swift_unknownObjectRetain();
        unint64_t v52 = v90;
        uint64_t v53 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v104, v90, v9, v46, v47, v48);
        uint64_t v54 = v104;
        uint64_t v50 = 2LL;
      }

      else
      {
        uint64_t v53 = 0LL;
        unint64_t v52 = v90;
        uint64_t v54 = v104;
      }
    }

    else
    {
      uint64_t v53 = v91 >> 11;
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t v54 = v104;
      unint64_t v52 = v90;
    }

LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }

                          swift_bridgeObjectRelease();
LABEL_79:
                          countAndFlagsBits = v136._countAndFlagsBits;
LABEL_80:
                          *(void *)uint64_t v142 = v13;
                          *(_OWORD *)&v142[8] = 0u;
                          uint64_t v143 = 0u;
                          unint64_t v144 = 0;
                          if ((v4 & 1) != 0)
                          {
                            outlined assign with take of PredicateCodableConfiguration.AllowListKeyPath( (uint64_t)v142,  *(void *)(v71 + 56) + 48 * v5);
                          }

                          else
                          {
                            specialized _NativeDictionary._insert(at:key:value:)( v5,  countAndFlagsBits,  (uint64_t)v136._object,  (uint64_t)v142,  (void *)v71);
                            swift_bridgeObjectRetain();
                          }

                          *__int128 v130 = v71;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v75 = dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
                          PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v75, 0LL, 0LL, 0);
                          dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
                          return PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)( v76,  0LL,  0LL,  0);
                        }

                        uint64_t v96 = v134 + 8;
                        uint64_t v71 = v127;
                      }
                    }
                  }
                }
              }
            }
          }

                        uint64_t v120 = (v88 - 1) & v88;
                        __int128 v121 = v89;
                        uint64_t v86 = __clz(__rbit64(v88)) + (v89 << 6);
                      }

                      unint64_t v91 = (uint64_t *)(v2[6] + 16 * v86);
                      uint64_t v93 = *v91;
                      uint64_t v92 = v91[1];
                      uint64_t v94 = v2[7] + 48 * v86;
                      uint64_t v96 = *(void *)v94;
                      uint64_t v95 = *(void *)(v94 + 8);
                      uint64_t v98 = *(void *)(v94 + 16);
                      unint64_t v97 = *(void *)(v94 + 24);
                      uint64_t v99 = *(void *)(v94 + 32);
                      uint64_t v100 = *(unsigned __int8 *)(v94 + 40);
                      Hasher.init(_seed:)();
                      swift_bridgeObjectRetain();
                      __int128 v115 = v96;
                      __int128 v116 = v98;
                      __int128 v118 = v95;
                      LODWORD(v117) = v100;
                      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v96, v95, v98, v97, v99, v100);
                      String.hash(into:)();
                      uint64_t v101 = Hasher._finalize()();
                      unint64_t v77 = v112;
                      __int128 v102 = -1LL << *((_BYTE *)v112 + 32);
                      uint64_t v103 = v101 & ~v102;
                      uint64_t v104 = v103 >> 6;
                      if (((-1LL << v103) & ~v81[v103 >> 6]) != 0)
                      {
                        __int128 v82 = __clz(__rbit64((-1LL << v103) & ~v81[v103 >> 6])) | v103 & 0x7FFFFFFFFFFFFFC0LL;
                      }

                      else
                      {
                        uint64_t v105 = 0;
                        uint64_t v106 = (unint64_t)(63 - v102) >> 6;
                        do
                        {
                          if (++v104 == v106 && (v105 & 1) != 0) {
                            goto LABEL_133;
                          }
                          uint64_t v107 = v104 == v106;
                          if (v104 == v106) {
                            uint64_t v104 = 0LL;
                          }
                          v105 |= v107;
                          __int128 v108 = v81[v104];
                        }

                        while (v108 == -1);
                        __int128 v82 = __clz(__rbit64(~v108)) + (v104 << 6);
                      }

                      *(void *)((char *)v81 + ((v82 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v82;
                      uint64_t v83 = (void *)(v77[6] + 16 * v82);
                      void *v83 = v93;
                      v83[1] = v92;
                      uint64_t v84 = v77[7] + 48 * v82;
                      uint64_t v85 = v118;
                      uint64_t v2 = (void *)v119;
                      *(void *)uint64_t v84 = v115;
                      *(void *)(v84 + 8) = v85;
                      *(void *)(v84 + 16) = v116;
                      *(void *)(v84 + 24) = v97;
                      *(void *)(v84 + 32) = v99;
                      *(_BYTE *)(v84 + 40) = v117;
                      ++v77[2];
                      uint64_t v80 = v114 - 1;
                      uint64_t v79 = v120;
                      unint64_t v78 = v121;
                      if (v114 == 1) {
                        goto LABEL_129;
                      }
                    }
                  }

                  BOOL v34 = v26 + 5;
                }
              }
            }
          }

          unint64_t v159 = (void *)v141;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_141;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          unint64_t v144 = (int)POSIXErrorCode.rawValue.getter();
          unint64_t v145 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          unint64_t v146 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v142 = objc_msgSend(v145, sel_initWithDomain_code_userInfo_, v146, v144, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v147 = objc_msgSend(v142, sel_domain);
          char v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
          uint64_t v5 = v149;

          if (v148 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v5 == v150) {
            goto LABEL_126;
          }
          uint64_t v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v152 & 1) == 0)
          {
            __break(1u);
LABEL_126:
            swift_bridgeObjectRelease_n();
          }

          uint64_t v143 = (uint64_t)v159;
          goto LABEL_128;
      }
    }
  }

  uint64_t v5 = (const char *)&v155;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  uint64_t v14 = (char *)&v155 - v13;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v12, 1, a1, a2);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))4,  a3,  a4,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v165,  0LL,  0LL);
    swift_willThrow();
LABEL_108:
    swift_willThrow();
LABEL_130:
    swift_bridgeObjectRelease();
    return v5;
  }

  unint64_t v158 = (const char *)&v155;
  type metadata accessor for _FTSSequence.Iterator();
  swift_initStackObject();
  uint64_t v160 = _FTSSequence.Iterator.init(_:_:)(v14, 28);
  unint64_t v17 = _FTSSequence.Iterator.next()();
  if (v20 == 0xFF)
  {
    uint64_t v5 = (const char *)MEMORY[0x18961AFE8];
    goto LABEL_82;
  }

  uint64_t v21 = v17;
  __int128 v22 = v18;
  __int128 v23 = v19;
  unint64_t v24 = v20;
  uint64_t v156 = v4;
  unint64_t v157 = a4;
  unint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = (void *)MEMORY[0x18961AFE8];
LABEL_12:
  unint64_t v159 = v27;
  do
  {
    if ((v24 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_86;
    }

    uint64_t v31 = *(unsigned __int16 *)(v21 + 88);
    if (v31 > 0xD) {
      goto LABEL_14;
    }
    uint64_t v32 = 1 << v31;
    if ((v32 & 0x390A) == 0)
    {
      if ((v32 & 0x490) == 0)
      {
LABEL_14:
        outlined consume of _FTSSequence.Element?(v21, v22, v23, v24);
        goto LABEL_15;
      }

      if (!*(void *)(v21 + 48)) {
        goto LABEL_139;
      }
      __int128 v121 = String.init(cString:)();
      __int128 v123 = v122;
      uint64_t v124 = *(_DWORD *)(v21 + 56);
      outlined consume of _FTSSequence.Element?(v21, v22, v23, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LODWORD(v21) = v124;
      __int128 v22 = v121;
      __int128 v23 = v123;
LABEL_86:
      uint64_t v5 = v158;
      unint64_t v125 = 263LL;
      switch((int)v21)
      {
        case 1:
        case 13:
          unint64_t v125 = 257LL;
          goto LABEL_98;
        case 2:
          unint64_t v125 = 260LL;
          goto LABEL_98;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_95;
        case 27:
          goto LABEL_98;
        default:
          if ((_DWORD)v21 == 63)
          {
            unint64_t v125 = 258LL;
          }

          else
          {
            if ((_DWORD)v21 == 102)
            {
              uint64_t v126 = 0LL;
              unint64_t v125 = 256LL;
LABEL_107:
              swift_bridgeObjectRetain();
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v125,  v22,  v23,  v126,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v165,  0LL,  0LL);
              swift_willThrow();
              outlined consume of SubpathElement();
              swift_release();
              goto LABEL_108;
            }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v84 = v87 & 0xFFFFFFFFFFFFF0FFLL | (v100 << 8);
    uint64_t v62 = v229;
LABEL_82:
    swift_unknownObjectRetain();
    uint64_t v66 = v234;
    uint64_t v85 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v234, v84, v64, v82, v83, v232);
    swift_unknownObjectRelease_n();
    goto LABEL_121;
  }

    if (v9) {
      goto LABEL_360;
    }
    goto LABEL_120;
  }

  return result;
}

        if (v107 < v99)
        {
          __int128 v109 = v107 - v11;
          __int128 v110 = _asciiNumbers.getter();
          uint64_t v111 = v110;
          uint64_t v112 = 0;
          char v207 = v98 + v11;
          unint64_t v205 = -v11;
          uint64_t v113 = 1;
          int v114 = HIBYTE(v110);
          __int128 v115 = 1;
          while (1)
          {
            id v210 = v115;
            unint64_t v215 = v113;
            __int128 v116 = v207 - v107;
            __int128 v117 = v205 + v107;
            while (1)
            {
              if ((v117 & 0x8000000000000000LL) != 0 || (uint64_t v105 = v116 < 1, --v116, v105))
              {
                __break(1u);
LABEL_254:
                __break(1u);
LABEL_255:
                __break(1u);
LABEL_256:
                uint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v109, v213, v218);
                unint64_t v52 = v178;
                uint64_t v54 = v179;
LABEL_257:
                unint64_t v172 = 0xE900000000000072LL;
                unint64_t v173 = 0x65626D756E206E69LL;
LABEL_258:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v55 = v173;
                *(void *)(v55 + 8) = v172;
                *(void *)(v55 + 16) = v107;
LABEL_259:
                *(void *)(v55 + 24) = v50;
                *(void *)(v55 + 32) = v52;
                *(void *)(v55 + 40) = v54;
LABEL_260:
                uint64_t v69 = 1;
                goto LABEL_261;
              }

              __int128 v118 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v107);
              uint64_t v11 = v118;
              if (__OFADD__(v109, 1LL)) {
                goto LABEL_254;
              }
              ++v107;
              ++v109;
              ++v117;
              if (v107 >= v99) {
                goto LABEL_255;
              }
            }

            switch((char)v118)
            {
              case '+':
              case '-':
                if (v109 != 0 || (v112 & 1) == 0) {
                  goto LABEL_140;
                }
                __int128 v109 = 0LL;
                uint64_t v112 = 0;
                uint64_t v113 = 0;
                __int128 v115 = 0;
                if (++v107 >= v99) {
                  goto LABEL_294;
                }
                continue;
              case ',':
              case '/':
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
              case ':':
              case ';':
              case '<':
              case '=':
              case '>':
              case '?':
              case '@':
              case 'A':
              case 'B':
              case 'C':
              case 'D':
                goto LABEL_140;
              case '.':
                if (v109 < 1 || (v210 & 1) == 0) {
                  goto LABEL_140;
                }
                __int128 v109 = 0LL;
                uint64_t v112 = 0;
                __int128 v115 = 0;
                ++v107;
                uint64_t v113 = 1;
                if (v107 < v99) {
                  continue;
                }
                __break(1u);
                goto LABEL_140;
              case 'E':
                goto LABEL_134;
              default:
LABEL_134:
                if (v109 < 1 || (v215 & 1) == 0)
                {
LABEL_140:
                  uint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v107, v213, v218);
                  unint64_t v52 = v119;
                  uint64_t v54 = v120;
                  uint64_t v11 = v11;
                  goto LABEL_248;
                }

                __int128 v109 = 0LL;
                uint64_t v113 = 0;
                __int128 v115 = 0;
                ++v107;
                uint64_t v112 = 1;
                if (v107 >= v99) {
                  goto LABEL_295;
                }
                break;
            }
          }
        }

                    __break(1u);
                    goto LABEL_120;
                  }

                  uint64_t v35 = v44;
                }
              }
            }
          }

  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
  return result;
}

                    __break(1u);
                    goto LABEL_120;
                  }

                  uint64_t v36 = v45;
                }
              }
            }
          }

                    __break(1u);
                    goto LABEL_120;
                  }

                  uint64_t v35 = v44;
                }
              }
            }
          }

  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
  return result;
}

                    __break(1u);
                    goto LABEL_120;
                  }

                  uint64_t v35 = v44;
                }
              }
            }
          }

LABEL_118:
    __break(1u);
    goto LABEL_119;
  }

  if (v46) {
    uint64_t v55 = *(void *)(v107 + 72);
  }
  else {
    uint64_t v55 = 0LL;
  }
  uint64_t v50 = v103;
  uint64_t v51 = v101;
  if (v101 < 0 || v55 < v101)
  {
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }

  if (!v46)
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v52 = 0LL;
    goto LABEL_65;
  }

  if (v101 >= v47 || !*(_WORD *)(v46 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v52 = ((-15LL << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v46 + 18) | ((unint64_t)*(unsigned __int16 *)(v46 + 16) << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C));
LABEL_65:
    swift_unknownObjectRelease();
    uint64_t v9 = 0LL;
    if (!v46)
    {
      uint64_t v53 = 0LL;
      goto LABEL_96;
    }

          swift_willThrow();

          return;
        }

        goto LABEL_117;
      }

      unint64_t v20 = (unint64_t)v126;
LABEL_23:
      unint64_t v25 = read(a1, a3, v24);
      if (v25 < (uint64_t)0xFFFFFFFF80000000LL)
      {
        __break(1u);
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }

      if (v25 > 0x7FFFFFFF) {
        goto LABEL_121;
      }
      if ((v25 & 0x80000000) == 0) {
        break;
      }
    }

    unint64_t v20 = v25;
    if (!(_DWORD)v25) {
      goto LABEL_125;
    }
    uint64_t v26 = v25;
    v19 -= v25;
    if (v19 < 0) {
      break;
    }
    if (v126) {
      goto LABEL_35;
    }
    if ((v122 & 1) == 0) {
      goto LABEL_37;
    }
LABEL_38:
    a3 += v26;
    unint64_t v20 = (unint64_t)v126;
    uint64_t v16 = v118;
    if (!v19) {
      goto LABEL_42;
    }
  }

  if (v126)
  {
    uint64_t v19 = 0LL;
LABEL_35:
    if (!__OFSUB__(a4, v19))
    {
      __int128 v116 = v25;
      objc_msgSend(v126, sel_setCompletedUnitCount_, a4 - v19);
      uint64_t v26 = v116;
      if ((v122 & 1) != 0) {
        goto LABEL_38;
      }
LABEL_37:
      if (v24 <= v20) {
        goto LABEL_38;
      }
LABEL_125:
      unint64_t v20 = (unint64_t)v126;
      goto LABEL_42;
    }

    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    v130._countAndFlagsBits = 0xD000000000000014LL;
    v130._object = (void *)0x80000001839C9190LL;
    LODWORD(v127) = (_DWORD)v17;
    v112._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v112);
    swift_bridgeObjectRelease();
    LODWORD(v115) = 0;
    int v114 = 73LL;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x182FE4134LL);
  }

              unint64_t v97 = (4 * *(_BYTE *)(v19 + 18) + 8) & 0x3C;
              uint64_t v15 = ((-15LL << v97) - 1) & v15 | (v53 << v97);
              uint64_t v89 = *(void *)(v19 + 24 + 24 * v53);
              swift_unknownObjectRetain();
              double result = swift_unknownObjectRelease();
              uint64_t v19 = v89;
              if (!*(_BYTE *)(v89 + 18)) {
                goto LABEL_145;
              }
            }
          }

          double result = swift_unknownObjectRetain_n();
          uint64_t v2 = v324 >> 11;
          uint64_t v89 = v40;
LABEL_145:
          uint64_t v112 = *(unsigned __int16 *)(v89 + 16);
          if (!*(_WORD *)(v89 + 16)) {
            goto LABEL_430;
          }
          uint64_t v113 = *(void *)(v89 + 24);
          uint64_t v45 = __OFSUB__(v2, v113);
          int v114 = v2 - v113;
          if (v45) {
            goto LABEL_414;
          }
          uint64_t v95 = v13;
          uint64_t v94 = v96;
          if (v114 <= 0)
          {
            __int128 v117 = 0LL;
            uint64_t v63 = (uint64_t)v323;
          }

          else
          {
            uint64_t v63 = (uint64_t)v323;
            if ((_DWORD)v112 == 1) {
              goto LABEL_432;
            }
            __int128 v115 = *(void *)(v89 + 48);
            uint64_t v2 = v114 - v115;
            if (__OFSUB__(v114, v115)) {
              goto LABEL_416;
            }
            if (v2 >= 1)
            {
              if ((_DWORD)v112 == 2) {
                goto LABEL_432;
              }
              __int128 v116 = (void *)(v89 + 72);
              __int128 v117 = 2LL;
              while (v112 != v117)
              {
                __int128 v118 = v2 - *v116;
                if (__OFSUB__(v2, *v116)) {
                  goto LABEL_380;
                }
                if (v118 < 1) {
                  goto LABEL_160;
                }
                ++v117;
                v116 += 3;
                uint64_t v2 = v118;
                if (v112 == v117) {
                  goto LABEL_432;
                }
              }

              goto LABEL_379;
            }

            uint64_t v2 = v114;
            __int128 v117 = 1LL;
          }

      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }

  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  _StringGuts.grow(_:)(75LL);
  v86._countAndFlagsBits = 0xD000000000000019LL;
  v86._object = (void *)0x80000001839CF3E0LL;
  String.append(_:)(v86);
  v87._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v87);
  swift_bridgeObjectRelease();
  v88._object = (void *)0x80000001839CF400LL;
  v88._countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v88);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v89._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._countAndFlagsBits = 0xD000000000000017LL;
  v90._object = (void *)0x80000001839CF3C0LL;
  String.append(_:)(v90);
  v91._countAndFlagsBits = a2;
  v91._object = a3;
  String.append(_:)(v91);
  v92._countAndFlagsBits = 39LL;
  v92._object = (void *)0xE100000000000000LL;
  String.append(_:)(v92);
LABEL_122:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_123:
  double result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

          uint64_t v140 = (v95 - 1) & v95;
          uint64_t v134 = v96;
          uint64_t v83 = __clz(__rbit64(v95)) + (v96 << 6);
        }

        uint64_t v84 = 16 * v83;
        uint64_t v85 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v83);
        uint64_t v87 = *v85;
        uint64_t v86 = v85[1];
        uint64_t v88 = 48 * v83;
        uint64_t v89 = *(void *)(v10 + 56) + v88;
        uint64_t v6 = *(void *)(v89 + 8);
        uint64_t v138 = *(void *)v89;
        unint64_t v90 = *(void *)v89;
        uint64_t v7 = *(void **)(v89 + 16);
        uint64_t v8 = *(void *)(v89 + 24);
        uint64_t v9 = *(void *)(v89 + 32);
        unint64_t v91 = *(_BYTE *)(v89 + 40);
        uint64_t v92 = (void *)(*(void *)(v71 + 48) + v84);
        *uint64_t v92 = v87;
        v92[1] = v86;
        uint64_t v93 = *(void *)(v71 + 56) + v88;
        *(void *)uint64_t v93 = v90;
        *(void *)(v93 + 8) = v6;
        *(void *)(v93 + 16) = v7;
        *(void *)(v93 + 24) = v8;
        *(void *)(v93 + 32) = v9;
        *(_BYTE *)(v93 + 40) = v91;
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v138, v6, (uint64_t)v7, v8, v9, v91);
      }
    }

  uint64_t v152 = (const __CFAllocator *)*MEMORY[0x189604DD0];
  unint64_t v153 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  unint64_t v154 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v152, v153);
  swift_unknownObjectRelease();
  if (v154)
  {
    uint64_t v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
    unint64_t v157 = v156;
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v155 = 0LL;
    unint64_t v157 = 0xE000000000000000LL;
  }

  unint64_t v159 = v176;
  uint64_t v160 = v177;
  unint64_t v161 = v178;
  uint64_t v162 = v175;
  *(void *)(v177 + 16) = v155;
  *(void *)(v160 + 24) = v157;
  *(void *)&uint64_t v184 = v159;
  *((void *)&v184 + 1) = v37;
  uint64_t v185 = v39;
  unint64_t v186 = v38;
  id v189 = v201;
  char v190 = v202;
  unint64_t v191 = v203;
  id v187 = v199;
  unint64_t v188 = v200;
  uint64_t v192 = v204;
  id v193 = v161;
  unint64_t v194 = (unint64_t)v181;
  id v195 = v162;
  destructiveProjectEnumData for PredicateCodableError(&v184, v158);
  outlined init with take of LocalePreferences?((uint64_t)&v184, v160 + 32);
  LOBYTE(v198[0]) = 1;
  LOBYTE(v196) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_LocaleICU.State>._Buffer);
  unint64_t v163 = swift_allocObject();
  *(_DWORD *)(v163 + 560) = 0;
  *(_OWORD *)(v163 + 32) = 0u;
  *(_OWORD *)(v163 + 48) = 0u;
  *(_OWORD *)(v163 + 64) = 0u;
  *(_OWORD *)(v163 + 80) = 0u;
  *(_OWORD *)(v163 + 96) = 0u;
  *(_BYTE *)(v163 + 112) = 16;
  *(_OWORD *)(v163 + 120) = 0u;
  *(_OWORD *)(v163 + 136) = 0u;
  *(void *)(v163 + 152) = 0LL;
  *(void *)(v163 + 160) = 1LL;
  *(_OWORD *)(v163 + 168) = 0u;
  *(_OWORD *)(v163 + 184) = 0u;
  *(_OWORD *)(v163 + 200) = 0u;
  *(void *)(v163 + 216) = 0LL;
  *(_BYTE *)(v163 + 224) = 7;
  *(_OWORD *)(v163 + 232) = 0u;
  *(_OWORD *)(v163 + 248) = 0u;
  *(_BYTE *)(v163 + 280) = 0;
  *(_BYTE *)(v163 + 281) = v198[0];
  *(void *)(v163 + 288) = 0LL;
  *(_BYTE *)(v163 + 296) = v196;
  *(_BYTE *)(v163 + 297) = 4;
  *(_OWORD *)(v163 + 304) = 0u;
  *(_OWORD *)(v163 + 320) = 0u;
  *(_BYTE *)(v163 + 336) = 2;
  *(void *)(v163 + 344) = 0LL;
  *(void *)(v163 + 352) = 1LL;
  *(void *)(v163 + 360) = 0LL;
  *(void *)(v163 + 368) = 0LL;
  *(void *)(v163 + 376) = 0LL;
  *(void *)(v163 + 384) = 1LL;
  *(void *)(v163 + 392) = 0LL;
  *(void *)(v163 + 400) = 0LL;
  *(void *)(v163 + 408) = 1LL;
  *(void *)(v163 + 416) = 0LL;
  *(void *)(v163 + 424) = 0LL;
  *(void *)(v163 + 432) = 1LL;
  unint64_t v164 = MEMORY[0x18961AFF0];
  *(void *)(v163 + 472) = MEMORY[0x18961AFF0];
  *(void *)(v163 + 480) = v164;
  *(void *)(v163 + 488) = v164;
  *(void *)(v163 + 496) = v164;
  *(void *)(v163 + 504) = v164;
  *(void *)(v163 + 512) = v164;
  *(void *)(v163 + 520) = v164;
  *(void *)(v163 + 528) = v164;
  *(void *)(v163 + 536) = v164;
  *(void *)(v163 + 544) = v164;
  *(void *)(v163 + 552) = v164;
  *(void *)(v160 + 176) = v163;
  *(_OWORD *)(v163 + 16) = xmmword_183723F60;
  *(_OWORD *)(v163 + 264) = 0u;
  *(_OWORD *)(v163 + 440) = 0u;
  *(_OWORD *)(v163 + 456) = 0u;
  return v160;
}

      if (!v123) {
        goto LABEL_260;
      }
      v635 = v153;
LABEL_125:

      swift_bridgeObjectRelease();
      outlined consume of URL?((void *)v65);
      goto LABEL_126;
    }

    v660 = 0LL;
    unint64_t v153 = v152;
    swift_bridgeObjectRelease();
LABEL_121:
    __int128 v123 = v723;
    if ((v688 & 1) == 0) {
      goto LABEL_122;
    }
    goto LABEL_118;
  }

  *(void *)&v755[0] = 0xD000000000000022LL;
  *((void *)&v755[0] + 1) = 0x80000001839D0660LL;
  unint64_t v147 = objc_msgSend(v654, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v147)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v755, 0, 32);
  }

  outlined init with take of LocalePreferences?( (uint64_t)v755,  (uint64_t)v756,  &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v756[1] + 1)) {
    goto LABEL_115;
  }
  char v148 = v755[0];
  LOBYTE(v756[0]) = (_BYTE)v674;
  BYTE1(v756[0]) = (_BYTE)v675;
  BYTE2(v756[0]) = (_BYTE)v677;
  *((void *)&v756[0] + 1) = v126;
  *(void *)&v756[1] = v125;
  BYTE8(v756[1]) = (_BYTE)v680;
  memset(v755, 0, 24);
  swift_bridgeObjectRetain();
  unint64_t v149 = (void *)v660;
  unint64_t v150 = static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( v838,  v148,  *((unint64_t *)&v148 + 1),  (uint64_t)v685,  (char *)v756,  (uint64_t)v755,  (uint64_t)v685,  (uint64_t)v684);
  if (!v149)
  {
    unint64_t v153 = v150;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v723 = *(void *)&v838[0];
    v602 = (unint64_t)v678;
    swift_bridgeObjectRetain();
    v607 = 0LL;
    v608 = 0LL;
    specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( v756,  (uint64_t)v676,  v602,  512,  0LL,  0LL,  0,  0LL);
    v660 = 0LL;
    swift_bridgeObjectRelease();
    specialized AttributedString.subscript.setter(*(uint64_t *)&v756[0]);
    goto LABEL_121;
  }

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if ((v688 & 1) == 0)
  {
    v660 = 0LL;
    goto LABEL_257;
  }

              __break(1u);
LABEL_119:
              __break(1u);
              goto LABEL_120;
            }

      if (v84 < v76)
      {
        int v114 = v84 - v11;
        __int128 v115 = _asciiNumbers.getter();
        __int128 v117 = v115;
        __int128 v118 = 0;
        uint64_t v212 = v75 + v11;
        uint64_t v209 = -v11;
        uint64_t v119 = 1;
        uint64_t v120 = HIBYTE(v115);
        __int128 v121 = 1;
        while (1)
        {
          char v219 = v118;
          char v216 = v119;
          __int128 v122 = v212 - v84;
          __int128 v123 = v209 + v84;
          while (1)
          {
            if ((v123 & 0x8000000000000000LL) != 0 || (__int128 v82 = v122 < 1, --v122, v82))
            {
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              uint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v76, v116, v215);
              uint64_t v95 = v176;
              unint64_t v97 = v177;
LABEL_244:
              unint64_t v172 = 0xE900000000000072LL;
              unint64_t v173 = 0x65626D756E206E69LL;
LABEL_245:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)unint64_t v39 = v173;
              *(void *)(v39 + 8) = v172;
              *(void *)(v39 + 16) = v84;
LABEL_246:
              *(void *)(v39 + 24) = v93;
              *(void *)(v39 + 32) = v95;
              *(void *)(v39 + 40) = v97;
LABEL_247:
              uint64_t v104 = 1;
              goto LABEL_248;
            }

            uint64_t v124 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v84);
            uint64_t v11 = v124;
            if (__OFADD__(v114, 1LL)) {
              goto LABEL_241;
            }
            ++v84;
            ++v114;
            ++v123;
            if (v84 >= v76) {
              goto LABEL_242;
            }
          }

          switch((char)v124)
          {
            case '+':
            case '-':
              if (v114 != 0 || (v219 & 1) == 0) {
                goto LABEL_139;
              }
              int v114 = 0LL;
              __int128 v118 = 0;
              uint64_t v119 = 0;
              __int128 v121 = 0;
              if (++v84 >= v76) {
                goto LABEL_292;
              }
              continue;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_139;
            case '.':
              if (v114 < 1 || (v121 & 1) == 0) {
                goto LABEL_139;
              }
              int v114 = 0LL;
              __int128 v118 = 0;
              __int128 v121 = 0;
              ++v84;
              uint64_t v119 = 1;
              if (v84 < v76) {
                continue;
              }
              __break(1u);
              goto LABEL_139;
            case 'E':
              goto LABEL_133;
            default:
LABEL_133:
              if (v114 < 1 || (v216 & 1) == 0)
              {
LABEL_139:
                uint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v84, v222, v215);
                uint64_t v95 = v125;
                unint64_t v97 = v126;
                uint64_t v11 = v11;
                goto LABEL_237;
              }

              int v114 = 0LL;
              uint64_t v119 = 0;
              __int128 v121 = 0;
              ++v84;
              __int128 v118 = 1;
              if (v84 >= v76) {
                goto LABEL_293;
              }
              break;
          }
        }
      }

      if (v84 < v76)
      {
        int v114 = v84 - v11;
        __int128 v115 = _asciiNumbers.getter();
        __int128 v117 = v115;
        __int128 v118 = 0;
        uint64_t v212 = v75 + v11;
        uint64_t v209 = -v11;
        uint64_t v119 = 1;
        uint64_t v120 = HIBYTE(v115);
        __int128 v121 = 1;
        while (1)
        {
          char v219 = v118;
          char v216 = v119;
          __int128 v122 = v212 - v84;
          __int128 v123 = v209 + v84;
          while (1)
          {
            if ((v123 & 0x8000000000000000LL) != 0 || (__int128 v82 = v122 < 1, --v122, v82))
            {
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              uint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v76, v116, v215);
              uint64_t v95 = v176;
              unint64_t v97 = v177;
LABEL_244:
              unint64_t v172 = 0xE900000000000072LL;
              unint64_t v173 = 0x65626D756E206E69LL;
LABEL_245:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)unint64_t v39 = v173;
              *(void *)(v39 + 8) = v172;
              *(void *)(v39 + 16) = v84;
LABEL_246:
              *(void *)(v39 + 24) = v93;
              *(void *)(v39 + 32) = v95;
              *(void *)(v39 + 40) = v97;
LABEL_247:
              uint64_t v104 = 1;
              goto LABEL_248;
            }

            uint64_t v124 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v84);
            uint64_t v11 = v124;
            if (__OFADD__(v114, 1LL)) {
              goto LABEL_241;
            }
            ++v84;
            ++v114;
            ++v123;
            if (v84 >= v76) {
              goto LABEL_242;
            }
          }

          switch((char)v124)
          {
            case '+':
            case '-':
              if (v114 != 0 || (v219 & 1) == 0) {
                goto LABEL_139;
              }
              int v114 = 0LL;
              __int128 v118 = 0;
              uint64_t v119 = 0;
              __int128 v121 = 0;
              if (++v84 >= v76) {
                goto LABEL_293;
              }
              continue;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_139;
            case '.':
              if (v114 < 1 || (v121 & 1) == 0) {
                goto LABEL_139;
              }
              int v114 = 0LL;
              __int128 v118 = 0;
              __int128 v121 = 0;
              ++v84;
              uint64_t v119 = 1;
              if (v84 < v76) {
                continue;
              }
              __break(1u);
              goto LABEL_139;
            case 'E':
              goto LABEL_133;
            default:
LABEL_133:
              if (v114 < 1 || (v216 & 1) == 0)
              {
LABEL_139:
                uint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v84, v222, v215);
                uint64_t v95 = v125;
                unint64_t v97 = v126;
                uint64_t v11 = v11;
                goto LABEL_237;
              }

              int v114 = 0LL;
              uint64_t v119 = 0;
              __int128 v121 = 0;
              ++v84;
              __int128 v118 = 1;
              if (v84 >= v76) {
                goto LABEL_294;
              }
              break;
          }
        }
      }

      if (v93 < v85)
      {
        __int128 v116 = v93 - v11;
        __int128 v117 = _asciiNumbers.getter();
        uint64_t v119 = v117;
        uint64_t v120 = 0;
        char v214 = v84 + v11;
        unint64_t v211 = -v11;
        __int128 v121 = 1;
        __int128 v122 = HIBYTE(v117);
        __int128 v123 = 1;
        while (1)
        {
          id v221 = v120;
          uint64_t v218 = v121;
          uint64_t v124 = v214 - v93;
          unint64_t v125 = v211 + v93;
          while (1)
          {
            if ((v125 & 0x8000000000000000LL) != 0 || (unint64_t v91 = v124 < 1, --v124, v91))
            {
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              uint64_t v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v85, v118, v217);
              unint64_t v97 = v178;
              uint64_t v99 = v179;
LABEL_244:
              unint64_t v174 = 0xE900000000000072LL;
              unint64_t v175 = 0x65626D756E206E69LL;
LABEL_245:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)unint64_t v39 = v175;
              *(void *)(v39 + 8) = v174;
              *(void *)(v39 + 16) = v93;
LABEL_246:
              *(void *)(v39 + 24) = v95;
              *(void *)(v39 + 32) = v97;
              *(void *)(v39 + 40) = v99;
LABEL_247:
              uint64_t v106 = 1;
              goto LABEL_248;
            }

            uint64_t v126 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v93);
            uint64_t v11 = v126;
            if (__OFADD__(v116, 1LL)) {
              goto LABEL_241;
            }
            ++v93;
            ++v116;
            ++v125;
            if (v93 >= v85) {
              goto LABEL_242;
            }
          }

          switch((char)v126)
          {
            case '+':
            case '-':
              if (v116 != 0 || (v221 & 1) == 0) {
                goto LABEL_139;
              }
              __int128 v116 = 0LL;
              uint64_t v120 = 0;
              __int128 v121 = 0;
              __int128 v123 = 0;
              if (++v93 >= v85) {
                goto LABEL_292;
              }
              continue;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_139;
            case '.':
              if (v116 < 1 || (v123 & 1) == 0) {
                goto LABEL_139;
              }
              __int128 v116 = 0LL;
              uint64_t v120 = 0;
              __int128 v123 = 0;
              ++v93;
              __int128 v121 = 1;
              if (v93 < v85) {
                continue;
              }
              __break(1u);
              goto LABEL_139;
            case 'E':
              goto LABEL_133;
            default:
LABEL_133:
              if (v116 < 1 || (v218 & 1) == 0)
              {
LABEL_139:
                uint64_t v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v93, v224, v217);
                unint64_t v97 = v127;
                uint64_t v99 = v128;
                uint64_t v11 = v11;
                goto LABEL_237;
              }

              __int128 v116 = 0LL;
              __int128 v121 = 0;
              __int128 v123 = 0;
              ++v93;
              uint64_t v120 = 1;
              if (v93 >= v85) {
                goto LABEL_293;
              }
              break;
          }
        }
      }

                  swift_release_n();
                  uint64_t v8 = v91;
                  a2 = v93;
                  uint64_t v5 = v4;
LABEL_102:
                  *uint64_t v5 = v12;
                  Hasher.init(_seed:)();
                  String.hash(into:)();
                  double result = Hasher._finalize()();
                  uint64_t v79 = -1LL << *(_BYTE *)(v12 + 32);
                  a3 = result & ~v79;
                  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
                  {
                    uint64_t v80 = *(void *)(v12 + 48);
                    __int128 v81 = (void *)(v80 + 16 * a3);
                    __int128 v82 = *v81 == v8 && v81[1] == a2;
                    if (v82 || (double result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                    {
LABEL_115:
                      double result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }

                    else
                    {
                      uint64_t v83 = ~v79;
                      while (1)
                      {
                        a3 = (a3 + 1) & v83;
                        if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
                          break;
                        }
                        uint64_t v84 = (void *)(v80 + 16 * a3);
                        if (*v84 != v8 || v84[1] != a2)
                        {
                          double result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) == 0) {
                            continue;
                          }
                        }

                        goto LABEL_115;
                      }
                    }
                  }

                  goto LABEL_116;
                }

                uint64_t v61 = v68;
              }
            }
          }

                    __break(1u);
                    goto LABEL_119;
                  }

                  uint64_t v35 = v44;
                }
              }
            }
          }

                    __break(1u);
                    goto LABEL_119;
                  }

                  uint64_t v35 = v44;
                }
              }
            }
          }

                    __break(1u);
                    goto LABEL_119;
                  }

                  uint64_t v35 = v44;
                }
              }
            }
          }

LABEL_66:
    swift_unknownObjectRetain();
    uint64_t v53 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v49, v52, v9, v46, v47, v48);
    swift_unknownObjectRelease_n();
LABEL_96:
    uint64_t v54 = v49;
    goto LABEL_97;
  }

  uint64_t v105 = *(void *)(v107 + 72);
  uint64_t v56 = *(void *)(v107 + 80);
  uint64_t v57 = *(unsigned __int8 *)(v46 + 18);
  if (*(_BYTE *)(v46 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v58 = v101;
    uint64_t v59 = v46;
    while (1)
    {
      uint64_t v61 = *(unsigned __int16 *)(v59 + 16);
      if (*(_WORD *)(v59 + 16))
      {
        uint64_t v62 = *(void *)(v59 + 32);
        uint64_t v63 = v58 - v62;
        if (__OFSUB__(v58, v62)) {
          goto LABEL_111;
        }
        if (__OFADD__(v63, 1LL)) {
          goto LABEL_112;
        }
        if (v63 + 1 <= 0)
        {
          uint64_t v61 = 0LL;
          goto LABEL_41;
        }

        if ((_DWORD)v61 == 1)
        {
          v58 -= v62;
        }

        else
        {
          uint64_t v64 = *(void *)(v59 + 56);
          BOOL v65 = __OFSUB__(v63, v64);
          uint64_t v66 = v63 - v64;
          if (v65) {
            goto LABEL_121;
          }
          if (__OFADD__(v66, 1LL)) {
            goto LABEL_122;
          }
          if (v66 + 1 < 1)
          {
            uint64_t v61 = 1LL;
            uint64_t v58 = v63;
            goto LABEL_41;
          }

          if ((_DWORD)v61 != 2)
          {
            uint64_t v67 = (void *)(v59 + 80);
            uint64_t v68 = 2LL;
            while (v61 != v68)
            {
              uint64_t v58 = v66 - *v67;
              if (__OFSUB__(v66, *v67)) {
                goto LABEL_108;
              }
              if (__OFADD__(v58, 1LL)) {
                goto LABEL_109;
              }
              if (v58 + 1 < 1)
              {
                uint64_t v61 = v68;
                uint64_t v58 = v66;
                goto LABEL_41;
              }

              ++v68;
              v67 += 3;
              uint64_t v66 = v58;
              if (v61 == v68) {
                goto LABEL_40;
              }
            }

            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
            goto LABEL_114;
          }

          uint64_t v58 = v66;
        }
      }

    uint64_t v32 = (v79 - 1) & v79;
    unint64_t v77 = __clz(__rbit64(v79)) + (v38 << 6);
LABEL_47:
    unint64_t v78 = (uint64_t *)(*(void *)(v72 + 48) + 16 * v77);
    uint64_t v36 = *v78;
    unint64_t v37 = v78[1];
    swift_bridgeObjectRetain();
    uint64_t v31 = (uint64_t)&v390;
    specialized Set._Variant.insert(_:)((unint64_t *)&v448, v36, v37);
    double result = swift_bridgeObjectRelease();
  }

  uint64_t v80 = v40 + 5;
  if (v80 < v75)
  {
    uint64_t v79 = *(void *)(v74 + 8 * v80);
    if (!v79)
    {
      while (1)
      {
        __int128 v38 = v80 + 1;
        if (__OFADD__(v80, 1LL)) {
          break;
        }
        if (v38 >= v75) {
          goto LABEL_67;
        }
        uint64_t v79 = *(void *)(v74 + 8 * v38);
        ++v80;
        if (v79) {
          goto LABEL_66;
        }
      }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1LL;
}

          uint64_t v30 = (v34 - 1) & v34;
          uint64_t v32 = __clz(__rbit64(v34)) + (v26 << 6);
        }

        uint64_t v36 = (uint64_t *)(v12[6] + 16 * v32);
        __int128 v38 = *v36;
        unint64_t v37 = v36[1];
        outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v32, (uint64_t)&v106);
        *(void *)&uint64_t v101 = v38;
        *((void *)&v101 + 1) = v37;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)v98);
        unint64_t v39 = *(void **)(v99 + 200);
        uint64_t v40 = (void *)v39[2];
        if (!v40) {
          goto LABEL_50;
        }
        uint64_t v41 = v39[4] == v38 && v39[5] == v37;
        if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_83:
          swift_bridgeObjectRetain_n();
          outlined destroy of Any?( (uint64_t)&v101,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)v94 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v32;
          unint64_t v25 = __OFADD__(v97++, 1LL);
          if (v25)
          {
            __break(1u);
            goto LABEL_86;
          }
        }

        else
        {
          if (v40 != (void *)1)
          {
            uint64_t v42 = v39 + 7;
            uint64_t v43 = 1LL;
            do
            {
              uint64_t v12 = (void *)(v43 + 1);
              if (__OFADD__(v43, 1LL)) {
                goto LABEL_155;
              }
              uint64_t v44 = *(v42 - 1) == v38 && *v42 == v37;
              if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_83;
              }
              v42 += 2;
              ++v43;
            }

            while (v12 != v40);
          }

    __int128 v109 = (v117 - 1) & v117;
    id v137 = v118;
    uint64_t v112 = __clz(__rbit64(v117)) + (v118 << 6);
LABEL_41:
    uint64_t v113 = *(void *)(v139 + 72) * v112;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v91 + 48) + v113,  v110,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    int v114 = 8 * v112;
    __int128 v115 = *(void *)(*(void *)(v91 + 56) + 8 * v112);
    outlined init with take of ICUNumberFormatter.Signature( v110,  *(void *)(v98 + 48) + v113,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v98 + 56) + v114) = v115;
    swift_retain();
  }

  uint64_t v119 = v137 + 9;
  if (v137 + 9 >= v135) {
    goto LABEL_67;
  }
  __int128 v117 = *(void *)&v136[8 * v119];
  if (v117)
  {
    __int128 v118 = v137 + 9;
    goto LABEL_66;
  }

  while (1)
  {
    __int128 v118 = v119 + 1;
    if (__OFADD__(v119, 1LL)) {
      break;
    }
    if (v118 >= v135) {
      goto LABEL_67;
    }
    __int128 v117 = *(void *)&v136[8 * v118];
    ++v119;
    if (v117) {
      goto LABEL_66;
    }
  }

                Hasher._combine(_:)(0);
                goto LABEL_67;
              }
            }

            Hasher._combine(_:)(0);
            if (v115) {
              goto LABEL_63;
            }
            goto LABEL_66;
          }

                Hasher._combine(_:)(0);
                goto LABEL_67;
              }
            }

            Hasher._combine(_:)(0);
            if (v122) {
              goto LABEL_63;
            }
            goto LABEL_66;
          }

          __break(1u);
          goto LABEL_67;
        }

        if ((v6[168] & 1) != 0) {
          uint64_t v96 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
        }
        else {
          uint64_t v96 = String.subscript.getter();
        }
        uint64_t v100 = v96;
        uint64_t v101 = v97;
        __int128 v102 = v98;
        uint64_t v103 = v99;
        if ((v15 & 0x20) != 0)
        {
          if ((v96 ^ v97) >> 14)
          {
            swift_bridgeObjectRetain();
            uint64_t v104 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v100, v101, v102, v103);
            uint64_t v105 = v106;
            swift_bridgeObjectRelease_n();
          }

          else
          {
            swift_bridgeObjectRelease();
            uint64_t v104 = 0LL;
            uint64_t v105 = (void *)0xE000000000000000LL;
          }

          v107._countAndFlagsBits = v104;
          v107._object = v105;
          String.append(_:)(v107);
        }

        else
        {
          v203._countAndFlagsBits = v96;
          v203._object = (void *)v97;
          unint64_t v204 = v98;
          unint64_t v205 = v99;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          String.append<A>(contentsOf:)();
        }

        swift_bridgeObjectRelease();
        if ((v6[192] & 1) == 0)
        {
          __int128 v108 = String.subscript.getter();
          uint64_t v112 = v111;
          if ((v15 & 0x40) != 0)
          {
            id v201 = 63LL;
            uint64_t v202 = 0xE100000000000000LL;
            if ((v108 ^ v109) >> 14)
            {
              v203._countAndFlagsBits = v108;
              v203._object = (void *)v109;
              unint64_t v204 = v110;
              unint64_t v205 = v111;
              MEMORY[0x1895F8858](v108);
              unint64_t v194 = &v203;
              id v195 = 64;
              __int128 v121 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v193,  v120,  v119,  v118,  v112);
              if (v122)
              {
                __int128 v116 = (uint64_t)v121;
                __int128 v117 = v122;
              }

              else
              {
                uint64_t v128 = v203._countAndFlagsBits;
                unint64_t v129 = v203._object;
                __int128 v130 = v204;
                uint64_t v131 = v205;
                swift_bridgeObjectRetain();
                __int128 v116 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( v128,  (unint64_t)v129,  v130,  v131,  0x40u);
                __int128 v117 = v132;
                swift_bridgeObjectRelease();
              }

              swift_bridgeObjectRelease();
            }

            else
            {
              swift_bridgeObjectRelease();
              __int128 v116 = 0LL;
              __int128 v117 = (void *)0xE000000000000000LL;
            }

            v133._countAndFlagsBits = v116;
            v133._object = v117;
            String.append(_:)(v133);
            swift_bridgeObjectRelease();
            int v114 = v201;
            __int128 v115 = v202;
          }

          else
          {
            v203._countAndFlagsBits = 63LL;
            v203._object = (void *)0xE100000000000000LL;
            v113._countAndFlagsBits = MEMORY[0x186E1B610](v108, v109, v110, v111);
            String.append(_:)(v113);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            int v114 = v203._countAndFlagsBits;
            __int128 v115 = (unint64_t)v203._object;
          }

          uint64_t v134 = v115;
          String.append(_:)(*(Swift::String *)&v114);
          swift_bridgeObjectRelease();
        }

        if ((v6[216] & 1) == 0)
        {
          unint64_t v135 = String.subscript.getter();
          id v139 = v138;
          if (v15 < 0)
          {
            id v201 = 35LL;
            uint64_t v202 = 0xE100000000000000LL;
            if ((v135 ^ v136) >> 14)
            {
              v203._countAndFlagsBits = v135;
              v203._object = (void *)v136;
              unint64_t v204 = v137;
              unint64_t v205 = v138;
              MEMORY[0x1895F8858](v135);
              unint64_t v194 = &v203;
              id v195 = 64;
              char v148 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t)v193,  v147,  v146,  v145,  v139);
              if (v149)
              {
                uint64_t v143 = (uint64_t)v148;
                unint64_t v144 = v149;
              }

              else
              {
                unint64_t v150 = v203._countAndFlagsBits;
                Swift::Int v151 = v203._object;
                uint64_t v152 = v204;
                unint64_t v153 = v205;
                swift_bridgeObjectRetain();
                uint64_t v143 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( v150,  (unint64_t)v151,  v152,  v153,  0x40u);
                unint64_t v144 = v154;
                swift_bridgeObjectRelease();
              }

              swift_bridgeObjectRelease();
            }

            else
            {
              swift_bridgeObjectRelease();
              uint64_t v143 = 0LL;
              unint64_t v144 = (void *)0xE000000000000000LL;
            }

            v155._countAndFlagsBits = v143;
            v155._object = v144;
            String.append(_:)(v155);
            swift_bridgeObjectRelease();
            uint64_t v141 = v201;
            uint64_t v142 = v202;
          }

          else
          {
            v203._countAndFlagsBits = 35LL;
            v203._object = (void *)0xE100000000000000LL;
            v140._countAndFlagsBits = MEMORY[0x186E1B610](v135, v136, v137, v138);
            String.append(_:)(v140);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v141 = v203._countAndFlagsBits;
            uint64_t v142 = (unint64_t)v203._object;
          }

          uint64_t v156 = v142;
          String.append(_:)(*(Swift::String *)&v141);
          swift_bridgeObjectRelease();
        }

        uint64_t v4 = specialized static RFC3986Parser.parse(urlString:)(v206, v207);
        swift_bridgeObjectRelease();
        swift_release();
        return v4;
      }

      __break(1u);
LABEL_158:
      uint64_t v126 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      uint64_t v124 = v189;
    }
  }

  return (Swift::Int)v6;
}

  __break(1u);
  return result;
}

            uint64_t v35 = (v40 - 1) & v40;
            __int128 v38 = __clz(__rbit64(v40)) + (v31 << 6);
          }

          uint64_t v42 = *(void *)(v3 + 56) + 16 * v38;
          uint64_t v43 = *(void *)v42;
          if ((*(_BYTE *)(v42 + 8) & 1) == 0) {
            break;
          }
          if (v43 != v2)
          {
LABEL_78:
            *(unint64_t *)((char *)v118 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v38;
            uint64_t v29 = __OFADD__(v119++, 1LL);
            if (v29) {
              goto LABEL_162;
            }
          }
        }

        unint64_t v125 = v36;
        v124[0] = v43;
        __swift_project_boxed_opaque_existential_1(v124, v36);
        DynamicType = (uint64_t *)swift_getDynamicType();
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
        uint64_t v45 = *DynamicType;
        if ((unint64_t)*DynamicType < 0x800)
        {
          if ((unint64_t)(v45 - 513) < 2)
          {
            swift_getKeyPath();
            uint64_t v46 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
            uint64_t v53 = v52;
            swift_release();
            if ((v53 & 1) != 0) {
              goto LABEL_169;
            }
            goto LABEL_77;
          }

          if (v45)
          {
            if (v45 != 512)
            {
              swift_bridgeObjectRelease();
              uint64_t v2 = v122;
              goto LABEL_78;
            }

            swift_getKeyPath();
            uint64_t v46 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
            uint64_t v48 = v47;
            double result = swift_release();
            if ((v48 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            goto LABEL_77;
          }
        }

        swift_getKeyPath();
        uint64_t v46 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        uint64_t v51 = v50;
        swift_release();
        if ((v51 & 1) != 0) {
          goto LABEL_167;
        }
LABEL_77:
        uint64_t v54 = *(uint64_t *)((char *)DynamicType + v46);
        swift_bridgeObjectRelease();
        uint64_t v2 = v122;
        uint64_t v3 = v123;
        if (v54 != v122) {
          goto LABEL_78;
        }
      }
    }
  }

  v116[1] = v116;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  __int128 v118 = (void *)((char *)v116 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v118, v5);
  uint64_t v6 = 0LL;
  uint64_t v7 = *(void *)(v3 + 64);
  uint64_t v119 = 0LL;
  uint64_t v120 = v3 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  uint64_t v10 = v9 & v7;
  __int128 v121 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = MEMORY[0x189611E48];
  while (v10)
  {
    uint64_t v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    uint64_t v13 = v12 | (v6 << 6);
LABEL_25:
    unint64_t v17 = *(void *)(v3 + 56) + 16 * v13;
    uint64_t v18 = *(void *)v17;
    if ((*(_BYTE *)(v17 + 8) & 1) != 0)
    {
      if (v18 != v2)
      {
LABEL_36:
        *(unint64_t *)((char *)v118 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
        uint64_t v29 = __OFADD__(v119++, 1LL);
        if (v29) {
          goto LABEL_159;
        }
      }
    }

    else
    {
      unint64_t v125 = v11;
      v124[0] = v18;
      __swift_project_boxed_opaque_existential_1(v124, v11);
      uint64_t v19 = (uint64_t *)swift_getDynamicType();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
      unint64_t v20 = *v19;
      if ((unint64_t)*v19 < 0x800)
      {
        if ((unint64_t)(v20 - 513) < 2)
        {
          swift_getKeyPath();
          uint64_t v21 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          uint64_t v27 = v26;
          swift_release();
          if ((v27 & 1) != 0) {
            goto LABEL_166;
          }
          goto LABEL_35;
        }

        if (v20)
        {
          if (v20 != 512)
          {
            swift_bridgeObjectRelease();
            uint64_t v2 = v122;
            goto LABEL_36;
          }

          swift_getKeyPath();
          uint64_t v21 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          __int128 v23 = v22;
          swift_release();
          if ((v23 & 1) != 0) {
            goto LABEL_168;
          }
          goto LABEL_35;
        }
      }

      swift_getKeyPath();
      uint64_t v21 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      unint64_t v25 = v24;
      swift_release();
      if ((v25 & 1) != 0) {
        goto LABEL_164;
      }
LABEL_35:
      unint64_t v28 = *(uint64_t *)((char *)v19 + v21);
      swift_bridgeObjectRelease();
      uint64_t v2 = v122;
      uint64_t v3 = v123;
      if (v28 != v122) {
        goto LABEL_36;
      }
    }
  }

  uint64_t v14 = v6 + 1;
  if (__OFADD__(v6, 1LL)) {
    goto LABEL_154;
  }
  if (v14 < v121)
  {
    uint64_t v15 = *(void *)(v120 + 8 * v14);
    ++v6;
    if (!v15)
    {
      uint64_t v6 = v14 + 1;
      if (v14 + 1 >= v121) {
        goto LABEL_40;
      }
      uint64_t v15 = *(void *)(v120 + 8 * v6);
      if (!v15)
      {
        uint64_t v6 = v14 + 2;
        if (v14 + 2 >= v121) {
          goto LABEL_40;
        }
        uint64_t v15 = *(void *)(v120 + 8 * v6);
        if (!v15)
        {
          uint64_t v6 = v14 + 3;
          if (v14 + 3 >= v121) {
            goto LABEL_40;
          }
          uint64_t v15 = *(void *)(v120 + 8 * v6);
          if (!v15)
          {
            uint64_t v16 = v14 + 4;
            if (v16 >= v121) {
              goto LABEL_40;
            }
            uint64_t v15 = *(void *)(v120 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                uint64_t v6 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_158;
                }
                if (v6 >= v121) {
                  goto LABEL_40;
                }
                uint64_t v15 = *(void *)(v120 + 8 * v6);
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v6 = v16;
          }
        }
      }
    }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  unint64_t v24 = *((void *)v2 + 2);
  __int128 v23 = *((void *)v2 + 3);
  if (v24 >= v23 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v23 > 1),  v24 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v24 + 1;
  v2[v24 + 32] = 8;
  if ((v1 & 0x10) == 0)
  {
LABEL_22:
    if ((v1 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_76;
  }

  __break(1u);
LABEL_67:
  double result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

          uint64_t v50 = (v59 - 1) & v59;
          unint64_t v52 = __clz(__rbit64(v59)) + (v47 << 6);
        }

        uint64_t v53 = 16 * v52;
        uint64_t v54 = (uint64_t *)(*(void *)(a4 + 48) + v53);
        uint64_t v56 = *v54;
        uint64_t v55 = v54[1];
        uint64_t v57 = *(_OWORD *)(*(void *)(a4 + 56) + v53);
        uint64_t v58 = (void *)(*(void *)(v39 + 48) + v53);
        *uint64_t v58 = v56;
        v58[1] = v55;
        *(_OWORD *)(*(void *)(v39 + 56) + v53) = v57;
        swift_bridgeObjectRetain();
      }
    }

    uint64_t v31 = (v80 - 1) & v80;
    unint64_t v77 = __clz(__rbit64(v80)) + (v38 << 6);
LABEL_47:
    unint64_t v78 = (uint64_t *)(*(void *)(v73 + 48) + 16 * v77);
    uint64_t v35 = *v78;
    uint64_t v79 = v78[1];
    swift_bridgeObjectRetain();
    uint64_t v30 = (uint64_t)&v395;
    specialized Set._Variant.insert(_:)((unint64_t *)&v453, v35, v79);
    double result = swift_bridgeObjectRelease();
  }

  __int128 v81 = v40 + 5;
  if (v81 < v75)
  {
    uint64_t v80 = *(void *)(v37 + 8 * v81);
    if (!v80)
    {
      while (1)
      {
        __int128 v38 = v81 + 1;
        if (__OFADD__(v81, 1LL)) {
          break;
        }
        if (v38 >= v75) {
          goto LABEL_67;
        }
        uint64_t v80 = *(void *)(v37 + 8 * v38);
        ++v81;
        if (v80) {
          goto LABEL_66;
        }
      }

      uint64_t v12 = 0LL;
LABEL_67:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
  }

  else
  {
    if (v8 != 45)
    {
      if (v15)
      {
        unint64_t v17 = 0LL;
        uint64_t v36 = a5 + 48;
        unint64_t v37 = a5 + 55;
        __int128 v38 = a5 + 87;
        if (a5 > 10)
        {
          uint64_t v36 = 58;
        }

        else
        {
          __int128 v38 = 97;
          unint64_t v37 = 65;
        }

        unint64_t v39 = &v44;
        while (1)
        {
          uint64_t v40 = *(unsigned __int8 *)v39;
          if (v40 < 0x30 || v40 >= v36)
          {
            if (v40 < 0x41 || v40 >= v37)
            {
              uint64_t v12 = 0LL;
              if (v40 < 0x61 || v40 >= v38) {
                goto LABEL_67;
              }
              uint64_t v41 = -87;
            }

            else
            {
              uint64_t v41 = -55;
            }
          }

          else
          {
            uint64_t v41 = -48;
          }

          if (!is_mul_ok(v17, a5)) {
            goto LABEL_66;
          }
          uint64_t v42 = v17 * a5;
          uint64_t v43 = v40 + v41;
          uint64_t v26 = __CFADD__(v42, v43);
          unint64_t v17 = v42 + v43;
          if (v26) {
            goto LABEL_66;
          }
          unint64_t v39 = (uint64_t *)((char *)v39 + 1);
          if (!--v15) {
            goto LABEL_65;
          }
        }
      }

      goto LABEL_66;
    }

    if (v15)
    {
      uint64_t v16 = v15 - 1;
      if (v16)
      {
        unint64_t v17 = 0LL;
        uint64_t v18 = a5 + 48;
        uint64_t v19 = a5 + 55;
        unint64_t v20 = a5 + 87;
        if (a5 > 10)
        {
          uint64_t v18 = 58;
        }

        else
        {
          unint64_t v20 = 97;
          uint64_t v19 = 65;
        }

        uint64_t v21 = (unsigned __int8 *)&v44 + 1;
        while (1)
        {
          __int128 v22 = *v21;
          if (v22 < 0x30 || v22 >= v18)
          {
            if (v22 < 0x41 || v22 >= v19)
            {
              uint64_t v12 = 0LL;
              if (v22 < 0x61 || v22 >= v20) {
                goto LABEL_67;
              }
              __int128 v23 = -87;
            }

            else
            {
              __int128 v23 = -55;
            }
          }

          else
          {
            __int128 v23 = -48;
          }

          if (!is_mul_ok(v17, a5)) {
            goto LABEL_66;
          }
          unint64_t v24 = v17 * a5;
          unint64_t v25 = v22 + v23;
          uint64_t v26 = v24 >= v25;
          unint64_t v17 = v24 - v25;
          if (!v26) {
            goto LABEL_66;
          }
          ++v21;
          if (!--v16) {
            goto LABEL_65;
          }
        }
      }

      goto LABEL_66;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v35 = v23 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
      uint64_t v15 = v159;
      uint64_t v16 = v161;
      goto LABEL_40;
    }

    uint64_t v36 = v27;
    goto LABEL_49;
  }

  if (v6 < result >> 10)
  {
    uint64_t v131 = 0LL;
    while (1)
    {
      unint64_t v17 = __OFSUB__(v131--, 1LL);
      if (v17) {
        break;
      }
      double result = (unint64_t)specialized BidirectionalCollection.formIndex(before:)(&v199);
      if (v6 == v199 >> 10) {
        return v131;
      }
    }

    goto LABEL_214;
  }

  return 0LL;
}

    swift_bridgeObjectRelease();
    LOBYTE(v5) = 0;
  }

  return (char)v5;
}

  swift_release();
  swift_release();
  uint64_t v31 = v147;
  uint64_t v7 = v142;
  uint64_t v30 = v144;
  uint64_t v4 = v132;
  uint64_t v8 = v134;
  uint64_t v5 = v145;
LABEL_67:
  objc_msgSend(v4, sel_setAllowedUnits_, v6, v130);
  uint64_t v9 = v140;
  uint64_t v32 = lock;
LABEL_68:
  swift_unknownObjectRelease();
  swift_retain();
  os_unfair_lock_lock(v32);
  if (v30 >= *(void *)(*(void *)(v9 + 16) + 16LL))
  {
    swift_bridgeObjectRetain();
    uint64_t v68 = v150;
    uint64_t v67 = v136;
  }

  else
  {
    uint64_t v67 = v136;
    *id v136 = MEMORY[0x18961AFF0];
    uint64_t v68 = v150;
  }

  unint64_t v157 = __src;
  *(_DWORD *)unint64_t v158 = LODWORD(__dst[0]);
  *(_DWORD *)&v158[3] = *(_DWORD *)((char *)__dst + 3);
  unint64_t v159 = v68;
  uint64_t v160 = v5;
  uint64_t v69 = v31;
  unint64_t v161 = v31;
  uint64_t v162 = v7;
  unint64_t v163 = v8;
  uint64_t v16 = v146;
  unint64_t v164 = v146;
  unint64_t v70 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v156[0] = *v67;
  unint64_t v72 = v156[0];
  *uint64_t v67 = 0x8000000000000000LL;
  uint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(&v157);
  uint64_t v75 = *(void *)(v72 + 16);
  uint64_t v76 = (v73 & 1) == 0;
  unint64_t v77 = v75 + v76;
  if (__OFADD__(v75, v76))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v7) = v73;
    if (*(void *)(v72 + 24) < v77)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v77,  isUniquelyReferenced_nonNull_native);
      unint64_t v78 = v156[0];
      uint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(&v157);
      if ((v7 & 1) != (v80 & 1)) {
        goto LABEL_158;
      }
      uint64_t v74 = v79;
      unint64_t v17 = v69;
      if ((v7 & 1) == 0)
      {
LABEL_123:
        uint64_t v14 = v70;
        specialized _NativeDictionary._insert(at:key:value:)(v74, (uint64_t)&v157, (uint64_t)v70, (void *)v78);
        outlined retain of Date.ComponentsFormatStyle((uint64_t)&v157);
LABEL_124:
        *(void *)(v140 + 16) = v78;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(lock);
        swift_release_n();
        swift_bridgeObjectRelease();
        uint64_t v15 = v145;
LABEL_125:
        if (v16) {
          uint64_t v104 = v2;
        }
        else {
          uint64_t v104 = v3;
        }
        if (v16) {
          uint64_t v2 = v3;
        }
        if (v150)
        {
          unint64_t v154 = v15;
          uint64_t v155 = v17;
          uint64_t v105 = *(void *)(v150 + 16);
          if (v105)
          {
            unint64_t v149 = v14;
            v156[0] = MEMORY[0x18961AFE8];
            swift_unknownObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v105, 0);
            uint64_t v106 = v156[0];
            uint64_t v107 = specialized Set.startIndex.getter(v150);
            __int128 v108 = v150;
            __int128 v109 = v107;
            uint64_t v111 = v110;
            uint64_t v113 = v112 & 1;
            while ((v109 & 0x8000000000000000LL) == 0 && v109 < 1LL << *(_BYTE *)(v108 + 32))
            {
              if (*(_DWORD *)(v108 + 36) != v111) {
                goto LABEL_152;
              }
              int v114 = *(_BYTE *)(*(void *)(v108 + 48) + v109);
              v156[0] = v106;
              __int128 v116 = *(void *)(v106 + 16);
              __int128 v115 = *(void *)(v106 + 24);
              if (v116 >= v115 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v115 > 1,  v116 + 1,  1);
                __int128 v108 = v150;
                uint64_t v106 = v156[0];
              }

              *(void *)(v106 + 16) = v116 + 1;
              *(_BYTE *)(v106 + v116 + 32) = 0x60504030A0201uLL >> (8 * v114);
              __int128 v117 = specialized _NativeSet.index(after:)(v109, v111, v113 & 1, v108);
              __int128 v108 = v150;
              __int128 v109 = v117;
              uint64_t v111 = v118;
              uint64_t v113 = v119 & 1;
              if (!--v105)
              {
                outlined consume of Set<Calendar.Component>.Index._Variant(v117, v118, v119 & 1);
                uint64_t v14 = v149;
                goto LABEL_144;
              }
            }

            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
            goto LABEL_153;
          }

          swift_unknownObjectRetain();
          uint64_t v106 = MEMORY[0x18961AFE8];
LABEL_144:
          lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
          unint64_t v153 = Set.init(minimumCapacity:)();
          uint64_t v124 = *(void *)(v106 + 16);
          if (v124)
          {
            unint64_t v125 = (unsigned __int8 *)(v106 + 32);
            do
            {
              uint64_t v126 = *v125++;
              specialized Set._Variant.insert(_:)(v156, v126);
              --v124;
            }

            while (v124);
          }

          swift_bridgeObjectRelease();
          __dst[0] = v104;
          v151[0] = v2;
          Calendar.dateComponents(_:from:to:)(v153, __dst, v151, v156);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          memcpy(__dst, v156, 0x11AuLL);
          memcpy(v151, v156, 0x11AuLL);
          isa = DateComponents._bridgeToObjectiveC()().super.isa;
          uint64_t v128 = objc_msgSend(v14, sel_stringFromDateComponents_, isa);

          if (v128)
          {
            __int128 v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);

            outlined release of DateComponents((uint64_t)__dst);
            return (uint64_t)v123;
          }

uint64_t specialized Range.init(uncheckedBounds:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t AttributedStringProtocol.__guts.getter(ValueMetadata *a1, uint64_t a2)
{
  if (a1 == &type metadata for AttributedString || a1 == &type metadata for AttributedSubstring) {
    return swift_retain();
  }
  (*(void (**)(void *__return_ptr))(a2 + 56))(v3);
  return v3[0];
}

uint64_t specialized Sequence.reduce<A>(into:_:)( uint64_t result, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = result;
  uint64_t v7 = a5 - a4;
  if (a5 != a4)
  {
    for (i = (uint64_t *)(a6 + 24 * a4 + 16); ; i += 3)
    {
      uint64_t v10 = *(i - 1);
      uint64_t v11 = *i;
      v12[0] = *(i - 2);
      v12[1] = v10;
      _OWORD v12[2] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(&v13, v12);
      swift_bridgeObjectRelease();
      double result = swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
      if (!--v7) {
        return v13;
      }
    }
  }

  return result;
}

BOOL static AttributedString.AttributeMergePolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AttributedString.AttributeMergePolicy.hash(into:)()
{
}

Swift::Int AttributedString.AttributeMergePolicy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributedStringProtocol.settingAttributes(_:)@<X0>( uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (uint64_t *)MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v8;
  uint64_t v12 = v8[1];
  (*(void (**)(char *, uint64_t, ValueMetadata *))(v13 + 16))(v10, v4, a2);
  AttributedString.init<A>(_:)((uint64_t)v10, a2, a3, a4);
  uint64_t v14 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v15 = *(_OWORD *)(v14 + 32);
    v38[0] = *(_OWORD *)(v14 + 16);
    v38[1] = v15;
    v38[2] = *(_OWORD *)(v14 + 48);
    uint64_t v16 = *(void *)(v14 + 64);
    uint64_t v17 = *(void *)(v14 + 72);
    uint64_t v18 = *(void *)(v14 + 80);
    uint64_t v19 = *(void *)(v14 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v38);
    swift_unknownObjectRetain();
    uint64_t v20 = AttributedString.Guts.init(string:runs:)(v38, v16, v17, v18, v19);
    *a4 = v20;
    swift_release();
    uint64_t v14 = v20;
  }

  __int128 v21 = *(_OWORD *)(v14 + 32);
  __int128 v35 = *(_OWORD *)(v14 + 16);
  __int128 v36 = v21;
  __int128 v37 = *(_OWORD *)(v14 + 48);
  uint64_t v22 = BigString.startIndex.getter();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v29 = BigString.endIndex.getter();
  v34[0] = v22;
  v34[1] = v24;
  v34[2] = v26;
  v34[3] = v28;
  v34[4] = v29;
  v34[5] = v30;
  v34[6] = v31;
  v34[7] = v32;
  return AttributedString.Guts.setAttributes(_:in:)(v11, v12);
}

uint64_t AttributedStringProtocol.mergingAttributes(_:mergePolicy:)@<X0>( __int128 *a1@<X0>, ValueMetadata *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v12 = *v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))(v10, v4);
  AttributedString.init<A>(_:)((uint64_t)v10, a2, a3, a4);
  __int128 v17 = *a1;
  char v16 = v12;
  return AttributedString.mergeAttributes(_:mergePolicy:)((uint64_t *)&v17, &v16);
}

uint64_t AttributedStringProtocol.replacingAttributes(_:with:)@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  char v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v5);
  AttributedString.init<A>(_:)((uint64_t)v12, a3, a4, a5);
  __int128 v14 = *a1;
  __int128 v16 = *a2;
  __int128 v17 = v14;
  return AttributedString.replaceAttributes(_:with:)((uint64_t *)&v17, (uint64_t *)&v16);
}

uint64_t AttributedStringProtocol.description.getter( ValueMetadata *a1, void (**a2)(void *__return_ptr, void, void))
{
  if (a1 == &type metadata for AttributedString || a1 == &type metadata for AttributedSubstring)
  {
    uint64_t countAndFlagsBits = *v2;
    swift_retain();
  }

  else
  {
    ((void (**)(Swift::String *__return_ptr, ValueMetadata *, void))a2)[7](&v165, a1, a2);
    uint64_t countAndFlagsBits = v165._countAndFlagsBits;
  }

  ((void (**)(Swift::String *__return_ptr, ValueMetadata *, void))a2)[4](&v165, a1, a2);
  Swift::String v146 = v165;
  uint64_t v7 = *((void *)&v166 + 1);
  uint64_t v6 = v166;
  ((void (**)(Swift::String *__return_ptr, ValueMetadata *, void))a2)[5](&v156, a1, a2);
  Swift::String v197 = v146;
  uint64_t v198 = v6;
  uint64_t v199 = v7;
  Swift::String v200 = v156;
  __int128 v201 = v157;
  uint64_t v163 = 0LL;
  unint64_t v164 = 0xE000000000000000LL;
  uint64_t v8 = swift_retain();
  AttributedString.Runs.init(_:in:)(v8, &v156);
  *(_OWORD *)uint64_t v171 = *(_OWORD *)v162;
  *(_OWORD *)&v171[16] = *(_OWORD *)&v162[16];
  *(void *)&v171[32] = *(void *)&v162[32];
  *(_OWORD *)&v169[32] = *(_OWORD *)&v160[32];
  *(_OWORD *)&v169[48] = *(_OWORD *)&v160[48];
  *(_OWORD *)&v169[64] = *(_OWORD *)&v160[64];
  __int128 v170 = v161;
  __int128 v167 = v158;
  __int128 v168 = v159;
  *(_OWORD *)v169 = *(_OWORD *)v160;
  *(_OWORD *)&v169[16] = *(_OWORD *)&v160[16];
  Swift::String v165 = v156;
  __int128 v166 = v157;
  __int128 v127 = *(_OWORD *)&v169[8];
  uint64_t v9 = *(void *)&v160[8];
  object = v156._object;
  uint64_t v11 = v156._countAndFlagsBits;
  uint64_t v12 = countAndFlagsBits;
  if (v156._object == *(void **)&v160[8])
  {
    uint64_t v13 = 0LL;
    goto LABEL_156;
  }

  uint64_t v15 = *((void *)&v166 + 1);
  uint64_t v14 = v166;
  uint64_t v17 = *((void *)&v167 + 1);
  uint64_t v16 = v167;
  __int128 v18 = v168;
  __int128 v120 = *(_OWORD *)&v169[40];
  __int128 v121 = *(_OWORD *)&v169[24];
  __int128 v119 = *(_OWORD *)&v169[56];
  uint64_t v19 = *(void *)v169;
  unint64_t v20 = *(void *)&v169[72];
  uint64_t v130 = *((void *)&v170 + 1);
  uint64_t v131 = v170;
  __int128 v126 = *(_OWORD *)&v171[8];
  __int128 v117 = *(_OWORD *)&v171[24];
  __int128 v115 = (__int128 *)(v12 + 16);
  uint64_t v129 = *(void *)v171;
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v165);
  unint64_t v116 = v20 >> 10;
  uint64_t v128 = (__int128 *)(v11 + 16);
  uint64_t v124 = v15;
  uint64_t v125 = v14;
  uint64_t v136 = v14;
  uint64_t v137 = v16;
  uint64_t v122 = v17;
  uint64_t v123 = v16;
  uint64_t v133 = *((void *)&v18 + 1);
  uint64_t v134 = v18;
  uint64_t v118 = v19;
  uint64_t v142 = v19;
  uint64_t v143 = (void *)v11;
  uint64_t v22 = (uint64_t)object;
  uint64_t v113 = object;
  uint64_t v114 = v9;
  while (2)
  {
    if (v22 >= v9) {
      goto LABEL_161;
    }
    v156._uint64_t countAndFlagsBits = v11;
    v156._object = object;
    *(void *)&__int128 v157 = v125;
    *((void *)&v157 + 1) = v124;
    *(void *)&__int128 v158 = v123;
    *((void *)&v158 + 1) = v122;
    __int128 v159 = v18;
    *(_OWORD *)&v160[8] = v127;
    *(_OWORD *)&v160[24] = v121;
    *(_OWORD *)&v160[40] = v120;
    *(_OWORD *)&v160[56] = v119;
    *(void *)uint64_t v160 = v118;
    *(void *)&v160[72] = v20;
    *(void *)&__int128 v161 = v131;
    *((void *)&v161 + 1) = v130;
    *(void *)uint64_t v162 = v129;
    *(_OWORD *)&v162[8] = v126;
    *(_OWORD *)&v162[24] = v117;
    v155[0] = v22;
    v155[1] = v136;
    unint64_t v138 = v15;
    v155[2] = v15;
    v155[3] = v137;
    v155[4] = v17;
    v155[5] = v134;
    v155[6] = v133;
    v155[7] = v142;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v155, &v147._countAndFlagsBits);
    if (v147._countAndFlagsBits != *(void *)(v11 + 88))
    {
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }

    unint64_t v140 = v17;
    uint64_t v144 = v22;
    unint64_t v24 = (unint64_t)v147._object;
    unint64_t v25 = *((void *)&v149 + 1);
    __int128 v27 = v150;
    uint64_t v26 = v151;
    if ((void)v148)
    {
      uint64_t v28 = v148 + 24 * (((unint64_t)v147._object >> ((4 * *(_BYTE *)(v148 + 18) + 8) & 0x3C)) & 0xF);
      unint64_t v29 = *(void *)(v28 + 24);
      uint64_t v30 = *(void *)(v28 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v31 = v143[8];
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v29 = specialized Rope._Node.subscript.getter(v24, v31);
      uint64_t v30 = v32;
      uint64_t result = swift_unknownObjectRelease();
    }

    if (v116 >= v25 >> 10) {
      unint64_t v33 = v20;
    }
    else {
      unint64_t v33 = v25;
    }
    if (v116 >= v25 >> 10) {
      uint64_t v34 = v131;
    }
    else {
      uint64_t v34 = v27;
    }
    if (v116 >= v25 >> 10) {
      uint64_t v35 = v130;
    }
    else {
      uint64_t v35 = *((void *)&v27 + 1);
    }
    if (v116 >= v25 >> 10) {
      uint64_t v36 = v129;
    }
    else {
      uint64_t v36 = v26;
    }
    if (__OFADD__(v29, v25 >> 11)) {
      goto LABEL_163;
    }
    else {
      unint64_t v37 = (unint64_t)v126 >> 11;
    }
    __int128 v38 = v128[1];
    __int128 v194 = *v128;
    __int128 v195 = v38;
    __int128 v196 = v128[2];
    uint64_t result = BigString.utf8.getter();
    if (__OFSUB__(v37, v33 >> 11)) {
      goto LABEL_164;
    }
    unint64_t v39 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    uint64_t result = outlined release of Locale((uint64_t)v172);
    if (v39 >> 10 < v33 >> 10)
    {
LABEL_165:
      __break(1u);
      goto LABEL_166;
    }

    unint64_t v177 = v33;
    uint64_t v178 = v34;
    uint64_t v179 = v35;
    uint64_t v180 = v36;
    unint64_t v181 = v39;
    uint64_t v182 = v41;
    uint64_t v183 = v43;
    uint64_t v184 = v45;
    uint64_t v46 = v143[8];
    uint64_t v47 = v143[9];
    uint64_t v48 = v143[11];
    uint64_t v135 = v143[10];
    uint64_t v49 = v136;
    uint64_t v50 = v137;
    uint64_t v132 = v46;
    if (v137 == 1 || v136 != v48)
    {
      if (v46) {
        uint64_t v52 = v143[9];
      }
      else {
        uint64_t v52 = 0LL;
      }
      if (v144 < 0 || v52 < v144)
      {
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
        goto LABEL_179;
      }

      if (v46)
      {
        if (v144 < v47 && *(_WORD *)(v46 + 16))
        {
          uint64_t v53 = *(unsigned __int8 *)(v46 + 18);
          if (*(_BYTE *)(v46 + 18))
          {
            swift_unknownObjectRetain_n();
            uint64_t result = swift_retain();
            uint64_t v54 = v144;
            uint64_t v55 = v46;
            while (1)
            {
              unint64_t v57 = *(unsigned __int16 *)(v55 + 16);
              if (*(_WORD *)(v55 + 16))
              {
                uint64_t v58 = *(void *)(v55 + 32);
                BOOL v59 = __OFSUB__(v54, v58);
                uint64_t v60 = v54 - v58;
                if (v59) {
                  goto LABEL_159;
                }
                if (__OFADD__(v60, 1LL)) {
                  goto LABEL_160;
                }
                if (v60 + 1 <= 0)
                {
                  unint64_t v57 = 0LL;
                  goto LABEL_49;
                }

                if ((_DWORD)v57 != 1)
                {
                  uint64_t v61 = *(void *)(v55 + 56);
                  uint64_t v54 = v60 - v61;
                  if (__OFSUB__(v60, v61)) {
                    goto LABEL_173;
                  }
                  if (__OFADD__(v54, 1LL)) {
                    goto LABEL_174;
                  }
                  if (v54 + 1 < 1)
                  {
                    unint64_t v57 = 1LL;
                    uint64_t v54 = v60;
                    goto LABEL_49;
                  }

                  if ((_DWORD)v57 == 2) {
                    goto LABEL_48;
                  }
                  uint64_t v62 = *(void *)(v55 + 80);
                  BOOL v59 = __OFSUB__(v54, v62);
                  uint64_t v60 = v54 - v62;
                  if (v59) {
                    goto LABEL_177;
                  }
                  if (__OFADD__(v60, 1LL)) {
                    goto LABEL_178;
                  }
                  if (v60 + 1 < 1)
                  {
                    unint64_t v57 = 2LL;
                    goto LABEL_49;
                  }

                  if ((_DWORD)v57 != 3)
                  {
                    uint64_t v63 = 3LL;
                    if (v57 > 3) {
                      uint64_t v63 = *(unsigned __int16 *)(v55 + 16);
                    }
                    uint64_t v64 = (void *)(v55 + 104);
                    uint64_t v65 = 3LL;
                    while (1)
                    {
                      if (v63 == v65) {
                        goto LABEL_169;
                      }
                      uint64_t v54 = v60 - *v64;
                      if (__OFSUB__(v60, *v64)) {
                        goto LABEL_170;
                      }
                      if (__OFADD__(v54, 1LL)) {
                        goto LABEL_171;
                      }
                      if (v54 + 1 < 1) {
                        break;
                      }
                      ++v65;
                      v64 += 3;
                      uint64_t v60 = v54;
                      if (v57 == v65) {
                        goto LABEL_48;
                      }
                    }

                    unint64_t v57 = v65;
                    uint64_t v54 = v60;
                    goto LABEL_49;
                  }
                }

                uint64_t v54 = v60;
              }

uint64_t static AttributedStringProtocol.== infix<A>(_:_:)( uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4, uint64_t a5, uint64_t a6)
{
  if (a3 == &type metadata for AttributedString)
  {
    if (a4 != &type metadata for AttributedString)
    {
      if (a4 == &type metadata for AttributedSubstring)
      {
        uint64_t v10 = *(void *)a1;
        __int128 v58 = *(_OWORD *)(a2 + 24);
        __int128 v61 = *(_OWORD *)(a2 + 8);
        __int128 v57 = *(_OWORD *)(a2 + 40);
        uint64_t v46 = *(void *)(a2 + 56);
        uint64_t v47 = *(void *)(a2 + 64);
        __int128 v48 = *(_OWORD *)(*(void *)a1 + 32LL);
        __int128 v117 = *(_OWORD *)(*(void *)a1 + 16LL);
        __int128 v118 = v48;
        __int128 v119 = *(_OWORD *)(v10 + 48);
        *(void *)&__int128 v124 = BigString.startIndex.getter();
        *((void *)&v124 + 1) = v49;
        *(void *)&__int128 v125 = v50;
        *((void *)&v125 + 1) = v51;
        *(void *)&__int128 v126 = BigString.endIndex.getter();
        *((void *)&v126 + 1) = v52;
        *(void *)&__int128 v127 = v53;
        *((void *)&v127 + 1) = v54;
        __int128 v120 = v61;
        __int128 v121 = v58;
        __int128 v122 = v57;
        *(void *)&__int128 v123 = v46;
        *((void *)&v123 + 1) = v47;
        goto LABEL_13;
      }

      goto LABEL_8;
    }

    uint64_t v10 = *(void *)a1;
    unint64_t v20 = *(_OWORD **)a2;
    __int128 v21 = *(_OWORD *)(*(void *)a1 + 32LL);
    __int128 v117 = *(_OWORD *)(*(void *)a1 + 16LL);
    __int128 v118 = v21;
    __int128 v119 = *(_OWORD *)(v10 + 48);
    *(void *)&__int128 v124 = BigString.startIndex.getter();
    *((void *)&v124 + 1) = v22;
    *(void *)&__int128 v125 = v23;
    *((void *)&v125 + 1) = v24;
    *(void *)&__int128 v126 = BigString.endIndex.getter();
    *((void *)&v126 + 1) = v25;
    *(void *)&__int128 v127 = v26;
    *((void *)&v127 + 1) = v27;
    __int128 v28 = v20[2];
    __int128 v114 = v20[1];
    __int128 v115 = v28;
    __int128 v116 = v20[3];
    uint64_t v29 = BigString.startIndex.getter();
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    uint64_t v35 = v34;
LABEL_11:
    *(void *)&__int128 v120 = v29;
    *((void *)&v120 + 1) = v31;
    *(void *)&__int128 v121 = v33;
    *((void *)&v121 + 1) = v35;
    *(void *)&__int128 v122 = BigString.endIndex.getter();
    *((void *)&v122 + 1) = v43;
    *(void *)&__int128 v123 = v44;
    *((void *)&v123 + 1) = v45;
    goto LABEL_13;
  }

  if (a3 != &type metadata for AttributedSubstring) {
    goto LABEL_8;
  }
  if (a4 == &type metadata for AttributedString)
  {
    uint64_t v10 = *(void *)a1;
    uint64_t v36 = *(_OWORD **)a2;
    __int128 v37 = *(_OWORD *)(a1 + 24);
    __int128 v124 = *(_OWORD *)(a1 + 8);
    __int128 v125 = v37;
    __int128 v38 = *(_OWORD *)(a1 + 56);
    __int128 v126 = *(_OWORD *)(a1 + 40);
    __int128 v127 = v38;
    __int128 v39 = v36[2];
    __int128 v117 = v36[1];
    __int128 v118 = v39;
    __int128 v119 = v36[3];
    uint64_t v29 = BigString.startIndex.getter();
    uint64_t v31 = v40;
    uint64_t v33 = v41;
    uint64_t v35 = v42;
    goto LABEL_11;
  }

  if (a4 == &type metadata for AttributedSubstring)
  {
    uint64_t v10 = *(void *)a1;
    __int128 v11 = *(_OWORD *)(a1 + 24);
    __int128 v124 = *(_OWORD *)(a1 + 8);
    __int128 v125 = v11;
    __int128 v12 = *(_OWORD *)(a1 + 56);
    __int128 v126 = *(_OWORD *)(a1 + 40);
    __int128 v127 = v12;
    __int128 v13 = *(_OWORD *)(a2 + 24);
    __int128 v120 = *(_OWORD *)(a2 + 8);
    __int128 v121 = v13;
    __int128 v14 = *(_OWORD *)(a2 + 56);
    __int128 v122 = *(_OWORD *)(a2 + 40);
    __int128 v123 = v14;
LABEL_13:
    swift_retain_n();
    swift_retain();
    AttributedString.Runs.init(_:in:)(v10, &v88);
    uint64_t v55 = swift_retain();
    AttributedString.Runs.init(_:in:)(v55, &v101);
    __int128 v85 = v98;
    __int128 v86 = v99;
    uint64_t v87 = v100;
    __int128 v81 = v94;
    __int128 v82 = v95;
    __int128 v83 = v96;
    __int128 v84 = v97;
    __int128 v77 = v90;
    __int128 v78 = v91;
    __int128 v79 = v92;
    __int128 v80 = v93;
    __int128 v75 = v88;
    __int128 v76 = v89;
    __int128 v72 = v111;
    __int128 v73 = v112;
    uint64_t v74 = v113;
    __int128 v68 = v107;
    __int128 v69 = v108;
    __int128 v70 = v109;
    __int128 v71 = v110;
    __int128 v64 = v103;
    __int128 v65 = v104;
    __int128 v66 = v105;
    __int128 v67 = v106;
    __int128 v62 = v101;
    __int128 v63 = v102;
    char v19 = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)&v75, &v62);
    outlined release of AttributedString.Runs((uint64_t)&v101);
    outlined release of AttributedString.Runs((uint64_t)&v88);
    swift_release();
    goto LABEL_14;
  }

uint64_t AttributedStringProtocol.hash(into:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(&v11, a2, a3);
  __int128 v9 = v11;
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  (*(void (**)(_OWORD *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(v10, a2, a3);
  __int128 v14 = v9;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  __int128 v17 = v10[0];
  __int128 v18 = v10[1];
  AttributedString.Guts.characterwiseHash(in:into:)((uint64_t)&v14, a1);
  return swift_release();
}

void *AttributedStringProtocol.index(afterCharacter:)@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a1;
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 56))(v19, a2, a3);
  unint64_t v7 = v19[5] >> 10;
  if (v5 >> 10 >= v19[1] >> 10 && v7 >= v5 >> 10)
  {
    __int128 v9 = *(_OWORD *)(v19[0] + 16LL);
    __int128 v10 = *(_OWORD *)(v19[0] + 48LL);
    v20[1] = *(_OWORD *)(v19[0] + 32LL);
    v20[2] = v10;
    v20[0] = v9;
    __int128 v11 = *(_OWORD *)(v19[0] + 16LL);
    v21[1] = *(_OWORD *)(v19[0] + 32LL);
    v21[2] = v10;
    v21[0] = v11;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v21, (uint64_t)v22);
    outlined retain of Locale((uint64_t)v22);
    unint64_t v12 = BigString.index(after:)();
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    unint64_t v18 = v17;
    outlined release of Locale((uint64_t)v20);
    uint64_t result = (void *)swift_release();
    if (v7 >= v12 >> 10)
    {
      *a4 = v12;
      a4[1] = v14;
      a4[2] = v16;
      a4[3] = v18;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedStringProtocol.index(beforeCharacter:)@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a1;
  uint64_t result = (*(void *(**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v19, a2, a3);
  unint64_t v7 = v20 >> 10;
  if (v5 >> 10 >= v20 >> 10 && v21 >> 10 >= v5 >> 10)
  {
    __int128 v9 = v19[1];
    __int128 v10 = v19[3];
    v22[1] = v19[2];
    _OWORD v22[2] = v10;
    v22[0] = v9;
    __int128 v11 = v19[1];
    v23[1] = v19[2];
    v23[2] = v10;
    v23[0] = v11;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v23, (uint64_t)v24);
    outlined retain of Locale((uint64_t)v24);
    unint64_t v12 = BigString.index(before:)();
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    unint64_t v18 = v17;
    outlined release of Locale((uint64_t)v22);
    uint64_t result = (void *)swift_release();
    if (v7 <= v12 >> 10)
    {
      *a4 = v12;
      a4[1] = v14;
      a4[2] = v16;
      a4[3] = v18;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedStringProtocol.index(_:offsetByCharacters:)@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a1;
  uint64_t result = (*(void *(**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v20, a2, a3);
  unint64_t v7 = v21 >> 10;
  unint64_t v8 = v22 >> 10;
  if (v5 >> 10 >= v21 >> 10 && v8 >= v5 >> 10)
  {
    __int128 v10 = v20[1];
    __int128 v11 = v20[3];
    v23[1] = v20[2];
    v23[2] = v11;
    v23[0] = v10;
    __int128 v12 = v20[1];
    v24[1] = v20[2];
    v24[2] = v11;
    v24[0] = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v24, (uint64_t)v25);
    outlined retain of Locale((uint64_t)v25);
    unint64_t v13 = BigString.index(_:offsetBy:)();
    unint64_t v15 = v14;
    unint64_t v17 = v16;
    unint64_t v19 = v18;
    outlined release of Locale((uint64_t)v23);
    uint64_t result = (void *)swift_release();
    if (v13 >> 10 >= v7 && v8 >= v13 >> 10)
    {
      *a4 = v13;
      a4[1] = v15;
      a4[2] = v17;
      a4[3] = v19;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedStringProtocol.index(afterUnicodeScalar:)@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a1;
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 64))(v17, a2, a3);
  unint64_t v7 = v17[5] >> 10;
  if (v5 >> 10 >= v17[1] >> 10 && v7 >= v5 >> 10)
  {
    __int128 v9 = *(_OWORD *)(v17[0] + 32LL);
    __int128 v19 = *(_OWORD *)(v17[0] + 16LL);
    __int128 v20 = v9;
    __int128 v21 = *(_OWORD *)(v17[0] + 48LL);
    BigString.unicodeScalars.getter();
    unint64_t v10 = BigString.UnicodeScalarView.index(after:)();
    unint64_t v12 = v11;
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    outlined release of Locale((uint64_t)v18);
    uint64_t result = (void *)swift_release();
    if (v7 >= v10 >> 10)
    {
      *a4 = v10;
      a4[1] = v12;
      a4[2] = v14;
      a4[3] = v16;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedStringProtocol.index(beforeUnicodeScalar:)@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a1;
  uint64_t result = (*(void *(**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v17, a2, a3);
  unint64_t v7 = v18 >> 10;
  if (v5 >> 10 >= v18 >> 10 && v19 >> 10 >= v5 >> 10)
  {
    __int128 v9 = v17[2];
    __int128 v21 = v17[1];
    __int128 v22 = v9;
    __int128 v23 = v17[3];
    BigString.unicodeScalars.getter();
    unint64_t v10 = BigString.UnicodeScalarView.index(before:)();
    unint64_t v12 = v11;
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    outlined release of Locale((uint64_t)v20);
    uint64_t result = (void *)swift_release();
    if (v7 <= v10 >> 10)
    {
      *a4 = v10;
      a4[1] = v12;
      a4[2] = v14;
      a4[3] = v16;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedStringProtocol.index(_:offsetByUnicodeScalars:)@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a1;
  uint64_t result = (*(void *(**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v19, a2, a3);
  unint64_t v7 = v20 >> 10;
  unint64_t v8 = v21 >> 10;
  if (v5 >> 10 >= v20 >> 10 && v8 >= v5 >> 10)
  {
    __int128 v10 = v19[2];
    __int128 v23 = v19[1];
    __int128 v24 = v10;
    __int128 v25 = v19[3];
    BigString.unicodeScalars.getter();
    unint64_t v11 = BigString.UnicodeScalarView.index(_:offsetBy:)();
    unint64_t v13 = v12;
    unint64_t v15 = v14;
    unint64_t v17 = v16;
    outlined release of Locale((uint64_t)v22);
    uint64_t result = (void *)swift_release();
    if (v11 >> 10 >= v7 && v8 >= v11 >> 10)
    {
      *a4 = v11;
      a4[1] = v13;
      a4[2] = v15;
      a4[3] = v17;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedStringProtocol.index(afterRun:)@<X0>( unint64_t *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v7 = *a1;
  AttributedStringProtocol.__guts.getter(a2, a3);
  (*(void (**)(unint64_t *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(v28, a2, a3);
  unint64_t v8 = v28[0];
  uint64_t result = (*(void *(**)(void *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(v27, a2, a3);
  unint64_t v10 = v27[0];
  unint64_t v11 = v27[0] >> 10;
  if (v7 >> 10 < v8 >> 10 || v7 >> 10 >= v11)
  {
    __break(1u);
  }

  else
  {
    unint64_t v14 = v27[1];
    unint64_t v13 = v27[2];
    unint64_t v26 = v27[3];
    unint64_t v15 = AttributedString.Guts.index(afterRun:)(v7);
    unint64_t v17 = v16;
    unint64_t v19 = v18;
    unint64_t v21 = v20;
    uint64_t result = (void *)swift_release();
    if (v11 >= v15 >> 10) {
      unint64_t v22 = v15;
    }
    else {
      unint64_t v22 = v10;
    }
    if (v11 >= v15 >> 10) {
      unint64_t v23 = v17;
    }
    else {
      unint64_t v23 = v14;
    }
    if (v11 >= v15 >> 10) {
      unint64_t v24 = v19;
    }
    else {
      unint64_t v24 = v13;
    }
    *a4 = v22;
    a4[1] = v23;
    unint64_t v25 = v26;
    if (v11 >= v15 >> 10) {
      unint64_t v25 = v21;
    }
    a4[2] = v24;
    a4[3] = v25;
  }

  return result;
}

void *AttributedStringProtocol.index(beforeRun:)@<X0>( unint64_t *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v7 = *a1;
  AttributedStringProtocol.__guts.getter(a2, a3);
  (*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(v27, a2, a3);
  unint64_t v8 = v27[0];
  unint64_t v9 = v27[1];
  unint64_t v24 = v27[2];
  unint64_t v25 = v27[3];
  uint64_t result = (*(void *(**)(unint64_t *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(v26, a2, a3);
  unint64_t v11 = v8 >> 10;
  if (v8 >> 10 < v7 >> 10 && v26[0] >> 10 >= v7 >> 10)
  {
    unint64_t v13 = AttributedString.Guts.index(beforeRun:)(v7);
    unint64_t v15 = v14;
    unint64_t v17 = v16;
    unint64_t v19 = v18;
    uint64_t result = (void *)swift_release();
    if (v11 >= v13 >> 10) {
      unint64_t v20 = v8;
    }
    else {
      unint64_t v20 = v13;
    }
    if (v11 >= v13 >> 10) {
      unint64_t v21 = v9;
    }
    else {
      unint64_t v21 = v15;
    }
    unint64_t v22 = v24;
    if (v11 < v13 >> 10) {
      unint64_t v22 = v17;
    }
    *a4 = v20;
    a4[1] = v21;
    unint64_t v23 = v25;
    if (v11 < v13 >> 10) {
      unint64_t v23 = v19;
    }
    a4[2] = v22;
    a4[3] = v23;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *AttributedStringProtocol.index(_:offsetByRuns:)@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v7 = *a1;
  __int128 v107 = (void *)AttributedStringProtocol.__guts.getter(a3, a4);
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a4 + 32))(&v109, a3, a4);
  __int128 v8 = v109;
  __int128 v9 = v110;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t))(a4 + 40))(v108, a3, a4);
  if (v7 >> 10 < (unint64_t)v8 >> 10 || (unint64_t v105 = v108[0], (unint64_t)v108[0] >> 10 < v7 >> 10))
  {
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }

  unint64_t v11 = v107;
  uint64_t v12 = v107[8];
  if (v12) {
    uint64_t v13 = v107[10];
  }
  else {
    uint64_t v13 = 0LL;
  }
  int64_t v106 = v7 >> 11;
  uint64_t v14 = v108[3];
  uint64_t v15 = v107[11];
  unint64_t v101 = (unint64_t)v8 >> 10;
  uint64_t v94 = v108[1];
  uint64_t v95 = v108[2];
  uint64_t v97 = v107[9];
  unint64_t v100 = (unint64_t)v108[0] >> 10;
  if (v12)
  {
    if (v106 < v107[10] && *(_WORD *)(v12 + 16))
    {
      uint64_t v16 = *(unsigned __int8 *)(v12 + 18);
      if (*(_BYTE *)(v12 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        unint64_t v17 = v7 >> 11;
        uint64_t v18 = v12;
        while (1)
        {
          uint64_t v21 = *(unsigned __int16 *)(v18 + 16);
          if (!*(_WORD *)(v18 + 16)) {
            goto LABEL_13;
          }
          uint64_t v22 = *(void *)(v18 + 40);
          BOOL v23 = __OFSUB__(v17, v22);
          unint64_t v24 = v17 - v22;
          if (v23) {
            goto LABEL_134;
          }
          if (__OFADD__(v24, 1LL)) {
            goto LABEL_135;
          }
          if ((uint64_t)(v24 + 1) < 1)
          {
            uint64_t v21 = 0LL;
            goto LABEL_14;
          }

          if ((_DWORD)v21 == 1) {
            break;
          }
          unint64_t v25 = (uint64_t *)(v18 + 64);
          uint64_t v26 = 1LL;
          while (1)
          {
            uint64_t v27 = *v25;
            v25 += 3;
            unint64_t v17 = v24 - v27;
            if (__OFSUB__(v24, v27))
            {
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
              goto LABEL_133;
            }

            if (__OFADD__(v17, 1LL)) {
              goto LABEL_130;
            }
            ++v26;
            unint64_t v24 = v17;
            if (v21 == v26) {
              goto LABEL_13;
            }
          }

          uint64_t v21 = v26;
          unint64_t v17 = v24;
LABEL_14:
          char v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
          uint64_t v16 = ((-15LL << v19) - 1) & v16 | (v21 << v19);
          uint64_t v20 = *(void *)(v18 + 24 + 24 * v21);
          swift_unknownObjectRetain();
          uint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v18 = v20;
          if (!*(_BYTE *)(v20 + 18)) {
            goto LABEL_33;
          }
        }

        unint64_t v17 = v24;
LABEL_13:
        if (!v17) {
          goto LABEL_14;
        }
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }

      uint64_t result = (void *)swift_unknownObjectRetain_n();
      unint64_t v17 = v7 >> 11;
      uint64_t v20 = v12;
LABEL_33:
      uint64_t v30 = *(unsigned __int16 *)(v20 + 16);
      if (!*(_WORD *)(v20 + 16)) {
        goto LABEL_45;
      }
      uint64_t v31 = *(void *)(v20 + 24);
      BOOL v23 = __OFSUB__(v17, v31);
      unint64_t v32 = v17 - v31;
      if (v23)
      {
LABEL_156:
        __break(1u);
        goto LABEL_157;
      }

      if (__OFADD__(v32, 1LL))
      {
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }

      if ((uint64_t)(v32 + 1) < 1)
      {
        uint64_t v30 = 0LL;
      }

      else
      {
        if ((_DWORD)v30 == 1)
        {
          unint64_t v17 = v32;
LABEL_45:
          if (v17)
          {
LABEL_155:
            __break(1u);
            goto LABEL_156;
          }

          goto LABEL_46;
        }

        uint64_t v33 = (uint64_t *)(v20 + 48);
        uint64_t v34 = 1LL;
        while (1)
        {
          uint64_t v35 = *v33;
          v33 += 3;
          unint64_t v17 = v32 - v35;
          if (__OFSUB__(v32, v35)) {
            goto LABEL_147;
          }
          if (__OFADD__(v17, 1LL)) {
            goto LABEL_148;
          }
          ++v34;
          unint64_t v32 = v17;
          if (v30 == v34) {
            goto LABEL_45;
          }
        }

        uint64_t v30 = v34;
        unint64_t v17 = v32;
      }

LABEL_112:
  __int128 v78 = *((_OWORD *)v46 + 2);
  __int128 v109 = *((_OWORD *)v46 + 1);
  __int128 v110 = v78;
  __int128 v111 = *((_OWORD *)v46 + 3);
  uint64_t result = (void *)BigString.utf8.getter();
  if (__OFSUB__(v45, v106)) {
    goto LABEL_146;
  }
  unint64_t v79 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v81 = v80;
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  swift_release();
  uint64_t result = (void *)outlined release of Locale((uint64_t)v108);
  unint64_t v86 = v79 >> 10;
  if (v101 >= v79 >> 10) {
    unint64_t v87 = v50;
  }
  else {
    unint64_t v87 = v79;
  }
  if (v100 >= v87 >> 10)
  {
    BOOL v92 = v101 >= v86;
    if (v101 >= v86) {
      uint64_t v90 = *((void *)&v9 + 1);
    }
    else {
      uint64_t v90 = v85;
    }
    if (v101 >= v86) {
      uint64_t v91 = v9;
    }
    else {
      uint64_t v91 = v83;
    }
    uint64_t v89 = *((void *)&v8 + 1);
    if (!v92) {
      uint64_t v89 = v81;
    }
    unint64_t v51 = v87;
    __int128 v88 = a5;
  }

  else
  {
    __int128 v88 = a5;
    uint64_t v90 = v93;
    uint64_t v89 = v94;
    uint64_t v91 = v95;
  }

  *__int128 v88 = v51;
  v88[1] = v89;
  v88[2] = v91;
  v88[3] = v90;
  return result;
}

          __break(1u);
          goto LABEL_113;
        }

      swift_bridgeObjectRetain();
      uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v76 = v88;
LABEL_92:
      if (v87 >= v77)
      {
        __int128 v78 = 0LL;
        goto LABEL_104;
      }

      __int128 v78 = *v76;
      if (*v76 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v82) {
          goto LABEL_95;
        }
      }

      else if (*(void *)((v78 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_95:
        __int128 v78 = specialized RangeReplaceableCollection<>.popLast()();
LABEL_104:
        swift_release();
        swift_release();
        return v78;
      }

      __break(1u);
      goto LABEL_116;
    }

    a4 = v100;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v102, (uint64_t)&v96);
    uint64_t v38 = *((void *)&v97 + 1);
    uint64_t v39 = v98;
    uint64_t v40 = __swift_project_boxed_opaque_existential_1(&v96, *((uint64_t *)&v97 + 1));
    swift_bridgeObjectRetain();
    __int128 v41 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(v40, a2, a4, v37, 0LL, 0LL, v38, v39);
    a5 = v8;
    if (v8)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
      swift_bridgeObjectRelease_n();
      swift_release();
      unint64_t v79 = v88;
      __int128 v78 = *v88;
      if (*v88 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v79 = v88;
      }

      else
      {
        uint64_t v80 = *(void *)((v78 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      if (v87 >= v80) {
        goto LABEL_102;
      }
      __int128 v78 = *v79;
      if (!(*v79 >> 62))
      {
        if (*(void *)((v78 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
LABEL_101:
          specialized RangeReplaceableCollection<>.popLast()();
          swift_release();
LABEL_102:
          swift_willThrow();
          goto LABEL_104;
        }

  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v40 = (void *)swift_allocError();
  *uint64_t v90 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_20:
  v152[0] = v40;
  uint64_t v42 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  else {
    uint64_t v43 = 0LL;
  }
  *(_OWORD *)((char *)v152 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0LL, v152);
  _So9NSDecimala__length_setter(0LL, v152);
  _So9NSDecimala__isNegative_setter(1LL, v152);
  _So9NSDecimala__isCompact_setter(v152);
  _So9NSDecimala__reserved_setter(v152);
  uint64_t v44 = *(_OWORD *)((char *)v152 + 4);
  *(_DWORD *)a1 = v152[0];
  *(_OWORD *)(a1 + 4) = v44;

  return v43;
}

  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v40 = (void *)swift_allocError();
  *uint64_t v90 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_20:
  v152[0] = v40;
  uint64_t v42 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  else {
    uint64_t v43 = 0LL;
  }
  *(_OWORD *)((char *)v152 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0LL, v152);
  _So9NSDecimala__length_setter(0LL, v152);
  _So9NSDecimala__isNegative_setter(1LL, v152);
  _So9NSDecimala__isCompact_setter(v152);
  _So9NSDecimala__reserved_setter(v152);
  uint64_t v44 = *(_OWORD *)((char *)v152 + 4);
  *(_DWORD *)a1 = v152[0];
  *(_OWORD *)(a1 + 4) = v44;

  return v43;
}

          __break(1u);
        }
      }

      __break(1u);
      goto LABEL_112;
    }

    break;
  }

          __break(1u);
        }
      }

      __break(1u);
      goto LABEL_112;
    }

    break;
  }

      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v104 = MEMORY[0x18961AFE8];
  }

  else
  {
    unint64_t v5 = v4 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
    uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v6 + 16) = v5;
    uint64_t v104 = v6;
    __dst = (char *)(v6 + 32);
  }

  __int128 v8 = 0LL;
  __int128 v9 = (char *)MEMORY[0x18961AFE8];
  unint64_t v10 = a1;
  while (1)
  {
    uint64_t v12 = v8++;
    if (v8 < v2)
    {
      uint64_t v13 = *v10;
      outlined init with copy of (key: String, value: Encodable)(*v10 + 56 * v8, (uint64_t)&v110);
      outlined init with copy of (key: String, value: Encodable)(v13 + 56 * v12, (uint64_t)&v108);
      if (v110 == v108 && v111 == v109) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
      __int128 v8 = v12 + 2;
      if (v12 + 2 < v2)
      {
        uint64_t v16 = v13;
        unint64_t v17 = v13 + 56 * v12 + 56;
        while (1)
        {
          outlined init with copy of (key: String, value: Encodable)(v17 + 56, (uint64_t)&v110);
          outlined init with copy of (key: String, value: Encodable)(v17, (uint64_t)&v108);
          uint64_t v18 = v110 == v108 && v111 == v109;
          char v19 = v18 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
          if (((v15 ^ v19) & 1) != 0) {
            break;
          }
          ++v8;
          v17 += 56LL;
          if (v2 == v8)
          {
            __int128 v8 = v2;
            break;
          }
        }

        uint64_t v13 = v16;
      }

      if ((v15 & 1) != 0)
      {
        if (v8 < v12) {
          goto LABEL_150;
        }
        if (v12 < v8)
        {
          uint64_t v20 = v13 + 56 * v8 - 56;
          uint64_t v21 = (__int128 *)(v13 + 56 * v12);
          uint64_t v22 = v8;
          BOOL v23 = v12;
          do
          {
            if (v23 != --v22)
            {
              if (!v13) {
                goto LABEL_155;
              }
              unint64_t v24 = *((void *)v21 + 6);
              uint64_t v26 = v21[1];
              unint64_t v25 = v21[2];
              uint64_t v27 = *v21;
              uint64_t v29 = *(_OWORD *)(v20 + 16);
              unint64_t v28 = *(_OWORD *)(v20 + 32);
              uint64_t v30 = *(_OWORD *)v20;
              *((void *)v21 + 6) = *(void *)(v20 + 48);
              v21[1] = v29;
              v21[2] = v28;
              void *v21 = v30;
              *(_OWORD *)uint64_t v20 = v27;
              *(_OWORD *)(v20 + 16) = v26;
              *(_OWORD *)(v20 + 32) = v25;
              *(void *)(v20 + 48) = v24;
            }

            ++v23;
            v20 -= 56LL;
            uint64_t v21 = (__int128 *)((char *)v21 + 56);
          }

          while (v23 < v22);
        }
      }
    }

    if (v8 >= v2) {
      goto LABEL_64;
    }
    if (__OFSUB__(v8, v12)) {
      goto LABEL_148;
    }
    if (v8 - v12 >= v105) {
      goto LABEL_64;
    }
    if (__OFADD__(v12, v105)) {
      goto LABEL_151;
    }
    if (v12 + v105 < v2) {
      uint64_t v2 = v12 + v105;
    }
    if (v2 < v12) {
      break;
    }
    if (v8 != v2)
    {
      uint64_t v31 = 56 * v8;
      do
      {
        unint64_t v32 = v12;
        uint64_t v33 = v31;
        while (1)
        {
          uint64_t v34 = *v10 + v33;
          outlined init with copy of (key: String, value: Encodable)(v34, (uint64_t)&v110);
          outlined init with copy of (key: String, value: Encodable)(v34 - 56, (uint64_t)&v108);
          if (v110 == v108 && v111 == v109) {
            break;
          }
          uint64_t v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
          if ((v36 & 1) == 0) {
            goto LABEL_53;
          }
          if (!*v10) {
            goto LABEL_153;
          }
          uint64_t v37 = *v10 + v33;
          uint64_t v38 = *(void *)(v37 + 48);
          uint64_t v40 = *(_OWORD *)(v37 + 16);
          uint64_t v39 = *(_OWORD *)(v37 + 32);
          __int128 v41 = *(_OWORD *)v37;
          uint64_t v42 = *(_OWORD *)(v37 - 40);
          *(_OWORD *)uint64_t v37 = *(_OWORD *)(v37 - 56);
          *(_OWORD *)(v37 + 16) = v42;
          *(_OWORD *)(v37 + 32) = *(_OWORD *)(v37 - 24);
          *(void *)(v37 + 48) = *(void *)(v37 - 8);
          *(_OWORD *)(v37 - 56) = v41;
          *(_OWORD *)(v37 - 40) = v40;
          *(_OWORD *)(v37 - 24) = v39;
          v33 -= 56LL;
          ++v32;
          *(void *)(v37 - 8) = v38;
          if (v8 == v32) {
            goto LABEL_53;
          }
        }

        outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
LABEL_53:
        ++v8;
        v31 += 56LL;
      }

      while (v8 != v2);
      __int128 v8 = v2;
    }

      v203._uint64_t countAndFlagsBits = v84;
      v203._object = (void *)v63;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      __int128 v158 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v159 = objc_msgSend(v158, sel__fastCharacterContents, v196, v197);
      uint64_t v160 = v158;
      if (v159)
      {
        v203._uint64_t countAndFlagsBits = v84;
        v203._object = (void *)v63;
        StringProtocol._ephemeralString.getter();
        __int128 v161 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v162 = objc_msgSend(v161, sel_length);
        uint64_t v163 = swift_unknownObjectRelease();
        uint64_t v84 = (uint64_t)&v196;
        unint64_t v164 = MEMORY[0x1895F8858](v163);
        LOBYTE(v194) = 1;
        MEMORY[0x1895F8858](v164);
        v192[2] = v159;
        v192[3] = v162;
        uint64_t v64 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v159,  (uint64_t)v162,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  v165,  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)v192);
        uint64_t v66 = v166;
        swift_bridgeObjectRelease_n();
        if (!v66) {
          goto LABEL_114;
        }
        goto LABEL_116;
      }

      v203._uint64_t countAndFlagsBits = v84;
      v203._object = (void *)v63;
      swift_bridgeObjectRetain();
      unint64_t v175 = String.init<A>(_:)();
      v176 = v174;
      if ((v174 & 0x1000000000000000LL) != 0)
      {
        unint64_t v175 = static String._copying(_:)();
        __int128 v191 = v190;
        swift_bridgeObjectRelease();
        v176 = v191;
        if ((v191 & 0x2000000000000000LL) != 0)
        {
LABEL_164:
          v203._uint64_t countAndFlagsBits = v175;
          v203._object = (void *)(v176 & 0xFFFFFFFFFFFFFFLL);
          __int128 v201 = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          uint64_t v202 = 0LL;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v203,  HIBYTE(v176) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v201,  1,  (unsigned __int8 *)&v203,  HIBYTE(v176) & 0xF,  (uint64_t *)&v199);
          uint64_t v64 = v199;
          uint64_t v66 = v200;
          swift_release();
          goto LABEL_165;
        }
      }

      else if ((v174 & 0x2000000000000000LL) != 0)
      {
        goto LABEL_164;
      }

      if ((v175 & 0x1000000000000000LL) != 0)
      {
        unint64_t v177 = (unsigned __int8 *)((v176 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v178 = v175 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        unint64_t v177 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }

      v203._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v203._object = 0LL;
      uint64_t v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v177,  v178,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v203,  1,  v177,  v178);
      uint64_t v66 = v179;
LABEL_165:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (!v66) {
        goto LABEL_114;
      }
LABEL_116:
      __int128 v167 = specialized Collection.first.getter(v64, v66);
      if ((v167 & 0x1FF) != 0x5B) {
        goto LABEL_142;
      }
      if ((v66 & 0x1000000000000000LL) != 0)
      {
LABEL_153:
        uint64_t result = String.UTF8View._foreignCount()();
        if (__OFSUB__(result, 1LL))
        {
          __break(1u);
          return result;
        }

        v169 = (v64 >> 59) & 1;
        __int128 v167 = MEMORY[0x186E1B838](15LL, result - 1, v64, v66);
        uint64_t v15 = v198;
LABEL_122:
        if ((v167 & 0xC) != 4LL << v169) {
          goto LABEL_123;
        }
        goto LABEL_156;
      }

      __int128 v168 = HIBYTE(v66) & 0xF;
      if ((v66 & 0x2000000000000000LL) == 0) {
        __int128 v168 = v64 & 0xFFFFFFFFFFFFLL;
      }
      if (v168)
      {
        __int128 v167 = (v168 << 16) - 65532;
        LOBYTE(v169) = 1;
        goto LABEL_122;
      }

      __break(1u);
LABEL_156:
      __int128 v167 = _StringGuts._slowEnsureMatchingEncoding(_:)(v167, v64, v66);
LABEL_123:
      __int128 v170 = HIBYTE(v66) & 0xF;
      if ((v66 & 0x2000000000000000LL) == 0) {
        __int128 v170 = v64 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v171 = v167 >> 16;
      if (v167 >> 16 < v170)
      {
        if ((v66 & 0x1000000000000000LL) != 0)
        {
          char v173 = String.UTF8View._foreignSubscript(position:)();
        }

        else if ((v66 & 0x2000000000000000LL) != 0)
        {
          v203._uint64_t countAndFlagsBits = v64;
          v203._object = (void *)(v66 & 0xFFFFFFFFFFFFFFLL);
          char v173 = *((_BYTE *)&v203._countAndFlagsBits + v171);
        }

        else
        {
          if ((v64 & 0x1000000000000000LL) != 0) {
            unint64_t v172 = (v66 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            unint64_t v172 = _StringObject.sharedUTF8.getter();
          }
          char v173 = *(_BYTE *)(v172 + v171);
        }

        if (v173 == 93)
        {
          if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v64, v66) & 1) == 0)
          {
LABEL_140:
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_141;
          }
        }

        else
        {
LABEL_142:
          if ((v66 & 0x1000000000000000LL) != 0)
          {
            v203._uint64_t countAndFlagsBits = v64;
            v203._object = (void *)v66;
            lazy protocol witness table accessor for type String and conformance String();
            StringProtocol._ephemeralString.getter();
            uint64_t v183 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            uint64_t v184 = (unsigned __int16 *)objc_msgSend(v183, sel__fastCharacterContents);
            __int128 v185 = v183;
            if (v184)
            {
              v203._uint64_t countAndFlagsBits = v64;
              v203._object = (void *)v66;
              StringProtocol._ephemeralString.getter();
              __int128 v186 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              __int128 v187 = objc_msgSend(v186, sel_length);
              swift_unknownObjectRelease();
              __int128 v188 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v184,  (uint64_t)v187,  4u,  1);
            }

            else
            {
              __int128 v188 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v64,  v66,  4u,  1);
            }

            uint64_t v15 = v198;
            if ((v188 & 1) == 0) {
              goto LABEL_140;
            }
          }

          else
          {
            if ((v66 & 0x2000000000000000LL) != 0)
            {
              unint64_t v181 = HIBYTE(v66) & 0xF;
              v203._uint64_t countAndFlagsBits = v64;
              v203._object = (void *)(v66 & 0xFFFFFFFFFFFFFFLL);
              uint64_t v180 = (char *)&v203;
            }

            else if ((v64 & 0x1000000000000000LL) != 0)
            {
              uint64_t v180 = (char *)((v66 & 0xFFFFFFFFFFFFFFFLL) + 32);
              unint64_t v181 = v64 & 0xFFFFFFFFFFFFLL;
            }

            else
            {
              uint64_t v180 = (char *)_StringObject.sharedUTF8.getter();
            }

            if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v180,  v181,  4u,  1)) {
              goto LABEL_140;
            }
          }
        }

        v182._uint64_t countAndFlagsBits = v64;
        v182._object = (void *)v66;
        String.append(_:)(v182);
LABEL_38:
        swift_bridgeObjectRelease();
LABEL_39:
        if ((v6[144] & 1) == 0)
        {
LABEL_40:
          unint64_t v67 = String.subscript.getter();
          uint64_t v71 = v70;
          if ((v67 ^ v68) >= 0x4000)
          {
            uint64_t v72 = v67;
            int64_t v73 = v68;
            uint64_t v74 = v69;
            uint64_t v75 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v67,  v68,  v69,  v70,  10LL);
            if ((v76 & 0x100) != 0)
            {
              uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized _parseInteger<A, B>(ascii:radix:)( v72,  v73,  v74,  v71,  10LL);
              uint64_t v82 = v81;
              swift_bridgeObjectRelease();
              if ((v82 & 1) != 0) {
                goto LABEL_66;
              }
            }

            else
            {
              uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
              __int128 v78 = v76;
              swift_bridgeObjectRelease();
              if ((v78 & 1) != 0) {
                goto LABEL_66;
              }
            }

            v203._uint64_t countAndFlagsBits = 58LL;
            v203._object = (void *)0xE100000000000000LL;
            __int128 v201 = (uint64_t)v77;
            v83._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v83);
            swift_bridgeObjectRelease();
            String.append(_:)(v203);
          }

          swift_bridgeObjectRelease();
        }

              uint64_t v71 = (v84 - 1) & v84;
              uint64_t v74 = __clz(__rbit64(v84)) + (v68 << 6);
            }

            uint64_t v75 = 16 * v74;
            uint64_t v76 = (uint64_t *)(*(void *)(v4 + 48) + v75);
            __int128 v78 = *v76;
            uint64_t v77 = v76[1];
            unint64_t v79 = *(void *)(v4 + 56) + v75;
            uint64_t v80 = *(void *)v79;
            LOBYTE(v79) = *(_BYTE *)(v79 + 8);
            uint64_t v81 = (void *)(*(void *)(v60 + 48) + v75);
            *uint64_t v81 = v78;
            v81[1] = v77;
            uint64_t v82 = *(void *)(v60 + 56) + v75;
            *(void *)uint64_t v82 = v80;
            *(_BYTE *)(v82 + 8) = v79;
            swift_bridgeObjectRetain();
          }
        }

unint64_t AttributedStringProtocol.range<A>(of:options:locale:)@<X0>( unint64_t *a1@<X0>, unint64_t a2@<X1>, ValueMetadata *a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, unint64_t *a7@<X8>)
{
  void (*v99)(_BYTE *__return_ptr, ValueMetadata *, uint64_t);
  unint64_t v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  __int128 v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  ValueMetadata *v149;
  _BYTE v150[72];
  uint64_t v151;
  void v152[14];
  uint64_t v153;
  _OWORD v154[3];
  _OWORD v155[3];
  __int128 v156[3];
  _BYTE v157[56];
  Swift::String v147 = a5;
  uint64_t v144 = a1;
  uint64_t v145 = a6;
  __int128 v149 = a3;
  uint64_t v142 = a7;
  uint64_t v143 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  unint64_t v11 = (char *)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v129 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v129 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1895F8858](v21);
  BOOL v23 = (char *)&v129 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v25 = MEMORY[0x1895F8858](v24);
  Swift::String v146 = a4;
  uint64_t v26 = *(void *)(a4 - 8);
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  unint64_t v32 = (char *)&v129 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v141 = *(char **)v30;
  if (!v141)
  {
    uint64_t v141 = v23;
    uint64_t v131 = v18;
    uint64_t v132 = v20;
    uint64_t v133 = v13;
    uint64_t v134 = v11;
    uint64_t v137 = v29;
    unint64_t v138 = v27;
    id v139 = v28;
    uint64_t v135 = v15;
    uint64_t v136 = v14;
    uint64_t v59 = v147;
    (*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(v147 + 56))(v152, v149, v147);
    *(void *)__int128 v150 = v152[0];
    *(_OWORD *)&v150[8] = *(_OWORD *)&v152[1];
    *(_OWORD *)&v150[24] = *(_OWORD *)&v152[3];
    *(_OWORD *)&v150[40] = *(_OWORD *)&v152[5];
    *(_OWORD *)&v150[56] = *(_OWORD *)&v152[7];
    __int128 v151 = v152[9];
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
    unint64_t v60 = Substring.init<A>(_:)();
    unint64_t v62 = v61;
    unint64_t v140 = v63;
    unint64_t v65 = v64;
    (*(void (**)(char *, unint64_t *, unint64_t))(v26 + 16))(v32, v144, v146);
    unint64_t v66 = Substring.init<A>(_:)();
    unint64_t v70 = v66;
    unint64_t v71 = v67;
    unint64_t v72 = v68;
    LOWORD(v32) = v143;
    if ((v143 & 0x400) == 0)
    {
      if ((v60 ^ v62) < 0x4000 || !((v66 ^ v67) >> 14))
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }

      uint64_t v130 = v62;
      if ((v143 & 2) != 0)
      {
        Swift::String v146 = v69;
        LODWORD(v141) = (v143 >> 2) & 1;
        uint64_t v145 = (v143 >> 3) & 1;
        LODWORD(v144) = v143 & 1;
        swift_bridgeObjectRetain();
        uint64_t v59 = v147;
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v70,  v71,  v72,  v146,  BYTE1(v32) & 1,  (v32 & 0x80) != 0LL,  (char)v144,  v145,  (char)v141,  v60,  v62,  v140,  v65);
        char v88 = v96;
        swift_bridgeObjectRelease();
      }

      else
      {
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v66,  v67,  v68,  v69,  (v143 >> 8) & 1,  (v143 >> 7) & 1,  v143 & 1,  (v143 >> 3) & 1,  (v143 & 4) != 0,  v60,  v62,  v140,  v65);
        char v88 = v87;
      }

      uint64_t v94 = v149;
      swift_bridgeObjectRelease();
      if ((v88 & 1) != 0) {
        goto LABEL_15;
      }
LABEL_37:
      swift_bridgeObjectRetain();
      uint64_t v98 = Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      __int128 v149 = (ValueMetadata *)Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      uint64_t v99 = *(void (**)(_BYTE *__return_ptr, ValueMetadata *, uint64_t))(v59 + 32);
      v99(v152, v94, v59);
      unint64_t v100 = v152[0];
      unint64_t result = AttributedStringProtocol.__guts.getter(v94, v59);
      if (!__OFADD__(v98, v100 >> 11))
      {
        unint64_t v101 = *(_OWORD *)(result + 32);
        *(_OWORD *)uint64_t v152 = *(_OWORD *)(result + 16);
        *(_OWORD *)&v152[2] = v101;
        *(_OWORD *)&v152[4] = *(_OWORD *)(result + 48);
        BigString.utf8.getter();
        BigString.startIndex.getter();
        __int128 v102 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v104 = v103;
        Swift::String v147 = v106;
        __int128 v148 = v105;
        outlined release of Locale((uint64_t)v155);
        swift_release();
        v99(v150, v94, v59);
        __int128 v107 = *(void *)v150;
        unint64_t result = AttributedStringProtocol.__guts.getter(v94, v59);
        if (!__OFADD__(v149, v107 >> 11))
        {
          __int128 v108 = *(_OWORD *)(result + 32);
          *(_OWORD *)__int128 v150 = *(_OWORD *)(result + 16);
          *(_OWORD *)&v150[16] = v108;
          *(_OWORD *)&v150[32] = *(_OWORD *)(result + 48);
          BigString.utf8.getter();
          BigString.startIndex.getter();
          __int128 v109 = BigString.UTF8View.index(_:offsetBy:)();
          __int128 v111 = v110;
          uint64_t v113 = v112;
          __int128 v115 = v114;
          outlined release of Locale((uint64_t)v156);
          unint64_t result = swift_release();
          if (v109 >> 10 >= v102 >> 10)
          {
            __int128 v116 = v142;
            *uint64_t v142 = v102;
            v116[1] = v104;
            __int128 v117 = v147;
            v116[2] = v148;
            v116[3] = v117;
            v116[4] = v109;
            v116[5] = v111;
            v116[6] = v113;
            v116[7] = v115;
            return result;
          }

          goto LABEL_56;
        }

uint64_t specialized Rope.offset<A>(of:in:)( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result == a7)
  {
    if (a4)
    {
      uint64_t v11 = result;
      swift_unknownObjectRetain();
      uint64_t v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, a2, a3, a4, a5);
      swift_unknownObjectRelease();
      return v12;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5, char a6, char a7, int a8, char a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13)
{
  unint64_t v17 = a12;
  unint64_t v16 = a13;
  unint64_t v19 = a10;
  unint64_t v18 = a11;
  if ((a5 & 1) == 0 && (a6 & 1) == 0)
  {
    if ((a7 & 1) == 0) {
      return specialized BidirectionalCollection._range<A>(of:anchored:backwards:)( a1,  a2,  a3,  a4,  a8 & 1,  a9 & 1,  a10,  a11,  a12,  a13);
    }
LABEL_6:
    if ((a9 & 1) == 0)
    {
      if ((a8 & 1) == 0)
      {
LABEL_8:
        char v129 = a6;
        int v123 = a8;
        unint64_t v21 = String.UnicodeScalarView.index(_:offsetBy:)(a11, -1LL, a12, a13);
        int v122 = 1;
LABEL_14:
        unint64_t v20 = a10;
        goto LABEL_15;
      }

      goto LABEL_13;
    }

    goto LABEL_11;
  }

  if ((a7 & 1) != 0) {
    goto LABEL_6;
  }
  if ((a9 & 1) == 0)
  {
    if ((a8 & 1) == 0)
    {
      if ((a6 & 1) == 0)
      {
        unint64_t v21 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(a11, a1, a2, a3, a4, a10);
        if ((v113 & 1) != 0) {
          return 0LL;
        }
        int v122 = 1;
        int v123 = a8;
        char v129 = a6;
        goto LABEL_14;
      }

      goto LABEL_8;
    }

LABEL_161:
        char v96 = 0;
LABEL_162:
        unint64_t v97 = _StringGuts.validateScalarIndex(_:)(v144, v17, v16);
        if ((v16 & 0x1000000000000000LL) != 0)
        {
          uint64_t v103 = String.UnicodeScalarView._foreignIndex(after:)();
        }

        else
        {
          unint64_t v98 = v97 >> 16;
          if ((v16 & 0x2000000000000000LL) != 0)
          {
            unint64_t v141 = v17;
            uint64_t v142 = a13 & 0xFFFFFFFFFFFFFFLL;
            int v100 = *((unsigned __int8 *)&v141 + v98);
          }

          else
          {
            uint64_t v99 = (a13 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v17 & 0x1000000000000000LL) == 0) {
              uint64_t v99 = _StringObject.sharedUTF8.getter();
            }
            int v100 = *(unsigned __int8 *)(v99 + v98);
          }

          int v101 = (char)v100;
          unsigned int v102 = __clz(v100 ^ 0xFF) - 24;
          if (v101 >= 0) {
            LOBYTE(v102) = 1;
          }
          uint64_t v103 = ((v98 + v102) << 16) | 5;
        }

        unint64_t v144 = v103;
        int v23 = 0;
        if ((v96 & 1) == 0) {
          goto LABEL_186;
        }
        BOOL v140 = 1;
        unint64_t v137 = v136;
        BOOL v104 = v136 == v139;
        if (v136 >= v139)
        {
          unint64_t v18 = a11;
          goto LABEL_201;
        }
      }

      else
      {
        if ((v47 & 1) == 0) {
          goto LABEL_185;
        }
        char v94 = 1;
        if ((v26 & 0x2000000000000000LL) == 0)
        {
LABEL_155:
          uint64_t v95 = v24 & 0xFFFFFFFFFFFFLL;
          goto LABEL_159;
        }

  unsigned int v119 = v179;
  uint64_t v120 = v180;
  if (v185 >= 1)
  {
    v194[0] = v125;
    *(double *)__dst = v13;
    *((void *)&__dst[0] + 1) = v17;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(v194, (uint64_t)__dst, (uint64_t)__src);
    if ((__src[1] & 1) == 0) {
      unint64_t v125 = v125 - *((double *)__src + 1);
    }
    unsigned int v119 = v179;
  }

  uint64_t v9 = v124 + v125 + 0.0;
LABEL_166:
  unsigned int v92 = v119 == 0;
  uint64_t v133 = v119;
  unint64_t v134 = v173;
  if (v92) {
    unint64_t v134 = 1;
  }
  if ((v134 & 1) == 0)
  {
    uint64_t v135 = fmod(v9, 1.0);
    unint64_t v136 = v9 - v135;
    if (v135 < 0.0) {
      unint64_t v136 = v9 - v135 + -1.0;
    }
    unint64_t v137 = (double)v133;
    if (v135 >= 0.0) {
      unint64_t v138 = v135;
    }
    else {
      unint64_t v138 = v135 + 1.0;
    }
    unint64_t v139 = v137 * 86400.0 + v136;
    *(double *)__src = v9;
    v140._time = _CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE(v137 * 86400.0));
    *(double *)__src = v139;
    if (v140._time == _CalendarGregorian.timeInDay(for:)(v140)) {
      goto LABEL_182;
    }
    unint64_t v141 = swift_getObjectType();
    *(double *)__src = v139;
    uint64_t v142 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 40);
    unint64_t v143 = v142(__src, v141, v17);
    *(double *)__src = v9;
    unint64_t result = v142(__src, v141, v17);
    if (v143 == result) {
      goto LABEL_182;
    }
    unint64_t v144 = result;
    uint64_t v145 = result - v143;
    if (!__OFSUB__(result, v143))
    {
      Swift::String v146 = v139 + (double)v145;
      *(double *)__src = v146;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v145)) == v140._time)
      {
        unint64_t v139 = v146;
      }

      else if (v144 >= v143)
      {
        unint64_t v139 = v146;
      }

  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_168:
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

                    __break(1u);
LABEL_162:
                    __break(1u);
                  }

                  unint64_t v51 = v62;
                }
              }
            }
          }

      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v124, v125, 0x10u, 1))
      {
LABEL_162:
        swift_bridgeObjectRelease();
        *(void *)&v210[8] = v2;
        *(void *)&v210[16] = v1;
        goto LABEL_179;
      }
    }

LABEL_158:
        uint64_t v95 = HIBYTE(v26) & 0xF;
LABEL_159:
        if (v27 >> 14 == 4 * v95)
        {
          if ((v94 & 1) != 0)
          {
LABEL_185:
            int v23 = 1;
LABEL_186:
            unint64_t v105 = _StringGuts.validateScalarIndex(_:)(v134, a3, v132);
            if ((v132 & 0x1000000000000000LL) != 0)
            {
              unint64_t v29 = String.UnicodeScalarView._foreignIndex(after:)();
            }

            else
            {
              unint64_t v106 = v105 >> 16;
              if ((v132 & 0x2000000000000000LL) != 0)
              {
                unint64_t v141 = a3;
                uint64_t v142 = v127;
                int v108 = *((unsigned __int8 *)&v141 + v106);
              }

              else
              {
                uint64_t v107 = v126;
                if ((a3 & 0x1000000000000000LL) == 0) {
                  uint64_t v107 = _StringObject.sharedUTF8.getter();
                }
                int v108 = *(unsigned __int8 *)(v107 + v106);
              }

              int v109 = (char)v108;
              unsigned int v110 = __clz(v108 ^ 0xFF) - 24;
              if (v109 >= 0) {
                LOBYTE(v110) = 1;
              }
              unint64_t v29 = ((v106 + v110) << 16) | 5;
            }

            unint64_t v137 = v29 >> 14;
            if (v29 >> 14 < v139) {
              goto LABEL_18;
            }
            goto LABEL_211;
          }

          goto LABEL_161;
        }

        if ((v94 & 1) == 0)
        {
          char v96 = 1;
          goto LABEL_162;
        }

        BOOL v140 = 1;
        LOBYTE(v23) = 1;
        unint64_t v137 = v136;
        BOOL v30 = v136 == v139;
        if (v136 >= v139) {
          goto LABEL_205;
        }
      }
    }

    unint64_t v28 = v50;
    unint64_t v25 = v48;
LABEL_82:
    unint64_t v17 = a12;
    unint64_t v16 = a13;
LABEL_100:
    uint64_t v70 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000LL) == 0) {
      uint64_t v70 = v24 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v71 = 4 * v70;
    uint64_t v72 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000LL) == 0) {
      uint64_t v72 = v25 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v73 = 4 * v72;
    unint64_t v74 = v143;
    unint64_t v75 = v143 >> 14;
    if (v143 >> 14 != v73)
    {
      do
      {
        if (v71 == v27 >> 14) {
          break;
        }
        _StringGuts.validateScalarIndex(_:)(v74, v25, v28);
        if ((v28 & 0x1000000000000000LL) != 0)
        {
          int v76 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v28 & 0x2000000000000000LL) != 0)
          {
            unint64_t v141 = v25;
            uint64_t v142 = v28 & 0xFFFFFFFFFFFFFFLL;
          }

          else if ((v25 & 0x1000000000000000LL) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }

          int v76 = _decodeScalar(_:startingAt:)();
        }

        int v77 = v76;
        _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
        if ((v26 & 0x1000000000000000LL) != 0)
        {
          int v78 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v26 & 0x2000000000000000LL) != 0)
          {
            unint64_t v141 = v24;
            uint64_t v142 = v26 & 0xFFFFFFFFFFFFFFLL;
          }

          else if ((v24 & 0x1000000000000000LL) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }

          int v78 = _decodeScalar(_:startingAt:)();
        }

        int v79 = v78;
        unint64_t v74 = v143;
        if (v77 != v79) {
          break;
        }
        unint64_t v80 = _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
        if ((v28 & 0x1000000000000000LL) != 0)
        {
          uint64_t v84 = String.UnicodeScalarView._foreignIndex(after:)();
        }

        else
        {
          unint64_t v81 = v80 >> 16;
          if ((v28 & 0x2000000000000000LL) != 0)
          {
            unint64_t v141 = v25;
            uint64_t v142 = v28 & 0xFFFFFFFFFFFFFFLL;
            int v83 = *((unsigned __int8 *)&v141 + v81);
          }

          else
          {
            uint64_t v82 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v25 & 0x1000000000000000LL) == 0) {
              uint64_t v82 = _StringObject.sharedUTF8.getter();
            }
            int v83 = *(unsigned __int8 *)(v82 + v81);
          }

          int v85 = (char)v83;
          unsigned int v86 = __clz(v83 ^ 0xFF) - 24;
          if (v85 >= 0) {
            LOBYTE(v86) = 1;
          }
          uint64_t v84 = ((v81 + v86) << 16) | 5;
        }

        unint64_t v143 = v84;
        unint64_t v87 = _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
        if ((v26 & 0x1000000000000000LL) != 0)
        {
          unint64_t v27 = String.UnicodeScalarView._foreignIndex(after:)();
        }

        else
        {
          unint64_t v88 = v87 >> 16;
          if ((v26 & 0x2000000000000000LL) != 0)
          {
            unint64_t v141 = v24;
            uint64_t v142 = v26 & 0xFFFFFFFFFFFFFFLL;
            int v90 = *((unsigned __int8 *)&v141 + v88);
          }

          else
          {
            uint64_t v89 = (v26 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v24 & 0x1000000000000000LL) == 0) {
              uint64_t v89 = _StringObject.sharedUTF8.getter();
            }
            int v90 = *(unsigned __int8 *)(v89 + v88);
          }

          int v91 = (char)v90;
          unsigned int v92 = __clz(v90 ^ 0xFF) - 24;
          if (v91 >= 0) {
            LOBYTE(v92) = 1;
          }
          unint64_t v27 = ((v88 + v92) << 16) | 5;
        }

        unint64_t v74 = v143;
      }

      while (v73 != v143 >> 14);
      unint64_t v75 = v74 >> 14;
      unint64_t v17 = a12;
      unint64_t v16 = a13;
    }

    if (v75 == v73 || v71 == v27 >> 14)
    {
      char v47 = 1;
      if ((v28 & 0x2000000000000000LL) != 0) {
        goto LABEL_151;
      }
      goto LABEL_149;
    }

    BOOL v30 = v137 == v139;
LABEL_205:
    unint64_t v19 = a10;
    unint64_t v18 = a11;
    unint64_t v20 = v124;
    if (!v30) {
      goto LABEL_202;
    }
LABEL_213:
    if ((v129 & 1) != 0) {
      specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v143, v25, v28);
    }
    uint64_t v111 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000LL) == 0) {
      uint64_t v111 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v143 >> 14 == 4 * v111)
    {
      unint64_t v114 = _StringGuts.validateScalarIndex(_:)(v144, v17, v16);
      if ((v16 & 0x1000000000000000LL) != 0)
      {
        uint64_t v120 = String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        unint64_t v115 = v114 >> 16;
        if ((v16 & 0x2000000000000000LL) != 0)
        {
          unint64_t v141 = v17;
          uint64_t v142 = a13 & 0xFFFFFFFFFFFFFFLL;
          __int128 v116 = &v141;
        }

        else
        {
          if ((v17 & 0x1000000000000000LL) == 0) {
            uint64_t v135 = _StringObject.sharedUTF8.getter();
          }
          __int128 v116 = (void *)v135;
        }

        int v117 = *((unsigned __int8 *)v116 + v115);
        int v118 = (char)v117;
        unsigned int v119 = __clz(v117 ^ 0xFF) - 24;
        if (v118 >= 0) {
          LOBYTE(v119) = 1;
        }
        uint64_t v120 = ((v115 + v119) << 16) | 5;
      }

      unint64_t v144 = v120;
      goto LABEL_240;
    }

            unint64_t v125 = v34;
            swift_retain();
            swift_retain();
            if (_foundation_swift_url_feature_enabled())
            {
              __int128 v168 = v7;
              uint64_t v180 = v11;
              uint64_t v126 = v125;
              __int128 v167 = v10;
              swift_retain();
              swift_retain();
              uint64_t v127 = URL.path(percentEncoded:)(1);
              uint64_t v128 = v127._countAndFlagsBits;
              uint64_t v179 = v127;
              swift_bridgeObjectRetain();
              unint64_t v175 = v125;
              if (String.count.getter() <= 1)
              {
                char v129 = (unint64_t)v127._object;
              }

              else
              {
                char v129 = (unint64_t)v127._object;
                if ((specialized BidirectionalCollection.last.getter( v127._countAndFlagsBits,  (unint64_t)v127._object) & 0x1FF) == 0x2F)
                {
                  specialized RangeReplaceableCollection<>.popLast()();
                  swift_bridgeObjectRelease();
                  uint64_t v128 = v179._countAndFlagsBits;
                  char v129 = (unint64_t)v179._object;
                }
              }

              unint64_t v177 = Set.init(minimumCapacity:)();
              unint64_t v143 = specialized Set._Variant.insert(_:)(&v182, 0x2FuLL);
              unint64_t v144 = v177;
              uint64_t v145 = HIBYTE(v129) & 0xF;
              if ((v129 & 0x2000000000000000LL) == 0) {
                uint64_t v145 = v128 & 0xFFFFFFFFFFFFLL;
              }
              if (v145)
              {
                unint64_t v177 = v128;
                uint64_t v178 = v129;
                MEMORY[0x1895F8858](v143);
                Swift::String v165 = (uint64_t)&v177;
                __int128 v166 = v144;
                swift_bridgeObjectRetain();
                specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v164,  v128,  v129);
                if (v146 == 1)
                {
                  Swift::String v147 = v177;
                  __int128 v148 = v178;
                  swift_bridgeObjectRetain();
                  specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v147, v148, v144);
                  swift_bridgeObjectRelease();
                }

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v10 = v167;
                unint64_t v7 = v168;
                unint64_t v34 = v172;
                unint64_t v125 = v175;
              }

              else
              {
                swift_bridgeObjectRelease();
                uint64_t v10 = v167;
                unint64_t v7 = v168;
                unint64_t v34 = v172;
                unint64_t v125 = v175;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __int128 v150 = v171;
              outlined consume of PathOrURL(v34, v10, v171, 1);
              outlined consume of PathOrURL(v34, v10, v150, 1);
            }

            else
            {
              uint64_t v130 = objc_msgSend(v125, sel__parameterString);
              if (v130)
              {
                uint64_t v131 = v130;
                char v174 = v60;
                unint64_t v132 = v11;
                uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
                uint64_t v135 = v134;

                if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                  && (unint64_t v136 = objc_msgSend(v125, sel_path)) != 0)
                {
                  unint64_t v137 = v136;
                  unint64_t v175 = v125;
                  unint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
                  BOOL v140 = v139;

                  v179._uint64_t countAndFlagsBits = (uint64_t)v138;
                  v179._object = v140;
                  swift_bridgeObjectRetain();
                  v141._uint64_t countAndFlagsBits = 59LL;
                  v141._object = (void *)0xE100000000000000LL;
                  String.append(_:)(v141);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v142._uint64_t countAndFlagsBits = (uint64_t)v133;
                  v142._object = v135;
                  String.append(_:)(v142);
                  swift_bridgeObjectRelease();
                  unint64_t v125 = v175;
                }

                else
                {
                  v179._uint64_t countAndFlagsBits = 59LL;
                  v179._object = (void *)0xE100000000000000LL;
                  v149._uint64_t countAndFlagsBits = (uint64_t)v133;
                  v149._object = v135;
                  String.append(_:)(v149);
                }

                swift_bridgeObjectRelease();
                __int128 v150 = v132;
                outlined consume of PathOrURL(v34, v10, v132, 1);
                unint64_t v60 = v174;
              }

              else
              {
                __int128 v151 = objc_msgSend(v125, sel_path);
                if (v151)
                {
                  uint64_t v152 = v151;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
                }

                outlined consume of PathOrURL(v34, v10, v11, 1);
                __int128 v150 = v11;
              }
            }

            int v108 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            int v109 = v125;
            unsigned int v110 = v150;
            outlined consume of PathOrURL(v34, v10, v150, 1);
            if (v60)
            {
              v179._uint64_t countAndFlagsBits = (uint64_t)v60;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              unint64_t v60 = v60;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
LABEL_191:

LABEL_194:
                uint64_t v111 = (void *)_swift_stdlib_bridgeErrorToNSError();
                goto LABEL_195;
              }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  int v67 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
  int v52 = v142;
LABEL_60:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v67, v58, v32, v33);
  unint64_t result = swift_unknownObjectRelease();
LABEL_61:
  if (v55)
  {
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }

  __int128 v148 = v35;
  __int128 v149 = v67;
  __int128 v150 = v58;
  if (v58)
  {
    unsigned int v68 = v58 + 24 * ((v67 >> ((4 * *(_BYTE *)(v58 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v69 = *(void *)(v68 + 32);
    uint64_t v70 = *(void *)(v68 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32) {
      goto LABEL_64;
    }
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v67, v32);
    unint64_t v69 = v77;
    uint64_t v70 = v78;
    swift_unknownObjectRelease();
    if (v32)
    {
LABEL_64:
      uint64_t v71 = *(unsigned __int8 *)(v32 + 18);
      swift_unknownObjectRetain();
      if (v67 > v71) {
        goto LABEL_65;
      }
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
  }

  if (!v67) {
    goto LABEL_74;
  }
LABEL_65:
  if (v58)
  {
    uint64_t v72 = (4 * *(_BYTE *)(v58 + 18) + 8) & 0x3C;
    if (((v67 >> v72) & 0xF) != 0)
    {
      int v67 = ((((v67 >> v72) & 0xF) - 1) << v72) | ((-15LL << v72) - 1) & v67;
      __int128 v149 = v67;
      swift_unknownObjectRelease();
LABEL_71:
      unint64_t v74 = v58 + 24 * ((v67 >> ((4 * *(_BYTE *)(v58 + 18) + 8) & 0x3C)) & 0xF);
      unint64_t v75 = *(void *)(v74 + 32);
      int v76 = *(void *)(v74 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_76;
    }
  }

  swift_unknownObjectRetain();
  uint64_t v73 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v148, v32);
  unint64_t result = swift_unknownObjectRelease_n();
  if ((v73 & 1) == 0)
  {
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
    goto LABEL_195;
  }

  if (v148 != v35) {
    goto LABEL_187;
  }
  int v67 = v149;
  uint64_t v58 = v150;
  if (v150) {
    goto LABEL_71;
  }
LABEL_75:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v67, v32);
  unint64_t v75 = v79;
  int v76 = v80;
  swift_unknownObjectRelease();
LABEL_76:
  if ((specialized static Dictionary<>.== infix(_:_:)(v75, v69) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
LABEL_87:
    int v83 = (uint64_t *)v143;
    uint64_t v89 = v139;
    if (v139 < 1) {
      return result;
    }
    goto LABEL_88;
  }

  unint64_t v81 = specialized static Set.== infix(_:_:)(v76, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if ((v81 & 1) == 0) {
    goto LABEL_87;
  }
  uint64_t v82 = v52;
  int v83 = (uint64_t *)v143;
  uint64_t v84 = specialized Rope._remove(at:)((uint64_t)&v151, v35, v67);
  int v85 = *v143;
  unsigned int v86 = v143[3];
  if (v84 < specialized Rope._endPath.getter(*v143) && *(_BYTE *)(v85 + 18))
  {
    unint64_t v87 = (v84 >> ((4 * *(_BYTE *)(v85 + 18) + 8) & 0x3C)) & 0xF;
    swift_unknownObjectRetain();
    specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v85 + 24, v87, v84);
    swift_unknownObjectRelease();
  }

  unint64_t v88 = v151;
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v85) {
    goto LABEL_201;
  }
  unint64_t result = specialized Rope._Node._prepareModify(at:)(v84, (uint64_t)&v151);
  uint64_t v145 = v151;
  Swift::String v146 = v152;
  Swift::String v147 = v153;
  uint64_t v89 = v139;
  if (__OFADD__(*((void *)&v151 + 1), v88)) {
    goto LABEL_194;
  }
  *((void *)&v145 + 1) = *((void *)&v151 + 1) + v88;
  int v35 = v86 + 1;
  v143[3] = v35;
  if (!*v143)
  {
LABEL_202:
    __break(1u);
    return result;
  }

  int v52 = v82;
  specialized Rope._Node._finalizeModify(_:)(&v144, &v145);
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if (v139 < 1) {
    return result;
  }
LABEL_88:
  if (v52 <= v89) {
    return result;
  }
  int v90 = *v83;
  int v91 = v83[2];
  if (*v83) {
    unsigned int v92 = v83[2];
  }
  else {
    unsigned int v92 = 0LL;
  }
  if (v92 < v89) {
    goto LABEL_185;
  }
  uint64_t v93 = v83[1];
  if (!v90 || !*(_WORD *)(v90 + 16) || v91 <= v89)
  {
    BOOL v104 = swift_unknownObjectRetain();
    unint64_t v105 = specialized Rope._endPath.getter(v104);
    unint64_t result = swift_unknownObjectRelease();
    unint64_t v97 = 0LL;
    unint64_t v106 = 0LL;
    uint64_t v107 = 0LL;
    if (!v90) {
      goto LABEL_116;
    }
    goto LABEL_115;
  }

  char v94 = *(unsigned __int8 *)(v90 + 18);
  if (*(_BYTE *)(v90 + 18))
  {
    unint64_t result = swift_unknownObjectRetain_n();
    uint64_t v95 = v90;
    while (1)
    {
      unint64_t v98 = *(unsigned __int16 *)(v95 + 16);
      if (!*(_WORD *)(v95 + 16)) {
        goto LABEL_99;
      }
      uint64_t v99 = *(void *)(v95 + 40);
      unint64_t v61 = __OFSUB__(v89, v99);
      int v100 = v89 - v99;
      if (v61) {
        goto LABEL_179;
      }
      if (__OFADD__(v100, 1LL)) {
        goto LABEL_180;
      }
      if (v100 + 1 >= 1) {
        break;
      }
      unint64_t v98 = 0LL;
LABEL_100:
      char v96 = (4 * *(_BYTE *)(v95 + 18) + 8) & 0x3C;
      char v94 = ((-15LL << v96) - 1) & v94 | (v98 << v96);
      unint64_t v97 = *(void *)(v95 + 24 + 24 * v98);
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v95 = v97;
      if (!*(_BYTE *)(v97 + 18)) {
        goto LABEL_145;
      }
    }

    if ((_DWORD)v98 != 1)
    {
      int v101 = (uint64_t *)(v95 + 64);
      unsigned int v102 = 1LL;
      while (1)
      {
        uint64_t v103 = *v101;
        v101 += 3;
        uint64_t v89 = v100 - v103;
        if (__OFSUB__(v100, v103)) {
          break;
        }
        if (__OFADD__(v89, 1LL)) {
          goto LABEL_174;
        }
        if (v89 + 1 < 1)
        {
          unint64_t v98 = v102;
          uint64_t v89 = v100;
          goto LABEL_100;
        }

        ++v102;
        int v100 = v89;
        if (v98 == v102) {
          goto LABEL_99;
        }
      }

              __break(1u);
              goto LABEL_159;
            }

      if (a1[2] == 114 && a1[3] == 105 && *v46 == 118 && a1[5] == 97 && a1[6] == 116 && a1[7] == 101)
      {
        unint64_t v40 = a1 + 8;
        if (a1[8] == 47 && (_NSStandardizePathRewriteAutomountIsPathExcluded(a1 + 8, v38 - 8) & 1) == 0)
        {
          unsigned int v45 = _NSFileExistsAtPath( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  (uint64_t)(a1 + 8),  *v48 - 8,  __src);
          unint64_t v42 = v48;
          if (v45)
          {
            int v43 = *v48 - 8;
            goto LABEL_168;
          }
        }
      }

      return;
    }
  }

  if (v39 != 118)
  {
LABEL_157:
    if (v39 != 112) {
      return;
    }
    goto LABEL_158;
  }

  if (a1[2] == 97
    && a1[3] == 114
    && *v46 == 47
    && a1[5] == 97
    && a1[6] == 117
    && a1[7] == 116
    && a1[8] == 111
    && a1[9] == 109
    && a1[10] == 111
    && a1[11] == 117
    && a1[12] == 110
    && a1[13] == 116)
  {
    unint64_t v40 = a1 + 14;
    if (a1[14] == 47 && (_NSStandardizePathRewriteAutomountIsPathExcluded(a1 + 14, v38 - 14) & 1) == 0)
    {
      int v44 = _NSFileExistsAtPath( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  (uint64_t)(a1 + 14),  *v48 - 14,  __src);
      unint64_t v42 = v48;
      if (v44)
      {
        int v43 = *v48 - 14;
        goto LABEL_168;
      }
    }
  }

LABEL_202:
    if (v125 == v20 >> 14)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0LL;
    }

    unint64_t v20 = Substring.UnicodeScalarView.index(_:offsetBy:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v22 = a1 >> 14;
  }

  if (v22 != v139) {
    goto LABEL_202;
  }
LABEL_240:
  if ((v129 & 1) != 0 && v144 >> 14 < v18 >> 14) {
    specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v144, v19, v18, v17, v16);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((v122 | v123 ^ 1) & 1 | ((v144 ^ v18) < 0x4000))) {
    return 0LL;
  }
  if (v144 >> 14 < v20 >> 14)
  {
    __break(1u);
    return 0LL;
  }

  return v20;
}

    __break(1u);
    goto LABEL_203;
  }

unint64_t specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  int v153 = a8;
  int v186 = a7;
  uint64_t v162 = a4;
  uint64_t v161 = a3;
  unint64_t v163 = a2;
  unint64_t v165 = a1;
  uint64_t v169 = a12;
  uint64_t v15 = a10;
  unint64_t v16 = a11;
  v193[1] = *MEMORY[0x1895F89C0];
  uint64_t v17 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v183 = *(void *)(v17 - 8);
  uint64_t v184 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v182 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v159 = a10;
  uint64_t v160 = a13;
  int v185 = a6;
  int v187 = a5;
  if ((a5 & 1) == 0 && (a6 & 1) == 0)
  {
    if ((v186 & 1) == 0)
    {
      uint64_t v151 = a13;
      uint64_t v150 = v169;
      return specialized BidirectionalCollection._range<A>(of:anchored:backwards:)( v165,  v163,  v161,  v162,  v153 & 1,  a9 & 1,  a10,  a11);
    }

LABEL_207:
      int v36 = 0;
      if ((v38 & 0x2000000000000000LL) == 0)
      {
LABEL_208:
        uint64_t v97 = v176 & 0xFFFFFFFFFFFFLL;
        goto LABEL_209;
      }

    unint64_t v31 = String.UTF8View._foreignCount()();
    goto LABEL_31;
  }

  if ((v190 & 0x1000000000000000LL) != 0) {
    goto LABEL_205;
  }
  if ((v190 & 0x2000000000000000LL) != 0) {
    unint64_t v16 = HIBYTE(v190) & 0xF;
  }
  else {
    unint64_t v16 = v189 & 0xFFFFFFFFFFFFLL;
  }
LABEL_12:
  uint64_t v17 = 3 * v16;
  if ((unsigned __int128)(v16 * (__int128)3LL) >> 64 != (3 * v16) >> 63)
  {
    __break(1u);
    goto LABEL_207;
  }

  if (v17 < -1)
  {
    __break(1u);
    goto LABEL_210;
  }

  uint64_t v18 = v17 + 1;
  unint64_t v19 = swift_bridgeObjectRetain_n();
  if (v17 >= 1024)
  {
    unint64_t v19 = swift_stdlib_isStackAllocationSafe();
    if ((v19 & 1) == 0)
    {
      int v185 = a1;
      int v186 = v5;
      char v55 = (char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      uint64_t v56 = v189;
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v55, v18, 1, v189, v190);
      char v58 = v57;
      swift_bridgeObjectRelease();
      if ((v58 & 1) == 0)
      {
        else {
          uint64_t v59 = 1537;
        }
        uint64_t v184 = (id *)v55;
        LODWORD(v188) = _NSOpenFileDescriptor_Protected(v55, v59, (int)a4, 438LL);
        if ((v188 & 0x80000000) != 0)
        {
          unint64_t v93 = MEMORY[0x186E1B0E8]();
          uint64_t v72 = v93;
          uint64_t v94 = 4LL;
          switch(v93)
          {
            case 1:
            case 13:
              uint64_t v94 = 513LL;
              goto LABEL_183;
            case 2:
              goto LABEL_183;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 16:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 29:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
              goto LABEL_177;
            case 17:
              uint64_t v94 = 516LL;
              goto LABEL_183;
            case 28:
            case 69:
              uint64_t v94 = 640LL;
              goto LABEL_183;
            case 30:
              uint64_t v94 = 642LL;
              goto LABEL_183;
            case 63:
              uint64_t v94 = 514LL;
              goto LABEL_183;
            default:
              Swift::String v62 = (const char *)v184;
              if (v93 == 102)
              {
                uint64_t v161 = 0LL;
                uint64_t v94 = 512LL;
                uint64_t v162 = v189;
              }

              else
              {
LABEL_177:
                uint64_t v94 = 512LL;
LABEL_183:
                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
                {
LABEL_223:
                  value = 0LL;
                  __int128 v193 = 0xE000000000000000LL;
                  _StringGuts.grow(_:)(22LL);
                  swift_bridgeObjectRelease();
                  value = 0xD000000000000014LL;
                  __int128 v193 = 0x80000001839C9190LL;
                  unint64_t v191 = v72;
                  goto LABEL_226;
                }

                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                unint64_t v164 = (int)POSIXErrorCode.rawValue.getter();
                unint64_t v165 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                unint64_t v166 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                uint64_t v161 = objc_msgSend(v165, sel_initWithDomain_code_userInfo_, v166, v164, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                unint64_t v167 = objc_msgSend(v161, sel_domain);
                unint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(v167);
                unint64_t v170 = v169;

                if (v168 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                  && v170 == v171)
                {
                  swift_bridgeObjectRelease_n();
                }

                else
                {
                  uint64_t v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v172 & 1) == 0)
                  {
LABEL_220:
                    __break(1u);
                    goto LABEL_221;
                  }
                }

                uint64_t v162 = v189;
                Swift::String v62 = (const char *)v184;
              }

              swift_bridgeObjectRetain();
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v94,  v162,  v190,  v161,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&value,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
              swift_willThrow();
              break;
          }

          goto LABEL_200;
        }

        if ((a5 & 1) != 0)
        {
          __int16 v60 = (void *)objc_opt_self();
          uint64_t v61 = objc_msgSend(v60, sel_currentProgress);

          Swift::String v62 = (const char *)v184;
          unint64_t v63 = v186;
          if (v61)
          {
            if (v13) {
              unint64_t v64 = v15;
            }
            else {
              unint64_t v64 = 0LL;
            }
            unint64_t v65 = objc_msgSend(v60, sel_progressWithTotalUnitCount_, v64);
          }

          else
          {
            unint64_t v65 = 0LL;
          }

          uint64_t v56 = v189;
        }

        else
        {
          unint64_t v65 = 0LL;
          Swift::String v62 = (const char *)v184;
          unint64_t v63 = v186;
        }

        value = v56;
        __int128 v193 = v190;
        __int128 v194 = 0LL;
        __int128 v195 = 0;
        uint64_t v119 = write(buffer:toFileDescriptor:path:parentProgress:)((uint64_t)v13, v185, (int)v188, (uint64_t)&value, v65);
        int v186 = v63;
        if (v63)
        {
          unsigned int v120 = v63;
          uint64_t v121 = MEMORY[0x186E1B0E8](v119);
          if (v65)
          {
            unsigned int v122 = v65;
            if (objc_msgSend(v65, sel_isCancelled))
            {
              unlink(v62);
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
              uint64_t v123 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
              uint64_t v124 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              uint64_t v125 = objc_msgSend(v123, sel_initWithDomain_code_userInfo_, v124, 3072, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              uint64_t v126 = objc_msgSend(v125, sel_domain);
              unsigned int v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
              int v129 = v128;

              if (v127 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
                && v129 == v130)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v131 = v186;
              }

              else
              {
                unint64_t v159 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v131 = v186;
                if ((v159 & 1) == 0) {
                  goto LABEL_222;
                }
              }

              swift_willThrow();

              close((int)v188);
              uint64_t v160 = v184;
LABEL_201:
              MEMORY[0x186E20E60](v160, -1LL, -1LL);
              goto LABEL_202;
            }
          }

          uint64_t v183 = v65;
          unint64_t v132 = 4LL;
          switch(v121)
          {
            case 1:
            case 13:
              unint64_t v132 = 513LL;
              goto LABEL_194;
            case 2:
              goto LABEL_194;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 16:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 29:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
              goto LABEL_190;
            case 17:
              unint64_t v132 = 516LL;
              goto LABEL_194;
            case 28:
            case 69:
              unint64_t v132 = 640LL;
              goto LABEL_194;
            case 30:
              unint64_t v132 = 642LL;
              goto LABEL_194;
            case 63:
              unint64_t v132 = 514LL;
              goto LABEL_194;
            default:
              if (v121 == 102)
              {
                unint64_t v163 = 0LL;
                unint64_t v132 = 512LL;
              }

              else
              {
LABEL_190:
                unint64_t v132 = 512LL;
LABEL_194:
                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
                {
                  value = 0LL;
                  __int128 v193 = 0xE000000000000000LL;
                  _StringGuts.grow(_:)(22LL);
                  swift_bridgeObjectRelease();
                  value = 0xD000000000000014LL;
                  __int128 v193 = 0x80000001839C9190LL;
                  unint64_t v191 = v121;
                  goto LABEL_226;
                }

                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                BOOL v173 = (int)POSIXErrorCode.rawValue.getter();
                uint64_t v174 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                unint64_t v175 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                unint64_t v163 = objc_msgSend( v174,  sel_initWithDomain_code_userInfo_,  v175,  v173,  _NativeDictionary.bridged()(),  v183);
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                uint64_t v176 = objc_msgSend(v163, sel_domain);
                uint64_t v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v176);
                uint64_t v179 = v178;

                if (v177 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                  && v179 == v180)
                {
                  swift_bridgeObjectRelease_n();
                  unsigned int v120 = v186;
                  Swift::String v62 = (const char *)v184;
                }

                else
                {
                  unint64_t v181 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unsigned int v120 = v186;
                  Swift::String v62 = (const char *)v184;
                  if ((v181 & 1) == 0)
                  {
LABEL_221:
                    __break(1u);
LABEL_222:
                    __break(1u);
                  }
                }
              }

              swift_bridgeObjectRetain();
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v132,  v189,  v190,  v163,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&value,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
              swift_willThrow();

              close((int)v188);
              break;
          }

          __break(1u);
          goto LABEL_208;
        }

        goto LABEL_23;
      }

      ++v41;
      --v42;
      if (v22 - 11 == v41) {
        goto LABEL_118;
      }
    }

    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }

  _StringGuts.grow(_:)(45LL);
  swift_bridgeObjectRelease();
  unint64_t v64 = (_BYTE *)v78;
  unint64_t v21 = 1LL;
  if ((unint64_t)v78 >= a6)
  {
LABEL_140:
    unint64_t v93 = v21;
    v65._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v66 = 0xD00000000000002BLL;
    *(void *)(v66 + 8) = 0x80000001839C9E80LL;
    *(void *)(v66 + 16) = 0LL;
    *(void *)(v66 + 24) = 0LL;
    uint64_t v67 = 5;
LABEL_170:
    *(_BYTE *)(v66 + 32) = v67;
    goto LABEL_175;
  }

  while (2)
  {
    while (*v64 == 13)
    {
      unsigned int v68 = __OFADD__(v21++, 1LL);
      if (v68) {
        goto LABEL_212;
      }
      if (v64[1] == 10) {
        ++v64;
      }
    }

    if (v25 < 2) {
      goto LABEL_213;
    }
    if (*(_BYTE *)(v16 + 1) != 10 || (unsigned int v68 = __OFADD__(v21, 1LL), ++v21, !v68))
    {
LABEL_141:
      continue;
    }

    break;
  }

  __break(1u);
LABEL_154:
  uint64_t v69 = (_BYTE *)v78;
  uint64_t v17 = 1LL;
  if ((unint64_t)v78 >= v21)
  {
LABEL_155:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)char v58 = v17;
    goto LABEL_173;
  }

  while (2)
  {
    if (*v69 == 13)
    {
      unsigned int v68 = __OFADD__(v17++, 1LL);
      if (v68) {
        goto LABEL_220;
      }
LABEL_156:
      continue;
    }

    break;
  }

  if (v22 < 2) {
    goto LABEL_221;
  }
  unint64_t v21 = *(unsigned __int8 *)(v16 + 1);
  if ((_DWORD)v21 != 10) {
    goto LABEL_156;
  }
  unsigned int v68 = __OFADD__(v17++, 1LL);
  if (!v68) {
    goto LABEL_156;
  }
  __break(1u);
LABEL_168:
  unsigned int v83 = v16;
  int v84 = v22;
  int v85 = v78;
  int v86 = v21;
  uint64_t v87 = v17;
LABEL_172:
  uint64_t v71 = BufferReader.lineNumber.getter();
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(void *)char v58 = v71;
LABEL_173:
  *(void *)(v58 + 8) = 0LL;
  *(void *)(v58 + 16) = 0LL;
  *(void *)(v58 + 24) = 0LL;
  uint64_t v59 = 4;
LABEL_174:
  *(_BYTE *)(v58 + 32) = v59;
LABEL_175:
  swift_willThrow();
LABEL_176:
  swift_bridgeObjectRelease();
  return v16;
}

                    __break(1u);
LABEL_208:
                    __break(1u);
LABEL_209:
                    __break(1u);
                    goto LABEL_210;
                  }
                }
              }
            }
          }

          uint64_t v95 = v100;
        }

LABEL_248:
          if (v156 == v154 >> 14) {
            goto LABEL_299;
          }
LABEL_249:
          unint64_t v181 = v42;
          unint64_t v16 = v43;
          goto LABEL_250;
        }
      }
    }

    if ((v171 & 1) != 0)
    {
      if (v173)
      {
        uint64_t v56 = v172;
        unint64_t v57 = v177;
        unint64_t v51 = v174;
        goto LABEL_123;
      }

      unint64_t v57 = v177;
      unint64_t v64 = v181;
      if (v47 != countAndFlagsBits)
      {
LABEL_147:
        char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
        unint64_t v105 = v181;
        if ((v106 & 1) != 0)
        {
LABEL_148:
          char v58 = 0;
          unint64_t v51 = v174;
          uint64_t v56 = v172;
          if ((v57 & 0x2000000000000000LL) == 0) {
            goto LABEL_127;
          }
LABEL_70:
          uint64_t v59 = HIBYTE(v57) & 0xF;
LABEL_128:
          unint64_t v175 = v57;
          if (v192 >> 14 == 4 * v59)
          {
            unint64_t v42 = v181;
            if ((v58 & 1) == 0)
            {
              uint64_t v141 = v56;
              uint64_t v174 = v51;
LABEL_221:
              int v140 = 0;
              v193[0] = Substring.index(after:)();
              goto LABEL_222;
            }

            goto LABEL_207;
          }

          unint64_t v42 = v181;
          if ((v58 & 1) != 0)
          {
            int v36 = 1;
            if ((v38 & 0x2000000000000000LL) == 0) {
              goto LABEL_208;
            }
            goto LABEL_133;
          }

          uint64_t v141 = v56;
          uint64_t v174 = v51;
          int v140 = 1;
LABEL_222:
          unint64_t v40 = Substring.index(after:)();
          unint64_t v41 = v40 >> 14;
          char v35 = 1;
          unint64_t v42 = v181;
          unint64_t v39 = v175;
          uint64_t v37 = v141;
          int v36 = v140;
          if (v40 >> 14 >= v168)
          {
            if (v40 >> 14 == v168)
            {
              unint64_t v143 = v154;
              if (v140)
              {
                if ((v185 & 1) == 0)
                {
                  char v142 = 0;
                  goto LABEL_231;
                }

                goto LABEL_243;
              }

              if ((v185 & 1) != 0)
              {
                uint64_t v177 = v175;
                goto LABEL_283;
              }

  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  unint64_t v144 = swift_allocError();
  *unint64_t v145 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v108 = (void *)v144;
LABEL_192:

LABEL_193:
  unint64_t v39 = v193;
  int v109 = (unint64_t *)WORD2(v193);
  LOWORD(v29) = HIWORD(v193);
  unint64_t v40 = WORD1(v194);
  char v35 = WORD2(v194);
  unint64_t v43 = HIWORD(v194);
  LODWORD(v41) = (unsigned __int16)v195;
  LOWORD(v185) = v194;
  LOWORD(v49) = HIWORD(v195);
  NSDecimal.asVariableLengthInteger()( v193 | ((unint64_t)WORD2(v193) << 32) | ((unint64_t)HIWORD(v193) << 48),  (unsigned __int16)v194 | ((unint64_t)WORD1(v194) << 16) | ((unint64_t)WORD2(v194) << 32) | ((unint64_t)HIWORD(v194) << 48),  (unsigned __int16)v195 | (HIWORD(v195) << 16));
  unint64_t v44 = v110;
  NSDecimal.asVariableLengthInteger()(v190, v191, v192);
  char v112 = *(void *)(v44 + 16);
  uint64_t v113 = *(void *)(v111 + 16);
  int v187 = v109;
  if (v113 >= v112)
  {
    if (v112 >= v113)
    {
      if (!v112) {
        goto LABEL_314;
      }
      uint64_t v114 = 2 * v112 - 2;
      uint64_t v115 = *(unsigned __int16 *)(v44 + v114 + 32);
      uint64_t v116 = *(unsigned __int16 *)(v111 + v114 + 32);
      if (v116 < v115) {
        goto LABEL_194;
      }
      if (v115 >= v116)
      {
        uint64_t v117 = v112 - 2;
        unint64_t v38 = 1LL;
        while (v112 != 1)
        {
          unsigned int v118 = *(unsigned __int16 *)(v44 + 28 + 2 * v112);
          uint64_t v119 = *(unsigned __int16 *)(v111 + 28 + 2 * v112);
          if (v119 < v118) {
            goto LABEL_197;
          }
          --v112;
          if (v118 < v119) {
            goto LABEL_196;
          }
        }

        goto LABEL_314;
      }
    }

            outlined destroy of Any?( (uint64_t)v414,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?( (uint64_t)v415,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v361);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v366);
            outlined destroy of Any?( (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v378,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            unint64_t result = outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v222 & 1) == 0) {
              goto LABEL_280;
            }
LABEL_249:
            v221 += 2;
            ++v220;
            unint64_t v215 = v360;
            if (v223 == v200)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t result = swift_bridgeObjectRelease();
              unint64_t v21 = v349;
              unint64_t v192 = *(uint64_t **)(v349 + 64);
              Swift::String v197 = *(void *)(v349 + 88);
              __int128 v193 = v325;
              __int128 v341 = v326;
              __int128 v196 = v346;
              v368 = v346;
              v369 = v325;
              unint64_t v163 = (uint64_t)v324;
              v370 = (unint64_t)v324;
              unint64_t v34 = __OFADD__(v338++, 1LL);
              uint64_t v150 = v357;
              if (!v34) {
                goto LABEL_218;
              }
              __break(1u);
LABEL_278:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v366);
LABEL_279:
              outlined destroy of Any?( (uint64_t)&v368,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v378, v192);
              outlined destroy of Any?((uint64_t)&v383, v192);
LABEL_280:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t result = swift_bridgeObjectRelease();
              unint64_t v21 = v349;
              uint64_t v150 = v357;
              goto LABEL_281;
            }
          }
        }

        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
LABEL_281:
        if (v332 != *(void *)(v21 + 88)) {
          goto LABEL_391;
        }
        if (v340)
        {
          uint64_t v242 = *(void *)(v340 + 24 * ((v193 >> ((4 * *(_BYTE *)(v340 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          uint64_t v243 = *(void *)(v21 + 64);
          swift_unknownObjectRetain();
          uint64_t v242 = specialized Rope._Node.subscript.getter(v193, v243);
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        int v244 = &v341[v242];
        if (__OFADD__(v341, v242)) {
          goto LABEL_392;
        }
        uint64_t v245 = v336;
        id v246 = v336[1];
        v415[0] = *v336;
        v415[1] = v246;
        v415[2] = v336[2];
        BigString.utf8.getter();
        unint64_t result = v310;
        if (__OFSUB__(v244, (unint64_t)v310 >> 11))
        {
LABEL_393:
          __break(1u);
LABEL_394:
          __break(1u);
          goto LABEL_395;
        }

        id v247 = BigString.UTF8View.index(_:offsetBy:)();
        __int128 v249 = v248;
        unint64_t v251 = v250;
        unint64_t v253 = v252;
        unint64_t result = outlined release of Locale((uint64_t)v405);
        if (v331 >= v247 >> 10) {
          unint64_t v254 = v247;
        }
        else {
          unint64_t v254 = v322;
        }
        if (v331 >= v247 >> 10) {
          unint64_t v255 = v249;
        }
        else {
          unint64_t v255 = v321;
        }
        if (v331 >= v247 >> 10) {
          unint64_t v256 = v251;
        }
        else {
          unint64_t v256 = v320;
        }
        if (v331 >= v247 >> 10) {
          uint64_t v257 = v253;
        }
        else {
          uint64_t v257 = v319;
        }
        __int128 v258 = *v245;
        __int128 v259 = v245[1];
        v414[2] = v245[2];
        v414[1] = v259;
        v414[0] = v258;
        __int128 v260 = v334;
        if (v254 >> 10 < v334) {
          goto LABEL_394;
        }
        *(void *)&v378 = v352;
        *((void *)&v378 + 1) = v345;
        *(void *)&v379 = v344;
        *((void *)&v379 + 1) = v343;
        *(void *)&v380 = v254;
        *((void *)&v380 + 1) = v255;
        *(void *)&v381 = v256;
        *((void *)&v381 + 1) = v257;
        __int128 v261 = *(void *)(v150 + 16);
        if (!v261 || v334 == v254 >> 10)
        {
          v360 = v255;
        }

        else
        {
          __int128 v262 = v255;
          swift_bridgeObjectRetain();
          outlined retain of Locale((uint64_t)v414);
          __int128 v263 = 40LL;
          __int128 v264 = v261;
          while (*(void *)(v150 + v263))
          {
            swift_bridgeObjectRelease();
            v263 += 16LL;
            if (!--v264)
            {
              swift_bridgeObjectRelease();
              goto LABEL_310;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v406);
          v366[0] = v352;
          v366[1] = v345;
          v366[2] = v344;
          v366[3] = v343;
          v366[4] = v352;
          v366[5] = v345;
          v366[6] = v344;
          v366[7] = v343;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v366, &v368);
          unint64_t result = outlined release of Locale((uint64_t)&v407);
          if (v375 != 2)
          {
            unint64_t v254 = v372;
            if (v260 > v372 >> 10) {
              goto LABEL_418;
            }
            __int128 v262 = v373;
            unint64_t v256 = v374;
            uint64_t v257 = v375;
          }

                        swift_bridgeObjectRelease();
                        a2 = v213;
                        int v171 = v221;
                        if ((v224 & 1) != 0)
                        {
LABEL_208:
                          uint64_t v182 = (uint64_t *)(*(void *)(v121 + 56) + 16 * v176);
                          *uint64_t v182 = v27;
                          v182[1] = v170;
                          goto LABEL_213;
                        }

        uint64_t v11 = v192;
        uint64_t v15 = v193;
        if (v32 >= v9)
        {
          char v148 = *(void *)v6;
          if (a2 == v9)
          {
            uint64_t v11 = v104[11];
            if (v148)
            {
              unint64_t v149 = v104[10];
              if (v149 < a2) {
                goto LABEL_372;
              }
              uint64_t v150 = v104[9];
              uint64_t v151 = *(unsigned __int8 *)(v148 + 18);
              if (*(_WORD *)(v148 + 16) && v149 > a2)
              {
                if (*(_BYTE *)(v148 + 18))
                {
                  unint64_t result = (void *)swift_unknownObjectRetain_n();
                  char v35 = a2;
                  int v152 = v148;
                  while (1)
                  {
                    unint64_t v154 = *(unsigned __int16 *)(v152 + 16);
                    if (!*(_WORD *)(v152 + 16)) {
                      goto LABEL_257;
                    }
                    uint64_t v155 = *(void *)(v152 + 40);
                    unint64_t v156 = v35 - v155;
                    if (__OFSUB__(v35, v155)) {
                      goto LABEL_347;
                    }
                    if (__OFADD__(v156, 1LL)) {
                      goto LABEL_348;
                    }
                    if (v156 + 1 <= 0)
                    {
                      unint64_t v154 = 0LL;
                    }

                    else
                    {
                      if ((_DWORD)v154 == 1)
                      {
                        v35 -= v155;
LABEL_257:
                        if (v35) {
                          goto LABEL_346;
                        }
                        goto LABEL_258;
                      }

                      unint64_t v157 = *(void *)(v152 + 64);
                      unint64_t v21 = __OFSUB__(v156, v157);
                      unint64_t v158 = v156 - v157;
                      if (v21) {
                        goto LABEL_361;
                      }
                      if (__OFADD__(v158, 1LL)) {
                        goto LABEL_362;
                      }
                      if (v158 + 1 >= 1)
                      {
                        if ((_DWORD)v154 != 2)
                        {
                          unint64_t v159 = (void *)(v152 + 88);
                          uint64_t v160 = 2LL;
                          while (v154 != v160)
                          {
                            char v35 = v158 - *v159;
                            if (__OFSUB__(v158, *v159)) {
                              goto LABEL_335;
                            }
                            if (__OFADD__(v35, 1LL)) {
                              goto LABEL_336;
                            }
                            if (v35 + 1 < 1)
                            {
                              unint64_t v154 = v160;
                              char v35 = v158;
                              goto LABEL_258;
                            }

                            ++v160;
                            v159 += 3;
                            unint64_t v158 = v35;
                            if (v154 == v160) {
                              goto LABEL_257;
                            }
                          }

    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1834DCA54LL);
  }

                uint64_t v14 = v113;
LABEL_249:
                if (v14) {
                  goto LABEL_338;
                }
                goto LABEL_250;
              }

              uint64_t v111 = 2LL;
            }
          }

LABEL_289:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              char v148 = v152 | ~(_BYTE)v153;
              goto LABEL_290;
            }

            if (v156 == v154 >> 14)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_301:
              swift_bridgeObjectRelease();
              return 0LL;
            }

  __break(1u);
LABEL_290:
  __break(1u);
LABEL_291:
  __break(1u);
LABEL_292:
  __break(1u);
LABEL_293:
  __break(1u);
LABEL_294:
  __break(1u);
LABEL_295:
  __break(1u);
LABEL_296:
  __break(1u);
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
LABEL_300:
  __break(1u);
LABEL_301:
  __break(1u);
LABEL_302:
  __break(1u);
LABEL_303:
  __break(1u);
LABEL_304:
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
  return result;
}

LABEL_250:
            unint64_t v34 = Substring.index(_:offsetBy:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v35 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            continue;
          }

          goto LABEL_42;
        }

        unint64_t v175 = v57;
        int v171 = 1;
LABEL_151:
        unint64_t v107 = v105;
        if ((Character.asciiValue.getter() & 0x100) == 0)
        {
          if ((v186 & 1) != 0)
          {
            Swift::String v108 = String.lowercased()();
            uint64_t countAndFlagsBits = v108._countAndFlagsBits;
            unint64_t object = (unint64_t)v108._object;
          }

          else
          {
            unint64_t object = v181;
            swift_bridgeObjectRetain();
          }

          goto LABEL_198;
        }

        unint64_t v110 = 0xE000000000000000LL;
        uint64_t v190 = 0LL;
        unint64_t v191 = 0xE000000000000000LL;
        uint64_t v178 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        uint64_t v179 = HIBYTE(v107) & 0xF;
        if ((v107 & 0x2000000000000000LL) != 0) {
          uint64_t v15 = HIBYTE(v107) & 0xF;
        }
        else {
          uint64_t v15 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v15)
        {
          unint64_t v157 = v38;
          uint64_t v177 = v107 & 0xFFFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain();
          uint64_t v111 = 0LL;
          while (1)
          {
            if ((v181 & 0x1000000000000000LL) != 0)
            {
              unsigned int v118 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v181 & 0x2000000000000000LL) != 0)
              {
                uint64_t v188 = countAndFlagsBits;
                uint64_t v189 = v177;
              }

              else if ((countAndFlagsBits & 0x1000000000000000LL) == 0)
              {
                _StringObject.sharedUTF8.getter();
              }

              unsigned int v118 = _decodeScalar(_:startingAt:)();
            }

            unsigned int v120 = v118;
            uint64_t v121 = v119;
            if ((v187 & 1) != 0 && v118 >> 8 >= 0xFF && v118 < 0xFFEF)
            {
              LODWORD(v188) = v118;
              unint64_t result = CFUniCharCompatibilityDecompose();
              unsigned int v122 = v188;
              if ((v55 & 1) == 0) {
                goto LABEL_186;
              }
            }

            else
            {
              unsigned int v122 = v118;
              if ((v55 & 1) == 0) {
                goto LABEL_186;
              }
            }

            uint64_t v123 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v120), 5);
            if (!v123 || ((*(unsigned __int8 *)(v123 + ((unsigned __int16)v120 >> 3)) >> (v120 & 7)) & 1) == 0)
            {
              uint64_t v124 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v122), 2);
              if (v124 && ((*(unsigned __int8 *)(v124 + ((unsigned __int16)v122 >> 3)) >> (v122 & 7)) & 1) != 0)
              {
                MEMORY[0x1895F8858](v124);
                uint64_t v125 = CFUniCharDecomposeCharacter();
                char v55 = v185;
              }

        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        unint64_t v43 = v116;
        unint64_t v44 = v118;
      }

      LODWORD(v120[0]) = a5;
      WORD2(v120[0]) = (_WORD)v13;
      HIWORD(v120[0]) = a4;
      LOWORD(v120[1]) = a3;
      WORD1(v120[1]) = v7;
      WORD2(v120[1]) = (_WORD)v8;
      HIWORD(v120[1]) = v14;
      uint64_t v121 = v118;
      unsigned int v122 = v49;
      unint64_t v50 = _So9NSDecimala__exponent_getter((char *)v120);
      if ((v50 & 0x80000000) == 0)
      {
        if (!v50) {
          goto LABEL_183;
        }
        if (is_mul_ok(i, 0xAuLL))
        {
          i *= 10LL;
          unint64_t v51 = v50 - 1;
          if (v50 == 1) {
            goto LABEL_183;
          }
          if (is_mul_ok(i, 0xAuLL))
          {
            i *= 10LL;
            while (--v51)
            {
              unint64_t v52 = (i * (unsigned __int128)0xAuLL) >> 64;
              i *= 10LL;
              if (v52) {
                goto LABEL_79;
              }
            }

            goto LABEL_183;
          }
        }

        goto LABEL_79;
      }

    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    unint64_t v7 = 0LL;
    unint64_t v50 = v115;
    unint64_t v51 = v116;
LABEL_105:
    LODWORD(v118[0]) = v15;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = a5;
    LOWORD(v118[1]) = (_WORD)v9;
    WORD1(v118[1]) = a4;
    WORD2(v118[1]) = v8;
    HIWORD(v118[1]) = v21;
    uint64_t v119 = v51;
    unsigned int v120 = v50;
    LOWORD(v20) = v50;
  }

  while ((_So9NSDecimala__exponent_getter((char *)v118) & 0x80000000) != 0);
  LODWORD(v118[0]) = v15;
  WORD2(v118[0]) = a3;
  HIWORD(v118[0]) = a5;
  LOWORD(v118[1]) = (_WORD)v9;
  WORD1(v118[1]) = a4;
  WORD2(v118[1]) = v8;
  HIWORD(v118[1]) = v21;
  uint64_t v119 = v116;
  unsigned int v120 = (__int16)v20;
  unint64_t v64 = _So9NSDecimala__exponent_getter((char *)v118);
  if (v64 < 0) {
    goto LABEL_263;
  }
  if (v64)
  {
    if (is_mul_ok(v7, 0xAuLL))
    {
      v7 *= 10LL;
      unint64_t v65 = v64 - 1;
      if (v64 == 1) {
        return v7;
      }
      if (is_mul_ok(v7, 0xAuLL))
      {
        v7 *= 10LL;
        while (--v65)
        {
          uint64_t v66 = (v7 * (unsigned __int128)0xAuLL) >> 64;
          v7 *= 10LL;
          if (v66) {
            goto LABEL_44;
          }
        }

        return v7;
      }
    }

          unint64_t v110 = (4 * *(_BYTE *)(v109 + 18) + 8) & 0x3C;
          uint64_t v9 = ((-15LL << v110) - 1) & v9 | (v111 << v110);
          uint64_t v13 = *(void *)(v109 + 24 + 24 * v111);
          swift_unknownObjectRetain();
          unint64_t result = (void *)swift_unknownObjectRelease();
          int v109 = v13;
          if (!*(_BYTE *)(v13 + 18)) {
            goto LABEL_280;
          }
        }
      }

      swift_unknownObjectRetain_n();
      unint64_t result = (void *)swift_retain_n();
      uint64_t v14 = v4;
      uint64_t v13 = (uint64_t)v5;
LABEL_280:
      uint64_t v119 = *(unsigned __int16 *)(v13 + 16);
      if (!*(_WORD *)(v13 + 16)) {
        goto LABEL_296;
      }
      unsigned int v120 = *(void *)(v13 + 24);
      uint64_t v17 = __OFSUB__(v14, v120);
      uint64_t v15 = v14 - v120;
      if (v17)
      {
LABEL_375:
        __break(1u);
        goto LABEL_376;
      }

      if (__OFADD__(v15, 1LL))
      {
LABEL_376:
        __break(1u);
LABEL_377:
        __break(1u);
LABEL_378:
        __break(1u);
LABEL_379:
        __break(1u);
LABEL_380:
        __break(1u);
LABEL_381:
        __break(1u);
LABEL_382:
        __break(1u);
LABEL_383:
        __break(1u);
        goto LABEL_384;
      }

      if ((uint64_t)(v15 + 1) <= 0)
      {
        uint64_t v119 = 0LL;
        goto LABEL_297;
      }

      if ((_DWORD)v119 == 1) {
        goto LABEL_285;
      }
      unsigned int v122 = *(void *)(v13 + 48);
      uint64_t v14 = v15 - v122;
      if (__OFSUB__(v15, v122))
      {
LABEL_387:
        __break(1u);
        goto LABEL_388;
      }

      if (__OFADD__(v14, 1LL))
      {
LABEL_388:
        __break(1u);
LABEL_389:
        __break(1u);
LABEL_390:
        __break(1u);
        goto LABEL_391;
      }

      if (v14 + 1 >= 1)
      {
        if ((_DWORD)v119 == 2)
        {
LABEL_296:
          if (!v14) {
            goto LABEL_297;
          }
LABEL_374:
          __break(1u);
          goto LABEL_375;
        }

        uint64_t v123 = *(void *)(v13 + 72);
        uint64_t v17 = __OFSUB__(v14, v123);
        uint64_t v15 = v14 - v123;
        if (v17)
        {
LABEL_391:
          __break(1u);
          goto LABEL_392;
        }

        if (__OFADD__(v15, 1LL))
        {
LABEL_392:
          __break(1u);
LABEL_393:
          __break(1u);
LABEL_394:
          __break(1u);
          return result;
        }

        if ((_DWORD)v119 != 3)
        {
          unint64_t v16 = 3LL;
          if (v119 <= 3) {
            uint64_t v124 = 3LL;
          }
          else {
            uint64_t v124 = *(unsigned __int16 *)(v13 + 16);
          }
          uint64_t v125 = (void *)(v13 + 96);
          while (v124 != v16)
          {
            uint64_t v14 = v15 - *v125;
            if (__OFSUB__(v15, *v125)) {
              goto LABEL_380;
            }
            if (__OFADD__(v14, 1LL)) {
              goto LABEL_381;
            }
            if (v14 + 1 < 1) {
              goto LABEL_333;
            }
            ++v16;
            v125 += 3;
            uint64_t v15 = v14;
            if (v119 == v16) {
              goto LABEL_296;
            }
          }

          goto LABEL_379;
        }

LABEL_186:
              if ((v186 & 1) != 0)
              {
                char v112 = v182;
                Unicode.Scalar.properties.getter();
                uint64_t v113 = Unicode.Scalar.Properties._caseFolded.getter();
                uint64_t v115 = v114;
                (*(void (**)(char *, uint64_t))(v183 + 8))(v112, v184);
                uint64_t v116 = v113;
                char v55 = v185;
                uint64_t v117 = v115;
              }

              else
              {
                if (v122 >= 0x80)
                {
                  int v128 = (v122 & 0x3F) << 8;
                  if (v122 >= 0x800)
                  {
                    int v129 = (v128 | (v122 >> 6) & 0x3F) << 8;
                    int v130 = (((v129 | (v122 >> 12) & 0x3F) << 8) | (v122 >> 18)) - 2122219023;
                    unsigned int v127 = (v129 | (v122 >> 12)) + 8487393;
                    if (HIWORD(v122)) {
                      unsigned int v127 = v130;
                    }
                  }

                  else
                  {
                    unsigned int v127 = (v128 | (v122 >> 6)) + 33217;
                  }
                }

                else
                {
                  unsigned int v127 = v122 + 1;
                }

                uint64_t v188 = (v127 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v127) >> 3))));
                uint64_t v116 = MEMORY[0x186E1B6AC](&v188);
              }

              String.append(_:)(*(Swift::String *)&v116);
              swift_bridgeObjectRelease();
            }

            v111 += v121;
            uint64_t countAndFlagsBits = v180;
            if (v111 >= v15)
            {
              swift_bridgeObjectRelease();
              uint64_t v131 = v190;
              unint64_t v110 = v191;
              unint64_t v38 = v157;
              goto LABEL_196;
            }
          }
        }

        uint64_t v131 = 0LL;
LABEL_196:
        uint64_t v188 = v131;
        uint64_t v189 = v110;
        uint64_t countAndFlagsBits = String.init<A>(_:)();
        unint64_t object = v132;
        uint64_t v15 = v159;
LABEL_198:
        unint64_t v133 = v38;
        uint64_t v134 = HIBYTE(object) & 0xF;
        if ((object & 0x2000000000000000LL) == 0) {
          uint64_t v134 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        BOOL v173 = v134 != 0;
        if (v134)
        {
          String.subscript.getter();
          unint64_t v136 = v135;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v174 = String.index(after:)();
          swift_bridgeObjectRelease();
          uint64_t v176 = countAndFlagsBits;
          unint64_t v133 = object;
          unint64_t v181 = v136;
        }

        swift_bridgeObjectRetain();
        uint64_t v137 = specialized Collection.first.getter(countAndFlagsBits, object);
        if (v138)
        {
          if (v47 == v137 && v138 == v16)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v38 = v133;
            unint64_t v42 = v181;
            unint64_t v51 = v174;
            uint64_t v56 = v172;
            if ((v171 & 1) == 0) {
              goto LABEL_206;
            }
LABEL_64:
            unint64_t v181 = v42;
            if (v173)
            {
              unint64_t v57 = v175;
              goto LABEL_123;
            }

            char v58 = 0;
            unint64_t v57 = v175;
            if ((v175 & 0x2000000000000000LL) != 0) {
              goto LABEL_70;
            }
LABEL_127:
            uint64_t v59 = v56 & 0xFFFFFFFFFFFFLL;
            goto LABEL_128;
          }

          char v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v139 & 1) != 0)
          {
            uint64_t v177 = v175;
            unint64_t v38 = v133;
            goto LABEL_62;
          }

          unint64_t v143 = v154;
          uint64_t v37 = v172;
          if (v167 == v168)
          {
            if (v171)
            {
              if ((v55 & 1) == 0)
              {
                char v142 = 0;
LABEL_231:
                unint64_t v144 = v175;
                if ((v175 & 0x2000000000000000LL) != 0)
                {
LABEL_232:
                  unint64_t v145 = v144;
                  uint64_t v146 = HIBYTE(v144) & 0xF;
LABEL_245:
                  if (v192 >> 14 != 4 * v146)
                  {
                    if (v156 == v143 >> 14) {
                      goto LABEL_299;
                    }
                    char v35 = 1;
                    goto LABEL_250;
                  }

                  v193[0] = Substring.index(after:)();
                  if ((v142 & 1) == 0)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    char v35 = 1;
                    unint64_t result = v154;
                    if (v152 & 1 | ((v153 & 1) == 0)) {
                      goto LABEL_292;
                    }
                    goto LABEL_291;
                  }

                  char v35 = 1;
                  uint64_t v177 = v145;
                  goto LABEL_283;
                }

          swift_bridgeObjectRelease();
          return;
        }

        if (v86 >= v77)
        {
          if (v81) {
            goto LABEL_185;
          }
          uint64_t v81 = *(unsigned __int16 *)(v80 + 2 * v83);
          if (*(_WORD *)(v80 + 2 * v83))
          {
            uint64_t v81 = *(unsigned __int16 *)(v73 + 2 * v82 + 32);
            if (*(_WORD *)(v73 + 2 * v82 + 32)) {
              goto LABEL_185;
            }
          }
        }

        else
        {
          if (v86 < 0) {
            goto LABEL_191;
          }
          int v84 = 2 * v86;
          int v85 = v81
          uint64_t v81 = HIWORD(v85);
          *(_WORD *)(v21 + v84) = v85;
        }

        ++v82;
      }

      while (v76 != v82);
      if (!v81) {
        continue;
      }
      unint64_t v49 = __OFADD__(v76, v83);
      uint64_t v87 = v76 + v83;
      if (v49) {
        goto LABEL_205;
      }
      if (v87 >= v77) {
        goto LABEL_185;
      }
      if (v87 < 0) {
        goto LABEL_206;
      }
      if ((unint64_t)v87 >= *(void *)(v78 + 16))
      {
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }

      *(_WORD *)(v21 + 2 * v87) = v81;
    }

    while (v79 != v28);
    unint64_t v88 = *(void *)(v78 + 16);
    unint64_t v157 = v78;
    if (!v88)
    {
      unint64_t v93 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    }

    uint64_t v89 = v178;
    uint64_t v90 = v174;
    if (!*(_WORD *)(v21 + 2 * v88 - 2))
    {
      unint64_t v91 = v88 + 14;
      do
      {
        *(void *)(v78 + 16) = v91 - 15;
        if (v91 == 15) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v78 + 2 * v91--));
    }

    unint64_t v93 = v69;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_110:
    memset(v194, 0, 20);
    int v185 = v184;
    int v186 = v89;
    int v187 = v10;
    uint64_t v94 = v195;
    uint64_t v188 = v195;
    uint64_t v189 = v159;
    uint64_t v190 = v90;
    unint64_t v191 = v93;
    unint64_t v192 = v175;
    __int128 v193 = v172;
    unint64_t v181 = _So9NSDecimala__isNegative_getter(&v185);
    int v185 = v184;
    int v186 = v89;
    int v187 = v10;
    uint64_t v188 = v94;
    uint64_t v189 = v159;
    uint64_t v190 = v90;
    unint64_t v191 = v93;
    unint64_t v192 = v175;
    __int128 v193 = v172;
    uint64_t v95 = v181 != _So9NSDecimala__isNegative_getter(&v185);
    _So9NSDecimala__isNegative_setter(v95, v194);
    int v185 = v184;
    int v186 = v89;
    int v187 = v10;
    uint64_t v188 = v94;
    uint64_t v189 = v159;
    uint64_t v190 = v90;
    unint64_t v191 = v93;
    unint64_t v192 = v175;
    __int128 v193 = v172;
    uint64_t v182 = _So9NSDecimala__exponent_getter((char *)&v185);
    int v185 = v184;
    int v186 = v89;
    int v187 = v10;
    uint64_t v188 = v94;
    uint64_t v189 = v159;
    uint64_t v190 = v90;
    unint64_t v191 = v93;
    unint64_t v192 = v175;
    __int128 v193 = v172;
    uint64_t v96 = _So9NSDecimala__exponent_getter((char *)&v185) + v182;
    v97._rawValue = (void *)v157;
    if (*(void *)(v157 + 16) >= 9uLL) {
      break;
    }
LABEL_116:
    NSDecimal.copyVariableLengthInteger(_:)(v97);
    if (v102) {
      goto LABEL_186;
    }
    uint64_t v103 = *((void *)v97._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v103)) {
      goto LABEL_224;
    }
    _So9NSDecimala__length_setter(v103, v194);
    _So9NSDecimala__isCompact_setter_0(0LL, v194);
    BOOL v173 = 0LL;
    _So9NSDecimala__exponent_setter(v96, v194);
    NSDecimal.compact()();
    uint64_t v18 = LODWORD(v194[0]);
    unint64_t v19 = WORD2(v194[0]);
    unint64_t v22 = HIWORD(v194[0]);
    unint64_t v20 = LOWORD(v194[1]);
    unint64_t v21 = WORD1(v194[1]);
    unint64_t v23 = WORD2(v194[1]);
    uint64_t v10 = HIWORD(v194[1]);
    unint64_t v175 = LOWORD(v194[2]);
    unint64_t v24 = WORD1(v194[2]);
LABEL_120:
    unint64_t v28 = v161;
    unint64_t v27 = v160 >> 1;
    if (v160 <= 3) {
      goto LABEL_124;
    }
  }

  specialized static NSDecimal._fitMantissa(_:roundingMode:)(v157, roundingMode);
  char v99 = v98;
  uint64_t v101 = v100;
  swift_bridgeObjectRelease();
  if (!v173)
  {
    if (v101 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v101 <= 0x7FFFFFFF)
      {
        unint64_t v49 = __OFADD__((_DWORD)v96, (_DWORD)v101);
        uint64_t v96 = (v96 + v101);
        if (!v49)
        {
          v97._rawValue = v99;
          goto LABEL_116;
        }

          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
        }

        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
        goto LABEL_186;
      }

      goto LABEL_11;
    }
  }

  if ((v39 & 0x8000000000000000LL) == 0)
  {
    unint64_t v40 = 2 * v39;
    unint64_t v41 = v36
    int v36 = HIWORD(v41);
    *(_WORD *)(v14 + v40) = v41;
    goto LABEL_22;
  }

  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v75 = v126;
  uint64_t v77 = v120;
LABEL_173:
  swift_bridgeObjectRelease();
  LOWORD(v22) = a3;
  unsigned int v76 = v122;
  uint64_t v6 = (uint64_t)v124;
LABEL_122:
  NSDecimal.asVariableLengthInteger()( v116 | ((unint64_t)(unsigned __int16)v118 << 32) | (v6 << 48),  v117 | ((unint64_t)v76 << 16) | ((unint64_t)v77 << 32) | (v121 << 48),  (unsigned __int16)v22 | ((unsigned __int16)v119 << 16));
  uint64_t v79 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v32, v78, *(void *)(v32 + 16));
  if (v75)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v80 = v79;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static NSDecimal._fitMantissa(_:roundingMode:)(v80, 1LL);
  v11._rawValue = v81;
  uint64_t v14 = v82;
  swift_bridgeObjectRelease();
  uint64_t v150 = 0LL;
  uint64_t v151 = 0LL;
  int v152 = 0;
  NSDecimal.copyVariableLengthInteger(_:)(v11);
  if (v96) {
    return swift_bridgeObjectRelease();
  }
LABEL_161:
  uint64_t v97 = *((void *)v11._rawValue + 2);
  swift_bridgeObjectRelease();
  if (HIDWORD(v97)) {
    goto LABEL_192;
  }
  _So9NSDecimala__length_setter(v97, &v150);
  uint64_t v141 = v115;
  char v142 = v18;
  unint64_t v143 = v15;
  unint64_t v144 = v134;
  unint64_t v145 = v132;
  uint64_t v146 = v136;
  uint64_t v147 = v129;
  char v148 = v130;
  unint64_t v149 = v139;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v141);
  uint64_t v141 = v116;
  char v142 = v118;
  unint64_t v143 = v6;
  unint64_t v144 = v117;
  unint64_t v145 = v122;
  uint64_t v146 = v120;
  uint64_t v147 = v121;
  char v148 = (unsigned __int16)v22;
  unint64_t v149 = v119;
  char v99 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v141);
  _So9NSDecimala__isNegative_setter(v99, &v150);
  uint64_t v141 = v115;
  char v142 = v18;
  unint64_t v143 = v15;
  unint64_t v144 = v134;
  unint64_t v145 = v132;
  uint64_t v146 = v136;
  uint64_t v147 = v129;
  char v148 = v130;
  unint64_t v149 = v139;
  uint64_t v100 = _So9NSDecimala__exponent_getter((char *)&v141);
  uint64_t v141 = v116;
  char v142 = v118;
  unint64_t v143 = (__int16)v124;
  unint64_t v144 = v117;
  unint64_t v145 = v122;
  uint64_t v146 = v120;
  uint64_t v147 = v121;
  char v148 = (unsigned __int16)v22;
  unint64_t v149 = v119;
  uint64_t v101 = (int)(v100 - _So9NSDecimala__exponent_getter((char *)&v141)) - 38LL;
  uint64_t v33 = v101 + v14;
  if (__OFADD__(v101, v14)) {
    goto LABEL_190;
  }
  if (v33 > -129)
  {
LABEL_166:
    if (v33 < 128)
    {
      _So9NSDecimala__exponent_setter(v33, &v150);
      _So9NSDecimala__isCompact_setter_0(0LL, &v150);
      NSDecimal.compact()();
      return v150;
    }

        __break(1u);
        goto LABEL_187;
      }

      uint64_t v67 = v25;
LABEL_55:
      free(v67);
      goto LABEL_56;
    }

    uint64_t v18 = v17;
    unint64_t v163 = &v151;
    uint64_t v160 = v147;
    if (v17)
    {
      if (v17 <= 14)
      {
        unint64_t v21 = specialized Data.InlineData.init(_:)(v146, &v146[v17]);
        unint64_t v22 = v35 & 0xFFFFFFFFFFFFFFLL;
      }

      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        unint64_t v19 = (unint64_t)__DataStorage.init(bytes:length:)((unint64_t)v146, v18);
        unint64_t v20 = v19;
        if (v18 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          unint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = 0LL;
          *(void *)(v21 + 24) = v18;
          unint64_t v22 = v20 | 0x8000000000000000LL;
        }

        else
        {
          unint64_t v21 = v18 << 32;
          unint64_t v22 = v19 | 0x4000000000000000LL;
        }
      }
    }

    else
    {
      unint64_t v21 = 0LL;
      unint64_t v22 = 0xC000000000000000LL;
    }

    swift_bridgeObjectRetain();
    uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v38 = v165;
    unint64_t v164 = v165;
    unint64_t v165 = 0x8000000000000000LL;
    unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    unint64_t v41 = *(void *)(v38 + 16);
    unint64_t v42 = (v39 & 1) == 0;
    unint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_183;
    }
    unint64_t v44 = v39;
    if (*(void *)(v38 + 24) < v43)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v37);
      int v45 = v164;
      uint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
      if ((v44 & 1) != (v47 & 1)) {
        goto LABEL_197;
      }
      unint64_t v40 = v46;
      if ((v44 & 1) == 0) {
        goto LABEL_39;
      }
      goto LABEL_36;
    }

    if ((v37 & 1) != 0)
    {
      int v45 = v38;
      if ((v39 & 1) == 0) {
        goto LABEL_39;
      }
LABEL_36:
      unint64_t v48 = *(void *)(v45 + 56) + 16 * v40;
      outlined consume of Data._Representation(*(void *)v48, *(void *)(v48 + 8));
      *(void *)unint64_t v48 = v21;
      *(void *)(v48 + 8) = v22;
      goto LABEL_41;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
    uint64_t v87 = static _DictionaryStorage.copy(original:)();
    int v45 = v87;
    if (!*(void *)(v38 + 16)) {
      goto LABEL_179;
    }
    unint64_t v88 = (void *)(v87 + 64);
    uint64_t v89 = (unint64_t)((1LL << *(_BYTE *)(v45 + 32)) + 63) >> 6;
    uint64_t v151 = v38 + 64;
    uint64_t v90 = 0LL;
    *(void *)(v45 + 16) = *(void *)(v38 + 16);
    unint64_t v91 = 1LL << *(_BYTE *)(v38 + 32);
    if (v91 < 64) {
      uint64_t v92 = ~(-1LL << v91);
    }
    else {
      uint64_t v92 = -1LL;
    }
    unint64_t v93 = v92 & *(void *)(v38 + 64);
    int v152 = (unint64_t)(v91 + 63) >> 6;
    while (1)
    {
      if (v93)
      {
        uint64_t v94 = __clz(__rbit64(v93));
        v93 &= v93 - 1;
        unint64_t v157 = v90;
        uint64_t v95 = v94 | (v90 << 6);
        goto LABEL_79;
      }

      unint64_t v52 = __OFADD__(v90, 1LL);
      uint64_t v103 = v90 + 1;
      if (v52) {
        goto LABEL_189;
      }
      if (v103 >= v152) {
        goto LABEL_179;
      }
      uint64_t v104 = *(void *)(v151 + 8 * v103);
      if (!v104) {
        break;
      }
LABEL_95:
      unint64_t v93 = (v104 - 1) & v104;
      unint64_t v157 = v103;
      uint64_t v95 = __clz(__rbit64(v104)) + (v103 << 6);
LABEL_79:
      uint64_t v96 = 16 * v95;
      uint64_t v97 = (uint64_t *)(*(void *)(v38 + 48) + v96);
      char v99 = *v97;
      uint64_t v98 = v97[1];
      uint64_t v100 = *(void *)(v45 + 48);
      int v153 = *(_OWORD *)(*(void *)(v38 + 56) + v96);
      uint64_t v101 = v153;
      uint64_t v102 = (void *)(v100 + v96);
      *uint64_t v102 = v99;
      v102[1] = v98;
      *(_OWORD *)(*(void *)(v45 + 56) + v96) = v101;
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v153, *((unint64_t *)&v153 + 1));
      uint64_t v90 = v157;
    }

    unint64_t v105 = v103 + 1;
    if (v103 + 1 >= v152) {
      goto LABEL_179;
    }
    uint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104) {
      goto LABEL_94;
    }
    unint64_t v105 = v103 + 2;
    if (v103 + 2 >= v152) {
      goto LABEL_179;
    }
    uint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104) {
      goto LABEL_94;
    }
    unint64_t v105 = v103 + 3;
    if (v103 + 3 >= v152) {
      goto LABEL_179;
    }
    uint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104) {
      goto LABEL_94;
    }
    unint64_t v105 = v103 + 4;
    if (v103 + 4 >= v152) {
      goto LABEL_179;
    }
    uint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104) {
      goto LABEL_94;
    }
    unint64_t v105 = v103 + 5;
    if (v103 + 5 >= v152) {
      goto LABEL_179;
    }
    uint64_t v104 = *(void *)(v151 + 8 * v105);
    if (v104)
    {
LABEL_94:
      uint64_t v103 = v105;
      goto LABEL_95;
    }

    char v106 = v45;
    unint64_t v107 = v103 + 6;
    if (v103 + 6 >= v152) {
      goto LABEL_178;
    }
    uint64_t v104 = *(void *)(v151 + 8 * v107);
    if (v104) {
      goto LABEL_100;
    }
    unint64_t v107 = v103 + 7;
    if (v103 + 7 >= v152) {
      goto LABEL_178;
    }
    uint64_t v104 = *(void *)(v151 + 8 * v107);
    if (v104)
    {
LABEL_100:
      uint64_t v103 = v107;
      goto LABEL_95;
    }

    while (1)
    {
      uint64_t v103 = v107 + 1;
      if (__OFADD__(v107, 1LL))
      {
        __break(1u);
        goto LABEL_195;
      }

      if (v103 >= v152) {
        break;
      }
      uint64_t v104 = *(void *)(v151 + 8 * v103);
      ++v107;
      int v45 = v106;
      if (v104) {
        goto LABEL_95;
      }
    }

  uint64_t v147 = v172;
  if (!v120) {
    uint64_t v147 = 1;
  }
  if ((v147 & 1) == 0)
  {
    char v148 = fmod(v9, 1.0);
    unint64_t v149 = v9 - v148;
    if (v148 < 0.0) {
      unint64_t v149 = v9 - v148 + -1.0;
    }
    uint64_t v150 = (double)v120;
    if (v148 >= 0.0) {
      uint64_t v151 = v148;
    }
    else {
      uint64_t v151 = v148 + 1.0;
    }
    int v152 = v150 * 86400.0 + v149;
    *(double *)__src = v9;
    v153._time = _CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE(v150 * 86400.0));
    *(double *)__src = v152;
    if (v153._time == _CalendarGregorian.timeInDay(for:)(v153)) {
      goto LABEL_201;
    }
    unint64_t v154 = swift_getObjectType();
    *(double *)__src = v152;
    uint64_t v155 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 40);
    unint64_t v156 = v155(__src, v154, v17);
    *(double *)__src = v9;
    unint64_t result = v155(__src, v154, v17);
    if (v156 == result) {
      goto LABEL_201;
    }
    unint64_t v157 = result;
    unint64_t v158 = result - v156;
    if (!__OFSUB__(result, v156))
    {
      unint64_t v159 = v152 + (double)v158;
      *(double *)__src = v159;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v158)) == v153._time)
      {
        int v152 = v159;
      }

      else if (v157 >= v156)
      {
        int v152 = v159;
      }

  swift_release();
  unint64_t v156 = *(_OWORD *)(v32 + 32);
  v442 = *(_OWORD *)(v32 + 16);
  v443 = v156;
  v444 = *(_OWORD *)(v32 + 48);
  BigString.utf8.getter();
  unint64_t v16 = BigString.UTF8View.count.getter();
  unint64_t result = outlined release of Locale((uint64_t)v386);
  if (v16 < v355) {
    goto LABEL_399;
  }
  unint64_t v157 = *(void *)(v32 + 64);
  unint64_t v158 = *(void *)(v32 + 72);
  unint64_t v159 = *(void *)(v32 + 80);
  uint64_t v160 = *(void *)(v32 + 88);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v161 = v160;
  uint64_t v162 = v355;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v355,  v354 & 1,  v157,  v158,  v159,  v161,  (uint64_t *)&v432);
  __int128 v354 = v432;
  unint64_t v163 = v433;
  unint64_t v164 = v434;
  swift_unknownObjectRelease();
  v432 = v354;
  v433 = v163;
  *(void *)&v434 = v164;
  *(void *)&__int128 v354 = &v390;
  if (v355 != v16) {
    goto LABEL_191;
  }
LABEL_192:
  AttributedString._InternalRunsSlice.startIndex.getter((void *)v32, v162, v387);
  for (i = &v388; v164 < *i && *(void *)(v357 + 16); i = &v390)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v432,  v162,  v16,  (void *)v32,  (uint64_t *)&v357,  v11,  v145,  (uint64_t)&v375);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( (void *)v32,  v162,  v16,  (uint64_t *)&v432);
    unint64_t v164 = v434;
    if (v162 == v16) {
      goto LABEL_192;
    }
LABEL_191:
    unint64_t v165 = *(void *)(v32 + 72);
    unint64_t v166 = *(void *)(v32 + 80);
    unint64_t v167 = *(void *)(v32 + 88);
    unint64_t v168 = swift_unknownObjectRetain();
    uint64_t v169 = v167;
    uint64_t v162 = v355;
    AttributedString._InternalRuns.endIndex.getter(v168, v165, v166, v169, v389);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v34 = v375;
  __int128 v334 = v363;
  a3 = v333;
  unint64_t v31 = v346;
  uint64_t v33 = v340 >> 11;
LABEL_196:
  int v171 = *(_OWORD *)(v32 + 32);
  v439 = *(_OWORD *)(v32 + 16);
  v440 = v171;
  v441 = *(_OWORD *)(v32 + 48);
  BigString.utf8.getter();
  uint64_t v172 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v391);
  BOOL v173 = (_OWORD *)*v31;
  uint64_t v174 = *(_OWORD *)(*v31 + 32);
  v375 = *(_OWORD *)(*v31 + 16);
  v376 = v174;
  unint64_t v175 = *(_OWORD *)(v31 + 1);
  v377 = v173[3];
  v378 = v175;
  uint64_t v176 = *(_OWORD *)(v31 + 5);
  v379 = *(_OWORD *)(v31 + 3);
  v380 = v176;
  v381 = *(_OWORD *)(v31 + 7);
  swift_unknownObjectRetain();
  BigString.init()();
  uint64_t v177 = v393;
  v173[1] = v392;
  v173[2] = v177;
  v173[3] = v394;
  swift_unknownObjectRelease();
  *(void *)&v432 = a2;
  *((void *)&v432 + 1) = v342;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Character>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type CollectionOfOne<Character> and conformance CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<Character>,  MEMORY[0x189619498]);
  BigSubstring.replaceSubrange<A>(_:with:)();
  uint64_t v178 = (_OWORD *)*v31;
  v436 = v379;
  v437 = v380;
  v438 = v381;
  v432 = v375;
  v433 = v376;
  v435 = v378;
  v434 = v377;
  v451 = v378;
  v452 = v379;
  v453 = v380;
  v454 = v381;
  BigSubstring.base.getter();
  uint64_t v179 = v396;
  v178[1] = v395;
  v178[2] = v179;
  v178[3] = v397;
  swift_unknownObjectRelease();
  uint64_t v180 = v452;
  *(_OWORD *)(v31 + 1) = v451;
  *(_OWORD *)(v31 + 3) = v180;
  unint64_t v181 = v454;
  *(_OWORD *)(v31 + 5) = v453;
  *(_OWORD *)(v31 + 7) = v181;
  uint64_t v182 = *v31;
  uint64_t v183 = *(_OWORD *)(*v31 + 32);
  v431[9] = *(_OWORD *)(*v31 + 16);
  v431[10] = v183;
  v431[11] = *(_OWORD *)(v182 + 48);
  BigString.utf8.getter();
  unint64_t v16 = BigString.UTF8View.count.getter();
  unint64_t result = outlined release of Locale((uint64_t)v398);
  uint64_t v184 = v16 - v172;
  if (__OFSUB__(v16, v172)) {
    goto LABEL_388;
  }
  int v185 = v341 + v184;
  if (__OFADD__(v341, v184))
  {
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }

  swift_bridgeObjectRetain();
  int v186 = MEMORY[0x18961AFF8];
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v33, v355, v185, a3, v186);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v187 = *v31;
  uint64_t v188 = *(_OWORD *)(*v31 + 32);
  v431[6] = *(_OWORD *)(*v31 + 16);
  v431[7] = v188;
  v431[8] = *(_OWORD *)(v187 + 48);
  BigString.utf8.getter();
  unint64_t v16 = BigString.UTF8View.count.getter();
  unint64_t result = outlined release of Locale((uint64_t)v399);
  uint64_t v189 = v16 - v172;
  if (__OFSUB__(v16, v172))
  {
LABEL_390:
    __break(1u);
    goto LABEL_391;
  }

  if (__OFADD__(v34, v189))
  {
LABEL_391:
    __break(1u);
    goto LABEL_392;
  }

  if ((uint64_t)(v34 + v189) < v334)
  {
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
    goto LABEL_396;
  }

  uint64_t v190 = *(void *)(v187 + 80);
  __int128 v338 = v187;
  if (!*(void *)(v187 + 64))
  {
    unint64_t v229 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v229);
    swift_unknownObjectRelease();
    goto LABEL_238;
  }

  __int128 v332 = v34 + v189;
  unint64_t v191 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v191);
  swift_unknownObjectRelease_n();
  if (!v190) {
    goto LABEL_238;
  }
  unint64_t v192 = (__int128 *)(v187 + 16);
  __int128 v193 = *(_OWORD *)(v187 + 32);
  v431[3] = *(_OWORD *)(v187 + 16);
  v431[4] = v193;
  v431[5] = *(_OWORD *)(v187 + 48);
  BigString.utf8.getter();
  BigString.startIndex.getter();
  __int128 v194 = BigString.UTF8View.index(_:offsetBy:)();
  __int128 v196 = v195;
  uint64_t v198 = v197;
  Swift::String v200 = v199;
  outlined release of Locale((uint64_t)v400);
  __int128 v201 = *(_OWORD *)(v338 + 32);
  v431[0] = *(_OWORD *)(v338 + 16);
  v431[1] = v201;
  v431[2] = *(_OWORD *)(v338 + 48);
  unint64_t v16 = (uint64_t)v431;
  unint64_t result = BigString.utf8.getter();
  if (__OFSUB__(v332, v334))
  {
LABEL_403:
    __break(1u);
    goto LABEL_404;
  }

  uint64_t v202 = BigString.UTF8View.index(_:offsetBy:)();
  unint64_t v204 = v203;
  uint64_t v206 = v205;
  unint64_t v208 = v207;
  outlined release of Locale((uint64_t)v401);
  specialized Range.init(uncheckedBounds:)(v194, v196, v198, v200, v202, v204, v206, v208, v424);
  *(void *)&v423[0] = MEMORY[0x18961AFF0];
  uint64_t v209 = v192[1];
  v428 = *v192;
  v429 = v209;
  v430 = v192[2];
  BigString.unicodeScalars.getter();
  __int128 v331 = v424[0];
  id v210 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v212 = v211;
  char v214 = v213;
  char v216 = v215;
  outlined release of Locale((uint64_t)v402);
  uint64_t v217 = v192[1];
  v425 = *v192;
  v426 = v217;
  __int128 v340 = (unint64_t)v192;
  v427 = v192[2];
  BigString.unicodeScalars.getter();
  __int128 v330 = v424[4];
  unint64_t v16 = BigString.UnicodeScalarView.index(roundingUp:)();
  unint64_t result = outlined release of Locale((uint64_t)v403);
  *(void *)&v455 = v210;
  *((void *)&v455 + 1) = v212;
  *(void *)&v456 = v214;
  *((void *)&v456 + 1) = v216;
  unint64_t v32 = v210 >> 11;
  a3 = (unint64_t)v16 >> 11;
  if ((unint64_t)v16 >> 11 < v210 >> 11)
  {
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
    goto LABEL_406;
  }

  unint64_t v16 = *(void *)(v338 + 64);
  if (v16) {
    uint64_t v218 = *(void *)(v338 + 80);
  }
  else {
    uint64_t v218 = 0LL;
  }
  if (v218 < v32) {
    goto LABEL_405;
  }
  uint64_t v11 = *(void *)(v338 + 88);
  v355 = *(void *)(v338 + 72);
  if (!v16 || v32 >= *(void *)(v338 + 80) || !*(_WORD *)(v16 + 16))
  {
    swift_retain_n();
    uint64_t v230 = swift_unknownObjectRetain_n();
    unint64_t v231 = specialized Rope._endPath.getter(v230);
    swift_unknownObjectRelease();
    unint64_t v42 = 0LL;
    char v219 = 0LL;
    if (!v16) {
      goto LABEL_363;
    }
    goto LABEL_240;
  }

  *(void *)&__int128 v354 = a3;
  a3 = *(unsigned __int8 *)(v16 + 18);
  if (*(_BYTE *)(v16 + 18))
  {
    swift_unknownObjectRetain_n();
    unint64_t result = swift_retain_n();
    char v219 = v32;
    __int128 v220 = v16;
    while (1)
    {
      unint64_t v222 = *(unsigned __int16 *)(v220 + 16);
      if (!*(_WORD *)(v220 + 16)) {
        goto LABEL_215;
      }
      id v223 = *(void *)(v220 + 40);
      char v224 = v219 - v223;
      if (__OFSUB__(v219, v223)) {
        goto LABEL_385;
      }
      if (__OFADD__(v224, 1LL)) {
        goto LABEL_386;
      }
      if (v224 + 1 <= 0)
      {
        unint64_t v222 = 0LL;
      }

      else
      {
        if ((_DWORD)v222 == 1)
        {
          v219 -= v223;
          goto LABEL_215;
        }

        char v225 = *(void *)(v220 + 64);
        uint64_t v46 = __OFSUB__(v224, v225);
        char v226 = v224 - v225;
        if (v46) {
          goto LABEL_401;
        }
        if (__OFADD__(v226, 1LL)) {
          goto LABEL_402;
        }
        if (v226 + 1 < 1)
        {
          unint64_t v222 = 1LL;
          char v219 = v224;
        }

        else
        {
          if ((_DWORD)v222 == 2)
          {
            char v219 = v226;
LABEL_215:
            if (v219) {
              goto LABEL_384;
            }
            goto LABEL_216;
          }

          uint64_t v227 = (void *)(v220 + 88);
          unint64_t v228 = 2LL;
          while (1)
          {
            if (v222 == v228) {
              goto LABEL_377;
            }
            char v219 = v226 - *v227;
            if (__OFSUB__(v226, *v227)) {
              goto LABEL_378;
            }
            if (__OFADD__(v219, 1LL)) {
              goto LABEL_379;
            }
            if (v219 + 1 < 1) {
              break;
            }
            ++v228;
            v227 += 3;
            char v226 = v219;
            if (v222 == v228) {
              goto LABEL_215;
            }
          }

          unint64_t v222 = v228;
          char v219 = v226;
        }
      }

        unint64_t v105 = *v5;
        if (*v5) {
          unint64_t v105 = *(unsigned __int8 *)(v105 + 18);
        }
        uint64_t v67 = v180;
        if (v53 <= v105)
        {
          swift_bridgeObjectRelease_n();
          unint64_t result = swift_bridgeObjectRelease_n();
          goto LABEL_236;
        }

        char v106 = v180[8];
        unint64_t v107 = v180[11];
        *(void *)&int v186 = v181;
        *((void *)&v186 + 1) = v53;
        *(void *)&int v187 = v13;
        if (v181 != v107) {
          goto LABEL_382;
        }
        if (v106)
        {
          Swift::String v108 = *(unsigned __int8 *)(v106 + 18);
          unint64_t result = swift_unknownObjectRetain();
          if (v53 <= v108) {
            goto LABEL_383;
          }
        }

        else if (!v53)
        {
          goto LABEL_383;
        }

        int v109 = (4 * *((_BYTE *)v13 + 18) + 8) & 0x3C;
        if (((v53 >> v109) & 0xF) != 0)
        {
          unint64_t v110 = ((((v53 >> v109) & 0xF) - 1) << v109) | ((-15LL << v109) - 1) & v53;
          unint64_t result = swift_unknownObjectRelease();
          uint64_t v111 = v13;
          char v112 = v181;
          uint64_t v113 = v174;
        }

        else
        {
          swift_unknownObjectRetain();
          uint64_t v114 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v186, v106);
          unint64_t result = swift_unknownObjectRelease_n();
          uint64_t v113 = v174;
          if ((v114 & 1) == 0) {
            goto LABEL_398;
          }
          unint64_t v110 = *((void *)&v186 + 1);
          char v112 = v186;
          uint64_t v111 = (void *)v187;
        }

        uint64_t v9 = a2;
        if (v112 != v180[11]) {
          goto LABEL_384;
        }
        if (v111)
        {
          uint64_t v115 = &v111[3 * ((v110 >> ((4 * *((_BYTE *)v111 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v116 = v115[4];
          uint64_t v117 = v115[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          unsigned int v118 = v180[8];
          swift_unknownObjectRetain();
          uint64_t v9 = a2;
          specialized Rope._Node.subscript.getter(v110, v118);
          uint64_t v116 = v119;
          uint64_t v117 = v120;
          swift_unknownObjectRelease();
        }

        if ((specialized static Dictionary<>.== infix(_:_:)(v116, v113) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_210;
        }

        uint64_t v121 = specialized static Set.== infix(_:_:)(v117, v172);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v121 & 1) == 0)
        {
          unint64_t v5 = v171;
          goto LABEL_210;
        }

        unsigned int v122 = specialized Rope._remove(at:)((uint64_t)&v186, v181, v53);
        uint64_t v123 = v180;
        uint64_t v124 = v180[8];
        uint64_t v125 = v180[11];
        if (v122 >= specialized Rope._endPath.getter(v124))
        {
          uint64_t v124 = 0LL;
        }

        else if (*(_BYTE *)(v124 + 18))
        {
          uint64_t v126 = (v122 >> ((4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          unsigned int v127 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v124 + 24, v126, v122);
          swift_unknownObjectRelease();
          uint64_t v124 = v127;
          uint64_t v123 = v180;
        }

        uint64_t v183 = v125;
        uint64_t v184 = v122;
        int v185 = v124;
        uint64_t v131 = v186;
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        if (v125 != v123[11]) {
          goto LABEL_405;
        }
        unint64_t v132 = v123[8];
        if (v132)
        {
          unint64_t v133 = *(unsigned __int8 *)(v132 + 18);
          unint64_t result = swift_unknownObjectRetain();
          if (v122 <= v133) {
            goto LABEL_406;
          }
        }

        else if (!v122)
        {
          goto LABEL_406;
        }

        if (v124 && (unint64_t v167 = (4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C, ((v122 >> v167) & 0xF) != 0))
        {
          uint64_t v184 = ((((v122 >> v167) & 0xF) - 1) << v167) | ((-15LL << v167) - 1) & v122;
          unint64_t result = swift_unknownObjectRelease();
        }

        else
        {
          swift_unknownObjectRetain();
          unint64_t v168 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v183, v132);
          unint64_t result = swift_unknownObjectRelease_n();
          if ((v168 & 1) == 0) {
            goto LABEL_411;
          }
          uint64_t v125 = v183;
        }

        uint64_t v67 = v180;
        uint64_t v9 = a2;
        unint64_t v5 = v171;
        if (v125 != v180[11]) {
          goto LABEL_407;
        }
        if (!*v171) {
          goto LABEL_425;
        }
        unint64_t v53 = v184;
        unint64_t result = specialized Rope._Node._prepareModify(at:)(v184, (uint64_t)v198);
        int v186 = v198[0];
        int v187 = v198[1];
        uint64_t v188 = v198[2];
        unint64_t v20 = __OFSUB__(v31, *((void *)&v198[0] + 1));
        v31 -= *((void *)&v198[0] + 1);
        if (v20) {
          goto LABEL_408;
        }
        if (__OFADD__(*((void *)&v198[0] + 1), v131)) {
          goto LABEL_409;
        }
        *((void *)&v186 + 1) = *((void *)&v198[0] + 1) + v131;
        unint64_t v181 = v125 + 1;
        v180[11] = v125 + 1;
        if (!v180[8]) {
          goto LABEL_426;
        }
        uint64_t v13 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v20 = __OFSUB__(v179--, 1LL);
        unint64_t v7 = a3;
        if (v20) {
          goto LABEL_410;
        }
LABEL_236:
        uint64_t v137 = v67[8];
        uint64_t v138 = v67[11];
        *(void *)&int v186 = v181;
        *((void *)&v186 + 1) = v53;
        *(void *)&int v187 = v13;
        if (__OFADD__(v179, 1LL)) {
          goto LABEL_350;
        }
        if (v181 != v138) {
          goto LABEL_351;
        }
        ++v179;
        if (v13)
        {
          char v139 = v13[3 * ((v53 >> ((4 * *((_BYTE *)v13 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          char v139 = specialized Rope._Node.subscript.getter(v53, v137);
        }

        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v20 = __OFADD__(v31, v139);
        v31 += v139;
        if (v20) {
          goto LABEL_352;
        }
        if (v137)
        {
          int v140 = ((-15LL << ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v137 + 18) | ((unint64_t)*(unsigned __int16 *)(v137 + 16) << ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C));
          unint64_t result = swift_unknownObjectRetain();
        }

        else
        {
          int v140 = 0LL;
        }

        uint64_t v8 = v180;
        if (v53 >= v140) {
          goto LABEL_353;
        }
        if (v13
          && (uint64_t v141 = (4 * *((_BYTE *)v13 + 18) + 8) & 0x3C,
              char v142 = ((v53 >> v141) & 0xF) + 1,
              v142 < *((unsigned __int16 *)v13 + 8)))
        {
          uint64_t v178 = (v142 << v141) | ((-15LL << v141) - 1) & v53;
          unint64_t result = swift_unknownObjectRelease_n();
        }

        else
        {
          unint64_t v143 = *(unsigned __int8 *)(v137 + 18);
          unint64_t v144 = (4 * v143 + 8) & 0x3C;
          uint64_t v183 = (v53 >> v144) & 0xF;
          if (v143)
          {
            swift_unknownObjectRetain();
            unint64_t v145 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v137 + 24, &v183, (uint64_t)&v186, v137, v143);
            unint64_t result = swift_unknownObjectRelease();
            if ((v145 & 1) == 0) {
              goto LABEL_254;
            }
            unint64_t result = swift_unknownObjectRelease_n();
            uint64_t v178 = *((void *)&v186 + 1);
          }

          else
          {
            uint64_t v146 = ((v53 >> v144) & 0xF) + 1;
            if (v146 >= *(unsigned __int16 *)(v137 + 16))
            {
LABEL_254:
              if (v137)
              {
                uint64_t v147 = *(unsigned __int8 *)(v137 + 18);
                char v148 = *(unsigned __int16 *)(v137 + 16);
                unint64_t result = swift_unknownObjectRelease_n();
                unint64_t v149 = ((-15LL << ((4 * v147 + 8) & 0x3C)) - 1) & v147 | (unint64_t)(v148 << ((4 * v147 + 8) & 0x3C));
              }

              else
              {
                unint64_t v149 = 0LL;
              }

              *(void *)&int v186 = v181;
              *((void *)&v186 + 1) = v149;
              uint64_t v178 = v149;
              *(void *)&int v187 = 0LL;
              goto LABEL_258;
            }

            uint64_t v178 = (v146 << v144) | ((-15LL << v144) - 1) & v53;
            *((void *)&v186 + 1) = v178;
            unint64_t result = swift_unknownObjectRelease_n();
            *(void *)&int v187 = v137;
          }
        }

        unint64_t v25 = (v100 - 1) & v100;
        char v99 = __clz(__rbit64(v100)) + (v15 << 6);
LABEL_187:
        uint64_t v102 = (unint64_t *)(*(void *)(v10 + 48) + 16 * v99);
        uint64_t v103 = *v102;
        unint64_t v5 = v102[1];
        uint64_t v104 = v281;
        swift_bridgeObjectRetain();
        AttributedString._AttributeStorage.subscript.getter(v103, v5, v104, (uint64_t)&v276);
        if (!*((void *)&v277 + 1))
        {
          outlined destroy of Any?( (uint64_t)&v276,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          unint64_t v105 = 0LL;
LABEL_193:
          swift_bridgeObjectRetain();
          outlined consume of AttributedString.AttributeRunBoundaries?(v105, 1LL);
          outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
          goto LABEL_171;
        }

        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v276, (uint64_t)&v272);
        outlined destroy of Any?( (uint64_t)&v276,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        unint64_t v105 = v274;
        char v106 = v275;
        outlined copy of AttributedString.AttributeRunBoundaries?(v274, v275);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v272);
        if (v106 == 1) {
          goto LABEL_193;
        }
        *(void *)&char v276 = v105;
        *((void *)&v276 + 1) = v106;
        *(void *)&__int16 v272 = v268;
        *((void *)&v272 + 1) = v9;
        swift_bridgeObjectRetain();
        outlined copy of AttributedString.AttributeRunBoundaries?(v105, v106);
        unint64_t v107 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v105, v106);
        if ((v107 & 1) == 0
          || (AttributedString._AttributeStorage.subscript.getter(v103, v5, v267, (uint64_t)&v276),
              Swift::String v108 = *((void *)&v277 + 1),
              outlined destroy of Any?( (uint64_t)&v276,  &demangling cache variable for type metadata for AttributedString._AttributeValue?),  v108))
        {
LABEL_171:
          unint64_t result = swift_bridgeObjectRelease();
        }

        else
        {
          unint64_t v280 = 0LL;
          __int128 v278 = 0u;
          v279 = 0u;
          __int128 v277 = 0u;
          char v276 = 0u;
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v103, v5);
          unint64_t result = swift_bridgeObjectRelease();
          uint64_t v47 = 1LL;
          id v246 = 1;
        }
      }

        uint64_t v125 = v14 + v13;
        uint64_t v126 = v14 + v13 - 1;
        unsigned int v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v126);
        if ((v127 - 58) > 0xF5u)
        {
          unint64_t result = (char *)a9(v14, v13);
          if ((v137 & 1) == 0) {
            return result;
          }
          return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( v11 & 1,  (char *)v14,  v13,  a3,  v184,  v23);
        }

        unint64_t v48 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(v126 - a3);
        if (v126 < a3 || a3 + v184 < v126) {
          goto LABEL_274;
        }
        if (a3 + v184 >= v125) {
          int v128 = v125;
        }
        else {
          int v128 = a3 + v184;
        }
        if (v128 <= a3)
        {
          unint64_t v23 = 0LL;
          uint64_t v13 = 1LL;
          goto LABEL_217;
        }

        BOOL v173 = v127;
        uint64_t v179 = v126 - a3;
        int v129 = v184 + a3;
        int v130 = -(uint64_t)a3;
        uint64_t v13 = 1LL;
        uint64_t v183 = v184 + a3;
        uint64_t v188 = -(uint64_t)a3;
LABEL_194:
        uint64_t v131 = 0LL;
        unint64_t v132 = 0LL;
        unint64_t v133 = v129 - a3;
        uint64_t v134 = v130 + a3;
        while ((uint64_t)(v134 + v132) >= 0 && (uint64_t)(v133 + v131) >= 1)
        {
          unint64_t v135 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v132);
          if (v135 == 10)
          {
            unint64_t v53 = __OFADD__(v13++, 1LL);
            int v130 = v188;
            if (!v53)
            {
              a3 += v132 + 1;
              goto LABEL_211;
            }

            goto LABEL_278;
          }

          if (v135 == 13)
          {
            unint64_t v136 = a3 + v132;
            int v130 = v188;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v132 + 1, v126)) {
              goto LABEL_209;
            }
            if (((v188 + a3 + v132 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v132 + v133) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  a3 + v132 + 1) == 10) {
                unint64_t v136 = a3 + v132 + 1;
              }
LABEL_209:
              unint64_t v53 = __OFADD__(v13++, 1LL);
              if (!v53)
              {
                a3 = v136 + 1;
LABEL_211:
                int v129 = v183;
                if (a3 >= v128)
                {
                  unint64_t v23 = 0LL;
LABEL_213:
                  unsigned int v127 = v173;
                  unint64_t v48 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v179;
LABEL_217:
                  Swift::String v62 = v127;
                  goto LABEL_218;
                }

                goto LABEL_194;
              }

        uint64_t v125 = v15 + v14;
        uint64_t v126 = v15 + v14 - 1;
        unsigned int v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v126);
        if ((v127 - 58) > 0xF5u)
        {
          unint64_t result = a10(v15, v14);
          if ((result & 0x100000000LL) == 0) {
            return result;
          }
          return a9(v12 & 1, v15, v14, a3, v183, v24);
        }

        unint64_t v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(v126 - a3);
        if (v126 < a3 || a3 + v183 < v126) {
          goto LABEL_274;
        }
        if (a3 + v183 >= v125) {
          int v128 = v125;
        }
        else {
          int v128 = a3 + v183;
        }
        if (v128 <= a3)
        {
          unint64_t v24 = 0LL;
          uint64_t v14 = 1LL;
          goto LABEL_217;
        }

        uint64_t v172 = v127;
        uint64_t v178 = v126 - a3;
        int v129 = v183 + a3;
        int v130 = -(uint64_t)a3;
        uint64_t v14 = 1LL;
        uint64_t v182 = v183 + a3;
        int v187 = -(uint64_t)a3;
LABEL_194:
        uint64_t v131 = 0LL;
        unint64_t v132 = 0LL;
        unint64_t v133 = v129 - a3;
        uint64_t v134 = v130 + a3;
        while ((uint64_t)(v134 + v132) >= 0 && (uint64_t)(v133 + v131) >= 1)
        {
          unint64_t v135 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v132);
          if (v135 == 10)
          {
            unint64_t v54 = __OFADD__(v14++, 1LL);
            int v130 = v187;
            if (!v54)
            {
              a3 += v132 + 1;
              goto LABEL_211;
            }

            goto LABEL_278;
          }

          if (v135 == 13)
          {
            unint64_t v136 = a3 + v132;
            int v130 = v187;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v132 + 1, v126)) {
              goto LABEL_209;
            }
            if (((v187 + a3 + v132 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v132 + v133) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  a3 + v132 + 1) == 10) {
                unint64_t v136 = a3 + v132 + 1;
              }
LABEL_209:
              unint64_t v54 = __OFADD__(v14++, 1LL);
              if (!v54)
              {
                a3 = v136 + 1;
LABEL_211:
                int v129 = v182;
                if (a3 >= v128)
                {
                  unint64_t v24 = 0LL;
LABEL_213:
                  unsigned int v127 = v172;
                  unint64_t v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v178;
LABEL_217:
                  Swift::String v62 = v127;
                  goto LABEL_218;
                }

                goto LABEL_194;
              }

        uint64_t v126 = v15 + v14;
        unsigned int v127 = v15 + v14 - 1;
        int v128 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v127);
        if ((v128 - 58) > 0xF5u)
        {
          unint64_t result = a10(v15, v14);
          if ((v138 & 1) == 0) {
            return result;
          }
          return a9(v12 & 1, v15, v14, a3, v185, v24);
        }

        unint64_t v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(v127 - a3);
        if (v127 < a3 || a3 + v185 < v127) {
          goto LABEL_274;
        }
        if (a3 + v185 >= v126) {
          int v129 = v126;
        }
        else {
          int v129 = a3 + v185;
        }
        if (v129 <= a3)
        {
          unint64_t v24 = 0LL;
          uint64_t v14 = 1LL;
          goto LABEL_217;
        }

        uint64_t v174 = v128;
        uint64_t v180 = v127 - a3;
        int v130 = v185 + a3;
        uint64_t v131 = -(uint64_t)a3;
        uint64_t v14 = 1LL;
        uint64_t v184 = v185 + a3;
        uint64_t v189 = -(uint64_t)a3;
LABEL_194:
        unint64_t v132 = 0LL;
        unint64_t v133 = 0LL;
        uint64_t v134 = v130 - a3;
        unint64_t v135 = v131 + a3;
        while ((uint64_t)(v135 + v133) >= 0 && (uint64_t)(v134 + v132) >= 1)
        {
          unint64_t v136 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v133);
          if (v136 == 10)
          {
            unint64_t v54 = __OFADD__(v14++, 1LL);
            uint64_t v131 = v189;
            if (!v54)
            {
              a3 += v133 + 1;
              goto LABEL_211;
            }

            goto LABEL_278;
          }

          if (v136 == 13)
          {
            uint64_t v137 = a3 + v133;
            uint64_t v131 = v189;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v133 + 1, v127)) {
              goto LABEL_209;
            }
            if (((v189 + a3 + v133 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v133 + v134) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  a3 + v133 + 1) == 10) {
                uint64_t v137 = a3 + v133 + 1;
              }
LABEL_209:
              unint64_t v54 = __OFADD__(v14++, 1LL);
              if (!v54)
              {
                a3 = v137 + 1;
LABEL_211:
                int v130 = v184;
                if (a3 >= v129)
                {
                  unint64_t v24 = 0LL;
LABEL_213:
                  int v128 = v174;
                  unint64_t v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v180;
LABEL_217:
                  unint64_t v63 = v128;
                  goto LABEL_218;
                }

                goto LABEL_194;
              }

LABEL_244:
                unint64_t v145 = v144;
                uint64_t v146 = v37 & 0xFFFFFFFFFFFFLL;
                goto LABEL_245;
              }

LABEL_243:
              unint64_t v144 = v175;
              uint64_t v147 = v37;
              specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)( (unint64_t)&v192,  v37,  v175);
              uint64_t v37 = v147;
              char v142 = 1;
              unint64_t v143 = v154;
              if ((v144 & 0x2000000000000000LL) != 0) {
                goto LABEL_232;
              }
              goto LABEL_244;
            }

              unsigned int v74 = &v46[v59 - a4];
              LODWORD(v7) = 46;
LABEL_244:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v90 = xmmword_1837301C0;
              *(void *)(v90 + 16) = v7;
              *(void *)(v90 + 24) = i;
              *(void *)(v90 + 32) = a3;
              *(void *)(v90 + 40) = v74;
              unint64_t v91 = 1;
LABEL_187:
              *(_BYTE *)(v90 + 48) = v91;
              swift_willThrow();
              return i;
            }

            uint64_t v56 = 0LL;
            char v55 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            unint64_t v57 = 1;
            if ((unint64_t)v46 >= v20)
            {
              __break(1u);
              goto LABEL_115;
            }

            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)v7 != 101)
            {
LABEL_140:
              i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v46[v59],  a4,  i);
              a3 = v72;
              unsigned int v74 = v73;
              goto LABEL_244;
            }

              unsigned int v74 = &v46[v59 - a4];
              LODWORD(v7) = 46;
LABEL_244:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v90 = xmmword_1837301C0;
              *(void *)(v90 + 16) = v7;
              *(void *)(v90 + 24) = i;
              *(void *)(v90 + 32) = a3;
              *(void *)(v90 + 40) = v74;
              unint64_t v91 = 1;
LABEL_187:
              *(_BYTE *)(v90 + 48) = v91;
              swift_willThrow();
              return i;
            }

            uint64_t v56 = 0LL;
            char v55 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            unint64_t v57 = 1;
            if ((unint64_t)v46 >= v20)
            {
              __break(1u);
              goto LABEL_115;
            }

            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)v7 != 101)
            {
LABEL_140:
              i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v46[v59],  a4,  i);
              a3 = v72;
              unsigned int v74 = v73;
              goto LABEL_244;
            }

              unsigned int v74 = &v46[v59 - a4];
              LODWORD(v7) = 46;
LABEL_244:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v90 = xmmword_1837301C0;
              *(void *)(v90 + 16) = v7;
              *(void *)(v90 + 24) = i;
              *(void *)(v90 + 32) = a3;
              *(void *)(v90 + 40) = v74;
              unint64_t v91 = 1;
LABEL_187:
              *(_BYTE *)(v90 + 48) = v91;
              swift_willThrow();
              return i;
            }

            uint64_t v56 = 0LL;
            char v55 = 0;
            char v58 = 0;
            v46 += v59 + 1;
            unint64_t v57 = 1;
            if ((unint64_t)v46 >= v20)
            {
              __break(1u);
              goto LABEL_115;
            }

            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)v7 != 101)
            {
LABEL_140:
              i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v46[v59],  a4,  i);
              a3 = v72;
              unsigned int v74 = v73;
              goto LABEL_244;
            }

LABEL_313:
            if ((v55 & 1) != 0)
            {
              char v35 = 1;
              uint64_t v177 = v175;
              goto LABEL_283;
            }

            goto LABEL_318;
          }

          if (v156 == v154 >> 14)
          {
LABEL_299:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_300;
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v167 == v168)
          {
            if (!v171) {
              goto LABEL_313;
            }
            if ((v55 & 1) == 0)
            {
              char v142 = 0;
              unint64_t v143 = v154;
              unint64_t v144 = v175;
              uint64_t v37 = v172;
              if ((v175 & 0x2000000000000000LL) != 0) {
                goto LABEL_232;
              }
              goto LABEL_244;
            }

            uint64_t v37 = v172;
            goto LABEL_243;
          }

          if (v156 == v154 >> 14) {
            goto LABEL_299;
          }
        }

LABEL_237:
        char v35 = 1;
        goto LABEL_250;
      }

      goto LABEL_146;
    }

    break;
  }

  __int16 v60 = Character.asciiValue.getter();
  unint64_t v157 = v38;
  if ((v60 & 0x100) == 0)
  {
    if ((v186 & 1) != 0)
    {
      Swift::String v62 = String.lowercased()();
      uint64_t v61 = v62._countAndFlagsBits;
      unint64_t v63 = (unint64_t)v62._object;
    }

    else
    {
      swift_bridgeObjectRetain();
      uint64_t v61 = v47;
      unint64_t v63 = v16;
    }

    goto LABEL_120;
  }

  unint64_t v65 = 0xE000000000000000LL;
  uint64_t v190 = 0LL;
  unint64_t v191 = 0xE000000000000000LL;
  uint64_t v178 = v47 & 0xFFFFFFFFFFFFLL;
  uint64_t v179 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) != 0) {
    uint64_t v66 = HIBYTE(v16) & 0xF;
  }
  else {
    uint64_t v66 = v47 & 0xFFFFFFFFFFFFLL;
  }
  if (!v66)
  {
    uint64_t v87 = 0LL;
    goto LABEL_118;
  }

  uint64_t v15 = (v16 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  uint64_t v67 = 0LL;
  while (2)
  {
    if ((v16 & 0x1000000000000000LL) != 0)
    {
      unsigned int v74 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((v16 & 0x2000000000000000LL) != 0)
      {
        uint64_t v188 = v47;
        uint64_t v189 = v16 & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((v47 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      unsigned int v74 = _decodeScalar(_:startingAt:)();
    }

    unsigned int v76 = v74;
    uint64_t v77 = v75;
    if ((v187 & 1) == 0 || v74 >> 8 < 0xFF || v74 >= 0xFFEF)
    {
      unsigned int v78 = v74;
      if ((v55 & 1) == 0) {
        goto LABEL_108;
      }
      goto LABEL_99;
    }

    LODWORD(v188) = v74;
    unint64_t result = CFUniCharCompatibilityDecompose();
    unsigned int v78 = v188;
    if (v188 <= 0x10FFFF)
    {
      if ((v55 & 1) == 0) {
        goto LABEL_108;
      }
LABEL_99:
      uint64_t v79 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v76), 5);
      if (!v79 || ((*(unsigned __int8 *)(v79 + ((unsigned __int16)v76 >> 3)) >> (v76 & 7)) & 1) == 0)
      {
        uint64_t v80 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v78), 2);
        if (v80 && ((*(unsigned __int8 *)(v80 + ((unsigned __int16)v78 >> 3)) >> (v78 & 7)) & 1) != 0)
        {
          MEMORY[0x1895F8858](v80);
          uint64_t v81 = CFUniCharDecomposeCharacter();
          char v55 = v185;
        }

      __break(1u);
LABEL_238:
      if ((_DWORD)v23 == 63)
      {
        uint64_t v141 = 258LL;
      }

      else
      {
        if ((_DWORD)v23 == 102)
        {
          unint64_t v23 = 0LL;
          int v186 = 256LL;
          goto LABEL_260;
        }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

              uint64_t v79 = v47 - a4 + v61;
              LODWORD(v9) = 46;
              goto LABEL_238;
            }

            char v58 = 0LL;
            unint64_t v57 = 0;
            __int16 v60 = 0;
            v47 += v61 + 1;
            uint64_t v59 = 1;
            if (v47 < v21) {
              continue;
            }
            __break(1u);
            break;
          case 'E':
            goto LABEL_96;
          default:
            if ((_DWORD)v9 != 101)
            {
LABEL_140:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v47 + v61, a4, a5);
              a3 = v77;
              uint64_t v79 = v78;
              goto LABEL_238;
            }

                        __break(1u);
LABEL_238:
                        __break(1u);
LABEL_239:
                        __break(1u);
LABEL_240:
                        __break(1u);
                        goto LABEL_241;
                      }

                      int v85 = v92;
                      goto LABEL_171;
                    }

                    unint64_t v88 = 1LL;
                    int v85 = v90;
                  }

LABEL_108:
        if ((v186 & 1) != 0)
        {
          unsigned int v68 = v182;
          Unicode.Scalar.properties.getter();
          uint64_t v69 = Unicode.Scalar.Properties._caseFolded.getter();
          uint64_t v71 = v70;
          (*(void (**)(char *, uint64_t))(v183 + 8))(v68, v184);
          uint64_t v72 = v69;
          char v55 = v185;
          uint64_t v73 = v71;
        }

        else
        {
          if (v78 >= 0x80)
          {
            int v84 = (v78 & 0x3F) << 8;
            if (v78 >= 0x800)
            {
              int v85 = (v84 | (v78 >> 6) & 0x3F) << 8;
              int v86 = (((v85 | (v78 >> 12) & 0x3F) << 8) | (v78 >> 18)) - 2122219023;
              unsigned int v83 = (v85 | (v78 >> 12)) + 8487393;
              if (HIWORD(v78)) {
                unsigned int v83 = v86;
              }
            }

            else
            {
              unsigned int v83 = (v84 | (v78 >> 6)) + 33217;
            }
          }

          else
          {
            unsigned int v83 = v78 + 1;
          }

          uint64_t v188 = (v83 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v83) >> 3))));
          uint64_t v72 = MEMORY[0x186E1B6AC](&v188);
        }

        String.append(_:)(*(Swift::String *)&v72);
        swift_bridgeObjectRelease();
      }

      v67 += v77;
      if (v67 >= v66)
      {
        swift_bridgeObjectRelease();
        uint64_t v87 = v190;
        unint64_t v65 = v191;
        uint64_t v15 = v159;
LABEL_118:
        uint64_t v188 = v87;
        uint64_t v189 = v65;
        uint64_t v61 = String.init<A>(_:)();
        unint64_t v63 = v88;
LABEL_120:
        uint64_t v89 = v61;
        uint64_t v90 = specialized Collection.first.getter(v61, v63);
        if (!v91)
        {
          swift_bridgeObjectRelease();
          unint64_t v38 = v157;
          if (!v173)
          {
            int v171 = 0;
            unint64_t v175 = v177;
            uint64_t countAndFlagsBits = v180;
            unint64_t v105 = v181;
            goto LABEL_151;
          }

          if (v167 != v168)
          {
            if (v156 == v154 >> 14) {
              goto LABEL_299;
            }
            char v35 = 1;
            goto LABEL_250;
          }

          if ((v55 & 1) != 0)
          {
            char v35 = 1;
LABEL_283:
            unint64_t v44 = v170;
            goto LABEL_284;
          }

  uint64_t v77 = *(void *)(v74 + 8 * v24 + 32);
  if (v174 < 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v24 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v76, v77, 8LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_163;
  }

  unsigned int v78 = *(void *)(v76 + 16);
  if (!v78 || (uint64_t v79 = *(void *)(v77 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v24 = MEMORY[0x18961AFE8];
LABEL_163:
    uint64_t v81 = (uint64_t *)v179;
    goto LABEL_164;
  }

  uint64_t v80 = v78 + v79;
  if (__OFADD__(v78, v79))
  {
LABEL_360:
    __break(1u);
LABEL_361:
    __break(1u);
LABEL_362:
    __break(1u);
LABEL_363:
    __break(1u);
    goto LABEL_364;
  }

  if (v80 > 7)
  {
    uint64_t v80 = 8LL;
LABEL_187:
    swift_bridgeObjectRetain();
    unint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v24 + 16) = v80;
    bzero((void *)(v24 + 32), 2 * v80);
    goto LABEL_188;
  }

  if (v80 < 0) {
    goto LABEL_378;
  }
  if (v80) {
    goto LABEL_187;
  }
  swift_bridgeObjectRetain();
  unint64_t v24 = MEMORY[0x18961AFE8];
LABEL_188:
  uint64_t v115 = 0LL;
  uint64_t v116 = v77 + 32;
  uint64_t v117 = v24 + 32;
  do
  {
    if (v115 == v79) {
      goto LABEL_358;
    }
    unsigned int v118 = 0;
    uint64_t v119 = 0LL;
    unsigned int v120 = v115 + 1;
    do
    {
      if (v78 == v119) {
        goto LABEL_316;
      }
      uint64_t v123 = v119 + v115;
      if (__OFADD__(v119, v115)) {
        goto LABEL_317;
      }
      if (v123 >= v80)
      {
        if (v118) {
          goto LABEL_304;
        }
        unsigned int v118 = *(unsigned __int16 *)(v116 + 2 * v115);
        if (*(_WORD *)(v116 + 2 * v115))
        {
          unsigned int v118 = *(unsigned __int16 *)(v76 + 2 * v119 + 32);
          if (*(_WORD *)(v76 + 2 * v119 + 32)) {
            goto LABEL_304;
          }
        }
      }

      else
      {
        if (v123 < 0)
        {
          __break(1u);
LABEL_324:
          __break(1u);
LABEL_325:
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
          goto LABEL_328;
        }

        uint64_t v121 = 2 * v123;
        unsigned int v122 = v118
        unsigned int v118 = HIWORD(v122);
        *(_WORD *)(v117 + v121) = v122;
      }

      ++v119;
    }

    while (v78 != v119);
    if (v118)
    {
      unint64_t v28 = __OFADD__(v78, v115);
      uint64_t v124 = v78 + v115;
      if (v28) {
        goto LABEL_361;
      }
      if (v124 >= v80) {
        goto LABEL_304;
      }
      if (v124 < 0) {
        goto LABEL_362;
      }
      *(_WORD *)(v117 + 2 * v124) = v118;
    }

    uint64_t v115 = v120;
  }

  while (v120 != v79);
  uint64_t v125 = *(void *)(v24 + 16);
  if (!v125) {
    goto LABEL_318;
  }
  uint64_t v81 = (uint64_t *)v179;
  if (!*(_WORD *)(v117 + 2 * v125 - 2))
  {
    do
    {
      *(void *)(v24 + 16) = v125 - 1;
      if (v125 == 1) {
        break;
      }
    }

    while (!*(unsigned __int16 *)(v24 + 28 + 2 * v125--));
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  while (2)
  {
    swift_bridgeObjectRelease();
LABEL_164:
    uint64_t v70 = v182;
    uint64_t v73 = v174;
LABEL_165:
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v24);
    if (v101) {
      goto LABEL_306;
    }
    uint64_t v102 = *(void *)(v24 + 16);
    swift_bridgeObjectRelease();
    if (v102 >> 31) {
      goto LABEL_349;
    }
    _So9NSDecimala__length_setter(v102, (_DWORD *)v70);
    if (v73 > 0x7FFFFFFF) {
      goto LABEL_351;
    }
    uint64_t v180 = *(_DWORD *)v70;
    unint64_t v181 = *(_OWORD *)(v70 + 4);
    uint64_t v103 = _So9NSDecimala__exponent_getter((char *)&v180);
    unint64_t v28 = __OFSUB__(v103, (_DWORD)v73);
    uint64_t v104 = (v103 - v73);
    if (v28) {
      goto LABEL_352;
    }
    _So9NSDecimala__exponent_setter(v104, (_BYTE *)v70);
    _So9NSDecimala__isCompact_setter_0(0LL, (_DWORD *)v70);
    uint64_t v180 = *(_DWORD *)v70;
    unint64_t v181 = *(_OWORD *)(v70 + 4);
    unint64_t v105 = _So9NSDecimala__length_getter(&v180);
    char v106 = *((unsigned __int16 *)v81 + 2);
    unint64_t v107 = *((unsigned __int16 *)v81 + 3);
    if (!v105)
    {
      uint64_t v113 = *((_DWORD *)v81 + 4);
      uint64_t v180 = *(_DWORD *)v81;
      LOWORD(v181) = v106;
      WORD1(v181) = v107;
      *(void *)((char *)&v181 + 4) = v81[1];
      HIDWORD(v181) = v113;
      uint64_t v114 = _So9NSDecimala__exponent_getter((char *)&v180);
      _So9NSDecimala__exponent_setter(v114, (_BYTE *)v70);
LABEL_269:
      LOBYTE(v10) = 1;
      return v10 & 1;
    }

    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v81 | (unint64_t)(v106 << 32) | (v107 << 48),  v81[1],  *((_DWORD *)v81 + 4));
    if (!v175)
    {
      char v112 = v108;
      goto LABEL_263;
    }

    uint64_t v178 = v108;
    unint64_t v24 = specialized abs<A>(_:)(v175);
    int v109 = v21[382];
    unint64_t v110 = *(void *)(v109 + 16);
    if (v110 > v24)
    {
      uint64_t v15 = v178;
      swift_bridgeObjectRetain();
      if ((v24 & 0x8000000000000000LL) == 0) {
        goto LABEL_175;
      }
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v81 = (uint64_t *)v179;
      continue;
    }

    break;
  }

  if (!v110) {
    goto LABEL_365;
  }
  unsigned int v127 = v110 - 1;
  uint64_t v15 = v178;
  swift_bridgeObjectRetain();
  do
  {
    int v128 = v21[382];
    int v129 = *(void *)(v128 + 8 * v127 + 32);
    if (v175 < 0)
    {
      swift_bridgeObjectRetain();
      char v148 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v129, 8LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v148;
    }

    else
    {
      int v130 = *(void *)(v15 + 16);
      if (v130 && (uint64_t v131 = *(void *)(v129 + 16)) != 0)
      {
        uint64_t v174 = v127;
        if (__OFADD__(v130, v131)) {
          goto LABEL_366;
        }
        unint64_t v132 = *(void *)(v129 + 16);
        BOOL v173 = v110;
        if (v130 + v131 >= 8) {
          unint64_t v133 = 8LL;
        }
        else {
          unint64_t v133 = v130 + v131;
        }
        if (v133 < 0) {
          goto LABEL_378;
        }
        swift_bridgeObjectRetain();
        uint64_t v182 = v129;
        uint64_t v134 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v134 + 16) = v133;
        unint64_t v135 = v134 + 32;
        bzero((void *)(v134 + 32), 2 * v133);
        unint64_t v136 = 0LL;
        uint64_t v137 = v182 + 32;
        do
        {
          uint64_t v138 = 0;
          char v139 = 0LL;
          int v140 = v136++;
          do
          {
            uint64_t v141 = v139 + v140;
            if (__OFADD__(v139, v140)) {
              goto LABEL_325;
            }
            if (v141 >= v133)
            {
              if (v138) {
                goto LABEL_304;
              }
              uint64_t v138 = *(unsigned __int16 *)(v137 + 2 * v140);
              if (*(_WORD *)(v137 + 2 * v140))
              {
                uint64_t v138 = *(unsigned __int16 *)(v15 + 2 * v139 + 32);
                if (*(_WORD *)(v15 + 2 * v139 + 32)) {
                  goto LABEL_304;
                }
              }
            }

            else
            {
              if (v141 < 0) {
                goto LABEL_334;
              }
              char v142 = 2 * v141;
              unint64_t v143 = v138
              uint64_t v138 = HIWORD(v143);
              *(_WORD *)(v135 + v142) = v143;
            }

            ++v139;
          }

          while (v130 != v139);
          if (v138)
          {
            unint64_t v28 = __OFADD__(v130, v140);
            unint64_t v144 = v130 + v140;
            if (v28) {
              goto LABEL_370;
            }
            if (v144 >= v133) {
              goto LABEL_304;
            }
            if (v144 < 0) {
              goto LABEL_371;
            }
            *(_WORD *)(v135 + 2 * v144) = v138;
          }
        }

        while (v136 != v132);
        unint64_t v145 = *(void *)(v134 + 16);
        if (v145 && !*(_WORD *)(v135 + 2 * v145 - 2))
        {
          uint64_t v146 = v145 + 14;
          do
          {
            *(void *)(v134 + 16) = v146 - 15;
            if (v146 == 15) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v134 + 2 * v146--));
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = v134;
        unint64_t v21 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
        unint64_t v110 = v173;
        unsigned int v127 = v174;
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v15 = MEMORY[0x18961AFE8];
      }
    }

    v24 -= v127;
  }

  while (v110 <= v24);
  int v109 = v21[382];
  if (v24 < 0) {
    goto LABEL_311;
  }
LABEL_175:
  if ((unint64_t)v24 >= *(void *)(v109 + 16))
  {
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
    goto LABEL_367;
  }

  unint64_t v21 = v81;
  unint64_t v19 = *(void *)(v109 + 8 * v24 + 32);
  if (v175 < 0)
  {
    swift_bridgeObjectRetain();
    char v112 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v19, 8LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_262;
  }

  unint64_t v25 = *(void *)(v15 + 16);
  if (!v25 || (unint64_t v16 = *(void *)(v19 + 16)) == 0)
  {
LABEL_260:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v112 = MEMORY[0x18961AFE8];
LABEL_262:
    uint64_t v81 = v21;
LABEL_263:
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v112);
    if (v149) {
      goto LABEL_306;
    }
    uint64_t v150 = *(void *)(v112 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v150)) {
      goto LABEL_379;
    }
    _So9NSDecimala__length_setter(v150, v81);
    if (v175 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v175 <= 0x7FFFFFFF)
      {
        uint64_t v180 = *(_DWORD *)v81;
        unint64_t v181 = *(_OWORD *)((char *)v81 + 4);
        uint64_t v151 = _So9NSDecimala__exponent_getter((char *)&v180);
        unint64_t v28 = __OFSUB__(v151, (_DWORD)v175);
        int v152 = (v151 - v175);
        if (!v28)
        {
          _So9NSDecimala__exponent_setter(v152, v81);
          _So9NSDecimala__isCompact_setter_0(0LL, v81);
          goto LABEL_269;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v86 = *((void *)v61._rawValue + 2);
        if (HIDWORD(v86)) {
          goto LABEL_160;
        }
        _So9NSDecimala__length_setter(v86, &v127);
        LODWORD(v124) = v122;
        WORD2(v124) = v106;
        HIWORD(v124) = v20;
        LOWORD(v125) = v21;
        WORD1(v125) = v22;
        WORD2(v125) = v23;
        HIWORD(v125) = v24;
        LOWORD(v126) = v25;
        HIWORD(v126) = v26;
LABEL_142:
        uint64_t v94 = _So9NSDecimala__isNegative_getter(&v124);
        _So9NSDecimala__isNegative_setter(v94, &v127);
        NSDecimal.copyVariableLengthInteger(_:)(v61);
        if (v95)
        {
          unint64_t v49 = v95;
          goto LABEL_144;
        }

        swift_bridgeObjectRelease();
LABEL_146:
        _So9NSDecimala__isCompact_setter_0(0LL, &v127);
        NSDecimal.compact()();
        return;
      }

      unsigned int v68 = 0LL;
    }

    swift_release();
    *(void *)&v521 = v599;
    uint64_t v123 = *(_OWORD *)(v6 + 32);
    v609 = *(_OWORD *)(v6 + 16);
    v610 = v123;
    v611 = *(_OWORD *)(v6 + 48);
    BigString.utf8.getter();
    uint64_t v124 = BigString.UTF8View.count.getter();
    unint64_t result = outlined release of Locale((uint64_t)v544);
    if (v124 < v487)
    {
LABEL_572:
      __break(1u);
      goto LABEL_573;
    }

    v494 = v124;
    uint64_t v125 = *(void *)(v6 + 64);
    uint64_t v126 = *(void *)(v6 + 72);
    unsigned int v127 = *(void *)(v6 + 80);
    int v128 = *(void *)(v6 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v487,  v466 & 1,  v125,  v126,  v127,  v128,  (uint64_t *)&v508);
    v467 = v508;
    int v130 = *((void *)&v509 + 1);
    int v129 = v509;
    unint64_t v5 = v510;
    swift_unknownObjectRelease();
    v508 = v467;
    v509 = __PAIR128__(v130, v129);
    uint64_t v131 = v487;
    unint64_t v132 = v494;
    *(void *)&v510 = v5;
    v464 = &v546;
    while (2)
    {
      if (v131 == v132)
      {
        AttributedString._InternalRunsSlice.startIndex.getter((void *)v6, v131, v545);
        unint64_t v136 = &v546;
      }

      else
      {
        uint64_t v137 = *(void *)(v6 + 72);
        uint64_t v138 = *(void *)(v6 + 80);
        char v139 = *(void *)(v6 + 88);
        int v140 = swift_unknownObjectRetain();
        uint64_t v141 = v137;
        unint64_t v132 = v494;
        AttributedString._InternalRuns.endIndex.getter(v140, v141, v138, v139, v547);
        swift_unknownObjectRelease();
        unint64_t v136 = &v548;
      }

      if (v5 >= *v136 || !*(void *)(v521 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        unint64_t result = swift_bridgeObjectRelease();
        if ((uint64_t)v525 < (uint64_t)v534)
        {
LABEL_573:
          __break(1u);
LABEL_574:
          __break(1u);
LABEL_575:
          __break(1u);
          goto LABEL_576;
        }

        v477 = v525;
        v446 = v534;
        unint64_t v5 = (uint64_t)v450;
LABEL_186:
        uint64_t v172 = *(_OWORD *)(v6 + 32);
        v606 = *(_OWORD *)(v6 + 16);
        v607 = v172;
        v608 = *(_OWORD *)(v6 + 48);
        BigString.utf8.getter();
        v495 = BigString.UTF8View.count.getter();
        outlined release of Locale((uint64_t)v549);
        BOOL v173 = *(_OWORD *)(v6 + 32);
        v534 = *(_OWORD *)(v6 + 16);
        v535 = v173;
        uint64_t v174 = *(_OWORD *)(v5 + 8);
        v536 = *(_OWORD *)(v6 + 48);
        v537 = v174;
        unint64_t v175 = *(_OWORD *)(v5 + 40);
        v538 = *(_OWORD *)(v5 + 24);
        v539 = v175;
        v540 = *(_OWORD *)(v5 + 56);
        swift_unknownObjectRetain();
        BigString.init()();
        uint64_t v176 = v551;
        *(_OWORD *)(v6 + 16) = v550;
        *(_OWORD *)(v6 + 32) = v176;
        *(_OWORD *)(v6 + 48) = v552;
        swift_unknownObjectRelease();
        a4(&v534, v458);
        v603 = v538;
        v604 = v539;
        v605 = v540;
        v599 = v534;
        v600 = v535;
        v602 = v537;
        v601 = v536;
        uint64_t v177 = v537;
        uint64_t v178 = v538;
        uint64_t v179 = v539;
        unint64_t v181 = *((void *)&v540 + 1);
        uint64_t v180 = v540;
        BigSubstring.UnicodeScalarView.base.getter();
        uint64_t v182 = v563;
        *(_OWORD *)(v459 + 16) = v562;
        *(_OWORD *)(v459 + 32) = v182;
        *(_OWORD *)(v459 + 48) = v564;
        swift_unknownObjectRelease();
        uint64_t v183 = v180;
        uint64_t v61 = v459;
        specialized Range.init(uncheckedBounds:)( v177,  *((uint64_t *)&v177 + 1),  v178,  *((uint64_t *)&v178 + 1),  v179,  *((uint64_t *)&v179 + 1),  v183,  v181,  &v508);
        uint64_t v184 = v509;
        *(_OWORD *)(v5 + 8) = v508;
        *(_OWORD *)(v5 + 24) = v184;
        int v185 = v511;
        *(_OWORD *)(v5 + 40) = v510;
        *(_OWORD *)(v5 + 56) = v185;
        int v186 = *(_OWORD *)(v459 + 32);
        v596 = *(_OWORD *)(v459 + 16);
        v597 = v186;
        v598 = *(_OWORD *)(v459 + 48);
        BigString.utf8.getter();
        int v187 = BigString.UTF8View.count.getter();
        unint64_t result = outlined release of Locale((uint64_t)v553);
        uint64_t v188 = v187 - v495;
        if (__OFSUB__(v187, v495))
        {
          __break(1u);
        }

        else
        {
          uint64_t v189 = v455 + v188;
          if (!__OFADD__(v455, v188))
          {
            unint64_t v5 = v459 + 16;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v471, v487, v189, a2, a3);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v190 = *(_OWORD *)(v459 + 32);
            v593 = *(_OWORD *)(v459 + 16);
            v594 = v190;
            v458 = (__int128 *)(v459 + 16);
            v595 = *(_OWORD *)(v459 + 48);
            BigString.utf8.getter();
            unint64_t v191 = BigString.UTF8View.count.getter();
            unint64_t result = outlined release of Locale((uint64_t)v554);
            unint64_t v192 = v191 - v495;
            if (!__OFSUB__(v191, v495))
            {
              if (!__OFADD__(v477, v192))
              {
                if (v477 + v192 >= v446)
                {
                  __int128 v193 = *(void *)(v459 + 80);
                  if (!*(void *)(v459 + 64))
                  {
                    unint64_t v231 = swift_unknownObjectRetain();
                    specialized Rope._endPath.getter(v231);
                    swift_unknownObjectRelease();
                    return swift_unknownObjectRelease();
                  }

                  v445 = v477 + v192;
                  __int128 v194 = swift_unknownObjectRetain_n();
                  specialized Rope._endPath.getter(v194);
                  swift_unknownObjectRelease_n();
                  if (!v193) {
                    return swift_unknownObjectRelease();
                  }
                  __int128 v195 = *(_OWORD *)(v459 + 32);
                  v590 = *v458;
                  v591 = v195;
                  v592 = *(_OWORD *)(v459 + 48);
                  BigString.utf8.getter();
                  BigString.startIndex.getter();
                  __int128 v196 = BigString.UTF8View.index(_:offsetBy:)();
                  uint64_t v198 = v197;
                  Swift::String v200 = v199;
                  unint64_t v5 = v201;
                  outlined release of Locale((uint64_t)v555);
                  uint64_t v202 = *(_OWORD *)(v459 + 32);
                  v587 = *v458;
                  v588 = v202;
                  v589 = *(_OWORD *)(v459 + 48);
                  unint64_t result = BigString.utf8.getter();
                  if (__OFSUB__(v445, v446)) {
                    goto LABEL_577;
                  }
                  uint64_t v203 = BigString.UTF8View.index(_:offsetBy:)();
                  unint64_t v205 = v204;
                  char v207 = v206;
                  uint64_t v209 = v208;
                  outlined release of Locale((uint64_t)v556);
                  specialized Range.init(uncheckedBounds:)(v196, v198, v200, v5, v203, v205, v207, v209, &v508);
                  id v210 = v508;
                  v444 = v510;
                  *(void *)&v517[0] = MEMORY[0x18961AFF0];
                  unint64_t v211 = *(_OWORD *)(v459 + 32);
                  v584 = *v458;
                  v585 = v211;
                  v586 = *(_OWORD *)(v459 + 48);
                  BigString.unicodeScalars.getter();
                  v443 = v210;
                  uint64_t v212 = BigString.UnicodeScalarView.index(roundingDown:)();
                  char v214 = v213;
                  unint64_t v5 = v215;
                  uint64_t v217 = v216;
                  outlined release of Locale((uint64_t)v557);
                  uint64_t v218 = *(_OWORD *)(v459 + 32);
                  v581 = *v458;
                  v582 = v218;
                  v583 = *(_OWORD *)(v459 + 48);
                  BigString.unicodeScalars.getter();
                  char v219 = BigString.UnicodeScalarView.index(roundingUp:)();
                  unint64_t result = outlined release of Locale((uint64_t)v558);
                  *(void *)&v518 = v212;
                  *((void *)&v518 + 1) = v214;
                  *(void *)&v519 = v5;
                  *((void *)&v519 + 1) = v217;
                  uint64_t v66 = v212 >> 11;
                  __int16 v60 = v219 >> 11;
                  if (v219 >> 11 < v212 >> 11) {
                    goto LABEL_578;
                  }
                  unint64_t v5 = *(void *)(v459 + 64);
                  if (v5) {
                    __int128 v220 = *(void *)(v459 + 80);
                  }
                  else {
                    __int128 v220 = 0LL;
                  }
                  if (v220 < v66) {
                    goto LABEL_579;
                  }
                  id v221 = *(void *)(v459 + 72);
                  Swift::String v62 = *(void *)(v459 + 88);
                  if (!v5 || v66 >= *(void *)(v459 + 80) || !*(_WORD *)(v5 + 16))
                  {
                    swift_retain_n();
                    unint64_t v232 = swift_unknownObjectRetain_n();
                    uint64_t v233 = specialized Rope._endPath.getter(v232);
                    swift_unknownObjectRelease();
                    char v58 = 0LL;
                    unint64_t v63 = 0LL;
                    if (v5) {
                      goto LABEL_229;
                    }
                    swift_release();
                    char v234 = 0LL;
                    unint64_t v235 = v66;
                    goto LABEL_230;
                  }

                  v487 = *(void *)(v459 + 72);
                  v496 = v60;
                  unint64_t v65 = *(unsigned __int8 *)(v5 + 18);
                  if (*(_BYTE *)(v5 + 18))
                  {
                    swift_unknownObjectRetain_n();
                    unint64_t result = swift_retain_n();
                    unint64_t v63 = v212 >> 11;
                    unint64_t v222 = v5;
                    while (1)
                    {
                      char v224 = *(unsigned __int16 *)(v222 + 16);
                      if (!*(_WORD *)(v222 + 16)) {
                        goto LABEL_205;
                      }
                      char v225 = *(void *)(v222 + 40);
                      char v226 = v63 - v225;
                      if (__OFSUB__(v63, v225)) {
                        goto LABEL_552;
                      }
                      if (__OFADD__(v226, 1LL)) {
                        goto LABEL_553;
                      }
                      if (v226 + 1 <= 0)
                      {
                        char v224 = 0LL;
                        goto LABEL_206;
                      }

                      if ((_DWORD)v224 == 1)
                      {
                        v63 -= v225;
                        goto LABEL_205;
                      }

                      uint64_t v227 = *(void *)(v222 + 64);
                      uint64_t v71 = __OFSUB__(v226, v227);
                      unint64_t v228 = v226 - v227;
                      if (v71) {
                        goto LABEL_574;
                      }
                      if (__OFADD__(v228, 1LL)) {
                        goto LABEL_575;
                      }
                      if (v228 + 1 < 1)
                      {
                        char v224 = 1LL;
                        unint64_t v63 = v226;
                        goto LABEL_206;
                      }

                      if ((_DWORD)v224 == 2)
                      {
                        unint64_t v63 = v228;
LABEL_205:
                        if (!v63) {
                          goto LABEL_206;
                        }
                        __break(1u);
LABEL_552:
                        __break(1u);
LABEL_553:
                        __break(1u);
                        goto LABEL_554;
                      }

                      unint64_t v229 = (void *)(v222 + 88);
                      uint64_t v230 = 2LL;
                      while (1)
                      {
                        if (v224 == v230)
                        {
                          __break(1u);
LABEL_542:
                          __break(1u);
LABEL_543:
                          __break(1u);
LABEL_544:
                          __break(1u);
                          goto LABEL_545;
                        }

                        unint64_t v63 = v228 - *v229;
                        if (__OFSUB__(v228, *v229)) {
                          goto LABEL_542;
                        }
                        if (__OFADD__(v63, 1LL)) {
                          goto LABEL_543;
                        }
                        if (v63 + 1 < 1) {
                          break;
                        }
                        ++v230;
                        v229 += 3;
                        unint64_t v228 = v63;
                        if (v224 == v230) {
                          goto LABEL_205;
                        }
                      }

                      char v224 = v230;
                      unint64_t v63 = v228;
LABEL_206:
                      id v223 = (4 * *(_BYTE *)(v222 + 18) + 8) & 0x3C;
                      unint64_t v65 = ((-15LL << v223) - 1) & v65 | (v224 << v223);
                      char v58 = *(void *)(v222 + 24 + 24 * v224);
                      swift_unknownObjectRetain();
                      unint64_t result = swift_unknownObjectRelease();
                      unint64_t v222 = v58;
                      if (!*(_BYTE *)(v58 + 18)) {
                        goto LABEL_316;
                      }
                    }
                  }

                  swift_unknownObjectRetain_n();
                  unint64_t result = swift_retain_n();
                  unint64_t v63 = v212 >> 11;
                  char v58 = v5;
LABEL_316:
                  __int128 v331 = *(unsigned __int16 *)(v58 + 16);
                  if (*(_WORD *)(v58 + 16))
                  {
                    __int128 v332 = *(void *)(v58 + 24);
                    __int128 v333 = v63 - v332;
                    uint64_t v61 = v459;
                    if (__OFSUB__(v63, v332)) {
                      goto LABEL_594;
                    }
                    if (__OFADD__(v333, 1LL)) {
                      goto LABEL_595;
                    }
                    if (v333 + 1 <= 0) {
                      goto LABEL_342;
                    }
                    if ((_DWORD)v331 == 1)
                    {
                      v63 -= v332;
                    }

                    else
                    {
                      __int128 v349 = *(void *)(v58 + 48);
                      uint64_t v71 = __OFSUB__(v333, v349);
                      __int128 v350 = v333 - v349;
                      if (v71) {
                        goto LABEL_600;
                      }
                      if (__OFADD__(v350, 1LL)) {
                        goto LABEL_601;
                      }
                      if (v350 + 1 < 1)
                      {
                        __int128 v331 = 1LL;
                        unint64_t v63 = v333;
                        goto LABEL_519;
                      }

                      if ((_DWORD)v331 != 2)
                      {
                        v402 = (void *)(v58 + 72);
                        v403 = 2LL;
                        while (1)
                        {
                          if (v331 == v403) {
                            goto LABEL_588;
                          }
                          unint64_t v63 = v350 - *v402;
                          if (__OFSUB__(v350, *v402)) {
                            goto LABEL_589;
                          }
                          if (__OFADD__(v63, 1LL)) {
                            goto LABEL_590;
                          }
                          if (v63 + 1 < 1) {
                            break;
                          }
                          ++v403;
                          v402 += 3;
                          __int128 v350 = v63;
                          if (v331 == v403) {
                            goto LABEL_323;
                          }
                        }

                        __int128 v331 = v403;
                        unint64_t v63 = v350;
                        goto LABEL_519;
                      }

                      unint64_t v63 = v350;
                    }
                  }

                  else
                  {
                    uint64_t v61 = v459;
                  }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v27 = v49 & 0xFFFFFFFFFFFFF0FFLL | (v62 << 8);
    unint64_t v42 = v161;
    unint64_t v43 = v40;
    int v45 = v145;
    goto LABEL_70;
  }

LABEL_318:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v148 = v152 | ~(_BYTE)v153;
          char v35 = 1;
LABEL_290:
          unint64_t result = v154;
          if ((v148 & 1) != 0) {
            goto LABEL_292;
          }
          goto LABEL_291;
        }

        uint64_t v92 = v90;
        unint64_t v93 = v91;
        swift_bridgeObjectRelease();
        unint64_t v16 = v93;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t v192 = 15LL;
        uint64_t v172 = v89;
        uint64_t v94 = String.index(after:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v192 = v94;
        if (v173)
        {
          unint64_t v38 = v157;
          unint64_t v51 = v174;
          unint64_t v57 = v63;
          uint64_t v56 = v172;
LABEL_123:
          uint64_t v95 = HIBYTE(v57) & 0xF;
          if ((v57 & 0x2000000000000000LL) == 0) {
            uint64_t v95 = v56 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v96 = 4 * v95;
          if (4 * v95 != v192 >> 14)
          {
            uint64_t v98 = HIBYTE(v38) & 0xF;
            if ((v38 & 0x2000000000000000LL) == 0) {
              uint64_t v98 = v176 & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v180 = 4 * v98;
            unint64_t v175 = v57;
            while (v180 != v51 >> 14)
            {
              uint64_t v100 = v56;
              uint64_t v101 = String.subscript.getter();
              uint64_t v103 = v102;
              if (v101 == String.subscript.getter() && v103 == v104)
              {
                swift_bridgeObjectRelease_n();
              }

              else
              {
                char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v99 & 1) == 0)
                {
                  if (v167 == v168)
                  {
                    uint64_t v37 = v100;
                    uint64_t v15 = v159;
                    if ((v55 & 1) != 0) {
                      goto LABEL_243;
                    }
                    char v142 = 0;
                    unint64_t v143 = v154;
                    goto LABEL_231;
                  }

                  uint64_t v15 = v159;
                  if (v156 == v154 >> 14) {
                    goto LABEL_299;
                  }
                  goto LABEL_237;
                }
              }

              unint64_t v57 = v175;
              unint64_t v192 = String.index(after:)();
              unint64_t v51 = String.index(after:)();
              uint64_t v56 = v100;
              if (v96 == v192 >> 14) {
                break;
              }
            }
          }

          char v58 = 1;
          uint64_t v15 = v159;
          if ((v57 & 0x2000000000000000LL) != 0) {
            goto LABEL_70;
          }
          goto LABEL_127;
        }

        uint64_t v47 = v92;
        unint64_t v38 = v157;
        unint64_t v57 = v63;
        uint64_t countAndFlagsBits = v180;
        unint64_t v64 = v181;
        if (v47 != v180) {
          goto LABEL_147;
        }
LABEL_146:
        if (v16 == v64) {
          goto LABEL_148;
        }
        goto LABEL_147;
      }

      continue;
    }

    break;
  }

  __break(1u);
LABEL_278:
  __break(1u);
LABEL_279:
  __break(1u);
LABEL_280:
  __break(1u);
LABEL_281:
  if ((v185 & 1) != 0)
  {
    unint64_t v154 = result;
    char v35 = 0;
    uint64_t v177 = 0xE000000000000000LL;
    goto LABEL_283;
  }

  char v35 = 0;
  if (v152 & 1 | ((v153 & 1) == 0))
  {
LABEL_292:
    if (v193[0] >> 14 < result >> 14) {
      __break(1u);
    }
    if ((v35 & 1) == 0) {
      return result;
    }
LABEL_296:
    unint64_t v149 = result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v149;
  }

LABEL_291:
  if (!((v193[0] ^ v170) >> 14)) {
    goto LABEL_292;
  }
  unint64_t result = 0LL;
  if ((v35 & 1) != 0) {
    goto LABEL_296;
  }
  return result;
}

                                  unint64_t result = swift_release();
                                  uint64_t v56 = v249;
                                  if ((v247 & 1) == 0)
                                  {
                                    unint64_t v154 = v254;
                                    goto LABEL_347;
                                  }

                                  if (!__OFSUB__(v243, v244))
                                  {
                                    unint64_t v145 = v281;
                                    uint64_t v146 = v282;
                                    swift_bridgeObjectRetain();
                                    swift_bridgeObjectRetain();
                                    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)( v244,  v243,  v243 - v244,  v145,  v146);
                                    swift_bridgeObjectRelease();
                                    unint64_t result = swift_bridgeObjectRelease();
                                    uint64_t v147 = v249[8];
                                    if (v147) {
                                      char v148 = v249[10];
                                    }
                                    else {
                                      char v148 = 0LL;
                                    }
                                    if ((v254 & 0x8000000000000000LL) == 0 && v148 >= v254)
                                    {
                                      unint64_t v149 = v249[9];
                                      uint64_t v150 = v249[11];
                                      if (!v147 || !*(_WORD *)(v147 + 16) || v254 >= v249[10])
                                      {
                                        uint64_t v183 = swift_unknownObjectRetain_n();
                                        uint64_t v184 = specialized Rope._endPath.getter(v183);
                                        swift_unknownObjectRelease();
                                        uint64_t v176 = 0LL;
                                        int v185 = 0LL;
                                        unint64_t v154 = v254;
                                        if (v147) {
                                          goto LABEL_330;
                                        }
                                        unint64_t v251 = 0LL;
LABEL_346:
                                        *(void *)&uint64_t v283 = v150;
                                        *((void *)&v283 + 1) = v184;
                                        unint64_t v284 = (void *)v176;
                                        goto LABEL_347;
                                      }

                                      __int128 v262 = v249[9];
                                      uint64_t v151 = *(unsigned __int8 *)(v147 + 18);
                                      if (*(_BYTE *)(v147 + 18))
                                      {
                                        unint64_t result = swift_unknownObjectRetain_n();
                                        int v152 = v254;
                                        int v153 = v147;
                                        while (1)
                                        {
                                          uint64_t v177 = *(unsigned __int16 *)(v153 + 16);
                                          if (*(_WORD *)(v153 + 16))
                                          {
                                            uint64_t v178 = *(void *)(v153 + 40);
                                            unint64_t v30 = __OFSUB__(v152, v178);
                                            uint64_t v179 = v152 - v178;
                                            if (v30) {
                                              goto LABEL_455;
                                            }
                                            if (__OFADD__(v179, 1LL))
                                            {
LABEL_456:
                                              __break(1u);
LABEL_457:
                                              __break(1u);
LABEL_458:
                                              __break(1u);
LABEL_459:
                                              __break(1u);
                                              goto LABEL_460;
                                            }

                                            if (v179 + 1 < 1)
                                            {
                                              uint64_t v177 = 0LL;
                                              goto LABEL_313;
                                            }

                                            if ((_DWORD)v177 != 1)
                                            {
                                              uint64_t v180 = (uint64_t *)(v153 + 64);
                                              unint64_t v181 = 1LL;
                                              while (1)
                                              {
                                                uint64_t v182 = *v180;
                                                v180 += 3;
                                                int v152 = v179 - v182;
                                                if (__OFSUB__(v179, v182)) {
                                                  break;
                                                }
                                                if (__OFADD__(v152, 1LL)) {
                                                  goto LABEL_431;
                                                }
                                                if (v152 + 1 < 1)
                                                {
                                                  uint64_t v177 = v181;
                                                  int v152 = v179;
                                                  goto LABEL_313;
                                                }

                                                ++v181;
                                                uint64_t v179 = v152;
                                                if (v177 == v181) {
                                                  goto LABEL_312;
                                                }
                                              }

                                              __break(1u);
LABEL_431:
                                              __break(1u);
LABEL_432:
                                              __break(1u);
LABEL_433:
                                              __break(1u);
                                              goto LABEL_434;
                                            }

                                            int v152 = v179;
                                          }

uint64_t specialized Rope.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t specialized Rope.distance<A>(from:to:in:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return specialized Rope.distance<A>(from:to:in:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  specialized Rope._UnsafeHandle.distance<A>(from:to:in:),  specialized Rope._Node.distance<A>(from:to:in:));
}

{
  return specialized Rope.distance<A>(from:to:in:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle.distance<A>(from:to:in:),  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._Node.distance<A>(from:to:in:));
}

uint64_t specialized Rope.distance<A>(from:to:in:)( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a12)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (result != a10 || a4 != a10)
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }

  if (a2 == a5) {
    return 0LL;
  }
  if (!a7) {
    goto LABEL_17;
  }
  uint64_t v19 = result;
  if (a3 && a6 && a3 == a6)
  {
    char v22 = (4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C;
    return a11((a2 >> v22) & 0xF, (a5 >> v22) & 0xF, a3 + 16, a3 + 24);
  }

  swift_unknownObjectRetain();
  if (a2 < a5)
  {
    uint64_t v20 = a12(v19, a2, a3, v19, a5, a6, a7, a8, a9);
    swift_unknownObjectRelease();
    return v20;
  }

  uint64_t v21 = a12(v19, a5, a6, v19, a2, a3, a7, a8, a9);
  swift_unknownObjectRelease();
  unint64_t result = -v21;
  if (__OFSUB__(0LL, v21)) {
    goto LABEL_18;
  }
  return result;
}

unint64_t specialized Rope.subscript.getter( unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result == a7)
  {
    if (a3)
    {
      unint64_t v8 = *(void *)(a3 + 24 * ((a2 >> ((4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      unint64_t v8 = specialized Rope._Node.subscript.getter(a2, a4);
      swift_unknownObjectRelease();
    }

    return v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized Rope.formIndex(after:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*a1 != a5)
  {
    __break(1u);
    goto LABEL_11;
  }

  unint64_t v8 = a1[1];
  swift_unknownObjectRetain();
  if (!a2)
  {
LABEL_11:
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_12;
  }

  int v9 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v10 = *(unsigned __int16 *)(a2 + 16);
  uint64_t result = swift_unknownObjectRelease();
  if (v8 >= (((-15LL << ((4 * v9 + 8) & 0x3C)) - 1) & v9 | (unint64_t)(v10 << ((4 * v9 + 8) & 0x3C))))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = a1[2];
  if (v12
    && (char v13 = (4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C, v14 = ((v8 >> v13) & 0xF) + 1,
                                                     v14 < *(unsigned __int16 *)(v12 + 16)))
  {
    a1[1] = (v14 << v13) | ((-15LL << v13) - 1) & v8;
  }

  else
  {
    swift_unknownObjectRetain();
    char v15 = specialized Rope._Node.formSuccessor(of:)((uint64_t)a1, a2);
    uint64_t result = swift_unknownObjectRelease();
    if ((v15 & 1) == 0)
    {
      unint64_t v16 = ((-15LL << ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(a2 + 18) | ((unint64_t)*(unsigned __int16 *)(a2 + 16) << ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C));
      *a1 = a5;
      a1[1] = v16;
      a1[2] = 0LL;
    }
  }

  return result;
}

unint64_t specialized Rope._Node.subscript.getter(unint64_t result, uint64_t a2)
{
  if (((result >> ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C)) & 0xF) >= *(unsigned __int16 *)(a2 + 16))
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2 + 24;
    if (*(_BYTE *)(a2 + 18))
    {
      unint64_t v3 = result;
      uint64_t v4 = (uint64_t *)(v2 + 24 * ((result >> ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v6 = *v4;
      uint64_t v5 = v4[1];
      uint64_t v7 = v4[2];
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v8 = specialized Rope._Node.subscript.getter(v3, v6, v5, v7);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }

    else
    {
      uint64_t v8 = *(void *)(v2 + 24 * ((result >> ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C)) & 0xF));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    return v8;
  }

  return result;
}

uint64_t specialized Rope._Node.distanceFromStart<A>(to:in:)( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4 + 16;
  unint64_t v5 = *(unsigned __int16 *)(a4 + 16);
  int v7 = *(unsigned __int8 *)(a4 + 18);
  unint64_t v8 = (a2 >> ((4 * v7 + 8) & 0x3C)) & 0xF;
  if (v8 > v5)
  {
    __break(1u);
  }

  else
  {
    if (v8 == v5)
    {
      if ((a2 & (~(-1LL << ((4 * v7) & 0x3C)) << 8)) == 0) {
        return a5;
      }
      __break(1u);
    }

    uint64_t v12 = result;
    uint64_t v13 = a4 + 24;
    swift_unknownObjectRetain();
    if (!v7)
    {
      uint64_t v20 = specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(v6, v13, v8);
      swift_unknownObjectRelease();
      return v20;
    }

    uint64_t v14 = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(0LL, v8, v6, v13);
    char v15 = (uint64_t *)(v13 + 24LL * v8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    swift_unknownObjectRetain();
    uint64_t v19 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, a2, a3, v16, v17, v18);
    uint64_t result = swift_unknownObjectRelease();
    a5 = v14 + v19;
    if (!__OFADD__(v14, v19))
    {
      swift_unknownObjectRelease();
      return a5;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.distanceFromStart<A>(to:in:)( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a4 + 16;
  unint64_t v6 = *(unsigned __int16 *)(a4 + 16);
  int v8 = *(unsigned __int8 *)(a4 + 18);
  unint64_t v9 = (a2 >> ((4 * v8 + 8) & 0x3C)) & 0xF;
  if (v9 > v6)
  {
    __break(1u);
  }

  else
  {
    if (v9 == v6)
    {
      if ((a2 & (~(-1LL << ((4 * v8) & 0x3C)) << 8)) == 0) {
        return a6;
      }
      __break(1u);
    }

    uint64_t v13 = result;
    uint64_t v14 = (uint64_t *)(a4 + 24);
    swift_unknownObjectRetain();
    if (!v8)
    {
      uint64_t v21 = specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(v7, v14, v9);
      swift_unknownObjectRelease();
      return v21;
    }

    uint64_t v15 = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(0LL, v9, v7, (uint64_t)v14);
    uint64_t v16 = &v14[3 * v9];
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    swift_unknownObjectRetain();
    uint64_t v20 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v13, a2, a3, v17, v18, v19);
    uint64_t result = swift_unknownObjectRelease();
    a6 = v15 + v20;
    if (!__OFADD__(v15, v20))
    {
      swift_unknownObjectRelease();
      return a6;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if ((a3 & 0x8000000000000000LL) == 0) {
    return v3;
  }
  MEMORY[0x1895F8858](a1);
  uint64_t result = specialized Sequence.reduce<A>(into:_:)( 0LL,  (void (*)(uint64_t *, void *))closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)specialized partial apply,  (uint64_t)&v7,  v4,  0LL,  v5);
  uint64_t v3 = -result;
  if (!__OFSUB__(0LL, result)) {
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v10 = specialized Sequence.reduce<A>(into:_:)( 0LL,  (void (*)(uint64_t *, void *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:),  (uint64_t)&v11,  v8,  0LL,  v9);
    BOOL v7 = __OFSUB__(0LL, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_9:
    }
      __break(1u);
  }

  else
  {
    uint64_t result = 0LL;
    if (a3)
    {
      while (1)
      {
        uint64_t v6 = *a2;
        a2 += 3;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }

      __break(1u);
      goto LABEL_9;
    }
  }

  return result;
}

uint64_t specialized Rope._UnsafeHandle.distance<A>(from:to:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1;
  uint64_t v5 = a2 - a1;
  if (a2 < a1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a1 - a2;
    uint64_t v8 = (uint64_t *)(a4 + 24 * a2 + 8);
    do
    {
      uint64_t v9 = *v8;
      uint64_t result = swift_unknownObjectRetain();
      BOOL v11 = __OFADD__(v6, v9);
      v6 += v9;
      if (v11)
      {
        __break(1u);
        goto LABEL_15;
      }

      v8 += 3;
      swift_unknownObjectRelease();
      --v7;
    }

    while (v7);
    uint64_t result = -v6;
    if (!__OFSUB__(0LL, v6)) {
      return result;
    }
    __break(1u);
  }

  if (v4 == a2) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v12 = (uint64_t *)(a4 + 24 * v4 + 8);
  while (1)
  {
    uint64_t v13 = *v12;
    v12 += 3;
    BOOL v11 = __OFADD__(result, v13);
    result += v13;
    if (v11) {
      break;
    }
    if (!--v5) {
      return result;
    }
  }

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v4 = a1;
  uint64_t v5 = a2 - a1;
  if (a2 < a1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a1 - a2;
    uint64_t v8 = (uint64_t *)(a4 + 24 * a2 + 16);
    do
    {
      uint64_t v9 = *v8;
      uint64_t result = swift_unknownObjectRetain();
      BOOL v11 = __OFADD__(v6, v9);
      v6 += v9;
      if (v11)
      {
        __break(1u);
        goto LABEL_15;
      }

      v8 += 3;
      swift_unknownObjectRelease();
      --v7;
    }

    while (v7);
    uint64_t result = -v6;
    if (!__OFSUB__(0LL, v6)) {
      return result;
    }
    __break(1u);
  }

  if (v4 == a2) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v12 = (uint64_t *)(a4 + 24 * v4 + 16);
  while (1)
  {
    uint64_t v13 = *v12;
    v12 += 3;
    BOOL v11 = __OFADD__(result, v13);
    result += v13;
    if (v11) {
      break;
    }
    if (!--v5) {
      return result;
    }
  }

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  uint64_t v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1895F8858](a1);
    BOOL v11 = specialized Sequence.reduce<A>(into:_:)( 0LL,  (void (*)(uint64_t *, void *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:),  (uint64_t)&v16,  v8,  v9,  v10);
    uint64_t v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    uint64_t v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 24 * v5);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 3;
      uint64_t v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(uint64_t result, uint64_t a2)
{
  if (result <= a2)
  {
    if (result == a2) {
      return 0LL;
    }
    uint64_t v9 = 0LL;
    while ((unint64_t)(~result + a2) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (result - a2 == --v9) {
        return -v9;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

  v10[10] = v2;
  v10[11] = v3;
  MEMORY[0x1895F8858](result);
  uint64_t v7 = specialized Sequence.reduce<A>(into:_:)( 0LL,  (void (*)(uint64_t *, void *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:),  (uint64_t)v10,  v4,  v5,  v6);
  BOOL v8 = __OFSUB__(0LL, v7);
  uint64_t result = -v7;
  if (v8) {
LABEL_11:
  }
    __break(1u);
  return result;
}

unint64_t specialized Rope._endPath.getter(unint64_t result)
{
  if (result) {
    return ((-15LL << ((4 * *(_BYTE *)(result + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(result + 18) | ((unint64_t)*(unsigned __int16 *)(result + 16) << ((4 * *(_BYTE *)(result + 18) + 8) & 0x3C));
  }
  return result;
}

uint64_t specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)( uint64_t result, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)result != a7) {
    goto LABEL_24;
  }
  uint64_t v9 = a4;
  uint64_t v11 = *a2;
  if (a4)
  {
    char v8 = a3;
    uint64_t v7 = result;
    if (v11 > 0)
    {
      uint64_t v12 = a7;
      uint64_t v13 = *(void *)(result + 16);
      if (!v13
        || (uint64_t result = specialized Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)( (unint64_t *)(result + 8),  a2,  a3 & 1,  (unsigned __int16 *)(v13 + 16)),  (result & 1) == 0))
      {
        if (*(_BYTE *)(v9 + 18))
        {
          swift_unknownObjectRetain();
          char v14 = specialized closure #2 in Rope._Node.seekForward<A>(from:by:in:preferEnd:)( v9 + 16,  v9 + 24,  v7,  v9,  a2,  v8 & 1);
          uint64_t result = swift_unknownObjectRelease();
          if ((v14 & 1) != 0) {
            return result;
          }
LABEL_18:
          if (!*a2)
          {
            unint64_t v17 = ((-15LL << ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v9 + 18) | ((unint64_t)*(unsigned __int16 *)(v9 + 16) << ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C));
            *(void *)uint64_t v7 = v12;
            *(void *)(v7 + 8) = v17;
            uint64_t v9 = 0LL;
            goto LABEL_20;
          }

uint64_t specialized Rope._Node.distance<A>(from:to:in:)( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = a7 + 16;
  unint64_t v9 = *(unsigned __int16 *)(a7 + 16);
  int v11 = *(unsigned __int8 *)(a7 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }

  else
  {
    uint64_t v18 = a3;
    uint64_t v20 = result;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1LL << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(result, a2, a3, a7, a8, a9);
      uint64_t v18 = a9 - v21;
      if (!__OFSUB__(a9, v21)) {
        return v18;
      }
      __break(1u);
LABEL_10:
      uint64_t v23 = a6;
      uint64_t v24 = a4;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v22 = specialized closure #2 in Rope._Node.distance<A>(from:to:in:)( v10,  a7 + 24,  v13,  v14,  v20,  a2,  v18,  v24,  a5,  v23);
      }
      else {
        uint64_t v22 = specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(v10, a7 + 24, v13, v14);
      }
      uint64_t v18 = v22;
      swift_unknownObjectRelease();
      return v18;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.distance<A>(from:to:in:)( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a7 + 16;
  unint64_t v8 = *(unsigned __int16 *)(a7 + 16);
  int v10 = *(unsigned __int8 *)(a7 + 18);
  char v11 = (4 * v10 + 8) & 0x3C;
  unint64_t v12 = (a2 >> v11) & 0xF;
  unint64_t v13 = (a5 >> v11) & 0xF;
  if (v12 >= v8 || v13 > v8)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = a3;
    uint64_t v19 = result;
    if (v13 != v8) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1LL << ((4 * v10) & 0x3C)) << 8)) == 0)
    {
      uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(result, a2, a3, a7, a8);
      uint64_t v17 = a8 - v21;
      if (!__OFSUB__(a8, v21)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v23 = a6;
      uint64_t v24 = a4;
      swift_unknownObjectRetain();
      if (v10) {
        uint64_t v22 = specialized closure #2 in Rope._Node.distance<A>(from:to:in:)( v9,  a7 + 24,  v12,  v13,  v19,  a2,  v17,  v24,  a5,  v23);
      }
      else {
        uint64_t v22 = specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(v9, a7 + 24, v12, v13);
      }
      uint64_t v17 = v22;
      swift_unknownObjectRelease();
      return v17;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized closure #2 in Rope._Node.distance<A>(from:to:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  BOOL v15 = (uint64_t *)(a2 + 24 * a3);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v15[2];
  swift_unknownObjectRetain();
  if (a3 == a4)
  {
    uint64_t v19 = specialized Rope._Node.distance<A>(from:to:in:)(a5, a6, a7, a8, a9, a10, v17, v16, v18);
    swift_unknownObjectRelease();
    return v19;
  }

  uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a5, a6, a7, v17, v16, v18);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v22 = __OFSUB__(v18, v21);
  uint64_t v23 = v18 - v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1LL))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(result, a4, a1, a2);
  uint64_t v24 = v23 + result;
  if (__OFADD__(v23, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  unint64_t v25 = (uint64_t *)(a2 + 24 * a4);
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  uint64_t v28 = v25[2];
  swift_unknownObjectRetain();
  uint64_t v29 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a8, a9, a10, v26, v27, v28);
  swift_unknownObjectRelease();
  uint64_t result = v24 + v29;
  if (__OFADD__(v24, v29)) {
LABEL_11:
  }
    __break(1u);
  return result;
}

{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v15 = (uint64_t *)(a2 + 24 * a3);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = v15[2];
  swift_unknownObjectRetain();
  if (a3 == a4)
  {
    uint64_t v19 = specialized Rope._Node.distance<A>(from:to:in:)(a5, a6, a7, a8, a9, a10, v16, v17, v18);
    swift_unknownObjectRelease();
    return v19;
  }

  uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a5, a6, a7, v16, v17);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v22 = __OFSUB__(v17, v21);
  uint64_t v23 = v17 - v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1LL))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(result, a4, a1, a2);
  uint64_t v24 = v23 + result;
  if (__OFADD__(v23, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  unint64_t v25 = (uint64_t *)(a2 + 24 * a4);
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  swift_unknownObjectRetain();
  uint64_t v28 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a8, a9, a10, v26, v27);
  swift_unknownObjectRelease();
  uint64_t result = v24 + v28;
  if (__OFADD__(v24, v28)) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distance<A>(from:to:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a4 - a3;
  BOOL v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = specialized Sequence.reduce<A>(into:_:)( 0LL,  (void (*)(uint64_t *, void *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:),  (uint64_t)&v16,  v8,  v9,  v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    unint64_t v14 = (uint64_t *)(v5 + 24 * v4);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 3;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized closure #1 in Rope._Node.distance<A>(from:to:in:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 <= a4)
  {
    if (a3 == a4) {
      return 0LL;
    }
    uint64_t v11 = 0LL;
    while ((unint64_t)(~a3 + a4) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (a3 - a4 == --v11) {
        return -v11;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

  v12[10] = v4;
  v12[11] = v5;
  MEMORY[0x1895F8858](result);
  uint64_t v9 = specialized Sequence.reduce<A>(into:_:)( 0LL,  (void (*)(uint64_t *, void *))closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)specialized partial apply,  (uint64_t)v12,  v6,  v7,  v8);
  BOOL v10 = __OFSUB__(0LL, v9);
  uint64_t result = -v9;
  if (v10) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t specialized Rope._Node.seekBackward<A>(from:by:in:preferEnd:)( uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1LL;
  }
  if (*(_BYTE *)(a4 + 18))
  {
    swift_unknownObjectRetain();
    char v9 = specialized closure #2 in Rope._Node.seekBackward<A>(from:by:in:preferEnd:)( a4 + 16,  a4 + 24,  a1,  a4,  a2,  a3 & 1);
    swift_unknownObjectRelease();
    return v9 & 1;
  }

  else
  {
    unint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = (v10 >> 8) & 0xF;
    if (v11)
    {
      uint64_t v12 = 1LL;
      if ((a3 & 1) == 0) {
        uint64_t v12 = 2LL;
      }
      unint64_t v13 = v11 + 1;
      uint64_t v14 = (v11 << 8) - 256;
      for (uint64_t i = *a2 - 1; i + 1 >= v12; --i)
      {
        *a2 = i;
        --v13;
        v14 -= 256LL;
        if (v13 < 2) {
          return 0LL;
        }
      }

      *(void *)(a1 + 8) = v14 | v10 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = -i;
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

uint64_t specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)( uint64_t result, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v7 = result;
  if (!*(_BYTE *)(a4 + 18))
  {
    unint64_t v23 = *(unsigned __int16 *)(a4 + 16);
    unint64_t v24 = *(void *)(result + 8);
    unint64_t v25 = (v24 >> 8) & 0xF;
    unint64_t v26 = v23 - v25;
    if (v23 > v25)
    {
      uint64_t v27 = *a2;
      unint64_t v28 = v25 << 8;
      do
      {
        if ((a3 & 1) != 0)
        {
          if (v27 <= 1)
          {
LABEL_18:
            *(void *)(result + 8) = v28 | v24 & 0xFFFFFFFFFFFFF0FFLL;
            *(void *)(result + 16) = a4;
            return 1LL;
          }
        }

        else if (v27 < 1)
        {
          goto LABEL_18;
        }

        *a2 = --v27;
        v28 += 256LL;
        --v26;
      }

      while (v26);
      unint64_t v25 = v23;
    }

    uint64_t v22 = 0LL;
    *(void *)(result + 8) = v24 & 0xFFFFFFFFFFFFF0FFLL | (v25 << 8);
    return v22;
  }

  unint64_t v8 = (*(void *)(result + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v9 = *(unsigned __int16 *)(a4 + 16);
  if (v8 >= v9)
  {
    __break(1u);
    goto LABEL_25;
  }

  unint64_t v10 = (uint64_t *)(a4 + 24 + 24 * ((*(void *)(result + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  LOBYTE(v12) = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v7, a2, a3 & 1, v11, v12, v13);
  swift_unknownObjectRelease();
  if ((v12 & 1) != 0) {
    goto LABEL_11;
  }
  unint64_t v14 = v8 + 1;
  if (v8 + 1 >= v9)
  {
LABEL_19:
    uint64_t v22 = 0LL;
LABEL_20:
    swift_unknownObjectRelease();
    return v22;
  }

  uint64_t v15 = *a2;
  uint64_t v16 = (uint64_t *)(a4 + 24LL * v8 + 64);
  while (1)
  {
    uint64_t v17 = *(v16 - 1);
    if ((a3 & 1) != 0) {
      break;
    }
    if (v15 < v17) {
      goto LABEL_10;
    }
LABEL_7:
    v15 -= v17;
    *a2 = v15;
    ++v14;
    v16 += 3;
    if (v9 == v14) {
      goto LABEL_19;
    }
  }

  if (v15 > v17) {
    goto LABEL_7;
  }
LABEL_10:
  *(void *)(v7 + 8) = (((-15LL << ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) - 1) & *(void *)(v7 + 8) | (v14 << ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(a4 + 18)) & 0x3C)) | 0xFF);
  uint64_t v18 = *(v16 - 2);
  uint64_t v19 = *(v16 - 1);
  uint64_t v20 = *v16;
  swift_unknownObjectRetain();
  char v21 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v7, a2, a3 & 1, v18, v19, v20);
  uint64_t result = swift_unknownObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_11:
    uint64_t v22 = 1LL;
    goto LABEL_20;
  }

unint64_t lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.CharacterView,  &type metadata for AttributedString.CharacterView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.CharacterView,  &type metadata for AttributedString.CharacterView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.CharacterView,  &type metadata for AttributedString.CharacterView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.CharacterView,  &type metadata for AttributedString.CharacterView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Regex<AnyRegexOutput> and conformance Regex<A>;
  if (!lazy protocol witness table cache variable for type Regex<AnyRegexOutput> and conformance Regex<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961CED0], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Regex<AnyRegexOutput> and conformance Regex<A>);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.AttributeMergePolicy,  &type metadata for AttributedString.AttributeMergePolicy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AttributedString.AttributeMergePolicy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_182F59DDC + 4 * byte_1837257F5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_182F59E10 + 4 * a0123456789abcd_0[v4 + 16]))();
}

uint64_t sub_182F59E10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F59E18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F59E20LL);
  }
  return result;
}

uint64_t sub_182F59E2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F59E34LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_182F59E38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F59E40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.AttributeMergePolicy()
{
  return &type metadata for AttributedString.AttributeMergePolicy;
}

uint64_t dispatch thunk of AttributedStringAttributeMutation.setAttributes(_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AttributedStringAttributeMutation.mergeAttributes(_:mergePolicy:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AttributedStringAttributeMutation.replaceAttributes(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of AttributedStringProtocol.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AttributedStringProtocol.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AttributedStringProtocol.runs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AttributedStringProtocol.characters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AttributedStringProtocol.unicodeScalars.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of AttributedStringProtocol.subscript.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

{
  return (*(uint64_t (**)(void))(a5 + 96))();
}

{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

{
  return (*(uint64_t (**)(void))(a5 + 144))();
}

uint64_t dispatch thunk of AttributedStringProtocol.subscript.setter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

{
  return (*(uint64_t (**)(void))(a6 + 104))();
}

{
  return (*(uint64_t (**)(void))(a6 + 128))();
}

uint64_t dispatch thunk of AttributedStringProtocol.subscript.modify( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

{
  return (*(uint64_t (**)(void))(a6 + 112))();
}

{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

void *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)( void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)( void *a1, void *a2)
{
  return partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(a1, a2);
}

uint64_t specialized Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)( unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4)
{
  unint64_t v4 = *a4;
  unint64_t v5 = *a1;
  unint64_t v6 = (*a1 >> 8) & 0xF;
  if (v6 >= v4)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v7 = *a2;
    do
    {
      if ((a3 & 1) != 0)
      {
        if (v7 < 2)
        {
LABEL_7:
          uint64_t v8 = 1LL;
          goto LABEL_10;
        }
      }

      else if (v7 < 1)
      {
        goto LABEL_7;
      }

      *a2 = --v7;
      ++v6;
    }

    while (v4 != v6);
    uint64_t v8 = 0LL;
    unint64_t v6 = v4;
  }

uint64_t specialized closure #2 in Rope._Node.seekForward<A>(from:by:in:preferEnd:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v6 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v11 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 24 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  swift_unknownObjectRetain();
  char v14 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v13);
  swift_unknownObjectRelease();
  if ((v14 & 1) != 0) {
    return 1LL;
  }
  unint64_t v15 = v6 + 1;
  if (v6 + 1 >= v12) {
    return 0LL;
  }
  uint64_t v16 = *a5;
  for (uint64_t i = a2 + 24LL * v6 + 40; ; i += 24LL)
  {
    uint64_t v18 = *(void *)(i - 8);
    if ((a6 & 1) != 0) {
      break;
    }
    if (v16 < v18) {
      goto LABEL_9;
    }
LABEL_6:
    v16 -= v18;
    *a5 = v16;
    if (v12 == ++v15) {
      return 0LL;
    }
  }

  if (v16 > v18) {
    goto LABEL_6;
  }
LABEL_9:
  *(void *)(a3 + 8) = (((-15LL << ((4 * *(_BYTE *)(v11 + 2) + 8) & 0x3C)) - 1) & *(void *)(a3 + 8) | (v15 << ((4 * *(_BYTE *)(v11 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v11 + 2)) & 0x3C)) | 0xFF);
  uint64_t v19 = *(void *)(i - 16);
  swift_unknownObjectRetain();
  char v20 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v19);
  unint64_t result = swift_unknownObjectRelease();
  if ((v20 & 1) != 0) {
    return 1LL;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:)( unint64_t *a1, void *a2, char a3)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (*a1 >> 8) & 0xF;
  if (v4)
  {
    uint64_t v5 = *a2 - 1LL;
    unint64_t v6 = v4 + 1;
    uint64_t v7 = (v4 << 8) - 256;
    do
    {
      uint64_t v8 = v5 + 1;
      if ((a3 & 1) != 0)
      {
        if (v8 <= 0)
        {
LABEL_7:
          *a1 = v7 | v3 & 0xFFFFFFFFFFFFF0FFLL;
          *a2 = -v5;
          return 1LL;
        }
      }

      else if (v8 < 2)
      {
        goto LABEL_7;
      }

      *a2 = v5--;
      --v6;
      v7 -= 256LL;
    }

    while (v6 >= 2);
  }

  return 0LL;
}

uint64_t specialized closure #2 in Rope._Node.seekBackward<A>(from:by:in:preferEnd:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v7 = *(unsigned __int16 *)(a4 + 16);
  if (v6 > v7) {
    goto LABEL_47;
  }
  uint64_t v12 = result;
  if (v6 < v7)
  {
    uint64_t v13 = *(void *)(a2 + 24 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
    swift_unknownObjectRetain();
    char v14 = specialized Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v13);
    unint64_t result = swift_unknownObjectRelease();
    if ((v14 & 1) != 0) {
      return 1LL;
    }
  }

  if (!v6) {
    return 0LL;
  }
  uint64_t v15 = *a5;
  unint64_t v16 = v6 + 1;
  for (uint64_t i = (void *)(a2 + 24LL * v6 - 24); ; i -= 3)
  {
    uint64_t v18 = i[1];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v15 < v18) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v19 = __OFSUB__(v15, v18);
    v15 -= v18;
    if (v19)
    {
      __break(1u);
      goto LABEL_46;
    }

    *a5 = v15;
    if (--v16 < 2) {
      return 0LL;
    }
  }

  if (v18 < v15) {
    goto LABEL_10;
  }
LABEL_13:
  *(void *)(a3 + 8) = (((-15LL << ((4 * *(_BYTE *)(v12 + 2) + 8) & 0x3C)) - 1) & *(void *)(a3 + 8) | ((v16 - 2) << ((4 * *(_BYTE *)(v12 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v12 + 2)) & 0x3C)) | 0xFF);
  uint64_t v20 = *a5;
  uint64_t v21 = v18 - *a5;
  if (__OFSUB__(v18, *a5)) {
    goto LABEL_48;
  }
  *a5 = v21;
  uint64_t v22 = *i;
  uint64_t v23 = *(unsigned __int8 *)(*i + 18LL);
  if (!v23)
  {
    unint64_t v34 = *(unsigned __int16 *)(v22 + 16);
    unint64_t v35 = (*(void *)(a3 + 8) >> 8) & 0xFLL;
    if (v35 >= v34)
    {
LABEL_42:
      __break(1u);
    }

    else
    {
      uint64_t v36 = 1LL;
      if ((a6 & 1) != 0) {
        uint64_t v36 = 2LL;
      }
      uint64_t v37 = v36 - 1;
      if (v21 < v36 - 1) {
        uint64_t v37 = v21;
      }
      unint64_t v38 = v18 - (v20 + v37);
      if (v38 >= ~v35 + v34) {
        unint64_t v38 = ~v35 + v34;
      }
      unint64_t v39 = v38 + 1;
      if (v39 >= 5)
      {
        uint64_t v41 = v39 & 3;
        if ((v39 & 3) == 0) {
          uint64_t v41 = 4LL;
        }
        unint64_t v42 = v39 - v41;
        v35 += v42;
        uint64_t v40 = v21 - v42;
        do
        {
          v21 -= 4LL;
          v42 -= 4LL;
        }

        while (v42);
        *a5 = v21;
      }

      else
      {
        uint64_t v40 = v21;
      }

      uint64_t v21 = v35 << 8;
      uint64_t v43 = v34 - v35;
      while (v40 >= v36)
      {
        *a5 = --v40;
        v21 += 256LL;
        if (!--v43) {
          goto LABEL_42;
        }
      }
    }

    *(void *)(a3 + 8) = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFF0FFLL | v21;
    *(void *)(a3 + 16) = v22;
    return 1LL;
  }

  unint64_t v24 = (*(void *)(a3 + 8) >> ((4 * v23 + 8) & 0x3C)) & 0xFLL;
  unint64_t v25 = *(unsigned __int16 *)(v22 + 16);
  if (v24 >= v25)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v26 = *(void *)(v22 + 24 + 24 * ((*(void *)(a3 + 8) >> ((4 * v23 + 8) & 0x3C)) & 0xFLL));
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  char v27 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v26);
  swift_unknownObjectRelease();
  if ((v27 & 1) != 0) {
    goto LABEL_24;
  }
  unint64_t v28 = v24 + 1;
  if (v24 + 1 >= v25)
  {
LABEL_46:
    unint64_t result = swift_unknownObjectRelease();
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  uint64_t v29 = *a5;
  uint64_t v30 = v22 + 24LL * v24 + 64;
  while (1)
  {
    uint64_t v31 = *(void *)(v30 - 8);
    if ((a6 & 1) != 0) {
      break;
    }
    if (v29 < v31) {
      goto LABEL_23;
    }
LABEL_20:
    v29 -= v31;
    *a5 = v29;
    ++v28;
    v30 += 24LL;
    if (v25 == v28) {
      goto LABEL_46;
    }
  }

  if (v29 > v31) {
    goto LABEL_20;
  }
LABEL_23:
  *(void *)(a3 + 8) = (((-15LL << ((4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C)) - 1) & *(void *)(a3 + 8) | (v28 << ((4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v22 + 18)) & 0x3C)) | 0xFF);
  uint64_t v32 = *(void *)(v30 - 16);
  swift_unknownObjectRetain();
  char v33 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v32);
  unint64_t result = swift_unknownObjectRelease();
  if ((v33 & 1) != 0)
  {
LABEL_24:
    swift_unknownObjectRelease();
    return 1LL;
  }

void *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)( void *result, void *a2)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result += *a2;
  }
  return result;
}

void *closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)specialized partial apply(void *a1)
{
  return partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(a1);
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (a1[4] != a2[4]) {
    return 0LL;
  }
  unint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }

  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2)
  {
    if (a1 != a2)
    {
      uint64_t v4 = a2 + 32;
      outlined init with copy of String.LocalizationValue.FormatArgument(a1 + 32, (uint64_t)v8);
      outlined init with copy of String.LocalizationValue.FormatArgument(v4, (uint64_t)v7);
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v8, (uint64_t)v5);
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v7, (uint64_t)&v6);
      __asm { BR              X9 }
    }
  }

  return 1LL;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    unint64_t v3 = 0LL;
    char v14 = a1;
    uint64_t v15 = a2;
    while (1)
    {
      unint64_t v28 = *(void *)(a1 + v3 + 48);
      BOOL v19 = *(void *)(a1 + v3 + 56);
      uint64_t v26 = *(void *)(a1 + v3 + 64);
      uint64_t v17 = *(void *)(a1 + v3 + 72);
      uint64_t v29 = *(void *)(a1 + v3 + 80);
      uint64_t v22 = *(_OWORD *)(a1 + v3 + 88);
      uint64_t v4 = *(void **)(a1 + v3 + 104);
      uint64_t v5 = *(void *)(a1 + v3 + 112);
      unint64_t v24 = *(void *)(a1 + v3 + 120);
      uint64_t v6 = *(void *)(a2 + v3 + 48);
      uint64_t v18 = *(void *)(a2 + v3 + 56);
      char v27 = *(void *)(a2 + v3 + 64);
      uint64_t v7 = *(void *)(a2 + v3 + 80);
      unint64_t v16 = *(void *)(a2 + v3 + 72);
      uint64_t v21 = *(_OWORD *)(a2 + v3 + 88);
      uint64_t v8 = *(void **)(a2 + v3 + 104);
      uint64_t v20 = *(void *)(a2 + v3 + 112);
      unint64_t v25 = *(void *)(a2 + v3 + 120);
      if ((*(void *)(a1 + v3 + 32) != *(void *)(a2 + v3 + 32)
         || *(void *)(a1 + v3 + 40) != *(void *)(a2 + v3 + 40))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        return 0LL;
      }

      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v9 = v4;
      unint64_t v10 = v5;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v11 = v8;
      swift_retain();
      swift_retain();
      if ((specialized static Array<A>.== infix(_:_:)(v28, v6) & 1) == 0) {
        break;
      }
      if (v19 == v18 && v26 == v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0) {
          goto LABEL_24;
        }
      }

      if (v29)
      {
        if (!v7 || (v17 != v16 || v29 != v7) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
LABEL_26:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0LL;
        }
      }

      else if (v7)
      {
        goto LABEL_24;
      }

      uint64_t v32 = v22;
      uint64_t v30 = v21;
      *(void *)&uint64_t v32 = v9;
      *((void *)&v32 + 1) = v10;
      char v33 = v24;
      *(void *)&uint64_t v30 = v11;
      *((void *)&v30 + 1) = v20;
      uint64_t v31 = v25;
      uint64_t v23 = specialized static URL.== infix(_:_:)((uint64_t)&v32, (uint64_t *)&v30);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0) {
        return 0LL;
      }
      v3 += 112LL;
      --v2;
      a1 = v14;
      a2 = v15;
      if (!v2) {
        return 1LL;
      }
    }

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }

  return 1LL;
}

{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  char v9;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    unint64_t v3 = (_BYTE *)(a1 + 40);
    uint64_t v4 = (_BYTE *)(a2 + 40);
    do
    {
      uint64_t v5 = *((void *)v3 - 1);
      uint64_t v6 = *((void *)v4 - 1);
      uint64_t v7 = (char)*v4;
      if ((char)*v3 < 0)
      {
        BOOL result = 0LL;
        if ((v7 & 0x80000000) == 0 || v5 != v6) {
          return result;
        }
        if (qword_183728FA0[*v3 & 0x7F] == qword_183728FA0[*v4 & 0x7F])
        {
LABEL_5:
          swift_bridgeObjectRelease_n();
          goto LABEL_6;
        }
      }

      else
      {
        if (v7 < 0) {
          return 0LL;
        }
      }

      uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v9 & 1) == 0) {
        return 0LL;
      }
LABEL_6:
      v3 += 16;
      v4 += 16;
      --v2;
    }

    while (v2);
  }

  return 1LL;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  unint64_t v3 = v2 - 1;
  uint64_t v4 = (unsigned __int8 *)(a1 + 40);
  uint64_t v5 = (unsigned __int8 *)(a2 + 40);
  do
  {
    uint64_t v6 = v3;
    uint64_t v7 = (*((void *)v4 - 1) != *((void *)v5 - 1)) | *v4 ^ *v5;
    if ((*((void *)v4 - 1) != *((void *)v5 - 1)) | (*v4 ^ *v5) & 1) {
      break;
    }
    --v3;
    v4 += 16;
    v5 += 16;
  }

  while (v6);
  return (v7 ^ 1) & 1;
}

{
  uint64_t v2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2)
  {
    if (a1 != a2) {
      __asm { BR              X8 }
    }
  }

  return 1LL;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  _BYTE v85[224];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void v116[28];
  v116[26] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1LL;
    }
    unint64_t v3 = v2 - 1;
    uint64_t v4 = (uint64_t *)(a1 + 64);
    uint64_t v5 = (uint64_t *)(a2 + 64);
    while (1)
    {
      uint64_t v6 = *(v4 - 4);
      uint64_t v7 = *(v4 - 3);
      uint64_t v9 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      unint64_t v10 = *v4;
      uint64_t v11 = v4[1];
      uint64_t v13 = v4[2];
      uint64_t v12 = (void *)v4[3];
      char v14 = v4[4];
      uint64_t v15 = v4[5];
      unint64_t v16 = v4[6];
      uint64_t v17 = (void *)v4[7];
      uint64_t v18 = v4[8];
      BOOL v19 = *(v5 - 4);
      uint64_t v20 = *(v5 - 3);
      uint64_t v21 = *(v5 - 2);
      uint64_t v22 = *(v5 - 1);
      uint64_t v23 = *v5;
      unint64_t v24 = v5[1];
      unint64_t v25 = v5[2];
      uint64_t v26 = (void *)v5[3];
      char v27 = v5[4];
      unint64_t v28 = v5[5];
      uint64_t v29 = v5[6];
      uint64_t v30 = (void *)v5[7];
      uint64_t v31 = v5[8];
      v116[27] = v3;
      v116[0] = v6;
      v116[1] = v7;
      v116[2] = v9;
      int v109 = (void *)v8;
      v116[3] = v8;
      v116[4] = v10;
      v116[5] = v11;
      v116[6] = v13;
      v116[7] = v12;
      unint64_t v110 = v14;
      v116[8] = v14;
      v116[9] = v15;
      uint64_t v113 = v15;
      char v112 = v16;
      v116[10] = v16;
      v116[11] = v17;
      uint64_t v111 = v17;
      v116[12] = v18;
      v116[13] = v19;
      v116[14] = v20;
      v116[15] = v21;
      v116[16] = v22;
      v116[17] = v23;
      v116[18] = v24;
      v116[19] = v25;
      v116[20] = v26;
      v116[21] = v27;
      v116[22] = v28;
      v116[23] = v29;
      v116[24] = v30;
      v116[25] = v31;
      Swift::String v108 = v3;
      switch(v18)
      {
        case 0uLL:
          if (v31) {
            goto LABEL_59;
          }
          uint64_t v18 = 0LL;
          goto LABEL_27;
        case 1uLL:
          if (v31 != 1) {
            goto LABEL_59;
          }
          uint64_t v18 = 1LL;
          goto LABEL_27;
        case 2uLL:
          if (v31 != 2) {
            goto LABEL_59;
          }
          goto LABEL_26;
        case 3uLL:
          if (v31 != 3) {
            goto LABEL_59;
          }
LABEL_26:
          outlined copy of TermOfAddress._TermOfAddress( v19,  v20,  v21,  v22,  v23,  v24,  v25,  (uint64_t)v26,  v27,  v28,  v29,  (uint64_t)v30,  v18);
LABEL_27:
          outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
          outlined consume of TermOfAddress._TermOfAddress( v6,  v7,  v9,  (uint64_t)v109,  v10,  v11,  v13,  (uint64_t)v12,  v110,  v113,  v112,  (uint64_t)v111,  v18);
          goto LABEL_28;
        default:
          if (v31 < 4)
          {
LABEL_59:
            outlined copy of TermOfAddress._TermOfAddress( v19,  v20,  v21,  v22,  v23,  v24,  v25,  (uint64_t)v26,  v27,  v28,  v29,  (uint64_t)v30,  v31);
            outlined copy of TermOfAddress._TermOfAddress( v6,  v7,  v9,  (uint64_t)v109,  v10,  v11,  v13,  (uint64_t)v12,  v110,  v113,  v112,  (uint64_t)v111,  v18);
            outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
            return 0LL;
          }

          uint64_t v95 = v18;
          uint64_t v114 = 0LL;
          uint64_t v115 = 0xE000000000000000LL;
          uint64_t v103 = v24;
          char v99 = v20;
          unint64_t v93 = v10;
          uint64_t v92 = v7;
          unint64_t v91 = v6;
          uint64_t v96 = v26;
          uint64_t v104 = v25;
          uint64_t v102 = v23;
          uint64_t v101 = (void *)v22;
          uint64_t v100 = v21;
          uint64_t v98 = v19;
          uint64_t v97 = v27;
          unint64_t v107 = v28;
          char v106 = v29;
          unint64_t v105 = v30;
          uint64_t v90 = v31;
          uint64_t v94 = v9;
          if (v7)
          {
            uint64_t v32 = (uint64_t)v26;
            outlined copy of TermOfAddress._TermOfAddress( v19,  v20,  v21,  v22,  v23,  v24,  v25,  (uint64_t)v26,  v27,  v28,  v29,  (uint64_t)v30,  v31);
            outlined copy of TermOfAddress._TermOfAddress( v6,  v7,  v9,  (uint64_t)v109,  v10,  v11,  v13,  (uint64_t)v12,  v110,  v113,  v112,  (uint64_t)v111,  v95);
            outlined copy of TermOfAddress._TermOfAddress( v98,  v99,  v100,  (uint64_t)v101,  v102,  v103,  v104,  v32,  v97,  v107,  v106,  (uint64_t)v105,  v90);
            char v33 = v6;
            unint64_t v34 = v6;
            unint64_t v35 = v94;
            uint64_t v36 = v109;
            outlined copy of TermOfAddress._TermOfAddress( v34,  v7,  v94,  (uint64_t)v109,  v10,  v11,  v13,  (uint64_t)v12,  v110,  v113,  v112,  (uint64_t)v111,  v95);
            outlined copy of Locale.LanguageCode?(v33, v7);
            outlined copy of Locale.LanguageCode?(v10, v11);
            outlined copy of Locale.LanguageCode?(v110, v113);
            v37._uint64_t countAndFlagsBits = v35;
            v37._unint64_t object = v36;
            String.append(_:)(v37);
            if (!v11) {
              goto LABEL_12;
            }
LABEL_11:
            v38._uint64_t countAndFlagsBits = 45LL;
            v38._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v38);
            v39._uint64_t countAndFlagsBits = v13;
            v39._unint64_t object = v12;
            String.append(_:)(v39);
            goto LABEL_12;
          }

          unint64_t v52 = v25;
          unint64_t v53 = (uint64_t)v26;
          outlined copy of TermOfAddress._TermOfAddress( v19,  v20,  v21,  v22,  v23,  v24,  v25,  (uint64_t)v26,  v27,  v28,  v29,  (uint64_t)v30,  v31);
          outlined copy of TermOfAddress._TermOfAddress( v6,  0LL,  v9,  (uint64_t)v109,  v10,  v11,  v13,  (uint64_t)v12,  v110,  v113,  v112,  (uint64_t)v111,  v95);
          outlined copy of TermOfAddress._TermOfAddress( v98,  v99,  v100,  (uint64_t)v101,  v102,  v103,  v52,  v53,  v97,  v107,  v106,  (uint64_t)v105,  v90);
          outlined copy of TermOfAddress._TermOfAddress( v6,  0LL,  v9,  (uint64_t)v109,  v10,  v11,  v13,  (uint64_t)v12,  v110,  v113,  v112,  (uint64_t)v111,  v95);
          outlined copy of Locale.LanguageCode?(v6, 0LL);
          outlined copy of Locale.LanguageCode?(v10, v11);
          outlined copy of Locale.LanguageCode?(v110, v113);
          if (v11) {
            goto LABEL_11;
          }
LABEL_12:
          uint64_t v87 = v11;
          unint64_t v88 = v13;
          uint64_t v89 = (uint64_t)v12;
          if (v113)
          {
            v40._uint64_t countAndFlagsBits = 95LL;
            v40._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v40);
            v41._uint64_t countAndFlagsBits = v112;
            v41._unint64_t object = v111;
            String.append(_:)(v41);
          }

          MEMORY[0x1895F8858](v114);
          LODWORD(v114) = 0;
          int v86 = v42;
          unint64_t v44 = v43;
          String.utf8CString.getter();
          int v45 = uloc_addLikelySubtags();
          swift_release();
          if ((int)v114 <= 0 && v45 >= 1)
          {
            v85[v45] = 0;
            uint64_t v46 = MEMORY[0x186E1B634](v85);
            if (v47)
            {
              MEMORY[0x1895F8858](v46);
              LODWORD(v114) = 0;
              String.utf8CString.getter();
              unint64_t v48 = uloc_toLanguageTag();
              swift_release();
              if ((int)v114 > 0 || v48 <= 0)
              {
                swift_bridgeObjectRelease();
              }

              else
              {
                v85[v48] = 0;
                unint64_t v49 = MEMORY[0x186E1B634](v85);
                unint64_t v51 = v50;
                swift_bridgeObjectRelease();
                if (v51)
                {
                  swift_bridgeObjectRelease();
                  int v86 = v49;
                  unint64_t v44 = v51;
                }
              }
            }
          }

          unint64_t v54 = v87;
          outlined consume of Locale.LanguageCode?(v91, v92);
          outlined consume of Locale.LanguageCode?(v93, v54);
          outlined consume of Locale.LanguageCode?(v110, v113);
          uint64_t v114 = 0LL;
          uint64_t v115 = 0xE000000000000000LL;
          if (v99)
          {
            char v55 = v100;
            uint64_t v56 = v101;
            outlined copy of Locale.LanguageCode?(v98, v99);
            unint64_t v57 = v103;
            outlined copy of Locale.LanguageCode?(v102, v103);
            outlined copy of Locale.LanguageCode?(v97, v107);
            v58._uint64_t countAndFlagsBits = v55;
            v58._unint64_t object = v56;
            String.append(_:)(v58);
            if (!v57) {
              goto LABEL_37;
            }
LABEL_36:
            v59._uint64_t countAndFlagsBits = 45LL;
            v59._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v59);
            v60._uint64_t countAndFlagsBits = v104;
            v60._unint64_t object = v96;
            String.append(_:)(v60);
            goto LABEL_37;
          }

          outlined copy of Locale.LanguageCode?(v98, 0LL);
          unsigned int v78 = v103;
          outlined copy of Locale.LanguageCode?(v102, v103);
          outlined copy of Locale.LanguageCode?(v97, v107);
          if (v78) {
            goto LABEL_36;
          }
LABEL_37:
          if (v107)
          {
            v61._uint64_t countAndFlagsBits = 95LL;
            v61._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v61);
            v62._uint64_t countAndFlagsBits = v106;
            v62._unint64_t object = v105;
            String.append(_:)(v62);
          }

          MEMORY[0x1895F8858](v114);
          LODWORD(v114) = 0;
          unint64_t v64 = v63;
          uint64_t v66 = v65;
          String.utf8CString.getter();
          uint64_t v67 = uloc_addLikelySubtags();
          swift_release();
          if (v67 < 1) {
            goto LABEL_51;
          }
          v85[v67] = 0;
          unsigned int v68 = MEMORY[0x186E1B634](v85);
          if (!v69) {
            goto LABEL_51;
          }
          MEMORY[0x1895F8858](v68);
          LODWORD(v114) = 0;
          String.utf8CString.getter();
          uint64_t v70 = uloc_toLanguageTag();
          swift_release();
          if ((int)v114 > 0 || v70 <= 0)
          {
            swift_bridgeObjectRelease();
LABEL_51:
            unsigned int v74 = v89;
            unsigned int v76 = v88;
            uint64_t v77 = v87;
            uint64_t v75 = v86;
            goto LABEL_52;
          }

          v85[v70] = 0;
          uint64_t v71 = MEMORY[0x186E1B634](v85);
          uint64_t v73 = v72;
          swift_bridgeObjectRelease();
          unsigned int v74 = v89;
          uint64_t v75 = v86;
          if (v73)
          {
            swift_bridgeObjectRelease();
            unint64_t v64 = v71;
            uint64_t v66 = v73;
          }

          unsigned int v76 = v88;
          uint64_t v77 = v87;
LABEL_52:
          outlined consume of Locale.LanguageCode?(v98, v99);
          outlined consume of Locale.LanguageCode?(v102, v103);
          outlined consume of Locale.LanguageCode?(v97, v107);
          if (v75 == v64 && v44 == v66)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v79 = v74;
          }

          else
          {
            uint64_t v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v79 = v74;
            if ((v80 & 1) == 0)
            {
              outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
              outlined consume of TermOfAddress._TermOfAddress( v98,  v99,  v100,  (uint64_t)v101,  v102,  v103,  v104,  (uint64_t)v96,  v97,  v107,  v106,  (uint64_t)v105,  v90);
              outlined consume of TermOfAddress._TermOfAddress( v91,  v92,  v94,  (uint64_t)v109,  v93,  v77,  v76,  v74,  v110,  v113,  v112,  (uint64_t)v111,  v95);
              return 0LL;
            }
          }

          uint64_t v81 = v95;
          uint64_t v82 = v90;
          unsigned int v83 = specialized static Array<A>.== infix(_:_:)(v95, v90);
          outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
          outlined consume of TermOfAddress._TermOfAddress( v98,  v99,  v100,  (uint64_t)v101,  v102,  v103,  v104,  (uint64_t)v96,  v97,  v107,  v106,  (uint64_t)v105,  v82);
          outlined consume of TermOfAddress._TermOfAddress( v91,  v92,  v94,  (uint64_t)v109,  v93,  v77,  v76,  v79,  v110,  v113,  v112,  (uint64_t)v111,  v81);
          if ((v83 & 1) == 0) {
            return 0LL;
          }
LABEL_28:
          if (!v108) {
            return 1LL;
          }
          v4 += 13;
          v5 += 13;
          unint64_t v3 = v108 - 1;
          break;
      }
    }
  }

  return 0LL;
}

{
  uint8x8_t v2;
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  int8x16_t v17;
  uint64x2_t v18;
  int16x8_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  char v36;
  uint64_t v37;
  _BYTE v38[5];
  uint64_t v39;
  uint64_t v40;
  unsigned __int32 v41;
  char v42;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a2 + 16))
  {
    if (!v4 || a1 == a2) {
      return 1LL;
    }
    uint64_t v5 = 0LL;
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    while (1)
    {
      uint64_t v30 = v4;
      uint64_t v6 = *(_BYTE *)(a1 + v5 + 48);
      uint64_t v7 = *(_BYTE *)(a1 + v5 + 49);
      uint64_t v8 = *(_BYTE *)(a1 + v5 + 50);
      uint64_t v31 = *(void *)(a1 + v5 + 56);
      v2.i32[0] = *(_DWORD *)(a1 + v5 + 64);
      uint64_t v9 = *(_BYTE *)(a1 + v5 + 68);
      unint64_t v34 = *(void *)(a1 + v5 + 80);
      unint64_t v28 = *(unsigned __int8 *)(a1 + v5 + 92);
      uint64_t v29 = *(void *)(a1 + v5 + 72);
      char v27 = *(unsigned int *)(a1 + v5 + 88);
      unint64_t v10 = *(_BYTE *)(a2 + v5 + 48);
      uint64_t v11 = *(_BYTE *)(a2 + v5 + 49);
      uint64_t v12 = *(_BYTE *)(a2 + v5 + 50);
      uint64_t v32 = *(void *)(a2 + v5 + 56);
      v3.i32[0] = *(_DWORD *)(a2 + v5 + 64);
      uint64_t v13 = *(_BYTE *)(a2 + v5 + 68);
      char v33 = *(void *)(a2 + v5 + 80);
      unint64_t v25 = *(unsigned __int8 *)(a2 + v5 + 92);
      uint64_t v26 = *(void *)(a2 + v5 + 72);
      unint64_t v24 = *(unsigned int *)(a2 + v5 + 88);
      if (*(void *)(a1 + v5 + 32) != *(void *)(a2 + v5 + 32)
        || *(void *)(a1 + v5 + 40) != *(void *)(a2 + v5 + 40))
      {
        char v14 = v5;
        uint64_t v15 = *(_BYTE *)(a2 + v5 + 49);
        unint64_t v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v11 = v15;
        uint64_t v5 = v14;
        if ((v16 & 1) == 0) {
          break;
        }
      }

      LOBYTE(v39) = v6;
      BYTE1(v39) = v7;
      BYTE2(v39) = v8;
      uint64_t v40 = v31;
      uint64_t v41 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      unint64_t v42 = v9;
      LOBYTE(v35) = v10;
      HIBYTE(v35) = v11;
      uint64_t v36 = v12;
      uint64_t v37 = v32;
      *(_DWORD *)unint64_t v38 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      v38[4] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v34)
      {
        unint64_t v39 = v29;
        uint64_t v40 = v34;
        uint64_t v41 = v27;
        unint64_t v42 = (v27 | (unint64_t)(v28 << 32)) >> 32;
        if (!v33)
        {
          swift_bridgeObjectRetain();
LABEL_19:
          swift_bridgeObjectRelease();
LABEL_20:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0LL;
        }

        v17.i64[0] = 0xFFFFFFFFFFLL;
        v17.i64[1] = 0xFFFFFFFFFFLL;
        uint64_t v18 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v24 | (unint64_t)(v25 << 32)), v17);
        BOOL v19 = (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_183728FF0),  (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_183728FE0));
        *(int16x4_t *)v19.i8 = vmovn_s32((int32x4_t)v19);
        unint64_t v35 = v26;
        uint64_t v36 = BYTE2(v26);
        uint64_t v37 = v33;
        v38[0] = v24;
        *(_DWORD *)&v38[1] = vmovn_s16(v19).u32[0];
        swift_bridgeObjectRetain_n();
        uint64_t v20 = specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v39, (unsigned __int8 *)&v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0) {
          return 0LL;
        }
      }

      else
      {
        if (v33) {
          goto LABEL_19;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      v5 += 64LL;
      uint64_t v4 = v30 - 1;
      a1 = v22;
      a2 = v23;
      if (v30 == 1) {
        return 1LL;
      }
    }
  }

  return 0LL;
}

{
  uint64_t v2;
  void *v3;
  void *i;
  BOOL v5;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    unint64_t v3 = (void *)(a2 + 56);
    for (uint64_t i = (void *)(a1 + 56); ; i += 4)
    {
      uint64_t v5 = *(i - 1) == *(v3 - 1) && *i == *v3;
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v3 += 4;
      if (!--v2) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return 1LL;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0LL, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1LL;
    }
    uint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

_OWORD *String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  return String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  a2,  a3,  a4,  a5,  a6,  (void (*)(char *, char *, uint64_t))&unk_189C70518,  (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:),  a7,  (uint64_t)&unk_189C70540,  (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
}

uint64_t closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __int128 v15 = *a1;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a6 + 56))(&v15, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48))(a3, a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
  return String.init<A>(_:)();
}

_OWORD *String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  return String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  a2,  a3,  a4,  a5,  a6,  (void (*)(char *, char *, uint64_t))&unk_189C704C8,  (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:),  a7,  (uint64_t)&unk_189C704F0,  (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
}

_OWORD *String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(char *, char *, uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v43 = a9;
  uint64_t v44 = a8;
  uint64_t v41 = a7;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v49 = a2;
  uint64_t v38 = a1;
  uint64_t v45 = a10;
  uint64_t v46 = a11;
  uint64_t v14 = *(void *)(a3 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  MEMORY[0x1895F8858](v16);
  uint64_t v21 = (char *)v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = *(void (**)(char *))(v19 + 16);
  v40(v21);
  unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v39(v17, a1, a3);
  unint64_t v22 = (*(unsigned __int8 *)(v19 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v23 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v42 = v14;
  unint64_t v24 = (v20 + v23 + v22) & ~v23;
  v37[1] = v24 + v15;
  unint64_t v25 = (char *)swift_allocObject();
  *((void *)v25 + 2) = a3;
  *((void *)v25 + 3) = a4;
  uint64_t v26 = v48;
  *((void *)v25 + 4) = v47;
  *((void *)v25 + 5) = v26;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v41(&v25[v22], v21, a4);
  v37[0] = *(void *)(v14 + 32);
  ((void (*)(char *, char *, uint64_t))v37[0])(&v25[v24], v17, a3);
  char v27 = v43;
  *uint64_t v43 = v44;
  v27[1] = v25;
  ((void (*)(char *, uint64_t, uint64_t))v40)(v21, v49, a4);
  uint64_t v29 = v38;
  unint64_t v28 = (void (*)(uint64_t *, uint64_t, uint64_t))v39;
  v39(v17, v38, a3);
  uint64_t v30 = (char *)swift_allocObject();
  *((void *)v30 + 2) = a3;
  *((void *)v30 + 3) = a4;
  uint64_t v31 = v48;
  *((void *)v30 + 4) = v47;
  *((void *)v30 + 5) = v31;
  uint64_t v32 = v21;
  char v33 = (void (*)(uint64_t *, uint64_t, uint64_t))v41;
  v41(&v30[v22], v32, a4);
  ((void (*)(char *, char *, uint64_t))v37[0])(&v30[v24], v17, a3);
  v27[2] = v46;
  v27[3] = v30;
  v27[7] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27 + 4);
  v28(boxed_opaque_existential_1, v29, a3);
  uint64_t v51 = a4;
  unint64_t v35 = __swift_allocate_boxed_opaque_existential_1(v50);
  v33(v35, v49, a4);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v29, a3);
  return outlined init with take of Any(v50, (_OWORD *)v27 + 4);
}

uint64_t closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  uint64_t v19 = a5;
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = (ValueMetadata *)swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v18 - v15;
  __int128 v20 = *a1;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a4 + 56))(&v20, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 48))(a2, a3, a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a3);
  return AttributedString.init<A>(_:)((uint64_t)v16, AssociatedTypeWitness, v19, a6);
}

uint64_t closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Any(a1 + 64, (uint64_t)v29);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  char v16 = swift_dynamicCast();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if ((v16 & 1) != 0)
  {
    v17(v12, 0LL, 1LL, a5);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, a5);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a5);
    char v19 = 0;
    if ((v18 & 1) == 0) {
      return v19 & 1;
    }
  }

  else
  {
    v17(v12, 1LL, 1LL, a5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }

  v29[3] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))( boxed_opaque_existential_1,  v27,  a4);
  uint64_t v21 = (void *)(a1 + 32);
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v23 = __swift_project_boxed_opaque_existential_1(v21, v22);
  v28[3] = v22;
  unint64_t v24 = __swift_allocate_boxed_opaque_existential_1(v28);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v24, v23, v22);
  char v19 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( (uint64_t)v29,  (uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return v19 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(a2) & 1;
}

uint64_t openEquatable #1 <A>(_:) in static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v17[-v8];
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  outlined init with copy of Any(a2, (uint64_t)v17);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v9, 0LL, 1LL, a3);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v9, a3);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, a3);
  }

  else
  {
    v14(v9, 1LL, 1LL, a3);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t String.LocalizationValue.FormatArgument.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v9 = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v8);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16LL))( boxed_opaque_existential_1,  v5,  v4);
  char v10 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v8, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t outlined init with take of String.LocalizationValue.FormatArgument.Storage(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  __int128 v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  __int128 v5 = a1[4];
  __int128 v6 = a1[5];
  __int128 v7 = a1[6];
  *(_BYTE *)(a2 + 112) = *((_BYTE *)a1 + 112);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 64) = v5;
  return a2;
}

void *String.LocalizationValue.FormatArgument.init(_:_:)@<X0>( void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 112) = 1;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.init<A, B>(_:format:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v22 = a7;
  uint64_t v13 = *(void *)(a4 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](a1);
  char v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v14);
  __int128 v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v20, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, a4);
  String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( (uint64_t)v20,  (uint64_t)v16,  a3,  a4,  a5,  a6,  (void (*)(char *, char *, uint64_t))&unk_189C70518,  (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:),  v23,  (uint64_t)&unk_189C70540,  (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, a3);
  char v24 = 2;
  return outlined init with take of String.LocalizationValue.FormatArgument.Storage(v23, v22);
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  __int128 v23[7];
  char v24;
  uint64_t v22 = a7;
  uint64_t v13 = *(void *)(a4 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](a1);
  char v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v14);
  __int128 v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v20, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, a4);
  String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( (uint64_t)v20,  (uint64_t)v16,  a3,  a4,  a5,  a6,  (void (*)(char *, char *, uint64_t))&unk_189C704C8,  (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:),  v23,  (uint64_t)&unk_189C704F0,  (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, a3);
  char v24 = 3;
  return outlined init with take of String.LocalizationValue.FormatArgument.Storage(v23, v22);
}

__n128 String.LocalizationValue.FormatArgument.init(resource:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 72);
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = v4;
  __n128 result = *(__n128 *)(a1 + 80);
  __int128 v6 = *(_OWORD *)(a1 + 96);
  *(__n128 *)(a2 + 80) = result;
  *(_OWORD *)(a2 + 96) = v6;
  *(_BYTE *)(a2 + 112) = 4;
  return result;
}

__n128 String.LocalizationValue.FormatArgument.init(resourceList:format:)@<Q0>( unint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3 = *(_BYTE *)a2;
  unsigned __int8 v4 = *(_BYTE *)(a2 + 1);
  a3->n128_u64[0] = a1;
  a3->n128_u8[8] = v3;
  a3->n128_u8[9] = v4;
  __n128 result = *(__n128 *)(a2 + 8);
  a3[1] = result;
  a3[7].n128_u8[0] = 5;
  return result;
}

_BYTE *String.LocalizationValue.FormatArgument.init(placeholder:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  a2[112] = 6;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()@<X0>(void *a1@<X8>)
{
  if (v28 == 3)
  {
    __int128 v18 = v24;
    __int128 v19 = v25;
    __int128 v20 = v26;
    __int128 v21 = v27;
    __int128 v16 = v22;
    __int128 v17 = v23;
    uint64_t v7 = *((void *)&v25 + 1);
    __int128 v8 = __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v25 + 1));
    uint64_t v15 = v7;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))( boxed_opaque_existential_1,  v8,  v7);
    closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()((uint64_t)v14, a1);
    outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)&v16);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }

  if (v28 == 2)
  {
    __int128 v18 = v24;
    __int128 v19 = v25;
    __int128 v20 = v26;
    __int128 v21 = v27;
    __int128 v16 = v22;
    __int128 v17 = v23;
    uint64_t v10 = *((void *)&v25 + 1);
    uint64_t v11 = __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v25 + 1));
    uint64_t v15 = v10;
    uint64_t v12 = __swift_allocate_boxed_opaque_existential_1(v14);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v12, v11, v10);
    closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()((uint64_t)v14, a1);
    outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)&v16);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }

  if (v28)
  {
    uint64_t v13 = MEMORY[0x18961AFF8];
    *a1 = MEMORY[0x18961AFF0];
    a1[1] = v13;
    return outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)&v22);
  }

  else
  {
    outlined init with take of Any(&v22, &v16);
    uint64_t v3 = *((void *)&v17 + 1);
    unsigned __int8 v4 = __swift_project_boxed_opaque_existential_1(&v16, *((uint64_t *)&v17 + 1));
    uint64_t v15 = v3;
    __int128 v5 = __swift_allocate_boxed_opaque_existential_1(v14);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16LL))(v5, v4, v3);
    closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()((uint64_t)v14, a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  }

uint64_t closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  if (swift_dynamicCast())
  {
    uint64_t v4 = MEMORY[0x18961AFF0];
    uint64_t v5 = MEMORY[0x18961AFF8];
    unint64_t v6 = (int)v39;
LABEL_5:
    *a2 = v4;
    a2[1] = v5;
    unint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    __int128 v32 = v6;
    LODWORD(v33) = 0;
    BYTE4(v33) = 1;
    __int128 v36 = xmmword_183723F60;
LABEL_19:
    char v37 = 1;
    uint64_t v38 = 0LL;
    unint64_t v15 = 0x80000001839C9AE0LL;
    unint64_t v16 = 0xD00000000000002CLL;
    return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v32, v16, v15);
  }

  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
LABEL_4:
    uint64_t v4 = MEMORY[0x18961AFF0];
    uint64_t v5 = MEMORY[0x18961AFF8];
    unint64_t v6 = v39;
    goto LABEL_5;
  }

  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
    uint64_t v7 = MEMORY[0x18961AFF0];
    uint64_t v8 = MEMORY[0x18961AFF8];
    unint64_t v9 = v39;
LABEL_10:
    *a2 = v7;
    a2[1] = v8;
    unint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    __int128 v32 = v9;
    LODWORD(v33) = 0;
    BYTE4(v33) = 0;
LABEL_18:
    __int128 v36 = xmmword_183723F60;
    goto LABEL_19;
  }

  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
LABEL_9:
    uint64_t v7 = MEMORY[0x18961AFF0];
    uint64_t v8 = MEMORY[0x18961AFF8];
    unint64_t v9 = v39;
    goto LABEL_10;
  }

  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
    uint64_t v10 = MEMORY[0x18961AFF8];
    double v11 = *(float *)&v39;
    *a2 = MEMORY[0x18961AFF0];
    a2[1] = v10;
    unint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    *(double *)&__int128 v32 = v11;
LABEL_16:
    *((void *)&v32 + 1) = 0LL;
    LODWORD(v33) = 0;
    char v14 = 2;
LABEL_17:
    BYTE4(v33) = v14;
    goto LABEL_18;
  }

  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0
    || (outlined init with copy of Any(a1, (uint64_t)&v32), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v12 = MEMORY[0x18961AFF8];
    uint64_t v13 = v39;
    *a2 = MEMORY[0x18961AFF0];
    a2[1] = v12;
    unint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    *(void *)&__int128 v32 = v13;
    goto LABEL_16;
  }

  outlined init with copy of Any(a1, (uint64_t)&v32);
  type metadata accessor for NSDecimal(0LL);
  if ((swift_dynamicCast() & 1) != 0)
  {
    int v18 = v40;
    uint64_t v19 = MEMORY[0x18961AFF8];
    __int128 v20 = v39;
    *a2 = MEMORY[0x18961AFF0];
    a2[1] = v19;
    unint64_t v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    unint64_t v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    __int128 v32 = v20;
    LODWORD(v33) = v18;
    char v14 = 3;
    goto LABEL_17;
  }

  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0) {
    goto LABEL_4;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
    uint64_t v21 = v39;
    uint64_t v22 = MEMORY[0x18961AFF8];
    *a2 = MEMORY[0x18961AFF0];
    a2[1] = v22;
    unint64_t v34 = &type metadata for Date;
    unint64_t v35 = lazy protocol witness table accessor for type Date and conformance Date();
    *(void *)&__int128 v32 = v21;
    __int128 v36 = xmmword_183723F60;
    char v37 = 1;
    uint64_t v38 = 0LL;
    unint64_t v16 = 0xD000000000000029LL;
    __int128 v23 = "Foundation.LocalizedDateArgumentAttribute";
LABEL_31:
    unint64_t v15 = (unint64_t)(v23 - 32) | 0x8000000000000000LL;
    return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v32, v16, v15);
  }

  outlined init with copy of Any(a1, (uint64_t)&v32);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __int128 v25 = v39;
    uint64_t v26 = MEMORY[0x18961AFF8];
    *a2 = MEMORY[0x18961AFF0];
    a2[1] = v26;
    unint64_t v34 = (ValueMetadata *)v24;
    unint64_t v35 = lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( (unint64_t *)&lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>,  &demangling cache variable for type metadata for Range<Date>,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date and conformance Date,  MEMORY[0x189618A38]);
    __int128 v32 = v25;
    __int128 v36 = xmmword_183723F60;
    char v37 = 1;
    uint64_t v38 = 0LL;
    unint64_t v16 = 0xD000000000000031LL;
    __int128 v23 = "Foundation.LocalizedDateIntervalArgumentAttribute";
    goto LABEL_31;
  }

  outlined init with copy of Any(a1, (uint64_t)&v32);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    __int128 v31 = v39;
    uint64_t v27 = v40;
    uint64_t v28 = MEMORY[0x18961AFF8];
    *a2 = MEMORY[0x18961AFF0];
    a2[1] = v28;
    unint64_t v34 = &type metadata for URL;
    unint64_t v29 = lazy protocol witness table accessor for type URL and conformance URL();
    __int128 v32 = v31;
    unint64_t v35 = v29;
    uint64_t v33 = v27;
    __int128 v36 = xmmword_183723F60;
    char v37 = 1;
    uint64_t v38 = 0LL;
    unint64_t v16 = 0xD000000000000028LL;
    __int128 v23 = "Foundation.LocalizedURLArgumentAttribute";
    goto LABEL_31;
  }

  uint64_t v30 = MEMORY[0x18961AFF8];
  *a2 = MEMORY[0x18961AFF0];
  a2[1] = v30;
  return result;
}

void String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 24) = 0LL;
  *(_BYTE *)(v1 + 32) = -2;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v0, (uint64_t)v2);
  __asm { BR              X10 }

uint64_t sub_182F5FAEC()
{
  return swift_release();
}

void sub_182F6043C()
{
}

uint64_t getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 == 254)
  {
    if ((a2 & 1) != 0)
    {
      String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()(v14);
      uint64_t v8 = v14[0];
      uint64_t v9 = v14[1];
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v14[0];
      *(void *)(a1 + 24) = v9;
      unsigned __int8 v12 = *(_BYTE *)(a1 + 32);
      *(_BYTE *)(a1 + 32) = 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup??(v10, v11, v12);
      *(void *)a3 = v8;
      *(void *)(a3 + 8) = v9;
      *(_BYTE *)(a3 + 16) = 1;
    }

    else
    {
      *(void *)(a1 + 16) = 0LL;
      *(void *)(a1 + 24) = 0LL;
      *(_BYTE *)(a1 + 32) = -1;
      *(void *)a3 = 0LL;
      *(void *)(a3 + 8) = 0LL;
      *(_BYTE *)(a3 + 16) = -1;
    }
  }

  else
  {
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = v5;
    *(_BYTE *)(a3 + 16) = v6;
  }

  return outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup??(v4, v5, v6);
}

void static String.LocalizationValue.FormatArgument.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

BOOL sub_182F60654()
{
  if (v15[232])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.Storage, String.LocalizationValue.FormatArgument.Storage));
    return 0LL;
  }

  outlined init with take of Any(v13, &v11);
  outlined init with take of Any(v0, &v9);
  uint64_t v2 = v12;
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(&v11, v12);
  v8[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16LL))( boxed_opaque_existential_1,  v3,  v2);
  uint64_t v5 = v10;
  int v6 = __swift_project_boxed_opaque_existential_1(&v9, v10);
  uint64_t v14[3] = v5;
  uint64_t v7 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v5 - 8) + 16LL))(v7, v6, v5);
  LOBYTE(outlined init with take of Any(&v6, v5) = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( (uint64_t)v8,  (uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v15);
  return (v5 & 1) != 0;
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.init(_:fallbackLocale:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  Swift::String v197 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?);
  MEMORY[0x1895F8858](v5);
  unint64_t v170 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  uint64_t v168 = *(void *)(v7 - 8);
  uint64_t v169 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v165 = (uint64_t)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
  MEMORY[0x1895F8858](v9);
  uint64_t v179 = (char *)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  uint64_t v177 = *(void *)(v11 - 8);
  uint64_t v178 = v11;
  MEMORY[0x1895F8858](v11);
  uint64_t v167 = (uint64_t)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle?);
  MEMORY[0x1895F8858](v13);
  uint64_t v189 = (char *)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  uint64_t v187 = *(void *)(v15 - 8);
  uint64_t v188 = v15;
  MEMORY[0x1895F8858](v15);
  uint64_t v175 = (uint64_t)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent?);
  MEMORY[0x1895F8858](v17);
  uint64_t v176 = (char *)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  uint64_t v173 = *(void *)(v19 - 8);
  uint64_t v174 = v19;
  MEMORY[0x1895F8858](v19);
  uint64_t v166 = (uint64_t)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency?);
  MEMORY[0x1895F8858](v21);
  int v186 = (char *)&v165 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  uint64_t v184 = *(void *)(v23 - 8);
  uint64_t v185 = v23;
  MEMORY[0x1895F8858](v23);
  uint64_t v172 = (uint64_t)&v165 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v25);
  *(void *)&__int128 v193 = (char *)&v165 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v190 = *(void *)(v192 - 8);
  MEMORY[0x1895F8858](v192);
  uint64_t v181 = (uint64_t)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent?);
  MEMORY[0x1895F8858](v28);
  uint64_t v183 = (char *)&v165 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  uint64_t v180 = *(void *)(v182 - 8);
  MEMORY[0x1895F8858](v182);
  uint64_t v171 = (uint64_t)&v165 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency?);
  MEMORY[0x1895F8858](v31);
  *(void *)&__int128 v191 = (char *)&v165 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  uint64_t v34 = *(void *)(v33 - 8);
  MEMORY[0x1895F8858](v33);
  __int128 v36 = (char *)&v165 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>?);
  MEMORY[0x1895F8858](v37);
  __int128 v39 = (char *)&v165 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x1895F8858](v40);
  uint64_t v43 = (char *)&v165 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v195 = *a2;
  *(void *)&__int128 v194 = a2[1];
  uint64_t v196 = a1;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)v226);
  switch(v230)
  {
    case 0:
      outlined init with take of Any(v226, v210);
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
      if ((swift_dynamicCast() & 1) != 0) {
        goto LABEL_3;
      }
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0) {
        goto LABEL_12;
      }
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
LABEL_3:
        swift_unknownObjectRelease();
        int v44 = v205[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        *Swift::String v197 = v44;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
        return swift_storeEnumTagMultiPayload();
      }

      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
LABEL_12:
        swift_unknownObjectRelease();
        uint64_t v61 = *(void *)&v205[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        *(void *)Swift::String v197 = v61;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
        return swift_storeEnumTagMultiPayload();
      }

      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_unknownObjectRelease();
        int v117 = v205[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        *Swift::String v197 = v117;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
        return swift_storeEnumTagMultiPayload();
      }

      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0) {
        goto LABEL_65;
      }
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0) {
        goto LABEL_65;
      }
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_unknownObjectRelease();
        __int128 v161 = v205[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        *(_OWORD *)Swift::String v197 = v161;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
        return swift_storeEnumTagMultiPayload();
      }

      else
      {
        outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
        if ((swift_dynamicCast() & 1) != 0)
        {
LABEL_65:
          swift_unknownObjectRelease();
          uint64_t v163 = *(void *)&v205[0];
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
          *(void *)Swift::String v197 = v163;
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
          return swift_storeEnumTagMultiPayload();
        }

        else
        {
          uint64_t v164 = v196;
          outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v196, (uint64_t)&v215);
          *(void *)&v205[0] = v195;
          *((void *)&v205[0] + 1) = v194;
          String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)((uint64_t)&v215);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v164);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        }
      }

    case 2:
      v224[0] = *(_OWORD *)v227;
      v224[1] = *(_OWORD *)&v227[16];
      v225[0] = *(_OWORD *)&v227[32];
      v225[1] = v228;
      v223[0] = *(_OWORD *)v226;
      v223[1] = *(_OWORD *)&v226[16];
      outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
      if ((swift_dynamicCast() & 1) != 0)
      {
        uint64_t v52 = *(void *)&v210[0];
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v222);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          __int128 v202 = v219;
          __int128 v203 = v220;
          v204[0] = v221[0];
          *(_OWORD *)((char *)v204 + 10) = *(_OWORD *)((char *)v221 + 10);
          __int128 v198 = v215;
          __int128 v199 = v216;
          __int128 v200 = v217;
          __int128 v201 = v218;
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          __int128 v207 = v202;
          __int128 v208 = v203;
          v209[0] = v204[0];
          *(_OWORD *)((char *)v209 + 10) = *(_OWORD *)((char *)v204 + 10);
          v205[0] = v198;
          v205[1] = v199;
          v205[2] = v200;
          __int128 v206 = v201;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v205);
          outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v205, v210);
          unint64_t v53 = v197;
          *(void *)Swift::String v197 = v52;
          __int128 v54 = v213;
          *(_OWORD *)(v53 + 18) = v212;
          *(_OWORD *)(v53 + 22) = v54;
          *(_OWORD *)(v53 + 26) = v214[0];
          *(_OWORD *)((char *)v53 + 114) = *(_OWORD *)((char *)v214 + 10);
          __int128 v55 = v210[1];
          *(_OWORD *)(v53 + 2) = v210[0];
          *(_OWORD *)(v53 + 6) = v55;
          __int128 v56 = v210[2];
          __int128 v57 = v211;
LABEL_38:
          *(_OWORD *)(v53 + 10) = v56;
          *(_OWORD *)(v53 + 14) = v57;
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
          return swift_storeEnumTagMultiPayload();
        }

        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v198);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          char v77 = v205[0];
          char v78 = BYTE1(v205[0]);
          char v79 = BYTE2(v205[0]);
          char v80 = BYTE3(v205[0]);
          char v81 = BYTE4(v205[0]);
          uint64_t v82 = *((void *)&v205[0] + 1);
          uint64_t v83 = *(void *)&v205[2];
          __int128 v195 = v205[1];
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          LOBYTE(v210[0]) = v77;
          BYTE1(v210[0]) = v78;
          BYTE2(v210[0]) = v79;
          BYTE3(v210[0]) = v80;
          BYTE4(v210[0]) = v81;
          *((void *)&v210[0] + 1) = v82;
          v210[1] = v195;
          *(void *)&v210[2] = v83;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi0_((uint64_t)v210);
LABEL_37:
          outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v210, &v215);
          unint64_t v53 = v197;
          *(void *)Swift::String v197 = v52;
          __int128 v115 = v220;
          *(_OWORD *)(v53 + 18) = v219;
          *(_OWORD *)(v53 + 22) = v115;
          *(_OWORD *)(v53 + 26) = v221[0];
          *(_OWORD *)((char *)v53 + 114) = *(_OWORD *)((char *)v221 + 10);
          __int128 v116 = v216;
          *(_OWORD *)(v53 + 2) = v215;
          *(_OWORD *)(v53 + 6) = v116;
          __int128 v56 = v217;
          __int128 v57 = v218;
          goto LABEL_38;
        }

        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v198);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          __int128 v92 = v206;
          __int128 v194 = v205[0];
          __int128 v195 = v205[2];
          __int128 v193 = v205[1];
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          v210[0] = v194;
          v210[1] = v193;
          v210[2] = v195;
          __int128 v211 = v92;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)v210);
          goto LABEL_37;
        }

        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v198);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          char v112 = v205[0];
          __int16 v113 = *(_WORD *)((char *)v205 + 1);
          uint64_t v114 = *((void *)&v205[2] + 1);
          __int128 v194 = *(__int128 *)((char *)&v205[1] + 8);
          __int128 v195 = *(__int128 *)((char *)v205 + 8);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          LOBYTE(v210[0]) = v112;
          *(_WORD *)((char *)v210 + 1) = v113;
          *(__int128 *)((char *)v210 + 8) = v195;
          *(__int128 *)((char *)&v210[1] + 8) = v194;
          *((void *)&v210[2] + 1) = v114;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi2_((uint64_t)v210);
          goto LABEL_37;
        }

        goto LABEL_62;
      }

      outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
      if ((swift_dynamicCast() & 1) != 0)
      {
        __int128 v62 = v210[0];
        outlined init with copy of Any((uint64_t)v225, (uint64_t)v210);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          char v63 = v218;
          uint64_t v64 = *((void *)&v218 + 1);
          uint64_t v65 = *((void *)&v219 + 1);
          char v66 = v220;
          char v67 = BYTE1(v220);
          LODWORD(v195) = WORD3(v220);
          *(void *)&__int128 v194 = *((void *)&v220 + 1);
          __int16 v68 = v221[0];
          __int128 v192 = v216;
          __int128 v193 = v215;
          __int128 v191 = v217;
          int v69 = v219;
          int v70 = *(_DWORD *)((char *)&v220 + 2);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          uint64_t v71 = v197;
          *(_OWORD *)Swift::String v197 = v62;
          __int128 v72 = v192;
          *((_OWORD *)v71 + 1) = v193;
          *((_OWORD *)v71 + 2) = v72;
          *((_OWORD *)v71 + 3) = v191;
          *((_BYTE *)v71 + 64) = v63;
          *((void *)v71 + 9) = v64;
          v71[20] = v69;
          *((void *)v71 + 11) = v65;
          *((_BYTE *)v71 + 96) = v66;
          *((_BYTE *)v71 + 97) = v67;
          *(_DWORD *)((char *)v71 + 98) = v70;
          *((_WORD *)v71 + 51) = v195;
          *((void *)v71 + 13) = v194;
          *((_WORD *)v71 + 56) = v68;
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
          return swift_storeEnumTagMultiPayload();
        }
      }

      outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
        *(void *)&__int128 v193 = *(void *)&v210[0];
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
        char v73 = swift_dynamicCast();
        unsigned int v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
        if ((v73 & 1) != 0)
        {
          v74(v39, 0LL, 1LL, v40);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          outlined init with take of LocalePreferences?( (uint64_t)v39,  (uint64_t)v43,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle));
          uint64_t v76 = (uint64_t)v197 + *(int *)(v75 + 48);
          *(void *)Swift::String v197 = v193;
          outlined init with take of LocalePreferences?( (uint64_t)v43,  v76,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
          type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
LABEL_56:
          swift_storeEnumTagMultiPayload();
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
          return swift_storeEnumTagMultiPayload();
        }

        uint64_t v93 = v193;
        v74(v39, 1LL, 1LL, v40);
        outlined destroy of Any?( (uint64_t)v39,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>?);
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
        uint64_t v94 = v191;
        char v95 = swift_dynamicCast();
        uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
        if ((v95 & 1) != 0)
        {
          v96(v94, 0LL, 1LL, v33);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          outlined init with take of LocalePreferences?( v94,  (uint64_t)v36,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
          uint64_t v98 = v197;
          *(void *)Swift::String v197 = v93;
          outlined init with take of LocalePreferences?( (uint64_t)v36,  (uint64_t)v98 + v97,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
          type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
          goto LABEL_56;
        }

        v96(v94, 1LL, 1LL, v33);
        outlined destroy of Any?( v94,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency?);
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
        uint64_t v125 = v182;
        uint64_t v126 = (uint64_t)v183;
        char v127 = swift_dynamicCast();
        int v128 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 56);
        if ((v127 & 1) != 0)
        {
          uint64_t v129 = v93;
          v128(v126, 0LL, 1LL, v125);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          uint64_t v130 = v171;
          outlined init with take of LocalePreferences?( v126,  v171,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          unint64_t v132 = v197;
          *(void *)Swift::String v197 = v129;
          outlined init with take of LocalePreferences?( v130,  (uint64_t)v132 + v131,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
          goto LABEL_56;
        }

        v128(v126, 1LL, 1LL, v125);
        uint64_t v147 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent?;
      }

      else
      {
        outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
        if ((swift_dynamicCast() & 1) != 0)
        {
          uint64_t v84 = *(void *)&v210[0];
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          uint64_t v85 = v193;
          uint64_t v86 = v192;
          char v87 = swift_dynamicCast();
          unint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v190 + 56);
          if ((v87 & 1) != 0)
          {
            v88(v85, 0LL, 1LL, v86);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            uint64_t v89 = v181;
            outlined init with take of LocalePreferences?( v85,  v181,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            unint64_t v91 = v197;
            *(void *)Swift::String v197 = v84;
            outlined init with take of LocalePreferences?( v89,  (uint64_t)v91 + v90,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
            goto LABEL_56;
          }

          v88(v85, 1LL, 1LL, v86);
          outlined destroy of Any?( v85,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          uint64_t v119 = v185;
          uint64_t v118 = (uint64_t)v186;
          char v120 = swift_dynamicCast();
          uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56);
          if ((v120 & 1) != 0)
          {
            v121(v118, 0LL, 1LL, v119);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            uint64_t v122 = v172;
            outlined init with take of LocalePreferences?( v118,  v172,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            uint64_t v124 = v197;
            *(void *)Swift::String v197 = v84;
            outlined init with take of LocalePreferences?( v122,  (uint64_t)v124 + v123,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
            goto LABEL_56;
          }

          v121(v118, 1LL, 1LL, v119);
          outlined destroy of Any?( v118,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency?);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          uint64_t v126 = (uint64_t)v176;
          uint64_t v141 = v174;
          char v142 = swift_dynamicCast();
          unint64_t v143 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56);
          if ((v142 & 1) != 0)
          {
            v143(v126, 0LL, 1LL, v141);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            uint64_t v144 = v166;
            outlined init with take of LocalePreferences?( v126,  v166,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
            uint64_t v146 = v197;
            *(void *)Swift::String v197 = v84;
            outlined init with take of LocalePreferences?( v144,  (uint64_t)v146 + v145,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
            type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
            goto LABEL_56;
          }

          v143(v126, 1LL, 1LL, v141);
          uint64_t v147 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent?;
        }

        else
        {
          outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
          type metadata accessor for NSDecimal(0LL);
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_62;
          }
          LODWORD(v190) = v210[0];
          int v99 = WORD2(v210[0]);
          LODWORD(v192) = WORD3(v210[0]);
          int v100 = WORD4(v210[0]);
          LODWORD(v193) = WORD5(v210[0]);
          int v101 = WORD6(v210[0]);
          int v102 = HIWORD(v210[0]);
          LODWORD(v191) = LOWORD(v210[1]);
          int v103 = WORD1(v210[1]);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          uint64_t v105 = v188;
          uint64_t v104 = (uint64_t)v189;
          char v106 = swift_dynamicCast();
          unint64_t v107 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v187 + 56);
          if ((v106 & 1) != 0)
          {
            v107(v104, 0LL, 1LL, v105);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            uint64_t v108 = v175;
            outlined init with take of ICUNumberFormatter.Signature( v104,  v175,  type metadata accessor for NSDecimal.FormatStyle);
            uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
            unint64_t v110 = v197;
            uint64_t v111 = (uint64_t)v197 + *(int *)(v109 + 48);
            *Swift::String v197 = v190;
            v110[2] = v99;
            v110[3] = v192;
            v110[4] = v100;
            v110[5] = v193;
            v110[6] = v101;
            v110[7] = v102;
            v110[8] = v191;
            v110[9] = v103;
            outlined init with take of ICUNumberFormatter.Signature( v108,  v111,  type metadata accessor for NSDecimal.FormatStyle);
            type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
            goto LABEL_56;
          }

          LODWORD(v183) = v99;
          LODWORD(v184) = v100;
          LODWORD(v185) = v101;
          LODWORD(v186) = v102;
          LODWORD(v187) = v103;
          v107(v104, 1LL, 1LL, v105);
          outlined destroy of Any?(v104, &demangling cache variable for type metadata for NSDecimal.FormatStyle?);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          uint64_t v134 = v178;
          uint64_t v133 = (uint64_t)v179;
          char v135 = swift_dynamicCast();
          unint64_t v136 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v177 + 56);
          if ((v135 & 1) != 0)
          {
            v136(v133, 0LL, 1LL, v134);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            uint64_t v137 = v167;
            outlined init with take of ICUNumberFormatter.Signature( v133,  v167,  type metadata accessor for NSDecimal.FormatStyle.Currency);
            uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
            char v139 = v197;
            uint64_t v140 = (uint64_t)v197 + *(int *)(v138 + 48);
            *Swift::String v197 = v190;
            v139[2] = (_WORD)v183;
            v139[3] = v192;
            v139[4] = v184;
            v139[5] = v193;
            v139[6] = v185;
            v139[7] = (_WORD)v186;
            v139[8] = v191;
            v139[9] = v187;
            outlined init with take of ICUNumberFormatter.Signature( v137,  v140,  type metadata accessor for NSDecimal.FormatStyle.Currency);
            type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
            goto LABEL_56;
          }

          v136(v133, 1LL, 1LL, v134);
          outlined destroy of Any?( v133,  &demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          uint64_t v148 = v169;
          uint64_t v126 = (uint64_t)v170;
          char v149 = swift_dynamicCast();
          uint64_t v150 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 56);
          __int16 v151 = v187;
          __int16 v152 = (__int16)v186;
          __int16 v153 = v185;
          __int16 v154 = v193;
          __int16 v155 = v184;
          __int16 v156 = v192;
          if ((v149 & 1) != 0)
          {
            v150(v126, 0LL, 1LL, v148);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            uint64_t v157 = v165;
            outlined init with take of ICUNumberFormatter.Signature( v126,  v165,  type metadata accessor for NSDecimal.FormatStyle.Percent);
            uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
            unint64_t v159 = v197;
            uint64_t v160 = (uint64_t)v197 + *(int *)(v158 + 48);
            *Swift::String v197 = v190;
            v159[2] = (_WORD)v183;
            v159[3] = v156;
            v159[4] = v155;
            v159[5] = v154;
            v159[6] = v153;
            v159[7] = v152;
            v159[8] = v191;
            v159[9] = v151;
            outlined init with take of ICUNumberFormatter.Signature( v157,  v160,  type metadata accessor for NSDecimal.FormatStyle.Percent);
            type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
            goto LABEL_56;
          }

          v150(v126, 1LL, 1LL, v148);
          uint64_t v147 = &demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?;
        }
      }

      outlined destroy of Any?(v126, v147);
LABEL_62:
      uint64_t v162 = v196;
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v196, (uint64_t)&v215);
      *(void *)&v210[0] = v195;
      *((void *)&v210[0] + 1) = v194;
      String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)((uint64_t)&v215);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v162);
      return outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
    case 4:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
      swift_unknownObjectRelease();
      uint64_t v47 = *(void *)&v226[24];
      uint64_t v48 = *(void *)v227;
      uint64_t v49 = *(void *)&v227[40];
      unint64_t v50 = v197;
      *(void *)Swift::String v197 = *(void *)v226;
      *(_OWORD *)(v50 + 2) = *(_OWORD *)&v226[8];
      *((void *)v50 + 3) = v47;
      *((void *)v50 + 4) = v48;
      *(_OWORD *)(v50 + 10) = *(_OWORD *)&v227[8];
      *(_OWORD *)(v50 + 14) = *(_OWORD *)&v227[24];
      *((void *)v50 + 9) = v49;
      __int128 v51 = v229;
      *((_OWORD *)v50 + 5) = v228;
      *((_OWORD *)v50 + 6) = v51;
      type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
      return swift_storeEnumTagMultiPayload();
    case 5:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
      swift_unknownObjectRelease();
      char v58 = v226[8];
      char v59 = v226[9];
      __int16 v60 = v197;
      *(void *)Swift::String v197 = *(void *)v226;
      *((_BYTE *)v60 + 8) = v58;
      *((_BYTE *)v60 + 9) = v59;
      *((_OWORD *)v60 + 1) = *(_OWORD *)&v226[16];
      type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
      return swift_storeEnumTagMultiPayload();
    case 6:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
      swift_unknownObjectRelease();
      *(_BYTE *)Swift::String v197 = v226[0];
      type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
      return swift_storeEnumTagMultiPayload();
    default:
      uint64_t v46 = v196;
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v196, (uint64_t)&v215);
      *(void *)&v210[0] = v195;
      *((void *)&v210[0] + 1) = v194;
      String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)((uint64_t)&v215);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v46);
      return outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v226);
  }

void String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
  MEMORY[0x1895F8858](v2);
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)v3);
  __asm { BR              X10 }

uint64_t sub_182F62E3C()
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  *(void *)(v0 + 8) = v5;
  if (!swift_dynamicCast())
  {
    __break(1u);
    JUMPOUT(0x182F6316CLL);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)uint64_t v0 = inited + 32;
  outlined init with copy of Any(v0 + 128, v0 + 88);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  uint64_t v7 = swift_dynamicCast();
  *(void *)(v0 + 8) = &v12;
  MEMORY[0x1895F8858](v7);
  uint64_t v8 = specialized withVaList<A>(_:_:)( inited,  (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in String.init(format:locale:arguments:));
  uint64_t v10 = v9;
  swift_setDeallocating();
  swift_arrayDestroy();
  outlined destroy of String.LocalizationValue.FormatArgument.Storage(v3);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  *uint64_t v2 = v8;
  v2[1] = v10;
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v2,  v1,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.stringValue.getter( unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_182F631C4 + 4 * byte_18372590B[a1]))( 0xD000000000000017LL,  0x80000001839C9B10LL);
}

uint64_t sub_182F631C4()
{
  return 0x3233746E69LL;
}

uint64_t sub_182F631D8()
{
  return 0x3436746E69LL;
}

uint64_t sub_182F631EC()
{
  return 0x3233746E6975LL;
}

uint64_t sub_182F63200()
{
  return 0x3436746E6975LL;
}

uint64_t sub_182F63214()
{
  return 0x74616F6C66LL;
}

uint64_t sub_182F63228()
{
  return 0x656C62756F64LL;
}

uint64_t sub_182F6323C()
{
  return 0x74616F6C666763LL;
}

uint64_t sub_182F63254()
{
  return 0x676E69727473LL;
}

uint64_t sub_182F63268()
{
  return 1702125924LL;
}

unint64_t sub_182F63278()
{
  return 0xD000000000000010LL;
}

uint64_t sub_182F63310()
{
  return 0x6C6F686563616C70LL;
}

void String.LocalizationValue.FormatArgument.CodableStorage.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>);
  uint64_t v92 = *(void *)(v2 - 8);
  uint64_t v93 = v2;
  MEMORY[0x1895F8858](v2);
  unint64_t v91 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys>);
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x1895F8858](v100);
  uint64_t v98 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys>);
  uint64_t v96 = *(void *)(v5 - 8);
  uint64_t v97 = v5;
  MEMORY[0x1895F8858](v5);
  char v95 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL);
  MEMORY[0x1895F8858](v45);
  uint64_t v94 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys>);
  uint64_t v89 = *(void *)(v8 - 8);
  uint64_t v90 = v8;
  MEMORY[0x1895F8858](v8);
  char v87 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0LL);
  MEMORY[0x1895F8858](v44);
  uint64_t v86 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys>);
  uint64_t v82 = *(void *)(v11 - 8);
  uint64_t v83 = v11;
  MEMORY[0x1895F8858](v11);
  char v81 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL);
  MEMORY[0x1895F8858](v43);
  char v80 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys>);
  uint64_t v85 = *(void *)(v88 - 8);
  MEMORY[0x1895F8858](v88);
  uint64_t v84 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys>);
  uint64_t v78 = *(void *)(v15 - 8);
  uint64_t v79 = v15;
  MEMORY[0x1895F8858](v15);
  char v77 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys>);
  uint64_t v75 = *(void *)(v17 - 8);
  uint64_t v76 = v17;
  MEMORY[0x1895F8858](v17);
  unsigned int v74 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys>);
  uint64_t v72 = *(void *)(v19 - 8);
  uint64_t v73 = v19;
  MEMORY[0x1895F8858](v19);
  uint64_t v71 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys>);
  uint64_t v69 = *(void *)(v21 - 8);
  uint64_t v70 = v21;
  MEMORY[0x1895F8858](v21);
  __int16 v68 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys>);
  uint64_t v66 = *(void *)(v23 - 8);
  uint64_t v67 = v23;
  MEMORY[0x1895F8858](v23);
  uint64_t v65 = (char *)&v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys>);
  uint64_t v63 = *(void *)(v25 - 8);
  uint64_t v64 = v25;
  MEMORY[0x1895F8858](v25);
  __int128 v62 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys>);
  uint64_t v60 = *(void *)(v27 - 8);
  uint64_t v61 = v27;
  MEMORY[0x1895F8858](v27);
  char v59 = (char *)&v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys>);
  uint64_t v57 = *(void *)(v29 - 8);
  uint64_t v58 = v29;
  MEMORY[0x1895F8858](v29);
  __int128 v56 = (char *)&v43 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys>);
  uint64_t v54 = *(void *)(v31 - 8);
  uint64_t v55 = v31;
  MEMORY[0x1895F8858](v31);
  unint64_t v53 = (char *)&v43 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys>);
  uint64_t v51 = *(void *)(v33 - 8);
  uint64_t v52 = v33;
  MEMORY[0x1895F8858](v33);
  unint64_t v50 = (char *)&v43 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys>);
  uint64_t v46 = *(void *)(v35 - 8);
  uint64_t v47 = v35;
  MEMORY[0x1895F8858](v35);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys>);
  uint64_t v48 = *(void *)(v36 - 8);
  uint64_t v49 = v36;
  MEMORY[0x1895F8858](v36);
  uint64_t v37 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
  MEMORY[0x1895F8858](v37);
  __int128 v39 = (char *)&v43 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys>);
  uint64_t v101 = *(void *)(v104 - 8);
  MEMORY[0x1895F8858](v104);
  uint64_t v41 = (char *)&v43 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();
  int v103 = v41;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature( v102,  (uint64_t)v39,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  uint64_t v42 = (char *)sub_182F6398C + 4 * word_18372591E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_182F6398C()
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  *(void *)(v0 + 496) = v2[2];
  *(void *)(v0 + 400) = v2[3];
  *(void *)(v0 + 408) = v4;
  *(void *)(v0 + 464) = v2[4];
  uint64_t v6 = v2[6];
  *(void *)(v0 + 392) = v2[5];
  *(void *)(v0 + 432) = v6;
  *(void *)(v0 + 440) = v5;
  uint64_t v7 = v2[9];
  uint64_t v8 = v2[10];
  uint64_t v9 = v2[11];
  *(void *)(v0 + 416) = v2[12];
  *(void *)(v0 + 424) = v7;
  uint64_t v10 = v2[13];
  *(_BYTE *)(v3 - 256) = 0;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys();
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v2 + 7);
  uint64_t v11 = *(void *)(v0 + 520);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  *(void *)(v3 - 256) = *(void *)(v0 + 408);
  *(void *)(v3 - 248) = v5;
  uint64_t v12 = *(void *)(v0 + 400);
  *(void *)(v3 - 240) = *(void *)(v0 + 496);
  *(void *)(v3 - 232) = v12;
  uint64_t v13 = *(void *)(v0 + 392);
  *(void *)(v3 - 224) = *(void *)(v0 + 464);
  *(void *)(v3 - 216) = v13;
  *(_OWORD *)(v3 - 200) = *(_OWORD *)(v0 + 448);
  *(void *)(v3 - 208) = v6;
  uint64_t v14 = *(void *)(v0 + 416);
  uint64_t v15 = *(void **)(v0 + 424);
  *(void *)(v3 - 184) = v15;
  *(void *)(v3 - 176) = v8;
  *(void *)(v3 - 168) = v9;
  *(void *)(v3 - 160) = v14;
  *(void *)(v3 - 152) = v10;
  lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource();
  uint64_t v16 = *(void *)(v0 + 48);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 40) + 8LL))(v1, v16);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 488) + 8LL))(v11, *(void *)(v3 - 72));

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v126 = a2;
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>);
  uint64_t v127 = *(void *)(v105 - 8);
  MEMORY[0x1895F8858](v105);
  uint64_t v124 = (char *)v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys>);
  uint64_t v108 = *(void *)(v133 - 8);
  MEMORY[0x1895F8858](v133);
  unint64_t v132 = (char *)v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys>);
  uint64_t v106 = *(void *)(v107 - 8);
  MEMORY[0x1895F8858](v107);
  uint64_t v125 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys>);
  uint64_t v103 = *(void *)(v104 - 8);
  MEMORY[0x1895F8858](v104);
  uint64_t v123 = (char *)v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys>);
  uint64_t v101 = *(void *)(v102 - 8);
  MEMORY[0x1895F8858](v102);
  uint64_t v122 = (char *)v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys>);
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x1895F8858](v100);
  uint64_t v121 = (char *)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys>);
  uint64_t v97 = *(void *)(v98 - 8);
  MEMORY[0x1895F8858](v98);
  char v120 = (char *)v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys>);
  uint64_t v95 = *(void *)(v96 - 8);
  MEMORY[0x1895F8858](v96);
  uint64_t v119 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys>);
  uint64_t v93 = *(void *)(v94 - 8);
  MEMORY[0x1895F8858](v94);
  uint64_t v118 = (char *)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys>);
  uint64_t v91 = *(void *)(v92 - 8);
  MEMORY[0x1895F8858](v92);
  int v117 = (char *)v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys>);
  uint64_t v89 = *(void *)(v90 - 8);
  MEMORY[0x1895F8858](v90);
  __int128 v116 = (char *)v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys>);
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x1895F8858](v88);
  __int128 v115 = (char *)v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys>);
  uint64_t v85 = *(void *)(v86 - 8);
  MEMORY[0x1895F8858](v86);
  uint64_t v114 = (char *)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys>);
  uint64_t v83 = *(void *)(v84 - 8);
  MEMORY[0x1895F8858](v84);
  __int16 v113 = (char *)v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys>);
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x1895F8858](v82);
  uint64_t v130 = (char *)v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys>);
  uint64_t v79 = *(void *)(v80 - 8);
  MEMORY[0x1895F8858](v80);
  char v112 = (char *)v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys>);
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x1895F8858](v78);
  uint64_t v111 = (char *)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys>);
  v75[18] = *(void *)(v76 - 8);
  MEMORY[0x1895F8858](v76);
  unint64_t v110 = (char *)v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys>);
  uint64_t v128 = *(void *)(v131 - 8);
  MEMORY[0x1895F8858](v131);
  unint64_t v136 = (char *)v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
  uint64_t v22 = MEMORY[0x1895F8858](v129);
  v75[15] = (char *)v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  v75[9] = (char *)v75 - v25;
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v109 = (char *)v75 - v27;
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  v75[16] = (char *)v75 - v29;
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  v75[17] = (char *)v75 - v31;
  uint64_t v32 = MEMORY[0x1895F8858](v30);
  v75[8] = (char *)v75 - v33;
  uint64_t v34 = MEMORY[0x1895F8858](v32);
  v75[7] = (char *)v75 - v35;
  uint64_t v36 = MEMORY[0x1895F8858](v34);
  v75[6] = (char *)v75 - v37;
  uint64_t v38 = MEMORY[0x1895F8858](v36);
  v75[14] = (char *)v75 - v39;
  uint64_t v40 = MEMORY[0x1895F8858](v38);
  v75[13] = (char *)v75 - v41;
  uint64_t v42 = MEMORY[0x1895F8858](v40);
  v75[12] = (char *)v75 - v43;
  uint64_t v44 = MEMORY[0x1895F8858](v42);
  v75[11] = (char *)v75 - v45;
  uint64_t v46 = MEMORY[0x1895F8858](v44);
  v75[10] = (char *)v75 - v47;
  uint64_t v48 = MEMORY[0x1895F8858](v46);
  unint64_t v50 = (char *)v75 - v49;
  uint64_t v51 = MEMORY[0x1895F8858](v48);
  unint64_t v53 = (char *)v75 - v52;
  uint64_t v54 = MEMORY[0x1895F8858](v51);
  __int128 v56 = (char *)v75 - v55;
  uint64_t v57 = MEMORY[0x1895F8858](v54);
  char v59 = (char *)v75 - v58;
  uint64_t v60 = MEMORY[0x1895F8858](v57);
  __int128 v62 = (char *)v75 - v61;
  MEMORY[0x1895F8858](v60);
  uint64_t v64 = (char *)v75 - v63;
  uint64_t v65 = a1[3];
  uint64_t v134 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v65);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();
  uint64_t v66 = v135;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v66)
  {
    v75[0] = v59;
    v75[1] = v56;
    v75[2] = v53;
    v75[3] = v62;
    v75[4] = v50;
    uint64_t v135 = 0LL;
    uint64_t v67 = v129;
    v75[5] = v64;
    uint64_t v68 = v131;
    uint64_t v69 = v136;
    uint64_t v70 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v70 + 16) == 1LL) {
      __asm { BR              X10 }
    }

    uint64_t v71 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v73 = v72;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v73 = v67;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v71 - 8) + 104LL))( v73,  *MEMORY[0x189619358],  v71);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v69, v68);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v134);
}

void sub_182F65504()
{
  *(_BYTE *)(v1 - 256) = 1;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys();
  uint64_t v2 = *(void *)(v1 - 464);
  uint64_t v3 = *(void *)(v1 - 264);
  uint64_t v4 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    uint64_t v5 = *(void *)(v1 - 728);
    int v6 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v7 = *(void *)(v1 - 328);
    int v8 = v6;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 736) + 8LL))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v7 + 8))(*(void *)(v1 - 264), v0);
    uint64_t v9 = *(_DWORD **)(v1 - 896);
    _DWORD *v9 = v8;
    swift_storeEnumTagMultiPayload();
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v9,  *(void *)(v1 - 856),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    JUMPOUT(0x182F66AD4LL);
  }

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v3, v0);
  JUMPOUT(0x182F654D8LL);
}

void sub_182F655A4()
{
  *(_BYTE *)(v1 - 256) = 2;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys();
  uint64_t v2 = *(void *)(v1 - 456);
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v1 - 264);
  uint64_t v5 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v5)
  {
    uint64_t v6 = *(void *)(v1 - 712);
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 720) + 8LL))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(*(void *)(v1 - 328) + 8LL))(*(void *)(v1 - 264), v3);
    **(void **)(v1 - 8outlined init with copy of Any(v0 + 128, v0 + 88) = v7;
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x182F66AB0LL);
  }

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v4, v0);
  JUMPOUT(0x182F654D8LL);
}

void sub_182F65644()
{
  *(_BYTE *)(v2 - 256) = 3;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys();
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v2 - 264);
  uint64_t v5 = *(void *)(v2 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v5)
  {
    uint64_t v6 = *(void *)(v2 - 696);
    int v7 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v8 = *(void *)(v2 - 328);
    int v9 = v7;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 704) + 8LL))(v3, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v8 + 8))(*(void *)(v2 - 264), v1);
    **(_DWORD **)(v2 - 880) = v9;
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x182F66894LL);
  }

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 328) + 8LL))(v4, v1);
  JUMPOUT(0x182F654D8LL);
}

void sub_182F656C0()
{
  *(_BYTE *)(v1 - 256) = 4;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys();
  uint64_t v2 = *(void *)(v1 - 448);
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v1 - 264);
  uint64_t v5 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v5)
  {
    uint64_t v6 = *(void *)(v1 - 680);
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v8 = *(void *)(v1 - 328);
    uint64_t v9 = v7;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 688) + 8LL))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v8 + 8))(*(void *)(v1 - 264), v3);
    **(void **)(v1 - 864) = v9;
    JUMPOUT(0x182F662A0LL);
  }

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v4, v0);
  JUMPOUT(0x182F654D8LL);
}

void sub_182F65760()
{
  *(_BYTE *)(v1 - 256) = 5;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys();
  uint64_t v2 = *(void *)(v1 - 440);
  uint64_t v3 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v3)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x182F654CCLL);
  }

  uint64_t v4 = *(void *)(v1 - 664);
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v5 = *(void *)(v1 - 328);
  int v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 672) + 8LL))(v2, v4);
  swift_bridgeObjectRelease();
  (*(void (**)(void, uint64_t))(v5 + 8))(*(void *)(v1 - 264), v0);
  uint64_t v8 = *(_DWORD **)(v1 - 816);
  *uint64_t v8 = v7;
  swift_storeEnumTagMultiPayload();
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8,  *(void *)(v1 - 856),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  JUMPOUT(0x182F66AD4LL);
}

void sub_182F657D0()
{
  *(_BYTE *)(v1 - 256) = 6;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys();
  uint64_t v2 = *(void *)(v1 - 432);
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v1 - 264);
  uint64_t v5 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v4, v0);
  }

  else
  {
    uint64_t v6 = *(void *)(v1 - 648);
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v7 = *(void *)(v1 - 328);
    uint64_t v9 = v8;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 656) + 8LL))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v7 + 8))(*(void *)(v1 - 264), v3);
    uint64_t v10 = *(void **)(v1 - 808);
    void *v10 = v9;
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = *(void *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v10,  v11,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature( v11,  *(void *)(v1 - 344),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }

  JUMPOUT(0x182F654D8LL);
}

void sub_182F65850()
{
  *(_BYTE *)(v1 - 256) = 7;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys();
  uint64_t v2 = *(void *)(v1 - 424);
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v1 - 264);
  uint64_t v5 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v4, v0);
  }

  else
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    uint64_t v6 = *(void *)(v1 - 632);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = *(void *)(v1 - 328);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 640) + 8LL))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v7 + 8))(*(void *)(v1 - 264), v3);
    uint64_t v8 = *(void **)(v1 - 800);
    *uint64_t v8 = *(void *)(v1 - 256);
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(void *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8,  v9,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature( v9,  *(void *)(v1 - 344),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }

  JUMPOUT(0x182F654D8LL);
}

void sub_182F65934()
{
  *(_BYTE *)(v1 - 256) = 8;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys();
  uint64_t v2 = *(void *)(v1 - 416);
  uint64_t v3 = *(void *)(v1 - 264);
  uint64_t v4 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    uint64_t v5 = *(void *)(v1 - 616);
    uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v7 = *(void *)(v1 - 328);
    uint64_t v8 = v6;
    uint64_t v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 624) + 8LL))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v7 + 8))(*(void *)(v1 - 264), v0);
    uint64_t v11 = *(uint64_t **)(v1 - 792);
    *uint64_t v11 = v8;
    v11[1] = v10;
    swift_storeEnumTagMultiPayload();
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v11,  *(void *)(v1 - 856),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    JUMPOUT(0x182F66AD4LL);
  }

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v3, v0);
  JUMPOUT(0x182F654D8LL);
}

void sub_182F659B4()
{
  *(_BYTE *)(v1 - 256) = 9;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys();
  uint64_t v2 = *(void *)(v1 - 408);
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v1 - 264);
  uint64_t v5 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v4, v0);
  }

  else
  {
    lazy protocol witness table accessor for type Date and conformance Date();
    uint64_t v6 = *(void *)(v1 - 600);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = *(void *)(v1 - 328);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 608) + 8LL))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v7 + 8))(*(void *)(v1 - 264), v3);
    uint64_t v8 = *(void **)(v1 - 784);
    *uint64_t v8 = *(void *)(v1 - 256);
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(void *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8,  v9,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature( v9,  *(void *)(v1 - 344),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }

  JUMPOUT(0x182F654D8LL);
}

void sub_182F65A98()
{
  *(_BYTE *)(v1 - 256) = 10;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys();
  uint64_t v2 = *(void *)(v1 - 400);
  uint64_t v3 = *(void *)(v1 - 264);
  uint64_t v4 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    *(_BYTE *)(v1 - 120) = 0;
    lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
    uint64_t v5 = *(void *)(v1 - 584);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v6 = *(void *)(v1 - 328);
    uint64_t v7 = *(void *)(v1 - 256);
    *(_BYTE *)(v1 - 120) = 1;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v1 - 272) = 0LL;
    uint64_t v9 = v8;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 592) + 8LL))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v6 + 8))(*(void *)(v1 - 264), v0);
    uint64_t v10 = *(void **)(v1 - 848);
    void *v10 = v7;
    v10[1] = v9;
    swift_storeEnumTagMultiPayload();
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v10,  *(void *)(v1 - 856),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    JUMPOUT(0x182F66AD4LL);
  }

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v3, v0);
  JUMPOUT(0x182F654D8LL);
}

void sub_182F65B38()
{
  *(_BYTE *)(v1 - 256) = 11;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys();
  uint64_t v2 = *(void *)(v1 - 392);
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v1 - 264);
  uint64_t v5 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v4, v0);
  }

  else
  {
    *(_BYTE *)(v1 - 256) = 0;
    lazy protocol witness table accessor for type Date and conformance Date();
    uint64_t v6 = *(void *)(v1 - 568);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = *(void *)(v1 - 328);
    uint64_t v8 = *(void *)(v1 - 120);
    *(_BYTE *)(v1 - 65) = 1;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 576) + 8LL))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v7 + 8))(*(void *)(v1 - 264), v3);
    uint64_t v9 = *(void *)(v1 - 840);
    *(void *)uint64_t v9 = v8;
    __int128 v10 = *(_OWORD *)(v1 - 176);
    *(_OWORD *)(v9 + 72) = *(_OWORD *)(v1 - 192);
    *(_OWORD *)(v9 + outlined init with copy of Any(v0 + 128, v0 + 88) = v10;
    *(_OWORD *)(v9 + 104) = *(_OWORD *)(v1 - 160);
    *(_OWORD *)(v9 + 114) = *(_OWORD *)(v1 - 150);
    __int128 v11 = *(_OWORD *)(v1 - 240);
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(v1 - 256);
    *(_OWORD *)(v9 + 24) = v11;
    __int128 v12 = *(_OWORD *)(v1 - 208);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v1 - 224);
    *(_OWORD *)(v9 + 56) = v12;
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(void *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature( v9,  v13,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature( v13,  *(void *)(v1 - 344),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }

  JUMPOUT(0x182F654D8LL);
}

void sub_182F65BD8()
{
  *(_BYTE *)(v1 - 256) = 12;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys();
  uint64_t v2 = *(void *)(v1 - 384);
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
    *(_BYTE *)(v1 - 256) = 0;
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>,  &demangling cache variable for type metadata for Range<Date>,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date and conformance Date,  MEMORY[0x189618A50]);
    uint64_t v5 = *(void *)(v1 - 552);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v6 = *(void *)(v1 - 328);
    uint64_t v7 = *(void *)(v1 - 120);
    uint64_t v8 = *(void *)(v1 - 112);
    *(_BYTE *)(v1 - 65) = 1;
    lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 560) + 8LL))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v6 + 8))(*(void *)(v1 - 264), v3);
    char v9 = *(_BYTE *)(v1 - 208);
    uint64_t v10 = *(void *)(v1 - 200);
    uint64_t v11 = *(void *)(v1 - 184);
    char v12 = *(_BYTE *)(v1 - 176);
    char v13 = *(_BYTE *)(v1 - 175);
    __int16 v14 = *(_WORD *)(v1 - 170);
    uint64_t v15 = *(void *)(v1 - 168);
    __int16 v16 = *(_WORD *)(v1 - 160);
    uint64_t v17 = *(void *)(v1 - 832);
    *(void *)uint64_t v17 = v7;
    *(void *)(v17 + 8) = v8;
    __int128 v18 = *(_OWORD *)(v1 - 240);
    *(_OWORD *)(v17 + 16) = *(_OWORD *)(v1 - 256);
    *(_OWORD *)(v17 + 32) = v18;
    *(_OWORD *)(v17 + 48) = *(_OWORD *)(v1 - 224);
    *(_BYTE *)(v17 + 64) = v9;
    *(void *)(v17 + 72) = v10;
    *(_DWORD *)(v17 + 80) = *(_DWORD *)(v1 - 192);
    *(void *)(v17 + outlined init with copy of Any(v0 + 128, v0 + 88) = v11;
    *(_BYTE *)(v17 + 96) = v12;
    *(_BYTE *)(v17 + 97) = v13;
    *(_DWORD *)(v17 + 98) = *(_DWORD *)(v1 - 174);
    *(_WORD *)(v17 + 102) = v14;
    *(void *)(v17 + 104) = v15;
    *(_WORD *)(v17 + 112) = v16;
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = *(void *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature( v17,  v19,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature( v19,  *(void *)(v1 - 344),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    JUMPOUT(0x182F654D8LL);
  }

  swift_bridgeObjectRelease();
  JUMPOUT(0x182F65E44LL);
}

void sub_182F65CCC()
{
  *(_BYTE *)(v1 - 256) = 13;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys();
  uint64_t v2 = *(void *)(v1 - 376);
  uint64_t v3 = *(void *)(v1 - 264);
  uint64_t v4 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    *(_BYTE *)(v1 - 256) = 0;
    uint64_t v5 = *(void *)(v1 - 536);
    uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v7 = *(void *)(v1 - 328);
    uint64_t v8 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle));
    **(void **)(v1 - 760) = v8;
    type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL);
    *(_BYTE *)(v1 - 256) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 544) + 8LL))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v7 + 8))(*(void *)(v1 - 264), v0);
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x182F66894LL);
  }

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v3, v0);
  JUMPOUT(0x182F654D8LL);
}

void sub_182F65D54()
{
  *(_BYTE *)(v1 - 256) = 14;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys();
  uint64_t v2 = *(void *)(v1 - 368);
  uint64_t v3 = *(void *)(v1 - 264);
  uint64_t v4 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    *(_BYTE *)(v1 - 256) = 0;
    uint64_t v5 = *(void *)(v1 - 520);
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = *(void *)(v1 - 328);
    uint64_t v8 = v7;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle));
    uint64_t v10 = *(void **)(v1 - 768);
    *(void *)(v1 - 272) = (char *)v10 + *(int *)(v9 + 48);
    void *v10 = v8;
    type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0LL);
    *(_BYTE *)(v1 - 256) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 528) + 8LL))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v6 + 8))(*(void *)(v1 - 264), v0);
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x182F66894LL);
  }

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 328) + 8LL))(v3, v0);
  JUMPOUT(0x182F654D8LL);
}

void sub_182F65DDC()
{
  *(_BYTE *)(v1 - 256) = 15;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys();
  uint64_t v2 = *(void *)(v1 - 352);
  uint64_t v3 = *(void *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v3) {
    JUMPOUT(0x182F65E2CLL);
  }
  type metadata accessor for NSDecimal(0LL);
  *(_BYTE *)(v1 - 256) = 0;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal,  (uint64_t (*)(uint64_t))type metadata accessor for NSDecimal,  (uint64_t)&protocol conformance descriptor for NSDecimal);
  uint64_t v4 = *(void *)(v1 - 496);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v5 = *(void *)(v1 - 328);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL);
  *(_BYTE *)(v1 - 256) = 1;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 504) + 8LL))(v2, v4);
  swift_bridgeObjectRelease();
  (*(void (**)(void, uint64_t))(v5 + 8))(*(void *)(v1 - 264), v0);
  JUMPOUT(0x182F66884LL);
}

void sub_182F65E5C()
{
  *(_BYTE *)(v3 - 256) = 16;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys();
  uint64_t v4 = *(void *)(v3 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v4)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x182F65E48LL);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LocalizedStringResource]);
  *(_BYTE *)(v3 - 256) = 0;
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [LocalizedStringResource] and conformance <A> [A],  &demangling cache variable for type metadata for [LocalizedStringResource],  (uint64_t (*)(void))lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource,  MEMORY[0x189618478]);
  uint64_t v5 = v2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = *(void *)(v3 - 328);
  *(void *)(v3 - 272) = *(void *)(v3 - 120);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ListFormatStyle<StringStyle, [String]>);
  *(_BYTE *)(v3 - 65) = 1;
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ListFormatStyle<StringStyle, [String]> and conformance ListFormatStyle<A, B>,  &demangling cache variable for type metadata for ListFormatStyle<StringStyle, [String]>,  (uint64_t)&protocol conformance descriptor for ListFormatStyle<A, B>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 488) + 8LL))(v1, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(void, uint64_t))(v6 + 8))(*(void *)(v3 - 264), v0);
  char v7 = *(_BYTE *)(v3 - 256);
  char v8 = *(_BYTE *)(v3 - 255);
  uint64_t v9 = *(void *)(v3 - 824);
  *(void *)uint64_t v9 = *(void *)(v3 - 272);
  *(_BYTE *)(v9 + 8) = v7;
  *(_BYTE *)(v9 + 9) = v8;
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v3 - 248);
  JUMPOUT(0x182F66AA0LL);
}

void sub_182F65EC0()
{
  *(_BYTE *)(v2 - 256) = 17;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys();
  uint64_t v3 = *(void *)(v2 - 360);
  uint64_t v4 = v0;
  uint64_t v5 = *(void *)(v2 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5) {
    JUMPOUT(0x182F65F10LL);
  }
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder();
  uint64_t v6 = *(void *)(v2 - 512);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = *(void *)(v2 - 328);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(void, uint64_t))(v7 + 8))(*(void *)(v2 - 264), v4);
  char v8 = *(_BYTE **)(v2 - 776);
  *char v8 = *(_BYTE *)(v2 - 256);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(void *)(v2 - 856);
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8,  v9,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  outlined init with take of ICUNumberFormatter.Signature( v9,  *(void *)(v2 - 344),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  JUMPOUT(0x182F654D8LL);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  if (*v0) {
    return 0x736E6F6974706FLL;
  }
  else {
    return 12383LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys.init(stringValue:)( a1,  a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return 12383LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  return String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  if (*v0) {
    return 12639LL;
  }
  else {
    return 12383LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys.init(stringValue:)( a1,  a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.CodableStorage@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.CodableStorage.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.CodableStorage( void *a1)
{
}

void String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.hash(into:)()
{
  uint64_t v1 = (char *)sub_182F67254
     + 4
     * byte_183725966[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v3)];
  __asm { BR              X10 }

uint64_t sub_182F67254()
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt v46;
  Swift::UInt8 v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  void *v53;
  _BYTE v54[144];
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void v73[18];
  _BYTE v74[144];
  _OWORD v75[12];
  __int16 v76;
  uint64_t v77;
  uint64_t v2 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v1 - 216);
  Hasher._combine(_:)(0LL);
  __int16 v3 = *(_WORD *)(v2 + 48);
  __int128 v4 = *(_OWORD *)(v2 + 16);
  v75[9] = *(_OWORD *)v2;
  v75[10] = v4;
  v75[11] = *(_OWORD *)(v2 + 32);
  uint64_t v76 = v3;
  Swift::UInt v5 = *(void *)(v2 + 56);
  int v6 = *(unsigned __int8 *)(v2 + 64);
  outlined retain of Date.FormatStyle(v2);
  specialized Optional<A>.hash(into:)(v0);
  if (v6 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }

  uint64_t v7 = *(void *)(v2 + 80);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
  swift_unknownObjectRetain();
  if ((v9(ObjectType, v7) & 1) != 0)
  {
    Swift::UInt8 v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_60;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(ObjectType, v7);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  swift_unknownObjectRetain();
  v11(v73, ObjectType, v7);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v75,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)&v55,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55 == 2)
  {
    char v12 = 0;
  }

  else
  {
    char v12 = v55 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  char v13 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    __int16 v16 = &v55;
LABEL_19:
    outlined retain of LocalePreferences(v16);
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  __int16 v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v54,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    __int16 v16 = v54;
    goto LABEL_19;
  }

  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16LL;
    --v14;
  }

  while (v14);
  swift_bridgeObjectRelease();
LABEL_20:
  if (v57)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v58) {
      goto LABEL_22;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v58)
    {
LABEL_22:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = v59;
      if (v59) {
        goto LABEL_23;
      }
LABEL_27:
      Hasher._combine(_:)(0);
      __int128 v18 = v60;
      if (v60) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
  }

  Hasher._combine(_:)(0);
  uint64_t v17 = v59;
  if (!v59) {
    goto LABEL_27;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v0, v17);
  swift_bridgeObjectRelease();
  __int128 v18 = v60;
  if (v60)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v0, v18);
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }

void String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys>);
  uint64_t v14 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  char v13 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys>);
  v11[4] = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  v11[3] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys>);
  v11[1] = *(void *)(v6 - 8);
  void v11[2] = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys>);
  MEMORY[0x1895F8858](v7);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v16 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v19);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();
  uint64_t v17 = v9;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v19, v20);
  Swift::UInt8 v10 = (char *)sub_182F68E04
      + 4
      * byte_18372596A[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v20)];
  __asm { BR              X10 }

uint64_t sub_182F68E04()
{
  uint64_t v5 = (__int128 *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v4 - 216);
  *(_BYTE *)(v0 + 144) = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( (__int128 *)(v0 + 408),  (_OWORD *)(v0 + 280));
  uint64_t v6 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v0 + 280);
  outlined retain of Date.FormatStyle(v6);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys();
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  __int128 v9 = *v5;
  __int128 v10 = v5[1];
  __int128 v11 = v5[3];
  *(_OWORD *)(v0 + 176) = v5[2];
  *(_OWORD *)(v0 + 192) = v11;
  *(_OWORD *)(v0 + 144) = v9;
  *(_OWORD *)(v0 + 160) = v10;
  __int128 v12 = v5[4];
  __int128 v13 = v5[5];
  __int128 v14 = v5[6];
  *(_OWORD *)(v0 + 250) = *(__int128 *)((char *)v5 + 106);
  *(_OWORD *)(v0 + 224) = v13;
  *(_OWORD *)(v0 + 240) = v14;
  *(_OWORD *)(v0 + 208) = v12;
  lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 120) + 8LL))(v8, v7);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( v0 + 408,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys>);
  uint64_t v30 = *(void *)(v26 - 8);
  MEMORY[0x1895F8858](v26);
  uint64_t v34 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  uint64_t v28 = v5;
  MEMORY[0x1895F8858](v4);
  uint64_t v33 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys>);
  uint64_t v29 = *(void *)(v25 - 8);
  MEMORY[0x1895F8858](v25);
  uint64_t v32 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  __int128 v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v12 = *(void *)(v35 - 8);
  MEMORY[0x1895F8858](v35);
  __int128 v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();
  uint64_t v16 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v16)
  {
    v24[2] = v9;
    __int128 v24[3] = v11;
    v24[1] = v8;
    uint64_t v37 = v12;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v17 + 16) == 1LL) {
      __asm { BR              X10 }
    }

    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v19 = v14;
    uint64_t v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v21 = &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
    uint64_t v22 = v35;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104LL))( v21,  *MEMORY[0x189619358],  v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v22);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182F699A4 + 4 * byte_183725972[*v0]))( 0x656D695465746164LL,  0xE800000000000000LL);
}

uint64_t sub_182F699A4()
{
  return 0x313036386F7369LL;
}

uint64_t sub_182F699BC()
{
  return 0x6D69746162726576LL;
}

uint64_t sub_182F699D0()
{
  return 0x65766974616C6572LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys.init(stringValue:)( a1,  a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( void *a1)
{
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.format(_:)( Foundation::Date a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v4);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v5);
  uint64_t v2 = (char *)sub_182F69CF8
     + 4
     * byte_183725976[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v5)];
  __asm { BR              X10 }

  return result;
}

uint64_t sub_182F69CF8()
{
  uint64_t v3 = (_OWORD *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v2 - 200);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( (__int128 *)(v0 + 376),  (_OWORD *)(v0 + 240));
  uint64_t v4 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v0 + 240);
  __int128 v5 = v3[5];
  *(_OWORD *)(v0 + 176) = v3[4];
  *(_OWORD *)(v0 + 192) = v5;
  *(_OWORD *)(v0 + 208) = v3[6];
  *(_OWORD *)(v1 + 106) = *(_OWORD *)((char *)v3 + 106);
  __int128 v6 = v3[1];
  *(_OWORD *)(v0 + 112) = *v3;
  *(_OWORD *)(v0 + 128) = v6;
  __int128 v7 = v3[3];
  *(_OWORD *)(v0 + 144) = v3[2];
  *(_OWORD *)(v0 + 160) = v7;
  outlined retain of Date.FormatStyle(v4);
  outlined retain of Date.FormatStyle((uint64_t)v3);
  ICUDateFormatter.DateFormatInfo.init(_:)((_OWORD *)(v0 + 112), v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v9 = *(void *)(v0 + 32);
  uint64_t v10 = *(void *)(v0 + 40);
  char v11 = *(_BYTE *)(v0 + 48);
  char v12 = *(_BYTE *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v14 = *(void *)(v0 + 88);
  char v15 = *(_BYTE *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 104);
  *(void *)(v0 + 112) = *(void *)(v0 + 16);
  *(void *)(v0 + 120) = v8;
  *(void *)(v0 + 128) = v9;
  *(void *)(v0 + 136) = v10;
  *(_BYTE *)(v0 + 144) = v11;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(v0 + 56);
  *(_BYTE *)(v0 + 168) = v12;
  *(void *)(v0 + 176) = v13;
  *(void *)(v0 + 184) = v14;
  *(_BYTE *)(v0 + 192) = v15;
  *(void *)(v0 + 200) = v16;
  uint64_t v17 = specialized static ICUDateFormatter.cachedFormatter(for:)(v0 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17
    && (uint64_t v18 = swift_retain_n(),
        MEMORY[0x1895F8858](v18),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v22, (uint64_t *)(v0 + 112)),
        uint64_t v19 = *(void *)(v0 + 112),
        uint64_t v20 = *(void *)(v0 + 120),
        swift_release_n(),
        v20))
  {
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( v0 + 376,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }

  else
  {
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( v0 + 376,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    return 0LL;
  }

  return v19;
}

void String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.locale(_:)()
{
  uint64_t v1 = (char *)sub_182F6A070
     + 4
     * byte_18372597A[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v3)];
  __asm { BR              X10 }

_OWORD *sub_182F6A070()
{
  uint64_t v5 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v4 - 224);
  char v17 = *(_BYTE *)(v5 + 121);
  char v16 = *(_BYTE *)(v5 + 120);
  uint64_t v6 = *(void *)(v5 + 56);
  char v7 = *(_BYTE *)(v5 + 64);
  __int128 v12 = *(_OWORD *)(v5 + 16);
  __int128 v13 = *(_OWORD *)v5;
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v8 = *(void *)(v5 + 40);
  __int16 v10 = *(_WORD *)(v5 + 48);
  __int128 v14 = *(_OWORD *)(v5 + 104);
  __int128 v15 = *(_OWORD *)(v5 + 88);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)&v28,  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v18[0] = v13;
  v18[1] = v12;
  uint64_t v19 = v9;
  uint64_t v20 = v8;
  __int16 v21 = v10;
  uint64_t v22 = v6;
  char v23 = v7;
  uint64_t v24 = v1;
  uint64_t v25 = v2;
  *(_OWORD *)(v3 + outlined init with copy of Any(v0 + 128, v0 + 88) = v15;
  *(_OWORD *)(v3 + 104) = v14;
  char v26 = v16;
  char v27 = v17;
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v18);
  return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v18, v0);
}

void String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.hash(into:)()
{
  uint64_t v1 = (char *)sub_182F6A2D4
     + 4
     * byte_18372597E[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v3)];
  __asm { BR              X10 }

uint64_t sub_182F6A2D4()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  Swift::UInt v44;
  Swift::UInt v45;
  Swift::UInt8 v46;
  Swift::UInt8 v47;
  Swift::UInt8 v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  _OWORD v62[8];
  _BYTE v63[144];
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  void v82[18];
  _BYTE v83[144];
  _OWORD v84[12];
  __int16 v85;
  __int128 v86[22];
  uint64_t v2 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v1 - 216);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v86, v62);
  uint64_t v3 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v62);
  Hasher._combine(_:)(0LL);
  __int16 v4 = *(_WORD *)(v2 + 48);
  __int128 v5 = *(_OWORD *)(v2 + 16);
  v84[9] = *(_OWORD *)v2;
  v84[10] = v5;
  v84[11] = *(_OWORD *)(v2 + 32);
  uint64_t v85 = v4;
  Swift::UInt v6 = *(void *)(v2 + 56);
  char v7 = *(_BYTE *)(v2 + 64);
  outlined retain of Date.FormatStyle(v3);
  outlined retain of Date.FormatStyle(v2);
  specialized Optional<A>.hash(into:)(v0);
  if ((v7 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }

  uint64_t v8 = *(void *)(v2 + 80);
  uint64_t ObjectType = swift_getObjectType();
  __int16 v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  swift_unknownObjectRetain();
  if ((v10(ObjectType, v8) & 1) != 0)
  {
    Swift::UInt8 v11 = 1;
LABEL_8:
    Hasher._combine(_:)(v11);
    goto LABEL_60;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(ObjectType, v8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v12(v82, ObjectType, v8);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v82,  (uint64_t)v83,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v83,  (uint64_t)v84,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v84) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v83,  (uint64_t)&v64,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v64 == 2)
  {
    __int128 v13 = 0;
  }

  else
  {
    __int128 v13 = v64 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v13);
  __int128 v14 = v65;
  if (!v65)
  {
    Hasher._combine(_:)(0);
    char v17 = &v64;
LABEL_19:
    outlined retain of LocalePreferences(v17);
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v14 + 16));
  __int128 v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v83,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    char v17 = v63;
    goto LABEL_19;
  }

  outlined retain of LocalePreferences?( (uint64_t)v83,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16LL;
    --v15;
  }

  while (v15);
  swift_bridgeObjectRelease();
LABEL_20:
  if (v66)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v67) {
      goto LABEL_22;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v67)
    {
LABEL_22:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v18 = v68;
      if (v68) {
        goto LABEL_23;
      }
LABEL_27:
      Hasher._combine(_:)(0);
      uint64_t v19 = v69;
      if (v69) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
  }

  Hasher._combine(_:)(0);
  uint64_t v18 = v68;
  if (!v68) {
    goto LABEL_27;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v0, v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = v69;
  if (v69)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    uint64_t v20 = v0;
    specialized Dictionary<>.hash(into:)(v0, v19);
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  Swift::UInt v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v10, v9);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.init(from:)@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  char v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v8 = v18;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v14);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v14, v15);
    __int128 v9 = v15[5];
    v8[4] = v15[4];
    v8[5] = v9;
    v8[6] = v16[0];
    *(_OWORD *)((char *)v8 + 106) = *(_OWORD *)((char *)v16 + 10);
    __int128 v10 = v15[1];
    *uint64_t v8 = v15[0];
    v8[1] = v10;
    __int128 v11 = v15[3];
    void v8[2] = v15[2];
    v8[3] = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1895F8858](v7);
  __int128 v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1895F8858](v10);
  __int128 v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v13);
  __int128 v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v15,  (uint64_t)v9,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      Hasher._combine(_:)(1uLL);
      specialized IntegerFormatStyle.Currency.hash(into:)( a1,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
    }

    else
    {
      outlined init with take of LocalePreferences?( (uint64_t)v15,  (uint64_t)v6,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      Hasher._combine(_:)(2uLL);
      specialized IntegerFormatStyle.hash(into:)( a1,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      uint64_t v18 = (uint64_t)v6;
      uint64_t v19 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
    }
  }

  else
  {
    outlined init with take of LocalePreferences?( (uint64_t)v15,  (uint64_t)v12,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    Hasher._combine(_:)(0LL);
    specialized IntegerFormatStyle.hash(into:)( a1,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    uint64_t v18 = (uint64_t)v12;
    uint64_t v19 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
  }

  return outlined destroy of Any?(v18, v19);
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v39 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1895F8858](v37);
  uint64_t v38 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v34 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1895F8858](v32);
  uint64_t v33 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v14);
  char v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v43 = *(void *)(v17 - 8);
  uint64_t v44 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature( v42,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      uint64_t v22 = v33;
      outlined init with take of LocalePreferences?( (uint64_t)v16,  v33,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      char v46 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();
      char v23 = v34;
      uint64_t v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Currency and conformance IntegerFormatStyle<A>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency);
      uint64_t v25 = v36;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v35;
    }

    else
    {
      uint64_t v21 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      uint64_t v22 = v38;
      outlined init with take of LocalePreferences?( (uint64_t)v16,  v38,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      char v47 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();
      char v23 = v39;
      uint64_t v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Percent and conformance IntegerFormatStyle<A>.Percent,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent);
      uint64_t v25 = v41;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v40;
    }

    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    outlined destroy of Any?(v22, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v24);
  }

  else
  {
    outlined init with take of LocalePreferences?( (uint64_t)v16,  (uint64_t)v13,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    char v45 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();
    uint64_t v27 = v44;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>);
    uint64_t v28 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v28);
    outlined destroy of Any?( (uint64_t)v13,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v27);
  }

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v53 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  uint64_t v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x1895F8858](v4);
  char v59 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1895F8858](v58);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  char v16 = (char *)&v43 - v15;
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v43 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = a1[3];
  uint64_t v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();
  uint64_t v60 = v9;
  uint64_t v23 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23) {
    goto LABEL_9;
  }
  uint64_t v44 = v16;
  char v45 = v19;
  char v46 = v13;
  char v47 = v21;
  uint64_t v25 = v57;
  uint64_t v24 = v58;
  uint64_t v26 = v59;
  uint64_t v27 = v60;
  uint64_t v62 = v10;
  uint64_t v28 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v28 + 16) != 1LL)
  {
    uint64_t v30 = v24;
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v33 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v33,  *MEMORY[0x189619358],  v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v30);
LABEL_9:
    uint64_t v38 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v38);
  }

  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      char v64 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();
      uint64_t v29 = v26;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Currency and conformance IntegerFormatStyle<A>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency);
      uint64_t v36 = (uint64_t)v44;
      uint64_t v37 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v29, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v24);
      uint64_t v38 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      char v65 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();
      uint64_t v34 = v55;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Percent and conformance IntegerFormatStyle<A>.Percent,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent);
      uint64_t v36 = (uint64_t)v46;
      uint64_t v40 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v41 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v24);
      swift_storeEnumTagMultiPayload();
      uint64_t v38 = (uint64_t)v61;
    }
  }

  else
  {
    char v63 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>);
    uint64_t v36 = (uint64_t)v45;
    uint64_t v39 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v25, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v24);
    uint64_t v38 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }

  uint64_t v42 = (uint64_t)v47;
  outlined init with take of ICUNumberFormatter.Signature( v36,  (uint64_t)v47,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  outlined init with take of ICUNumberFormatter.Signature( v42,  v54,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  return __swift_destroy_boxed_opaque_existential_1(v38);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  return 0x74616D726F66LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle@<X0>( Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( void *a1)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( __int128 *a1, __int128 *a2)
{
  specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)(v6, v5);
  return v3 & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( void *a1)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.format(_:)(Swift::Int a1)
{
  void (*v31)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ObjectType;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t isStackAllocationSafe;
  int v81;
  uint64_t v82;
  char *v83;
  int v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  char *v91;
  int v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  int v97;
  void *v98;
  uint64_t v99;
  int v100;
  void *v101;
  void *v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  unint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  char *v128;
  int v129;
  void *v130;
  void *v131;
  uint64_t v132;
  int v133;
  void *v134;
  void *v135;
  uint64_t v136;
  void *v137;
  Swift::String result;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int64_t v142;
  char *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void *v151;
  Swift::Int v152;
  void v153[18];
  void v154[18];
  void v155[20];
  uint64_t v2 = v1;
  __int16 v152 = a1;
  v155[18] = *MEMORY[0x1895F89C0];
  uint64_t v3 = type metadata accessor for ICUPercentNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1895F8858](v6);
  __int16 v151 = (uint64_t *)((char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v149 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  uint64_t v147 = *(void *)(v149 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v149);
  uint64_t v148 = (uint64_t)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v150 = (uint64_t)&v139 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (uint64_t *)((char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1895F8858](v14);
  char v16 = (char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v19, v20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)v16,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    uint64_t v50 = specialized static ICUNumberFormatter.create<A>(for:)( (uint64_t)v16,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    uint64_t v51 = v152;
    if (!v50) {
      goto LABEL_58;
    }
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v52 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1895F8858](v52);
    LODWORD(v155[0]) = 0;
    Swift::Int isStackAllocationSafe = unumf_resultToString();
    if (LODWORD(v155[0]) == 15)
    {
      uint64_t v81 = isStackAllocationSafe + 1;
      if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
      {
        __break(1u);
        goto LABEL_127;
      }

      if (v81 < 0)
      {
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }

      if (v81 < 513 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1895F8858](isStackAllocationSafe);
        uint64_t v83 = (char *)&v139 - v82;
        LODWORD(v154[0]) = 0;
        uint64_t v84 = unumf_resultToString();
        if (SLODWORD(v154[0]) <= 0 && v84 > 0)
        {
          uint64_t v85 = specialized String.init(_utf16:)((uint64_t)v83, v84);
          uint64_t v87 = v86;
          goto LABEL_41;
        }

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature( v15,  (uint64_t)v11,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v11,  v13,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.hash(into:)( uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v15,  (uint64_t)v9,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      Hasher._combine(_:)(1uLL);
      specialized IntegerFormatStyle.Currency.hash(into:)( a1,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
    }

    else
    {
      outlined init with take of LocalePreferences?( (uint64_t)v15,  (uint64_t)v6,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      Hasher._combine(_:)(2uLL);
      specialized IntegerFormatStyle.hash(into:)( a1,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      uint64_t v18 = (uint64_t)v6;
      uint64_t v19 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    }
  }

  else
  {
    outlined init with take of LocalePreferences?( (uint64_t)v15,  (uint64_t)v12,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(0LL);
    specialized FloatingPointFormatStyle.hash(into:)(a1);
    uint64_t v18 = (uint64_t)v12;
    uint64_t v19 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
  }

  return outlined destroy of Any?(v18, v19);
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.encode(to:)( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v39 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1895F8858](v37);
  uint64_t v38 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v34 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1895F8858](v32);
  uint64_t v33 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v14);
  char v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v43 = *(void *)(v17 - 8);
  uint64_t v44 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature( v42,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      uint64_t v22 = v33;
      outlined init with take of LocalePreferences?( (uint64_t)v16,  v33,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      char v46 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();
      uint64_t v23 = v34;
      uint64_t v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Currency and conformance FloatingPointFormatStyle<A>.Currency,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency);
      uint64_t v25 = v36;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v35;
    }

    else
    {
      uint64_t v21 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      uint64_t v22 = v38;
      outlined init with take of LocalePreferences?( (uint64_t)v16,  v38,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      char v47 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();
      uint64_t v23 = v39;
      uint64_t v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
      uint64_t v25 = v41;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v40;
    }

    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    outlined destroy of Any?(v22, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v24);
  }

  else
  {
    outlined init with take of LocalePreferences?( (uint64_t)v16,  (uint64_t)v13,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    char v45 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();
    uint64_t v27 = v44;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
    uint64_t v28 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v28);
    outlined destroy of Any?( (uint64_t)v13,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v27);
  }

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v53 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  uint64_t v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x1895F8858](v4);
  char v59 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1895F8858](v58);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  char v16 = (char *)&v43 - v15;
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v43 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = a1[3];
  uint64_t v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();
  uint64_t v60 = v9;
  uint64_t v23 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23) {
    goto LABEL_9;
  }
  uint64_t v44 = v16;
  char v45 = v19;
  char v46 = v13;
  char v47 = v21;
  uint64_t v25 = v57;
  uint64_t v24 = v58;
  uint64_t v26 = v59;
  uint64_t v27 = v60;
  uint64_t v62 = v10;
  uint64_t v28 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v28 + 16) != 1LL)
  {
    uint64_t v30 = v24;
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v33 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v33,  *MEMORY[0x189619358],  v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v30);
LABEL_9:
    uint64_t v38 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v38);
  }

  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      char v64 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();
      uint64_t v29 = v26;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Currency and conformance FloatingPointFormatStyle<A>.Currency,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency);
      uint64_t v36 = (uint64_t)v44;
      uint64_t v37 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v29, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v24);
      uint64_t v38 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      char v65 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();
      uint64_t v34 = v55;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
      uint64_t v36 = (uint64_t)v46;
      uint64_t v40 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v41 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v24);
      swift_storeEnumTagMultiPayload();
      uint64_t v38 = (uint64_t)v61;
    }
  }

  else
  {
    char v63 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
    uint64_t v36 = (uint64_t)v45;
    uint64_t v39 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v25, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v24);
    uint64_t v38 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }

  uint64_t v42 = (uint64_t)v47;
  outlined init with take of ICUNumberFormatter.Signature( v36,  (uint64_t)v47,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  outlined init with take of ICUNumberFormatter.Signature( v42,  v54,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  return __swift_destroy_boxed_opaque_existential_1(v38);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle@<X0>( Swift::Int *a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v4 = String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.format(_:)(*a1);
  uint64_t result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.locale(_:)( a1,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  uint64_t v1 = 0x79636E6572727563LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x746E6563726570LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7265626D756ELL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys.init(stringValue:)( a1,  a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hash(into:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( void *a1)
{
  return String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.format(_:)( Swift::Double a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v14, v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v22 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    outlined init with take of LocalePreferences?( (uint64_t)v14,  (uint64_t)v11,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v17 = specialized FloatingPointFormatStyle.format(_:)();
    uint64_t v19 = v23;
    uint64_t v20 = (uint64_t)v11;
LABEL_6:
    uint64_t v21 = v22;
    goto LABEL_7;
  }

  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v22 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    outlined init with take of LocalePreferences?( (uint64_t)v14,  (uint64_t)v5,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
    uint64_t v17 = specialized FloatingPointFormatStyle.Percent.format(_:)(specialized static ICUPercentNumberFormatter.create<A>(for:));
    uint64_t v19 = v24;
    uint64_t v20 = (uint64_t)v5;
    goto LABEL_6;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v14,  (uint64_t)v8,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  uint64_t v17 = specialized FloatingPointFormatStyle.Percent.format(_:)((uint64_t (*)(uint64_t))specialized static ICUCurrencyNumberFormatter.create<A>(for:));
  uint64_t v19 = v18;
  uint64_t v20 = (uint64_t)v8;
  uint64_t v21 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
LABEL_7:
  outlined destroy of Any?(v20, v21);
  uint64_t v25 = v17;
  uint64_t v26 = v19;
  result._unint64_t object = v26;
  result._uint64_t countAndFlagsBits = v25;
  return result;
}

uint64_t specialized FloatingPointFormatStyle.format(_:)()
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (!specialized static ICUNumberFormatter.create<A>(for:)( v0,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>)) {
    return Double.description.getter();
  }
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  uint64_t v1 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  MEMORY[0x1895F8858](v1);
  v7[17] = 0;
  int v2 = unumf_resultToString();
  if (v2 <= 0)
  {
    swift_release();
    swift_release();
    return Double.description.getter();
  }

  uint64_t v3 = specialized String.init(_utf16:)((uint64_t)v7, v2);
  uint64_t v5 = v4;
  swift_release();
  swift_release();
  if (!v5) {
    return Double.description.getter();
  }
  return v3;
}

uint64_t specialized FloatingPointFormatStyle.Currency.format(_:)()
{
  return specialized FloatingPointFormatStyle.Percent.format(_:)((uint64_t (*)(uint64_t))specialized static ICUCurrencyNumberFormatter.create<A>(for:));
}

uint64_t specialized FloatingPointFormatStyle.Percent.format(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (!a1(v1)) {
    return Double.description.getter();
  }
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  uint64_t v2 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  MEMORY[0x1895F8858](v2);
  v8[17] = 0;
  int v3 = unumf_resultToString();
  if (v3 <= 0)
  {
    swift_release();
    swift_release();
    return Double.description.getter();
  }

  uint64_t v4 = specialized String.init(_utf16:)((uint64_t)v8, v3);
  uint64_t v6 = v5;
  swift_release();
  swift_release();
  if (!v6) {
    return Double.description.getter();
  }
  return v4;
}

uint64_t specialized FloatingPointFormatStyle.Percent.format(_:)()
{
  return specialized FloatingPointFormatStyle.Percent.format(_:)(specialized static ICUPercentNumberFormatter.create<A>(for:));
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.locale(_:)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v49 = a6;
  char v45 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (uint64_t *)((char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v11);
  uint64_t v43 = (uint64_t)&v42 - v14;
  char v46 = a3;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (uint64_t *)((char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v42 - v19;
  uint64_t v44 = a4;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (uint64_t *)((char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v22);
  uint64_t v26 = (char *)&v42 - v25;
  uint64_t v27 = a5(0LL);
  MEMORY[0x1895F8858](v27);
  uint64_t v29 = (char *)&v42 - v28;
  uint64_t v30 = *a1;
  uint64_t v48 = a1[1];
  outlined init with copy of ICUNumberFormatter.Signature(v47, (uint64_t)&v42 - v28, a5);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v32 = v46;
      outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v20, v46);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v20, (uint64_t)v18, v32);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v33 = v48;
      *uint64_t v18 = v30;
      v18[1] = v33;
      outlined destroy of Any?((uint64_t)v20, v32);
      uint64_t v34 = (uint64_t)v18;
    }

    else
    {
      uint64_t v39 = v43;
      uint64_t v32 = v45;
      outlined init with take of LocalePreferences?((uint64_t)v29, v43, v45);
      outlined init with copy of (Hashable & Sendable)?(v39, (uint64_t)v13, v32);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v40 = v48;
      *uint64_t v13 = v30;
      v13[1] = v40;
      outlined destroy of Any?(v39, v32);
      uint64_t v34 = (uint64_t)v13;
    }

    uint64_t v37 = v49;
    uint64_t v38 = v32;
  }

  else
  {
    uint64_t v35 = v44;
    outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v26, v44);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v26, (uint64_t)v24, v35);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v36 = v48;
    *uint64_t v24 = v30;
    v24[1] = v36;
    outlined destroy of Any?((uint64_t)v26, v35);
    uint64_t v34 = (uint64_t)v24;
    uint64_t v37 = v49;
    uint64_t v38 = v35;
  }

  outlined init with take of LocalePreferences?(v34, v37, v38);
  return swift_storeEnumTagMultiPayload();
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature( v15,  (uint64_t)v11,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v11,  v13,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v9,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      Hasher._combine(_:)(1uLL);
      NSDecimal.FormatStyle.Currency.hash(into:)(a1);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }

    else
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v6,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      Hasher._combine(_:)(2uLL);
      NSDecimal.FormatStyle.Percent.hash(into:)(a1);
      uint64_t v18 = (uint64_t)v6;
      uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }

  else
  {
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v12,  type metadata accessor for NSDecimal.FormatStyle);
    Hasher._combine(_:)(0LL);
    NSDecimal.FormatStyle.hash(into:)(a1);
    uint64_t v18 = (uint64_t)v12;
    uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle;
  }

  return outlined destroy of ICUNumberFormatter.Signature(v18, v19);
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v41 = *(void *)(v2 - 8);
  uint64_t v42 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v40 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v38);
  uint64_t v39 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v37 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v34);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v31);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v44 = *(void *)(v17 - 8);
  uint64_t v45 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature( v43,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  (uint64_t)v8,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      char v47 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();
      uint64_t v22 = v35;
      uint64_t v23 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
      uint64_t v24 = v37;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v24);
      uint64_t v25 = (uint64_t)v8;
    }

    else
    {
      uint64_t v21 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v27 = v39;
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  v39,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      char v48 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();
      uint64_t v28 = v40;
      uint64_t v23 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
      uint64_t v29 = v42;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v29);
      uint64_t v25 = v27;
    }
  }

  else
  {
    uint64_t v21 = type metadata accessor for NSDecimal.FormatStyle;
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  (uint64_t)v13,  type metadata accessor for NSDecimal.FormatStyle);
    char v46 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();
    uint64_t v23 = v45;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
    uint64_t v26 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v26);
    uint64_t v25 = (uint64_t)v13;
  }

  outlined destroy of ICUNumberFormatter.Signature(v25, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v19, v23);
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys>);
  uint64_t v53 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  uint64_t v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys>);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x1895F8858](v4);
  char v59 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys>);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys>);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1895F8858](v58);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v43 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = a1[3];
  uint64_t v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();
  uint64_t v60 = v9;
  uint64_t v23 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23) {
    goto LABEL_9;
  }
  uint64_t v44 = v16;
  uint64_t v45 = v19;
  char v46 = v13;
  char v47 = v21;
  uint64_t v24 = v57;
  uint64_t v25 = v58;
  uint64_t v27 = v59;
  uint64_t v26 = v60;
  uint64_t v62 = v10;
  uint64_t v28 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v28 + 16) != 1LL)
  {
    uint64_t v29 = v25;
    uint64_t v30 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t *v32 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v30 - 8) + 104LL))( v32,  *MEMORY[0x189619358],  v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v29);
LABEL_9:
    uint64_t v37 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v37);
  }

  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      char v64 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
      uint64_t v35 = (uint64_t)v44;
      uint64_t v36 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
      uint64_t v37 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      char v65 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();
      uint64_t v33 = v55;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
      uint64_t v39 = (uint64_t)v46;
      uint64_t v40 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v41 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v25);
      swift_storeEnumTagMultiPayload();
      uint64_t v35 = v39;
      uint64_t v37 = (uint64_t)v61;
    }
  }

  else
  {
    char v63 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for NSDecimal.FormatStyle(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
    uint64_t v35 = (uint64_t)v45;
    uint64_t v38 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
    uint64_t v37 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }

  uint64_t v42 = (uint64_t)v47;
  outlined init with take of ICUNumberFormatter.Signature( v35,  (uint64_t)v47,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  outlined init with take of ICUNumberFormatter.Signature( v42,  v54,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  return __swift_destroy_boxed_opaque_existential_1(v37);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle@<X0>( Swift::Double *a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v4 = String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.format(_:)(*a1);
  uint64_t result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.locale(_:)( a1,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format( void *a1)
{
  return String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.format(_:)(NSDecimal *a1)
{
  void (*v53)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  Swift::String v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  Swift::String v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  void *v80;
  unint64_t v81;
  Swift::String v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  Swift::String v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  Swift::String v96;
  int v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  void *v107;
  unint64_t v108;
  Swift::String v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  __int16 v119;
  __int16 v120;
  int v121;
  __int16 v122;
  __int16 v123;
  Swift::String v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  __int16 v129;
  __int16 v130;
  int v131;
  __int16 v132;
  __int16 v133;
  Swift::String v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  __int16 v139;
  __int16 v140;
  int v141;
  __int16 v142;
  __int16 v143;
  Swift::String v144;
  int v145;
  Swift::String v146;
  Swift::String v147;
  Swift::String v148;
  unint64_t v149;
  uint64_t (*v150)(uint64_t);
  uint64_t v151;
  Swift::String v152;
  Swift::String v153;
  Swift::String v154;
  unint64_t v155;
  Swift::String v156;
  Swift::String v157;
  Swift::String v158;
  unint64_t v159;
  uint64_t v160;
  void *v161;
  Swift::String result;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  void *v170;
  unint64_t v171;
  unint64_t v172;
  _BYTE v173[20];
  uint64_t v174;
  unint64_t v175;
  _BYTE v176[140];
  unsigned int rawValue;
  __int128 v178;
  unsigned int v3 = v2;
  uint64_t v4 = v1;
  v5._rawValue = a1;
  uint64_t v172 = (unint64_t)a1 >> 32;
  unint64_t v170 = 0LL;
  uint64_t v171 = (unint64_t)a1 >> 48;
  uint64_t v169 = v1 >> 16;
  unint64_t v6 = HIDWORD(v1);
  char v7 = (char *)HIWORD(v1);
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v167 = (uint64_t)&v163 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v166 = (uint64_t)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v164);
  uint64_t v165 = (uint64_t)&v163 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v168, (uint64_t)v18, v19);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = (void *)v166;
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v18,  v166,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v22 = specialized static ICUCurrencyNumberFormatter.create(for:)(v21);
      if (v22)
      {
        uint64_t v23 = *(void *)(v22 + 16);
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        uint64_t v24 = v170;
        ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v23, (uint64_t)v5._rawValue, v4, v3);
        if (!v24) {
          goto LABEL_98;
        }

        swift_release();
        unint64_t v170 = 0LL;
      }

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.locale(_:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v4);
  unint64_t v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v7);
  uint64_t v34 = (uint64_t)&v34 - v8;
  uint64_t v9 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (uint64_t *)((char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v23, v26);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      unint64_t v28 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v23,  (uint64_t)v14,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v14,  (uint64_t)v11,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v11 = v24;
      v11[1] = v25;
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v14,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v29 = (uint64_t)v11;
    }

    else
    {
      unint64_t v28 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v32 = v34;
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v23,  v34,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      outlined init with copy of ICUNumberFormatter.Signature( v32,  (uint64_t)v6,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      void *v6 = v24;
      v6[1] = v25;
      outlined destroy of ICUNumberFormatter.Signature(v32, type metadata accessor for NSDecimal.FormatStyle.Percent);
      uint64_t v29 = (uint64_t)v6;
    }

    uint64_t v30 = v35;
    unint64_t v31 = v28;
  }

  else
  {
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v23,  (uint64_t)v20,  type metadata accessor for NSDecimal.FormatStyle);
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v17,  type metadata accessor for NSDecimal.FormatStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v17 = v24;
    v17[1] = v25;
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v29 = (uint64_t)v17;
    uint64_t v30 = v35;
    unint64_t v31 = type metadata accessor for NSDecimal.FormatStyle;
  }

  outlined init with take of ICUNumberFormatter.Signature(v29, v30, v31);
  return swift_storeEnumTagMultiPayload();
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature( v15,  (uint64_t)v11,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v11,  v13,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x74616D726F66LL && a2 == 0xE600000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle@<X0>( NSDecimal **a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v4 = String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.format(_:)(*a1);
  uint64_t result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t specialized static ICUNumberFormatter.create<A>(for:)(uint64_t a1)
{
  return specialized static ICUNumberFormatter.create<A>(for:)( a1,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
}

uint64_t specialized static ICUNumberFormatter.create<A>(for:)(uint64_t a1, uint64_t *a2)
{
  void (*v18)(void *__return_ptr, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int isUniquelyReferenced_nonNull_native;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  int64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t result;
  uint64_t v66;
  int64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  char *v76;
  void v77[18];
  void v78[20];
  v78[18] = *MEMORY[0x1895F89C0];
  uint64_t v4 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  unsigned int v74 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v76 = (char *)&v66 - v8;
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v66 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a2);
  outlined init with copy of ICUNumberFormatter.Signature( a1 + *(int *)(v11 + 36),  (uint64_t)v10,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 472);
  swift_unknownObjectRetain();
  uint64_t v15 = v14(ObjectType, v12);
  uint64_t v17 = v16;
  swift_unknownObjectRelease();
  uint64_t v18 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 464);
  swift_unknownObjectRetain();
  v18(v77, ObjectType, v12);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v19 = &v10[*(int *)(v4 + 20)];
  *(void *)uint64_t v19 = v15;
  *((void *)v19 + 1) = v17;
  uint64_t v72 = v4;
  outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)&v10[*(int *)(v4 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v21 = static ICUNumberFormatter.cache;
  uint64_t v20 = *(void *)algn_18C5CBA58;
  uint64_t v22 = *(void *)algn_18C5CBA58 + 16LL;
  uint64_t v23 = (os_unfair_lock_s *)(*(void *)algn_18C5CBA58 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v23);
  uint64_t v24 = (void *)specialized closure #1 in FormatterCache.formatter(for:creator:)(v22, (uint64_t)v10);
  uint64_t v75 = v23;
  os_unfair_lock_unlock(v23);
  swift_release();
  if (v24 != (void *)1) {
    goto LABEL_62;
  }
  uint64_t v71 = v21;
  NumberFormatStyleConfiguration.Collection.skeleton.getter();
  unint64_t v26 = v25;
  unint64_t v28 = v27;
  uint64_t v29 = *(void *)v19;
  type metadata accessor for ICUNumberFormatter();
  uint64_t v24 = (void *)swift_allocObject();
  __int128 v24[3] = v26;
  void v24[4] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = specialized _copyCollectionToContiguousArray<A>(_:)(v26, v28);
  swift_bridgeObjectRelease();
  LODWORD(v77[0]) = 0;
  uint64_t v32 = v30[2];
  if (v32 >> 31)
  {
    __break(1u);
    goto LABEL_22;
  }

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  Swift::String v33 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  uint64_t v19 = (char *)v75;
  uint64_t v32 = (unint64_t)v76;
  if (!v33) {
    goto LABEL_8;
  }
  if (SLODWORD(v77[0]) > 0)
  {
    unumf_close();
LABEL_8:
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    uint64_t v24 = 0LL;
    goto LABEL_10;
  }

  v24[2] = v33;
LABEL_10:
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)v19);
  uint64_t v34 = *(void *)(*(void *)(v20 + 16) + 16LL);
  uint64_t v70 = *(void *)(v20 + 16);
  if (v71 >= v34) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)uint64_t v22 = MEMORY[0x18961AFF0];
  }
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v10,  v32,  type metadata accessor for ICUNumberFormatter.Signature);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v77[0] = *(void *)v22;
  uint64_t v29 = v77[0];
  *(void *)uint64_t v22 = 0x8000000000000000LL;
  unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
  uint64_t v37 = *(void *)(v29 + 16);
  uint64_t v38 = (v36 & 1) == 0;
  unsigned int v39 = v37 + v38;
  if (!__OFADD__(v37, v38))
  {
    LOBYTE(v22) = v36;
    if (*(void *)(v29 + 24) < v39)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v39,  isUniquelyReferenced_nonNull_native);
      unsigned int v40 = v77[0];
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
      if ((v22 & 1) != (v42 & 1)) {
        goto LABEL_65;
      }
      unint64_t v31 = v41;
LABEL_19:
      uint64_t v43 = v74;
      if ((v22 & 1) != 0)
      {
LABEL_20:
        uint64_t v44 = *(void *)(v40 + 56);
        unint64_t v45 = 8 * v31;
        swift_release();
        *(void *)(v44 + v45) = v24;
LABEL_61:
        *(void *)(v20 + 16) = v40;
        swift_bridgeObjectRelease();
        outlined destroy of ICUNumberFormatter.Signature(v32, type metadata accessor for ICUNumberFormatter.Signature);
        os_unfair_lock_unlock((os_unfair_lock_t)v19);
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_62:
        swift_release();
        outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v10,  type metadata accessor for ICUNumberFormatter.Signature);
        return (uint64_t)v24;
      }

uint64_t specialized static ICUCurrencyNumberFormatter.create<A>(for:)(void *a1)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  int64_t v62;
  char *v63;
  os_unfair_lock_s *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  void v71[19];
  void v72[18];
  _BYTE v73[152];
  uint64_t v2 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  uint64_t v66 = *((void *)v2 - 1);
  uint64_t v3 = MEMORY[0x1895F8858](v2);
  uint64_t v67 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v61 - v5;
  uint64_t v69 = (uint64_t)a1
  uint64_t v7 = a1[3];
  uint64_t v70 = (int *)a1[2];
  uint64_t v8 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v68 = v10(ObjectType, v8);
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v13(v72, ObjectType, v8);
  uint64_t v14 = (uint64_t)v6;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v73,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( v69,  (uint64_t)v6,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v15 = &v6[v2[5]];
  *(void *)uint64_t v15 = v70;
  *((void *)v15 + 1) = v7;
  uint64_t v16 = (uint64_t *)&v6[v2[6]];
  *uint64_t v16 = v68;
  v16[1] = v12;
  uint64_t v70 = v2;
  uint64_t v17 = (uint64_t)&v6[v2[7]];
  outlined init with take of LocalePreferences?( (uint64_t)v73,  v17,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v19 = static ICUCurrencyNumberFormatter.cache;
  uint64_t v18 = *(void *)algn_18C5CBA68;
  uint64_t v20 = *(void *)algn_18C5CBA68 + 16LL;
  uint64_t v21 = (os_unfair_lock_s *)(*(void *)algn_18C5CBA68 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v21);
  uint64_t v22 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v20, v14);
  os_unfair_lock_unlock(v21);
  swift_release();
  if (v22 != 1) {
    goto LABEL_51;
  }
  uint64_t v68 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v14);
  uint64_t v69 = v19;
  uint64_t v24 = v23;
  uint64_t v25 = *v16;
  unint64_t v26 = v16[1];
  outlined init with take of LocalePreferences?( v17,  (uint64_t)v72,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v71,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  uint64_t v22 = (uint64_t)ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v68, v24, v25, v26, (uint64_t)v71);
  swift_retain();
  os_unfair_lock_lock(v21);
  unint64_t v27 = *(void *)(*(void *)(v18 + 16) + 16LL);
  unint64_t v28 = v21;
  uint64_t v68 = *(void *)(v18 + 16);
  if (v69 >= v27) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)uint64_t v20 = MEMORY[0x18961AFF0];
  }
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v71[0] = *(void *)v20;
  uint64_t v30 = v71[0];
  *(void *)uint64_t v20 = 0x8000000000000000LL;
  uint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  Swift::String v33 = *(void *)(v30 + 16);
  uint64_t v34 = (v31 & 1) == 0;
  uint64_t v35 = v33 + v34;
  if (__OFADD__(v33, v34))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v20) = v31;
    if (*(void *)(v30 + 24) < v35)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v35,  isUniquelyReferenced_nonNull_native);
      uint64_t v36 = v71[0];
      uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      if ((v20 & 1) != (v38 & 1)) {
        goto LABEL_54;
      }
      uint64_t v32 = v37;
      if ((v20 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_14:
      unsigned int v39 = *(void *)(v36 + 56);
      unsigned int v40 = 8 * v32;
      swift_release();
      *(void *)(v39 + v40) = v22;
LABEL_50:
      *(void *)(v18 + 16) = v36;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v28);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_51:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( v14,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return v22;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v36 = v30;
      if ((v31 & 1) != 0) {
        goto LABEL_14;
      }
LABEL_49:
      uint64_t v58 = v67;
      char v59 = v32;
      outlined init with copy of ICUNumberFormatter.Signature( v14,  v67,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v59, v58, v22, (void *)v36);
      goto LABEL_50;
    }
  }

  uint64_t v61 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  unint64_t v41 = static _DictionaryStorage.copy(original:)();
  uint64_t v36 = v41;
  if (!*(void *)(v30 + 16))
  {
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v32 = v61;
    if ((v20 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }

  char v64 = v28;
  char v65 = v14;
  uint64_t v42 = (char *)(v41 + 64);
  uint64_t v43 = 1LL << *(_BYTE *)(v36 + 32);
  char v63 = (char *)(v30 + 64);
  uint64_t v44 = (unint64_t)(v43 + 63) >> 6;
  if (v36 != v30 || v42 >= &v63[8 * v44]) {
    memmove(v42, v63, 8 * v44);
  }
  unint64_t v45 = 0LL;
  *(void *)(v36 + 16) = *(void *)(v30 + 16);
  Swift::String v46 = 1LL << *(_BYTE *)(v30 + 32);
  int v47 = -1LL;
  if (v46 < 64) {
    int v47 = ~(-1LL << v46);
  }
  uint64_t v48 = v47 & *(void *)(v30 + 64);
  uint64_t v62 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    unint64_t v28 = v64;
    uint64_t v14 = v65;
    if (v48)
    {
      uint64_t v69 = (v48 - 1) & v48;
      uint64_t v70 = v45;
      uint64_t v49 = __clz(__rbit64(v48)) | ((void)v45 << 6);
      goto LABEL_24;
    }

    uint64_t v54 = (int64_t)v45 + 1;
    if (__OFADD__(v45, 1LL))
    {
      __break(1u);
      goto LABEL_53;
    }

    if (v54 >= v62) {
      goto LABEL_48;
    }
    uint64_t v55 = *(void *)&v63[8 * v54];
    uint64_t v56 = (int64_t)v45 + 1;
    if (!v55)
    {
      uint64_t v56 = v54 + 1;
      if (v54 + 1 >= v62) {
        goto LABEL_48;
      }
      uint64_t v55 = *(void *)&v63[8 * v56];
      if (!v55)
      {
        uint64_t v56 = v54 + 2;
        if (v54 + 2 >= v62) {
          goto LABEL_48;
        }
        uint64_t v55 = *(void *)&v63[8 * v56];
        if (!v55)
        {
          uint64_t v56 = v54 + 3;
          if (v54 + 3 >= v62) {
            goto LABEL_48;
          }
          uint64_t v55 = *(void *)&v63[8 * v56];
          if (!v55)
          {
            uint64_t v56 = v54 + 4;
            if (v54 + 4 >= v62) {
              goto LABEL_48;
            }
            uint64_t v55 = *(void *)&v63[8 * v56];
            if (!v55)
            {
              uint64_t v56 = v54 + 5;
              if (v54 + 5 >= v62) {
                goto LABEL_48;
              }
              uint64_t v55 = *(void *)&v63[8 * v56];
              if (!v55)
              {
                uint64_t v56 = v54 + 6;
                if (v54 + 6 >= v62) {
                  goto LABEL_48;
                }
                uint64_t v55 = *(void *)&v63[8 * v56];
                if (!v55) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t specialized static ICUPercentNumberFormatter.create<A>(for:)(uint64_t a1)
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void v18[18];
  _BYTE v19[152];
  uint64_t v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for ICUPercentNumberFormatter();
  uint64_t v16 = a1
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 472);
  swift_unknownObjectRetain();
  uint64_t v8 = v7(ObjectType, v5);
  uint64_t v10 = v9;
  swift_unknownObjectRelease();
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v18, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v18,  (uint64_t)v19,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( v16,  (uint64_t)v4,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v12 = (uint64_t *)&v4[*(int *)(v2 + 20)];
  char *v12 = v8;
  v12[1] = v10;
  outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)&v4[*(int *)(v2 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v13 = static ICUPercentNumberFormatter._create(with:)((uint64_t)v4);
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v4,  type metadata accessor for ICUPercentNumberFormatter.Signature);
  return v13;
}

uint64_t outlined init with copy of String.LocalizationValue.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.Storage(uint64_t a1)
{
  return a1;
}

void specialized IntegerFormatStyle.hash(into:)(uint64_t a1, uint64_t *a2)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  uint64_t v58;
  Swift::UInt64 v59;
  Swift::UInt64 v60;
  int v61;
  Swift::UInt v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  Swift::UInt v67;
  int *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  void v104[18];
  _BYTE v105[144];
  _BYTE v106[152];
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  uint64_t v83 = v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v9);
  uint64_t v84 = (uint64_t)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v2[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v104, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v104,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      uint64_t v17 = 0;
    }

    else
    {
      uint64_t v17 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v17);
    uint64_t v18 = v87;
    uint64_t v79 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v18 + 16));
      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v20 = v18 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v20 += 16LL;
          --v19;
        }

        while (v19);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }

void specialized IntegerFormatStyle.Currency.hash(into:)(uint64_t a1, uint64_t *a2)
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  void *v46;
  void *v47;
  char *v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  uint64_t v59;
  Swift::UInt64 v60;
  Swift::UInt64 v61;
  uint64_t v62;
  int v63;
  Swift::UInt v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  Swift::UInt v68;
  int *v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  void v104[18];
  _BYTE v105[144];
  _BYTE v106[152];
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v83 = v6;
  uint64_t v84 = v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v82 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  Swift::UInt8 v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
  swift_unknownObjectRetain();
  if ((v14(ObjectType, v12) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v12 + 64))(ObjectType, v12);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 464);
    swift_unknownObjectRetain();
    v16(v104, ObjectType, v12);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v104,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      Swift::UInt8 v15 = 0;
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      uint64_t v18 = 0;
    }

    else
    {
      uint64_t v18 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v18);
    uint64_t v19 = v87;
    uint64_t v80 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16LL;
          --v20;
        }

        while (v20);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89) {
            goto LABEL_15;
          }
          goto LABEL_21;
        }

uint64_t specialized static IntegerFormatStyle.Currency.== infix(_:_:)( __int128 *a1, __int128 *a2, uint64_t *a3)
{
  __int128 v6 = *a1;
  __int128 v10 = *a2;
  __int128 v11 = v6;
  BOOL v7 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)a1 + *(int *)(v8 + 40),  (char *)a2 + *(int *)(v8 + 40));
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)( a1,  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)( a1,  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32),  *(void *)(a2 + 24));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)( a1,  *(void *)a2,  *(void *)(a2 + 8),  *(_BYTE *)(a2 + 16));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

void specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)( __int128 *a1, __int128 *a2)
{
  uint64_t v3 = (char *)sub_182F75B58
     + 4
     * byte_183725982[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v8)];
  __asm { BR              X10 }

uint64_t sub_182F75B58()
{
  unint64_t v1 = (_OWORD *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v0 - 216);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v15);
  if (_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v15))
  {
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v16,  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v17,  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v18);
    char v9 = 0;
  }

  else
  {
    uint64_t v2 = (_OWORD *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v15);
    __int128 v3 = v1[5];
    v13[4] = v1[4];
    v13[5] = v3;
    *(_OWORD *)Swift::UInt8 v14 = v1[6];
    *(_OWORD *)&v14[10] = *(_OWORD *)((char *)v1 + 106);
    __int128 v4 = v1[1];
    v13[0] = *v1;
    v13[1] = v4;
    __int128 v5 = v1[3];
    void v13[2] = v1[2];
    v13[3] = v5;
    __int128 v6 = v2[5];
    v11[4] = v2[4];
    v11[5] = v6;
    *(_OWORD *)uint64_t v12 = v2[6];
    *(_OWORD *)&v12[10] = *(_OWORD *)((char *)v2 + 106);
    __int128 v7 = v2[1];
    v11[0] = *v2;
    v11[1] = v7;
    __int128 v8 = v2[3];
    void v11[2] = v2[2];
    v11[3] = v8;
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v17,  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v16,  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v16,  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v17,  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    char v9 = specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)v13, (uint64_t *)v11);
    outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v18);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v17,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v16,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }

  return v9 & 1;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( uint64_t a1, uint64_t a2)
{
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v7, (uint64_t)v10);
    uint64_t v3 = v11;
    __int128 v4 = __swift_project_boxed_opaque_existential_1(v10, v11);
    char v5 = openEquatable #1 <A>(_:) in static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( (uint64_t)v4,  a2,  v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }

  else
  {
    uint64_t v8 = 0LL;
    memset(v7, 0, sizeof(v7));
    outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Equatable?);
    char v5 = 0;
  }

  return v5 & 1;
}

void specialized static String.LocalizationValue.FormatArgument.Storage.== infix(_:_:)( uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_182F76350()
{
  if (v16[232])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    outlined destroy of Any?( (uint64_t)v16,  &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.Storage, String.LocalizationValue.FormatArgument.Storage));
    char v1 = 0;
  }

  else
  {
    outlined init with take of Any(v12, &v9);
    outlined init with take of Any(v0, &v14);
    uint64_t v2 = v10;
    uint64_t v3 = __swift_project_boxed_opaque_existential_1(&v9, v10);
    v13[3] = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16LL))( boxed_opaque_existential_1,  v3,  v2);
    uint64_t v5 = v15;
    __int128 v6 = __swift_project_boxed_opaque_existential_1(&v14, v15);
    v11[3] = v5;
    __int128 v7 = __swift_allocate_boxed_opaque_existential_1(v11);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v5 - 8) + 16LL))(v7, v6, v5);
    char v1 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( (uint64_t)v13,  (uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v16);
  }

  return v1 & 1;
}

void specialized static String.LocalizationValue.FormatArgument.CodableStorage.== infix(_:_:)( uint64_t a1, uint64_t a2)
{
  __int16 v113 = (char *)a2;
  uint64_t v112 = a1;
  uint64_t v71 = 0LL;
  *(void *)&v115[1716] = *MEMORY[0x1895F89C0];
  v69[0] = &v114;
  v69[1] = v115;
  uint64_t v2 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL);
  uint64_t v3 = MEMORY[0x1895F8858](v2);
  uint64_t v96 = (char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v97 = (char *)v69 - v5;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1895F8858](v74);
  uint64_t v80 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1895F8858](v7);
  uint64_t v79 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1895F8858](v72);
  uint64_t v76 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v91);
  uint64_t v86 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v84 = (char *)v69 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v85 = (char *)v69 - v14;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  MEMORY[0x1895F8858](v90);
  uint64_t v92 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v95 = (char *)v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  unint64_t v110 = (char *)v69 - v19;
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1895F8858](v73);
  uint64_t v78 = (char *)v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1895F8858](v21);
  uint64_t v77 = (char *)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1895F8858](v70);
  uint64_t v75 = (char *)v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  uint64_t v24 = MEMORY[0x1895F8858](v88);
  uint64_t v83 = (char *)v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v81 = (char *)v69 - v27;
  MEMORY[0x1895F8858](v26);
  uint64_t v82 = (char *)v69 - v28;
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  MEMORY[0x1895F8858](v87);
  uint64_t v89 = (char *)v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL);
  uint64_t v31 = MEMORY[0x1895F8858](v30);
  uint64_t v93 = (char *)v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v31);
  uint64_t v94 = (char *)v69 - v33;
  uint64_t v111 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
  uint64_t v34 = MEMORY[0x1895F8858](v111);
  uint64_t v109 = (char *)v69 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = MEMORY[0x1895F8858](v34);
  uint64_t v107 = (char *)v69 - v37;
  uint64_t v38 = MEMORY[0x1895F8858](v36);
  uint64_t v108 = (char *)v69 - v39;
  uint64_t v40 = MEMORY[0x1895F8858](v38);
  uint64_t v106 = (char *)v69 - v41;
  uint64_t v42 = MEMORY[0x1895F8858](v40);
  uint64_t v105 = (char *)v69 - v43;
  uint64_t v44 = MEMORY[0x1895F8858](v42);
  uint64_t v104 = (char *)v69 - v45;
  uint64_t v46 = MEMORY[0x1895F8858](v44);
  uint64_t v103 = (char *)v69 - v47;
  uint64_t v48 = MEMORY[0x1895F8858](v46);
  uint64_t v102 = (char *)v69 - v49;
  uint64_t v50 = MEMORY[0x1895F8858](v48);
  uint64_t v101 = (char *)v69 - v51;
  uint64_t v52 = MEMORY[0x1895F8858](v50);
  uint64_t v99 = (char *)v69 - v53;
  uint64_t v54 = MEMORY[0x1895F8858](v52);
  uint64_t v100 = (char *)v69 - v55;
  uint64_t v56 = MEMORY[0x1895F8858](v54);
  uint64_t v98 = (char *)v69 - v57;
  uint64_t v58 = MEMORY[0x1895F8858](v56);
  uint64_t v59 = MEMORY[0x1895F8858](v58);
  uint64_t v60 = MEMORY[0x1895F8858](v59);
  uint64_t v61 = MEMORY[0x1895F8858](v60);
  uint64_t v62 = MEMORY[0x1895F8858](v61);
  MEMORY[0x1895F8858](v62);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.CodableStorage, String.LocalizationValue.FormatArgument.CodableStorage));
  uint64_t v64 = MEMORY[0x1895F8858](v63);
  uint64_t v66 = (char *)v69 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = (uint64_t)&v66[*(int *)(v64 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature( v112,  (uint64_t)v66,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  uint64_t v112 = v67;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v113,  v67,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  __int16 v113 = v66;
  uint64_t v68 = (char *)&loc_182F78190 + dword_182F7B2D4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_182F781A0()
{
  uint64_t v3 = v1[1];
  uint64_t v2 = v1[2];
  uint64_t v4 = v1[4];
  uint64_t v6 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v7 = (void *)v1[9];
  *(void *)(v0 + 352) = v1[10];
  *(void *)(v0 + 368) = v1[11];
  *(void *)(v0 + 384) = v1[13];
  uint64_t v8 = *(uint64_t **)(v0 + 416);
  if (swift_getEnumCaseMultiPayload())
  {

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of Any?( *(void *)(v0 + 432),  &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.CodableStorage, String.LocalizationValue.FormatArgument.CodableStorage));
    char v9 = 0;
  }

  else
  {
    uint64_t v11 = v1[12];
    uint64_t v12 = v1[8];
    uint64_t v13 = v1[5];
    uint64_t v14 = v1[3];
    uint64_t v15 = *v1;
    uint64_t v17 = *v8;
    uint64_t v16 = v8[1];
    uint64_t v18 = v8[2];
    uint64_t v19 = v8[3];
    *(void *)(v0 + 2outlined init with copy of Any(v0 + 128, v0 + 88) = v18;
    uint64_t v20 = v8[4];
    uint64_t v21 = v8[5];
    uint64_t v22 = v8[6];
    *(void *)(v0 + 304) = v22;
    uint64_t v24 = (void *)v8[9];
    uint64_t v23 = v8[10];
    *(void *)(v0 + 328) = v23;
    *(void *)(v0 + 336) = v16;
    uint64_t v25 = v8[13];
    *(void *)(v0 + 400) = v25;
    *(void *)(v0 + 1600) = v15;
    *(void *)(v0 + 1608) = v3;
    *(void *)(v0 + 1616) = v2;
    *(void *)(v0 + 1624) = v14;
    *(void *)(v0 + 1632) = v4;
    *(void *)(v0 + 1640) = v13;
    *(void *)(v0 + 344) = v6;
    *(void *)(v0 + 1648) = v6;
    *(void *)(v0 + 1656) = v5;
    *(void *)(v0 + 1664) = v12;
    *(void *)(v0 + 1672) = v7;
    *(void *)(v0 + 1680) = *(void *)(v0 + 352);
    *(void *)(v0 + 16outlined init with copy of Any(v0 + 128, v0 + 88) = *(void *)(v0 + 368);
    *(void *)(v0 + 1696) = v11;
    *(void *)(v0 + 1704) = *(void *)(v0 + 384);
    *(void *)(v0 + 1328) = v17;
    *(void *)(v0 + 1336) = v16;
    *(void *)(v0 + 1344) = v18;
    *(void *)(v0 + 1352) = v19;
    *(void *)(v0 + 1360) = v20;
    *(void *)(v0 + 1368) = v21;
    __int128 v26 = *(_OWORD *)(v8 + 7);
    *(_OWORD *)(v0 + 272) = v26;
    *(_OWORD *)(v0 + 1384) = v26;
    *(void *)(v0 + 1376) = v22;
    *(void *)(v0 + 1400) = v24;
    __int128 v27 = *(_OWORD *)(v8 + 11);
    *(_OWORD *)(v0 + 416) = v27;
    *(_OWORD *)(v0 + 1416) = v27;
    *(void *)(v0 + 1408) = v23;
    *(void *)(v0 + 1432) = v25;
    char v9 = ((uint64_t (*)(uint64_t, uint64_t))static LocalizedStringResource.== infix(_:_:))(v0 + 1600, v0 + 1328);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ICUNumberFormatter.Signature( *(void *)(v0 + 432),  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }

  return v9 & 1;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.== infix(_:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1895F8858](v39);
  uint64_t v40 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1895F8858](v38);
  uint64_t v41 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (__int128 *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (__int128 *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (__int128 *)((char *)&v37 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = (uint64_t)&v19[*(int *)(v20 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature( a1,  (uint64_t)v19,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature( v42,  v21,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v13,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v41;
        outlined init with take of LocalePreferences?( v21,  v41,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
        __int128 v24 = *(_OWORD *)v13;
        __int128 v43 = *(_OWORD *)v23;
        __int128 v44 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0)
        {
          BOOL v25 = *((void *)v13 + 2) == *(void *)(v23 + 16) && *((void *)v13 + 3) == *(void *)(v23 + 24);
          if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( &v13[*(int *)(v38 + 40)],  v23 + *(int *)(v38 + 40)) & 1) != 0)
          {
            __int128 v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            uint64_t v27 = (uint64_t)v13;
LABEL_18:
            outlined destroy of Any?(v27, v26);
            uint64_t v31 = v23;
LABEL_26:
            outlined destroy of Any?(v31, v26);
            outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v19,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
            return 1LL;
          }
        }

        uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        uint64_t v33 = (uint64_t)v13;
LABEL_28:
        outlined destroy of Any?(v33, v32);
        uint64_t v36 = v23;
LABEL_30:
        outlined destroy of Any?(v36, v32);
        outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v19,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
        return 0LL;
      }

      uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      uint64_t v29 = (uint64_t)v13;
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v10,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v23 = v40;
        outlined init with take of LocalePreferences?( v21,  v40,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
        __int128 v30 = *v10;
        __int128 v43 = *(_OWORD *)v23;
        __int128 v44 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v10 + *(int *)(v39 + 36),  v23 + *(int *)(v39 + 36)) & 1) != 0)
        {
          __int128 v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
          uint64_t v27 = (uint64_t)v10;
          goto LABEL_18;
        }

        uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        uint64_t v33 = (uint64_t)v10;
        goto LABEL_28;
      }

      uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      uint64_t v29 = (uint64_t)v10;
    }
  }

  else
  {
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?( v21,  (uint64_t)v7,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      __int128 v34 = *v16;
      __int128 v43 = *v7;
      __int128 v44 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v16 + *(int *)(v5 + 36),  (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        __int128 v26 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
        outlined destroy of Any?( (uint64_t)v16,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
        uint64_t v31 = (uint64_t)v7;
        goto LABEL_26;
      }

      uint64_t v32 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      outlined destroy of Any?( (uint64_t)v16,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      uint64_t v36 = (uint64_t)v7;
      goto LABEL_30;
    }

    uint64_t v28 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    uint64_t v29 = (uint64_t)v16;
  }

  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?( (uint64_t)v19,  &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  return 0LL;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.== infix(_:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1895F8858](v38);
  uint64_t v39 = (__int128 *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1895F8858](v37);
  uint64_t v40 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (__int128 *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v11 = (__int128 *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v36 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (__int128 *)((char *)&v36 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature( a1,  (uint64_t)v20,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature( v41,  v21,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v14,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v40;
        outlined init with take of LocalePreferences?( v21,  v40,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
        __int128 v24 = *(_OWORD *)v14;
        __int128 v42 = *(_OWORD *)v23;
        __int128 v43 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0)
        {
          BOOL v25 = *((void *)v14 + 2) == *(void *)(v23 + 16) && *((void *)v14 + 3) == *(void *)(v23 + 24);
          if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( &v14[*(int *)(v37 + 40)],  v23 + *(int *)(v37 + 40)) & 1) != 0)
          {
            __int128 v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            outlined destroy of Any?( v23,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
            uint64_t v27 = (uint64_t)v14;
LABEL_25:
            outlined destroy of Any?(v27, v26);
            outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
            return 1LL;
          }
        }

        uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        outlined destroy of Any?(v23, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
        uint64_t v33 = (uint64_t)v14;
        goto LABEL_28;
      }

      uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      uint64_t v29 = (uint64_t)v14;
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v11,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        __int128 v30 = v39;
        outlined init with take of LocalePreferences?( v21,  (uint64_t)v39,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
        __int128 v31 = *v11;
        __int128 v42 = *v30;
        __int128 v43 = v31;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v11 + *(int *)(v38 + 36),  (char *)v30 + *(int *)(v38 + 36)) & 1) != 0)
        {
          __int128 v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
          outlined destroy of Any?( (uint64_t)v30,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          uint64_t v27 = (uint64_t)v11;
          goto LABEL_25;
        }

        uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        outlined destroy of Any?( (uint64_t)v30,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
        uint64_t v33 = (uint64_t)v11;
        goto LABEL_28;
      }

      uint64_t v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      uint64_t v29 = (uint64_t)v11;
    }
  }

  else
  {
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?( v21,  (uint64_t)v7,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      __int128 v34 = *v16;
      __int128 v42 = *v7;
      __int128 v43 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v16 + *(int *)(v5 + 36),  (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        __int128 v26 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
        outlined destroy of Any?( (uint64_t)v7,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
        uint64_t v27 = (uint64_t)v16;
        goto LABEL_25;
      }

      uint64_t v32 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      outlined destroy of Any?( (uint64_t)v7,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      uint64_t v33 = (uint64_t)v16;
LABEL_28:
      outlined destroy of Any?(v33, v32);
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      return 0LL;
    }

    uint64_t v28 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    uint64_t v29 = (uint64_t)v16;
  }

  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?( (uint64_t)v20,  &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  return 0LL;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.== infix(_:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v37 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v37);
  uint64_t v38 = (__int128 *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v36);
  uint64_t v39 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (__int128 *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v11 = (__int128 *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v35 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (__int128 *)((char *)&v35 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format));
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature( a1,  (uint64_t)v20,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature( v40,  v21,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v14,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v39;
        outlined init with take of ICUNumberFormatter.Signature( v21,  v39,  type metadata accessor for NSDecimal.FormatStyle.Currency);
        __int128 v24 = *(_OWORD *)v14;
        __int128 v41 = *(_OWORD *)v23;
        __int128 v42 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (*((void *)v14 + 2) == *(void *)(v23 + 16) && *((void *)v14 + 3) == *(void *)(v23 + 24)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( &v14[*(int *)(v36 + 24)],  v23 + *(int *)(v36 + 24)) & 1) != 0)
        {
          BOOL v25 = type metadata accessor for NSDecimal.FormatStyle.Currency;
          outlined destroy of ICUNumberFormatter.Signature( v23,  type metadata accessor for NSDecimal.FormatStyle.Currency);
          uint64_t v26 = (uint64_t)v14;
LABEL_23:
          outlined destroy of ICUNumberFormatter.Signature(v26, v25);
          outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
          return 1LL;
        }

        __int128 v31 = type metadata accessor for NSDecimal.FormatStyle.Currency;
        outlined destroy of ICUNumberFormatter.Signature(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
        uint64_t v32 = (uint64_t)v14;
        goto LABEL_26;
      }

      uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v28 = (uint64_t)v14;
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v11,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v29 = v38;
        outlined init with take of ICUNumberFormatter.Signature( v21,  (uint64_t)v38,  type metadata accessor for NSDecimal.FormatStyle.Percent);
        __int128 v30 = *v11;
        __int128 v41 = *v29;
        __int128 v42 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v11 + *(int *)(v37 + 20),  (char *)v29 + *(int *)(v37 + 20)) & 1) != 0)
        {
          BOOL v25 = type metadata accessor for NSDecimal.FormatStyle.Percent;
          outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v29,  type metadata accessor for NSDecimal.FormatStyle.Percent);
          uint64_t v26 = (uint64_t)v11;
          goto LABEL_23;
        }

        __int128 v31 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v29,  type metadata accessor for NSDecimal.FormatStyle.Percent);
        uint64_t v32 = (uint64_t)v11;
        goto LABEL_26;
      }

      uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v28 = (uint64_t)v11;
    }
  }

  else
  {
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ICUNumberFormatter.Signature( v21,  (uint64_t)v7,  type metadata accessor for NSDecimal.FormatStyle);
      __int128 v33 = *v16;
      __int128 v41 = *v7;
      __int128 v42 = v33;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v16 + *(int *)(v5 + 20),  (char *)v7 + *(int *)(v5 + 20)) & 1) != 0)
      {
        BOOL v25 = type metadata accessor for NSDecimal.FormatStyle;
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
        uint64_t v26 = (uint64_t)v16;
        goto LABEL_23;
      }

      __int128 v31 = type metadata accessor for NSDecimal.FormatStyle;
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      uint64_t v32 = (uint64_t)v16;
LABEL_26:
      outlined destroy of ICUNumberFormatter.Signature(v32, v31);
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
      return 0LL;
    }

    uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle;
    uint64_t v28 = (uint64_t)v16;
  }

  outlined destroy of ICUNumberFormatter.Signature(v28, v27);
  outlined destroy of Any?( (uint64_t)v20,  &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format));
  return 0LL;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.== infix(_:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1895F8858](v39);
  uint64_t v40 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1895F8858](v38);
  uint64_t v41 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (__int128 *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (__int128 *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (__int128 *)((char *)&v37 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = (uint64_t)&v19[*(int *)(v20 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature( a1,  (uint64_t)v19,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature( v42,  v21,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v13,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v41;
        outlined init with take of LocalePreferences?( v21,  v41,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
        __int128 v24 = *(_OWORD *)v13;
        __int128 v43 = *(_OWORD *)v23;
        __int128 v44 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0)
        {
          BOOL v25 = *((void *)v13 + 2) == *(void *)(v23 + 16) && *((void *)v13 + 3) == *(void *)(v23 + 24);
          if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( &v13[*(int *)(v38 + 40)],  v23 + *(int *)(v38 + 40)) & 1) != 0)
          {
            uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
            uint64_t v27 = (uint64_t)v13;
LABEL_18:
            outlined destroy of Any?(v27, v26);
            uint64_t v31 = v23;
LABEL_26:
            outlined destroy of Any?(v31, v26);
            outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v19,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
            return 1LL;
          }
        }

        uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
        uint64_t v33 = (uint64_t)v13;
LABEL_28:
        outlined destroy of Any?(v33, v32);
        uint64_t v36 = v23;
LABEL_30:
        outlined destroy of Any?(v36, v32);
        outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v19,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
        return 0LL;
      }

      uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      uint64_t v29 = (uint64_t)v13;
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v10,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v23 = v40;
        outlined init with take of LocalePreferences?( v21,  v40,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
        __int128 v30 = *v10;
        __int128 v43 = *(_OWORD *)v23;
        __int128 v44 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v10 + *(int *)(v39 + 36),  v23 + *(int *)(v39 + 36)) & 1) != 0)
        {
          uint64_t v26 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
          uint64_t v27 = (uint64_t)v10;
          goto LABEL_18;
        }

        uint64_t v32 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
        uint64_t v33 = (uint64_t)v10;
        goto LABEL_28;
      }

      uint64_t v28 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      uint64_t v29 = (uint64_t)v10;
    }
  }

  else
  {
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?( v21,  (uint64_t)v7,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      __int128 v34 = *v16;
      __int128 v43 = *v7;
      __int128 v44 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v16 + *(int *)(v5 + 36),  (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        outlined destroy of Any?( (uint64_t)v16,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        uint64_t v31 = (uint64_t)v7;
        goto LABEL_26;
      }

      uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      outlined destroy of Any?( (uint64_t)v16,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      uint64_t v36 = (uint64_t)v7;
      goto LABEL_30;
    }

    uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    uint64_t v29 = (uint64_t)v16;
  }

  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?( (uint64_t)v19,  &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  return 0LL;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.== infix(_:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1895F8858](v38);
  uint64_t v39 = (__int128 *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1895F8858](v37);
  uint64_t v40 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (__int128 *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v11 = (__int128 *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v36 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (__int128 *)((char *)&v36 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature( a1,  (uint64_t)v20,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature( v41,  v21,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v14,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v40;
        outlined init with take of LocalePreferences?( v21,  v40,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
        __int128 v24 = *(_OWORD *)v14;
        __int128 v42 = *(_OWORD *)v23;
        __int128 v43 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0)
        {
          BOOL v25 = *((void *)v14 + 2) == *(void *)(v23 + 16) && *((void *)v14 + 3) == *(void *)(v23 + 24);
          if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( &v14[*(int *)(v37 + 40)],  v23 + *(int *)(v37 + 40)) & 1) != 0)
          {
            uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
            outlined destroy of Any?( v23,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            uint64_t v27 = (uint64_t)v14;
LABEL_25:
            outlined destroy of Any?(v27, v26);
            outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
            return 1LL;
          }
        }

        uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
        outlined destroy of Any?( v23,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
        uint64_t v33 = (uint64_t)v14;
        goto LABEL_28;
      }

      uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      uint64_t v29 = (uint64_t)v14;
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v11,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        __int128 v30 = v39;
        outlined init with take of LocalePreferences?( v21,  (uint64_t)v39,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
        __int128 v31 = *v11;
        __int128 v42 = *v30;
        __int128 v43 = v31;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v11 + *(int *)(v38 + 36),  (char *)v30 + *(int *)(v38 + 36)) & 1) != 0)
        {
          uint64_t v26 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
          outlined destroy of Any?( (uint64_t)v30,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
          uint64_t v27 = (uint64_t)v11;
          goto LABEL_25;
        }

        uint64_t v32 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
        outlined destroy of Any?( (uint64_t)v30,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
        uint64_t v33 = (uint64_t)v11;
        goto LABEL_28;
      }

      uint64_t v28 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      uint64_t v29 = (uint64_t)v11;
    }
  }

  else
  {
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?( v21,  (uint64_t)v7,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      __int128 v34 = *v16;
      __int128 v42 = *v7;
      __int128 v43 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v16 + *(int *)(v5 + 36),  (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        uint64_t v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        outlined destroy of Any?( (uint64_t)v7,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        uint64_t v27 = (uint64_t)v16;
        goto LABEL_25;
      }

      uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      outlined destroy of Any?( (uint64_t)v7,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      uint64_t v33 = (uint64_t)v16;
LABEL_28:
      outlined destroy of Any?(v33, v32);
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      return 0LL;
    }

    uint64_t v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    uint64_t v29 = (uint64_t)v16;
  }

  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?( (uint64_t)v20,  &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  return 0LL;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper( uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t a1)
{
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument(uint64_t result)
{
  uint64_t v1 = result;
  switch(*(_BYTE *)(result + 112))
  {
    case 0:
      goto LABEL_3;
    case 1:
      uint64_t result = swift_release();
      break;
    case 2:
    case 3:
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v1 + 32);
      uint64_t result = v1 + 64;
LABEL_3:
      uint64_t result = __swift_destroy_boxed_opaque_existential_1(result);
      break;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_release();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
      swift_bridgeObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument(uint64_t a1, uint64_t a2)
{
  switch(*(_BYTE *)(a2 + 112))
  {
    case 0:
      uint64_t v4 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 112) = 0;
      break;
    case 1:
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 112) = 1;
      swift_retain();
      break;
    case 2:
      *(void *)a1 = *(void *)a2;
      uint64_t v9 = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = v9;
      uint64_t v10 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v10;
      uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
      swift_retain();
      swift_retain();
      v11(a1 + 32, a2 + 32, v10);
      uint64_t v12 = *(void *)(a2 + 88);
      *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 64, a2 + 64);
      *(_BYTE *)(a1 + 112) = 2;
      break;
    case 3:
      *(void *)a1 = *(void *)a2;
      uint64_t v13 = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = v13;
      uint64_t v14 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v14;
      uint64_t v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v14 - 8);
      swift_retain();
      swift_retain();
      v15(a1 + 32, a2 + 32, v14);
      uint64_t v16 = *(void *)(a2 + 88);
      *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v16;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 64, a2 + 64);
      *(_BYTE *)(a1 + 112) = 3;
      break;
    case 4:
      uint64_t v17 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v17;
      uint64_t v18 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v18;
      uint64_t v19 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v19;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v21 = *(void **)(a2 + 72);
      uint64_t v20 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = v21;
      *(void *)(a1 + 80) = v20;
      uint64_t v22 = *(void *)(a2 + 96);
      *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v22;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = 4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v23 = v21;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      break;
    case 5:
      *(void *)a1 = *(void *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 112) = 5;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      break;
    default:
      __int128 v5 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v5;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      __int128 v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v7;
      break;
  }

  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
    switch(*((_BYTE *)a2 + 112))
    {
      case 0:
        uint64_t v4 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v4;
        (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
        *(_BYTE *)(a1 + 112) = 0;
        break;
      case 1:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *(_BYTE *)(a1 + 112) = 1;
        swift_retain();
        break;
      case 2:
        uint64_t v5 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v5;
        uint64_t v6 = *((void *)a2 + 3);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = v6;
        uint64_t v7 = *((void *)a2 + 7);
        *(void *)(a1 + 56) = v7;
        uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
        swift_retain();
        swift_retain();
        v8(a1 + 32, (uint64_t)(a2 + 2), v7);
        uint64_t v9 = *((void *)a2 + 11);
        *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, (uint64_t)(a2 + 4));
        *(_BYTE *)(a1 + 112) = 2;
        break;
      case 3:
        uint64_t v10 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v10;
        uint64_t v11 = *((void *)a2 + 3);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = v11;
        uint64_t v12 = *((void *)a2 + 7);
        *(void *)(a1 + 56) = v12;
        uint64_t v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
        swift_retain();
        swift_retain();
        v13(a1 + 32, (uint64_t)(a2 + 2), v12);
        uint64_t v14 = *((void *)a2 + 11);
        *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v14;
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 64, (uint64_t)(a2 + 4));
        *(_BYTE *)(a1 + 112) = 3;
        break;
      case 4:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
        uint64_t v15 = (void *)*((void *)a2 + 9);
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        *(_BYTE *)(a1 + 112) = 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v16 = v15;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        break;
      case 5:
        *(void *)a1 = *(void *)a2;
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
        *(_OWORD *)(a1 + 16) = a2[1];
        *(_BYTE *)(a1 + 112) = 5;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        break;
      default:
        __int128 v17 = *a2;
        __int128 v18 = a2[1];
        __int128 v19 = a2[3];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v19;
        *(_OWORD *)a1 = v17;
        *(_OWORD *)(a1 + 16) = v18;
        __int128 v20 = a2[4];
        __int128 v21 = a2[5];
        __int128 v22 = a2[6];
        *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
        *(_OWORD *)(a1 + 80) = v21;
        *(_OWORD *)(a1 + 96) = v22;
        *(_OWORD *)(a1 + 64) = v20;
        break;
    }
  }

  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
    __int128 v4 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v4;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    __int128 v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + outlined init with copy of Any(v0 + 128, v0 + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(void *)__n128 result = a2 - 250;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 113) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 113) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 112) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument()
{
  return &type metadata for String.LocalizationValue.FormatArgument;
}

void outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  __asm { BR              X10 }

uint64_t sub_182F7D13C()
{
  return swift_unknownObjectRetain();
}

void outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  __asm { BR              X11 }

uint64_t sub_182F7D218()
{
  return swift_unknownObjectRelease();
}

__n128 __swift_memcpy122_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(_OWORD *)(a1 + 106) = *(__int128 *)((char *)a2 + 106);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  return &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format()
{
  return swift_storeEnumTagMultiPayload();
}

void type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format()
{
  if (v0 <= 0x3F)
  {
    type metadata accessor for IntegerFormatStyle<Int>( 319LL,  &lazy cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int,  MEMORY[0x189618740],  (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Currency);
    if (v1 <= 0x3F)
    {
      type metadata accessor for IntegerFormatStyle<Int>( 319LL,  &lazy cache variable for type metadata for IntegerFormatStyle<Int>.Percent,  (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int,  MEMORY[0x189618740],  (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent);
      if (v2 <= 0x3F) {
        swift_initEnumMetadataMultiPayload();
      }
    }
  }

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618788], MEMORY[0x189618740]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618768], MEMORY[0x189618740]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618798], MEMORY[0x189618740]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int v8 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v8 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 36);
      uint64_t v27 = a1 + v26;
      uint64_t v28 = (uint64_t)a2 + v26;
      *(void *)uint64_t v27 = *(uint64_t *)((char *)a2 + v26);
      *(_BYTE *)(v27 + 8) = *((_BYTE *)a2 + v26 + 8);
      __int128 v29 = *(_OWORD *)((char *)a2 + v26 + 32);
      *(_OWORD *)(v27 + 16) = *(_OWORD *)((char *)a2 + v26 + 16);
      *(_OWORD *)(v27 + 32) = v29;
      *(_OWORD *)(v27 + 48) = *(_OWORD *)((char *)a2 + v26 + 48);
      *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v26 + 57);
      *(_BYTE *)(v27 + 73) = *((_BYTE *)a2 + v26 + 73);
      *(_BYTE *)(v27 + 76) = *((_BYTE *)a2 + v26 + 76);
      *(_WORD *)(v27 + 74) = *(_WORD *)((char *)a2 + v26 + 74);
      *(_BYTE *)(v27 + 77) = *((_BYTE *)a2 + v26 + 77);
      __int128 v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v31 = v30[9];
      uint64_t v32 = (void *)(v27 + v31);
      uint64_t v33 = (const void *)(v28 + v31);
      uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v34))
      {
LABEL_10:
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64LL));
LABEL_14:
        uint64_t v43 = v30[10];
        uint64_t v44 = v27 + v43;
        uint64_t v45 = v28 + v43;
        *(void *)uint64_t v44 = *(void *)v45;
        *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
        *(_BYTE *)(v27 + v30[11]) = *(_BYTE *)(v28 + v30[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v13 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v13;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
        uint64_t v15 = a1 + v14;
        uint64_t v16 = (uint64_t)a2 + v14;
        *(void *)uint64_t v15 = *(uint64_t *)((char *)a2 + v14);
        *(_BYTE *)(v15 + 8) = *((_BYTE *)a2 + v14 + 8);
        __int128 v17 = *(_OWORD *)((char *)a2 + v14 + 32);
        *(_OWORD *)(v15 + 16) = *(_OWORD *)((char *)a2 + v14 + 16);
        *(_OWORD *)(v15 + 32) = v17;
        *(_OWORD *)(v15 + 48) = *(_OWORD *)((char *)a2 + v14 + 48);
        *(_OWORD *)(v15 + 57) = *(_OWORD *)((char *)a2 + v14 + 57);
        *(_BYTE *)(v15 + 73) = *((_BYTE *)a2 + v14 + 73);
        *(_DWORD *)(v15 + 74) = *(_DWORD *)((char *)a2 + v14 + 74);
        *(_BYTE *)(v15 + 78) = *((_BYTE *)a2 + v14 + 78);
        __int128 v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v19 = v18[9];
        __int128 v20 = (void *)(v15 + v19);
        __int128 v21 = (const void *)(v16 + v19);
        uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v23 = *(void *)(v22 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
        {
          uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
        }

        uint64_t v40 = v18[10];
        uint64_t v41 = v15 + v40;
        uint64_t v42 = v16 + v40;
        *(void *)uint64_t v41 = *(void *)v42;
        *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
        *(_BYTE *)(v15 + v18[11]) = *(_BYTE *)(v16 + v18[11]);
        *(_BYTE *)(v15 + v18[12]) = *(_BYTE *)(v16 + v18[12]);
        goto LABEL_15;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a4) + 36);
      uint64_t v27 = a1 + v36;
      uint64_t v28 = (uint64_t)a2 + v36;
      *(void *)uint64_t v27 = *(uint64_t *)((char *)a2 + v36);
      *(_BYTE *)(v27 + 8) = *((_BYTE *)a2 + v36 + 8);
      __int128 v37 = *(_OWORD *)((char *)a2 + v36 + 32);
      *(_OWORD *)(v27 + 16) = *(_OWORD *)((char *)a2 + v36 + 16);
      *(_OWORD *)(v27 + 32) = v37;
      *(_OWORD *)(v27 + 48) = *(_OWORD *)((char *)a2 + v36 + 48);
      *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v36 + 57);
      *(_BYTE *)(v27 + 73) = *((_BYTE *)a2 + v36 + 73);
      *(_BYTE *)(v27 + 76) = *((_BYTE *)a2 + v36 + 76);
      *(_WORD *)(v27 + 74) = *(_WORD *)((char *)a2 + v36 + 74);
      *(_BYTE *)(v27 + 77) = *((_BYTE *)a2 + v36 + 77);
      __int128 v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v38 = v30[9];
      uint64_t v32 = (void *)(v27 + v38);
      uint64_t v33 = (const void *)(v28 + v38);
      uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v35 = *(void *)(v34 - 8);
    }

    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
    goto LABEL_14;
  }

  uint64_t v25 = *a2;
  *(void *)a1 = *a2;
  a1 = v25 + ((v8 + 16LL) & ~(unint64_t)v8);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = a5;
LABEL_6:
    uint64_t v11 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v10) + 36);
    uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v10 = a3;
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a4) + 40);
  uint64_t v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    uint64_t v24 = a6;
  }

  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v12 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v12;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
      uint64_t v14 = a1 + v13;
      uint64_t v15 = a2 + v13;
      *(void *)uint64_t v14 = *(void *)(a2 + v13);
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(a2 + v13 + 8);
      __int128 v16 = *(_OWORD *)(a2 + v13 + 32);
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(a2 + v13 + 16);
      *(_OWORD *)(v14 + 32) = v16;
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(a2 + v13 + 48);
      *(_OWORD *)(v14 + 57) = *(_OWORD *)(a2 + v13 + 57);
      *(_BYTE *)(v14 + 73) = *(_BYTE *)(a2 + v13 + 73);
      *(_DWORD *)(v14 + 74) = *(_DWORD *)(a2 + v13 + 74);
      *(_BYTE *)(v14 + 78) = *(_BYTE *)(a2 + v13 + 78);
      __int128 v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v18 = v17[9];
      uint64_t v19 = (void *)(v14 + v18);
      __int128 v20 = (const void *)(v15 + v18);
      uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
      }

      uint64_t v42 = v17[10];
      uint64_t v43 = v14 + v42;
      uint64_t v44 = v15 + v42;
      *(void *)uint64_t v43 = *(void *)v44;
      *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
      *(_BYTE *)(v14 + v17[11]) = *(_BYTE *)(v15 + v17[11]);
      uint64_t v45 = v17[12];
      uint64_t v40 = (_BYTE *)(v14 + v45);
      uint64_t v41 = (_BYTE *)(v15 + v45);
      goto LABEL_13;
    }

    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    uint64_t v24 = a4;
  }

  uint64_t v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v24) + 36);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)uint64_t v26 = *(void *)(a2 + v25);
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(a2 + v25 + 8);
  __int128 v28 = *(_OWORD *)(a2 + v25 + 32);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)(a2 + v25 + 16);
  *(_OWORD *)(v26 + 32) = v28;
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a2 + v25 + 48);
  *(_OWORD *)(v26 + 57) = *(_OWORD *)(a2 + v25 + 57);
  *(_BYTE *)(v26 + 73) = *(_BYTE *)(a2 + v25 + 73);
  *(_BYTE *)(v26 + 76) = *(_BYTE *)(a2 + v25 + 76);
  *(_WORD *)(v26 + 74) = *(_WORD *)(a2 + v25 + 74);
  *(_BYTE *)(v26 + 77) = *(_BYTE *)(a2 + v25 + 77);
  __int128 v29 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v30 = v29[9];
  uint64_t v31 = (void *)(v26 + v30);
  uint64_t v32 = (const void *)(v27 + v30);
  uint64_t v33 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
  }

  uint64_t v36 = v29[10];
  uint64_t v37 = v26 + v36;
  uint64_t v38 = v27 + v36;
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  uint64_t v39 = v29[11];
  uint64_t v40 = (_BYTE *)(v26 + v39);
  uint64_t v41 = (_BYTE *)(v27 + v39);
LABEL_13:
  *uint64_t v40 = *v41;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature(a1, a4);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v27 = a7;
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        uint64_t v14 = a1 + v13;
        uint64_t v15 = a2 + v13;
        uint64_t v16 = *(void *)(a2 + v13);
        *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
        *(void *)uint64_t v14 = v16;
        __int128 v17 = *(_OWORD *)(v15 + 57);
        __int128 v19 = *(_OWORD *)(v15 + 32);
        __int128 v18 = *(_OWORD *)(v15 + 48);
        *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
        *(_OWORD *)(v14 + 32) = v19;
        *(_OWORD *)(v14 + 48) = v18;
        *(_OWORD *)(v14 + 57) = v17;
        *(_BYTE *)(v14 + 73) = *(_BYTE *)(v15 + 73);
        *(_DWORD *)(v14 + 74) = *(_DWORD *)(v15 + 74);
        *(_BYTE *)(v14 + 78) = *(_BYTE *)(v15 + 78);
        __int128 v20 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v21 = v20[9];
        uint64_t v22 = (void *)(v14 + v21);
        uint64_t v23 = (const void *)(v15 + v21);
        uint64_t v24 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v25 = *(void *)(v24 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
        }

        uint64_t v49 = v20[10];
        uint64_t v50 = v14 + v49;
        uint64_t v51 = (uint64_t *)(v15 + v49);
        uint64_t v52 = *v51;
        *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
        *(void *)uint64_t v50 = v52;
        *(_BYTE *)(v14 + v20[11]) = *(_BYTE *)(v15 + v20[11]);
        uint64_t v53 = v20[12];
        uint64_t v47 = (_BYTE *)(v14 + v53);
        uint64_t v48 = (_BYTE *)(v15 + v53);
LABEL_14:
        *uint64_t v47 = *v48;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v27 = a5;
    }

    uint64_t v28 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v27) + 36);
    uint64_t v29 = a1 + v28;
    uint64_t v30 = a2 + v28;
    uint64_t v31 = *(void *)(a2 + v28);
    *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
    *(void *)uint64_t v29 = v31;
    __int128 v32 = *(_OWORD *)(v30 + 57);
    __int128 v34 = *(_OWORD *)(v30 + 32);
    __int128 v33 = *(_OWORD *)(v30 + 48);
    *(_OWORD *)(v29 + 16) = *(_OWORD *)(v30 + 16);
    *(_OWORD *)(v29 + 32) = v34;
    *(_OWORD *)(v29 + 48) = v33;
    *(_OWORD *)(v29 + 57) = v32;
    *(_BYTE *)(v29 + 73) = *(_BYTE *)(v30 + 73);
    LOBYTE(v31) = *(_BYTE *)(v30 + 76);
    *(_WORD *)(v29 + 74) = *(_WORD *)(v30 + 74);
    *(_BYTE *)(v29 + 76) = v31;
    *(_BYTE *)(v29 + 77) = *(_BYTE *)(v30 + 77);
    uint64_t v35 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v36 = v35[9];
    uint64_t v37 = (void *)(v29 + v36);
    uint64_t v38 = (const void *)(v30 + v36);
    uint64_t v39 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v38, 1LL, v39))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
    }

    uint64_t v42 = v35[10];
    uint64_t v43 = v29 + v42;
    uint64_t v44 = (uint64_t *)(v30 + v42);
    uint64_t v45 = *v44;
    *(_BYTE *)(v43 + 8) = *((_BYTE *)v44 + 8);
    *(void *)uint64_t v43 = v45;
    uint64_t v46 = v35[11];
    uint64_t v47 = (_BYTE *)(v29 + v46);
    uint64_t v48 = (_BYTE *)(v30 + v46);
    goto LABEL_14;
  }

  return a1;
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( _OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v24 = a6;
  }

  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      __int128 v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      *(void *)uint64_t v14 = *(void *)((char *)a2 + v13);
      __int128 v14[8] = *((_BYTE *)a2 + v13 + 8);
      __int128 v16 = *(_OWORD *)((char *)a2 + v13 + 32);
      *((_OWORD *)v14 + 1) = *(_OWORD *)((char *)a2 + v13 + 16);
      *((_OWORD *)v14 + 2) = v16;
      *((_OWORD *)v14 + 3) = *(_OWORD *)((char *)a2 + v13 + 48);
      *(_OWORD *)(v14 + 57) = *(_OWORD *)((char *)a2 + v13 + 57);
      v14[73] = *((_BYTE *)a2 + v13 + 73);
      *(_DWORD *)(v14 + 74) = *(_DWORD *)((char *)a2 + v13 + 74);
      v14[78] = *((_BYTE *)a2 + v13 + 78);
      __int128 v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v18 = v17[9];
      __int128 v19 = &v14[v18];
      __int128 v20 = &v15[v18];
      uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
      }

      uint64_t v42 = v17[10];
      uint64_t v43 = &v14[v42];
      uint64_t v44 = &v15[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      v14[v17[11]] = v15[v17[11]];
      uint64_t v45 = v17[12];
      uint64_t v40 = &v14[v45];
      uint64_t v41 = &v15[v45];
      goto LABEL_13;
    }

    *a1 = *a2;
    uint64_t v24 = a4;
  }

  uint64_t v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v24) + 36);
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)((char *)a2 + v25);
  v26[8] = *((_BYTE *)a2 + v25 + 8);
  __int128 v28 = *(_OWORD *)((char *)a2 + v25 + 32);
  *((_OWORD *)v26 + 1) = *(_OWORD *)((char *)a2 + v25 + 16);
  *((_OWORD *)v26 + 2) = v28;
  *((_OWORD *)v26 + 3) = *(_OWORD *)((char *)a2 + v25 + 48);
  *(_OWORD *)(v26 + 57) = *(_OWORD *)((char *)a2 + v25 + 57);
  v26[73] = *((_BYTE *)a2 + v25 + 73);
  v26[76] = *((_BYTE *)a2 + v25 + 76);
  *((_WORD *)v26 + 37) = *(_WORD *)((char *)a2 + v25 + 74);
  v26[77] = *((_BYTE *)a2 + v25 + 77);
  uint64_t v29 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v30 = v29[9];
  uint64_t v31 = &v26[v30];
  __int128 v32 = &v27[v30];
  uint64_t v33 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
  }

  uint64_t v36 = v29[10];
  uint64_t v37 = &v26[v36];
  uint64_t v38 = &v27[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  uint64_t v39 = v29[11];
  uint64_t v40 = &v26[v39];
  uint64_t v41 = &v27[v39];
LABEL_13:
  *uint64_t v40 = *v41;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( _OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, a4);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v25 = a7;
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        __int128 v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        uint64_t v15 = (char *)a1 + v14;
        __int128 v16 = (char *)a2 + v14;
        *(void *)uint64_t v15 = *(void *)((char *)a2 + v14);
        _OWORD v15[8] = *((_BYTE *)a2 + v14 + 8);
        __int128 v17 = *(_OWORD *)((char *)a2 + v14 + 32);
        *((_OWORD *)v15 + 1) = *(_OWORD *)((char *)a2 + v14 + 16);
        *((_OWORD *)v15 + 2) = v17;
        *((_OWORD *)v15 + 3) = *(_OWORD *)((char *)a2 + v14 + 48);
        *(_OWORD *)(v15 + 57) = *(_OWORD *)((char *)a2 + v14 + 57);
        v15[73] = *((_BYTE *)a2 + v14 + 73);
        *(_DWORD *)(v15 + 74) = *(_DWORD *)((char *)a2 + v14 + 74);
        v15[78] = *((_BYTE *)a2 + v14 + 78);
        uint64_t v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v19 = v18[9];
        __int128 v20 = &v15[v19];
        uint64_t v21 = &v16[v19];
        uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v23 = *(void *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
        {
          uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
        }

        uint64_t v43 = v18[10];
        uint64_t v44 = &v15[v43];
        uint64_t v45 = &v16[v43];
        *(void *)uint64_t v44 = *(void *)v45;
        v44[8] = v45[8];
        v15[v18[11]] = v16[v18[11]];
        uint64_t v46 = v18[12];
        uint64_t v41 = &v15[v46];
        uint64_t v42 = &v16[v46];
LABEL_14:
        *uint64_t v41 = *v42;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *a1 = *a2;
      uint64_t v25 = a5;
    }

    uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v25) + 36);
    uint64_t v27 = (char *)a1 + v26;
    __int128 v28 = (char *)a2 + v26;
    *(void *)uint64_t v27 = *(void *)((char *)a2 + v26);
    v27[8] = *((_BYTE *)a2 + v26 + 8);
    __int128 v29 = *(_OWORD *)((char *)a2 + v26 + 32);
    *((_OWORD *)v27 + 1) = *(_OWORD *)((char *)a2 + v26 + 16);
    *((_OWORD *)v27 + 2) = v29;
    *((_OWORD *)v27 + 3) = *(_OWORD *)((char *)a2 + v26 + 48);
    *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v26 + 57);
    v27[73] = *((_BYTE *)a2 + v26 + 73);
    v27[76] = *((_BYTE *)a2 + v26 + 76);
    *((_WORD *)v27 + 37) = *(_WORD *)((char *)a2 + v26 + 74);
    v27[77] = *((_BYTE *)a2 + v26 + 77);
    uint64_t v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v31 = v30[9];
    __int128 v32 = &v27[v31];
    uint64_t v33 = &v28[v31];
    uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
    }

    uint64_t v37 = v30[10];
    uint64_t v38 = &v27[v37];
    uint64_t v39 = &v28[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    uint64_t v40 = v30[11];
    uint64_t v41 = &v27[v40];
    uint64_t v42 = &v28[v40];
    goto LABEL_14;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

void type metadata completion function for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format()
{
  if (v0 <= 0x3F)
  {
    type metadata accessor for IntegerFormatStyle<Int>( 319LL,  &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double,  MEMORY[0x189618560],  (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Currency);
    if (v1 <= 0x3F)
    {
      type metadata accessor for IntegerFormatStyle<Int>( 319LL,  &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent,  (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double,  MEMORY[0x189618560],  (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent);
      if (v2 <= 0x3F) {
        swift_initEnumMetadataMultiPayload();
      }
    }
  }

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618568], MEMORY[0x189618560]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }

  return result;
}

void type metadata accessor for IntegerFormatStyle<Int>( uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v20 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = (uint64_t)a2 + v20;
      *(void *)uint64_t v21 = *(uint64_t *)((char *)a2 + v20);
      *(_BYTE *)(v21 + 8) = *((_BYTE *)a2 + v20 + 8);
      __int128 v23 = *(_OWORD *)((char *)a2 + v20 + 32);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)((char *)a2 + v20 + 16);
      *(_OWORD *)(v21 + 32) = v23;
      *(_OWORD *)(v21 + 48) = *(_OWORD *)((char *)a2 + v20 + 48);
      *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)a2 + v20 + 57);
      *(_BYTE *)(v21 + 73) = *((_BYTE *)a2 + v20 + 73);
      *(_WORD *)(v21 + 74) = *(_WORD *)((char *)a2 + v20 + 74);
      *(_BYTE *)(v21 + 76) = *((_BYTE *)a2 + v20 + 76);
      *(_BYTE *)(v21 + 77) = *((_BYTE *)a2 + v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v25 = v24[9];
      uint64_t v26 = (void *)(v21 + v25);
      uint64_t v27 = (const void *)(v22 + v25);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v30(v27, 1LL, v28))
      {
LABEL_10:
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v26, v27, *(void *)(*(void *)(v35 - 8) + 64LL));
LABEL_14:
        uint64_t v39 = v24[10];
        uint64_t v40 = v21 + v39;
        uint64_t v41 = v22 + v39;
        *(void *)uint64_t v40 = *(void *)v41;
        *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
        *(_BYTE *)(v21 + v24[11]) = *(_BYTE *)(v22 + v24[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v9 = a1 + v8;
        uint64_t v10 = (uint64_t)a2 + v8;
        *(void *)uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
        *(_BYTE *)(v9 + 8) = *((_BYTE *)a2 + v8 + 8);
        __int128 v11 = *(_OWORD *)((char *)a2 + v8 + 32);
        *(_OWORD *)(v9 + 16) = *(_OWORD *)((char *)a2 + v8 + 16);
        *(_OWORD *)(v9 + 32) = v11;
        *(_OWORD *)(v9 + 48) = *(_OWORD *)((char *)a2 + v8 + 48);
        *(_OWORD *)(v9 + 57) = *(_OWORD *)((char *)a2 + v8 + 57);
        *(_BYTE *)(v9 + 73) = *((_BYTE *)a2 + v8 + 73);
        *(_DWORD *)(v9 + 74) = *(_DWORD *)((char *)a2 + v8 + 74);
        *(_BYTE *)(v9 + 78) = *((_BYTE *)a2 + v8 + 78);
        __int128 v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v13 = v12[9];
        __dst = (void *)(v9 + v13);
        uint64_t v14 = (const void *)(v10 + v13);
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        __int128 v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1LL, v15))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0LL, 1LL, v15);
        }

        uint64_t v36 = v12[10];
        uint64_t v37 = v9 + v36;
        uint64_t v38 = v10 + v36;
        *(void *)uint64_t v37 = *(void *)v38;
        *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
        *(_BYTE *)(v9 + v12[11]) = *(_BYTE *)(v10 + v12[11]);
        *(_BYTE *)(v9 + v12[12]) = *(_BYTE *)(v10 + v12[12]);
        goto LABEL_15;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v31 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
      uint64_t v21 = a1 + v31;
      uint64_t v22 = (uint64_t)a2 + v31;
      *(void *)uint64_t v21 = *(uint64_t *)((char *)a2 + v31);
      *(_BYTE *)(v21 + 8) = *((_BYTE *)a2 + v31 + 8);
      __int128 v32 = *(_OWORD *)((char *)a2 + v31 + 32);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)((char *)a2 + v31 + 16);
      *(_OWORD *)(v21 + 32) = v32;
      *(_OWORD *)(v21 + 48) = *(_OWORD *)((char *)a2 + v31 + 48);
      *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)a2 + v31 + 57);
      *(_BYTE *)(v21 + 73) = *((_BYTE *)a2 + v31 + 73);
      *(_WORD *)(v21 + 74) = *(_WORD *)((char *)a2 + v31 + 74);
      *(_BYTE *)(v21 + 76) = *((_BYTE *)a2 + v31 + 76);
      *(_BYTE *)(v21 + 77) = *((_BYTE *)a2 + v31 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v33 = v24[9];
      uint64_t v26 = (void *)(v21 + v33);
      uint64_t v27 = (const void *)(v22 + v33);
      uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v34(v27, 1LL, v28)) {
        goto LABEL_10;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    goto LABEL_14;
  }

  uint64_t v19 = *a2;
  *(void *)a1 = *a2;
  a1 = v19 + ((v5 + 16LL) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
LABEL_6:
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle(0LL);
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format( uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
    uint64_t v19 = a1 + v18;
    uint64_t v20 = a2 + v18;
    *(void *)uint64_t v19 = *(void *)(a2 + v18);
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(a2 + v18 + 8);
    __int128 v21 = *(_OWORD *)(a2 + v18 + 32);
    *(_OWORD *)(v19 + 16) = *(_OWORD *)(a2 + v18 + 16);
    *(_OWORD *)(v19 + 32) = v21;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)(a2 + v18 + 57);
    *(_BYTE *)(v19 + 73) = *(_BYTE *)(a2 + v18 + 73);
    *(_WORD *)(v19 + 74) = *(_WORD *)(a2 + v18 + 74);
    *(_BYTE *)(v19 + 76) = *(_BYTE *)(a2 + v18 + 76);
    *(_BYTE *)(v19 + 77) = *(_BYTE *)(a2 + v18 + 77);
    uint64_t v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v23 = v22[9];
    uint64_t v24 = (void *)(v19 + v23);
    uint64_t v25 = (const void *)(v20 + v23);
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
    swift_unknownObjectRetain();
    if (v28(v25, 1LL, v26))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
    }

    uint64_t v48 = v22[10];
    uint64_t v49 = v19 + v48;
    uint64_t v50 = v20 + v48;
    *(void *)uint64_t v49 = *(void *)v50;
    *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
    uint64_t v51 = v22[11];
    uint64_t v46 = (_BYTE *)(v19 + v51);
    uint64_t v47 = (_BYTE *)(v20 + v51);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    *(void *)uint64_t v7 = *(void *)(a2 + v6);
    *(_BYTE *)(v7 + 8) = *(_BYTE *)(a2 + v6 + 8);
    __int128 v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(_BYTE *)(v7 + 73) = *(_BYTE *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(_BYTE *)(v7 + 78) = *(_BYTE *)(a2 + v6 + 78);
    uint64_t v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v11 = v10[9];
    __int128 v12 = (void *)(v7 + v11);
    uint64_t v13 = (const void *)(v8 + v11);
    uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1LL, v14))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
    }

    uint64_t v42 = v10[10];
    uint64_t v43 = v7 + v42;
    uint64_t v44 = v8 + v42;
    *(void *)uint64_t v43 = *(void *)v44;
    *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
    *(_BYTE *)(v7 + v10[11]) = *(_BYTE *)(v8 + v10[11]);
    uint64_t v45 = v10[12];
    uint64_t v46 = (_BYTE *)(v7 + v45);
    uint64_t v47 = (_BYTE *)(v8 + v45);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
    uint64_t v31 = a1 + v30;
    uint64_t v32 = a2 + v30;
    *(void *)uint64_t v31 = *(void *)(a2 + v30);
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(a2 + v30 + 8);
    __int128 v33 = *(_OWORD *)(a2 + v30 + 32);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)(a2 + v30 + 16);
    *(_OWORD *)(v31 + 32) = v33;
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(a2 + v30 + 48);
    *(_OWORD *)(v31 + 57) = *(_OWORD *)(a2 + v30 + 57);
    *(_BYTE *)(v31 + 73) = *(_BYTE *)(a2 + v30 + 73);
    *(_WORD *)(v31 + 74) = *(_WORD *)(a2 + v30 + 74);
    *(_BYTE *)(v31 + 76) = *(_BYTE *)(a2 + v30 + 76);
    *(_BYTE *)(v31 + 77) = *(_BYTE *)(a2 + v30 + 77);
    uint64_t v34 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v35 = v34[9];
    uint64_t v36 = (void *)(v31 + v35);
    uint64_t v37 = (const void *)(v32 + v35);
    uint64_t v38 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
    swift_unknownObjectRetain();
    if (v40(v37, 1LL, v38))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
    }

    uint64_t v52 = v34[10];
    uint64_t v53 = v31 + v52;
    uint64_t v54 = v32 + v52;
    *(void *)uint64_t v53 = *(void *)v54;
    *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
    uint64_t v55 = v34[11];
    uint64_t v46 = (_BYTE *)(v31 + v55);
    uint64_t v47 = (_BYTE *)(v32 + v55);
  }

  *uint64_t v46 = *v47;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format( uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( a1,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      LOBYTE(v19) = *(_BYTE *)(a2 + v19 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(_BYTE *)(v20 + 8) = v19;
      __int128 v22 = *(_OWORD *)(v21 + 57);
      __int128 v24 = *(_OWORD *)(v21 + 32);
      __int128 v23 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 57) = v22;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v19) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v19;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v26 = v25[9];
      uint64_t v27 = (void *)(v20 + v26);
      uint64_t v28 = (const void *)(v21 + v26);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1LL, v29))
      {
LABEL_9:
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(void *)(*(void *)(v38 - 8) + 64LL));
LABEL_13:
        uint64_t v46 = v25[10];
        uint64_t v47 = v20 + v46;
        uint64_t v48 = (uint64_t *)(v21 + v46);
        uint64_t v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(void *)uint64_t v47 = v49;
        uint64_t v50 = v25[11];
        uint64_t v44 = (_BYTE *)(v20 + v50);
        uint64_t v45 = (_BYTE *)(v21 + v50);
LABEL_14:
        *uint64_t v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        LOBYTE(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5) = *(_BYTE *)(a2 + v5 + 8);
        *(void *)uint64_t v6 = *(void *)v7;
        *(_BYTE *)(v6 + 8) = v5;
        __int128 v8 = *(_OWORD *)(v7 + 57);
        __int128 v10 = *(_OWORD *)(v7 + 32);
        __int128 v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(_BYTE *)(v6 + 73) = *(_BYTE *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(_BYTE *)(v6 + 78) = *(_BYTE *)(v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v12 = v11[9];
        uint64_t v13 = (void *)(v6 + v12);
        uint64_t v14 = (const void *)(v7 + v12);
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1LL, v15))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
        }

        uint64_t v39 = v11[10];
        uint64_t v40 = v6 + v39;
        uint64_t v41 = (uint64_t *)(v7 + v39);
        uint64_t v42 = *v41;
        *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
        *(void *)uint64_t v40 = v42;
        *(_BYTE *)(v6 + v11[11]) = *(_BYTE *)(v7 + v11[11]);
        uint64_t v43 = v11[12];
        uint64_t v44 = (_BYTE *)(v6 + v43);
        uint64_t v45 = (_BYTE *)(v7 + v43);
        goto LABEL_14;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v32 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
      uint64_t v20 = a1 + v32;
      uint64_t v21 = a2 + v32;
      LOBYTE(v32) = *(_BYTE *)(a2 + v32 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(_BYTE *)(v20 + 8) = v32;
      __int128 v33 = *(_OWORD *)(v21 + 57);
      __int128 v35 = *(_OWORD *)(v21 + 32);
      __int128 v34 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v35;
      *(_OWORD *)(v20 + 48) = v34;
      *(_OWORD *)(v20 + 57) = v33;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v32) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v32;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v36 = v25[9];
      uint64_t v27 = (void *)(v20 + v36);
      uint64_t v28 = (const void *)(v21 + v36);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v37(v28, 1LL, v29)) {
        goto LABEL_9;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    goto LABEL_13;
  }

  return a1;
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format( uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format( _OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  }

  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      __int128 v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
      uint64_t v7 = (char *)a1 + v6;
      __int128 v8 = (char *)a2 + v6;
      *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
      _OWORD v7[8] = *((_BYTE *)a2 + v6 + 8);
      __int128 v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((_BYTE *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((_BYTE *)a2 + v6 + 78);
      __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v11 = v10[9];
      uint64_t v12 = &v7[v11];
      uint64_t v13 = &v8[v11];
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      }

      uint64_t v35 = v10[10];
      uint64_t v36 = &v7[v35];
      uint64_t v37 = &v8[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      uint64_t v38 = v10[12];
      __int128 v33 = &v7[v38];
      __int128 v34 = &v8[v38];
      goto LABEL_13;
    }

    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  }

  uint64_t v18 = *(int *)(v17 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  __int128 v19[8] = *((_BYTE *)a2 + v18 + 8);
  __int128 v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((_BYTE *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((_BYTE *)a2 + v18 + 76);
  v19[77] = *((_BYTE *)a2 + v18 + 77);
  __int128 v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v23 = v22[9];
  __int128 v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  uint64_t v29 = v22[10];
  uint64_t v30 = &v19[v29];
  uint64_t v31 = &v20[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = v22[11];
  __int128 v33 = &v19[v32];
  __int128 v34 = &v20[v32];
LABEL_13:
  *__int128 v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format( _OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        __int128 v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v7 = (char *)a1 + v6;
        __int128 v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        _OWORD v7[8] = *((_BYTE *)a2 + v6 + 8);
        __int128 v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((_BYTE *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((_BYTE *)a2 + v6 + 78);
        __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        uint64_t v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
        }

        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        __int128 v33 = &v7[v38];
        __int128 v34 = &v8[v38];
LABEL_14:
        *__int128 v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0LL);
    }

    uint64_t v18 = *(int *)(v17 + 20);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    __int128 v19[8] = *((_BYTE *)a2 + v18 + 8);
    __int128 v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((_BYTE *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((_BYTE *)a2 + v18 + 76);
    v19[77] = *((_BYTE *)a2 + v18 + 77);
    __int128 v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v23 = v22[9];
    __int128 v24 = &v19[v23];
    uint64_t v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
    }

    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    __int128 v33 = &v19[v32];
    __int128 v34 = &v20[v32];
    goto LABEL_14;
  }

  return a1;
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format()
{
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle(319LL);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(319LL);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Percent(319LL);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182F7FDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182F7FE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm( a1,  a2,  a3,  a4,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int v12 = *(_DWORD *)(*(void *)(a4(0LL) - 8) + 80LL);
  if ((v12 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a7) + 36);
      uint64_t v28 = a1 + v27;
      uint64_t v29 = (uint64_t)a2 + v27;
      *(void *)uint64_t v28 = *(uint64_t *)((char *)a2 + v27);
      *(_BYTE *)(v28 + 8) = *((_BYTE *)a2 + v27 + 8);
      __int128 v30 = *(_OWORD *)((char *)a2 + v27 + 32);
      *(_OWORD *)(v28 + 16) = *(_OWORD *)((char *)a2 + v27 + 16);
      *(_OWORD *)(v28 + 32) = v30;
      *(_OWORD *)(v28 + 48) = *(_OWORD *)((char *)a2 + v27 + 48);
      *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)a2 + v27 + 57);
      *(_BYTE *)(v28 + 73) = *((_BYTE *)a2 + v27 + 73);
      *(_BYTE *)(v28 + 76) = *((_BYTE *)a2 + v27 + 76);
      *(_WORD *)(v28 + 74) = *(_WORD *)((char *)a2 + v27 + 74);
      *(_BYTE *)(v28 + 77) = *((_BYTE *)a2 + v27 + 77);
      uint64_t v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v32 = v31[9];
      __int128 v33 = (void *)(v28 + v32);
      __int128 v34 = (const void *)(v29 + v32);
      uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
      {
LABEL_10:
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64LL));
LABEL_14:
        uint64_t v44 = v31[10];
        uint64_t v45 = v28 + v44;
        uint64_t v46 = v29 + v44;
        *(void *)uint64_t v45 = *(void *)v46;
        *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
        *(_BYTE *)(v28 + v31[11]) = *(_BYTE *)(v29 + v31[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v14 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v14;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = (uint64_t)a2 + v15;
        *(void *)uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
        *(_BYTE *)(v16 + 8) = *((_BYTE *)a2 + v15 + 8);
        __int128 v18 = *(_OWORD *)((char *)a2 + v15 + 32);
        *(_OWORD *)(v16 + 16) = *(_OWORD *)((char *)a2 + v15 + 16);
        *(_OWORD *)(v16 + 32) = v18;
        *(_OWORD *)(v16 + 48) = *(_OWORD *)((char *)a2 + v15 + 48);
        *(_OWORD *)(v16 + 57) = *(_OWORD *)((char *)a2 + v15 + 57);
        *(_BYTE *)(v16 + 73) = *((_BYTE *)a2 + v15 + 73);
        *(_DWORD *)(v16 + 74) = *(_DWORD *)((char *)a2 + v15 + 74);
        *(_BYTE *)(v16 + 78) = *((_BYTE *)a2 + v15 + 78);
        uint64_t v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v20 = v19[9];
        __int128 v21 = (void *)(v16 + v20);
        __int128 v22 = (const void *)(v17 + v20);
        uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v21, v22, v23);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
        }

        uint64_t v41 = v19[10];
        uint64_t v42 = v16 + v41;
        uint64_t v43 = v17 + v41;
        *(void *)uint64_t v42 = *(void *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(_BYTE *)(v16 + v19[11]) = *(_BYTE *)(v17 + v19[11]);
        *(_BYTE *)(v16 + v19[12]) = *(_BYTE *)(v17 + v19[12]);
        goto LABEL_15;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 36);
      uint64_t v28 = a1 + v37;
      uint64_t v29 = (uint64_t)a2 + v37;
      *(void *)uint64_t v28 = *(uint64_t *)((char *)a2 + v37);
      *(_BYTE *)(v28 + 8) = *((_BYTE *)a2 + v37 + 8);
      __int128 v38 = *(_OWORD *)((char *)a2 + v37 + 32);
      *(_OWORD *)(v28 + 16) = *(_OWORD *)((char *)a2 + v37 + 16);
      *(_OWORD *)(v28 + 32) = v38;
      *(_OWORD *)(v28 + 48) = *(_OWORD *)((char *)a2 + v37 + 48);
      *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)a2 + v37 + 57);
      *(_BYTE *)(v28 + 73) = *((_BYTE *)a2 + v37 + 73);
      *(_BYTE *)(v28 + 76) = *((_BYTE *)a2 + v37 + 76);
      *(_WORD *)(v28 + 74) = *(_WORD *)((char *)a2 + v37 + 74);
      *(_BYTE *)(v28 + 77) = *((_BYTE *)a2 + v37 + 77);
      uint64_t v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v39 = v31[9];
      __int128 v33 = (void *)(v28 + v39);
      __int128 v34 = (const void *)(v29 + v39);
      uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v36 = *(void *)(v35 - 8);
    }

    (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
    goto LABEL_14;
  }

  uint64_t v26 = *a2;
  *(void *)a1 = *a2;
  a1 = v26 + ((v12 + 16LL) & ~(unint64_t)v12);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = a6;
LABEL_6:
    uint64_t v12 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v11) + 36);
    uint64_t v13 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v11 = a4;
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
  uint64_t v13 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v14 = v12 + *(int *)(v13 + 36);
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    uint64_t v25 = a7;
  }

  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v13 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v13;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      *(void *)uint64_t v15 = *(void *)(a2 + v14);
      *(_BYTE *)(v15 + 8) = *(_BYTE *)(a2 + v14 + 8);
      __int128 v17 = *(_OWORD *)(a2 + v14 + 32);
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(a2 + v14 + 16);
      *(_OWORD *)(v15 + 32) = v17;
      *(_OWORD *)(v15 + 48) = *(_OWORD *)(a2 + v14 + 48);
      *(_OWORD *)(v15 + 57) = *(_OWORD *)(a2 + v14 + 57);
      *(_BYTE *)(v15 + 73) = *(_BYTE *)(a2 + v14 + 73);
      *(_DWORD *)(v15 + 74) = *(_DWORD *)(a2 + v14 + 74);
      *(_BYTE *)(v15 + 78) = *(_BYTE *)(a2 + v14 + 78);
      __int128 v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v19 = v18[9];
      uint64_t v20 = (void *)(v15 + v19);
      __int128 v21 = (const void *)(v16 + v19);
      uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
      }

      uint64_t v43 = v18[10];
      uint64_t v44 = v15 + v43;
      uint64_t v45 = v16 + v43;
      *(void *)uint64_t v44 = *(void *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(_BYTE *)(v15 + v18[11]) = *(_BYTE *)(v16 + v18[11]);
      uint64_t v46 = v18[12];
      uint64_t v41 = (_BYTE *)(v15 + v46);
      uint64_t v42 = (_BYTE *)(v16 + v46);
      goto LABEL_13;
    }

    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    uint64_t v25 = a5;
  }

  uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v25) + 36);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)uint64_t v27 = *(void *)(a2 + v26);
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(a2 + v26 + 8);
  __int128 v29 = *(_OWORD *)(a2 + v26 + 32);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)(a2 + v26 + 16);
  *(_OWORD *)(v27 + 32) = v29;
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a2 + v26 + 48);
  *(_OWORD *)(v27 + 57) = *(_OWORD *)(a2 + v26 + 57);
  *(_BYTE *)(v27 + 73) = *(_BYTE *)(a2 + v26 + 73);
  *(_BYTE *)(v27 + 76) = *(_BYTE *)(a2 + v26 + 76);
  *(_WORD *)(v27 + 74) = *(_WORD *)(a2 + v26 + 74);
  *(_BYTE *)(v27 + 77) = *(_BYTE *)(a2 + v26 + 77);
  __int128 v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v31 = v30[9];
  uint64_t v32 = (void *)(v27 + v31);
  __int128 v33 = (const void *)(v28 + v31);
  uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
  }

  uint64_t v37 = v30[10];
  uint64_t v38 = v27 + v37;
  uint64_t v39 = v28 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  uint64_t v40 = v30[11];
  uint64_t v41 = (_BYTE *)(v27 + v40);
  uint64_t v42 = (_BYTE *)(v28 + v40);
LABEL_13:
  *uint64_t v41 = *v42;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature(a1, a4);
    a4(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v28 = a7;
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        uint64_t v15 = a1 + v14;
        uint64_t v16 = a2 + v14;
        uint64_t v17 = *(void *)(a2 + v14);
        *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
        *(void *)uint64_t v15 = v17;
        __int128 v18 = *(_OWORD *)(v16 + 57);
        __int128 v20 = *(_OWORD *)(v16 + 32);
        __int128 v19 = *(_OWORD *)(v16 + 48);
        *(_OWORD *)(v15 + 16) = *(_OWORD *)(v16 + 16);
        *(_OWORD *)(v15 + 32) = v20;
        *(_OWORD *)(v15 + 48) = v19;
        *(_OWORD *)(v15 + 57) = v18;
        *(_BYTE *)(v15 + 73) = *(_BYTE *)(v16 + 73);
        *(_DWORD *)(v15 + 74) = *(_DWORD *)(v16 + 74);
        *(_BYTE *)(v15 + 78) = *(_BYTE *)(v16 + 78);
        __int128 v21 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v22 = v21[9];
        uint64_t v23 = (void *)(v15 + v22);
        uint64_t v24 = (const void *)(v16 + v22);
        uint64_t v25 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
        {
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
        }

        uint64_t v50 = v21[10];
        uint64_t v51 = v15 + v50;
        uint64_t v52 = (uint64_t *)(v16 + v50);
        uint64_t v53 = *v52;
        *(_BYTE *)(v51 + 8) = *((_BYTE *)v52 + 8);
        *(void *)uint64_t v51 = v53;
        *(_BYTE *)(v15 + v21[11]) = *(_BYTE *)(v16 + v21[11]);
        uint64_t v54 = v21[12];
        uint64_t v48 = (_BYTE *)(v15 + v54);
        uint64_t v49 = (_BYTE *)(v16 + v54);
LABEL_14:
        *uint64_t v48 = *v49;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      uint64_t v28 = a5;
    }

    uint64_t v29 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v28) + 36);
    uint64_t v30 = a1 + v29;
    uint64_t v31 = a2 + v29;
    uint64_t v32 = *(void *)(a2 + v29);
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    *(void *)uint64_t v30 = v32;
    __int128 v33 = *(_OWORD *)(v31 + 57);
    __int128 v35 = *(_OWORD *)(v31 + 32);
    __int128 v34 = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(v31 + 16);
    *(_OWORD *)(v30 + 32) = v35;
    *(_OWORD *)(v30 + 48) = v34;
    *(_OWORD *)(v30 + 57) = v33;
    *(_BYTE *)(v30 + 73) = *(_BYTE *)(v31 + 73);
    LOBYTE(v32) = *(_BYTE *)(v31 + 76);
    *(_WORD *)(v30 + 74) = *(_WORD *)(v31 + 74);
    *(_BYTE *)(v30 + 76) = v32;
    *(_BYTE *)(v30 + 77) = *(_BYTE *)(v31 + 77);
    uint64_t v36 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v37 = v36[9];
    uint64_t v38 = (void *)(v30 + v37);
    uint64_t v39 = (const void *)(v31 + v37);
    uint64_t v40 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v40))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
    }

    uint64_t v43 = v36[10];
    uint64_t v44 = v30 + v43;
    uint64_t v45 = (uint64_t *)(v31 + v43);
    uint64_t v46 = *v45;
    *(_BYTE *)(v44 + 8) = *((_BYTE *)v45 + 8);
    *(void *)uint64_t v44 = v46;
    uint64_t v47 = v36[11];
    uint64_t v48 = (_BYTE *)(v30 + v47);
    uint64_t v49 = (_BYTE *)(v31 + v47);
    goto LABEL_14;
  }

  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  (void (*)(void))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( _OWORD *a1, _OWORD *a2, uint64_t a3, void (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v25 = a7;
  }

  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      __int128 v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      *(void *)uint64_t v15 = *(void *)((char *)a2 + v14);
      _OWORD v15[8] = *((_BYTE *)a2 + v14 + 8);
      __int128 v17 = *(_OWORD *)((char *)a2 + v14 + 32);
      *((_OWORD *)v15 + 1) = *(_OWORD *)((char *)a2 + v14 + 16);
      *((_OWORD *)v15 + 2) = v17;
      *((_OWORD *)v15 + 3) = *(_OWORD *)((char *)a2 + v14 + 48);
      *(_OWORD *)(v15 + 57) = *(_OWORD *)((char *)a2 + v14 + 57);
      v15[73] = *((_BYTE *)a2 + v14 + 73);
      *(_DWORD *)(v15 + 74) = *(_DWORD *)((char *)a2 + v14 + 74);
      v15[78] = *((_BYTE *)a2 + v14 + 78);
      __int128 v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v19 = v18[9];
      __int128 v20 = &v15[v19];
      __int128 v21 = &v16[v19];
      uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
      }

      uint64_t v43 = v18[10];
      uint64_t v44 = &v15[v43];
      uint64_t v45 = &v16[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      v15[v18[11]] = v16[v18[11]];
      uint64_t v46 = v18[12];
      uint64_t v41 = &v15[v46];
      uint64_t v42 = &v16[v46];
      goto LABEL_13;
    }

    *a1 = *a2;
    uint64_t v25 = a5;
  }

  uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v25) + 36);
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  *(void *)uint64_t v27 = *(void *)((char *)a2 + v26);
  v27[8] = *((_BYTE *)a2 + v26 + 8);
  __int128 v29 = *(_OWORD *)((char *)a2 + v26 + 32);
  *((_OWORD *)v27 + 1) = *(_OWORD *)((char *)a2 + v26 + 16);
  *((_OWORD *)v27 + 2) = v29;
  *((_OWORD *)v27 + 3) = *(_OWORD *)((char *)a2 + v26 + 48);
  *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v26 + 57);
  v27[73] = *((_BYTE *)a2 + v26 + 73);
  v27[76] = *((_BYTE *)a2 + v26 + 76);
  *((_WORD *)v27 + 37) = *(_WORD *)((char *)a2 + v26 + 74);
  v27[77] = *((_BYTE *)a2 + v26 + 77);
  uint64_t v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v31 = v30[9];
  uint64_t v32 = &v27[v31];
  __int128 v33 = &v28[v31];
  uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
  }

  uint64_t v37 = v30[10];
  uint64_t v38 = &v27[v37];
  uint64_t v39 = &v28[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = v39[8];
  uint64_t v40 = v30[11];
  uint64_t v41 = &v27[v40];
  uint64_t v42 = &v28[v40];
LABEL_13:
  *uint64_t v41 = *v42;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( _OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, a4);
    a4(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v26 = a7;
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        __int128 v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        uint64_t v16 = (char *)a1 + v15;
        __int128 v17 = (char *)a2 + v15;
        *(void *)uint64_t v16 = *(void *)((char *)a2 + v15);
        v16[8] = *((_BYTE *)a2 + v15 + 8);
        __int128 v18 = *(_OWORD *)((char *)a2 + v15 + 32);
        *((_OWORD *)v16 + 1) = *(_OWORD *)((char *)a2 + v15 + 16);
        *((_OWORD *)v16 + 2) = v18;
        *((_OWORD *)v16 + 3) = *(_OWORD *)((char *)a2 + v15 + 48);
        *(_OWORD *)(v16 + 57) = *(_OWORD *)((char *)a2 + v15 + 57);
        v16[73] = *((_BYTE *)a2 + v15 + 73);
        *(_DWORD *)(v16 + 74) = *(_DWORD *)((char *)a2 + v15 + 74);
        v16[78] = *((_BYTE *)a2 + v15 + 78);
        uint64_t v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v20 = v19[9];
        __int128 v21 = &v16[v20];
        uint64_t v22 = &v17[v20];
        uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
        }

        uint64_t v44 = v19[10];
        uint64_t v45 = &v16[v44];
        uint64_t v46 = &v17[v44];
        *(void *)uint64_t v45 = *(void *)v46;
        v45[8] = v46[8];
        v16[v19[11]] = v17[v19[11]];
        uint64_t v47 = v19[12];
        uint64_t v42 = &v16[v47];
        uint64_t v43 = &v17[v47];
LABEL_14:
        char *v42 = *v43;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *a1 = *a2;
      uint64_t v26 = a5;
    }

    uint64_t v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v26) + 36);
    uint64_t v28 = (char *)a1 + v27;
    __int128 v29 = (char *)a2 + v27;
    *(void *)uint64_t v28 = *(void *)((char *)a2 + v27);
    v28[8] = *((_BYTE *)a2 + v27 + 8);
    __int128 v30 = *(_OWORD *)((char *)a2 + v27 + 32);
    *((_OWORD *)v28 + 1) = *(_OWORD *)((char *)a2 + v27 + 16);
    *((_OWORD *)v28 + 2) = v30;
    *((_OWORD *)v28 + 3) = *(_OWORD *)((char *)a2 + v27 + 48);
    *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)a2 + v27 + 57);
    v28[73] = *((_BYTE *)a2 + v27 + 73);
    v28[76] = *((_BYTE *)a2 + v27 + 76);
    *((_WORD *)v28 + 37) = *(_WORD *)((char *)a2 + v27 + 74);
    v28[77] = *((_BYTE *)a2 + v27 + 77);
    uint64_t v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v32 = v31[9];
    __int128 v33 = &v28[v32];
    uint64_t v34 = &v29[v32];
    uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
    }

    uint64_t v38 = v31[10];
    uint64_t v39 = &v28[v38];
    uint64_t v40 = &v29[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v31[11];
    uint64_t v42 = &v28[v41];
    uint64_t v43 = &v29[v41];
    goto LABEL_14;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182F81090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t __swift_get_extra_inhabitant_indexTm( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182F810E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm( a1,  a2,  a3,  a4,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t __swift_store_extra_inhabitant_indexTm( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(a1, a2, a2, v7);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319LL);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle( uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL)
                             - 8)
                 + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = (uint64_t)a2 + v19;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v19);
      *(_BYTE *)(v20 + 8) = *((_BYTE *)a2 + v19 + 8);
      __int128 v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v19 + 16);
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      *(_BYTE *)(v20 + 73) = *((_BYTE *)a2 + v19 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v19 + 74);
      *(_BYTE *)(v20 + 76) = *((_BYTE *)a2 + v19 + 76);
      *(_BYTE *)(v20 + 77) = *((_BYTE *)a2 + v19 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v24 = v23[9];
      uint64_t v25 = (void *)(v20 + v24);
      uint64_t v26 = (const void *)(v21 + v24);
      uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v28 = *(void *)(v27 - 8);
      __int128 v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v29(v26, 1LL, v27))
      {
LABEL_10:
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v25, v26, *(void *)(*(void *)(v34 - 8) + 64LL));
LABEL_14:
        uint64_t v38 = v23[10];
        uint64_t v39 = v20 + v38;
        uint64_t v40 = v21 + v38;
        *(void *)uint64_t v39 = *(void *)v40;
        *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
        *(_BYTE *)(v20 + v23[11]) = *(_BYTE *)(v21 + v23[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v6 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v6;
        uint64_t v7 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = (uint64_t)a2 + v7;
        *(void *)uint64_t v8 = *(uint64_t *)((char *)a2 + v7);
        *(_BYTE *)(v8 + 8) = *((_BYTE *)a2 + v7 + 8);
        __int128 v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)((char *)a2 + v7 + 16);
        *(_OWORD *)(v8 + 32) = v10;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        *(_BYTE *)(v8 + 73) = *((_BYTE *)a2 + v7 + 73);
        *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
        *(_BYTE *)(v8 + 78) = *((_BYTE *)a2 + v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v12 = v11[9];
        __dst = (void *)(v8 + v12);
        __int128 v13 = (const void *)(v9 + v12);
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1LL, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0LL, 1LL, v14);
        }

        uint64_t v35 = v11[10];
        uint64_t v36 = v8 + v35;
        uint64_t v37 = v9 + v35;
        *(void *)uint64_t v36 = *(void *)v37;
        *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
        *(_BYTE *)(v8 + v11[11]) = *(_BYTE *)(v9 + v11[11]);
        *(_BYTE *)(v8 + v11[12]) = *(_BYTE *)(v9 + v11[12]);
        goto LABEL_15;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
      uint64_t v20 = a1 + v30;
      uint64_t v21 = (uint64_t)a2 + v30;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v30);
      *(_BYTE *)(v20 + 8) = *((_BYTE *)a2 + v30 + 8);
      __int128 v31 = *(_OWORD *)((char *)a2 + v30 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v30 + 16);
      *(_OWORD *)(v20 + 32) = v31;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v30 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v30 + 57);
      *(_BYTE *)(v20 + 73) = *((_BYTE *)a2 + v30 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v30 + 74);
      *(_BYTE *)(v20 + 76) = *((_BYTE *)a2 + v30 + 76);
      *(_BYTE *)(v20 + 77) = *((_BYTE *)a2 + v30 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v32 = v23[9];
      uint64_t v25 = (void *)(v20 + v32);
      uint64_t v26 = (const void *)(v21 + v32);
      uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v28 = *(void *)(v27 - 8);
      __int128 v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v33(v26, 1LL, v27)) {
        goto LABEL_10;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
    goto LABEL_14;
  }

  uint64_t v18 = *a2;
  *(void *)a1 = *a2;
  a1 = v18 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
LABEL_6:
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle(0LL);
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle( uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
    uint64_t v19 = a1 + v18;
    uint64_t v20 = a2 + v18;
    *(void *)uint64_t v19 = *(void *)(a2 + v18);
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(a2 + v18 + 8);
    __int128 v21 = *(_OWORD *)(a2 + v18 + 32);
    *(_OWORD *)(v19 + 16) = *(_OWORD *)(a2 + v18 + 16);
    *(_OWORD *)(v19 + 32) = v21;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)(a2 + v18 + 57);
    *(_BYTE *)(v19 + 73) = *(_BYTE *)(a2 + v18 + 73);
    *(_WORD *)(v19 + 74) = *(_WORD *)(a2 + v18 + 74);
    *(_BYTE *)(v19 + 76) = *(_BYTE *)(a2 + v18 + 76);
    *(_BYTE *)(v19 + 77) = *(_BYTE *)(a2 + v18 + 77);
    __int128 v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v23 = v22[9];
    uint64_t v24 = (void *)(v19 + v23);
    uint64_t v25 = (const void *)(v20 + v23);
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
    swift_unknownObjectRetain();
    if (v28(v25, 1LL, v26))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
    }

    uint64_t v48 = v22[10];
    uint64_t v49 = v19 + v48;
    uint64_t v50 = v20 + v48;
    *(void *)uint64_t v49 = *(void *)v50;
    *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
    uint64_t v51 = v22[11];
    uint64_t v46 = (_BYTE *)(v19 + v51);
    uint64_t v47 = (_BYTE *)(v20 + v51);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    *(void *)uint64_t v7 = *(void *)(a2 + v6);
    *(_BYTE *)(v7 + 8) = *(_BYTE *)(a2 + v6 + 8);
    __int128 v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(_BYTE *)(v7 + 73) = *(_BYTE *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(_BYTE *)(v7 + 78) = *(_BYTE *)(a2 + v6 + 78);
    __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v11 = v10[9];
    uint64_t v12 = (void *)(v7 + v11);
    __int128 v13 = (const void *)(v8 + v11);
    uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1LL, v14))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
    }

    uint64_t v42 = v10[10];
    uint64_t v43 = v7 + v42;
    uint64_t v44 = v8 + v42;
    *(void *)uint64_t v43 = *(void *)v44;
    *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
    *(_BYTE *)(v7 + v10[11]) = *(_BYTE *)(v8 + v10[11]);
    uint64_t v45 = v10[12];
    uint64_t v46 = (_BYTE *)(v7 + v45);
    uint64_t v47 = (_BYTE *)(v8 + v45);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
    uint64_t v31 = a1 + v30;
    uint64_t v32 = a2 + v30;
    *(void *)uint64_t v31 = *(void *)(a2 + v30);
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(a2 + v30 + 8);
    __int128 v33 = *(_OWORD *)(a2 + v30 + 32);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)(a2 + v30 + 16);
    *(_OWORD *)(v31 + 32) = v33;
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(a2 + v30 + 48);
    *(_OWORD *)(v31 + 57) = *(_OWORD *)(a2 + v30 + 57);
    *(_BYTE *)(v31 + 73) = *(_BYTE *)(a2 + v30 + 73);
    *(_WORD *)(v31 + 74) = *(_WORD *)(a2 + v30 + 74);
    *(_BYTE *)(v31 + 76) = *(_BYTE *)(a2 + v30 + 76);
    *(_BYTE *)(v31 + 77) = *(_BYTE *)(a2 + v30 + 77);
    uint64_t v34 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v35 = v34[9];
    uint64_t v36 = (void *)(v31 + v35);
    uint64_t v37 = (const void *)(v32 + v35);
    uint64_t v38 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
    swift_unknownObjectRetain();
    if (v40(v37, 1LL, v38))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
    }

    uint64_t v52 = v34[10];
    uint64_t v53 = v31 + v52;
    uint64_t v54 = v32 + v52;
    *(void *)uint64_t v53 = *(void *)v54;
    *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
    uint64_t v55 = v34[11];
    uint64_t v46 = (_BYTE *)(v31 + v55);
    uint64_t v47 = (_BYTE *)(v32 + v55);
  }

  *uint64_t v46 = *v47;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle( uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( a1,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      LOBYTE(v19) = *(_BYTE *)(a2 + v19 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(_BYTE *)(v20 + 8) = v19;
      __int128 v22 = *(_OWORD *)(v21 + 57);
      __int128 v24 = *(_OWORD *)(v21 + 32);
      __int128 v23 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 57) = v22;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v19) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v19;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v26 = v25[9];
      uint64_t v27 = (void *)(v20 + v26);
      uint64_t v28 = (const void *)(v21 + v26);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1LL, v29))
      {
LABEL_9:
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(void *)(*(void *)(v38 - 8) + 64LL));
LABEL_13:
        uint64_t v46 = v25[10];
        uint64_t v47 = v20 + v46;
        uint64_t v48 = (uint64_t *)(v21 + v46);
        uint64_t v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(void *)uint64_t v47 = v49;
        uint64_t v50 = v25[11];
        uint64_t v44 = (_BYTE *)(v20 + v50);
        uint64_t v45 = (_BYTE *)(v21 + v50);
LABEL_14:
        *uint64_t v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        LOBYTE(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5) = *(_BYTE *)(a2 + v5 + 8);
        *(void *)uint64_t v6 = *(void *)v7;
        *(_BYTE *)(v6 + 8) = v5;
        __int128 v8 = *(_OWORD *)(v7 + 57);
        __int128 v10 = *(_OWORD *)(v7 + 32);
        __int128 v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(_BYTE *)(v6 + 73) = *(_BYTE *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(_BYTE *)(v6 + 78) = *(_BYTE *)(v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v12 = v11[9];
        __int128 v13 = (void *)(v6 + v12);
        uint64_t v14 = (const void *)(v7 + v12);
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1LL, v15))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
        }

        uint64_t v39 = v11[10];
        uint64_t v40 = v6 + v39;
        uint64_t v41 = (uint64_t *)(v7 + v39);
        uint64_t v42 = *v41;
        *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
        *(void *)uint64_t v40 = v42;
        *(_BYTE *)(v6 + v11[11]) = *(_BYTE *)(v7 + v11[11]);
        uint64_t v43 = v11[12];
        uint64_t v44 = (_BYTE *)(v6 + v43);
        uint64_t v45 = (_BYTE *)(v7 + v43);
        goto LABEL_14;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v32 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
      uint64_t v20 = a1 + v32;
      uint64_t v21 = a2 + v32;
      LOBYTE(v32) = *(_BYTE *)(a2 + v32 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(_BYTE *)(v20 + 8) = v32;
      __int128 v33 = *(_OWORD *)(v21 + 57);
      __int128 v35 = *(_OWORD *)(v21 + 32);
      __int128 v34 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v35;
      *(_OWORD *)(v20 + 48) = v34;
      *(_OWORD *)(v20 + 57) = v33;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v32) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v32;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v36 = v25[9];
      uint64_t v27 = (void *)(v20 + v36);
      uint64_t v28 = (const void *)(v21 + v36);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v37(v28, 1LL, v29)) {
        goto LABEL_9;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    goto LABEL_13;
  }

  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle( _OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  }

  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      __int128 v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
      uint64_t v7 = (char *)a1 + v6;
      __int128 v8 = (char *)a2 + v6;
      *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
      _OWORD v7[8] = *((_BYTE *)a2 + v6 + 8);
      __int128 v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((_BYTE *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((_BYTE *)a2 + v6 + 78);
      __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v11 = v10[9];
      uint64_t v12 = &v7[v11];
      __int128 v13 = &v8[v11];
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      }

      uint64_t v35 = v10[10];
      uint64_t v36 = &v7[v35];
      uint64_t v37 = &v8[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      uint64_t v38 = v10[12];
      __int128 v33 = &v7[v38];
      __int128 v34 = &v8[v38];
      goto LABEL_13;
    }

    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  }

  uint64_t v18 = *(int *)(v17 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  __int128 v19[8] = *((_BYTE *)a2 + v18 + 8);
  __int128 v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((_BYTE *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((_BYTE *)a2 + v18 + 76);
  v19[77] = *((_BYTE *)a2 + v18 + 77);
  __int128 v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v23 = v22[9];
  __int128 v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  uint64_t v29 = v22[10];
  uint64_t v30 = &v19[v29];
  uint64_t v31 = &v20[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = v22[11];
  __int128 v33 = &v19[v32];
  __int128 v34 = &v20[v32];
LABEL_13:
  *__int128 v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle( _OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        __int128 v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v7 = (char *)a1 + v6;
        __int128 v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        _OWORD v7[8] = *((_BYTE *)a2 + v6 + 8);
        __int128 v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((_BYTE *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((_BYTE *)a2 + v6 + 78);
        __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        __int128 v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
        }

        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        __int128 v33 = &v7[v38];
        __int128 v34 = &v8[v38];
LABEL_14:
        *__int128 v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0LL);
    }

    uint64_t v18 = *(int *)(v17 + 20);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    __int128 v19[8] = *((_BYTE *)a2 + v18 + 8);
    __int128 v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((_BYTE *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((_BYTE *)a2 + v18 + 76);
    v19[77] = *((_BYTE *)a2 + v18 + 77);
    __int128 v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v23 = v22[9];
    __int128 v24 = &v19[v23];
    uint64_t v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
    }

    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    __int128 v33 = &v19[v32];
    __int128 v34 = &v20[v32];
    goto LABEL_14;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_182F825A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_182F825B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm( a1,  a2,  a3,  a4,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle( uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( a1,  a2,  a3,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

char *initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.CodableStorage( char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
    return a1;
  }

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v7 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v7;
      uint64_t v8 = *((void *)a2 + 3);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = v8;
      uint64_t v9 = *((void *)a2 + 5);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a1 + 5) = v9;
      *((void *)a1 + 6) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      __int128 v10 = (void *)*((void *)a2 + 9);
      uint64_t v11 = *((void *)a2 + 10);
      *((void *)a1 + 9) = v10;
      *((void *)a1 + 10) = v11;
      uint64_t v12 = *((void *)a2 + 12);
      *((void *)a1 + 11) = *((void *)a2 + 11);
      *((void *)a1 + 12) = v12;
      *((void *)a1 + 13) = *((void *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v13 = v10;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 8u:
      uint64_t v16 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v16;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xAu:
      uint64_t v17 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v17;
      swift_retain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xBu:
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      uint64_t v19 = *((void *)a2 + 2);
      uint64_t v20 = *((void *)a2 + 3);
      uint64_t v21 = *((void *)a2 + 4);
      uint64_t v22 = *((void *)a2 + 5);
      uint64_t v23 = *((void *)a2 + 6);
      uint64_t v24 = *((void *)a2 + 7);
      uint64_t v25 = *((void *)a2 + 8);
      uint64_t v120 = *((void *)a2 + 9);
      uint64_t v121 = *((void *)a2 + 10);
      uint64_t v122 = *((void *)a2 + 11);
      uint64_t v123 = *((void *)a2 + 12);
      uint64_t __dsta = *((void *)a2 + 13);
      uint64_t v126 = *((void *)a2 + 14);
      uint64_t v127 = *((void *)a2 + 15);
      __int16 v26 = *((_WORD *)a2 + 64);
      outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( v18,  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v120,  v121,  v122,  v123,  __dsta,  v126,  v127,  v26);
      *((void *)a1 + 1) = v18;
      *((void *)a1 + 2) = v19;
      *((void *)a1 + 3) = v20;
      *((void *)a1 + 4) = v21;
      *((void *)a1 + 5) = v22;
      *((void *)a1 + 6) = v23;
      *((void *)a1 + 7) = v24;
      *((void *)a1 + 8) = v25;
      *((void *)a1 + 9) = v120;
      *((void *)a1 + 10) = v121;
      *((void *)a1 + 11) = v122;
      *((void *)a1 + 12) = v123;
      *((void *)a1 + 13) = __dsta;
      *((void *)a1 + 14) = v126;
      *((void *)a1 + 15) = v127;
      *((_WORD *)a1 + 64) = v26;
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xCu:
      __int128 v27 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v27;
      __int128 v128 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v128;
      __int128 v28 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v28;
      __int128 v29 = *((_OWORD *)a2 + 6);
      *((_WORD *)a1 + 56) = *((_WORD *)a2 + 56);
      *((_OWORD *)a1 + 6) = v29;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xDu:
      *(void *)a1 = *(void *)a2;
      uint64_t v31 = &a1[v30];
      uint64_t v32 = &a2[v30];
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
        swift_unknownObjectRetain();
        uint64_t v70 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }

      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
          uint64_t v34 = *((void *)v32 + 3);
          *((void *)v31 + 2) = *((void *)v32 + 2);
          *((void *)v31 + 3) = v34;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v36 = &v31[v35];
          uint64_t v37 = &v32[v35];
          *(void *)uint64_t v36 = *(void *)&v32[v35];
          v36[8] = v32[v35 + 8];
          __int128 v38 = *(_OWORD *)&v32[v35 + 32];
          *((_OWORD *)v36 + 1) = *(_OWORD *)&v32[v35 + 16];
          *((_OWORD *)v36 + 2) = v38;
          *((_OWORD *)v36 + 3) = *(_OWORD *)&v32[v35 + 48];
          *(_OWORD *)(v36 + 57) = *(_OWORD *)&v32[v35 + 57];
          v36[73] = v32[v35 + 73];
          *(_DWORD *)(v36 + 74) = *(_DWORD *)&v32[v35 + 74];
          v36[78] = v32[v35 + 78];
          uint64_t v39 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          uint64_t v40 = v39[9];
          uint64_t v41 = &v36[v40];
          uint64_t v42 = &v37[v40];
          uint64_t v43 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v44 = *(void *)(v43 - 8);
          goto LABEL_13;
        }

        *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
        swift_unknownObjectRetain();
        uint64_t v70 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }

      uint64_t v71 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v70) + 36);
      uint64_t v72 = &v31[v71];
      uint64_t v73 = &v32[v71];
      *(void *)uint64_t v72 = *(void *)&v32[v71];
      v72[8] = v32[v71 + 8];
      __int128 v74 = *(_OWORD *)&v32[v71 + 32];
      *((_OWORD *)v72 + 1) = *(_OWORD *)&v32[v71 + 16];
      *((_OWORD *)v72 + 2) = v74;
      *((_OWORD *)v72 + 3) = *(_OWORD *)&v32[v71 + 48];
      *(_OWORD *)(v72 + 57) = *(_OWORD *)&v32[v71 + 57];
      v72[73] = v32[v71 + 73];
      v72[76] = v32[v71 + 76];
      *((_WORD *)v72 + 37) = *(_WORD *)&v32[v71 + 74];
      v72[77] = v32[v71 + 77];
      uint64_t v75 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v76 = v75[9];
      uint64_t v77 = &v72[v76];
      uint64_t v78 = &v73[v76];
      uint64_t v79 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v80 = *(void *)(v79 - 8);
      goto LABEL_27;
    case 0xEu:
      *(void *)a1 = *(void *)a2;
      uint64_t v47 = &a1[v46];
      uint64_t v48 = &a2[v46];
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
      int v49 = swift_getEnumCaseMultiPayload();
      if (v49 == 2)
      {
        *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
        swift_unknownObjectRetain();
        uint64_t v82 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }

      else
      {
        if (v49 == 1)
        {
          *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
          uint64_t v50 = *((void *)v48 + 3);
          *((void *)v47 + 2) = *((void *)v48 + 2);
          *((void *)v47 + 3) = v50;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v36 = &v47[v51];
          uint64_t v37 = &v48[v51];
          *(void *)uint64_t v36 = *(void *)&v48[v51];
          v36[8] = v48[v51 + 8];
          __int128 v52 = *(_OWORD *)&v48[v51 + 32];
          *((_OWORD *)v36 + 1) = *(_OWORD *)&v48[v51 + 16];
          *((_OWORD *)v36 + 2) = v52;
          *((_OWORD *)v36 + 3) = *(_OWORD *)&v48[v51 + 48];
          *(_OWORD *)(v36 + 57) = *(_OWORD *)&v48[v51 + 57];
          v36[73] = v48[v51 + 73];
          *(_DWORD *)(v36 + 74) = *(_DWORD *)&v48[v51 + 74];
          v36[78] = v48[v51 + 78];
          uint64_t v39 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          uint64_t v53 = v39[9];
          uint64_t v41 = &v36[v53];
          uint64_t v42 = &v37[v53];
          uint64_t v43 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v44 = *(void *)(v43 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1LL, v43))
          {
LABEL_13:
            uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64LL));
          }

          else
          {
LABEL_39:
            (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v43);
          }

          uint64_t v108 = v39[10];
          uint64_t v109 = &v36[v108];
          unint64_t v110 = &v37[v108];
          *(void *)uint64_t v109 = *(void *)v110;
          v109[8] = v110[8];
          v36[v39[11]] = v37[v39[11]];
          uint64_t v111 = v39[12];
          uint64_t v106 = &v36[v111];
          uint64_t v107 = &v37[v111];
          goto LABEL_41;
        }

        *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
        swift_unknownObjectRetain();
        uint64_t v82 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }

      uint64_t v83 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v82) + 36);
      uint64_t v72 = &v47[v83];
      uint64_t v73 = &v48[v83];
      *(void *)uint64_t v72 = *(void *)&v48[v83];
      v72[8] = v48[v83 + 8];
      __int128 v84 = *(_OWORD *)&v48[v83 + 32];
      *((_OWORD *)v72 + 1) = *(_OWORD *)&v48[v83 + 16];
      *((_OWORD *)v72 + 2) = v84;
      *((_OWORD *)v72 + 3) = *(_OWORD *)&v48[v83 + 48];
      *(_OWORD *)(v72 + 57) = *(_OWORD *)&v48[v83 + 57];
      v72[73] = v48[v83 + 73];
      v72[76] = v48[v83 + 76];
      *((_WORD *)v72 + 37) = *(_WORD *)&v48[v83 + 74];
      v72[77] = v48[v83 + 77];
      uint64_t v75 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v85 = v75[9];
      uint64_t v77 = &v72[v85];
      uint64_t v78 = &v73[v85];
      uint64_t v79 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v80 = *(void *)(v79 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1LL, v79))
      {
LABEL_27:
        uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64LL));
      }

      else
      {
LABEL_36:
        (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v77, v78, v79);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0LL, 1LL, v79);
      }

      uint64_t v102 = v75[10];
      uint64_t v103 = &v72[v102];
      uint64_t v104 = &v73[v102];
      *(void *)uint64_t v103 = *(void *)v104;
      v103[8] = v104[8];
      uint64_t v105 = v75[11];
      uint64_t v106 = &v72[v105];
      uint64_t v107 = &v73[v105];
      goto LABEL_41;
    case 0xFu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      uint64_t v55 = &a1[v54];
      uint64_t v56 = &a2[v54];
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
      int v57 = swift_getEnumCaseMultiPayload();
      if (v57 == 2)
      {
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
        uint64_t v86 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
        uint64_t v87 = &v55[v86];
        uint64_t v88 = &v56[v86];
        *(void *)uint64_t v87 = *(void *)&v56[v86];
        v87[8] = v56[v86 + 8];
        __int128 v89 = *(_OWORD *)&v56[v86 + 32];
        *((_OWORD *)v87 + 1) = *(_OWORD *)&v56[v86 + 16];
        *((_OWORD *)v87 + 2) = v89;
        *((_OWORD *)v87 + 3) = *(_OWORD *)&v56[v86 + 48];
        *(_OWORD *)(v87 + 57) = *(_OWORD *)&v56[v86 + 57];
        v87[73] = v56[v86 + 73];
        *((_WORD *)v87 + 37) = *(_WORD *)&v56[v86 + 74];
        v87[76] = v56[v86 + 76];
        v87[77] = v56[v86 + 77];
        uint64_t v90 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v91 = v90[9];
        uint64_t v92 = &v87[v91];
        uint64_t v93 = &v88[v91];
        uint64_t v94 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v95 = *(void *)(v94 - 8);
        uint64_t v96 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
        swift_unknownObjectRetain();
        if (v96(v93, 1LL, v94)) {
          goto LABEL_35;
        }
        goto LABEL_45;
      }

      if (v57 != 1)
      {
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
        uint64_t v97 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
        uint64_t v87 = &v55[v97];
        uint64_t v88 = &v56[v97];
        *(void *)uint64_t v87 = *(void *)&v56[v97];
        v87[8] = v56[v97 + 8];
        __int128 v98 = *(_OWORD *)&v56[v97 + 32];
        *((_OWORD *)v87 + 1) = *(_OWORD *)&v56[v97 + 16];
        *((_OWORD *)v87 + 2) = v98;
        *((_OWORD *)v87 + 3) = *(_OWORD *)&v56[v97 + 48];
        *(_OWORD *)(v87 + 57) = *(_OWORD *)&v56[v97 + 57];
        v87[73] = v56[v97 + 73];
        *((_WORD *)v87 + 37) = *(_WORD *)&v56[v97 + 74];
        v87[76] = v56[v97 + 76];
        v87[77] = v56[v97 + 77];
        uint64_t v90 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v99 = v90[9];
        uint64_t v92 = &v87[v99];
        uint64_t v93 = &v88[v99];
        uint64_t v94 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v95 = *(void *)(v94 - 8);
        uint64_t v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
        swift_unknownObjectRetain();
        if (v100(v93, 1LL, v94))
        {
LABEL_35:
          uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v92, v93, *(void *)(*(void *)(v101 - 8) + 64LL));
LABEL_46:
          uint64_t v116 = v90[10];
          int v117 = &v87[v116];
          uint64_t v118 = &v88[v116];
          *(void *)int v117 = *(void *)v118;
          v117[8] = v118[8];
          uint64_t v119 = v90[11];
          uint64_t v106 = &v87[v119];
          uint64_t v107 = &v88[v119];
          goto LABEL_41;
        }

void destroy for String.LocalizationValue.FormatArgument.CodableStorage(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_release();
      swift_release();
      goto LABEL_3;
    case 8u:
LABEL_3:
      swift_bridgeObjectRelease();
      return;
    case 0xAu:
      swift_release();
      return;
    case 0xBu:
      outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(_WORD *)(a1 + 128));
      return;
    case 0xCu:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_20;
    case 0xDu:
      uint64_t v2 = a1
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        swift_unknownObjectRelease();
        uint64_t v4 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        goto LABEL_24;
      }

      if (EnumCaseMultiPayload == 1)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        goto LABEL_26;
      }

      if (EnumCaseMultiPayload) {
        return;
      }
      swift_unknownObjectRelease();
      uint64_t v4 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      goto LABEL_24;
    case 0xEu:
      uint64_t v2 = a1
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
      int v5 = swift_getEnumCaseMultiPayload();
      if (v5 == 2)
      {
        swift_unknownObjectRelease();
        uint64_t v4 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
LABEL_24:
        uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v4) + 36);
        goto LABEL_29;
      }

      if (v5 != 1)
      {
        if (v5) {
          return;
        }
        swift_unknownObjectRelease();
        uint64_t v4 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        goto LABEL_24;
      }

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
LABEL_26:
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v8) + 40);
LABEL_31:
      uint64_t v10 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_32:
      uint64_t v11 = v2 + v9 + *(int *)(v10 + 36);
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v13 = *(void *)(v12 - 8);
      return;
    case 0xFu:
      uint64_t v2 = a1
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
      int v6 = swift_getEnumCaseMultiPayload();
      if (v6 == 2)
      {
        swift_unknownObjectRelease();
        uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
      }

      else
      {
        if (v6 == 1)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v9 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
          goto LABEL_31;
        }

        if (v6) {
          return;
        }
        swift_unknownObjectRelease();
        uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle(0LL);
      }

      uint64_t v9 = *(int *)(v7 + 20);
LABEL_29:
      uint64_t v10 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      goto LABEL_32;
    case 0x10u:
      swift_bridgeObjectRelease();
LABEL_20:
      swift_unknownObjectRelease();
      return;
    default:
      return;
  }

char *initializeWithCopy for String.LocalizationValue.FormatArgument.CodableStorage( char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v6;
      uint64_t v7 = *((void *)a2 + 3);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = v7;
      uint64_t v8 = *((void *)a2 + 5);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a1 + 5) = v8;
      *((void *)a1 + 6) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v9 = (void *)*((void *)a2 + 9);
      uint64_t v10 = *((void *)a2 + 10);
      *((void *)a1 + 9) = v9;
      *((void *)a1 + 10) = v10;
      uint64_t v11 = *((void *)a2 + 12);
      *((void *)a1 + 11) = *((void *)a2 + 11);
      *((void *)a1 + 12) = v11;
      *((void *)a1 + 13) = *((void *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      id v12 = v9;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_44;
    case 8u:
      uint64_t v13 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v13;
      swift_bridgeObjectRetain();
      goto LABEL_44;
    case 0xAu:
      uint64_t v14 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v14;
      swift_retain();
      goto LABEL_44;
    case 0xBu:
      uint64_t v15 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      uint64_t v16 = *((void *)a2 + 2);
      uint64_t v17 = *((void *)a2 + 3);
      uint64_t v18 = *((void *)a2 + 4);
      uint64_t v19 = *((void *)a2 + 5);
      uint64_t v20 = *((void *)a2 + 6);
      uint64_t v21 = *((void *)a2 + 7);
      uint64_t v22 = *((void *)a2 + 8);
      uint64_t v118 = *((void *)a2 + 9);
      uint64_t v119 = *((void *)a2 + 10);
      uint64_t v120 = *((void *)a2 + 11);
      uint64_t v121 = *((void *)a2 + 12);
      uint64_t __dsta = *((void *)a2 + 13);
      uint64_t v124 = *((void *)a2 + 14);
      uint64_t v125 = *((void *)a2 + 15);
      __int16 v23 = *((_WORD *)a2 + 64);
      outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v118,  v119,  v120,  v121,  __dsta,  v124,  v125,  v23);
      *((void *)a1 + 1) = v15;
      *((void *)a1 + 2) = v16;
      *((void *)a1 + 3) = v17;
      *((void *)a1 + 4) = v18;
      *((void *)a1 + 5) = v19;
      *((void *)a1 + 6) = v20;
      *((void *)a1 + 7) = v21;
      *((void *)a1 + 8) = v22;
      *((void *)a1 + 9) = v118;
      *((void *)a1 + 10) = v119;
      *((void *)a1 + 11) = v120;
      *((void *)a1 + 12) = v121;
      *((void *)a1 + 13) = __dsta;
      *((void *)a1 + 14) = v124;
      *((void *)a1 + 15) = v125;
      *((_WORD *)a1 + 64) = v23;
      goto LABEL_44;
    case 0xCu:
      __int128 v24 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v24;
      __int128 v126 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v126;
      __int128 v25 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v25;
      __int128 v26 = *((_OWORD *)a2 + 6);
      *((_WORD *)a1 + 56) = *((_WORD *)a2 + 56);
      *((_OWORD *)a1 + 6) = v26;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_44;
    case 0xDu:
      *(void *)a1 = *(void *)a2;
      __int128 v28 = &a1[v27];
      __int128 v29 = &a2[v27];
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_OWORD *)__int128 v28 = *(_OWORD *)v29;
        swift_unknownObjectRetain();
        uint64_t v67 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }

      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_OWORD *)__int128 v28 = *(_OWORD *)v29;
          uint64_t v31 = *((void *)v29 + 3);
          *((void *)v28 + 2) = *((void *)v29 + 2);
          *((void *)v28 + 3) = v31;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          __int128 v33 = &v28[v32];
          uint64_t v34 = &v29[v32];
          *(void *)__int128 v33 = *(void *)&v29[v32];
          v33[8] = v29[v32 + 8];
          __int128 v35 = *(_OWORD *)&v29[v32 + 32];
          *((_OWORD *)v33 + 1) = *(_OWORD *)&v29[v32 + 16];
          *((_OWORD *)v33 + 2) = v35;
          *((_OWORD *)v33 + 3) = *(_OWORD *)&v29[v32 + 48];
          *(_OWORD *)(v33 + 57) = *(_OWORD *)&v29[v32 + 57];
          v33[73] = v29[v32 + 73];
          *(_DWORD *)(v33 + 74) = *(_DWORD *)&v29[v32 + 74];
          v33[78] = v29[v32 + 78];
          uint64_t v36 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          uint64_t v37 = v36[9];
          __int128 v38 = &v33[v37];
          uint64_t v39 = &v34[v37];
          uint64_t v40 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v41 = *(void *)(v40 - 8);
          goto LABEL_10;
        }

        *(_OWORD *)__int128 v28 = *(_OWORD *)v29;
        swift_unknownObjectRetain();
        uint64_t v67 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }

      uint64_t v68 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v67) + 36);
      uint64_t v69 = &v28[v68];
      uint64_t v70 = &v29[v68];
      *(void *)uint64_t v69 = *(void *)&v29[v68];
      v69[8] = v29[v68 + 8];
      __int128 v71 = *(_OWORD *)&v29[v68 + 32];
      *((_OWORD *)v69 + 1) = *(_OWORD *)&v29[v68 + 16];
      *((_OWORD *)v69 + 2) = v71;
      *((_OWORD *)v69 + 3) = *(_OWORD *)&v29[v68 + 48];
      *(_OWORD *)(v69 + 57) = *(_OWORD *)&v29[v68 + 57];
      v69[73] = v29[v68 + 73];
      v69[76] = v29[v68 + 76];
      *((_WORD *)v69 + 37) = *(_WORD *)&v29[v68 + 74];
      v69[77] = v29[v68 + 77];
      uint64_t v72 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v73 = v72[9];
      __int128 v74 = &v69[v73];
      uint64_t v75 = &v70[v73];
      uint64_t v76 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v77 = *(void *)(v76 - 8);
      goto LABEL_24;
    case 0xEu:
      *(void *)a1 = *(void *)a2;
      uint64_t v44 = &a1[v43];
      uint64_t v45 = &a2[v43];
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
      int v46 = swift_getEnumCaseMultiPayload();
      if (v46 == 2)
      {
        *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
        swift_unknownObjectRetain();
        uint64_t v79 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }

      else
      {
        if (v46 == 1)
        {
          *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
          uint64_t v47 = *((void *)v45 + 3);
          *((void *)v44 + 2) = *((void *)v45 + 2);
          *((void *)v44 + 3) = v47;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          __int128 v33 = &v44[v48];
          uint64_t v34 = &v45[v48];
          *(void *)__int128 v33 = *(void *)&v45[v48];
          v33[8] = v45[v48 + 8];
          __int128 v49 = *(_OWORD *)&v45[v48 + 32];
          *((_OWORD *)v33 + 1) = *(_OWORD *)&v45[v48 + 16];
          *((_OWORD *)v33 + 2) = v49;
          *((_OWORD *)v33 + 3) = *(_OWORD *)&v45[v48 + 48];
          *(_OWORD *)(v33 + 57) = *(_OWORD *)&v45[v48 + 57];
          v33[73] = v45[v48 + 73];
          *(_DWORD *)(v33 + 74) = *(_DWORD *)&v45[v48 + 74];
          v33[78] = v45[v48 + 78];
          uint64_t v36 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          uint64_t v50 = v36[9];
          __int128 v38 = &v33[v50];
          uint64_t v39 = &v34[v50];
          uint64_t v40 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v41 = *(void *)(v40 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v40))
          {
LABEL_10:
            uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
          }

          else
          {
LABEL_36:
            (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
          }

          uint64_t v105 = v36[10];
          uint64_t v106 = &v33[v105];
          uint64_t v107 = &v34[v105];
          *(void *)uint64_t v106 = *(void *)v107;
          v106[8] = v107[8];
          v33[v36[11]] = v34[v36[11]];
          uint64_t v108 = v36[12];
          uint64_t v103 = &v33[v108];
          uint64_t v104 = &v34[v108];
          goto LABEL_43;
        }

        *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
        swift_unknownObjectRetain();
        uint64_t v79 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }

      uint64_t v80 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v79) + 36);
      uint64_t v69 = &v44[v80];
      uint64_t v70 = &v45[v80];
      *(void *)uint64_t v69 = *(void *)&v45[v80];
      v69[8] = v45[v80 + 8];
      __int128 v81 = *(_OWORD *)&v45[v80 + 32];
      *((_OWORD *)v69 + 1) = *(_OWORD *)&v45[v80 + 16];
      *((_OWORD *)v69 + 2) = v81;
      *((_OWORD *)v69 + 3) = *(_OWORD *)&v45[v80 + 48];
      *(_OWORD *)(v69 + 57) = *(_OWORD *)&v45[v80 + 57];
      v69[73] = v45[v80 + 73];
      v69[76] = v45[v80 + 76];
      *((_WORD *)v69 + 37) = *(_WORD *)&v45[v80 + 74];
      v69[77] = v45[v80 + 77];
      uint64_t v72 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v82 = v72[9];
      __int128 v74 = &v69[v82];
      uint64_t v75 = &v70[v82];
      uint64_t v76 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v77 = *(void *)(v76 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1LL, v76))
      {
LABEL_24:
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
      }

      else
      {
LABEL_33:
        (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v75, v76);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0LL, 1LL, v76);
      }

      uint64_t v99 = v72[10];
      uint64_t v100 = &v69[v99];
      uint64_t v101 = &v70[v99];
      *(void *)uint64_t v100 = *(void *)v101;
      v100[8] = v101[8];
      uint64_t v102 = v72[11];
      uint64_t v103 = &v69[v102];
      uint64_t v104 = &v70[v102];
      goto LABEL_43;
    case 0xFu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      __int128 v52 = &a1[v51];
      uint64_t v53 = &a2[v51];
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
      int v54 = swift_getEnumCaseMultiPayload();
      if (v54 == 2)
      {
        *(_OWORD *)__int128 v52 = *(_OWORD *)v53;
        uint64_t v83 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
        __int128 v84 = &v52[v83];
        uint64_t v85 = &v53[v83];
        *(void *)__int128 v84 = *(void *)&v53[v83];
        v84[8] = v53[v83 + 8];
        __int128 v86 = *(_OWORD *)&v53[v83 + 32];
        *((_OWORD *)v84 + 1) = *(_OWORD *)&v53[v83 + 16];
        *((_OWORD *)v84 + 2) = v86;
        *((_OWORD *)v84 + 3) = *(_OWORD *)&v53[v83 + 48];
        *(_OWORD *)(v84 + 57) = *(_OWORD *)&v53[v83 + 57];
        v84[73] = v53[v83 + 73];
        *((_WORD *)v84 + 37) = *(_WORD *)&v53[v83 + 74];
        v84[76] = v53[v83 + 76];
        v84[77] = v53[v83 + 77];
        uint64_t v87 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v88 = v87[9];
        __int128 v89 = &v84[v88];
        uint64_t v90 = &v85[v88];
        uint64_t v91 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v92 = *(void *)(v91 - 8);
        uint64_t v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
        swift_unknownObjectRetain();
        if (v93(v90, 1LL, v91)) {
          goto LABEL_32;
        }
        goto LABEL_41;
      }

      if (v54 != 1)
      {
        *(_OWORD *)__int128 v52 = *(_OWORD *)v53;
        uint64_t v94 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
        __int128 v84 = &v52[v94];
        uint64_t v85 = &v53[v94];
        *(void *)__int128 v84 = *(void *)&v53[v94];
        v84[8] = v53[v94 + 8];
        __int128 v95 = *(_OWORD *)&v53[v94 + 32];
        *((_OWORD *)v84 + 1) = *(_OWORD *)&v53[v94 + 16];
        *((_OWORD *)v84 + 2) = v95;
        *((_OWORD *)v84 + 3) = *(_OWORD *)&v53[v94 + 48];
        *(_OWORD *)(v84 + 57) = *(_OWORD *)&v53[v94 + 57];
        v84[73] = v53[v94 + 73];
        *((_WORD *)v84 + 37) = *(_WORD *)&v53[v94 + 74];
        v84[76] = v53[v94 + 76];
        v84[77] = v53[v94 + 77];
        uint64_t v87 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v96 = v87[9];
        __int128 v89 = &v84[v96];
        uint64_t v90 = &v85[v96];
        uint64_t v91 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v92 = *(void *)(v91 - 8);
        uint64_t v97 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
        swift_unknownObjectRetain();
        if (v97(v90, 1LL, v91))
        {
LABEL_32:
          uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v89, v90, *(void *)(*(void *)(v98 - 8) + 64LL));
LABEL_42:
          uint64_t v113 = v87[10];
          int v114 = &v84[v113];
          uint64_t v115 = &v85[v113];
          *(void *)int v114 = *(void *)v115;
          uint64_t v114[8] = v115[8];
          uint64_t v116 = v87[11];
          uint64_t v103 = &v84[v116];
          uint64_t v104 = &v85[v116];
          goto LABEL_43;
        }

char *assignWithCopy for String.LocalizationValue.FormatArgument.CodableStorage( char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        *((void *)a1 + 2) = *((void *)a2 + 2);
        *((void *)a1 + 3) = *((void *)a2 + 3);
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *((void *)a1 + 5) = *((void *)a2 + 5);
        *((void *)a1 + 6) = *((void *)a2 + 6);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        uint64_t v6 = (void *)*((void *)a2 + 9);
        *((void *)a1 + 9) = v6;
        *((void *)a1 + 10) = *((void *)a2 + 10);
        *((void *)a1 + 11) = *((void *)a2 + 11);
        *((void *)a1 + 12) = *((void *)a2 + 12);
        *((void *)a1 + 13) = *((void *)a2 + 13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v7 = v6;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        goto LABEL_45;
      case 8u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_45;
      case 0xAu:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        swift_retain();
        goto LABEL_45;
      case 0xBu:
        *(void *)a1 = *(void *)a2;
        uint64_t v26 = *((void *)a2 + 1);
        uint64_t v27 = *((void *)a2 + 2);
        uint64_t v28 = *((void *)a2 + 3);
        uint64_t v29 = *((void *)a2 + 4);
        uint64_t v30 = *((void *)a2 + 5);
        uint64_t v31 = *((void *)a2 + 6);
        uint64_t v33 = *((void *)a2 + 7);
        uint64_t v32 = *((void *)a2 + 8);
        uint64_t v126 = *((void *)a2 + 9);
        uint64_t v127 = *((void *)a2 + 10);
        uint64_t v128 = *((void *)a2 + 11);
        uint64_t v129 = *((void *)a2 + 12);
        uint64_t __dsta = *((void *)a2 + 13);
        uint64_t v132 = *((void *)a2 + 14);
        uint64_t v133 = *((void *)a2 + 15);
        __int16 v34 = *((_WORD *)a2 + 64);
        outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( v26,  v27,  v28,  v29,  v30,  v31,  v33,  v32,  v126,  v127,  v128,  v129,  __dsta,  v132,  v133,  v34);
        *((void *)a1 + 1) = v26;
        *((void *)a1 + 2) = v27;
        *((void *)a1 + 3) = v28;
        *((void *)a1 + 4) = v29;
        *((void *)a1 + 5) = v30;
        *((void *)a1 + 6) = v31;
        *((void *)a1 + 7) = v33;
        *((void *)a1 + 8) = v32;
        *((void *)a1 + 9) = v126;
        *((void *)a1 + 10) = v127;
        *((void *)a1 + 11) = v128;
        *((void *)a1 + 12) = v129;
        *((void *)a1 + 13) = __dsta;
        *((void *)a1 + 14) = v132;
        *((void *)a1 + 15) = v133;
        *((_WORD *)a1 + 64) = v34;
        goto LABEL_45;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        __int128 v35 = *((_OWORD *)a2 + 4);
        __int128 v36 = *((_OWORD *)a2 + 5);
        __int128 v37 = *((_OWORD *)a2 + 6);
        *((_WORD *)a1 + 56) = *((_WORD *)a2 + 56);
        *((_OWORD *)a1 + 5) = v36;
        *((_OWORD *)a1 + 6) = v37;
        *((_OWORD *)a1 + 4) = v35;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_45;
      case 0xDu:
        *(void *)a1 = *(void *)a2;
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
          swift_unknownObjectRetain();
          uint64_t v66 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        }

        else
        {
          if (EnumCaseMultiPayload == 1)
          {
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
            *((void *)v9 + 2) = *((void *)v10 + 2);
            *((void *)v9 + 3) = *((void *)v10 + 3);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v13 = &v9[v12];
            uint64_t v14 = &v10[v12];
            uint64_t v15 = *(void *)&v10[v12];
            _BYTE v13[8] = v14[8];
            *(void *)uint64_t v13 = v15;
            __int128 v16 = *(_OWORD *)(v14 + 57);
            __int128 v18 = *((_OWORD *)v14 + 2);
            __int128 v17 = *((_OWORD *)v14 + 3);
            *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
            *((_OWORD *)v13 + 2) = v18;
            *((_OWORD *)v13 + 3) = v17;
            *(_OWORD *)(v13 + 57) = v16;
            v13[73] = v14[73];
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            v13[78] = v14[78];
            uint64_t v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
            uint64_t v20 = v19[9];
            uint64_t v21 = &v13[v20];
            uint64_t v22 = &v14[v20];
            uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
            uint64_t v24 = *(void *)(v23 - 8);
            goto LABEL_8;
          }

          *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
          swift_unknownObjectRetain();
          uint64_t v66 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
        }

        uint64_t v67 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v66) + 36);
        uint64_t v68 = &v9[v67];
        uint64_t v69 = &v10[v67];
        uint64_t v70 = *(void *)&v10[v67];
        v68[8] = v69[8];
        *(void *)uint64_t v68 = v70;
        __int128 v71 = *(_OWORD *)(v69 + 57);
        __int128 v73 = *((_OWORD *)v69 + 2);
        __int128 v72 = *((_OWORD *)v69 + 3);
        *((_OWORD *)v68 + 1) = *((_OWORD *)v69 + 1);
        *((_OWORD *)v68 + 2) = v73;
        *((_OWORD *)v68 + 3) = v72;
        *(_OWORD *)(v68 + 57) = v71;
        v68[73] = v69[73];
        LOBYTE(v70) = v69[76];
        *((_WORD *)v68 + 37) = *((_WORD *)v69 + 37);
        v68[76] = v70;
        v68[77] = v69[77];
        __int128 v74 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v75 = v74[9];
        uint64_t v76 = &v68[v75];
        uint64_t v77 = &v69[v75];
        uint64_t v78 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v79 = *(void *)(v78 - 8);
        goto LABEL_25;
      case 0xEu:
        *(void *)a1 = *(void *)a2;
        uint64_t v39 = &a1[v38];
        uint64_t v40 = &a2[v38];
        type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
        int v41 = swift_getEnumCaseMultiPayload();
        if (v41 == 2)
        {
          *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
          swift_unknownObjectRetain();
          __int128 v81 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
        }

        else
        {
          if (v41 == 1)
          {
            *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
            *((void *)v39 + 2) = *((void *)v40 + 2);
            *((void *)v39 + 3) = *((void *)v40 + 3);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v13 = &v39[v42];
            uint64_t v14 = &v40[v42];
            uint64_t v43 = *(void *)&v40[v42];
            _BYTE v13[8] = v14[8];
            *(void *)uint64_t v13 = v43;
            __int128 v44 = *(_OWORD *)(v14 + 57);
            __int128 v46 = *((_OWORD *)v14 + 2);
            __int128 v45 = *((_OWORD *)v14 + 3);
            *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
            *((_OWORD *)v13 + 2) = v46;
            *((_OWORD *)v13 + 3) = v45;
            *(_OWORD *)(v13 + 57) = v44;
            v13[73] = v14[73];
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            v13[78] = v14[78];
            uint64_t v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
            uint64_t v47 = v19[9];
            uint64_t v21 = &v13[v47];
            uint64_t v22 = &v14[v47];
            uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
            uint64_t v24 = *(void *)(v23 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
            {
LABEL_8:
              uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
              memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
            }

            else
            {
LABEL_39:
              (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
            }

            uint64_t v115 = v19[10];
            uint64_t v116 = &v13[v115];
            int v117 = &v14[v115];
            uint64_t v118 = *(void *)v117;
            v116[8] = v117[8];
            *(void *)uint64_t v116 = v118;
            v13[v19[11]] = v14[v19[11]];
            uint64_t v119 = v19[12];
            uint64_t v108 = &v13[v119];
            uint64_t v109 = &v14[v119];
            goto LABEL_44;
          }

          *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
          swift_unknownObjectRetain();
          __int128 v81 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        }

        uint64_t v82 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v81) + 36);
        uint64_t v68 = &v39[v82];
        uint64_t v69 = &v40[v82];
        uint64_t v83 = *(void *)&v40[v82];
        v68[8] = v69[8];
        *(void *)uint64_t v68 = v83;
        __int128 v84 = *(_OWORD *)(v69 + 57);
        __int128 v86 = *((_OWORD *)v69 + 2);
        __int128 v85 = *((_OWORD *)v69 + 3);
        *((_OWORD *)v68 + 1) = *((_OWORD *)v69 + 1);
        *((_OWORD *)v68 + 2) = v86;
        *((_OWORD *)v68 + 3) = v85;
        *(_OWORD *)(v68 + 57) = v84;
        v68[73] = v69[73];
        LOBYTE(v83) = v69[76];
        *((_WORD *)v68 + 37) = *((_WORD *)v69 + 37);
        v68[76] = v83;
        v68[77] = v69[77];
        __int128 v74 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v87 = v74[9];
        uint64_t v76 = &v68[v87];
        uint64_t v77 = &v69[v87];
        uint64_t v78 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v79 = *(void *)(v78 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1LL, v78))
        {
LABEL_25:
          uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64LL));
        }

        else
        {
LABEL_34:
          (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0LL, 1LL, v78);
        }

        uint64_t v103 = v74[10];
        uint64_t v104 = &v68[v103];
        uint64_t v105 = &v69[v103];
        uint64_t v106 = *(void *)v105;
        v104[8] = v105[8];
        *(void *)uint64_t v104 = v106;
        uint64_t v107 = v74[11];
        uint64_t v108 = &v68[v107];
        uint64_t v109 = &v69[v107];
        goto LABEL_44;
      case 0xFu:
        __int128 v48 = *(_OWORD *)a2;
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        *(_OWORD *)a1 = v48;
        uint64_t v50 = &a1[v49];
        uint64_t v51 = &a2[v49];
        type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
        int v52 = swift_getEnumCaseMultiPayload();
        if (v52 == 2)
        {
          *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
          uint64_t v88 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
        }

        else
        {
          if (v52 == 1)
          {
            *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
            *((void *)v50 + 2) = *((void *)v51 + 2);
            *((void *)v50 + 3) = *((void *)v51 + 3);
            uint64_t v53 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
            int v54 = &v50[v53];
            uint64_t v55 = &v51[v53];
            LOBYTE(v53) = v51[v53 + 8];
            *(void *)int v54 = *(void *)v55;
            v54[8] = v53;
            __int128 v56 = *(_OWORD *)(v55 + 57);
            __int128 v58 = *((_OWORD *)v55 + 2);
            __int128 v57 = *((_OWORD *)v55 + 3);
            *((_OWORD *)v54 + 1) = *((_OWORD *)v55 + 1);
            *((_OWORD *)v54 + 2) = v58;
            *((_OWORD *)v54 + 3) = v57;
            *(_OWORD *)(v54 + 57) = v56;
            v54[73] = v55[73];
            *(_DWORD *)(v54 + 74) = *(_DWORD *)(v55 + 74);
            v54[78] = v55[78];
            __int128 v59 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
            uint64_t v60 = v59[9];
            __dst = &v54[v60];
            uint64_t v61 = &v55[v60];
            uint64_t v62 = type metadata accessor for FloatingPointRoundingRule();
            uint64_t v63 = *(void *)(v62 - 8);
            uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            if (v64(v61, 1LL, v62))
            {
              uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
              memcpy(__dst, v61, *(void *)(*(void *)(v65 - 8) + 64LL));
            }

            else
            {
              (*(void (**)(char *, char *, uint64_t))(v63 + 16))(__dst, v61, v62);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(__dst, 0LL, 1LL, v62);
            }

            uint64_t v120 = v59[10];
            uint64_t v121 = &v54[v120];
            uint64_t v122 = &v55[v120];
            uint64_t v123 = *(void *)v122;
            v121[8] = v122[8];
            *(void *)uint64_t v121 = v123;
            v54[v59[11]] = v55[v59[11]];
            uint64_t v124 = v59[12];
            uint64_t v108 = &v54[v124];
            uint64_t v109 = &v55[v124];
            goto LABEL_44;
          }

          *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
          uint64_t v88 = type metadata accessor for NSDecimal.FormatStyle(0LL);
        }

        uint64_t v89 = *(int *)(v88 + 20);
        uint64_t v90 = &v50[v89];
        uint64_t v91 = &v51[v89];
        LOBYTE(v89) = v51[v89 + 8];
        *(void *)uint64_t v90 = *(void *)v91;
        v90[8] = v89;
        __int128 v92 = *(_OWORD *)(v91 + 57);
        __int128 v94 = *((_OWORD *)v91 + 2);
        __int128 v93 = *((_OWORD *)v91 + 3);
        *((_OWORD *)v90 + 1) = *((_OWORD *)v91 + 1);
        *((_OWORD *)v90 + 2) = v94;
        *((_OWORD *)v90 + 3) = v93;
        *(_OWORD *)(v90 + 57) = v92;
        v90[73] = v91[73];
        LOWORD(v89) = *((_WORD *)v91 + 37);
        v90[76] = v91[76];
        *((_WORD *)v90 + 37) = v89;
        v90[77] = v91[77];
        __int128 v95 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v96 = v95[9];
        uint64_t v97 = &v90[v96];
        uint64_t v98 = &v91[v96];
        uint64_t v99 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v100 = *(void *)(v99 - 8);
        uint64_t v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
        swift_unknownObjectRetain();
        if (v101(v98, 1LL, v99))
        {
          uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v97, v98, *(void *)(*(void *)(v102 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v97, v98, v99);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v97, 0LL, 1LL, v99);
        }

        uint64_t v110 = v95[10];
        uint64_t v111 = &v90[v110];
        uint64_t v112 = &v91[v110];
        uint64_t v113 = *(void *)v112;
        v111[8] = v112[8];
        *(void *)uint64_t v111 = v113;
        uint64_t v114 = v95[11];
        uint64_t v108 = &v90[v114];
        uint64_t v109 = &v91[v114];
LABEL_44:
        *uint64_t v108 = *v109;
        swift_storeEnumTagMultiPayload();
LABEL_45:
        swift_storeEnumTagMultiPayload();
        break;
      case 0x10u:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        a1[9] = a2[9];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_45;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        return a1;
    }
  }

  return a1;
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.CodableStorage);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_DWORD *initializeWithTake for String.LocalizationValue.FormatArgument.CodableStorage( _DWORD *a1, _DWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 15:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[4] = a2[4];
      uint64_t v23 = (_OWORD *)((char *)a1 + v22);
      uint64_t v24 = (_OWORD *)((char *)a2 + v22);
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
      int v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 2)
      {
        _OWORD *v23 = *v24;
        uint64_t v48 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
      }

      else
      {
        if (v25 == 1)
        {
          __int128 v26 = v24[1];
          _OWORD *v23 = *v24;
          v23[1] = v26;
          uint64_t v27 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
          uint64_t v13 = (char *)v23 + v27;
          uint64_t v14 = (char *)v24 + v27;
          *(void *)uint64_t v13 = *(void *)((char *)v24 + v27);
          _BYTE v13[8] = *((_BYTE *)v24 + v27 + 8);
          __int128 v28 = *(_OWORD *)((char *)v24 + v27 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v24 + v27 + 16);
          *((_OWORD *)v13 + 2) = v28;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v24 + v27 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v24 + v27 + 57);
          v13[73] = *((_BYTE *)v24 + v27 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v24 + v27 + 74);
          v13[78] = *((_BYTE *)v24 + v27 + 78);
          __int128 v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          uint64_t v29 = v16[9];
          __int128 v18 = &v13[v29];
          uint64_t v19 = &v14[v29];
          uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
          {
LABEL_11:
            uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v18, v19, *(void *)(*(void *)(v30 - 8) + 64LL));
LABEL_32:
            uint64_t v61 = v16[10];
            uint64_t v62 = &v13[v61];
            uint64_t v63 = &v14[v61];
            *(void *)uint64_t v62 = *(void *)v63;
            v62[8] = v63[8];
            v13[v16[11]] = v14[v16[11]];
            uint64_t v60 = v16[12];
            goto LABEL_33;
          }

_DWORD *assignWithTake for String.LocalizationValue.FormatArgument.CodableStorage( _DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 15:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[4] = a2[4];
      uint64_t v24 = (_OWORD *)((char *)a1 + v23);
      int v25 = (_OWORD *)((char *)a2 + v23);
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0LL);
      int v26 = swift_getEnumCaseMultiPayload();
      if (v26 == 2)
      {
        *uint64_t v24 = *v25;
        uint64_t v61 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
      }

      else
      {
        if (v26 == 1)
        {
          __int128 v27 = v25[1];
          *uint64_t v24 = *v25;
          v24[1] = v27;
          uint64_t v28 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
          uint64_t v29 = (char *)v24 + v28;
          uint64_t v30 = (char *)v25 + v28;
          *(void *)uint64_t v29 = *(void *)((char *)v25 + v28);
          v29[8] = *((_BYTE *)v25 + v28 + 8);
          __int128 v31 = *(_OWORD *)((char *)v25 + v28 + 32);
          *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v25 + v28 + 16);
          *((_OWORD *)v29 + 2) = v31;
          *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v25 + v28 + 48);
          *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v25 + v28 + 57);
          v29[73] = *((_BYTE *)v25 + v28 + 73);
          *(_DWORD *)(v29 + 74) = *(_DWORD *)((char *)v25 + v28 + 74);
          v29[78] = *((_BYTE *)v25 + v28 + 78);
          uint64_t v32 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          uint64_t v33 = v32[9];
          int v34 = &v29[v33];
          __int128 v35 = &v30[v33];
          uint64_t v36 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v37 = *(void *)(v36 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1LL, v36))
          {
LABEL_12:
            uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
LABEL_36:
            uint64_t v85 = v32[10];
            __int128 v86 = &v29[v85];
            uint64_t v87 = &v30[v85];
            *(void *)__int128 v86 = *(void *)v87;
            v86[8] = v87[8];
            v29[v32[11]] = v30[v32[11]];
            uint64_t v78 = v32[12];
            goto LABEL_37;
          }

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.CodableStorage()
{
  uint64_t v7 = "p";
  uint64_t v8 = MEMORY[0x189617758] + 64LL;
  uint64_t v9 = MEMORY[0x189617760] + 64LL;
  uint64_t v10 = MEMORY[0x189617758] + 64LL;
  uint64_t v11 = MEMORY[0x189617760] + 64LL;
  uint64_t v12 = MEMORY[0x189617758] + 64LL;
  uint64_t v13 = MEMORY[0x189617760] + 64LL;
  uint64_t v14 = MEMORY[0x189617760] + 64LL;
  __int128 v15 = &unk_183725B68;
  uint64_t v16 = MEMORY[0x189617760] + 64LL;
  uint64_t v17 = &unk_183725B68;
  __int128 v18 = &unk_183725B80;
  uint64_t v19 = &unk_183725B98;
  uint64_t result = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(319LL);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v20 = &v6;
    uint64_t result = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(319LL);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v21 = &v5;
      uint64_t result = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(319LL);
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        uint64_t v22 = &v4;
        uint64_t v23 = &unk_183725BC8;
        uint64_t v24 = &unk_183725BE0;
        swift_initEnumMetadataMultiPayload();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v10 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *unint64_t v3 = v10;
      }

      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (uint64_t *)swift_release();
      }

      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *unint64_t v3 = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }

  return result;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper()
{
  return &type metadata for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper( uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a1 + 32;
  uint64_t v6 = a2 + 32;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v7;
  int v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  swift_retain();
  v8(v5, v6, v7);
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, a2 + 64);
  return a1;
}

void *assignWithCopy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper( void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_0(a1 + 4, a2 + 4);
  __swift_assign_boxed_opaque_existential_0(a1 + 8, a2 + 8);
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper( _OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));
  __int128 v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 4));
  __int128 v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper( uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + outlined init with copy of Any(v0 + 128, v0 + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper()
{
  return &type metadata for String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.Storage(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(unsigned __int8 *)(result + 112);
  while (2)
  {
    switch(v2)
    {
      case 0:
        goto LABEL_5;
      case 1:
        return swift_release();
      case 2:
      case 3:
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(v1 + 32);
        __n128 result = v1 + 64;
LABEL_5:
        __n128 result = __swift_destroy_boxed_opaque_existential_1(result);
        break;
      case 4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        swift_release();
        swift_release();
        __n128 result = swift_bridgeObjectRelease();
        break;
      case 5:
        swift_bridgeObjectRelease();
        __n128 result = swift_unknownObjectRelease();
        break;
      case 6:
        return result;
      default:
        int v2 = *(_DWORD *)result + 7;
        continue;
    }

    return result;
  }

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 112);
  while (2)
  {
    switch(v4)
    {
      case 0:
        uint64_t v5 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v5;
        (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
        *(_BYTE *)(a1 + 112) = 0;
        return a1;
      case 1:
        uint64_t v6 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v6;
        *(_BYTE *)(a1 + 112) = 1;
        swift_retain();
        return a1;
      case 2:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = *(void *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = *(void *)(a2 + 56);
        *(void *)(a1 + 56) = v8;
        uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
        swift_retain();
        swift_retain();
        v9(a1 + 32, a2 + 32, v8);
        uint64_t v10 = *(void *)(a2 + 88);
        *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v10;
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 64, a2 + 64);
        char v11 = 2;
        goto LABEL_11;
      case 3:
        *(void *)a1 = *(void *)a2;
        uint64_t v12 = *(void *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = v12;
        uint64_t v13 = *(void *)(a2 + 56);
        *(void *)(a1 + 56) = v13;
        uint64_t v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
        swift_retain();
        swift_retain();
        v14(a1 + 32, a2 + 32, v13);
        uint64_t v15 = *(void *)(a2 + 88);
        *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v15;
        (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 64, a2 + 64);
        char v11 = 3;
        goto LABEL_11;
      case 4:
        uint64_t v16 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v16;
        uint64_t v17 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v17;
        uint64_t v18 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v18;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        uint64_t v20 = *(void **)(a2 + 72);
        uint64_t v19 = *(void *)(a2 + 80);
        *(void *)(a1 + 72) = v20;
        *(void *)(a1 + 80) = v19;
        uint64_t v21 = *(void *)(a2 + 96);
        *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = v21;
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        *(_BYTE *)(a1 + 112) = 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v22 = v20;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        return a1;
      case 5:
        *(void *)a1 = *(void *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 112) = 5;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        return a1;
      case 6:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        char v11 = 6;
LABEL_11:
        *(_BYTE *)(a1 + 112) = v11;
        return a1;
      default:
        int v4 = *(_DWORD *)a2 + 7;
        continue;
    }
  }

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 112);
    while (2)
    {
      switch(v4)
      {
        case 0:
          __swift_destroy_boxed_opaque_existential_1(a1);
          break;
        case 1:
          swift_release();
          break;
        case 2:
        case 3:
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
          __swift_destroy_boxed_opaque_existential_1(a1 + 64);
          break;
        case 4:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          break;
        case 5:
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          break;
        case 6:
          break;
        default:
          int v4 = *(_DWORD *)a1 + 7;
          continue;
      }

      break;
    }

    int v5 = *(unsigned __int8 *)(a2 + 112);
    while (2)
    {
      switch(v5)
      {
        case 0:
          uint64_t v6 = *(void *)(a2 + 24);
          *(void *)(a1 + 24) = v6;
          (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
          *(_BYTE *)(a1 + 112) = 0;
          return a1;
        case 1:
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(_BYTE *)(a1 + 112) = 1;
          swift_retain();
          return a1;
        case 2:
          uint64_t v7 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v7;
          uint64_t v8 = *(void *)(a2 + 24);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = v8;
          uint64_t v9 = *(void *)(a2 + 56);
          *(void *)(a1 + 56) = v9;
          uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
          swift_retain();
          swift_retain();
          v10(a1 + 32, a2 + 32, v9);
          uint64_t v11 = *(void *)(a2 + 88);
          *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v11;
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
          char v12 = 2;
          goto LABEL_20;
        case 3:
          uint64_t v13 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v13;
          uint64_t v14 = *(void *)(a2 + 24);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = v14;
          uint64_t v15 = *(void *)(a2 + 56);
          *(void *)(a1 + 56) = v15;
          uint64_t v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
          swift_retain();
          swift_retain();
          v16(a1 + 32, a2 + 32, v15);
          uint64_t v17 = *(void *)(a2 + 88);
          *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v17;
          (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 64, a2 + 64);
          char v12 = 3;
          goto LABEL_20;
        case 4:
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
          uint64_t v18 = *(void **)(a2 + 72);
          *(void *)(a1 + 72) = v18;
          *(void *)(a1 + 80) = *(void *)(a2 + 80);
          *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = *(void *)(a2 + 88);
          *(void *)(a1 + 96) = *(void *)(a2 + 96);
          *(void *)(a1 + 104) = *(void *)(a2 + 104);
          *(_BYTE *)(a1 + 112) = 4;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          id v19 = v18;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          return a1;
        case 5:
          *(void *)a1 = *(void *)a2;
          *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
          *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_BYTE *)(a1 + 112) = 5;
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          return a1;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          char v12 = 6;
LABEL_20:
          *(_BYTE *)(a1 + 112) = v12;
          break;
        default:
          int v5 = *(_DWORD *)a2 + 7;
          continue;
      }

      break;
    }
  }

  return a1;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 112);
    while (2)
    {
      switch(v4)
      {
        case 0:
          __swift_destroy_boxed_opaque_existential_1(a1);
          break;
        case 1:
          swift_release();
          break;
        case 2:
        case 3:
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
          __swift_destroy_boxed_opaque_existential_1(a1 + 64);
          break;
        case 4:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          break;
        case 5:
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          break;
        case 6:
          break;
        default:
          int v4 = *(_DWORD *)a1 + 7;
          continue;
      }

      break;
    }

    int v5 = *((unsigned __int8 *)a2 + 112);
    while (2)
    {
      switch(v5)
      {
        case 0:
          char v6 = 0;
          __int128 v7 = *a2;
          __int128 v8 = a2[1];
          goto LABEL_17;
        case 1:
          *(_OWORD *)a1 = *a2;
          char v6 = 1;
          break;
        case 2:
          __int128 v9 = a2[3];
          *(_OWORD *)(a1 + 32) = a2[2];
          *(_OWORD *)(a1 + 48) = v9;
          __int128 v10 = a2[5];
          *(_OWORD *)(a1 + 64) = a2[4];
          *(_OWORD *)(a1 + 80) = v10;
          __int128 v7 = *a2;
          __int128 v8 = a2[1];
          char v6 = 2;
          goto LABEL_17;
        case 3:
          __int128 v11 = a2[3];
          *(_OWORD *)(a1 + 32) = a2[2];
          *(_OWORD *)(a1 + 48) = v11;
          __int128 v12 = a2[5];
          *(_OWORD *)(a1 + 64) = a2[4];
          *(_OWORD *)(a1 + 80) = v12;
          __int128 v7 = *a2;
          __int128 v8 = a2[1];
          char v6 = 3;
LABEL_17:
          *(_OWORD *)a1 = v7;
          *(_OWORD *)(a1 + 16) = v8;
          break;
        case 4:
          __int128 v13 = a2[5];
          *(_OWORD *)(a1 + 64) = a2[4];
          *(_OWORD *)(a1 + 80) = v13;
          *(_OWORD *)(a1 + 96) = a2[6];
          __int128 v14 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v14;
          __int128 v15 = a2[3];
          char v6 = 4;
          *(_OWORD *)(a1 + 32) = a2[2];
          *(_OWORD *)(a1 + 48) = v15;
          break;
        case 5:
          __int128 v16 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v16;
          char v6 = 5;
          break;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          char v6 = 6;
          break;
        default:
          int v5 = *(_DWORD *)a2 + 7;
          continue;
      }

      break;
    }

    *(_BYTE *)(a1 + 112) = v6;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 >= 7) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 112) = 0;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 250;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 113) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 113) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 112) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for String.LocalizationValue.FormatArgument.Storage(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 112);
  return result;
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument.Storage( uint64_t result, unsigned int a2)
{
  if (a2 > 6)
  {
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    unsigned int v2 = a2 - 7;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 7;
    *(_DWORD *)uint64_t result = v2;
  }

  *(_BYTE *)(result + 112) = a2;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.Storage()
{
  return &type metadata for String.LocalizationValue.FormatArgument.Storage;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle,  &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle,  &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle,  &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle,  &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
  a1[2] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys,  &unk_189C70F68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys,  &unk_189C70F68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys,  &unk_189C70F68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys,  &unk_189C70F68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys,  &unk_189C71988);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys,  &unk_189C71988);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys,  &unk_189C71988);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys,  &unk_189C71988);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder,  &type metadata for String.LocalizationValue.Placeholder);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder,  &type metadata for String.LocalizationValue.Placeholder);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.Placeholder,  &type metadata for String.LocalizationValue.Placeholder);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys,  &unk_189C718F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys,  &unk_189C718F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys,  &unk_189C718F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys,  &unk_189C718F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalizedStringResource,  &type metadata for LocalizedStringResource);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalizedStringResource,  &type metadata for LocalizedStringResource);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalizedStringResource,  &type metadata for LocalizedStringResource);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalizedStringResource,  &type metadata for LocalizedStringResource);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalizedStringResource,  &type metadata for LocalizedStringResource);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys,  &unk_189C71868);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys,  &unk_189C71868);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys,  &unk_189C71868);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys,  &unk_189C71868);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys,  &unk_189C717D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys,  &unk_189C717D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys,  &unk_189C717D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys,  &unk_189C717D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys,  &unk_189C71748);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys,  &unk_189C71748);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys,  &unk_189C71748);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys,  &unk_189C71748);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys,  &unk_189C716B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys,  &unk_189C716B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys,  &unk_189C716B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys,  &unk_189C716B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.IntervalFormatStyle,  &type metadata for Date.IntervalFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.IntervalFormatStyle,  &type metadata for Date.IntervalFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.IntervalFormatStyle,  &type metadata for Date.IntervalFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.IntervalFormatStyle,  &type metadata for Date.IntervalFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys,  &unk_189C71628);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys,  &unk_189C71628);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys,  &unk_189C71628);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys,  &unk_189C71628);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys,  &unk_189C71598);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys,  &unk_189C71598);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys,  &unk_189C71598);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys,  &unk_189C71598);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString and conformance AttributedString()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString,  &type metadata for AttributedString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString,  &type metadata for AttributedString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString,  &type metadata for AttributedString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString,  &type metadata for AttributedString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString,  &type metadata for AttributedString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString,  &type metadata for AttributedString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString,  &type metadata for AttributedString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys,  &unk_189C71508);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys,  &unk_189C71508);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys,  &unk_189C71508);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys,  &unk_189C71508);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys,  &unk_189C71478);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys,  &unk_189C71478);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys,  &unk_189C71478);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys,  &unk_189C71478);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys,  &unk_189C713E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys,  &unk_189C713E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys,  &unk_189C713E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys,  &unk_189C713E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961B538], MEMORY[0x18961B530]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961B548], MEMORY[0x18961B530]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961B550], MEMORY[0x18961B530]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961B540], MEMORY[0x18961B530]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys,  &unk_189C71358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys,  &unk_189C71358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys,  &unk_189C71358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys,  &unk_189C71358);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys,  &unk_189C712C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys,  &unk_189C712C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys,  &unk_189C712C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys,  &unk_189C712C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys,  &unk_189C71238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys,  &unk_189C71238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys,  &unk_189C71238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys,  &unk_189C71238);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys,  &unk_189C711A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys,  &unk_189C711A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys,  &unk_189C711A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys,  &unk_189C711A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys,  &unk_189C71118);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys,  &unk_189C71118);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys,  &unk_189C71118);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys,  &unk_189C71118);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys,  &unk_189C71088);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys,  &unk_189C71088);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys,  &unk_189C71088);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys,  &unk_189C71088);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys,  &unk_189C70FF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys,  &unk_189C70FF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys,  &unk_189C70FF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys,  &unk_189C70FF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }

  return result;
}

_OWORD *outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( __int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  __int128 v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  __int128 v5 = a1[4];
  __int128 v6 = a1[5];
  __int128 v7 = a1[6];
  *(_OWORD *)((char *)a2 + 106) = *(__int128 *)((char *)a1 + 106);
  a2[5] = v6;
  a2[6] = v7;
  a2[4] = v5;
  return a2;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg( uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 120) >> 14;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi2_( uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v2 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v3 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8LL;
  __int16 v4 = *(_WORD *)(result + 120) & 0x107 | 0xC000;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v1;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_( uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v2 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v3 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8LL;
  __int16 v4 = *(_WORD *)(result + 120) & 0x107 | 0x8000;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v1;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_( uint64_t result)
{
  *(_WORD *)(result + 120) &= 0x3FFFu;
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_( uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v2 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v3 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8LL;
  __int16 v4 = *(_WORD *)(result + 120) & 0x107;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v1;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v4 = *(_WORD *)(a1 + 120);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  v4);
  return a1;
}

uint64_t outlined retain of Date.FormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation23LocalizedStringResourceVG_SSs5NeverOTg506_sSS10d164E17LocalizationValueV14FormatArgumentV7resolve10attributed4with9includings7CVarArg_p6vararg_AE15_AttributeFixupOSg11attrStrInfotSb_AA6LocaleVxmtAA0M5ScopeRzlFSSAA23efG7VXEfU0_AF6LocaleVTf1cn_nTf4ng_n( uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v51 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v6 = a3;
  uint64_t result = v51;
  v43[0] = 0LL;
  v43[1] = 0LL;
  __int16 v44 = 256;
  uint64_t v45 = 0LL;
  uint64_t v46 = 0LL;
  __int128 v8 = (void *)(a1 + 136);
  char v47 = 0;
  uint64_t v33 = v6;
  do
  {
    int64_t v36 = v3;
    uint64_t v37 = result;
    uint64_t v38 = *(v8 - 12);
    uint64_t v10 = *(v8 - 11);
    __int128 v9 = (char *)*(v8 - 10);
    uint64_t v12 = *(v8 - 9);
    uint64_t v11 = *(v8 - 8);
    uint64_t v13 = *(v8 - 7);
    __int128 v14 = (void *)*(v8 - 4);
    uint64_t v15 = *(v8 - 3);
    uint64_t v16 = *v8;
    v48[0] = *(v8 - 13);
    v48[1] = v38;
    v48[2] = v10;
    v48[3] = v9;
    uint64_t v40 = v12;
    uint64_t v41 = v10;
    __int128 v35 = v9;
    v48[4] = v12;
    v48[5] = v11;
    v48[6] = v13;
    v48[7] = a2;
    v48[8] = v6;
    v48[9] = v14;
    v48[10] = v15;
    __int128 v49 = *((_OWORD *)v8 - 1);
    uint64_t v50 = v16;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    id v17 = v14;
    swift_unknownObjectRetain();
    id v18 = v17;
    swift_bridgeObjectRelease();
    id v19 = v18;
    int v34 = (char *)specialized LocalizedStringResource._withExtensionForBundle<A>(_:)( (uint64_t)v48,  (uint64_t)v43,  (uint64_t)v48);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();

      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v23 = v34;
      int64_t v24 = v36;
    }

    else
    {
      v42[0] = MEMORY[0x18961AFE8];
      v42[1] = 0LL;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain();
      uint64_t v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v41,  v42,  a2,  v33);
      swift_bridgeObjectRelease();
      if (*(void *)(v25 + 16))
      {
        swift_unknownObjectRetain();
        uint64_t v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v25);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        __int128 v35 = specialized withVaList<A>(_:_:)(v32, (uint64_t)v35, v40, a2, v33);
        uint64_t v27 = v26;
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = v27;
        uint64_t v28 = v19;
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v28 = v19;

        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v22 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      int64_t v24 = v36;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v23 = v35;
    }

    uint64_t result = v37;
    uint64_t v51 = v37;
    unint64_t v30 = *(void *)(v37 + 16);
    unint64_t v29 = *(void *)(v37 + 24);
    if (v30 >= v29 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      uint64_t result = v51;
    }

    *(void *)(result + 16) = v30 + 1;
    uint64_t v31 = result + 16 * v30;
    *(void *)(v31 + 32) = v23;
    *(void *)(v31 + 40) = v22;
    v8 += 14;
    int64_t v3 = v24 - 1;
    uint64_t v6 = v33;
  }

  while (v3);
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys,  &unk_189C70ED8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys,  &unk_189C70ED8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys,  &unk_189C70ED8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys,  &unk_189C70ED8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format,  &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format,  &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format,  &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }

  return result;
}

uint64_t outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v15 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 152);
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176);
  uint64_t v8 = *(void *)(a1 + 184);
  __int128 v13 = *(_OWORD *)(a1 + 208);
  __int128 v14 = *(_OWORD *)(a1 + 192);
  __int128 v12 = *(_OWORD *)(a1 + 224);
  uint64_t v9 = *(void *)(a1 + 240);
  __int16 v10 = *(_WORD *)(a1 + 248);
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(_WORD *)(a1 + 120));
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( v15,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v14,  *((uint64_t *)&v14 + 1),  v13,  *((uint64_t *)&v13 + 1),  v12,  *((uint64_t *)&v12 + 1),  v9,  v10);
  return a1;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys,  &unk_189C70C98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys,  &unk_189C70C98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys,  &unk_189C70C98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys,  &unk_189C70C98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C70E48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C70E48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C70E48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C70E48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70DB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70DB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70DB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70DB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C70D28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C70D28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C70D28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C70D28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys,  &unk_189C70A58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys,  &unk_189C70A58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys,  &unk_189C70A58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys,  &unk_189C70A58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C70C08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C70C08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C70C08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C70C08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70B78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70B78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70B78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70B78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C70AE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C70AE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C70AE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C70AE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys,  &unk_189C70818);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys,  &unk_189C70818);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys,  &unk_189C70818);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys,  &unk_189C70818);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C709C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C709C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C709C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys,  &unk_189C709C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70938);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70938);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70938);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys,  &unk_189C70938);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C708A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C708A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C708A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys,  &unk_189C708A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys,  &unk_189C70788);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys,  &unk_189C70788);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys,  &unk_189C70788);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys,  &unk_189C70788);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys,  &unk_189C706F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys,  &unk_189C706F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys,  &unk_189C706F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys,  &unk_189C706F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }

  return result;
}

uint64_t _So9NSDecimala__length_getter(_DWORD *a1)
{
  return (*a1 >> 8) & 0xF;
}

uint64_t _So9NSDecimala__exponent_getter(char *a1)
{
  return *a1;
}

uint64_t _So9NSDecimala__exponent_setter(uint64_t result, _BYTE *a2)
{
  *a2 = result;
  return result;
}

uint64_t _So9NSDecimala__length_setter(uint64_t result, _DWORD *a2)
{
  *a2 = *a2 & 0xFFFFF0FF | ((result & 0xF) << 8);
  return result;
}

uint64_t _So9NSDecimala__isNegative_getter(_DWORD *a1)
{
  return (*a1 >> 12) & 1;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys,  &unk_189C70668);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys,  &unk_189C70668);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys,  &unk_189C70668);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys,  &unk_189C70668);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError;
  if (!lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal._CalculationError,  &type metadata for NSDecimal._CalculationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError;
  if (!lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal._CalculationError,  &type metadata for NSDecimal._CalculationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError);
  }

  return result;
}

_DWORD *_So9NSDecimala__isCompact_setter(_DWORD *result)
{
  *result &= ~0x2000u;
  return result;
}

uint64_t _So9NSDecimala__isCompact_getter(_DWORD *a1)
{
  return (*a1 >> 13) & 1;
}

uint64_t _So9NSDecimala__reserved_getter(_DWORD *a1)
{
  return *a1 >> 14;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi0_( uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v2 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v3 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8LL;
  __int16 v4 = *(_WORD *)(result + 120) & 0x107 | 0x4000;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v1;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

void partial apply for closure #1 in String.init(format:locale:arguments:)(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_182F88C3C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 <= 0xFD) {
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v1 & 1);
  }
  return swift_deallocObject();
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup( uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type NSAttributedString and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject)
  {
    uint64_t v1 = type metadata accessor for NSMorphologyPronoun( 255LL,  (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961BB20], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject);
  }

  return result;
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?( uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(result, a2, a3 & 1);
  }
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup??( uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254) {
    return outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(result, a2, a3);
  }
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?( uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(result, a2, a3 & 1);
  }
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup( uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_retain();
  }
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup??( uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254) {
    return outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(result, a2, a3);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
  }

  return result;
}

uint64_t outlined init with copy of String.LocalizationValue.FormatArgument(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)@<X0>( __int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v2[2] - 8LL) + 80LL);
  return closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)( a1,  (uint64_t)v2 + ((((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL))
           + *(void *)(*(void *)(v3 - 8) + 64LL)
           + v4) & ~v4),
           v3,
           v2[4],
           v2[5],
           a2);
}

uint64_t partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( __int128 *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL);
  return closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  (uint64_t)v1 + v5,  (uint64_t)v1 + ((v5 + *(void *)(v4 + 64) + v6) & ~v6),  v2,  v3,  v1[4]);
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(*(void *)(v0 + 24) - 8LL);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 - 8);
  unint64_t v5 = (v3 + *(void *)(v2 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + v3);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL);
  return closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( a1,  v1 + v5,  v1 + ((v5 + *(void *)(v4 + 64) + v6) & ~v6),  v2,  v3) & 1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1)
{
  return outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup( *(void *)a1,  *(void *)(a1 + 8),  *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument._AttributeFixup( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument._AttributeFixup( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument._AttributeFixup( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument._AttributeFixup( uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument._AttributeFixup()
{
  return &type metadata for String.LocalizationValue.FormatArgument._AttributeFixup;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  return &unk_189C70668;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  return &unk_189C706F8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  return &unk_189C70788;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_189C70818;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  return &unk_189C708A8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return &unk_189C70938;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  return &unk_189C709C8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_189C70A58;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  return &unk_189C70AE8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return &unk_189C70B78;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  return &unk_189C70C08;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_182F892D4 + 4 * byte_183725A47[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_182F89308 + 4 * byte_183725A42[v4]))();
}

uint64_t sub_182F89308(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F89310(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F89318LL);
  }
  return result;
}

uint64_t sub_182F89324(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F8932CLL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_182F89330(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F89338(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_189C70C98;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  return &unk_189C70D28;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return &unk_189C70DB8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  return &unk_189C70E48;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  return &unk_189C70ED8;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEE) {
    return ((uint64_t (*)(void))((char *)&loc_182F89470 + 4 * byte_183725A51[v4]))();
  }
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_182F894A4 + 4 * byte_183725A4C[v4]))();
}

uint64_t sub_182F894A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F894AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F894B4LL);
  }
  return result;
}

uint64_t sub_182F894C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F894C8LL);
  }
  *(_BYTE *)__n128 result = a2 + 17;
  return result;
}

uint64_t sub_182F894CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F894D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  return &unk_189C70F68;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  return &unk_189C70FF8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  return &unk_189C71088;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  return &unk_189C71118;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  return &unk_189C711A8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  return &unk_189C71238;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  return &unk_189C712C8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  return &unk_189C71358;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return &unk_189C713E8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  return &unk_189C71478;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  return &unk_189C71508;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  return &unk_189C71598;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  return &unk_189C71628;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  return &unk_189C716B8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  return &unk_189C71748;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  return &unk_189C717D8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  return &unk_189C71868;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_182F89644 + 4 * byte_183725A5B[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_182F89678 + 4 * byte_183725A56[v4]))();
}

uint64_t sub_182F89678(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F89680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F89688LL);
  }
  return result;
}

uint64_t sub_182F89694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F8969CLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_182F896A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F896A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  return &unk_189C718F8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  return &unk_189C71988;
}

void destroy for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1)
{
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  __int16 v19 = *(_WORD *)(a2 + 120);
  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( *(void *)a2,  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v13,  v14,  v15,  v16,  v17,  v18,  v19);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(_WORD *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  uint64_t v27 = *(void *)(a2 + 80);
  uint64_t v28 = *(void *)(a2 + 88);
  uint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  __int16 v32 = *(_WORD *)(a2 + 120);
  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( *(void *)a2,  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v26,  v27,  v28,  v29,  v30,  v31,  v32);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  __int128 v20 = *(_OWORD *)(a1 + 64);
  __int128 v21 = *(_OWORD *)(a1 + 80);
  __int128 v22 = *(_OWORD *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 112);
  __int16 v24 = *(_WORD *)(a1 + 120);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v26;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v31;
  *(_WORD *)(a1 + 120) = v32;
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  *((uint64_t *)&v20 + 1),  v21,  *((uint64_t *)&v21 + 1),  v22,  *((uint64_t *)&v22 + 1),  v23,  v24);
  return a1;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  __int16 v4 = *(_WORD *)(a2 + 120);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  __int128 v13 = *(_OWORD *)(a1 + 64);
  __int128 v14 = *(_OWORD *)(a1 + 80);
  __int128 v15 = *(_OWORD *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 112);
  __int16 v17 = *(_WORD *)(a1 + 120);
  __int128 v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  __int128 v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  __int128 v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = v3;
  *(_WORD *)(a1 + 120) = v4;
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( v5,  v7,  v6,  v8,  v9,  v10,  v11,  v12,  v13,  *((uint64_t *)&v13 + 1),  v14,  *((uint64_t *)&v14 + 1),  v15,  *((uint64_t *)&v15 + 1),  v16,  v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 122)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 64) >> 1;
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 120) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(a1 + 122) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 2LL * -a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_WORD *)(a1 + 120) = 0;
      return result;
    }

    *(_BYTE *)(a1 + 122) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format( uint64_t result, __int16 a2)
{
  uint64_t v2 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v3 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v4 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8LL;
  __int16 v5 = *(_WORD *)(result + 120) & 0x107 | (a2 << 14);
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v2;
  *(void *)(result + 96) = v3;
  *(void *)(result + 112) = v4;
  *(_WORD *)(result + 120) = v5;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  return &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
}

uint64_t specialized String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017LL && a2 == 0x80000001839C9B10LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x3233746E69LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x3436746E69LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x3233746E6975LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x3436746E6975LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x74616F6C66LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0x656C62756F64LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 0x74616F6C666763LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else if (a1 == 0x676E69727473LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8LL;
  }

  else if (a1 == 1702125924 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x80000001839C9B30LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10LL;
  }

  else if (a1 == 0x657474616D726F66LL && a2 == 0xED00006574614464LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11LL;
  }

  else if (a1 == 0xD000000000000015LL && a2 == 0x80000001839C9B50LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12LL;
  }

  else if (a1 == 0x657474616D726F66LL && a2 == 0xEC000000746E4964LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13LL;
  }

  else if (a1 == 0x657474616D726F66LL && a2 == 0xEE0074616F6C4664LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x80000001839C9B70LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15LL;
  }

  else if (a1 == 0x657474616D726F66LL && a2 == 0xED00007473694C64LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16LL;
  }

  else if (a1 == 0x6C6F686563616C70LL && a2 == 0xEB00000000726564LL)
  {
    swift_bridgeObjectRelease();
    return 17LL;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 17LL;
    }
    else {
      return 18LL;
    }
  }

uint64_t specialized String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 12639 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys,  &unk_189C71AA8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys,  &unk_189C71AA8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys,  &unk_189C71AA8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys,  &unk_189C71AA8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys,  &unk_189C71CE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys,  &unk_189C71CE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys,  &unk_189C71CE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys,  &unk_189C71CE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle,  &type metadata for Date.RelativeFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle,  &type metadata for Date.RelativeFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle,  &type metadata for Date.RelativeFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle,  &type metadata for Date.RelativeFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys,  &unk_189C71C58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys,  &unk_189C71C58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys,  &unk_189C71C58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys,  &unk_189C71C58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle,  &type metadata for Date.VerbatimFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle,  &type metadata for Date.VerbatimFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle,  &type metadata for Date.VerbatimFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle,  &type metadata for Date.VerbatimFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle,  &type metadata for Date.VerbatimFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle,  &type metadata for Date.VerbatimFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle,  &type metadata for Date.VerbatimFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys,  &unk_189C71BC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys,  &unk_189C71BC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys,  &unk_189C71BC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys,  &unk_189C71BC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle,  &type metadata for Date.ISO8601FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle,  &type metadata for Date.ISO8601FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle,  &type metadata for Date.ISO8601FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle,  &type metadata for Date.ISO8601FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle,  &type metadata for Date.ISO8601FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle,  &type metadata for Date.ISO8601FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle,  &type metadata for Date.ISO8601FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle,  &type metadata for Date.ISO8601FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys,  &unk_189C71B38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys,  &unk_189C71B38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys,  &unk_189C71B38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys,  &unk_189C71B38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle,  &type metadata for Date.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle,  &type metadata for Date.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle,  &type metadata for Date.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle,  &type metadata for Date.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle,  &type metadata for Date.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle,  &type metadata for Date.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle,  &type metadata for Date.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle,  &type metadata for Date.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }

  return result;
}

uint64_t specialized String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D695465746164LL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x313036386F7369LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x6D69746162726576LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x65766974616C6572LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t specialized String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265626D756ELL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x79636E6572727563LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x746E6563726570LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_182F8C86C + 4 * byte_183725A65[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_182F8C8A0 + 4 * byte_183725A60[v4]))();
}

uint64_t sub_182F8C8A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F8C8A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F8C8B0LL);
  }
  return result;
}

uint64_t sub_182F8C8BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F8C8C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_182F8C8C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F8C8D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_189C71AA8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  return &unk_189C71B38;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  return &unk_189C71BC8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  return &unk_189C71C58;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys( unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_182F8C9AC + 4 * byte_183725A6A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_182F8C9CC + 4 * byte_183725A6F[v4]))();
  }
}

_BYTE *sub_182F8C9AC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_182F8C9CC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_182F8C9D4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_182F8C9DC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_182F8C9E4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_182F8C9EC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  return &unk_189C71CE8;
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)@<X0>( __int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, char a25, uint64_t a26, char a27, uint64_t a28, char a29, uint64_t a30, char a31)
{
  *(_WORD *)(a9 + 280) = 513;
  uint64_t v34 = *a2;
  uint64_t v35 = a2[1];
  *(void *)(a9 + 32) = 0LL;
  __int128 v36 = *a1;
  *(_BYTE *)(a9 + 40) = 1;
  *(void *)(a9 + 48) = 0LL;
  *(_BYTE *)(a9 + 56) = 1;
  *(void *)(a9 + 64) = 0LL;
  *(_BYTE *)(a9 + 72) = 1;
  *(void *)(a9 + 80) = 0LL;
  *(_BYTE *)(a9 + outlined init with copy of Any(v0 + 128, v0 + 88) = 1;
  *(void *)(a9 + 96) = 0LL;
  *(_BYTE *)(a9 + 104) = 1;
  *(void *)(a9 + 112) = 0LL;
  *(_BYTE *)(a9 + 120) = 1;
  *(void *)(a9 + 128) = 0LL;
  *(_BYTE *)(a9 + 136) = 1;
  *(void *)(a9 + 144) = 0LL;
  *(_BYTE *)(a9 + 152) = 1;
  *(void *)(a9 + 160) = 0LL;
  *(_BYTE *)(a9 + 168) = 1;
  *(void *)(a9 + 176) = 0LL;
  *(_BYTE *)(a9 + 184) = 1;
  *(void *)(a9 + 192) = 0LL;
  *(_BYTE *)(a9 + 200) = 1;
  *(void *)(a9 + 208) = 0LL;
  *(_BYTE *)(a9 + 216) = 1;
  *(void *)(a9 + 224) = 0LL;
  *(_BYTE *)(a9 + 232) = 1;
  *(void *)(a9 + 240) = 0LL;
  *(_BYTE *)(a9 + 248) = 1;
  *(void *)(a9 + 256) = 0LL;
  *(_BYTE *)(a9 + 264) = 1;
  *(void *)(a9 + 272) = 0LL;
  *(_OWORD *)a9 = v36;
  *(void *)(a9 + 16) = v34;
  *(void *)(a9 + 24) = v35;
  if (v34 && (void)v36)
  {
    v60[0] = v34;
    v60[1] = v35;
    uint64_t v37 = a7;
    swift_unknownObjectRetain();
    Calendar.timeZone.setter(v60);
    a7 = v37;
  }

  BOOL v38 = a3 == 0x7FFFFFFFFFFFFFFFLL;
  if ((a4 & 1) == 0 && a3 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v39 = 0LL;
  }
  else {
    uint64_t v39 = a3;
  }
  uint64_t v56 = v39;
  if ((a6 & 1) == 0 && a5 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v40 = 0LL;
  }
  else {
    uint64_t v40 = a5;
  }
  uint64_t v55 = v40;
  BOOL v41 = a7 == 0x7FFFFFFFFFFFFFFFLL;
  if ((a8 & 1) == 0 && a7 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v42 = 0LL;
  }
  else {
    uint64_t v42 = a7;
  }
  uint64_t v54 = v42;
  if ((a11 & 1) == 0 && a10 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v43 = 0LL;
  }
  else {
    uint64_t v43 = a10;
  }
  if ((a13 & 1) == 0 && a12 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v44 = 0LL;
  }
  else {
    uint64_t v44 = a12;
  }
  if ((a15 & 1) == 0 && a14 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v45 = 0LL;
  }
  else {
    uint64_t v45 = a14;
  }
  if ((a17 & 1) == 0 && a16 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t result = 0LL;
  }
  else {
    uint64_t result = a16;
  }
  if ((a19 & 1) == 0 && a18 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v47 = 0LL;
  }
  else {
    uint64_t v47 = a18;
  }
  if ((a21 & 1) == 0 && a20 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v48 = 0LL;
  }
  else {
    uint64_t v48 = a20;
  }
  if ((a23 & 1) == 0 && a22 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v49 = 0LL;
  }
  else {
    uint64_t v49 = a22;
  }
  if ((a25 & 1) == 0 && a24 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v50 = 0LL;
  }
  else {
    uint64_t v50 = a24;
  }
  if ((a27 & 1) == 0 && a26 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v51 = 0LL;
  }
  else {
    uint64_t v51 = a26;
  }
  uint64_t v52 = a28;
  *(_BYTE *)(a9 + 264) = a29 & 1 | (a28 == 0x7FFFFFFFFFFFFFFFLL);
  if ((a29 & 1) == 0 && a28 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v52 = 0LL;
  }
  *(_BYTE *)(a9 + 280) = a31 & 1 | (a30 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 32) = v56;
  *(_BYTE *)(a9 + 40) = (a4 | v38) & 1;
  *(void *)(a9 + 48) = v55;
  *(_BYTE *)(a9 + 56) = a6 & 1 | (a5 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 64) = v54;
  *(_BYTE *)(a9 + 72) = (a8 | v41) & 1;
  *(void *)(a9 + 80) = v43;
  *(_BYTE *)(a9 + outlined init with copy of Any(v0 + 128, v0 + 88) = a11 & 1 | (a10 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 112) = v44;
  *(_BYTE *)(a9 + 120) = a13 & 1 | (a12 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 128) = v45;
  *(_BYTE *)(a9 + 136) = a15 & 1 | (a14 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 144) = result;
  *(_BYTE *)(a9 + 152) = a17 & 1 | (a16 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 160) = v47;
  *(_BYTE *)(a9 + 168) = a19 & 1 | (a18 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 176) = v48;
  *(_BYTE *)(a9 + 184) = a21 & 1 | (a20 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 192) = v49;
  *(_BYTE *)(a9 + 200) = a23 & 1 | (a22 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 208) = v50;
  *(_BYTE *)(a9 + 216) = a25 & 1 | (a24 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 240) = v51;
  *(_BYTE *)(a9 + 248) = a27 & 1 | (a26 == 0x7FFFFFFFFFFFFFFFLL);
  *(void *)(a9 + 256) = v52;
  if ((a31 & 1) == 0 && a30 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v53 = 0LL;
  }
  else {
    uint64_t v53 = a30;
  }
  *(void *)(a9 + 272) = v53;
  *(_BYTE *)(a9 + 104) = 1;
  *(void *)(a9 + 96) = 0LL;
  return result;
}

uint64_t DateComponents.calendar.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_unknownObjectRelease();
  void *v1 = v2;
  v1[1] = v3;
  uint64_t result = v1[2];
  if (result) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = v1[3];
    v7[0] = v1[2];
    v7[1] = v6;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter(v7);
  }

  return result;
}

uint64_t DateComponents.timeZone.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  v1[2] = *a1;
  v1[3] = v3;
  swift_unknownObjectRetain();
  uint64_t result = swift_unknownObjectRelease();
  if (v2)
  {
    if (*v1)
    {
      v5[0] = v2;
      v5[1] = v3;
      return Calendar.timeZone.setter(v5);
    }

    else
    {
      return swift_unknownObjectRelease();
    }
  }

  return result;
}

uint64_t DateComponents.era.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 40) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.year.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 56) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.month.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 64) = v3;
  *(_BYTE *)(v2 + 72) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.day.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 80) = v3;
  *(_BYTE *)(v2 + outlined init with copy of Any(v0 + 128, v0 + 88) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.hour.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 112) = v3;
  *(_BYTE *)(v2 + 120) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.minute.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 128) = v3;
  *(_BYTE *)(v2 + 136) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.second.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 144) = v3;
  *(_BYTE *)(v2 + 152) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.nanosecond.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 160) = v3;
  *(_BYTE *)(v2 + 168) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekday.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 176) = v3;
  *(_BYTE *)(v2 + 184) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekdayOrdinal.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 192) = v3;
  *(_BYTE *)(v2 + 200) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.quarter.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 208) = v3;
  *(_BYTE *)(v2 + 216) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekOfMonth.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 240) = v3;
  *(_BYTE *)(v2 + 248) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekOfYear.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 256) = v3;
  *(_BYTE *)(v2 + 264) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.yearForWeekOfYear.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 272) = v3;
  *(_BYTE *)(v2 + 280) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.dayOfYear.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 96) = v3;
  *(_BYTE *)(v2 + 104) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.init(component:value:)@<X0>( Swift::Int_optional _@<0:X1, 8:W2.1>, unsigned __int8 *a2@<X0>, uint64_t a3@<X8>)
{
  int v4 = *a2;
  memset(__src, 0, 40);
  BYTE8(__src[2]) = 1;
  *(void *)&__src[3] = 0LL;
  BYTE8(__src[3]) = 1;
  *(void *)&__src[4] = 0LL;
  BYTE8(__src[4]) = 1;
  *(void *)&__src[5] = 0LL;
  BYTE8(__src[5]) = 1;
  *(void *)&__src[6] = 0LL;
  BYTE8(__src[6]) = 1;
  *(void *)&__src[7] = 0LL;
  BYTE8(__src[7]) = 1;
  *(void *)&__src[8] = 0LL;
  BYTE8(__src[8]) = 1;
  *(void *)&__src[9] = 0LL;
  BYTE8(__src[9]) = 1;
  *(void *)&__src[10] = 0LL;
  BYTE8(__src[10]) = 1;
  *(void *)&__src[11] = 0LL;
  BYTE8(__src[11]) = 1;
  *(void *)&__src[12] = 0LL;
  BYTE8(__src[12]) = 1;
  *(void *)&__src[13] = 0LL;
  BYTE8(__src[13]) = 1;
  *(void *)&__src[14] = 0LL;
  BYTE8(__src[14]) = 1;
  *(void *)&__src[15] = 0LL;
  BYTE8(__src[15]) = 1;
  *(void *)&__src[16] = 0LL;
  BYTE8(__src[16]) = 1;
  WORD4(__src[17]) = 513;
  *(void *)&__src[17] = 0LL;
  if ((v4 - 14) > 2)
  {
    v7[0] = v4;
    v9.value = _.value;
    v9.is_nil = 0;
    DateComponents.setValue(_:for:)(v9, (Foundation::Calendar::Component)v7);
    memcpy(v7, __src, 0x11AuLL);
    destructiveProjectEnumData for PredicateCodableError(v7, v5);
  }

  else
  {
    _s10Foundation14DateComponentsVSgWOi0_((uint64_t)v7);
  }

  return outlined init with take of DateComponents?((uint64_t)v7, a3);
}

Swift::Void __swiftcall DateComponents.setValue(_:for:)(Swift::Int_optional _, Foundation::Calendar::Component a2)
{
}

uint64_t sub_182F8D7FC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 40) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D82C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 56) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D85C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 64) = v3;
  *(_BYTE *)(v2 + 72) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D88C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 80) = v3;
  *(_BYTE *)(v2 + outlined init with copy of Any(v0 + 128, v0 + 88) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D8BC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 112) = v3;
  *(_BYTE *)(v2 + 120) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D8EC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 128) = v3;
  *(_BYTE *)(v2 + 136) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D91C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 144) = v3;
  *(_BYTE *)(v2 + 152) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D94C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 176) = v3;
  *(_BYTE *)(v2 + 184) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D97C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 192) = v3;
  *(_BYTE *)(v2 + 200) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D9AC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 208) = v3;
  *(_BYTE *)(v2 + 216) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8D9DC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 240) = v3;
  *(_BYTE *)(v2 + 248) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8DA0C@<X0>(uint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = result;
  }
  *(void *)(v3 + 256) = v4;
  *a3 = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8DA3C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = result;
  }
  *(void *)(v3 + 272) = v4;
  *(_BYTE *)(a3 + 16) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8DA6C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 160) = v3;
  *(_BYTE *)(v2 + 168) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_182F8DA9C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 96) = v3;
  *(_BYTE *)(v2 + 104) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

uint64_t key path setter for DateComponents.calendar : DateComponents(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *a2 = v3;
  a2[1] = v4;
  uint64_t result = a2[2];
  if (result) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = a2[3];
    v8[0] = a2[2];
    v8[1] = v7;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter(v8);
  }

  return result;
}

uint64_t outlined init with take of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation14DateComponentsVSgWOi0_(uint64_t a1)
{
  *(void *)a1 = 1LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t result = a1 + 8;
  *(_OWORD *)(result + 256) = 0u;
  return result;
}

uint64_t (*DateComponents.calendar.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  swift_unknownObjectRetain();
  return DateComponents.calendar.modify;
}

uint64_t DateComponents.calendar.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = (void *)a1[2];
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v2 = v4;
    v2[1] = v3;
    if (v2[2]) {
      BOOL v5 = v4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v6 = v2[3];
      uint64_t v10 = v2[2];
      uint64_t v11 = v6;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(&v10);
    }

    return swift_unknownObjectRelease();
  }

  else
  {
    swift_unknownObjectRelease();
    *uint64_t v2 = v4;
    v2[1] = v3;
    uint64_t result = v2[2];
    if (result) {
      BOOL v8 = v4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t v9 = v2[3];
      uint64_t v10 = v2[2];
      uint64_t v11 = v9;
      swift_unknownObjectRetain();
      return Calendar.timeZone.setter(&v10);
    }
  }

  return result;
}

uint64_t DateComponents.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t key path setter for DateComponents.timeZone : DateComponents(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  a2[2] = *a1;
  a2[3] = v4;
  swift_unknownObjectRetain_n();
  uint64_t result = swift_unknownObjectRelease();
  if (v3)
  {
    if (*a2)
    {
      v6[0] = v3;
      v6[1] = v4;
      return Calendar.timeZone.setter(v6);
    }

    else
    {
      return swift_unknownObjectRelease();
    }
  }

  return result;
}

uint64_t (*DateComponents.timeZone.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  return DateComponents.timeZone.modify;
}

uint64_t DateComponents.timeZone.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = a1[1];
  uint64_t v3 = (void *)a1[2];
  uint64_t v5 = *a1;
  v3[2] = *a1;
  v3[3] = v4;
  swift_unknownObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (v5)
    {
      if (*v3)
      {
        uint64_t v7 = v5;
        uint64_t v8 = v4;
        Calendar.timeZone.setter(&v7);
      }

      else
      {
        swift_unknownObjectRelease();
      }
    }

    return swift_unknownObjectRelease();
  }

  uint64_t result = swift_unknownObjectRelease();
  if (v5)
  {
    if (!*v3) {
      return swift_unknownObjectRelease();
    }
    uint64_t v7 = v5;
    uint64_t v8 = v4;
    return Calendar.timeZone.setter(&v7);
  }

  return result;
}

uint64_t DateComponents.era.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t *(*DateComponents.era.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.era.modify;
}

uint64_t *DateComponents.era.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = v4;
  return result;
}

uint64_t DateComponents.year.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t *(*DateComponents.year.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 48);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.year.modify;
}

uint64_t *DateComponents.year.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 48) = v2;
  *(_BYTE *)(v1 + 56) = v4;
  return result;
}

uint64_t DateComponents.month.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t *(*DateComponents.month.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 72);
  *(void *)a1 = *(void *)(v1 + 64);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.month.modify;
}

uint64_t *DateComponents.month.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 64) = v2;
  *(_BYTE *)(v1 + 72) = v4;
  return result;
}

uint64_t DateComponents.day.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t *(*DateComponents.day.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 88);
  *(void *)a1 = *(void *)(v1 + 80);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.day.modify;
}

uint64_t *DateComponents.day.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 80) = v2;
  *(_BYTE *)(v1 + outlined init with copy of Any(v0 + 128, v0 + 88) = v4;
  return result;
}

uint64_t DateComponents.hour.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t *(*DateComponents.hour.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 120);
  *(void *)a1 = *(void *)(v1 + 112);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.hour.modify;
}

uint64_t *DateComponents.hour.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 112) = v2;
  *(_BYTE *)(v1 + 120) = v4;
  return result;
}

uint64_t DateComponents.minute.getter()
{
  return *(void *)(v0 + 128);
}

uint64_t *(*DateComponents.minute.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 136);
  *(void *)a1 = *(void *)(v1 + 128);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.minute.modify;
}

uint64_t *DateComponents.minute.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 128) = v2;
  *(_BYTE *)(v1 + 136) = v4;
  return result;
}

uint64_t DateComponents.second.getter()
{
  return *(void *)(v0 + 144);
}

uint64_t *(*DateComponents.second.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 152);
  *(void *)a1 = *(void *)(v1 + 144);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.second.modify;
}

uint64_t *DateComponents.second.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 144) = v2;
  *(_BYTE *)(v1 + 152) = v4;
  return result;
}

uint64_t DateComponents.nanosecond.getter()
{
  return *(void *)(v0 + 160);
}

uint64_t *(*DateComponents.nanosecond.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 168);
  *(void *)a1 = *(void *)(v1 + 160);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.nanosecond.modify;
}

uint64_t *DateComponents.nanosecond.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 160) = v2;
  *(_BYTE *)(v1 + 168) = v4;
  return result;
}

uint64_t DateComponents.weekday.getter()
{
  return *(void *)(v0 + 176);
}

uint64_t *(*DateComponents.weekday.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 184);
  *(void *)a1 = *(void *)(v1 + 176);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.weekday.modify;
}

uint64_t *DateComponents.weekday.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 176) = v2;
  *(_BYTE *)(v1 + 184) = v4;
  return result;
}

uint64_t DateComponents.weekdayOrdinal.getter()
{
  return *(void *)(v0 + 192);
}

uint64_t *(*DateComponents.weekdayOrdinal.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 200);
  *(void *)a1 = *(void *)(v1 + 192);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.weekdayOrdinal.modify;
}

uint64_t *DateComponents.weekdayOrdinal.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 192) = v2;
  *(_BYTE *)(v1 + 200) = v4;
  return result;
}

uint64_t DateComponents.quarter.getter()
{
  return *(void *)(v0 + 208);
}

uint64_t *(*DateComponents.quarter.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 216);
  *(void *)a1 = *(void *)(v1 + 208);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.quarter.modify;
}

uint64_t *DateComponents.quarter.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 208) = v2;
  *(_BYTE *)(v1 + 216) = v4;
  return result;
}

uint64_t DateComponents.weekOfMonth.getter()
{
  return *(void *)(v0 + 240);
}

uint64_t *(*DateComponents.weekOfMonth.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 248);
  *(void *)a1 = *(void *)(v1 + 240);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.weekOfMonth.modify;
}

uint64_t *DateComponents.weekOfMonth.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 240) = v2;
  *(_BYTE *)(v1 + 248) = v4;
  return result;
}

uint64_t DateComponents.weekOfYear.getter()
{
  return *(void *)(v0 + 256);
}

uint64_t *(*DateComponents.weekOfYear.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 264);
  *(void *)a1 = *(void *)(v1 + 256);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.weekOfYear.modify;
}

uint64_t *DateComponents.weekOfYear.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 256) = v2;
  *(_BYTE *)(v1 + 264) = v4;
  return result;
}

uint64_t DateComponents.dayOfYear.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t *(*DateComponents.dayOfYear.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 104);
  *(void *)a1 = *(void *)(v1 + 96);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.dayOfYear.modify;
}

uint64_t *DateComponents.dayOfYear.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 96) = v2;
  *(_BYTE *)(v1 + 104) = v4;
  return result;
}

uint64_t DateComponents.week.getter()
{
  return *(void *)(v0 + 224);
}

uint64_t DateComponents.week.setter(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)(v2 + 224) = v3;
  *(_BYTE *)(v2 + 232) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t *(*DateComponents.week.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 232);
  *(void *)a1 = *(void *)(v1 + 224);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.week.modify;
}

uint64_t *DateComponents.week.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 224) = v2;
  *(_BYTE *)(v1 + 232) = v4;
  return result;
}

uint64_t DateComponents.yearForWeekOfYear.getter()
{
  return *(void *)(v0 + 272);
}

uint64_t *(*DateComponents.yearForWeekOfYear.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + 280);
  *(void *)a1 = *(void *)(v1 + 272);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.yearForWeekOfYear.modify;
}

uint64_t *DateComponents.yearForWeekOfYear.modify(uint64_t *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(v1 + 272) = v2;
  *(_BYTE *)(v1 + 280) = v4;
  return result;
}

uint64_t DateComponents.isLeapMonth.getter()
{
  return *(unsigned __int8 *)(v0 + 281);
}

uint64_t DateComponents.isLeapMonth.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 281) = result;
  return result;
}

_BYTE *(*DateComponents.isLeapMonth.modify(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 281);
  return DateComponents.isLeapMonth.modify;
}

_BYTE *DateComponents.isLeapMonth.modify(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 281LL) = result[8];
  return result;
}

void DateComponents.date.getter(uint64_t a1@<X8>)
{
  void (*v8)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void (*v27)(__int128 *, uint64_t, uint64_t);
  void v28[2];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  uint64_t v2 = *v1;
  if (!*v1)
  {
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }

  uint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v5 = (__int128 *)(v1 + 4);
  uint64_t v6 = v1[3];
  if (v3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 48);
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    v8(&v30, ObjectType, v4);
    swift_unknownObjectRelease();
    uint64_t v29 = v30;
    v28[0] = v3;
    v28[1] = v6;
    uint64_t v9 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v29, (uint64_t)v28);
    swift_unknownObjectRelease();
    if ((v9 & 1) == 0)
    {
      *(void *)&uint64_t v29 = v2;
      *((void *)&v29 + 1) = v4;
      *(void *)&uint64_t v30 = v3;
      *((void *)&v30 + 1) = v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v30);
      __int128 v18 = *((void *)&v29 + 1);
      __int128 v19 = swift_getObjectType();
      *(void *)&uint64_t v30 = v2;
      *((void *)&v30 + 1) = v4;
      uint64_t v31 = v3;
      __int16 v32 = v6;
      *(_OWORD *)((char *)v47 + 10) = *(__int128 *)((char *)v5 + 234);
      __int128 v20 = v5[13];
      uint64_t v45 = v5[12];
      uint64_t v46 = v20;
      v47[0] = v5[14];
      __int128 v21 = v5[9];
      BOOL v41 = v5[8];
      uint64_t v42 = v21;
      __int128 v22 = v5[11];
      uint64_t v43 = v5[10];
      uint64_t v44 = v22;
      uint64_t v23 = v5[5];
      uint64_t v37 = v5[4];
      BOOL v38 = v23;
      __int16 v24 = v5[7];
      uint64_t v39 = v5[6];
      uint64_t v40 = v24;
      uint64_t v25 = v5[1];
      uint64_t v33 = *v5;
      uint64_t v34 = v25;
      uint64_t v26 = v5[3];
      uint64_t v35 = v5[2];
      __int128 v36 = v26;
      uint64_t v27 = *(void (**)(__int128 *, uint64_t, uint64_t))(v18 + 176);
      swift_unknownObjectRetain();
      v27(&v30, v19, v18);
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      goto LABEL_9;
    }

    swift_unknownObjectRelease();
  }

  else
  {
    swift_unknownObjectRetain();
  }

  uint64_t v10 = swift_getObjectType();
  *(void *)&uint64_t v30 = v2;
  *((void *)&v30 + 1) = v4;
  uint64_t v31 = v3;
  __int16 v32 = v6;
  *(_OWORD *)((char *)v47 + 10) = *(__int128 *)((char *)v5 + 234);
  uint64_t v11 = v5[13];
  uint64_t v45 = v5[12];
  uint64_t v46 = v11;
  v47[0] = v5[14];
  uint64_t v12 = v5[9];
  BOOL v41 = v5[8];
  uint64_t v42 = v12;
  __int128 v13 = v5[11];
  uint64_t v43 = v5[10];
  uint64_t v44 = v13;
  __int128 v14 = v5[5];
  uint64_t v37 = v5[4];
  BOOL v38 = v14;
  __int128 v15 = v5[7];
  uint64_t v39 = v5[6];
  uint64_t v40 = v15;
  uint64_t v16 = v5[1];
  uint64_t v33 = *v5;
  uint64_t v34 = v16;
  __int16 v17 = v5[3];
  uint64_t v35 = v5[2];
  __int128 v36 = v17;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v4 + 176))(&v30, v10, v4);
LABEL_9:
  swift_unknownObjectRelease();
}

Swift::Int_optional __swiftcall DateComponents.value(for:)(Foundation::Calendar::Component a1)
{
  Swift::Int v2 = ((uint64_t (*)(void, void))((char *)sub_182F8E748 + 4 * byte_183729022[*(unsigned __int8 *)a1]))( *(void *)(v1 + 32),  *(unsigned __int8 *)(v1 + 40));
  result.value = v2;
  result.is_nil = v3;
  return result;
}

uint64_t sub_182F8E748()
{
  return 0LL;
}

uint64_t sub_182F8E754()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_182F8E760()
{
  return *(void *)(v0 + 64);
}

uint64_t sub_182F8E76C()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_182F8E778()
{
  return *(void *)(v0 + 112);
}

uint64_t sub_182F8E784()
{
  return *(void *)(v0 + 128);
}

uint64_t sub_182F8E790()
{
  return *(void *)(v0 + 144);
}

uint64_t sub_182F8E79C()
{
  return *(void *)(v0 + 176);
}

uint64_t sub_182F8E7A8()
{
  return *(void *)(v0 + 192);
}

uint64_t sub_182F8E7B4()
{
  return *(void *)(v0 + 208);
}

uint64_t sub_182F8E7C0()
{
  return *(void *)(v0 + 240);
}

uint64_t sub_182F8E7CC()
{
  return *(void *)(v0 + 256);
}

uint64_t sub_182F8E7D8()
{
  return *(void *)(v0 + 272);
}

uint64_t sub_182F8E7E4()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_182F8E7F0()
{
  return *(void *)(v0 + 96);
}

uint64_t DateComponents.isValidDate.getter()
{
  void (*v4)(void *__return_ptr, _OWORD *, uint64_t, uint64_t);
  double v5;
  uint64_t v6;
  void (*v7)(double *__return_ptr, void *, uint64_t, uint64_t);
  uint64_t v9;
  double v10;
  double v11;
  void v12[36];
  uint64_t v13;
  double v14;
  uint64_t v15;
  _OWORD __src[18];
  _OWORD __dst[18];
  memcpy(__dst, v0, 0x11AuLL);
  double v1 = *(double *)__dst;
  if (!*(void *)&__dst[0]) {
    return 0LL;
  }
  uint64_t v2 = *((void *)&__dst[0] + 1);
  if ((BYTE8(__dst[10]) & 1) != 0) {
    goto LABEL_3;
  }
  if ((*(void *)&__dst[10] & 0x8000000000000000LL) != 0)
  {
LABEL_3:
    uint64_t ObjectType = swift_getObjectType();
    memcpy(__src, v0, 0x11AuLL);
    uint64_t v4 = *(void (**)(void *__return_ptr, _OWORD *, uint64_t, uint64_t))(v2 + 176);
    swift_unknownObjectRetain();
    v4(v12, __src, ObjectType, v2);
    if ((v12[1] & 1) == 0)
    {
      uint64_t v5 = *(double *)v12;
      goto LABEL_11;
    }

    goto LABEL_8;
  }

  *(void *)&__src[2] = *(void *)&__dst[2];
  BYTE8(__src[2]) = BYTE8(__dst[2]);
  *(void *)&__src[3] = *(void *)&__dst[3];
  BYTE8(__src[3]) = BYTE8(__dst[3]);
  *(void *)&__src[4] = *(void *)&__dst[4];
  BYTE8(__src[4]) = BYTE8(__dst[4]);
  *(void *)&__src[5] = *(void *)&__dst[5];
  BYTE8(__src[5]) = BYTE8(__dst[5]);
  *(void *)&__src[6] = *(void *)&__dst[6];
  BYTE8(__src[6]) = BYTE8(__dst[6]);
  *(void *)&__src[7] = *(void *)&__dst[7];
  BYTE8(__src[7]) = BYTE8(__dst[7]);
  *(void *)&__src[8] = *(void *)&__dst[8];
  BYTE8(__src[8]) = BYTE8(__dst[8]);
  *(void *)&__src[9] = *(void *)&__dst[9];
  BYTE8(__src[9]) = BYTE8(__dst[9]);
  *(void *)&__src[11] = *(void *)&__dst[11];
  BYTE8(__src[11]) = BYTE8(__dst[11]);
  *(void *)&__src[12] = *(void *)&__dst[12];
  BYTE8(__src[12]) = BYTE8(__dst[12]);
  *(void *)&__src[13] = *(void *)&__dst[13];
  BYTE8(__src[13]) = BYTE8(__dst[13]);
  *(void *)&__src[14] = *(void *)&__dst[14];
  BYTE8(__src[14]) = BYTE8(__dst[14]);
  *(void *)&__src[15] = *(void *)&__dst[15];
  BYTE8(__src[15]) = BYTE8(__dst[15]);
  BYTE8(__src[16]) = BYTE8(__dst[16]);
  WORD4(__src[17]) = WORD4(__dst[17]);
  *(void *)&__src[16] = *(void *)&__dst[16];
  *(void *)&__src[17] = *(void *)&__dst[17];
  __src[0] = __dst[0];
  __src[1] = __dst[1];
  *(void *)&__src[10] = 0LL;
  BYTE8(__src[10]) = 0;
  uint64_t v6 = swift_getObjectType();
  memcpy(v12, __src, 0x11AuLL);
  uint64_t v7 = *(void (**)(double *__return_ptr, void *, uint64_t, uint64_t))(v2 + 176);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  outlined retain of DateComponents((uint64_t)__src);
  v7(&v14, v12, v6, v2);
  outlined release of DateComponents((uint64_t)__src);
  outlined release of DateComponents((uint64_t)__src);
  if ((v15 & 1) != 0)
  {
LABEL_8:
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t v5 = v14;
LABEL_11:
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v12[0] = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v14, 0LL);
  specialized Set._Variant.insert(_:)(&v14, 1uLL);
  specialized Set._Variant.insert(_:)(&v14, 9uLL);
  specialized Set._Variant.insert(_:)(&v14, 2uLL);
  specialized Set._Variant.insert(_:)(&v14, 3uLL);
  specialized Set._Variant.insert(_:)(&v14, 4uLL);
  specialized Set._Variant.insert(_:)(&v14, 5uLL);
  specialized Set._Variant.insert(_:)(&v14, 6uLL);
  specialized Set._Variant.insert(_:)(&v14, 7uLL);
  specialized Set._Variant.insert(_:)(&v14, 8uLL);
  specialized Set._Variant.insert(_:)(&v14, 0xAuLL);
  specialized Set._Variant.insert(_:)(&v14, 0xBuLL);
  specialized Set._Variant.insert(_:)(&v14, 0xCuLL);
  specialized Set._Variant.insert(_:)(&v14, 0x11uLL);
  __int128 v14 = v1;
  __int128 v15 = v2;
  uint64_t v9 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v9, &v13);
  uint64_t v10 = 1.59271755e13;
  if (v5 <= 1.59271755e13) {
    uint64_t v10 = v5;
  }
  uint64_t v11 = fmax(v10, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v13, &v11, __src);
  swift_bridgeObjectRelease();
  memcpy(v12, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v12);
  swift_unknownObjectRelease();
  if ((BYTE8(__dst[2]) & 1) == 0 && ((v12[5] & 1) != 0 || *(void *)&__dst[2] != v12[4])
    || (BYTE8(__dst[3]) & 1) == 0 && ((v12[7] & 1) != 0 || *(void *)&__dst[3] != v12[6])
    || (BYTE8(__dst[13]) & 1) == 0 && ((v12[27] & 1) != 0 || *(void *)&__dst[13] != v12[26])
    || (BYTE8(__dst[4]) & 1) == 0 && ((v12[9] & 1) != 0 || *(void *)&__dst[4] != v12[8])
    || (BYTE8(__dst[5]) & 1) == 0 && ((v12[11] & 1) != 0 || *(void *)&__dst[5] != v12[10])
    || (BYTE8(__dst[7]) & 1) == 0 && ((v12[15] & 1) != 0 || *(void *)&__dst[7] != v12[14])
    || (BYTE8(__dst[8]) & 1) == 0 && ((v12[17] & 1) != 0 || *(void *)&__dst[8] != v12[16])
    || (BYTE8(__dst[9]) & 1) == 0 && ((v12[19] & 1) != 0 || *(void *)&__dst[9] != v12[18])
    || (BYTE8(__dst[11]) & 1) == 0 && ((v12[23] & 1) != 0 || *(void *)&__dst[11] != v12[22])
    || (BYTE8(__dst[12]) & 1) == 0 && ((v12[25] & 1) != 0 || *(void *)&__dst[12] != v12[24])
    || (BYTE8(__dst[15]) & 1) == 0 && ((v12[31] & 1) != 0 || *(void *)&__dst[15] != v12[30])
    || (BYTE8(__dst[16]) & 1) == 0 && ((v12[33] & 1) != 0 || *(void *)&__dst[16] != v12[32])
    || (BYTE8(__dst[17]) & 1) == 0 && ((v12[35] & 1) != 0 || *(void *)&__dst[17] != v12[34]))
  {
    return 0LL;
  }

  if ((BYTE8(__dst[6]) & 1) != 0) {
    return 1LL;
  }
  else {
    return (*(void *)&__dst[6] == v12[12]) & ~LOBYTE(v12[13]);
  }
}

uint64_t DateComponents.isValidDate(in:)(double *a1)
{
  void (*v7)(double *__return_ptr, void *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v9;
  double v10;
  double v11;
  void v12[36];
  uint64_t v13;
  double v14;
  uint64_t v15;
  _OWORD __src[18];
  _OWORD __dst[18];
  double v3 = *a1;
  uint64_t v2 = *((void *)a1 + 1);
  memcpy(__dst, v1, 0x11AuLL);
  if ((BYTE8(__dst[10]) & 1) != 0) {
    goto LABEL_2;
  }
  if ((*(void *)&__dst[10] & 0x8000000000000000LL) != 0)
  {
LABEL_2:
    uint64_t ObjectType = swift_getObjectType();
    memcpy(__src, v1, 0x11AuLL);
    (*(void (**)(void *__return_ptr, _OWORD *, uint64_t, uint64_t))(v2 + 176))(v12, __src, ObjectType, v2);
    if ((v12[1] & 1) == 0)
    {
      double v5 = *(double *)v12;
      goto LABEL_8;
    }

    return 0LL;
  }

  *(void *)&__src[2] = *(void *)&__dst[2];
  BYTE8(__src[2]) = BYTE8(__dst[2]);
  *(void *)&__src[3] = *(void *)&__dst[3];
  BYTE8(__src[3]) = BYTE8(__dst[3]);
  *(void *)&__src[4] = *(void *)&__dst[4];
  BYTE8(__src[4]) = BYTE8(__dst[4]);
  *(void *)&__src[5] = *(void *)&__dst[5];
  BYTE8(__src[5]) = BYTE8(__dst[5]);
  *(void *)&__src[6] = *(void *)&__dst[6];
  BYTE8(__src[6]) = BYTE8(__dst[6]);
  *(void *)&__src[7] = *(void *)&__dst[7];
  BYTE8(__src[7]) = BYTE8(__dst[7]);
  *(void *)&__src[8] = *(void *)&__dst[8];
  BYTE8(__src[8]) = BYTE8(__dst[8]);
  *(void *)&__src[9] = *(void *)&__dst[9];
  BYTE8(__src[9]) = BYTE8(__dst[9]);
  *(void *)&__src[11] = *(void *)&__dst[11];
  BYTE8(__src[11]) = BYTE8(__dst[11]);
  *(void *)&__src[12] = *(void *)&__dst[12];
  BYTE8(__src[12]) = BYTE8(__dst[12]);
  *(void *)&__src[13] = *(void *)&__dst[13];
  BYTE8(__src[13]) = BYTE8(__dst[13]);
  *(void *)&__src[14] = *(void *)&__dst[14];
  BYTE8(__src[14]) = BYTE8(__dst[14]);
  *(void *)&__src[15] = *(void *)&__dst[15];
  BYTE8(__src[15]) = BYTE8(__dst[15]);
  BYTE8(__src[16]) = BYTE8(__dst[16]);
  WORD4(__src[17]) = WORD4(__dst[17]);
  *(void *)&__src[16] = *(void *)&__dst[16];
  *(void *)&__src[17] = *(void *)&__dst[17];
  __src[0] = __dst[0];
  __src[1] = __dst[1];
  *(void *)&__src[10] = 0LL;
  BYTE8(__src[10]) = 0;
  uint64_t v6 = swift_getObjectType();
  memcpy(v12, __src, 0x11AuLL);
  uint64_t v7 = *(void (**)(double *__return_ptr, void *, uint64_t, uint64_t))(v2 + 176);
  outlined retain of DateComponents((uint64_t)__dst);
  outlined retain of DateComponents((uint64_t)__src);
  v7(&v14, v12, v6, v2);
  outlined release of DateComponents((uint64_t)__src);
  outlined release of DateComponents((uint64_t)__src);
  Swift::Int_optional result = 0LL;
  if ((v15 & 1) != 0) {
    return result;
  }
  double v5 = v14;
LABEL_8:
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v12[0] = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v14, 0LL);
  specialized Set._Variant.insert(_:)(&v14, 1uLL);
  specialized Set._Variant.insert(_:)(&v14, 9uLL);
  specialized Set._Variant.insert(_:)(&v14, 2uLL);
  specialized Set._Variant.insert(_:)(&v14, 3uLL);
  specialized Set._Variant.insert(_:)(&v14, 4uLL);
  specialized Set._Variant.insert(_:)(&v14, 5uLL);
  specialized Set._Variant.insert(_:)(&v14, 6uLL);
  specialized Set._Variant.insert(_:)(&v14, 7uLL);
  specialized Set._Variant.insert(_:)(&v14, 8uLL);
  specialized Set._Variant.insert(_:)(&v14, 0xAuLL);
  specialized Set._Variant.insert(_:)(&v14, 0xBuLL);
  specialized Set._Variant.insert(_:)(&v14, 0xCuLL);
  specialized Set._Variant.insert(_:)(&v14, 0x11uLL);
  __int128 v14 = v3;
  __int128 v15 = v2;
  uint64_t v9 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v9, &v13);
  uint64_t v10 = 1.59271755e13;
  if (v5 <= 1.59271755e13) {
    uint64_t v10 = v5;
  }
  uint64_t v11 = fmax(v10, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v13, &v11, __src);
  swift_bridgeObjectRelease();
  memcpy(v12, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v12);
  if ((BYTE8(__dst[2]) & 1) == 0 && ((v12[5] & 1) != 0 || *(void *)&__dst[2] != v12[4])
    || (BYTE8(__dst[3]) & 1) == 0 && ((v12[7] & 1) != 0 || *(void *)&__dst[3] != v12[6])
    || (BYTE8(__dst[13]) & 1) == 0 && ((v12[27] & 1) != 0 || *(void *)&__dst[13] != v12[26])
    || (BYTE8(__dst[4]) & 1) == 0 && ((v12[9] & 1) != 0 || *(void *)&__dst[4] != v12[8])
    || (BYTE8(__dst[5]) & 1) == 0 && ((v12[11] & 1) != 0 || *(void *)&__dst[5] != v12[10])
    || (BYTE8(__dst[7]) & 1) == 0 && ((v12[15] & 1) != 0 || *(void *)&__dst[7] != v12[14])
    || (BYTE8(__dst[8]) & 1) == 0 && ((v12[17] & 1) != 0 || *(void *)&__dst[8] != v12[16])
    || (BYTE8(__dst[9]) & 1) == 0 && ((v12[19] & 1) != 0 || *(void *)&__dst[9] != v12[18])
    || (BYTE8(__dst[11]) & 1) == 0 && ((v12[23] & 1) != 0 || *(void *)&__dst[11] != v12[22])
    || (BYTE8(__dst[12]) & 1) == 0 && ((v12[25] & 1) != 0 || *(void *)&__dst[12] != v12[24])
    || (BYTE8(__dst[15]) & 1) == 0 && ((v12[31] & 1) != 0 || *(void *)&__dst[15] != v12[30])
    || (BYTE8(__dst[16]) & 1) == 0 && ((v12[33] & 1) != 0 || *(void *)&__dst[16] != v12[32])
    || (BYTE8(__dst[17]) & 1) == 0 && ((v12[35] & 1) != 0 || *(void *)&__dst[17] != v12[34]))
  {
    return 0LL;
  }

  if ((BYTE8(__dst[6]) & 1) != 0) {
    return 1LL;
  }
  else {
    return (*(void *)&__dst[6] == v12[12]) & ~LOBYTE(v12[13]);
  }
}

uint64_t DateComponents.scaled(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = v2;
  memcpy(__dst, v3, 0x11AuLL);
  __int128 v55 = *v3;
  __int128 v56 = v3[1];
  char v54 = __dst[5];
  int v53 = HIDWORD(__dst[5]);
  LOBYTE(v53) = BYTE4(__dst[5]);
  char v52 = __dst[7];
  *(_DWORD *)&v51[3] = HIDWORD(__dst[7]);
  *(_DWORD *)uint64_t v51 = *(_DWORD *)((char *)&__dst[7] + 1);
  char v50 = __dst[9];
  *(_DWORD *)&v49[3] = HIDWORD(__dst[9]);
  *(_DWORD *)uint64_t v49 = *(_DWORD *)((char *)&__dst[9] + 1);
  char v48 = __dst[11];
  uint64_t v6 = __dst[14];
  *(void *)&v47[15] = __dst[13];
  *(_OWORD *)uint64_t v47 = *(_OWORD *)((char *)&__dst[11] + 1);
  char v46 = __dst[15];
  uint64_t v7 = __dst[16];
  char v45 = __dst[17];
  uint64_t v8 = __dst[18];
  char v44 = __dst[19];
  uint64_t v9 = __dst[20];
  char v43 = __dst[21];
  uint64_t v10 = __dst[26];
  char v42 = __dst[27];
  char v41 = __dst[29];
  uint64_t v11 = __dst[30];
  char v40 = __dst[31];
  uint64_t result = __dst[32];
  char v39 = __dst[33];
  uint64_t v13 = __dst[34];
  char v14 = __dst[35];
  char v38 = BYTE1(__dst[35]);
  if ((__dst[5] & 1) != 0)
  {
    uint64_t v37 = __dst[4];
    uint64_t v17 = __dst[6];
    if ((__dst[7] & 1) != 0) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v15 = __dst[4] * a1;
    if ((unsigned __int128)(__dst[4] * (__int128)a1) >> 64 != (__dst[4] * a1) >> 63)
    {
      __break(1u);
      goto LABEL_80;
    }

    BOOL v16 = v15 == 0x7FFFFFFFFFFFFFFFLL;
    if (v15 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v15 = 0LL;
    }
    uint64_t v37 = v15;
    char v54 = v16;
    uint64_t v17 = __dst[6];
    if ((__dst[7] & 1) != 0)
    {
LABEL_6:
      uint64_t v18 = __dst[8];
      if ((__dst[9] & 1) != 0) {
        goto LABEL_7;
      }
      goto LABEL_24;
    }
  }

  uint64_t v21 = v17 * a1;
  if ((unsigned __int128)(v17 * (__int128)a1) >> 64 != (v17 * a1) >> 63)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }

  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v17 = 0LL;
  }
  else {
    v17 *= a1;
  }
  char v52 = v21 == 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v18 = __dst[8];
  if ((__dst[9] & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = __dst[10];
    if ((__dst[11] & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

LABEL_59:
  uint64_t v29 = v20 * a1;
  if ((unsigned __int128)(v20 * (__int128)a1) >> 64 != (v20 * a1) >> 63)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }

  if (v29 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v20 = 0LL;
  }
  else {
    v20 *= a1;
  }
  char v41 = v29 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[31] & 1) != 0)
  {
LABEL_15:
    if ((__dst[33] & 1) != 0) {
      goto LABEL_16;
    }
    goto LABEL_69;
  }

  uint64_t v116 = v26;
  *(void *)&uint64_t v115 = *(void *)&v118[10];
  v117[0] = xmmword_183729430;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  __int128 v63 = v12[2];
  uint64_t v62 = v12[3];
  if (v63 >= v62 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v62 > 1),  v63 + 1,  1,  v12);
  }
  _OWORD v12[2] = v63 + 1;
  uint64_t v64 = &v12[6 * v63];
  uint64_t v65 = v117[0];
  uint64_t v66 = v117[2];
  v64[3] = v117[1];
  v64[4] = v66;
  v64[2] = v65;
  if ((BYTE8(v118[11]) & 1) != 0)
  {
LABEL_21:
    if ((BYTE8(v118[12]) & 1) != 0) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }

      __int128 v55 = 5136718LL;
      char v54 = 0xE300000000000000LL;
      goto LABEL_76;
    }

    return 0LL;
  }

  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease();
  uint64_t v85 = 0xD000000000000014LL;
  __int128 v86 = 0x80000001839CA5A0LL;
  uint64_t v32 = specialized NSDecimal.init(_:)(*(double *)&a1);
  LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5) = v33;
  LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7) = v34;
  *(void *)__int128 v84 = v32;
  __int128 v35 = HIDWORD(v32);
  uint64_t v9 = HIWORD(v32);
  v10._rawValue = (void *)(v33 >> 16);
  *(void *)&v84[8] = v33;
  uint64_t v11 = HIDWORD(v33);
  uint64_t v12 = (char *)HIWORD(v33);
  uint64_t v13 = HIWORD(v34);
  *(_DWORD *)&v84[16] = v34;
  if (!_So9NSDecimala__length_getter(v84))
  {
    *(void *)__int128 v84 = v32;
    *(_WORD *)&v84[8] = v5;
    *(_WORD *)&v84[10] = v10._rawValue;
    *(_WORD *)&v84[12] = v11;
    *(_WORD *)&v84[14] = (_WORD)v12;
    *(_WORD *)&v84[16] = v7;
    *(_WORD *)&v84[18] = v13;
  }

  *(void *)__int128 v84 = v32;
  *(_WORD *)&v84[8] = v5;
  *(_WORD *)&v84[10] = v10._rawValue;
  *(_WORD *)&v84[12] = v11;
  *(_WORD *)&v84[14] = (_WORD)v12;
  *(_WORD *)&v84[16] = v7;
  *(_WORD *)&v84[18] = v13;
  if (!_So9NSDecimala__length_getter(v84))
  {
LABEL_55:
    char v54 = 0xE100000000000000LL;
    __int128 v55 = 48LL;
LABEL_76:
    uint64_t v66 = v54;
    String.append(_:)(*(Swift::String *)&v55);
    swift_bridgeObjectRelease();
    return v85;
  }

  *(void *)&uint64_t v83 = 0LL;
  *((void *)&v83 + 1) = 0xE000000000000000LL;
  *(void *)__int128 v84 = v32;
  *(_WORD *)&v84[8] = v5;
  *(_WORD *)&v84[10] = v10._rawValue;
  *(_WORD *)&v84[12] = v11;
  *(_WORD *)&v84[14] = (_WORD)v12;
  *(_WORD *)&v84[16] = v7;
  *(_WORD *)&v84[18] = v13;
  *(void *)uint64_t v82 = v32;
  *(_WORD *)&v82[8] = v5;
  *(_WORD *)&v82[10] = v10._rawValue;
  *(_WORD *)&v82[12] = v11;
  *(_WORD *)&v82[14] = (_WORD)v12;
  *(_WORD *)&v82[16] = v7;
  *(_WORD *)&v82[18] = v13;
  if ((int)_So9NSDecimala__exponent_getter(v82) >= 1)
  {
    do
    {
      v36._uint64_t countAndFlagsBits = 48LL;
      v36._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v36);
      *(_DWORD *)uint64_t v82 = v32;
      *(_WORD *)&v82[4] = v35;
      *(_WORD *)&v82[6] = v9;
      *(_WORD *)&v82[8] = v5;
      *(_WORD *)&v82[10] = v10._rawValue;
      *(_WORD *)&v82[12] = v11;
      *(_WORD *)&v82[14] = (_WORD)v12;
      *(_WORD *)&v82[16] = v7;
      *(_WORD *)&v82[18] = v13;
      uint64_t v37 = _So9NSDecimala__exponent_getter(v82);
      _So9NSDecimala__exponent_setter((v37 - 1), v84);
      LODWORD(v32) = *(_DWORD *)v84;
      LOWORD(v35) = *(_WORD *)&v84[4];
      LOWORD(v9) = *(_WORD *)&v84[6];
      LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5) = *(_WORD *)&v84[8];
      LOWORD(v10._rawValue) = *(_WORD *)&v84[10];
      LOWORD(v11) = *(_WORD *)&v84[12];
      LOWORD(v12) = *(_WORD *)&v84[14];
      LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7) = *(_WORD *)&v84[16];
      LOWORD(v13) = *(_WORD *)&v84[18];
      *(_OWORD *)uint64_t v82 = *(_OWORD *)v84;
      *(_WORD *)&v82[16] = *(_WORD *)&v84[16];
      *(_WORD *)&v82[18] = *(_WORD *)&v84[18];
    }

    while ((int)_So9NSDecimala__exponent_getter(v82) > 0);
  }

  *(_DWORD *)uint64_t v82 = v32;
  *(_WORD *)&v82[4] = v35;
  *(_WORD *)&v82[6] = v9;
  *(_WORD *)&v82[8] = v5;
  *(_WORD *)&v82[10] = v10._rawValue;
  *(_WORD *)&v82[12] = v11;
  *(_WORD *)&v82[14] = (_WORD)v12;
  *(_WORD *)&v82[16] = v7;
  *(_WORD *)&v82[18] = v13;
  if (!_So9NSDecimala__exponent_getter(v82))
  {
    _So9NSDecimala__exponent_setter(1LL, v84);
    LODWORD(v32) = *(_DWORD *)v84;
    LOWORD(v35) = *(_WORD *)&v84[4];
    LOWORD(v9) = *(_WORD *)&v84[6];
    LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5) = *(_WORD *)&v84[8];
    LOWORD(v10._rawValue) = *(_WORD *)&v84[10];
    LOWORD(v11) = *(_WORD *)&v84[12];
    LOWORD(v12) = *(_WORD *)&v84[14];
    LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7) = *(_WORD *)&v84[16];
    LOWORD(v13) = *(_WORD *)&v84[18];
  }

  *(_DWORD *)uint64_t v82 = v32;
  *(_WORD *)&v82[4] = v35;
  *(_WORD *)&v82[6] = v9;
  *(_WORD *)&v82[8] = v5;
  *(_WORD *)&v82[10] = v10._rawValue;
  *(_WORD *)&v82[12] = v11;
  *(_WORD *)&v82[14] = (_WORD)v12;
  *(_WORD *)&v82[16] = v7;
  *(_WORD *)&v82[18] = v13;
  if (!_So9NSDecimala__length_getter(v82))
  {
    char v38 = v35;
    char v39 = v32;
LABEL_68:
    *(_DWORD *)uint64_t v82 = v39;
    *(_WORD *)&v82[4] = v38;
    *(_WORD *)&v82[6] = v9;
    *(_WORD *)&v82[8] = v5;
    *(_WORD *)&v82[10] = v10._rawValue;
    *(_WORD *)&v82[12] = v11;
    *(_WORD *)&v82[14] = (_WORD)v12;
    *(_WORD *)&v82[16] = v7;
    *(_WORD *)&v82[18] = v13;
    __int128 v56 = v38;
    uint64_t v57 = v39;
    while (1)
    {
      *(_DWORD *)uint64_t v82 = v57;
      *(_WORD *)&v82[4] = v56;
      *(_WORD *)&v82[6] = v9;
      *(_WORD *)&v82[8] = v5;
      *(_WORD *)&v82[10] = v10._rawValue;
      *(_WORD *)&v82[12] = v11;
      *(_WORD *)&v82[14] = (_WORD)v12;
      *(_WORD *)&v82[16] = v7;
      *(_WORD *)&v82[18] = v13;
      v60._uint64_t countAndFlagsBits = 48LL;
      v60._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v60);
      *(_DWORD *)uint64_t v82 = v57;
      *(_WORD *)&v82[4] = v56;
      *(_WORD *)&v82[6] = v9;
      *(_WORD *)&v82[8] = v5;
      *(_WORD *)&v82[10] = v10._rawValue;
      *(_WORD *)&v82[12] = v11;
      *(_WORD *)&v82[14] = (_WORD)v12;
      *(_WORD *)&v82[16] = v7;
      *(_WORD *)&v82[18] = v13;
      uint64_t v61 = _So9NSDecimala__exponent_getter(v82);
      _So9NSDecimala__exponent_setter((v61 + 1), v84);
      uint64_t v57 = *(_DWORD *)v84;
      __int128 v56 = *(_WORD *)&v84[4];
      LOWORD(v9) = *(_WORD *)&v84[6];
      LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5) = *(_WORD *)&v84[8];
      LOWORD(v10._rawValue) = *(_WORD *)&v84[10];
      LOWORD(v11) = *(_WORD *)&v84[12];
      LOWORD(v12) = *(_WORD *)&v84[14];
      LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7) = *(_WORD *)&v84[16];
      LOWORD(v13) = *(_WORD *)&v84[18];
    }

      swift_retain();
LABEL_60:
      v32[19] = v51;
      uint64_t v102 = (void *)type metadata accessor for __JSONEncoder();
      uint64_t v103 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
      v101[0] = v32;
      swift_retain();
      v92(v50, v97, v101);
      if (v49)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
        v32[18] = v47;
        swift_retain();
        swift_release();
        v32[19] = v48;
        swift_release();
        swift_release();
        uint64_t v27 = v32[2];
        if (v27 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v79 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        if (v89 >= v79) {
          goto LABEL_67;
        }
        uint64_t v27 = *v88;
        if (!(*v88 >> 62))
        {
          if (*(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
LABEL_66:
            specialized RangeReplaceableCollection<>.popLast()();
            swift_release();
LABEL_67:
            swift_willThrow();
            outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v92);
            return v27;
          }

          goto LABEL_92;
        }

    __break(1u);
    JUMPOUT(0x18304D4D4LL);
  }

  __break(1u);
LABEL_60:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
LABEL_60:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  uint64_t v57 = (void *)swift_allocError();
  *__int128 v58 = 7;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  __int128 v71 = 0;
  uint64_t v70 = 1048LL;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_61:
  *(void *)&v104[0] = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v59 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v61 = v60;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v75._uint64_t countAndFlagsBits = 0LL;
  LOBYTE(v75._object) = v103;
  BYTE1(v75._object) = v102;
  BYTE2(v75._object) = v101;
  BYTE3(v75._object) = v100;
  BYTE4(v75._object) = v99;
  BYTE5(v75._object) = v98;
  BYTE6(v75._object) = v97;
  HIBYTE(v75._object) = v96;
  v76[0] = v95;
  memset(&v76[8], 0, 64);
  uint64_t v77 = 0LL;
  LOBYTE(v78) = v94;
  uint64_t v79 = 0LL;
  *(void *)&uint64_t v80 = 0LL;
  *((void *)&v80 + 1) = v59;
  __int128 v81 = v61;
  v82[0] = 0LL;
  v82[1] = 0LL;
  LOBYTE(v82[2]) = v93;
  BYTE1(v82[2]) = v92;
  v104[0] = v75;
  v104[1] = *(_OWORD *)v76;
  v104[4] = *(_OWORD *)&v76[48];
  v104[5] = 0uLL;
  v104[2] = *(_OWORD *)&v76[16];
  v104[3] = *(_OWORD *)&v76[32];
  *(_OWORD *)((char *)v105 + 10) = *(_OWORD *)((char *)v82 + 2);
  v104[7] = v80;
  v105[0] = v61;
  v104[6] = v78;
  double v3 = (unint64_t)URLComponents._URLComponents.query.getter(v93);
  outlined release of URLComponents((uint64_t)&v75);
  return v3;
}

        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0 || (v27 & 0x8000000000000000LL) != 0 || v27 >> 16) {
          goto LABEL_67;
        }
      }

      if (++v14 == v13) {
        goto LABEL_66;
      }
    }

    __break(1u);
LABEL_69:
    swift_bridgeObjectRelease();
LABEL_67:
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }

  Hasher._combine(_:)(0);
  if (!v35) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v45 = v35;
  _CFObject.hash(into:)();

  if (v37)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v46 = v37;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }

  Hasher._combine(_:)(0);
  if (!v33) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v43 = v33;
  _CFObject.hash(into:)();

  if (v35)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v44 = v35;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }

  Hasher._combine(_:)(0);
  if (!v34) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v44 = v34;
  _CFObject.hash(into:)();

  if (v36)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v45 = v36;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }

  Hasher._combine(_:)(0);
  if (!v36) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v46 = v36;
  _CFObject.hash(into:)();

  if (v38)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v47 = v38;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }

  Hasher._combine(_:)(0);
  if (!v35) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v45 = v35;
  _CFObject.hash(into:)();

  if (v37)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v46 = v37;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }

  Hasher._combine(_:)(0);
  if (!v34) {
    goto LABEL_60;
  }
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v44 = v34;
  _CFObject.hash(into:)();

  if (v36)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v45 = v36;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }

    __int128 v95 = (v79 - 1) & v79;
    uint64_t v88 = v80;
    __int128 v73 = __clz(__rbit64(v79)) + (v80 << 6);
LABEL_32:
    uint64_t v74 = *(void *)(v96 + 72) * v73;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v54 + 48) + v74,  v37,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v75 = v37;
    uint64_t v76 = 8 * v73;
    uint64_t v77 = *(void *)(*(void *)(v54 + 56) + 8 * v73);
    outlined init with take of ICUNumberFormatter.Signature( v75,  *(void *)(v61 + 48) + v74,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v61 + 56) + v76) = v77;
    swift_retain();
  }

  __int128 v81 = v88 + 10;
  if (v88 + 10 >= v86) {
    goto LABEL_60;
  }
  uint64_t v79 = *(void *)&v87[8 * v81];
  if (v79)
  {
    uint64_t v80 = v88 + 10;
    uint64_t v37 = v97;
    goto LABEL_59;
  }

  while (1)
  {
    uint64_t v80 = v81 + 1;
    if (__OFADD__(v81, 1LL)) {
      break;
    }
    uint64_t v37 = v97;
    if (v80 >= v86) {
      goto LABEL_60;
    }
    uint64_t v79 = *(void *)&v87[8 * v80];
    ++v81;
    if (v79) {
      goto LABEL_59;
    }
  }

    uint64_t v67 = (v75 - 1) & v75;
    __int128 v86 = v76;
    uint64_t v70 = __clz(__rbit64(v75)) + (v76 << 6);
LABEL_32:
    __int128 v71 = *(void *)(v94 + 72) * v70;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v49 + 48) + v71,  v68,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v72 = 8 * v70;
    __int128 v73 = *(void *)(*(void *)(v49 + 56) + 8 * v70);
    outlined init with take of ICUNumberFormatter.Signature( v68,  *(void *)(v56 + 48) + v71,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v56 + 56) + v72) = v73;
    swift_retain();
  }

  uint64_t v77 = v86 + 10;
  if (v86 + 10 >= v82) {
    goto LABEL_60;
  }
  uint64_t v75 = *(void *)&v83[8 * v77];
  if (v75)
  {
    uint64_t v76 = v86 + 10;
    goto LABEL_59;
  }

  while (1)
  {
    uint64_t v76 = v77 + 1;
    if (__OFADD__(v77, 1LL)) {
      break;
    }
    if (v76 >= v82) {
      goto LABEL_60;
    }
    uint64_t v75 = *(void *)&v83[8 * v76];
    ++v77;
    if (v75) {
      goto LABEL_59;
    }
  }

      __break(1u);
      goto LABEL_60;
    }

    swift_once();
    goto LABEL_11;
  }

  if (one-time initialization token for lineSeparators != -1) {
    swift_once();
  }
  BOOL v16 = &static String.lineSeparators;
LABEL_15:
  uint64_t v80 = *v16;
  swift_bridgeObjectRetain();
  uint64_t v17 = v83;
  if ((v83 & 1) == 0)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 2LL;
LABEL_19:
    uint64_t v22 = v84;
LABEL_20:
    uint64_t v23 = v80;
    goto LABEL_21;
  }

  if (v4 == v10)
  {
    uint64_t v21 = v5;
    uint64_t v18 = v7;
    uint64_t v19 = v63;
    uint64_t v20 = v64;
    goto LABEL_19;
  }

  char v46 = BigSubstring.UTF8View.index(before:)();
  uint64_t v70 = v47;
  uint64_t v72 = v46;
  uint64_t v20 = v48;
  uint64_t v21 = v49;
  uint64_t v22 = v84;
  uint64_t v62 = v5;
  if (v4 >= v84)
  {
    uint64_t v19 = v47;
    uint64_t v18 = v46;
    uint64_t v23 = v80;
    goto LABEL_45;
  }

  uint64_t v66 = v49;
  uint64_t v68 = v48;
  outlined retain of Locale((uint64_t)v3);
  char v50 = BigSubstring.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v3);
  if (v50 != 10)
  {
    uint64_t v22 = v84;
    uint64_t v19 = v70;
    uint64_t v18 = v72;
    uint64_t v21 = v66;
    uint64_t v20 = v68;
    uint64_t v23 = v80;
    goto LABEL_45;
  }

  outlined retain of Locale((uint64_t)v3);
  uint64_t v19 = v70;
  uint64_t v18 = v72;
  uint64_t v51 = BigSubstring.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v3);
  uint64_t v23 = v80;
  if (v51 != 13)
  {
    uint64_t v22 = v84;
    uint64_t v21 = v66;
    uint64_t v20 = v68;
    goto LABEL_45;
  }

  if (v10 < v72 >> 10)
  {
    uint64_t v18 = BigSubstring.UTF8View.index(before:)();
    uint64_t v19 = v52;
    uint64_t v20 = v53;
    uint64_t v21 = v54;
    uint64_t v22 = v84;
LABEL_45:
    uint64_t v17 = v83;
    goto LABEL_46;
  }

  uint64_t v17 = v83;
  uint64_t v22 = v84;
  uint64_t v21 = v66;
  uint64_t v20 = v68;
  if (v62 != 2)
  {
    uint64_t v18 = v7;
    uint64_t v19 = v63;
    uint64_t v20 = v64;
    uint64_t v21 = v62;
    goto LABEL_21;
  }

    __break(1u);
    goto LABEL_60;
  }

  swift_bridgeObjectRetain();
  __int128 v81 = String.subscript.getter();
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  uint64_t v87 = v86;
  swift_bridgeObjectRelease();
  v127[0] = 64LL;
  v127[1] = 0xE100000000000000LL;
  uint64_t v88 = Substring.init<A>(_:)();
  if ((v81 ^ v83) < 0x4000 || !((v88 ^ v89) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v68 = v113;
    goto LABEL_48;
  }

  specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v88,  v89,  v90,  v91,  0,  0,  0,  0,  0,  v81,  v83,  v85,  v87);
  __int128 v93 = v92;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v68 = v113;
  if ((v93 & 1) != 0)
  {
LABEL_49:
    uint64_t v99 = [v74 v76[185]];
    uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    uint64_t v102 = v101;

    *(void *)&uint64_t v132 = v100;
    *((void *)&v132 + 1) = v102;
    v103._uint64_t countAndFlagsBits = 46LL;
    v103._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v103);
    v104._uint64_t countAndFlagsBits = 0x746E756F6340LL;
    v104._unint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v104);
    uint64_t v105 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v75 = objc_msgSend(v68, sel_expressionForKeyPath_, v105);
    swift_unknownObjectRelease();
    goto LABEL_57;
  }

            Hasher._combine(_:)(0);
            int v53 = 0LL;
LABEL_60:

            __int128 v58 = v113;
            if (v58)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v58);
              swift_bridgeObjectRelease();
              uint64_t v59 = v114;
              if (v114) {
                goto LABEL_62;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              uint64_t v59 = v114;
              if (v114)
              {
LABEL_62:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v59);
                swift_bridgeObjectRelease();
                if (v115)
                {
LABEL_63:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_67:
                  if (v116 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    uint64_t v60 = v116 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v60);
                  }

                  if (v117 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    uint64_t v61 = v117 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v61);
                  }

                  if (v118 == 2)
                  {
                    uint64_t v62 = 0;
                  }

                  else
                  {
                    uint64_t v62 = v118 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v62);
                  if (v119 == 2)
                  {
                    __int128 v63 = 0;
                  }

                  else
                  {
                    uint64_t v64 = v119 & 1;
                    Hasher._combine(_:)(1u);
                    __int128 v63 = v64;
                  }

                  Hasher._combine(_:)(v63);
                  outlined retain of LocalePreferences?( (uint64_t)v121,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v121,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_80;
                }

            a1 = v30;
            Hasher._combine(_:)(0);
            int v53 = 0LL;
LABEL_60:

            __int128 v58 = v120;
            if (v58)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v58);
              swift_bridgeObjectRelease();
              uint64_t v59 = v121;
              if (v121) {
                goto LABEL_62;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              uint64_t v59 = v121;
              if (v121)
              {
LABEL_62:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v59);
                swift_bridgeObjectRelease();
                if (v122)
                {
LABEL_63:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_67:
                  if (v123 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    uint64_t v60 = v123 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v60);
                  }

                  if (v124 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    uint64_t v61 = v124 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v61);
                  }

                  if (v125 == 2)
                  {
                    uint64_t v62 = 0;
                  }

                  else
                  {
                    uint64_t v62 = v125 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v62);
                  if (v126 == 2)
                  {
                    __int128 v63 = 0;
                  }

                  else
                  {
                    uint64_t v64 = v126 & 1;
                    Hasher._combine(_:)(1u);
                    __int128 v63 = v64;
                  }

                  Hasher._combine(_:)(v63);
                  outlined retain of LocalePreferences?( (uint64_t)v128,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v128,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_80;
                }

  __break(1u);
LABEL_60:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    __int128 v95 = v87;
    uint64_t v96 = (v86 - 1) & v86;
    uint64_t v80 = __clz(__rbit64(v86)) + (v87 << 6);
LABEL_34:
    uint64_t v82 = *(void *)(v81 + 72) * v80;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v59 + 48) + v82,  v78,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v83 = 8 * v80;
    __int128 v84 = *(void *)(*(void *)(v59 + 56) + 8 * v80);
    outlined init with take of ICUNumberFormatter.Signature( v78,  *(void *)(v66 + 48) + v82,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v66 + 56) + v83) = v84;
    swift_retain();
  }

  uint64_t v88 = v95 + 9;
  if (v95 + 9 >= v93) {
    goto LABEL_60;
  }
  __int128 v86 = *(void *)&v94[8 * v88];
  if (v86)
  {
    uint64_t v87 = v95 + 9;
    __int128 v81 = v105;
    goto LABEL_59;
  }

  while (1)
  {
    uint64_t v87 = v88 + 1;
    if (__OFADD__(v88, 1LL)) {
      break;
    }
    __int128 v81 = v105;
    if (v87 >= v93) {
      goto LABEL_60;
    }
    __int128 v86 = *(void *)&v94[8 * v87];
    ++v88;
    if (v86) {
      goto LABEL_59;
    }
  }

    uint64_t v7 = v45;
    uint64_t v4 = v28;
    if (!v45) {
      goto LABEL_2;
    }
    uint64_t v6 = v44;
    if ((v44 & 0xF800) == 0xD800) {
      break;
    }
    lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
    uint64_t v22 = Locale.Language.components.modify();
    specialized RangeReplaceableCollection.remove(at:)(0LL);
    ((void (*)(uint64_t *, void))v22)(&v46, 0LL);
  }

          char v48 = (v58 - 1) & v58;
          char v50 = __clz(__rbit64(v58)) + (v45 << 6);
        }

        uint64_t v51 = 16 * v50;
        char v52 = (uint64_t *)(*(void *)(v21 + 48) + v51);
        char v54 = *v52;
        int v53 = v52[1];
        __int128 v55 = *(_OWORD *)(*(void *)(v21 + 56) + v51);
        __int128 v56 = (void *)(*(void *)(v35 + 48) + v51);
        *__int128 v56 = v54;
        v56[1] = v53;
        *(_OWORD *)(*(void *)(v35 + 56) + v51) = v55;
        swift_bridgeObjectRetain();
        uint64_t result = (char *)swift_unknownObjectRetain();
      }
    }

    __int128 v63 = (v46 - 1) & v46;
    uint64_t v60 = v47;
    int v34 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_32:
    __int128 v35 = 24 * v34;
    __int128 v36 = *(void *)(v2 + 48) + v35;
    uint64_t v37 = *(void *)v36;
    char v38 = *(void *)(v36 + 8);
    char v39 = *(void *)(v2 + 56) + v35;
    uint64_t v61 = *(void *)v39;
    char v40 = *(void *)v39;
    uint64_t v62 = *(void *)(v39 + 8);
    char v41 = *(void *)(v22 + 48) + v35;
    char v42 = *(_BYTE *)(v36 + 16);
    char v43 = *(_BYTE *)(v39 + 16);
    *(void *)char v41 = *(void *)v36;
    *(void *)(v41 + 8) = v38;
    *(_BYTE *)(v41 + 16) = v42;
    char v44 = *(void *)(v22 + 56) + v35;
    *(void *)char v44 = v40;
    *(void *)(v44 + 8) = v62;
    *(_BYTE *)(v44 + 16) = v43;
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v38, v42);
    outlined copy of _XMLPlistEncodingFormat.Reference(v61, v62, v43);
  }

  char v48 = v60 + 10;
  if (v60 + 10 >= v58) {
    goto LABEL_60;
  }
  char v46 = *(void *)&__src[8 * v48];
  if (v46)
  {
    uint64_t v47 = v60 + 10;
    goto LABEL_59;
  }

  while (1)
  {
    uint64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      break;
    }
    if (v47 >= v58) {
      goto LABEL_60;
    }
    char v46 = *(void *)&__src[8 * v47];
    ++v48;
    if (v46) {
      goto LABEL_59;
    }
  }

  unint64_t v143 = Double.exponent.getter();
  unint64_t v236 = v143;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    uint64_t v144 = v232;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v145 = v228;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_65;
    }

    goto LABEL_70;
  }

  uint64_t v146 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v147 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v146 & 1) == 0)
  {
    if (v147 >= 64)
    {
      uint64_t v167 = v205;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 16))(v205, v232, v56);
      unint64_t v235 = v143;
      if (v143 <= 0)
      {
        (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v167, v56);
        uint64_t v144 = v232;
      }

      else
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        uint64_t v168 = v228;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v169 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v170 = *(void (**)(_BYTE *, uint64_t))(v84 + 8);
        v170(v168, v56);
        v170(v205, v56);
        uint64_t v144 = v232;
        if ((v169 & 1) != 0) {
          goto LABEL_89;
        }
      }

      goto LABEL_71;
    }

    uint64_t v144 = v232;
LABEL_70:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= v143) {
      goto LABEL_71;
    }
    goto LABEL_89;
  }

  if (v147 <= 64)
  {
    uint64_t v162 = v209;
    uint64_t v163 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v162, v163);
    uint64_t v164 = v228;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    uint64_t v165 = v232;
    LOBYTE(v162) = dispatch thunk of static Comparable.< infix(_:_:)();
    id v210 = *(_BYTE **)(v84 + 8);
    ((void (*)(_BYTE *, uint64_t))v210)(v164, v56);
    uint64_t v166 = v203;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 16))(v203, v165, v56);
    if ((v162 & 1) != 0)
    {
      ((void (*)(_BYTE *, uint64_t))v210)(v166, v56);
      uint64_t v144 = v232;
    }

    else
    {
      uint64_t v172 = v166;
      uint64_t v173 = v236;
      uint64_t v174 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(_BYTE *, uint64_t))v210)(v172, v56);
      unint64_t v159 = v174 < v173;
      uint64_t v144 = v232;
      if (!v159) {
        goto LABEL_71;
      }
    }

                __break(1u);
                goto LABEL_60;
              }

    __break(1u);
LABEL_60:
    __break(1u);
  }

  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  uint64_t result = (void *)swift_unknownObjectRetain_n();
  char v14 = a2;
  uint64_t v13 = v4;
  do
  {
    uint64_t v19 = *(unsigned __int16 *)(v13 + 16);
    if (*(_WORD *)(v13 + 16))
    {
      uint64_t v20 = *(void *)(v13 + 40);
      uint64_t v21 = __OFSUB__(v14, v20);
      uint64_t v22 = v14 - v20;
      if (v21) {
        goto LABEL_56;
      }
      if (__OFADD__(v22, 1LL)) {
        goto LABEL_57;
      }
      if ((uint64_t)(v22 + 1) < 1)
      {
        uint64_t v19 = 0LL;
        goto LABEL_19;
      }

      if ((_DWORD)v19 != 1)
      {
        uint64_t v23 = (uint64_t *)(v13 + 64);
        uint64_t v24 = 1LL;
        while (1)
        {
          uint64_t v25 = *v23;
          v23 += 3;
          char v14 = v22 - v25;
          if (__OFSUB__(v22, v25)) {
            break;
          }
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_54;
          }
          if ((uint64_t)(v14 + 1) < 1)
          {
            uint64_t v19 = v24;
            char v14 = v22;
            goto LABEL_19;
          }

          ++v24;
          uint64_t v22 = v14;
          if (v19 == v24) {
            goto LABEL_18;
          }
        }

        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }

      char v14 = v22;
    }

    uint64_t v18 = v7 == 0;
  }

  else
  {
    uint64_t v18 = specialized Sequence.allSatisfy(_:)(a1, a2, a3);
  }

  return v18 & 1;
}

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v21 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v8 << 8);
    goto LABEL_37;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v413);
  uint64_t v21 = specialized Rope._endPath.getter(v28);
  swift_unknownObjectRelease();
  uint64_t v10 = 0LL;
  uint64_t v9 = 0LL;
  if (v28)
  {
LABEL_37:
    swift_unknownObjectRetain();
    char v44 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v338, v21, v10, v28, v31);
    swift_unknownObjectRelease_n();
    goto LABEL_61;
  }

  char v44 = 0LL;
LABEL_61:
  __int128 v347 = (char *)v351 - v9;
  if (__OFSUB__(v351, v9))
  {
LABEL_385:
    __break(1u);
    goto LABEL_386;
  }

  uint64_t v51 = *(_OWORD *)(v22 + 32);
  v441[0] = *(_OWORD *)(v22 + 16);
  v441[1] = v51;
  v441[2] = *(_OWORD *)(v22 + 48);
  uint64_t v8 = (uint64_t)v441;
  BigString.utf8.getter();
  if (__OFSUB__(0LL, v9))
  {
LABEL_386:
    __break(1u);
    goto LABEL_387;
  }

  __int128 v330 = (__int128 *)(v22 + 16);
  uint64_t v9 = v44;
  char v52 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v321 = v53;
  __int128 v322 = v52;
  uint64_t v8 = v54;
  unint64_t v320 = v55;
  outlined release of Locale((uint64_t)&v387);
  Swift::String v324 = v339;
  unint64_t v328 = *((void *)&v340 + 1);
  __int128 v329 = v340;
  __int128 v331 = *((void *)&v414 + 1);
  __int128 v332 = v345;
  __int128 v341 = (void *)v22;
  v309 = v21;
  unint64_t v310 = v10;
  if (v44 == *((void *)&v414 + 1)) {
    goto LABEL_64;
  }
  __int128 v329 = v8;
  uint64_t v70 = *((void *)&v413[0] + 1);
  __int128 v71 = *(void *)(v22 + 64);
  uint64_t v72 = *(void *)(v22 + 72);
  __int128 v73 = *(void *)(v22 + 80);
  uint64_t v74 = *(void *)(v22 + 88);
  swift_unknownObjectRetain();
  uint64_t v75 = v73;
  uint64_t v76 = v9;
  specialized Rope.subscript.getter(v338, v21, v10, v71, v72, v75, v74);
  uint64_t v78 = v77;
  uint64_t v80 = v79;
  uint64_t result = swift_unknownObjectRelease();
  v308 = v70;
  if (v70 >= (uint64_t)v9)
  {
    uint64_t v122 = v347;
LABEL_153:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v123 = v122;
    goto LABEL_169;
  }

  __int128 v352 = (__int128 *)v373;
  __int128 v350 = (__int128 *)&v411;
  v306 = v80;
  uint64_t v307 = v342 + 40;
  __int128 v81 = v21;
  uint64_t v21 = v349;
  uint64_t v82 = v347;
  __int128 v343 = v78;
LABEL_97:
  uint64_t v83 = *(void *)(v22 + 64);
  __int128 v84 = *(void *)(v22 + 88);
  v365 = v338;
  v366 = v81;
  v367 = v10;
  if (v338 != v84) {
    goto LABEL_433;
  }
  __int128 v347 = v82;
  __int128 v332 = v76;
  if (v83)
  {
    uint64_t v85 = *(unsigned __int8 *)(v83 + 18);
    __int128 v86 = v81;
    uint64_t result = swift_unknownObjectRetain();
    __int128 v81 = v86;
    if (v86 <= v85) {
      goto LABEL_434;
    }
  }

  else if (!v81)
  {
    goto LABEL_434;
  }

  if (!v10 || (uint64_t v87 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C, ((v81 >> v87) & 0xF) == 0))
  {
    uint64_t v89 = *(unsigned __int8 *)(v83 + 18);
    uint64_t v90 = (4 * v89 + 8) & 0x3C;
    uint64_t v91 = (v81 >> v90) & 0xF;
    *(void *)&v409 = v91;
    if (v89)
    {
      swift_unknownObjectRetain();
      __int128 v92 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v83 + 16,  v83 + 24,  (uint64_t *)&v409,  (uint64_t)&v365,  v89);
      uint64_t result = swift_unknownObjectRelease();
      if ((v92 & 1) == 0) {
        goto LABEL_446;
      }
      uint64_t v22 = (unint64_t)v341;
      if (v365 != v338) {
        goto LABEL_435;
      }
      uint64_t v10 = v367;
      uint64_t v88 = v366;
      uint64_t v78 = v343;
      if (v367) {
        goto LABEL_109;
      }
    }

    else
    {
      if (!v91) {
        goto LABEL_446;
      }
      uint64_t v88 = ((v91 - 1) << v90) | ((-15LL << v90) - 1) & v81;
      v366 = v88;
      v367 = v83;
      uint64_t v10 = v83;
      uint64_t v78 = v343;
      if (v83) {
        goto LABEL_109;
      }
    }

    swift_unknownObjectRetain();
    unint64_t v328 = v88;
    __int128 v95 = specialized Rope._Node.subscript.getter(v88, v83);
    uint64_t v9 = v97;
    swift_unknownObjectRelease();
    v319 = 0LL;
    uint64_t v96 = 1;
    goto LABEL_113;
  }

  uint64_t v88 = ((((v81 >> v87) & 0xF) - 1) << v87) | ((-15LL << v87) - 1) & v81;
  v366 = v88;
LABEL_109:
  __int128 v93 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C;
  unint64_t v328 = v88;
  v319 = v10;
  __int128 v94 = v10 + 24 * ((v88 >> v93) & 0xF);
  __int128 v95 = *(void *)(v94 + 24);
  uint64_t v9 = *(void *)(v94 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v96 = 0;
LABEL_113:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v347, v95)) {
    goto LABEL_436;
  }
  if (v338 != *(void *)(v22 + 88)) {
    goto LABEL_437;
  }
  v305 = &v347[-v95];
  if ((v96 & 1) != 0)
  {
    uint64_t v98 = *(void *)(v22 + 64);
    swift_unknownObjectRetain();
    uint64_t v78 = v343;
    specialized Rope._Node.subscript.getter(v328, v98);
    Swift::String v324 = v99;
    uint64_t v8 = v100;
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v101 = v319 + 24 * ((v328 >> ((4 * *(_BYTE *)(v319 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v8 = *(void *)(v101 + 32);
    uint64_t v102 = *(void *)(v101 + 40);
    swift_bridgeObjectRetain();
    Swift::String v324 = v102;
    swift_bridgeObjectRetain();
  }

  --v332;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0LL;
  uint64_t v103 = (uint64_t *)v307;
  __int128 v353 = v8;
  while (1)
  {
    uint64_t v104 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_366;
    }
    uint64_t v9 = *(v103 - 1);
    uint64_t v105 = *v103;
    if (v78[2])
    {
      swift_bridgeObjectRetain_n();
      uint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v105);
      if ((v107 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(v78[7] + 72 * v106, (uint64_t)&v403);
      }

      else
      {
        v407 = 0LL;
        v406 = 0u;
        v405 = 0u;
        v404 = 0u;
        v403 = 0u;
      }

      swift_bridgeObjectRelease();
      uint64_t v8 = v353;
      if (!*(void *)(v353 + 16))
      {
LABEL_128:
        v395 = 0LL;
        v394 = 0u;
        v393 = 0u;
        v392 = 0u;
        v391 = 0u;
        goto LABEL_135;
      }
    }

    else
    {
      v407 = 0LL;
      v406 = 0u;
      v405 = 0u;
      v404 = 0u;
      v403 = 0u;
      swift_bridgeObjectRetain();
      if (!*(void *)(v8 + 16)) {
        goto LABEL_128;
      }
    }

    swift_bridgeObjectRetain();
    uint64_t v108 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v105);
    if ((v109 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v8 + 56) + 72 * v108, (uint64_t)&v391);
    }

    else
    {
      v395 = 0LL;
      v394 = 0u;
      v393 = 0u;
      v392 = 0u;
      v391 = 0u;
    }

    swift_bridgeObjectRelease();
LABEL_135:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v403,  (uint64_t)&v365,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v391,  (uint64_t)v352,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v368)
    {
      if (v374) {
        goto LABEL_167;
      }
      outlined destroy of Any?( (uint64_t)&v365,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v391,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v403,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_122;
    }

    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v365,  (uint64_t)&v380,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v374) {
      break;
    }
    uint64_t v110 = v352[3];
    v377 = v352[2];
    v378 = v110;
    v379 = *((void *)v352 + 8);
    uint64_t v111 = v352[1];
    v375 = *v352;
    v376 = v111;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v380,  (uint64_t)v359);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v375,  (uint64_t)&v354);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v359,  (uint64_t)&v409,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v354,  (uint64_t)v350,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v410)
    {
      if (!v412)
      {
        uint64_t v9 = 1LL;
        goto LABEL_121;
      }

      outlined destroy of Any?((uint64_t)v350, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_120:
      uint64_t v9 = 0LL;
      goto LABEL_121;
    }

    if (!v412)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v409);
      goto LABEL_120;
    }

    outlined init with take of any PredicateExpression<Self.Output == B1>(&v409, (uint64_t)v429);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v350, (uint64_t)v428);
    uint64_t v112 = v430;
    v337 = v431;
    __int128 v336 = __swift_project_boxed_opaque_existential_1(v429, v430);
    v346 = v304;
    uint64_t v113 = *(void *)(v112 - 8);
    MEMORY[0x1895F8858](v336);
    uint64_t v115 = (char *)v304 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v428,  (uint64_t)v426);
    uint64_t v116 = type metadata accessor for Optional();
    __int128 v344 = v304;
    int v117 = *(void *)(v116 - 8);
    MEMORY[0x1895F8858](v116);
    uint64_t v119 = (char *)v304 - v118;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v120 = swift_dynamicCast();
    uint64_t v121 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56);
    if (v120)
    {
      v121(v119, 0LL, 1LL, v112);
      (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v115, v119, v112);
      uint64_t v9 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v115, v112);
    }

    else
    {
      v121(v119, 1LL, 1LL, v112);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v119, v116);
      uint64_t v9 = 0LL;
    }

    uint64_t v21 = v349;
    uint64_t v78 = v343;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v428);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v429);
    uint64_t v22 = (unint64_t)v341;
LABEL_121:
    outlined destroy of Any?((uint64_t)&v354, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v359, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v375);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
    outlined destroy of Any?( (uint64_t)&v365,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v391,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v403,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v9 & 1) == 0) {
      goto LABEL_168;
    }
LABEL_122:
    v103 += 2;
    ++v10;
    uint64_t v8 = v353;
    if (v104 == v21)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v122 = v305;
      uint64_t v82 = v305;
      uint64_t v76 = v332;
      __int128 v81 = v328;
      uint64_t v10 = v319;
      goto LABEL_97;
    }
  }

  outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
LABEL_167:
  outlined destroy of Any?( (uint64_t)&v365,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?( (uint64_t)&v391,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v403,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_168:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v123 = v347;
LABEL_169:
  uint64_t v128 = v330;
  uint64_t v129 = v330[1];
  v438 = *v330;
  v439 = v129;
  v440 = v330[2];
  BigString.utf8.getter();
  uint64_t result = v322;
  uint64_t v130 = v323;
  if (__OFSUB__(v123, v322 >> 11)) {
    goto LABEL_431;
  }
  uint64_t v131 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v133 = v132;
  uint64_t v135 = v134;
  uint64_t v137 = v136;
  outlined release of Locale((uint64_t)&v399);
  if (v325 >= v131 >> 10) {
    uint64_t v138 = v130;
  }
  else {
    uint64_t v138 = v131;
  }
  __int128 v332 = v138;
  if (v325 < v131 >> 10)
  {
    uint64_t v10 = v135;
  }

  else
  {
    uint64_t v133 = v335;
    uint64_t v10 = v333;
  }

  if (v325 >= v131 >> 10) {
    char v139 = v327;
  }
  else {
    char v139 = v137;
  }
  uint64_t v140 = v128[1];
  v435 = *v128;
  v436 = v140;
  v437 = v128[2];
  BigString.unicodeScalars.getter();
  uint64_t v141 = BigString.UnicodeScalarView.index(after:)();
  unint64_t v143 = v142;
  uint64_t v9 = v144;
  uint64_t v21 = v145;
  uint64_t result = outlined release of Locale((uint64_t)&v400);
  uint64_t v146 = *v128;
  uint64_t v147 = v128[1];
  v427[2] = v128[2];
  v427[1] = v147;
  v427[0] = v146;
  uint64_t v148 = v141 >> 10;
  uint64_t v8 = v332 >> 10;
  if (v141 >> 10 < v332 >> 10)
  {
LABEL_432:
    __break(1u);
LABEL_433:
    __break(1u);
LABEL_434:
    __break(1u);
LABEL_435:
    __break(1u);
LABEL_436:
    __break(1u);
LABEL_437:
    __break(1u);
LABEL_438:
    __break(1u);
LABEL_439:
    __break(1u);
LABEL_440:
    __break(1u);
LABEL_441:
    __break(1u);
LABEL_442:
    __break(1u);
LABEL_443:
    __break(1u);
LABEL_444:
    __break(1u);
LABEL_445:
    __break(1u);
LABEL_446:
    __break(1u);
    goto LABEL_447;
  }

  v429[0] = v332;
  Swift::String v324 = (uint64_t)v133;
  v429[1] = v133;
  unint64_t v328 = v139;
  __int128 v329 = v10;
  v429[2] = v10;
  v430 = v139;
  v431 = v141;
  v432 = v143;
  v433 = v9;
  v434 = v21;
  char v149 = specialized Array._getCount()(v348);
  if (!v149)
  {
    uint64_t v22 = (unint64_t)v341;
    goto LABEL_64;
  }

  uint64_t v22 = (unint64_t)v341;
  if (v8 == v148)
  {
LABEL_64:
    uint64_t result = outlined release of AttributedString.Runs((uint64_t)v413);
    __int128 v56 = v334;
    goto LABEL_65;
  }

  uint64_t v150 = v149;
  swift_bridgeObjectRetain();
  outlined retain of Locale((uint64_t)v427);
  uint64_t v8 = 0LL;
  uint64_t v10 = 40LL;
  while (1)
  {
    uint64_t v22 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_367;
    }
    if (!*(void *)(v348 + v10)) {
      break;
    }
    swift_bridgeObjectRelease();
    v10 += 16LL;
    ++v8;
    if (v22 == v150)
    {
      swift_bridgeObjectRelease();
      goto LABEL_192;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v148 <= (unint64_t)BigString.startIndex.getter() >> 10)
  {
LABEL_192:
    uint64_t v22 = (unint64_t)v341;
    __int16 v155 = v332;
    uint64_t v157 = v328;
    __int16 v156 = v329;
LABEL_193:
    __int128 v332 = v155;
    v426[0] = v155;
    v426[1] = v324;
    unint64_t v328 = v157;
    __int128 v329 = v156;
    v426[2] = v156;
    v426[3] = v157;
    v426[4] = v141;
    v426[5] = v143;
    v426[6] = v9;
    v426[7] = v21;
    uint64_t v8 = v348;
    if (specialized Collection<>._containsScalarConstraint.getter(v348))
    {
      uint64_t v9 = v141 >> 10;
      uint64_t result = specialized static Array._allocateUninitialized(_:)(0LL);
      *(void *)&v409 = result;
      if (v150 < 1)
      {
LABEL_453:
        __break(1u);
LABEL_454:
        __break(1u);
LABEL_455:
        __break(1u);
        goto LABEL_456;
      }

      swift_bridgeObjectRetain();
      uint64_t v158 = (unint64_t *)(v8 + 40);
      do
      {
        uint64_t v163 = *v158;
        if (*v158)
        {
          uint64_t v164 = *(v158 - 1);
          if ((v163 & 0x2000000000000000LL) != 0 ? HIBYTE(v163) & 0xF : v164 & 0xFFFFFFFFFFFFLL)
          {
            if ((v163 & 0x1000000000000000LL) != 0)
            {
              unint64_t v159 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v163 & 0x2000000000000000LL) != 0)
              {
                v365 = *(v158 - 1);
                v366 = v163 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }

              else
              {
                if ((v164 & 0x1000000000000000LL) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }

              unint64_t v159 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }

            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v160 = *(void *)(v409 + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v160);
            __int128 v161 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v160, v159);
            destructiveProjectEnumData for PredicateCodableError(v161, v162);
          }
        }

        v158 += 2;
        --v150;
      }

      while (v150);
      swift_bridgeObjectRelease();
      uint64_t v166 = v409;
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v408);
      uint64_t v167 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)(v166);
      uint64_t v169 = v168;
      uint64_t v171 = v170;
      uint64_t v8 = v172;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v409);
      outlined release of Locale((uint64_t)v427);
      uint64_t result = outlined release of AttributedString.Runs((uint64_t)v413);
      __int128 v56 = v334;
      if (v8 != 2)
      {
        if (v9 < v167 >> 10)
        {
LABEL_459:
          __break(1u);
          goto LABEL_460;
        }

        __int128 v332 = v167;
        Swift::String v324 = v169;
        unint64_t v328 = v8;
        __int128 v329 = v171;
      }

          +[_NSPredicateUtilities _predicateSecurityAction]();
        }

void DateComponents.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  int v5 = *(unsigned __int8 *)(v1 + 40);
  Swift::UInt v13 = *(void *)(v1 + 32);
  Swift::UInt v14 = *(void *)(v1 + 48);
  int v6 = *(unsigned __int8 *)(v1 + 56);
  Swift::UInt v15 = *(void *)(v1 + 64);
  Swift::UInt v16 = *(void *)(v1 + 80);
  int v28 = *(unsigned __int8 *)(v1 + 72);
  int v29 = *(unsigned __int8 *)(v1 + 88);
  Swift::UInt v27 = *(void *)(v1 + 96);
  int v41 = *(unsigned __int8 *)(v1 + 104);
  int v30 = *(unsigned __int8 *)(v1 + 120);
  Swift::UInt v17 = *(void *)(v1 + 112);
  Swift::UInt v18 = *(void *)(v1 + 128);
  int v31 = *(unsigned __int8 *)(v1 + 136);
  Swift::UInt v19 = *(void *)(v1 + 144);
  int v32 = *(unsigned __int8 *)(v1 + 152);
  Swift::UInt v20 = *(void *)(v1 + 160);
  int v33 = *(unsigned __int8 *)(v1 + 168);
  Swift::UInt v21 = *(void *)(v1 + 176);
  int v34 = *(unsigned __int8 *)(v1 + 184);
  Swift::UInt v22 = *(void *)(v1 + 192);
  int v35 = *(unsigned __int8 *)(v1 + 200);
  Swift::UInt v23 = *(void *)(v1 + 208);
  int v36 = *(unsigned __int8 *)(v1 + 216);
  Swift::UInt v24 = *(void *)(v1 + 240);
  int v39 = *(unsigned __int8 *)(v1 + 280);
  int v37 = *(unsigned __int8 *)(v1 + 248);
  Swift::UInt v25 = *(void *)(v1 + 256);
  int v38 = *(unsigned __int8 *)(v1 + 264);
  Swift::UInt v26 = *(void *)(v1 + 272);
  int v40 = *(unsigned __int8 *)(v1 + 281);
  if (*(void *)v1)
  {
    uint64_t v7 = *(void *)(v1 + 8);
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 120);
    swift_unknownObjectRetain();
    v9(a1, ObjectType, v7);
    swift_unknownObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v4)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      uint64_t v10 = swift_getObjectType();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
      swift_unknownObjectRetain();
      v11(a1, v10, v3);
      swift_unknownObjectRelease();
      if (v5) {
        goto LABEL_4;
      }
LABEL_8:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v13);
      if (!v6) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }

  Hasher._combine(_:)(0);
  if (!v5) {
    goto LABEL_8;
  }
LABEL_4:
  Hasher._combine(_:)(0);
  if (!v6)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    goto LABEL_10;
  }

Swift::Int DateComponents.hashValue.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  int v5 = *((unsigned __int8 *)v0 + 40);
  Swift::UInt v14 = v0[4];
  Swift::UInt v15 = v0[6];
  int v6 = *((unsigned __int8 *)v0 + 56);
  Swift::UInt v16 = v0[8];
  Swift::UInt v17 = v0[10];
  int v29 = *((unsigned __int8 *)v0 + 72);
  int v30 = *((unsigned __int8 *)v0 + 88);
  Swift::UInt v28 = v0[12];
  int v7 = *((unsigned __int8 *)v0 + 104);
  Swift::UInt v18 = v0[14];
  Swift::UInt v19 = v0[16];
  int v31 = *((unsigned __int8 *)v0 + 120);
  int v32 = *((unsigned __int8 *)v0 + 136);
  Swift::UInt v20 = v0[18];
  Swift::UInt v21 = v0[20];
  int v33 = *((unsigned __int8 *)v0 + 152);
  int v34 = *((unsigned __int8 *)v0 + 168);
  Swift::UInt v22 = v0[22];
  Swift::UInt v23 = v0[24];
  int v35 = *((unsigned __int8 *)v0 + 184);
  int v36 = *((unsigned __int8 *)v0 + 200);
  Swift::UInt v24 = v0[26];
  Swift::UInt v25 = v0[30];
  int v37 = *((unsigned __int8 *)v0 + 216);
  int v38 = *((unsigned __int8 *)v0 + 248);
  int v39 = *((unsigned __int8 *)v0 + 264);
  int v40 = *((unsigned __int8 *)v0 + 280);
  Swift::UInt v26 = v0[32];
  Swift::UInt v27 = v0[34];
  int v41 = *((unsigned __int8 *)v0 + 281);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120);
    swift_unknownObjectRetain();
    v9(v42, ObjectType, v1);
    swift_unknownObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      uint64_t v10 = swift_getObjectType();
      uint64_t v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 112);
      swift_unknownObjectRetain();
      v11(v42, v10, v4);
      swift_unknownObjectRelease();
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }

  Hasher._combine(_:)(0);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(0);
    if (!v6) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DateComponents()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  int v5 = *((unsigned __int8 *)v0 + 40);
  Swift::UInt v14 = v0[4];
  Swift::UInt v15 = v0[6];
  int v6 = *((unsigned __int8 *)v0 + 56);
  Swift::UInt v16 = v0[8];
  Swift::UInt v17 = v0[10];
  int v29 = *((unsigned __int8 *)v0 + 72);
  int v30 = *((unsigned __int8 *)v0 + 88);
  Swift::UInt v28 = v0[12];
  int v7 = *((unsigned __int8 *)v0 + 104);
  Swift::UInt v18 = v0[14];
  Swift::UInt v19 = v0[16];
  int v31 = *((unsigned __int8 *)v0 + 120);
  int v32 = *((unsigned __int8 *)v0 + 136);
  Swift::UInt v20 = v0[18];
  Swift::UInt v21 = v0[20];
  int v33 = *((unsigned __int8 *)v0 + 152);
  int v34 = *((unsigned __int8 *)v0 + 168);
  Swift::UInt v22 = v0[22];
  Swift::UInt v23 = v0[24];
  int v35 = *((unsigned __int8 *)v0 + 184);
  int v36 = *((unsigned __int8 *)v0 + 200);
  Swift::UInt v24 = v0[26];
  Swift::UInt v25 = v0[30];
  int v37 = *((unsigned __int8 *)v0 + 216);
  int v38 = *((unsigned __int8 *)v0 + 248);
  int v39 = *((unsigned __int8 *)v0 + 264);
  int v40 = *((unsigned __int8 *)v0 + 280);
  Swift::UInt v26 = v0[32];
  Swift::UInt v27 = v0[34];
  int v41 = *((unsigned __int8 *)v0 + 281);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120);
    swift_unknownObjectRetain();
    v9(v42, ObjectType, v1);
    swift_unknownObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      uint64_t v10 = swift_getObjectType();
      uint64_t v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 112);
      swift_unknownObjectRetain();
      v11(v42, v10, v4);
      swift_unknownObjectRelease();
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }

  Hasher._combine(_:)(0);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(0);
    if (!v6) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }

uint64_t DateComponents.description.getter()
{
  uint64_t v0 = type metadata accessor for Mirror();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  DateComponents.customMirror.getter((uint64_t)v3);
  uint64_t v4 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v22 = 0LL;
  unint64_t v23 = 0xE000000000000000LL;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v21 + 1))
  {
    v13[1] = v4;
    do
    {
      __int128 v17 = v19;
      v18[0] = v20;
      v18[1] = v21;
      v16._uint64_t countAndFlagsBits = 0LL;
      v16._unint64_t object = (void *)0xE000000000000000LL;
      __int128 v5 = v19;
      __int128 v14 = v19;
      outlined init with copy of Any((uint64_t)v18, (uint64_t)v15);
      if (*((void *)&v5 + 1)) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0LL;
      }
      if (*((void *)&v5 + 1)) {
        int v7 = (void *)*((void *)&v5 + 1);
      }
      else {
        int v7 = (void *)0xE000000000000000LL;
      }
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      v8._uint64_t countAndFlagsBits = v6;
      v8._unint64_t object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 8250LL;
      v9._unint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v9);
      _print_unlocked<A, B>(_:_:)();
      v10._uint64_t countAndFlagsBits = 32LL;
      v10._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v10);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v17);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }

    while (*((void *)&v21 + 1));
    uint64_t v11 = v22;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  swift_release();
  swift_release();
  return v11;
}

uint64_t DateComponents.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v114 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  __int128 v5 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  Swift::String v8 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  memcpy(v118, v1, 0x11AuLL);
  uint64_t v9 = MEMORY[0x189617FA8];
  if (!*(void *)&v118[0])
  {
    Swift::UInt8 v12 = (void *)MEMORY[0x18961AFE8];
    uint64_t v18 = *(void *)&v118[1];
    if (!*(void *)&v118[1]) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }

  v117[0] = v118[0];
  swift_unknownObjectRetain();
  uint64_t v10 = Calendar.description.getter();
  uint64_t v116 = v9;
  *(void *)&__int128 v115 = v10;
  *((void *)&v115 + 1) = v11;
  v117[0] = xmmword_1837293A0;
  outlined init with take of Any(&v115, &v117[1]);
  Swift::UInt8 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v14 = v12[2];
  unint64_t v13 = v12[3];
  if (v14 >= v13 >> 1) {
    Swift::UInt8 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v14 + 1,  1,  v12);
  }
  _OWORD v12[2] = v14 + 1;
  Swift::UInt v15 = &v12[6 * v14];
  __int128 v16 = v117[0];
  __int128 v17 = v117[2];
  v15[3] = v117[1];
  v15[4] = v17;
  v15[2] = v16;
  swift_unknownObjectRelease();
  uint64_t v18 = *(void *)&v118[1];
  if (*(void *)&v118[1])
  {
LABEL_7:
    uint64_t v111 = v3;
    uint64_t v112 = v5;
    uint64_t v113 = v2;
    swift_getObjectType();
    *(void *)&v117[0] = v18;
    swift_unknownObjectRetain();
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v116 = v9;
    *(void *)&__int128 v115 = v19;
    *((void *)&v115 + 1) = v20;
    v117[0] = xmmword_1837293B0;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::UInt8 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
    }
    unint64_t v22 = v12[2];
    unint64_t v21 = v12[3];
    if (v22 >= v21 >> 1) {
      Swift::UInt8 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v21 > 1),  v22 + 1,  1,  v12);
    }
    uint64_t v3 = v111;
    __int128 v5 = v112;
    _OWORD v12[2] = v22 + 1;
    unint64_t v23 = &v12[6 * v22];
    __int128 v24 = v117[0];
    __int128 v25 = v117[2];
    _OWORD v23[3] = v117[1];
    v23[4] = v25;
    v23[2] = v24;
    swift_unknownObjectRelease();
    uint64_t v2 = v113;
  }

uint64_t DateComponents.debugDescription.getter()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  memcpy(v25, v0, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)v25);
  DateComponents.customMirror.getter((uint64_t)v4);
  uint64_t v5 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v23 = 0LL;
  unint64_t v24 = 0xE000000000000000LL;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v22 + 1))
  {
    v14[1] = v5;
    do
    {
      __int128 v18 = v20;
      v19[0] = v21;
      v19[1] = v22;
      v17._uint64_t countAndFlagsBits = 0LL;
      v17._unint64_t object = (void *)0xE000000000000000LL;
      uint64_t v6 = (void *)*((void *)&v20 + 1);
      uint64_t v7 = v20;
      __int128 v15 = v20;
      outlined init with copy of Any((uint64_t)v19, (uint64_t)v16);
      if (v6)
      {
        Swift::String v8 = v6;
      }

      else
      {
        uint64_t v7 = 0LL;
        Swift::String v8 = (void *)0xE000000000000000LL;
      }

      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      v9._uint64_t countAndFlagsBits = v7;
      v9._unint64_t object = v8;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = 8250LL;
      v10._unint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v10);
      _print_unlocked<A, B>(_:_:)();
      v11._uint64_t countAndFlagsBits = 32LL;
      v11._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v11);
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v18);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }

    while (*((void *)&v22 + 1));
    uint64_t v12 = v23;
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  swift_release();
  swift_release();
  outlined release of DateComponents((uint64_t)v25);
  return v12;
}

uint64_t DateComponents.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182F91868 + 4 * byte_183729034[a1]))( 0x7261646E656C6163LL,  0xE800000000000000LL);
}

uint64_t sub_182F91868()
{
  return 0x656E6F5A656D6974LL;
}

uint64_t sub_182F9187C()
{
  return 6386277LL;
}

uint64_t sub_182F9188C()
{
  return 1918985593LL;
}

uint64_t sub_182F9189C()
{
  return 0x68746E6F6DLL;
}

uint64_t sub_182F918B0()
{
  return 7954788LL;
}

uint64_t sub_182F918C0()
{
  return 1920298856LL;
}

uint64_t sub_182F918D0()
{
  return 0x6574756E696DLL;
}

uint64_t sub_182F918E4()
{
  return 0x646E6F636573LL;
}

uint64_t sub_182F918F8()
{
  return 0x6F6365736F6E616ELL;
}

uint64_t sub_182F91914()
{
  return 0x7961646B656577LL;
}

uint64_t sub_182F9192C()
{
  return 0x4F7961646B656577LL;
}

uint64_t sub_182F91950()
{
  return 0x72657472617571LL;
}

uint64_t sub_182F91968()
{
  return 0x6F4D664F6B656577LL;
}

uint64_t sub_182F919D4()
{
  return 0x616559664F796164LL;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DateComponents.CodingKeys@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized DateComponents.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DateComponents.CodingKeys()
{
  return DateComponents.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DateComponents.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized DateComponents.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance DateComponents.CodingKeys@<X0>( unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized DateComponents.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DateComponents.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DateComponents.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t DateComponents.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DateComponents.CodingKeys>);
  uint64_t v5 = *(void *)(v119 - 8);
  MEMORY[0x1895F8858](v119);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v82 = v5;
    LOBYTE(v84) = 0;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __int128 v8 = v85[0];
    LOBYTE(v84) = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v80 = *((void *)&v8 + 1);
    uint64_t v81 = v8;
    __int128 v9 = v85[0];
    LOBYTE(v85[0]) = 2;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v76 = v11;
    uint64_t v77 = v10;
    uint64_t v78 = *((void *)&v9 + 1);
    uint64_t v79 = v9;
    LOBYTE(v85[0]) = 3;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v14 = v13;
    uint64_t v75 = v12;
    LOBYTE(v85[0]) = 4;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v73 = v16;
    uint64_t v74 = v15;
    LOBYTE(v85[0]) = 5;
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v71 = v18;
    uint64_t v72 = v17;
    LOBYTE(v85[0]) = 6;
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v69 = v20;
    uint64_t v70 = v19;
    LOBYTE(v85[0]) = 7;
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v66 = v22;
    uint64_t v68 = v21;
    LOBYTE(v85[0]) = 8;
    uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v65 = v23;
    LOBYTE(v85[0]) = 9;
    uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v64 = v26;
    uint64_t v27 = v25;
    LOBYTE(v85[0]) = 10;
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v63 = v29;
    uint64_t v30 = v28;
    LOBYTE(v85[0]) = 11;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v61 = v31;
    LOBYTE(v85[0]) = 12;
    uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v59 = v32;
    LOBYTE(v85[0]) = 13;
    uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v57 = v33;
    LOBYTE(v85[0]) = 14;
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v55 = v34;
    LOBYTE(v85[0]) = 15;
    uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v53 = v35;
    LOBYTE(v85[0]) = 16;
    int v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v100 = 17;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v51 = v36;
    *(void *)&__int128 v84 = v81;
    *((void *)&v84 + 1) = v80;
    v83[0] = v79;
    v83[1] = v78;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( &v84,  v83,  v77,  v76 & 1,  v75,  v14 & 1,  v74,  v73 & 1,  (uint64_t)v85,  v72,  v71 & 1,  v70,  v69 & 1,  v68,  v66 & 1,  v67,  v65 & 1,  v27,  v64 & 1,  v30,  v63 & 1,  v62,  v61 & 1,  v60,  v59 & 1,  v58,  v57 & 1,  v56,  v55 & 1,  v54,  v53 & 1);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v7, v119);
    __int128 v115 = v85[2];
    __int128 v116 = v85[3];
    __int128 v117 = v85[4];
    __int128 v118 = v85[5];
    __int128 v113 = v85[0];
    __int128 v114 = v85[1];
    uint64_t v37 = v86;
    BOOL v38 = v87;
    __int128 v101 = v88;
    __int128 v102 = v89;
    __int128 v105 = v92;
    __int128 v106 = v93;
    __int128 v103 = v90;
    __int128 v104 = v91;
    __int128 v110 = v97;
    __int128 v111 = v98;
    __int128 v108 = v95;
    __int128 v109 = v96;
    char v39 = v99;
    __int128 v107 = v94;
    if ((v51 & 1) == 0)
    {
      uint64_t v37 = v50;
      BOOL v38 = v50 == 0x7FFFFFFFFFFFFFFFLL;
      if (v50 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v37 = 0LL;
      }
      BOOL v112 = v50 == 0x7FFFFFFFFFFFFFFFLL;
    }

    __int128 v40 = v116;
    *(_OWORD *)(a2 + 32) = v115;
    *(_OWORD *)(a2 + 48) = v40;
    __int128 v41 = v118;
    *(_OWORD *)(a2 + 64) = v117;
    *(_OWORD *)(a2 + 80) = v41;
    __int128 v42 = v114;
    *(_OWORD *)a2 = v113;
    *(_OWORD *)(a2 + 16) = v42;
    *(void *)(a2 + 96) = v37;
    *(_BYTE *)(a2 + 104) = v38;
    __int128 v43 = v101;
    __int128 v44 = v102;
    __int128 v45 = v104;
    *(_OWORD *)(a2 + 137) = v103;
    *(_OWORD *)(a2 + 121) = v44;
    *(_OWORD *)(a2 + 105) = v43;
    __int128 v46 = v108;
    *(_OWORD *)(a2 + 201) = v107;
    __int128 v47 = v105;
    *(_OWORD *)(a2 + 185) = v106;
    *(_OWORD *)(a2 + 169) = v47;
    *(_OWORD *)(a2 + 153) = v45;
    __int128 v48 = v109;
    __int128 v49 = v110;
    *(_OWORD *)(a2 + 265) = v111;
    *(_OWORD *)(a2 + 249) = v49;
    *(_OWORD *)(a2 + 233) = v48;
    *(_OWORD *)(a2 + 217) = v46;
    *(_BYTE *)(a2 + 281) = v39;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t DateComponents.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DateComponents.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v9 = v1[2];
  uint64_t v43 = v1[3];
  uint64_t v44 = v9;
  uint64_t v10 = v1[4];
  int v48 = *((unsigned __int8 *)v1 + 40);
  uint64_t v41 = v1[6];
  uint64_t v42 = v10;
  int v40 = *((unsigned __int8 *)v1 + 56);
  uint64_t v39 = v1[8];
  LODWORD(v10) = *((unsigned __int8 *)v1 + 72);
  uint64_t v36 = v1[10];
  int v37 = *((unsigned __int8 *)v1 + 88);
  int v38 = v10;
  uint64_t v14 = v1[12];
  v13[1] = *((unsigned __int8 *)v1 + 104);
  uint64_t v34 = v1[14];
  int v35 = *((unsigned __int8 *)v1 + 120);
  uint64_t v32 = v1[16];
  int v33 = *((unsigned __int8 *)v1 + 136);
  uint64_t v30 = v1[18];
  int v31 = *((unsigned __int8 *)v1 + 152);
  uint64_t v28 = v1[20];
  int v29 = *((unsigned __int8 *)v1 + 168);
  uint64_t v26 = v1[22];
  int v27 = *((unsigned __int8 *)v1 + 184);
  uint64_t v24 = v1[24];
  int v25 = *((unsigned __int8 *)v1 + 200);
  uint64_t v22 = v1[26];
  int v23 = *((unsigned __int8 *)v1 + 216);
  uint64_t v20 = v1[30];
  int v16 = *((unsigned __int8 *)v1 + 280);
  int v21 = *((unsigned __int8 *)v1 + 248);
  uint64_t v18 = v1[32];
  int v19 = *((unsigned __int8 *)v1 + 264);
  uint64_t v17 = v1[34];
  int v15 = *((unsigned __int8 *)v1 + 281);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v46 = v8;
  uint64_t v47 = v7;
  char v49 = 0;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  uint64_t v11 = v45;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v46 = v44;
  uint64_t v47 = v43;
  char v49 = 1;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v46) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v45 = v4;
  LOBYTE(v46) = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 5;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 6;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 7;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 8;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 9;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 10;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 11;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 12;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 13;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 14;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 15;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 16;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 17;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DateComponents@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return DateComponents.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DateComponents(void *a1)
{
  return DateComponents.encode(to:)(a1);
}

unint64_t static DateComponents._getObjectiveCType()()
{
  return type metadata accessor for NSDateComponents();
}

NSDateComponents __swiftcall DateComponents._bridgeToObjectiveC()()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  char v34 = *((_BYTE *)v0 + 40);
  uint64_t v19 = v0[4];
  uint64_t v20 = v0[6];
  char v35 = *((_BYTE *)v0 + 56);
  uint64_t v21 = v0[8];
  char v36 = *((_BYTE *)v0 + 72);
  uint64_t v22 = v0[10];
  char v37 = *((_BYTE *)v0 + 88);
  uint64_t v5 = v0[12];
  char v32 = *((_BYTE *)v0 + 104);
  uint64_t v23 = v0[14];
  char v38 = *((_BYTE *)v0 + 120);
  uint64_t v24 = v0[16];
  char v39 = *((_BYTE *)v0 + 136);
  uint64_t v25 = v0[18];
  char v40 = *((_BYTE *)v0 + 152);
  uint64_t v26 = v0[20];
  char v41 = *((_BYTE *)v0 + 168);
  uint64_t v27 = v0[22];
  char v42 = *((_BYTE *)v0 + 184);
  uint64_t v28 = v0[24];
  char v43 = *((_BYTE *)v0 + 200);
  uint64_t v29 = v0[26];
  char v44 = *((_BYTE *)v0 + 216);
  uint64_t v18 = (const char *)v0[28];
  char v47 = *((_BYTE *)v0 + 280);
  char v33 = *((_BYTE *)v0 + 232);
  uint64_t v30 = v0[30];
  char v45 = *((_BYTE *)v0 + 248);
  uint64_t v31 = v0[32];
  char v46 = *((_BYTE *)v0 + 264);
  uint64_t v6 = v0[34];
  int v7 = *((unsigned __int8 *)v0 + 281);
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F58]), sel_init);
  if (v2)
  {
    uint64_t v17 = v5;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 216);
    swift_unknownObjectRetain();
    uint64_t v11 = v10(ObjectType, v1);
    uint64_t v5 = v17;
    uint64_t v12 = (void *)v11;
    objc_msgSend(v8, sel_setCalendar_, v11);
    swift_unknownObjectRelease();
  }

  if (v3)
  {
    uint64_t v13 = swift_getObjectType();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 120);
    swift_unknownObjectRetain();
    int v15 = (void *)v14(v13, v4);
    objc_msgSend(v8, sel_setTimeZone_, v15);
    swift_unknownObjectRelease();
  }

  if ((v34 & 1) != 0)
  {
    if ((v35 & 1) != 0) {
      goto LABEL_7;
    }
  }

  else
  {
    objc_msgSend(v8, sel_setEra_, v19);
    if ((v35 & 1) != 0)
    {
LABEL_7:
      if ((v36 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_26;
    }
  }

  objc_msgSend(v8, sel_setYear_, v20);
  if ((v36 & 1) != 0)
  {
LABEL_8:
    if ((v37 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

uint64_t static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  __dst[0] = 0uLL;
  v51[0] = 0LL;
  v51[1] = 0LL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  v51,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  id v4 = objc_msgSend(a1, sel_calendar);
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for _NSSwiftCalendar();
    uint64_t v6 = swift_dynamicCastClass();
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
      id v8 = (_OWORD *)(v7 + 16);
      uint64_t v9 = (os_unfair_lock_s *)(v7 + 32);
      id v10 = v5;
      os_unfair_lock_lock(v9);
      closure #1 in _NSSwiftCalendar.calendar.getter(v8, __dst);
      os_unfair_lock_unlock(v9);

      uint64_t v11 = *((void *)&__dst[0] + 1);
      uint64_t v12 = *(void *)&__dst[0];
    }

    else
    {
      type metadata accessor for _CalendarBridged();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v5;
      uint64_t v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged,  (uint64_t)&protocol conformance descriptor for _CalendarBridged);
    }

    *(void *)&__src[0] = v12;
    *((void *)&__src[0] + 1) = v11;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)&__src[1])
    {
      __dst[0] = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__dst);
    }

    swift_unknownObjectRelease();
  }

  id v13 = objc_msgSend(a1, sel_timeZone);
  if (v13)
  {
    uint64_t v14 = v13;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v15 = swift_dynamicCastClass();
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      uint64_t v17 = *(void *)(v15 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _TimeZoneBridged();
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v14;
      uint64_t v17 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    }

    *(void *)&__src[1] = v16;
    *((void *)&__src[1] + 1) = v17;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(void *)&__src[0])
    {
      *(void *)&__dst[0] = v16;
      *((void *)&__dst[0] + 1) = v17;
      Calendar.timeZone.setter((uint64_t *)__dst);
      swift_unknownObjectRelease();
    }

    else
    {
      swift_unknownObjectRelease_n();
    }
  }

  if (objc_msgSend(a1, sel_era) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v18 = objc_msgSend(a1, sel_era);
    if (v18 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v19 = 0LL;
    }
    else {
      id v19 = v18;
    }
    *(void *)&__src[2] = v19;
    BYTE8(__src[2]) = v18 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_year) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v20 = objc_msgSend(a1, sel_year);
    if (v20 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v21 = 0LL;
    }
    else {
      id v21 = v20;
    }
    *(void *)&__src[3] = v21;
    BYTE8(__src[3]) = v20 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_month) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v22 = objc_msgSend(a1, sel_month);
    if (v22 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v23 = 0LL;
    }
    else {
      id v23 = v22;
    }
    *(void *)&__src[4] = v23;
    BYTE8(__src[4]) = v22 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_day) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v24 = objc_msgSend(a1, sel_day);
    if (v24 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v25 = 0LL;
    }
    else {
      id v25 = v24;
    }
    *(void *)&__src[5] = v25;
    BYTE8(__src[5]) = v24 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_hour) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v26 = objc_msgSend(a1, sel_hour);
    if (v26 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v27 = 0LL;
    }
    else {
      id v27 = v26;
    }
    *(void *)&__src[7] = v27;
    BYTE8(__src[7]) = v26 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_minute) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v28 = objc_msgSend(a1, sel_minute);
    if (v28 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v29 = 0LL;
    }
    else {
      id v29 = v28;
    }
    *(void *)&__src[8] = v29;
    BYTE8(__src[8]) = v28 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_second) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v30 = objc_msgSend(a1, sel_second);
    if (v30 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v31 = 0LL;
    }
    else {
      id v31 = v30;
    }
    *(void *)&__src[9] = v31;
    BYTE8(__src[9]) = v30 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_nanosecond) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v32 = objc_msgSend(a1, sel_nanosecond);
    if (v32 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v33 = 0LL;
    }
    else {
      id v33 = v32;
    }
    *(void *)&__src[10] = v33;
    BYTE8(__src[10]) = v32 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_weekday) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v34 = objc_msgSend(a1, sel_weekday);
    if (v34 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v35 = 0LL;
    }
    else {
      id v35 = v34;
    }
    *(void *)&__src[11] = v35;
    BYTE8(__src[11]) = v34 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_weekdayOrdinal) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v36 = objc_msgSend(a1, sel_weekdayOrdinal);
    if (v36 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v37 = 0LL;
    }
    else {
      id v37 = v36;
    }
    *(void *)&__src[12] = v37;
    BYTE8(__src[12]) = v36 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_quarter) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v38 = objc_msgSend(a1, sel_quarter);
    if (v38 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v39 = 0LL;
    }
    else {
      id v39 = v38;
    }
    *(void *)&__src[13] = v39;
    BYTE8(__src[13]) = v38 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_weekOfMonth) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v40 = objc_msgSend(a1, sel_weekOfMonth);
    if (v40 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v41 = 0LL;
    }
    else {
      id v41 = v40;
    }
    *(void *)&__src[15] = v41;
    BYTE8(__src[15]) = v40 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_weekOfYear) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v42 = objc_msgSend(a1, sel_weekOfYear);
    if (v42 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v43 = 0LL;
    }
    else {
      id v43 = v42;
    }
    *(void *)&__src[16] = v43;
    BYTE8(__src[16]) = v42 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_yearForWeekOfYear) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v44 = objc_msgSend(a1, sel_yearForWeekOfYear);
    if (v44 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v45 = 0LL;
    }
    else {
      id v45 = v44;
    }
    *(void *)&__src[17] = v45;
    BYTE8(__src[17]) = v44 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (objc_msgSend(a1, sel_dayOfYear) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v46 = objc_msgSend(a1, sel_dayOfYear);
    if (v46 == (id)0x7FFFFFFFFFFFFFFFLL) {
      id v47 = 0LL;
    }
    else {
      id v47 = v46;
    }
    *(void *)&__src[6] = v47;
    BYTE8(__src[6]) = v46 == (id)0x7FFFFFFFFFFFFFFFLL;
  }

  if (__NSDateComponentsWeek(a1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)&__src[14] = __NSDateComponentsWeek(a1);
    BYTE8(__src[14]) = 0;
  }

  memcpy(__dst, __src, 0x11AuLL);
  destructiveProjectEnumData for PredicateCodableError(__dst, v48);
  outlined init with take of DateComponents?((uint64_t)__dst, a2);
  return 1LL;
}

void *static DateComponents._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    __src[0] = 0uLL;
    uint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
    id v3 = a1;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __src,  &v8,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)v7,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
    destructiveProjectEnumData for PredicateCodableError(v7, v4);
    outlined init with take of DateComponents?((uint64_t)v7, (uint64_t)v6);
    static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v3, (uint64_t)v6);
    outlined init with take of DateComponents?((uint64_t)v6, (uint64_t)&v8);
    outlined init with take of DateComponents?((uint64_t)&v8, (uint64_t)__src);
    unint64_t result = (void *)_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }

    else
    {

      return memcpy(a2, __src, 0x11AuLL);
    }
  }

  else
  {
    __src[0] = 0uLL;
    uint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
    return (void *)DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __src,  &v8,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)a2,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  }

  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance DateComponents( void *a1, uint64_t a2)
{
  return 1LL;
}

uint64_t NSDateComponents._toCustomAnyHashable()()
{
  __src[0] = 0uLL;
  v6[1] = 0LL;
  v6[0] = 0LL;
  id v1 = v0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __src,  v6,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)v5,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  destructiveProjectEnumData for PredicateCodableError(v5, v2);
  outlined init with take of DateComponents?((uint64_t)v5, (uint64_t)__dst);
  static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v1, (uint64_t)__dst);
  outlined init with take of DateComponents?((uint64_t)__dst, (uint64_t)v6);
  outlined init with take of DateComponents?((uint64_t)v6, (uint64_t)__src);
  uint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {

    memcpy(__dst, __src, 0x11AuLL);
    lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
    return AnyHashable.init<A>(_:)();
  }

  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDateComponents()
{
  id v1 = *v0;
  NSDateComponents._toCustomAnyHashable()();
}

unint64_t lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Component,  &type metadata for Calendar.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Component,  &type metadata for Calendar.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
  }

  return result;
}

uint64_t outlined release of DateComponents(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of DateComponents(uint64_t a1)
{
  return a1;
}

BOOL specialized static DateComponents.== infix(_:_:)(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  int v23 = *(unsigned __int8 *)(a1 + 281);
  char v3 = *((_BYTE *)a2 + 40);
  char v4 = *((_BYTE *)a2 + 56);
  char v5 = *((_BYTE *)a2 + 72);
  char v6 = *((_BYTE *)a2 + 216);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 40)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 32) != *((void *)a2 + 4)) {
      char v3 = 1;
    }
    if ((v3 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 56)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 48) != *((void *)a2 + 6)) {
      char v4 = 1;
    }
    if ((v4 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 216) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 216)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 208) != *((void *)a2 + 26)) {
      char v6 = 1;
    }
    if ((v6 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 72)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 64) != *((void *)a2 + 8)) {
      char v5 = 1;
    }
    if ((v5 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 88)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 80) == *((void *)a2 + 10)) {
      char v7 = *((_BYTE *)a2 + 88);
    }
    else {
      char v7 = 1;
    }
    if ((v7 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 120)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 112) == *((void *)a2 + 14)) {
      char v8 = *((_BYTE *)a2 + 120);
    }
    else {
      char v8 = 1;
    }
    if ((v8 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 136)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 128) == *((void *)a2 + 16)) {
      char v9 = *((_BYTE *)a2 + 136);
    }
    else {
      char v9 = 1;
    }
    if ((v9 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 152) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 152)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 144) == *((void *)a2 + 18)) {
      char v10 = *((_BYTE *)a2 + 152);
    }
    else {
      char v10 = 1;
    }
    if ((v10 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 184) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 184)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 176) == *((void *)a2 + 22)) {
      char v11 = *((_BYTE *)a2 + 184);
    }
    else {
      char v11 = 1;
    }
    if ((v11 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 200) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 200)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 192) == *((void *)a2 + 24)) {
      char v12 = *((_BYTE *)a2 + 200);
    }
    else {
      char v12 = 1;
    }
    if ((v12 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 248) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 248)) {
      return 0LL;
    }
  }

  else
  {
    char v13 = *((_BYTE *)a2 + 248);
    if (*(void *)(a1 + 240) != *((void *)a2 + 30)) {
      char v13 = 1;
    }
    if ((v13 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 264) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 264)) {
      return 0LL;
    }
  }

  else
  {
    char v14 = *((_BYTE *)a2 + 264);
    if (*(void *)(a1 + 256) != *((void *)a2 + 32)) {
      char v14 = 1;
    }
    if ((v14 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 280)) {
      return 0LL;
    }
  }

  else
  {
    char v15 = *((_BYTE *)a2 + 280);
    if (*(void *)(a1 + 272) != *((void *)a2 + 34)) {
      char v15 = 1;
    }
    if ((v15 & 1) != 0) {
      return 0LL;
    }
  }

  __int128 v21 = a2[1];
  __int128 v22 = *(_OWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 168) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 168)) {
      return 0LL;
    }
  }

  else
  {
    char v16 = *((_BYTE *)a2 + 168);
    if (*(void *)(a1 + 160) != *((void *)a2 + 20)) {
      char v16 = 1;
    }
    if ((v16 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 104)) {
      return 0LL;
    }
  }

  else
  {
    char v17 = *((_BYTE *)a2 + 104);
    if (*(void *)(a1 + 96) != *((void *)a2 + 12)) {
      char v17 = 1;
    }
    if ((v17 & 1) != 0) {
      return 0LL;
    }
  }

  if (v23 != 2 && (v23 & 1) != 0)
  {
    if ((*((_BYTE *)a2 + 281) & 1) == 0) {
      return 0LL;
    }
  }

  else if ((*((_BYTE *)a2 + 281) & 1) != 0)
  {
    return 0LL;
  }

  if (*(void *)a1)
  {
    v25[0] = *(_OWORD *)a1;
    if (!(void)v2)
    {
LABEL_111:
      swift_unknownObjectRetain();
      goto LABEL_113;
    }

    __int128 v24 = v2;
    swift_unknownObjectRetain_n();
    char v18 = specialized static Calendar.== infix(_:_:)((uint64_t)v25, (uint64_t)&v24);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v18 & 1) == 0) {
      return 0LL;
    }
  }

  else if ((void)v2)
  {
LABEL_113:
    swift_unknownObjectRelease();
    return 0LL;
  }

  if ((void)v22)
  {
    v25[0] = v22;
    if ((void)v21)
    {
      __int128 v24 = v21;
      swift_unknownObjectRetain_n();
      char v19 = specialized static TimeZone.== infix(_:_:)((uint64_t)v25, (uint64_t)&v24);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (v19 & 1) != 0;
    }

    goto LABEL_111;
  }

  if ((void)v21) {
    goto LABEL_113;
  }
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateComponents.CodingKeys, &unk_189C72030);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateComponents.CodingKeys, &unk_189C72030);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateComponents.CodingKeys, &unk_189C72030);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateComponents.CodingKeys, &unk_189C72030);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar and conformance Calendar()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type TimeZone and conformance TimeZone()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }

  return result;
}

unint64_t type metadata accessor for NSDateComponents()
{
  unint64_t result = lazy cache variable for type metadata for NSDateComponents;
  if (!lazy cache variable for type metadata for NSDateComponents)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDateComponents);
  }

  return result;
}

uint64_t *outlined release of DateComponents?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of DateComponents?(uint64_t result)
{
  if (result != 1)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DateComponents and conformance DateComponents()
{
  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for DateComponents(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  a1[2] = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  a1[3] = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  unint64_t result = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  a1[4] = result;
  return result;
}

uint64_t sub_182F93F3C@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t sub_182F93F50@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t sub_182F93F64@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 40);
  *(void *)a2 = *(void *)(result + 32);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F93F78(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 32) = v2;
  *(_BYTE *)(a2 + 40) = v4;
  return result;
}

uint64_t sub_182F93FA4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 56);
  *(void *)a2 = *(void *)(result + 48);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F93FB8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 48) = v2;
  *(_BYTE *)(a2 + 56) = v4;
  return result;
}

uint64_t sub_182F93FE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 72);
  *(void *)a2 = *(void *)(result + 64);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F93FF8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 64) = v2;
  *(_BYTE *)(a2 + 72) = v4;
  return result;
}

uint64_t sub_182F94024@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 88);
  *(void *)a2 = *(void *)(result + 80);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F94038(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 80) = v2;
  *(_BYTE *)(a2 + outlined init with copy of Any(v0 + 128, v0 + 88) = v4;
  return result;
}

uint64_t sub_182F94064@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 120);
  *(void *)a2 = *(void *)(result + 112);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F94078(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 112) = v2;
  *(_BYTE *)(a2 + 120) = v4;
  return result;
}

uint64_t sub_182F940A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 136);
  *(void *)a2 = *(void *)(result + 128);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F940B8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 128) = v2;
  *(_BYTE *)(a2 + 136) = v4;
  return result;
}

uint64_t sub_182F940E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 152);
  *(void *)a2 = *(void *)(result + 144);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F940F8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 144) = v2;
  *(_BYTE *)(a2 + 152) = v4;
  return result;
}

uint64_t sub_182F94124@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 168);
  *(void *)a2 = *(void *)(result + 160);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F94138(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 160) = v2;
  *(_BYTE *)(a2 + 168) = v4;
  return result;
}

uint64_t sub_182F94164@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 184);
  *(void *)a2 = *(void *)(result + 176);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F94178(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 176) = v2;
  *(_BYTE *)(a2 + 184) = v4;
  return result;
}

uint64_t sub_182F941A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 200);
  *(void *)a2 = *(void *)(result + 192);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F941B8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 192) = v2;
  *(_BYTE *)(a2 + 200) = v4;
  return result;
}

uint64_t sub_182F941E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 216);
  *(void *)a2 = *(void *)(result + 208);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F941F8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 208) = v2;
  *(_BYTE *)(a2 + 216) = v4;
  return result;
}

uint64_t sub_182F94224@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 248);
  *(void *)a2 = *(void *)(result + 240);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F94238(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 240) = v2;
  *(_BYTE *)(a2 + 248) = v4;
  return result;
}

uint64_t sub_182F94264@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 264);
  *(void *)a2 = *(void *)(result + 256);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F9427C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 256) = v2;
  *(_BYTE *)(a2 + 264) = v4;
  return result;
}

uint64_t sub_182F942A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 104);
  *(void *)a2 = *(void *)(result + 96);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F942BC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 96) = v2;
  *(_BYTE *)(a2 + 104) = v4;
  return result;
}

uint64_t sub_182F942E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 232);
  *(void *)a2 = *(void *)(result + 224);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F942FC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 224) = v2;
  *(_BYTE *)(a2 + 232) = v4;
  return result;
}

uint64_t sub_182F94328@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(result + 280);
  *(void *)a2 = *(void *)(result + 272);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_182F94340(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *result;
  }
  if (*result == 0x7FFFFFFFFFFFFFFFLL) {
    char v4 = 1;
  }
  else {
    char v4 = *((_BYTE *)result + 8);
  }
  if (!*((_BYTE *)result + 8)) {
    uint64_t v2 = v3;
  }
  *(void *)(a2 + 272) = v2;
  *(_BYTE *)(a2 + 280) = v4;
  return result;
}

uint64_t sub_182F9436C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 281);
  return result;
}

_BYTE *sub_182F94378(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 281) = *result;
  return result;
}

uint64_t destroy for DateComponents()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DateComponents(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  uint64_t v5 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v5;
  uint64_t v6 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v6;
  uint64_t v7 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v7;
  uint64_t v8 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v8;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DateComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v19;
  uint64_t v20 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v20;
  uint64_t v21 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v21;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  return a1;
}

void *__swift_memcpy282_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x11AuLL);
}

uint64_t assignWithTake for DateComponents(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + outlined init with copy of Any(v0 + 128, v0 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v5 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v5;
  uint64_t v6 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v6;
  uint64_t v7 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v7;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  return a1;
}

uint64_t getEnumTagSinglePayload for DateComponents(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 282)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DateComponents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + outlined init with copy of Any(v0 + 128, v0 + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 280) = 0;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 282) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 282) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DateComponents()
{
  return &type metadata for DateComponents;
}

uint64_t storeEnumTagSinglePayload for DateComponents.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEE) {
    return ((uint64_t (*)(void))((char *)&loc_182F94914 + 4 * byte_18372904B[v4]))();
  }
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_182F94948 + 4 * byte_183729046[v4]))();
}

uint64_t sub_182F94948(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F94950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F94958LL);
  }
  return result;
}

uint64_t sub_182F94964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F9496CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 17;
  return result;
}

uint64_t sub_182F94970(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F94978(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DateComponents.CodingKeys()
{
  return &unk_189C72030;
}

unint64_t specialized DateComponents.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 0x12) {
    return 18LL;
  }
  return result;
}

uint64_t specialized DateComponents.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7261646E656C6163LL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x656E6F5A656D6974LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 6386277 && a2 == 0xE300000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 1918985593 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x68746E6F6DLL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 7954788 && a2 == 0xE300000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 1920298856 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 0x6574756E696DLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else if (a1 == 0x646E6F636573LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8LL;
  }

  else if (a1 == 0x6F6365736F6E616ELL && a2 == 0xEA0000000000646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9LL;
  }

  else if (a1 == 0x7961646B656577LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10LL;
  }

  else if (a1 == 0x4F7961646B656577LL && a2 == 0xEE006C616E696472LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11LL;
  }

  else if (a1 == 0x72657472617571LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12LL;
  }

  else if (a1 == 0x6F4D664F6B656577LL && a2 == 0xEB0000000068746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13LL;
  }

  else if (a1 == 0x6559664F6B656577LL && a2 == 0xEA00000000007261LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839C9B90LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15LL;
  }

  else if (a1 == 0x6F4D7061654C7369LL && a2 == 0xEB0000000068746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16LL;
  }

  else if (a1 == 0x616559664F796164LL && a2 == 0xE900000000000072LL)
  {
    swift_bridgeObjectRelease();
    return 17LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 17LL;
    }
    else {
      return 18LL;
    }
  }

uint64_t XMLPlistTag.tagName.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_182F951DC + 4 * byte_1837294B0[a1]))("plist", 5LL);
}

const char *sub_182F951DC()
{
  return "array";
}

const char *sub_182F95268()
{
  return "integer";
}

uint64_t XMLPlistMap.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 40));
  uint64_t result = *(void *)(v1 + 32);
  if (!result) {
    goto LABEL_4;
  }
  if (result == *(void *)(v1 + 16))
  {
    MEMORY[0x186E20E60]();
LABEL_4:
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 40));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_deallocClassInstance();
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for XMLPlistMap()
{
  return objc_opt_self();
}

void *closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( void *result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = result[1];
  BOOL v7 = v6 < a5 + a4 || v6 < a5;
  if (!v7 && ((a5 | a4) & 0x8000000000000000LL) == 0 && v6 > a4) {
    return (void *)a2(*result + a4, a5);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in XMLPlistMap.copyInBuffer()(uint64_t result)
{
  if (!*(void *)(result + 16))
  {
    uint64_t v1 = (void *)result;
    size_t v2 = *(void *)(result + 8);
    size_t v3 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v4 = *(const void **)result;
      uint64_t v5 = (_BYTE *)swift_slowAlloc();
      if ((v2 & 0x8000000000000000LL) != 0)
      {
LABEL_9:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }

      uint64_t v6 = v5;
      uint64_t result = (uint64_t)memmove(v5, v4, v2);
      v6[v2] = 0;
      if ((v3 & 0x8000000000000000LL) == 0)
      {
        void *v1 = v6;
        v1[1] = v3;
        v1[2] = v6;
        return result;
      }
    }

    __break(1u);
    goto LABEL_9;
  }

  return result;
}

void XMLPlistMap.loadValue(at:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (*(void *)(v2 + 16) > a1)
    {
      size_t v3 = (char *)&loc_182F954A8
         + *((int *)qword_182F957E0
           + specialized XMLPlistMap.TypeDescriptor.init(rawValue:)(*(void *)(v2 + 32 + 8 * a1)));
      __asm { BR              X10 }
    }
  }

  __break(1u);
  JUMPOUT(0x182F95700LL);
}

void sub_182F95730()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 41LL;
  v1._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x182F957E0LL);
}

uint64_t XMLPlistMap.detectUID(dictionaryReferenceCount:objectOffset:)(uint64_t result, unint64_t a2)
{
  if (result != 2) {
    return 0LL;
  }
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v3 = *(void *)(v2 + 16);
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v5 = v3 + 32;
  if (*(void *)(v5 + 8 * a2) != 13LL) {
    return 0LL;
  }
  if (a2 + 1 >= v4)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  if (*(void *)(v5 + 8 * (a2 + 1)) == 6LL)
  {
    if (a2 + 2 < v4)
    {
      uint64_t v6 = *(void *)(v5 + 8 * (a2 + 2));
      uint64_t v7 = *(void *)(v2 + 24);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v7 + 40));
      specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v7 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))closure #1 in XMLPlistMap.detectUID(dictionaryReferenceCount:objectOffset:),  v6,  6LL,  &v8);
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 40));
      swift_release();
      return v8;
    }

    goto LABEL_14;
  }

  return 0LL;
}

uint64_t closure #1 in XMLPlistMap.detectUID(dictionaryReferenceCount:objectOffset:)@<X0>( uint64_t result@<X0>, BOOL *a2@<X8>)
{
  BOOL v3 = *(_DWORD *)result == 1428440643 && *(_WORD *)(result + 4) == 17481;
  *a2 = v3;
  return result;
}

Swift::Int __swiftcall XMLPlistMap.offset(after:)(Swift::Int after)
{
  if (after < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (*(void *)(v2 + 16) > (unint64_t)after)
    {
      BOOL v3 = (char *)&loc_182F95984
         + *((int *)qword_182F95B18
           + specialized XMLPlistMap.TypeDescriptor.init(rawValue:)(*(void *)(v2 + 32 + 8 * after)));
      __asm { BR              X10 }
    }
  }

  __break(1u);
  JUMPOUT(0x182F959D4LL);
}

void sub_182F959D8()
{
  v0._uint64_t countAndFlagsBits = 0xD000000000000041LL;
  v0._unint64_t object = (void *)0x80000001839CA0C0LL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x182F95B18LL);
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.ArrayIterator : PlistArrayIterator in XMLPlistMap()
{
  return &protocol witness table for XMLPlistMap.ArrayIterator;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.DictionaryIterator : PlistDictionaryIterator in XMLPlistMap()
{
  return &protocol witness table for XMLPlistMap.DictionaryIterator;
}

void protocol witness for PlistArrayIterator.next() in conformance XMLPlistMap.ArrayIterator( void *a1@<X8>)
{
  Swift::Int v3 = *v1;
  XMLPlistMap.loadValue(at:)(*v1);
  uint64_t v5 = v4;
  if ((~v4 & 0xF000000000000007LL) != 0) {
    unint64_t *v1 = XMLPlistMap.offset(after:)(v3);
  }
  *a1 = v5;
}

void protocol witness for static PlistDecodingMap.nullValue.getter in conformance XMLPlistMap( void *a1@<X8>)
{
  *a1 = 0x8000000000000000LL;
}

void protocol witness for PlistDecodingMap.topObject.getter in conformance XMLPlistMap(void *a1@<X8>)
{
  if ((~v2 & 0xF000000000000007LL) != 0) {
    *a1 = v2;
  }
  else {
    __break(1u);
  }
}

unint64_t protocol witness for PlistDecodingMap.value(from:) in conformance XMLPlistMap@<X0>( unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = *a1;
  *a2 = v2;
  return outlined copy of XMLPlistMap.Value(v2);
}

void one-time initialization function for dataDecodeTable()
{
  dataDecodeTable._rawValue = &outlined read-only object #0 of one-time initialization function for dataDecodeTable;
}

uint64_t XMLPlistMap.Value.dataValue<A>(in:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a6;
  unint64_t v38 = a2;
  v39[11] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v19 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v35 - v17;
  if (v18 >> 60 == 3)
  {
    uint64_t v22 = *(void *)(v18 + 16);
    uint64_t v21 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(a1 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 40));
    uint64_t v24 = *(void *)(v23 + 24);
    BOOL v25 = v24 < v21 + v22 || v24 < v21;
    if (v25 || (v21 | v22) < 0 || v24 <= v22) {
      __break(1u);
    }
    uint64_t v26 = v36;
    closure #1 in XMLPlistMap.Value.dataValue<A>(in:for:_:)( *(void *)(v23 + 16) + v22,  v21,  *(void *)(v23 + 16),  v24,  v38,  a3,  a5,  v37,  v39);
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 40));
    uint64_t result = swift_release();
    if (!v26) {
      return v39[0];
    }
  }

  else
  {
    unint64_t v36 = v18;
    id v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v28((char *)&v35 - v17, a3, v12, v19);
    ((void (*)(char *, char *, uint64_t))v28)(v15, v20, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1LL, a5) == 1)
    {
      id v29 = *(void (**)(char *, uint64_t))(v13 + 8);
      v29(v15, v12);
      _CodingPathNode.path.getter(v38);
      v29(v20, v12);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, a5);
      uint64_t v30 = _CodingPathNode.path.getter(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      uint64_t v32 = v37;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v32;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, a5);
      v39[0] = v30;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( (uint64_t)&type metadata for Data,  v36,  v34);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  return result;
}

uint64_t closure #1 in XMLPlistMap.Value.dataValue<A>(in:for:_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  if (a2 < 1)
  {
    uint64_t v16 = MEMORY[0x18961AFE8];
LABEL_55:
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    int v61 = &protocol witness table for <A> [A];
    uint64_t v59 = v16;
    unint64_t v38 = __swift_project_boxed_opaque_existential_1(&v59, v60);
    id v39 = (_BYTE *)(*v38 + 32LL);
    id v40 = &v39[*(void *)(*v38 + 16LL)];
    swift_bridgeObjectRetain();
    id v41 = specialized Data._Representation.init(_:)(v39, v40);
    uint64_t v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
    uint64_t result = swift_bridgeObjectRelease();
    *a9 = v41;
    a9[1] = v43;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = result;
    unint64_t v11 = result + a2;
    if (a3 + a4 - (result + a2) >= 0)
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      unint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      uint64_t v58 = result - a3;
      uint64_t v16 = MEMORY[0x18961AFE8];
      uint64_t v56 = result;
      unint64_t v57 = result + a2;
      while (1)
      {
        unint64_t v18 = (unsigned __int8 *)(v10 + v12);
        if (v11 < v10 + v12) {
          break;
        }
        if (v58 + v12 < 0) {
          goto LABEL_58;
        }
        if (v9 < 0) {
          goto LABEL_59;
        }
        unint64_t v19 = *v18;
        if ((_DWORD)v19 == 61)
        {
          BOOL v20 = __OFADD__(v15++, 1LL);
          if (v20) {
            goto LABEL_62;
          }
        }

        else
        {
          if ((_DWORD)v19 == 60) {
            goto LABEL_55;
          }
          uint64_t result = isspace(*v18);
          if ((_DWORD)result) {
            uint64_t v15 = 0LL;
          }
        }

        if (one-time initialization token for dataDecodeTable != -1) {
          uint64_t result = swift_once();
        }
        if (*((void *)dataDecodeTable._rawValue + 2) <= v19)
        {
          swift_bridgeObjectRelease();
          _StringGuts.grow(_:)(59LL);
          v44._uint64_t countAndFlagsBits = 0xD000000000000023LL;
          v44._unint64_t object = (void *)0x80000001839CA210LL;
          String.append(_:)(v44);
          uint64_t v62 = a3;
          uint64_t v63 = a4;
          uint64_t v64 = v10;
          uint64_t v65 = v10 + v12;
          unint64_t v66 = v11;
          uint64_t v67 = BufferReader.lineNumber.getter();
          v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v45);
          swift_bridgeObjectRelease();
          v46._unint64_t object = (void *)0x80000001839CA240LL;
          v46._uint64_t countAndFlagsBits = 0xD000000000000014LL;
          String.append(_:)(v46);
          LOBYTE(v67) = v19;
          lazy protocol witness table accessor for type UInt8 and conformance UInt8();
          v47._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v47);
          swift_bridgeObjectRelease();
          type metadata accessor for DecodingError();
          swift_allocError();
          static DecodingError._dataCorrupted<A>(_:for:_:)(0LL, 0xE000000000000000LL, a5, a6, a7, a8, v48);
          swift_bridgeObjectRelease();
          return swift_willThrow();
        }

        uint64_t v21 = *((void *)dataDecodeTable._rawValue + v19 + 4);
        if ((v21 & 0x8000000000000000LL) == 0)
        {
          BOOL v20 = __OFADD__(v13++, 1LL);
          if (v20) {
            goto LABEL_60;
          }
          BOOL v20 = __OFADD__(v21, v14 << 6);
          unint64_t v14 = v21 + (v14 << 6);
          if (v20) {
            goto LABEL_61;
          }
          if ((v13 & 3) == 0)
          {
            if (v15)
            {
              if (v15 == 1)
              {
                int64_t v31 = *(void *)(v16 + 16);
                int64_t v32 = v31 + 2;
                if (__OFADD__(v31, 2LL)) {
                  goto LABEL_65;
                }
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if (!(_DWORD)result || (unint64_t v33 = *(void *)(v16 + 24), v34 = v33 >> 1, (uint64_t)(v33 >> 1) < v32))
                {
                  if (v31 <= v32) {
                    int64_t v35 = v31 + 2;
                  }
                  else {
                    int64_t v35 = v31;
                  }
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)result,  v35,  1,  (char *)v16);
                  uint64_t v16 = result;
                  unint64_t v33 = *(void *)(result + 24);
                  unint64_t v34 = v33 >> 1;
                }

                unint64_t v36 = *(void *)(v16 + 16);
                unint64_t v29 = v36 + 1;
                if (v34 <= v36)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v36 + 1,  1,  (char *)v16);
                  uint64_t v16 = result;
                  unint64_t v33 = *(void *)(result + 24);
                  unint64_t v34 = v33 >> 1;
                }

                *(void *)(v16 + 16) = v29;
                *(_BYTE *)(v16 + v36 + 32) = BYTE2(v14);
                int64_t v30 = v36 + 2;
                if ((uint64_t)v34 < v30)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v30,  1,  (char *)v16);
                  uint64_t v16 = result;
                }

                unint64_t v17 = v14 >> 8;
              }

              else
              {
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v16 + 16) + 1LL,  1,  (char *)v16);
                  uint64_t v16 = result;
                }

                unint64_t v17 = v14 >> 16;
                unint64_t v29 = *(void *)(v16 + 16);
                unint64_t v37 = *(void *)(v16 + 24);
                int64_t v30 = v29 + 1;
                if (v29 >= v37 >> 1)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v37 > 1),  v29 + 1,  1,  (char *)v16);
                  uint64_t v16 = result;
                  unint64_t v17 = v14 >> 16;
                }
              }
            }

            else
            {
              int64_t v22 = *(void *)(v16 + 16);
              int64_t v23 = v22 + 3;
              if (__OFADD__(v22, 3LL)) {
                goto LABEL_63;
              }
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if (!(_DWORD)result || (unint64_t v24 = *(void *)(v16 + 24), v25 = v24 >> 1, (uint64_t)(v24 >> 1) < v23))
              {
                if (v22 <= v23) {
                  int64_t v26 = v22 + 3;
                }
                else {
                  int64_t v26 = v22;
                }
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)result,  v26,  1,  (char *)v16);
                uint64_t v16 = result;
                unint64_t v24 = *(void *)(result + 24);
                int64_t v25 = v24 >> 1;
              }

              unint64_t v27 = *(void *)(v16 + 16);
              unint64_t v28 = v27 + 1;
              if (v25 <= v27)
              {
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v27 + 1,  1,  (char *)v16);
                uint64_t v16 = result;
                unint64_t v24 = *(void *)(result + 24);
                int64_t v25 = v24 >> 1;
              }

              *(void *)(v16 + 16) = v28;
              *(_BYTE *)(v16 + v27 + 32) = BYTE2(v14);
              unint64_t v29 = v27 + 2;
              if (v25 < (uint64_t)(v27 + 2))
              {
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v27 + 2,  1,  (char *)v16);
                uint64_t v16 = result;
                unint64_t v24 = *(void *)(result + 24);
                int64_t v25 = v24 >> 1;
              }

              *(void *)(v16 + 16) = v29;
              *(_BYTE *)(v16 + v28 + 32) = BYTE1(v14);
              int64_t v30 = v27 + 3;
              if (v25 < (uint64_t)(v27 + 3))
              {
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v27 + 3,  1,  (char *)v16);
                uint64_t v16 = result;
              }

              LOBYTE(v17) = v14;
              uint64_t v10 = v56;
            }

            *(void *)(v16 + 16) = v30;
            *(_BYTE *)(v16 + v29 + 32) = v17;
            unint64_t v11 = v57;
          }
        }

        ++v12;
        --v9;
        if (v11 < v10 + v12 + 1) {
          goto LABEL_55;
        }
      }

      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
    }

    __break(1u);
LABEL_65:
    __break(1u);
  }

  return result;
}

uint64_t XMLPlistMap.Value.dateValue<A>(in:for:_:)@<X0>( uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v37 = a5;
  unint64_t v38 = a2;
  int64_t v35 = a6;
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v19 = MEMORY[0x1895F8858](v16);
  BOOL v20 = (char *)&v34 - v17;
  if (v18 >> 60 == 4)
  {
    uint64_t v22 = *(void *)(v18 + 16);
    uint64_t v21 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(a1 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 40));
    uint64_t v24 = *(void *)(v23 + 24);
    BOOL v25 = v24 < v21 + v22 || v24 < v21;
    if (v25 || (v21 | v22) < 0 || v24 <= v22) {
      __break(1u);
    }
    closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)( (_BYTE *)(*(void *)(v23 + 16) + v22),  v21,  *(void *)(v23 + 16),  v24,  v38,  a3,  a4,  v37,  v35);
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 40));
    return swift_release();
  }

  else
  {
    unint64_t v36 = v18;
    unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v27((char *)&v34 - v17, a3, v12, v19);
    ((void (*)(char *, char *, uint64_t))v27)(v15, v20, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1LL, a4) == 1)
    {
      unint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
      v28(v15, v12);
      _CodingPathNode.path.getter((unint64_t)v38);
      v28(v20, v12);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, a4);
      uint64_t v29 = _CodingPathNode.path.getter((unint64_t)v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      uint64_t v31 = v37;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v31;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, a4);
      uint64_t v39 = v29;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a4);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( (uint64_t)&type metadata for Date,  v36,  v33);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

void closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)( _BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, os_unfair_lock_s *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  void (*v48)(uint64_t *__return_ptr, __int128 *, uint64_t, unint64_t);
  BOOL v49;
  double v50;
  double v51;
  double v52;
  __int128 v53;
  Swift::String v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  Swift::String v59;
  unsigned int v60;
  Swift::String v61;
  __int128 v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 __dst[18];
  uint64_t v76;
  uint64_t v77;
  _OWORD __src[18];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v86 = (uint64_t *)a8;
  int v73 = a6;
  uint64_t v74 = a7;
  uint64_t v15 = (void *)swift_allocObject();
  unint64_t v18 = v15;
  v15[2] = a3;
  __n128 v19 = v15 + 2;
  unint64_t v20 = (unint64_t)&a1[a2];
  v15[3] = a4;
  v15[4] = a1;
  v15[5] = a1;
  _OWORD v15[6] = &a1[a2];
  uint64_t v72 = a9;
  if (a2 >= 1)
  {
    if ((uint64_t)&a1[-a3] >= 0)
    {
      uint64_t v16 = a3 + a4;
      if ((uint64_t)(a3 + a4 - v20) < 0)
      {
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }

      int v21 = *a1;
      uint64_t v22 = a1;
      BOOL v23 = v21 == 45;
      if (v21 == 45)
      {
        uint64_t v22 = a1 + 1;
        v15[5] = a1 + 1;
        if ((unint64_t)a2 < 2)
        {
          uint64_t v16 = 0LL;
          uint64_t v24 = 0LL;
          BOOL v23 = 1;
          ++a1;
          goto LABEL_20;
        }
      }

      uint64_t v24 = 0LL;
      uint64_t v16 = (uint64_t)&a1[a2];
      unint64_t v17 = &a1[a2] - v22;
      unint64_t v25 = (unint64_t)&v22[-a3];
      a1 = v22;
      while (v20 >= (unint64_t)a1)
      {
        if ((v25 & 0x8000000000000000LL) != 0) {
          goto LABEL_79;
        }
        if ((v17 & 0x8000000000000000LL) != 0) {
          goto LABEL_80;
        }
        if ((*a1 - 58) >= 0xF6u)
        {
          unsigned __int8 v26 = *a1 - 48;
          uint64_t v27 = 10 * v24;
          BOOL v28 = (unsigned __int128)(v24 * (__int128)10LL) >> 64 != (10 * v24) >> 63;
          uint64_t v24 = 10 * v24 + v26;
          BOOL v29 = __OFADD__(v27, v26);
          v15[5] = ++a1;
          uint64_t v16 = 1LL;
          if (v28 || v29) {
            goto LABEL_20;
          }
          uint64_t v16 = (uint64_t)(a1 + 1);
          --v17;
          ++v25;
        }

        uint64_t v16 = 0LL;
        goto LABEL_20;
      }

      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
    }

    __break(1u);
    goto LABEL_82;
  }

  uint64_t v16 = 0LL;
  uint64_t v24 = 0LL;
  BOOL v23 = 0;
LABEL_20:
  unint64_t v17 = (unint64_t)(a1 + 1);
  if ((uint64_t)&a1[-a3] < 0)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }

  if ((uint64_t)(v20 - (void)a1) < 0)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }

  if ((uint64_t)(a3 + a4 - v20) < 0)
  {
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }

  if (*a1 != 45) {
    goto LABEL_76;
  }
  v15[5] = v17;
  if ((v16 & 1) != 0) {
    goto LABEL_76;
  }
  BOOL v30 = v23;
  uint64_t v31 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v15);
  if ((v32 & 1) != 0) {
    goto LABEL_76;
  }
  unint64_t v17 = v18[5];
  uint64_t v16 = v17 + 1;
  if (v20 < v17 + 1) {
    goto LABEL_76;
  }
  if (v20 < v17) {
    goto LABEL_87;
  }
  if ((uint64_t)(v17 - a3) < 0)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }

  if ((uint64_t)(v20 - v17) < 0)
  {
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }

  if (*(_BYTE *)v17 != 45) {
    goto LABEL_76;
  }
  uint64_t v33 = (uint64_t)v31;
  v18[5] = v16;
  uint64_t v34 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v18);
  if ((v35 & 1) != 0) {
    goto LABEL_76;
  }
  unint64_t v17 = v18[5];
  uint64_t v16 = v17 + 1;
  if (v20 < v17 + 1) {
    goto LABEL_76;
  }
  if (v20 < v17) {
    goto LABEL_90;
  }
  if ((uint64_t)(v17 - a3) < 0)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }

  if ((uint64_t)(v20 - v17) < 0)
  {
LABEL_92:
    __break(1u);
LABEL_93:
    if ((((v16 - a3) | v17) & 0x8000000000000000LL) != 0)
    {
      __break(1u);
      goto LABEL_109;
    }

    unint64_t v57 = *(char *)v16;
    uint64_t v58 = *(unsigned __int8 *)v16;
    *(void *)&__src[0] = 0LL;
    *((void *)&__src[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(65LL);
    v59._uint64_t countAndFlagsBits = 0xD000000000000021LL;
    v59._unint64_t object = (void *)0x80000001839CA290LL;
    String.append(_:)(v59);
    uint64_t v60 = ((v58 >> 6) & 0xFFFFC0FF | ((v58 & 0x3F) << 8)) + 33217;
    if (v57 >= 0) {
      uint64_t v60 = v58 + 1;
    }
    *(void *)&__dst[0] = (v60 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v60) >> 3)) & 7)));
    MEMORY[0x186E1B6AC](__dst);
    Character.write<A>(to:)();
    swift_bridgeObjectRelease();
    v61._uint64_t countAndFlagsBits = 0x656E696C20746120LL;
    v61._unint64_t object = (void *)0xE900000000000020LL;
    String.append(_:)(v61);
    uint64_t v62 = *((_OWORD *)v19 + 1);
    unint64_t v83 = *(_OWORD *)v19;
    __int128 v84 = v62;
    __int128 v85 = v19[4];
    *(void *)&__dst[0] = BufferReader.lineNumber.getter();
    v63._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64._unint64_t object = (void *)0x80000001839CA2C0LL;
    v64._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v64);
LABEL_77:
    int v55 = __src[0];
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)( v55,  *((uint64_t *)&v55 + 1),  (unint64_t)a5,  v73,  v74,  (uint64_t)v86,  v56);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
    return;
  }

  if (*(_BYTE *)v17 != 84) {
    goto LABEL_76;
  }
  uint64_t v36 = (uint64_t)v34;
  v18[5] = v16;
  uint64_t v37 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v18);
  if ((v38 & 1) != 0) {
    goto LABEL_76;
  }
  uint64_t v39 = (_BYTE *)v18[5];
  if (v20 < (unint64_t)v39)
  {
    __break(1u);
    goto LABEL_99;
  }

  if ((uint64_t)&v39[-a3] < 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }

  if ((uint64_t)(v20 - (void)v39) < 0)
  {
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }

  if (*v39 != 58) {
    goto LABEL_76;
  }
  v18[5] = v39 + 1;
  uint64_t v70 = (uint64_t)v37;
  uint64_t v40 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v18);
  if ((v41 & 1) != 0) {
    goto LABEL_76;
  }
  uint64_t v42 = (_BYTE *)v18[5];
  uint64_t v68 = (uint64_t)v40;
  int v69 = v36;
  if ((uint64_t)&v42[-a3] < 0)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }

  if ((uint64_t)(v20 - (void)v42) < 0)
  {
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }

  if (*v42 != 58) {
    goto LABEL_76;
  }
  v18[5] = v42 + 1;
  uint64_t v67 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v18);
  if ((v43 & 1) != 0) {
    goto LABEL_76;
  }
  Swift::String v44 = (_BYTE *)v18[5];
  uint64_t v16 = (uint64_t)(v44 + 1);
  unint64_t v17 = v20 - (void)(v44 + 1);
  if ((uint64_t)&v44[-a3] < 0)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }

  if ((uint64_t)(v20 - (void)v44) >= 0)
  {
    if (*v44 == 90)
    {
      v18[5] = v16;
      if (v20 < (unint64_t)(v44 + 2))
      {
        if (one-time initialization token for cache == -1) {
          goto LABEL_59;
        }
        goto LABEL_107;
      }

      goto LABEL_93;
    }

LABEL_110:
      __break(1u);
      goto LABEL_111;
    }

          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }

        if (v82 == 0x10000) {
          goto LABEL_71;
        }
        uint64_t v48 = v74 * (unint64_t)v82;
        if ((v48 & 0xFFFFFFFF00000000LL) != 0)
        {
LABEL_136:
          __break(1u);
        }

        else
        {
          v30 -= 3LL;
          if (v30 < v40)
          {
LABEL_71:
            unint64_t v46 = v82 != 0;
            BOOL v30 = --v82;
            if (v46) {
              goto LABEL_73;
            }
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
        }

        __break(1u);
        goto LABEL_138;
      }

          uint64_t v82 = (v94 - 1) & v94;
          __int128 v84 = __clz(__rbit64(v94)) + (v78 << 6);
        }

        uint64_t v86 = 8 * v84;
        BOOL v87 = *(void *)(*(void *)(v85 + 48) + 8 * v84);
        __int128 v88 = 16 * v84;
        __int128 v89 = (uint64_t *)(*(void *)(v85 + 56) + v88);
        __int128 v91 = *v89;
        __int128 v90 = v89[1];
        *(void *)(*(void *)(v9 + 48) + v86) = v87;
        __int128 v92 = (void *)(*(void *)(v9 + 56) + v88);
        *__int128 v92 = v91;
        v92[1] = v90;
        swift_bridgeObjectRetain();
      }
    }

                                                        __int128 v84 = (v98 - 1) & v98;
                                                        BOOL v87 = __clz(__rbit64(v98)) + (v81 << 6);
                                                      }

                                                      __int128 v88 = 16 * v87;
                                                      __int128 v89 = (uint64_t *)(*(void *)(v26 + 48) + v88);
                                                      __int128 v91 = *v89;
                                                      __int128 v90 = v89[1];
                                                      __int128 v92 = (uint64_t *)(*(void *)(v26 + 56) + v88);
                                                      __int128 v93 = *v92;
                                                      __int128 v94 = v92[1];
                                                      __int128 v95 = (void *)(*(void *)(v30 + 48) + v88);
                                                      *__int128 v95 = v91;
                                                      v95[1] = v90;
                                                      __int128 v96 = (void *)(*(void *)(v30 + 56) + v88);
                                                      *__int128 v96 = v93;
                                                      v96[1] = v94;
                                                      swift_bridgeObjectRetain();
                                                      swift_bridgeObjectRetain();
                                                    }
                                                  }

            uint64_t v80 = (v85 - 1) & v85;
            uint64_t v82 = __clz(__rbit64(v85)) + (v77 << 6);
          }

          unint64_t v83 = *(void *)(*(void *)(v73 + 56) + 8 * v82);
          *(_BYTE *)(*(void *)(v23 + 48) + v82) = *(_BYTE *)(*(void *)(v73 + 48) + v82);
          *(void *)(*(void *)(v23 + 56) + 8 * v82) = v83;
          swift_bridgeObjectRetain();
        }
      }

    __int128 v111 = (v122 - 1) & v122;
    __int128 v113 = __clz(__rbit64(v122)) + (v108 << 6);
LABEL_85:
    __int128 v114 = 24 * v113;
    __int128 v115 = *(void *)(v61 + 48) + 24 * v113;
    __int128 v116 = *(void *)v115;
    __int128 v117 = *(void *)(v115 + 8);
    LOBYTE(v115) = *(_BYTE *)(v115 + 16);
    __int128 v118 = 8 * v113;
    uint64_t v119 = *(void *)(*(void *)(v61 + 56) + v118);
    uint64_t v120 = *(void *)(v88 + 48) + v114;
    *(void *)uint64_t v120 = v116;
    *(void *)(v120 + 8) = v117;
    *(_BYTE *)(v120 + 16) = v115;
    *(void *)(*(void *)(v88 + 56) + v118) = v119;
    swift_retain();
    swift_bridgeObjectRetain();
  }

  uint64_t v123 = v121 + 8;
  if (v123 >= v156) {
    goto LABEL_111;
  }
  uint64_t v122 = *(void *)&v159[8 * v123];
  if (v122)
  {
    __int128 v108 = v123;
    goto LABEL_110;
  }

  while (1)
  {
    __int128 v108 = v123 + 1;
    if (__OFADD__(v123, 1LL)) {
      break;
    }
    if (v108 >= v156) {
      goto LABEL_111;
    }
    uint64_t v122 = *(void *)&v159[8 * v108];
    ++v123;
    if (v122) {
      goto LABEL_110;
    }
  }

                          __break(1u);
                          goto LABEL_111;
                        }
                      }
                    }
                  }
                }
              }
            }

            Swift::String v47 = v60;
          }

            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
            goto LABEL_114;
          }

          uint64_t v15 = v39;
LABEL_58:
          if (v15) {
            goto LABEL_115;
          }
          goto LABEL_59;
        }

        uint64_t result = swift_unknownObjectRetain_n();
        Swift::String v44 = 0LL;
        unsigned __int8 v8 = v58;
        uint64_t v15 = v58;
        uint64_t v34 = v6;
        uint64_t v45 = *(unsigned __int16 *)(v6 + 16);
        if (!*(_WORD *)(v6 + 16)) {
          goto LABEL_96;
        }
        goto LABEL_84;
      }
    }

    else if (v8 > 0)
    {
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }

    swift_unknownObjectRetain_n();
    unint64_t v46 = specialized Rope._endPath.getter(v6);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v15 = 0LL;
    if (!v6) {
      goto LABEL_101;
    }
    int v55 = v34;
    uint64_t v34 = 0LL;
    goto LABEL_99;
  }

  __break(1u);
LABEL_79:
  Swift::String v44 = v8 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v9 = v56;
  unsigned __int8 v8 = v58;
  uint64_t v45 = *(unsigned __int16 *)(v34 + 16);
  if (!*(_WORD *)(v34 + 16)) {
    goto LABEL_96;
  }
LABEL_84:
  Swift::String v47 = *(void *)(v34 + 24);
  BOOL v23 = __OFSUB__(v15, v47);
  uint64_t v48 = v15 - v47;
  if (v23)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }

  if (__OFADD__(v48, 1LL))
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }

  if ((uint64_t)(v48 + 1) < 1)
  {
    uint64_t v45 = 0LL;
LABEL_97:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    if (!v6)
    {
      unint64_t v11 = v57;
      goto LABEL_100;
    }

    unint64_t v46 = v44 | (v45 << 8);
    unint64_t v11 = v57;
LABEL_99:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v60, v46, v34, v6, v59);
    uint64_t result = swift_unknownObjectRelease_n();
LABEL_100:
    uint64_t v34 = v55;
LABEL_101:
    char v35 = v8 - v15;
    if (__OFSUB__(v8, v15))
    {
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }

    uint64_t v82 = (v87 - 1) & v87;
    __int128 v85 = __clz(__rbit64(v87)) + (v78 << 6);
    goto LABEL_92;
  }

      if (v62 < v63) {
        goto LABEL_239;
      }
      __int128 v103 = Substring.subscript.getter();
      unint64_t v57 = MEMORY[0x186E1B610](v103);
      uint64_t v54 = v104;
      uint64_t v6 = a3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_240;
      }
      while (1)
      {
        __int128 v106 = *(void *)(v6 + 16);
        __int128 v105 = *(void *)(v6 + 24);
        if (v106 >= v105 >> 1) {
          uint64_t v6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v105 > 1),  v106 + 1,  1,  (void *)v6);
        }
        *(void *)(v6 + 16) = v106 + 1;
        __int128 v107 = v6 + 16 * v106;
        *(void *)(v107 + 32) = v57;
        *(void *)(v107 + 40) = v54;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_115:
        swift_bridgeObjectRelease();
LABEL_116:
        __int128 v108 = *(void *)(v6 + 16);
        if (v108)
        {
          __int128 v109 = (uint64_t *)(v6 + 40);
          __int128 v110 = (void *)MEMORY[0x18961AFE8];
          do
          {
            a3 = *(v109 - 1);
            __int128 v113 = *v109;
            __int128 v114 = HIBYTE(*v109) & 0xF;
            if ((*v109 & 0x2000000000000000LL) == 0) {
              __int128 v114 = a3 & 0xFFFFFFFFFFFFLL;
            }
            if (v114)
            {
              swift_bridgeObjectRetain();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v227 = (unint64_t)v110;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v110[2] + 1LL,  1);
                __int128 v110 = (void *)v227;
              }

              uint64_t v6 = v110[2];
              __int128 v111 = v110[3];
              if (v6 >= v111 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v111 > 1,  v6 + 1,  1);
                __int128 v110 = (void *)v227;
              }

              v110[2] = v6 + 1;
              BOOL v112 = &v110[2 * v6];
              v112[4] = a3;
              v112[5] = v113;
            }

            v109 += 2;
            --v108;
          }

          while (v108);
        }

        else
        {
          __int128 v110 = (void *)MEMORY[0x18961AFE8];
        }

        swift_bridgeObjectRelease();
        uint64_t v227 = (unint64_t)v110;
        swift_bridgeObjectRetain();
        __int128 v116 = specialized Collection.first.getter(v205, v206);
        __int128 v118 = v117;
        swift_bridgeObjectRelease();
        if (v118)
        {
          if (v116 == 47 && v118 == 0xE100000000000000LL)
          {
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v119 & 1) == 0) {
              goto LABEL_134;
            }
          }

          specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, 47LL, 0xE100000000000000LL);
        }

LABEL_109:
    __break(1u);
    goto LABEL_110;
  }

  v297 = v147 & 1;
  __int128 v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v292;
  LOBYTE(v323) = v151;
  BYTE1(v323) = v301;
  BYTE2(v323) = v300;
  BYTE3(v323) = v299;
  BYTE4(v323) = v298;
  BYTE5(v323) = v150;
  BYTE6(v323) = v279 & 1;
  HIBYTE(v323) = v278 & 1;
  Swift::String v324 = v277 & 1;
  v326 = v291;
  v327 = v290;
  unint64_t v328 = v289;
  __int128 v329 = v288;
  __int128 v330 = v287;
  __int128 v331 = v286;
  __int128 v332 = v285;
  __int128 v333 = v284;
  __int128 v334 = v148;
  __int128 v335 = v147 & 1;
  v337 = v283;
  __int128 v338 = v282;
  __int128 v339 = v281;
  __int128 v340 = v280;
  __int128 v341 = v276;
  __int128 v342 = v273;
  __int128 v343 = v274 & 1;
  __int128 v344 = v275 & 1;
  uint64_t v158 = URLComponents._URLComponents.path.getter();
  uint64_t v160 = v159;
  __int128 v161 = swift_bridgeObjectRelease();
  uint64_t v162 = HIBYTE(v160) & 0xF;
  if ((v160 & 0x2000000000000000LL) == 0) {
    uint64_t v162 = (unint64_t)v158 & 0xFFFFFFFFFFFFLL;
  }
  if (!v162)
  {
    uint64_t v163 = URL.ParseStrategy.defaultValues.getter();
    uint64_t v164 = specialized Dictionary.subscript.getter(32LL, v163);
    uint64_t v166 = v165;
    swift_bridgeObjectRelease();
    if (v166) {
      uint64_t v167 = v164;
    }
    else {
      uint64_t v167 = 0LL;
    }
    if (v166) {
      uint64_t v168 = v166;
    }
    else {
      uint64_t v168 = 0xE000000000000000LL;
    }
    __int128 v161 = URLComponents._URLComponents.path.setter(v167, v168);
  }

  uint64_t v169 = a1[7];
  v319[6] = a1[6];
  unint64_t v320 = v169;
  v321[0] = a1[8];
  *(_OWORD *)((char *)v321 + 10) = *(__int128 *)((char *)a1 + 138);
  unint64_t v170 = a1[3];
  v319[2] = a1[2];
  v319[3] = v170;
  uint64_t v171 = a1[5];
  v319[4] = a1[4];
  v319[5] = v171;
  uint64_t v172 = a1[1];
  v319[0] = *a1;
  v319[1] = v172;
  uint64_t v173 = URLComponents._URLComponents.query.getter(v161);
  if (!v174) {
    goto LABEL_124;
  }
  uint64_t v175 = v173;
  uint64_t v176 = v174;
  swift_bridgeObjectRelease();
  uint64_t v177 = HIBYTE(v176) & 0xF;
  if ((v176 & 0x2000000000000000LL) == 0) {
    uint64_t v177 = (unint64_t)v175 & 0xFFFFFFFFFFFFLL;
  }
  if (!v177)
  {
LABEL_124:
    uint64_t v180 = URL.ParseStrategy.defaultValues.getter();
    uint64_t v178 = specialized Dictionary.subscript.getter(64LL, v180);
    uint64_t v179 = v181;
    swift_bridgeObjectRelease();
    *((_BYTE *)a1 + 8) = 0;
    *((_BYTE *)a1 + 15) = 0;
    if (v179)
    {
      if ((v179 & 0x1000000000000000LL) != 0)
      {
        uint64_t v304 = v178;
        v305 = v179;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        unint64_t v236 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v237 = (unsigned __int16 *)objc_msgSend(v236, sel__fastCharacterContents);
        unint64_t v238 = v236;
        if (v237)
        {
          uint64_t v304 = v178;
          v305 = v179;
          StringProtocol._ephemeralString.getter();
          unint64_t v239 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v240 = (uint64_t)objc_msgSend(v239, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v240) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v237,  v240,  0x40u,  0);
          uint64_t v184 = swift_bridgeObjectRelease();
          if ((v240 & 1) != 0) {
            goto LABEL_144;
          }
        }

        else
        {
          __int128 v262 = specialized Sequence.allSatisfy(_:)(v178, v179, 64);
          uint64_t v184 = swift_bridgeObjectRelease();
          if ((v262 & 1) != 0) {
            goto LABEL_144;
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __int128 v88 = *((void *)v63._rawValue + 2);
        if (HIDWORD(v88)) {
          goto LABEL_161;
        }
        _So9NSDecimala__length_setter(v88, &v129);
        LODWORD(v126) = v124;
        WORD2(v126) = v108;
        HIWORD(v126) = v21;
        LOWORD(v127) = v22;
        WORD1(v127) = v23;
        WORD2(v127) = v24;
        HIWORD(v127) = v25;
        LOWORD(v128) = v26;
        HIWORD(v128) = v27;
LABEL_143:
        __int128 v96 = _So9NSDecimala__isNegative_getter(&v126);
        _So9NSDecimala__isNegative_setter(v96, &v129);
        NSDecimal.copyVariableLengthInteger(_:)(v63);
        if (v97)
        {
          uint64_t v50 = v97;
          goto LABEL_145;
        }

        swift_bridgeObjectRelease();
LABEL_147:
        _So9NSDecimala__isCompact_setter_0(0LL, &v129);
        NSDecimal.compact()();
        __n128 v19 = v129;
        unint64_t v20 = WORD2(v129);
        int v21 = HIWORD(v129);
        return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
      }

      uint64_t v70 = 0LL;
    }

          Swift::String v47 = (v55 - 1) & v55;
          int v53 = __clz(__rbit64(v55)) + (v46 << 6);
        }

        unint64_t v57 = (uint64_t *)(v12[6] + 16 * v53);
        uint64_t v59 = *v57;
        uint64_t v58 = v57[1];
        outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v53, (uint64_t)&v101);
        __int128 v108 = v103;
        __int128 v109 = v104;
        __int128 v110 = v105;
        __int128 v106 = v101;
        __int128 v107 = v102;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v60 = Hasher._finalize()();
        int v61 = -1LL << *(_BYTE *)(v45 + 32);
        uint64_t v62 = v60 & ~v61;
        uint64_t v63 = v62 >> 6;
        if (((-1LL << v62) & ~*(void *)(v48 + 8 * (v62 >> 6))) != 0)
        {
          char v49 = __clz(__rbit64((-1LL << v62) & ~*(void *)(v48 + 8 * (v62 >> 6)))) | v62 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          uint64_t v64 = 0;
          uint64_t v65 = (unint64_t)(63 - v61) >> 6;
          do
          {
            if (++v63 == v65 && (v64 & 1) != 0) {
              goto LABEL_156;
            }
            unint64_t v66 = v63 == v65;
            if (v63 == v65) {
              uint64_t v63 = 0LL;
            }
            v64 |= v66;
            uint64_t v67 = *(void *)(v48 + 8 * v63);
          }

          while (v67 == -1);
          char v49 = __clz(__rbit64(~v67)) + (v63 << 6);
        }

        *(void *)(v48 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v49;
        uint64_t v50 = (void *)(*(void *)(v45 + 48) + 16 * v49);
        *uint64_t v50 = v59;
        v50[1] = v58;
        int v51 = *(void *)(v45 + 56) + 72 * v49;
        *(_OWORD *)(v51 + 16) = v107;
        *(_OWORD *)(v51 + 32) = v108;
        *(_OWORD *)(v51 + 48) = v109;
        *(void *)(v51 + 64) = v110;
        *(_OWORD *)int v51 = v106;
        ++*(void *)(v45 + 16);
        if (!--v97) {
          goto LABEL_119;
        }
      }
    }

    swift_retain();
  }

  else
  {
    uint64_t v12 = (void *)MEMORY[0x18961AFF0];
  }

            __break(1u);
LABEL_110:
            __break(1u);
            goto LABEL_111;
          }

          goto LABEL_107;
        }

      swift_release();

      close((int)v188);
      goto LABEL_202;
    }

    int v71 = MEMORY[0x186E1B0E8]();
    uint64_t v72 = v71;
    int v73 = 4LL;
    switch(v71)
    {
      case 1:
      case 13:
        int v73 = 513LL;
        goto LABEL_153;
      case 2:
        goto LABEL_153;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_117;
      case 17:
        int v73 = 516LL;
        goto LABEL_153;
      case 28:
      case 69:
        int v73 = 640LL;
        goto LABEL_153;
      case 30:
        int v73 = 642LL;
        goto LABEL_153;
      case 63:
        int v73 = 514LL;
        goto LABEL_153;
      default:
        if (v71 == 102)
        {
          __int128 v117 = 0LL;
          int v73 = 512LL;
LABEL_158:
          char v149 = v189;
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v73,  v149,  v22,  v117,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&value,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
          swift_willThrow();
LABEL_170:
          swift_willThrow();
          goto LABEL_202;
        }

          *((void *)&v78 + 1) = v35;
LABEL_110:
          uint64_t v74 = v47;
          if (v76) {
            String.UnicodeScalarView.append(_:)();
          }
          a4 = *((void *)&v77 + 1);
          uint64_t v16 = v77;
          a1 = *((void *)&v78 + 1);
          unint64_t v17 = v79;
          a6 = *((void *)&v78 + 1);
          break;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
          goto LABEL_138;
        case 'g':
        case 'l':
          char v35 = a6 + 4;
          if (v17 >= a6 + 4 && *(_BYTE *)(a6 + 2) == 116 && *(_BYTE *)(a6 + 3) == 59) {
            goto LABEL_108;
          }
          goto LABEL_154;
        case 'q':
          if (v33 < 5) {
            goto LABEL_168;
          }
          if (*v34 != 997486453) {
            goto LABEL_168;
          }
          char v35 = a6 + 6;
LABEL_108:
          Swift::String v47 = v74;
          goto LABEL_109;
        default:
          if (*(_BYTE *)v21 != 35) {
            goto LABEL_138;
          }
          *((void *)&v78 + 1) = a6 + 2;
          specialized static XMLPlistScanner.parseNumericEntityReference(reader:string:)((uint64_t *)&v77);
          Swift::String v47 = v74;
          if (v74) {
            goto LABEL_176;
          }
          goto LABEL_110;
      }

      goto LABEL_22;
    }

    goto LABEL_185;
  }

  if (v24 != 60)
  {
    *((void *)&v78 + 1) = ++a6;
    goto LABEL_22;
  }

  int v21 = a6 + 2;
  if (v17 < a6 + 2) {
    goto LABEL_121;
  }
  int v21 = *(unsigned __int8 *)(a6 + 1);
  if ((_DWORD)v21 != 33) {
    goto LABEL_121;
  }
  if (v76)
  {
    if (a6 < a1) {
      goto LABEL_195;
    }
    unint64_t v25 = a4;
    unsigned __int8 v26 = static String._tryFromUTF8(_:)();
    if (!v27) {
      goto LABEL_129;
    }
    String.append(_:)(*(Swift::String *)&v26);
    swift_bridgeObjectRelease();
  }

  else
  {
    if (a6 < a1) {
      goto LABEL_203;
    }
    unint64_t v25 = a4;
    uint64_t v36 = static String._tryFromUTF8(_:)();
    char v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v75 = v36;
    int v76 = v38;
    if (!v38) {
      goto LABEL_129;
    }
  }

  uint64_t v39 = a6 + 9;
  if (v17 < a6 + 9) {
    goto LABEL_118;
  }
  if (v23 < a6) {
    goto LABEL_186;
  }
  if (*(void *)a6 == 0x41544144435B213CLL && *(_BYTE *)(a6 + 8) == 91)
  {
    a4 = v25;
    if (v39 >= v17 - 2) {
      goto LABEL_118;
    }
    char v41 = 0LL;
    uint64_t v42 = v25 + v16 - a6 - 9;
    while (1)
    {
      char v43 = (_WORD *)(a6 + v41 + 9);
      if (v42 < 0) {
        goto LABEL_180;
      }
      if (*v43 == 23901 && *(_BYTE *)(a6 + v41 + 11) == 62)
      {
        if (!v76) {
          goto LABEL_87;
        }
        if (v41 >= 0xFFFFFFFFFFFFFFF7LL) {
          goto LABEL_210;
        }
        uint64_t v22 = v25;
        uint64_t v45 = static String._tryFromUTF8(_:)();
        if (!v46)
        {
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(_OWORD *)unint64_t v66 = 0u;
          *(_OWORD *)(v66 + 16) = 0u;
          uint64_t v67 = 6;
          goto LABEL_170;
        }

        String.append(_:)(*(Swift::String *)&v45);
        swift_bridgeObjectRelease();
        a4 = v25;
LABEL_87:
        a1 = a6 + v41 + 12;
        *((void *)&v78 + 1) = a1;
        a6 = a1;
LABEL_22:
        int v21 = a6 + 1;
        if (v17 < a6 + 1)
        {
LABEL_121:
          if (v76)
          {
            if (a1 >= a6) {
              return v75;
            }
            if ((uint64_t)(a1 - v16) >= 0)
            {
              if ((uint64_t)(a6 - a1) >= 0)
              {
                if ((uint64_t)(v16 + a4 - a6) >= 0)
                {
                  uint64_t v56 = static String._tryFromUTF8(_:)();
                  if (v57)
                  {
                    String.append(_:)(*(Swift::String *)&v56);
                    swift_bridgeObjectRelease();
                    return v75;
                  }

          unint64_t v57 = v28;
          int v52 = (v61 - 1) & v61;
          uint64_t v59 = __clz(__rbit64(v61)) + (v51 << 6);
        }

        uint64_t v63 = *(void *)(v3 + 56);
        uint64_t v64 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v59);
        unint64_t v66 = *v64;
        uint64_t v65 = v64[1];
        outlined init with copy of AttributedString._AttributeValue(v63 + 72 * v59, (uint64_t)&v117);
        __int128 v114 = v119;
        __int128 v115 = v120;
        __int128 v116 = v121;
        BOOL v112 = v117;
        __int128 v113 = v118;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v67 = Hasher._finalize()();
        uint64_t v68 = -1LL << *(_BYTE *)(v50 + 32);
        int v69 = v67 & ~v68;
        uint64_t v70 = v69 >> 6;
        if (((-1LL << v69) & ~*(void *)(v53 + 8 * (v69 >> 6))) != 0)
        {
          uint64_t v54 = __clz(__rbit64((-1LL << v69) & ~*(void *)(v53 + 8 * (v69 >> 6)))) | v69 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_91;
        }

        int v71 = 0;
        uint64_t v72 = (unint64_t)(63 - v68) >> 6;
        do
        {
          if (++v70 == v72 && (v71 & 1) != 0)
          {
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
            goto LABEL_161;
          }

          int v73 = v70 == v72;
          if (v70 == v72) {
            uint64_t v70 = 0LL;
          }
          v71 |= v73;
          uint64_t v74 = *(void *)(v53 + 8 * v70);
        }

        while (v74 == -1);
        uint64_t v54 = __clz(__rbit64(~v74)) + (v70 << 6);
LABEL_91:
        *(void *)(v53 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v54;
        int v55 = (void *)(*(void *)(v50 + 48) + 16 * v54);
        char *v55 = v66;
        v55[1] = v65;
        uint64_t v56 = *(void *)(v50 + 56) + 72 * v54;
        *(_OWORD *)(v56 + 16) = v113;
        *(_OWORD *)(v56 + 32) = v114;
        *(_OWORD *)(v56 + 48) = v115;
        *(void *)(v56 + 64) = v116;
        *(_OWORD *)uint64_t v56 = v112;
        ++*(void *)(v50 + 16);
        BOOL v28 = (unint64_t *)((char *)v57 - 1);
        Swift::Int v3 = v110;
      }
    }

    swift_retain();
  }

  else
  {
    Swift::Int v3 = MEMORY[0x18961AFF0];
  }

            if (v61 < 1 || (v57 & 1) == 0) {
              goto LABEL_146;
            }
            uint64_t v56 = 0LL;
            unint64_t v57 = 0;
            uint64_t v58 = 0;
            v46 += v59 + 1;
            int v55 = 1;
            continue;
        }
      }
    }

    goto LABEL_264;
  }

  if (v17 < 1) {
    goto LABEL_259;
  }
  int v21 = *(unsigned __int8 *)v16;
  if (v21 == 45 || (uint64_t v7 = v16, v21 == 43)) {
    uint64_t v7 = v16 + 1;
  }
  if (v20 < (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_262;
  }

  uint64_t v13 = v7 - v16;
  if (v7 - v16 < 0)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }

  if ((uint64_t)(v20 - (void)v7) < 0)
  {
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }

  else {
    uint64_t v22 = v20 - (void)v7;
  }
  if (!_stringshims_strncasecmp_l(v7, "0x", v22, 0LL))
  {
    unint64_t v46 = (unsigned __int8 *)(v7 + 2);
    Swift::String v44 = v20 - (void)(v7 + 2);
    if (v44 >= 1 && (unint64_t)v46 < v20)
    {
      Swift::String v44 = v46 - v18;
      if (((v46 - v18) & 0x8000000000000000LL) == 0)
      {
        a3 = (uint64_t)&v7[-a4 + 2];
        Swift::String v44 = &v18[v19] - (unsigned __int8 *)v7 - 3;
        int v52 = v13 + 3;
        while (1)
        {
          int v53 = v52;
          __n128 v19 = *v46;
          if ((v19 - 58) <= 0xF5u
            && (*v46 - 65 > 0x25 || ((1LL << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }

          BOOL v30 = v44-- < 1;
          if (!v30 && (unint64_t)++v46 < v20)
          {
            ++a3;
            ++v52;
            if ((v53 & 0x8000000000000000LL) == 0) {
              continue;
            }
          }

          goto LABEL_93;
        }

            if (v61 < 1 || (v57 & 1) == 0) {
              goto LABEL_146;
            }
            uint64_t v56 = 0LL;
            unint64_t v57 = 0;
            uint64_t v58 = 0;
            v46 += v59 + 1;
            int v55 = 1;
            continue;
        }
      }
    }

    goto LABEL_264;
  }

  if (v17 < 1) {
    goto LABEL_259;
  }
  int v21 = *(unsigned __int8 *)v16;
  if (v21 == 45 || (uint64_t v7 = v16, v21 == 43)) {
    uint64_t v7 = v16 + 1;
  }
  if (v20 < (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_262;
  }

  uint64_t v13 = v7 - v16;
  if (v7 - v16 < 0)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }

  if ((uint64_t)(v20 - (void)v7) < 0)
  {
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }

  else {
    uint64_t v22 = v20 - (void)v7;
  }
  if (!_stringshims_strncasecmp_l(v7, "0x", v22, 0LL))
  {
    unint64_t v46 = (unsigned __int8 *)(v7 + 2);
    Swift::String v44 = v20 - (void)(v7 + 2);
    if (v44 >= 1 && (unint64_t)v46 < v20)
    {
      Swift::String v44 = v46 - v18;
      if (((v46 - v18) & 0x8000000000000000LL) == 0)
      {
        a3 = (uint64_t)&v7[-a4 + 2];
        Swift::String v44 = &v18[v19] - (unsigned __int8 *)v7 - 3;
        int v52 = v13 + 3;
        while (1)
        {
          int v53 = v52;
          __n128 v19 = *v46;
          if ((v19 - 58) <= 0xF5u
            && (*v46 - 65 > 0x25 || ((1LL << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }

          BOOL v30 = v44-- < 1;
          if (!v30 && (unint64_t)++v46 < v20)
          {
            ++a3;
            ++v52;
            if ((v53 & 0x8000000000000000LL) == 0) {
              continue;
            }
          }

          goto LABEL_93;
        }

            if (v61 < 1 || (v57 & 1) == 0) {
              goto LABEL_146;
            }
            uint64_t v56 = 0LL;
            unint64_t v57 = 0;
            uint64_t v58 = 0;
            v46 += v59 + 1;
            int v55 = 1;
            continue;
        }
      }
    }

    goto LABEL_264;
  }

  if (v17 < 1) {
    goto LABEL_259;
  }
  int v21 = *(unsigned __int8 *)v16;
  if (v21 == 45 || (uint64_t v7 = v16, v21 == 43)) {
    uint64_t v7 = v16 + 1;
  }
  if (v20 < (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_262;
  }

  uint64_t v13 = v7 - v16;
  if (v7 - v16 < 0)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }

  if ((uint64_t)(v20 - (void)v7) < 0)
  {
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }

  else {
    uint64_t v22 = v20 - (void)v7;
  }
  if (!_stringshims_strncasecmp_l(v7, "0x", v22, 0LL))
  {
    unint64_t v46 = (unsigned __int8 *)(v7 + 2);
    Swift::String v44 = v20 - (void)(v7 + 2);
    if (v44 >= 1 && (unint64_t)v46 < v20)
    {
      Swift::String v44 = v46 - v18;
      if (((v46 - v18) & 0x8000000000000000LL) == 0)
      {
        a3 = (uint64_t)&v7[-a4 + 2];
        Swift::String v44 = &v18[v19] - (unsigned __int8 *)v7 - 3;
        int v52 = v13 + 3;
        while (1)
        {
          int v53 = v52;
          __n128 v19 = *v46;
          if ((v19 - 58) <= 0xF5u
            && (*v46 - 65 > 0x25 || ((1LL << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }

          BOOL v30 = v44-- < 1;
          if (!v30 && (unint64_t)++v46 < v20)
          {
            ++a3;
            ++v52;
            if ((v53 & 0x8000000000000000LL) == 0) {
              continue;
            }
          }

          goto LABEL_93;
        }

            if (v63 < 1 || (v59 & 1) == 0) {
              goto LABEL_146;
            }
            uint64_t v58 = 0LL;
            uint64_t v59 = 0;
            uint64_t v60 = 0;
            v48 += v61 + 1;
            unint64_t v57 = 1;
            continue;
        }
      }
    }

    goto LABEL_263;
  }

  if (v19 < 1) {
    goto LABEL_258;
  }
  BOOL v23 = *(unsigned __int8 *)v18;
  if (v23 == 45 || (uint64_t v9 = v18, v23 == 43)) {
    uint64_t v9 = v18 + 1;
  }
  if (v22 < (unint64_t)v9)
  {
    __break(1u);
    goto LABEL_261;
  }

  uint64_t v15 = v9 - v18;
  if (v9 - v18 < 0)
  {
LABEL_261:
    __break(1u);
    goto LABEL_262;
  }

  if ((uint64_t)(v22 - (void)v9) < 0)
  {
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
    goto LABEL_266;
  }

  else {
    uint64_t v24 = v22 - (void)v9;
  }
  if (!_stringshims_strncasecmp_l(v9, "0x", v24, 0LL))
  {
    uint64_t v48 = (unsigned __int8 *)(v9 + 2);
    unint64_t v46 = v22 - (void)(v9 + 2);
    if (v46 >= 1 && (unint64_t)v48 < v22)
    {
      unint64_t v46 = v48 - v20;
      if (((v48 - v20) & 0x8000000000000000LL) == 0)
      {
        a3 = (uint64_t)&v9[-a4 + 2];
        unint64_t v46 = &v20[v21] - (unsigned __int8 *)v9 - 3;
        uint64_t v54 = v15 + 3;
        while (1)
        {
          int v55 = v54;
          int v21 = *v48;
          if ((v21 - 58) <= 0xF5u
            && (*v48 - 65 > 0x25 || ((1LL << (v21 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }

          char v32 = v46-- < 1;
          if (!v32 && (unint64_t)++v48 < v22)
          {
            ++a3;
            ++v54;
            if ((v55 & 0x8000000000000000LL) == 0) {
              continue;
            }
          }

          goto LABEL_93;
        }

            if (v67 < 1 || (v63 & 1) == 0) {
              goto LABEL_146;
            }
            uint64_t v62 = 0LL;
            uint64_t v63 = 0;
            uint64_t v64 = 0;
            v48 += v65 + 1;
            int v61 = 1;
            if (v48 >= v8) {
              goto LABEL_245;
            }
            continue;
        }
      }
    }

    goto LABEL_260;
  }

  if (v18 < 1) {
    goto LABEL_255;
  }
  int v21 = *v17;
  if ((unint64_t)v8 < a3)
  {
    __break(1u);
    goto LABEL_258;
  }

  uint64_t v14 = a3 - (void)v17;
  if ((uint64_t)(a3 - (void)v17) < 0)
  {
LABEL_258:
    __break(1u);
    goto LABEL_259;
  }

  if ((uint64_t)&v8[-a3] < 0)
  {
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }

  else {
    uint64_t v22 = (size_t)&v8[-a3];
  }
  if (!_stringshims_strncasecmp_l((const char *)a3, "0x", v22, 0LL))
  {
    uint64_t v48 = (unsigned __int8 *)(a3 + 2);
    unint64_t v46 = (uint64_t)&v8[-a3 - 2];
    if (v46 >= 1 && v48 < v8)
    {
      unint64_t v46 = v48 - v19;
      if (((v48 - v19) & 0x8000000000000000LL) == 0)
      {
        uint64_t v13 = (char *)(a3 - a4 + 2);
        unint64_t v46 = (uint64_t)&v19[i - a3 - 3];
        uint64_t v58 = v14 + 3;
        while (1)
        {
          uint64_t v59 = v58;
          uint64_t i = *v48;
          if ((i - 58) <= 0xF5u
            && (*v48 - 65 > 0x25 || ((1LL << (i - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }

          char v32 = v46-- < 1;
          if (!v32 && ++v48 < v8)
          {
            ++v13;
            ++v58;
            if ((v59 & 0x8000000000000000LL) == 0) {
              continue;
            }
          }

          goto LABEL_93;
        }

              __break(1u);
              return;
            }
          }

          char v49 = (void *)object[2];
          if (!v49)
          {
LABEL_108:
            __break(1u);
            goto LABEL_109;
          }

          LODWORD(v62) = 0;
          _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
          uint64_t v50 = (char *)malloc_type_realloc(v49, v13, (unint64_t)v62 << 32);
          goto LABEL_79;
        }

        LODWORD(v62) = 0;
        _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
        uint64_t v16 = 1;
        uint64_t v33 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)v62 << 32);
        if (v33)
        {
          uint64_t v34 = object[2];
          if (!v34)
          {
LABEL_105:
            __break(1u);
            goto LABEL_106;
          }

          uint64_t v27 = v33;
          specialized static __DataStorage.move(_:_:_:)((vm_address_t)v33, v34, v15);
          char v35 = (unint64_t *)object[2];
          if (!v35) {
            goto LABEL_83;
          }
          uint64_t v36 = (void (*)(unint64_t *, uint64_t))object[6];
          if (v36)
          {
            uint64_t v60 = object[3];
            swift_retain();
            v36(v35, v60);
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v36);
LABEL_83:
            uint64_t v56 = object[6];
            object[6] = 0LL;
            object[7] = 0LL;
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v56);
            goto LABEL_84;
          }

void *read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(void *result)
{
  Swift::String v1 = (char *)result[5];
  unint64_t v2 = result[6];
  if (v2 < (unint64_t)v1)
  {
    __break(1u);
    goto LABEL_12;
  }

  Swift::Int v3 = result;
  uint64_t v4 = result[2];
  if ((uint64_t)&v1[-v4] < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if ((uint64_t)(v2 - (void)v1) < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if ((uint64_t)(v4 + result[3] - v2) < 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  uint64_t v5 = v1 + 2;
  uint64_t result = 0LL;
  char v6 = *v1;
  char v7 = v1[1];
  v3[5] = v5;
  return result;
}

unint64_t XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)@<X0>( unint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v6 = *(unsigned __int8 **)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  if ((unsigned __int8 *)v7 == v6) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a4,  1LL,  1LL,  a2);
  }
  unint64_t v9 = result;
  uint64_t v10 = *(void *)result;
  uint64_t v11 = *(void *)(result + 8);
  uint64_t v12 = v6 + 1;
  if ((uint64_t)&v6[-v10] < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (((v7 - (void)v6) & 0x8000000000000000LL) != 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if ((uint64_t)(v10 + v11 - v7) >= 0)
  {
    int v13 = *v6;
    if (v13 == 45)
    {
      int v14 = 1;
      goto LABEL_11;
    }

    if (v13 == 43)
    {
      int v14 = 0;
LABEL_11:
      *(void *)(result + 24) = v12;
      specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)((void *)result);
LABEL_12:
      uint64_t result = *(void *)(v9 + 24);
      if (v7 < result)
      {
        __break(1u);
      }

      else if ((uint64_t)(result - v10) >= 0)
      {
        if ((uint64_t)(v7 - result) >= 0)
        {
          if ((uint64_t)(v10 + v11 - v7) >= 0)
          {
            unint64_t v15 = result + 2;
            uint64_t v16 = v7 - (result + 2);
            *(void *)(v9 + 24) = v15;
            if ((((v15 - v10) | v16) & 0x8000000000000000LL) == 0) {
              return _parseHexIntegerDigits<A>(_:isNegative:)((unsigned __int8 *)(result + 2), v16, v14, a2, a3, a4);
            }
            goto LABEL_30;
          }

          goto LABEL_26;
        }

uint64_t XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v54 = a6;
  uint64_t v52 = a8;
  uint64_t v53 = a9;
  uint64_t v58 = a4;
  unint64_t v59 = a3;
  uint64_t v56 = (uint64_t *)a2;
  uint64_t v57 = a10;
  v60[10] = *MEMORY[0x1895F89C0];
  uint64_t v13 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  __n128 v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v23 = MEMORY[0x1895F8858](v20);
  uint64_t v24 = (char *)&v51 - v22;
  if (a5 >> 60 == 6)
  {
    uint64_t v36 = *(void *)(a5 + 16);
    uint64_t v35 = *(void *)(a5 + 24);
    uint64_t v37 = *(void *)(a1 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v37 + 40));
    uint64_t v38 = *(void *)(v37 + 24);
    BOOL v39 = v38 < v35 + v36 || v38 < v35;
    if (v39 || (v35 | v36) < 0 || v38 <= v36) {
      __break(1u);
    }
    closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)( (const char *)(*(void *)(v37 + 16) + v36),  v35,  *(void *)(v37 + 16),  v38,  v59,  v58,  v54,  v53,  a7,  v52,  v57);
    os_unfair_lock_unlock((os_unfair_lock_t)(v37 + 40));
    return swift_release();
  }

  else if (a5 >> 60 == 7)
  {
    uint64_t v56 = &v51;
    uint64_t v25 = *(void *)(a5 + 16);
    uint64_t v26 = *(void *)(a5 + 24);
    MEMORY[0x1895F8858](v21);
    uint64_t v51 = (uint64_t)&v51;
    uint64_t v27 = v57;
    *(&v51 - 6) = a7;
    *(&v51 - 5) = v27;
    unint64_t v48 = a5;
    unint64_t v49 = v59;
    uint64_t v50 = v58;
    uint64_t v28 = *(void *)(a1 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v28 + 40));
    BOOL v29 = v55;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v28 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:),  v25,  v26,  v60);
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    swift_release();
    if (v29)
    {

      uint64_t v30 = *(void *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v31 = *(void *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      MEMORY[0x1895F8858](v32);
      uint64_t v33 = v57;
      *(&v51 - 6) = a7;
      *(&v51 - 5) = v33;
      unint64_t v48 = a5;
      unint64_t v49 = v59;
      uint64_t v50 = v58;
      uint64_t v34 = *(void *)(a1 + 24);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v34 + 40));
      specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v34 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:),  v30,  v31,  v60);
      os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 40));
      swift_release();
      lazy protocol witness table accessor for type Int64 and conformance Int64();
    }

    else
    {
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    }

    return dispatch thunk of FloatingPoint.init<A>(_:)();
  }

  else
  {
    char v41 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
    v41((char *)&v51 - v22, v58, v16, v23);
    ((void (*)(char *, char *, uint64_t))v41)(v19, v24, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v19, 1LL, a7) == 1)
    {
      uint64_t v42 = *(void (**)(char *, uint64_t))(v17 + 8);
      v42(v19, v16);
      _CodingPathNode.path.getter(v59);
      v42(v24, v16);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v19, a7);
      uint64_t v43 = _CodingPathNode.path.getter(v59);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      uint64_t v45 = v57;
      *(void *)(inited + 56) = a7;
      *(void *)(inited + 64) = v45;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 16))(boxed_opaque_existential_1, v15, a7);
      v60[0] = v43;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, v16);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a7);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)v56, a5, v47);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

uint64_t closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v41 = a8;
  uint64_t v42 = a11;
  uint64_t v43 = a9;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  __n128 v19 = (char *)&v40 - v18;
  uint64_t v20 = a1 + a2;
  *(void *)&__int128 v48 = a3;
  *((void *)&v48 + 1) = a4;
  *(void *)&__int128 v49 = a1;
  *((void *)&v49 + 1) = a1;
  uint64_t v50 = v20;
  specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)(&v48);
  if (v20 == *((void *)&v49 + 1))
  {
    unint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(38LL);
    swift_bridgeObjectRelease();
    unint64_t v46 = 0xD000000000000024LL;
    unint64_t v47 = 0x80000001839CA1C0LL;
    uint64_t v51 = a3;
    uint64_t v52 = a4;
    uint64_t v53 = a1;
    uint64_t v54 = v20;
    uint64_t v55 = v20;
    uint64_t v59 = BufferReader.lineNumber.getter();
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    unint64_t v37 = v46;
    unint64_t v36 = v47;
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v38;
    uint64_t v30 = v37;
    uint64_t v31 = v36;
    unint64_t v32 = v44;
    uint64_t v33 = v45;
    uint64_t v34 = v43;
    goto LABEL_5;
  }

  uint64_t v22 = v43;
  unint64_t v21 = v44;
  uint64_t v23 = v45;
  XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)((unint64_t)&v48, a7, a10, (uint64_t)v19);
  uint64_t v24 = *(void *)(a7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1LL, a7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    unint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease();
    unint64_t v46 = 0xD000000000000020LL;
    unint64_t v47 = 0x80000001839CA190LL;
    __int128 v56 = v48;
    __int128 v57 = v49;
    uint64_t v58 = v50;
    uint64_t v59 = BufferReader.lineNumber.getter();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    unint64_t v27 = v46;
    unint64_t v26 = v47;
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    uint64_t v30 = v27;
    uint64_t v31 = v26;
    unint64_t v32 = v21;
    uint64_t v33 = v23;
    uint64_t v34 = v22;
LABEL_5:
    static DecodingError._dataCorrupted<A>(_:for:_:)(v30, v31, v32, v33, v34, v42, v29);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v41, v19, a7);
}

uint64_t closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)@<X0>( const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v52 = a9;
  unint64_t v50 = a7;
  uint64_t v51 = a8;
  uint64_t v49 = *(void *)(a12 + 16);
  uint64_t v48 = *(void *)(*(void *)(v49 + 16) + 8LL);
  uint64_t v47 = *(void *)(v48 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  MEMORY[0x1895F8858](v20);
  MEMORY[0x1895F8858](v21);
  if (!a2)
  {
    uint64_t v53 = a5;
    uint64_t v54 = a6;
    uint64_t v55 = a3;
    uint64_t v56 = a3;
    uint64_t v57 = a3 + a4;
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease();
    uint64_t v58 = BufferReader.lineNumber.getter();
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)( 0xD000000000000026LL,  0x80000001839CA140LL,  v50,  v51,  a11,  a13,  v30);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  int v25 = *(unsigned __int8 *)a1;
  unsigned int v26 = v25 & 0xFFFFFFDF;
  if (a2 != 3 || v26 != 78)
  {
    uint64_t v32 = v23;
    if (a2 == 9 && v25 == 43)
    {
      uint64_t v33 = "+infinity";
      uint64_t v34 = a1;
      size_t v35 = 9LL;
      goto LABEL_11;
    }

    if (a2 == 4 && v25 == 43)
    {
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) != 0x69
        || (*((unsigned __int8 *)a1 + 2) | 0x20) != 0x6E
        || (*((unsigned __int8 *)a1 + 3) | 0x20) != 0x66)
      {
        goto LABEL_35;
      }

uint64_t static XMLPlistMap.Value.rejectHexadecimalValues<A>(_:fullSource:for:_:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 >= 1)
  {
    uint64_t v12 = (_BYTE *)result;
    while (2)
    {
      switch(*v12)
      {
        case 9:
        case 0xA:
        case 0xD:
        case 0x20:
        case 0x2B:
        case 0x2D:
        case 0x30:
          break;
        case 0xB:
        case 0xC:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2C:
        case 0x2E:
        case 0x2F:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x3D:
        case 0x3E:
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4B:
        case 0x4C:
        case 0x4D:
        case 0x4E:
        case 0x4F:
        case 0x50:
        case 0x51:
        case 0x52:
        case 0x53:
        case 0x54:
        case 0x55:
        case 0x56:
        case 0x57:
          return result;
        case 0x58:
          goto LABEL_7;
        default:
          if (*v12 == 120)
          {
LABEL_7:
            _StringGuts.grow(_:)(40LL);
            swift_bridgeObjectRelease();
            BufferReader.lineNumber.getter();
            v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v13);
            swift_bridgeObjectRelease();
            type metadata accessor for DecodingError();
            swift_allocError();
            static DecodingError._dataCorrupted<A>(_:for:_:)( 0xD000000000000026LL,  0x80000001839CA140LL,  a5,  a6,  a7,  a8,  v14);
            swift_bridgeObjectRelease();
            uint64_t result = swift_willThrow();
          }

          break;
      }

      break;
    }
  }

  return result;
}

uint64_t closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)@<X0>( const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v56 = a6;
  unint64_t v55 = a5;
  uint64_t v58 = a4;
  uint64_t v48 = a8;
  v67[1] = *(char **)MEMORY[0x1895F89C0];
  uint64_t v52 = type metadata accessor for Optional();
  uint64_t v54 = *(void *)(v52 - 8);
  MEMORY[0x1895F8858](v52);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v51 = (char *)&v42 - v18;
  uint64_t v53 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v47 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = v20;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v42 - v22;
  uint64_t v50 = a11;
  uint64_t v45 = a10;
  unint64_t v24 = v55;
  uint64_t v49 = a9;
  uint64_t v25 = v57;
  uint64_t v26 = v56;
  uint64_t result = closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)( a1,  a2,  (uint64_t)a1,  a2,  a3,  v58,  v55,  v56,  (uint64_t)v16,  a7,  a9,  a10,  a11);
  if (!v25)
  {
    uint64_t v43 = a2;
    uint64_t v57 = 0LL;
    uint64_t v44 = a3;
    uint64_t v28 = v26;
    Swift::String v29 = v51;
    uint64_t v30 = v16;
    uint64_t v31 = v52;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v30, v52);
    uint64_t v32 = v53;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v29, 1LL, a7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v29, v31);
      uint64_t v33 = v57;
      uint64_t result = static XMLPlistMap.Value.rejectHexadecimalValues<A>(_:fullSource:for:_:)( (uint64_t)a1,  v43,  v44,  v58,  v24,  v28,  v49,  v50);
      if (!v33)
      {
        v67[0] = 0LL;
        if (v46 == 4)
        {
          uint64_t v34 = a1;
          _stringshims_strtof_l(a1, v67, 0LL);
          uint64_t result = dispatch thunk of BinaryFloatingPoint.init(_:)();
        }

        else
        {
          if (v46 != 8) {
            __break(1u);
          }
          uint64_t v34 = a1;
          _stringshims_strtod_l(a1, v67, 0LL);
          uint64_t result = dispatch thunk of BinaryFloatingPoint.init(_:)();
        }

        uint64_t v37 = v49;
        uint64_t v36 = v50;
        if (v67[0])
        {
          if (&v34[v43] == v67[0])
          {
            return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 32))(v48, v47, a7);
          }

          else
          {
            uint64_t v62 = v44;
            uint64_t v63 = v58;
            uint64_t v64 = v34;
            uint64_t v65 = v34;
            unint64_t v66 = &v34[v43];
            unint64_t v60 = 0LL;
            unint64_t v61 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(40LL);
            swift_bridgeObjectRelease();
            unint64_t v60 = 0xD000000000000026LL;
            unint64_t v61 = 0x80000001839CA140LL;
            uint64_t v59 = BufferReader.lineNumber.getter();
            v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v38);
            swift_bridgeObjectRelease();
            uint64_t v39 = v60;
            uint64_t v40 = v61;
            type metadata accessor for DecodingError();
            swift_allocError();
            static DecodingError._dataCorrupted<A>(_:for:_:)(v39, v40, v24, v28, v37, v36, v41);
            swift_bridgeObjectRelease();
            swift_willThrow();
            return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v47, a7);
          }
        }

        else
        {
          __break(1u);
        }
      }
    }

    else
    {
      size_t v35 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
      v35(v23, v29, a7);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v48, v23, a7);
    }
  }

  return result;
}

uint64_t XMLPlistMap.Value.debugDataTypeDescription.getter(unint64_t a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182F985B0 + 4 * byte_183729513[a1 >> 60]))( 0x676E697274732061LL,  0xE800000000000000LL);
}

uint64_t sub_182F985B0()
{
  return 0x7961727261206E61LL;
}

uint64_t sub_182F985C4()
{
  return 0x6F69746369642061LL;
}

uint64_t sub_182F985E4()
{
  return 0x7620617461642061LL;
}

uint64_t sub_182F98604()
{
  return 0x657461642061LL;
}

uint64_t sub_182F98618()
{
  return 0x61656C6F6F622061LL;
}

uint64_t sub_182F98634()
{
  return 0x6E206C6165722061LL;
}

uint64_t sub_182F98658()
{
  return 0x6765746E69206E61LL;
}

uint64_t sub_182F98674@<X0>(uint64_t a1@<X8>)
{
  if (a1 == 0x8000000000000000LL) {
    return 0x76206C6C756E2061LL;
  }
  else {
    return 0xD000000000000016LL;
  }
}

void *XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(void *result)
{
  unint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 16LL);
  if (v3) {
    BOOL v4 = (*(void *)(*v1 + 16LL) & 0x7FFLL) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return result;
  }
  unint64_t v5 = result[2];
  unint64_t v6 = result[4];
  if (v6 < v5)
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v7 = *result;
  if ((uint64_t)(v5 - *result) < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v8 = v6 - v5;
  if (v8 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if ((uint64_t)(v7 + result[1] - v6) < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  double v9 = (double)v8 / (double)(result[3] - v7) * (double)v3;
  if ((~*(void *)&v9 & 0x7FF0000000000000LL) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (v9 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (v9 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
    return result;
  }

  uint64_t v10 = (uint64_t)v9;
  uint64_t v11 = v1[1];
  if (!v11 || (double)v10 / (double)v11 > 1.25)
  {
    uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)result || v10 > v2[3] >> 1)
    {
      if (v3 <= v10) {
        int64_t v12 = v10;
      }
      else {
        int64_t v12 = v3;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v12,  0,  v2);
      unint64_t v2 = result;
    }

    void *v1 = v2;
    v1[1] = v10;
  }

  return result;
}

int64_t XMLPlistScanner.PartialMapData.recordStartCollection(tagType:with:)( unsigned __int8 a1, void *a2)
{
  BOOL v4 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    BOOL v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  int64_t v7 = v6 + 1;
  if (v6 >= v5 >> 1) {
    BOOL v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v5 > 1),  v6 + 1,  1,  v4);
  }
  v4[2] = v7;
  v4[v6 + 4] = a1;
  int64_t v8 = v6 + 3;
  if (__OFADD__(v6, 3LL))
  {
    __break(1u);
  }

  else
  {
    unint64_t v9 = v4[3];
    unint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) >= v8)
    {
      unint64_t v11 = v6 + 1;
      goto LABEL_8;
    }
  }

  if (v7 <= v8) {
    int64_t v16 = v6 + 3;
  }
  else {
    int64_t v16 = v6 + 1;
  }
  BOOL v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)1,  v16,  1,  v4);
  unint64_t v11 = v4[2];
  unint64_t v9 = v4[3];
  unint64_t v10 = v9 >> 1;
LABEL_8:
  unint64_t v12 = v11 + 1;
  if (v10 <= v11) {
    BOOL v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v11 + 1,  1,  v4);
  }
  v4[2] = v12;
  v4[v11 + 4] = 0LL;
  unint64_t v13 = v4[3];
  int64_t v14 = v11 + 2;
  if (v14 > (uint64_t)(v13 >> 1)) {
    BOOL v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v14,  1,  v4);
  }
  v4[2] = v14;
  v4[v12 + 4] = 0LL;
  *unint64_t v2 = v4;
  return v7;
}

void *XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(unsigned __int8 a1, void *a2)
{
  unint64_t v6 = *(void **)v2;
  int64_t v7 = *(void *)(*(void *)v2 + 16LL);
  int64_t v8 = v7 + 4;
  if (__OFADD__(v7, 4LL))
  {
    __break(1u);
LABEL_17:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v5 > 1),  v7,  1,  v6);
    unint64_t v6 = result;
    unint64_t v5 = result[3];
    unint64_t v10 = v5 >> 1;
    goto LABEL_9;
  }

  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (unint64_t v5 = v6[3], v10 = v5 >> 1, (uint64_t)(v5 >> 1) < v8))
  {
    if (v7 <= v8) {
      int64_t v11 = v7 + 4;
    }
    else {
      int64_t v11 = v7;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v11,  1,  v6);
    unint64_t v6 = result;
    unint64_t v5 = result[3];
    unint64_t v10 = v5 >> 1;
  }

  unint64_t v3 = v6[2];
  int64_t v7 = v3 + 1;
  if (v10 <= v3) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v6[2] = v7;
  v6[v3 + 4] = a1;
  if ((uint64_t)v10 < (uint64_t)(v3 + 2))
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v5 > 1),  v3 + 2,  1,  v6);
    unint64_t v6 = result;
  }

  uint64_t v6[2] = v3 + 2;
  v6[v7 + 4] = v8;
  unint64_t v13 = v6[2];
  unint64_t v12 = v6[3];
  int64_t v14 = v12 >> 1;
  unint64_t v15 = v13 + 1;
  if (v12 >> 1 <= v13)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v6);
    unint64_t v6 = result;
    unint64_t v12 = result[3];
    int64_t v14 = v12 >> 1;
  }

  uint64_t v6[2] = v15;
  v6[v13 + 4] = 0LL;
  int64_t v16 = v13 + 2;
  if (v14 < v16)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v16,  1,  v6);
    unint64_t v6 = result;
  }

  uint64_t v6[2] = v16;
  v6[v15 + 4] = 10LL;
  *(void *)uint64_t v2 = v6;
  return result;
}

void *XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)( unsigned __int8 a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v9 = *(void **)v4;
  int64_t v10 = *(void *)(*(void *)v4 + 16LL);
  int64_t v11 = v10 + 3;
  if (__OFADD__(v10, 3LL))
  {
    __break(1u);
LABEL_15:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v10,  1,  v9);
    unint64_t v9 = result;
    unint64_t v8 = result[3];
    unint64_t v13 = v8 >> 1;
    goto LABEL_9;
  }

  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v8 = v9[3], unint64_t v13 = v8 >> 1, (uint64_t)(v8 >> 1) < v11))
  {
    if (v10 <= v11) {
      int64_t v14 = v10 + 3;
    }
    else {
      int64_t v14 = v10;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v14,  1,  v9);
    unint64_t v9 = result;
    unint64_t v8 = result[3];
    unint64_t v13 = v8 >> 1;
  }

  int64_t v11 = v9[2];
  int64_t v10 = v11 + 1;
  if (v13 <= v11) {
    goto LABEL_15;
  }
LABEL_9:
  v9[2] = v10;
  v9[v11 + 4] = a1;
  if ((uint64_t)v13 < v11 + 2)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v11 + 2,  1,  v9);
    unint64_t v9 = result;
  }

  v9[2] = v11 + 2;
  v9[v10 + 4] = a2;
  unint64_t v16 = v9[2];
  unint64_t v15 = v9[3];
  if (v16 >= v15 >> 1)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v15 > 1),  v16 + 1,  1,  v9);
    unint64_t v9 = result;
  }

  v9[2] = v16 + 1;
  v9[v16 + 4] = a3;
  *(void *)uint64_t v4 = v9;
  return result;
}

uint64_t XMLPlistScanner.PartialMapData.record(tagType:with:)(unsigned __int8 a1, void *a2)
{
  uint64_t v4 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
    uint64_t v4 = (void *)result;
  }

  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v6 > 1),  v7 + 1,  1,  v4);
    uint64_t v4 = (void *)result;
  }

  v4[2] = v7 + 1;
  v4[v7 + 4] = a1;
  *uint64_t v2 = v4;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanUpToNextValue(for:)( Foundation::XMLPlistTag a1)
{
  unint64_t v3 = (unsigned __int8 *)v1[3];
  unint64_t v4 = v1[4];
  if ((unsigned __int8 *)v4 == v3)
  {
LABEL_17:
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease();
    XMLPlistTag.tagName.getter(a1);
    v15._uint64_t countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v16 = 0xD000000000000020LL;
    *(void *)(v16 + 8) = 0x80000001839C9DE0LL;
    *(void *)(v16 + 16) = 0LL;
    *(void *)(v16 + 24) = 0LL;
LABEL_19:
    *(_BYTE *)(v16 + 32) = 0;
LABEL_23:
    swift_willThrow();
LABEL_24:
    LOBYTE(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7) = v11;
  }

  else
  {
    while (1)
    {
      uint64_t v6 = *v1;
      uint64_t v5 = v1[1];
      unint64_t v7 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(v3);
      v1[3] = (uint64_t)v7;
      if ((unsigned __int8 *)v4 == v7)
      {
LABEL_18:
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(_OWORD *)uint64_t v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        goto LABEL_19;
      }

      unint64_t v8 = v7 + 1;
      uint64_t v9 = *v7;
      v1[3] = (uint64_t)(v7 + 1);
      if (v9 != 60)
      {
        uint64_t v17 = BufferReader.lineNumber.getter();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(void *)uint64_t v18 = v9;
        *(void *)(v18 + 8) = v17;
        *(void *)(v18 + 16) = 0xD00000000000001ALL;
        *(void *)(v18 + 24) = 0x80000001839C9DC0LL;
LABEL_22:
        *(_BYTE *)(v18 + 32) = 3;
        goto LABEL_23;
      }

      int v10 = *v8;
      if (v10 == 33)
      {
        unsigned int v13 = v7[2];
        if (v13 != 45 || (unsigned int v13 = v7[3], v13 != 45))
        {
          uint64_t v19 = BufferReader.lineNumber.getter();
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(void *)uint64_t v18 = v13;
          *(void *)(v18 + 8) = v19;
          *(_OWORD *)(v18 + 16) = xmmword_183729730;
          goto LABEL_22;
        }

        v1[3] = (uint64_t)(v7 + 4);
        XMLPlistScanner.skipXMLComment()();
        if (v14) {
          goto LABEL_24;
        }
      }

      else
      {
        if (v10 != 63)
        {
          BOOL v11 = v10 != 47;
          if (v10 == 47) {
            v1[3] = (uint64_t)v7;
          }
          goto LABEL_24;
        }

        XMLPlistScanner.skipXMLProcessingInstruction()();
        if (v12) {
          goto LABEL_24;
        }
      }

      unint64_t v3 = (unsigned __int8 *)v1[3];
    }

    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }

  return (char)v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.skipXMLProcessingInstruction()()
{
  unint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  if (v1 >= v2 - 2)
  {
LABEL_8:
    v0[3] = v1;
    _StringGuts.grow(_:)(57LL);
    v8._unint64_t object = (void *)0x80000001839C9D20LL;
    v8._uint64_t countAndFlagsBits = 0xD000000000000037LL;
    String.append(_:)(v8);
    BufferReader.lineNumber.getter();
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v10 = 0LL;
    *(void *)(v10 + 8) = 0xE000000000000000LL;
    *(void *)(v10 + 16) = 0LL;
    *(void *)(v10 + 24) = 0LL;
    *(_BYTE *)(v10 + 32) = 0;
    swift_willThrow();
  }

  else
  {
    unint64_t v3 = *v0 + v0[1];
    uint64_t v4 = v2 - v1 - 2;
    unint64_t v5 = v3 - v1;
    unint64_t v6 = v1 - *v0;
    unint64_t v7 = (_WORD *)v0[3];
    while (v3 >= (unint64_t)v7)
    {
      if ((v6 & 0x8000000000000000LL) != 0) {
        goto LABEL_11;
      }
      if ((v5 & 0x8000000000000000LL) != 0) {
        goto LABEL_12;
      }
      if (*v7 == 15935)
      {
        v0[3] = v7 + 1;
        return;
      }

      unint64_t v7 = (_WORD *)((char *)v7 + 1);
      v0[3] = v7;
      --v5;
      ++v6;
      if (!--v4) {
        goto LABEL_8;
      }
    }

    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.skipXMLComment()()
{
  unint64_t v1 = v0[3];
  unint64_t v2 = v0[4] - 3LL;
  if (v2 < v1)
  {
LABEL_11:
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    BufferReader.lineNumber.getter();
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000025LL;
    *(void *)(v8 + 8) = 0x80000001839C9CB0LL;
    *(void *)(v8 + 16) = 0LL;
    *(void *)(v8 + 24) = 0LL;
    *(_BYTE *)(v8 + 32) = 5;
    swift_willThrow();
  }

  else
  {
    unint64_t v3 = *v0 + v0[1];
    uint64_t v4 = v3 - v1;
    unint64_t v5 = v1 - *v0;
    while (v3 >= v1)
    {
      if ((v5 & 0x8000000000000000LL) != 0) {
        goto LABEL_14;
      }
      if (v4 < 0) {
        goto LABEL_15;
      }
      if (*(_WORD *)v1 == 11565 && *(_BYTE *)(v1 + 2) == 62)
      {
        v0[3] = v1 + 3;
        return;
      }

      ++v1;
      --v4;
      ++v5;
      if (v2 < v1) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanAnyValue(for:)( Foundation::XMLPlistTag a1)
{
  Swift::Bool v1 = XMLPlistScanner.scanUpToNextValue(for:)(a1);
  if (!v3)
  {
    if (v1)
    {
      XMLPlistScanner.scanXMLElement()();
      if (!v4) {
        char v2 = 1;
      }
    }

    else
    {
      char v2 = 0;
    }
  }

  return v2 & 1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanXMLElement()()
{
  Foundation::XMLPlistTag v0 = XMLPlistScanner.peekXMLElement()()._0;
  if (!v1) {
    __asm { BR              X10 }
  }

void sub_182F99334()
{
  if ((v2 & 0x100) != 0)
  {
    __int128 v12 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v3 - 176) = *(_OWORD *)v1;
    *(_OWORD *)(v3 - 160) = v12;
    *(void *)(v3 - 144) = *(void *)(v1 + 32);
    uint64_t v13 = BufferReader.lineNumber.getter();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v14 = v2;
    *(void *)(v14 + 16) = 0LL;
    *(void *)(v14 + 24) = 0LL;
    *(void *)(v14 + 8) = v13;
    *(_BYTE *)(v14 + 32) = 2;
    swift_willThrow();
  }

  else
  {
    uint64_t v4 = XMLPlistScanner.scanThroughCloseTag(_:)(v2);
    if (!v0)
    {
      uint64_t v6 = v4;
      uint64_t v7 = v5;
      unsigned __int8 v8 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
      uint64_t v9 = *(void *)(v1 + 8);
      uint64_t v10 = v6 - *(void *)v1;
      uint64_t v11 = *(void *)(v1 + 32);
      *(void *)(v3 - 136) = *(void *)v1;
      *(void *)(v3 - 128) = v9;
      *(_OWORD *)(v3 - 120) = *(_OWORD *)(v1 + 16);
      *(void *)(v3 - 104) = v11;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v8, v7 - v6, v10, (void *)(v3 - 136));
    }
  }

  JUMPOUT(0x182F992F8LL);
}

Swift::tuple_Foundation_XMLPlistTag_isEmpty_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.peekXMLElement()()
{
  __int128 v22 = *(_OWORD *)(v0 + 16);
  v1.value = XMLPlistScanner.determineTag()().value;
  if (!v3)
  {
    uint64_t v4 = 4LL;
    switch(v1.value)
    {
      case Foundation_XMLPlistTag_dict:
      case Foundation_XMLPlistTag_data:
      case Foundation_XMLPlistTag_date:
      case Foundation_XMLPlistTag_real:
      case Foundation_XMLPlistTag_true:
        goto LABEL_3;
      case Foundation_XMLPlistTag_key:
        uint64_t v4 = 3LL;
        goto LABEL_3;
      case Foundation_XMLPlistTag_string:
        uint64_t v4 = 6LL;
        goto LABEL_3;
      case Foundation_XMLPlistTag_integer:
        uint64_t v4 = 7LL;
        goto LABEL_3;
      case Foundation_XMLPlistTag_unknownDefault:
        uint64_t v11 = *(unsigned __int8 **)(v0 + 32);
        __int128 v12 = (unsigned __int8 *)*((void *)&v22 + 1);
        while (v12 != v11)
        {
          int v13 = *v12++;
          *(void *)(v0 + 24) = v12;
          if (v13 == 62) {
            goto LABEL_22;
          }
        }

        __int128 v12 = v11;
LABEL_22:
        uint64_t v14 = static String._tryFromUTF8(_:)();
        if (v15) {
          uint64_t v16 = v14;
        }
        else {
          uint64_t v16 = 0x65737261706E753CLL;
        }
        if (v15) {
          uint64_t v17 = v15;
        }
        else {
          uint64_t v17 = (void *)0xED00003E656C6261LL;
        }
        _StringGuts.grow(_:)(37LL);
        swift_bridgeObjectRelease();
        v18._uint64_t countAndFlagsBits = v16;
        v18._unint64_t object = v17;
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 0x656E696C206E6F20LL;
        v19._unint64_t object = (void *)0xE900000000000020LL;
        String.append(_:)(v19);
        BufferReader.lineNumber.getter();
        v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(void *)uint64_t v9 = 0xD000000000000018LL;
        *(void *)(v9 + 8) = 0x80000001839CA070LL;
        *(void *)(v9 + 16) = 0LL;
        *(void *)(v9 + 24) = 0LL;
        char v10 = 5;
        goto LABEL_11;
      default:
        uint64_t v4 = 5LL;
LABEL_3:
        *(void *)(v0 + 24) = *((void *)&v22 + 1) + v4;
        uint64_t v5 = *(void *)(v0 + 32);
        break;
    }

    while (1)
    {
      uint64_t v6 = (unsigned __int8 *)(*((void *)&v22 + 1) + v4);
      if (*((void *)&v22 + 1) + v4 == v5) {
        break;
      }
      int v7 = *v6;
      *(void *)(v0 + 24) = v6 + 1;
      ++v4;
      if (v7 == 62)
      {
        if (*((void *)&v22 + 1) + v4 != v5)
        {
          if (*((void *)&v22 + 1) - *(void *)v0 + v4 - 2 < 0
            || *(void *)v0 + *(void *)(v0 + 8) - *((void *)&v22 + 1) - v4 + 2 < 1)
          {
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
            JUMPOUT(0x182F99900LL);
          }

          goto LABEL_39;
        }

        break;
      }
    }

    uint64_t v8 = BufferReader.lineNumber.getter();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v9 = v8;
    *(void *)(v9 + 8) = 0LL;
    *(void *)(v9 + 16) = 0LL;
    *(void *)(v9 + 24) = 0LL;
    char v10 = 1;
LABEL_11:
    *(_BYTE *)(v9 + 32) = v10;
    v1.value = swift_willThrow();
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanString(asKey:)( Swift::Bool asKey)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v3 + 8);
  *(void *)&__int128 v24 = *(void *)v3;
  *((void *)&v24 + 1) = v5;
  __int128 v25 = *(_OWORD *)(v3 + 16);
  specialized static XMLPlistScanner.parseString(with:generate:)((uint64_t *)&v24, 0, (uint64_t)v21);
  if (!v2)
  {
    uint64_t v6 = v21[0];
    uint64_t v7 = v21[1];
    char v8 = v22;
    int v9 = v23;
    swift_bridgeObjectRelease();
    uint64_t v10 = v24;
    __int128 v11 = v25;
    *(_OWORD *)uint64_t v3 = v24;
    *(_OWORD *)(v3 + 16) = v11;
    *(void *)(v3 + 32) = v26;
    if ((v8 & 1) != 0)
    {
      __int128 v12 = (void *)(v3 + 40);
      XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(&v24);
      int v13 = *(void **)(v3 + 40);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v13[2] + 1LL,  1,  v13);
      }
      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      unint64_t v16 = v15 + 1;
      if (v15 >= v14 >> 1)
      {
        unint64_t v27 = v15 + 1;
        Swift::String v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v15 + 1,  1,  v13);
        unint64_t v16 = v27;
        int v13 = v20;
      }

      _DWORD v13[2] = v16;
      v13[v15 + 4] = 11LL;
      void *v12 = v13;
    }

    else
    {
      if (v9) {
        char v17 = 13;
      }
      else {
        char v17 = 1;
      }
      if (v9) {
        char v18 = 12;
      }
      else {
        char v18 = 0;
      }
      if (asKey) {
        unsigned __int8 v19 = v17;
      }
      else {
        unsigned __int8 v19 = v18;
      }
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v19, v7 - v6, v6 - v10, &v24);
    }
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.checkForCloseTag(_:)( Foundation::XMLPlistTag a1)
{
  uint64_t v4 = (unsigned __int8 *)v1[3];
  unint64_t v3 = v1[4];
  else {
    uint64_t v5 = qword_1837296F0[(char)(a1 - 2)];
  }
  if (v3 < (unint64_t)&v4[v5 + 3])
  {
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_BYTE *)(v6 + 32) = 0;
    goto LABEL_15;
  }

  if (v3 < (unint64_t)v4)
  {
    __break(1u);
    goto LABEL_17;
  }

  if ((uint64_t)&v4[-*v1] < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if ((uint64_t)(v3 - (void)v4) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if ((uint64_t)(*v1 + v1[1] - v3) < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (v3 < (unint64_t)(v4 + 2))
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x182F9A128LL);
  }

  unsigned int v7 = *v4;
  if (v7 == 60)
  {
    unsigned int v7 = v4[1];
    if (v7 == 47) {
      __asm { BR              X13 }
    }
  }

  uint64_t v8 = BufferReader.lineNumber.getter();
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease();
  XMLPlistTag.tagName.getter(a1);
  v9._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(void *)uint64_t v10 = v7;
  *(void *)(v10 + 8) = v8;
  *(void *)(v10 + 16) = 0xD000000000000020LL;
  *(void *)(v10 + 24) = 0x80000001839C9DE0LL;
  *(_BYTE *)(v10 + 32) = 3;
LABEL_15:
  swift_willThrow();
}

Foundation::XMLPlistTag_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.determineTag()()
{
  __int128 v1 = v0[1];
  __int128 v12 = *v0;
  uint64_t v13 = *((void *)v0 + 4);
  if (((*((void *)&v1 + 1) - *(void *)v0) & 0x8000000000000000LL) != 0
    || (unint64_t v2 = v12 + *((void *)&v12 + 1), (uint64_t)(v12 + *((void *)&v12 + 1) - *((void *)&v1 + 1)) < 1))
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    JUMPOUT(0x182F9A52CLL);
  }

  switch(**((_BYTE **)&v1 + 1))
  {
    case 9:
    case 0xA:
    case 0xD:
    case 0x20:
    case 0x3E:
      uint64_t v3 = BufferReader.lineNumber.getter();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v4 = v3;
      *(void *)(v4 + 8) = 0LL;
      *(void *)(v4 + 16) = 0LL;
      *(void *)(v4 + 24) = 0LL;
      *(_BYTE *)(v4 + 32) = 1;
      return (Foundation::XMLPlistTag_optional)swift_willThrow();
    case 0x61:
      if (v13 - *((void *)&v1 + 1) < 5) {
        goto LABEL_66;
      }
      if (v2 < *((void *)&v1 + 1)) {
        goto LABEL_72;
      }
      if (**((_DWORD **)&v1 + 1) != 1634890337 || *(_BYTE *)(*((void *)&v1 + 1) + 4LL) != 121) {
        goto LABEL_66;
      }
      result.value = Foundation_XMLPlistTag_array;
      break;
    case 0x64:
      if (v13 - *((void *)&v1 + 1) < 4) {
        goto LABEL_66;
      }
      if (v2 < *((void *)&v1 + 1)) {
        goto LABEL_73;
      }
      switch(**((_DWORD **)&v1 + 1))
      {
        case 0x74636964:
          result.value = Foundation_XMLPlistTag_dict;
          break;
        case 0x61746164:
          result.value = Foundation_XMLPlistTag_data;
          break;
        case 0x65746164:
          result.value = Foundation_XMLPlistTag_date;
          break;
        default:
LABEL_66:
          result.value = Foundation_XMLPlistTag_unknownDefault;
          break;
      }

      break;
    case 0x66:
      if (v13 - *((void *)&v1 + 1) < 5) {
        goto LABEL_66;
      }
      if (v2 < *((void *)&v1 + 1)) {
        goto LABEL_74;
      }
      if (**((_DWORD **)&v1 + 1) != 1936482662 || *(_BYTE *)(*((void *)&v1 + 1) + 4LL) != 101) {
        goto LABEL_66;
      }
      result.value = Foundation_XMLPlistTag_false;
      break;
    case 0x69:
      if (v13 - *((void *)&v1 + 1) < 7) {
        goto LABEL_66;
      }
      if (v2 < *((void *)&v1 + 1)) {
        goto LABEL_75;
      }
      if (**((_DWORD **)&v1 + 1) != 1702129257 || *(_DWORD *)(*((void *)&v1 + 1) + 3LL) != 1919248229) {
        goto LABEL_66;
      }
      result.value = Foundation_XMLPlistTag_integer;
      break;
    case 0x6B:
      if (v13 - *((void *)&v1 + 1) < 3) {
        goto LABEL_66;
      }
      if (v2 < *((void *)&v1 + 1)) {
        goto LABEL_76;
      }
      if (**((_WORD **)&v1 + 1) != 25963 || *(_BYTE *)(*((void *)&v1 + 1) + 2LL) != 121) {
        goto LABEL_66;
      }
      result.value = Foundation_XMLPlistTag_key;
      break;
    case 0x70:
      if (v13 - *((void *)&v1 + 1) < 5) {
        goto LABEL_66;
      }
      if (v2 < *((void *)&v1 + 1)) {
        goto LABEL_77;
      }
      if (**((_DWORD **)&v1 + 1) != 1936288880 || *(_BYTE *)(*((void *)&v1 + 1) + 4LL) != 116) {
        goto LABEL_66;
      }
      result.value = Foundation_XMLPlistTag_plist;
      break;
    case 0x72:
      if (v13 - *((void *)&v1 + 1) < 4) {
        goto LABEL_66;
      }
      if (v2 < *((void *)&v1 + 1)) {
        goto LABEL_78;
      }
      if (**((_DWORD **)&v1 + 1) != 1818322290) {
        goto LABEL_66;
      }
      result.value = Foundation_XMLPlistTag_real;
      break;
    case 0x73:
      if (v13 - *((void *)&v1 + 1) < 6) {
        goto LABEL_66;
      }
      if (v2 < *((void *)&v1 + 1)) {
        goto LABEL_79;
      }
      if (**((_DWORD **)&v1 + 1) != 1769108595 || *(_WORD *)(*((void *)&v1 + 1) + 4LL) != 26478) {
        goto LABEL_66;
      }
      result.value = Foundation_XMLPlistTag_string;
      break;
    case 0x74:
      if (v13 - *((void *)&v1 + 1) < 4) {
        goto LABEL_66;
      }
      if (v2 < *((void *)&v1 + 1)) {
        goto LABEL_80;
      }
      if (**((_DWORD **)&v1 + 1) != 1702195828) {
        goto LABEL_66;
      }
      result.value = Foundation_XMLPlistTag_true;
      break;
    default:
      goto LABEL_66;
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanPlist()()
{
  Swift::Bool v0 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (!v1)
  {
    if (v0)
    {
      Foundation::XMLPlistTag v2 = XMLPlistScanner.peekXMLElement()()._0;
      if (!v3) {
        __asm { BR              X10 }
      }
    }

    else
    {
      uint64_t v4 = BufferReader.lineNumber.getter();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v5 = 0LL;
      *(void *)(v5 + 8) = v4;
      *(void *)(v5 + 16) = 0LL;
      *(void *)(v5 + 24) = 0LL;
      *(_BYTE *)(v5 + 32) = 2;
      swift_willThrow();
    }
  }

void sub_182F9A81C()
{
  if ((v1 & 0x100) != 0)
  {
    __int128 v5 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v2 + 368) = *(_OWORD *)v0;
    *(_OWORD *)(v2 + 384) = v5;
    STACK[0x230] = *(void *)(v0 + 32);
    else {
      unsigned __int8 v6 = 12;
    }
    XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v6, 0LL, 0LL, &STACK[0x210]);
  }

  else
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (v3) {
      goto LABEL_17;
    }
    XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
    if (v4) {
      goto LABEL_17;
    }
  }

  Swift::Bool v7 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (!v8)
  {
    if (!v7) {
      JUMPOUT(0x182F9AA98LL);
    }
    Foundation::XMLPlistTag v9 = XMLPlistScanner.peekXMLElement()()._0;
    if (!v10) {
      __asm { BR              X10 }
    }
  }

void sub_182F9A854(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if ((v10 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v10), !v13))
  {
    unsigned __int8 v14 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v10);
    __int128 v15 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)(v11 + 496) = *(_OWORD *)v9;
    *(_OWORD *)(v11 + 512) = v15;
    *(void *)(v12 - 128) = *(void *)(v9 + 32);
    XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)((void *)(v12 - 160));
    unint64_t v16 = *(void **)(v9 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    unint64_t v19 = v18 + 1;
    if (v18 >= v17 >> 1)
    {
      __int128 v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v16);
      unint64_t v19 = v18 + 1;
      unint64_t v16 = v24;
    }

    _OWORD v16[2] = v19;
    v16[v18 + 4] = v14;
    *(void *)(v9 + 40) = v16;
    Swift::Bool v20 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
    if (!v21)
    {
      if (!v20) {
        JUMPOUT(0x182F9AA98LL);
      }
      Foundation::XMLPlistTag v22 = XMLPlistScanner.peekXMLElement()()._0;
      if (!v23) {
        __asm { BR              X10 }
      }
    }
  }

  JUMPOUT(0x182F9A7FCLL);
}

void sub_182F9A918()
{
  if ((v0 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v1) {
      JUMPOUT(0x182F9A9E8LL);
    }
    JUMPOUT(0x182F9A7FCLL);
  }

  JUMPOUT(0x182F9A7B8LL);
}

void sub_182F9A92C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((v68 & 0x100) != 0)
  {
    __int128 v71 = *(_OWORD *)(v67 + 16);
    *(_OWORD *)(v69 + 272) = *(_OWORD *)v67;
    *(_OWORD *)(v69 + 2outlined init with copy of Any(v0 + 128, v0 + 88) = v71;
    a67 = *(void *)(v67 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &a63);
  }

  else
  {
    XMLPlistScanner.scanArray()();
    if (v70) {
      JUMPOUT(0x182F9A7FCLL);
    }
  }

  JUMPOUT(0x182F9A9E8LL);
}

void sub_182F9A940()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    JUMPOUT(0x182F9A950LL);
  }

  __int128 v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 320) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 336) = v3;
  STACK[0x200] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9A9E4LL);
}

void sub_182F9AA3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,__int128 a54,uint64_t a55)
{
  if ((v57 & 0x100) == 0)
  {
    uint64_t v60 = XMLPlistScanner.scanThroughCloseTag(_:)(v57);
    if (!v56)
    {
      uint64_t v62 = v60;
      uint64_t v63 = v61;
      unsigned __int8 v64 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v57);
      uint64_t v65 = v55[1];
      uint64_t v66 = v62 - *v55;
      uint64_t v67 = v55[4];
      a52 = *v55;
      a53 = v65;
      a54 = *((_OWORD *)v55 + 1);
      a55 = v67;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v64, v63 - v62, v66, &a52);
      v55[3] = v59;
      _StringGuts.grow(_:)(77LL);
      v69._uint64_t countAndFlagsBits = 0xD000000000000027LL;
      v69._unint64_t object = (void *)0x80000001839C9D60LL;
      String.append(_:)(v69);
      BufferReader.lineNumber.getter();
      v70._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      v71._unint64_t object = (void *)0x80000001839C9D90LL;
      v71._uint64_t countAndFlagsBits = 0xD000000000000024LL;
      String.append(_:)(v71);
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *uint64_t v72 = 0LL;
      v72[1] = 0xE000000000000000LL;
      v72[2] = 0LL;
      v72[3] = 0LL;
      JUMPOUT(0x182F9A7F0LL);
    }

    JUMPOUT(0x182F9AAA8LL);
  }

  __int128 v68 = *((_OWORD *)v55 + 1);
  *(_OWORD *)(v58 + 144) = *(_OWORD *)v55;
  *(_OWORD *)(v58 + 160) = v68;
  JUMPOUT(0x182F9A8E4LL);
}

void sub_182F9AAB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45)
{
  if ((v46 & 0x100) != 0)
  {
    __int128 v51 = *(_OWORD *)(v45 + 16);
    *(_OWORD *)(v47 + 96) = *(_OWORD *)v45;
    *(_OWORD *)(v47 + 112) = v51;
    a45 = *(void *)(v45 + 32);
    else {
      unsigned __int8 v52 = 12;
    }
    XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v52, 0LL, 0LL, &a41);
  }

  else
  {
    XMLPlistScanner.scanString(asKey:)(v46 == 3);
    if (v49 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v46), v50)) {
      JUMPOUT(0x182F9A7FCLL);
    }
  }

  *(void *)(v45 + 24) = v48;
  _StringGuts.grow(_:)(77LL);
  v53._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  v53._unint64_t object = (void *)0x80000001839C9D60LL;
  String.append(_:)(v53);
  BufferReader.lineNumber.getter();
  v54._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._unint64_t object = (void *)0x80000001839C9D90LL;
  v55._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  String.append(_:)(v55);
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *uint64_t v56 = 0LL;
  v56[1] = 0xE000000000000000LL;
  v56[2] = 0LL;
  v56[3] = 0LL;
  JUMPOUT(0x182F9A7F0LL);
}

void sub_182F9AAE8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if ((v62 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v62), !v65))
  {
    unsigned __int8 v66 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v62);
    __int128 v67 = *(_OWORD *)(v61 + 16);
    *(_OWORD *)(v63 + 224) = *(_OWORD *)v61;
    *(_OWORD *)(v63 + 240) = v67;
    a61 = *(void *)(v61 + 32);
    XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(&a57);
    __int128 v68 = *(void **)(v61 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int128 v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v68[2] + 1LL,  1,  v68);
    }
    unint64_t v70 = v68[2];
    unint64_t v69 = v68[3];
    if (v70 >= v69 >> 1) {
      __int128 v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v69 > 1),  v70 + 1,  1,  v68);
    }
    v68[2] = v70 + 1;
    v68[v70 + 4] = v66;
    *(void *)(v61 + 40) = v68;
    *(void *)(v61 + 24) = v64;
    _StringGuts.grow(_:)(77LL);
    v71._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v71._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v71);
    BufferReader.lineNumber.getter();
    v72._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    v73._unint64_t object = (void *)0x80000001839C9D90LL;
    v73._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    String.append(_:)(v73);
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *uint64_t v74 = 0LL;
    v74[1] = 0xE000000000000000LL;
    v74[2] = 0LL;
    v74[3] = 0LL;
    JUMPOUT(0x182F9A7F0LL);
  }

  JUMPOUT(0x182F9AAA8LL);
}

void sub_182F9AB78()
{
  if ((v0 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v1) {
      JUMPOUT(0x182F9AC48LL);
    }
    JUMPOUT(0x182F9A7FCLL);
  }

  JUMPOUT(0x182F9A7B8LL);
}

void sub_182F9AB8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  if ((v34 & 0x100) != 0)
  {
    __int128 v37 = *(_OWORD *)(v33 + 16);
    *size_t v35 = *(_OWORD *)v33;
    v35[1] = v37;
    a33 = *(void *)(v33 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &a29);
  }

  else
  {
    XMLPlistScanner.scanArray()();
    if (v36) {
      JUMPOUT(0x182F9A7FCLL);
    }
  }

  JUMPOUT(0x182F9AC48LL);
}

void sub_182F9ABA0()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    JUMPOUT(0x182F9ABB0LL);
  }

  __int128 v3 = v0[1];
  *(_OWORD *)(v2 + 48) = *v0;
  *(_OWORD *)(v2 + 64) = v3;
  JUMPOUT(0x182F9AC44LL);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanArray()()
{
  __int16 v1 = v0;
  __int128 v2 = *v0;
  __int128 v3 = v0[1];
  uint64_t v33 = *((void *)v0 + 4);
  v32[1] = v3;
  v32[0] = v2;
  uint64_t v4 = (void *)v0 + 5;
  int64_t v34 = XMLPlistScanner.PartialMapData.recordStartCollection(tagType:with:)(8u, v32);
  if (v1[4] != v1[3])
  {
    Swift::Bool v5 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_array);
    if (v6)
    {
LABEL_13:
      __int128 v18 = v0[1];
      v30[0] = *v0;
      v30[1] = v18;
      uint64_t v31 = *((void *)v0 + 4);
      uint64_t v11 = v30;
      goto LABEL_14;
    }

    if (v5)
    {
      Foundation::XMLPlistTag v7 = XMLPlistScanner.peekXMLElement()()._0;
      if (!v8) {
        __asm { BR              X9 }
      }

      goto LABEL_13;
    }
  }

  XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_array);
  if (v9)
  {
    __int128 v10 = v0[1];
    v28[0] = *v0;
    v28[1] = v10;
    uint64_t v29 = *((void *)v0 + 4);
    uint64_t v11 = v28;
LABEL_14:
    XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v11);
    unint64_t v19 = (void *)*((void *)v0 + 5);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v1[5] = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
      *uint64_t v4 = v19;
    }

    uint64_t v21 = v19[2];
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
    uint64_t v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, 10LL);
    destructiveProjectEnumData for PredicateCodableError(v22, v23);
    uint64_t v13 = (void *)*v4;
    uint64_t v24 = specialized Array._getCount()(*v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
    }
    __int128 v25 = &v13[v34];
    v25[4] = v24;
    v25[5] = 0LL;
    goto LABEL_19;
  }

  __int128 v12 = v0[1];
  v26[0] = *v0;
  v26[1] = v12;
  uint64_t v27 = *((void *)v0 + 4);
  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v26);
  uint64_t v13 = (void *)*((void *)v0 + 5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v13[2] + 1LL,  1,  v13);
  }
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  unint64_t v16 = v15 + 1;
  if (v15 >= v14 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v15 + 1,  1,  v13);
  }
  _DWORD v13[2] = v16;
  v13[v15 + 4] = 10LL;
  unint64_t v17 = &v13[v34 + 4];
  *unint64_t v17 = v16;
  v17[1] = 0LL;
LABEL_19:
  *uint64_t v4 = v13;
}

void sub_182F9BD30()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (!v3)
    {
      XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
      if (!v4)
      {
        *(void *)(v0 + 24) = v2;
        _StringGuts.grow(_:)(77LL);
        v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
        v6._unint64_t object = (void *)0x80000001839C9D60LL;
        String.append(_:)(v6);
        JUMPOUT(0x182F9BB98LL);
      }

      JUMPOUT(0x182F9BA64LL);
    }

    JUMPOUT(0x182F9B664LL);
  }

  __int128 v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&STACK[0x210] = *(_OWORD *)v0;
  *(_OWORD *)&STACK[0x220] = v5;
  STACK[0x230] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9BE60LL);
}

void sub_182F9BD6C()
{
  if ((v1 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), !v3))
  {
    unsigned __int8 v4 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
    __int128 v5 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)&STACK[0x290] = *(_OWORD *)v0;
    *(_OWORD *)&STACK[0x2A0] = v5;
    STACK[0x2B0] = *(void *)(v0 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v4, &STACK[0x290]);
    *(void *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77LL);
    v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v6._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v6);
    JUMPOUT(0x182F9BB98LL);
  }

  JUMPOUT(0x182F9BA64LL);
}

void sub_182F9BDEC()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v3)
    {
      *(void *)(v0 + 24) = v2;
      _StringGuts.grow(_:)(77LL);
      v4._uint64_t countAndFlagsBits = 0xD000000000000027LL;
      v4._unint64_t object = (void *)0x80000001839C9D60LL;
      String.append(_:)(v4);
      JUMPOUT(0x182F9BB98LL);
    }

    JUMPOUT(0x182F9BA64LL);
  }

  JUMPOUT(0x182F9B620LL);
}

void sub_182F9BE04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,__int128 a63)
{
  if ((v66 & 0x100) != 0)
  {
    __int128 v69 = v65[1];
    a63 = *v65;
    a64 = v69;
    a65 = *((void *)v65 + 4);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &a63);
  }

  else
  {
    XMLPlistScanner.scanArray()();
    if (v68) {
      JUMPOUT(0x182F9BA64LL);
    }
  }

  *((void *)v65 + 3) = v67;
  _StringGuts.grow(_:)(77LL);
  v70._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  v70._unint64_t object = (void *)0x80000001839C9D60LL;
  String.append(_:)(v70);
  JUMPOUT(0x182F9BB98LL);
}

void sub_182F9BE1C()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (!v3)
    {
      *(void *)(v0 + 24) = v2;
      _StringGuts.grow(_:)(77LL);
      v4._uint64_t countAndFlagsBits = 0xD000000000000027LL;
      v4._unint64_t object = (void *)0x80000001839C9D60LL;
      String.append(_:)(v4);
      JUMPOUT(0x182F9BB98LL);
    }

    JUMPOUT(0x182F9BA64LL);
  }

  STACK[0x200] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9BEC4LL);
}

void sub_182F9BF34()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (!v2)
    {
      XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
      if (!v3)
      {
        Swift::Bool v5 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
        if (!v6)
        {
          if (!v5) {
            JUMPOUT(0x182F9C16CLL);
          }
          Foundation::XMLPlistTag v7 = XMLPlistScanner.peekXMLElement()()._0;
          if (!v8) {
            __asm { BR              X10 }
          }
        }
      }
    }

    JUMPOUT(0x182F9B664LL);
  }

  __int128 v4 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&STACK[0x500] = *(_OWORD *)v0;
  *(_OWORD *)&STACK[0x510] = v4;
  STACK[0x520] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9C04CLL);
}

void sub_182F9BF6C()
{
  if ((v1 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), !v2))
  {
    unsigned __int8 v3 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
    __int128 v4 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)&STACK[0x580] = *(_OWORD *)v0;
    *(_OWORD *)&STACK[0x590] = v4;
    STACK[0x5A0] = *(void *)(v0 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v3, &STACK[0x580]);
    Swift::Bool v5 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
    if (!v6)
    {
      if (!v5) {
        JUMPOUT(0x182F9C16CLL);
      }
      Foundation::XMLPlistTag v7 = XMLPlistScanner.peekXMLElement()()._0;
      if (!v8) {
        __asm { BR              X10 }
      }
    }
  }

  JUMPOUT(0x182F9B664LL);
}

void sub_182F9BFD8()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v2) {
      JUMPOUT(0x182F9C0C0LL);
    }
    JUMPOUT(0x182F9B664LL);
  }

  __int128 v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&STACK[0x2F0] = *(_OWORD *)v0;
  *(_OWORD *)&STACK[0x300] = v3;
  STACK[0x310] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9B620LL);
}

void sub_182F9BFEC()
{
  if ((v1 & 0x100) != 0)
  {
    __int128 v3 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)&STACK[0x4A0] = *(_OWORD *)v0;
    *(_OWORD *)&STACK[0x4B0] = v3;
    STACK[0x4C0] = *(void *)(v0 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x4A0]);
  }

  else
  {
    XMLPlistScanner.scanArray()();
    if (v2) {
      JUMPOUT(0x182F9B664LL);
    }
  }

  JUMPOUT(0x182F9C0C0LL);
}

void sub_182F9C000()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    JUMPOUT(0x182F9C010LL);
  }

  __int128 v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&STACK[0x4D0] = *(_OWORD *)v0;
  *(_OWORD *)&STACK[0x4E0] = v2;
  STACK[0x4F0] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9C0B8LL);
}

void sub_182F9C114()
{
  if ((v3 & 0x100) == 0)
  {
    uint64_t v4 = XMLPlistScanner.scanThroughCloseTag(_:)(v3);
    if (!v2)
    {
      uint64_t v6 = v4;
      uint64_t v7 = v5;
      unsigned __int8 v8 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v3);
      unint64_t v9 = v1[1];
      uint64_t v10 = v6 - *v1;
      unint64_t v11 = v1[4];
      STACK[0x428] = *v1;
      STACK[0x430] = v9;
      *(_OWORD *)&STACK[0x438] = *((_OWORD *)v1 + 1);
      STACK[0x448] = v11;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v8, v7 - v6, v10, &STACK[0x428]);
      v1[3] = v0;
      _StringGuts.grow(_:)(77LL);
      v13._uint64_t countAndFlagsBits = 0xD000000000000027LL;
      v13._unint64_t object = (void *)0x80000001839C9D60LL;
      String.append(_:)(v13);
      unint64_t v14 = v1[2];
      unint64_t v15 = v1[4];
      *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
      STACK[0x358] = v14;
      STACK[0x360] = v0;
      STACK[0x368] = v15;
      JUMPOUT(0x182F9BB98LL);
    }

    JUMPOUT(0x182F9BA64LL);
  }

  __int128 v12 = *((_OWORD *)v1 + 1);
  *(_OWORD *)&STACK[0x400] = *(_OWORD *)v1;
  *(_OWORD *)&STACK[0x410] = v12;
  STACK[0x420] = v1[4];
  JUMPOUT(0x182F9B5B4LL);
}

void sub_182F9C174()
{
  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v2 == 3);
    if (!v3)
    {
      XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v2);
      if (!v4)
      {
        *(void *)(v1 + 24) = v0;
        _StringGuts.grow(_:)(77LL);
        v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
        v6._unint64_t object = (void *)0x80000001839C9D60LL;
        String.append(_:)(v6);
        unint64_t v7 = *(void *)(v1 + 16);
        unint64_t v8 = *(void *)(v1 + 32);
        *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
        STACK[0x358] = v7;
        STACK[0x360] = v0;
        STACK[0x368] = v8;
        JUMPOUT(0x182F9BB98LL);
      }

      JUMPOUT(0x182F9BA64LL);
    }

    JUMPOUT(0x182F9B664LL);
  }

  __int128 v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)&STACK[0x3D0] = *(_OWORD *)v1;
  *(_OWORD *)&STACK[0x3E0] = v5;
  STACK[0x3F0] = *(void *)(v1 + 32);
  JUMPOUT(0x182F9C284LL);
}

void sub_182F9C1B0()
{
  if ((v2 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v2), !v3))
  {
    unsigned __int8 v4 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
    __int128 v5 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)&STACK[0x450] = *(_OWORD *)v1;
    *(_OWORD *)&STACK[0x460] = v5;
    STACK[0x470] = *(void *)(v1 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v4, &STACK[0x450]);
    *(void *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77LL);
    v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v6._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v6);
    unint64_t v7 = *(void *)(v1 + 16);
    unint64_t v8 = *(void *)(v1 + 32);
    *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
    STACK[0x358] = v7;
    STACK[0x360] = v0;
    STACK[0x368] = v8;
    JUMPOUT(0x182F9BB98LL);
  }

  JUMPOUT(0x182F9BA64LL);
}

void sub_182F9C210()
{
  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v3)
    {
      *(void *)(v1 + 24) = v0;
      _StringGuts.grow(_:)(77LL);
      v5._uint64_t countAndFlagsBits = 0xD000000000000027LL;
      v5._unint64_t object = (void *)0x80000001839C9D60LL;
      String.append(_:)(v5);
      unint64_t v6 = *(void *)(v1 + 16);
      unint64_t v7 = *(void *)(v1 + 32);
      *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
      STACK[0x358] = v6;
      STACK[0x360] = v0;
      STACK[0x368] = v7;
      JUMPOUT(0x182F9BB98LL);
    }

    JUMPOUT(0x182F9BA64LL);
  }

  __int128 v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)&STACK[0x320] = *(_OWORD *)v1;
  *(_OWORD *)&STACK[0x330] = v4;
  STACK[0x340] = *(void *)(v1 + 32);
  JUMPOUT(0x182F9B620LL);
}

void sub_182F9C228()
{
  if ((v2 & 0x100) != 0)
  {
    __int128 v4 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)&STACK[0x370] = *(_OWORD *)v1;
    *(_OWORD *)&STACK[0x380] = v4;
    STACK[0x390] = *(void *)(v1 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x370]);
  }

  else
  {
    XMLPlistScanner.scanArray()();
    if (v3) {
      JUMPOUT(0x182F9BA64LL);
    }
  }

  *(void *)(v1 + 24) = v0;
  _StringGuts.grow(_:)(77LL);
  v5._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  v5._unint64_t object = (void *)0x80000001839C9D60LL;
  String.append(_:)(v5);
  unint64_t v6 = *(void *)(v1 + 16);
  unint64_t v7 = *(void *)(v1 + 32);
  *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
  STACK[0x358] = v6;
  STACK[0x360] = v0;
  STACK[0x368] = v7;
  JUMPOUT(0x182F9BB98LL);
}

void sub_182F9C240()
{
  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (!v3)
    {
      *(void *)(v1 + 24) = v0;
      _StringGuts.grow(_:)(77LL);
      v5._uint64_t countAndFlagsBits = 0xD000000000000027LL;
      v5._unint64_t object = (void *)0x80000001839C9D60LL;
      String.append(_:)(v5);
      unint64_t v6 = *(void *)(v1 + 16);
      unint64_t v7 = *(void *)(v1 + 32);
      *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
      STACK[0x358] = v6;
      STACK[0x360] = v0;
      STACK[0x368] = v7;
      JUMPOUT(0x182F9BB98LL);
    }

    JUMPOUT(0x182F9BA64LL);
  }

  __int128 v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)&STACK[0x3A0] = *(_OWORD *)v1;
  *(_OWORD *)&STACK[0x3B0] = v4;
  STACK[0x3C0] = *(void *)(v1 + 32);
  JUMPOUT(0x182F9C2E8LL);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanDict()()
{
  uint64_t v1 = v0;
  __int128 v2 = *v0;
  __int128 v3 = v0[1];
  uint64_t v45 = *((void *)v0 + 4);
  v44[1] = v3;
  v44[0] = v2;
  __int128 v4 = (void *)v0 + 5;
  int64_t v46 = XMLPlistScanner.PartialMapData.recordStartCollection(tagType:with:)(9u, v44);
  if (v1[4] == v1[3]) {
    goto LABEL_12;
  }
  Swift::Bool v5 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_dict);
  if (v6)
  {
LABEL_15:
    __int128 v19 = v0[1];
    v42[0] = *v0;
    v42[1] = v19;
    uint64_t v43 = *((void *)v0 + 4);
    unint64_t v17 = v42;
    goto LABEL_19;
  }

  if (!v5)
  {
LABEL_12:
    XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_dict);
    __int128 v16 = v0[1];
    if (v15)
    {
      v33[0] = *v0;
      v33[1] = v16;
      uint64_t v34 = *((void *)v0 + 4);
      unint64_t v17 = v33;
    }

    else
    {
      v31[0] = *v0;
      v31[1] = v16;
      uint64_t v32 = *((void *)v0 + 4);
      unint64_t v17 = v31;
    }

    goto LABEL_19;
  }

  Foundation::XMLPlistTag v7 = XMLPlistScanner.peekXMLElement()()._0;
  if (v8) {
    goto LABEL_15;
  }
  if (v7 != Foundation_XMLPlistTag_key)
  {
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v18 = 0xD000000000000028LL;
    *(void *)(v18 + 8) = 0x80000001839C9E10LL;
    *(void *)(v18 + 16) = 0LL;
    *(void *)(v18 + 24) = 0LL;
    *(_BYTE *)(v18 + 32) = 5;
    swift_willThrow();
    goto LABEL_15;
  }

  XMLPlistScanner.scanString(asKey:)(1);
  if (v9) {
    goto LABEL_15;
  }
  XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_key);
  if (v10) {
    goto LABEL_15;
  }
  Swift::Bool v11 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_dict);
  if (!v12)
  {
    if (!v11)
    {
      _StringGuts.grow(_:)(46LL);
      swift_bridgeObjectRelease();
      __int128 v20 = v0[1];
      __int128 v39 = *v0;
      __int128 v40 = v20;
      uint64_t v41 = *((void *)v0 + 4);
      BufferReader.lineNumber.getter();
      v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v22 = 0xD00000000000002CLL;
      *(void *)(v22 + 8) = 0x80000001839C9E40LL;
      *(void *)(v22 + 16) = 0LL;
      *(void *)(v22 + 24) = 0LL;
      *(_BYTE *)(v22 + 32) = 5;
      swift_willThrow();
      __int128 v23 = v0[1];
      v37[0] = *v0;
      v37[1] = v23;
      uint64_t v38 = *((void *)v0 + 4);
      unint64_t v17 = v37;
      goto LABEL_19;
    }

    Foundation::XMLPlistTag v13 = XMLPlistScanner.peekXMLElement()()._0;
    if (!v14) {
      __asm { BR              X9 }
    }
  }

  __int128 v24 = v0[1];
  v35[0] = *v0;
  v35[1] = v24;
  uint64_t v36 = *((void *)v0 + 4);
  unint64_t v17 = v35;
LABEL_19:
  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v17);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v25 = *(void *)(*((void *)v0 + 5) + 16LL);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
  uint64_t v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, 10LL);
  destructiveProjectEnumData for PredicateCodableError(v26, v27);
  uint64_t v28 = (void *)*((void *)v0 + 5);
  uint64_t v29 = specialized Array._getCount()(v1[5]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v28);
  }
  uint64_t v30 = &v28[v46];
  v30[4] = v29;
  v30[5] = 0LL;
  *__int128 v4 = v28;
}

void sub_182F9CFE4()
{
  if ((v2 & 0x100) == 0)
  {
    uint64_t v5 = XMLPlistScanner.scanThroughCloseTag(_:)(v2);
    if (!v1)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      unsigned __int8 v9 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
      unint64_t v10 = *(void *)(v0 + 8);
      uint64_t v11 = v7 - *(void *)v0;
      unint64_t v12 = *(void *)(v0 + 32);
      STACK[0x248] = *(void *)v0;
      STACK[0x250] = v10;
      *(_OWORD *)&STACK[0x258] = *(_OWORD *)(v0 + 16);
      STACK[0x268] = v12;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v9, v8 - v7, v11, &STACK[0x248]);
      *(void *)(v0 + 24) = v3;
      _StringGuts.grow(_:)(77LL);
      v14._uint64_t countAndFlagsBits = 0xD000000000000027LL;
      v14._unint64_t object = (void *)0x80000001839C9D60LL;
      String.append(_:)(v14);
      JUMPOUT(0x182F9D300LL);
    }

    JUMPOUT(0x182F9CE2CLL);
  }

  __int128 v13 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v4 + 416) = *(_OWORD *)v0;
  *(_OWORD *)(v4 + 432) = v13;
  STACK[0x240] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9CD84LL);
}

void sub_182F9D03C()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (v4 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), v5)) {
      JUMPOUT(0x182F9CE2CLL);
    }
    *(void *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77LL);
    v7._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v7._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v7);
    BufferReader.lineNumber.getter();
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._unint64_t object = (void *)0x80000001839C9D90LL;
    v9._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    String.append(_:)(v9);
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    void *v10 = 0LL;
    v10[1] = 0xE000000000000000LL;
    _OWORD v10[2] = 0LL;
    void v10[3] = 0LL;
    JUMPOUT(0x182F9CE20LL);
  }

  __int128 v6 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 1440) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 1456) = v6;
  STACK[0x640] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9D214LL);
}

void sub_182F9D078()
{
  if ((v1 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), !v4))
  {
    unsigned __int8 v5 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
    __int128 v6 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 + 1568) = *(_OWORD *)v0;
    *(_OWORD *)(v3 + 1584) = v6;
    STACK[0x6C0] = *(void *)(v0 + 32);
    XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(&STACK[0x6A0]);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v7 = *(void *)(*(void *)(v0 + 40) + 16LL);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
    destructiveProjectEnumData for PredicateCodableError(v8, v9);
    *(void *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77LL);
    v10._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v10._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v10);
    BufferReader.lineNumber.getter();
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._unint64_t object = (void *)0x80000001839C9D90LL;
    v12._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    String.append(_:)(v12);
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *__int128 v13 = 0LL;
    v13[1] = 0xE000000000000000LL;
    _DWORD v13[2] = 0LL;
    v13[3] = 0LL;
    JUMPOUT(0x182F9CE20LL);
  }

  JUMPOUT(0x182F9CE2CLL);
}

uint64_t sub_182F9D104()
{
  if ((v1 & 0x100) != 0)
  {
    __int128 v8 = *(_OWORD *)(v0 + 16);
    v2[34] = *(_OWORD *)v0;
    v2[35] = v8;
    STACK[0x2C0] = *(void *)(v0 + 32);
    goto LABEL_10;
  }

  Swift::Bool v3 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (v4) {
    goto LABEL_11;
  }
  if (!v3)
  {
    __int128 v9 = *(_OWORD *)(v0 + 16);
    v2[81] = *(_OWORD *)v0;
    v2[82] = v9;
    STACK[0x5B0] = *(void *)(v0 + 32);
LABEL_10:
    JUMPOUT(0x182F9CDE8LL);
  }

  Foundation::XMLPlistTag v5 = XMLPlistScanner.peekXMLElement()()._0;
  if (v6) {
LABEL_11:
  }
    JUMPOUT(0x182F9CE2CLL);
  return ((uint64_t (*)(void))((char *)&loc_182F9D148 + *((int *)qword_182F9DA30 + v5)))();
}

uint64_t sub_182F9D158()
{
  if ((v2 & 0x100) != 0)
  {
    __int128 v12 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 + 1168) = *(_OWORD *)v0;
    *(_OWORD *)(v3 + 1184) = v12;
    STACK[0x530] = *(void *)(v0 + 32);
    JUMPOUT(0x182F9CD84LL);
  }

  uint64_t v4 = XMLPlistScanner.scanThroughCloseTag(_:)(v2);
  if (v1) {
    goto LABEL_15;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  unsigned __int8 v8 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
  unint64_t v9 = *(void *)(v0 + 8);
  uint64_t v10 = v6 - *(void *)v0;
  unint64_t v11 = *(void *)(v0 + 32);
  STACK[0x538] = *(void *)v0;
  STACK[0x540] = v9;
  *(_OWORD *)&STACK[0x548] = *(_OWORD *)(v0 + 16);
  STACK[0x558] = v11;
  XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v8, v7 - v6, v10, &STACK[0x538]);
  Swift::Bool v13 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (v14) {
    goto LABEL_15;
  }
  if (!v13) {
    JUMPOUT(0x182F9D064LL);
  }
  Foundation::XMLPlistTag v15 = XMLPlistScanner.peekXMLElement()()._0;
  if (v16) {
LABEL_15:
  }
    JUMPOUT(0x182F9CE2CLL);
  return ((uint64_t (*)(void))((char *)&loc_182F9D740 + dword_182F9DA5C[v15]))();
}

void sub_182F9D1B4()
{
  if ((v1 & 0x100) != 0)
  {
    __int128 v5 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 + 1344) = *(_OWORD *)v0;
    *(_OWORD *)(v3 + 1360) = v5;
    STACK[0x5E0] = *(void *)(v0 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x5C0]);
  }

  else
  {
    XMLPlistScanner.scanArray()();
    if (v4) {
      JUMPOUT(0x182F9CE2CLL);
    }
  }

  *(void *)(v0 + 24) = v2;
  _StringGuts.grow(_:)(77LL);
  v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  v6._unint64_t object = (void *)0x80000001839C9D60LL;
  String.append(_:)(v6);
  BufferReader.lineNumber.getter();
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._unint64_t object = (void *)0x80000001839C9D90LL;
  v8._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  String.append(_:)(v8);
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  void *v9 = 0LL;
  v9[1] = 0xE000000000000000LL;
  v9[2] = 0LL;
  uint64_t v9[3] = 0LL;
  JUMPOUT(0x182F9CE20LL);
}

void sub_182F9D1CC()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (v4) {
      JUMPOUT(0x182F9D1E0LL);
    }
    *(void *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77LL);
    v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v6._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v6);
    BufferReader.lineNumber.getter();
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._unint64_t object = (void *)0x80000001839C9D90LL;
    v8._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    String.append(_:)(v8);
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    void *v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    uint64_t v9[3] = 0LL;
    JUMPOUT(0x182F9CE20LL);
  }

  __int128 v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 1392) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 1408) = v5;
  STACK[0x610] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9D290LL);
}

void sub_182F9D3A0()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (v4 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), v5)) {
      JUMPOUT(0x182F9CE2CLL);
    }
    *(void *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77LL);
    v7._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v7._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v7);
    JUMPOUT(0x182F9D300LL);
  }

  __int128 v6 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 368) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 384) = v6;
  STACK[0x210] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9D4C0LL);
}

void sub_182F9D3DC()
{
  if ((v1 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), !v4))
  {
    unsigned __int8 v5 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
    __int128 v6 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 + 496) = *(_OWORD *)v0;
    *(_OWORD *)(v3 + 512) = v6;
    STACK[0x290] = *(void *)(v0 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v5, &STACK[0x270]);
    *(void *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77LL);
    v7._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v7._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v7);
    JUMPOUT(0x182F9D300LL);
  }

  JUMPOUT(0x182F9CE2CLL);
}

void sub_182F9D450()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (v4) {
      JUMPOUT(0x182F9CE2CLL);
    }
    *(void *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77LL);
    v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v6._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v6);
    JUMPOUT(0x182F9D300LL);
  }

  __int128 v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 192) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 208) = v5;
  JUMPOUT(0x182F9CDE8LL);
}

void sub_182F9D468( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((v64 & 0x100) != 0)
  {
    __int128 v68 = *(_OWORD *)(v63 + 16);
    *(_OWORD *)(v66 + 272) = *(_OWORD *)v63;
    *(_OWORD *)(v66 + 2outlined init with copy of Any(v0 + 128, v0 + 88) = v68;
    a63 = *(void *)(v63 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &a59);
  }

  else
  {
    XMLPlistScanner.scanArray()();
    if (v67) {
      JUMPOUT(0x182F9CE2CLL);
    }
  }

  *(void *)(v63 + 24) = v65;
  _StringGuts.grow(_:)(77LL);
  v69._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  v69._unint64_t object = (void *)0x80000001839C9D60LL;
  String.append(_:)(v69);
  JUMPOUT(0x182F9D300LL);
}

void sub_182F9D480()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (v4) {
      JUMPOUT(0x182F9CE2CLL);
    }
    *(void *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77LL);
    v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v6._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v6);
    JUMPOUT(0x182F9D300LL);
  }

  __int128 v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 320) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 336) = v5;
  JUMPOUT(0x182F9D518LL);
}

uint64_t sub_182F9D588()
{
  if ((v1 & 0x100) != 0)
  {
    __int128 v5 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v2 + 1120) = *(_OWORD *)v0;
    *(_OWORD *)(v2 + 1136) = v5;
    STACK[0x500] = *(void *)(v0 + 32);
    JUMPOUT(0x182F9D694LL);
  }

  XMLPlistScanner.scanString(asKey:)(v1 == 3);
  if (v3) {
    goto LABEL_15;
  }
  XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
  if (v4) {
    goto LABEL_15;
  }
  Swift::Bool v6 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (v7) {
    goto LABEL_15;
  }
  if (!v6) {
    JUMPOUT(0x182F9D7A8LL);
  }
  Foundation::XMLPlistTag v8 = XMLPlistScanner.peekXMLElement()()._0;
  if (v9) {
LABEL_15:
  }
    JUMPOUT(0x182F9CE2CLL);
  return ((uint64_t (*)(void))((char *)&loc_182F9D740 + dword_182F9DA5C[v8]))();
}

uint64_t sub_182F9D5C0()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
    if (v3) {
      goto LABEL_10;
    }
  }

  unsigned __int8 v4 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
  __int128 v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 1248) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 1264) = v5;
  STACK[0x580] = *(void *)(v0 + 32);
  XMLPlistScanner.PartialMapData.record(tagType:with:)(v4, &STACK[0x560]);
  Swift::Bool v6 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (v7) {
    goto LABEL_10;
  }
  if (!v6) {
    JUMPOUT(0x182F9D7A8LL);
  }
  Foundation::XMLPlistTag v8 = XMLPlistScanner.peekXMLElement()()._0;
  if (v9) {
LABEL_10:
  }
    JUMPOUT(0x182F9CE2CLL);
  return ((uint64_t (*)(void))((char *)&loc_182F9D740 + dword_182F9DA5C[v8]))();
}

void sub_182F9D624()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v3) {
      JUMPOUT(0x182F9D6FCLL);
    }
    JUMPOUT(0x182F9CE2CLL);
  }

  __int128 v4 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 592) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 608) = v4;
  STACK[0x2F0] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9CDE8LL);
}

void sub_182F9D638()
{
  if ((v1 & 0x100) != 0)
  {
    __int128 v4 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v2 + 1024) = *(_OWORD *)v0;
    *(_OWORD *)(v2 + 1040) = v4;
    STACK[0x4A0] = *(void *)(v0 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x480]);
  }

  else
  {
    XMLPlistScanner.scanArray()();
    if (v3) {
      JUMPOUT(0x182F9CE2CLL);
    }
  }

  JUMPOUT(0x182F9D6FCLL);
}

void sub_182F9D64C()
{
  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    JUMPOUT(0x182F9D65CLL);
  }

  __int128 v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 1072) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 10outlined init with copy of Any(v0 + 128, v0 + 88) = v3;
  STACK[0x4D0] = *(void *)(v0 + 32);
  JUMPOUT(0x182F9D6F4LL);
}

void sub_182F9D750()
{
  if ((v3 & 0x100) == 0)
  {
    uint64_t v5 = XMLPlistScanner.scanThroughCloseTag(_:)(v3);
    if (!v2)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      unsigned __int8 v9 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v3);
      unint64_t v10 = v1[1];
      uint64_t v11 = v7 - *v1;
      unint64_t v12 = v1[4];
      STACK[0x408] = *v1;
      STACK[0x410] = v10;
      *(_OWORD *)&STACK[0x418] = *((_OWORD *)v1 + 1);
      STACK[0x428] = v12;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v9, v8 - v7, v11, &STACK[0x408]);
      v1[3] = v0;
      _StringGuts.grow(_:)(77LL);
      v14._uint64_t countAndFlagsBits = 0xD000000000000027LL;
      v14._unint64_t object = (void *)0x80000001839C9D60LL;
      String.append(_:)(v14);
      unint64_t v15 = v1[2];
      unint64_t v16 = v1[4];
      *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
      STACK[0x338] = v15;
      STACK[0x340] = v0;
      STACK[0x348] = v16;
      JUMPOUT(0x182F9D300LL);
    }

    JUMPOUT(0x182F9CE2CLL);
  }

  __int128 v13 = *((_OWORD *)v1 + 1);
  *(_OWORD *)(v4 + 864) = *(_OWORD *)v1;
  *(_OWORD *)(v4 + 880) = v13;
  STACK[0x400] = v1[4];
  JUMPOUT(0x182F9CD84LL);
}

void sub_182F9D7B0()
{
  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v2 == 3);
    if (v4 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v2), v5)) {
      JUMPOUT(0x182F9CE2CLL);
    }
    *(void *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77LL);
    v7._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v7._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v7);
    unint64_t v8 = *(void *)(v1 + 16);
    unint64_t v9 = *(void *)(v1 + 32);
    *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
    STACK[0x338] = v8;
    STACK[0x340] = v0;
    STACK[0x348] = v9;
    JUMPOUT(0x182F9D300LL);
  }

  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 816) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 832) = v6;
  STACK[0x3D0] = *(void *)(v1 + 32);
  JUMPOUT(0x182F9D8B4LL);
}

void sub_182F9D7EC()
{
  if ((v2 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v2), !v4))
  {
    unsigned __int8 v5 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
    __int128 v6 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v3 + 944) = *(_OWORD *)v1;
    *(_OWORD *)(v3 + 960) = v6;
    STACK[0x450] = *(void *)(v1 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v5, &STACK[0x430]);
    *(void *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77LL);
    v7._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v7._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v7);
    unint64_t v8 = *(void *)(v1 + 16);
    unint64_t v9 = *(void *)(v1 + 32);
    *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
    STACK[0x338] = v8;
    STACK[0x340] = v0;
    STACK[0x348] = v9;
    JUMPOUT(0x182F9D300LL);
  }

  JUMPOUT(0x182F9CE2CLL);
}

void sub_182F9D844()
{
  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (v4) {
      JUMPOUT(0x182F9CE2CLL);
    }
    *(void *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77LL);
    v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v6._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v6);
    unint64_t v7 = *(void *)(v1 + 16);
    unint64_t v8 = *(void *)(v1 + 32);
    *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
    STACK[0x338] = v7;
    STACK[0x340] = v0;
    STACK[0x348] = v8;
    JUMPOUT(0x182F9D300LL);
  }

  __int128 v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 640) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 656) = v5;
  STACK[0x320] = *(void *)(v1 + 32);
  JUMPOUT(0x182F9CDE8LL);
}

void sub_182F9D85C()
{
  if ((v2 & 0x100) != 0)
  {
    __int128 v5 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v3 + 720) = *(_OWORD *)v1;
    *(_OWORD *)(v3 + 736) = v5;
    STACK[0x370] = *(void *)(v1 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x350]);
  }

  else
  {
    XMLPlistScanner.scanArray()();
    if (v4) {
      JUMPOUT(0x182F9CE2CLL);
    }
  }

  *(void *)(v1 + 24) = v0;
  _StringGuts.grow(_:)(77LL);
  v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  v6._unint64_t object = (void *)0x80000001839C9D60LL;
  String.append(_:)(v6);
  unint64_t v7 = *(void *)(v1 + 16);
  unint64_t v8 = *(void *)(v1 + 32);
  *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
  STACK[0x338] = v7;
  STACK[0x340] = v0;
  STACK[0x348] = v8;
  JUMPOUT(0x182F9D300LL);
}

void sub_182F9D874()
{
  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (v4) {
      JUMPOUT(0x182F9CE2CLL);
    }
    *(void *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77LL);
    v6._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v6._unint64_t object = (void *)0x80000001839C9D60LL;
    String.append(_:)(v6);
    unint64_t v7 = *(void *)(v1 + 16);
    unint64_t v8 = *(void *)(v1 + 32);
    *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
    STACK[0x338] = v7;
    STACK[0x340] = v0;
    STACK[0x348] = v8;
    JUMPOUT(0x182F9D300LL);
  }

  __int128 v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 768) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 784) = v5;
  STACK[0x3A0] = *(void *)(v1 + 32);
  JUMPOUT(0x182F9D90CLL);
}

uint64_t XMLPlistScanner.scanThroughCloseTag(_:)(uint64_t result)
{
  uint64_t v3 = v1[3];
  unint64_t v2 = v1[4];
  if (v2 < v3 + 1)
  {
LABEL_9:
    XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)result);
    if (v10) {
      return v9;
    }
    else {
      return v3;
    }
  }

  else
  {
    unint64_t v4 = *v1 + v1[1] - v2;
    uint64_t v5 = v2 - v3;
    uint64_t v6 = v3 - *v1;
    unint64_t v7 = (_BYTE *)v1[3];
    while (v2 >= (unint64_t)v7)
    {
      if (v6 < 0) {
        goto LABEL_13;
      }
      if (v5 < 0) {
        goto LABEL_14;
      }
      if ((v4 & 0x8000000000000000LL) != 0) {
        goto LABEL_15;
      }
      if (*v7 != 60)
      {
        unint64_t v8 = v7 + 2;
        v1[3] = v7 + 1;
        --v5;
        ++v6;
        ++v7;
      }

      goto LABEL_9;
    }

    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }

  return result;
}

unsigned __int8 *XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(unsigned __int8 *result)
{
  unint64_t v2 = v1[4];
  unint64_t v3 = v2 - (void)result;
  if (v2 > (unint64_t)result)
  {
    uint64_t v4 = v1[1] + *v1 - (void)result;
    for (unint64_t i = (unint64_t)&result[-*v1]; (i & 0x8000000000000000LL) == 0; ++i)
    {
      BOOL v6 = v4-- < 1;
      if (v6) {
        break;
      }
      unsigned int v7 = *result;
      BOOL v6 = v7 > 0x20;
      uint64_t v8 = (1LL << v7) & 0x100002600LL;
      if (v6 || v8 == 0) {
        return result;
      }
      ++result;
      if (!--v3) {
        return (unsigned __int8 *)v1[4];
      }
    }

    __break(1u);
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.skipDTD()()
{
  uint64_t v1 = (_DWORD *)v0[3];
  unint64_t v2 = (unsigned __int8 *)v1 + 7;
  unint64_t v3 = *v0 + v0[1];
  if (v3 < (unint64_t)v1)
  {
    __break(1u);
    goto LABEL_20;
  }

  if ((uint64_t)v1 - *v0 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if ((uint64_t)(v3 - (void)v1) < 0)
  {
LABEL_21:
    __break(1u);
    return;
  }

  if (*v1 == 1413697348 && *(_DWORD *)((char *)v1 + 3) == 1162893652)
  {
    v0[3] = v2;
    uint64_t v8 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(v2);
    v0[3] = v8;
    uint64_t v9 = (unsigned __int8 *)v0[4];
    while (v8 != v9)
    {
      int v11 = *v8++;
      int v10 = v11;
      v0[3] = v8;
      if (v11 == 62) {
        return;
      }
      if (v10 == 91)
      {
        uint64_t v12 = BufferReader.lineNumber.getter();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(void *)uint64_t v6 = 91LL;
        *(void *)(v6 + 8) = v12;
        *(void *)(v6 + 16) = 0xD000000000000011LL;
        *(void *)(v6 + 24) = 0x80000001839C9D00LL;
        char v7 = 3;
        goto LABEL_10;
      }
    }

    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v13 = 0xD000000000000011LL;
    *(void *)(v13 + 8) = 0x80000001839C9D00LL;
    *(void *)(v13 + 16) = 0LL;
    *(void *)(v13 + 24) = 0LL;
    *(_BYTE *)(v13 + 32) = 0;
    goto LABEL_11;
  }

void XMLPlistScanner.scanXMLPropertyList()()
{
  uint64_t v1 = (unsigned __int8 *)v0[3];
  unint64_t v2 = v0[4];
  if ((unsigned __int8 *)v2 == v1)
  {
LABEL_18:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_BYTE *)(v11 + 32) = 0;
LABEL_22:
    swift_willThrow();
    return;
  }

  while (1)
  {
    uint64_t v3 = *v0;
    uint64_t v4 = v0[1];
    Swift::String v5 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(v1);
    v0[3] = (uint64_t)v5;
    if ((unsigned __int8 *)v2 == v5)
    {
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v12 = 0xD000000000000014LL;
      *(void *)(v12 + 8) = 0x80000001839C9C90LL;
      *(void *)(v12 + 16) = 0LL;
      *(void *)(v12 + 24) = 0LL;
      char v13 = 5;
LABEL_21:
      *(_BYTE *)(v12 + 32) = v13;
      goto LABEL_22;
    }

    uint64_t v6 = v5 + 1;
    uint64_t v7 = *v5;
    v0[3] = (uint64_t)(v5 + 1);
    if (v7 != 60)
    {
      uint64_t v14 = BufferReader.lineNumber.getter();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v14;
      *(void *)(v12 + 16) = 0LL;
      *(void *)(v12 + 24) = 0LL;
      char v13 = 3;
      goto LABEL_21;
    }

    uint64_t v8 = v5 + 2;
    if ((uint64_t)&v6[-v3] < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      return;
    }

    int v9 = *v6;
    if (v9 == 33)
    {
      if (v2 >= (unint64_t)(v5 + 4) && v5[2] == 45 && v5[3] == 45)
      {
        v0[3] = (uint64_t)(v5 + 4);
        XMLPlistScanner.skipXMLComment()();
      }

      else
      {
        v0[3] = (uint64_t)v8;
        XMLPlistScanner.skipDTD()();
      }

      goto LABEL_16;
    }

    if (v9 != 63) {
      break;
    }
    v0[3] = (uint64_t)v8;
    XMLPlistScanner.skipXMLProcessingInstruction()();
LABEL_16:
    if (v10) {
      return;
    }
    uint64_t v1 = (unsigned __int8 *)v0[3];
  }

  XMLPlistScanner.scanXMLElement()();
  if (!v15)
  {
    unint64_t v16 = v0[2];
    unint64_t v17 = v0[4];
    if (v17 < v16) {
      goto LABEL_33;
    }
    unint64_t v18 = v17 - v16;
    uint64_t v19 = v0[5];
    type metadata accessor for XMLPlistMap();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
    uint64_t v21 = swift_allocObject();
    *(_DWORD *)(v21 + 40) = 0;
    *(void *)(v21 + 16) = v16;
    *(void *)(v21 + 24) = v18;
    *(void *)(v21 + 32) = 0LL;
    *(void *)(v20 + 24) = v21;
    swift_bridgeObjectRetain();
  }

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance XMLPlistError( __int128 *a1, __int128 *a2)
{
  specialized static XMLPlistError.== infix(_:_:)(v5, v6);
  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError()
{
  unint64_t result = lazy protocol witness table cache variable for type XMLPlistError and conformance XMLPlistError;
  if (!lazy protocol witness table cache variable for type XMLPlistError and conformance XMLPlistError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for XMLPlistError, &type metadata for XMLPlistError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type XMLPlistError and conformance XMLPlistError);
  }

  return result;
}

void *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>( void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }

  return result;
}

void specialized static XMLPlistError.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __asm { BR              X10 }

uint64_t sub_182F9E24C()
{
  uint64_t v2 = v8;
  uint64_t v1 = v9;
  outlined init with take of PredicateCodableError(v0, (uint64_t)&v5);
  if (!v7)
  {
    if (v1)
    {
      if (v6 && (v2 == v5 && v1 == v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        char v3 = 1;
        return v3 & 1;
      }
    }

    else if (!v6)
    {
      swift_bridgeObjectRetain();
      char v3 = 1;
      return v3 & 1;
    }
  }

  char v3 = 0;
  return v3 & 1;
}

unint64_t specialized XMLPlistMap.TypeDescriptor.init(rawValue:)(unint64_t result)
{
  if (result >= 0xE) {
    return 14LL;
  }
  return result;
}

uint64_t specialized XMLPlistMap.TypeDescriptor.init(_:)(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)sub_182F9E474 + 4 * byte_183729544[a1]))(0LL);
}

uint64_t sub_182F9E474()
{
  return 8LL;
}

uint64_t sub_182F9E47C()
{
  return 7LL;
}

uint64_t sub_182F9E484()
{
  return 9LL;
}

uint64_t sub_182F9E48C()
{
  return 3LL;
}

uint64_t sub_182F9E494()
{
  return 4LL;
}

uint64_t sub_182F9E49C()
{
  return 5LL;
}

uint64_t sub_182F9E4A4()
{
  return 2LL;
}

uint64_t sub_182F9E4AC()
{
  return 6LL;
}

uint64_t sub_182F9E4B4()
{
  return 1LL;
}

void sub_182F9E4BC()
{
}

unint64_t specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t result = a1[3];
  unint64_t v7 = a1[4];
  while (v7 >= result + 1)
  {
    if (v7 < result)
    {
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return result;
    }

    unsigned int v8 = *(unsigned __int8 *)result;
    if (v8 < 0x21 || v8 - 127 <= 0x21)
    {
      a1[3] = ++result;
    }

    else
    {
      unint64_t result = BufferView<A>._decodeScalar()((unsigned __int8 *)result, v7 - result);
      if ((result & 0x100000000LL) != 0) {
        return result;
      }
      uint64_t v10 = v9;
      Unicode.Scalar.properties.getter();
      char v11 = Unicode.Scalar.Properties.isWhitespace.getter();
      unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if ((v11 & 1) == 0) {
        return result;
      }
      unint64_t v7 = a1[4];
      unint64_t result = a1[3] + v10;
      a1[3] = result;
    }
  }

  return result;
}

unint64_t specialized static XMLPlistScanner.parseCDSect_pl(reader:string:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[3];
  unint64_t v4 = a1[4];
  unint64_t result = v3 + 9;
  if (v4 < v3 + 9) {
    goto LABEL_21;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v8 = *a1 + v7;
  if (v8 < v3)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  if ((uint64_t)(v3 - v6) < 0)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  if (*(void *)v3 != 0x41544144435B213CLL || *(_BYTE *)(v3 + 8) != 91)
  {
    _StringGuts.grow(_:)(45LL);
    swift_bridgeObjectRelease();
    BufferReader.lineNumber.getter();
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v11 = 0xD00000000000002BLL;
    *(void *)(v11 + 8) = 0x80000001839C9E80LL;
    *(void *)(v11 + 16) = 0LL;
    *(void *)(v11 + 24) = 0LL;
    *(_BYTE *)(v11 + 32) = 5;
    return swift_willThrow();
  }

  a1[3] = result;
  if (result >= v4 - 2)
  {
LABEL_20:
    a1[3] = result;
LABEL_21:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_BYTE *)(v17 + 32) = 0;
    return swift_willThrow();
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = v7 + v6 - v3 - 9;
  while (1)
  {
    uint64_t v15 = (_WORD *)(v3 + v13 + 9);
    if (v8 < (unint64_t)v15)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    if (v14 < 0) {
      goto LABEL_34;
    }
    if (*v15 == 23901 && *(_BYTE *)(v3 + v13 + 11) == 62) {
      break;
    }
    a1[3] = v3 + v13++ + 10;
    --v14;
    if (v4 - v3 - 11 == v13) {
      goto LABEL_20;
    }
  }

  unint64_t v18 = v13 + 9;
  if (!*(void *)(a2 + 8))
  {
    unint64_t v20 = v18 + v3;
LABEL_30:
    a1[3] = v20 + 3;
    return result;
  }

  if (v18 < 9) {
    goto LABEL_38;
  }
  if ((uint64_t)(result - v6) >= 0)
  {
    unint64_t result = static String._tryFromUTF8(_:)();
    if (v19)
    {
      if (!*(void *)(a2 + 8)) {
        goto LABEL_40;
      }
      String.append(_:)(*(Swift::String *)&result);
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v20 = a1[3];
      goto LABEL_30;
    }

    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_BYTE *)(v21 + 32) = 6;
    return swift_willThrow();
  }

uint64_t *specialized static XMLPlistScanner.parseNumericEntityReference(reader:string:)(uint64_t *result)
{
  uint64_t v1 = *result;
  unint64_t v3 = (_BYTE *)result[3];
  unint64_t v2 = result[4];
  unint64_t v4 = v3 + 1;
  if ((uint64_t)&v3[-v1] < 0)
  {
    __break(1u);
    goto LABEL_35;
  }

  if ((uint64_t)(v2 - (void)v3) < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  if ((uint64_t)(v1 + result[1] - v2) >= 0)
  {
    if (*v3 == 120)
    {
      result[3] = (uint64_t)v4;
      int v5 = 1;
      ++v3;
      if ((_BYTE *)v2 == v4)
      {
LABEL_7:
        uint64_t v6 = 0LL;
LABEL_8:
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_BYTE *)(v7 + 32) = 0;
LABEL_32:
        swift_willThrow();
        return (uint64_t *)v6;
      }

uint64_t *specialized static XMLPlistScanner.parseEntityReference(reader:string:)( uint64_t *result, uint64_t *a2)
{
  unint64_t v4 = (_BYTE *)result[3];
  unint64_t v3 = result[4];
  int v5 = v4 + 1;
  result[3] = (uint64_t)(v4 + 1);
  unint64_t v6 = v3 - (void)(v4 + 1);
  if ((uint64_t)v6 < 1)
  {
LABEL_15:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_BYTE *)(v15 + 32) = 0;
    return (uint64_t *)swift_willThrow();
  }

  uint64_t v8 = *result;
  uint64_t v7 = result[1];
  int v9 = v4 + 2;
  if (v3 < (unint64_t)(v4 + 2))
  {
LABEL_3:
    uint64_t v10 = BufferReader.lineNumber.getter();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v11 = v10;
    *(void *)(v11 + 8) = 0LL;
    *(void *)(v11 + 16) = 0LL;
    *(void *)(v11 + 24) = 0LL;
    *(_BYTE *)(v11 + 32) = 4;
    return (uint64_t *)swift_willThrow();
  }

  if ((uint64_t)&v5[-v8] < 0)
  {
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v12 = v8 + v7;
  if ((uint64_t)(v8 + v7 - v3) < 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    JUMPOUT(0x182F9EFACLL);
  }

  switch(*v5)
  {
    case 'a':
      if (v6 < 4) {
        goto LABEL_15;
      }
      if (*(_WORD *)v9 == 28781 && v4[4] == 59)
      {
        unint64_t v14 = v4 + 5;
      }

      else
      {
        if (v6 < 5 || *v9 != 997420912) {
          goto LABEL_3;
        }
        unint64_t v14 = v4 + 6;
      }

uint64_t *specialized static XMLPlistScanner.parseString(with:generate:)@<X0>( uint64_t *result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v5 = result;
  unint64_t v8 = result[3];
  unint64_t v7 = result[4];
  int v9 = (unsigned __int8 *)(v8 + 5);
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (v7 < v8 + 5) {
    goto LABEL_9;
  }
  if (v10 + v11 < v8) {
    goto LABEL_85;
  }
  if ((uint64_t)(v8 - v10) < 0)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }

  if ((uint64_t)(v10 + v11 - v8) < 0)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }

  if (*(_DWORD *)v8 == 1819635236 && *(_BYTE *)(v8 + 4) == 108)
  {
    uint64_t v18 = 0LL;
    result[3] = (uint64_t)v9;
    char v16 = 1;
    unint64_t v13 = 0xE000000000000000LL;
LABEL_69:
    BOOL v17 = 1;
    goto LABEL_70;
  }

LABEL_100:
    __break(1u);
    goto LABEL_101;
  }

  if ((uint64_t)(v8 - v10) < 0)
  {
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }

  if ((uint64_t)&v9[-v8] < 0)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }

  if (v10 + v11 - (uint64_t)v9 < 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }

  uint64_t v31 = static String._tryFromUTF8(_:)();
  if (v32)
  {
    uint64_t v18 = v31;
    unint64_t v13 = v32;
    int v9 = (unsigned __int8 *)v5[3];
    unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    char v16 = 0;
    goto LABEL_69;
  }

  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v44 = (void *)swift_allocError();
  *uint64_t v66 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  int64_t v46 = 0LL;
LABEL_101:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSDecimal.asVariableLengthInteger()(v176, v175, v174);
  __int128 v68 = *(void *)(v67 + 16);
  swift_bridgeObjectRelease();
  Swift::String v69 = floor((double)(8 - v68) * 4.81647993);
  Swift::String v70 = v182;
  if ((~*(void *)&v69 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_327;
  }
  if (v69 <= -9.22337204e18)
  {
LABEL_328:
    __break(1u);
    goto LABEL_329;
  }

  if (v69 >= 9.22337204e18)
  {
LABEL_329:
    __break(1u);
    goto LABEL_330;
  }

  Swift::String v71 = (uint64_t)v69;
  NSDecimal.asVariableLengthInteger()(*(void *)v182, *(void *)(v182 + 8), *(_DWORD *)(v182 + 16));
  uint64_t v175 = v71;
  Swift::String v73 = v71 - v171;
  if (__OFSUB__(v71, v171))
  {
LABEL_330:
    __break(1u);
LABEL_331:
    __break(1u);
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
LABEL_336:
    __break(1u);
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
LABEL_341:
    __break(1u);
LABEL_342:
    __break(1u);
    goto LABEL_343;
  }

  if (!v73)
  {
    uint64_t v24 = v72;
    uint64_t v81 = (uint64_t *)v179;
    goto LABEL_165;
  }

  uint64_t v177 = v72;
  uint64_t v24 = specialized abs<A>(_:)(v71 - v171);
  uint64_t v74 = v21[382];
  uint64_t v75 = *(void *)(v74 + 16);
  uint64_t v174 = v73;
  if (v75 > v24)
  {
    int v76 = v177;
    swift_bridgeObjectRetain();
    if (v24 < 0) {
      goto LABEL_259;
    }
    goto LABEL_108;
  }

  if (!v75)
  {
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
LABEL_356:
    __break(1u);
LABEL_357:
    __break(1u);
LABEL_358:
    __break(1u);
LABEL_359:
    __break(1u);
    goto LABEL_360;
  }

  unint64_t v27 = v75 - 1;
  int v76 = v177;
  swift_bridgeObjectRetain();
  uint64_t v172 = v75;
  while (2)
  {
    uint64_t v82 = v21[382];
    unint64_t v83 = *(void *)(v82 + 8 * v27 + 32);
    if (v73 < 0)
    {
      swift_bridgeObjectRetain();
      __int128 v98 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v76, v83, 8LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v76 = v98;
      uint64_t v75 = v172;
      goto LABEL_121;
    }

    uint64_t v169 = v46;
    __int128 v84 = *(void *)(v76 + 16);
    if (!v84 || (__int128 v85 = *(void *)(v83 + 16)) == 0)
    {
      swift_bridgeObjectRelease();
      int v76 = MEMORY[0x18961AFE8];
      int64_t v46 = v169;
      goto LABEL_121;
    }

    if (__OFADD__(v84, v85)) {
      goto LABEL_345;
    }
    if (v84 + v85 >= 8) {
      uint64_t v86 = 8LL;
    }
    else {
      uint64_t v86 = v84 + v85;
    }
    if (v86 < 0) {
      goto LABEL_378;
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = (uint64_t *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v21[2] = v86;
    BOOL v87 = v21 + 4;
    bzero(v21 + 4, 2 * v86);
    __int128 v88 = 0LL;
    __int128 v89 = v83 + 32;
    do
    {
      __int128 v90 = 0;
      __int128 v91 = 0LL;
      __int128 v92 = v88++;
      do
      {
        __int128 v95 = v91 + v92;
        if (__OFADD__(v91, v92))
        {
          __break(1u);
LABEL_309:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v48 = v179;
          v47._rawValue = (void *)v27;
LABEL_69:
          uint64_t v49 = v182;
          uint64_t v50 = v47._rawValue;
          NSDecimal.copyVariableLengthInteger(_:)(v47);
          if (!v51)
          {
            unsigned __int8 v52 = v50[2];
            swift_bridgeObjectRelease();
            if (HIDWORD(v52)) {
              goto LABEL_379;
            }
            _So9NSDecimala__length_setter(v52, v48);
            uint64_t v180 = *(_DWORD *)v49;
            uint64_t v181 = *(_OWORD *)(v49 + 4);
            Swift::String v53 = _So9NSDecimala__exponent_getter((char *)&v180);
            _So9NSDecimala__exponent_setter(v53, v48);
            _So9NSDecimala__isCompact_setter_0(0LL, v48);
            LOBYTE(v10) = 0;
            return v10 & 1;
          }

          goto LABEL_306;
        }

        if (v95 >= v86)
        {
          if (v90) {
            goto LABEL_304;
          }
          __int128 v90 = *(unsigned __int16 *)(v89 + 2 * v92);
          if (*(_WORD *)(v89 + 2 * v92))
          {
            __int128 v90 = *(unsigned __int16 *)(v76 + 2 * v91 + 32);
            if (*(_WORD *)(v76 + 2 * v91 + 32)) {
              goto LABEL_304;
            }
          }
        }

        else
        {
          if (v95 < 0) {
            goto LABEL_314;
          }
          __int128 v93 = 2 * v95;
          __int128 v94 = v90
          __int128 v90 = HIWORD(v94);
          *(_WORD *)((char *)v87 + v93) = v94;
        }

        ++v91;
      }

      while (v84 != v91);
      if (!v90) {
        continue;
      }
      uint64_t v28 = __OFADD__(v84, v92);
      __int128 v96 = v84 + v92;
      if (v28) {
        goto LABEL_353;
      }
      if (v96 >= v86) {
        goto LABEL_304;
      }
      if (v96 < 0) {
        goto LABEL_356;
      }
      *((_WORD *)v87 + v96) = v90;
    }

    while (v88 != v85);
    __int128 v97 = v21[2];
    if (v97)
    {
      int64_t v46 = v169;
      uint64_t v75 = v172;
      if (*((_WORD *)v87 + v97 - 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v76 = (uint64_t)v21;
        uint64_t v21 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
        Swift::String v73 = v174;
      }

      else
      {
        char v99 = v97 + 14;
        Swift::String v73 = v174;
        do
        {
          v21[2] = v99 - 15;
          if (v99 == 15) {
            break;
          }
        }

        while (!*((unsigned __int16 *)v21 + v99--));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v76 = (uint64_t)v21;
        uint64_t v21 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v76 = (uint64_t)v21;
      int64_t v46 = v169;
      uint64_t v21 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
      uint64_t v75 = v172;
      Swift::String v73 = v174;
    }

  __break(1u);
LABEL_101:
  __break(1u);
  return result;
}

          char v100 = v63;
          __int128 v102 = v59;
          uint64_t v77 = v61;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_119;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v78 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v79 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v80 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v66 = objc_msgSend(v79, sel_initWithDomain_code_userInfo_, v80, v78, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v14 = (size_t)objc_msgSend(v66, sel_domain);
          uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v14);
          unint64_t v83 = v82;

          if (v81 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v83 == v84)
          {
            swift_bridgeObjectRelease_n();
            int v5 = (unint64_t)v97;
LABEL_105:
            unint64_t v7 = v95;
            uint64_t v61 = v77;
            uint64_t v59 = v102;
            uint64_t v67 = v100;
            goto LABEL_106;
          }

          __int128 v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int v5 = (unint64_t)v97;
          if ((v85 & 1) != 0) {
            goto LABEL_105;
          }
          break;
      }

      goto LABEL_114;
    }

    BOOL v17 = v16;
    if (v16 <= 0)
    {
      free(v7);
      unint64_t v7 = v95;
LABEL_31:
      unint64_t v4 = v97;
      if ((v11 & 0x1000000000000000LL) != 0) {
        goto LABEL_32;
      }
      goto LABEL_14;
    }

    type metadata accessor for __DataStorage();
    uint64_t v18 = swift_allocObject();
    if (v17 > 0x3FFFFFFFFFFFFFFELL)
    {
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      String.UTF8View._foreignCount()();
LABEL_108:
      swift_bridgeObjectRelease();
      MEMORY[0x186E20E60](v5, -1LL, -1LL);
      return v7;
    }

    *(void *)(v18 + 32) = v17;
    *(void *)(v18 + 40) = 0LL;
    *(_BYTE *)(v18 + 64) = 0;
    *(void *)(v18 + 16) = v7;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 48) = closure #2 in Data.Deallocator._deallocator.getter;
    *(void *)(v18 + 56) = 0LL;
    uint64_t v19 = specialized Data._Representation.init(_:count:)((void *)v18, v17);
    uint64_t v21 = v20;
    swift_bridgeObjectRetain();
    __int128 v94 = v21;
    outlined copy of Data._Representation(v19, v21);
    unint64_t v7 = v95;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v103[0] = v95;
    uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
    uint64_t v25 = *((void *)v95 + 2);
    unint64_t v26 = (v23 & 1) == 0;
    unint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      goto LABEL_110;
    }
    if (*((void *)v95 + 3) >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        __int128 v92 = v95;
        if ((v23 & 1) != 0) {
          goto LABEL_35;
        }
      }

      else
      {
        BOOL v87 = v24;
        __int128 v104 = v23;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
        unint64_t v32 = static _DictionaryStorage.copy(original:)();
        unint64_t v7 = (char *)v32;
        if (*((void *)v95 + 2))
        {
          uint64_t v33 = (char *)(v32 + 64);
          __src = v95 + 64;
          uint64_t v34 = (unint64_t)((1LL << v7[32]) + 63) >> 6;
          __int128 v93 = v7;
          if (v7 != v95 || v33 >= &__src[8 * v34]) {
            memmove(v33, __src, 8 * v34);
          }
          __int128 v90 = 0LL;
          *((void *)v7 + 2) = *((void *)v95 + 2);
          unint64_t v35 = 1LL << v95[32];
          if (v35 < 64) {
            uint64_t v36 = ~(-1LL << v35);
          }
          else {
            uint64_t v36 = -1LL;
          }
          uint64_t v14 = v36 & *((void *)v95 + 8);
          __int128 v88 = (unint64_t)(v35 + 63) >> 6;
          while (1)
          {
            if (v14)
            {
              __int128 v37 = __clz(__rbit64(v14));
              v14 &= v14 - 1;
              uint64_t v38 = v37 | (v90 << 6);
            }

            else
            {
              uint64_t v44 = v90 + 1;
              if (__OFADD__(v90, 1LL)) {
                goto LABEL_116;
              }
              if (v44 >= v88) {
                break;
              }
              uint64_t v45 = *(void *)&__src[8 * v44];
              int64_t v46 = v90 + 1;
              if (!v45)
              {
                int64_t v46 = v90 + 2;
                if (v90 + 2 >= v88) {
                  break;
                }
                uint64_t v45 = *(void *)&__src[8 * v46];
                if (!v45)
                {
                  int64_t v46 = v90 + 3;
                  if (v90 + 3 >= v88) {
                    break;
                  }
                  uint64_t v45 = *(void *)&__src[8 * v46];
                  if (!v45)
                  {
                    int64_t v46 = v90 + 4;
                    if (v90 + 4 >= v88) {
                      break;
                    }
                    uint64_t v45 = *(void *)&__src[8 * v46];
                    if (!v45)
                    {
                      int64_t v46 = v90 + 5;
                      if (v90 + 5 >= v88) {
                        break;
                      }
                      uint64_t v45 = *(void *)&__src[8 * v46];
                      if (!v45)
                      {
                        int64_t v46 = v90 + 6;
                        if (v90 + 6 >= v88) {
                          break;
                        }
                        uint64_t v45 = *(void *)&__src[8 * v46];
                        if (!v45)
                        {
                          int64_t v46 = v90 + 7;
                          if (v90 + 7 >= v88) {
                            break;
                          }
                          uint64_t v45 = *(void *)&__src[8 * v46];
                          if (!v45)
                          {
                            uint64_t v47 = v90 + 8;
                            if (v90 + 8 >= v88) {
                              break;
                            }
                            uint64_t v45 = *(void *)&__src[8 * v47];
                            if (!v45)
                            {
                              while (1)
                              {
                                int64_t v46 = v47 + 1;
                                if (__OFADD__(v47, 1LL)) {
                                  goto LABEL_117;
                                }
                                unint64_t v7 = v93;
                                if (v46 >= v88) {
                                  goto LABEL_69;
                                }
                                uint64_t v45 = *(void *)&__src[8 * v46];
                                ++v47;
                                if (v45) {
                                  goto LABEL_68;
                                }
                              }
                            }

                            int64_t v46 = v90 + 8;
                            unint64_t v7 = v93;
                          }
                        }
                      }
                    }
                  }
                }
              }

                            swift_bridgeObjectRelease();
                            uint64_t v38 = v83;
                            unint64_t v30 = v76;
                            if ((v34 & 1) == 0)
                            {
LABEL_101:
                              specialized _NativeDictionary._insert(at:key:value:)(v30, a2, v14, v13, (void *)v35);
LABEL_102:
                              *(void *)(a1 + 464) = v35;
                              swift_bridgeObjectRelease();
                              os_unfair_lock_s *v38 = v14;
                              v38[1] = v13;
                              return swift_bridgeObjectRetain();
                            }

    char v234 = v77;
    if (*((void *)&v265 + 1))
    {
      __int128 v113 = *((void *)&v265 + 1);
    }

    else if (BYTE9(v263) == 1)
    {
      __int128 v113 = 0LL;
      if ((void)v263)
      {
        if ((*(_BYTE *)(v263 + 48) & 1) != 0)
        {
          __int128 v113 = 0LL;
        }

        else
        {
          uint64_t v158 = String.subscript.getter();
          unint64_t v239 = a1;
          int v244 = a9;
          MEMORY[0x186E1B610](v158);
          __int128 v113 = v159;
          a9 = v244;
          a1 = v239;
          swift_bridgeObjectRelease();
        }
      }
    }

    else
    {
      __int128 v113 = 0LL;
    }

    if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v235, v234) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      if (!v113)
      {
        swift_bridgeObjectRetain();
LABEL_140:
        uint64_t v124 = v234;
        uint64_t v137 = v235 & 0xFFFFFFFFFFFFLL;
        if ((v234 & 0x2000000000000000LL) != 0) {
          uint64_t v138 = HIBYTE(v234) & 0xF;
        }
        else {
          uint64_t v138 = v235 & 0xFFFFFFFFFFFFLL;
        }
        if (!v138)
        {
          uint64_t v145 = 0LL;
          uint64_t v146 = 0xE000000000000000LL;
          goto LABEL_185;
        }

        if ((v234 & 0x1000000000000000LL) != 0)
        {
          uint64_t v233 = v68;
          int v244 = a9;
          swift_bridgeObjectRetain_n();
        }

        else
        {
          if ((v234 & 0x2000000000000000LL) != 0)
          {
            *(void *)&__int128 v259 = v235;
            *((void *)&v259 + 1) = v234 & 0xFFFFFFFFFFFFFFLL;
            *(void *)&__int128 v249 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
            *((void *)&v249 + 1) = 0LL;
            swift_bridgeObjectRetain_n();
            uint64_t v141 = &v259;
            uint64_t v140 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v249;
            unint64_t v143 = (unsigned __int8 *)&v259;
            char v142 = HIBYTE(v124) & 0xF;
            uint64_t v144 = v142;
          }

          else
          {
            if ((v235 & 0x1000000000000000LL) == 0) {
              goto LABEL_227;
            }
            char v139 = (v234 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_148:
            *(void *)&__int128 v259 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
            *((void *)&v259 + 1) = 0LL;
            swift_bridgeObjectRetain_n();
            uint64_t v140 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
            uint64_t v141 = (__int128 *)v139;
            char v142 = v137;
            unint64_t v143 = (unsigned __int8 *)v139;
            uint64_t v144 = v137;
          }

          uint64_t v145 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v141,  v142,  v140,  1,  v143,  v144);
          uint64_t v146 = v147;
          swift_bridgeObjectRelease();
          if (v146 != 1)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v148 = v235;
            if (v146) {
              goto LABEL_185;
            }
            goto LABEL_189;
          }

          uint64_t v233 = v68;
          int v244 = a9;
        }

        uint64_t v148 = v235;
        *(void *)&__int128 v259 = v235;
        *((void *)&v259 + 1) = v124;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol._ephemeralString.getter();
        char v149 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v150 = objc_msgSend(v149, sel__fastCharacterContents);
        __int16 v151 = v149;
        if (!v150)
        {
          *(void *)&__int128 v259 = v148;
          *((void *)&v259 + 1) = v124;
          swift_bridgeObjectRetain();
          uint64_t v183 = String.init<A>(_:)();
          a9 = v244;
          if ((v182 & 0x1000000000000000LL) != 0) {
            goto LABEL_232;
          }
          goto LABEL_176;
        }

        unint64_t v239 = a18;
        *(void *)&__int128 v259 = v148;
        *((void *)&v259 + 1) = v124;
        StringProtocol._ephemeralString.getter();
        __int16 v152 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        __int16 v153 = objc_msgSend(v152, sel_length);
        __int16 v154 = swift_unknownObjectRelease();
        __int16 v155 = MEMORY[0x1895F8858](v154);
        LOBYTE(v231) = 1;
        MEMORY[0x1895F8858](v155);
        __int128 v228 = v150;
        __int128 v229 = v153;
        uint64_t v145 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v150,  (uint64_t)v153,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:),  0LL,  v239,  v156,  a19,  (uint64_t)&v227);
        uint64_t v146 = v157;
        swift_bridgeObjectRelease_n();
        a9 = v244;
        if (v146)
        {
          uint64_t v124 = v234;
          goto LABEL_185;
        }

        uint64_t v124 = v234;
LABEL_188:
        uint64_t v148 = v235;
LABEL_189:
        HIBYTE(v274) = 1;
        uint64_t v168 = specialized static RFC3986Parser.percentEncode<A>(_:component:)(v148, v124, 3);
        goto LABEL_190;
      }

      uint64_t v233 = v68;
      unint64_t v239 = a1;
      uint64_t v119 = a9;
      uint64_t v120 = one-time initialization token for schemesToPercentEncodeHost;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v120 != -1) {
        swift_once();
      }
      uint64_t v121 = static RFC3986Parser.schemesToPercentEncodeHost;
      uint64_t v122 = String.lowercased()();
      LOBYTE(v121) = specialized Set.contains(_:)(v122._countAndFlagsBits, (uint64_t)v122._object, v121);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      a9 = v119;
      a1 = v239;
      __int128 v68 = v233;
      if ((v121 & 1) == 0) {
        goto LABEL_140;
      }
    }

    uint64_t v124 = v234;
    uint64_t v123 = v235;
    if ((v234 & 0x2000000000000000LL) != 0) {
      uint64_t v125 = HIBYTE(v234) & 0xF;
    }
    else {
      uint64_t v125 = v235 & 0xFFFFFFFFFFFFLL;
    }
    if (!v125)
    {
      swift_bridgeObjectRelease();
      uint64_t v133 = 0LL;
      uint64_t v134 = 0xE000000000000000LL;
      goto LABEL_192;
    }

    uint64_t v126 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v235, v234);
    if ((v126 & 1) == 0)
    {
      int v244 = a16;
      *(void *)&__int128 v259 = v123;
      *((void *)&v259 + 1) = v124;
      MEMORY[0x1895F8858](v126);
      unint64_t v231 = (uint64_t)&v259;
      LOBYTE(v232) = 4;
      swift_bridgeObjectRetain();
      uint64_t v135 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(v244, (uint64_t)&v230, v123, v124);
      if (v136)
      {
        uint64_t v133 = (uint64_t)v135;
        uint64_t v134 = v136;
        swift_bridgeObjectRelease_n();
        goto LABEL_192;
      }

      __int128 v161 = *((void *)&v259 + 1);
      uint64_t v160 = v259;
      swift_bridgeObjectRetain();
      uint64_t v133 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v160, v161, 4u);
      uint64_t v134 = v162;
      swift_bridgeObjectRelease_n();
      goto LABEL_191;
    }

    uint64_t v127 = specialized Collection.first.getter(v123, v124);
    if ((v127 & 0x100) != 0) {
      goto LABEL_239;
    }
    if (v127 == 91)
    {
      if ((v124 & 0x1000000000000000LL) == 0)
      {
        uint64_t v128 = (v125 << 16) - 65532;
        LOBYTE(v129) = 1;
        goto LABEL_124;
      }
    }

    else
    {
      __break(1u);
    }

    uint64_t v233 = v68;
    id v221 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v221, 1LL)) {
      goto LABEL_240;
    }
    uint64_t v124 = v234;
    uint64_t v129 = (v235 >> 59) & 1;
    uint64_t v128 = MEMORY[0x186E1B838](15LL, v221 - 1);
    __int128 v68 = v233;
LABEL_124:
    if ((v128 & 0xC) == 4LL << v129) {
      uint64_t v128 = _StringGuts._slowEnsureMatchingEncoding(_:)(v128, v235, v124);
    }
    uint64_t v130 = v128 >> 16;
    if (v128 >> 16 >= v125)
    {
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      char v139 = _StringObject.sharedUTF8.getter();
      uint64_t v137 = v222;
      goto LABEL_148;
    }

    if ((v124 & 0x1000000000000000LL) != 0)
    {
      uint64_t v132 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((v124 & 0x2000000000000000LL) != 0)
    {
      *(void *)&__int128 v259 = v235;
      *((void *)&v259 + 1) = v124 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v132 = *((_BYTE *)&v260[-1] + v130);
    }

    else
    {
      if ((v235 & 0x1000000000000000LL) != 0) {
        uint64_t v131 = (v124 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v131 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v132 = *(_BYTE *)(v131 + v130);
    }

    if (v132 != 93) {
      goto LABEL_226;
    }
    uint64_t v163 = v235;
    uint64_t v164 = specialized Collection<>.firstIndex(of:)(0x25u, v235, v124);
    if ((v165 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v163, v124) & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        unsigned __int8 v268 = 0uLL;
        goto LABEL_193;
      }

      *(void *)&__int128 v259 = v163;
      *((void *)&v259 + 1) = v124;
      uint64_t v168 = String.init<A>(_:)();
LABEL_190:
      uint64_t v133 = v168;
      uint64_t v134 = v169;
LABEL_191:
      swift_bridgeObjectRelease();
      goto LABEL_192;
    }

    uint64_t v166 = v164;
    if ((v124 & 0x1000000000000000LL) == 0)
    {
      uint64_t v167 = (v125 << 16) - 65532;
      goto LABEL_171;
    }

    unint64_t v170 = v235;
    uint64_t v171 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v171, 1LL))
    {
      __break(1u);
LABEL_232:
      uint64_t v183 = static String._copying(_:)();
      char v224 = v223;
      swift_bridgeObjectRelease();
      uint64_t v182 = (unint64_t)v224;
      uint64_t v148 = v235;
LABEL_176:
      unint64_t v239 = (uint64_t (*)(void))v182;
      if ((v182 & 0x2000000000000000LL) != 0)
      {
        __int128 v199 = v182;
        uint64_t v185 = HIBYTE(v182) & 0xF;
        *(void *)&__int128 v259 = v183;
        *((void *)&v259 + 1) = v199 & 0xFFFFFFFFFFFFFFLL;
        *(void *)&__int128 v249 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        *((void *)&v249 + 1) = 0LL;
        uint64_t v184 = (unsigned __int8 *)&v259;
        int v186 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v249;
        uint64_t v187 = (unsigned __int8 *)&v259;
        uint64_t v188 = v185;
      }

      else
      {
        if ((v183 & 0x1000000000000000LL) != 0)
        {
          uint64_t v184 = (unsigned __int8 *)((v182 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v185 = v183 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v184 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }

        *(void *)&__int128 v259 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        *((void *)&v259 + 1) = 0LL;
        int v186 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
        uint64_t v187 = v184;
        uint64_t v188 = v185;
      }

      uint64_t v145 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v184,  v185,  v186,  1,  v187,  v188);
      uint64_t v146 = v200;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (v146)
      {
LABEL_185:
        swift_bridgeObjectRetain();
        __int128 v201 = specialized static RFC3986Parser.validate<A>(_:component:)(v145, v146, 3);
        swift_bridgeObjectRelease();
        if ((v201 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)&unsigned __int8 v268 = v145;
          *((void *)&v268 + 1) = v146;
          goto LABEL_193;
        }

        swift_bridgeObjectRelease();
        goto LABEL_188;
      }

      goto LABEL_189;
    }

    uint64_t v167 = MEMORY[0x186E1B838](15LL, v171 - 1, v170, v124);
LABEL_171:
    int v244 = a9;
    if (v167 >> 14 >= v166 >> 14) {
      break;
    }
    __break(1u);
LABEL_229:
    __int128 v97 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
LABEL_70:
    *(void *)&__int128 v259 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v259 + 1) = 0LL;
    char v99 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
    char v100 = v97;
LABEL_75:
    int v76 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v97,  v98,  v99,  0,  v100,  v98);
    uint64_t v75 = v104;
    swift_bridgeObjectRelease_n();
  }

  swift_bridgeObjectRetain_n();
  *(void *)&__int128 v259 = String.subscript.getter();
  *((void *)&v259 + 1) = v172;
  *(void *)&v260[0] = v173;
  *((void *)&v260[0] + 1) = v174;
  MEMORY[0x1895F8858](v259);
  unint64_t v231 = (uint64_t)&v259;
  LOBYTE(v232) = 8;
  unint64_t v239 = v175;
  uint64_t v179 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( a17,  (uint64_t)&v230,  v177,  v178,  v176,  (unint64_t)v175);
  if (v180)
  {
    uint64_t v181 = v180;
    uint64_t v233 = (uint64_t)v179;
  }

  else
  {
    uint64_t v190 = *((void *)&v259 + 1);
    uint64_t v189 = v259;
    __int128 v191 = v260[0];
    swift_bridgeObjectRetain();
    uint64_t v233 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( v189,  v190,  v191,  *((unint64_t *)&v191 + 1),  8u);
    uint64_t v181 = v192;
    swift_bridgeObjectRelease();
  }

  __int128 v193 = String.subscript.getter();
  __int128 v194 = MEMORY[0x186E1B610](v193);
  uint64_t v196 = v195;
  swift_bridgeObjectRelease();
  *(void *)&__int128 v259 = v194;
  *((void *)&v259 + 1) = v196;
  v197._uint64_t countAndFlagsBits = v233;
  v197._unint64_t object = v181;
  String.append(_:)(v197);
  swift_bridgeObjectRelease();
  v198._uint64_t countAndFlagsBits = 93LL;
  v198._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v198);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v134 = *((void *)&v259 + 1);
  uint64_t v133 = v259;
  swift_bridgeObjectRelease_n();
  a9 = v244;
LABEL_192:
  swift_bridgeObjectRelease();
  *(void *)&unsigned __int8 v268 = v133;
  *((void *)&v268 + 1) = v134;
LABEL_193:
  BYTE8(v263) = 0;
  BYTE12(v263) = 0;
  char v274 = 0;
  if ((specialized Collection.first.getter(0LL, 0xE000000000000000LL) & 0x1FF) == 0x5B) {
    goto LABEL_237;
  }
  __int128 v259 = 0uLL;
  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( (char *)&v259,  0LL,  4u,  1))
  {
    lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
    swift_allocError();
    void *v226 = 3;
    swift_willThrow();
    LODWORD(v232) = 0;
    unint64_t v231 = 876LL;
    goto LABEL_243;
  }

  __int128 v202 = swift_bridgeObjectRelease();
  unsigned __int8 v268 = xmmword_183725730;
  LOBYTE(v259) = 37;
  MEMORY[0x1895F8858](v202);
  unint64_t v231 = (uint64_t)&v259;
  LOBYTE(v274) = specialized Sequence.contains(where:)(a15, (uint64_t)&v230, 0LL, 0xE000000000000000LL) & 1;
LABEL_196:
  __int128 v203 = v275;
  unint64_t v204 = v276;
  unint64_t v205 = HIBYTE(v276) & 0xF;
  if ((v276 & 0x2000000000000000LL) == 0) {
    unint64_t v205 = v275 & 0xFFFFFFFFFFFFLL;
  }
  if (v205)
  {
    swift_bridgeObjectRetain();
    __int128 v206 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v203, v204);
    __int128 v208 = v207;
    swift_bridgeObjectRelease();
  }

  else
  {
    __int128 v206 = 0LL;
    __int128 v208 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRelease();
  if (!v240)
  {
    unint64_t v239 = a1;
    *(void *)&__int128 v259 = v263;
    BYTE8(v259) = 0;
    *(_DWORD *)((char *)&v259 + 9) = *(_DWORD *)((char *)&v263 + 9);
    *(_WORD *)((char *)&v259 + 13) = BYTE13(v263);
    HIBYTE(v259) = HIBYTE(v263);
    LOBYTE(v260[0]) = v264;
    *(_OWORD *)((char *)v260 + 8) = v265;
    *(_OWORD *)((char *)&v260[1] + 8) = v266;
    *(_OWORD *)((char *)&v260[2] + 8) = v267;
    *(_OWORD *)((char *)&v260[3] + 8) = v268;
    *((void *)&v260[4] + 1) = v269;
    LOBYTE(v261) = v270;
    *((void *)&v261 + 1) = v206;
    *(void *)&v262[0] = v208;
    *(_OWORD *)((char *)v262 + 8) = v272;
    *(_OWORD *)((char *)&v262[1] + 8) = v273;
    WORD4(v262[2]) = v274;
    unint64_t v255 = v261;
    unint64_t v256 = v262[0];
    v257[0] = v262[1];
    *(_OWORD *)((char *)v257 + 10) = *(_OWORD *)((char *)&v262[1] + 10);
    unint64_t v251 = v260[1];
    uint64_t v252 = v260[2];
    unint64_t v253 = v260[3];
    unint64_t v254 = v260[4];
    __int128 v249 = v259;
    uint64_t v250 = v260[0];
    uint64_t v209 = v237;
    v248[0] = v237;
    v248[1] = v236;
    v248[2] = v238;
    URLComponents.url(relativeTo:)((uint64_t)v248, v258);
    uint64_t v44 = (void *)v258[0];
    if (!v258[0]) {
      goto LABEL_236;
    }
    outlined release of URLComponents((uint64_t)&v259);
    outlined consume of URL?(v209);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a8 = v242;
    a7 = v243;
    uint64_t v25 = v245;
    goto LABEL_206;
  }

  *(void *)&__int128 v259 = v263;
  BYTE8(v259) = 0;
  *(_DWORD *)((char *)&v259 + 9) = *(_DWORD *)((char *)&v263 + 9);
  *(_WORD *)((char *)&v259 + 13) = BYTE13(v263);
  HIBYTE(v259) = HIBYTE(v263);
  LOBYTE(v260[0]) = v264;
  *(_OWORD *)((char *)v260 + 8) = v265;
  *(_OWORD *)((char *)&v260[1] + 8) = v266;
  *(_OWORD *)((char *)&v260[2] + 8) = v267;
  *(_OWORD *)((char *)&v260[3] + 8) = v268;
  *((void *)&v260[4] + 1) = v269;
  LOBYTE(v261) = v270;
  *((void *)&v261 + 1) = v206;
  *(void *)&v262[0] = v208;
  *(_OWORD *)((char *)v262 + 8) = v272;
  *(_OWORD *)((char *)&v262[1] + 8) = v273;
  WORD4(v262[2]) = v274;
  unint64_t v255 = v261;
  unint64_t v256 = v262[0];
  v257[0] = v262[1];
  *(_OWORD *)((char *)v257 + 10) = *(_OWORD *)((char *)&v262[1] + 10);
  unint64_t v251 = v260[1];
  uint64_t v252 = v260[2];
  unint64_t v253 = v260[3];
  unint64_t v254 = v260[4];
  __int128 v249 = v259;
  uint64_t v250 = v260[0];
  URLComponents.url.getter(v258);
  uint64_t v44 = (void *)v258[0];
  if (v258[0])
  {
    outlined release of URLComponents((uint64_t)&v259);
    outlined consume of URL?(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a8 = v242;
    a7 = v243;
    uint64_t v25 = v245;
    a6 = v241;
    goto LABEL_207;
  }

    swift_bridgeObjectRelease();
    uint64_t v125 = 0LL;
    goto LABEL_105;
  }

  uint64_t v65 = (unint64_t)v114;
  *(void *)&v756[0] = v114;
  *((void *)&v756[0] + 1) = v115;
  *(void *)&v756[1] = v689;
  swift_bridgeObjectRetain();
  uint64_t v127 = URL.pathComponents.getter();
  uint64_t v128 = v127;
  uint64_t v129 = *(void *)(v127 + 16);
  if (v129)
  {
    uint64_t v130 = v127 + 16 * v129 + 24;
    while (v129 <= *(void *)(v128 + 16))
    {
      swift_bridgeObjectRetain();
      v131._uint64_t countAndFlagsBits = 0x6A6F72706C2ELL;
      v131._unint64_t object = (void *)0xE600000000000000LL;
      if (String.hasSuffix(_:)(v131) && String.count.getter() >= 7)
      {
        swift_bridgeObjectRelease();
        String.index(_:offsetBy:)();
        uint64_t v132 = String.subscript.getter();
        uint64_t v134 = v133;
        unint64_t v136 = v135;
        uint64_t v138 = v137;
        swift_bridgeObjectRelease();
        uint64_t v126 = MEMORY[0x186E1B610](v132, v134, v136, v138);
        uint64_t v140 = v139;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v125 = v140;
        __int128 v113 = (unint64_t)v658;
        goto LABEL_105;
      }

      --v129;
      swift_bridgeObjectRelease();
      v130 -= 16LL;
      if (!v129) {
        goto LABEL_102;
      }
    }

    __break(1u);
LABEL_102:
    swift_bridgeObjectRelease();
    __int128 v113 = (unint64_t)v658;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v141 = v659;
  if (!v125) {
    goto LABEL_90;
  }
LABEL_104:
  uint64_t v65 = (unint64_t)v114;
LABEL_105:
  if (!v681)
  {
    memset(v756, 0, 32);
LABEL_115:
    outlined destroy of Any?((uint64_t)v756, &demangling cache variable for type metadata for Any?);
LABEL_116:
    LOBYTE(v756[0]) = (_BYTE)v674;
    BYTE1(v756[0]) = (_BYTE)v675;
    BYTE2(v756[0]) = (_BYTE)v677;
    *((void *)&v756[0] + 1) = v126;
    *(void *)&v756[1] = v125;
    BYTE8(v756[1]) = (_BYTE)v680;
    memset(v755, 0, 24);
    swift_bridgeObjectRetain();
    __int16 v151 = (void *)v660;
    __int16 v152 = static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( &v723,  (uint64_t)v676,  (unint64_t)v678,  (uint64_t)v685,  (char *)v756,  (uint64_t)v755,  (uint64_t)v685,  (uint64_t)v684);
    if (v151)
    {

      swift_bridgeObjectRelease();
      v660 = 0LL;
      __int16 v153 = 0;
      uint64_t v123 = 0LL;
      if ((v688 & 1) == 0)
      {
LABEL_122:
        if (!v123)
        {
LABEL_257:
          if (one-time initialization token for attributedStringsCacheLock != -1) {
            swift_once();
          }
          v562 = v683 != 0;
          v563 = (uint64_t *)(static String.LocalizationValue.attributedStringsCacheLock + 16);
          v564 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
          swift_retain();
          os_unfair_lock_lock(v564);
          closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( v563,  (uint64_t)v676,  (uint64_t)v678,  (uint64_t)v682,  v562);
          os_unfair_lock_unlock(v564);
          swift_release();
          goto LABEL_260;
        }

        v635 = v153;
        __int16 v154 = one-time initialization token for attributedStringsCacheLock;
        swift_retain_n();
        if (v154 != -1) {
LABEL_321:
        }
          swift_once();
        __int16 v155 = v683 != 0;
        __int16 v156 = static String.LocalizationValue.attributedStringsCacheLock + 16;
        uint64_t v157 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
        swift_retain();
        os_unfair_lock_lock(v157);
        v607 = (uint64_t)v684;
        uint64_t v158 = (uint64_t *)v156;
        unint64_t v159 = v660;
        closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( v158,  (uint64_t)v676,  (uint64_t)v678,  v123,  v635 & 1,  (uint64_t)v682,  v155);
        v660 = v159;
        os_unfair_lock_unlock(v157);
        swift_release();
        swift_release_n();
        __int128 v113 = (unint64_t)v658;
        goto LABEL_125;
      }

      if (v13 == v8)
      {
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
        unint64_t v12 = result;
      }

      uint64_t v24 = v12 >> 16;
      if (v12 >> 16 >= v3) {
        goto LABEL_124;
      }
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = MEMORY[0x186E1B868](v12, v5, a2);
        unint64_t v12 = result;
        goto LABEL_14;
      }

      if ((v30 & 1) != 0)
      {
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65549;
        goto LABEL_14;
      }

      if ((v12 & 0xC001) != 0)
      {
        if ((a2 & 0x2000000000000000LL) == 0) {
          goto LABEL_107;
        }
      }

      else
      {
        unint64_t result = _StringGuts.scalarAlignSlow(_:)(v12, v5, a2);
        unint64_t v12 = result & 0xFFFFFFFFFFFFFFF2LL | 1;
        uint64_t v24 = result >> 16;
        if ((a2 & 0x2000000000000000LL) == 0)
        {
LABEL_107:
          unint64_t result = v27;
          if ((v5 & 0x1000000000000000LL) != 0)
          {
            LODWORD(v25) = *(unsigned __int8 *)(v27 + v24);
            if ((v25 & 0x80) == 0) {
              goto LABEL_117;
            }
          }

          else
          {
            unint64_t result = _StringObject.sharedUTF8.getter();
            LODWORD(v25) = *(unsigned __int8 *)(result + v24);
            if ((v25 & 0x80) == 0)
            {
LABEL_117:
              uint64_t v25 = 1LL;
              goto LABEL_118;
            }
          }

          goto LABEL_109;
        }
      }

      uint64_t v31 = v5;
      unint64_t v32 = v28;
      LODWORD(v25) = *((unsigned __int8 *)&v31 + v24);
      if ((v25 & 0x80) == 0) {
        goto LABEL_117;
      }
LABEL_109:
      LODWORD(v25) = __clz(v25 ^ 0xFF) - 24;
      if ((_DWORD)v25 != 4)
      {
        uint64_t v25 = v25;
        goto LABEL_118;
      }

      if ((v12 & 0xC000) != 0)
      {
        uint64_t v25 = 4LL;
LABEL_118:
        unint64_t v12 = (v12 + (v25 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
        goto LABEL_14;
      }

      unint64_t v12 = v12 & 0xFFFFFFFFFFFF0000LL | 0x4004;
LABEL_14:
      unint64_t v6 = v12 >> 14;
      if (v12 >> 14 >= 4 * v3) {
        return v11;
      }
    }
  }

  return 1LL;
}

              Swift::String v54 = (uint64_t)v20;
              *(void *)&__src[9] = v54;
              BYTE8(__src[9]) = (uint64_t)v20 == 0x7FFFFFFFFFFFFFFFLL;
              if ((v12 & 0x80) == 0)
              {
LABEL_59:
                if ((v12 & 0x100) == 0) {
                  goto LABEL_60;
                }
                goto LABEL_107;
              }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __int128 v40 = v38 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
    goto LABEL_101;
  }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v41 = v39 & 0xFFFFFFFFFFFFF0FFLL | (v48 << 8);
    goto LABEL_101;
  }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v38 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
    goto LABEL_101;
  }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __int128 v40 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
    goto LABEL_101;
  }

    if ((*(_BYTE *)(v6 + 168) & 1) != 0)
    {
LABEL_101:
      int v76 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
      goto LABEL_114;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)&v208;
    if ((*(_BYTE *)(v6 + 168) & 1) != 0) {
      goto LABEL_101;
    }
  }

  int v76 = String.subscript.getter();
LABEL_114:
  __int128 v98 = MEMORY[0x186E1B610](v76);
  char v100 = v99;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __int128 v101 = HIBYTE(v100) & 0xF;
  if ((v100 & 0x2000000000000000LL) == 0) {
    __int128 v101 = v98 & 0xFFFFFFFFFFFFLL;
  }
  if (!v101)
  {
    uint64_t v3 = &v203;
    if ((v8[168] & 1) != 0) {
      __int128 v103 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      __int128 v103 = String.subscript.getter();
    }
    __int128 v111 = MEMORY[0x186E1B610](v103);
    __int128 v113 = v112;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE14(v208) = 0;
    if ((v113 & 0x1000000000000000LL) != 0)
    {
      *(void *)&__int128 v211 = v111;
      *((void *)&v211 + 1) = v113;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      unint64_t v159 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v160 = (unsigned __int16 *)objc_msgSend(v159, sel__fastCharacterContents);
      __int128 v161 = v159;
      if (v160)
      {
        *(void *)&__int128 v211 = v111;
        *((void *)&v211 + 1) = v113;
        StringProtocol._ephemeralString.getter();
        uint64_t v162 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v163 = objc_msgSend(v162, sel_length);
        swift_unknownObjectRelease();
        uint64_t v164 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v160,  (uint64_t)v163,  0x10u,  1);
      }

      else
      {
        uint64_t v164 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v111,  v113,  0x10u,  1);
      }

      int v186 = v164;
      swift_bridgeObjectRelease_n();
      int v5 = &v211;
      unint64_t v4 = (unint64_t)&v208;
      uint64_t v3 = &v203;
      if ((v186 & 1) == 0) {
        goto LABEL_222;
      }
    }

    else
    {
      if ((v113 & 0x2000000000000000LL) != 0)
      {
        __int128 v115 = HIBYTE(v113) & 0xF;
        *(void *)&__int128 v211 = v111;
        *((void *)&v211 + 1) = v113 & 0xFFFFFFFFFFFFFFLL;
        __int128 v114 = (char *)&v211;
      }

      else if ((v111 & 0x1000000000000000LL) != 0)
      {
        __int128 v114 = (char *)((v113 & 0xFFFFFFFFFFFFFFFLL) + 32);
        __int128 v115 = v111 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        __int128 v114 = (char *)_StringObject.sharedUTF8.getter();
      }

      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, v115, 0x10u, 1)) {
        goto LABEL_222;
      }
    }

    swift_bridgeObjectRelease();
    *(void *)&v210[8] = v111;
    *(void *)&v210[16] = v113;
    if ((*(_BYTE *)(v6 + 192) & 1) == 0)
    {
      String.subscript.getter();
      swift_bridgeObjectRelease();
      goto LABEL_179;
    }

    if ((v8[192] & 1) != 0) {
      goto LABEL_179;
    }
    __int128 v116 = String.subscript.getter();
    uint64_t v2 = MEMORY[0x186E1B610](v116);
    uint64_t v1 = v117;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    HIBYTE(v208) = 0;
    if ((v1 & 0x1000000000000000LL) != 0)
    {
      *(void *)&__int128 v211 = v2;
      *((void *)&v211 + 1) = v1;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      uint64_t v190 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v191 = (unsigned __int16 *)objc_msgSend(v190, sel__fastCharacterContents);
      __int128 v192 = v190;
      if (v191)
      {
        *(void *)&__int128 v211 = v2;
        *((void *)&v211 + 1) = v1;
        StringProtocol._ephemeralString.getter();
        __int128 v193 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        __int128 v194 = objc_msgSend(v193, sel_length);
        swift_unknownObjectRelease();
        __int128 v195 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v191,  (uint64_t)v194,  0x40u,  1);
      }

      else
      {
        __int128 v195 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v2, v1, 0x40u, 1);
      }

      uint64_t v196 = v195;
      swift_bridgeObjectRelease();
      int v5 = &v211;
      unint64_t v4 = (unint64_t)&v208;
      uint64_t v3 = &v203;
      if ((v196 & 1) != 0) {
        goto LABEL_178;
      }
      goto LABEL_231;
    }

    if ((v1 & 0x2000000000000000LL) != 0)
    {
      uint64_t v119 = HIBYTE(v1) & 0xF;
      *(void *)&__int128 v211 = v2;
      *((void *)&v211 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
      __int128 v118 = (char *)&v211;
      goto LABEL_177;
    }

    if ((v2 & 0x1000000000000000LL) != 0)
    {
      __int128 v118 = (char *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v119 = v2 & 0xFFFFFFFFFFFFLL;
      goto LABEL_177;
    }

  if (v229) {
    MEMORY[0x186E20E60](v229, -1LL, -1LL);
  }
}

              if ([v62 isEqual:&stru_189CA6A28])
              {
                uint64_t v67 = -[NSString stringByAppendingPathComponent:](v93, "stringByAppendingPathComponent:", v58);
                if (-[NSFileManager fileExistsAtPath:isDirectory:](v83, "fileExistsAtPath:isDirectory:", v67, v106))
                {
                  if (v106[0])
                  {
                    uint64_t v61 = (void *)v91;
                    uint64_t v60 = v67;
                    goto LABEL_86;
                  }
                }
              }
            }
          }

          filterTypes = v55;
          BOOL v17 = v88;
          int64_t v46 = v75;
LABEL_104:
          n = v82;
          Swift::String v54 = v91;
LABEL_105:
          -[NSArray addObjectsFromArray:](v46, "addObjectsFromArray:", v54);
        }

        uint64_t v80 = [v76 countByEnumeratingWithState:&v97 objects:v96 count:16];
      }

      while (v80);
    }

    __int128 v68 = -[NSArray count](v46, "count");
    unint64_t v8 = v68;
    Swift::String v69 = v74;
    if (!v74 && !v68) {
      return v8;
    }
    if (v68 >= 2) {
      break;
    }
    if (v68 != 1
      || (Swift::String v69 = -[NSArray objectAtIndex:](v46, "objectAtIndex:", 0LL),
          -[NSFileManager fileExistsAtPath:isDirectory:](v83, "fileExistsAtPath:isDirectory:", v69, v123))
      && !v123[0])
    {
      if (outputName) {
        *outputName = v69;
      }
      if (outputArray)
      {
        Swift::String v70 = [MEMORY[0x189603F18] arrayWithObject:v69];
        Swift::String v71 = outputArray;
        int64_t v46 = (NSArray *)v70;
        unint64_t v8 = 1LL;
        goto LABEL_121;
      }

      return 1LL;
    }

    uint64_t v74 = v69;
    uint64_t v18 = (void *)[MEMORY[0x189603F18] arrayWithObject:v69];
    -[NSArray removeAllObjects](v46, "removeAllObjects");
    BOOL v17 = (NSString *)&stru_189CA6A28;
  }

  if (outputName) {
    *outputName = (NSString *)_NSFindCommonPrefixInStringArray(v46, v84);
  }
  Swift::String v71 = outputArray;
  if (outputArray) {
LABEL_121:
  }
    *Swift::String v71 = v46;
  return v8;
}

uint64_t sub_182F9F41C()
{
  return swift_deallocObject();
}

uint64_t sub_182F9F42C()
{
  return swift_deallocObject();
}

uint64_t sub_182F9F43C()
{
  return swift_deallocObject();
}

uint64_t outlined copy of XMLPlistError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5 || a5 == 5 || a5 == 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for XMLPlistError(uint64_t a1)
{
  return outlined consume of XMLPlistError( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of XMLPlistError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5 || a5 == 5 || a5 == 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for XMLPlistError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  outlined copy of XMLPlistError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for XMLPlistError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  outlined copy of XMLPlistError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of XMLPlistError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for XMLPlistError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of XMLPlistError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XMLPlistError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XMLPlistError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 32) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for XMLPlistError(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t destructiveInjectEnumTag for XMLPlistError(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)uint64_t result = a2 - 6;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 6;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
  }

  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for XMLPlistError()
{
  return &type metadata for XMLPlistError;
}

ValueMetadata *type metadata accessor for XMLPlistMap.ArrayIterator()
{
  return &type metadata for XMLPlistMap.ArrayIterator;
}

ValueMetadata *type metadata accessor for XMLPlistMap.DictionaryIterator()
{
  return &type metadata for XMLPlistMap.DictionaryIterator;
}

unint64_t *initializeBufferWithCopyOfBuffer for XMLPlistMap.Value( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of XMLPlistMap.Value(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for XMLPlistMap.Value(unint64_t *a1)
{
  return outlined consume of XMLPlistMap.Value(*a1);
}

unint64_t outlined consume of XMLPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }

  return result;
}

unint64_t *assignWithCopy for XMLPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of XMLPlistMap.Value(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of XMLPlistMap.Value(v4);
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for XMLPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of XMLPlistMap.Value(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for XMLPlistMap.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x78 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 120);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x77) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for XMLPlistMap.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x77)
  {
    *(void *)uint64_t result = a2 - 120;
    if (a3 >= 0x78) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x78) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t getEnumTag for XMLPlistMap.Value(void *a1)
{
  uint64_t v1 = *a1 >> 60;
  else {
    return (*a1 >> 3) + 8;
  }
}

void *destructiveProjectEnumData for XMLPlistMap.Value(void *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for XMLPlistMap.Value(unint64_t *result, uint64_t a2)
{
  if (a2 < 8)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v3 = a2 << 60;
  }

  else
  {
    uint64_t v2 = 8LL * (a2 - 8);
    unint64_t v3 = 0x8000000000000000LL;
  }

  *uint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for XMLPlistMap.Value()
{
  return &type metadata for XMLPlistMap.Value;
}

uint64_t partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:));
}

{
  return partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:));
}

uint64_t partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))
{
  return a5(a1, a2, a3, a4, v5[4], v5[5], v5[6], v5[2], v5[3]);
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  unint64_t result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A4F0], MEMORY[0x18961A4C0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A4F8], MEMORY[0x18961A4C0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A8F0], MEMORY[0x18961A8C8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A8F8], MEMORY[0x18961A8C8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A640], MEMORY[0x18961A610]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for UInt8, MEMORY[0x18961A610]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A648], MEMORY[0x18961A610]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }

  return result;
}

uint64_t sub_182F9F9E0()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for XMLPlistMap.Region()
{
  return &type metadata for XMLPlistMap.Region;
}

uint64_t getEnumTagSinglePayload for XMLPlistTag(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

uint64_t storeEnumTagSinglePayload for XMLPlistTag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_182F9FADC + 4 * byte_18372955C[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_182F9FB10 + 4 * byte_183729557[v4]))();
}

uint64_t sub_182F9FB10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F9FB18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182F9FB20LL);
  }
  return result;
}

uint64_t sub_182F9FB2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182F9FB34LL);
  }
  *(_BYTE *)unint64_t result = a2 + 10;
  return result;
}

uint64_t sub_182F9FB38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182F9FB40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XMLPlistTag()
{
  return &type metadata for XMLPlistTag;
}

unint64_t lazy protocol witness table accessor for type XMLPlistTag and conformance XMLPlistTag()
{
  unint64_t result = lazy protocol witness table cache variable for type XMLPlistTag and conformance XMLPlistTag;
  if (!lazy protocol witness table cache variable for type XMLPlistTag and conformance XMLPlistTag)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for XMLPlistTag, &type metadata for XMLPlistTag);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type XMLPlistTag and conformance XMLPlistTag);
  }

  return result;
}

NSValue __swiftcall _NSRange._bridgeToObjectiveC()()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  type metadata accessor for _NSRange(0LL);
  return (NSValue)objc_msgSend( objc_allocWithZone((Class)NSValue),  sel_initWithBytes_objCType_,  &v3,  "{_NSRange=QQ}");
}

id static _NSRange._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static _NSRange._forceBridgeFromObjectiveC(_:result:)( a1,  a2,  type metadata accessor for _NSRange,  "{_NSRange=QQ}");
}

BOOL static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  type metadata accessor for _NSRange,  "{_NSRange=QQ}");
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance _NSRange()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  __int128 v2 = *v0;
  return objc_msgSend( objc_allocWithZone((Class)NSValue),  sel_initWithBytes_objCType_,  &v2,  "{_NSRange=QQ}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange( a1,  a2,  a3,  a4,  "{_NSRange=QQ}");
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance _NSRange( void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  type metadata accessor for _NSRange,  "{_NSRange=QQ}");
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance _NSRange@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized static _NSRange._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

NSValue __swiftcall CGRect._bridgeToObjectiveC()()
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v5 = v0;
  uint64_t v6 = v1;
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  type metadata accessor for CGRect(0LL);
  return (NSValue)objc_msgSend( objc_allocWithZone((Class)NSValue),  sel_initWithBytes_objCType_,  &v5,  "{CGRect={CGPoint=dd}{CGSize=dd}}");
}

id static CGRect._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGRect(0LL);
  id result = (id)strcmp(v4, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(_BYTE *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 32);
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGRect()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  __int128 v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  return objc_msgSend( objc_allocWithZone((Class)NSValue),  sel_initWithBytes_objCType_,  v3,  "{CGRect={CGPoint=dd}{CGSize=dd}}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGRect( void *a1, uint64_t a2)
{
  id v3 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(_BYTE *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 32);
  }

  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGRect( void *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = specialized static CGRect._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
}

NSValue __swiftcall CGPoint._bridgeToObjectiveC()()
{
  return (NSValue)CGPoint._bridgeToObjectiveC()(type metadata accessor for CGPoint, (uint64_t)"{CGPoint=dd}", v0, v1);
}

id static CGPoint._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGPoint(0LL);
  id result = (id)strcmp(v4, "{CGPoint=dd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint( a1,  a2,  (uint64_t)"{CGPoint=dd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGPoint( void *a1, uint64_t a2)
{
  id v3 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGPoint=dd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }

  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGPoint( void *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = specialized static CGPoint._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)(a2 + 8) = v3;
}

NSValue __swiftcall CGVector._bridgeToObjectiveC()()
{
  return (NSValue)CGPoint._bridgeToObjectiveC()(type metadata accessor for CGVector, (uint64_t)"{CGVector=dd}", v0, v1);
}

id static CGVector._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static _NSRange._forceBridgeFromObjectiveC(_:result:)( a1,  a2,  type metadata accessor for CGVector,  "{CGVector=dd}");
}

id static _NSRange._forceBridgeFromObjectiveC(_:result:)( void *a1, uint64_t a2, void (*a3)(void), const char *a4)
{
  id v7 = a1;
  uint64_t v8 = (const char *)objc_msgSend(v7, sel_objCType);
  a3(0LL);
  id result = (id)strcmp(v8, a4);
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v7, sel_getValue_size_, a2, 16);
  }

  return result;
}

BOOL static CGVector._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  type metadata accessor for CGVector,  "{CGVector=dd}");
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGVector( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint( a1,  a2,  (uint64_t)"{CGVector=dd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGVector( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange( a1,  a2,  a3,  a4,  "{CGVector=dd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  id v7 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v7, sel_objCType), a5);
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v7, sel_getValue_size_, a2, 16);
  }

  return result;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CGVector( void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  type metadata accessor for CGVector,  "{CGVector=dd}");
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGVector( void *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = specialized static CGVector._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)(a2 + 8) = v3;
}

NSValue __swiftcall CGSize._bridgeToObjectiveC()()
{
  return (NSValue)CGPoint._bridgeToObjectiveC()(type metadata accessor for CGSize, (uint64_t)"{CGSize=dd}", v0, v1);
}

id CGPoint._bridgeToObjectiveC()(void (*a1)(void), uint64_t a2, double a3, double a4)
{
  __int128 v6[2] = *MEMORY[0x1895F89C0];
  *(double *)uint64_t v6 = a3;
  *(double *)&v6[1] = a4;
  a1(0LL);
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, v6, a2);
}

id static CGSize._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGSize(0LL);
  id result = (id)strcmp(v4, "{CGSize=dd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGSize( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint( a1,  a2,  (uint64_t)"{CGSize=dd}");
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  __int128 v5 = *v3;
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, &v5, a3);
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGSize( void *a1, uint64_t a2)
{
  id v3 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGSize=dd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }

  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGSize( void *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = specialized static CGSize._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)(a2 + 8) = v3;
}

NSValue __swiftcall CGAffineTransform._bridgeToObjectiveC()()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  __int128 v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  _OWORD v3[2] = v0[2];
  type metadata accessor for CGAffineTransform(0LL);
  return (NSValue)objc_msgSend( objc_allocWithZone((Class)NSValue),  sel_initWithBytes_objCType_,  v3,  "{CGAffineTransform=dddddd}");
}

id static CGAffineTransform._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGAffineTransform(0LL);
  id result = (id)strcmp(v4, "{CGAffineTransform=dddddd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 48);
  }

  return result;
}

double static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)@<D0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGAffineTransform()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  __int128 v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  _OWORD v3[2] = v0[2];
  return objc_msgSend( objc_allocWithZone((Class)NSValue),  sel_initWithBytes_objCType_,  v3,  "{CGAffineTransform=dddddd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGAffineTransform( void *a1, uint64_t a2)
{
  id v3 = a1;
  id result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGAffineTransform=dddddd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 48);
  }

  return result;
}

double protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGAffineTransform@<D0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

uint64_t NSValue.value<A>(of:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  else {
    uint64_t v5 = 0LL;
  }
  if (v5)
  {
    id v6 = v2;
    objc_msgSend(v6, sel_objCType);
    uint64_t v7 = String.init(cString:)();
    BOOL v9 = v7 == 30302 && v8 == 0xE200000000000000LL;
    if (v9
      || (v10 = v7, uint64_t v11 = v8, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      || (v10 == 64 ? (BOOL v19 = v11 == 0xE100000000000000LL) : (BOOL v19 = 0), v19))
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
      {
        uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL);
        return v18(a2, 1LL, 1LL, a1);
      }
    }

    if (objc_msgSend(v6, sel_nonretainedObjectValue))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(v21, sizep);
    }

    else
    {
      *(_OWORD *)sizep = 0u;
      __int128 v23 = 0u;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    int v17 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( a2,  v17 ^ 1u,  1LL,  a1);
  }

  else
  {
    uint64_t v12 = *(void *)(a1 - 8);
    int v13 = *(_DWORD *)(v12 + 80);
    if ((v13 & 0x10000) != 0)
    {
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      return v18(a2, 1LL, 1LL, a1);
    }

    sizep[0] = 0LL;
    *(void *)&v21[0] = 0LL;
    id v14 = v2;
    NSGetSizeAndAlignment((const char *)objc_msgSend(v14, sel_objCType), sizep, (NSUInteger *)v21);
    if (*(void *)(v12 + 64) == sizep[0] && *(void *)&v21[0] == v13 + 1LL)
    {
      uint64_t v15 = swift_slowAlloc();
      objc_msgSend(v14, sel_getValue_size_, v15, sizep[0]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, v15, a1);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0LL, 1LL, a1);
      return MEMORY[0x186E20E60](v15, -1LL, -1LL);
    }

    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, 1LL, 1LL, a1);
    }
  }

uint64_t specialized static _NSRange._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  v4[2] = *MEMORY[0x1895F89C0];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for _NSRange(0LL);
  if (strcmp(v2, "{_NSRange=QQ}"))
  {
    __break(1u);
    goto LABEL_5;
  }

  v4[0] = 0LL;
  v4[1] = 0LL;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return v4[0];
}

BOOL specialized static CGRect._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGRect(0LL);
  int v5 = strcmp(v4, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if (v5)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 32) = 1;
  }

  else
  {
    *(_BYTE *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    objc_msgSend(v3, sel_getValue_size_, a2, 32);
  }

  return v5 == 0;
}

double specialized static CGRect._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGRect(0LL);
  if (strcmp(v2, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
  {
    __break(1u);
    goto LABEL_5;
  }

  memset(v4, 0, sizeof(v4));
  objc_msgSend(v1, sel_getValue_size_, v4, 32);
  return *(double *)v4;
}

BOOL specialized static CGPoint._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGPoint(0LL);
  int v5 = strcmp(v4, "{CGPoint=dd}");
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  if (v5)
  {
    *(_BYTE *)(a2 + 16) = 1;
  }

  else
  {
    *(_BYTE *)(a2 + 16) = 0;
    objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }

  return v5 == 0;
}

double specialized static CGPoint._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  _OWORD v4[2] = *MEMORY[0x1895F89C0];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGPoint(0LL);
  if (strcmp(v2, "{CGPoint=dd}"))
  {
    __break(1u);
    goto LABEL_5;
  }

  v4[0] = 0LL;
  v4[1] = 0LL;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return *(double *)v4;
}

BOOL specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)( void *a1, uint64_t a2, void (*a3)(void), const char *a4)
{
  id v7 = a1;
  uint64_t v8 = (const char *)objc_msgSend(v7, sel_objCType);
  a3(0LL);
  int v9 = strcmp(v8, a4);
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  if (v9)
  {
    *(_BYTE *)(a2 + 16) = 1;
  }

  else
  {
    *(_BYTE *)(a2 + 16) = 0;
    objc_msgSend(v7, sel_getValue_size_, a2, 16);
  }

  return v9 == 0;
}

double specialized static CGVector._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  _OWORD v4[2] = *MEMORY[0x1895F89C0];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGVector(0LL);
  if (strcmp(v2, "{CGVector=dd}"))
  {
    __break(1u);
    goto LABEL_5;
  }

  v4[0] = 0LL;
  v4[1] = 0LL;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return *(double *)v4;
}

BOOL specialized static CGSize._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGSize(0LL);
  int v5 = strcmp(v4, "{CGSize=dd}");
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  if (v5)
  {
    *(_BYTE *)(a2 + 16) = 1;
  }

  else
  {
    *(_BYTE *)(a2 + 16) = 0;
    objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }

  return v5 == 0;
}

double specialized static CGSize._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  _OWORD v4[2] = *MEMORY[0x1895F89C0];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v1 = a1;
  uint64_t v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGSize(0LL);
  if (strcmp(v2, "{CGSize=dd}"))
  {
    __break(1u);
    goto LABEL_5;
  }

  v4[0] = 0LL;
  v4[1] = 0LL;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return *(double *)v4;
}

BOOL specialized static CGAffineTransform._conditionallyBridgeFromObjectiveC(_:result:)( void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGAffineTransform(0LL);
  int v5 = strcmp(v4, "{CGAffineTransform=dddddd}");
  if (v5)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_BYTE *)(a2 + 48) = 1;
  }

  else
  {
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    objc_msgSend(v3, sel_getValue_size_, a2, 48);
  }

  return v5 == 0;
}

double specialized static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)@<D0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (!a1) {
LABEL_5:
  }
    __break(1u);
  id v3 = a1;
  uint64_t v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGAffineTransform(0LL);
  if (strcmp(v4, "{CGAffineTransform=dddddd}"))
  {
    __break(1u);
    goto LABEL_5;
  }

  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v8 = 0u;
  objc_msgSend(v3, sel_getValue_size_, &v8, 48);
  double result = *(double *)&v8;
  __int128 v6 = v9;
  __int128 v7 = v10;
  *a2 = v8;
  a2[1] = v6;
  a2[2] = v7;
  return result;
}

uint64_t type metadata completion function for _MutableHandle()
{
  return swift_initClassMetadata2();
}

void _MutableHandle.hash(into:)()
{
  id v1 = *(id *)(v0 + 16);
  NSObject.hash(into:)();
}

id static _MutableHandle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 16), sel_isEqual_, *(void *)(a2 + 16));
}

uint64_t _MutableHandle.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _MutableHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MutableHandle);
}

Swift::Int _MutableHandle.hashValue.getter()
{
  id v1 = *(id *)(v0 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _MutableHandle<A>()
{
  return _MutableHandle.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance _MutableHandle<A>()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _MutableHandle<A>()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _MutableHandle<A>( uint64_t *a1, uint64_t *a2)
{
  return (unint64_t)static _MutableHandle.== infix(_:_:)(*a1, *a2) & 1;
}

void base witness table accessor for Equatable in _MutableHandle<A>()
{
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  __asm { BR              X10 }

  return result;
}

id sub_182FA1414()
{
  uint64_t v7 = v0;
  __int16 v8 = v2;
  char v9 = BYTE2(v2);
  char v10 = BYTE3(v2);
  char v11 = BYTE4(v2);
  char v12 = BYTE5(v2);
  id v3 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytesNoCopy_length_freeWhenDone_,  &v7,  BYTE6(v2),  0);
  id v4 = objc_msgSend(v3, sel_base64EncodedStringWithOptions_, v1);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

id Data.init(base64Encoded:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBase64EncodedString_options_,  String._bridgeToObjectiveCImpl()(),  a3);
  swift_unknownObjectRelease();
  if (!v3) {
    return 0LL;
  }
  id v4 = specialized Data.init(referencing:)(v3);

  return v4;
}

void Data.init(base64Encoded:options:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

id sub_182FA1878()
{
  uint64_t v8 = v1;
  __int16 v9 = v0;
  char v10 = BYTE2(v0);
  char v11 = BYTE3(v0);
  char v12 = BYTE4(v0);
  char v13 = BYTE5(v0);
  id v4 = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 3912)), sel_initWithBytes_length_, &v8, BYTE6(v0));
  id v5 = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 3912)), sel_initWithBase64EncodedData_options_, v4, v2);
  outlined consume of Data._Representation(v1, v0);

  if (!v5) {
    return 0LL;
  }
  id v6 = specialized Data.init(referencing:)(v5);

  return v6;
}

void Data.base64EncodedData(options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

id sub_182FA1A90()
{
  uint64_t v8 = v0;
  __int16 v9 = v2;
  char v10 = BYTE2(v2);
  char v11 = BYTE3(v2);
  char v12 = BYTE4(v2);
  char v13 = BYTE5(v2);
  id v3 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytesNoCopy_length_freeWhenDone_,  &v8,  BYTE6(v2),  0);
  id v4 = objc_msgSend(v3, sel_base64EncodedDataWithOptions_, v1);
  if (v4)
  {
    id v5 = v4;
    id v6 = specialized Data.init(referencing:)(v5);
  }

  else
  {

    return 0LL;
  }

  return v6;
}

uint64_t specialized _BridgedStoredNSError.init(_:userInfo:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithDomain_code_userInfo_, v5, a1, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v7 = objc_msgSend(v6, sel_domain);
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v10 == v11) {
    goto LABEL_7;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease_n();
  }

  *a2 = v6;
  return result;
}

uint64_t FloatingPointParseStrategy.formatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t FloatingPointParseStrategy.formatStyle.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 40LL))(v2, a1);
}

uint64_t (*FloatingPointParseStrategy.formatStyle.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointParseStrategy.lenient.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t FloatingPointParseStrategy.lenient.setter(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*FloatingPointParseStrategy.lenient.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void FloatingPointParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v21 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  _OWORD v18[2] = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  v18[1] = (char *)v18 - v10;
  MEMORY[0x1895F8858](v9);
  v18[0] = (char *)v18 - v11;
  uint64_t v19 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v19);
  char v20 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v22);
  MEMORY[0x1895F8858](v13);
  uint64_t v14 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v14);
  char v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 44)));
  uint64_t v25 = v2;
  uint64_t v26 = a2;
  outlined init with copy of ICUNumberFormatter.Signature( v2 + *(int *)(a2 + 48),  (uint64_t)v16,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  int v17 = (char *)sub_182FA2234 + 4 * byte_1837299F0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_182FA2234()
{
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v5 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v5;
    }
    else {
      Swift::UInt64 v6 = 0LL;
    }
    Hasher._combine(_:)(v6);
  }

  uint64_t v8 = *(int **)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  outlined init with take of LocalePreferences?( v2 + 16,  v4 - 152,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v9 = *(unsigned __int8 *)(v2 + 73);
  if (v9 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v10 = v9 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }

  int v11 = *(unsigned __int16 *)(v2 + 74);
  unsigned int v12 = v11 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v11 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12 & 1);
    Hasher._combine(_:)((v12 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v12) & 1);
  }

  int v13 = *(unsigned __int8 *)(v2 + 77);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }

  uint64_t v15 = *(void *)(v0 + 64);
  uint64_t v16 = *(void *)v0;
  outlined init with copy of (Hashable & Sendable)?( v2 + v8[9],  *(void *)v0,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v16, 1LL, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v17, v16, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v15);
  }

  uint64_t v18 = v2 + v8[10];
  int v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v20 = *(void *)v18;
    Hasher._combine(_:)(1u);
    if ((v19 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v21 = v20;
      }
      else {
        Swift::UInt64 v21 = 0LL;
      }
      Hasher._combine(_:)(v21);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v20);
    }
  }

  uint64_t v22 = *(void *)(v0 + 80);
  Swift::UInt v23 = *(unsigned __int8 *)(v2 + v8[11]);
  if (v23 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
  }

  uint64_t v24 = *(void *)(v0 + 72);
  outlined destroy of ICUNumberFormatter.Signature( v2,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v25 = *(void *)(v24 + *(int *)(v22 + 52) + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 48);
  swift_unknownObjectRetain();
  if ((v27(ObjectType, v25) & 1) != 0)
  {
    Swift::UInt8 v28 = 1;
LABEL_34:
    Hasher._combine(_:)(v28);
    return swift_unknownObjectRelease();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v25 + 64))(ObjectType, v25);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v29 = *(void (**)(uint64_t, uint64_t))(v25 + 464);
  swift_unknownObjectRetain();
  v29(ObjectType, v25);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( v0 + 376,  v0 + 520,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( v0 + 520,  v0 + 664,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg(v0 + 664) == 1)
  {
    Swift::UInt8 v28 = 0;
    goto LABEL_34;
  }

  outlined init with take of LocalePreferences?( v0 + 520,  v0 + 232,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  int v30 = *(unsigned __int8 *)(v0 + 232);
  if (v30 == 2)
  {
    Swift::UInt8 v31 = 0;
  }

  else
  {
    Swift::UInt8 v31 = v30 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v31);
  uint64_t v32 = *(void *)(v0 + 240);
  if (!v32)
  {
    Hasher._combine(_:)(0);
    __int128 v37 = (void *)(v0 + 232);
    goto LABEL_49;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v32 + 16));
  uint64_t v33 = *(void *)(v32 + 16);
  if (!v33)
  {
    outlined init with take of LocalePreferences?( v0 + 520,  v0 + 88,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    __int128 v37 = (void *)(v0 + 88);
LABEL_49:
    outlined retain of LocalePreferences(v37);
    if (!*(void *)(v0 + 256)) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }

  outlined retain of LocalePreferences?( v0 + 520,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v34 = v32 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v34 += 16LL;
    --v33;
  }

  while (v33);
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 256))
  {
LABEL_43:
    Hasher._combine(_:)(0);
    if (!*(void *)(v0 + 272)) {
      goto LABEL_44;
    }
    goto LABEL_51;
  }

uint64_t static FloatingPointParseStrategy.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (uint64_t v10 = type metadata accessor for FloatingPointParseStrategy(0LL, a3, a4, a5),
        *(unsigned __int8 *)(a1 + *(int *)(v10 + 44)) == *(unsigned __int8 *)(a2 + *(int *)(v10 + 44)))
    && (uint64_t v11 = v10,
        (static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)( a1 + *(int *)(v10 + 48),  a2 + *(int *)(v10 + 48)) & 1) != 0))
  {
    uint64_t v12 = *(int *)(v11 + 52);
    __int128 v13 = *(_OWORD *)(a1 + v12);
    __int128 v16 = *(_OWORD *)(a2 + v12);
    __int128 v17 = v13;
    char v14 = specialized static Locale.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v16);
  }

  else
  {
    char v14 = 0;
  }

  return v14 & 1;
}

BOOL static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FloatingPointParseStrategy.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t FloatingPointParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x745374616D726F66LL && a2 == 0xEB00000000656C79LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x746E65696E656CLL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x80000001839CA3D0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

Swift::Int FloatingPointParseStrategy.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t FloatingPointParseStrategy.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182FA3494 + 4 * byte_1837299F4[a1]))( 0x745374616D726F66LL,  0xEB00000000656C79LL);
}

uint64_t sub_182FA3494()
{
  return 0x746E65696E656CLL;
}

unint64_t sub_182FA34AC()
{
  return 0xD000000000000010LL;
}

uint64_t sub_182FA34C8()
{
  return 0x656C61636F6CLL;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointParseStrategy<A>.CodingKeys( char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FloatingPointParseStrategy<A>.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance FloatingPointParseStrategy<A>.CodingKeys( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointParseStrategy<A>.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FloatingPointParseStrategy<A>.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FloatingPointParseStrategy<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = FloatingPointParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FloatingPointParseStrategy<A>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = specialized FloatingPointParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointParseStrategy<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointParseStrategy<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointParseStrategy.encode(to:)(void *a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  v15[0] = a2;
  v15[1] = v3;
  uint64_t v5 = type metadata accessor for FloatingPointParseStrategy.CodingKeys(255LL, v3, v4, a2[4]);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointParseStrategy<A>.CodingKeys, v5);
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  int v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  uint64_t v10 = v15[2];
  uint64_t v11 = v15[3];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v13 = v7;
  uint64_t v14 = v15[0];
  LOBYTE(v16) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v16) = 2;
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType,  (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  __int128 v16 = *(_OWORD *)(v10 + *(int *)(v14 + 52));
  char v17 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v9, v6);
}

Swift::Int FloatingPointParseStrategy.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t FloatingPointParseStrategy.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v31 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v31);
  uint64_t v34 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v38 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for FloatingPointParseStrategy.CodingKeys(255LL, a2, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointParseStrategy<A>.CodingKeys, v12);
  uint64_t v37 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v32 = *(void *)(v37 - 8);
  MEMORY[0x1895F8858](v37);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v35 = a3;
  uint64_t v36 = a2;
  uint64_t v15 = type metadata accessor for FloatingPointParseStrategy(0LL, a2, a3, a4);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v19 = a1[3];
  __int128 v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  __int128 v39 = v14;
  uint64_t v20 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  }
  uint64_t v41 = v16;
  uint64_t v22 = v33;
  uint64_t v21 = (uint64_t)v34;
  uint64_t v23 = v32;
  LOBYTE(v42) = 0;
  uint64_t v24 = v36;
  uint64_t v25 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v18, v38, v24);
  LOBYTE(v42) = 1;
  char v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v38 = (char *)v15;
  v18[*(int *)(v15 + 44)] = v26 & 1;
  LOBYTE(v42) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType,  (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature( v21,  (uint64_t)&v18[*((int *)v38 + 12)],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  char v43 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v39, v25);
  unint64_t v27 = v38;
  *(_OWORD *)&v18[*((int *)v38 + 13)] = v42;
  uint64_t v28 = v41;
  (*(void (**)(uint64_t, char *, char *))(v41 + 16))(v30, v18, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  return (*(uint64_t (**)(char *, char *))(v28 + 8))(v18, v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointParseStrategy<A>@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointParseStrategy.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointParseStrategy<A>( void *a1, void *a2)
{
  return FloatingPointParseStrategy.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointParseStrategy<A>( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointParseStrategy<A>( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static FloatingPointParseStrategy.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t FloatingPointParseStrategy.parse(_:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v6 = a3;
  v153._unint64_t object = a2;
  v153._uint64_t countAndFlagsBits = a1;
  uint64_t v137 = a4;
  uint64_t v157 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v143 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  char v142 = (char *)&v126 - v10;
  uint64_t v136 = *(void *)(v6 + 32);
  uint64_t v141 = *(void *)(v136 + 8);
  uint64_t v147 = v11;
  uint64_t v140 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v140);
  char v139 = (char *)&v126 - v12;
  uint64_t v145 = v7;
  uint64_t v144 = v8;
  uint64_t v149 = swift_getAssociatedTypeWitness();
  uint64_t v138 = *(void *)(v149 - 8);
  MEMORY[0x1895F8858](v149);
  uint64_t v148 = (char *)&v126 - v13;
  uint64_t v14 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v126 - v19;
  uint64_t v21 = *(int *)(v6 + 44);
  uint64_t v22 = v4 + *(int *)(v6 + 48);
  uint64_t v23 = (uint64_t *)(v4 + *(int *)(v6 + 52));
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  uint64_t v146 = v5;
  LOBYTE(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v6) = *(_BYTE *)(v5 + v21);
  outlined init with copy of ICUNumberFormatter.Signature( v22,  (uint64_t)&v126 - v19,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v28 = v27(ObjectType, v25);
  uint64_t v30 = v29;
  uint64_t v151 = v24;
  swift_unknownObjectRelease();
  uint64_t v31 = (uint64_t *)&v20[*(int *)(v14 + 20)];
  *uint64_t v31 = v28;
  v31[1] = v30;
  uint64_t v133 = (void *)v14;
  v20[*(int *)(v14 + 24)] = v6;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v32 = static ICULegacyNumberFormatter.cache;
  uint64_t countAndFlagsBits = unk_18C5CB2B0;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v18,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  uint64_t v134 = v15;
  unint64_t v34 = (*(unsigned __int8 *)(v15 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v152 = swift_allocObject();
  uint64_t v135 = (uint64_t)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v18,  v152 + v34,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  uint64_t v35 = countAndFlagsBits + 16;
  uint64_t v36 = countAndFlagsBits + 24;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(countAndFlagsBits + 24));
  uint64_t v37 = (void *)v154;
  uint64_t v38 = specialized closure #1 in FormatterCache.formatter(for:creator:)(countAndFlagsBits + 16, (uint64_t)v20);
  uint64_t v150 = v37;
  if (v37)
  {
LABEL_80:
    os_unfair_lock_unlock((os_unfair_lock_t)v36);
    __break(1u);
    goto LABEL_81;
  }

  uint64_t v39 = v38;
  os_unfair_lock_unlock((os_unfair_lock_t)(countAndFlagsBits + 24));
  swift_release();
  if (!v39)
  {
    Swift::String v72 = v150;
    implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    if (v72)
    {

      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v75;
      v155[0] = 0LL;
      v155[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(43LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v155, "Cannot parse ");
      HIWORD(v155[1]) = -4864;
      String.append(_:)(v153);
      v76._unint64_t object = (void *)0x80000001839CA370LL;
      v76._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v76);
      uint64_t v77 = v155[0];
      uint64_t v78 = v155[1];
      *(void *)(inited + 72) = MEMORY[0x189617FA8];
      *(void *)(inited + 48) = v77;
      *(void *)(inited + 56) = v78;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v43 = static _DictionaryStorage.allocate(capacity:)();
      uint64_t v20 = (char *)v155;
      outlined init with copy of (Hashable & Sendable)?( inited + 32,  (uint64_t)v155,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
      uint64_t v79 = v155[0];
      uint64_t v35 = v155[1];
      swift_retain();
      unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v35);
      if ((v81 & 1) == 0)
      {
        *(void *)(v43 + 8 * (v80 >> 6) + 64) |= 1LL << v80;
        uint64_t v82 = (uint64_t *)(*(void *)(v43 + 48) + 16 * v80);
        uint64_t *v82 = v79;
        v82[1] = v35;
        outlined init with take of Any(&v156, (_OWORD *)(*(void *)(v43 + 56) + 32 * v80));
        uint64_t v83 = *(void *)(v43 + 16);
        BOOL v64 = __OFADD__(v83, 1LL);
        uint64_t v84 = v83 + 1;
        if (!v64)
        {
          *(void *)(v43 + 16) = v84;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v85 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v86 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v87 = objc_msgSend(v85, sel_initWithDomain_code_userInfo_, v86, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v20 = (char *)objc_msgSend(v87, sel_domain);
          id v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          uint64_t v43 = v89;

          if (v88 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v43 == v90)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            LODWORD(v35) = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v35 & 1) == 0) {
              goto LABEL_41;
            }
          }

          return swift_willThrow();
        }

        goto LABEL_39;
      }

      goto LABEL_38;
    }

    uint64_t v92 = v73;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(countAndFlagsBits + 24));
    uint64_t v93 = *(void *)(*(void *)(countAndFlagsBits + 16) + 16LL);
    uint64_t v132 = *(void *)(countAndFlagsBits + 16);
    if (v32 < v93) {
      *(void *)uint64_t v35 = MEMORY[0x18961AFF0];
    }
    else {
      swift_bridgeObjectRetain();
    }
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v155[0] = *(void *)v35;
    uint64_t v43 = v155[0];
    *(void *)uint64_t v35 = 0x8000000000000000LL;
    unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
    uint64_t v96 = *(void *)(v43 + 16);
    BOOL v97 = (v95 & 1) == 0;
    uint64_t v98 = v96 + v97;
    if (__OFADD__(v96, v97)) {
      goto LABEL_40;
    }
    LODWORD(v35) = v95;
    uint64_t v99 = *(void *)(v43 + 24);
    uint64_t v154 = v92;
    uint64_t v150 = 0LL;
    os_unfair_lock_t v131 = (os_unfair_lock_t)(countAndFlagsBits + 24);
    if (v99 >= v98)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_42;
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v98,  isUniquelyReferenced_nonNull_native);
      uint64_t v43 = v155[0];
      unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
      if ((v35 & 1) != (v101 & 1)) {
        goto LABEL_82;
      }
      unint64_t v49 = v100;
    }

    uint64_t v36 = v149;
    __int128 v40 = v148;
    if ((v35 & 1) == 0) {
      goto LABEL_77;
    }
    goto LABEL_33;
  }

  uint64_t v154 = v39;
  swift_release();
  uint64_t v36 = v149;
  __int128 v40 = v148;
  while (1)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    unint64_t object = v153._object;
    swift_bridgeObjectRetain();
    uint64_t countAndFlagsBits = v153._countAndFlagsBits;
    specialized BidirectionalCollection._trimmingCharacters(while:)(v153._countAndFlagsBits, (unint64_t)object);
    uint64_t v43 = v42;
    LODWORD(v35) = v44;
    uint64_t v20 = v45;
    swift_bridgeObjectRelease();
    uint64_t v46 = String.init(_:)();
    id v48 = specialized _copyCollectionToContiguousArray<A>(_:)(v46, v47);
    LODWORD(v155[0]) = 0;
    if (v48[2] >> 31)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    unum_parseDouble();
    swift_bridgeObjectRelease();
    swift_release();
    if (SLODWORD(v155[0]) <= 0)
    {
      dispatch thunk of BinaryFloatingPoint.init(_:)();
      return swift_release();
    }

    uint64_t v50 = v147;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinFloatLiteral.init(_builtinFloatLiteral:)();
    id v51 = v142;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    (*(void (**)(char *, uint64_t))(v145 + 48))(v51, v144);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v51, v50);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v52 = swift_initStackObject();
    *(_OWORD *)(v52 + 16) = xmmword_183720D90;
    *(void *)(v52 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v52 + 40) = v53;
    v155[0] = 0LL;
    v155[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(73LL);
    v54._uint64_t countAndFlagsBits = 0x7020746F6E6E6143LL;
    v54._unint64_t object = (void *)0xED00002065737261LL;
    String.append(_:)(v54);
    v55._uint64_t countAndFlagsBits = countAndFlagsBits;
    v55._unint64_t object = object;
    String.append(_:)(v55);
    v56._uint64_t countAndFlagsBits = 0xD000000000000038LL;
    v56._unint64_t object = (void *)0x80000001839CA390LL;
    String.append(_:)(v56);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v57 = v155[0];
    uint64_t v58 = v155[1];
    *(void *)(v52 + 72) = MEMORY[0x189617FA8];
    *(void *)(v52 + 48) = v57;
    *(void *)(v52 + 56) = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v43 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v20 = (char *)v155;
    outlined init with copy of (Hashable & Sendable)?( v52 + 32,  (uint64_t)v155,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
    uint64_t v59 = v155[0];
    uint64_t v35 = v155[1];
    swift_retain();
    unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v35);
    if ((v61 & 1) != 0) {
      goto LABEL_35;
    }
    *(void *)(v43 + 8 * (v60 >> 6) + 64) |= 1LL << v60;
    int v62 = (uint64_t *)(*(void *)(v43 + 48) + 16 * v60);
    *int v62 = v59;
    v62[1] = v35;
    outlined init with take of Any(&v156, (_OWORD *)(*(void *)(v43 + 56) + 32 * v60));
    uint64_t v63 = *(void *)(v43 + 16);
    BOOL v64 = __OFADD__(v63, 1LL);
    uint64_t v65 = v63 + 1;
    if (v64) {
      goto LABEL_36;
    }
    *(void *)(v43 + 16) = v65;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v66 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v67 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v68 = objc_msgSend(v66, sel_initWithDomain_code_userInfo_, v67, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v20 = (char *)objc_msgSend(v68, sel_domain);
    id v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v43 = v70;

    if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v43 == v71)
    {
      swift_bridgeObjectRelease_n();
LABEL_21:
      swift_willThrow();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v138 + 8))(v40, v36);
    }

    LODWORD(v35) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0) {
      goto LABEL_21;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    unint64_t v127 = v49;
    int v128 = v35;
    uint64_t v126 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
    __int128 v104 = (void *)v43;
    uint64_t v105 = static _DictionaryStorage.copy(original:)();
    uint64_t v43 = v105;
    uint64_t v133 = v104;
    if (v104[2]) {
      break;
    }
LABEL_76:
    swift_bridgeObjectRelease();
    uint64_t v36 = v149;
    __int128 v40 = v148;
    uint64_t v92 = v154;
    uint64_t v20 = v126;
    unint64_t v49 = v127;
    if ((v128 & 1) != 0)
    {
LABEL_33:
      uint64_t v102 = *(void *)(v43 + 56);
      uint64_t v103 = 8 * v49;
      swift_release();
      *(void *)(v102 + v103) = v154;
    }

    else
    {
LABEL_77:
      uint64_t v124 = v135;
      unint64_t v125 = v49;
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  v135,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v125, v124, v92, (void *)v43);
    }

    *(void *)(countAndFlagsBits + 16) = v43;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v131);
    swift_release_n();
    swift_bridgeObjectRelease();
  }

  __int128 v106 = (char *)(v105 + 64);
  uint64_t v107 = 1LL << *(_BYTE *)(v43 + 32);
  uint64_t v130 = (char *)(v133 + 8);
  unint64_t v108 = (unint64_t)(v107 + 63) >> 6;
  if ((void *)v43 != v133 || v106 >= &v130[8 * v108]) {
    memmove(v106, v130, 8 * v108);
  }
  int64_t v109 = 0LL;
  __int128 v110 = v133;
  *(void *)(v43 + 16) = v133[2];
  uint64_t v111 = 1LL << *((_BYTE *)v110 + 32);
  uint64_t v112 = -1LL;
  if (v111 < 64) {
    uint64_t v112 = ~(-1LL << v111);
  }
  unint64_t v113 = v112 & v110[8];
  int64_t v129 = (unint64_t)(v111 + 63) >> 6;
  uint64_t v114 = v135;
  while (2)
  {
    if (v113)
    {
      unint64_t v115 = __clz(__rbit64(v113));
      v113 &= v113 - 1;
      unint64_t v116 = v115 | (v109 << 6);
LABEL_50:
      __int128 v117 = v133;
      uint64_t v36 = *(void *)(v134 + 72) * v116;
      outlined init with copy of ICUNumberFormatter.Signature( v133[6] + v36,  v114,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v118 = 8 * v116;
      uint64_t v119 = *(void *)(v117[7] + v118);
      outlined init with take of ICUNumberFormatter.Signature( v114,  *(void *)(v43 + 48) + v36,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      *(void *)(*(void *)(v43 + 56) + v118) = v119;
      swift_retain();
      continue;
    }

    break;
  }

  int64_t v120 = v109 + 1;
  if (__OFADD__(v109, 1LL))
  {
    __break(1u);
    goto LABEL_80;
  }

  if (v120 >= v129) {
    goto LABEL_76;
  }
  unint64_t v121 = *(void *)&v130[8 * v120];
  int64_t v122 = v109 + 1;
  if (v121) {
    goto LABEL_75;
  }
  int64_t v122 = v109 + 2;
  if (v109 + 2 >= v129) {
    goto LABEL_76;
  }
  unint64_t v121 = *(void *)&v130[8 * v122];
  if (v121) {
    goto LABEL_75;
  }
  int64_t v122 = v109 + 3;
  if (v109 + 3 >= v129) {
    goto LABEL_76;
  }
  unint64_t v121 = *(void *)&v130[8 * v122];
  if (v121) {
    goto LABEL_75;
  }
  int64_t v122 = v109 + 4;
  if (v109 + 4 >= v129) {
    goto LABEL_76;
  }
  unint64_t v121 = *(void *)&v130[8 * v122];
  if (v121) {
    goto LABEL_75;
  }
  int64_t v122 = v109 + 5;
  if (v109 + 5 >= v129) {
    goto LABEL_76;
  }
  unint64_t v121 = *(void *)&v130[8 * v122];
  if (v121) {
    goto LABEL_75;
  }
  int64_t v122 = v109 + 6;
  if (v109 + 6 >= v129) {
    goto LABEL_76;
  }
  unint64_t v121 = *(void *)&v130[8 * v122];
  if (v121) {
    goto LABEL_75;
  }
  int64_t v122 = v109 + 7;
  if (v109 + 7 >= v129) {
    goto LABEL_76;
  }
  unint64_t v121 = *(void *)&v130[8 * v122];
  if (v121) {
    goto LABEL_75;
  }
  int64_t v122 = v109 + 8;
  if (v109 + 8 >= v129) {
    goto LABEL_76;
  }
  unint64_t v121 = *(void *)&v130[8 * v122];
  if (v121)
  {
LABEL_75:
    unint64_t v113 = (v121 - 1) & v121;
    int64_t v109 = v122;
    unint64_t v116 = __clz(__rbit64(v121)) + (v122 << 6);
    goto LABEL_50;
  }

  int64_t v123 = v109 + 9;
  if (v109 + 9 >= v129) {
    goto LABEL_76;
  }
  unint64_t v121 = *(void *)&v130[8 * v123];
  if (v121)
  {
    int64_t v122 = v109 + 9;
    goto LABEL_75;
  }

  while (1)
  {
    int64_t v122 = v123 + 1;
    if (__OFADD__(v123, 1LL)) {
      break;
    }
    if (v122 >= v129) {
      goto LABEL_76;
    }
    unint64_t v121 = *(void *)&v130[8 * v122];
    ++v123;
    if (v121) {
      goto LABEL_75;
    }
  }

uint64_t FloatingPointParseStrategy.parse(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, int *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v13 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v13);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v85 - v15;
  unint64_t v103 = a3;
  if (a3 >> 14 >= a4 >> 14)
  {
    swift_getAssociatedTypeWitness();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56LL))( a6,  1LL,  1LL,  TupleTypeMetadata2);
  }

  uint64_t v100 = v17;
  uint64_t v101 = v16;
  uint64_t v98 = a5;
  uint64_t v99 = a1;
  uint64_t v93 = a2;
  unint64_t v94 = a4;
  uint64_t v96 = a6;
  uint64_t v19 = (uint64_t *)(v6 + a5[13]);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  char v22 = *(_BYTE *)(v6 + a5[11]);
  outlined init with copy of ICUNumberFormatter.Signature( v6 + a5[12],  (uint64_t)&v85 - v15,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v25 = v24(ObjectType, v20);
  uint64_t v27 = v26;
  uint64_t v95 = v21;
  swift_unknownObjectRelease();
  uint64_t v28 = (uint64_t *)&v18[*(int *)(v13 + 20)];
  *uint64_t v28 = v25;
  v28[1] = v27;
  v18[*(int *)(v13 + 24)] = v22;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v30 = static ICULegacyNumberFormatter.cache;
  uint64_t v29 = unk_18C5CB2B0;
  uint64_t v31 = v101;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v18,  v101,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v32 = (*(unsigned __int8 *)(v100 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
  uint64_t v97 = swift_allocObject();
  outlined init with take of ICUNumberFormatter.Signature( v31,  v97 + v32,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  uint64_t v33 = (unint64_t *)(v29 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  uint64_t v34 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v29 + 16, (uint64_t)v18);
  os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 24));
  swift_release();
  uint64_t v102 = v34;
  if (v34)
  {
    swift_release();
    goto LABEL_6;
  }

  os_unfair_lock_t v92 = (os_unfair_lock_t)(v29 + 24);
  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  uint64_t v102 = v49;
  swift_retain();
  uint64_t v50 = v92;
  os_unfair_lock_lock(v92);
  uint64_t v51 = *(void *)(*(void *)(v29 + 16) + 16LL);
  uint64_t v91 = *(void *)(v29 + 16);
  if (v30 >= v51) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v33 = MEMORY[0x18961AFF0];
  }
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v104 = *v33;
  unint64_t v53 = v104;
  *uint64_t v33 = 0x8000000000000000LL;
  unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18);
  uint64_t v56 = *(void *)(v53 + 16);
  BOOL v57 = (v54 & 1) == 0;
  uint64_t v58 = v56 + v57;
  if (__OFADD__(v56, v57))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v53 + 24) < v58)
    {
      char v59 = v54;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v58,  isUniquelyReferenced_nonNull_native);
      uint64_t v60 = v104;
      unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18);
      if ((v59 & 1) != (v62 & 1)) {
        goto LABEL_61;
      }
      unint64_t v55 = v61;
      if ((v59 & 1) == 0) {
        goto LABEL_57;
      }
LABEL_20:
      uint64_t v63 = *(void *)(v60 + 56);
      uint64_t v64 = 8 * v55;
      swift_release();
      *(void *)(v63 + v64) = v102;
LABEL_58:
      *(void *)(v29 + 16) = v60;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v50);
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_6:
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v18,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      unint64_t v35 = String.subscript.getter();
      unint64_t v37 = v36;
      uint64_t v39 = v38;
      unint64_t v41 = v40;
      v108[0] = 0LL;
      specialized ICULegacyNumberFormatter.parseAsDouble<A>(_:upperBound:)(v35, v36, v38, v40, v108);
      if ((v42 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_getAssociatedTypeWitness();
        uint64_t v48 = swift_getTupleTypeMetadata2();
        return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))( v96,  1LL,  1LL,  v48);
      }

      else
      {
        unint64_t v104 = v35;
        unint64_t v105 = v37;
        uint64_t v106 = v39;
        unint64_t v107 = v41;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        uint64_t v43 = String.Index.init<A>(utf16Offset:in:)();
        swift_getAssociatedTypeWitness();
        uint64_t v44 = swift_getTupleTypeMetadata2();
        id v45 = v96;
        *uint64_t v96 = v43;
        dispatch thunk of BinaryFloatingPoint.init(_:)();
        swift_release();
        return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))( v45,  0LL,  1LL,  v44);
      }
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v60 = v53;
      if ((v54 & 1) != 0) {
        goto LABEL_20;
      }
LABEL_57:
      uint64_t v83 = v101;
      unint64_t v84 = v55;
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v18,  v101,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v84, v83, v102, (void *)v60);
      goto LABEL_58;
    }
  }

  unint64_t v86 = v55;
  int v87 = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  uint64_t v65 = static _DictionaryStorage.copy(original:)();
  uint64_t v60 = v65;
  if (!*(void *)(v53 + 16))
  {
LABEL_56:
    swift_bridgeObjectRelease();
    uint64_t v50 = v92;
    unint64_t v55 = v86;
    if ((v87 & 1) != 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }

  id v66 = (char *)(v65 + 64);
  uint64_t v67 = 1LL << *(_BYTE *)(v60 + 32);
  uint64_t v89 = (char *)(v53 + 64);
  unint64_t v68 = (unint64_t)(v67 + 63) >> 6;
  if (v60 != v53 || v66 >= &v89[8 * v68]) {
    memmove(v66, v89, 8 * v68);
  }
  int64_t v90 = 0LL;
  *(void *)(v60 + 16) = *(void *)(v53 + 16);
  uint64_t v69 = 1LL << *(_BYTE *)(v53 + 32);
  uint64_t v70 = -1LL;
  if (v69 < 64) {
    uint64_t v70 = ~(-1LL << v69);
  }
  unint64_t v71 = v70 & *(void *)(v53 + 64);
  int64_t v88 = (unint64_t)(v69 + 63) >> 6;
  uint64_t v72 = v101;
  while (1)
  {
    if (v71)
    {
      unint64_t v73 = __clz(__rbit64(v71));
      v71 &= v71 - 1;
      unint64_t v74 = v73 | (v90 << 6);
      uint64_t v75 = v100;
      goto LABEL_30;
    }

    int64_t v79 = v90 + 1;
    uint64_t v75 = v100;
    if (__OFADD__(v90, 1LL))
    {
      __break(1u);
      goto LABEL_60;
    }

    if (v79 >= v88) {
      goto LABEL_56;
    }
    unint64_t v80 = *(void *)&v89[8 * v79];
    int64_t v81 = v90 + 1;
    if (!v80)
    {
      int64_t v81 = v90 + 2;
      if (v90 + 2 >= v88) {
        goto LABEL_56;
      }
      unint64_t v80 = *(void *)&v89[8 * v81];
      if (!v80)
      {
        int64_t v81 = v90 + 3;
        if (v90 + 3 >= v88) {
          goto LABEL_56;
        }
        unint64_t v80 = *(void *)&v89[8 * v81];
        if (!v80)
        {
          int64_t v81 = v90 + 4;
          if (v90 + 4 >= v88) {
            goto LABEL_56;
          }
          unint64_t v80 = *(void *)&v89[8 * v81];
          if (!v80)
          {
            int64_t v81 = v90 + 5;
            if (v90 + 5 >= v88) {
              goto LABEL_56;
            }
            unint64_t v80 = *(void *)&v89[8 * v81];
            if (!v80)
            {
              int64_t v81 = v90 + 6;
              if (v90 + 6 >= v88) {
                goto LABEL_56;
              }
              unint64_t v80 = *(void *)&v89[8 * v81];
              if (!v80)
              {
                int64_t v81 = v90 + 7;
                if (v90 + 7 >= v88) {
                  goto LABEL_56;
                }
                unint64_t v80 = *(void *)&v89[8 * v81];
                if (!v80)
                {
                  int64_t v81 = v90 + 8;
                  if (v90 + 8 >= v88) {
                    goto LABEL_56;
                  }
                  unint64_t v80 = *(void *)&v89[8 * v81];
                  if (!v80) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t specialized ICULegacyNumberFormatter.parseAsDouble<A>(_:upperBound:)( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  v17[5] = *MEMORY[0x1895F89C0];
  uint64_t v10 = String.UTF16View.distance(from:to:)();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v10, 0LL);
    uint64_t v13 = specialized Sequence._copySequenceContents(initializing:)(v17, (uint64_t)(v12 + 4), v11, a1, a2, a3, a4);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if (v13 != v11) {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v12 = (void *)MEMORY[0x18961AFE8];
  }

  LODWORD(v17[0]) = 0;
  if (v12[2] >> 31)
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }

  unum_parseDouble();
  uint64_t v15 = v14;
  swift_release();
  if (SLODWORD(v17[0]) > 0) {
    return 0LL;
  }
  *a5 = 0LL;
  return v15;
}

uint64_t protocol witness for ParseStrategy.parse(_:) in conformance FloatingPointParseStrategy<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointParseStrategy.parse(_:)(*(void *)a1, *(void **)(a1 + 8), a2, a3);
}

uint64_t FloatingPointParseStrategy.init<A>(format:lenient:)@<X0>( _OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return FloatingPointParseStrategy.init<A>(format:lenient:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>,  a5);
}

{
  return FloatingPointParseStrategy.init<A>(format:lenient:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent,  a5);
}

uint64_t FloatingPointParseStrategy.init<A>(format:lenient:)@<X0>( __int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for FloatingPointFormatStyle.Currency(0LL, a3, a4, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v15 + 16))(a5, a1, v14);
  uint64_t v16 = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, v14);
  uint64_t v17 = (int *)type metadata accessor for FloatingPointParseStrategy(0LL, v14, v16, a4);
  *(_BYTE *)(a5 + v17[11]) = a2;
  uint64_t v18 = v17[13];
  __int128 v21 = *a1;
  *(_OWORD *)(a5 + v18) = v21;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)a1 + *(int *)(v14 + 40),  (uint64_t)v12,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v19 = *(void (**)(__int128 *, uint64_t))(v15 + 8);
  swift_unknownObjectRetain();
  v19(a1, v14);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v12,  a5 + v17[12],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t FloatingPointParseStrategy.init<A>(format:lenient:)@<X0>( _OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12 = a5(0LL, a3, a4);
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a7, a1, v12);
  uint64_t v13 = MEMORY[0x186E20D4C](a6, v12);
  uint64_t v14 = (int *)type metadata accessor for FloatingPointParseStrategy(0LL, v12, v13, a4);
  *(_BYTE *)(a7 + v14[11]) = a2;
  *(_OWORD *)(a7 + v14[13]) = *a1;
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)a1 + *(int *)(v12 + 36),  a7 + v14[12],  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

void specialized Optional<A>.hash(into:)()
{
  Swift::UInt v2 = v10[0];
  Swift::UInt v1 = v10[1];
  Swift::UInt v4 = v10[2];
  char v3 = v11;
  Swift::UInt v5 = v12;
  char v6 = v13;
  Swift::UInt v9 = v14;
  char v7 = v15;
  outlined init with take of LocalePreferences?( v0,  (uint64_t)v16,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  if (v17 >> 1 == 0xFFFFFFFF && v18 <= 1 && v19 <= 1u) {
    goto LABEL_11;
  }
  Hasher._combine(_:)(1u);
  if (v7 < 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      if ((v3 & 1) != 0)
      {
LABEL_9:
        Hasher._combine(_:)(0);
        if ((v6 & 1) != 0) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
      if ((v3 & 1) != 0) {
        goto LABEL_9;
      }
    }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    if ((v6 & 1) != 0)
    {
LABEL_10:
      Hasher._combine(_:)(0);
      if ((v7 & 1) != 0) {
        goto LABEL_11;
      }
LABEL_15:
      Hasher._combine(_:)(1u);
      Swift::UInt v8 = v9;
      goto LABEL_16;
    }

{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;
  Swift::UInt64 v3;
  char v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  uint64_t v10;
  Swift::UInt64 v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt v14;
  _BYTE v15[56];
  outlined init with take of LocalePreferences?( v0,  (uint64_t)&v9,  &demangling cache variable for type metadata for WeekendRange?);
  Swift::UInt v1 = v9;
  Swift::UInt v2 = v10;
  char v3 = v11;
  Swift::UInt v4 = v12;
  char v6 = v13;
  Swift::UInt v5 = v14;
  outlined init with take of LocalePreferences?( v0,  (uint64_t)v15,  &demangling cache variable for type metadata for WeekendRange?);
  if (v15[48] == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }

  Hasher._combine(_:)(1u);
  if ((v2 & 1) == 0)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      char v7 = v1;
    }
    else {
      char v7 = 0LL;
    }
    Hasher._combine(_:)(v7);
    if ((v4 & 1) != 0) {
      goto LABEL_8;
    }
LABEL_10:
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt v8 = v3;
    }
    else {
      Swift::UInt v8 = 0LL;
    }
    Hasher._combine(_:)(v8);
    goto LABEL_14;
  }

  Hasher._combine(_:)(0);
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  Hasher._combine(_:)(0);
LABEL_14:
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
}

void specialized Optional<A>.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with take of LocalePreferences?( v2,  (uint64_t)v13,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  char v5 = v13[0];
  uint64_t v4 = v13[1];
  int v6 = v14;
  uint64_t v7 = v15;
  unint64_t v9 = v16;
  uint64_t v8 = v17;
  unsigned int v10 = v18;
  outlined init with take of LocalePreferences?( v2,  (uint64_t)v19,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  if ((unint64_t)v19[38] << 48 == 0x3000000000000LL)
  {
LABEL_45:
    Hasher._combine(_:)(0);
    return;
  }

  Hasher._combine(_:)(1u);
  if (v5 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if ((_BYTE)v6 == 0xFF)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v4, v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (BYTE1(v6) != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  if (BYTE2(v6) != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  if (HIBYTE(v6) == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if ((v9 & 0x100) != 0)
  {
    Hasher._combine(_:)(0);
    if (BYTE2(v9) == 3) {
      goto LABEL_26;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    if ((v9 & 1) == 0)
    {
      uint64_t v11 = 10LL;
      if (v7 < 10) {
        uint64_t v11 = v7;
      }
      if (v11 <= 1) {
        uint64_t v12 = 1LL;
      }
      else {
        uint64_t v12 = v11;
      }
      MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v12);
    }

    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (BYTE2(v9) == 3)
    {
LABEL_26:
      Hasher._combine(_:)(0);
      if (BYTE3(v9) != 6) {
        goto LABEL_27;
      }
      goto LABEL_29;
    }
  }

  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (BYTE3(v9) != 6)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    __asm { BR              X10 }
  }

void specialized Optional<A>.hash(into:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  if (a3)
  {
    Hasher._combine(_:)(1u);
    if (a2 == 3LL)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(a2 + 1LL);
    }

    if ((a2 & 0xFF00) == 0xE00LL)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(a2) + 1LL);
    }

    if ((*(void *)&a2 & 0xFF0000LL) == 0x60000)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(a2) + 1LL);
    }

    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, a3);
    if (a4 == 14LL)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(a4 + 1LL);
    }

    if ((a4 & 0xFF00) == 0x300)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(a4) + 1LL);
    }

    if ((a4 & 0xFF0000) == 0x30000)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(a4) + 1LL);
    }

    if ((a4 & 0xFF000000) == 0x2000000)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(((a4 >> 24) & 1) + 1);
    }

    if ((a4 & 0xFF00000000LL) == 0x200000000LL)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)((HIDWORD(a4) & 1) + 1);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0LL;
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    if (v12 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_19;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13) {
        break;
      }
    }

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0LL;
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    if (v12 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_19;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13) {
        break;
      }
    }

{
  Swift::UInt v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  uint64_t v5 = a2 + 64;
  unint64_t v6 = 1LL << *(_BYTE *)(a2 + 32);
  int64_t v7 = -1LL;
  if (v6 < 64) {
    int64_t v7 = ~(-1LL << v6);
  }
  Swift::UInt v8 = v7 & *(void *)(a2 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }

    unint64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    if (v13 >= v9) {
      goto LABEL_19;
    }
    int64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      uint64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        goto LABEL_19;
      }
      int64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14) {
        break;
      }
    }

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v17 = a2 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  uint64_t v5 = v4 & *(void *)(a2 + 64);
  unsigned __int16 v18 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v6 = 0LL;
  int64_t v7 = 0LL;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_4:
  Swift::UInt v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  int64_t v9 = v8 | (v7 << 6);
LABEL_5:
  unint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v9);
  int64_t v12 = *v10;
  unint64_t v11 = v10[1];
  outlined init with copy of AttributedString._AttributeValue(*(void *)(a2 + 56) + 72 * v9, (uint64_t)&v20);
  *(void *)&unsigned __int8 v19 = v12;
  *((void *)&v19 + 1) = v11;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of LocalePreferences?( (uint64_t)&v19,  (uint64_t)v25,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
    if (!v25[1])
    {
      swift_release();
      Hasher._combine(_:)(v6);
      return;
    }

    __int128 v21 = v28;
    char v22 = v29;
    *(void *)&uint64_t v23 = v30;
    unsigned __int8 v19 = v26;
    uint64_t v20 = v27;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v19);
    v6 ^= Hasher._finalize()();
    if (v5) {
      goto LABEL_4;
    }
LABEL_6:
    unint64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v13 < v18)
    {
      int64_t v14 = *(void *)(v17 + 8 * v13);
      if (v14) {
        goto LABEL_9;
      }
      uint64_t v15 = v7 + 2;
      ++v7;
      if (v13 + 1 < v18)
      {
        int64_t v14 = *(void *)(v17 + 8 * v15);
        if (v14)
        {
          ++v13;
LABEL_9:
          uint64_t v5 = (v14 - 1) & v14;
          int64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
          int64_t v7 = v13;
          goto LABEL_5;
        }

        unint64_t v16 = v13 + 2;
        int64_t v7 = v13 + 1;
        if (v13 + 2 < v18) {
          break;
        }
      }
    }

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v20 = a2 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  uint64_t v4 = v3 & *(void *)(a2 + 64);
  unsigned __int8 v19 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  while (1)
  {
    if (v4)
    {
      char v22 = (v4 - 1) & v4;
      int64_t v7 = v6;
      Swift::UInt v8 = __clz(__rbit64(v4)) | (v6 << 6);
      goto LABEL_20;
    }

    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v9 >= v19) {
      goto LABEL_32;
    }
    unint64_t v10 = *(void *)(v20 + 8 * v9);
    unint64_t v11 = v6 + 1;
    if (!v10)
    {
      unint64_t v11 = v6 + 2;
      if (v6 + 2 >= v19) {
        goto LABEL_32;
      }
      unint64_t v10 = *(void *)(v20 + 8 * v11);
      if (!v10) {
        break;
      }
    }

{
  Swift::UInt v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  uint64_t v5 = a2 + 64;
  unint64_t v6 = 1LL << *(_BYTE *)(a2 + 32);
  int64_t v7 = -1LL;
  if (v6 < 64) {
    int64_t v7 = ~(-1LL << v6);
  }
  Swift::UInt v8 = v7 & *(void *)(a2 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }

    unint64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    if (v13 >= v9) {
      goto LABEL_19;
    }
    int64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      uint64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        goto LABEL_19;
      }
      int64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14) {
        break;
      }
    }

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0LL;
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_20;
    }

    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_24;
    }

    if (v12 >= v7) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_22;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13) {
        break;
      }
    }

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0LL;
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    if (v12 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_19;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13) {
        break;
      }
    }

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  Swift::UInt v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v15 = a2 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  uint64_t v5 = v4 & *(void *)(a2 + 64);
  unint64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0LL;
  Swift::UInt v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      int64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_20;
    }

    unint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_24;
    }

    if (v11 >= v6) {
      goto LABEL_22;
    }
    int64_t v12 = *(void *)(v15 + 8 * v11);
    ++v8;
    if (!v12)
    {
      Swift::UInt v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_22;
      }
      int64_t v12 = *(void *)(v15 + 8 * v8);
      if (!v12) {
        break;
      }
    }

uint64_t type metadata accessor for FloatingPointParseStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointParseStrategy);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_5;
  }
  uint64_t v4 = String.UTF16View._nativeGetOffset(for:)();
  if (!v4) {
    return (void *)MEMORY[0x18961AFE8];
  }
  while (1)
  {
    uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0LL);
    swift_bridgeObjectRetain();
    unint64_t v2 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (uint64_t)(v5 + 4), v4, a1, v2);
    swift_bridgeObjectRelease();
    if (v2 == v4) {
      break;
    }
    __break(1u);
LABEL_5:
    uint64_t v4 = String.UTF16View._foreignCount()();
    if (!v4) {
      return (void *)MEMORY[0x18961AFE8];
    }
  }

  return v5;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v10 = ((unint64_t)a6 >> 59) & 1;
      if ((a7 & 0x1000000000000000LL) == 0) {
        LOBYTE(v10) = 1;
      }
      if ((a7 & 0x2000000000000000LL) != 0) {
        unint64_t v11 = HIBYTE(a7) & 0xF;
      }
      else {
        unint64_t v11 = a6 & 0xFFFFFFFFFFFFLL;
      }
      if ((a7 & 0x2000000000000000LL) != 0) {
        BOOL v12 = (a7 & 0x4000000000000000LL) != 0;
      }
      else {
        BOOL v12 = a6 < 0;
      }
      if (a3 < 0) {
        goto LABEL_62;
      }
      uint64_t v13 = 0LL;
      unint64_t v14 = a5 >> 14;
      uint64_t v15 = 4LL << v10;
      unint64_t v16 = a4 >> 14;
      uint64_t v17 = a7 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v18 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      unint64_t v19 = a4;
      while (1)
      {
        unint64_t v20 = v19 >> 14;
        if (v19 >> 14 == v14) {
          goto LABEL_58;
        }
        unint64_t v21 = v19;
        if ((v19 & 0xC) == v15)
        {
          uint64_t v94 = a2;
          unint64_t v102 = a4;
          uint64_t v71 = a3;
          uint64_t v78 = v17;
          unint64_t v110 = a5;
          uint64_t v25 = a1;
          unint64_t v26 = v11;
          BOOL v86 = v12;
          unint64_t v27 = v16;
          uint64_t v66 = v18;
          unint64_t v28 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, a6, a7);
          uint64_t v18 = v66;
          a3 = v71;
          uint64_t v17 = v78;
          unint64_t v16 = v27;
          BOOL v12 = v86;
          unint64_t v11 = v26;
          a2 = v94;
          a4 = v102;
          a1 = v25;
          a5 = v110;
          unint64_t v21 = v28;
          unint64_t v20 = v28 >> 14;
          if (v28 >> 14 < v27)
          {
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
            JUMPOUT(0x182FA7DE0LL);
          }
        }

        else if (v20 < v16)
        {
          goto LABEL_59;
        }

        if (v20 >= v14) {
          goto LABEL_59;
        }
        if ((a7 & 0x1000000000000000LL) != 0)
        {
          uint64_t v95 = a2;
          unint64_t v103 = a4;
          uint64_t v72 = a3;
          uint64_t v79 = v17;
          unint64_t v111 = a5;
          uint64_t v29 = a1;
          unint64_t v30 = v11;
          BOOL v87 = v12;
          unint64_t v24 = v16;
          uint64_t v67 = v18;
          __int16 v31 = String.UTF16View._foreignSubscript(position:)();
          uint64_t v18 = v67;
          a3 = v72;
          uint64_t v17 = v79;
          unint64_t v16 = v24;
          BOOL v12 = v87;
          unint64_t v11 = v30;
          a2 = v95;
          a4 = v103;
          a1 = v29;
          a5 = v111;
          LOWORD(v24) = v31;
          goto LABEL_33;
        }

        if ((v21 & 1) != 0)
        {
          unint64_t v22 = v21 >> 16;
          if ((a7 & 0x2000000000000000LL) == 0) {
            goto LABEL_22;
          }
        }

        else
        {
          uint64_t v96 = a2;
          unint64_t v104 = a4;
          uint64_t v73 = a3;
          uint64_t v80 = v17;
          unint64_t v112 = a5;
          unint64_t v32 = a1;
          unint64_t v33 = v11;
          BOOL v88 = v12;
          unint64_t v63 = v16;
          uint64_t v68 = v18;
          unint64_t v34 = _StringGuts.scalarAlignSlow(_:)(v21, a6, a7);
          unint64_t v16 = v63;
          uint64_t v18 = v68;
          a3 = v73;
          uint64_t v17 = v80;
          BOOL v12 = v88;
          unint64_t v11 = v33;
          a2 = v96;
          a4 = v104;
          a1 = v32;
          a5 = v112;
          unint64_t v22 = (v34 & 0xFFFFFFFFFFFFFFF2LL | 1) >> 16;
          if ((a7 & 0x2000000000000000LL) == 0)
          {
LABEL_22:
            uint64_t v23 = v18;
            if ((a6 & 0x1000000000000000LL) == 0)
            {
              uint64_t v99 = a2;
              unint64_t v107 = a4;
              unint64_t v115 = a5;
              uint64_t v50 = a1;
              uint64_t v76 = a3;
              uint64_t v83 = v17;
              unint64_t v61 = v11;
              unint64_t v64 = v16;
              BOOL v91 = v12;
              uint64_t v69 = v18;
              uint64_t v23 = _StringObject.sharedUTF8.getter();
              unint64_t v16 = v64;
              uint64_t v18 = v69;
              a3 = v76;
              uint64_t v17 = v83;
              BOOL v12 = v91;
              unint64_t v11 = v61;
              a2 = v99;
              a4 = v107;
              a1 = v50;
              a5 = v115;
            }

            LODWORD(v24) = *(unsigned __int8 *)(v23 + v22);
            if (*(char *)(v23 + v22) < 0) {
              __asm { BR              X9 }
            }

            goto LABEL_32;
          }
        }

        uint64_t v118 = a6;
        uint64_t v119 = v17;
        LODWORD(v24) = *((unsigned __int8 *)&v118 + v22);
        if (*((char *)&v118 + v22) < 0) {
          __asm { BR              X9 }
        }

uint64_t type metadata accessor for FloatingPointParseStrategy.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FloatingPointParseStrategy.CodingKeys);
}

unint64_t lazy protocol witness table accessor for type Locale and conformance Locale()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }

  return result;
}

void base witness table accessor for Equatable in FloatingPointParseStrategy<A>()
{
}

uint64_t instantiation function for generic protocol witness table for FloatingPointParseStrategy<A>( void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointParseStrategy<A>);
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointParseStrategy<A>, a2);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for FloatingPointParseStrategy<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t type metadata instantiation function for FloatingPointParseStrategy()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for FloatingPointParseStrategy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(319LL);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for FloatingPointParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 | 7;
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v12 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 64) + 1LL;
  }
  if (((v12 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL) + 11 <= ((v12 + 7 + ((v10 + 78) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL)
                                                                      + 10)
    unint64_t v13 = ((v12 + 7 + ((v10 + 78) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  else {
    unint64_t v13 = ((v12 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  unsigned int v14 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v13 + (((v10 | 7) + v7 + 1) & ~(v10 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v18 = (void *)(v17 + (((v14 | 7) + 16LL) & ~(unint64_t)(v14 | 7)));
    swift_retain();
  }

  else
  {
    uint64_t v52 = v10 + 79;
    size_t __n = v12;
    uint64_t v54 = v10 + 78;
    uint64_t v55 = v8;
    uint64_t v56 = v12 + 7;
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    *((_BYTE *)a1 + outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7) = *((_BYTE *)a2 + v7);
    uint64_t v19 = ((unint64_t)a1 + v7 + v11 + 1) & ~v11;
    uint64_t v20 = ((unint64_t)a2 + v7 + v11 + 1) & ~v11;
    uint64_t v22 = ~v10;
    uint64_t v18 = a1;
    switch(*(_BYTE *)(v20 + v13))
    {
      case 0:
        uint64_t v23 = *(void *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(void *)uint64_t v19 = v23;
        __int128 v24 = *(_OWORD *)(v20 + 16);
        __int128 v25 = *(_OWORD *)(v20 + 32);
        __int128 v26 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v25;
        *(_OWORD *)(v19 + 48) = v26;
        *(_OWORD *)(v19 + 16) = v24;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        LOWORD(v23) = *(_WORD *)(v20 + 74);
        *(_BYTE *)(v19 + 76) = *(_BYTE *)(v20 + 76);
        *(_WORD *)(v19 + 74) = v23;
        *(_BYTE *)(v19 + 77) = *(_BYTE *)(v20 + 77);
        unint64_t v27 = (void *)((v54 + v19) & v22);
        unint64_t v28 = (const void *)((v54 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v28, 1LL, v55))
        {
          memcpy(v27, v28, __n);
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v27, v28, v55);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v27, 0LL, 1LL, v55);
        }

        char v41 = 0;
        unint64_t v42 = ((unint64_t)v27 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v43 = ((unint64_t)v28 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v44 = *(void *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(void *)unint64_t v42 = v44;
        *(_BYTE *)(v42 + 9) = *(_BYTE *)(v43 + 9);
        break;
      case 1:
        uint64_t v29 = *(void *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(void *)uint64_t v19 = v29;
        __int128 v30 = *(_OWORD *)(v20 + 16);
        __int128 v31 = *(_OWORD *)(v20 + 32);
        __int128 v32 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v31;
        *(_OWORD *)(v19 + 48) = v32;
        *(_OWORD *)(v19 + 16) = v30;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        LOWORD(v29) = *(_WORD *)(v20 + 74);
        *(_BYTE *)(v19 + 76) = *(_BYTE *)(v20 + 76);
        *(_WORD *)(v19 + 74) = v29;
        *(_BYTE *)(v19 + 77) = *(_BYTE *)(v20 + 77);
        unint64_t v33 = (void *)((v54 + v19) & v22);
        unint64_t v34 = (const void *)((v54 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v34, 1LL, v55))
        {
          memcpy(v33, v34, __n);
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v33, v34, v55);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v33, 0LL, 1LL, v55);
        }

        unint64_t v45 = ((unint64_t)v33 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v46 = ((unint64_t)v34 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v47 = *(void *)v46;
        *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
        *(void *)unint64_t v45 = v47;
        *(_BYTE *)(v45 + 9) = *(_BYTE *)(v46 + 9);
        char v41 = 1;
        break;
      case 2:
        uint64_t v35 = *(void *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(void *)uint64_t v19 = v35;
        __int128 v36 = *(_OWORD *)(v20 + 16);
        __int128 v37 = *(_OWORD *)(v20 + 32);
        __int128 v38 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v37;
        *(_OWORD *)(v19 + 48) = v38;
        *(_OWORD *)(v19 + 16) = v36;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        *(_DWORD *)(v19 + 74) = *(_DWORD *)(v20 + 74);
        *(_BYTE *)(v19 + 78) = *(_BYTE *)(v20 + 78);
        uint64_t v39 = (void *)((v52 + v19) & v22);
        unint64_t v40 = (const void *)((v52 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v40, 1LL, v55))
        {
          memcpy(v39, v40, __n);
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v39, v40, v55);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v39, 0LL, 1LL, v55);
        }

        unint64_t v48 = ((unint64_t)v39 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v49 = ((unint64_t)v40 + v56) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v50 = *(void *)v49;
        *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
        *(void *)unint64_t v48 = v50;
        *(_BYTE *)(v48 + 9) = *(_BYTE *)(v49 + 9);
        *(_BYTE *)(v48 + 10) = *(_BYTE *)(v49 + 10);
        char v41 = 2;
        break;
      case 3:
        *(_WORD *)uint64_t v19 = *(_WORD *)v20;
        char v41 = 3;
        break;
      default:
        else {
          int v21 = 4;
        }
        __asm { BR              X11 }

        return result;
    }

    *(_BYTE *)(v19 + v13) = v41;
    *(_OWORD *)(((v19 | 7) + v13 + 1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((v20 | 7) + v13 + 1) & 0xFFFFFFFFFFFFF8LL);
    swift_unknownObjectRetain();
  }

  return v18;
}

uint64_t destroy for FloatingPointParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (a1 + (v7 | 7) + v4 + 1) & ~(v7 | 7);
  uint64_t v9 = (v7 + 78) & ~v7;
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v11 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v11 = *(void *)(v6 + 64) + 1LL;
  }
  unint64_t v12 = ((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  if (((v11 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8LL) + 11 <= v12) {
    unint64_t v13 = ((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  }
  else {
    unint64_t v13 = ((v11 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  int v14 = *(unsigned __int8 *)(v8 + v13);
  uint64_t v16 = ~v7;
  switch(v14)
  {
    case 0:
    case 1:
      uint64_t v17 = v7 + 78 + v8;
      goto LABEL_15;
    case 2:
      uint64_t v17 = v8 + v7 + 79;
LABEL_15:
      uint64_t v18 = v17 & v16;
      break;
    case 3:
      return swift_unknownObjectRelease();
    default:
      else {
        int v15 = 4;
      }
      __asm { BR              X14 }

      return result;
  }

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(_BYTE *)(v6 + a1) = *(_BYTE *)(v6 + a2);
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (v12 + v8) & ~(v11 | 7);
  uint64_t v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v16 = *(void *)(v10 + 64);
  }
  else {
    size_t v16 = *(void *)(v10 + 64) + 1LL;
  }
  size_t v17 = v16 + 7;
  uint64_t v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL)
                                                                      + 10)
    unint64_t v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  else {
    unint64_t v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  uint64_t v21 = ~v11;
  switch(*(_BYTE *)(v14 + v19))
  {
    case 0:
      uint64_t v22 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v22;
      __int128 v23 = *(_OWORD *)(v14 + 16);
      __int128 v24 = *(_OWORD *)(v14 + 32);
      __int128 v25 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v24;
      *(_OWORD *)(v13 + 48) = v25;
      *(_OWORD *)(v13 + 16) = v23;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v22) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v22;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      __int128 v26 = (void *)((v15 + v13) & v21);
      unint64_t v27 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v27, 1LL, v9))
      {
        memcpy(v26, v27, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v26, v27, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v26, 0LL, 1LL, v9);
      }

      char v40 = 0;
      unint64_t v41 = ((unint64_t)v26 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v42 = ((unint64_t)v27 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v43 = *(void *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(void *)unint64_t v41 = v43;
      *(_BYTE *)(v41 + 9) = *(_BYTE *)(v42 + 9);
      break;
    case 1:
      uint64_t v28 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v28;
      __int128 v29 = *(_OWORD *)(v14 + 16);
      __int128 v30 = *(_OWORD *)(v14 + 32);
      __int128 v31 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v30;
      *(_OWORD *)(v13 + 48) = v31;
      *(_OWORD *)(v13 + 16) = v29;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v28) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v28;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      __int128 v32 = (void *)((v15 + v13) & v21);
      unint64_t v33 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v33, 1LL, v9))
      {
        memcpy(v32, v33, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v32, v33, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v32, 0LL, 1LL, v9);
      }

      unint64_t v44 = ((unint64_t)v32 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v45 = ((unint64_t)v33 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v46 = *(void *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(void *)unint64_t v44 = v46;
      *(_BYTE *)(v44 + 9) = *(_BYTE *)(v45 + 9);
      char v40 = 1;
      break;
    case 2:
      uint64_t v34 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v34;
      __int128 v35 = *(_OWORD *)(v14 + 16);
      __int128 v36 = *(_OWORD *)(v14 + 32);
      __int128 v37 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v36;
      *(_OWORD *)(v13 + 48) = v37;
      *(_OWORD *)(v13 + 16) = v35;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      __int128 v38 = (void *)((v18 + v13) & v21);
      uint64_t v39 = (const void *)((v18 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v39, 1LL, v9))
      {
        memcpy(v38, v39, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v38, v39, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v38, 0LL, 1LL, v9);
      }

      unint64_t v47 = ((unint64_t)v38 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v48 = ((unint64_t)v39 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v49 = *(void *)v48;
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(void *)unint64_t v47 = v49;
      *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
      *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
      char v40 = 2;
      break;
    case 3:
      *(_WORD *)uint64_t v13 = *(_WORD *)v14;
      char v40 = 3;
      break;
    default:
      else {
        int v20 = 4;
      }
      __asm { BR              X14 }

      return result;
  }

  *(_BYTE *)(v13 + v19) = v40;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8LL);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (unint64_t)&v8[v12] & ~(v11 | 7);
  if (v13 == v14)
  {
    int v24 = *(_DWORD *)(v10 + 84);
    size_t v25 = *(void *)(v10 + 64);
    uint64_t v26 = (v11 + 79) & ~v11;
    uint64_t v17 = (v11 + 78) & ~v11;
  }

  else
  {
    uint64_t v15 = v9;
    uint64_t v72 = a1;
    uint64_t v16 = v11 + 78;
    uint64_t v17 = (v11 + 78) & ~v11;
    if (*(_DWORD *)(v10 + 84)) {
      uint64_t v18 = *(void *)(v10 + 64);
    }
    else {
      uint64_t v18 = *(void *)(v10 + 64) + 1LL;
    }
    unint64_t v19 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
    unint64_t v20 = (v18 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v21 = v20 + 11;
    if (v20 + 11 <= v19) {
      unint64_t v22 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
    }
    else {
      unint64_t v22 = v20 + 11;
    }
    size_t __n = v18;
    uint64_t v27 = ~v11;
    int v75 = *(_DWORD *)(v10 + 84);
    size_t v74 = *(void *)(v10 + 64);
    switch(*(_BYTE *)(v13 + v22))
    {
      case 0:
      case 1:
        uint64_t v71 = v11 + 78;
        uint64_t v28 = v16 + v13;
        goto LABEL_16;
      case 2:
        uint64_t v71 = v11 + 78;
        uint64_t v28 = v13 + v11 + 79;
LABEL_16:
        uint64_t v29 = v28 & v27;
        uint64_t v17 = (v11 + 78) & ~v11;
        size_t v30 = v74;
        uint64_t v16 = v71;
        if (!v75) {
          goto LABEL_19;
        }
        goto LABEL_20;
      case 3:
LABEL_19:
        size_t v30 = __n;
LABEL_20:
        unint64_t v31 = ((v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 10;
        if (v19 > v31) {
          unint64_t v31 = v19;
        }
        if (v21 > v31) {
          unint64_t v31 = v21;
        }
        switch(*(_BYTE *)(v14 + v31))
        {
          case 0:
            uint64_t v33 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v33;
            __int128 v34 = *(_OWORD *)(v14 + 16);
            __int128 v35 = *(_OWORD *)(v14 + 32);
            __int128 v36 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v35;
            *(_OWORD *)(v13 + 48) = v36;
            *(_OWORD *)(v13 + 16) = v34;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v33) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v33;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            __int128 v37 = (void *)((v16 + v13) & v27);
            __int128 v38 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v38, 1LL, v15))
            {
              size_t v39 = __n;
              memcpy(v37, v38, __n);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v37, v38, v15);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v37, 0LL, 1LL, v15);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v39 = __n;
            }

            unint64_t v56 = ((unint64_t)v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v57 = ((unint64_t)v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v58 = *(void *)v57;
            *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
            *(void *)unint64_t v56 = v58;
            *(_BYTE *)(v56 + 9) = *(_BYTE *)(v57 + 9);
            *(_BYTE *)(v13 + v22) = 0;
            goto LABEL_43;
          case 1:
            uint64_t v40 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v40;
            __int128 v41 = *(_OWORD *)(v14 + 16);
            __int128 v42 = *(_OWORD *)(v14 + 32);
            __int128 v43 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v42;
            *(_OWORD *)(v13 + 48) = v43;
            *(_OWORD *)(v13 + 16) = v41;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v40) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v40;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            unint64_t v44 = (void *)((v16 + v13) & v27);
            unint64_t v45 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v45, 1LL, v15))
            {
              size_t v46 = __n;
              memcpy(v44, v45, __n);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v44, v45, v15);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v44, 0LL, 1LL, v15);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v46 = __n;
            }

            unint64_t v59 = ((unint64_t)v44 + v46 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v60 = ((unint64_t)v45 + v46 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v61 = *(void *)v60;
            *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
            *(void *)unint64_t v59 = v61;
            *(_BYTE *)(v59 + 9) = *(_BYTE *)(v60 + 9);
            *(_BYTE *)(v13 + v22) = 1;
LABEL_43:
            a1 = v72;
            break;
          case 2:
            uint64_t v47 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v47;
            __int128 v48 = *(_OWORD *)(v14 + 16);
            __int128 v49 = *(_OWORD *)(v14 + 32);
            __int128 v50 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v49;
            *(_OWORD *)(v13 + 48) = v50;
            *(_OWORD *)(v13 + 16) = v48;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
            unint64_t v51 = (const void *)((v11 + 79 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v51, 1LL, v15))
            {
              size_t v52 = __n;
              memcpy((void *)((v13 + v11 + 79) & v27), v51, __n);
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v10 + 16))((v13 + v11 + 79) & v27, v51, v15);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))( (v13 + v11 + 79) & v27,  0LL,  1LL,  v15);
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v52 = __n;
            }

            unint64_t v53 = (((v13 + v11 + 79) & v27) + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v54 = ((unint64_t)v51 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v55 = *(void *)v54;
            *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
            *(void *)unint64_t v53 = v55;
            *(_BYTE *)(v53 + 9) = *(_BYTE *)(v54 + 9);
            *(_BYTE *)(v53 + 10) = *(_BYTE *)(v54 + 10);
            *(_BYTE *)(v13 + v22) = 2;
            a1 = v72;
            int v24 = v75;
            uint64_t v17 = (v11 + 78) & ~v11;
            size_t v25 = v74;
            break;
          case 3:
            *(_WORD *)uint64_t v13 = *(_WORD *)v14;
            *(_BYTE *)(v13 + v22) = 3;
            uint64_t v26 = (v11 + 79) & ~v11;
            a1 = v72;
            int v24 = v75;
            size_t v25 = v74;
            break;
          default:
            else {
              int v32 = 4;
            }
            __asm { BR              X11 }

            return result;
        }

        return result;
      default:
        else {
          int v23 = 4;
        }
        __asm { BR              X11 }

        return result;
    }
  }

  if (v24) {
    size_t v62 = v25;
  }
  else {
    size_t v62 = v25 + 1;
  }
  size_t v63 = v62 + 7;
  unint64_t v64 = ((v63 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  unint64_t v65 = ((v63 + v26) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  if (v65 <= v64) {
    unint64_t v65 = v64;
  }
  unint64_t v66 = v65 + 1;
  uint64_t v67 = (void *)(((v13 | 7) + v66) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v68 = (void *)(((v14 | 7) + v66) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v69 = v68[1];
  *uint64_t v67 = *v68;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v67[1] = v69;
  return a1;
}

uint64_t initializeWithTake for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(_BYTE *)(v6 + a1) = *(_BYTE *)(v6 + a2);
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (v12 + v8) & ~(v11 | 7);
  uint64_t v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v16 = *(void *)(v10 + 64);
  }
  else {
    size_t v16 = *(void *)(v10 + 64) + 1LL;
  }
  size_t v17 = v16 + 7;
  uint64_t v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL)
                                                                      + 10)
    unint64_t v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  else {
    unint64_t v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  uint64_t v21 = ~v11;
  switch(*(_BYTE *)(v14 + v19))
  {
    case 0:
      uint64_t v22 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v22;
      __int128 v23 = *(_OWORD *)(v14 + 16);
      __int128 v24 = *(_OWORD *)(v14 + 32);
      __int128 v25 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v24;
      *(_OWORD *)(v13 + 48) = v25;
      *(_OWORD *)(v13 + 16) = v23;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v22) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v22;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      uint64_t v26 = (void *)((v15 + v13) & v21);
      uint64_t v27 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v27, 1LL, v9))
      {
        memcpy(v26, v27, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v26, v27, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v26, 0LL, 1LL, v9);
      }

      char v40 = 0;
      unint64_t v41 = ((unint64_t)v26 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v42 = ((unint64_t)v27 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v43 = *(void *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(void *)unint64_t v41 = v43;
      *(_BYTE *)(v41 + 9) = *(_BYTE *)(v42 + 9);
      break;
    case 1:
      uint64_t v28 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v28;
      __int128 v29 = *(_OWORD *)(v14 + 16);
      __int128 v30 = *(_OWORD *)(v14 + 32);
      __int128 v31 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v30;
      *(_OWORD *)(v13 + 48) = v31;
      *(_OWORD *)(v13 + 16) = v29;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v28) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v28;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      int v32 = (void *)((v15 + v13) & v21);
      uint64_t v33 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v33, 1LL, v9))
      {
        memcpy(v32, v33, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v32, v33, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v32, 0LL, 1LL, v9);
      }

      unint64_t v44 = ((unint64_t)v32 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v45 = ((unint64_t)v33 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v46 = *(void *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(void *)unint64_t v44 = v46;
      *(_BYTE *)(v44 + 9) = *(_BYTE *)(v45 + 9);
      char v40 = 1;
      break;
    case 2:
      uint64_t v34 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(void *)uint64_t v13 = v34;
      __int128 v35 = *(_OWORD *)(v14 + 16);
      __int128 v36 = *(_OWORD *)(v14 + 32);
      __int128 v37 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v36;
      *(_OWORD *)(v13 + 48) = v37;
      *(_OWORD *)(v13 + 16) = v35;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      __int128 v38 = (void *)((v18 + v13) & v21);
      size_t v39 = (const void *)((v18 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v39, 1LL, v9))
      {
        memcpy(v38, v39, v16);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v38, v39, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v38, 0LL, 1LL, v9);
      }

      unint64_t v47 = ((unint64_t)v38 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v48 = ((unint64_t)v39 + v17) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v49 = *(void *)v48;
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(void *)unint64_t v47 = v49;
      *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
      *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
      char v40 = 2;
      break;
    case 3:
      *(_WORD *)uint64_t v13 = *(_WORD *)v14;
      char v40 = 3;
      break;
    default:
      else {
        int v20 = 4;
      }
      __asm { BR              X14 }

      return result;
  }

  *(_BYTE *)(v13 + v19) = v40;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (unint64_t)&v8[v12] & ~(v11 | 7);
  if (v13 == v14)
  {
    int v24 = *(_DWORD *)(v10 + 84);
    size_t v25 = *(void *)(v10 + 64);
    uint64_t v26 = (v11 + 79) & ~v11;
    uint64_t v17 = (v11 + 78) & ~v11;
  }

  else
  {
    uint64_t v15 = v9;
    uint64_t v72 = a1;
    uint64_t v16 = v11 + 78;
    uint64_t v17 = (v11 + 78) & ~v11;
    if (*(_DWORD *)(v10 + 84)) {
      uint64_t v18 = *(void *)(v10 + 64);
    }
    else {
      uint64_t v18 = *(void *)(v10 + 64) + 1LL;
    }
    unint64_t v19 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
    unint64_t v20 = (v18 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v21 = v20 + 11;
    if (v20 + 11 <= v19) {
      unint64_t v22 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
    }
    else {
      unint64_t v22 = v20 + 11;
    }
    size_t __n = v18;
    uint64_t v27 = ~v11;
    int v75 = *(_DWORD *)(v10 + 84);
    size_t v74 = *(void *)(v10 + 64);
    switch(*(_BYTE *)(v13 + v22))
    {
      case 0:
      case 1:
        uint64_t v71 = v11 + 78;
        uint64_t v28 = v16 + v13;
        goto LABEL_16;
      case 2:
        uint64_t v71 = v11 + 78;
        uint64_t v28 = v13 + v11 + 79;
LABEL_16:
        uint64_t v29 = v28 & v27;
        uint64_t v17 = (v11 + 78) & ~v11;
        size_t v30 = v74;
        uint64_t v16 = v71;
        if (!v75) {
          goto LABEL_19;
        }
        goto LABEL_20;
      case 3:
LABEL_19:
        size_t v30 = __n;
LABEL_20:
        unint64_t v31 = ((v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 10;
        if (v19 > v31) {
          unint64_t v31 = v19;
        }
        if (v21 > v31) {
          unint64_t v31 = v21;
        }
        switch(*(_BYTE *)(v14 + v31))
        {
          case 0:
            uint64_t v33 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v33;
            __int128 v34 = *(_OWORD *)(v14 + 16);
            __int128 v35 = *(_OWORD *)(v14 + 32);
            __int128 v36 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v35;
            *(_OWORD *)(v13 + 48) = v36;
            *(_OWORD *)(v13 + 16) = v34;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v33) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v33;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            __int128 v37 = (void *)((v16 + v13) & v27);
            __int128 v38 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v38, 1LL, v15))
            {
              size_t v39 = __n;
              memcpy(v37, v38, __n);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v37, v38, v15);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v37, 0LL, 1LL, v15);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v39 = __n;
            }

            unint64_t v56 = ((unint64_t)v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v57 = ((unint64_t)v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v58 = *(void *)v57;
            *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
            *(void *)unint64_t v56 = v58;
            *(_BYTE *)(v56 + 9) = *(_BYTE *)(v57 + 9);
            *(_BYTE *)(v13 + v22) = 0;
            goto LABEL_43;
          case 1:
            uint64_t v40 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v40;
            __int128 v41 = *(_OWORD *)(v14 + 16);
            __int128 v42 = *(_OWORD *)(v14 + 32);
            __int128 v43 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v42;
            *(_OWORD *)(v13 + 48) = v43;
            *(_OWORD *)(v13 + 16) = v41;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v40) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v40;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            unint64_t v44 = (void *)((v16 + v13) & v27);
            unint64_t v45 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v45, 1LL, v15))
            {
              size_t v46 = __n;
              memcpy(v44, v45, __n);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v44, v45, v15);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v44, 0LL, 1LL, v15);
              int v24 = v75;
              uint64_t v17 = (v11 + 78) & ~v11;
              size_t v25 = v74;
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v46 = __n;
            }

            unint64_t v59 = ((unint64_t)v44 + v46 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v60 = ((unint64_t)v45 + v46 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v61 = *(void *)v60;
            *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
            *(void *)unint64_t v59 = v61;
            *(_BYTE *)(v59 + 9) = *(_BYTE *)(v60 + 9);
            *(_BYTE *)(v13 + v22) = 1;
LABEL_43:
            a1 = v72;
            break;
          case 2:
            uint64_t v47 = *(void *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(void *)uint64_t v13 = v47;
            __int128 v48 = *(_OWORD *)(v14 + 16);
            __int128 v49 = *(_OWORD *)(v14 + 32);
            __int128 v50 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v49;
            *(_OWORD *)(v13 + 48) = v50;
            *(_OWORD *)(v13 + 16) = v48;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
            unint64_t v51 = (const void *)((v11 + 79 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v51, 1LL, v15))
            {
              size_t v52 = __n;
              memcpy((void *)((v13 + v11 + 79) & v27), v51, __n);
              uint64_t v26 = (v11 + 79) & ~v11;
            }

            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v10 + 32))((v13 + v11 + 79) & v27, v51, v15);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))( (v13 + v11 + 79) & v27,  0LL,  1LL,  v15);
              uint64_t v26 = (v11 + 79) & ~v11;
              size_t v52 = __n;
            }

            unint64_t v53 = (((v13 + v11 + 79) & v27) + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v54 = ((unint64_t)v51 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v55 = *(void *)v54;
            *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
            *(void *)unint64_t v53 = v55;
            *(_BYTE *)(v53 + 9) = *(_BYTE *)(v54 + 9);
            *(_BYTE *)(v53 + 10) = *(_BYTE *)(v54 + 10);
            *(_BYTE *)(v13 + v22) = 2;
            a1 = v72;
            int v24 = v75;
            uint64_t v17 = (v11 + 78) & ~v11;
            size_t v25 = v74;
            break;
          case 3:
            *(_WORD *)uint64_t v13 = *(_WORD *)v14;
            *(_BYTE *)(v13 + v22) = 3;
            uint64_t v26 = (v11 + 79) & ~v11;
            a1 = v72;
            int v24 = v75;
            size_t v25 = v74;
            break;
          default:
            else {
              int v32 = 4;
            }
            __asm { BR              X11 }

            return result;
        }

        return result;
      default:
        else {
          int v23 = 4;
        }
        __asm { BR              X11 }

        return result;
    }
  }

  if (v24) {
    size_t v62 = v25;
  }
  else {
    size_t v62 = v25 + 1;
  }
  size_t v63 = v62 + 7;
  unint64_t v64 = ((v63 + v17) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  unint64_t v65 = ((v63 + v26) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  if (v65 <= v64) {
    unint64_t v65 = v64;
  }
  unint64_t v66 = v65 + 1;
  uint64_t v67 = (void *)(((v13 | 7) + v66) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v68 = (void *)(((v14 | 7) + v66) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v69 = v68[1];
  *uint64_t v67 = *v68;
  swift_unknownObjectRelease();
  v67[1] = v69;
  return a1;
}

uint64_t getEnumTagSinglePayload for FloatingPointParseStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = *(_DWORD *)(v8 + 84);
  uint64_t v11 = *(void *)(v8 + 64);
  else {
    unsigned int v12 = v7;
  }
  if (!v10) {
    ++v11;
  }
  uint64_t v13 = v11 + 7;
  unint64_t v14 = ((v13 + ((v9 + 78) & ~v9)) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  if (((v13 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8LL) + 11 > v14) {
    unint64_t v14 = ((v13 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = v9 | 7;
  if (v12 < a2)
  {
    if (((((v14 + ((v15 + v16 + 1) & ~v16) + 8) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v12 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0LL;
    }
    __asm { BR              X16 }
  }

  unint64_t v21 = *(void *)((((a1 + v15 + v16 + 1) & ~v16 | 7) + v14 + 1) & 0xFFFFFFFFFFFFF8LL);
  if (v21 >= 0xFFFFFFFF) {
    LODWORD(v21) = -1;
  }
  return (v21 + 1);
}

void storeEnumTagSinglePayload for FloatingPointParseStrategy( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 78) & ~v10;
  uint64_t v12 = *(void *)(v9 + 64);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v8;
  }
  uint64_t v14 = (v10 + 79) & ~v10;
  uint64_t v15 = v10 | 7;
  if (!*(_DWORD *)(v9 + 84)) {
    ++v12;
  }
  uint64_t v16 = v12 + 7;
  unint64_t v17 = ((v16 + v11) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  unint64_t v18 = ((v16 + v14) & 0xFFFFFFFFFFFFFFF8LL) + 11;
  if (v18 > v17) {
    unint64_t v17 = v18;
  }
  if (v13 >= a3)
  {
    int v21 = 0u;
    if (a2 <= v13) {
      goto LABEL_21;
    }
  }

  else
  {
    if ((((_DWORD)v17 + ((*(_DWORD *)(v7 + 64) + (_DWORD)v15 + 1) & ~(_DWORD)v15) + 8) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v19 = a3 - v13 + 1;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    if (a2 <= v13) {
LABEL_21:
    }
      __asm { BR              X14 }
  }

  if ((((_DWORD)v17 + ((*(_DWORD *)(v7 + 64) + (_DWORD)v15 + 1) & ~(_DWORD)v15) + 8) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v22 = ~v13 + a2;
    bzero(a1, ((v17 + ((*(void *)(v7 + 64) + v15 + 1) & ~v15) + 8) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v22;
  }

  __asm { BR              X10 }

void sub_182FA9ED8()
{
  *(_BYTE *)(v0 + outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v2) = v1;
  JUMPOUT(0x182FA9F70LL);
}

void sub_182FA9EE0()
{
  *(_DWORD *)(v0 + outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v2) = 0;
  if (v1) {
    JUMPOUT(0x182FA9EE8LL);
  }
  JUMPOUT(0x182FA9F70LL);
}

void sub_182FA9F48()
{
  *(_WORD *)(v0 + outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v2) = v1;
  JUMPOUT(0x182FA9F70LL);
}

void sub_182FA9F50()
{
  *(_DWORD *)(v0 + outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v2) = v1;
  JUMPOUT(0x182FA9F70LL);
}

uint64_t sub_182FA9F58()
{
  *(_WORD *)(v1 + outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5) = 0;
  if (!(_DWORD)v2) {
    JUMPOUT(0x182FA9F70LL);
  }
  if (v4 < 0x7FFFFFFF)
  {
    if ((v2 & 0x80000000) == 0) {
      JUMPOUT(0x182FA9F6CLL);
    }
    JUMPOUT(0x182FA9F64LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v1, v2, v4, v3);
}

uint64_t storeEnumTagSinglePayload for FloatingPointParseStrategy.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_182FA9FD8 + 4 * byte_183729A5C[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_182FAA00C + 4 * byte_183729A57[v4]))();
}

uint64_t sub_182FAA00C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FAA014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FAA01CLL);
  }
  return result;
}

uint64_t sub_182FAA028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FAA030LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_182FAA034(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FAA03C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in FloatingPointParseStrategy<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointParseStrategy<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in FloatingPointParseStrategy<A>.CodingKeys()
{
}

uint64_t specialized FloatingPointParseStrategy.CodingKeys.init(intValue:)()
{
  return 4LL;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ICULegacyNumberFormatter.Signature(0LL) - 8) + 80LL);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  }

  else
  {
    if (EnumCaseMultiPayload > 1) {
      goto LABEL_7;
    }
    uint64_t v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  }

  uint64_t v4 = v0 + ((v1 + 16) & ~v1) + *(int *)(v3 + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
LABEL_7:
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for NSDecimal._CalculationError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_182FAA1D0 + 4 * byte_183729CE5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_182FAA204 + 4 * byte_183729CE0[v4]))();
}

uint64_t sub_182FAA204(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FAA20C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FAA214LL);
  }
  return result;
}

uint64_t sub_182FAA220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FAA228LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_182FAA22C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FAA234(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NSDecimal._CalculationError()
{
  return &type metadata for NSDecimal._CalculationError;
}

double one-time initialization function for powerOfTen()
{
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 39LL;
  *(_OWORD *)(v0 + 16) = xmmword_183729DD0;
  *(void *)(v0 + 32) = &outlined read-only object #0 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 40) = &outlined read-only object #1 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 48) = &outlined read-only object #2 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 56) = &outlined read-only object #3 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 64) = &outlined read-only object #4 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 72) = &outlined read-only object #5 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 80) = &outlined read-only object #6 of one-time initialization function for powerOfTen;
  *(void *)(v0 + outlined init with copy of Any(v0 + 128, v0 + 88) = &outlined read-only object #7 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 96) = &outlined read-only object #8 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 104) = &outlined read-only object #9 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 112) = &outlined read-only object #10 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 120) = &outlined read-only object #11 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 128) = &outlined read-only object #12 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 136) = &outlined read-only object #13 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 144) = &outlined read-only object #14 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 152) = &outlined read-only object #15 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 160) = &outlined read-only object #16 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 168) = &outlined read-only object #17 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 176) = &outlined read-only object #18 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 184) = &outlined read-only object #19 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 192) = &outlined read-only object #20 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 200) = &outlined read-only object #21 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 208) = &outlined read-only object #22 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 216) = &outlined read-only object #23 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 224) = &outlined read-only object #24 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 232) = &outlined read-only object #25 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 240) = &outlined read-only object #26 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 248) = &outlined read-only object #27 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 256) = &outlined read-only object #28 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 264) = &outlined read-only object #29 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 272) = &outlined read-only object #30 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 280) = &outlined read-only object #31 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 2outlined init with copy of Any(v0 + 128, v0 + 88) = &outlined read-only object #32 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 296) = &outlined read-only object #33 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 304) = &outlined read-only object #34 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 312) = &outlined read-only object #35 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 320) = &outlined read-only object #36 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 328) = &outlined read-only object #37 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 336) = &outlined read-only object #38 of one-time initialization function for powerOfTen;
  powerOfTen._rawValue = (void *)v0;
  return result;
}

double NSDecimal.asVariableLengthInteger()(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = WORD1(a2);
  __int16 v4 = WORD2(a2);
  unint64_t v5 = HIWORD(a2);
  __int16 v6 = a2;
  __int16 v7 = a3;
  unsigned int v8 = HIWORD(a3);
  unint64_t v9 = HIWORD(a1);
  if (WORD2(a1))
  {
    if (!(_DWORD)v9) {
      goto LABEL_3;
    }
LABEL_11:
    if (!(_WORD)a2) {
      goto LABEL_18;
    }
LABEL_12:
    if (WORD1(a2)) {
      goto LABEL_19;
    }
LABEL_13:
    if (WORD2(a2)) {
      goto LABEL_20;
    }
    if (!(_DWORD)v5 && !(_WORD)a3 && !v8)
    {
      unint64_t v13 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v14 = swift_allocObject();
      *(void *)&double result = 3LL;
      *(_OWORD *)(v14 + 16) = xmmword_183729E30;
      *(_WORD *)(v14 + 32) = v13;
      *(_WORD *)(v14 + 34) = v9;
      *(_WORD *)(v14 + 36) = v6;
      return result;
    }

    goto LABEL_24;
  }

  if ((_DWORD)v9) {
    goto LABEL_11;
  }
  if (!(_DWORD)a2 && !WORD2(a2) && !(_DWORD)v5 && !(_WORD)a3 && !v8) {
    return result;
  }
LABEL_3:
  if ((_WORD)a2) {
    goto LABEL_12;
  }
  if (!WORD1(a2) && !WORD2(a2) && !(_DWORD)v5 && !(_WORD)a3 && !v8)
  {
    unint64_t v10 = HIDWORD(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    uint64_t v11 = swift_allocObject();
    *(void *)&double result = 1LL;
    *(_OWORD *)(v11 + 16) = xmmword_183720D90;
    *(_WORD *)(v11 + 32) = v10;
    return result;
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal.copyVariableLengthInteger(_:)( Swift::OpaquePointer a1)
{
  unint64_t v2 = *((void *)a1._rawValue + 2);
  if (v2 <= 8)
  {
    _So9NSDecimala__length_setter(*((void *)a1._rawValue + 2), (_DWORD *)v1);
    switch(v2)
    {
      case 0uLL:
        *(void *)(v1 + 12) = 0LL;
        *(void *)(v1 + 4) = 0LL;
        break;
      case 1uLL:
        *(_WORD *)(v1 + 4) = *((_WORD *)a1._rawValue + 16);
        *(void *)(v1 + 6) = 0LL;
        *(void *)(v1 + 12) = 0LL;
        break;
      case 2uLL:
        *(_DWORD *)(v1 + 4) = *((_DWORD *)a1._rawValue + 8);
        *(void *)(v1 + 8) = 0LL;
        *(_DWORD *)(v1 + 16) = 0;
        break;
      case 3uLL:
        __int16 v5 = *((_WORD *)a1._rawValue + 18);
        *(_DWORD *)(v1 + 4) = *((_DWORD *)a1._rawValue + 8);
        *(_WORD *)(v1 + 8) = v5;
        *(void *)(v1 + 10) = 0LL;
        *(_WORD *)(v1 + 18) = 0;
        break;
      case 4uLL:
        *(void *)(v1 + 4) = *((void *)a1._rawValue + 4);
        *(void *)(v1 + 12) = 0LL;
        break;
      case 5uLL:
        __int16 v6 = *((_WORD *)a1._rawValue + 20);
        *(void *)(v1 + 4) = *((void *)a1._rawValue + 4);
        *(_WORD *)(v1 + 12) = v6;
        *(_DWORD *)(v1 + 14) = 0;
        *(_WORD *)(v1 + 18) = 0;
        break;
      case 6uLL:
        unsigned int v7 = *((_DWORD *)a1._rawValue + 10);
        *(void *)(v1 + 4) = *((void *)a1._rawValue + 4);
        *(void *)(v1 + 12) = v7;
        break;
      case 7uLL:
        int v8 = *((_DWORD *)a1._rawValue + 10);
        unsigned __int16 v9 = *((_WORD *)a1._rawValue + 22);
        *(void *)(v1 + 4) = *((void *)a1._rawValue + 4);
        *(_DWORD *)(v1 + 12) = v8;
        *(_DWORD *)(v1 + 16) = v9;
        break;
      case 8uLL:
        *(_OWORD *)(v1 + 4) = *((_OWORD *)a1._rawValue + 2);
        break;
      default:
        goto LABEL_2;
    }
  }

  else
  {
LABEL_2:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *__int16 v3 = 0;
    swift_willThrow();
  }

Swift::Void __swiftcall NSDecimal.compact()()
{
  uint64_t v2 = *((unsigned __int16 *)v0 + 2);
  uint64_t v3 = *((unsigned __int16 *)v0 + 3);
  uint64_t v4 = *((unsigned __int16 *)v0 + 4);
  uint64_t v5 = *((unsigned __int16 *)v0 + 5);
  uint64_t v6 = *((unsigned __int16 *)v0 + 6);
  uint64_t v7 = *((unsigned __int16 *)v0 + 7);
  int v8 = *((unsigned __int16 *)v0 + 8);
  int v9 = *((unsigned __int16 *)v0 + 9);
  unsigned int v96 = *v0;
  uint64_t v1 = v96;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  int v90 = _So9NSDecimala__exponent_getter((char *)&v96);
  unsigned int v96 = v1;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  unsigned int v96 = v1;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  if (!_So9NSDecimala__length_getter(&v96))
  {
    unsigned int v96 = v1;
    LOWORD(v97) = v2;
    WORD1(v97) = v3;
    WORD2(v97) = v4;
    WORD3(v97) = v5;
    WORD4(v97) = v6;
    WORD5(v97) = v7;
    WORD6(v97) = v8;
    HIWORD(v97) = v9;
  }

  unsigned int v96 = v1;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  uint64_t v81 = v0;
  int v10 = v90;
  int v11 = v90 + 1;
  uint64_t v12 = v2;
  uint64_t v13 = v3;
  uint64_t v14 = 3435973837LL;
  uint64_t v15 = v1;
  while (2)
  {
    int v89 = v11;
    int v91 = v10;
    unsigned int v92 = v15;
    __int16 v83 = v13;
    __int16 v84 = v12;
    uint64_t v86 = v4;
    __int16 v82 = v9;
    NSDecimal.asVariableLengthInteger()( v15 | (v12 << 32) | (v13 << 48),  v4 | (v5 << 16) | (v6 << 32) | (v7 << 48),  v8 | (v9 << 16));
    uint64_t v17 = v16;
    unint64_t v18 = *(void *)(v16 + 16);
    if (!v18)
    {
      LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v2) = 0;
      uint64_t v19 = MEMORY[0x18961AFE8];
      goto LABEL_15;
    }

    uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v19 + 16) = v18;
    bzero((void *)(v19 + 32), 2 * v18);
    unint64_t v20 = *(void *)(v17 + 16);
    if (v18 > v20)
    {
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }

    unint64_t v21 = v18 - 1;
    if (v18 - 1 < *(void *)(v19 + 16))
    {
      uint64_t v22 = v18 - 2;
      unsigned int v23 = *(unsigned __int16 *)(v17 + 32 + 2 * v21);
      LOWORD(v24) = *(_WORD *)(v17 + 32 + 2 * v21) / 0xAu;
      while (1)
      {
        *(_WORD *)(v19 + 30 + 2 * v18) = v24;
        LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v2) = v23 % 0xA;
        if (v18 == 1) {
          break;
        }
        unsigned int v23 = *(unsigned __int16 *)(v17 + 28 + 2 * v18) | ((_DWORD)v2 << 16);
        unsigned int v24 = v23 / 0xA;
        unint64_t v25 = v18 - 2;
        --v18;
        if (v25 >= *(void *)(v19 + 16)) {
          goto LABEL_74;
        }
      }

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._add(_:)( NSDecimal *__return_ptr retstr, Swift::UInt16 a2)
{
  LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5) = a2;
  unint64_t v23 = v2;
  unint64_t v6 = HIWORD(v2);
  unint64_t v24 = v3;
  int v20 = WORD2(v2);
  int v26 = (unsigned __int16)v3;
  unint64_t v7 = HIWORD(v3);
  int v8 = WORD1(v3);
  int v9 = (unsigned __int16)v4;
  unsigned int v25 = v4;
  unsigned int v10 = HIWORD(v4);
  int v11 = WORD2(v3);
  int v19 = v2;
  v21[0] = v2;
  v21[1] = v3;
  unsigned int v22 = v4;
  if (_So9NSDecimala__length_getter(v21))
  {
    LODWORD(v12) = 0;
    unsigned int v5 = (unsigned __int16)v5;
    do
    {
      switch((int)v12)
      {
        case 0:
          unsigned int v13 = v5 + v20;
          int v20 = (unsigned __int16)(v5 + v20);
          break;
        case 1:
          unsigned int v13 = v5 + v6;
          LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v6) = (unsigned __int16)(v5 + v6);
          break;
        case 2:
          unsigned int v13 = v5 + v26;
          int v26 = (unsigned __int16)(v5 + v26);
          break;
        case 3:
          unsigned int v13 = v5 + v8;
          int v8 = (unsigned __int16)(v5 + v8);
          break;
        case 4:
          unsigned int v13 = v5 + v11;
          int v11 = (unsigned __int16)(v5 + v11);
          break;
        case 5:
          unsigned int v13 = v5 + v7;
          LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7) = (unsigned __int16)(v5 + v7);
          break;
        case 6:
          unsigned int v13 = v5 + v9;
          int v9 = (unsigned __int16)(v5 + v9);
          break;
        case 7:
          unsigned int v13 = v5 + v10;
          unsigned int v10 = (unsigned __int16)(v5 + v10);
          break;
        default:
          HIWORD(v25) = v10;
          LOWORD(v25) = v9;
          HIWORD(v24) = v7;
          WORD2(v24) = v11;
          WORD1(v24) = v8;
          LOWORD(v24) = v26;
          HIWORD(v23) = v6;
          WORD2(v23) = v20;
          v21[0] = 0LL;
          v21[1] = 0xE000000000000000LL;
          _StringGuts.grow(_:)(30LL);
          swift_bridgeObjectRelease();
          strcpy((char *)v21, "Invalid index ");
          HIBYTE(v21[1]) = -18;
          int v27 = v12;
          v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          v16._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
          v16._unint64_t object = (void *)0xEE0061737369746ELL;
          String.append(_:)(v16);
          while (1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_31:
            v21[0] = 0LL;
            v21[1] = 0xE000000000000000LL;
            _StringGuts.grow(_:)(30LL);
            swift_bridgeObjectRelease();
            strcpy((char *)v21, "Invalid index ");
            HIBYTE(v21[1]) = -18;
            int v27 = v12;
            v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            v18._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
            v18._unint64_t object = (void *)0xEE0061737369746ELL;
            String.append(_:)(v18);
          }
      }

      uint64_t v12 = (v12 + 1);
      LODWORD(v21[0]) = v19;
      unsigned int v5 = HIWORD(v13);
      WORD2(v21[0]) = v20;
      HIWORD(v21[0]) = v6;
      LOWORD(v21[1]) = v26;
      WORD1(v21[1]) = v8;
      WORD2(v21[1]) = v11;
      HIWORD(v21[1]) = v7;
      LOWORD(v22) = v9;
      HIWORD(v22) = v10;
    }

    while (v12 < _So9NSDecimala__length_getter(v21));
    HIWORD(v25) = v10;
    LOWORD(v25) = v9;
    HIWORD(v24) = v7;
    WORD2(v24) = v11;
    WORD1(v24) = v8;
    LOWORD(v24) = v26;
    HIWORD(v23) = v6;
    WORD2(v23) = v20;
    if (v13 < 0x10000) {
      goto LABEL_16;
    }
    LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5) = 1;
  }

  else
  {
    uint64_t v12 = 0LL;
    if (!(_WORD)v5)
    {
LABEL_16:
      _So9NSDecimala__length_setter(v12, &v23);
      return;
    }
  }

  LODWORD(v21[0]) = v19;
  WORD2(v21[0]) = v20;
  HIWORD(v21[0]) = v6;
  LOWORD(v21[1]) = v26;
  WORD1(v21[1]) = v8;
  WORD2(v21[1]) = v11;
  HIWORD(v21[1]) = v7;
  LOWORD(v22) = v9;
  HIWORD(v22) = v10;
  if (_So9NSDecimala__length_getter(v21) < 8)
  {
    switch((int)v12)
    {
      case 0:
        WORD2(v23) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 1:
        HIWORD(v23) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 2:
        LOWORD(v24) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 3:
        WORD1(v24) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 4:
        WORD2(v24) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 5:
        HIWORD(v24) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 6:
        LOWORD(v25) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      case 7:
        HIWORD(v25) = v5;
        uint64_t v12 = (v12 + 1);
        goto LABEL_16;
      default:
        goto LABEL_31;
    }
  }

  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  swift_allocError();
  *uint64_t v14 = 0;
  swift_willThrow();
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._multiply(byShort:)( NSDecimal *__return_ptr retstr, Swift::UInt16 byShort)
{
  int v5 = v2;
  unint64_t v35 = v2;
  unint64_t v36 = v3;
  unsigned int v37 = v4;
  if (!byShort)
  {
    uint64_t v14 = 0LL;
LABEL_20:
    _So9NSDecimala__length_setter(v14, &v35);
    return;
  }

  v33[0] = v2;
  uint64_t v32 = WORD2(v2);
  unint64_t v7 = HIWORD(v2);
  uint64_t v8 = (unsigned __int16)v3;
  v33[1] = v3;
  uint64_t v9 = WORD1(v3);
  uint64_t v10 = WORD2(v3);
  unint64_t v11 = HIWORD(v3);
  uint64_t v12 = (unsigned __int16)v4;
  unsigned int v34 = v4;
  uint64_t v13 = HIWORD(v4);
  if (!_So9NSDecimala__length_getter(v33))
  {
    uint64_t v14 = 0LL;
    goto LABEL_20;
  }

  int v31 = v5;
  unsigned int v38 = 0;
  int v30 = byShort;
  LODWORD(v14) = 1;
  while (2)
  {
    unint64_t v20 = v7;
    uint64_t v21 = v32;
    uint64_t v22 = v8;
    uint64_t v23 = v9;
    unint64_t v24 = v11;
    uint64_t v25 = v13;
    uint64_t v16 = v10;
    uint64_t v26 = v12;
    switch((int)v14)
    {
      case 1:
        unsigned int v15 = v38 + v32 * v30;
        uint64_t v21 = (unsigned __int16)(v38 + v32 * v30);
        goto LABEL_5;
      case 2:
        unsigned int v15 = v38 + v7 * v30;
        unint64_t v20 = (unsigned __int16)(v38 + v7 * v30);
        goto LABEL_5;
      case 3:
        unsigned int v15 = v38 + v8 * v30;
        uint64_t v22 = (unsigned __int16)(v38 + v8 * v30);
        goto LABEL_5;
      case 4:
        unsigned int v15 = v38 + v9 * v30;
        uint64_t v23 = (unsigned __int16)(v38 + v9 * v30);
        goto LABEL_5;
      case 5:
        unsigned int v15 = v38 + v10 * v30;
        uint64_t v16 = (unsigned __int16)(v38 + v10 * v30);
        goto LABEL_5;
      case 6:
        unsigned int v15 = v38 + v11 * v30;
        unint64_t v24 = (unsigned __int16)(v38 + v11 * v30);
        goto LABEL_5;
      case 7:
        unsigned int v15 = v38 + v12 * v30;
        uint64_t v26 = (unsigned __int16)(v38 + v12 * v30);
        goto LABEL_5;
      case 8:
        unsigned int v15 = v38 + v13 * v30;
        uint64_t v25 = (unsigned __int16)(v38 + v13 * v30);
LABEL_5:
        LODWORD(v33[0]) = v31;
        unsigned int v17 = v15;
        unsigned int v38 = HIWORD(v15);
        uint64_t v32 = v21;
        WORD2(v33[0]) = v21;
        unint64_t v7 = v20;
        HIWORD(v33[0]) = v20;
        uint64_t v8 = v22;
        LOWORD(v33[1]) = v22;
        uint64_t v9 = v23;
        WORD1(v33[1]) = v23;
        uint64_t v10 = v16;
        WORD2(v33[1]) = v16;
        unint64_t v11 = v24;
        HIWORD(v33[1]) = v24;
        uint64_t v12 = v26;
        LOWORD(v34) = v26;
        uint64_t v13 = v25;
        HIWORD(v34) = v25;
        unsigned int v18 = _So9NSDecimala__length_getter(v33);
        unsigned int v19 = v14;
        uint64_t v14 = (v14 + 1);
        if (v19 < v18) {
          continue;
        }
        HIWORD(v37) = v13;
        LOWORD(v37) = v12;
        HIWORD(v36) = v11;
        WORD2(v36) = v10;
        WORD1(v36) = v9;
        LOWORD(v36) = v8;
        HIWORD(v35) = v7;
        WORD2(v35) = v32;
        if (v17 < 0x10000)
        {
          uint64_t v14 = (v14 - 1);
          goto LABEL_20;
        }

        LODWORD(v33[0]) = v31;
        WORD2(v33[0]) = v32;
        HIWORD(v33[0]) = v7;
        LOWORD(v33[1]) = v8;
        WORD1(v33[1]) = v9;
        WORD2(v33[1]) = v10;
        HIWORD(v33[1]) = v11;
        LOWORD(v34) = v12;
        HIWORD(v34) = v13;
        if (_So9NSDecimala__length_getter(v33) < 8)
        {
          NSDecimal.subscript.setter(v38, v14 - 1);
          goto LABEL_20;
        }

        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        swift_allocError();
        *int v27 = 0;
        swift_willThrow();
        break;
      default:
        HIWORD(v37) = v13;
        LOWORD(v37) = v12;
        HIWORD(v36) = v11;
        WORD2(v36) = v10;
        WORD1(v36) = v9;
        LOWORD(v36) = v8;
        HIWORD(v35) = v7;
        WORD2(v35) = v32;
        v33[0] = 0LL;
        v33[1] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(30LL);
        swift_bridgeObjectRelease();
        strcpy((char *)v33, "Invalid index ");
        HIBYTE(v33[1]) = -18;
        int v39 = v14 - 1;
        v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
        v29._unint64_t object = (void *)0xEE0061737369746ELL;
        String.append(_:)(v29);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
    }

    break;
  }

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._multiplyBy10AndAdd(number:)( NSDecimal *__return_ptr retstr, Swift::UInt16 number)
{
  int v5 = v4;
  if (v4 || (NSDecimal._add(_:)(v3, number), (int v5 = v6) != 0LL))
  {
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *unint64_t v7 = 0;
    swift_willThrow();
  }

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._power(exponent:roundingMode:)( NSDecimal *__return_ptr retstr, Swift::Int exponent, NSRoundingMode roundingMode)
{
  unsigned int v6 = v5;
  unint64_t v7 = v4;
  unint64_t v8 = v3;
  uint64_t v183 = v3;
  v194[0] = v3;
  unint64_t v9 = HIWORD(v3);
  uint64_t v177 = WORD2(v3);
  v194[1] = v4;
  uint64_t v195 = (unsigned __int16)v4;
  unint64_t v10 = HIWORD(v4);
  uint64_t v11 = WORD1(v4);
  uint64_t v12 = WORD2(v4);
  LODWORD(v194[2]) = v5;
  int v13 = (unsigned __int16)v5;
  unsigned int v14 = HIWORD(v5);
  if (!_So9NSDecimala__length_getter(v194))
  {
    LODWORD(v194[0]) = v183;
    WORD2(v194[0]) = v177;
    HIWORD(v194[0]) = v9;
    LOWORD(v194[1]) = v195;
    WORD1(v194[1]) = v11;
    WORD2(v194[1]) = v12;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v13;
    WORD1(v194[2]) = v14;
  }

  unsigned int v171 = v14;
  int v175 = v13;
  uint64_t v174 = v12;
  uint64_t v15 = v195;
  if (!exponent)
  {
    specialized NSDecimal.init(_:)(1uLL);
    return;
  }

  if ((specialized static NSDecimal.== infix(_:_:)(v8, v7, v6, 0LL, 0LL, 0) & 1) != 0)
  {
    if (exponent <= 0)
    {
      *(_OWORD *)((char *)v194 + 4) = 0uLL;
      _So9NSDecimala__exponent_setter(0LL, v194);
      _So9NSDecimala__length_setter(0LL, v194);
      _So9NSDecimala__isNegative_setter(1LL, v194);
      _So9NSDecimala__isCompact_setter_0(0LL, v194);
      _So9NSDecimala__reserved_setter(v194);
    }

    return;
  }

  Swift::Int v17 = exponent;
  uint64_t v18 = v183;
  uint64_t v19 = v177;
  uint64_t v20 = v15;
  uint64_t v21 = v11;
  unint64_t v22 = v9;
  uint64_t v23 = v174;
  unsigned int v24 = v171;
  if (exponent < 0)
  {
    Swift::Int v17 = -exponent;
    if (__OFSUB__(0LL, exponent))
    {
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
      goto LABEL_202;
    }
  }

  Swift::Int v25 = v17;
  unint64_t v26 = specialized NSDecimal.init(_:)(1uLL);
  uint64_t v27 = v25;
  uint64_t v28 = v26;
  uint64_t v168 = WORD1(v29);
  uint64_t v169 = (unsigned __int16)v29;
  unint64_t v170 = HIWORD(v26);
  uint64_t v167 = WORD2(v29);
  unint64_t v164 = HIWORD(v29);
  uint64_t v165 = WORD2(v26);
  LODWORD(v166) = HIWORD(v30);
  HIDWORD(v166) = (unsigned __int16)v30;
  if (v27 < 2)
  {
LABEL_124:
    LODWORD(v194[0]) = v28;
    WORD2(v194[0]) = v165;
    HIWORD(v194[0]) = v170;
    LOWORD(v194[1]) = v169;
    WORD1(v194[1]) = v168;
    WORD2(v194[1]) = v167;
    HIWORD(v194[1]) = v164;
    LOWORD(v194[2]) = WORD2(v166);
    WORD1(v194[2]) = v166;
    if (!_So9NSDecimala__length_getter(v194))
    {
      LODWORD(v194[0]) = v28;
      WORD2(v194[0]) = v165;
      HIWORD(v194[0]) = v170;
      LOWORD(v194[1]) = v169;
      WORD1(v194[1]) = v168;
      WORD2(v194[1]) = v167;
      HIWORD(v194[1]) = v164;
      LOWORD(v194[2]) = WORD2(v166);
      WORD1(v194[2]) = v166;
    }

    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v23;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v23;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
    }

    LODWORD(v194[0]) = v28;
    WORD2(v194[0]) = v165;
    HIWORD(v194[0]) = v170;
    LOWORD(v194[1]) = v169;
    WORD1(v194[1]) = v168;
    WORD2(v194[1]) = v167;
    HIWORD(v194[1]) = v164;
    LOWORD(v194[2]) = WORD2(v166);
    WORD1(v194[2]) = v166;
    LODWORD(v161) = v28;
    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v23;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
LABEL_139:
      unsigned int v115 = 0;
      uint64_t v116 = 0LL;
      uint64_t v117 = 0LL;
      unsigned int v118 = 0;
      unsigned int v119 = 0;
      uint64_t v120 = 0LL;
      uint64_t v121 = 0LL;
      int v122 = 0;
      int v123 = 0;
      if ((exponent & 0x8000000000000000LL) == 0) {
        return;
      }
      goto LABEL_155;
    }

    NSDecimal.asVariableLengthInteger()( v28 | (v165 << 32) | (v170 << 48),  v169 | (v168 << 16) | (v167 << 32) | (v164 << 48),  HIDWORD(v166) | ((_DWORD)v166 << 16));
    uint64_t v104 = v18;
    uint64_t v106 = v105;
    LOWORD(v178) = v19;
    LODWORD(v184) = v104;
    LOWORD(v158) = v22;
    unint64_t v107 = v104 | (v19 << 32) | (v22 << 48);
    uint64_t v195 = v20;
    LOWORD(v159) = v21;
    uint64_t v108 = v20 | (v21 << 16);
    LOWORD(v21) = v23;
    LOWORD(v172) = v24;
    NSDecimal.asVariableLengthInteger()(v107, v108 | (v23 << 32) | (v10 << 48), v175 | (v24 << 16));
    uint64_t v110 = v109;
    uint64_t v111 = *(void *)(v106 + 16);
    if (!v111 || (uint64_t v112 = *(void *)(v109 + 16)) == 0)
    {
      __int16 v124 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v174 = MEMORY[0x18961AFE8];
      int v125 = v28;
      __int16 v126 = v21;
      LOWORD(v28) = v22;
      goto LABEL_145;
    }

    uint64_t v113 = v111 + v112;
    if (__OFADD__(v111, v112)) {
      goto LABEL_216;
    }
    if (v113 > 15)
    {
      uint64_t v113 = 16LL;
      LOWORD(v28) = v22;
    }

    else
    {
      LOWORD(v28) = v22;
      if (v113 < 0) {
        goto LABEL_223;
      }
      if (!v113)
      {
        uint64_t v114 = MEMORY[0x18961AFE8];
LABEL_158:
        uint64_t v141 = 0LL;
        uint64_t v142 = v110 + 32;
        uint64_t v143 = v114 + 32;
        while (2)
        {
          if (v141 == v112) {
            goto LABEL_212;
          }
          unsigned int v144 = 0;
          uint64_t v145 = 0LL;
          uint64_t v146 = v141 + 1;
          do
          {
            if (v111 == v145) {
              goto LABEL_195;
            }
            uint64_t v147 = v145 + v141;
            if (__OFADD__(v145, v141)) {
              goto LABEL_196;
            }
            if (v147 >= v113)
            {
              if (v144) {
                goto LABEL_185;
              }
              unsigned int v144 = *(unsigned __int16 *)(v142 + 2 * v141);
              if (*(_WORD *)(v142 + 2 * v141))
              {
                unsigned int v144 = *(unsigned __int16 *)(v106 + 2 * v145 + 32);
                if (*(_WORD *)(v106 + 2 * v145 + 32)) {
                  goto LABEL_185;
                }
              }
            }

            else
            {
              if (v147 < 0)
              {
                __break(1u);
LABEL_199:
                __break(1u);
                goto LABEL_200;
              }

              uint64_t v148 = 2 * v147;
              unsigned int v149 = v144
              unsigned int v144 = HIWORD(v149);
              *(_WORD *)(v143 + v148) = v149;
            }

            ++v145;
          }

          while (v111 != v145);
          if (v144)
          {
            BOOL v49 = __OFADD__(v111, v141);
            uint64_t v150 = v111 + v141;
            if (v49) {
              goto LABEL_217;
            }
            if (v150 >= v113) {
              goto LABEL_185;
            }
            if (v150 < 0) {
              goto LABEL_218;
            }
            *(_WORD *)(v143 + 2 * v150) = v144;
          }

          uint64_t v141 = v146;
          if (v146 != v112) {
            continue;
          }
          break;
        }

        uint64_t v151 = *(void *)(v114 + 16);
        uint64_t v174 = v114;
        if (v151)
        {
          int v125 = v161;
          __int16 v124 = v10;
          if (!*(_WORD *)(v143 + 2 * v151 - 2))
          {
            uint64_t v152 = v151 + 14;
            do
            {
              *(void *)(v114 + 16) = v152 - 15;
              if (v152 == 15) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v114 + 2 * v152--));
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __int16 v126 = v21;
          goto LABEL_145;
        }

        goto LABEL_197;
      }
    }

    uint64_t v114 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v114 + 16) = v113;
    bzero((void *)(v114 + 32), 2 * v113);
    goto LABEL_158;
  }

  while (1)
  {
    uint64_t v174 = v23;
    unint64_t v160 = v27;
    if ((v27 & 1) != 0)
    {
      LODWORD(v194[0]) = v28;
      WORD2(v194[0]) = v165;
      HIWORD(v194[0]) = v170;
      LOWORD(v194[1]) = v169;
      WORD1(v194[1]) = v168;
      WORD2(v194[1]) = v167;
      HIWORD(v194[1]) = v164;
      LOWORD(v194[2]) = WORD2(v166);
      WORD1(v194[2]) = v166;
      if (!_So9NSDecimala__length_getter(v194))
      {
        LODWORD(v194[0]) = v28;
        WORD2(v194[0]) = v165;
        HIWORD(v194[0]) = v170;
        LOWORD(v194[1]) = v169;
        WORD1(v194[1]) = v168;
        WORD2(v194[1]) = v167;
        HIWORD(v194[1]) = v164;
        LOWORD(v194[2]) = WORD2(v166);
        WORD1(v194[2]) = v166;
      }

      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v23;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
      if (!_So9NSDecimala__length_getter(v194))
      {
        LODWORD(v194[0]) = v18;
        WORD2(v194[0]) = v19;
        HIWORD(v194[0]) = v22;
        LOWORD(v194[1]) = v20;
        WORD1(v194[1]) = v21;
        WORD2(v194[1]) = v23;
        HIWORD(v194[1]) = v10;
        LOWORD(v194[2]) = v175;
        WORD1(v194[2]) = v24;
      }

      LODWORD(v194[0]) = v28;
      WORD2(v194[0]) = v165;
      HIWORD(v194[0]) = v170;
      LOWORD(v194[1]) = v169;
      WORD1(v194[1]) = v168;
      WORD2(v194[1]) = v167;
      HIWORD(v194[1]) = v164;
      LOWORD(v194[2]) = WORD2(v166);
      WORD1(v194[2]) = v166;
      LODWORD(v161) = v28;
      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v23;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
      if (_So9NSDecimala__length_getter(v194))
      {
        NSDecimal.asVariableLengthInteger()( v28 | (v165 << 32) | (v170 << 48),  v169 | (v168 << 16) | (v167 << 32) | (v164 << 48),  HIDWORD(v166) | ((_DWORD)v166 << 16));
        uint64_t v31 = v20;
        uint64_t v33 = v32;
        unint64_t v158 = v22;
        uint64_t v195 = v31;
        unsigned int v172 = v24;
        NSDecimal.asVariableLengthInteger()( v18 | (v19 << 32) | (v22 << 48),  v31 | (v21 << 16) | (v23 << 32) | (v10 << 48),  v175 | (v24 << 16));
        uint64_t v35 = v34;
        uint64_t v36 = *(void *)(v33 + 16);
        uint64_t v184 = v18;
        uint64_t v159 = v21;
        unint64_t v155 = v10;
        if (v36 && (uint64_t v37 = *(void *)(v34 + 16)) != 0)
        {
          uint64_t v178 = v19;
          if (__OFADD__(v36, v37)) {
            goto LABEL_208;
          }
          if (v36 + v37 >= 16) {
            uint64_t v38 = 16LL;
          }
          else {
            uint64_t v38 = v36 + v37;
          }
          LOWORD(v10) = v158;
          if (v38 < 0) {
            goto LABEL_223;
          }
          uint64_t v39 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v39 + 16) = v38;
          uint64_t v21 = v39 + 32;
          bzero((void *)(v39 + 32), 2 * v38);
          uint64_t v40 = 0LL;
          uint64_t v41 = v35 + 32;
          __int16 v42 = v174;
          do
          {
            unsigned int v43 = 0;
            uint64_t v44 = 0LL;
            uint64_t v45 = v40++;
            do
            {
              uint64_t v48 = v44 + v45;
              if (__OFADD__(v44, v45)) {
                goto LABEL_190;
              }
              if (v48 >= v38)
              {
                if (v43) {
                  goto LABEL_185;
                }
                unsigned int v43 = *(unsigned __int16 *)(v41 + 2 * v45);
                if (*(_WORD *)(v41 + 2 * v45))
                {
                  unsigned int v43 = *(unsigned __int16 *)(v33 + 2 * v44 + 32);
                  if (*(_WORD *)(v33 + 2 * v44 + 32)) {
                    goto LABEL_185;
                  }
                }
              }

              else
              {
                if (v48 < 0) {
                  goto LABEL_193;
                }
                uint64_t v46 = 2 * v48;
                unsigned int v47 = v43
                unsigned int v43 = HIWORD(v47);
                *(_WORD *)(v21 + v46) = v47;
              }

              ++v44;
            }

            while (v36 != v44);
            if (v43)
            {
              BOOL v49 = __OFADD__(v36, v45);
              uint64_t v50 = v36 + v45;
              if (v49) {
                goto LABEL_213;
              }
              if (v50 >= v38)
              {
LABEL_185:
                lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                swift_allocError();
                *uint64_t v154 = 0;
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_186;
              }

              if (v50 < 0) {
                goto LABEL_214;
              }
              *(_WORD *)(v21 + 2 * v50) = v43;
            }
          }

          while (v40 != v37);
          uint64_t v51 = *(void *)(v39 + 16);
          uint64_t v156 = v39;
          if (v51)
          {
            uint64_t v19 = v178;
            if (!*(_WORD *)(v21 + 2 * v51 - 2))
            {
              uint64_t v52 = v51 + 14;
              do
              {
                *(void *)(v39 + 16) = v52 - 15;
                if (v52 == 15) {
                  break;
                }
              }

              while (!*(unsigned __int16 *)(v39 + 2 * v52--));
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v19 = v178;
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v156 = MEMORY[0x18961AFE8];
          __int16 v42 = v174;
          LOWORD(v10) = v158;
        }

        memset(v194, 0, 20);
        int v185 = v28;
        __int16 v186 = v165;
        __int16 v187 = v170;
        __int16 v188 = v169;
        __int16 v189 = v168;
        __int16 v190 = v167;
        __int16 v191 = v164;
        __int16 v192 = WORD2(v166);
        __int16 v193 = v166;
        int isNegative_getter = _So9NSDecimala__isNegative_getter(&v185);
        int v185 = v184;
        __int16 v186 = v19;
        __int16 v187 = v10;
        __int16 v188 = v195;
        __int16 v55 = v10;
        __int16 v189 = v159;
        __int16 v190 = v42;
        unint64_t v10 = v155;
        __int16 v191 = v155;
        __int16 v192 = v175;
        __int16 v193 = v172;
        BOOL v56 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v185);
        _So9NSDecimala__isNegative_setter(v56, v194);
        int v185 = v28;
        __int16 v186 = v165;
        __int16 v187 = v170;
        __int16 v188 = v169;
        __int16 v189 = v168;
        __int16 v190 = v167;
        __int16 v191 = v164;
        __int16 v192 = WORD2(v166);
        __int16 v193 = v166;
        int v57 = _So9NSDecimala__exponent_getter((char *)&v185);
        int v185 = v184;
        __int16 v186 = v19;
        __int16 v187 = v55;
        __int16 v188 = v195;
        uint64_t v21 = v159;
        __int16 v189 = v159;
        __int16 v190 = v174;
        __int16 v191 = v155;
        __int16 v192 = v175;
        __int16 v193 = v172;
        uint64_t v58 = _So9NSDecimala__exponent_getter((char *)&v185) + v57;
        v59._rawValue = (void *)v156;
        if (*(void *)(v156 + 16) < 9uLL)
        {
          unint64_t v22 = v158;
        }

        else
        {
          uint64_t v180 = v19;
          specialized static NSDecimal._fitMantissa(_:roundingMode:)(v156, roundingMode);
          if (v173) {
            goto LABEL_188;
          }
          uint64_t v62 = v60;
          uint64_t v63 = v61;
          swift_bridgeObjectRelease();
          unint64_t v22 = v158;
          if (v63 > 0x7FFFFFFF)
          {
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_224:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }

          BOOL v49 = __OFADD__((_DWORD)v58, (_DWORD)v63);
          uint64_t v58 = (v58 + v63);
          if (v49) {
            goto LABEL_211;
          }
          v59._rawValue = v62;
          uint64_t v19 = v180;
        }

        NSDecimal.copyVariableLengthInteger(_:)(v59);
        uint64_t v173 = v64;
        if (v64)
        {
LABEL_188:
          swift_bridgeObjectRelease();
          return;
        }

        unint64_t v65 = *((void *)v59._rawValue + 2);
        swift_bridgeObjectRelease();
        if (HIDWORD(v65)) {
          goto LABEL_224;
        }
        _So9NSDecimala__length_setter(v65, v194);
        _So9NSDecimala__isCompact_setter_0(0LL, v194);
        uint64_t v18 = v184;
        _So9NSDecimala__exponent_setter(v58, v194);
        NSDecimal.compact()();
        uint64_t v54 = LODWORD(v194[0]);
        uint64_t v165 = WORD2(v194[0]);
        unint64_t v170 = HIWORD(v194[0]);
        uint64_t v169 = LOWORD(v194[1]);
        uint64_t v168 = WORD1(v194[1]);
        uint64_t v167 = WORD2(v194[1]);
        unint64_t v164 = HIWORD(v194[1]);
        LODWORD(v166) = WORD1(v194[2]);
        HIDWORD(v166) = LOWORD(v194[2]);
        uint64_t v20 = v195;
        unsigned int v24 = v172;
      }

      else
      {
LABEL_53:
        uint64_t v54 = 0LL;
        unint64_t v164 = 0LL;
        uint64_t v165 = 0LL;
        uint64_t v169 = 0LL;
        unint64_t v170 = 0LL;
        uint64_t v167 = 0LL;
        uint64_t v168 = 0LL;
        uint64_t v166 = 0LL;
      }

      --v160;
      uint64_t v161 = v54;
    }

    else
    {
      uint64_t v161 = v28;
    }

    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v174;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v174;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
    }

    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v174;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
      LODWORD(v194[0]) = v18;
      WORD2(v194[0]) = v19;
      HIWORD(v194[0]) = v22;
      LOWORD(v194[1]) = v20;
      WORD1(v194[1]) = v21;
      WORD2(v194[1]) = v174;
      HIWORD(v194[1]) = v10;
      LOWORD(v194[2]) = v175;
      WORD1(v194[2]) = v24;
    }

    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v174;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    LODWORD(v194[0]) = v18;
    WORD2(v194[0]) = v19;
    HIWORD(v194[0]) = v22;
    LOWORD(v194[1]) = v20;
    WORD1(v194[1]) = v21;
    WORD2(v194[1]) = v174;
    HIWORD(v194[1]) = v10;
    LOWORD(v194[2]) = v175;
    WORD1(v194[2]) = v24;
    if (!_So9NSDecimala__length_getter(v194))
    {
LABEL_107:
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      unint64_t v22 = 0LL;
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
      uint64_t v23 = 0LL;
      unint64_t v10 = 0LL;
      int v175 = 0;
      unsigned int v24 = 0;
      goto LABEL_120;
    }

    LOWORD(v178) = v19;
    LODWORD(v184) = v18;
    unsigned int v66 = v24;
    unint64_t v67 = v10;
    LOWORD(v10) = v22;
    unint64_t v68 = v18 | (v19 << 32) | (v22 << 48);
    uint64_t v195 = v20;
    __int16 v69 = v67;
    unint64_t v70 = v20 | (v21 << 16) | (v174 << 32) | (v67 << 48);
    LOWORD(v172) = v66;
    unsigned int v71 = v175 | (v66 << 16);
    NSDecimal.asVariableLengthInteger()(v68, v70, v71);
    uint64_t v73 = v72;
    NSDecimal.asVariableLengthInteger()(v68, v70, v71);
    uint64_t v75 = v74;
    uint64_t v76 = *(void *)(v73 + 16);
    LOWORD(v159) = v21;
    if (!v76 || (uint64_t v28 = *(void *)(v74 + 16)) == 0)
    {
      __int16 v93 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v157 = MEMORY[0x18961AFE8];
LABEL_109:
      __int16 v89 = v178;
      __int16 v90 = v174;
      goto LABEL_110;
    }

    if (__OFADD__(v76, v28)) {
      goto LABEL_201;
    }
    if (v76 + v28 >= 16) {
      uint64_t v77 = 16LL;
    }
    else {
      uint64_t v77 = v76 + v28;
    }
    if (v77 < 0) {
      goto LABEL_223;
    }
    uint64_t v78 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v78 + 16) = v77;
    uint64_t v21 = v78 + 32;
    bzero((void *)(v78 + 32), 2 * v77);
    uint64_t v79 = 0LL;
    uint64_t v80 = v75 + 32;
    do
    {
      unsigned int v81 = 0;
      uint64_t v82 = 0LL;
      uint64_t v83 = v79++;
      do
      {
        uint64_t v86 = v82 + v83;
        if (__OFADD__(v82, v83))
        {
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __int16 v124 = v10;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __int16 v126 = v21;
          int v125 = v161;
LABEL_145:
          memset(v194, 0, 20);
          int v185 = v125;
          __int16 v186 = v165;
          __int16 v187 = v170;
          __int16 v188 = v169;
          __int16 v189 = v168;
          __int16 v190 = v167;
          __int16 v191 = v164;
          __int16 v192 = WORD2(v166);
          __int16 v193 = v166;
          int v162 = _So9NSDecimala__isNegative_getter(&v185);
          int v185 = v184;
          __int16 v186 = v178;
          __int16 v187 = v28;
          __int16 v127 = v195;
          __int16 v188 = v195;
          __int16 v189 = v159;
          __int16 v190 = v126;
          __int16 v191 = v124;
          __int16 v192 = v175;
          __int16 v193 = v172;
          BOOL v128 = v162 != _So9NSDecimala__isNegative_getter(&v185);
          _So9NSDecimala__isNegative_setter(v128, v194);
          int v185 = v125;
          __int16 v186 = v165;
          __int16 v187 = v170;
          __int16 v188 = v169;
          __int16 v189 = v168;
          __int16 v190 = v167;
          __int16 v191 = v164;
          __int16 v192 = WORD2(v166);
          __int16 v193 = v166;
          int v129 = _So9NSDecimala__exponent_getter((char *)&v185);
          int v185 = v184;
          __int16 v186 = v178;
          __int16 v187 = v158;
          __int16 v188 = v127;
          __int16 v189 = v159;
          __int16 v190 = v126;
          __int16 v191 = v124;
          __int16 v192 = v175;
          __int16 v193 = v172;
          uint64_t v130 = _So9NSDecimala__exponent_getter((char *)&v185) + v129;
          v131._rawValue = (void *)v174;
          if (*(void *)(v174 + 16) >= 9uLL)
          {
            specialized static NSDecimal._fitMantissa(_:roundingMode:)(v174, roundingMode);
            if (v173) {
              goto LABEL_186;
            }
            uint64_t v134 = v132;
            uint64_t v135 = v133;
            swift_bridgeObjectRelease();
            if (v135 > 0x7FFFFFFF) {
              goto LABEL_221;
            }
            BOOL v49 = __OFADD__((_DWORD)v130, (_DWORD)v135);
            uint64_t v130 = (v130 + v135);
            if (v49) {
              goto LABEL_222;
            }
            v131._rawValue = v134;
          }

          NSDecimal.copyVariableLengthInteger(_:)(v131);
          if (!v136)
          {
            unint64_t v137 = *((void *)v131._rawValue + 2);
            swift_bridgeObjectRelease();
            if (HIDWORD(v137)) {
              goto LABEL_224;
            }
            _So9NSDecimala__length_setter(v137, v194);
            _So9NSDecimala__isCompact_setter_0(0LL, v194);
            if ((int)v130 >= 128)
            {
LABEL_7:
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              swift_allocError();
              *uint64_t v16 = 0;
              swift_willThrow();
              return;
            }

            _So9NSDecimala__exponent_setter(v130, v194);
            NSDecimal.compact()();
            unsigned int v115 = v194[0];
            uint64_t v116 = WORD2(v194[0]);
            uint64_t v117 = HIWORD(v194[0]);
            unsigned int v118 = LOWORD(v194[1]);
            unsigned int v119 = WORD1(v194[1]);
            uint64_t v120 = WORD2(v194[1]);
            uint64_t v121 = HIWORD(v194[1]);
            int v122 = LOWORD(v194[2]);
            int v123 = WORD1(v194[2]);
            if ((exponent & 0x8000000000000000LL) == 0) {
              return;
            }
LABEL_155:
            unint64_t v138 = specialized NSDecimal.init(_:)(1uLL);
            specialized NSDecimal._divide(by:roundingMode:)( v115 | (unint64_t)(v116 << 32) | (v117 << 48),  v118 | ((unint64_t)v119 << 16) | (v120 << 32) | (v121 << 48),  v122 | (v123 << 16),  v138,  v139,  v140);
            return;
          }

LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
        goto LABEL_207;
      }

        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_379;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        unint64_t v251 = (int)POSIXErrorCode.rawValue.getter();
        uint64_t v252 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        unint64_t v253 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v142 = objc_msgSend(v252, sel_initWithDomain_code_userInfo_, v253, v251, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v254 = objc_msgSend(v142, sel_domain);
        unint64_t v255 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
        uint64_t v257 = v256;

        if (v255 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v257 != v258)
        {
          __int128 v259 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v10 = v447;
          LODWORD(v94) = (_DWORD)v449;
          if ((v259 & 1) == 0)
          {
LABEL_371:
            __break(1u);
            goto LABEL_372;
          }

  *(void *)&v297 = v289;
  *((void *)&v297 + 1) = v280;
  *(void *)&Swift::String v298 = v279;
  *((void *)&v298 + 1) = v278;
  *(void *)&Swift::String v299 = v161;
  *((void *)&v299 + 1) = v154;
  *(void *)&Swift::String v300 = v162;
  *((void *)&v300 + 1) = v171;
  v295 = v162;
  uint64_t v296 = (uint64_t *)v171;
  unsigned int v172 = *(void *)(v166 + 16);
  if (!v172)
  {
LABEL_208:
    outlined release of Locale((uint64_t)v359);
    goto LABEL_209;
  }

  uint64_t v173 = 40LL;
  while (!*(void *)(v166 + v173))
  {
    v173 += 16LL;
    if (!--v172) {
      goto LABEL_208;
    }
  }

  uint64_t v291 = v154;
  uint64_t v292 = (char *)v161;
  swift_bridgeObjectRetain();
  unint64_t v239 = (unint64_t *)(v166 + 40);
  id v240 = (char *)MEMORY[0x18961AFE8];
  do
  {
    id v241 = *v239;
    if (*v239)
    {
      uint64_t v242 = *(v239 - 1);
      if ((v241 & 0x2000000000000000LL) != 0 ? HIBYTE(v241) & 0xF : v242 & 0xFFFFFFFFFFFFLL)
      {
        if ((v241 & 0x1000000000000000LL) != 0)
        {
          int v244 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v241 & 0x2000000000000000LL) != 0)
          {
            uint64_t v304 = *(v239 - 1);
            v305 = v241 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }

          else
          {
            if ((v242 & 0x1000000000000000LL) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }

          int v244 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v240 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v240 + 2) + 1LL,  1,  v240);
        }
        id v246 = *((void *)v240 + 2);
        uint64_t v245 = *((void *)v240 + 3);
        if (v246 >= v245 >> 1) {
          id v240 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v245 > 1),  v246 + 1,  1,  v240);
        }
        *((void *)v240 + 2) = v246 + 1;
        *(_DWORD *)&v240[4 * v246 + 32] = v244;
      }
    }

    v239 += 2;
    --v167;
  }

  while (v167);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v356);
  id v247 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v240);
  __int128 v249 = v248;
  unint64_t v251 = v250;
  unint64_t v253 = v252;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v304);
  outlined release of Locale((uint64_t)v359);
  swift_release();
  double result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v324);
  int v175 = v267;
  uint64_t v174 = v268;
  uint64_t v154 = v291;
  uint64_t v161 = (unint64_t)v292;
  uint64_t v176 = (uint64_t)v296;
  if (v253 != 2)
  {
    if (v160 > v247 >> 10)
    {
LABEL_319:
      __break(1u);
      return result;
    }

    uint64_t v161 = v247;
    uint64_t v154 = v249;
    v295 = v251;
    uint64_t v176 = v253;
  }

  __break(1u);
  return result;
}

                __break(1u);
LABEL_205:
                __break(1u);
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                uint64_t v21 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v21 + 16) + 1LL,  1,  (void *)v21);
LABEL_64:
                unint64_t v65 = *(void *)(v21 + 16);
                uint64_t v64 = *(void *)(v21 + 24);
                if (v65 >= v64 >> 1) {
                  uint64_t v21 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v64 > 1),  v65 + 1,  1,  (void *)v21);
                }
                *(void *)(v21 + 16) = v65 + 1;
                *(void *)(v21 + 8 * v65 + 32) = v6;

                __int128 v199 = v21;
                continue;
              }

              unint64_t v158 = v151 + 5;
            }
          }
        }
      }

    if (a2)
    {
      __break(1u);
LABEL_206:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0LL;
    }

    goto LABEL_217;
  }

  unsigned int v119 = 0LL;
LABEL_217:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v29 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v119 << 8);
  uint64_t v15 = (uint64_t)v136;
LABEL_41:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v16, v29, v20, v6, v15);
  double result = swift_unknownObjectRelease_n();
LABEL_42:
  if (v140 != v2[11])
  {
LABEL_235:
    __break(1u);
    goto LABEL_236;
  }

  unsigned int v30 = v2[8];
  if (v12)
  {
    uint64_t v31 = v12 + 24 * ((v139 >> ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v32 = *(void *)(v31 + 32);
    uint64_t v33 = *(void *)(v31 + 40);
    swift_bridgeObjectRetain();
    double result = swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v139, v30);
    uint64_t v32 = v34;
    uint64_t v33 = v35;
    double result = swift_unknownObjectRelease();
    unsigned int v30 = v2[8];
    unsigned int v140 = v2[11];
  }

  if (v16 != v140)
  {
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
LABEL_239:
    __break(1u);
LABEL_240:
    __break(1u);
    goto LABEL_241;
  }

  if (v20)
  {
    uint64_t v36 = v20 + 24 * ((v29 >> ((4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v38 = *(void *)(v36 + 32);
    uint64_t v37 = *(void *)(v36 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v29, v30);
    uint64_t v38 = v39;
    uint64_t v37 = v40;
    swift_unknownObjectRelease();
  }

  uint64_t v41 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v32);
  __int16 v42 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v38);
  if ((v41 & 1) == 0 && (v42 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  if (((v41 ^ v42) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_212;
  }

  __int16 v127 = v33;
  BOOL v128 = v37;
  uint64_t v51 = *(void *)(v32 + 64);
  uint64_t v134 = (uint64_t *)(v32 + 64);
  uint64_t v52 = 1LL << *(_BYTE *)(v32 + 32);
  __int16 v53 = -1LL;
  if (v52 < 64) {
    __int16 v53 = ~(-1LL << v52);
  }
  uint64_t v54 = v53 & v51;
  __int16 v55 = &v159;
  unint64_t v138 = (unint64_t)(v52 + 63) >> 6;
  unint64_t v139 = (unint64_t)&v162 + 8;
  unint64_t v137 = (__int128 *)v148;
  __int16 v126 = v138 - 1;
  double result = swift_bridgeObjectRetain();
  unsigned int v140 = 0LL;
  uint64_t v133 = v32;
  uint64_t v135 = v38;
  uint64_t v136 = &v159;
  if (!v54) {
    goto LABEL_107;
  }
LABEL_103:
  uint64_t v73 = __clz(__rbit64(v54));
  v54 &= v54 - 1;
  uint64_t v74 = v73 | (v140 << 6);
LABEL_104:
  uint64_t v75 = *(void *)(v32 + 56);
  uint64_t v76 = (void *)(*(void *)(v32 + 48) + 16 * v74);
  uint64_t v77 = v76[1];
  *(void *)&unint64_t v158 = *v76;
  *((void *)&v158 + 1) = v77;
  outlined init with copy of AttributedString._AttributeValue(v75 + 72 * v74, (uint64_t)v55);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v158, (uint64_t)&v176);
    unsigned int v81 = v177;
    if (!v177) {
      break;
    }
    BOOL v56 = v176;
    uint64_t v173 = v180;
    uint64_t v174 = v181;
    int v175 = v182;
    unsigned int v171 = v178;
    unsigned int v172 = v179;
    int v57 = *((void *)&v180 + 1);
    if (!(void)v181)
    {
      swift_bridgeObjectRelease_n();
      outlined consume of AttributedString.AttributeRunBoundaries?(v57, 0LL);
      if (*(void *)(v38 + 16))
      {
        uint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v81);
        if ((v59 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v38 + 56) + 72 * v58, (uint64_t)&v166);
        }

        else
        {
          unint64_t v170 = 0LL;
          uint64_t v168 = 0u;
          uint64_t v169 = 0u;
          uint64_t v166 = 0u;
          uint64_t v167 = 0u;
        }
      }

      else
      {
        unint64_t v170 = 0LL;
        uint64_t v168 = 0u;
        uint64_t v169 = 0u;
        uint64_t v166 = 0u;
        uint64_t v167 = 0u;
      }

      swift_bridgeObjectRelease();
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v171, (uint64_t)v165);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v166,  (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v165,  v139,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (*((void *)&v159 + 1))
      {
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v158,  (uint64_t)v157,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (!v164)
        {
          outlined destroy of Any?( (uint64_t)v165,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v166,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v157);
LABEL_210:
          outlined destroy of Any?( (uint64_t)&v158,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_211:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_212:
          swift_bridgeObjectRelease();
          return 1LL;
        }

        __int16 v60 = *(_OWORD *)(v139 + 48);
        uint64_t v154 = *(_OWORD *)(v139 + 32);
        unint64_t v155 = v60;
        uint64_t v156 = *(void *)(v139 + 64);
        uint64_t v61 = *(_OWORD *)(v139 + 16);
        uint64_t v152 = *(_OWORD *)v139;
        Swift::String v153 = v61;
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v157,  (uint64_t)v151);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v152,  (uint64_t)v150);
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)v151,  (uint64_t)&v146,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)v150,  (uint64_t)v137,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
        if (v147)
        {
          if (v149)
          {
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v146, (uint64_t)v143);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v137, (uint64_t)v142);
            uint64_t v62 = v144;
            uint64_t v130 = v145;
            int v129 = __swift_project_boxed_opaque_existential_1(v143, v144);
            uint64_t v132 = &v124;
            uint64_t v63 = *(void *)(v62 - 8);
            MEMORY[0x1895F8858](v129);
            unint64_t v65 = (char *)&v124 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v142,  (uint64_t)v141);
            unsigned int v66 = type metadata accessor for Optional();
            Swift::OpaquePointer v131 = (char *)&v124;
            unint64_t v67 = *(void *)(v66 - 8);
            MEMORY[0x1895F8858](v66);
            __int16 v69 = (char *)&v124 - v68;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            unint64_t v70 = swift_dynamicCast();
            unsigned int v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56);
            if (v70)
            {
              v71(v69, 0LL, 1LL, v62);
              (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v65, v69, v62);
              uint64_t v72 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v62);
            }

            else
            {
              v71(v69, 1LL, 1LL, v62);
              (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
              uint64_t v72 = 0;
            }

            uint64_t v32 = v133;
            uint64_t v38 = v135;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
            goto LABEL_101;
          }

          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
LABEL_97:
          uint64_t v72 = 0;
        }

        else
        {
          if (v149)
          {
            outlined destroy of Any?( (uint64_t)v137,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            goto LABEL_97;
          }

          uint64_t v72 = 1;
        }

        swift_bridgeObjectRetain();
        uint64_t v180 = specialized BidirectionalCollection.last.getter(v222, v46);
        int v182 = v181;
        swift_bridgeObjectRelease();
        if (!v182) {
          goto LABEL_215;
        }
        if (v180 == 47 && v182 == 0xE100000000000000LL)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v183 & 1) == 0)
          {
LABEL_215:
            swift_bridgeObjectRelease();
            int v57 = v222;
            goto LABEL_217;
          }
        }

        int v57 = v222;
        if (String.count.getter() <= 1)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v184 = (void *)v227;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v184 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v184[2] + 1LL,  1,  v184);
          }
          __int16 v186 = v184[2];
          int v185 = v184[3];
          if (v186 >= v185 >> 1) {
            uint64_t v184 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v185 > 1),  v186 + 1,  1,  v184);
          }
          v184[2] = v186 + 1;
          __int16 v187 = &v184[2 * v186];
          v187[4] = 47LL;
          v187[5] = 0xE100000000000000LL;
          swift_bridgeObjectRelease();
          uint64_t v227 = (unint64_t)v184;
          int v57 = v222;
        }

      __break(1u);
      goto LABEL_205;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_131:
    unsigned int v92 = *(_OWORD *)(v13 + 32);
    uint64_t v183 = *(_OWORD *)(v13 + 16);
    uint64_t v184 = v92;
    int v185 = *(_OWORD *)(v13 + 48);
    double result = BigString.utf8.getter();
    if (__OFSUB__(v169, v17)) {
      goto LABEL_202;
    }
    __int16 v93 = (__int128 *)(v13 + 16);
    BOOL v95 = v164;
    __int16 v94 = v165;
    uint64_t v96 = v166;
    Swift::OpaquePointer v97 = v167;
    uint64_t v98 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v100 = v99;
    uint64_t v102 = v101;
    uint64_t v104 = v103;
    double result = outlined release of Locale((uint64_t)v205);
    if (v162 >= v98 >> 10) {
      uint64_t v105 = (unint64_t)v163;
    }
    else {
      uint64_t v105 = v98;
    }
    if (v162 >= v98 >> 10) {
      uint64_t v106 = v161;
    }
    else {
      uint64_t v106 = v100;
    }
    if (v162 >= v98 >> 10) {
      unint64_t v107 = v160;
    }
    else {
      unint64_t v107 = v102;
    }
    if (v162 >= v98 >> 10) {
      uint64_t v108 = v159;
    }
    else {
      uint64_t v108 = v104;
    }
    uint64_t v109 = *v93;
    uint64_t v110 = v93[2];
    v223[1] = v93[1];
    _OWORD v223[2] = v110;
    v223[0] = v109;
    if (v168 < v105 >> 10) {
      goto LABEL_203;
    }
    *(void *)&__int128 v200 = v105;
    *((void *)&v200 + 1) = v106;
    *(void *)&__int128 v201 = v107;
    *((void *)&v201 + 1) = v108;
    *(void *)&__int128 v202 = v95;
    *((void *)&v202 + 1) = v94;
    *(void *)&__int128 v203 = v96;
    *((void *)&v203 + 1) = v97;
    uint64_t v111 = v215;
    uint64_t v112 = *(void *)(v215 + 16);
    uint64_t v180 = v106;
    int v181 = (__int128 *)v105;
    uint64_t v179 = v107;
    int v182 = v108;
    if (!v112 || v105 >> 10 == v168)
    {
LABEL_162:
      double result = outlined release of AttributedString.Runs((uint64_t)v217);
      uint64_t v130 = v180;
      int v129 = v181;
      Swift::OpaquePointer v131 = v179;
      uint64_t v132 = v182;
LABEL_163:
      uint64_t v133 = v158;
      *unint64_t v158 = v129;
      v133[1] = (__int128 *)v130;
      v133[2] = (__int128 *)v131;
      v133[3] = (__int128 *)v132;
      return result;
    }

    outlined retain of Locale((uint64_t)v223);
    outlined retain of [AttributedString.AttributeRunBoundaries]((uint64_t)&v215);
    uint64_t v113 = (uint64_t *)(v111 + 40);
    uint64_t v114 = v112;
    while (1)
    {
      unsigned int v115 = *v113;
      v113 += 2;
      swift_bridgeObjectRelease();
      if (!v115) {
        break;
      }
      if (!--v114)
      {
        double result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v215);
LABEL_156:
        int v123 = v180;
        int v122 = v181;
        __int16 v124 = v179;
        int v125 = v182;
        goto LABEL_157;
      }
    }

    swift_bridgeObjectRelease();
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v215);
    double result = BigString.startIndex.getter();
    if (v168 <= result >> 10) {
      goto LABEL_156;
    }
    BigString.utf8.getter();
    uint64_t v116 = v97;
    uint64_t v117 = BigString.UTF8View.index(before:)();
    uint64_t v177 = v119;
    uint64_t v178 = v118;
    uint64_t v121 = v120;
    outlined release of Locale((uint64_t)v206);
    BigString.utf8.getter();
    BigString.UTF8View.subscript.getter();
    double result = outlined release of Locale((uint64_t)v207);
    if (v168 < v117 >> 10) {
      goto LABEL_215;
    }
    *(void *)&uint64_t v195 = v117;
    *((void *)&v195 + 1) = v178;
    *(void *)&uint64_t v196 = v121;
    *((void *)&v196 + 1) = v177;
    *(void *)&Swift::String v197 = v95;
    *((void *)&v197 + 1) = v94;
    *(void *)&__int128 v198 = v96;
    *((void *)&v198 + 1) = v116;
    specialized BidirectionalCollection<>._getBlock(for:in:)(1LL, &v195, &v189);
    double result = outlined release of Locale((uint64_t)&v210);
    Swift::OpaquePointer v97 = v116;
    int v123 = v180;
    int v122 = v181;
    __int16 v124 = v179;
    int v125 = v182;
    if (v192 != 2)
    {
      int v122 = (__int128 *)v189;
      if (v168 < v189 >> 10) {
        goto LABEL_219;
      }
      int v123 = v190;
      __int16 v124 = v191;
      int v125 = v192;
    }

LABEL_203:
      __break(1u);
      goto LABEL_204;
    }

    unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    uint64_t v15 = v10 >> 16;
    if ((v7 & 0x1000000000000000LL) == 0) {
      goto LABEL_161;
    }
LABEL_159:
    if (v132 >= v15)
    {
      uint64_t v15 = String.UTF8View._foreignDistance(from:to:)();
      goto LABEL_161;
    }

    __break(1u);
LABEL_275:
    __int16 v94 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
LABEL_174:
    uint64_t v16 = v94 >> 16;
    if (v94 >> 16 >= v132)
    {
      __break(1u);
      goto LABEL_277;
    }

    if ((v7 & 0x1000000000000000LL) != 0)
    {
      BOOL v95 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((v7 & 0x2000000000000000LL) != 0)
    {
      *(void *)&v133[0] = v8;
      *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
      BOOL v95 = *((_BYTE *)v133 + v16);
    }

    else if ((v8 & 0x1000000000000000LL) != 0)
    {
      BOOL v95 = *(_BYTE *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v94 >> 16));
    }

    else
    {
      BOOL v95 = *(_BYTE *)(_StringObject.sharedUTF8.getter() + v16);
    }

    if (v95 == 43) {
      goto LABEL_182;
    }
    uint64_t v16 = 0LL;
LABEL_212:
    if (v6 == v131)
    {
      uint64_t v15 = 0LL;
LABEL_239:
      if (!(_DWORD)v16 || (v110 = __OFSUB__(0LL, v15), uint64_t v15 = -v15, !v110))
      {
        LODWORD(v133[0]) = v135[0];
        *(_OWORD *)((char *)v133 + 4) = *(_OWORD *)((char *)v135 + 4);
        uint64_t v111 = _So9NSDecimala__exponent_getter((char *)v133);
        uint64_t v110 = __OFADD__(v15, v111);
        uint64_t v112 = v15 + v111;
        if (!v110)
        {
          if (v112 != (char)v112)
          {
LABEL_243:
            uint64_t v88 = 0LL;
            uint64_t v87 = 0LL;
            uint64_t v15 = 0LL;
            __int16 v89 = 1LL;
            uint64_t v86 = 1;
            goto LABEL_264;
          }

          _So9NSDecimala__exponent_setter(v112, v135);
LABEL_245:
          if ((a5 & 1) != 0
            && (unint64_t v10 = specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( v10,  v8,  v7),  v131 != v10 >> 14)
            || v10 < 0x4000)
          {
            __int16 v89 = 0LL;
            uint64_t v88 = 0LL;
            uint64_t v87 = 0LL;
            uint64_t v15 = 0LL;
            uint64_t v86 = 1;
            goto LABEL_264;
          }

          NSDecimal.compact()();
          uint64_t v113 = (v7 & 0x1000000000000000LL) == 0 || (v8 & 0x800000000000000LL) != 0;
          if ((v10 & 0xC) == 4LL << v113) {
            goto LABEL_269;
          }
          uint64_t v15 = v10 >> 16;
          if ((v7 & 0x1000000000000000LL) != 0) {
            goto LABEL_270;
          }
LABEL_254:
          uint64_t v114 = LOWORD(v135[1]);
          unsigned int v115 = WORD1(v135[1]);
          uint64_t v116 = v135[0];
          uint64_t v117 = NSDecimal.isNaN.getter( *(unint64_t *)&v135[0],  *((unint64_t *)&v135[0] + 1),  LOWORD(v135[1]) | (WORD1(v135[1]) << 16));
          uint64_t v87 = v114 | (v115 << 16);
          if (v117) {
            __int16 v89 = 0LL;
          }
          else {
            __int16 v89 = v116;
          }
          if (v117) {
            uint64_t v88 = 0LL;
          }
          else {
            uint64_t v88 = *((void *)&v116 + 1);
          }
          if (v117) {
            uint64_t v87 = 0LL;
          }
          uint64_t v86 = 0;
          goto LABEL_264;
        }

        __break(1u);
LABEL_273:
        uint64_t v23 = _StringObject.sharedUTF8.getter();
        goto LABEL_34;
      }

  *(void *)&__int128 v265 = v244;
  *((void *)&v265 + 1) = v247;
  *(void *)&__int128 v266 = v246;
  *((void *)&v266 + 1) = v245;
  *(void *)&BOOL v267 = v159;
  *((void *)&v267 + 1) = v152;
  *(void *)&unsigned __int8 v268 = v160;
  *((void *)&v268 + 1) = v157;
  uint64_t v167 = *(void *)(v100 + 16);
  __int128 v263 = v157;
  __int128 v264 = v160;
  if (!v167)
  {
LABEL_207:
    outlined release of Locale((uint64_t)v327);
    goto LABEL_208;
  }

  uint64_t v168 = 40LL;
  while (!*(void *)(v100 + v168))
  {
    v168 += 16LL;
    if (!--v167) {
      goto LABEL_207;
    }
  }

  __int128 v206 = v152;
  swift_bridgeObjectRetain();
  __int128 v207 = (unint64_t *)(v100 + 40);
  __int128 v208 = (char *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v209 = *v207;
    if (*v207)
    {
      id v210 = *(v207 - 1);
      if ((v209 & 0x2000000000000000LL) != 0 ? HIBYTE(v209) & 0xF : v210 & 0xFFFFFFFFFFFFLL)
      {
        if ((v209 & 0x1000000000000000LL) != 0)
        {
          __int128 v212 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v209 & 0x2000000000000000LL) != 0)
          {
            __int16 v272 = *(v207 - 1);
            __int16 v273 = v209 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }

          else
          {
            if ((v210 & 0x1000000000000000LL) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }

          __int128 v212 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int128 v208 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v208 + 2) + 1LL,  1,  v208);
        }
        char v214 = *((void *)v208 + 2);
        __int128 v213 = *((void *)v208 + 3);
        if (v214 >= v213 >> 1) {
          __int128 v208 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v213 > 1),  v214 + 1,  1,  v208);
        }
        *((void *)v208 + 2) = v214 + 1;
        *(_DWORD *)&v208[4 * v214 + 32] = v212;
      }
    }

    v207 += 2;
    --v163;
  }

  while (v163);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v324);
  __int128 v215 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v208);
  __int128 v217 = v216;
  __int128 v219 = v218;
  id v221 = v220;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v272);
  outlined release of Locale((uint64_t)v327);
  swift_release();
  double result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v292);
  uint64_t v169 = v234;
  uint64_t v152 = v206;
  if (v221 != (__int128 *)2)
  {
    if (v158 > v215 >> 10)
    {
LABEL_304:
      __break(1u);
      return result;
    }

    uint64_t v159 = v215;
    uint64_t v152 = v217;
    __int128 v263 = v221;
    __int128 v264 = v219;
  }

                __break(1u);
                goto LABEL_204;
              }

              uint64_t v104 = v97 + 5;
            }
          }
        }
      }

      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
      goto LABEL_206;
    }

    unint64_t v103 = v113;
    goto LABEL_166;
  }

  return swift_release();
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._round(scale:roundingMode:)( NSDecimal *__return_ptr retstr, Swift::Int scale, NSRoundingMode roundingMode)
{
  unsigned __int16 v6 = v5;
  unint64_t v7 = v4;
  unint64_t v8 = v3;
  unint64_t v128 = v3;
  unint64_t v10 = HIWORD(v3);
  unint64_t v129 = v4;
  unint64_t v11 = HIWORD(v4);
  unsigned int v12 = HIWORD(v5);
  unsigned int v130 = v5;
  int v13 = _So9NSDecimala__exponent_getter((char *)&v128);
  Swift::Int v14 = scale + v13;
  if (__OFADD__(scale, v13))
  {
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  unint64_t v15 = (unsigned __int16)v7;
  uint64_t v16 = WORD1(v7);
  uint64_t v17 = WORD2(v7);
  int v18 = v6;
  if (scale == 0x7FFF || (v14 & 0x8000000000000000LL) == 0) {
    return;
  }
  if (__OFSUB__(0LL, v14)) {
    goto LABEL_87;
  }
  Swift::Int v101 = scale + v13;
  __int16 v108 = WORD2(v8);
  uint64_t v109 = v8;
  LODWORD(v128) = v8;
  WORD2(v128) = WORD2(v8);
  HIWORD(v128) = v10;
  LOWORD(v129) = v15;
  WORD1(v129) = v16;
  WORD2(v129) = v17;
  HIWORD(v129) = v11;
  LOWORD(v130) = v6;
  HIWORD(v130) = v12;
  unint64_t v19 = v15;
  uint64_t v20 = v16;
  int v21 = v18;
  uint64_t v22 = -v14;
  int v23 = _So9NSDecimala__exponent_getter((char *)&v128);
  if (__OFADD__(v23, v22)) {
    goto LABEL_88;
  }
  uint64_t v24 = v22;
  uint64_t v100 = v23;
  uint64_t v102 = v23 + v22;
  LOWORD(v129) = v19;
  WORD1(v129) = v20;
  WORD2(v129) = v17;
  HIWORD(v129) = v11;
  LOWORD(v130) = v21;
  HIWORD(v130) = v12;
  unint64_t v25 = v19;
  int v26 = v21;
  __int16 v104 = v19;
  __int16 v105 = v10;
  __int16 v106 = v12;
  __int16 v103 = v21;
  if (v22 < 5)
  {
    int v27 = 0;
    unsigned int v28 = 0;
    uint64_t v31 = WORD2(v8);
    uint64_t v32 = v109;
    unint64_t v30 = v10;
    unint64_t v8 = v25;
    uint64_t v29 = v20;
    uint64_t v53 = v17;
    unint64_t v52 = v11;
    int v34 = v26;
    unsigned int v39 = v12;
    while (1)
    {
LABEL_26:
      uint64_t v118 = v24;
      __int16 v120 = v31;
      if (v28) {
        int v27 = 1;
      }
      int v131 = v27;
      int v122 = v32;
      __int16 v124 = v30;
      __int16 v112 = v29;
      __int16 v113 = v8;
      LOWORD(v115) = v53;
      LOWORD(v116) = v52;
      __int16 v114 = v34;
      unsigned int v132 = v39;
      NSDecimal.asVariableLengthInteger()( v32 | (v31 << 32) | (v30 << 48),  v8 | (v29 << 16) | (v53 << 32) | (v52 << 48),  v34 | (v39 << 16));
      uint64_t v55 = v54;
      uint64_t v56 = *(void *)(v54 + 16);
      if (v56) {
        break;
      }
      LOWORD(v60) = 0;
      uint64_t v57 = MEMORY[0x18961AFE8];
      uint64_t v62 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (v62) {
        goto LABEL_36;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      LODWORD(v125) = v122;
      WORD2(v125) = v120;
      HIWORD(v125) = v124;
      LOWORD(v126) = v113;
      WORD1(v126) = v112;
      WORD2(v126) = v115;
      HIWORD(v126) = v116;
      LOWORD(v127) = v114;
      HIWORD(v127) = v132;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v57);
      if (v64) {
        goto LABEL_49;
      }
      unint64_t v65 = *(void *)(v57 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v65)) {
        goto LABEL_92;
      }
      _So9NSDecimala__length_setter(v65, &v125);
      uint64_t v32 = v125;
      uint64_t v31 = WORD2(v125);
      unint64_t v30 = HIWORD(v125);
      unint64_t v8 = (unsigned __int16)v126;
      uint64_t v29 = WORD1(v126);
      uint64_t v53 = WORD2(v126);
      unint64_t v52 = HIWORD(v126);
      int v34 = (unsigned __int16)v127;
      unsigned int v39 = HIWORD(v127);
      unint64_t v128 = v125;
      unint64_t v129 = v126;
      unsigned int v130 = v127;
      uint64_t v24 = v118 - 1;
      if (__OFSUB__(v118, 1LL)) {
        goto LABEL_89;
      }
      unsigned int v28 = (unsigned __int16)v60;
      int v27 = v131;
      if (v118 == 1)
      {
        unsigned int v132 = HIWORD(v127);
        uint64_t v115 = WORD2(v126);
        LOWORD(v116) = HIWORD(v126);
        __int16 v114 = v127;
        uint64_t v66 = WORD1(v126);
        if (!(_WORD)v131)
        {
          __int16 v68 = v104;
          __int16 v67 = v105;
          __int16 v70 = v108;
          int v69 = v109;
          __int16 v72 = v17;
          __int16 v71 = v20;
          __int16 v73 = v103;
          if (v28) {
            goto LABEL_52;
          }
          goto LABEL_77;
        }

        __int16 v68 = v104;
        __int16 v67 = v105;
        __int16 v70 = v108;
        int v69 = v109;
        __int16 v72 = v17;
        __int16 v71 = v20;
        __int16 v73 = v103;
        if (v28 == 5 || !v28) {
          ++v28;
        }
LABEL_52:
        __int16 v74 = WORD2(v125);
        int v75 = v125;
        LOWORD(v76) = HIWORD(v125);
        LODWORD(v125) = v69;
        WORD2(v125) = v70;
        HIWORD(v125) = v67;
        LOWORD(v126) = v68;
        WORD1(v126) = v71;
        WORD2(v126) = v72;
        HIWORD(v126) = v11;
        LOWORD(v127) = v73;
        HIWORD(v127) = v12;
        if (_So9NSDecimala__isNegative_getter(&v125))
        {
          __int16 v77 = v66;
          __int16 v78 = v114;
          LOWORD(v79) = v132;
          if (roundingMode)
          {
            if (roundingMode != NSRoundDown)
            {
              if (roundingMode != NSRoundBankers) {
                goto LABEL_72;
              }
              BOOL v80 = v28 == 5;
              if ((v74 & 1) != 0) {
                BOOL v80 = 0;
              }
              if (v28 < 5 || v80) {
                goto LABEL_72;
              }
            }
          }

          else if (v28 < 5)
          {
            goto LABEL_72;
          }

          NSDecimal._add(_:)((NSDecimal *)(v8 | (v66 << 16) | (v115 << 32)), 1u);
          if (v86) {
            return;
          }
          unint64_t v128 = v83;
          unint64_t v76 = HIWORD(v83);
          unsigned int v79 = HIWORD(v85);
          __int16 v78 = v85;
          LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v8) = v84;
          int v75 = v83;
          unint64_t v129 = v84;
          LOWORD(v115) = WORD2(v84);
          unint64_t v116 = HIWORD(v84);
          __int16 v77 = WORD1(v84);
          unsigned int v130 = v85;
          __int16 v74 = WORD2(v83);
LABEL_72:
          LODWORD(v125) = v75;
          WORD2(v125) = v74;
          HIWORD(v125) = v76;
          LOWORD(v126) = v8;
          WORD1(v126) = v77;
          WORD2(v126) = v115;
          HIWORD(v126) = v116;
          LOWORD(v127) = v78;
          HIWORD(v127) = v79;
          uint64_t v87 = _So9NSDecimala__length_getter(&v125);
          uint64_t v88 = v102;
          if (!(_DWORD)v87) {
            _So9NSDecimala__isNegative_setter(v87, &v128);
          }
LABEL_78:
          _So9NSDecimala__isCompact_setter_0(0LL, &v128);
          if (v88 >= 128)
          {
            __int16 v93 = (NSDecimal *)HIWORD(v128);
            uint64_t v94 = v100 - v101 + 1;
            uint64_t v88 = 127LL;
            while (1)
            {
              NSDecimal._multiply(byShort:)(v93, 0xAu);
              if (v98) {
                return;
              }
              unint64_t v128 = v95;
              __int16 v93 = (NSDecimal *)HIWORD(v95);
              unint64_t v129 = v96;
              unsigned int v130 = v97;
              if (--v94 <= 128) {
                goto LABEL_84;
              }
            }
          }

          if (v88 >= (uint64_t)0xFFFFFFFF80000000LL)
          {
LABEL_84:
            _So9NSDecimala__exponent_setter(v88, &v128);
            NSDecimal.compact()();
            return;
          }

LABEL_90:
          __break(1u);
LABEL_91:
          LOWORD(v129) = v113;
          WORD1(v129) = v112;
          WORD2(v129) = v115;
          HIWORD(v129) = v116;
          LOWORD(v130) = v114;
          HIWORD(v130) = v132;
LABEL_92:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }

        if (roundingMode)
        {
          uint64_t v81 = v115;
          if (roundingMode != NSRoundUp)
          {
            if (roundingMode != NSRoundBankers) {
              goto LABEL_77;
            }
            BOOL v82 = v28 == 5;
            if ((v74 & 1) != 0) {
              BOOL v82 = 0;
            }
            if (v28 < 5 || v82) {
              goto LABEL_77;
            }
          }
        }

        else
        {
          uint64_t v81 = v115;
          if (v28 < 5)
          {
LABEL_77:
            uint64_t v88 = v102;
            goto LABEL_78;
          }
        }

        NSDecimal._add(_:)((NSDecimal *)(v8 | (v66 << 16) | (v81 << 32)), 1u);
        if (v92) {
          return;
        }
        unint64_t v128 = v89;
        unint64_t v129 = v90;
        unsigned int v130 = v91;
        goto LABEL_77;
      }
    }

    uint64_t v57 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v57 + 16) = v56;
    bzero((void *)(v57 + 32), 2 * v56);
    unsigned int v58 = *(unsigned __int16 *)(2 * v56 + v55 + 30);
    unsigned int v59 = v58 / 0xA;
    while (1)
    {
      *(_WORD *)(v57 + 30 + 2 * v56) = v59;
      unsigned int v60 = v58 % 0xA;
      if (v56 == 1) {
        break;
      }
      unsigned int v58 = *(unsigned __int16 *)(v55 + 28 + 2 * v56) | (v60 << 16);
      unsigned int v59 = v58 / 0xA;
      unint64_t v61 = v56 - 2;
      --v56;
      if (v61 >= *(void *)(v57 + 16))
      {
        __break(1u);
        goto LABEL_47;
      }
    }

    LOWORD(v12) = v106;
    uint64_t v62 = *(void *)(v57 + 16);
    if (!v62) {
      goto LABEL_39;
    }
LABEL_36:
    if (!*(_WORD *)(v57 + 2 * v62 + 30))
    {
      do
      {
        *(void *)(v57 + 16) = v62 - 1;
        if (v62 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v62--));
    }

    goto LABEL_39;
  }

  int v27 = 0;
  unsigned int v28 = 0;
  LOWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v8) = v129;
  LOWORD(v29) = WORD1(v129);
  LOWORD(v115) = WORD2(v129);
  unint64_t v30 = v10;
  uint64_t v31 = WORD2(v8);
  LOWORD(v116) = HIWORD(v129);
  uint64_t v32 = v109;
  unint64_t v33 = v25;
  LOWORD(v34) = v130;
  uint64_t v35 = v17;
  __int16 v99 = v11;
  unint64_t v36 = v11;
  uint64_t v37 = v20;
  int v38 = v26;
  unsigned int v39 = v12;
  while (1)
  {
    uint64_t v117 = v24;
    __int16 v114 = v34;
    __int16 v112 = v29;
    __int16 v113 = v8;
    if (v28) {
      int v27 = 1;
    }
    int v131 = v27;
    __int16 v119 = v31;
    int v121 = v32;
    __int16 v123 = v30;
    __int16 v110 = v36;
    __int16 v111 = v35;
    unsigned int v132 = v39;
    NSDecimal.asVariableLengthInteger()( v32 | (v31 << 32) | (v30 << 48),  v33 | (v37 << 16) | (v35 << 32) | (v36 << 48),  v38 | (v39 << 16));
    uint64_t v41 = v40;
    uint64_t v42 = *(void *)(v40 + 16);
    if (v42)
    {
      uint64_t v43 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v43 + 16) = v42;
      bzero((void *)(v43 + 32), 2 * v42);
      unsigned int v44 = *(unsigned __int16 *)(2 * v42 + v41 + 30);
      unsigned int v45 = (839 * (v44 >> 4)) >> 19;
      while (1)
      {
        *(_WORD *)(v43 + 30 + 2 * v42) = v45;
        unsigned int v46 = v44 % 0x2710;
        if (v42 == 1) {
          break;
        }
        unsigned int v44 = *(unsigned __int16 *)(v41 + 28 + 2 * v42) | (v46 << 16);
        unsigned int v45 = v44 / 0x2710;
        unint64_t v47 = v42 - 2;
        --v42;
        if (v47 >= *(void *)(v43 + 16))
        {
LABEL_47:
          LOWORD(v129) = v113;
          WORD1(v129) = v112;
          WORD2(v129) = v115;
          HIWORD(v129) = v116;
          LOWORD(v130) = v114;
          HIWORD(v130) = v132;
          __break(1u);
          goto LABEL_48;
        }
      }

      uint64_t v48 = *(void *)(v43 + 16);
      if (!v48) {
        goto LABEL_21;
      }
    }

    else
    {
      LOWORD(v46) = 0;
      uint64_t v43 = MEMORY[0x18961AFE8];
      uint64_t v48 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v48) {
        goto LABEL_21;
      }
    }

    if (!*(_WORD *)(v43 + 2 * v48 + 30))
    {
      do
      {
        *(void *)(v43 + 16) = v48 - 1;
        if (v48 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v43 + 28 + 2 * v48--));
    }

    uint64_t v57 = v44 + 32;
    if (v52 <= v46) {
      unsigned int v59 = v46;
    }
    else {
      unsigned int v59 = v52;
    }
    while (v59 != v52)
    {
      if (v52 >= *(void *)(v42 + 16)) {
        goto LABEL_114;
      }
      v45[v52] = *(_WORD *)(v57 + 2 * v52);
      if ((uint64_t)++v52 >= (uint64_t)v46)
      {
        uint64_t v50 = 1;
LABEL_97:
        if ((uint64_t)v52 < (uint64_t)v47)
        {
          while (1)
          {
LABEL_98:
            if (v52 >= v47) {
              goto LABEL_157;
            }
            unsigned int v46 = *(void *)(v42 + 16);
            if (v52 < v46) {
              break;
            }
LABEL_103:
            __break(1u);
LABEL_104:
            uint64_t v50 = HIWORD(v43);
            unint64_t v52 = v46;
          }

          __int16 v77 = v50 + (*(unsigned __int16 *)(v41 + 32 + 2 * v52) ^ 0xFFFF);
          --v47;
          unsigned int v46 = v41 + 34;
          while (1)
          {
            uint64_t v50 = HIWORD(v77);
            v45[v52] = v77;
            if (v47 == v52) {
              break;
            }
            __int16 v77 = v50 + (*(unsigned __int16 *)(v46 + 2 * v52++) ^ 0xFFFF);
            if (v52 >= *(void *)(v42 + 16)) {
              goto LABEL_103;
            }
          }
        }

  __break(1u);
}

    __int16 v74 = v53 + 32;
    if (v65 <= v59) {
      unint64_t v76 = v59;
    }
    else {
      unint64_t v76 = v65;
    }
    while (v76 != v65)
    {
      if (v65 >= *(void *)(v55 + 16)) {
        goto LABEL_114;
      }
      v58[v65] = *(_WORD *)(v74 + 2 * v65);
      if ((uint64_t)++v65 >= (uint64_t)v59)
      {
        uint64_t v63 = 1;
LABEL_97:
        if ((uint64_t)v65 < (uint64_t)v60)
        {
          while (1)
          {
LABEL_98:
            if (v65 >= v60) {
              goto LABEL_157;
            }
            unsigned int v59 = *(void *)(v55 + 16);
            if (v65 < v59) {
              break;
            }
LABEL_103:
            __break(1u);
LABEL_104:
            uint64_t v63 = HIWORD(v56);
            unint64_t v65 = v59;
          }

          uint64_t v87 = v63 + (*(unsigned __int16 *)(v28 + 32 + 2 * v65) ^ 0xFFFF);
          --v60;
          unsigned int v59 = v28 + 34;
          while (1)
          {
            uint64_t v63 = HIWORD(v87);
            v58[v65] = v87;
            if (v60 == v65) {
              break;
            }
            uint64_t v87 = v63 + (*(unsigned __int16 *)(v59 + 2 * v65++) ^ 0xFFFF);
            if (v65 >= *(void *)(v55 + 16)) {
              goto LABEL_103;
            }
          }
        }

    __int16 v74 = v53 + 32;
    if (v65 <= v59) {
      unint64_t v76 = v59;
    }
    else {
      unint64_t v76 = v65;
    }
    while (v76 != v65)
    {
      if (v65 >= *(void *)(v55 + 16)) {
        goto LABEL_114;
      }
      v58[v65] = *(_WORD *)(v74 + 2 * v65);
      if ((uint64_t)++v65 >= (uint64_t)v59)
      {
        uint64_t v63 = 1;
LABEL_97:
        if ((uint64_t)v65 < (uint64_t)v60)
        {
          while (1)
          {
LABEL_98:
            if (v65 >= v60) {
              goto LABEL_157;
            }
            unsigned int v59 = *(void *)(v55 + 16);
            if (v65 < v59) {
              break;
            }
LABEL_103:
            __break(1u);
LABEL_104:
            uint64_t v63 = HIWORD(v56);
            unint64_t v65 = v59;
          }

          uint64_t v87 = v63 + (*(unsigned __int16 *)(v28 + 32 + 2 * v65) ^ 0xFFFF);
          --v60;
          unsigned int v59 = v28 + 34;
          while (1)
          {
            uint64_t v63 = HIWORD(v87);
            v58[v65] = v87;
            if (v60 == v65) {
              break;
            }
            uint64_t v87 = v63 + (*(unsigned __int16 *)(v59 + 2 * v65++) ^ 0xFFFF);
            if (v65 >= *(void *)(v55 + 16)) {
              goto LABEL_103;
            }
          }
        }

  swift_bridgeObjectRelease();
  if ((BYTE4(v198) & 1) != 0) {
    goto LABEL_91;
  }
  LODWORD(v44) = LODWORD(v198);
  if ((v58 & 1) != 0) {
    goto LABEL_96;
  }
LABEL_94:
  if (!HIDWORD(v56))
  {
    swift_bridgeObjectRelease();
    goto LABEL_108;
  }

          __int16 v99 = v58;
          Swift::Int v101 = v56;
          __int16 v68 = v54;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_119;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          int v69 = (int)POSIXErrorCode.rawValue.getter();
          __int16 v70 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          __int16 v71 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v64 = objc_msgSend(v70, sel_initWithDomain_code_userInfo_, v71, v69, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          Swift::Int v14 = (size_t)objc_msgSend(v64, sel_domain);
          __int16 v72 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v14);
          __int16 v74 = v73;

          if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v74 == v75)
          {
            swift_bridgeObjectRelease_n();
            unsigned int v5 = (unint64_t)v97;
          }

          else
          {
            unint64_t v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unsigned int v5 = (unint64_t)v97;
            if ((v76 & 1) == 0)
            {
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
LABEL_119:
              _StringGuts.grow(_:)(22LL);
              swift_bridgeObjectRelease();
              v103[0] = v5;
              v103[1] = 0x80000001839C9190LL;
              __int16 v105 = v14;
              v86._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v86);
              swift_bridgeObjectRelease();
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x1832279F8LL);
            }
          }

          unint64_t v7 = v96;
          uint64_t v54 = v68;
          uint64_t v56 = v101;
          unint64_t v65 = v99;
LABEL_96:
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v65,  v54,  v56,  v64,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v103,  0LL,  0LL);
          goto LABEL_107;
      }
    }

    Swift::Int v14 = v13;
    if (v13 <= 0) {
      goto LABEL_31;
    }
    unint64_t v95 = v7;
    unint64_t v15 = (char *)malloc(v13);
    if (!v15) {
      goto LABEL_115;
    }
    unint64_t v7 = v15;
    uint64_t v16 = getxattr(path, v8, v15, v14, 0, 1);
    if (v16 == -1)
    {
      free(v7);
      unsigned int v59 = String.init(cString:)();
      unint64_t v61 = v60;
      uint64_t v62 = MEMORY[0x186E1B0E8]();
      LODWORD(v14) = v62;
      uint64_t v63 = 263LL;
      switch(v62)
      {
        case 1:
        case 13:
          uint64_t v63 = 257LL;
          goto LABEL_100;
        case 2:
          uint64_t v63 = 260LL;
          goto LABEL_100;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_97;
        case 27:
          goto LABEL_100;
        default:
          if (v62 == 63)
          {
            uint64_t v63 = 258LL;
          }

          else
          {
            if (v62 == 102)
            {
              uint64_t v66 = 0LL;
              __int16 v67 = 256LL;
              unint64_t v7 = v95;
              unsigned int v5 = (unint64_t)v97;
LABEL_106:
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v67,  v59,  v61,  v66,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v103,  0LL,  0LL);
LABEL_107:
              swift_willThrow();
              swift_bridgeObjectRelease();
              if ((v11 & 0x1000000000000000LL) != 0) {
                goto LABEL_112;
              }
              goto LABEL_108;
            }

              if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
                unint64_t v51 = 0LL;
              }
              else {
                unint64_t v51 = v4;
              }
              *(void *)&__src[6] = v51;
              BYTE8(__src[6]) = v4 == 0x7FFFFFFFFFFFFFFFLL;
              if ((v12 & 0x10) == 0)
              {
LABEL_56:
                if ((v12 & 0x20) == 0) {
                  goto LABEL_57;
                }
                goto LABEL_97;
              }

    v60(v236, a2);
    (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v146, v57);
    goto LABEL_3;
  }

  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v147 = v230;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v146 = v234;
LABEL_66:
  uint64_t v150 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v147, v57);
  if ((v150 & 1) != 0) {
    goto LABEL_90;
  }
LABEL_72:
  __int128 v212 = v60;
  uint64_t v209 = (_BYTE *)dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
  uint64_t v151 = *(_BYTE **)(v86 + 32);
  uint64_t v152 = v86;
  Swift::String v153 = v223;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v151)(v223, v146, v57);
  uint64_t v154 = dispatch thunk of static BinaryInteger.isSigned.getter();
  unint64_t v155 = v214;
  char v234 = *(_BYTE **)(v152 + 16);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v234)(v214, v153, v57);
  if ((v154 & 1) == 0)
  {
    uint64_t v157 = *(void (**)(_BYTE *, uint64_t))(v152 + 8);
    v157(v155, v57);
    goto LABEL_78;
  }

  __int128 v208 = v151;
  uint64_t v156 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v157 = *(void (**)(_BYTE *, uint64_t))(v152 + 8);
  v157(v155, v57);
  unint64_t v158 = v216;
  if (v156 < 65)
  {
    int v162 = v223;
    uint64_t v163 = (void (*)(_BYTE *, _BYTE *, uint64_t))v234;
    goto LABEL_105;
  }

  uint64_t v159 = v206;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v234)(v206, v223, v57);
  unint64_t v238 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      unint64_t v160 = dispatch thunk of BinaryInteger._lowWord.getter();
      double result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v159, v57);
      uint64_t v161 = v160 < v238;
      int v162 = v223;
      goto LABEL_104;
    }

    lazy protocol witness table accessor for type Int and conformance Int();
    int v182 = v230;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    int v181 = dispatch thunk of static Comparable.< infix(_:_:)();
    v157(v182, v57);
    double result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v159, v57);
    int v162 = v223;
LABEL_96:
    uint64_t v163 = (void (*)(_BYTE *, _BYTE *, uint64_t))v234;
    if ((v181 & 1) != 0) {
      goto LABEL_124;
    }
LABEL_105:
    __int16 v191 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v163(v158, v162, v57);
    if (v191 <= 64)
    {
      __int128 v194 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v157(v158, v57);
      if (v194 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
        goto LABEL_118;
      }
    }

    else
    {
      v157(v158, v57);
    }

    unint64_t v158 = v217;
    v163(v217, v162, v57);
    unint64_t v238 = 0x7FFFFFFFFFFFFFFFLL;
    __int16 v192 = dispatch thunk of static BinaryInteger.isSigned.getter();
    __int16 v193 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v192 & 1) != 0)
    {
      if (v193 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        while (1)
        {
          Swift::String v197 = v230;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          unint64_t v158 = v217;
          __int128 v198 = dispatch thunk of static Comparable.< infix(_:_:)();
          v157(v197, v57);
          v157(v158, v57);
          if ((v198 & 1) == 0) {
            break;
          }
LABEL_115:
          __break(1u);
LABEL_116:
          uint64_t v237 = 0x7FFFFFFFFFFFFFFFLL;
          lazy protocol witness table accessor for type Int and conformance Int();
        }

        goto LABEL_118;
      }
    }

    else if (v193 >= 64)
    {
      goto LABEL_116;
    }

    uint64_t v195 = v217;
    uint64_t v196 = dispatch thunk of BinaryInteger._lowWord.getter();
    v157(v195, v57);
    if (v238 < v196) {
      goto LABEL_115;
    }
LABEL_118:
    __int128 v199 = dispatch thunk of BinaryInteger._lowWord.getter();
    v157(v162, v57);
    __int128 v200 = Float.exponent.getter();
    if (!__OFSUB__(v199, v200))
    {
      unsigned int v60 = (void (*)(_BYTE *, uint64_t))v212;
      uint64_t v56 = v213;
      unint64_t v47 = v203;
      if (v199 - v200 < (uint64_t)v209)
      {
        uint64_t v173 = v236;
        goto LABEL_121;
      }

      goto LABEL_15;
    }

    __break(1u);
    goto LABEL_123;
  }

  uint64_t v177 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v178 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v177 & 1) == 0)
  {
    if (v178 < 64)
    {
      uint64_t v183 = v206;
      uint64_t v57 = v235;
      uint64_t v184 = dispatch thunk of BinaryInteger._lowWord.getter();
      double result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v183, v57);
      uint64_t v161 = v184 < v238;
      goto LABEL_103;
    }

    uint64_t v57 = v235;
    v157(v206, v235);
LABEL_78:
    int v162 = v223;
    unint64_t v158 = v216;
    uint64_t v163 = (void (*)(_BYTE *, _BYTE *, uint64_t))v234;
    goto LABEL_105;
  }

  if (v178 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v179 = v230;
    uint64_t v57 = v235;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v180 = v206;
    int v181 = dispatch thunk of static Comparable.< infix(_:_:)();
    v157(v179, v57);
    double result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v180, v57);
    int v162 = v223;
    unint64_t v158 = v216;
    goto LABEL_96;
  }

  uint64_t v57 = v235;
  int v185 = v211;
  __int16 v186 = swift_getAssociatedConformanceWitness();
  MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v185, v186);
  __int16 v187 = v230;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  __int16 v188 = v206;
  LOBYTE(v185) = dispatch thunk of static Comparable.< infix(_:_:)();
  v157(v187, v57);
  unint64_t v158 = v204;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v208)(v204, v188, v57);
  if ((v185 & 1) != 0)
  {
LABEL_123:
    double result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v158, v57);
    goto LABEL_124;
  }

  __int16 v189 = v238;
  __int16 v190 = dispatch thunk of BinaryInteger._lowWord.getter();
  double result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v158, v57);
  uint64_t v161 = v190 < v189;
LABEL_103:
  int v162 = v223;
  unint64_t v158 = v216;
LABEL_104:
  uint64_t v163 = (void (*)(_BYTE *, _BYTE *, uint64_t))v234;
  if (!v161) {
    goto LABEL_105;
  }
LABEL_124:
  __break(1u);
  return result;
}

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v8 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v43 << 8);
LABEL_91:
    swift_unknownObjectRetain();
    unint64_t v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v8, v9, v30, v88);
    double result = (uint64_t *)swift_unknownObjectRelease_n();
    int v27 = v84;
    a4 = v85;
    unint64_t v11 = a5 - v33;
    if (__OFSUB__(a5, v33))
    {
      __break(1u);
      goto LABEL_94;
    }

          __break(1u);
          goto LABEL_91;
        }
      }

      else
      {
        __break(1u);
      }

      uint64_t v141 = specialized _ArrayBuffer._consumeAndCreateNew()(v141);
      uint64_t v142 = v141[2];
      if (v142) {
        goto LABEL_79;
      }
      goto LABEL_90;
    }

  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  double result = outlined destroy of AttributedString._AttributeValue?((uint64_t)&v130);
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

          if (__OFADD__(v10, 2LL)) {
            goto LABEL_109;
          }
          if (v10 + 2 < v10) {
            goto LABEL_110;
          }
          LOBYTE(v26) = 37;
          double result = a5(v9 >> 4);
          unsigned int v5 = v17;
          HIBYTE(v26) = result;
          int v27 = v14;
          if (v6)
          {
            uint64_t v22 = v6 + v10;
            if ((unint64_t)&v26 < v6 + v10 + 3 && v22 < (unint64_t)v28)
            {
              _fatalErrorMessage(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x18349C1F8LL);
            }

            int v23 = v26;
            *(_BYTE *)(v22 + 2) = v27;
            *(_WORD *)uint64_t v22 = v23;
          }

          uint64_t v16 = __OFADD__(v10, 3LL);
          v10 += 3LL;
          if (v16) {
            goto LABEL_111;
          }
        }

        else if (v8 == 2)
        {
          LOBYTE(v13) = -16;
LABEL_7:
          LOBYTE(v9) = v13;
        }

uint64_t NSDecimal.doubleValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned __int16 v3 = a3;
  unsigned __int16 v4 = a2;
  int v5 = a1;
  v24[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v24[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v25 = a3;
  LODWORD(v24[0]) = v5;
  WORD2(v24[0]) = v6;
  HIWORD(v24[0]) = v7;
  LOWORD(v24[1]) = v4;
  WORD1(v24[1]) = v8;
  WORD2(v24[1]) = v9;
  HIWORD(v24[1]) = v10;
  LOWORD(v25) = v3;
  HIWORD(v25) = v11;
  unsigned int v12 = _So9NSDecimala__length_getter(v24);
  if (v12 <= 8)
  {
    if (!v12) {
      goto LABEL_32;
    }
  }

  else
  {
    unsigned int v12 = 8;
  }

  double v14 = 0.0;
  unsigned int v15 = v12 - 1;
  if (v12 != 1)
  {
    while (2)
    {
      unsigned __int16 v16 = v7;
      switch(v15)
      {
        case 1u:
          goto LABEL_9;
        case 2u:
          unsigned __int16 v16 = v4;
          goto LABEL_9;
        case 3u:
          unsigned __int16 v16 = v8;
          goto LABEL_9;
        case 4u:
          unsigned __int16 v16 = v9;
          goto LABEL_9;
        case 5u:
          unsigned __int16 v16 = v10;
          goto LABEL_9;
        case 6u:
          unsigned __int16 v16 = v3;
          goto LABEL_9;
        case 7u:
          unsigned __int16 v16 = v11;
LABEL_9:
          double v14 = v14 * 65536.0 + (double)v16;
          if (--v15) {
            continue;
          }
          double v14 = v14 * 65536.0;
          break;
        default:
          goto LABEL_34;
      }

      break;
    }
  }

  for (double i = v14 + (double)(unsigned __int16)v6; ; double i = 0.0)
  {
    LODWORD(v24[0]) = v5;
    WORD2(v24[0]) = v6;
    HIWORD(v24[0]) = v7;
    LOWORD(v24[1]) = v4;
    WORD1(v24[1]) = v8;
    WORD2(v24[1]) = v9;
    HIWORD(v24[1]) = v10;
    LOWORD(v25) = v3;
    HIWORD(v25) = v11;
    LODWORD(v24[0]) = v5;
    WORD2(v24[0]) = v6;
    HIWORD(v24[0]) = v7;
    LOWORD(v24[1]) = v4;
    WORD1(v24[1]) = v8;
    WORD2(v24[1]) = v9;
    HIWORD(v24[1]) = v10;
    LOWORD(v25) = v3;
    HIWORD(v25) = v11;
    int v19 = _So9NSDecimala__exponent_getter((char *)v24);
    if (v19 > 0)
    {
      __break(1u);
LABEL_34:
      v24[0] = 0LL;
      v24[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(30LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v24, "Invalid index ");
      HIBYTE(v24[1]) = -18;
      v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
      v23._unint64_t object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v23);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x182FAE1CCLL);
    }

    if (!v19) {
      goto LABEL_4;
    }
    int v20 = v19;
    while (v20 >= v19)
    {
      double i = i / 10.0;
      if (__CFADD__(v20++, 1)) {
        goto LABEL_4;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    ;
  }

  LODWORD(v24[0]) = v5;
  WORD2(v24[0]) = v6;
  HIWORD(v24[0]) = v7;
  LOWORD(v24[1]) = v4;
  WORD1(v24[1]) = v8;
  WORD2(v24[1]) = v9;
  HIWORD(v24[1]) = v10;
  LOWORD(v25) = v3;
  HIWORD(v25) = v11;
  int v18 = _So9NSDecimala__exponent_getter((char *)v24);
  if (v18 < 0) {
    goto LABEL_31;
  }
  for (; v18; --v18)
    double i = i * 10.0;
LABEL_4:
  LODWORD(v24[0]) = v5;
  WORD2(v24[0]) = v6;
  HIWORD(v24[0]) = v7;
  LOWORD(v24[1]) = v4;
  WORD1(v24[1]) = v8;
  WORD2(v24[1]) = v9;
  HIWORD(v24[1]) = v10;
  LOWORD(v25) = v3;
  HIWORD(v25) = v11;
  return _So9NSDecimala__isNegative_getter(v24);
}

uint64_t specialized static NSDecimal._integerCompare(lhs:rhs:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a2 + 16);
  if (v3 < v2) {
    return 1LL;
  }
  if (v2 >= v3)
  {
    if (v2)
    {
      uint64_t v5 = 2 * v2 - 2;
      unsigned int v6 = *(unsigned __int16 *)(a1 + v5 + 32);
      unsigned int v7 = *(unsigned __int16 *)(a2 + v5 + 32);
      if (v7 < v6) {
        return 1LL;
      }
      if (v6 < v7) {
        return -1LL;
      }
      uint64_t v8 = v2 - 2;
      uint64_t v9 = a1 + 28;
      uint64_t result = 1LL;
      while (v2 != 1)
      {
        if (v8 >= (uint64_t)v3)
        {
          __break(1u);
          return result;
        }

        unsigned int v10 = *(unsigned __int16 *)(v9 + 2 * v2);
        unsigned int v11 = *(unsigned __int16 *)(a2 + 28 + 2 * v2);
        if (v11 < v10) {
          return result;
        }
        --v2;
        if (v10 < v11) {
          return -1LL;
        }
      }
    }

    return 0LL;
  }

  return -1LL;
}

uint64_t specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    goto LABEL_11;
  }
  unint64_t v8 = a2;
  if (v6 != 1)
  {
    uint64_t v5 = (char *)(v8 + 32);
    unint64_t v4 = *(void *)(a1 + 16);
    LODWORD(v15) = 0x10000 / (*(unsigned __int16 *)(v8 + 32 + 2 * v6 - 2) + 1);
    if (!v4)
    {
      uint64_t v11 = MEMORY[0x18961AFE8];
      goto LABEL_21;
    }

    uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v11 + 16) = v4;
    bzero((void *)(v11 + 32), 2 * v4);
    unsigned int v16 = v15 * *(unsigned __int16 *)(a1 + 32);
    unsigned int v17 = HIWORD(v16);
    *(_WORD *)(v11 + 32) = v15 * *(_WORD *)(a1 + 32);
    unint64_t v18 = v4 - 1;
    if (v4 != 1)
    {
      int v19 = (_WORD *)(v11 + 34);
      int v20 = (unsigned __int16 *)(a1 + 34);
      do
      {
        int v21 = *v20++;
        unsigned int v16 = v17 + v15 * v21;
        unsigned int v17 = HIWORD(v16);
        *v19++ = v16;
        --v18;
      }

      while (v18);
    }

    if (v16 < 0x10000) {
      goto LABEL_21;
    }
    unint64_t v22 = *(void *)(v11 + 24);
    unint64_t v23 = v4 + 1;
    if (v4 < v22 >> 1) {
      goto LABEL_19;
    }
    while (1)
    {
      uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v23,  1,  (char *)v11);
LABEL_19:
      *(void *)(v11 + 16) = v23;
      *(_WORD *)(v11 + 2 * v4 + 32) = v17;
LABEL_21:
      unint64_t v23 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v23 + 16) = v6;
      bzero((void *)(v23 + 32), 2 * v6);
      int v24 = *(unsigned __int16 *)v5;
      uint64_t v5 = (char *)v23;
      unsigned int v25 = v15 * v24;
      LODWORD(v23) = HIWORD(v25);
      *((_WORD *)v5 + 16) = v25;
      unint64_t v26 = v6 - 1;
      if (v6 != 1)
      {
        int v27 = v5 + 34;
        unsigned int v28 = (unsigned __int16 *)(v8 + 34);
        do
        {
          int v29 = *v28++;
          unsigned int v25 = v23 + v15 * v29;
          LODWORD(v23) = HIWORD(v25);
          *v27++ = v25;
          --v26;
        }

        while (v26);
      }

      if (v25 < 0x10000)
      {
        unint64_t v8 = v6;
        goto LABEL_28;
      }

      unint64_t v30 = *((void *)v5 + 3);
      unint64_t v8 = v6 + 1;
      if (v6 >= v30 >> 1) {
LABEL_138:
      }
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v30 > 1),  v8,  1,  v5);
      *((void *)v5 + 2) = v8;
      *(_WORD *)&v5[2 * v6 + 32] = v23;
LABEL_28:
      unint64_t v6 = *(void *)(v11 + 16);
      swift_bridgeObjectRetain();
      if (v6 == v4)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4 + 1,  1,  (char *)v11);
        }
        unint64_t v32 = *(void *)(v11 + 16);
        unint64_t v31 = *(void *)(v11 + 24);
        unint64_t v6 = v32 + 1;
        if (v32 >= v31 >> 1) {
          uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v31 > 1),  v32 + 1,  1,  (char *)v11);
        }
        *(void *)(v11 + 16) = v6;
        *(_WORD *)(v11 + 2 * v32 + 32) = 0;
        unint64_t v8 = *((void *)v5 + 2);
      }

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_133:
      }
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v5 + 2) + 1LL,  1,  v5);
      unint64_t v23 = *((void *)v5 + 2);
      unint64_t v33 = *((void *)v5 + 3);
      unint64_t v4 = v23 + 1;
      if (v23 >= v33 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v23 + 1,  1,  v5);
      }
      *((void *)v5 + 2) = v4;
      int v34 = v5 + 32;
      *(_WORD *)&v5[2 * v23 + 32] = 0;
      unint64_t v30 = v8 - 1;
      if (v8 - 1 > v23)
      {
        __break(1u);
        goto LABEL_135;
      }

      uint64_t v15 = *(void *)(v11 + 16);
      unsigned int v17 = *(unsigned __int16 *)&v34[2 * v30];
      unint64_t v22 = v8 - 2;
      BOOL v80 = v5 + 32;
      if (v8 >= 2) {
        break;
      }
      while (1)
      {
        if (a3 < 0)
        {
LABEL_142:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }

        unsigned int v74 = 0;
        if (!a3) {
          goto LABEL_42;
        }
LABEL_46:
        unint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v4 + 16) = a3;
        bzero((void *)(v4 + 32), 2 * a3);
        int v34 = v5 + 32;
        uint64_t v35 = v15 - v8;
        if (((v15 - v8) & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_43:
        __break(1u);
      }

uint64_t specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5) {
    return MEMORY[0x18961AFE8];
  }
  if (!__OFADD__(v3, v5))
  {
    if (v3 + v5 >= a3) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = v3 + v5;
    }
    if (v6 < 0) {
      goto LABEL_51;
    }
    if (v6)
    {
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v6;
      bzero((void *)(v8 + 32), 2 * v6);
    }

    else
    {
      uint64_t v8 = MEMORY[0x18961AFE8];
    }

    uint64_t v9 = 0LL;
    uint64_t v10 = a2 + 32;
    uint64_t v11 = a1 + 32;
    uint64_t v12 = v8 + 32;
    while (2)
    {
      if (v9 != v5)
      {
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        uint64_t v15 = v9 + 1;
        do
        {
          if (v3 == v14)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }

          unint64_t v18 = v14 + v9;
          if (__OFADD__(v14, v9)) {
            goto LABEL_43;
          }
          if ((uint64_t)v18 >= v6)
          {
            if (v13) {
              goto LABEL_40;
            }
            unsigned int v13 = *(unsigned __int16 *)(v10 + 2 * v9);
            if (*(_WORD *)(v10 + 2 * v9))
            {
              unsigned int v13 = *(unsigned __int16 *)(v11 + 2 * v14);
              if (*(_WORD *)(v11 + 2 * v14)) {
                goto LABEL_40;
              }
            }
          }

          else
          {
            if ((v18 & 0x8000000000000000LL) != 0) {
              goto LABEL_44;
            }
            if (v18 >= *(void *)(v8 + 16)) {
              goto LABEL_45;
            }
            uint64_t v16 = 2 * v18;
            unsigned int v17 = v13
            unsigned int v13 = HIWORD(v17);
            *(_WORD *)(v12 + v16) = v17;
          }

          ++v14;
        }

        while (v3 != v14);
        if (!v13) {
          goto LABEL_33;
        }
        BOOL v19 = __OFADD__(v3, v9);
        unint64_t v20 = v3 + v9;
        if (v19) {
          goto LABEL_48;
        }
        if ((uint64_t)v20 >= v6)
        {
LABEL_40:
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          swift_allocError();
          *int v24 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          return v8;
        }

        if ((v20 & 0x8000000000000000LL) != 0) {
          goto LABEL_49;
        }
        if (v20 < *(void *)(v8 + 16))
        {
          *(_WORD *)(v12 + 2 * v20) = v13;
LABEL_33:
          uint64_t v9 = v15;
          if (v15 != v5) {
            continue;
          }
          uint64_t v21 = *(void *)(v8 + 16);
          if (v21 && !*(_WORD *)(v12 + 2 * v21 - 2))
          {
            uint64_t v22 = v21 + 14;
            do
            {
              *(void *)(v8 + 16) = v22 - 15;
              if (v22 == 15) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v8 + 2 * v22--));
          }

          return v8;
        }

        goto LABEL_50;
      }

      break;
    }

uint64_t _So9NSDecimala__isCompact_setter_0(uint64_t result, _DWORD *a2)
{
  *a2 = *a2 & 0xFFFFDFFF | ((result & 1) << 13);
  return result;
}

uint64_t _So9NSDecimala__isNegative_setter(uint64_t result, _DWORD *a2)
{
  *a2 = *a2 & 0xFFFFEFFF | ((result & 1) << 12);
  return result;
}

uint64_t specialized static NSDecimal._normalize(a:b:roundingMode:)(int *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unsigned int v6 = *a1;
  unsigned int v180 = *a1;
  __int128 v181 = *(_OWORD *)(a1 + 1);
  int v7 = _So9NSDecimala__exponent_getter((char *)&v180);
  unsigned int v8 = *(_DWORD *)a2;
  unsigned int v180 = *(_DWORD *)a2;
  __int128 v181 = *(_OWORD *)(a2 + 4);
  int v9 = _So9NSDecimala__exponent_getter((char *)&v180);
  int v10 = v7 - v9;
  if (v7 == v9) {
    return v10 & 1;
  }
  BOOL v11 = v10 < 0;
  if (v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = (v9 - v7);
  }
  if (v10 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = (uint64_t)a1;
  }
  uint64_t v182 = v13;
  if (v11) {
    uint64_t v14 = v8;
  }
  else {
    uint64_t v14 = v6;
  }
  if (!v11) {
    a2 = (uint64_t)a1;
  }
  uint64_t v15 = v14 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 6) << 48);
  unint64_t v16 = *(void *)(a2 + 8);
  LODWORD(v174) = *(_DWORD *)(a2 + 16);
  NSDecimal.asVariableLengthInteger()(v15, v16, v174);
  unint64_t v18 = v17;
  uint64_t v19 = specialized abs<A>(_:)(v12);
  uint64_t v20 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v20 != -1) {
    goto LABEL_322;
  }
LABEL_14:
  uint64_t v21 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
  rawValue = powerOfTen._rawValue;
  uint64_t v23 = *((void *)powerOfTen._rawValue + 2);
  unint64_t v176 = v15;
  uint64_t v179 = (_DWORD *)a2;
  uint64_t v171 = v12;
  uint64_t v175 = v16;
  if (v23 > v19)
  {
    unint64_t v16 = v18;
    if ((v19 & 0x8000000000000000LL) == 0) {
      goto LABEL_16;
    }
LABEL_256:
    __break(1u);
LABEL_304:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *uint64_t v165 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_305;
  }

  if (!v23) {
    goto LABEL_332;
  }
  a2 = v23 - 1;
  unint64_t v16 = v18;
  do
  {
    BOOL v28 = __OFSUB__(v19, a2);
    v19 -= a2;
    if (v28)
    {
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      swift_once();
      goto LABEL_14;
    }

    uint64_t v29 = v21[382];
    uint64_t v12 = *(void *)(v16 + 16);
    if (!v12 || (uint64_t v15 = *(void *)(v29 + 8 * a2 + 32), (v21 = *(uint64_t **)(v15 + 16)) == 0LL))
    {
      swift_bridgeObjectRelease();
      unint64_t v16 = MEMORY[0x18961AFE8];
      uint64_t v21 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
      continue;
    }

    if (__OFADD__(v12, v21)) {
      goto LABEL_333;
    }
    uint64_t v167 = a2;
    uint64_t v168 = v3;
    unint64_t v170 = v18;
    else {
      uint64_t v25 = (uint64_t)v21 + v12;
    }
    if (v25 < 0) {
      goto LABEL_378;
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v30 + 16) = v25;
    uint64_t v31 = v30 + 32;
    bzero((void *)(v30 + 32), 2 * v25);
    unint64_t v32 = 0LL;
    uint64_t v33 = v15 + 32;
    do
    {
      unsigned int v34 = 0;
      uint64_t v35 = 0LL;
      uint64_t v36 = v32;
      unint64_t v32 = (uint64_t *)((char *)v32 + 1);
      do
      {
        uint64_t v39 = (uint64_t)v36 + v35;
        if (__OFADD__(v35, v36))
        {
          __break(1u);
          swift_bridgeObjectRelease();
LABEL_305:
          swift_bridgeObjectRelease();
LABEL_306:
          swift_bridgeObjectRelease();
          return v10 & 1;
        }

        if (v39 >= v25)
        {
          if (v34) {
            goto LABEL_67;
          }
          unsigned int v34 = *(unsigned __int16 *)(v33 + 2LL * (void)v36);
          if (*(_WORD *)(v33 + 2LL * (void)v36))
          {
            unsigned int v34 = *(unsigned __int16 *)(v16 + 2 * v35 + 32);
            if (*(_WORD *)(v16 + 2 * v35 + 32)) {
              goto LABEL_67;
            }
          }
        }

        else
        {
          if (v39 < 0)
          {
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            uint64_t v111 = 8LL;
LABEL_276:
            swift_bridgeObjectRetain();
            uint64_t v112 = static Array._allocateBufferUninitialized(minimumCapacity:)();
            *(void *)(v112 + 16) = v111;
            bzero((void *)(v112 + 32), 2 * v111);
            goto LABEL_277;
          }

          uint64_t v37 = 2 * v39;
          unsigned int v38 = v34
          unsigned int v34 = HIWORD(v38);
          *(_WORD *)(v31 + v37) = v38;
        }

        ++v35;
      }

      while (v12 != v35);
      if (!v34) {
        continue;
      }
      BOOL v28 = __OFADD__(v12, v36);
      uint64_t v40 = (uint64_t)v36 + v12;
      if (v28) {
        goto LABEL_337;
      }
      if (v40 >= v25)
      {
LABEL_67:
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        int v44 = (void *)swift_allocError();
        _BYTE *v45 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        uint64_t v46 = 0LL;
        uint64_t v21 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
        goto LABEL_101;
      }

      if (v40 < 0) {
        goto LABEL_338;
      }
      *(_WORD *)(v31 + 2 * v40) = v34;
    }

    while (v32 != v21);
    uint64_t v41 = *(void *)(v30 + 16);
    if (v41)
    {
      uint64_t v21 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
      a2 = v167;
      if (*(_WORD *)(v31 + 2 * v41 - 2))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v16 = v30;
        uint64_t v3 = v168;
      }

      else
      {
        uint64_t v42 = v41 + 14;
        uint64_t v3 = v168;
        do
        {
          *(void *)(v30 + 16) = v42 - 15;
          if (v42 == 15) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v30 + 2 * v42--));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v16 = v30;
      }

      unint64_t v18 = v170;
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v16 = v30;
      uint64_t v3 = v168;
      unint64_t v18 = v170;
      uint64_t v21 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
      a2 = v167;
    }
  }

  while (v23 <= v19);
  rawValue = (void *)v21[382];
  if (v19 < 0) {
    goto LABEL_256;
  }
LABEL_16:
  uint64_t v24 = v3;
  uint64_t v25 = *(void *)(v16 + 16);
  if (!v25 || (uint64_t v19 = rawValue[v19 + 4], (v26 = *(void *)(v19 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47._rawValue = (void *)MEMORY[0x18961AFE8];
    unint64_t v48 = v179;
    goto LABEL_69;
  }

  uint64_t v15 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_343:
    __break(1u);
    goto LABEL_344;
  }

  if (v15 > 7)
  {
    uint64_t v15 = 8LL;
  }

  else
  {
    if (v15 < 0) {
      goto LABEL_378;
    }
    if (!v15)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = MEMORY[0x18961AFE8];
      goto LABEL_74;
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v27 + 16) = v15;
  bzero((void *)(v27 + 32), 2 * v15);
LABEL_74:
  uint64_t v54 = 0LL;
  uint64_t v55 = v19 + 32;
  uint64_t v56 = v27 + 32;
  while (2)
  {
    if (v54 == v26) {
      goto LABEL_336;
    }
    unsigned int v57 = 0;
    uint64_t v58 = 0LL;
    uint64_t v59 = v54 + 1;
    do
    {
      if (v25 == v58) {
        goto LABEL_273;
      }
      uint64_t v60 = v58 + v54;
      if (__OFADD__(v58, v54)) {
        goto LABEL_274;
      }
      if (v60 >= v15)
      {
        if (v57) {
          goto LABEL_100;
        }
        unsigned int v57 = *(unsigned __int16 *)(v55 + 2 * v54);
        if (*(_WORD *)(v55 + 2 * v54))
        {
          unsigned int v57 = *(unsigned __int16 *)(v16 + 2 * v58 + 32);
          if (*(_WORD *)(v16 + 2 * v58 + 32)) {
            goto LABEL_100;
          }
        }
      }

      else
      {
        if (v60 < 0) {
          goto LABEL_312;
        }
        uint64_t v61 = 2 * v60;
        unsigned int v62 = v57
        unsigned int v57 = HIWORD(v62);
        *(_WORD *)(v56 + v61) = v62;
      }

      ++v58;
    }

    while (v25 != v58);
    if (!v57)
    {
LABEL_94:
      uint64_t v54 = v59;
      if (v59 != v26) {
        continue;
      }
      uint64_t v64 = *(void *)(v27 + 16);
      if (v64 && !*(_WORD *)(v56 + 2 * v64 - 2))
      {
        do
        {
          *(void *)(v27 + 16) = v64 - 1;
          if (v64 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v27 + 28 + 2 * v64--));
      }

      goto LABEL_309;
    }

    break;
  }

  BOOL v28 = __OFADD__(v25, v54);
  uint64_t v63 = v25 + v54;
  if (v28) {
    goto LABEL_346;
  }
  if (v63 < v15)
  {
    if (v63 < 0) {
      goto LABEL_347;
    }
    *(_WORD *)(v56 + 2 * v63) = v57;
    goto LABEL_94;
  }