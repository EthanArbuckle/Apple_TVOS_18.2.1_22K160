Swift::Int Morphology._CustomPronoun.hashValue.getter()
{
  void *v0;
  Hasher.init(_seed:)();
  if (v0[1])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[3]) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v0[3])
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v0[5]) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  Hasher._combine(_:)(0);
  if (v0[5])
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[7]) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    if (v0[9]) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Morphology._CustomPronoun.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1830AB0B0 + 4 * byte_18379FEB4[*v0]))( 0x467463656A627573LL,  0xEB000000006D726FLL);
}

uint64_t sub_1830AB0B0()
{
  return 0x6F467463656A626FLL;
}

uint64_t sub_1830AB0CC()
{
  return 0x6973736573736F70LL;
}

unint64_t sub_1830AB0F0()
{
  return 0xD000000000000017LL;
}

uint64_t sub_1830AB10C()
{
  return 0x766978656C666572LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Morphology._CustomPronoun.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Morphology._CustomPronoun.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Morphology._CustomPronoun.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Morphology._CustomPronoun.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Morphology._CustomPronoun.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

__n128 protocol witness for Decodable.init(from:) in conformance Morphology._CustomPronoun@<Q0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology._CustomPronoun(void *a1)
{
  return Morphology._CustomPronoun.encode(to:)(a1);
}

uint64_t Morphology.Pronoun.pronoun.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Morphology.Pronoun.pronoun.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Morphology.Pronoun.pronoun.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Morphology.Pronoun.morphology.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 18);
  uint64_t v3 = *(void *)(v1 + 24);
  char v4 = *(_BYTE *)(v1 + 36);
  *(_WORD *)a1 = *(_WORD *)(v1 + 16);
  *(_BYTE *)(a1 + 2) = v2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 20) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Morphology.Pronoun.morphology.setter(__int16 *a1)
{
  __int16 v3 = *a1;
  char v4 = *((_BYTE *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 1);
  char v6 = *((_BYTE *)a1 + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(_WORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 18) = v4;
  *(void *)(v1 + 24) = v5;
  *(_DWORD *)(v1 + 32) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v1 + 36) = v6;
  return result;
}

uint64_t (*Morphology.Pronoun.morphology.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Morphology.Pronoun.dependentMorphology.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  int v3 = *(_DWORD *)(v1 + 56);
  char v4 = *(_BYTE *)(v1 + 60);
  *(void *)a1 = *(void *)(v1 + 40);
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t Morphology.Pronoun.dependentMorphology.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  char v5 = *((_BYTE *)a1 + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 60) = v5;
  *(_DWORD *)(v1 + 56) = v4;
  return result;
}

uint64_t (*Morphology.Pronoun.dependentMorphology.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void __swiftcall Morphology.Pronoun.init(pronoun:morphology:dependentMorphology:)( Foundation::Morphology::Pronoun *__return_ptr retstr, Swift::String pronoun, Foundation::Morphology morphology, Foundation::Morphology_optional dependentMorphology)
{
  __int16 v4 = **(_WORD **)&morphology.grammaticalGender.value;
  Foundation::Morphology::GrammaticalNumber v5 = *(_BYTE *)(*(void *)&morphology.grammaticalGender.value + 2LL);
  char v6 = *(void **)(*(void *)&morphology.grammaticalGender.value + 8LL);
  Foundation::Morphology::Definiteness v7 = *(_BYTE *)(*(void *)&morphology.grammaticalGender.value + 20LL);
  int v8 = *((_DWORD *)morphology.customPronouns._rawValue + 4);
  Foundation::Morphology::Definiteness v9 = *((_BYTE *)morphology.customPronouns._rawValue + 20);
  retstr->pronoun = pronoun;
  *(_WORD *)&retstr->morphology.grammaticalGender.value = v4;
  retstr->morphology.number.value = v5;
  retstr->morphology.customPronouns._rawValue = v6;
  *(_DWORD *)&retstr->morphology.grammaticalCase.value = *(_DWORD *)(*(void *)&morphology.grammaticalGender.value
                                                                   + 16LL);
  retstr->morphology.definiteness.value = v7;
  *(_OWORD *)&retstr->dependentMorphology.value.grammaticalGender.value = *(_OWORD *)morphology.customPronouns._rawValue;
  retstr->dependentMorphology.value.definiteness.value = v9;
  *(_DWORD *)&retstr->dependentMorphology.value.grammaticalCase.value = v8;
}

uint64_t Morphology.Pronoun.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(v2 + 17);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 18);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v2 + 33);
  uint64_t v10 = *(unsigned __int8 *)(v2 + 34);
  int v13 = *(unsigned __int8 *)(v2 + 35);
  int v16 = *(unsigned __int8 *)(v2 + 36);
  uint64_t v17 = *(void *)(v2 + 40);
  uint64_t v12 = *(void *)(v2 + 48);
  uint64_t v14 = *(unsigned int *)(v2 + 56);
  uint64_t v15 = *(unsigned __int8 *)(v2 + 60);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4 == 3)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v5 != 14) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if ((_DWORD)v6 != 6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4 + 1);
  if ((_DWORD)v5 == 14) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5 + 1);
  if ((_DWORD)v6 != 6)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
    goto LABEL_8;
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Morphology.Pronoun.CodingKeys()
{
  unint64_t v1 = 0x6F6C6F6870726F6DLL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000013LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E756F6E6F7270LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Morphology.Pronoun.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Morphology.Pronoun.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Morphology.Pronoun.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Morphology.Pronoun.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Morphology.Pronoun.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology.Pronoun.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v8 = *(unsigned __int8 *)(v1 + 16);
  int v23 = *(unsigned __int8 *)(v1 + 17);
  int v24 = v8;
  int v22 = *(unsigned __int8 *)(v1 + 18);
  uint64_t v21 = *(void *)(v1 + 24);
  v2.i32[0] = *(_DWORD *)(v1 + 32);
  int v25 = *(unsigned __int8 *)(v1 + 36);
  uint64_t v9 = *(void *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v19 = *(unsigned __int8 *)(v1 + 60);
  uint64_t v20 = v9;
  uint64_t v11 = *(unsigned int *)(v1 + 56);
  uint64_t v17 = v10;
  uint64_t v18 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v28) = 0;
  uint64_t v12 = v26;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v12)
  {
    uint64_t v13 = v18;
    uint64_t v14 = v19;
    LOBYTE(v28) = v24;
    BYTE1(v28) = v23;
    BYTE2(v28) = v22;
    uint64_t v15 = v20;
    uint64_t v29 = v21;
    unsigned __int32 v30 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
    char v31 = v25;
    char v27 = 1;
    lazy protocol witness table accessor for type Morphology and conformance Morphology();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v28 = v15;
    uint64_t v29 = v17;
    char v31 = (v13 | (unint64_t)(v14 << 32)) >> 32;
    unsigned __int32 v30 = v13;
    char v27 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Morphology.Pronoun.hashValue.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 17);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 18);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 33);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 34);
  int v10 = *(unsigned __int8 *)(v0 + 35);
  int v13 = *(unsigned __int8 *)(v0 + 36);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v12 = *(unsigned __int8 *)(v0 + 60);
  uint64_t v11 = *(unsigned int *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }

  if ((_DWORD)v2 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }

  if ((_DWORD)v3 == 6)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }

  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v15, v4);
  if ((_DWORD)v5 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }

  if ((_DWORD)v6 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }

  if ((_DWORD)v7 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7 + 1);
  }

  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v10 & 1) + 1LL);
  }

  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v13 & 1) + 1LL);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)((uint64_t)v15, v14, v9, (v11 | (v12 << 32)) & 0xFFFFFFFFFFLL);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Morphology.Pronoun.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology.Pronoun.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  else
  {
    LOBYTE(v27) = 0;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v12;
    uint64_t v24 = v10;
    char v26 = 1;
    unint64_t v14 = lazy protocol witness table accessor for type Morphology and conformance Morphology();
    swift_bridgeObjectRetain();
    v25.i64[0] = v14;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v20 = BYTE1(v27);
    int v21 = v27;
    int v19 = BYTE2(v27);
    v3.i32[0] = v29;
    int v22 = v30;
    char v26 = 2;
    uint64_t v23 = v28;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int16x8_t v25 = (int16x8_t)vmovl_u8(v3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v16 = v27;
    uint64_t v15 = v28;
    __int32 v17 = v29;
    unsigned __int8 v18 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)a2 = v24;
    *(void *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 16) = v21;
    *(_BYTE *)(a2 + 17) = v20;
    *(_BYTE *)(a2 + 18) = v19;
    *(void *)(a2 + 24) = v23;
    *(_DWORD *)(a2 + 32) = vmovn_s16(v25).u32[0];
    *(_BYTE *)(a2 + 36) = v22;
    *(void *)(a2 + 40) = v16;
    *(void *)(a2 + 48) = v15;
    *(_BYTE *)(a2 + 60) = v18;
    *(_DWORD *)(a2 + 56) = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.Pronoun()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 17);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 18);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 33);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 34);
  int v10 = *(unsigned __int8 *)(v0 + 35);
  int v13 = *(unsigned __int8 *)(v0 + 36);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v12 = *(unsigned __int8 *)(v0 + 60);
  uint64_t v11 = *(unsigned int *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }

  if ((_DWORD)v2 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }

  if ((_DWORD)v3 == 6)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }

  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v15, v4);
  if ((_DWORD)v5 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }

  if ((_DWORD)v6 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }

  if ((_DWORD)v7 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7 + 1);
  }

  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v10 & 1) + 1LL);
  }

  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v13 & 1) + 1LL);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)((uint64_t)v15, v14, v9, (v11 | (v12 << 32)) & 0xFFFFFFFFFFLL);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.Pronoun@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Morphology.Pronoun.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.Pronoun(void *a1)
{
  return Morphology.Pronoun.encode(to:)(a1);
}

BOOL Morphology.isUnspecified.getter()
{
  return *(_BYTE *)v0 == 3
      && *(_BYTE *)(v0 + 2) == 6
      && *(_BYTE *)(v0 + 1) == 14
      && *(void *)(*(void *)(v0 + 8) + 16LL) == 0LL;
}

void one-time initialization function for user()
{
  id v0 = objc_msgSend((id)objc_opt_self(), sel_userMorphology);
  static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v0, (uint64_t)&v1);

  static Morphology.user = v1;
  byte_18C5CAE6A = v2;
  qword_18C5CAE70 = v3;
  dword_18C5CAE78 = v4;
  byte_18C5CAE7C = v5;
}

void static Morphology._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = 6;
  if (a1)
  {
    id v4 = a1;
    unint64_t v5 = (unint64_t)objc_msgSend(v4, sel_grammaticalGender);
    if (v5 >= 4) {
      char v6 = 3;
    }
    else {
      char v6 = 0x2010003u >> (8 * v5);
    }
    id v7 = objc_msgSend(v4, sel_number);
    else {
      char v3 = 0x5040302010006uLL >> (8 * v7);
    }
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_partOfSpeech));
    char v8 = v18;
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_grammaticalCase));
    char v9 = v17;
    id v10 = objc_msgSend(v4, sel_determination);
    if (v10 == (id)2) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
    if (v10 == (id)1) {
      char v12 = 0;
    }
    else {
      char v12 = v11;
    }
    unint64_t v13 = (unint64_t)objc_msgSend(v4, sel_pronounType);
    if (v13 >= 4) {
      char v14 = 3;
    }
    else {
      char v14 = 0x2010003u >> (8 * v13);
    }
    id v15 = objc_msgSend(v4, sel_definiteness);

    if (v15 == (id)2) {
      char v16 = 1;
    }
    else {
      char v16 = 2;
    }
    if (v15 == (id)1) {
      char v16 = 0;
    }
  }

  else
  {
    char v9 = 14;
    char v16 = 2;
    char v12 = 2;
    char v14 = 3;
    char v8 = 14;
    char v6 = 3;
  }

  *(_BYTE *)a2 = v6;
  *(_BYTE *)(a2 + 1) = v8;
  *(_BYTE *)(a2 + 2) = v3;
  *(void *)(a2 + 8) = MEMORY[0x18961AFF0];
  *(_BYTE *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 17) = 3;
  *(_BYTE *)(a2 + 18) = v14;
  *(_BYTE *)(a2 + 19) = v12;
  *(_BYTE *)(a2 + 20) = v16;
}

uint64_t static Morphology.user.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for user != -1) {
    swift_once();
  }
  char v2 = byte_18C5CAE6A;
  uint64_t v3 = qword_18C5CAE70;
  char v4 = byte_18C5CAE7C;
  *(_WORD *)a1 = static Morphology.user;
  *(_BYTE *)(a1 + 2) = v2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = dword_18C5CAE78;
  *(_BYTE *)(a1 + 20) = v4;
  return swift_bridgeObjectRetain();
}

void __swiftcall NSMorphologyCustomPronoun.init(_:)( NSMorphologyCustomPronoun *__return_ptr retstr, Foundation::Morphology::_CustomPronoun *a2)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  outlined init with take of String?((uint64_t)a2, (uint64_t)v14);
  outlined init with take of String?((uint64_t)v14, (uint64_t)v15);
  if (v15[1]) {
    char v4 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v4 = 0LL;
  }
  id v5 = v3;
  objc_msgSend(v5, sel_setSubjectForm_, v4);

  outlined init with take of String?((uint64_t)&a2->objectForm, (uint64_t)v13);
  outlined init with take of String?((uint64_t)v13, (uint64_t)v16);
  if (v16[1]) {
    char v6 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v6 = 0LL;
  }
  objc_msgSend(v5, sel_setObjectForm_, v6);

  outlined init with take of String?((uint64_t)&a2->possessiveForm, (uint64_t)v12);
  outlined init with take of String?((uint64_t)v12, (uint64_t)v17);
  if (v17[1]) {
    id v7 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    id v7 = 0LL;
  }
  objc_msgSend(v5, sel_setPossessiveForm_, v7);

  outlined init with take of String?((uint64_t)&a2->possessiveAdjectiveForm, (uint64_t)v11);
  outlined init with take of String?((uint64_t)v11, (uint64_t)v18);
  if (v18[1]) {
    char v8 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v8 = 0LL;
  }
  objc_msgSend(v5, sel_setPossessiveAdjectiveForm_, v8);

  outlined init with take of String?((uint64_t)&a2->reflexiveForm, (uint64_t)v10);
  outlined init with take of String?((uint64_t)v10, (uint64_t)v19);
  if (v19[1]) {
    char v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v9 = 0LL;
  }
  outlined release of Morphology._CustomPronoun((uint64_t)a2);
  objc_msgSend(v5, sel_setReflexiveForm_, v9);
}

Foundation::Morphology __swiftcall Morphology.init(_:)(NSMorphology_optional *a1)
{
  uint64_t v2 = v1;
  char v3 = 6;
  if (a1)
  {
    unint64_t v5 = (unint64_t)-[NSMorphology_optional grammaticalGender](a1, sel_grammaticalGender);
    if (v5 >= 4) {
      char v6 = 3;
    }
    else {
      char v6 = 0x2010003u >> (8 * v5);
    }
    id v7 = -[NSMorphology_optional number](a1, sel_number);
    else {
      char v3 = 0x5040302010006uLL >> (8 * v7);
    }
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)-[NSMorphology_optional partOfSpeech](a1, sel_partOfSpeech));
    char v8 = v20;
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)-[NSMorphology_optional grammaticalCase]( a1,  sel_grammaticalCase));
    char v9 = v19;
    id v10 = -[NSMorphology_optional determination](a1, sel_determination);
    if (v10 == (id)2) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
    if (v10 == (id)1) {
      char v12 = 0;
    }
    else {
      char v12 = v11;
    }
    unint64_t v13 = (unint64_t)-[NSMorphology_optional pronounType](a1, sel_pronounType);
    if (v13 >= 4) {
      char v14 = 3;
    }
    else {
      char v14 = 0x2010003u >> (8 * v13);
    }
    id v15 = -[NSMorphology_optional definiteness](a1, sel_definiteness);

    if (v15 == (id)2) {
      char v18 = 1;
    }
    else {
      char v18 = 2;
    }
    if (v15 == (id)1) {
      char v18 = 0;
    }
  }

  else
  {
    char v9 = 14;
    char v18 = 2;
    char v12 = 2;
    char v14 = 3;
    char v8 = 14;
    char v6 = 3;
  }

  *(_BYTE *)uint64_t v2 = v6;
  *(_BYTE *)(v2 + 1) = v8;
  *(_BYTE *)(v2 + 2) = v3;
  *(void *)(v2 + 8) = MEMORY[0x18961AFF0];
  *(_BYTE *)(v2 + 16) = v9;
  *(_BYTE *)(v2 + 17) = 3;
  *(_BYTE *)(v2 + 18) = v14;
  *(_BYTE *)(v2 + 19) = v12;
  *(_BYTE *)(v2 + 20) = v18;
  result.grammaticalCase = (Foundation::Morphology::GrammaticalCase_optional)v17;
  result.grammaticalPerson = (Foundation::Morphology::GrammaticalPerson_optional)SBYTE1(v17);
  result.pronounType = (Foundation::Morphology::PronounType_optional)SBYTE2(v17);
  result.determination = (Foundation::Morphology::Determination_optional)SBYTE3(v17);
  result.definiteness = (Foundation::Morphology::Definiteness_optional)SBYTE4(v17);
  result.customPronouns._rawValue = v16;
  result.grammaticalGender = (Foundation::Morphology::GrammaticalGender_optional)a1;
  result.partOfSpeech = (Foundation::Morphology::PartOfSpeech_optional)SBYTE1(a1);
  result.number = (Foundation::Morphology::GrammaticalNumber_optional)SBYTE2(a1);
  *(_DWORD *)result.gap3 = *(_DWORD *)((char *)&a1 + 3);
  result.gap3[4] = HIBYTE(a1);
  return result;
}

void __swiftcall NSMorphology.init(_:)(NSMorphology *__return_ptr retstr, Foundation::Morphology a2)
{
  uint64_t v2 = **(unsigned __int8 **)&a2.grammaticalGender.value;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 1LL);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 2LL);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 16LL);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 18LL);
  int v7 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 19LL);
  int v8 = *(unsigned __int8 *)(*(void *)&a2.grammaticalGender.value + 20LL);
  id v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v10 = v9;
  if (v2 != 3)
  {
    objc_msgSend(v9, sel_setGrammaticalGender_, v2 + 1);
    if ((_DWORD)v4 == 6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  id v11 = v9;
  if ((_DWORD)v4 != 6) {
LABEL_5:
  }
    objc_msgSend(v10, sel_setNumber_, v4 + 1);
LABEL_6:
  if ((_DWORD)v3 == 14)
  {
    if ((_DWORD)v5 == 14) {
      goto LABEL_8;
    }
  }

  else
  {
    objc_msgSend(v10, sel_setPartOfSpeech_, v3 + 1);
    if ((_DWORD)v5 == 14)
    {
LABEL_8:
      if (v7 == 2) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  objc_msgSend(v10, sel_setGrammaticalCase_, v5 + 1);
  if (v7 == 2)
  {
LABEL_9:
    if ((_DWORD)v6 == 3) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

void __swiftcall Morphology._bridgeToObjectiveC()(NSMorphology *__return_ptr retstr)
{
  __int16 v2 = *v1;
  char v3 = *((_BYTE *)v1 + 2);
  uint64_t v4 = *((void *)v1 + 1);
  char v5 = *((_BYTE *)v1 + 20);
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSMorphology);
  __int16 v7 = v2;
  char v8 = v3;
  uint64_t v9 = v4;
  int v10 = *((_DWORD *)v1 + 4);
  char v11 = v5;
  swift_bridgeObjectRetain();
  *(void *)&v12.grammaticalGender.value = &v7;
  NSMorphology.init(_:)(v6, v12);
}

void __swiftcall Morphology.CustomPronoun._bridgeToObjectiveC()(NSMorphologyCustomPronoun *__return_ptr retstr)
{
  Swift::String_optional v2 = v1[3];
  v5.possessiveForm = v1[2];
  v5.possessiveAdjectiveForm = v2;
  v5.reflexiveForm = v1[4];
  Swift::String_optional v3 = v1[1];
  v5.subjectForm = *v1;
  v5.objectForm = v3;
  type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSMorphologyCustomPronoun);
  outlined retain of Morphology._CustomPronoun((uint64_t)&v5);
  NSMorphologyCustomPronoun.init(_:)(v4, &v5);
}

void static Morphology.CustomPronoun._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v28 = a2[8];
  uint64_t v29 = a2[9];
  outlined consume of Morphology.CustomPronoun?(*a2, a2[1]);
  id v4 = a1;
  id v5 = objc_msgSend(v4, sel_subjectForm, v28, v29);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v31 = v8;
    uint64_t v32 = (uint64_t)v7;
  }

  else
  {
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
  }

  id v9 = objc_msgSend(v4, sel_objectForm);
  if (v9)
  {
    int v10 = v9;
    id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;
  }

  else
  {
    id v30 = 0LL;
    uint64_t v12 = 0LL;
  }

  id v13 = objc_msgSend(v4, sel_possessiveForm);
  if (v13)
  {
    char v14 = v13;
    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;
  }

  else
  {
    id v15 = 0LL;
    uint64_t v17 = 0LL;
  }

  id v18 = objc_msgSend(v4, sel_possessiveAdjectiveForm);
  if (v18)
  {
    char v19 = v18;
    id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v22 = v21;
  }

  else
  {
    id v20 = 0LL;
    uint64_t v22 = 0LL;
  }

  id v23 = objc_msgSend(v4, sel_reflexiveForm);
  if (v23)
  {
    uint64_t v24 = v23;
    id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v27 = v26;
  }

  else
  {

    id v25 = 0LL;
    uint64_t v27 = 0LL;
  }

  *a2 = v32;
  a2[1] = v31;
  a2[2] = (uint64_t)v30;
  a2[3] = v12;
  a2[4] = (uint64_t)v15;
  a2[5] = v17;
  a2[6] = (uint64_t)v20;
  a2[7] = v22;
  a2[8] = (uint64_t)v25;
  a2[9] = v27;
}

uint64_t static Morphology.CustomPronoun._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v29 = a2[8];
  uint64_t v30 = a2[9];
  outlined consume of Morphology.CustomPronoun?(*a2, a2[1]);
  id v4 = a1;
  id v5 = objc_msgSend(v4, sel_subjectForm, v29, v30);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v32 = v8;
    uint64_t v33 = (uint64_t)v7;
  }

  else
  {
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
  }

  id v9 = objc_msgSend(v4, sel_objectForm);
  if (v9)
  {
    int v10 = v9;
    id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;
  }

  else
  {
    id v31 = 0LL;
    uint64_t v12 = 0LL;
  }

  id v13 = objc_msgSend(v4, sel_possessiveForm);
  if (v13)
  {
    char v14 = v13;
    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;
  }

  else
  {
    id v15 = 0LL;
    uint64_t v17 = 0LL;
  }

  id v18 = objc_msgSend(v4, sel_possessiveAdjectiveForm);
  if (v18)
  {
    char v19 = v18;
    id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v22 = v21;
  }

  else
  {
    id v20 = 0LL;
    uint64_t v22 = 0LL;
  }

  id v23 = objc_msgSend(v4, sel_reflexiveForm);
  if (v23)
  {
    uint64_t v24 = v23;
    id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v27 = v26;
  }

  else
  {

    id v25 = 0LL;
    uint64_t v27 = 0LL;
  }

  *a2 = v33;
  a2[1] = v32;
  a2[2] = (uint64_t)v31;
  a2[3] = v12;
  a2[4] = (uint64_t)v15;
  a2[5] = v17;
  a2[6] = (uint64_t)v20;
  a2[7] = v22;
  a2[8] = (uint64_t)v25;
  a2[9] = v27;
  return 1LL;
}

double static Morphology.CustomPronoun._unconditionallyBridgeFromObjectiveC(_:)@<D0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  __int128 v5 = v8[1];
  *a2 = v8[0];
  a2[1] = v5;
  __int128 v6 = v8[3];
  a2[2] = v8[2];
  a2[3] = v6;
  double result = *(double *)&v9;
  a2[4] = v9;
  return result;
}

void protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Morphology.CustomPronoun()
{
  Swift::String_optional v1 = v0[3];
  v4.possessiveForm = v0[2];
  v4.possessiveAdjectiveForm = v1;
  v4.reflexiveForm = v0[4];
  Swift::String_optional v2 = v0[1];
  v4.subjectForm = *v0;
  v4.objectForm = v2;
  type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSMorphologyCustomPronoun);
  outlined retain of Morphology._CustomPronoun((uint64_t)&v4);
  NSMorphologyCustomPronoun.init(_:)(v3, &v4);
}

double protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Morphology.CustomPronoun@<D0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  __int128 v5 = v8[1];
  *a2 = v8[0];
  a2[1] = v5;
  __int128 v6 = v8[3];
  a2[2] = v8[2];
  a2[3] = v6;
  double result = *(double *)&v9;
  a2[4] = v9;
  return result;
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Morphology.CustomPronoun( void *a1, uint64_t a2)
{
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  __int128 v5 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v5;
  __int128 v6 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v6;
  double result = *(double *)&v9;
  *(_OWORD *)(a2 + 64) = v9;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Morphology.CustomPronoun( void *a1, uint64_t a2)
{
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  __int128 v5 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v5;
  __int128 v6 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v8[4];
  return 1LL;
}

__n128 protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Morphology._CustomPronoun@<Q0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v7);
  __int128 v5 = v7[3];
  *(_OWORD *)(a2 + 32) = v7[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v7[4];
  __n128 result = (__n128)v7[1];
  *(_OWORD *)a2 = v7[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

NSMorphologyPronoun __swiftcall Morphology.Pronoun._bridgeToObjectiveC()()
{
  uint64_t v2 = *(void *)v0;
  Swift::String_optional v1 = *(void **)(v0 + 8);
  __int16 v3 = *(_WORD *)(v0 + 16);
  Foundation::Morphology::GrammaticalNumber v4 = *(_BYTE *)(v0 + 18);
  __int128 v5 = *(void **)(v0 + 24);
  Foundation::Morphology::Definiteness v6 = *(_BYTE *)(v0 + 36);
  uint64_t v8 = *(void *)(v0 + 40);
  id v7 = *(void **)(v0 + 48);
  int v10 = *(_DWORD *)(v0 + 56);
  Foundation::Morphology::Definiteness v9 = *(_BYTE *)(v0 + 60);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
  v11.pronoun._countAndFlagsBits = v2;
  v11.pronoun._object = v1;
  *(_WORD *)&v11.morphology.grammaticalGender.value = v3;
  v11.morphology.number.value = v4;
  v11.morphology.customPronouns._rawValue = v5;
  *(_DWORD *)&v11.morphology.grammaticalCase.value = *(_DWORD *)(v0 + 32);
  v11.morphology.definiteness.value = v6;
  *(void *)&v11.dependentMorphology.value.grammaticalGender.value = v8;
  v11.dependentMorphology.value.customPronouns._rawValue = v7;
  v11.dependentMorphology.value.definiteness.value = v9;
  *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return NSMorphologyPronoun.init(_:)(&v11);
}

double static Morphology.Pronoun._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  v12.super.isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  int v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  Foundation::Morphology::Definiteness value = v11.dependentMorphology.value.definiteness.value;
  unint64_t v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  unint64_t v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(void *)a2 = v11.pronoun._countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = rawValue;
  *(void *)(a2 + 32) = v9;
  double result = *(double *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_BYTE *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

uint64_t static Morphology.Pronoun._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  v12.super.isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  int v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  Foundation::Morphology::Definiteness value = v11.dependentMorphology.value.definiteness.value;
  unint64_t v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  unint64_t v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(void *)a2 = v11.pronoun._countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = rawValue;
  *(void *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_BYTE *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return 1LL;
}

void static Morphology.Pronoun._unconditionallyBridgeFromObjectiveC(_:)( void *a1@<X0>, Foundation::Morphology::Pronoun *a2@<X8>)
{
  if (a1)
  {
    v3.super.isa = (Class)a1;
    Morphology.Pronoun.init(_:)(a2, v3);
  }

  else
  {
    __break(1u);
  }

unint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Morphology.Pronoun()
{
  uint64_t v2 = *(void *)v0;
  Swift::String_optional v1 = *(void **)(v0 + 8);
  __int16 v3 = *(_WORD *)(v0 + 16);
  Foundation::Morphology::GrammaticalNumber v4 = *(_BYTE *)(v0 + 18);
  __int128 v5 = *(void **)(v0 + 24);
  Foundation::Morphology::Definiteness v6 = *(_BYTE *)(v0 + 36);
  uint64_t v8 = *(void *)(v0 + 40);
  id v7 = *(void **)(v0 + 48);
  int v11 = *(_DWORD *)(v0 + 56);
  Foundation::Morphology::Definiteness v9 = *(_BYTE *)(v0 + 60);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
  v12.pronoun._countAndFlagsBits = v2;
  v12.pronoun._object = v1;
  *(_WORD *)&v12.morphology.grammaticalGender.Foundation::Morphology::Definiteness value = v3;
  v12.morphology.number.Foundation::Morphology::Definiteness value = v4;
  v12.morphology.customPronouns._rawValue = v5;
  *(_DWORD *)&v12.morphology.grammaticalCase.Foundation::Morphology::Definiteness value = *(_DWORD *)(v0 + 32);
  v12.morphology.definiteness.Foundation::Morphology::Definiteness value = v6;
  *(void *)&v12.dependentMorphology.value.grammaticalGender.Foundation::Morphology::Definiteness value = v8;
  v12.dependentMorphology.value.customPronouns._rawValue = v7;
  v12.dependentMorphology.value.definiteness.Foundation::Morphology::Definiteness value = v9;
  *(_DWORD *)&v12.dependentMorphology.value.grammaticalCase.Foundation::Morphology::Definiteness value = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return (unint64_t)NSMorphologyPronoun.init(_:)(&v12);
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Morphology.Pronoun( void *a1, uint64_t a2)
{
  v12.super.isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  int v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  Foundation::Morphology::Definiteness value = v11.dependentMorphology.value.definiteness.value;
  unint64_t v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  unint64_t v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(void *)a2 = v11.pronoun._countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = rawValue;
  *(void *)(a2 + 32) = v9;
  double result = *(double *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_BYTE *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Morphology.Pronoun( void *a1, uint64_t a2)
{
  v12.super.isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  int v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  Foundation::Morphology::Definiteness value = v11.dependentMorphology.value.definiteness.value;
  unint64_t v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  unint64_t v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(void *)a2 = v11.pronoun._countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = rawValue;
  *(void *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_BYTE *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return 1LL;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Morphology.Pronoun( void *a1@<X0>, Foundation::Morphology::Pronoun *a2@<X8>)
{
  if (a1)
  {
    v3.super.isa = (Class)a1;
    Morphology.Pronoun.init(_:)(a2, v3);
  }

  else
  {
    __break(1u);
  }

NSInflectionRule __swiftcall InflectionRule._bridgeToObjectiveC()()
{
  uint64_t v1 = v0[1];
  if (!v1) {
    return (NSInflectionRule)objc_msgSend((id)objc_opt_self(), sel_automaticRule);
  }
  uint64_t v2 = *((unsigned int *)v0 + 4);
  unint64_t v3 = v2 | ((unint64_t)*((unsigned __int8 *)v0 + 20) << 32);
  unint64_t v4 = *v0;
  unint64_t v5 = (unint64_t)*v0 >> 8;
  unint64_t v6 = (unint64_t)*v0 >> 16;
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSMorphology);
  v15[0] = v4;
  v15[1] = v5;
  void v15[2] = v6;
  uint64_t v16 = v1;
  char v17 = v2;
  v7.i64[0] = 0xFFFFFFFFFFLL;
  v7.i64[1] = 0xFFFFFFFFFFLL;
  uint64x2_t v8 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v3), v7);
  int16x8_t v9 = (int16x8_t)vshlq_u64(v8, (uint64x2_t)xmmword_183728FF0);
  *(int32x2_t *)v8.i8 = vmovn_s64((int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_183728FE0));
  *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)v9);
  v9.i16[1] = v9.i16[2];
  v9.i16[2] = v8.i16[0];
  v9.i16[3] = v8.i16[2];
  unsigned __int32 v18 = vmovn_s16(v9).u32[0];
  swift_bridgeObjectRetain();
  *(void *)&v19.grammaticalGender.Foundation::Morphology::Definiteness value = v15;
  NSMorphology.init(_:)(v10, v19);
  NSMorphologyPronoun v12 = v11;
  id v13 = objc_msgSend(objc_allocWithZone((Class)NSInflectionRuleExplicit), sel_initWithMorphology_, v11);

  return (NSInflectionRule)v13;
}

void static InflectionRule._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (void *)objc_opt_self();
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_automaticRule);
  int8x16_t v7 = v6;
  if (!a1)
  {

    goto LABEL_8;
  }

  if (v6)
  {
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSInflectionRule);
    id v8 = v5;
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) != 0)
    {

LABEL_8:
      unint64_t v15 = 0LL;
      uint64_t v14 = 0LL;
      unint64_t v16 = 0LL;
      goto LABEL_9;
    }
  }

  objc_opt_self();
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    Foundation::Morphology::Pronoun v11 = (void *)v10;
    id v12 = v5;
    id v13 = objc_msgSend(v11, sel_morphology);
    static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v13, (uint64_t)&v18);

    uint64_t v14 = v20;
    unint64_t v15 = v18 | ((unint64_t)v19 << 16);
    unint64_t v16 = v21 | ((unint64_t)v22 << 32);
LABEL_9:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 16) = v16;
    *(_BYTE *)(a2 + 20) = BYTE4(v16);
    return;
  }

  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInflectionRule?);
  v17._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance InflectionRule()
{
  uint64_t v1 = v0[1];
  if (!v1) {
    return objc_msgSend((id)objc_opt_self(), sel_automaticRule);
  }
  uint64_t v2 = *((unsigned int *)v0 + 4);
  unint64_t v3 = v2 | ((unint64_t)*((unsigned __int8 *)v0 + 20) << 32);
  unint64_t v4 = *v0;
  unint64_t v5 = (unint64_t)*v0 >> 8;
  unint64_t v6 = (unint64_t)*v0 >> 16;
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSMorphology);
  v15[0] = v4;
  v15[1] = v5;
  void v15[2] = v6;
  uint64_t v16 = v1;
  char v17 = v2;
  v7.i64[0] = 0xFFFFFFFFFFLL;
  v7.i64[1] = 0xFFFFFFFFFFLL;
  uint64x2_t v8 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v3), v7);
  int16x8_t v9 = (int16x8_t)vshlq_u64(v8, (uint64x2_t)xmmword_183728FF0);
  *(int32x2_t *)v8.i8 = vmovn_s64((int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_183728FE0));
  *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)v9);
  v9.i16[1] = v9.i16[2];
  v9.i16[2] = v8.i16[0];
  v9.i16[3] = v8.i16[2];
  unsigned __int32 v18 = vmovn_s16(v9).u32[0];
  swift_bridgeObjectRetain();
  *(void *)&v19.grammaticalGender.Foundation::Morphology::Definiteness value = v15;
  NSMorphology.init(_:)(v10, v19);
  id v12 = v11;
  id v13 = objc_msgSend(objc_allocWithZone((Class)NSInflectionRuleExplicit), sel_initWithMorphology_, v11);

  return v13;
}

unint64_t static Morphology._forceBridgeFromObjectiveC(_:result:)( NSMorphology_optional *a1, uint64_t a2)
{
  unint64_t v4 = a1;
  unint64_t result = (unint64_t)Morphology.init(_:)(a1);
  *(void *)a2 = v6 | ((unint64_t)v7 << 16);
  *(void *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

void protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Morphology()
{
  __int16 v1 = *v0;
  char v2 = *((_BYTE *)v0 + 2);
  uint64_t v3 = *((void *)v0 + 1);
  char v4 = *((_BYTE *)v0 + 20);
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSMorphology);
  __int16 v6 = v1;
  char v7 = v2;
  uint64_t v8 = v3;
  int v9 = *((_DWORD *)v0 + 4);
  char v10 = v4;
  swift_bridgeObjectRetain();
  *(void *)&v11.grammaticalGender.Foundation::Morphology::Definiteness value = &v6;
  NSMorphology.init(_:)(v5, v11);
}

unint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Morphology( NSMorphology_optional *a1, uint64_t a2)
{
  char v4 = a1;
  unint64_t result = (unint64_t)Morphology.init(_:)(a1);
  *(void *)a2 = v6 | ((unint64_t)v7 << 16);
  *(void *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t specialized static Morphology._CustomPronoun.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (!v4)
  {
    if (v5) {
      return 0LL;
    }
    goto LABEL_10;
  }

  if (!v5) {
    return 0LL;
  }
  BOOL v6 = *a1 == *a2 && v4 == v5;
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0LL, (v7 & 1) != 0))
  {
LABEL_10:
    uint64_t v9 = a1[3];
    uint64_t v10 = a2[3];
    if (v9)
    {
      if (!v10) {
        return 0LL;
      }
      if (a1[2] != a2[2] || v9 != v10)
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0LL;
        if ((v11 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v10)
    {
      return 0LL;
    }

    uint64_t v12 = a1[5];
    uint64_t v13 = a2[5];
    if (v12)
    {
      if (!v13) {
        return 0LL;
      }
      if (a1[4] != a2[4] || v12 != v13)
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0LL;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v13)
    {
      return 0LL;
    }

    uint64_t v15 = a1[7];
    uint64_t v16 = a2[7];
    if (v15)
    {
      if (!v16) {
        return 0LL;
      }
      if (a1[6] != a2[6] || v15 != v16)
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0LL;
        if ((v17 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v16)
    {
      return 0LL;
    }

    uint64_t v18 = a1[9];
    uint64_t v19 = a2[9];
    if (v18)
    {
      if (v19 && (a1[8] == a2[8] && v18 == v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1LL;
      }
    }

    else if (!v19)
    {
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

uint64_t specialized static Morphology.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = a1[1];
  int v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  int v7 = a1[16];
  int v8 = a1[17];
  int v9 = a1[18];
  int v10 = a1[19];
  int v11 = a1[20];
  int v12 = *a2;
  int v13 = a2[1];
  int v14 = a2[2];
  uint64_t v15 = *((void *)a2 + 1);
  int v16 = a2[16];
  int v17 = a2[17];
  int v18 = a2[18];
  int v19 = a2[19];
  int v20 = a2[20];
  if (v3 == 3)
  {
    if (v12 != 3) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    if (v12 == 3 || v3 != v12) {
      return result;
    }
  }

  if (v4 == 14)
  {
    if (v13 != 14) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    if (v13 == 14 || v4 != v13) {
      return result;
    }
  }

  if (v5 == 6)
  {
    if (v14 != 6) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    if (v14 == 6 || v5 != v14) {
      return result;
    }
  }

  if ((specialized static Dictionary<>.== infix(_:_:)(v6, v15) & 1) == 0) {
    return 0LL;
  }
  if (v7 == 14)
  {
    if (v16 != 14) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    if (v16 == 14 || v7 != v16) {
      return result;
    }
  }

  if (v8 == 3)
  {
    if (v17 != 3) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    if (v17 == 3 || v8 != v17) {
      return result;
    }
  }

  if (v9 == 3)
  {
    if (v18 != 3) {
      return 0LL;
    }
LABEL_32:
    if (v10 == 2)
    {
      if (v19 != 2) {
        return 0LL;
      }
    }

    else if (v19 == 2 || ((v19 ^ v10) & 1) != 0)
    {
      return 0LL;
    }

    if (v11 == 2)
    {
      if (v20 != 2) {
        return 0LL;
      }
    }

    else if (v20 == 2 || ((v20 ^ v11) & 1) != 0)
    {
      return 0LL;
    }

    return 1LL;
  }

  uint64_t result = 0LL;
  if (v18 != 3 && v9 == v18) {
    goto LABEL_32;
  }
  return result;
}

BOOL specialized static Morphology.Pronoun.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a1 + 16);
  char v5 = *(_BYTE *)(a1 + 17);
  char v6 = *(_BYTE *)(a1 + 18);
  uint64_t v7 = *(void *)(a1 + 24);
  v2.i32[0] = *(_DWORD *)(a1 + 32);
  char v8 = *(_BYTE *)(a1 + 36);
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 60);
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v23 = *(unsigned int *)(a1 + 56);
  char v9 = *(_BYTE *)(a2 + 16);
  char v10 = *(_BYTE *)(a2 + 17);
  char v11 = *(_BYTE *)(a2 + 18);
  uint64_t v12 = *(void *)(a2 + 24);
  v3.i32[0] = *(_DWORD *)(a2 + 32);
  char v13 = *(_BYTE *)(a2 + 36);
  uint64_t v26 = *(void *)(a2 + 48);
  uint64_t v21 = *(unsigned __int8 *)(a2 + 60);
  uint64_t v22 = *(void *)(a2 + 40);
  uint64_t v20 = *(unsigned int *)(a2 + 56);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0LL, (v14 & 1) != 0))
  {
    LOBYTE(v32) = v4;
    BYTE1(v32) = v5;
    BYTE2(v32) = v6;
    uint64_t v33 = v7;
    unsigned __int32 v34 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
    char v35 = v8;
    LOBYTE(v28) = v9;
    HIBYTE(v28) = v10;
    char v29 = v11;
    uint64_t v30 = v12;
    *(_DWORD *)id v31 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    v31[4] = v13;
    if ((specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v32, (unsigned __int8 *)&v28) & 1) != 0)
    {
      if (v27)
      {
        uint64_t v32 = v25;
        uint64_t v33 = v27;
        unsigned __int32 v34 = v23;
        char v35 = (v23 | (unint64_t)(v24 << 32)) >> 32;
        if (v26)
        {
          v16.i64[0] = 0xFFFFFFFFFFLL;
          v16.i64[1] = 0xFFFFFFFFFFLL;
          uint64x2_t v17 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v20 | (unint64_t)(v21 << 32)), v16);
          int16x8_t v18 = (int16x8_t)vshlq_u64(v17, (uint64x2_t)xmmword_183728FF0);
          __int16 v28 = v22;
          char v29 = BYTE2(v22);
          uint64_t v30 = v26;
          v31[0] = v20;
          *(int32x2_t *)v17.i8 = vmovn_s64((int64x2_t)vshlq_u64(v17, (uint64x2_t)xmmword_183728FE0));
          *(int32x2_t *)v18.i8 = vmovn_s64((int64x2_t)v18);
          v18.i16[1] = v18.i16[2];
          v18.i16[2] = v17.i16[0];
          v18.i16[3] = v17.i16[2];
          *(_DWORD *)&v31[1] = vmovn_s16(v18).u32[0];
          swift_bridgeObjectRetain_n();
          char v19 = specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v32, (unsigned __int8 *)&v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (v19 & 1) != 0;
        }

        swift_bridgeObjectRetain();
      }

      else if (!v26)
      {
        return 1LL;
      }

      swift_bridgeObjectRelease();
    }

    return 0LL;
  }

  return result;
}

uint64_t specialized static InflectionRule.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (!v2)
  {
    if (!v3)
    {
      swift_bridgeObjectRelease_n();
      return 1LL;
    }

    return 0LL;
  }

  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned __int8 *)a2 + 20);
  uint64_t v6 = *((unsigned int *)a2 + 4);
  uint64_t v7 = *((unsigned __int8 *)a1 + 20);
  uint64_t v8 = *((unsigned int *)a1 + 4);
  uint64_t v9 = *a1;
  uint64_t v10 = *a2;
  if (*a1 == 3LL)
  {
    if (v10 != 3) {
      return 0LL;
    }
  }

  else if (v10 == 3 || v9 != v4)
  {
    return 0LL;
  }

  uint64_t v12 = *a2 & 0xFF00;
  if ((*a1 & 0xFF00) == 0xE00)
  {
    if (v12 != 3584) {
      return 0LL;
    }
  }

  else if (v12 == 3584 || (((unsigned __int16)v9 ^ (unsigned __int16)v4) & 0xFF00) != 0)
  {
    return 0LL;
  }

  uint64_t v13 = v4 & 0xFF0000;
  if ((v9 & 0xFF0000) == 0x60000)
  {
    if (v13 != 393216) {
      return 0LL;
    }
  }

  else if (v13 == 393216 || ((v9 ^ v4) & 0xFF0000) != 0)
  {
    return 0LL;
  }

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  if ((specialized static Dictionary<>.== infix(_:_:)(v2, v3) & 1) == 0) {
    goto LABEL_44;
  }
  unint64_t v14 = v8 | (v7 << 32);
  if (v8 == 14)
  {
  }

  else if (v6 == 14 || v8 != v6)
  {
    goto LABEL_44;
  }

  if (BYTE1(v8) == 3)
  {
    if (BYTE1(v6) != 3) {
      goto LABEL_44;
    }
  }

  else if (BYTE1(v6) == 3 || BYTE1(v8) != BYTE1(v6))
  {
    goto LABEL_44;
  }

  if (BYTE2(v8) == 3)
  {
    if (BYTE2(v6) != 3) {
      goto LABEL_44;
    }
  }

  else if (BYTE2(v6) == 3 || BYTE2(v8) != BYTE2(v6))
  {
    goto LABEL_44;
  }

  uint64_t v15 = v6 & 0xFF000000;
  if ((v8 & 0xFF000000) == 0x2000000)
  {
    if (v15 == 0x2000000) {
      goto LABEL_41;
    }
LABEL_44:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return 0LL;
  }

unint64_t lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.CodingKeys,  &type metadata for Morphology.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.CodingKeys,  &type metadata for Morphology.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.CodingKeys,  &type metadata for Morphology.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.CodingKeys,  &type metadata for Morphology.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalCase,  &type metadata for Morphology.GrammaticalCase);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalCase,  &type metadata for Morphology.GrammaticalCase);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalCase,  &type metadata for Morphology.GrammaticalCase);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech;
  if (!lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.PartOfSpeech,  &type metadata for Morphology.PartOfSpeech);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech;
  if (!lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.PartOfSpeech,  &type metadata for Morphology.PartOfSpeech);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech;
  if (!lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.PartOfSpeech,  &type metadata for Morphology.PartOfSpeech);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalNumber,  &type metadata for Morphology.GrammaticalNumber);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalNumber,  &type metadata for Morphology.GrammaticalNumber);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalNumber,  &type metadata for Morphology.GrammaticalNumber);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology._CustomPronoun,  &type metadata for Morphology._CustomPronoun);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology._CustomPronoun,  &type metadata for Morphology._CustomPronoun);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology._CustomPronoun,  &type metadata for Morphology._CustomPronoun);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalPerson,  &type metadata for Morphology.GrammaticalPerson);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalPerson,  &type metadata for Morphology.GrammaticalPerson);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.GrammaticalPerson,  &type metadata for Morphology.GrammaticalPerson);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType;
  if (!lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.PronounType,  &type metadata for Morphology.PronounType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType;
  if (!lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.PronounType,  &type metadata for Morphology.PronounType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType;
  if (!lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.PronounType,  &type metadata for Morphology.PronounType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination;
  if (!lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.Determination,  &type metadata for Morphology.Determination);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination;
  if (!lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.Determination,  &type metadata for Morphology.Determination);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination;
  if (!lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.Determination,  &type metadata for Morphology.Determination);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness;
  if (!lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.Definiteness,  &type metadata for Morphology.Definiteness);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness;
  if (!lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.Definiteness,  &type metadata for Morphology.Definiteness);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness;
  if (!lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.Definiteness,  &type metadata for Morphology.Definiteness);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology and conformance Morphology()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }

  return result;
}

uint64_t outlined copy of Morphology.CustomPronoun?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t sub_1830AE7E8()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in Morphology.setCustomPronoun(_:forLanguage:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in Morphology.setCustomPronoun(_:forLanguage:)(a1, a2, v3 + 16, a3);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology._CustomPronoun.CodingKeys,  &unk_189C7A868);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology._CustomPronoun.CodingKeys,  &unk_189C7A868);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology._CustomPronoun.CodingKeys,  &unk_189C7A868);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology._CustomPronoun.CodingKeys,  &unk_189C7A868);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Morphology.Pronoun.CodingKeys, &unk_189C7A7D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Morphology.Pronoun.CodingKeys, &unk_189C7A7D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Morphology.Pronoun.CodingKeys, &unk_189C7A7D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Morphology.Pronoun.CodingKeys, &unk_189C7A7D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }

  return result;
}

uint64_t specialized Morphology._CustomPronoun.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology._CustomPronoun.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    char v39 = 0;
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v11 = v10;
    char v38 = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v32 = v12;
    uint64_t v33 = v9;
    char v37 = 2;
    swift_bridgeObjectRetain();
    uint64_t v34 = v14;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v17 = v16;
    uint64_t v30 = v15;
    id v31 = a2;
    char v36 = 3;
    swift_bridgeObjectRetain();
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v20 = v19;
    uint64_t v29 = v18;
    char v35 = 4;
    swift_bridgeObjectRetain();
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v23 = v22;
    uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v25 = v21;
    v24(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = v34;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __int16 v28 = v31;
    *id v31 = v33;
    v28[1] = v11;
    v28[2] = v32;
    v28[3] = v26;
    v28[4] = v30;
    v28[5] = v17;
    v28[6] = v29;
    v28[7] = v20;
    v28[8] = v25;
    v28[9] = v23;
  }

  return result;
}

uint64_t specialized static Morphology.CustomPronoun.keyPath(forObjectiveCKey:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x467463656A627573LL && a2 == 0xEB000000006D726FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6F467463656A626FLL && a2 == 0xEA00000000006D72LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6973736573736F70LL && a2 == 0xEE006D726F466576LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000017LL && a2 == 0x80000001839CC300LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x766978656C666572LL && a2 == 0xED00006D726F4665LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return swift_getKeyPath();
  }

  else
  {
    return 0LL;
  }

unint64_t specialized Morphology.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Morphology.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

uint64_t specialized Morphology._CustomPronoun.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x467463656A627573LL && a2 == 0xEB000000006D726FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6F467463656A626FLL && a2 == 0xEA00000000006D72LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x6973736573736F70LL && a2 == 0xEE006D726F466576LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000017LL && a2 == 0x80000001839CC300LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x766978656C666572LL && a2 == 0xED00006D726F4665LL)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t specialized Morphology.Pronoun.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E756F6E6F7270LL && a2 == 0xE700000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6F6C6F6870726F6DLL && a2 == 0xEA00000000007967LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0xD000000000000013LL && a2 == 0x80000001839CC320LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void specialized Morphology._CustomPronoun.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_subjectForm);
    if (v4)
    {
      uint64_t v5 = v4;
      id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      uint64_t v31 = v7;
      id v32 = v6;
    }

    else
    {
      uint64_t v31 = 0LL;
      id v32 = 0LL;
    }

    id v18 = objc_msgSend(v3, sel_objectForm);
    if (v18)
    {
      uint64_t v19 = v18;
      id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v15 = v20;
    }

    else
    {
      id v30 = 0LL;
      uint64_t v15 = 0LL;
    }

    id v21 = objc_msgSend(v3, sel_possessiveForm);
    if (v21)
    {
      uint64_t v22 = v21;
      id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      uint64_t v13 = v23;
    }

    else
    {
      id v12 = 0LL;
      uint64_t v13 = 0LL;
    }

    id v24 = objc_msgSend(v3, sel_possessiveAdjectiveForm);
    if (v24)
    {
      uint64_t v25 = v24;
      id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v11 = v26;
    }

    else
    {
      id v10 = 0LL;
      uint64_t v11 = 0LL;
    }

    id v27 = objc_msgSend(v3, sel_reflexiveForm);
    if (v27)
    {
      __int16 v28 = v27;
      id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v9 = v29;
    }

    else
    {

      id v8 = 0LL;
      uint64_t v9 = 0LL;
    }

    uint64_t v17 = v31;
    id v16 = v32;
    id v14 = v30;
  }

  else
  {
    id v8 = 0LL;
    uint64_t v9 = 0LL;
    id v10 = 0LL;
    uint64_t v11 = 0LL;
    id v12 = 0LL;
    uint64_t v13 = 0LL;
    id v14 = 0LL;
    uint64_t v15 = 0LL;
    id v16 = 0LL;
    uint64_t v17 = 0LL;
  }

  *a2 = v16;
  a2[1] = v17;
  a2[2] = v14;
  a2[3] = v15;
  a2[4] = v12;
  a2[5] = v13;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = v8;
  a2[9] = v9;
}

uint64_t outlined consume of Morphology.Pronoun?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

void specialized static InflectionRule._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4 = (void *)objc_opt_self();
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_automaticRule);
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSInflectionRule);
    id v8 = v5;
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) != 0)
    {

      unint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      unint64_t v12 = 0LL;
LABEL_6:
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 16) = v12;
      *(_BYTE *)(a2 + 20) = BYTE4(v12);
      return;
    }
  }

  objc_opt_self();
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    id v14 = (void *)v13;
    id v15 = v5;
    id v16 = objc_msgSend(v14, sel_morphology);
    static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v16, (uint64_t)&v18);

    uint64_t v11 = v20;
    unint64_t v10 = v18 | ((unint64_t)v19 << 16);
    unint64_t v12 = v21 | ((unint64_t)v22 << 32);
    goto LABEL_6;
  }

  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInflectionRule?);
  v17._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static InflectionRule._conditionallyBridgeFromObjectiveC(_:result:)( void *a1, uint64_t a2)
{
  id v4 = (void *)objc_opt_self();
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_automaticRule);
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSInflectionRule);
    id v8 = v5;
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) != 0)
    {

      unint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      unint64_t v12 = 0LL;
LABEL_6:
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 16) = v12;
      *(_BYTE *)(a2 + 20) = BYTE4(v12);
      return 1LL;
    }
  }

  objc_opt_self();
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    id v14 = (void *)v13;
    id v15 = v5;
    id v16 = objc_msgSend(v14, sel_morphology);
    static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v16, (uint64_t)&v19);

    uint64_t v11 = v21;
    unint64_t v10 = v19 | ((unint64_t)v20 << 16);
    unint64_t v12 = v22 | ((unint64_t)v23 << 32);
    goto LABEL_6;
  }

  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInflectionRule?);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Morphology._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4 = a1;
  unint64_t v5 = (unint64_t)objc_msgSend(v4, sel_grammaticalGender) - 1;
  if (v5 >= 3) {
    unint64_t v5 = 3LL;
  }
  id v6 = (char *)objc_msgSend(v4, sel_number, v5);
  else {
    uint64_t v7 = (void)(v6 - 1) << 16;
  }
  Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_partOfSpeech));
  Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_grammaticalCase));
  id v8 = objc_msgSend(v4, sel_determination);
  unint64_t v9 = (unint64_t)objc_msgSend(v4, sel_pronounType);
  if (v8 == (id)2) {
    int v10 = 0x1000000;
  }
  else {
    int v10 = 0x2000000;
  }
  id v11 = objc_msgSend(v4, sel_definiteness);

  char v12 = 2;
  if (v11 == (id)2) {
    char v12 = 1;
  }
  unsigned int v13 = ((0x2010003u >> (8 * v9)) & 3) << 16;
  if (v9 >= 4) {
    unsigned int v13 = 196608;
  }
  if (v8 == (id)1) {
    int v14 = 0;
  }
  else {
    int v14 = v10;
  }
  int v15 = v19 | v14 | v13;
  uint64_t v16 = MEMORY[0x18961AFF0];
  if (v11 == (id)1) {
    char v12 = 0;
  }
  *(void *)a2 = v18 | ((unint64_t)v20 << 8) | v7;
  *(void *)(a2 + 8) = v16;
  *(_BYTE *)(a2 + 20) = v12;
  *(_DWORD *)(a2 + 16) = v15 | 0x300;
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type InflectionRule and conformance InflectionRule()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule;
  if (!lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for InflectionRule, &type metadata for InflectionRule);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule;
  if (!lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for InflectionRule, &type metadata for InflectionRule);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Morphology.CustomPronoun,  &type metadata for Morphology.CustomPronoun);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun);
  }

  return result;
}

uint64_t sub_1830AFD80@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1830AFD8C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_1830AFDCC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1830AFDD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_1830AFE18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1830AFE24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t sub_1830AFE64@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1830AFE70(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  return result;
}

uint64_t sub_1830AFEB0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1830AFEBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 64) = v4;
  *(void *)(a2 + 72) = v3;
  return result;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Morphology(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 21)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 21) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 21) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Morphology()
{
  return &type metadata for Morphology;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalGender()
{
  return &type metadata for Morphology.GrammaticalGender;
}

ValueMetadata *type metadata accessor for Morphology.PartOfSpeech()
{
  return &type metadata for Morphology.PartOfSpeech;
}

uint64_t storeEnumTagSinglePayload for Morphology.GrammaticalNumber( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1830B0030 + 4 * byte_18379FEBE[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1830B0064 + 4 * byte_18379FEB9[v4]))();
}

uint64_t sub_1830B0064(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B006C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830B0074LL);
  }
  return result;
}

uint64_t sub_1830B0080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830B0088LL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_1830B008C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0094(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalNumber()
{
  return &type metadata for Morphology.GrammaticalNumber;
}

uint64_t storeEnumTagSinglePayload for Morphology.PartOfSpeech(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_1830B00FC + 4 * byte_18379FEC8[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1830B0130 + 4 * byte_18379FEC3[v4]))();
}

uint64_t sub_1830B0130(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0138(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830B0140LL);
  }
  return result;
}

uint64_t sub_1830B014C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830B0154LL);
  }
  *(_BYTE *)__n128 result = a2 + 13;
  return result;
}

uint64_t sub_1830B0158(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0160(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalCase()
{
  return &type metadata for Morphology.GrammaticalCase;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalPerson()
{
  return &type metadata for Morphology.GrammaticalPerson;
}

ValueMetadata *type metadata accessor for Morphology.PronounType()
{
  return &type metadata for Morphology.PronounType;
}

ValueMetadata *type metadata accessor for Morphology.Determination()
{
  return &type metadata for Morphology.Determination;
}

uint64_t storeEnumTagSinglePayload for Morphology.Determination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1830B01FC + 4 * byte_18379FED2[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1830B0230 + 4 * byte_18379FECD[v4]))();
}

uint64_t sub_1830B0230(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0238(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830B0240LL);
  }
  return result;
}

uint64_t sub_1830B024C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830B0254LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_1830B0258(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0260(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Morphology.Definiteness()
{
  return &type metadata for Morphology.Definiteness;
}

uint64_t initializeBufferWithCopyOfBuffer for Morphology(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Morphology(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for Morphology(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for InflectionRule(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for InflectionRule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 13) = 0LL;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 21) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 21) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

uint64_t destructiveInjectEnumTag for InflectionRule(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
  }

  else if (a2)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for InflectionRule()
{
  return &type metadata for InflectionRule;
}

ValueMetadata *type metadata accessor for Morphology.CustomPronoun()
{
  return &type metadata for Morphology.CustomPronoun;
}

uint64_t destroy for Morphology.Pronoun()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Morphology.Pronoun(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Morphology.Pronoun(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

__n128 __swift_memcpy61_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Morphology.Pronoun(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

uint64_t getEnumTagSinglePayload for Morphology.Pronoun(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 61)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology.Pronoun(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 61) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 61) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Morphology.Pronoun()
{
  return &type metadata for Morphology.Pronoun;
}

uint64_t storeEnumTagSinglePayload for Morphology.GrammaticalGender( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1830B0810 + 4 * byte_18379FEDC[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1830B0844 + 4 * byte_18379FED7[v4]))();
}

uint64_t sub_1830B0844(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B084C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830B0854LL);
  }
  return result;
}

uint64_t sub_1830B0860(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830B0868LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_1830B086C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0874(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Morphology.Pronoun.CodingKeys()
{
  return &unk_189C7A7D8;
}

uint64_t storeEnumTagSinglePayload for Morphology._CustomPronoun.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1830B08DC + 4 * byte_18379FEE6[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1830B0910 + 4 * byte_18379FEE1[v4]))();
}

uint64_t sub_1830B0910(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0918(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830B0920LL);
  }
  return result;
}

uint64_t sub_1830B092C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830B0934LL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_1830B0938(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0940(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Morphology._CustomPronoun.CodingKeys()
{
  return &unk_189C7A868;
}

uint64_t destroy for Morphology.CustomPronoun()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Morphology.CustomPronoun(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Morphology.CustomPronoun(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Morphology.CustomPronoun(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Morphology.CustomPronoun(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology.CustomPronoun( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Morphology._CustomPronoun()
{
  return &type metadata for Morphology._CustomPronoun;
}

uint64_t storeEnumTagSinglePayload for Morphology.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_1830B0C78 + 4 * byte_18379FEF0[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1830B0CAC + 4 * byte_18379FEEB[v4]))();
}

uint64_t sub_1830B0CAC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830B0CBCLL);
  }
  return result;
}

uint64_t sub_1830B0CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830B0CD0LL);
  }
  *(_BYTE *)__n128 result = a2 + 8;
  return result;
}

uint64_t sub_1830B0CD4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830B0CDC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Morphology.CodingKeys()
{
  return &type metadata for Morphology.CodingKeys;
}

uint64_t outlined consume of Morphology.CustomPronoun?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Morphology._CustomPronoun(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Morphology._CustomPronoun(uint64_t a1)
{
  return a1;
}

uint64_t _TimeZoneGMTICU.localizedName(for:locale:)(unint64_t a1, uint64_t *a2)
{
  int v3 = a1;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  BOOL v6 = a1 < 6;
  uint64_t v7 = *(void *)(v2 + 24);
  unint64_t v8 = *(void *)(v2 + 32);
  swift_bridgeObjectRetain();
  unint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8);
  swift_bridgeObjectRelease();
  unint64_t v10 = v9[2];
  if (v5)
  {
    uint64_t ObjectType = swift_getObjectType();
    char v12 = *(void (**)(uint64_t, uint64_t))(v4 + 64);
    swift_unknownObjectRetain();
    v12(ObjectType, v4);
    swift_unknownObjectRelease();
    if (!(v10 >> 31)) {
      goto LABEL_3;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v10 >> 31) {
    goto LABEL_12;
  }
LABEL_3:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v13 = udat_open();
  swift_release();
  uint64_t v14 = 0LL;
  if (v13)
  {
    int v15 = specialized _copyCollectionToContiguousArray<A>(_:)(1987475062LL, 0xE400000000000000LL);
    if ((v6 & v3) != 0) {
      uint64_t v16 = 1LL;
    }
    else {
      uint64_t v16 = v15[2];
    }
    if (v16 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v16 <= 0x7FFFFFFF)
      {
        udat_applyPattern();
        uint64_t v14 = specialized _withResizingUCharBuffer(initialSize:_:)(32LL);
        swift_release();
        udat_close();
        goto LABEL_10;
      }

uint64_t _TimeZoneGMTICU.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _TimeZoneGMTICU()
{
  return objc_opt_self();
}

void *protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneGMTICU( uint64_t a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a1);
  if (v4)
  {
    v2[3] = v3;
    v2[4] = v4;
    v2[2] = a1;
  }

  else
  {
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  return v2;
}

void protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneGMTICU()
{
}

uint64_t protocol witness for _TimeZoneProtocol.secondsFromGMT(for:) in conformance _TimeZoneGMTICU()
{
  return *(void *)(v0 + 16);
}

double protocol witness for _TimeZoneProtocol.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:) in conformance _TimeZoneGMTICU()
{
  return 0.0;
}

uint64_t protocol witness for _TimeZoneProtocol.abbreviation(for:) in conformance _TimeZoneGMTICU()
{
  return specialized static _TimeZoneGMT.abbreviation(for:)(*(void *)(v0 + 16));
}

double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneGMTICU()
{
  return 0.0;
}

void protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneGMTICU( uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneGMTICU()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 0x2820544D47LL;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneGMTICU(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU;
  if (!lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU)
  {
    uint64_t v1 = type metadata accessor for _TimeZoneGMTICU();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _TimeZoneGMTICU, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU);
  }

  return result;
}

id @objc static NSCalendar._autoupdatingCurrent.getter()
{
  return specialized static NSCalendar._autoupdatingCurrent.getter();
}

id @objc static NSCalendar._current.getter()
{
  return specialized static NSCalendar._current.getter();
}

id @objc static NSCalendar._newCalendarWithIdentifier(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  id v4 = specialized static NSCalendar._newCalendarWithIdentifier(_:)(v3);

  return v4;
}

uint64_t @objc static NSCalendar._resetCurrent()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static CalendarCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.reset()(v0);
  os_unfair_lock_unlock(v1);
  return swift_release_n();
}

uint64_t closure #1 in _NSSwiftCalendar.calendar.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

id _NSSwiftCalendar.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  __int128 v9 = *(_OWORD *)(v3 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  id v4 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 16) = v9;
  *(void *)&v5[OBJC_IVAR____NSSwiftCalendar__lock] = v6;
  uint64_t v7 = *MEMORY[0x1896039C8];
  v10.receiver = v5;
  v10.super_class = v4;
  id result = objc_msgSendSuper2(&v10, sel_initWithCheckedCalendarIdentifier_, v7);
  if (result)
  {
    a1[3] = v4;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _NSSwiftCalendar.isEqual(_:)(uint64_t a1)
{
  if (v22)
  {
    type metadata accessor for _NSSwiftCalendar();
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v3 = (void *)v20;
      uint64_t v4 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
      __int128 v17 = *(_OWORD *)(v4 + 16);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
      __int128 v21 = v17;
      uint64_t v5 = *(void *)(v20 + OBJC_IVAR____NSSwiftCalendar__lock);
      os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
      __int128 v18 = *(_OWORD *)(v5 + 16);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
      __int128 v20 = v18;
      char v6 = specialized static Calendar.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      return v6 & 1;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v21);
  }

  outlined init with copy of (Hashable & Sendable)?( a1,  (uint64_t)&v21,  &demangling cache variable for type metadata for Any?);
  if (!v22)
  {
    outlined destroy of Any?((uint64_t)&v21);
    goto LABEL_10;
  }

  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSCalendar);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    char v6 = 0;
    return v6 & 1;
  }

  uint64_t v7 = (void *)v20;
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  __int128 v19 = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  __int128 v21 = v19;
  type metadata accessor for _NSSwiftCalendar();
  uint64_t v9 = swift_dynamicCastClass();
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + OBJC_IVAR____NSSwiftCalendar__lock);
    id v11 = (os_unfair_lock_s *)(v10 + 32);
    id v12 = (id)v20;
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 32));
    uint64_t v13 = *(void *)(v10 + 16);
    uint64_t v14 = *(void *)(v10 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v11);
  }

  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v20;
    uint64_t v14 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged,  (uint64_t)&protocol conformance descriptor for _CalendarBridged);
    id v15 = v7;
  }

  *(void *)&__int128 v20 = v13;
  *((void *)&v20 + 1) = v14;
  char v6 = specialized static Calendar.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v6 & 1;
}

id _NSSwiftCalendar.init(checkedCalendarIdentifier:)(void *a1)
{
  uint64_t v3 = v1;
  static Calendar._fromNSCalendarIdentifier(_:)(a1, (char *)&v12);
  uint64_t v4 = v12;
  if (v12 == 16)
  {

    type metadata accessor for _NSSwiftCalendar();
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  else
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v6 = static CalendarCache.cache + 16;
    uint64_t v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
    swift_retain_n();
    os_unfair_lock_lock(v7);
    closure #1 in CalendarCache.fixed(_:)(v6, v4, &v12);
    os_unfair_lock_unlock(v7);
    swift_release_n();
    __int128 v10 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
    uint64_t v8 = swift_allocObject();
    *(_DWORD *)(v8 + 32) = 0;
    *(_OWORD *)(v8 + 16) = v10;
    *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v8;

    v11.receiver = v3;
    v11.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
    id v5 = objc_msgSendSuper2(&v11, sel_initWithCheckedCalendarIdentifier_, a1);
  }

  return v5;
}

uint64_t _NSSwiftCalendar.classForCoder.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  __int128 v6 = *(_OWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  __int128 v8 = v6;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static CalendarCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v2, (uint64_t *)&v7);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  LOBYTE(v2) = specialized static Calendar.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v2 & 1) != 0) {
    uint64_t v4 = (unint64_t *)&lazy cache variable for type metadata for _NSAutoCalendar;
  }
  else {
    uint64_t v4 = (unint64_t *)&lazy cache variable for type metadata for NSCalendar;
  }
  return type metadata accessor for NSMorphologyPronoun(0LL, v4);
}

unint64_t _NSSwiftCalendar.init(coder:)(void *a1)
{
  uint64_t v4 = one-time initialization token for cache;
  id v5 = v1;
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v6 = static CalendarCache.cache + 16;
  __int128 v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.fixed(_:)(v6, 0LL, &v109);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  __int128 v107 = v109;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 16) = v107;
  uint64_t v9 = OBJC_IVAR____NSSwiftCalendar__lock;
  *(void *)&v5[OBJC_IVAR____NSSwiftCalendar__lock] = v8;
  if (!objc_msgSend(a1, sel_allowsKeyedCoding))
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 40) = v21;
    *(void *)(inited + 48) = 0xD000000000000026LL;
    *(void *)(inited + 56) = 0x80000001839CC750LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v22 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?( inited + 32,  (uint64_t)&v109,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
    __int128 v23 = v109;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v23, *((uint64_t *)&v23 + 1));
    if ((v25 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      v22[(result >> 6) + 8] |= 1LL << result;
      *(_OWORD *)(v22[6] + 16 * result) = v23;
      unint64_t result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v22[7] + 32 * result));
      uint64_t v26 = v22[2];
      BOOL v27 = __OFADD__(v26, 1LL);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        v22[2] = v28;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v29 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v30 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v31 = objc_msgSend(v29, sel_initWithDomain_code_userInfo_, v30, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v32 = objc_msgSend(v31, sel_domain);
        id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        uint64_t v35 = v34;

        if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v35 == v36) {
          goto LABEL_26;
        }
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) != 0) {
          goto LABEL_27;
        }
        __break(1u);
        goto LABEL_15;
      }
    }

    __break(1u);
    goto LABEL_57;
  }

  __int128 v10 = (void *)specialized NSCoder.decodeObject<A>(of:forKey:)(0x746E6564692E534ELL, 0xED00007265696669LL);
  if (!v10)
  {
LABEL_15:

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v38 = swift_initStackObject();
    *(_OWORD *)(v38 + 16) = xmmword_183720D90;
    *(void *)(v38 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v38 + 72) = MEMORY[0x189617FA8];
    *(void *)(v38 + 40) = v39;
    *(void *)(v38 + 48) = 0xD00000000000001DLL;
    *(void *)(v38 + 56) = 0x80000001839CC780LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v40 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?( v38 + 32,  (uint64_t)&v109,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
    __int128 v41 = v109;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v41, *((uint64_t *)&v41 + 1));
    if ((v42 & 1) != 0)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }

    v40[(result >> 6) + 8] |= 1LL << result;
    *(_OWORD *)(v40[6] + 16 * result) = v41;
    unint64_t result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v40[7] + 32 * result));
    uint64_t v43 = v40[2];
    BOOL v27 = __OFADD__(v43, 1LL);
    uint64_t v44 = v43 + 1;
    if (v27)
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }

    v40[2] = v44;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v45 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v46 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v16 = objc_msgSend(v45, sel_initWithDomain_code_userInfo_, v46, 4864, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v47 = objc_msgSend(v16, sel_domain);
    id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v50 = v49;

    if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v50 == v51) {
      goto LABEL_26;
    }
    char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v52 & 1) != 0) {
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_21;
  }

  objc_super v11 = v10;
  id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v14 = v13;

  uint64_t v15 = specialized NSCoder.decodeObject<A>(of:forKey:)(0x6C61636F6C2E534ELL, 0xE900000000000065LL);
  if (!v15) {
    goto LABEL_22;
  }
  id v16 = (id)v15;
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSLocale);
  if (!objc_msgSend(v16, sel_isKindOfClass_, swift_getObjCClassFromMetadata()))
  {
LABEL_21:

LABEL_22:
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v53 = swift_initStackObject();
    *(_OWORD *)(v53 + 16) = xmmword_183720D90;
    *(void *)(v53 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v53 + 72) = MEMORY[0x189617FA8];
    *(void *)(v53 + 40) = v54;
    *(void *)(v53 + 48) = 0xD00000000000001ALL;
    *(void *)(v53 + 56) = 0x80000001839CC7A0LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v55 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?( v53 + 32,  (uint64_t)&v109,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
    __int128 v56 = v109;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v56, *((uint64_t *)&v56 + 1));
    if ((v57 & 1) == 0)
    {
      v55[(result >> 6) + 8] |= 1LL << result;
      *(_OWORD *)(v55[6] + 16 * result) = v56;
      unint64_t result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v55[7] + 32 * result));
      uint64_t v58 = v55[2];
      BOOL v27 = __OFADD__(v58, 1LL);
      uint64_t v59 = v58 + 1;
      if (!v27)
      {
        v55[2] = v59;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v60 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v61 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v62 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v63 = objc_msgSend(v62, sel_domain);
        id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        uint64_t v66 = v65;

        if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v66 == v67)
        {
LABEL_26:
          swift_bridgeObjectRelease_n();
          goto LABEL_27;
        }

        uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          __break(1u);
          goto LABEL_32;
        }

uint64_t closure #1 in _NSSwiftCalendar.init(coder:)( uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, void *a10)
{
  uint64_t v28 = a8;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v17 = *(void *)(v15 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    swift_unknownObjectRetain();
    if (a10)
    {
LABEL_3:
      objc_msgSend(a10, sel_timeIntervalSinceReferenceDate, v26, v27, v28);
      uint64_t v19 = v18;
      goto LABEL_6;
    }
  }

  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a3;
    uint64_t v17 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    id v20 = a3;
    if (a10) {
      goto LABEL_3;
    }
  }

  uint64_t v19 = 0LL;
LABEL_6:
  uint64_t v21 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v21 != -1) {
    swift_once();
  }
  char v33 = a2;
  *(void *)&__int128 v32 = v16;
  *((void *)&v32 + 1) = v17;
  *(void *)&__int128 v31 = a4;
  *((void *)&v31 + 1) = v26;
  uint64_t v29 = v19;
  BOOL v30 = a10 == 0LL;
  swift_retain();
  uint64_t v22 = CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( &v33,  &v32,  &v31,  v27,  a7 & 1,  v28,  a9 & 1,  &v29);
  uint64_t v24 = v23;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v22;
  a1[1] = v24;
  return result;
}

Swift::Void __swiftcall _NSSwiftCalendar.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  __int128 v7 = *(_OWORD *)(v4 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  __int128 v10 = v7;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = static CalendarCache.cache + 16;
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)&v9);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  LOBYTE(v5) = specialized static Calendar.== infix(_:_:)((uint64_t)&v10, (uint64_t)&v9);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v5 & 1) == 0)
  {
    v8.receiver = v2;
    v8.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
    objc_msgSendSuper2(&v8, sel_encodeWithCoder_, with.super.isa);
  }

uint64_t _NSSwiftCalendar.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 32));
  __int128 v14 = *(_OWORD *)(v2 + 16);
  uint64_t v3 = Calendar.description.getter();
  uint64_t v5 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
  id v6 = objc_msgSendSuper2(&v13, sel_debugDescription);
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)&__int128 v14 = v7;
  *((void *)&v14 + 1) = v9;
  v10._countAndFlagsBits = 32LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v3;
  v11._object = v5;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v14;
}

double _NSSwiftCalendar.timeZone.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  uint64_t v5 = *(void *)(v3 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v4);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 48))(&v8, ObjectType, v5);
  swift_unknownObjectRelease();
  double result = *(double *)&v8;
  *a1 = v8;
  return result;
}

void closure #1 in _NSSwiftCalendar.timeZone.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
LABEL_7:
    uint64_t v7 = v4;
    uint64_t v8 = a3;
    swift_unknownObjectRetain();
    Calendar.timeZone.setter(&v7);
    return;
  }

  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = (uint64_t *)(static TimeZoneCache.cache + 16);
  id v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.default.getter(v5, &v7);
  if (!v3)
  {
    os_unfair_lock_unlock(v6);
    swift_release_n();
    uint64_t v4 = v7;
    a3 = v8;
    goto LABEL_7;
  }

  os_unfair_lock_unlock(v6);
  __break(1u);
}

uint64_t closure #1 in _NSSwiftCalendar.firstWeekday.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(ObjectType, v4);
  if (result != a2)
  {
    v11[0] = 0LL;
    v11[1] = 0LL;
    v10[0] = 0LL;
    v10[1] = 0LL;
    uint64_t v7 = (*(uint64_t (**)(void *, void *, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v4 + 112))( v11,  v10,  a2,  0LL,  0LL,  1LL,  ObjectType,  v4);
    uint64_t v9 = v8;
    uint64_t result = swift_unknownObjectRelease();
    *a1 = v7;
    a1[1] = v9;
  }

  return result;
}

void @objc _NSSwiftCalendar.firstWeekday.setter( char *a1, uint64_t a2, uint64_t a3, void (*a4)(os_unfair_lock_s *))
{
  uint64_t v5 = *(os_unfair_lock_s **)&a1[OBJC_IVAR____NSSwiftCalendar__lock];
  id v6 = v5 + 4;
  uint64_t v7 = v5 + 8;
  uint64_t v8 = a1;
  os_unfair_lock_lock(v7);
  a4(v6);
  os_unfair_lock_unlock(v7);
}

uint64_t closure #1 in _NSSwiftCalendar.minimumDaysInFirstWeek.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 72))(ObjectType, v4);
  if (result != a2)
  {
    v11[0] = 0LL;
    v11[1] = 0LL;
    v10[0] = 0LL;
    v10[1] = 0LL;
    uint64_t v7 = (*(uint64_t (**)(void *, void *, void, uint64_t, uint64_t, void, uint64_t, uint64_t))(v4 + 112))( v11,  v10,  0LL,  1LL,  a2,  0LL,  ObjectType,  v4);
    uint64_t v9 = v8;
    uint64_t result = swift_unknownObjectRelease();
    *a1 = v7;
    a1[1] = v9;
  }

  return result;
}

__C::_NSRange __swiftcall _NSSwiftCalendar.minimumRange(of:)(NSCalendarUnit of)
{
  char v2 = v14;
  if (v14 != 18)
  {
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
    uint64_t v4 = *(void *)(v3 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
    uint64_t ObjectType = swift_getObjectType();
    char v13 = v2;
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 128))(&v13, ObjectType, v4);
    uint64_t v8 = v7;
    LOBYTE(v4) = v9;
    swift_unknownObjectRelease();
    if ((v4 & 1) == 0)
    {
      Swift::Int v10 = v8 - v6;
      if (!__OFSUB__(v8, v6)) {
        goto LABEL_7;
      }
      __break(1u);
    }
  }

  uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  Swift::Int v10 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_7:
  Swift::Int v11 = v6;
  result.length = v10;
  result.location = v11;
  return result;
}

uint64_t _fromNSCalendarUnit(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result > 1023)
  {
    if (result >= 0x4000)
    {
      if (result < 0x10000)
      {
        if (result == 0x4000)
        {
          *a2 = 12;
          return result;
        }

        if (result == 0x8000)
        {
          *a2 = 13;
          return result;
        }
      }

      else
      {
        switch(result)
        {
          case 0x10000LL:
            *a2 = 17;
            return result;
          case 0x100000LL:
            *a2 = 14;
            return result;
          case 0x200000LL:
            *a2 = 15;
            return result;
        }
      }

      goto LABEL_37;
    }

    if (result <= 4095)
    {
      if (result == 1024)
      {
        *a2 = 8;
        return result;
      }

      if (result == 2048)
      {
        *a2 = 9;
        return result;
      }

      goto LABEL_37;
    }

    if (result == 4096)
    {
      *a2 = 10;
      return result;
    }

    if (result != 0x2000) {
      goto LABEL_37;
    }
    goto LABEL_27;
  }

  if (result <= 63)
  {
    char v2 = 0;
    switch(result)
    {
      case 2LL:
        goto LABEL_38;
      case 4LL:
        *a2 = 1;
        break;
      case 8LL:
        *a2 = 2;
        break;
      case 16LL:
        *a2 = 3;
        break;
      case 32LL:
        *a2 = 4;
        break;
      default:
        goto LABEL_37;
    }

    return result;
  }

  if (result <= 255)
  {
    if (result == 64)
    {
      *a2 = 5;
      return result;
    }

    if (result == 128)
    {
      *a2 = 6;
      return result;
    }

    goto LABEL_37;
  }

  if (result == 256)
  {
LABEL_27:
    *a2 = 11;
    return result;
  }

  if (result == 512)
  {
    *a2 = 7;
    return result;
  }

__C::_NSRange __swiftcall _NSSwiftCalendar.maximumRange(of:)(NSCalendarUnit of)
{
  char v2 = v14;
  if (v14 != 18)
  {
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
    uint64_t v4 = *(void *)(v3 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
    uint64_t ObjectType = swift_getObjectType();
    char v13 = v2;
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 136))(&v13, ObjectType, v4);
    uint64_t v8 = v7;
    LOBYTE(v4) = v9;
    swift_unknownObjectRelease();
    if ((v4 & 1) == 0)
    {
      Swift::Int v10 = v8 - v6;
      if (!__OFSUB__(v8, v6)) {
        goto LABEL_7;
      }
      __break(1u);
    }
  }

  uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  Swift::Int v10 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_7:
  Swift::Int v11 = v6;
  result.length = v10;
  result.location = v11;
  return result;
}

__C::_NSRange __swiftcall _NSSwiftCalendar.range(of:in:for:)(NSCalendarUnit of, NSCalendarUnit in, Foundation::Date a3)
{
  double v6 = *v3;
  _fromNSCalendarUnit(_:)(of, &v26);
  char v7 = v26;
  if (v26 != 18)
  {
    _fromNSCalendarUnit(_:)(in, &v25);
    char v8 = v25;
    if (v25 != 18)
    {
      uint64_t v9 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
      os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
      uint64_t v10 = *(void *)(v9 + 24);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 32));
      char v24 = v7;
      char v23 = v8;
      double v11 = 1.59271755e13;
      if (v6 <= 1.59271755e13) {
        double v11 = v6;
      }
      double v12 = fmax(v11, -2.11845067e11);
      uint64_t ObjectType = swift_getObjectType();
      double v22 = v12;
      uint64_t v14 = (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v10 + 144))( &v24,  &v23,  &v22,  ObjectType,  v10);
      uint64_t v16 = v15;
      char v18 = v17;
      swift_unknownObjectRelease();
      if ((v18 & 1) == 0)
      {
        Swift::Int v19 = v16 - v14;
        if (!__OFSUB__(v16, v14)) {
          goto LABEL_10;
        }
        __break(1u);
      }
    }
  }

  uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  Swift::Int v19 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_10:
  Swift::Int v20 = v14;
  result.length = v19;
  result.location = v20;
  return result;
}

Swift::Int __swiftcall _NSSwiftCalendar.ordinality(of:in:for:)( NSCalendarUnit of, NSCalendarUnit in, Foundation::Date a3)
{
  double v6 = *v3;
  _fromNSCalendarUnit(_:)(of, &v24);
  char v7 = v24;
  if (v24 == 18) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  _fromNSCalendarUnit(_:)(in, &v23);
  char v9 = v23;
  Swift::Int v8 = 0x7FFFFFFFFFFFFFFFLL;
  if (v23 != 18)
  {
    uint64_t v10 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    double v11 = (os_unfair_lock_s *)(v10 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 32));
    uint64_t v12 = *(void *)(v10 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v11);
    char v22 = v7;
    char v21 = v9;
    double v13 = 1.59271755e13;
    if (v6 <= 1.59271755e13) {
      double v13 = v6;
    }
    double v14 = fmax(v13, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    double v20 = v14;
    Swift::Int v16 = (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v12 + 152))( &v22,  &v21,  &v20,  ObjectType,  v12);
    char v18 = v17;
    swift_unknownObjectRelease();
    if ((v18 & 1) == 0) {
      return v16;
    }
  }

  return v8;
}

uint64_t _NSSwiftCalendar.range(of:start:interval:for:)(uint64_t a1, void *a2, double *a3, double *a4)
{
  double v7 = *a4;
  _fromNSCalendarUnit(_:)(a1, (char *)v21);
  char v8 = LOBYTE(v21[0]);
  if (LOBYTE(v21[0]) == 18) {
    return 0LL;
  }
  uint64_t v9 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v10 = (os_unfair_lock_s *)(v9 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
  uint64_t v11 = *(void *)(v9 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v10);
  char v20 = v8;
  double v12 = 1.59271755e13;
  if (v7 <= 1.59271755e13) {
    double v12 = v7;
  }
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v19 = v13;
  (*(void (**)(double *__return_ptr, char *, double *, uint64_t, uint64_t))(v11 + 160))( v21,  &v20,  &v19,  ObjectType,  v11);
  swift_unknownObjectRelease();
  if ((v22 & 1) != 0) {
    return 0LL;
  }
  double v16 = v21[1];
  if (a2)
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v21[0]);
    id v18 = v17;
    *a2 = v17;
  }

  if (a3) {
    *a3 = v16;
  }
  return 1LL;
}

uint64_t _NSSwiftCalendar._date(from:)(void *__src)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v3 = (os_unfair_lock_s *)(v2 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 32));
  uint64_t v4 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v3);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 176))(v7, ObjectType, v4);
  return swift_unknownObjectRelease();
}

Swift::Int __swiftcall _NSSwiftCalendar.component(_:from:)(NSCalendarUnit _, Foundation::Date from)
{
  uint64_t v4 = *v2;
  _fromNSCalendarUnit(_:)(_, v12);
  uint64_t v5 = v12[0];
  if (v12[0] != 18LL)
  {
    uint64_t v7 = *(void *)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
    __int128 v8 = *(_OWORD *)(v7 + 16);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
    __int128 v11 = v8;
    uint64_t v10 = qword_1837A1248[v5];
    uint64_t v9 = v4;
    Calendar._dateComponents(_:from:)(&v10, (double *)&v9, v12);
    outlined release of DateComponents((uint64_t)v12);
    swift_unknownObjectRelease();
    __asm { BR              X10 }
  }

  return 0x7FFFFFFFFFFFFFFFLL;
}

void sub_1830B441C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if ((a20 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B442C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  if ((a22 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B443C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  if ((a24 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B444C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  if ((a26 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B445C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
  if ((a30 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B446C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
  if ((a32 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B447C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
  if ((a34 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B448C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38)
{
  if ((a38 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B449C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40)
{
  if ((a40 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B44AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42)
{
  if ((a42 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B44BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46)
{
  if ((a46 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B44CC()
{
  if ((*v0 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B44DC()
{
  if ((*(_BYTE *)(v0 + 16) & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B44EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
  if ((a36 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

void sub_1830B44FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  if ((a28 & 1) == 0) {
    JUMPOUT(0x1830B4400LL);
  }
  JUMPOUT(0x1830B43FCLL);
}

uint64_t _NSSwiftCalendar.date(byAdding:to:options:)(void *__src, double *a2, char a3)
{
  double v6 = *a2;
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  __int128 v8 = (os_unfair_lock_s *)(v7 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v10 = a3 & 1;
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v8);
  double v11 = 1.59271755e13;
  if (v6 <= 1.59271755e13) {
    double v11 = v6;
  }
  double v12 = fmax(v11, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v15 = v12;
  (*(void (**)(_BYTE *, double *, uint64_t, uint64_t, uint64_t))(v9 + 200))(__dst, &v15, v10, ObjectType, v9);
  return swift_unknownObjectRelease();
}

void *_NSSwiftCalendar.components(_:from:to:options:)@<X0>( int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v8 = *a2;
  uint64_t v9 = *a3;
  uint64_t v10 = _fromNSCalendarUnits(_:)(a1);
  uint64_t v11 = *(void *)&v4[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
  __int128 v20 = *(_OWORD *)(v11 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  __int128 v23 = v20;
  uint64_t v21 = v9;
  uint64_t v22 = v8;
  Calendar.dateComponents(_:from:to:)(v10, (double *)&v22, (double *)&v21, __src);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 0x100000) != 0)
  {
    type metadata accessor for _NSSwiftCalendar();
    uint64_t v12 = swift_dynamicCastClass();
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + OBJC_IVAR____NSSwiftCalendar__lock);
      double v14 = (os_unfair_lock_s *)(v13 + 32);
      double v15 = v4;
      os_unfair_lock_lock((os_unfair_lock_t)(v13 + 32));
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = *(void *)(v13 + 24);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock(v14);
    }

    else
    {
      type metadata accessor for _CalendarBridged();
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v5;
      uint64_t v17 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged,  (uint64_t)&protocol conformance descriptor for _CalendarBridged);
      id v18 = v5;
    }

    swift_unknownObjectRelease();
    *(void *)&__src[0] = v16;
    *((void *)&__src[0] + 1) = v17;
    if (*(void *)&__src[1])
    {
      __int128 v23 = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v23);
    }
  }

  if ((a1 & 0x100) != 0)
  {
    *(void *)&__src[14] = *(void *)&__src[16];
    BYTE8(__src[14]) = BYTE8(__src[16]);
  }

  return memcpy(a4, __src, 0x11AuLL);
}

uint64_t _fromNSCalendarUnits(_:)(int a1)
{
  uint64_t v4 = MEMORY[0x18961AFF8];
  if ((a1 & 2) != 0)
  {
    specialized Set._Variant.insert(_:)(&v3, 0LL);
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }

  specialized Set._Variant.insert(_:)(&v3, 1uLL);
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

void *_NSSwiftCalendar._components(_:from:)@<X0>(int a1@<W0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  double v7 = *a2;
  _fromNSCalendarUnits(_:)(a1);
  uint64_t v8 = *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  __int128 v19 = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  __int128 v22 = v19;
  uint64_t v9 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v9, &v21);
  double v10 = 1.59271755e13;
  if (v7 <= 1.59271755e13) {
    double v10 = v7;
  }
  double v20 = fmax(v10, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v21, &v20, __src);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 0x100000) != 0)
  {
    type metadata accessor for _NSSwiftCalendar();
    uint64_t v11 = swift_dynamicCastClass();
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + OBJC_IVAR____NSSwiftCalendar__lock);
      uint64_t v13 = (os_unfair_lock_s *)(v12 + 32);
      double v14 = v3;
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 32));
      uint64_t v15 = *(void *)(v12 + 16);
      uint64_t v16 = *(void *)(v12 + 24);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock(v13);
    }

    else
    {
      type metadata accessor for _CalendarBridged();
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v4;
      uint64_t v16 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged,  (uint64_t)&protocol conformance descriptor for _CalendarBridged);
      id v17 = v4;
    }

    swift_unknownObjectRelease();
    *(void *)&__src[0] = v15;
    *((void *)&__src[0] + 1) = v16;
    if (*(void *)&__src[1])
    {
      __int128 v22 = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v22);
    }
  }

  if ((a1 & 0x100) != 0)
  {
    *(void *)&__src[14] = *(void *)&__src[16];
    BYTE8(__src[14]) = BYTE8(__src[16]);
  }

  return memcpy(a3, __src, 0x11AuLL);
}

uint64_t _NSSwiftCalendar._components(in:from:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)&v4[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  __int128 v18 = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  __int128 v20 = *a1;
  __int128 v21 = v18;
  uint64_t v19 = v7;
  Calendar.dateComponents(in:from:)(&v20, (double *)&v19, a3);
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftCalendar();
  uint64_t v9 = swift_dynamicCastClass();
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + OBJC_IVAR____NSSwiftCalendar__lock);
    uint64_t v11 = (os_unfair_lock_s *)(v10 + 32);
    uint64_t v12 = v4;
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 32));
    uint64_t v13 = *(void *)(v10 + 16);
    uint64_t v14 = *(void *)(v10 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v11);
  }

  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v4;
    uint64_t v14 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged,  (uint64_t)&protocol conformance descriptor for _CalendarBridged);
    uint64_t v15 = v4;
  }

  swift_unknownObjectRelease();
  *a3 = v13;
  a3[1] = v14;
  uint64_t result = a3[2];
  if (result)
  {
    uint64_t v17 = a3[3];
    *(void *)&__int128 v21 = a3[2];
    *((void *)&v21 + 1) = v17;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter((uint64_t *)&v21);
  }

  return result;
}

Swift::Bool __swiftcall _NSSwiftCalendar.isDateInWeekend(_:)(Foundation::Date a1)
{
  double v3 = *v1;
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v5 = (os_unfair_lock_s *)(v4 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  uint64_t v6 = *(void *)(v4 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v5);
  double v7 = 1.59271755e13;
  if (v3 <= 1.59271755e13) {
    double v7 = v3;
  }
  double v8 = fmax(v7, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v12 = v8;
  char v10 = (*(uint64_t (**)(double *, uint64_t, uint64_t))(v6 + 168))(&v12, ObjectType, v6);
  swift_unknownObjectRelease();
  return v10 & 1;
}

uint64_t _NSSwiftCalendar.nextWeekendStart(_:interval:options:after:)( void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  *(_OWORD *)&startingAfter[0]._time = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  __int128 v16 = *(_OWORD *)&startingAfter[0]._time;
  uint64_t v15 = v7;
  Calendar.nextWeekend(startingAfter:direction:)(startingAfter[0], (Foundation::Calendar::SearchDirection)&v15);
  swift_unknownObjectRelease();
  int v9 = v19;
  if ((v19 & 1) == 0)
  {
    uint64_t v10 = v18;
    if (a1)
    {
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v17);
      id v12 = v11;
      *a1 = v11;
    }

    if (a2) {
      *a2 = v10;
    }
  }

  return v9 ^ 1u;
}

NSComparisonResult __swiftcall _NSSwiftCalendar.compare(_:to:toUnitGranularity:)( Foundation::Date _, Foundation::Date to, NSCalendarUnit toUnitGranularity)
{
  uint64_t v5 = *(void *)toUnitGranularity;
  _fromNSCalendarUnit(_:)(v3, (char *)&v12);
  uint64_t v7 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  *(_OWORD *)&_a[0]._time = *(_OWORD *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  __int128 v12 = *(_OWORD *)&_a[0]._time;
  uint64_t v11 = v5;
  NSComparisonResult v6 = Calendar.compare(_:to:toGranularity:)(_a[0], v8, (Foundation::Calendar::Component)&v11);
  swift_unknownObjectRelease();
  return v6;
}

Swift::Int _NSSwiftCalendar.date(_:matchesComponents:)(double *a1, const void *a2)
{
  void (*v27)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  BOOL v32;
  __int128 v33[18];
  double v34[36];
  _OWORD __src[18];
  _OWORD v36[18];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  __int16 v70;
  _OWORD __dst[19];
  double v3 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v7 = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = 0LL;
  uint64_t v9 = v7 + 56;
  do
  {
    Swift::UInt v13 = outlined read-only object #0 of _NSSwiftCalendar.date(_:matchesComponents:)[v8 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v13);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = *(void *)(v9 + 8 * (v16 >> 6));
    uint64_t v19 = 1LL << v16;
    uint64_t v20 = *(void *)(v7 + 48);
    if (((1LL << v16) & v18) != 0)
    {
      uint64_t v21 = ~v15;
      while (1)
      {
        unint64_t v16 = (v16 + 1) & v21;
        unint64_t v17 = v16 >> 6;
        uint64_t v18 = *(void *)(v9 + 8 * (v16 >> 6));
        uint64_t v19 = 1LL << v16;
        if ((v18 & (1LL << v16)) == 0) {
          break;
        }
      }
    }

    *(void *)(v9 + 8 * v17) = v19 | v18;
    *(_BYTE *)(v20 + v16) = v13;
    uint64_t v10 = *(void *)(v7 + 16);
    BOOL v11 = __OFADD__(v10, 1LL);
    uint64_t v12 = v10 + 1;
    if (v11)
    {
      __break(1u);
      goto LABEL_27;
    }

    *(void *)(v7 + 16) = v12;
LABEL_4:
    ++v8;
  }

  while (v8 != 15);
  outlined retain of DateComponents((uint64_t)__dst);
  specialized _NativeSet.filter(_:)(v7);
  outlined release of DateComponents((uint64_t)__dst);
  *(void *)&v36[0] = v5;
  *((void *)&v36[0] + 1) = v6;
  uint64_t v22 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v22, __src);
  double v23 = 1.59271755e13;
  if (v3 <= 1.59271755e13) {
    double v23 = v3;
  }
  double v24 = fmax(v23, -2.11845067e11);
  v34[0] = v24;
  Calendar._dateComponents(_:from:)((uint64_t *)__src, v34, &v37);
  swift_release();
  char v25 = BYTE9(__dst[17]);
  if (BYTE9(__dst[17]) == 2)
  {
    Swift::Int result = outlined retain of DateComponents((uint64_t)__dst);
  }

  else
  {
    *(void *)&__src[0] = 4LL;
    uint64_t ObjectType = swift_getObjectType();
    v34[0] = v24;
    uint64_t v27 = *(void (**)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t))(v6 + 192);
    outlined retain of DateComponents((uint64_t)__dst);
    v27(v36, __src, v34, ObjectType, v6);
    Swift::Int result = outlined release of DateComponents((uint64_t)v36);
    HIBYTE(v70) = BYTE9(v36[17]);
  }

  uint64_t v28 = *(void *)&__dst[10];
  uint64_t v29 = v55;
  BOOL v30 = v56 ^ 1 | BYTE8(__dst[10]);
  if ((v56 & 1) != 0 || (BYTE8(__dst[10]) & 1) != 0) {
    goto LABEL_24;
  }
  __int128 v31 = v55 - *(void *)&__dst[10];
  if (!__OFSUB__(v55, *(void *)&__dst[10]))
  {
    if (v31 < 0) {
      __int128 v31 = *(void *)&__dst[10] - v55;
    }
    if ((unint64_t)v31 >= 0x1F5)
    {
      outlined release of DateComponents((uint64_t)__dst);
      *(void *)&v36[2] = v39;
      BYTE8(v36[2]) = v40;
      *(void *)&v36[3] = v41;
      BYTE8(v36[3]) = v42;
      *(void *)&v36[4] = v43;
      BYTE8(v36[4]) = v44;
      *(void *)&v36[5] = v45;
      BYTE8(v36[5]) = v46;
      *(void *)&v36[6] = v47;
      BYTE8(v36[6]) = v48;
      *(void *)&v36[7] = v49;
      BYTE8(v36[7]) = v50;
      *(void *)&v36[8] = v51;
      BYTE8(v36[8]) = v52;
      *(void *)&v36[9] = v53;
      BYTE8(v36[9]) = v54;
      *(void *)&v36[10] = v29;
      *(void *)&v36[11] = v57;
      BYTE8(v36[11]) = v58;
      *(void *)&v36[12] = v59;
      BYTE8(v36[12]) = v60;
      *(void *)&v36[13] = v61;
      BYTE8(v36[13]) = v62;
      *(void *)&v36[14] = v63;
      BYTE8(v36[14]) = v64;
      *(void *)&v36[15] = v65;
      BYTE8(v36[15]) = v66;
      BYTE8(v36[16]) = v68;
      WORD4(v36[17]) = v70;
      *(void *)&v36[16] = v67;
      *(void *)&v36[17] = v69;
      v36[0] = v37;
      v36[1] = v38;
      BYTE8(v36[10]) = 0;
      outlined release of DateComponents((uint64_t)v36);
      swift_unknownObjectRelease();
      return 0;
    }

    uint64_t v29 = 0LL;
    uint64_t v28 = 0LL;
    BOOL v30 = 0;
LABEL_24:
    *(void *)&__src[2] = *(void *)&__dst[2];
    BYTE8(__src[2]) = BYTE8(__dst[2]);
    *(void *)&__src[3] = *(void *)&__dst[3];
    BYTE8(__src[3]) = BYTE8(__dst[3]);
    *(void *)&__src[4] = *(void *)&__dst[4];
    BYTE8(__src[4]) = BYTE8(__dst[4]);
    *(void *)&__src[5] = *(void *)&__dst[5];
    BYTE8(__src[5]) = BYTE8(__dst[5]);
    *(void *)&__src[6] = *(void *)&__dst[6];
    BYTE8(__src[6]) = BYTE8(__dst[6]);
    *(void *)&__src[7] = *(void *)&__dst[7];
    BYTE8(__src[7]) = BYTE8(__dst[7]);
    *(void *)&__src[8] = *(void *)&__dst[8];
    BYTE8(__src[8]) = BYTE8(__dst[8]);
    *(void *)&__src[9] = *(void *)&__dst[9];
    BYTE8(__src[9]) = BYTE8(__dst[9]);
    *(void *)&__src[10] = v28;
    BYTE8(__src[10]) = v30;
    *(void *)&__src[11] = *(void *)&__dst[11];
    BYTE8(__src[11]) = BYTE8(__dst[11]);
    *(void *)&__src[12] = *(void *)&__dst[12];
    BYTE8(__src[12]) = BYTE8(__dst[12]);
    *(void *)&__src[13] = *(void *)&__dst[13];
    BYTE8(__src[13]) = BYTE8(__dst[13]);
    *(void *)&__src[14] = *(void *)&__dst[14];
    BYTE8(__src[14]) = BYTE8(__dst[14]);
    *(void *)&__src[15] = *(void *)&__dst[15];
    BYTE8(__src[15]) = BYTE8(__dst[15]);
    BYTE8(__src[16]) = BYTE8(__dst[16]);
    BYTE8(__src[17]) = BYTE8(__dst[17]);
    *(void *)&__src[16] = *(void *)&__dst[16];
    *(void *)&__src[17] = *(void *)&__dst[17];
    BYTE9(__src[17]) = v25;
    __src[0] = __dst[0];
    __src[1] = __dst[1];
    memcpy(v34, __src, 0x11AuLL);
    *(void *)&v36[2] = v39;
    BYTE8(v36[2]) = v40;
    *(void *)&v36[3] = v41;
    BYTE8(v36[3]) = v42;
    *(void *)&v36[4] = v43;
    BYTE8(v36[4]) = v44;
    *(void *)&v36[5] = v45;
    BYTE8(v36[5]) = v46;
    *(void *)&v36[6] = v47;
    BYTE8(v36[6]) = v48;
    *(void *)&v36[7] = v49;
    BYTE8(v36[7]) = v50;
    *(void *)&v36[8] = v51;
    BYTE8(v36[8]) = v52;
    *(void *)&v36[9] = v53;
    BYTE8(v36[9]) = v54;
    *(void *)&v36[10] = v29;
    BYTE8(v36[10]) = v56;
    *(void *)&v36[11] = v57;
    BYTE8(v36[11]) = v58;
    *(void *)&v36[12] = v59;
    BYTE8(v36[12]) = v60;
    *(void *)&v36[13] = v61;
    BYTE8(v36[13]) = v62;
    *(void *)&v36[14] = v63;
    BYTE8(v36[14]) = v64;
    *(void *)&v36[15] = v65;
    BYTE8(v36[15]) = v66;
    BYTE8(v36[16]) = v68;
    WORD4(v36[17]) = v70;
    *(void *)&v36[16] = v67;
    *(void *)&v36[17] = v69;
    v36[0] = v37;
    v36[1] = v38;
    memcpy(v33, v36, 0x11AuLL);
    __int128 v32 = specialized static DateComponents.== infix(_:_:)((uint64_t)v34, v33);
    outlined release of DateComponents((uint64_t)__src);
    outlined release of DateComponents((uint64_t)v36);
    swift_unknownObjectRelease();
    return v32;
  }

void *_NSSwiftCalendar.components(_:from:to:options:)@<X0>( int a1@<W0>, const void *a2@<X1>, const void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  __int128 v11 = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  __int128 v14 = v11;
  uint64_t v9 = _fromNSCalendarUnits(_:)(a1);
  Calendar.dateComponents(_:from:to:)(v9, __dst, v12, __src);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 0x100) != 0)
  {
    __src[28] = __src[32];
    LOBYTE(__src[29]) = __src[33];
  }

  return memcpy(a4, __src, 0x11AuLL);
}

uint64_t _NSSwiftCalendar.getEra(_:year:month:day:from:)( void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = *(void *)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
  __int128 v17 = *(_OWORD *)(v11 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  __int128 v29 = v17;
  uint64_t v19 = 15LL;
  uint64_t v18 = v10;
  Calendar._dateComponents(_:from:)(&v19, (double *)&v18, v20);
  swift_unknownObjectRelease();
  if (a1)
  {
    uint64_t v12 = v21;
    if (v22) {
      uint64_t v12 = 0LL;
    }
    *a1 = v12;
  }

  if (a2)
  {
    uint64_t v13 = v23;
    if (v24) {
      uint64_t v13 = 0LL;
    }
    *a2 = v13;
  }

  if (a3)
  {
    uint64_t v14 = v25;
    if (v26) {
      uint64_t v14 = 0LL;
    }
    *a3 = v14;
  }

  if (a4)
  {
    uint64_t v15 = v27;
    if (v28) {
      uint64_t v15 = 0LL;
    }
    *a4 = v15;
  }

  return outlined release of DateComponents((uint64_t)v20);
}

uint64_t _NSSwiftCalendar.getEra(_:yearForWeekOfYear:weekOfYear:weekday:from:)( void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = *(void *)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
  __int128 v17 = *(_OWORD *)(v11 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  __int128 v29 = v17;
  uint64_t v19 = 6273LL;
  uint64_t v18 = v10;
  Calendar._dateComponents(_:from:)(&v19, (double *)&v18, v20);
  swift_unknownObjectRelease();
  if (a1)
  {
    uint64_t v12 = v21;
    if (v22) {
      uint64_t v12 = 0LL;
    }
    *a1 = v12;
  }

  if (a2)
  {
    uint64_t v13 = v27;
    if (v28) {
      uint64_t v13 = 0LL;
    }
    *a2 = v13;
  }

  if (a3)
  {
    if (v26) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = v25;
    }
    *a3 = v14;
  }

  if (a4)
  {
    uint64_t v15 = v23;
    if (v24) {
      uint64_t v15 = 0LL;
    }
    *a4 = v15;
  }

  return outlined release of DateComponents((uint64_t)v20);
}

uint64_t _NSSwiftCalendar.getHour(_:minute:second:nanosecond:from:)( void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = *(void *)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
  __int128 v17 = *(_OWORD *)(v11 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  __int128 v29 = v17;
  uint64_t v19 = 8304LL;
  uint64_t v18 = v10;
  Calendar._dateComponents(_:from:)(&v19, (double *)&v18, v20);
  swift_unknownObjectRelease();
  if (a1)
  {
    uint64_t v12 = v21;
    if (v22) {
      uint64_t v12 = 0LL;
    }
    *a1 = v12;
  }

  if (a2)
  {
    uint64_t v13 = v23;
    if (v24) {
      uint64_t v13 = 0LL;
    }
    *a2 = v13;
  }

  if (a3)
  {
    uint64_t v14 = v25;
    if (v26) {
      uint64_t v14 = 0LL;
    }
    *a3 = v14;
  }

  if (a4)
  {
    uint64_t v15 = v27;
    if (v28) {
      uint64_t v15 = 0LL;
    }
    *a4 = v15;
  }

  return outlined release of DateComponents((uint64_t)v20);
}

void @objc _NSSwiftCalendar.getEra(_:year:month:day:from:)( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, id a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v16 = v14;
  id v15 = a1;
  a8(a3, a4, a5, a6, &v16);
}

uint64_t _NSSwiftCalendar.range(ofWeekendStart:interval:containing:)(void *a1, uint64_t *a2, double *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  double v6 = *a3;
  __tp.__darwin_time_t tv_sec = 0LL;
  __tp.uint64_t tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  __tp.__darwin_time_t tv_sec = 0LL;
  __tp.uint64_t tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  *(_OWORD *)&startingAfter[0]._time = *(_OWORD *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  __int128 v16 = *(_OWORD *)&startingAfter[0]._time;
  double v15 = v6;
  Calendar.nextWeekend(startingAfter:direction:)(startingAfter[0], (Foundation::Calendar::SearchDirection)&v15);
  swift_unknownObjectRelease();
  if (v18 == 1) {
    return 0LL;
  }
  __darwin_time_t tv_sec = __tp.tv_sec;
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  *(_OWORD *)&startingAftera[0]._time = *(_OWORD *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  __int128 v16 = *(_OWORD *)&startingAftera[0]._time;
  double v15 = *(double *)&tv_sec;
  Calendar.nextWeekend(startingAfter:direction:)(startingAftera[0], (Foundation::Calendar::SearchDirection)&v15);
  swift_unknownObjectRelease();
  if ((v18 & 1) != 0) {
    return 0LL;
  }
  uint64_t result = 0LL;
  if (v6 >= *(double *)&__tp.tv_sec)
  {
    uint64_t tv_nsec = __tp.tv_nsec;
    if (v6 < *(double *)&__tp.tv_nsec + *(double *)&__tp.tv_sec)
    {
      if (a1)
      {
        id v11 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F50]),  sel_initWithTimeIntervalSinceReferenceDate_,  *(double *)&__tp.tv_sec);
        id v12 = v11;
        *a1 = v11;
      }

      if (a2) {
        *a2 = tv_nsec;
      }
      return 1LL;
    }
  }

  return result;
}

Foundation::Date __swiftcall _NSSwiftCalendar.startOfDay(for:)(Foundation::Date a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 32));
  *(_OWORD *)&fora[0]._time = *(_OWORD *)(v2 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
  Calendar.startOfDay(for:)(fora[0]);
  swift_unknownObjectRelease();
  return result;
}

uint64_t _NSSwiftCalendar.nextDate(after:matching:options:)@<X0>( uint64_t *a1@<X0>, const void *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  char v5 = a3;
  uint64_t v8 = *a1;
  if ((a3 & 2) != 0) {
    char v9 = 3;
  }
  else {
    char v9 = 0;
  }
  if ((a3 & 0x100) != 0) {
    char v10 = 2;
  }
  else {
    char v10 = v9;
  }
  if ((a3 & 0x200) != 0) {
    char v11 = 1;
  }
  else {
    char v11 = v10;
  }
  if ((a3 & 0x400) != 0) {
    char v12 = 0;
  }
  else {
    char v12 = v11;
  }
  BOOL v13 = (a3 & 0x3000) == 0x2000LL;
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 32));
  __int128 v16 = *(_OWORD *)(v14 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 32));
  __int128 v22 = v16;
  uint64_t v21 = v8;
  memcpy(__dst, a2, 0x11AuLL);
  char v19 = v12;
  BOOL v18 = v13;
  BOOL v17 = (v5 & 4) != 0;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)( &v21,  __dst,  &v19,  (char *)&v18,  (char *)&v17,  a4);
  return swift_unknownObjectRelease();
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.nextDate(after:matchingHour:minute:second:options:)( Foundation::Date after, Swift::Int matchingHour, Swift::Int minute, Swift::Int second, NSCalendarOptions options)
{
  char v8 = v5;
  uint64_t v9 = v6;
  uint64_t v10 = *(void *)matchingHour;
  if ((v5 & 0x400) != 0)
  {
    char v11 = 0;
  }

  else if ((v5 & 0x200) != 0)
  {
    char v11 = 1;
  }

  else if ((v5 & 0x100) != 0)
  {
    char v11 = 2;
  }

  else if ((v5 & 2) != 0)
  {
    char v11 = 3;
  }

  else
  {
    char v11 = 0;
  }

  BOOL v12 = (v5 & 0x3000) == 0x2000LL;
  __dst[0] = 0uLL;
  __int128 v22 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  (uint64_t *)&v22,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  minute,  0,  second,  0,  options,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  uint64_t v13 = *(void *)(v7 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 32));
  __int128 v16 = *(_OWORD *)(v13 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 32));
  __int128 v22 = v16;
  uint64_t v21 = v10;
  memcpy(__dst, __src, 0x11AuLL);
  char v19 = v11;
  BOOL v18 = v12;
  BOOL v17 = (v8 & 4) != 0;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)( &v21,  __dst,  &v19,  (char *)&v18,  (char *)&v17,  v9);
  swift_unknownObjectRelease();
  char v14 = outlined release of DateComponents((uint64_t)__src);
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v15;
  result.is_nil = v14;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.nextDate(after:matching:value:options:)( Foundation::Date after, NSCalendarUnit matching, Swift::Int value, NSCalendarOptions options)
{
  __int16 v7 = v4;
  uint64_t v9 = v5;
  uint64_t v10 = *(void *)matching;
  if ((v4 & 2) != 0) {
    char v11 = 3;
  }
  else {
    char v11 = 0;
  }
  if ((v4 & 0x100) != 0) {
    char v12 = 2;
  }
  else {
    char v12 = v11;
  }
  if ((v4 & 0x200) != 0) {
    char v12 = 1;
  }
  if ((v4 & 0x400) != 0) {
    char v13 = 0;
  }
  else {
    char v13 = v12;
  }
  char v14 = _fromNSCalendarUnit(_:)(value, __src);
  char v16 = __src[0];
  if (__src[0] == 18)
  {
    *(void *)uint64_t v9 = 0LL;
    *(_BYTE *)(v9 + 8) = 1;
  }

  else
  {
    __dst[0] = 0uLL;
    v22[0] = 0LL;
    v22[1] = 0LL;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  v22,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
    LOBYTE(__dst[0]) = v16;
    v27.Foundation::Morphology::Definiteness value = options;
    v27.is_nil = 0;
    DateComponents.setValue(_:for:)(v27, (Foundation::Calendar::Component)__dst);
    uint64_t v17 = *(void *)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v17 + 32));
    __int128 v18 = *(_OWORD *)(v17 + 16);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 32));
    __int128 v24 = v18;
    uint64_t v23 = v10;
    memcpy(__dst, __src, 0x11AuLL);
    memcpy(v22, __src, 0x11AuLL);
    char v21 = v13;
    BOOL v20 = (v7 & 0x3000) == 0x2000LL;
    BOOL v19 = (v7 & 4) != 0;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)( &v23,  v22,  &v21,  (char *)&v20,  (char *)&v19,  v9);
    swift_unknownObjectRelease();
    char v14 = outlined release of DateComponents((uint64_t)__dst);
  }

  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v15;
  result.is_nil = v14;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(byAdding:value:to:options:)( NSCalendarUnit byAdding, Swift::Int value, Foundation::Date to, NSCalendarOptions options)
{
  uint64_t v7 = v6;
  char v8 = v4;
  uint64_t v10 = v5;
  double v11 = *(double *)options;
  char v12 = _fromNSCalendarUnit(_:)(byAdding, __src);
  char v14 = __src[0];
  if (__src[0] == 18)
  {
    *(void *)uint64_t v10 = 0LL;
    *(_BYTE *)(v10 + 8) = 1;
  }

  else
  {
    __dst[0] = 0uLL;
    v24[0] = 0LL;
    v24[1] = 0LL;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  v24,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
    LOBYTE(__dst[0]) = v14;
    v27.Foundation::Morphology::Definiteness value = value;
    v27.is_nil = 0;
    DateComponents.setValue(_:for:)(v27, (Foundation::Calendar::Component)__dst);
    uint64_t v15 = *(void *)(v7 + OBJC_IVAR____NSSwiftCalendar__lock);
    char v16 = (os_unfair_lock_s *)(v15 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v15 + 32));
    uint64_t v17 = *(void *)(v15 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v16);
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t v18 = v8 & 1;
    memcpy(v24, __src, 0x11AuLL);
    double v19 = 1.59271755e13;
    if (v11 <= 1.59271755e13) {
      double v19 = v11;
    }
    double v20 = fmax(v19, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    double v23 = v20;
    __int128 v22 = *(void (**)(uint64_t *, double *, uint64_t, uint64_t, uint64_t))(v17 + 200);
    outlined retain of DateComponents((uint64_t)__dst);
    v22(v24, &v23, v18, ObjectType, v17);
    outlined release of DateComponents((uint64_t)__dst);
    swift_unknownObjectRelease();
    char v12 = outlined release of DateComponents((uint64_t)__dst);
  }

  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v13;
  result.is_nil = v12;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(bySettingHour:minute:second:of:options:)( Swift::Int bySettingHour, Swift::Int minute, Swift::Int second, Foundation::Date of, NSCalendarOptions options)
{
  uint64_t v10 = *(void *)options;
  if ((v5 & 2) != 0) {
    char v11 = 3;
  }
  else {
    char v11 = 0;
  }
  if ((v5 & 0x100) != 0) {
    char v12 = 2;
  }
  else {
    char v12 = v11;
  }
  if ((v5 & 0x200) != 0) {
    char v13 = 1;
  }
  else {
    char v13 = v12;
  }
  if ((v5 & 0x400) != 0) {
    char v14 = 0;
  }
  else {
    char v14 = v13;
  }
  BOOL v15 = (v5 & 0x3000) == 0x2000LL;
  uint64_t v16 = *(void *)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 32));
  *(_OWORD *)&ofa[0]._time = *(_OWORD *)(v16 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 32));
  __int128 v23 = *(_OWORD *)&ofa[0]._time;
  uint64_t v22 = v10;
  char v21 = v14;
  BOOL v20 = v15;
  Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)( bySettingHour,  minute,  second,  ofa[0],  (Foundation::Calendar::MatchingPolicy)&v22,  (Foundation::Calendar::RepeatedTimePolicy)&v21,  (Foundation::Calendar::SearchDirection)&v20);
  char v17 = swift_unknownObjectRelease();
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v18;
  result.is_nil = v17;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(bySettingUnit:value:of:options:)( NSCalendarUnit bySettingUnit, Swift::Int value, Foundation::Date of, NSCalendarOptions options)
{
  uint64_t v6 = v4;
  uint64_t v7 = *(void *)options;
  char v8 = _fromNSCalendarUnit(_:)(bySettingUnit, v16);
  uint64_t v10 = v16[0];
  if (v16[0] != 18LL)
  {
    uint64_t v11 = *(void *)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
    __int128 v12 = *(_OWORD *)(v11 + 16);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
    __int128 __src = v12;
    __dst[0] = qword_1837A1248[v10];
    uint64_t v13 = v7;
    Calendar._dateComponents(_:from:)(__dst, (double *)&v13, v16);
    outlined release of DateComponents((uint64_t)v16);
    swift_unknownObjectRelease();
    __asm { BR              X9 }
  }

  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v9;
  result.is_nil = v8;
  return result;
}

id @objc _NSSwiftCalendar.date(byAdding:value:to:options:)( void *a1, int a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, void (*a7)(double *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t))
{
  uint64_t v16 = v12;
  id v13 = a1;
  a7(&v17, a3, a4, &v16, a6);

  if ((v18 & 1) != 0) {
    id v14 = 0LL;
  }
  else {
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v17);
  }
  return v14;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(era:year:month:day:hour:minute:second:nanosecond:)( Swift::Int era, Swift::Int year, Swift::Int month, Swift::Int day, Swift::Int hour, Swift::Int minute, Swift::Int second, Swift::Int nanosecond)
{
  __dst[0] = 0uLL;
  v16[0] = 0LL;
  v16[1] = 0LL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  v16,  era,  0,  year,  0,  month,  0,  (uint64_t)__src,  day,  0,  hour,  0,  minute,  0,  second,  0,  nanosecond,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  uint64_t v9 = *(void *)(v8 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v10 = (os_unfair_lock_s *)(v9 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
  uint64_t v11 = *(void *)(v9 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v10);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 176))(__dst, ObjectType, v11);
  swift_unknownObjectRelease();
  char v13 = outlined release of DateComponents((uint64_t)__src);
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v14;
  result.is_nil = v13;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(era:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:)( Swift::Int era, Swift::Int yearForWeekOfYear, Swift::Int weekOfYear, Swift::Int weekday, Swift::Int hour, Swift::Int minute, Swift::Int second, Swift::Int nanosecond)
{
  __dst[0] = 0uLL;
  v16[0] = 0LL;
  v16[1] = 0LL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  v16,  era,  0,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  hour,  0,  minute,  0,  second,  0,  nanosecond,  0,  weekday,  0,  0LL,  1,  0LL,  1,  0LL,  1,  weekOfYear,  0,  yearForWeekOfYear,  0);
  uint64_t v9 = *(void *)(v8 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v10 = (os_unfair_lock_s *)(v9 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
  uint64_t v11 = *(void *)(v9 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v10);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 176))(__dst, ObjectType, v11);
  swift_unknownObjectRelease();
  char v13 = outlined release of DateComponents((uint64_t)__src);
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v14;
  result.is_nil = v13;
  return result;
}

id @objc _NSSwiftCalendar.date(era:year:month:day:hour:minute:second:nanosecond:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(double *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v17 = a1;
  a11(&v20, a3, a4, a5, a6, a7, a8, a9, a10);

  if ((v21 & 1) != 0) {
    id v18 = 0LL;
  }
  else {
    id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v20);
  }
  return v18;
}

Swift::Bool __swiftcall _NSSwiftCalendar.isDate(_:equalTo:toUnitGranularity:)( Foundation::Date _, Foundation::Date equalTo, NSCalendarUnit toUnitGranularity)
{
  uint64_t v5 = *(void *)toUnitGranularity;
  _fromNSCalendarUnit(_:)(v3, (char *)&v12);
  uint64_t v7 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  *(_OWORD *)&_a[0]._time = *(_OWORD *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  __int128 v12 = *(_OWORD *)&_a[0]._time;
  uint64_t v11 = v5;
  NSComparisonResult v9 = Calendar.compare(_:to:toGranularity:)(_a[0], v8, (Foundation::Calendar::Component)&v11);
  swift_unknownObjectRelease();
  return v9 == NSOrderedSame;
}

Swift::Bool __swiftcall _NSSwiftCalendar.isDate(_:inSameDayAs:)(Foundation::Date _, Foundation::Date inSameDayAs)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
  *(_OWORD *)&_a[0]._time = *(_OWORD *)(v5 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
  __int128 v11 = *(_OWORD *)&_a[0]._time;
  uint64_t v10 = v4;
  NSComparisonResult v7 = Calendar.compare(_:to:toGranularity:)(_a[0], v6, (Foundation::Calendar::Component)&v10);
  swift_unknownObjectRelease();
  return v7 == NSOrderedSame;
}

uint64_t @objc _NSSwiftCalendar.isDateInYesterday(_:)( void *a1, int a2, id a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v9 = v6;
  id v7 = a1;
  LOBYTE(a4) = _NSSwiftCalendar.isDateInToday(_:)(&v9, a4);

  return a4 & 1;
}

uint64_t _NSSwiftCalendar.isDateInToday(_:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
  __int128 v7 = *(_OWORD *)(v5 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
  __int128 v9 = v7;
  uint64_t v8 = v4;
  LOBYTE(a2) = a2(&v8);
  swift_unknownObjectRelease();
  return a2 & 1;
}

id _NSSwiftCalendar.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _NSSwiftCalendar()
{
  return objc_opt_self();
}

id specialized static NSCalendar._autoupdatingCurrent.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static CalendarCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v0, (uint64_t *)&v9);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  objc_super v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  __int128 v7 = v9;
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  uint64_t v5 = *MEMORY[0x1896039C8];
  v8.receiver = v3;
  v8.super_class = v2;
  id result = objc_msgSendSuper2(&v8, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result) {
    __break(1u);
  }
  return result;
}

id specialized static NSCalendar._current.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v8);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  __int128 v6 = v8;
  objc_super v2 = (char *)objc_allocWithZone(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 32) = 0;
  *(_OWORD *)(v3 + 16) = v6;
  *(void *)&v2[OBJC_IVAR____NSSwiftCalendar__lock] = v3;
  uint64_t v4 = *MEMORY[0x1896039C8];
  v7.receiver = v2;
  v7.super_class = v1;
  id result = objc_msgSendSuper2(&v7, sel_initWithCheckedCalendarIdentifier_, v4);
  if (!result) {
    __break(1u);
  }
  return result;
}

id specialized static NSCalendar._newCalendarWithIdentifier(_:)(void *a1)
{
  objc_super v2 = (void *)*MEMORY[0x189604F90];
  if (*MEMORY[0x189604F90]
    && (type metadata accessor for CFStringRef(0LL),
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  v3 = a1,  v4 = v2,  char v5 = static _CFObject.== infix(_:_:)(),  v3,  v4,  (v5 & 1) != 0))
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    objc_super v7 = (void *)*MEMORY[0x189604DF0];
    if (*MEMORY[0x189604DF0]
      && (type metadata accessor for CFStringRef(0LL),
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v8 = a1,  v9 = v7,  v10 = static _CFObject.== infix(_:_:)(),  v8,  v9,  (v10 & 1) != 0))
    {
      uint64_t v6 = 1LL;
    }

    else
    {
      __int128 v11 = (void *)*MEMORY[0x189604E38];
      if (*MEMORY[0x189604E38]
        && (type metadata accessor for CFStringRef(0LL),
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v12 = a1,  v13 = v11,  v14 = static _CFObject.== infix(_:_:)(),  v12,  v13,  (v14 & 1) != 0))
      {
        uint64_t v6 = 2LL;
      }

      else
      {
        BOOL v15 = (void *)*MEMORY[0x189604F98];
        if (*MEMORY[0x189604F98]
          && (type metadata accessor for CFStringRef(0LL),
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v16 = a1,  v17 = v15,  v18 = static _CFObject.== infix(_:_:)(),  v16,  v17,  (v18 & 1) != 0))
        {
          uint64_t v6 = 6LL;
        }

        else
        {
          double v19 = (void *)*MEMORY[0x189604FB0];
          if (*MEMORY[0x189604FB0]
            && (type metadata accessor for CFStringRef(0LL),
                lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v20 = a1,  v21 = v19,  v22 = static _CFObject.== infix(_:_:)(),  v20,  v21,  (v22 & 1) != 0))
          {
            uint64_t v6 = 9LL;
          }

          else
          {
            __int128 v23 = (void *)*MEMORY[0x189604FB8];
            if (*MEMORY[0x189604FB8]
              && (type metadata accessor for CFStringRef(0LL),
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v24 = a1,  v25 = v23,  v26 = static _CFObject.== infix(_:_:)(),  v24,  v25,  (v26 & 1) != 0))
            {
              uint64_t v6 = 10LL;
            }

            else
            {
              Swift::Int_optional v27 = (void *)*MEMORY[0x189604FD0];
              if (*MEMORY[0x189604FD0]
                && (type metadata accessor for CFStringRef(0LL),
                    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v28 = a1,  v29 = v27,  v30 = static _CFObject.== infix(_:_:)(),  v28,  v29,  (v30 & 1) != 0))
              {
                uint64_t v6 = 11LL;
              }

              else
              {
                __int128 v31 = (void *)*MEMORY[0x1896051A0];
                if (*MEMORY[0x1896051A0]
                  && (type metadata accessor for CFStringRef(0LL),
                      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v32 = a1,  v33 = v31,  v34 = static _CFObject.== infix(_:_:)(),  v32,  v33,  (v34 & 1) != 0))
                {
                  uint64_t v6 = 13LL;
                }

                else
                {
                  uint64_t v35 = (void *)*MEMORY[0x189605168];
                  if (*MEMORY[0x189605168]
                    && (type metadata accessor for CFStringRef(0LL),
                        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v36 = a1,  v37 = v35,  v38 = static _CFObject.== infix(_:_:)(),  v36,  v37,  (v38 & 1) != 0))
                  {
                    uint64_t v6 = 12LL;
                  }

                  else
                  {
                    uint64_t v39 = (void *)*MEMORY[0x189604FA8];
                    if (*MEMORY[0x189604FA8]
                      && (type metadata accessor for CFStringRef(0LL),
                          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  v40 = a1,  id v41 = v39,  v42 = static _CFObject.== infix(_:_:)(),  v40,  v41,  (v42 & 1) != 0))
                    {
                      uint64_t v6 = 8LL;
                    }

                    else
                    {
                      uint64_t v43 = (void *)*MEMORY[0x189604FA0];
                      if (*MEMORY[0x189604FA0]
                        && (type metadata accessor for CFStringRef(0LL),
                            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v44 = a1,  v45 = v43,  v46 = static _CFObject.== infix(_:_:)(),  v44,  v45,  (v46 & 1) != 0))
                      {
                        uint64_t v6 = 7LL;
                      }

                      else
                      {
                        id v47 = (void *)*MEMORY[0x189604FC0];
                        if (*MEMORY[0x189604FC0]
                          && (type metadata accessor for CFStringRef(0LL),
                              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v48 = a1,  v49 = v47,  v50 = static _CFObject.== infix(_:_:)(),  v48,  v49,  (v50 & 1) != 0))
                        {
                          uint64_t v6 = 14LL;
                        }

                        else
                        {
                          uint64_t v51 = (void *)*MEMORY[0x189604FC8];
                          if (*MEMORY[0x189604FC8]
                            && (type metadata accessor for CFStringRef(0LL),
                                lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v52 = a1,  v53 = v51,  v54 = static _CFObject.== infix(_:_:)(),  v52,  v53,  (v54 & 1) != 0))
                          {
                            uint64_t v6 = 15LL;
                          }

                          else
                          {
                            v55 = (void *)*MEMORY[0x189604E20];
                            if (*MEMORY[0x189604E20]
                              && (type metadata accessor for CFStringRef(0LL),
                                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v56 = a1,  v57 = v55,  v58 = static _CFObject.== infix(_:_:)(),  v56,  v57,  (v58 & 1) != 0))
                            {
                              uint64_t v6 = 3LL;
                            }

                            else
                            {
                              uint64_t v59 = (void *)*MEMORY[0x189604E30];
                              if (*MEMORY[0x189604E30]
                                && (type metadata accessor for CFStringRef(0LL),
                                    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef),  id v60 = a1,  v61 = v59,  v62 = static _CFObject.== infix(_:_:)(),  v60,  v61,  (v62 & 1) != 0))
                              {
                                uint64_t v6 = 4LL;
                              }

                              else
                              {
                                id result = 0LL;
                                id v64 = (void *)*MEMORY[0x189604E28];
                                if (!*MEMORY[0x189604E28]) {
                                  return result;
                                }
                                type metadata accessor for CFStringRef(0LL);
                                lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef);
                                id v65 = a1;
                                id v66 = v64;
                                char v67 = static _CFObject.== infix(_:_:)();

                                id result = 0LL;
                                if ((v67 & 1) == 0) {
                                  return result;
                                }
                                uint64_t v6 = 5LL;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v68 = static CalendarCache.cache + 16;
  unsigned int v69 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v69);
  closure #1 in CalendarCache.fixed(_:)(v68, v6, &v76);
  os_unfair_lock_unlock(v69);
  swift_release_n();
  id v70 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  __int128 v74 = v76;
  id v71 = (char *)objc_allocWithZone(v70);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v72 = swift_allocObject();
  *(_DWORD *)(v72 + 32) = 0;
  *(_OWORD *)(v72 + 16) = v74;
  *(void *)&v71[OBJC_IVAR____NSSwiftCalendar__lock] = v72;
  uint64_t v73 = *MEMORY[0x1896039C8];
  v75.receiver = v71;
  v75.super_class = v70;
  return objc_msgSendSuper2(&v75, sel_initWithCheckedCalendarIdentifier_, v73);
}

uint64_t specialized _NSSwiftCalendar.calendarIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftCalendar__lock);
  objc_super v2 = (os_unfair_lock_s *)(v1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  uint64_t v3 = *(void *)(v1 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v2);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 24))(&v6, ObjectType, v3);
  swift_unknownObjectRelease();
  return specialized static Calendar._toNSCalendarIdentifier(_:)((char *)&v6);
}

void specialized _NSSwiftCalendar._enumerateDatesStarting(after:matching:options:using:)( double *a1, const void *a2, __int16 a3, uint64_t a4, void *aBlock)
{
  char v6 = a3;
  double v8 = *a1;
  if ((a3 & 2) != 0) {
    char v9 = 3;
  }
  else {
    char v9 = 0;
  }
  if ((a3 & 0x100) != 0) {
    char v10 = 2;
  }
  else {
    char v10 = v9;
  }
  if ((a3 & 0x200) != 0) {
    char v11 = 1;
  }
  else {
    char v11 = v10;
  }
  if ((a3 & 0x400) != 0) {
    unsigned __int8 v12 = 0;
  }
  else {
    unsigned __int8 v12 = v11;
  }
  BOOL v13 = (a3 & 0x3000) == 0x2000LL;
  uint64_t v14 = *(void *)(a4 + OBJC_IVAR____NSSwiftCalendar__lock);
  _Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 32));
  __int128 v15 = *(_OWORD *)(v14 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 32));
  __int128 v21 = v15;
  double v20 = v8;
  memcpy(__dst, a2, 0x11AuLL);
  unsigned __int8 v18 = v12;
  BOOL v17 = v13;
  BOOL v16 = (v6 & 4) != 0;
  _Block_copy(aBlock);
  specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)( &v20,  __dst,  &v18,  (unsigned __int8 *)&v17,  (unsigned __int8 *)&v16,  (uint64_t *)&v21,  (void (**)(void, void, void, void))aBlock);
  _Block_release(aBlock);
  swift_unknownObjectRelease();
  _Block_release(aBlock);
}

uint64_t partial apply for closure #1 in _NSSwiftCalendar.minimumDaysInFirstWeek.setter(uint64_t *a1)
{
  return closure #1 in _NSSwiftCalendar.minimumDaysInFirstWeek.setter(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in _NSSwiftCalendar.firstWeekday.setter(uint64_t *a1)
{
  return closure #1 in _NSSwiftCalendar.firstWeekday.setter(a1, *(void *)(v1 + 16));
}

void partial apply for closure #1 in _NSSwiftCalendar.timeZone.setter(uint64_t a1)
{
}

void *partial apply for closure #1 in _NSSwiftCalendar.locale.setter()
{
  __int128 v2 = *(_OWORD *)(v0 + 16);
  swift_unknownObjectRetain();
  return Calendar.locale.setter((uint64_t *)&v2);
}

uint64_t partial apply for closure #1 in _NSSwiftCalendar.init(coder:)(uint64_t *a1)
{
  return closure #1 in _NSSwiftCalendar.init(coder:)( a1,  *(_BYTE *)(v1 + 16),  *(void **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(_BYTE *)(v1 + 56),  *(void *)(v1 + 64),  *(_BYTE *)(v1 + 72),  *(void **)(v1 + 80));
}

void *AttributedString.UnicodeScalarView.index(after:)@<X0>( void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *result >> 10;
  unint64_t v5 = v2[5] >> 10;
  if (v4 >= v2[1] >> 10 && v5 >= v4)
  {
    uint64_t v7 = *v2;
    __int128 v8 = *(_OWORD *)(*v2 + 32LL);
    v16[3] = *(_OWORD *)(*v2 + 16LL);
    v16[4] = v8;
    v16[5] = *(_OWORD *)(v7 + 48);
    BigString.unicodeScalars.getter();
    unint64_t v9 = BigString.UnicodeScalarView.index(after:)();
    unint64_t v11 = v10;
    unint64_t v13 = v12;
    unint64_t v15 = v14;
    id result = (void *)outlined release of Locale((uint64_t)v16);
    if (v5 >= v9 >> 10)
    {
      *a2 = v9;
      a2[1] = v11;
      a2[2] = v13;
      a2[3] = v15;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedString.UnicodeScalarView.index(before:)@<X0>( void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *result >> 10;
  unint64_t v5 = v2[1] >> 10;
  if (v4 >= v5 && v2[5] >> 10 >= v4)
  {
    uint64_t v7 = *v2;
    __int128 v8 = *(_OWORD *)(*v2 + 32LL);
    v16[3] = *(_OWORD *)(*v2 + 16LL);
    v16[4] = v8;
    v16[5] = *(_OWORD *)(v7 + 48);
    BigString.unicodeScalars.getter();
    unint64_t v9 = BigString.UnicodeScalarView.index(before:)();
    unint64_t v11 = v10;
    unint64_t v13 = v12;
    unint64_t v15 = v14;
    id result = (void *)outlined release of Locale((uint64_t)v16);
    if (v5 <= v9 >> 10)
    {
      *a2 = v9;
      a2[1] = v11;
      a2[2] = v13;
      a2[3] = v15;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *AttributedString.UnicodeScalarView.index(_:offsetBy:)@<X0>( void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *result >> 10;
  unint64_t v5 = v2[1] >> 10;
  unint64_t v6 = v2[5] >> 10;
  if (v4 >= v5 && v6 >= v4)
  {
    uint64_t v8 = *v2;
    __int128 v9 = *(_OWORD *)(*v2 + 32LL);
    v18[3] = *(_OWORD *)(*v2 + 16LL);
    v18[4] = v9;
    v18[5] = *(_OWORD *)(v8 + 48);
    BigString.unicodeScalars.getter();
    unint64_t v10 = BigString.UnicodeScalarView.index(_:offsetBy:)();
    unint64_t v12 = v11;
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    id result = (void *)outlined release of Locale((uint64_t)v18);
    if (v10 >> 10 >= v5 && v6 >= v10 >> 10)
    {
      *a2 = v10;
      a2[1] = v12;
      a2[2] = v14;
      a2[3] = v16;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_5:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    void v15[2] = v17[2];
    v15[3] = v18;
    uint64_t v16 = v19;
    v15[0] = v17[0];
    v15[1] = v17[1];
    unint64_t v11 = v18;
    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
    if (v11 >= 2)
    {
      swift_release();
      return 1LL;
    }
  }

  int64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v12 >= v6) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v12);
  ++v8;
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 1;
  if (v12 + 1 >= v6) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 2;
  if (v12 + 2 >= v6) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 3;
  if (v12 + 3 >= v6) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release();
    return 0LL;
  }

  unint64_t v13 = *(void *)(v2 + 8 * v14);
  int64_t v8 = v14;
  if (v13)
  {
LABEL_21:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_5;
  }

  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

uint64_t AttributedString.UnicodeScalarView.init()@<X0>(uint64_t a1@<X8>)
{
  v22[0] = 0LL;
  MEMORY[0x186E20E78](v22, 8LL);
  uint64_t v2 = v22[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v3 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    *(_OWORD *)(v3 + 16) = v18;
    *(_OWORD *)(v3 + 32) = v19;
    *(_OWORD *)(v3 + 48) = v20;
    *(void *)(v3 + 64) = 0LL;
    *(void *)(v3 + 72) = 0LL;
    *(void *)(v3 + 80) = 0LL;
    *(void *)(v3 + 88) = v2;
    uint64_t v5 = BigString.startIndex.getter();
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v12 = BigString.endIndex.getter();
    uint64_t v27 = v5;
    uint64_t v28 = v7;
    uint64_t v29 = v9;
    uint64_t v30 = v11;
    uint64_t v31 = v12;
    uint64_t v32 = v13;
    uint64_t v33 = v14;
    uint64_t v34 = v15;
    BigString.unicodeScalars.getter();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v21);
    outlined release of Locale((uint64_t)v22);
    uint64_t result = swift_release();
    *(void *)a1 = v3;
    __int128 v16 = v24;
    *(_OWORD *)(a1 + 8) = v23;
    *(_OWORD *)(a1 + 24) = v16;
    __int128 v17 = v26;
    *(_OWORD *)(a1 + 40) = v25;
    *(_OWORD *)(a1 + 56) = v17;
    *(void *)(a1 + 72) = 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

double AttributedString.unicodeScalars.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  __int128 v4 = *(_OWORD *)(*v1 + 32);
  __int128 v28 = *(_OWORD *)(*v1 + 16);
  __int128 v29 = v4;
  __int128 v30 = *(_OWORD *)(v3 + 48);
  uint64_t v20 = BigString.startIndex.getter();
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = BigString.endIndex.getter();
  uint64_t v25 = v8;
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v14);
  outlined release of Locale((uint64_t)v15);
  swift_release();
  *(void *)a1 = v3;
  __int128 v11 = v17;
  *(_OWORD *)(a1 + 8) = v16;
  *(_OWORD *)(a1 + 24) = v11;
  double result = *(double *)&v18;
  __int128 v13 = v19;
  *(_OWORD *)(a1 + 40) = v18;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

double key path getter for AttributedString.unicodeScalars : AttributedString@<D0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  __int128 v4 = *(_OWORD *)(*a1 + 32);
  __int128 v28 = *(_OWORD *)(*a1 + 16);
  __int128 v29 = v4;
  __int128 v30 = *(_OWORD *)(v3 + 48);
  uint64_t v20 = BigString.startIndex.getter();
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = BigString.endIndex.getter();
  uint64_t v25 = v8;
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v14);
  outlined release of Locale((uint64_t)v15);
  swift_release();
  *(void *)a2 = v3;
  __int128 v11 = v17;
  *(_OWORD *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 24) = v11;
  double result = *(double *)&v18;
  __int128 v13 = v19;
  *(_OWORD *)(a2 + 40) = v18;
  *(_OWORD *)(a2 + 56) = v13;
  *(void *)(a2 + 72) = 0LL;
  return result;
}

uint64_t key path setter for AttributedString.unicodeScalars : AttributedString(uint64_t *a1)
{
  uint64_t v1 = a1[9];
  uint64_t v3 = *a1;
  __int128 v4 = *(_OWORD *)(a1 + 1);
  __int128 v5 = *(_OWORD *)(a1 + 3);
  __int128 v6 = *(_OWORD *)(a1 + 5);
  __int128 v7 = *(_OWORD *)(a1 + 7);
  uint64_t v8 = v1;
  swift_retain();
  return AttributedString.unicodeScalars.setter(&v3);
}

uint64_t AttributedString.unicodeScalars.setter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v51 = a1[2];
  uint64_t v52 = a1[1];
  uint64_t v49 = a1[4];
  uint64_t v50 = a1[3];
  uint64_t v47 = a1[6];
  uint64_t v48 = a1[5];
  uint64_t v54 = a1[7];
  v55 = (_OWORD *)*a1;
  uint64_t v53 = a1[8];
  __int128 v3 = *(_OWORD *)(*(void *)v1 + 16LL);
  __int128 v4 = *(_OWORD *)(*(void *)v1 + 48LL);
  v97[4] = *(_OWORD *)(*(void *)v1 + 32LL);
  v97[5] = v4;
  v97[3] = v3;
  unint64_t v56 = BigString.startIndex.getter();
  unint64_t v58 = BigString.endIndex.getter();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v5 = *(void **)v1;
    __int128 v6 = *(_OWORD *)(*(void *)v1 + 16LL);
    __int128 v7 = *(_OWORD *)(*(void *)v1 + 48LL);
    v97[1] = *(_OWORD *)(*(void *)v1 + 32LL);
    v97[2] = v7;
    v97[0] = v6;
    uint64_t v8 = v5[8];
    uint64_t v9 = v5[9];
    uint64_t v10 = v5[10];
    uint64_t v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v97);
    swift_unknownObjectRetain();
    *(void *)uint64_t v2 = AttributedString.Guts.init(string:runs:)(v97, v8, v9, v10, v11);
    swift_release();
  }

  uint64_t v12 = *(_OWORD **)v2;
  __int128 v13 = *(_OWORD *)(*(void *)v2 + 32LL);
  __int128 v94 = *(_OWORD *)(*(void *)v2 + 16LL);
  __int128 v95 = v13;
  __int128 v96 = v12[3];
  uint64_t v86 = BigString.startIndex.getter();
  uint64_t v87 = v14;
  uint64_t v88 = v15;
  uint64_t v89 = v16;
  uint64_t v90 = BigString.endIndex.getter();
  uint64_t v91 = v17;
  uint64_t v92 = v18;
  uint64_t v93 = v19;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v61);
  outlined release of Locale((uint64_t)v62);
  swift_release();
  unint64_t v20 = v63;
  unint64_t v21 = v64;
  uint64_t v59 = v12;
  if (one-time initialization token for currentIdentity != -1) {
    swift_once();
  }
  uint64_t v22 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  uint64_t v23 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v23);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v22, (uint64_t *)v71);
  os_unfair_lock_unlock(v23);
  swift_release();
  uint64_t v24 = *(void *)&v71[0];
  uint64_t v60 = *(void *)&v71[0];
  BigString.init()();
  *(void *)&v71[0] = 0LL;
  MEMORY[0x186E20E78](v71, 8LL);
  uint64_t v25 = *(void *)&v71[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v26 = swift_allocObject();
  if ((BigString.isEmpty.getter() & 1) == 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  __int128 v27 = v66;
  *(_OWORD *)(v26 + 16) = v65;
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = v67;
  *(void *)(v26 + 64) = 0LL;
  *(void *)(v26 + 72) = 0LL;
  *(void *)(v26 + 80) = 0LL;
  *(void *)(v26 + 88) = v25;
  *(void *)uint64_t v2 = v26;
  swift_release();
  if (v56 >> 10 < v20 >> 10 || v21 >> 10 < v58 >> 10) {
    goto LABEL_11;
  }
  __int128 v28 = v12 + 1;
  __int128 v29 = v12[2];
  __int128 v83 = v12[1];
  __int128 v84 = v29;
  __int128 v85 = v12[3];
  BigString.unicodeScalars.getter();
  uint64_t v30 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v32 = v31;
  uint64_t v57 = v24;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  outlined release of Locale((uint64_t)v68);
  __int128 v37 = v28[1];
  __int128 v80 = *v28;
  __int128 v81 = v37;
  __int128 v82 = v28[2];
  BigString.unicodeScalars.getter();
  uint64_t v38 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  outlined release of Locale((uint64_t)v69);
  v70[0] = v30;
  v70[1] = v32;
  v70[2] = v34;
  v70[3] = v36;
  v70[4] = v38;
  v70[5] = v40;
  v70[6] = v42;
  v70[7] = v44;
  __int128 v45 = v55[2];
  v71[0] = v55[1];
  v71[1] = v45;
  v71[2] = v55[3];
  uint64_t v72 = v52;
  uint64_t v73 = v51;
  uint64_t v74 = v50;
  uint64_t v75 = v49;
  uint64_t v76 = v48;
  uint64_t v77 = v47;
  uint64_t v78 = v54;
  uint64_t v79 = v53;
  swift_unknownObjectRetain();
  swift_retain();
  specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v70, (uint64_t)v71);
  swift_unknownObjectRelease();
  swift_release();
  if (v60 == v57)
  {
    *(void *)uint64_t v2 = v59;
    swift_release();
    return swift_release();
  }

uint64_t AttributedString.unicodeScalars.modify(void *a1)
{
  uint64_t v2 = v1;
  __int128 v4 = (char *)malloc(0x1D8uLL);
  *a1 = v4;
  *((void *)v4 + 57) = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v5 = (void *)*v2;
    __int128 v7 = *(_OWORD *)(*v2 + 32);
    __int128 v6 = *(_OWORD *)(*v2 + 48);
    *((_OWORD *)v4 + 19) = *(_OWORD *)(*v2 + 16);
    *((_OWORD *)v4 + 20) = v7;
    *((_OWORD *)v4 + 21) = v6;
    uint64_t v8 = v5[8];
    uint64_t v9 = v5[9];
    uint64_t v11 = v5[10];
    uint64_t v10 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)(v4 + 304));
    swift_unknownObjectRetain();
    *uint64_t v2 = AttributedString.Guts.init(string:runs:)((_OWORD *)v4 + 19, v8, v9, v11, v10);
    swift_release();
  }

  uint64_t v35 = v2;
  uint64_t v12 = *v2;
  __int128 v14 = *(_OWORD *)(*v2 + 32);
  __int128 v13 = *(_OWORD *)(*v2 + 48);
  *((_OWORD *)v4 + 25) = *(_OWORD *)(*v2 + 16);
  *((_OWORD *)v4 + 26) = v14;
  *((_OWORD *)v4 + 27) = v13;
  uint64_t v15 = BigString.startIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = BigString.endIndex.getter();
  *((void *)v4 + 24) = v15;
  *((void *)v4 + 25) = v17;
  *((void *)v4 + 26) = v19;
  *((void *)v4 + 27) = v21;
  *((void *)v4 + 28) = v22;
  *((void *)v4 + 29) = v23;
  *((void *)v4 + 30) = v24;
  *((void *)v4 + 31) = v25;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)(v4 + 352));
  outlined release of Locale((uint64_t)v4);
  swift_release();
  *((void *)v4 + 14) = v12;
  __int128 v26 = *((_OWORD *)v4 + 4);
  *(_OWORD *)(v4 + 120) = *((_OWORD *)v4 + 3);
  *(_OWORD *)(v4 + 136) = v26;
  __int128 v27 = *((_OWORD *)v4 + 6);
  *(_OWORD *)(v4 + 152) = *((_OWORD *)v4 + 5);
  *(_OWORD *)(v4 + 168) = v27;
  if (one-time initialization token for currentIdentity != -1) {
    swift_once();
  }
  __int128 v28 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  __int128 v29 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v29);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v28, &v36);
  os_unfair_lock_unlock(v29);
  swift_release();
  uint64_t v30 = v36;
  *((void *)v4 + 58) = v36;
  *((void *)v4 + 23) = v30;
  BigString.init()();
  *((void *)v4 + 56) = 0LL;
  MEMORY[0x186E20E78](v4 + 448, 8LL);
  uint64_t v31 = *((void *)v4 + 56);
  type metadata accessor for AttributedString.Guts();
  uint64_t v32 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __int128 v34 = *((_OWORD *)v4 + 17);
    *(_OWORD *)(v32 + 16) = *((_OWORD *)v4 + 16);
    *(_OWORD *)(v32 + 32) = v34;
    *(_OWORD *)(v32 + 48) = *((_OWORD *)v4 + 18);
    *(void *)(v32 + 64) = 0LL;
    *(void *)(v32 + 72) = 0LL;
    *(void *)(v32 + 80) = 0LL;
    *(void *)(v32 + 88) = v31;
    *uint64_t v35 = v32;
    swift_release();
    return (uint64_t)AttributedString.unicodeScalars.modify;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void AttributedString.unicodeScalars.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*(void *)(*a1 + 184) == *(void *)(*a1 + 464))
  {
    **(void **)(v1 + 456) = *(void *)(v1 + 112);
    swift_retain();
    swift_release();
    swift_release();
    free((void *)v1);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void *AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)( void *result, __int128 *a2, ValueMetadata *a3)
{
  if (*result >> 10 < v3[1] >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (v3[5] >> 10 < result[4] >> 10)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  __int128 v5 = (_OWORD *)*v3;
  __int128 v6 = *(_OWORD *)(*v3 + 32LL);
  v59[17] = *(_OWORD *)(*v3 + 16LL);
  v59[18] = v6;
  v59[19] = v5[3];
  BigString.unicodeScalars.getter();
  uint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v44);
  __int128 v14 = v5[2];
  v59[14] = v5[1];
  v59[15] = v14;
  v59[16] = v5[3];
  BigString.unicodeScalars.getter();
  uint64_t v15 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v45);
  *(void *)&__int128 v52 = v7;
  *((void *)&v52 + 1) = v9;
  uint64_t v53 = v11;
  uint64_t v54 = v13;
  uint64_t v55 = v15;
  uint64_t v56 = v17;
  uint64_t v57 = v19;
  uint64_t v58 = v21;
  if (a3 == &type metadata for AttributedString.UnicodeScalarView)
  {
    uint64_t v22 = *(void *)a2;
    __int128 v23 = *(_OWORD *)(*(void *)a2 + 32LL);
    __int128 v35 = *(_OWORD *)(*(void *)a2 + 16LL);
    __int128 v36 = v23;
    __int128 v24 = *(__int128 *)((char *)a2 + 8);
    __int128 v37 = *(_OWORD *)(v22 + 48);
    __int128 v38 = v24;
    __int128 v25 = *(__int128 *)((char *)a2 + 40);
    __int128 v39 = *(__int128 *)((char *)a2 + 24);
    __int128 v40 = v25;
    __int128 v41 = *(__int128 *)((char *)a2 + 56);
    swift_unknownObjectRetain();
    swift_retain();
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)&v52, (uint64_t)&v35);
    swift_unknownObjectRelease();
    return (void *)swift_release();
  }

  else if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>) == a3)
  {
    __int128 v26 = a2[3];
    __int128 v37 = a2[2];
    __int128 v38 = v26;
    __int128 v27 = a2[8];
    __int128 v28 = a2[6];
    __int128 v42 = a2[7];
    __int128 v43 = v27;
    __int128 v29 = a2[5];
    __int128 v39 = a2[4];
    __int128 v40 = v29;
    __int128 v41 = v28;
    __int128 v30 = a2[1];
    __int128 v35 = *a2;
    __int128 v36 = v30;
    v59[7] = v35;
    v59[8] = v30;
    v59[9] = v37;
    v59[10] = v38;
    uint64_t v31 = (_OWORD *)v39;
    __int128 v32 = *(_OWORD *)(v39 + 32);
    v59[11] = *(_OWORD *)(v39 + 16);
    v59[12] = v32;
    v59[13] = *(_OWORD *)(v39 + 48);
    BigString.unicodeScalars.getter();
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v46);
    outlined release of Locale((uint64_t)v47);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    __int128 v33 = v31[2];
    v59[0] = v31[1];
    v59[1] = v33;
    v59[2] = v31[3];
    v59[3] = v48;
    v59[4] = v49;
    v59[5] = v50;
    v59[6] = v51;
    swift_unknownObjectRetain();
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)&v52, (uint64_t)v59);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    return (void *)swift_unknownObjectRelease();
  }

  else
  {
    return (void *)AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(&v52, a2, (uint64_t)a3);
  }

__n128 AttributedString.UnicodeScalarView.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  __int128 v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedString.UnicodeScalarView.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 40);
  __int128 v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.UnicodeScalarView._count.getter()
{
  uint64_t v0 = BigSubstring.UnicodeScalarView.distance(from:to:)();
  swift_unknownObjectRelease();
  return v0;
}

void *AttributedString.UnicodeScalarView._index(_:offsetBy:limitedBy:)@<X0>( void *result@<X0>, void *a2@<X2>, unint64_t *a3@<X8>)
{
  unint64_t v5 = *result >> 10;
  unint64_t v6 = v3[1] >> 10;
  unint64_t v7 = v3[5] >> 10;
  unint64_t v8 = *a2 >> 10;
  if (v7 < v8 || v8 < v6 || v5 < v6 || v7 < v5)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }

  uint64_t v12 = *v3;
  __int128 v13 = *(_OWORD *)(*v3 + 32LL);
  __int128 v22 = *(_OWORD *)(*v3 + 16LL);
  __int128 v23 = v13;
  __int128 v24 = *(_OWORD *)(v12 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v14 = BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)();
  unint64_t v16 = v15;
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  __n128 result = (void *)outlined release of Locale((uint64_t)v21);
  if (v20 == 2)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
    a3[3] = 2LL;
    return result;
  }

  if (v14 >> 10 < v6 || v7 < v14 >> 10) {
    goto LABEL_18;
  }
  *a3 = v14;
  a3[1] = v16;
  a3[2] = v18;
  a3[3] = v20;
  return result;
}

void *AttributedString.UnicodeScalarView._distance(from:to:)(void *result, void *a2)
{
  unint64_t v3 = *result >> 10;
  unint64_t v4 = v2[1] >> 10;
  unint64_t v5 = v2[5] >> 10;
  unint64_t v6 = *a2 >> 10;
  if (v5 >= v6 && v6 >= v4 && v3 >= v4 && v5 >= v3)
  {
    uint64_t v10 = *v2;
    __int128 v11 = *(_OWORD *)(*v2 + 32LL);
    v13[3] = *(_OWORD *)(*v2 + 16LL);
    v13[4] = v11;
    v13[5] = *(_OWORD *)(v10 + 48);
    BigString.unicodeScalars.getter();
    uint64_t v12 = BigString.UnicodeScalarView.distance(from:to:)();
    outlined release of Locale((uint64_t)v13);
    return (void *)v12;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *AttributedString.UnicodeScalarView.subscript.getter(void *result)
{
  unint64_t v2 = *result >> 10;
  if (v2 < v1[1] >> 10 || v2 >= v1[5] >> 10)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = *v1;
    __int128 v5 = *(_OWORD *)(*v1 + 32LL);
    v7[3] = *(_OWORD *)(*v1 + 16LL);
    v7[4] = v5;
    _OWORD v7[5] = *(_OWORD *)(v4 + 48);
    BigString.unicodeScalars.getter();
    uint64_t v6 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v7);
    return (void *)v6;
  }

  return result;
}

__int128 *AttributedString.UnicodeScalarView.subscript.getter@<X0>(__int128 *result@<X0>, void *a2@<X8>)
{
  __int128 v5 = (_OWORD *)*v2;
  unint64_t v4 = v2[1];
  unint64_t v6 = v2[5];
  __int128 v7 = result[1];
  __int128 v30 = *result;
  __int128 v31 = v7;
  __int128 v8 = result[3];
  __int128 v32 = result[2];
  __int128 v33 = v8;
  unint64_t v9 = v6 >> 10;
  if ((unint64_t)v30 >> 10 >= v4 >> 10 && v9 >= (unint64_t)v32 >> 10)
  {
    __int128 v11 = v5[2];
    __int128 v34 = v5[1];
    __int128 v35 = v11;
    __int128 v36 = v5[3];
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)&v20);
    __n128 result = (__int128 *)outlined release of Locale((uint64_t)v21);
    uint64_t v12 = v22;
    uint64_t v13 = v23;
    uint64_t v14 = v24;
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    uint64_t v17 = v27;
    uint64_t v18 = v28;
    uint64_t v19 = v29;
    a2[8] = v5;
    a2[9] = v12;
    a2[10] = v13;
    a2[11] = v14;
    a2[12] = v15;
    a2[13] = v16;
    a2[14] = v17;
    a2[15] = v18;
    a2[16] = v19;
    a2[17] = 0LL;
    *a2 = v12;
    a2[1] = v13;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v16;
    a2[5] = v17;
    a2[6] = v18;
    a2[7] = v19;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.UnicodeScalarView( unint64_t *result)
{
  unint64_t v2 = *result >> 10;
  unint64_t v3 = v1[1] >> 10;
  if (v2 >= v3 && v1[5] >> 10 >= v2)
  {
    __int128 v5 = result;
    uint64_t v6 = *v1;
    __int128 v7 = *(_OWORD *)(*v1 + 32LL);
    v15[3] = *(_OWORD *)(*v1 + 16LL);
    _OWORD v15[4] = v7;
    v15[5] = *(_OWORD *)(v6 + 48);
    BigString.unicodeScalars.getter();
    unint64_t v8 = BigString.UnicodeScalarView.index(before:)();
    unint64_t v10 = v9;
    unint64_t v12 = v11;
    unint64_t v14 = v13;
    __n128 result = (unint64_t *)outlined release of Locale((uint64_t)v15);
    if (v3 <= v8 >> 10)
    {
      *__int128 v5 = v8;
      v5[1] = v10;
      v5[2] = v12;
      v5[3] = v14;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

__n128 protocol witness for Collection.startIndex.getter in conformance AttributedString.UnicodeScalarView@<Q0>( uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  __int128 v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 protocol witness for Collection.endIndex.getter in conformance AttributedString.UnicodeScalarView@<Q0>( uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 40);
  __int128 v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.UnicodeScalarView( void (**a1)(void **a1), void *a2))(void **a1)
{
  __n128 result = (void (*)(void **))malloc(0x64uLL);
  *a1 = result;
  unint64_t v6 = *a2 >> 10;
  if (v6 < v2[1] >> 10 || v6 >= v2[5] >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t v8 = result;
    uint64_t v9 = (uint64_t)result + 48;
    __int128 v11 = *(_OWORD *)(*v2 + 32LL);
    __int128 v10 = *(_OWORD *)(*v2 + 48LL);
    *(_OWORD *)__n128 result = *(_OWORD *)(*v2 + 16LL);
    *((_OWORD *)result + 1) = v11;
    *((_OWORD *)result + 2) = v10;
    BigString.unicodeScalars.getter();
    int v12 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale(v9);
    *((_DWORD *)v8 + 24) = v12;
    return protocol witness for Collection.subscript.read in conformance AttributedString.UnicodeScalarView;
  }

  return result;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.UnicodeScalarView( void **a1)
{
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.UnicodeScalarView@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  __int128 v9 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 64) = v9;
  *(void *)(a1 + 80) = v2;
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = v6;
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = v9;
  return swift_retain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString.UnicodeScalarView()
{
  return (*(void *)(v0 + 40) ^ *(void *)(v0 + 8)) < 0x400uLL;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.UnicodeScalarView()
{
  uint64_t v0 = BigSubstring.UnicodeScalarView.distance(from:to:)();
  swift_unknownObjectRelease();
  return v0;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AttributedString.UnicodeScalarView( void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 3LL;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString.UnicodeScalarView( void *result, void *a2)
{
  unint64_t v2 = *result >> 10;
  if (v2 < *a2 >> 10 || v2 >= a2[4] >> 10) {
    __break(1u);
  }
  return result;
}

{
  unint64_t v2;
  unint64_t v2 = *result >> 10;
  if (v2 < *a2 >> 10 || a2[4] >> 10 < v2) {
    __break(1u);
  }
  return result;
}

{
  if (*result >> 10 < *a2 >> 10 || a2[4] >> 10 < result[4] >> 10) {
    __break(1u);
  }
  return result;
}

unint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString.UnicodeScalarView( unint64_t *result)
{
  unint64_t v2 = *result >> 10;
  unint64_t v3 = v1[5] >> 10;
  if (v2 >= v1[1] >> 10 && v3 >= v2)
  {
    uint64_t v5 = result;
    uint64_t v6 = *v1;
    __int128 v7 = *(_OWORD *)(*v1 + 32LL);
    v15[3] = *(_OWORD *)(*v1 + 16LL);
    _OWORD v15[4] = v7;
    v15[5] = *(_OWORD *)(v6 + 48);
    BigString.unicodeScalars.getter();
    unint64_t v8 = BigString.UnicodeScalarView.index(after:)();
    unint64_t v10 = v9;
    unint64_t v12 = v11;
    unint64_t v14 = v13;
    __n128 result = (unint64_t *)outlined release of Locale((uint64_t)v15);
    if (v3 >= v8 >> 10)
    {
      *uint64_t v5 = v8;
      v5[1] = v10;
      v5[2] = v12;
      v5[3] = v14;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString.UnicodeScalarView@<Q0>( uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  __n128 result = *(__n128 *)(v1 + 32);
  __int128 v6 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(void *)(a1 + 80) = v2;
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.UnicodeScalarView()
{
  __int128 v1 = v0[3];
  v5[2] = v0[2];
  v5[3] = v1;
  v5[4] = v0[4];
  __int128 v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  outlined release of AttributedString.Runs((uint64_t)v5);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.UnicodeScalarView( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.UnicodeScalarView@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance IndexPath( a1,  a2);
}

Swift::Void __swiftcall AttributedString.UnicodeScalarView._ensureUniqueReference()()
{
  __int128 v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v2 = (void *)*v0;
    __int128 v3 = *(_OWORD *)(*v0 + 16);
    __int128 v4 = *(_OWORD *)(*v0 + 48);
    __int128 v13 = *(_OWORD *)(*v0 + 32);
    __int128 v14 = v4;
    __int128 v12 = v3;
    unint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    uint64_t v7 = v2[10];
    uint64_t v8 = v2[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v9 = swift_allocObject();
    int v10 = BigString.isEmpty.getter();
    if (v5)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v12);
      swift_unknownObjectRelease();
    }

    else
    {
      v15[0] = v12;
      v15[1] = v13;
      void v15[2] = v14;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v15, (uint64_t)v16);
      outlined retain of Locale((uint64_t)v16);
    }

    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v5);
    swift_unknownObjectRelease();
    if (v5)
    {
      swift_unknownObjectRelease();
      if ((((v7 == 0) ^ v10) & 1) == 0)
      {
LABEL_7:
        __int128 v11 = v13;
        *(_OWORD *)(v9 + 16) = v12;
        *(_OWORD *)(v9 + 32) = v11;
        *(_OWORD *)(v9 + 48) = v14;
        *(void *)(v9 + 64) = v5;
        *(void *)(v9 + 72) = v6;
        *(void *)(v9 + 80) = v7;
        *(void *)(v9 + 88) = v8;
        *__int128 v1 = v9;
        swift_release();
        return;
      }
    }

    else if ((v10 & 1) != 0)
    {
      goto LABEL_7;
    }

    __break(1u);
  }

unint64_t AttributedString.UnicodeScalarView._mutateStringContents(in:attributes:with:)( __int128 *a1, uint64_t a2, uint64_t a3, void (*a4)(__int128 *, __int128 *))
{
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)a1 >> 11;
  v458 = a1;
  uint64_t v459 = *v4;
  uint64_t v487 = *((void *)a1 + 4) >> 11;
  uint64_t v471 = v7;
  uint64_t v455 = v487 - v7;
  if (v487 == v7)
  {
    uint64_t v446 = *(void *)a1 >> 11;
    uint64_t v477 = v446;
    goto LABEL_186;
  }

  v464 = *(uint64_t **)a1;
  v450 = v4;
  *(void *)&__int128 v534 = *(void *)a1 >> 11;
  unint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v6 + 72);
  uint64_t v11 = *(void *)(v6 + 80);
  uint64_t v10 = *(void *)(v6 + 88);
  swift_unknownObjectRetain_n();
  uint64_t v12 = specialized Rope.find<A>(at:in:preferEnd:)(v7, 0, v8, v9, v11, v10);
  unint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v12, v14, v16, v8, v9, v11, v10);
  swift_unknownObjectRelease_n();
  uint64_t v17 = *(void *)(v6 + 64);
  uint64_t v18 = *(void *)(v6 + 72);
  uint64_t v20 = *(void *)(v6 + 80);
  uint64_t v19 = *(void *)(v6 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v12, v14, v16, v17, v18, v20, v19);
  uint64_t v492 = v21;
  swift_unknownObjectRelease();
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = specialized _NativeDictionary.filter(_:)(v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  unint64_t result = Set.init(minimumCapacity:)();
  uint64_t v25 = 0LL;
  *(void *)&__int128 v599 = result;
  uint64_t v26 = 1LL << *(_BYTE *)(v23 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  uint64_t v5 = v23 + 64;
  unint64_t v28 = v27 & *(void *)(v23 + 64);
  int64_t v29 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      unint64_t v30 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      unint64_t v31 = v30 | (v25 << 6);
      goto LABEL_7;
    }

    int64_t v35 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
LABEL_475:
      swift_release();
      uint64_t v5 = v492 + 64;
      uint64_t v404 = *(void *)(v492 + 64);
      uint64_t v405 = 1LL << *(_BYTE *)(v492 + 32);
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v406 = 0LL;
      uint64_t v407 = -1LL;
      if (v405 < 64) {
        uint64_t v407 = ~(-1LL << v405);
      }
      unint64_t v408 = v407 & v404;
      unint64_t v409 = (unint64_t)(v405 + 63) >> 6;
      uint64_t v476 = v492 + 64;
      int64_t v486 = v409;
      unint64_t v470 = v409 - 5;
      unint64_t v461 = v409 - 1;
      while (!v408)
      {
        int64_t v415 = v406 + 1;
        if (__OFADD__(v406, 1LL)) {
          goto LABEL_598;
        }
        if (v415 < v486)
        {
          unint64_t v416 = *(void *)(v476 + 8 * v415);
          if (v416) {
            goto LABEL_487;
          }
          if ((uint64_t)(v406 + 2) >= v486)
          {
            ++v406;
          }

          else
          {
            unint64_t v416 = *(void *)(v476 + 8 * (v406 + 2));
            if (v416)
            {
              int64_t v415 = v406 + 2;
              goto LABEL_487;
            }

            if ((uint64_t)(v406 + 3) >= v486)
            {
              v406 += 2LL;
            }

            else
            {
              unint64_t v416 = *(void *)(v476 + 8 * (v406 + 3));
              if (v416)
              {
                int64_t v415 = v406 + 3;
LABEL_487:
                unint64_t v408 = (v416 - 1) & v416;
                unint64_t v411 = __clz(__rbit64(v416)) + (v415 << 6);
                unint64_t v406 = v415;
LABEL_483:
                uint64_t v412 = *(void *)(v492 + 56);
                v413 = (void *)(*(void *)(v492 + 48) + 16 * v411);
                uint64_t v414 = v413[1];
                *(void *)&__int128 v508 = *v413;
                *((void *)&v508 + 1) = v414;
                outlined init with copy of AttributedString._AttributeValue(v412 + 72 * v411, (uint64_t)&v509);
                swift_bridgeObjectRetain();
                goto LABEL_493;
              }

              int64_t v415 = v406 + 4;
              if ((uint64_t)(v406 + 4) >= v486)
              {
                v406 += 3LL;
              }

              else
              {
                unint64_t v416 = *(void *)(v476 + 8 * v415);
                if (v416) {
                  goto LABEL_487;
                }
                while (v470 != v406)
                {
                  unint64_t v416 = *(void *)(v492 + 104 + 8 * v406++);
                  if (v416)
                  {
                    int64_t v415 = v406 + 4;
                    goto LABEL_487;
                  }
                }

                unint64_t v406 = v461;
              }
            }
          }
        }

        unint64_t v408 = 0LL;
        __int128 v511 = 0u;
        memset(v512, 0, sizeof(v512));
        unsigned __int128 v509 = 0u;
        __int128 v510 = 0u;
        __int128 v508 = 0u;
LABEL_493:
        outlined init with take of (key: String, value: AttributedString._AttributeValue)?( (uint64_t)&v508,  (uint64_t)&v525);
        uint64_t v110 = *((void *)&v525 + 1);
        if (!*((void *)&v525 + 1)) {
          goto LABEL_517;
        }
        uint64_t v417 = v525;
        *(_OWORD *)v523 = v528;
        *(_OWORD *)&v523[16] = v529;
        uint64_t v524 = v530;
        __int128 v521 = v526;
        __int128 v522 = v527;
        uint64_t v5 = *((void *)&v528 + 1);
        uint64_t v418 = v529;
        if ((void)v529 == 1LL)
        {
          outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], 1LL);
          outlined consume of AttributedString.AttributeRunBoundaries?(0LL, 0LL);
LABEL_479:
          swift_bridgeObjectRelease();
          goto LABEL_480;
        }

        __int128 v508 = *(_OWORD *)&v523[8];
        __int128 v518 = 0uLL;
        outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], *(uint64_t *)&v523[16]);
        outlined copy of AttributedString.AttributeRunBoundaries?(v5, v418);
        char v419 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v508, &v518);
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v5, v418);
        if ((v419 & 1) == 0) {
          goto LABEL_479;
        }
        specialized Dictionary.subscript.getter(v417, v110, v25, (uint64_t)&v518);
        swift_bridgeObjectRelease();
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v521, (uint64_t)v517);
        outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v518, (uint64_t)&v508);
        outlined init with copy of AttributedString._AttributeValue?((uint64_t)v517, (uint64_t)&v512[8]);
        if (*((void *)&v509 + 1))
        {
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v508, (uint64_t)v507);
          if (!*((void *)&v513 + 1)) {
            goto LABEL_555;
          }
          __int128 v504 = v514;
          __int128 v505 = v515;
          uint64_t v506 = v516;
          __int128 v502 = *(_OWORD *)&v512[8];
          __int128 v503 = v513;
          char v420 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v507, (uint64_t)&v502);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v502);
          outlined destroy of Any?( (uint64_t)&v508,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v420 & 1) == 0) {
            goto LABEL_557;
          }
        }

        else
        {
          if (*((void *)&v513 + 1)) {
            goto LABEL_556;
          }
          outlined destroy of Any?( (uint64_t)&v508,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        }

LABEL_480:
        unint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
      }

      unint64_t v410 = __clz(__rbit64(v408));
      v408 &= v408 - 1;
      unint64_t v411 = v410 | (v406 << 6);
      goto LABEL_483;
    }

    if (v35 >= v29) {
      goto LABEL_27;
    }
    unint64_t v36 = *(void *)(v5 + 8 * v35);
    ++v25;
    if (!v36)
    {
      uint64_t v25 = v35 + 1;
      if (v35 + 1 >= v29) {
        goto LABEL_27;
      }
      unint64_t v36 = *(void *)(v5 + 8 * v25);
      if (!v36)
      {
        uint64_t v25 = v35 + 2;
        if (v35 + 2 >= v29) {
          goto LABEL_27;
        }
        unint64_t v36 = *(void *)(v5 + 8 * v25);
        if (!v36)
        {
          uint64_t v25 = v35 + 3;
          if (v35 + 3 >= v29) {
            goto LABEL_27;
          }
          unint64_t v36 = *(void *)(v5 + 8 * v25);
          if (!v36)
          {
            uint64_t v25 = v35 + 4;
            if (v35 + 4 >= v29) {
              goto LABEL_27;
            }
            unint64_t v36 = *(void *)(v5 + 8 * v25);
            if (!v36) {
              break;
            }
          }
        }
      }
    }

LABEL_576:
      __break(1u);
LABEL_577:
      __break(1u);
LABEL_578:
      __break(1u);
LABEL_579:
      __break(1u);
      goto LABEL_580;
    }

    uint64_t v25 = v37;
    goto LABEL_26;
  }

LABEL_580:
                  __break(1u);
LABEL_581:
                  __break(1u);
LABEL_582:
                  __break(1u);
LABEL_583:
                  __break(1u);
LABEL_584:
                  __break(1u);
LABEL_585:
                  __break(1u);
LABEL_586:
                  __break(1u);
LABEL_587:
                  __break(1u);
LABEL_588:
                  __break(1u);
LABEL_589:
                  __break(1u);
LABEL_590:
                  __break(1u);
LABEL_591:
                  __break(1u);
LABEL_592:
                  __break(1u);
LABEL_593:
                  __break(1u);
LABEL_594:
                  __break(1u);
LABEL_595:
                  __break(1u);
LABEL_596:
                  __break(1u);
LABEL_597:
                  __break(1u);
LABEL_598:
                  __break(1u);
LABEL_599:
                  __break(1u);
LABEL_600:
                  __break(1u);
LABEL_601:
                  __break(1u);
LABEL_602:
                  if (!v5) {
                    __break(1u);
                  }
LABEL_604:
                  __break(1u);
LABEL_605:
                  if (!v5) {
                    __break(1u);
                  }
LABEL_607:
                  __break(1u);
                  return result;
                }

                int64_t v111 = v122;
              }
            }
          }
        }
      }

LABEL_563:
              __break(1u);
LABEL_564:
              __break(1u);
LABEL_565:
              __break(1u);
LABEL_566:
              __break(1u);
LABEL_567:
              __break(1u);
LABEL_568:
              __break(1u);
LABEL_569:
              __break(1u);
LABEL_570:
              __break(1u);
LABEL_571:
              __break(1u);
              goto LABEL_572;
            }

LABEL_562:
            __break(1u);
            goto LABEL_563;
          }
        }

        __break(1u);
        goto LABEL_562;
      }

      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v508,  v131,  v132,  (void *)v6,  (uint64_t *)&v521,  v108,  v481,  (uint64_t)&v525);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int128 v142 = v508;
      uint64_t v143 = v509;
      uint64_t v144 = v510;
      uint64_t v145 = *(void *)(v6 + 64);
      uint64_t v146 = *(void *)(v6 + 72);
      uint64_t v147 = *(void *)(v6 + 80);
      uint64_t v148 = *(void *)(v6 + 88);
      __int128 v599 = v508;
      *(void *)&__int128 v600 = v509;
      uint64_t v149 = *((void *)&v509 + 1) + 1LL;
      if (__OFADD__(*((void *)&v509 + 1), 1LL)) {
        goto LABEL_523;
      }
      swift_unknownObjectRetain();
      unint64_t v150 = specialized Rope.subscript.getter(v142, *((unint64_t *)&v142 + 1), v143, v145, v146, v147, v148);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = v144 + v150;
      if (__OFADD__(v144, v150)) {
        goto LABEL_524;
      }
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v599, v145, v146, v147, v148);
      swift_unknownObjectRelease_n();
      uint64_t v132 = v494;
      if (v5 < v494)
      {
        unint64_t v133 = *((void *)&v599 + 1);
        uint64_t v134 = v599;
        uint64_t v135 = v600;
        uint64_t v131 = v487;
      }

      else
      {
        uint64_t v151 = *(void *)(v459 + 64);
        uint64_t v149 = *(void *)(v459 + 72);
        uint64_t v5 = *(void *)(v459 + 80);
        uint64_t v134 = *(void *)(v459 + 88);
        uint64_t v131 = v487;
        if (v487 == v494)
        {
          if (v151) {
            uint64_t v152 = *(void *)(v459 + 80);
          }
          else {
            uint64_t v152 = 0LL;
          }
          if (v152 < v487)
          {
LABEL_546:
            __break(1u);
LABEL_547:
            __break(1u);
LABEL_548:
            outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
LABEL_549:
            outlined destroy of Any?( (uint64_t)&v508,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_550:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
            goto LABEL_558;
          }

          if (v151 && v487 < v5 && *(_WORD *)(v151 + 16))
          {
            uint64_t v153 = *(unsigned __int8 *)(v151 + 18);
            if (*(_BYTE *)(v151 + 18))
            {
              swift_unknownObjectRetain_n();
              uint64_t v154 = v487;
              uint64_t v110 = v151;
              while (1)
              {
                uint64_t v156 = *(unsigned __int16 *)(v110 + 16);
                if (!*(_WORD *)(v110 + 16)) {
                  goto LABEL_131;
                }
                uint64_t v157 = *(void *)(v110 + 40);
                uint64_t v158 = v154 - v157;
                if (__OFSUB__(v154, v157)) {
                  goto LABEL_526;
                }
                if (__OFADD__(v158, 1LL)) {
                  goto LABEL_527;
                }
                if (v158 + 1 <= 0)
                {
                  uint64_t v156 = 0LL;
                }

                else
                {
                  if ((_DWORD)v156 == 1)
                  {
                    v154 -= v157;
                    goto LABEL_131;
                  }

                  uint64_t v159 = *(void *)(v110 + 64);
                  BOOL v71 = __OFSUB__(v158, v159);
                  uint64_t v160 = v158 - v159;
                  if (v71) {
                    goto LABEL_544;
                  }
                  if (__OFADD__(v160, 1LL))
                  {
LABEL_545:
                    __break(1u);
                    goto LABEL_546;
                  }

                  if (v160 + 1 < 1)
                  {
                    uint64_t v156 = 1LL;
                    uint64_t v154 = v158;
                  }

                  else
                  {
                    if ((_DWORD)v156 == 2)
                    {
                      uint64_t v154 = v160;
LABEL_131:
                      if (v154) {
                        goto LABEL_525;
                      }
                      goto LABEL_132;
                    }

                    v161 = (void *)(v110 + 88);
                    uint64_t v162 = 2LL;
                    while (1)
                    {
                      if (v156 == v162) {
                        goto LABEL_514;
                      }
                      uint64_t v154 = v160 - *v161;
                      if (__OFSUB__(v160, *v161)) {
                        goto LABEL_515;
                      }
                      if (__OFADD__(v154, 1LL)) {
                        goto LABEL_516;
                      }
                      if (v154 + 1 < 1) {
                        break;
                      }
                      ++v162;
                      v161 += 3;
                      uint64_t v160 = v154;
                      if (v156 == v162) {
                        goto LABEL_131;
                      }
                    }

                    uint64_t v156 = v162;
                    uint64_t v154 = v160;
                  }
                }

LABEL_132:
                char v155 = (4 * *(_BYTE *)(v110 + 18) + 8) & 0x3C;
                uint64_t v153 = ((-15LL << v155) - 1) & v153 | (v156 << v155);
                uint64_t v135 = *(void *)(v110 + 24 + 24 * v156);
                swift_unknownObjectRetain();
                unint64_t result = swift_unknownObjectRelease();
                uint64_t v110 = v135;
                if (!*(_BYTE *)(v135 + 18)) {
                  goto LABEL_161;
                }
              }
            }

            unint64_t result = swift_unknownObjectRetain_n();
            uint64_t v154 = v487;
            uint64_t v135 = v151;
LABEL_161:
            uint64_t v165 = *(unsigned __int16 *)(v135 + 16);
            if (!*(_WORD *)(v135 + 16)) {
              goto LABEL_180;
            }
            uint64_t v166 = *(void *)(v135 + 24);
            uint64_t v167 = v154 - v166;
            if (__OFSUB__(v154, v166)) {
              goto LABEL_582;
            }
            if (__OFADD__(v167, 1LL)) {
              goto LABEL_583;
            }
            if (v167 + 1 <= 0)
            {
              uint64_t v165 = 0LL;
            }

            else
            {
              if ((_DWORD)v165 == 1)
              {
                v154 -= v166;
                goto LABEL_180;
              }

              uint64_t v168 = *(void *)(v135 + 48);
              BOOL v71 = __OFSUB__(v167, v168);
              uint64_t v169 = v167 - v168;
              if (v71) {
                goto LABEL_591;
              }
              if (__OFADD__(v169, 1LL)) {
                goto LABEL_592;
              }
              if (v169 + 1 < 1)
              {
                uint64_t v165 = 1LL;
                uint64_t v154 = v167;
              }

              else
              {
                if ((_DWORD)v165 == 2)
                {
                  uint64_t v154 = v169;
LABEL_180:
                  if (v154) {
                    goto LABEL_581;
                  }
                  goto LABEL_181;
                }

                v170 = (void *)(v135 + 72);
                uint64_t v171 = 2LL;
                while (1)
                {
                  if (v165 == v171) {
                    goto LABEL_569;
                  }
                  uint64_t v154 = v169 - *v170;
                  if (__OFSUB__(v169, *v170)) {
                    goto LABEL_570;
                  }
                  if (__OFADD__(v154, 1LL)) {
                    goto LABEL_571;
                  }
                  if (v154 + 1 < 1) {
                    break;
                  }
                  ++v171;
                  v170 += 3;
                  uint64_t v169 = v154;
                  if (v165 == v171) {
                    goto LABEL_180;
                  }
                }

                uint64_t v165 = v171;
                uint64_t v154 = v169;
              }
            }

      int64_t v120 = (4 * *(_BYTE *)(v119 + 18) + 8) & 0x3C;
      unint64_t v117 = ((-15LL << v120) - 1) & v117 | (v123 << v120);
      unint64_t v121 = *(void *)(v119 + 24 + 24 * v123);
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRelease();
      int64_t v122 = *(unsigned __int8 *)(v121 + 18);
      uint64_t v269 = (__int128 *)v121;
      unint64_t v119 = v121;
      if (!v122) {
        goto LABEL_149;
      }
    }
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v327);
  unint64_t result = swift_unknownObjectRetain();
  v118 = v270;
  uint64_t v269 = (__int128 *)v114;
LABEL_149:
  unint64_t v130 = *((unsigned __int16 *)v269 + 8);
  if (!*((_WORD *)v269 + 8))
  {
    uint64_t v21 = v260;
    goto LABEL_162;
  }

  uint64_t v131 = *((void *)v269 + 3);
  unint64_t v33 = __OFSUB__(v118, v131);
  uint64_t v132 = (__int128 *)((char *)v118 - v131);
  uint64_t v21 = v260;
  if (v33)
  {
LABEL_313:
    __break(1u);
    goto LABEL_314;
  }

  if (__OFADD__(v132, 1LL))
  {
LABEL_314:
    __break(1u);
    goto LABEL_315;
  }

  if ((uint64_t)v132 + 1 < 1)
  {
    unint64_t v130 = 0LL;
  }

  else if ((_DWORD)v130 == 1)
  {
    v118 = v132;
LABEL_162:
    if (v118)
    {
LABEL_315:
      __break(1u);
      return result;
    }
  }

  else
  {
    unint64_t v133 = v269 + 3;
    uint64_t v134 = 1LL;
    while (1)
    {
      uint64_t v135 = *(void *)v133;
      unint64_t v133 = (__int128 *)((char *)v133 + 24);
      v118 = (__int128 *)((char *)v132 - v135);
      if (__OFSUB__(v132, v135)) {
        goto LABEL_297;
      }
      if (__OFADD__(v118, 1LL)) {
        goto LABEL_298;
      }
      ++v134;
      uint64_t v132 = v118;
      if (v130 == v134) {
        goto LABEL_162;
      }
    }

    unint64_t v130 = v134;
    v118 = v132;
  }

  swift_unknownObjectRelease();
  unint64_t result = swift_unknownObjectRelease();
  unint64_t v129 = v117 & 0xFFFFFFFFFFFFF0FFLL | (v130 << 8);
LABEL_164:
  v136 = v265;
  if (v114)
  {
    swift_unknownObjectRetain();
    uint64_t v137 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v262, v129, (uint64_t)v269, v114, v115);
    unint64_t result = swift_unknownObjectRelease_n();
  }

  else
  {
    uint64_t v137 = 0LL;
  }

  unint64_t v258 = (char *)((char *)v270 - (char *)v118);
  if (__OFSUB__(v270, v118)) {
    goto LABEL_285;
  }
  uint64_t v138 = v252[1];
  uint64_t v321 = *v252;
  uint64_t v322 = v138;
  uint64_t v323 = v252[2];
  unint64_t result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v118))
  {
LABEL_286:
    __break(1u);
    goto LABEL_287;
  }

  uint64_t v139 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v141 = v140;
  uint64_t v230 = v143;
  unint64_t v231 = v142;
  unint64_t result = outlined release of Locale((uint64_t)v308);
  if (v137 >= v253)
  {
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }

  if (v262 != *(void **)(v21 + 88))
  {
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }

  int64_t v228 = v141;
  v229 = v139;
  uint64_t v144 = *(void *)(v21 + 64);
  if (v269)
  {
    uint64_t v145 = v129;
    uint64_t v146 = (char *)v269 + 24 * ((v129 >> ((4 * *((_BYTE *)v269 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v147 = *((void *)v146 + 5);
    unint64_t v271 = (_BYTE *)*((void *)v146 + 4);
    swift_bridgeObjectRetain();
    unint64_t v232 = v147;
    unint64_t result = swift_bridgeObjectRetain();
    uint64_t v148 = (uint64_t)v262;
    uint64_t v149 = (uint64_t)v262;
  }

  else
  {
    swift_unknownObjectRetain();
    uint64_t v145 = v129;
    specialized Rope._Node.subscript.getter(v129, v144);
    unint64_t v271 = (_BYTE *)v150;
    unint64_t v232 = v151;
    unint64_t result = swift_unknownObjectRelease();
    uint64_t v144 = *(void *)(v21 + 64);
    uint64_t v149 = *(void *)(v21 + 88);
    uint64_t v148 = (uint64_t)v262;
  }

  uint64_t v254 = v137 + 1;
  unint64_t v272 = v293;
  *(void *)&uint64_t v290 = v148;
  *((void *)&v290 + 1) = v145;
  unint64_t v270 = (__int128 *)v280;
  v247 = (uint64_t *)(v261 + 40);
  *(void *)&uint64_t v291 = v269;
  while (2)
  {
    if (v148 != v149) {
      goto LABEL_275;
    }
    uint64_t v256 = v145;
    if (v269)
    {
      uint64_t v152 = *((void *)v269 + 3 * ((v145 >> ((4 * *((_BYTE *)v269 + 18) + 8) & 0x3C)) & 0xF) + 3);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v152 = specialized Rope._Node.subscript.getter(v145, v144);
    }

    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(v258, v152)) {
      goto LABEL_276;
    }
    __int128 v246 = &v258[v152];
    if (v144)
    {
      uint64_t v153 = ((-15LL << ((4 * *(_BYTE *)(v144 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v144 + 18) | ((unint64_t)*(unsigned __int16 *)(v144 + 16) << ((4 * *(_BYTE *)(v144 + 18) + 8) & 0x3C));
      unint64_t result = swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v153 = 0LL;
    }

    uint64_t v154 = v256;
    if (v256 >= v153) {
      goto LABEL_277;
    }
    v255 = (void *)v149;
    if (v269)
    {
      char v155 = (4 * *((_BYTE *)v269 + 18) + 8) & 0x3C;
      uint64_t v156 = ((v256 >> v155) & 0xF) + 1;
      if (v156 < *((unsigned __int16 *)v269 + 8))
      {
        uint64_t v157 = (v156 << v155) | ((-15LL << v155) - 1) & v256;
        unint64_t result = swift_unknownObjectRelease_n();
        goto LABEL_190;
      }
    }

    uint64_t v158 = *(unsigned __int8 *)(v144 + 18);
    uint64_t v159 = (4 * v158 + 8) & 0x3C;
    uint64_t v160 = (v256 >> v159) & 0xF;
    *(void *)&uint64_t v278 = v160;
    if (!v158)
    {
      unint64_t v164 = v160 + 1;
      if (v160 + 1 < (unint64_t)*(unsigned __int16 *)(v144 + 16))
      {
        unint64_t result = swift_unknownObjectRelease_n();
        uint64_t v157 = (v164 << v159) | ((-15LL << v159) - 1) & v154;
        uint64_t v162 = v144;
        unint64_t v163 = (uint64_t)v271;
        uint64_t v149 = (uint64_t)v255;
        goto LABEL_198;
      }

      uint64_t v149 = (uint64_t)v255;
      goto LABEL_194;
    }

    swift_unknownObjectRetain();
    v161 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v144 + 24,  (uint64_t *)&v278,  (uint64_t)&v290,  v144,  v158);
    unint64_t result = swift_unknownObjectRelease();
    uint64_t v149 = (uint64_t)v255;
    if ((v161 & 1) == 0)
    {
LABEL_194:
      if (v144)
      {
        uint64_t v165 = *(unsigned __int8 *)(v144 + 18);
        uint64_t v166 = *(unsigned __int16 *)(v144 + 16);
        unint64_t result = swift_unknownObjectRelease_n();
        uint64_t v167 = (4 * v165 + 8) & 0x3C;
        uint64_t v168 = ((-15LL << v167) - 1) & v165;
        uint64_t v169 = v166 << v167;
        uint64_t v149 = (uint64_t)v255;
        uint64_t v157 = v168 | v169;
      }

      else
      {
        uint64_t v157 = 0LL;
      }

      unint64_t v163 = (uint64_t)v271;
      uint64_t v162 = 0LL;
      *(void *)&uint64_t v290 = v149;
      goto LABEL_198;
    }

    unint64_t result = swift_unknownObjectRelease_n();
    uint64_t v157 = *((void *)&v290 + 1);
LABEL_190:
    uint64_t v162 = v291;
    unint64_t v163 = (uint64_t)v271;
LABEL_198:
    if (v254 != v253)
    {
      if ((void)v290 != *(void *)(v21 + 88))
      {
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
        goto LABEL_280;
      }

      uint64_t v262 = (void *)v290;
      char v244 = v162;
      __int128 v245 = v157;
      if (v162)
      {
        v170 = v162 + 24 * ((v157 >> ((4 * *(_BYTE *)(v162 + 18) + 8) & 0x3C)) & 0xF);
        __int128 v172 = *(void *)(v170 + 32);
        uint64_t v171 = *(void *)(v170 + 40);
        swift_bridgeObjectRetain();
        uint64_t v248 = v171;
        swift_bridgeObjectRetain();
      }

      else
      {
        __int128 v173 = *(void *)(v21 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v157, v173);
        __int128 v172 = v174;
        uint64_t v248 = v175;
        unint64_t v163 = (uint64_t)v271;
        swift_unknownObjectRelease();
      }

      unint64_t result = swift_bridgeObjectRetain();
      __int128 v176 = 0LL;
      __int128 v177 = v247;
      uint64_t v268 = v172;
LABEL_208:
      uint64_t v180 = v176 + 1;
      if (__OFADD__(v176, 1LL))
      {
        __break(1u);
LABEL_264:
        __break(1u);
        goto LABEL_265;
      }

      __int128 v182 = *(v177 - 1);
      uint64_t v181 = *v177;
      if (*(void *)(v163 + 16))
      {
        swift_bridgeObjectRetain_n();
        uint64_t v183 = specialized __RawDictionaryStorage.find<A>(_:)(v182, v181);
        if ((v184 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue( *(void *)(v163 + 56) + 72 * v183,  (uint64_t)&v300);
        }

        else
        {
          int v304 = 0LL;
          uint64_t v302 = 0u;
          uint64_t v303 = 0u;
          uint64_t v300 = 0u;
          uint64_t v301 = 0u;
        }

        swift_bridgeObjectRelease();
        if (*(void *)(v172 + 16))
        {
LABEL_216:
          swift_bridgeObjectRetain();
          __int128 v185 = specialized __RawDictionaryStorage.find<A>(_:)(v182, v181);
          if ((v186 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue( *(void *)(v172 + 56) + 72 * v185,  (uint64_t)&v295);
          }

          else
          {
            uint64_t v299 = 0LL;
            uint64_t v297 = 0u;
            uint64_t v298 = 0u;
            uint64_t v295 = 0u;
            uint64_t v296 = 0u;
          }

          swift_bridgeObjectRelease();
          unint64_t v163 = (uint64_t)v271;
LABEL_220:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v300,  (uint64_t)&v290,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v295,  (uint64_t)v272,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (*((void *)&v291 + 1))
          {
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v290,  (uint64_t)v289,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v294) {
              goto LABEL_236;
            }
            uint64_t v187 = *((_OWORD *)v272 + 3);
            uint64_t v286 = *((_OWORD *)v272 + 2);
            char v287 = v187;
            uint64_t v288 = *((void *)v272 + 8);
            uint64_t v188 = *((_OWORD *)v272 + 1);
            uint64_t v284 = *(_OWORD *)v272;
            uint64_t v285 = v188;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v289,  (uint64_t)v283);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v284,  (uint64_t)v282);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v283,  (uint64_t)&v278,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v282,  (uint64_t)v270,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v279)
            {
              if (v281)
              {
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v278, (uint64_t)v275);
                outlined init with take of any PredicateExpression<Self.Output == B1>(v270, (uint64_t)v274);
                uint64_t v189 = v276;
                unint64_t v264 = v277;
                uint64_t v263 = __swift_project_boxed_opaque_existential_1(v275, v276);
                uint64_t v267 = (char *)v225;
                __int128 v190 = *(void *)(v189 - 8);
                MEMORY[0x1895F8858](v263);
                uint64_t v192 = (char *)v225 - ((v191 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v274,  (uint64_t)&v273);
                uint64_t v193 = type metadata accessor for Optional();
                int64_t v266 = v225;
                unint64_t v194 = *(void *)(v193 - 8);
                MEMORY[0x1895F8858](v193);
                uint64_t v196 = (char *)v225 - v195;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                uint64_t v197 = swift_dynamicCast();
                uint64_t v198 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v190 + 56);
                if (v197)
                {
                  v198(v196, 0LL, 1LL, v189);
                  (*(void (**)(char *, char *, uint64_t))(v190 + 32))(v192, v196, v189);
                  __int128 v179 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(char *, uint64_t))(v190 + 8))(v192, v189);
                }

                else
                {
                  v198(v196, 1LL, 1LL, v189);
                  (*(void (**)(char *, uint64_t))(v194 + 8))(v196, v193);
                  __int128 v179 = 0;
                }

                __int128 v178 = v265;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v274);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v275);
                unint64_t v163 = (uint64_t)v271;
                goto LABEL_206;
              }

              __int128 v178 = v136;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v278);
LABEL_205:
              __int128 v179 = 0;
            }

            else
            {
              __int128 v178 = v136;
              if (v281)
              {
                outlined destroy of Any?( (uint64_t)v270,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_205;
              }

              __int128 v179 = 1;
            }

      swift_unknownObjectRelease();
      if (v188 != v168) {
        goto LABEL_215;
      }
      uint64_t v64 = v189;
      if (v62) {
        goto LABEL_134;
      }
LABEL_98:
      swift_unknownObjectRetain();
      unint64_t v80 = specialized Rope._Node.subscript.getter(v64, v56);
      swift_unknownObjectRelease();
      uint64_t v167 = 0LL;
      unint64_t v81 = 1;
LABEL_135:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFSUB__(v159, v80)) {
        goto LABEL_216;
      }
      if (v168 != *(void *)(v165 + 88)) {
        goto LABEL_217;
      }
      uint64_t v140 = v159 - v80;
      uint64_t v166 = v64;
      if ((v81 & 1) != 0)
      {
        uint64_t v93 = *(void *)(v165 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v64, v93);
        __int128 v173 = v94;
        uint64_t v145 = v95;
        swift_unknownObjectRelease();
      }

      else
      {
        uint64_t v96 = v167 + 24 * ((v64 >> ((4 * *(_BYTE *)(v167 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v97 = *(void *)(v96 + 40);
        __int128 v173 = *(void *)(v96 + 32);
        swift_bridgeObjectRetain();
        uint64_t v145 = v97;
        swift_bridgeObjectRetain();
      }

      uint64_t v99 = v160;
      uint64_t v98 = (uint64_t)v161;
      uint64_t v100 = v172;
      --v158;
      swift_bridgeObjectRetain();
      uint64_t v101 = 0LL;
      uint64_t v102 = v144;
      do
      {
        uint64_t v104 = v101 + 1;
        if (__OFADD__(v101, 1LL))
        {
          __break(1u);
          goto LABEL_198;
        }

        uint64_t v105 = *(v102 - 1);
        uint64_t v106 = *v102;
        if (*(void *)(v100 + 16))
        {
          swift_bridgeObjectRetain_n();
          uint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)(v105, v106);
          if ((v108 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue( *(void *)(v100 + 56) + 72 * v107,  (uint64_t)&v199);
          }

          else
          {
            uint64_t v203 = 0LL;
            uint64_t v201 = 0u;
            __int128 v202 = 0u;
            uint64_t v199 = 0u;
            uint64_t v200 = 0u;
          }

          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v203 = 0LL;
          uint64_t v201 = 0u;
          __int128 v202 = 0u;
          uint64_t v199 = 0u;
          uint64_t v200 = 0u;
          swift_bridgeObjectRetain();
        }

        uint64_t v109 = v173;
        if (*(void *)(v173 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v110 = specialized __RawDictionaryStorage.find<A>(_:)(v105, v106);
          if ((v111 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue( *(void *)(v109 + 56) + 72 * v110,  (uint64_t)&v194);
          }

          else
          {
            uint64_t v198 = 0LL;
            uint64_t v196 = 0u;
            uint64_t v197 = 0u;
            unint64_t v194 = 0u;
            __int128 v195 = 0u;
          }

          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v198 = 0LL;
          uint64_t v196 = 0u;
          uint64_t v197 = 0u;
          unint64_t v194 = 0u;
          __int128 v195 = 0u;
        }

        swift_bridgeObjectRelease();
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v199,  (uint64_t)&v188,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v194,  v98,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (v191)
        {
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v188,  (uint64_t)v187,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v193)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
LABEL_176:
            outlined destroy of Any?( (uint64_t)&v188,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?( (uint64_t)&v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v199,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_177:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v8 = v139;
            uint64_t v21 = v165;
            goto LABEL_178;
          }

          uint64_t v112 = *(_OWORD *)(v98 + 48);
          v185[2] = *(_OWORD *)(v98 + 32);
          v185[3] = v112;
          __int128 v186 = *(void *)(v98 + 64);
          uint64_t v113 = *(_OWORD *)(v98 + 16);
          v185[0] = *(_OWORD *)v98;
          v185[1] = v113;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v187,  (uint64_t)v184);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v185,  (uint64_t)v183);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v184,  (uint64_t)&v179,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v183,  (uint64_t)v99,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v180)
          {
            if (v182)
            {
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v179, (uint64_t)v176);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v99, (uint64_t)v175);
              unint64_t v114 = v177;
              unint64_t v164 = v178;
              unint64_t v163 = (uint64_t)__swift_project_boxed_opaque_existential_1(v176, v177);
              v170 = &v135;
              int64_t v115 = *(void *)(v114 - 8);
              MEMORY[0x1895F8858](v163);
              unint64_t v117 = (char *)&v135 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v175,  (uint64_t)&v174);
              v118 = type metadata accessor for Optional();
              uint64_t v169 = &v135;
              unint64_t v119 = *(void *)(v118 - 8);
              MEMORY[0x1895F8858](v118);
              unint64_t v121 = (char *)&v135 - v120;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int64_t v122 = swift_dynamicCast();
              __int128 v123 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v115 + 56);
              if (v122)
              {
                v123(v121, 0LL, 1LL, v114);
                (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v117, v121, v114);
                uint64_t v103 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
              }

              else
              {
                v123(v121, 1LL, 1LL, v114);
                (*(void (**)(char *, uint64_t))(v119 + 8))(v121, v118);
                uint64_t v103 = 0;
              }

              __swift_destroy_boxed_opaque_existential_1((uint64_t)v175);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v176);
              uint64_t v99 = v160;
              uint64_t v98 = (uint64_t)v161;
LABEL_143:
              outlined destroy of Any?( (uint64_t)v183,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of Any?( (uint64_t)v184,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v185);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
              outlined destroy of Any?( (uint64_t)&v188,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v199,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if ((v103 & 1) == 0) {
                goto LABEL_177;
              }
              goto LABEL_144;
            }

            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
          }

          else
          {
            if (!v182)
            {
              uint64_t v103 = 1;
              goto LABEL_143;
            }

            outlined destroy of Any?( (uint64_t)v99,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          }

          uint64_t v103 = 0;
          goto LABEL_143;
        }

        if (v193) {
          goto LABEL_176;
        }
        outlined destroy of Any?( (uint64_t)&v188,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v199,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_144:
        v102 += 2;
        ++v101;
        uint64_t v100 = v172;
      }

      while (v104 != v171);
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v8 = v139;
      uint64_t v159 = v140;
      __int128 v40 = v158;
      uint64_t v21 = v165;
      if (v138 < v158) {
        continue;
      }
      break;
    }

    unint64_t v133 = v140;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v159 = v133;
LABEL_178:
    uint64_t v124 = *(_OWORD *)(v21 + 32);
    unint64_t v219 = *(_OWORD *)(v21 + 16);
    int64_t v220 = v124;
    uint64_t v221 = *(_OWORD *)(v21 + 48);
    BigString.utf8.getter();
    if (__OFSUB__(v159, v157)) {
      goto LABEL_211;
    }
    unint64_t v125 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v127 = v126;
    unint64_t v129 = v128;
    uint64_t v131 = v130;
    outlined release of Locale((uint64_t)&v204);
    outlined release of AttributedString.Runs((uint64_t)&v206);
    uint64_t v132 = v125 >> 10;
    if (v151 >= v125 >> 10) {
      unint64_t result = v150;
    }
    else {
      unint64_t result = v125;
    }
    if (v152 < result >> 10) {
      goto LABEL_212;
    }
    uint64_t v12 = v149 - 1;
    if (v151 >= v132) {
      a4 = v146;
    }
    else {
      a4 = v131;
    }
    if (v151 >= v132) {
      a3 = v147;
    }
    else {
      a3 = v129;
    }
    if (v151 >= v132) {
      a2 = v148;
    }
    else {
      a2 = v127;
    }
  }

  while (v12 > v141);
  a7 = v136;
LABEL_196:
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  return result;
}

            uint64_t v76 = (4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C;
            uint64_t v53 = ((-15LL << v76) - 1) & v53 | (v75 << v76);
            uint64_t v45 = *(void *)(v74 + 24 + 24 * v75);
            swift_unknownObjectRetain();
            unint64_t result = swift_unknownObjectRelease();
            uint64_t v74 = v45;
            if (!*(_BYTE *)(v45 + 18)) {
              goto LABEL_173;
            }
          }

          __break(1u);
          goto LABEL_329;
        }

        unint64_t result = swift_unknownObjectRetain_n();
        uint64_t v53 = 0LL;
        uint64_t v9 = v153;
        uint64_t v45 = v49;
LABEL_173:
        unint64_t v92 = *(unsigned __int16 *)(v45 + 16);
        if (!*(_WORD *)(v45 + 16)) {
          goto LABEL_396;
        }
        uint64_t v93 = *(void *)(v45 + 24);
        __int128 v32 = __OFSUB__(v9, v93);
        uint64_t v94 = v9 - v93;
        if (v32) {
          goto LABEL_367;
        }
        if (v94 <= 0)
        {
          unint64_t v97 = 0LL;
        }

        else
        {
          if ((_DWORD)v92 == 1) {
            goto LABEL_398;
          }
          uint64_t v95 = *(void *)(v45 + 48);
          uint64_t v9 = v94 - v95;
          if (__OFSUB__(v94, v95)) {
            goto LABEL_370;
          }
          if (v9 >= 1)
          {
            if ((_DWORD)v92 == 2) {
              goto LABEL_398;
            }
            uint64_t v96 = (void *)(v45 + 72);
            unint64_t v97 = 2LL;
            while (v92 != v97)
            {
              uint64_t v98 = v9 - *v96;
              if (__OFSUB__(v9, *v96)) {
                goto LABEL_331;
              }
              if (v98 < 1) {
                goto LABEL_188;
              }
              ++v97;
              v96 += 3;
              uint64_t v9 = v98;
              if (v92 == v97) {
                goto LABEL_398;
              }
            }

                            __break(1u);
LABEL_133:
                            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                            __break(1u);
                            JUMPOUT(0x18350A148LL);
                          }

                          uint64_t v242 = v214;
                        }
                      }
                    }
                  }
                }
              }
            }
          }

LABEL_181:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v133 = v153 & 0xFFFFFFFFFFFFF0FFLL | (v165 << 8);
            uint64_t v132 = v494;
LABEL_156:
            swift_unknownObjectRetain();
            uint64_t v149 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v134, v133, v135, v151, v149);
            swift_unknownObjectRelease_n();
            uint64_t v5 = v487 - v154;
            if (__OFSUB__(v487, v154)) {
              goto LABEL_547;
            }
            goto LABEL_111;
          }

          unint64_t v164 = swift_unknownObjectRetain_n();
          unint64_t v133 = specialized Rope._endPath.getter(v164);
          swift_unknownObjectRelease();
          uint64_t v135 = 0LL;
          uint64_t v154 = 0LL;
          if (v151) {
            goto LABEL_156;
          }
          uint64_t v149 = 0LL;
          uint64_t v5 = v487;
        }

        else
        {
          unint64_t v163 = swift_unknownObjectRetain();
          unint64_t v133 = specialized Rope._endPath.getter(v163);
          if (v151)
          {
            swift_unknownObjectRelease();
            uint64_t v135 = 0LL;
          }

          else
          {
            uint64_t v135 = 0LL;
            uint64_t v149 = 0LL;
            uint64_t v5 = 0LL;
          }
        }
      }

        __break(1u);
LABEL_182:
        __break(1u);
        goto LABEL_183;
      }
    }

    uint64_t v77 = (void *)MEMORY[0x18961AFF0];
LABEL_94:

    if (!v77[2]) {
      goto LABEL_99;
    }
    goto LABEL_95;
  }

  uint64_t v77 = (void *)MEMORY[0x18961AFF0];
  if (!*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
    goto LABEL_99;
  }
LABEL_95:
  unint64_t v130 = specialized __RawDictionaryStorage.find<A>(_:)(23124LL, 0xE200000000000000LL);
  if ((v131 & 1) != 0)
  {
    uint64_t v132 = (uint64_t *)(v77[7] + 16 * v130);
    uint64_t v134 = *v132;
    unint64_t v133 = v132[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v135 = v2[9];
    if (v135)
    {
      if (!*(void *)(v135 + 16)) {
        goto LABEL_111;
      }
    }

    else
    {
      uint64_t v135 = v2[15];
      v2[9] = v135;
      swift_bridgeObjectRetain();
      if (!*(void *)(v135 + 16)) {
        goto LABEL_111;
      }
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v145 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v133);
    if ((v146 & 1) != 0)
    {
      uint64_t v147 = (uint64_t *)(*(void *)(v135 + 56) + 16 * v145);
      uint64_t v148 = *v147;
      uint64_t v149 = v147[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v150 = TimeZoneCache.State.fixed(_:)(v148, v149);
      uint64_t v152 = v151;
      swift_bridgeObjectRelease();
      if (v150)
      {
        unint64_t result = swift_bridgeObjectRelease();
        *(void *)a1 = v150;
        *(void *)(a1 + 8) = v152;
        return result;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    __break(1u);
    goto LABEL_173;
  }

  uint64_t v70 = specialized Collection.count.getter(0LL, 0xE000000000000000LL);
  swift_bridgeObjectRetain();
  BOOL v71 = specialized BidirectionalCollection.dropLast(_:)(v70, a1, a2);
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  swift_bridgeObjectRelease();
  if (v71 >> 14 == v73 >> 14)
  {
LABEL_171:
    swift_bridgeObjectRelease();
LABEL_172:
    swift_bridgeObjectRelease();
LABEL_173:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v81 = 1;
    goto LABEL_165;
  }

  while (1)
  {
    Substring.UnicodeScalarView.formIndex(before:)();
    _StringGuts.validateScalarIndex(_:in:)(v73, v71, v73, v75, v77);
    if ((v77 & 0x1000000000000000LL) != 0)
    {
      uint64_t v78 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((v77 & 0x2000000000000000LL) == 0 && (v75 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      uint64_t v78 = _decodeScalar(_:startingAt:)();
    }

    uint64_t v79 = v78;
    if (v71 >> 14 == v73 >> 14) {
      goto LABEL_171;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v29 = v79 == 46;
LABEL_104:
  unint64_t v81 = v29;
LABEL_165:
  swift_bridgeObjectRelease();
  return v81;
}

                goto LABEL_199;
              }
            }
          }

LABEL_230:
  *(void *)&__int128 v521 = v61;
  *((void *)&v521 + 1) = v66;
  *(void *)&__int128 v522 = v60;
  *((void *)&v522 + 1) = v62;
  *(void *)v523 = v233;
  *(void *)&v523[8] = v58;
  *(void *)&v523[16] = v234;
  *(void *)&v523[24] = v235;
  specialized IndexingIterator.next()();
  if (!v236)
  {
    uint64_t v265 = MEMORY[0x18961AFF0];
    goto LABEL_271;
  }

  uint64_t v237 = v236;
  uint64_t v5 = (uint64_t)v458;
  while (1)
  {
    __int128 v239 = *(_OWORD *)(v5 + 16);
    __int128 v571 = *(_OWORD *)v5;
    __int128 v572 = v239;
    __int128 v573 = *(_OWORD *)(v5 + 32);
    BigString.utf8.getter();
    unint64_t v240 = v518;
    v464 = (uint64_t *)*((void *)&v519 + 1);
    unint64_t v451 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v447 = v241;
    uint64_t v448 = v242;
    uint64_t v449 = v243;
    outlined release of Locale((uint64_t)v559);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v244 = specialized Sequence.contains(where:)(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v244 & 1) != 0 && v451 >> 10 > v240 >> 10) {
      break;
    }
LABEL_232:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v518, v451, v447, v449, v448);
    specialized IndexingIterator.next()();
    uint64_t v237 = v238;
    if (!v238) {
      goto LABEL_270;
    }
  }

  uint64_t v468 = v237 + 64;
  while (2)
  {
    __int128 v245 = *(_OWORD *)(v5 + 16);
    __int128 v568 = *(_OWORD *)v5;
    __int128 v569 = v245;
    __int128 v570 = *(_OWORD *)(v5 + 32);
    BigString.unicodeScalars.getter();
    int v482 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v560);
    __int128 v246 = *(_OWORD *)(v5 + 16);
    __int128 v565 = *(_OWORD *)v5;
    __int128 v566 = v246;
    __int128 v567 = *(_OWORD *)(v5 + 32);
    BigString.unicodeScalars.getter();
    unint64_t v472 = BigString.UnicodeScalarView.index(after:)();
    v464 = v247;
    outlined release of Locale((uint64_t)v561);
    uint64_t v248 = 1LL << *(_BYTE *)(v237 + 32);
    if (v248 < 64) {
      uint64_t v249 = ~(-1LL << v248);
    }
    else {
      uint64_t v249 = -1LL;
    }
    uint64_t v5 = v249 & *(void *)(v237 + 64);
    int64_t v250 = (unint64_t)(v248 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v251 = 0LL;
LABEL_242:
    if (v5)
    {
      unint64_t v252 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v253 = v252 | (v251 << 6);
      goto LABEL_244;
    }

    int64_t v257 = v251 + 1;
    if (!__OFADD__(v251, 1LL))
    {
      if (v257 >= v250)
      {
        int64_t v259 = v251;
      }

      else
      {
        unint64_t v258 = *(void *)(v468 + 8 * v257);
        if (v258)
        {
LABEL_248:
          uint64_t v5 = (v258 - 1) & v258;
          unint64_t v253 = __clz(__rbit64(v258)) + (v257 << 6);
          int64_t v251 = v257;
LABEL_244:
          uint64_t v254 = *(void *)(v237 + 56);
          v255 = (void *)(*(void *)(v237 + 48) + 16 * v253);
          uint64_t v256 = v255[1];
          *(void *)&__int128 v525 = *v255;
          *((void *)&v525 + 1) = v256;
          outlined init with copy of AttributedString._AttributeValue(v254 + 72 * v253, (uint64_t)&v526);
          swift_bridgeObjectRetain();
LABEL_251:
          outlined init with take of (key: String, value: AttributedString._AttributeValue)?( (uint64_t)&v525,  (uint64_t)&v508);
          uint64_t v260 = *((void *)&v508 + 1);
          if (!*((void *)&v508 + 1))
          {
            swift_release();
            uint64_t v5 = (uint64_t)v458;
            unint64_t v240 = v472;
            if (v451 >> 10 <= v472 >> 10) {
              goto LABEL_232;
            }
            continue;
          }

          uint64_t v261 = v508;
          uint64_t v262 = *((void *)&v511 + 1);
          uint64_t v263 = *(void *)v512;
          outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v511 + 1), *(uint64_t *)v512);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v509);
          if (v263 != 1)
          {
            *(void *)&__int128 v525 = v262;
            *((void *)&v525 + 1) = v263;
            unint64_t v264 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
            outlined consume of AttributedString.AttributeRunBoundaries?(v262, v263);
            if ((v264 & 0x100000000LL) == 0 && v482 != (_DWORD)v264) {
              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( v261,  v260,  v240,  v472,  (uint64_t *)v517);
            }
          }

          swift_bridgeObjectRelease();
          goto LABEL_242;
        }

        int64_t v259 = v251 + 1;
        if (v251 + 2 < v250)
        {
          unint64_t v258 = *(void *)(v468 + 8 * (v251 + 2));
          if (v258)
          {
            int64_t v257 = v251 + 2;
            goto LABEL_248;
          }

          int64_t v259 = v251 + 2;
          if (v251 + 3 < v250)
          {
            unint64_t v258 = *(void *)(v468 + 8 * (v251 + 3));
            if (v258)
            {
              int64_t v257 = v251 + 3;
              goto LABEL_248;
            }

            int64_t v257 = v251 + 4;
            int64_t v259 = v251 + 3;
            if (v251 + 4 < v250)
            {
              unint64_t v258 = *(void *)(v468 + 8 * v257);
              if (v258) {
                goto LABEL_248;
              }
              while (v250 - 5 != v251)
              {
                unint64_t v258 = *(void *)(v237 + 104 + 8 * v251++);
                if (v258)
                {
                  int64_t v257 = v251 + 4;
                  goto LABEL_248;
                }
              }

              int64_t v259 = v250 - 1;
            }
          }
        }
      }

      uint64_t v5 = 0LL;
      uint64_t v530 = 0LL;
      __int128 v528 = 0u;
      __int128 v529 = 0u;
      __int128 v526 = 0u;
      __int128 v527 = 0u;
      int64_t v251 = v259;
      __int128 v525 = 0u;
      goto LABEL_251;
    }

    break;
  }

  __break(1u);
LABEL_270:
  uint64_t v265 = *(void *)&v517[0];
LABEL_271:
  swift_release();
  int64_t v266 = 0LL;
  uint64_t v267 = v265 + 64;
  uint64_t v268 = 1LL << *(_BYTE *)(v265 + 32);
  uint64_t v269 = -1LL;
  if (v268 < 64) {
    uint64_t v269 = ~(-1LL << v268);
  }
  unint64_t v270 = v269 & *(void *)(v265 + 64);
  int64_t v497 = (unint64_t)(v268 + 63) >> 6;
  while (2)
  {
    if (v270)
    {
      unint64_t v271 = __clz(__rbit64(v270));
      v270 &= v270 - 1;
      unint64_t v272 = v271 | (v266 << 6);
      goto LABEL_287;
    }

    BOOL v71 = __OFADD__(v266++, 1LL);
    if (v71) {
      goto LABEL_529;
    }
    if (v266 >= v497)
    {
LABEL_296:
      swift_release();
      char v533 = 1;
      unint64_t v281 = v443 >> 10;
      int64_t v66 = v444 >> 10;
      if (v443 >> 10 != v444 >> 10)
      {
        __int128 v307 = v458[1];
        __int128 v578 = *v458;
        __int128 v579 = v307;
        __int128 v580 = v458[2];
        unint64_t result = BigString.startIndex.getter();
        if (v281 > result >> 10)
        {
          if (__OFSUB__(v446, 1LL)) {
            goto LABEL_597;
          }
          unint64_t v308 = *(void *)(v459 + 64);
          uint64_t v309 = *(void *)(v459 + 72);
          uint64_t v310 = *(void *)(v459 + 80);
          uint64_t v311 = *(void *)(v459 + 88);
          char v312 = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
          swift_unknownObjectRetain();
          v312 &= 1u;
          AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v446 - 1,  v312,  v308,  v309,  v310,  v311,  (uint64_t *)&v508);
          unsigned __int128 v490 = v509;
          __int128 v500 = v508;
          uint64_t v313 = v510;
          swift_unknownObjectRelease();
          v576[0] = v500;
          v576[1] = v490;
          uint64_t v577 = v313;
          unint64_t v314 = *(void *)(v459 + 64);
          uint64_t v315 = *(void *)(v459 + 72);
          uint64_t v316 = *(void *)(v459 + 80);
          uint64_t v317 = *(void *)(v459 + 88);
          swift_unknownObjectRetain();
          AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v446,  v312,  v314,  v315,  v316,  v317,  (uint64_t *)&v508);
          unsigned __int128 v491 = v509;
          __int128 v501 = v508;
          uint64_t v318 = v510;
          swift_unknownObjectRelease();
          v574[0] = v501;
          v574[1] = v491;
          uint64_t v575 = v318;
          uint64_t v319 = *(void *)(v459 + 64);
          uint64_t v320 = *(void *)(v459 + 72);
          uint64_t v321 = *(void *)(v459 + 80);
          uint64_t v322 = *(void *)(v459 + 88);
          swift_unknownObjectRetain();
          AttributedString._InternalRuns.subscript.getter((unint64_t)v576, v319, v320, v321, v322);
          uint64_t v62 = v323;
          swift_unknownObjectRelease();
          uint64_t v58 = *(void *)(v459 + 64);
          uint64_t v324 = *(void *)(v459 + 72);
          uint64_t v325 = *(void *)(v459 + 80);
          uint64_t v326 = *(void *)(v459 + 88);
          swift_unknownObjectRetain();
          AttributedString._InternalRuns.subscript.getter((unint64_t)v574, v58, v324, v325, v326);
          uint64_t v328 = v327;
          swift_unknownObjectRelease();
          LODWORD(v58) = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v62);
          uint64_t v496 = v328;
          LODWORD(result) = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v328);
          if ((v58 & 1) != 0 || (result & 1) != 0)
          {
LABEL_325:
            if (((v58 ^ result) & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_540:
              __int128 v421 = *v458;
              __int128 v422 = v458[2];
              v517[1] = v458[1];
              v517[2] = v422;
              v517[0] = v421;
              __int128 v423 = *v458;
              __int128 v519 = v458[1];
              __int128 v520 = v422;
              __int128 v518 = v423;
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v518, (uint64_t)v614);
              outlined retain of Locale((uint64_t)v614);
              unint64_t v424 = BigString.index(before:)();
              uint64_t v426 = v425;
              uint64_t v428 = v427;
              uint64_t v430 = v429;
              outlined release of Locale((uint64_t)v517);
              AttributedString.Guts._paragraphExtending(from:)(v424, v426, v428, v430, (uint64_t)&v525);
              uint64_t v110 = Range<>._utf8OffsetRange.getter();
              int64_t v306 = v431;
              char v533 = 0;
LABEL_310:
              __int128 v329 = v458[1];
              v507[0] = *v458;
              v507[1] = v329;
              v507[2] = v458[2];
              if ((v533 & 1) != 0)
              {
                uint64_t v330 = v445;
                if (v445 < 1) {
                  goto LABEL_330;
                }
              }

              else
              {
                uint64_t v330 = v445;
                if (v306 >= v445) {
                  goto LABEL_330;
                }
              }

              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v330 - 1, v330) & 1) != 0)
              {
                __int128 v334 = *v458;
                __int128 v335 = v458[2];
                __int128 v503 = v458[1];
                __int128 v504 = v335;
                __int128 v502 = v334;
                __int128 v336 = *v458;
                __int128 v522 = v458[1];
                *(_OWORD *)v523 = v335;
                __int128 v521 = v336;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v521, (uint64_t)v616);
                outlined retain of Locale((uint64_t)v616);
                unint64_t v337 = BigString.index(before:)();
                uint64_t v339 = v338;
                uint64_t v341 = v340;
                uint64_t v343 = v342;
                outlined release of Locale((uint64_t)&v502);
                AttributedString.Guts._paragraphExtending(from:)(v337, v339, v341, v343, (uint64_t)&v508);
                int64_t v344 = Range<>._utf8OffsetRange.getter();
                int64_t v346 = v345;
                int v347 = 1;
                goto LABEL_331;
              }

LABEL_394:
                unint64_t v373 = __clz(__rbit64(v5));
                v5 &= v5 - 1;
                unint64_t v374 = v373 | (v370 << 6);
                goto LABEL_395;
              }

              uint64_t v363 = v525;
              *(_OWORD *)v523 = v528;
              *(_OWORD *)&v523[16] = v529;
              uint64_t v524 = v530;
              __int128 v521 = v526;
              __int128 v522 = v527;
              uint64_t v364 = *((void *)&v528 + 1);
              uint64_t v365 = v529;
              if ((void)v529 == 1LL)
              {
                outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], 1LL);
                outlined consume of AttributedString.AttributeRunBoundaries?(0LL, 0LL);
LABEL_354:
                swift_bridgeObjectRelease();
                goto LABEL_355;
              }

              __int128 v508 = *(_OWORD *)&v523[8];
              __int128 v518 = 0uLL;
              outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], *(uint64_t *)&v523[16]);
              outlined copy of AttributedString.AttributeRunBoundaries?(v364, v365);
              char v366 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v508, &v518);
              swift_bridgeObjectRelease();
              outlined consume of AttributedString.AttributeRunBoundaries?(v364, v365);
              if ((v366 & 1) == 0) {
                goto LABEL_354;
              }
              specialized Dictionary.subscript.getter(v363, v362, v496, (uint64_t)&v518);
              swift_bridgeObjectRelease();
              outlined init with copy of AttributedString._AttributeValue((uint64_t)&v521, (uint64_t)v517);
              outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v518, (uint64_t)&v508);
              outlined init with copy of AttributedString._AttributeValue?((uint64_t)v517, (uint64_t)&v512[8]);
              if (*((void *)&v509 + 1))
              {
                outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v508, (uint64_t)v507);
                if (!*((void *)&v513 + 1)) {
                  goto LABEL_530;
                }
                __int128 v504 = v514;
                __int128 v505 = v515;
                uint64_t v506 = v516;
                __int128 v502 = *(_OWORD *)&v512[8];
                __int128 v503 = v513;
                char v367 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v507, (uint64_t)&v502);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v502);
                outlined destroy of Any?( (uint64_t)&v508,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v367 & 1) == 0) {
                  goto LABEL_532;
                }
              }

              else
              {
                if (*((void *)&v513 + 1)) {
                  goto LABEL_531;
                }
                outlined destroy of Any?( (uint64_t)&v508,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              }

            __break(1u);
            goto LABEL_395;
          }

                    swift_once();
                    if (!*(void *)(v8 + 16)) {
                      goto LABEL_395;
                    }
                    goto LABEL_349;
                  }

LABEL_355:
              unint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
            }

            unint64_t v355 = __clz(__rbit64(v353));
            v353 &= v353 - 1;
            unint64_t v356 = v355 | (v5 << 6);
            goto LABEL_358;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        uint64_t v110 = 0LL;
        int64_t v306 = 0LL;
        goto LABEL_310;
      }

      __int128 v282 = v458[1];
      __int128 v578 = *v458;
      __int128 v579 = v282;
      __int128 v580 = v458[2];
      if (v281 <= (unint64_t)BigString.startIndex.getter() >> 10
        || (unint64_t result = BigString.endIndex.getter(), v281 >= result >> 10))
      {
LABEL_303:
        uint64_t v110 = 0LL;
        int64_t v306 = 0LL;
        goto LABEL_330;
      }

      if (__OFSUB__(v446, 1LL)) {
        goto LABEL_599;
      }
      unint64_t v283 = *(void *)(v459 + 64);
      uint64_t v284 = *(void *)(v459 + 72);
      uint64_t v285 = *(void *)(v459 + 80);
      uint64_t v286 = *(void *)(v459 + 88);
      char v287 = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
      swift_unknownObjectRetain();
      v287 &= 1u;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v446 - 1,  v287,  v283,  v284,  v285,  v286,  (uint64_t *)&v508);
      unsigned __int128 v488 = v509;
      __int128 v498 = v508;
      uint64_t v288 = v510;
      swift_unknownObjectRelease();
      v616[0] = v498;
      v616[1] = v488;
      uint64_t v617 = v288;
      unint64_t v289 = *(void *)(v459 + 64);
      uint64_t v290 = *(void *)(v459 + 72);
      uint64_t v291 = *(void *)(v459 + 80);
      uint64_t v292 = *(void *)(v459 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v446,  v287,  v289,  v290,  v291,  v292,  (uint64_t *)&v508);
      unsigned __int128 v489 = v509;
      __int128 v499 = v508;
      uint64_t v293 = v510;
      swift_unknownObjectRelease();
      v614[0] = v499;
      v614[1] = v489;
      uint64_t v615 = v293;
      uint64_t v294 = *(void *)(v459 + 64);
      uint64_t v295 = *(void *)(v459 + 72);
      uint64_t v296 = *(void *)(v459 + 80);
      uint64_t v297 = *(void *)(v459 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.subscript.getter((unint64_t)v616, v294, v295, v296, v297);
      uint64_t v25 = v298;
      swift_unknownObjectRelease();
      uint64_t v299 = *(void *)(v459 + 64);
      uint64_t v300 = *(void *)(v459 + 72);
      uint64_t v301 = *(void *)(v459 + 80);
      uint64_t v5 = *(void *)(v459 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.subscript.getter((unint64_t)v614, v299, v300, v301, v5);
      uint64_t v303 = v302;
      swift_unknownObjectRelease();
      int v304 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v25);
      uint64_t v492 = v303;
      int v305 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v303);
      if ((v304 & 1) == 0 && (v305 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_303;
      }

      if (((v304 ^ v305) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_559;
      }

      uint64_t v475 = v25 + 64;
      uint64_t v385 = 1LL << *(_BYTE *)(v25 + 32);
      uint64_t v386 = -1LL;
      if (v385 < 64) {
        uint64_t v386 = ~(-1LL << v385);
      }
      unint64_t v387 = v386 & *(void *)(v25 + 64);
      unint64_t v388 = (unint64_t)(v385 + 63) >> 6;
      unint64_t v457 = v388 - 1;
      unint64_t result = swift_bridgeObjectRetain();
      unint64_t v389 = 0LL;
      int64_t v485 = v388;
      unint64_t v463 = v388 - 5;
      while (!v387)
      {
        int64_t v395 = v389 + 1;
        if (__OFADD__(v389, 1LL)) {
          goto LABEL_596;
        }
        if (v395 < v485)
        {
          unint64_t v396 = *(void *)(v475 + 8 * v395);
          if (v396) {
            goto LABEL_441;
          }
          if ((uint64_t)(v389 + 2) >= v485)
          {
            ++v389;
          }

          else
          {
            unint64_t v396 = *(void *)(v475 + 8 * (v389 + 2));
            if (v396)
            {
              int64_t v395 = v389 + 2;
              goto LABEL_441;
            }

            if ((uint64_t)(v389 + 3) >= v485)
            {
              v389 += 2LL;
            }

            else
            {
              unint64_t v396 = *(void *)(v475 + 8 * (v389 + 3));
              if (v396)
              {
                int64_t v395 = v389 + 3;
LABEL_441:
                unint64_t v387 = (v396 - 1) & v396;
                unint64_t v391 = __clz(__rbit64(v396)) + (v395 << 6);
                unint64_t v389 = v395;
LABEL_437:
                uint64_t v392 = *(void *)(v25 + 56);
                v393 = (void *)(*(void *)(v25 + 48) + 16 * v391);
                uint64_t v394 = v393[1];
                *(void *)&__int128 v508 = *v393;
                *((void *)&v508 + 1) = v394;
                outlined init with copy of AttributedString._AttributeValue(v392 + 72 * v391, (uint64_t)&v509);
                swift_bridgeObjectRetain();
                goto LABEL_447;
              }

              int64_t v395 = v389 + 4;
              if ((uint64_t)(v389 + 4) >= v485)
              {
                v389 += 3LL;
              }

              else
              {
                unint64_t v396 = *(void *)(v475 + 8 * v395);
                if (v396) {
                  goto LABEL_441;
                }
                while (v463 != v389)
                {
                  unint64_t v396 = *(void *)(v25 + 104 + 8 * v389++);
                  if (v396)
                  {
                    int64_t v395 = v389 + 4;
                    goto LABEL_441;
                  }
                }

                unint64_t v389 = v457;
              }
            }
          }
        }

        unint64_t v387 = 0LL;
        __int128 v511 = 0u;
        memset(v512, 0, sizeof(v512));
        unsigned __int128 v509 = 0u;
        __int128 v510 = 0u;
        __int128 v508 = 0u;
LABEL_447:
        outlined init with take of (key: String, value: AttributedString._AttributeValue)?( (uint64_t)&v508,  (uint64_t)&v525);
        uint64_t v397 = *((void *)&v525 + 1);
        if (!*((void *)&v525 + 1)) {
          goto LABEL_475;
        }
        uint64_t v398 = v525;
        *(_OWORD *)v523 = v528;
        *(_OWORD *)&v523[16] = v529;
        uint64_t v524 = v530;
        __int128 v521 = v526;
        __int128 v522 = v527;
        uint64_t v5 = *((void *)&v528 + 1);
        uint64_t v399 = v529;
        if ((void)v529 == 1LL)
        {
          outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], 1LL);
          outlined consume of AttributedString.AttributeRunBoundaries?(0LL, 0LL);
LABEL_433:
          swift_bridgeObjectRelease();
          goto LABEL_434;
        }

        __int128 v508 = *(_OWORD *)&v523[8];
        __int128 v518 = 0uLL;
        outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], *(uint64_t *)&v523[16]);
        outlined copy of AttributedString.AttributeRunBoundaries?(v5, v399);
        char v400 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v508, &v518);
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v5, v399);
        if ((v400 & 1) == 0) {
          goto LABEL_433;
        }
        specialized Dictionary.subscript.getter(v398, v397, v492, (uint64_t)&v518);
        swift_bridgeObjectRelease();
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v521, (uint64_t)v517);
        outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v518, (uint64_t)&v508);
        outlined init with copy of AttributedString._AttributeValue?((uint64_t)v517, (uint64_t)&v512[8]);
        if (*((void *)&v509 + 1))
        {
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v508, (uint64_t)v507);
          if (!*((void *)&v513 + 1)) {
            goto LABEL_548;
          }
          __int128 v504 = v514;
          __int128 v505 = v515;
          uint64_t v506 = v516;
          __int128 v502 = *(_OWORD *)&v512[8];
          __int128 v503 = v513;
          char v401 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v507, (uint64_t)&v502);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v502);
          outlined destroy of Any?( (uint64_t)&v508,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v401 & 1) == 0) {
            goto LABEL_550;
          }
        }

        else
        {
          if (*((void *)&v513 + 1)) {
            goto LABEL_549;
          }
          outlined destroy of Any?( (uint64_t)&v508,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        }

LABEL_434:
        unint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
      }

      unint64_t v390 = __clz(__rbit64(v387));
      v387 &= v387 - 1;
      unint64_t v391 = v390 | (v389 << 6);
      goto LABEL_437;
    }

    unint64_t v273 = *(void *)(v267 + 8 * v266);
    if (v273)
    {
LABEL_286:
      unint64_t v270 = (v273 - 1) & v273;
      unint64_t v272 = __clz(__rbit64(v273)) + (v266 << 6);
LABEL_287:
      v275 = (unint64_t *)(*(void *)(v265 + 48) + 16 * v272);
      unint64_t v276 = *v275;
      uint64_t v5 = v275[1];
      uint64_t v277 = *(void *)(*(void *)(v265 + 56) + 8 * v272);
      uint64_t v278 = specialized Array._getCount()(v277);
      if (v278)
      {
        uint64_t v279 = v278;
        if (v278 < 1) {
          goto LABEL_522;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v280 = (uint64_t *)(v277 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( v276,  v5,  *(v280 - 1),  *v280,  0);
          v280 += 2;
          --v279;
        }

        while (v279);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      continue;
    }

    break;
  }

  int64_t v274 = v266 + 1;
  if (v266 + 1 >= v497) {
    goto LABEL_296;
  }
  unint64_t v273 = *(void *)(v267 + 8 * v274);
  if (v273) {
    goto LABEL_285;
  }
  int64_t v274 = v266 + 2;
  if (v266 + 2 >= v497) {
    goto LABEL_296;
  }
  unint64_t v273 = *(void *)(v267 + 8 * v274);
  if (v273) {
    goto LABEL_285;
  }
  int64_t v274 = v266 + 3;
  if (v266 + 3 >= v497) {
    goto LABEL_296;
  }
  unint64_t v273 = *(void *)(v267 + 8 * v274);
  if (v273)
  {
LABEL_285:
    int64_t v266 = v274;
    goto LABEL_286;
  }

  while (1)
  {
    int64_t v266 = v274 + 1;
    if (__OFADD__(v274, 1LL)) {
      break;
    }
    if (v266 >= v497) {
      goto LABEL_296;
    }
    unint64_t v273 = *(void *)(v267 + 8 * v266);
    ++v274;
    if (v273) {
      goto LABEL_286;
    }
  }

  __break(1u);
  return result;
}

LABEL_554:
  __break(1u);
LABEL_555:
  outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
LABEL_556:
  outlined destroy of Any?( (uint64_t)&v508,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_557:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
LABEL_558:
  swift_release();
LABEL_559:
  __int128 v432 = *v458;
  __int128 v433 = v458[2];
  __int128 v522 = v458[1];
  *(_OWORD *)v523 = v433;
  __int128 v521 = v432;
  __int128 v434 = *v458;
  __int128 v526 = v458[1];
  __int128 v527 = v433;
  __int128 v525 = v434;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v525, (uint64_t)&v518);
  outlined retain of Locale((uint64_t)&v518);
  unint64_t v435 = BigString.index(before:)();
  uint64_t v437 = v436;
  uint64_t v439 = v438;
  uint64_t v441 = v440;
  outlined release of Locale((uint64_t)&v521);
  AttributedString.Guts._paragraphExtending(from:)(v435, v437, v439, v441, (uint64_t)&v508);
  uint64_t v110 = Range<>._utf8OffsetRange.getter();
  int64_t v306 = v442;
  int64_t v344 = 0LL;
  int64_t v346 = 0LL;
  int v347 = 0;
  char v533 = 0;
LABEL_331:
  if ((v533 & 1) == 0 && v446 < v306)
  {
    uint64_t v532 = 0LL;
    uint64_t v531 = 0LL;
    AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v531, v110, v446, v306);
  }

  if (v445 < v346) {
    int v348 = v347;
  }
  else {
    int v348 = 0;
  }
  if (v348 == 1)
  {
    uint64_t v532 = 0LL;
    uint64_t v531 = 0LL;
    AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v531, v344, v445, v346);
  }

  return swift_unknownObjectRelease();
}

uint64_t specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  __int128 v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v6 = (void *)*v2;
    __int128 v7 = *(_OWORD *)(*v2 + 16);
    __int128 v8 = *(_OWORD *)(*v2 + 32);
    __int128 v479 = *(_OWORD *)(*v2 + 48);
    __int128 v478 = v8;
    __int128 v477 = v7;
    unint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v11 = v6[10];
    uint64_t v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v13 = swift_allocObject();
    int v14 = BigString.isEmpty.getter();
    if (v9)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v477);
      swift_unknownObjectRelease();
    }

    else
    {
      outlined retain of Locale((uint64_t)&v477);
    }

    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v9);
    swift_unknownObjectRelease();
    if (v9)
    {
      swift_unknownObjectRelease();
      if ((((v11 == 0) ^ v14) & 1) == 0)
      {
LABEL_7:
        __int128 v15 = v478;
        *(_OWORD *)(v13 + 16) = v477;
        *(_OWORD *)(v13 + 32) = v15;
        *(_OWORD *)(v13 + 48) = v479;
        *(void *)(v13 + 64) = v9;
        *(void *)(v13 + 72) = v10;
        *(void *)(v13 + 80) = v11;
        *(void *)(v13 + 88) = v12;
        *__int128 v3 = v13;
        swift_release();
        goto LABEL_8;
      }
    }

    else
    {
      swift_unknownObjectRelease();
      if ((v14 & 1) != 0) {
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_251;
  }

LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
      goto LABEL_378;
    }

    int64_t v38 = v80;
    goto LABEL_66;
  }

                    __break(1u);
LABEL_375:
                    __break(1u);
LABEL_376:
                    __break(1u);
LABEL_377:
                    __break(1u);
LABEL_378:
                    __break(1u);
LABEL_379:
                    __break(1u);
LABEL_380:
                    __break(1u);
LABEL_381:
                    __break(1u);
LABEL_382:
                    __break(1u);
LABEL_383:
                    __break(1u);
LABEL_384:
                    __break(1u);
LABEL_385:
                    __break(1u);
                    goto LABEL_386;
                  }

      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
      goto LABEL_378;
    }

    int64_t v38 = v81;
    goto LABEL_66;
  }

LABEL_211:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( &v480,  v340,  v342,  v346,  v344);
                          specialized IndexingIterator.next()();
                          uint64_t v239 = v241;
                          if (!v241) {
                            goto LABEL_253;
                          }
                        }

                        unint64_t v252 = v243;
                        uint64_t v361 = v239 + 64;
LABEL_216:
                        __int128 v253 = v240[1];
                        __int128 v426 = *v240;
                        __int128 v427 = v253;
                        __int128 v428 = v240[2];
                        BigString.unicodeScalars.getter();
                        int v369 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v418);
                        __int128 v254 = v240[1];
                        __int128 v423 = *v240;
                        __int128 v424 = v254;
                        __int128 v425 = v240[2];
                        BigString.unicodeScalars.getter();
                        unint64_t v363 = v252;
                        unint64_t v365 = BigString.UnicodeScalarView.index(after:)();
                        outlined release of Locale((uint64_t)v419);
                        uint64_t v255 = 1LL << *(_BYTE *)(v239 + 32);
                        if (v255 < 64) {
                          uint64_t v256 = ~(-1LL << v255);
                        }
                        else {
                          uint64_t v256 = -1LL;
                        }
                        unint64_t v257 = v256 & *(void *)(v239 + 64);
                        int64_t v258 = (unint64_t)(v255 + 63) >> 6;
                        swift_bridgeObjectRetain();
                        int64_t v259 = 0LL;
                        while (1)
                        {
                          if (v257)
                          {
                            unint64_t v260 = __clz(__rbit64(v257));
                            v257 &= v257 - 1;
                            unint64_t v261 = v260 | (v259 << 6);
                            goto LABEL_223;
                          }

                          int64_t v265 = v259 + 1;
                          if (__OFADD__(v259, 1LL)) {
                            break;
                          }
                          if (v265 >= v258) {
                            goto LABEL_232;
                          }
                          unint64_t v266 = *(void *)(v361 + 8 * v265);
                          if (v266) {
                            goto LABEL_227;
                          }
                          if (v259 + 2 >= v258)
                          {
                            ++v259;
LABEL_232:
                            unint64_t v257 = 0LL;
                            uint64_t v378 = 0LL;
                            __int128 v376 = 0u;
                            __int128 v377 = 0u;
                            __int128 v374 = 0u;
                            __int128 v375 = 0u;
                            __int128 v373 = 0u;
                            goto LABEL_233;
                          }

                          unint64_t v266 = *(void *)(v361 + 8 * (v259 + 2));
                          if (v266)
                          {
                            int64_t v265 = v259 + 2;
                            goto LABEL_227;
                          }

                          if (v259 + 3 >= v258)
                          {
                            v259 += 2LL;
                            goto LABEL_232;
                          }

                          unint64_t v266 = *(void *)(v361 + 8 * (v259 + 3));
                          if (v266)
                          {
                            int64_t v265 = v259 + 3;
                            goto LABEL_227;
                          }

                          int64_t v265 = v259 + 4;
                          if (v259 + 4 >= v258)
                          {
                            v259 += 3LL;
                            goto LABEL_232;
                          }

                          unint64_t v266 = *(void *)(v361 + 8 * v265);
                          if (v266) {
                            goto LABEL_227;
                          }
                          do
                          {
                            if (v258 - 5 == v259)
                            {
                              int64_t v259 = v258 - 1;
                              goto LABEL_232;
                            }

                            unint64_t v266 = *(void *)(v239 + 104 + 8 * v259++);
                          }

                          while (!v266);
                          int64_t v265 = v259 + 4;
LABEL_227:
                          unint64_t v257 = (v266 - 1) & v266;
                          unint64_t v261 = __clz(__rbit64(v266)) + (v265 << 6);
                          int64_t v259 = v265;
LABEL_223:
                          uint64_t v262 = *(void *)(v239 + 56);
                          uint64_t v263 = (void *)(*(void *)(v239 + 48) + 16 * v261);
                          uint64_t v264 = v263[1];
                          *(void *)&__int128 v373 = *v263;
                          *((void *)&v373 + 1) = v264;
                          outlined init with copy of AttributedString._AttributeValue(v262 + 72 * v261, (uint64_t)&v374);
                          swift_bridgeObjectRetain();
LABEL_233:
                          outlined init with take of (key: String, value: AttributedString._AttributeValue)?( (uint64_t)&v373,  (uint64_t)&v379);
                          uint64_t v267 = *((void *)&v379 + 1);
                          if (!*((void *)&v379 + 1))
                          {
                            swift_release();
                            unint64_t v240 = v351;
                            unint64_t v252 = v365;
                            if (v353 <= v365 >> 10) {
                              goto LABEL_211;
                            }
                            goto LABEL_216;
                          }

                          uint64_t v268 = v379;
                          uint64_t v270 = *((void *)&v381 + 1);
                          uint64_t v269 = v382;
                          outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v381 + 1), v382);
                          outlined destroy of AttributedString._AttributeValue((uint64_t)v380);
                          if (v269 != 1)
                          {
                            *(void *)&__int128 v373 = v270;
                            *((void *)&v373 + 1) = v269;
                            unint64_t v271 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                            outlined consume of AttributedString.AttributeRunBoundaries?(v270, v269);
                            if ((v271 & 0x100000000LL) == 0 && v369 != (_DWORD)v271) {
                              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( v268,  v267,  v363,  v365,  (uint64_t *)v439);
                            }
                          }

                          swift_bridgeObjectRelease();
                        }

                        __break(1u);
LABEL_253:
                        uint64_t v272 = *(void *)&v439[0];
LABEL_254:
                        uint64_t result = swift_release();
                        int64_t v273 = 0LL;
                        uint64_t v274 = v272 + 64;
                        uint64_t v275 = 1LL << *(_BYTE *)(v272 + 32);
                        uint64_t v276 = -1LL;
                        if (v275 < 64) {
                          uint64_t v276 = ~(-1LL << v275);
                        }
                        unint64_t v277 = v276 & *(void *)(v272 + 64);
                        int64_t v372 = (unint64_t)(v275 + 63) >> 6;
                        uint64_t v31 = v348;
                        while (1)
                        {
                          if (v277)
                          {
                            unint64_t v278 = __clz(__rbit64(v277));
                            v277 &= v277 - 1;
                            unint64_t v279 = v278 | (v273 << 6);
                          }

                          else
                          {
                            BOOL v42 = __OFADD__(v273++, 1LL);
                            if (v42) {
                              goto LABEL_346;
                            }
                            if (v273 >= v372)
                            {
LABEL_279:
                              swift_release();
                              a1 = v337;
                              unint64_t v288 = v334 >> 10;
                              if (specialized Range.isEmpty.getter())
                              {
                                __int128 v289 = v351[1];
                                __int128 v385 = *v351;
                                __int128 v386 = v289;
                                __int128 v387 = v351[2];
                                if (v288 > (unint64_t)BigString.startIndex.getter() >> 10)
                                {
                                  uint64_t v31 = (uint64_t)&v385;
                                  if (v288 < (unint64_t)BigString.endIndex.getter() >> 10)
                                  {
                                    uint64_t result = v337 - 1;
                                    if (__OFSUB__(v337, 1LL)) {
                                      goto LABEL_389;
                                    }
                                    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v337) & 1) != 0)
                                    {
                                      __int128 v290 = *v351;
                                      __int128 v291 = v351[2];
                                      __int128 v481 = v351[1];
                                      __int128 v482 = v291;
                                      __int128 v480 = v290;
                                      __int128 v292 = *v351;
                                      __int128 v374 = v351[1];
                                      __int128 v375 = v291;
                                      __int128 v373 = v292;
                                      outlined init with take of any PredicateExpression<Self.Output == B1>( &v373,  (uint64_t)v439);
                                      outlined retain of Locale((uint64_t)v439);
                                      unint64_t v293 = BigString.index(before:)();
                                      uint64_t v295 = v294;
                                      uint64_t v297 = v296;
                                      uint64_t v299 = v298;
                                      outlined release of Locale((uint64_t)&v480);
                                      AttributedString.Guts._paragraphExtending(from:)( v293,  v295,  v297,  v299,  (uint64_t)&v379);
                                      uint64_t v36 = Range<>._utf8OffsetRange.getter();
                                      int64_t v29 = v300;
                                      goto LABEL_309;
                                    }
                                  }
                                }

                                goto LABEL_206;
                              }

                              __int128 v301 = v351[1];
                              v439[0] = *v351;
                              v439[1] = v301;
                              v439[2] = v351[2];
                              uint64_t v31 = (uint64_t)v439;
                              uint64_t result = v337 - 1;
                              if (__OFSUB__(v337, 1LL)) {
                                goto LABEL_388;
                              }
                              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v337) & 1) != 0)
                              {
                                __int128 v302 = *v351;
                                __int128 v303 = v351[1];
                                __int128 v438 = v351[2];
                                v437[1] = v303;
                                v437[0] = v302;
                                __int128 v304 = *v351;
                                __int128 v481 = v351[1];
                                __int128 v482 = v438;
                                __int128 v480 = v304;
                                outlined init with take of any PredicateExpression<Self.Output == B1>( &v480,  (uint64_t)v483);
                                outlined retain of Locale((uint64_t)v483);
                                unint64_t v305 = BigString.index(before:)();
                                uint64_t v307 = v306;
                                uint64_t v309 = v308;
                                uint64_t v311 = v310;
                                outlined release of Locale((uint64_t)v437);
                                AttributedString.Guts._paragraphExtending(from:)(v305, v307, v309, v311, (uint64_t)&v373);
                                uint64_t v36 = Range<>._utf8OffsetRange.getter();
                                int64_t v29 = v312;
                                LOBYTE(v38) = 0;
                              }

                              else
                              {
LABEL_289:
                                uint64_t v36 = 0LL;
                                int64_t v29 = 0LL;
                                LOBYTE(v38) = 1;
                              }

                              __int128 v313 = v351[1];
                              __int128 v434 = *v351;
                              __int128 v435 = v313;
                              __int128 v436 = v351[2];
                              if (v333 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
                              {
                                if ((v38 & 1) == 0) {
                                  goto LABEL_306;
                                }
                                if ((uint64_t)v336 < 1)
                                {
LABEL_206:
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  return swift_unknownObjectRelease();
                                }

            swift_unknownObjectRelease();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v156 = v145 & 0xFFFFFFFFFFFFF0FFLL | (v157 << 8);
LABEL_212:
            __int128 v179 = v149;
            __int128 v180 = v355;
            if (v142)
            {
              swift_unknownObjectRetain();
              __int128 v181 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v368, v156, v149, v142, v381);
              uint64_t result = swift_unknownObjectRelease_n();
            }

            else
            {
              __int128 v181 = 0LL;
            }

            uint64_t v361 = (void *)((char *)v380 - (char *)v146);
            if (__OFSUB__(v380, v146)) {
              goto LABEL_407;
            }
            __int128 v182 = v180[1];
            v436[3] = *v180;
            v436[4] = v182;
            v436[5] = v180[2];
            uint64_t result = BigString.utf8.getter();
            if (__OFSUB__(0LL, v146))
            {
LABEL_408:
              __break(1u);
              goto LABEL_409;
            }

            __int128 v183 = BigString.UTF8View.index(_:offsetBy:)();
            __int128 v185 = v184;
            int v330 = v187;
            uint64_t v331 = v186;
            uint64_t result = outlined release of Locale((uint64_t)&v425);
            if (v181 >= v356)
            {
LABEL_409:
              __break(1u);
              goto LABEL_410;
            }

            if (v368 != *(_BYTE **)(v23 + 88))
            {
LABEL_410:
              __break(1u);
LABEL_411:
              __break(1u);
LABEL_412:
              __break(1u);
              goto LABEL_413;
            }

            __int128 v381 = v181;
            unint64_t v363 = v156;
            int64_t v328 = v185;
            int v329 = v183;
            uint64_t v188 = *(uint64_t **)(v23 + 64);
            if (v179)
            {
              uint64_t v189 = v363;
              __int128 v190 = v179 + 24 * ((v363 >> ((4 * *(_BYTE *)(v179 + 18) + 8) & 0x3C)) & 0xF);
              uint64_t v191 = v22;
              uint64_t v192 = *(void *)(v190 + 40);
              int64_t v193 = v179;
              uint64_t v194 = *(uint64_t **)(v190 + 32);
              swift_bridgeObjectRetain();
              uint64_t v332 = v192;
              uint64_t v22 = v191;
              uint64_t result = swift_bridgeObjectRetain();
              unint64_t v195 = (uint64_t)v368;
              __int128 v196 = (uint64_t)v368;
            }

            else
            {
              int64_t v193 = 0LL;
              swift_unknownObjectRetain();
              uint64_t v189 = v363;
              specialized Rope._Node.subscript.getter(v363, (uint64_t)v188);
              uint64_t v194 = v197;
              uint64_t v332 = v198;
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v188 = *(uint64_t **)(v23 + 64);
              __int128 v196 = *(void *)(v23 + 88);
              unint64_t v195 = (uint64_t)v368;
            }

            unint64_t v358 = v381 + 1;
            __int128 v376 = (uint64_t *)v397;
            int64_t v389 = v195;
            __int128 v390 = v189;
            uint64_t v380 = (__int128 *)v430;
            uint64_t v345 = (uint64_t *)(v370 + 40);
            __int128 v391 = (uint64_t *)v193;
            __int128 v374 = v194;
LABEL_223:
            if (v195 != v196) {
              goto LABEL_397;
            }
            __int128 v360 = v193;
            if (v193)
            {
              uint64_t v199 = v363;
              uint64_t v200 = *(void *)(v193 + 24 * ((v363 >> ((4 * *(_BYTE *)(v193 + 18) + 8) & 0x3C)) & 0xF) + 24);
              swift_unknownObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }

            else
            {
              swift_unknownObjectRetain();
              uint64_t v199 = v363;
              uint64_t v200 = specialized Rope._Node.subscript.getter(v363, (uint64_t)v188);
            }

            uint64_t v201 = v379;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (__OFADD__(v361, v200)) {
              goto LABEL_398;
            }
            uint64_t v344 = (void *)((char *)v361 + v200);
            if (v188)
            {
              uint64_t v202 = ((-15LL << ((4 * *((_BYTE *)v188 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v188 + 18) | ((unint64_t)*((unsigned __int16 *)v188 + 8) << ((4 * *((_BYTE *)v188 + 18) + 8) & 0x3C));
              uint64_t result = swift_unknownObjectRetain();
            }

            else
            {
              uint64_t v202 = 0LL;
            }

            uint64_t v203 = v374;
            __int128 v204 = (uint64_t)v376;
            if (v199 >= v202) {
              goto LABEL_399;
            }
            uint64_t v359 = v196;
            if (v360)
            {
              uint64_t v205 = (4 * *(_BYTE *)(v360 + 18) + 8) & 0x3C;
              uint64_t v206 = ((v199 >> v205) & 0xF) + 1;
              if (v206 < *(unsigned __int16 *)(v360 + 16))
              {
                __int128 v357 = (v206 << v205) | ((-15LL << v205) - 1) & v199;
                uint64_t result = swift_unknownObjectRelease_n();
LABEL_238:
                uint64_t v188 = v391;
                goto LABEL_246;
              }
            }

            uint64_t v207 = *((unsigned __int8 *)v188 + 18);
            uint64_t v208 = (4 * v207 + 8) & 0x3C;
            uint64_t v209 = (v199 >> v208) & 0xF;
            *(void *)&__int128 v428 = v209;
            if (v207)
            {
              swift_unknownObjectRetain();
              __int128 v204 = (uint64_t)v376;
              uint64_t v210 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v188 + 3),  (uint64_t *)&v428,  (uint64_t)&v389,  (uint64_t)v188,  v207);
              uint64_t result = swift_unknownObjectRelease();
              __int128 v196 = v359;
              if ((v210 & 1) != 0)
              {
                uint64_t result = swift_unknownObjectRelease_n();
                __int128 v357 = v390;
                goto LABEL_238;
              }
            }

            else
            {
              uint64_t v211 = v209 + 1;
              if (v209 + 1 < (unint64_t)*((unsigned __int16 *)v188 + 8))
              {
                uint64_t result = swift_unknownObjectRelease_n();
                __int128 v357 = (v211 << v208) | ((-15LL << v208) - 1) & v199;
                __int128 v196 = v359;
                goto LABEL_246;
              }

              __int128 v196 = v359;
            }

            if (v188)
            {
              __int128 v212 = *((unsigned __int8 *)v188 + 18);
              unint64_t v213 = *((unsigned __int16 *)v188 + 8);
              uint64_t result = swift_unknownObjectRelease_n();
              uint64_t v214 = (4 * v212 + 8) & 0x3C;
              uint64_t v215 = ((-15LL << v214) - 1) & v212;
              uint64_t v216 = v213 << v214;
              __int128 v196 = v359;
              __int128 v357 = v215 | v216;
            }

            else
            {
              __int128 v357 = 0LL;
            }

            uint64_t v188 = 0LL;
            int64_t v389 = v196;
LABEL_246:
            if (v358 != v356)
            {
              if (v389 != *(void *)(v23 + 88))
              {
LABEL_400:
                __break(1u);
LABEL_401:
                __break(1u);
                goto LABEL_402;
              }

              uint64_t v368 = (_BYTE *)v389;
              uint64_t v343 = (unint64_t)v188;
              if (v188)
              {
                uint64_t v217 = &v188[3 * ((v357 >> ((4 * *((_BYTE *)v188 + 18) + 8) & 0x3C)) & 0xF)];
                uint64_t v218 = v217[4];
                uint64_t v219 = v217[5];
                swift_bridgeObjectRetain();
                uint64_t v349 = v219;
                swift_bridgeObjectRetain();
              }

              else
              {
                __int128 v220 = *(void *)(v23 + 64);
                swift_unknownObjectRetain();
                __int128 v204 = (uint64_t)v376;
                specialized Rope._Node.subscript.getter(v357, v220);
                uint64_t v349 = v221;
                uint64_t v218 = v222;
                swift_unknownObjectRelease();
              }

              uint64_t result = swift_bridgeObjectRetain();
              uint64_t v223 = 0LL;
              uint64_t v224 = v345;
              __int128 v381 = v218;
              while (1)
              {
                uint64_t v226 = v223 + 1;
                if (__OFADD__(v223, 1LL))
                {
                  __break(1u);
LABEL_386:
                  __break(1u);
                  goto LABEL_387;
                }

                uint64_t v228 = *(v224 - 1);
                uint64_t v227 = *v224;
                if (v203[2])
                {
                  swift_bridgeObjectRetain_n();
                  uint64_t v229 = specialized __RawDictionaryStorage.find<A>(_:)(v228, v227);
                  if ((v230 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue(v203[7] + 72 * v229, (uint64_t)&v404);
                  }

                  else
                  {
                    __int128 v408 = 0LL;
                    uint64_t v406 = 0u;
                    uint64_t v407 = 0u;
                    uint64_t v404 = 0u;
                    uint64_t v405 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  uint64_t v218 = v381;
                  if (!*(void *)(v381 + 16))
                  {
LABEL_261:
                    uint64_t v403 = 0LL;
                    uint64_t v401 = 0u;
                    v402 = 0u;
                    __int128 v399 = 0u;
                    __int128 v400 = 0u;
                    goto LABEL_268;
                  }
                }

                else
                {
                  __int128 v408 = 0LL;
                  uint64_t v406 = 0u;
                  uint64_t v407 = 0u;
                  uint64_t v404 = 0u;
                  uint64_t v405 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(void *)(v218 + 16)) {
                    goto LABEL_261;
                  }
                }

                swift_bridgeObjectRetain();
                unint64_t v231 = specialized __RawDictionaryStorage.find<A>(_:)(v228, v227);
                if ((v232 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v218 + 56) + 72 * v231,  (uint64_t)&v399);
                }

                else
                {
                  uint64_t v403 = 0LL;
                  uint64_t v401 = 0u;
                  v402 = 0u;
                  __int128 v399 = 0u;
                  __int128 v400 = 0u;
                }

                swift_bridgeObjectRelease();
LABEL_268:
                swift_bridgeObjectRelease();
                uint64_t v188 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v404,  (uint64_t)&v389,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v399,  v204,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v392)
                {
                  if (v398) {
                    goto LABEL_285;
                  }
                  outlined destroy of Any?( (uint64_t)&v389,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v399,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  uint64_t result = outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_255;
                }

                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v389,  (uint64_t)v387,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v398) {
                  goto LABEL_284;
                }
                unint64_t v233 = *(_OWORD *)(v204 + 48);
                uint64_t v384 = *(_OWORD *)(v204 + 32);
                __int128 v385 = v233;
                __int128 v386 = *(void *)(v204 + 64);
                unint64_t v234 = *(_OWORD *)(v204 + 16);
                uint64_t v382 = *(_OWORD *)v204;
                uint64_t v383 = v234;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v387,  (uint64_t)v436);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v382,  (uint64_t)v435);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v436,  (uint64_t)&v428,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v435,  (uint64_t)v380,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v429)
                {
                  if (!v431)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v428);
LABEL_253:
                    char v225 = 0;
                    goto LABEL_254;
                  }

                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v428, (uint64_t)v432);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v380, (uint64_t)v427);
                  unint64_t v235 = v433;
                  int64_t v372 = v434;
                  uint64_t v371 = __swift_project_boxed_opaque_existential_1(v432, v433);
                  uint64_t v378 = (__int128 *)&v328;
                  uint64_t v236 = *(void *)(v235 - 8);
                  MEMORY[0x1895F8858](v371);
                  uint64_t v238 = (char *)&v328 - ((v237 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v427,  (uint64_t)v426);
                  uint64_t v239 = type metadata accessor for Optional();
                  __int128 v377 = &v328;
                  unint64_t v240 = *(void *)(v239 - 8);
                  MEMORY[0x1895F8858](v239);
                  __int128 v242 = (char *)&v328 - v241;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  unint64_t v243 = swift_dynamicCast();
                  unint64_t v244 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v236 + 56);
                  if (v243)
                  {
                    v244(v242, 0LL, 1LL, v235);
                    (*(void (**)(char *, char *, uint64_t))(v236 + 32))(v238, v242, v235);
                    char v225 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v236 + 8))(v238, v235);
                  }

                  else
                  {
                    v244(v242, 1LL, 1LL, v235);
                    (*(void (**)(char *, uint64_t))(v240 + 8))(v242, v239);
                    char v225 = 0;
                  }

                  uint64_t v22 = v375;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v427);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v432);
                  uint64_t v203 = v374;
                  __int128 v204 = (uint64_t)v376;
                }

                else
                {
                  if (v431)
                  {
                    outlined destroy of Any?( (uint64_t)v380,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_253;
                  }

                  char v225 = 1;
                }

                __break(1u);
                JUMPOUT(0x1832D2F94LL);
              }

              goto LABEL_109;
            }

  if ((v167 & 1) == 0)
  {
    LOBYTE(v190) = 6;
    *(double *)int64_t v193 = v9;
    *(double *)__dst = v13;
    *((void *)&__dst[0] + 1) = v17;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v190,  (double *)v193,  v164,  v194);
    if (v15) {
      goto LABEL_213;
    }
    __int128 v15 = 0LL;
    unint64_t v9 = v194[0];
  }

  if (v165)
  {
    uint64_t result = swift_unknownObjectRelease();
    *a4 = v9;
  }

  else
  {
    LOBYTE(v190) = 13;
    *(double *)int64_t v193 = v9;
    *(double *)__dst = v13;
    *((void *)&__dst[0] + 1) = v17;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v190,  (double *)v193,  v162,  v194);
    uint64_t result = swift_unknownObjectRelease();
    if (v15) {
      goto LABEL_214;
    }
    *a4 = v194[0];
  }

  return result;
}

                        *(void *)(v121 + 8 * (v176 >> 6) + 64) |= 1LL << v176;
                        __int128 v183 = (uint64_t *)(*(void *)(v121 + 48) + 16 * v176);
                        *__int128 v183 = v171;
                        v183[1] = v173;
                        uint64_t v184 = (uint64_t *)(*(void *)(v121 + 56) + 16 * v176);
                        *uint64_t v184 = v27;
                        v184[1] = v170;
                        __int128 v185 = *(void *)(v121 + 16);
                        uint64_t v60 = __OFADD__(v185, 1LL);
                        uint64_t v186 = v185 + 1;
                        if (v60) {
                          goto LABEL_267;
                        }
                        *(void *)(v121 + 16) = v186;
                        swift_bridgeObjectRetain();
LABEL_213:
                        __int128 v4 = &unk_18C5D1000;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
LABEL_159:
                        __int128 v8 = v214 + 1;
                        char v225 = v121;
                        __int128 v7 = v216;
                      }

                      goto LABEL_4;
                    }
                  }
                }
              }
            }

            unint64_t v149 = v163;
          }
        }

        __break(1u);
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }

            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)int64_t v40 = xmmword_1837301C0;
            *(void *)(v40 + 16) = v8;
            *(void *)(v40 + 24) = a5;
            *(void *)(v40 + 32) = a3;
            *(void *)(v40 + 40) = a4;
            uint64_t v41 = 1;
            goto LABEL_45;
          }

          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if (__OFADD__(v57 + v60, 1LL)) {
            goto LABEL_146;
          }
          ++v60;
          if (v45 + v60 >= v21) {
            goto LABEL_147;
          }
        }

        unint64_t v62 = v57 + v60;
        switch(*(_BYTE *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0) {
              goto LABEL_142;
            }
            unint64_t v57 = 0LL;
            uint64_t v56 = 0;
            uint64_t v58 = 0;
            uint64_t v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              uint64_t v93 = v45 + v60;
              if (v45 + v60 < a4) {
                goto LABEL_270;
              }
              uint64_t v94 = a4 + a5;
              if (a4 + a5 < v93) {
                goto LABEL_270;
              }
              if (v94 >= v45 + v60 + 1) {
                uint64_t v94 = v45 + v60 + 1;
              }
              if (v94 <= a4)
              {
                a3 = 0LL;
                a5 = 1LL;
              }

              else
              {
                uint64_t v95 = a5 + a4;
                a5 = 1LL;
                uint64_t v96 = a4;
                do
                {
                  uint64_t v97 = 0LL;
                  __int128 v98 = 0LL;
                  uint64_t v99 = v95 - v96;
                  while (1)
                  {
                    uint64_t v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      uint64_t v74 = __OFADD__(a5++, 1LL);
                      if (v74) {
                        goto LABEL_275;
                      }
                      v96 += v98 + 1;
                      goto LABEL_208;
                    }

                    if (v100 == 13) {
                      break;
                    }
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1LL)) {
                      goto LABEL_254;
                    }
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94) {
                      goto LABEL_239;
                    }
                  }

                  unint64_t v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (*(_BYTE *)(v101 + 1) == 10) {
                      unint64_t v101 = v96 + v98 + 1;
                    }
                  }

                  uint64_t v74 = __OFADD__(a5++, 1LL);
                  if (v74) {
                    goto LABEL_276;
                  }
                  uint64_t v96 = v101 + 1;
LABEL_208:
                  ;
                }

                while (v96 < v94);
                a3 = 0LL;
              }

LABEL_269:
                            unint64_t v277 = (v280 - 1) & v280;
                            unint64_t v279 = __clz(__rbit64(v280)) + (v273 << 6);
                          }

                          __int128 v282 = (unint64_t *)(*(void *)(v272 + 48) + 16 * v279);
                          unint64_t v284 = *v282;
                          unint64_t v283 = v282[1];
                          uint64_t v285 = *(void *)(*(void *)(v272 + 56) + 8 * v279);
                          uint64_t result = specialized Array._getCount()(v285);
                          if (result)
                          {
                            uint64_t v286 = result;
                            if (result < 1) {
                              goto LABEL_344;
                            }
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            char v287 = (uint64_t *)(v285 + 40);
                            do
                            {
                              AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( v284,  v283,  *(v287 - 1),  *v287,  0);
                              v287 += 2;
                              --v286;
                            }

                            while (v286);
                            swift_bridgeObjectRelease();
                            uint64_t result = swift_bridgeObjectRelease();
                          }
                        }
                      }

        __int128 v185 = v140;
LABEL_270:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_288;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v163 = (int)POSIXErrorCode.rawValue.getter();
        uint64_t v164 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v165 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v23 = objc_msgSend(v164, sel_initWithDomain_code_userInfo_, v165, v163, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v166 = objc_msgSend(v23, sel_domain);
        uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
        __int128 v169 = v168;

        v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        __int128 v15 = v171;
        if (v167 == v170 && v169 == v171)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          __int128 v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v172 & 1) == 0)
          {
LABEL_280:
            __break(1u);
            goto LABEL_281;
          }
        }

                            __break(1u);
                            goto LABEL_270;
                          }
                        }
                      }
                    }
                  }

                  uint64_t v66 = v78;
                }

                            unint64_t v284 = (v287 - 1) & v287;
                            uint64_t v286 = __clz(__rbit64(v287)) + (v280 << 6);
                          }

                          __int128 v289 = (unint64_t *)(*(void *)(v279 + 48) + 16 * v286);
                          __int128 v291 = *v289;
                          __int128 v290 = v289[1];
                          __int128 v292 = *(void *)(*(void *)(v279 + 56) + 8 * v286);
                          uint64_t result = specialized Array._getCount()(v292);
                          if (result)
                          {
                            unint64_t v293 = result;
                            if (result < 1) {
                              goto LABEL_344;
                            }
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            uint64_t v294 = (uint64_t *)(v292 + 40);
                            do
                            {
                              AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( v291,  v290,  *(v294 - 1),  *v294,  0);
                              v294 += 2;
                              --v293;
                            }

                            while (v293);
                            swift_bridgeObjectRelease();
                            uint64_t result = swift_bridgeObjectRelease();
                          }
                        }
                      }

                  __break(1u);
                  goto LABEL_270;
                }

    __break(1u);
    goto LABEL_270;
  }

  uint64_t v16 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v18 = (unsigned __int8 *)v16;
  uint64_t v19 = v17;
  uint64_t v20 = (unint64_t)&v16[v17];
  if ((v13 & 1) == 0)
  {
    if (v17 <= 0)
    {
      uint64_t v46 = (unsigned __int8 *)v16;
      goto LABEL_95;
    }

    uint64_t v44 = 0LL;
    uint64_t v45 = v17;
    while (1)
    {
      if (v44 < 0 || (unint64_t v30 = v45 < 1, --v45, v30))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
        goto LABEL_254;
      }

      uint64_t v46 = (unsigned __int8 *)&v16[++v44];
    }

    __break(1u);
    goto LABEL_270;
  }

  uint64_t v16 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v18 = (unsigned __int8 *)v16;
  uint64_t v19 = v17;
  uint64_t v20 = (unint64_t)&v16[v17];
  if ((v13 & 1) == 0)
  {
    if (v17 <= 0)
    {
      uint64_t v46 = (unsigned __int8 *)v16;
      goto LABEL_95;
    }

    uint64_t v44 = 0LL;
    uint64_t v45 = v17;
    while (1)
    {
      if (v44 < 0 || (unint64_t v30 = v45 < 1, --v45, v30))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
        goto LABEL_254;
      }

      uint64_t v46 = (unsigned __int8 *)&v16[++v44];
    }

    __break(1u);
    goto LABEL_270;
  }

  uint64_t v16 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v18 = (unsigned __int8 *)v16;
  uint64_t v19 = v17;
  uint64_t v20 = (unint64_t)&v16[v17];
  if ((v13 & 1) == 0)
  {
    if (v17 <= 0)
    {
      uint64_t v46 = (unsigned __int8 *)v16;
      goto LABEL_95;
    }

    uint64_t v44 = 0LL;
    uint64_t v45 = v17;
    while (1)
    {
      if (v44 < 0 || (unint64_t v30 = v45 < 1, --v45, v30))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
        goto LABEL_254;
      }

      uint64_t v46 = (unsigned __int8 *)&v16[++v44];
    }

            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }

          LODWORD(v9) = v48[v61];
          if (__OFADD__(&v58[v61], 1LL)) {
            goto LABEL_144;
          }
        }

        uint64_t v63 = (uint64_t)&v58[v61];
        switch(v48[v61])
        {
          case '+':
          case '-':
            if (v63 != 0 || (v57 & 1) == 0) {
              goto LABEL_140;
            }
            uint64_t v58 = 0LL;
            unint64_t v57 = 0;
            uint64_t v59 = 0;
            uint64_t v60 = 0;
            v48 += v61 + 1;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v63 < 1 || (v60 & 1) == 0)
            {
              uint64_t v97 = (unint64_t)&v48[v61];
              __int128 v98 = a4 + i;
              if (a4 + i < v97) {
                goto LABEL_273;
              }
              if (v98 <= a4)
              {
                a3 = 0LL;
                i = 1LL;
              }

              else
              {
                uint64_t v99 = i + a4;
                i = 1LL;
                uint64_t v100 = a4;
                do
                {
                  unint64_t v101 = 0LL;
                  unint64_t v102 = 0LL;
                  uint64_t v103 = v99 - v100;
                  while (1)
                  {
                    uint64_t v104 = *(unsigned __int8 *)(v100 + v102);
                    if (v104 == 10) {
                      break;
                    }
                    if (v104 == 13)
                    {
                      uint64_t v105 = v100 + v102;
                      if (v97 < v100 + v102 + 1) {
                        goto LABEL_208;
                      }
                      if (((v100 - a4 + v102 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v102 + v103) >= 1)
                      {
                        if (*(_BYTE *)(v105 + 1) == 10) {
                          uint64_t v105 = v100 + v102 + 1;
                        }
LABEL_208:
                        uint64_t v72 = __OFADD__(i++, 1LL);
                        if (!v72)
                        {
                          uint64_t v100 = v105 + 1;
                          goto LABEL_212;
                        }

  __break(1u);
LABEL_270:
  __break(1u);
LABEL_271:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_272:
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v10);
  __break(1u);
LABEL_273:
  __break(1u);
}

              outlined destroy of Any?( (uint64_t)v423,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of Any?( (uint64_t)v424,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v354);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v359);
              outlined destroy of Any?( (uint64_t)&v365,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v375,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v380,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if ((v9 & 1) == 0) {
                goto LABEL_301;
              }
LABEL_270:
              v22 += 16LL;
              ++v219;
              __int128 v8 = v353;
              if (v220 == v10)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v22 = (unint64_t)v341;
                __int128 v8 = v341[8];
                uint64_t v197 = v341[11];
                unint64_t v9 = v320;
                uint64_t v335 = v321;
                uint64_t v21 = v337;
                unint64_t v365 = v337;
                __int128 v366 = v320;
                uint64_t v124 = v319;
                __int128 v367 = v319;
                int64_t v40 = __OFADD__(v333++, 1LL);
                if (!v40) {
                  goto LABEL_238;
                }
                __break(1u);
LABEL_299:
                outlined destroy of AttributedString._AttributeValue((uint64_t)v359);
LABEL_300:
                outlined destroy of Any?( (uint64_t)&v365,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                outlined destroy of Any?((uint64_t)&v375, (uint64_t *)v8);
                outlined destroy of Any?((uint64_t)&v380, (uint64_t *)v8);
LABEL_301:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v22 = (unint64_t)v341;
                uint64_t v124 = (uint64_t)v336;
                unint64_t v9 = v322;
                goto LABEL_302;
              }
            }
          }
        }

        __int128 v204 = *(unsigned __int8 *)(v8 + 18);
        uint64_t v205 = (4 * v204 + 8) & 0x3C;
        uint64_t v206 = (v9 >> v205) & 0xF;
        *(void *)&__int128 v391 = v206;
        if (v204)
        {
          swift_unknownObjectRetain();
          uint64_t v207 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v8 + 24,  (uint64_t *)&v391,  (uint64_t)&v365,  v8,  v204);
          swift_unknownObjectRelease();
          uint64_t v124 = (uint64_t)v336;
          if ((v207 & 1) != 0)
          {
            swift_unknownObjectRelease_n();
            uint64_t v203 = v366;
            goto LABEL_253;
          }
        }

        else
        {
          uint64_t v208 = v206 + 1;
          if (v206 + 1 < (unint64_t)*(unsigned __int16 *)(v8 + 16))
          {
            swift_unknownObjectRelease_n();
            uint64_t v203 = (v208 << v205) | ((-15LL << v205) - 1) & v9;
            uint64_t v124 = (uint64_t)v336;
            goto LABEL_261;
          }

          uint64_t v124 = (uint64_t)v336;
        }

        if (v8)
        {
          uint64_t v209 = *(unsigned __int8 *)(v8 + 18);
          uint64_t v210 = *(unsigned __int16 *)(v8 + 16);
          swift_unknownObjectRelease_n();
          uint64_t v211 = (4 * v209 + 8) & 0x3C;
          __int128 v212 = ((-15LL << v211) - 1) & v209;
          unint64_t v213 = v210 << v211;
          uint64_t v124 = (uint64_t)v336;
          uint64_t v203 = v212 | v213;
        }

        else
        {
          uint64_t v203 = 0LL;
        }

        __int128 v8 = 0LL;
        unint64_t v365 = v327;
        goto LABEL_261;
      }

LABEL_343:
                    __break(1u);
LABEL_344:
                    __break(1u);
LABEL_345:
                    __break(1u);
LABEL_346:
                    __break(1u);
LABEL_347:
                    __break(1u);
LABEL_348:
                    __break(1u);
LABEL_349:
                    __break(1u);
LABEL_350:
                    __break(1u);
LABEL_351:
                    __break(1u);
LABEL_352:
                    __break(1u);
LABEL_353:
                    __break(1u);
LABEL_354:
                    __break(1u);
                    goto LABEL_355;
                  }

                    __break(1u);
LABEL_344:
                    __break(1u);
LABEL_345:
                    __break(1u);
LABEL_346:
                    __break(1u);
LABEL_347:
                    __break(1u);
LABEL_348:
                    __break(1u);
LABEL_349:
                    __break(1u);
LABEL_350:
                    __break(1u);
LABEL_351:
                    __break(1u);
LABEL_352:
                    __break(1u);
LABEL_353:
                    __break(1u);
LABEL_354:
                    __break(1u);
                    goto LABEL_355;
                  }

LABEL_378:
  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  if (!v31) {
    __break(1u);
  }
LABEL_394:
  __break(1u);
LABEL_395:
  if (!v31) {
    __break(1u);
  }
LABEL_397:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  if (!v30) {
    __break(1u);
  }
LABEL_394:
  __break(1u);
LABEL_395:
  if (!v30) {
    __break(1u);
  }
LABEL_397:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(unint64_t *a1)
{
  uint64_t v5 = v1;
  uint64_t v6 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v7 = *(void **)v1;
    __int128 v8 = *(_OWORD *)(*(void *)v1 + 16LL);
    __int128 v9 = *(_OWORD *)(*(void *)v1 + 32LL);
    __int128 v453 = *(_OWORD *)(*(void *)v1 + 48LL);
    __int128 v452 = v9;
    __int128 v451 = v8;
    uint64_t v10 = v7[8];
    uint64_t v11 = v7[9];
    uint64_t v12 = v7[10];
    uint64_t v13 = v7[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = BigString.isEmpty.getter();
    if (v10)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v451);
      swift_unknownObjectRelease();
      uint64_t v2 = v10;
    }

    else
    {
      outlined retain of Locale((uint64_t)&v451);
      uint64_t v2 = 0LL;
    }

    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v10);
    swift_unknownObjectRelease();
    if (v10)
    {
      swift_unknownObjectRelease();
      if ((((v12 == 0) ^ v15) & 1) == 0)
      {
LABEL_7:
        __int128 v16 = v452;
        *(_OWORD *)(v14 + 16) = v451;
        *(_OWORD *)(v14 + 32) = v16;
        *(_OWORD *)(v14 + 48) = v453;
        *(void *)(v14 + 64) = v10;
        *(void *)(v14 + 72) = v11;
        *(void *)(v14 + 80) = v12;
        *(void *)(v14 + 88) = v13;
        *(void *)uint64_t v5 = v14;
        swift_release();
        uint64_t v6 = a1;
        goto LABEL_8;
      }
    }

    else
    {
      swift_unknownObjectRelease();
      if ((v15 & 1) != 0) {
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_41;
  }

LABEL_411:
      __break(1u);
      goto LABEL_412;
    }

    uint64_t v65 = v71;
    goto LABEL_103;
  }

  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  if (!v3) {
    __break(1u);
  }
LABEL_428:
  __break(1u);
LABEL_429:
  if (!v3) {
    __break(1u);
  }
LABEL_431:
  __break(1u);
  return result;
}

LABEL_359:
                  uint64_t v2 = 1LL;
                  uint64_t v208 = v53;
LABEL_372:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  uint64_t v2 = v40 & 0xFFFFFFFFFFFFF0FFLL | (v2 << 8);
                  uint64_t v207 = (uint64_t)v341;
                  if (!v15)
                  {
LABEL_373:
                    uint64_t result = swift_release();
                    uint64_t v219 = 0LL;
                    uint64_t v220 = v13 - v208;
                    if (!__OFSUB__(v13, v208))
                    {
LABEL_243:
                      *(void *)&__int128 v360 = v5;
                      *((void *)&v360 + 1) = v13;
                      *(void *)&__int128 v361 = v3;
                      *((void *)&v361 + 1) = v10;
                      *(void *)&__int128 v362 = v2;
                      *((void *)&v362 + 1) = v19;
                      uint64_t v363 = v219;
                      uint64_t v364 = v220;
                      specialized IndexingIterator.next()();
                      if (v221)
                      {
                        uint64_t v222 = v221;
                        uint64_t v223 = v323;
                        while (1)
                        {
                          __int128 v225 = v223[1];
                          __int128 v403 = *v223;
                          __int128 v404 = v225;
                          __int128 v405 = v223[2];
                          BigString.utf8.getter();
                          unint64_t v226 = v458;
                          uint64_t v329 = v459;
                          unint64_t v227 = BigString.UTF8View.index(_:offsetBy:)();
                          uint64_t v229 = v228;
                          uint64_t v2 = v230;
                          uint64_t v232 = v231;
                          outlined release of Locale((uint64_t)v391);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          char v233 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v222);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v321 = v2;
                          uint64_t v319 = v229;
                          uint64_t v320 = v232;
                          uint64_t v318 = v227;
                          if ((v233 & 1) != 0)
                          {
                            unint64_t v326 = v227 >> 10;
                            if (v227 >> 10 > v226 >> 10) {
                              break;
                            }
                          }

LABEL_337:
                              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v315 - 1, v315) & 1) != 0)
                              {
                                __int128 v296 = *v323;
                                __int128 v297 = v323[1];
                                __int128 v407 = v323[2];
                                v406[1] = v297;
                                v406[0] = v296;
                                __int128 v298 = *v323;
                                __int128 v361 = v323[1];
                                __int128 v362 = v407;
                                __int128 v360 = v298;
                                outlined init with take of any PredicateExpression<Self.Output == B1>( &v360,  (uint64_t)v462);
                                outlined retain of Locale((uint64_t)v462);
                                unint64_t v299 = BigString.index(before:)();
                                uint64_t v301 = v300;
                                uint64_t v303 = v302;
                                uint64_t v305 = v304;
                                outlined release of Locale((uint64_t)v406);
                                AttributedString.Guts._paragraphExtending(from:)(v299, v301, v303, v305, (uint64_t)&v353);
                                int64_t v306 = Range<>._utf8OffsetRange.getter();
                                int64_t v308 = v307;
                                int v309 = 1;
                                goto LABEL_341;
                              }
                            }

LABEL_375:
                    __break(1u);
LABEL_376:
                    __break(1u);
LABEL_377:
                    __break(1u);
LABEL_378:
                    __break(1u);
LABEL_379:
                    __break(1u);
LABEL_380:
                    __break(1u);
LABEL_381:
                    __break(1u);
LABEL_382:
                    __break(1u);
LABEL_383:
                    __break(1u);
LABEL_384:
                    __break(1u);
LABEL_385:
                    __break(1u);
LABEL_386:
                    __break(1u);
                    goto LABEL_387;
                  }

        __break(1u);
        goto LABEL_376;
      }

      unint64_t v70 = v164;
      BOOL v45 = v165;
      uint64_t v49 = v3[8];
      if (!v49)
      {
        uint64_t v73 = v3[11];
        if (!v44)
        {
          unint64_t v47 = v153;
          if (v153 > 0) {
            goto LABEL_368;
          }
          __int128 v9 = 0LL;
          BOOL v45 = 0LL;
          uint64_t v26 = 0LL;
          uint64_t v46 = 0LL;
          uint64_t v48 = v153;
          goto LABEL_171;
        }

        uint64_t v49 = 0LL;
LABEL_150:
        __int128 v9 = v3[9];
        unsigned __int128 v162 = v164;
        __int128 v163 = v165;
        uint64_t v46 = *((void *)&v165 + 1) - 1LL;
        if (__OFSUB__(*((void *)&v165 + 1), 1LL)) {
          goto LABEL_345;
        }
        if ((void)v164 != v73) {
          goto LABEL_346;
        }
        if (v49)
        {
          uint64_t v83 = *(unsigned __int8 *)(v49 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (*((void *)&v70 + 1) <= v83) {
            goto LABEL_347;
          }
        }

        else if (!*((void *)&v164 + 1))
        {
          goto LABEL_347;
        }

        if (v45)
        {
          uint64_t v84 = (4 * *(_BYTE *)(v45 + 18) + 8) & 0x3C;
          if (((*((void *)&v70 + 1) >> v84) & 0xFLL) != 0)
          {
            uint64_t v26 = ((((*((void *)&v70 + 1) >> v84) & 0xFLL) - 1) << v84) | ((-15LL << v84) - 1) & *((void *)&v70 + 1);
            *((void *)&v162 + 1) = v26;
            goto LABEL_163;
          }
        }

        uint64_t v85 = *(unsigned __int8 *)(v49 + 18);
        uint64_t v86 = (4 * v85 + 8) & 0x3C;
        uint64_t v87 = (*((void *)&v70 + 1) >> v86) & 0xFLL;
        uint64_t v160 = v87;
        if (v85)
        {
          swift_unknownObjectRetain();
          uint64_t v88 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v49 + 16,  v49 + 24,  &v160,  (uint64_t)&v162,  v85);
          uint64_t result = swift_unknownObjectRelease();
          if ((v88 & 1) == 0) {
            goto LABEL_354;
          }
          if ((void)v162 != (void)v70) {
            goto LABEL_348;
          }
          uint64_t v26 = *((void *)&v162 + 1);
          BOOL v45 = v163;
          if (v163)
          {
LABEL_163:
            uint64_t v89 = v45 + 24 * (((unint64_t)v26 >> ((4 * *(_BYTE *)(v45 + 18) + 8) & 0x3C)) & 0xF);
            unsigned __int128 v90 = *(void *)(v89 + 24);
            __int128 v9 = *(void *)(v89 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_169:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v48 = v154 - v90;
            if (__OFSUB__(v154, v90)) {
              goto LABEL_349;
            }
            uint64_t v73 = v70;
            unint64_t v47 = v153;
            goto LABEL_171;
          }
        }

        else
        {
          if (!v87) {
            goto LABEL_354;
          }
          uint64_t v26 = ((v87 - 1) << v86) | ((-15LL << v86) - 1) & *((void *)&v70 + 1);
          *((void *)&v162 + 1) = v26;
          BOOL v45 = v49;
          if (v49) {
            goto LABEL_163;
          }
        }

        swift_unknownObjectRetain();
        unsigned __int128 v90 = specialized Rope._Node.subscript.getter(v26, v49);
        __int128 v9 = v91;
        swift_unknownObjectRelease();
        goto LABEL_169;
      }

      uint64_t v71 = v3;
      uint64_t v72 = v3[10];
      if (v44 != v72)
      {
        uint64_t v73 = v71[11];
        int64_t v3 = v71;
        goto LABEL_150;
      }

      if (v72 < v153) {
        goto LABEL_355;
      }
      uint64_t v57 = v156[9];
      uint64_t v73 = v156[11];
      uint64_t v53 = *(unsigned __int8 *)(v49 + 18);
      if (*(_WORD *)(v49 + 16))
      {
        uint64_t v43 = -15LL;
        if (*(_BYTE *)(v49 + 18))
        {
          uint64_t result = swift_unknownObjectRetain_n();
          __int128 v9 = v153;
          __int128 v74 = v49;
          while (1)
          {
            uint64_t v77 = *(unsigned __int16 *)(v74 + 16);
            if (!*(_WORD *)(v74 + 16)) {
              goto LABEL_393;
            }
            uint64_t v78 = *(void *)(v74 + 40);
            uint64_t v32 = __OFSUB__(v9, v78);
            uint64_t v79 = v9 - v78;
            if (v32) {
              break;
            }
            if (v79 <= 0)
            {
              unsigned __int128 v75 = 0LL;
            }

            else
            {
              if ((_DWORD)v77 == 1) {
                goto LABEL_395;
              }
              uint64_t v80 = *(void *)(v74 + 64);
              __int128 v9 = v79 - v80;
              if (__OFSUB__(v79, v80)) {
                goto LABEL_332;
              }
              if (v9 >= 1)
              {
                if ((_DWORD)v77 != 2)
                {
                  uint64_t v81 = (void *)(v74 + 88);
                  unsigned __int128 v75 = 2LL;
                  while (v77 != v75)
                  {
                    unint64_t v82 = v9 - *v81;
                    if (__OFSUB__(v9, *v81)) {
                      goto LABEL_245;
                    }
                    if (v82 < 1) {
                      goto LABEL_132;
                    }
                    ++v75;
                    v81 += 3;
                    __int128 v9 = v82;
                    if (v77 == v75) {
                      goto LABEL_395;
                    }
                  }

                  __break(1u);
LABEL_245:
                  __break(1u);
LABEL_246:
                  __break(1u);
                  goto LABEL_247;
                }

LABEL_242:
                  swift_unknownObjectRetain();
                  uint64_t v219 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v2, v19, v15, v207);
                  swift_release();
                  uint64_t result = swift_unknownObjectRelease_n();
                  uint64_t v220 = v13 - v208;
                  if (!__OFSUB__(v13, v208)) {
                    goto LABEL_243;
                  }
                  goto LABEL_375;
                }

                uint64_t v2 = v100;
                uint64_t v53 = 1LL;
              }

                  swift_unknownObjectRetain();
                  uint64_t v222 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v3, v43, v16, v210);
                  swift_release();
                  uint64_t result = swift_unknownObjectRelease_n();
                  uint64_t v223 = v44 - v211;
                  if (!__OFSUB__(v44, v211)) {
                    goto LABEL_243;
                  }
                  goto LABEL_374;
                }

                int64_t v3 = v100;
                uint64_t v56 = 1LL;
              }

          swift_once();
          goto LABEL_72;
        }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v464, v331, v332, v334, v333);
    specialized IndexingIterator.next()();
    uint64_t v2 = v233;
    uint64_t v231 = v234;
    if (!v234) {
      goto LABEL_282;
    }
  }

  uint64_t v245 = v236;
  uint64_t v345 = v231 + 64;
  while (2)
  {
    uint64_t v246 = v232[1];
    uint64_t v406 = *v232;
    __int128 v407 = v246;
    __int128 v408 = v232[2];
    BigString.unicodeScalars.getter();
    __int128 v350 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v401);
    uint64_t v247 = v232[1];
    __int128 v403 = *v232;
    __int128 v404 = v247;
    __int128 v405 = v232[2];
    BigString.unicodeScalars.getter();
    int64_t v346 = v245;
    __int128 v348 = BigString.UnicodeScalarView.index(after:)();
    outlined release of Locale((uint64_t)v402);
    int64_t v248 = 1LL << *(_BYTE *)(v231 + 32);
    if (v248 < 64) {
      unint64_t v249 = ~(-1LL << v248);
    }
    else {
      unint64_t v249 = -1LL;
    }
    uint64_t v250 = v249 & *(void *)(v231 + 64);
    uint64_t v251 = (unint64_t)(v248 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v2 = 0LL;
LABEL_252:
    if (v250)
    {
      uint64_t v252 = __clz(__rbit64(v250));
      v250 &= v250 - 1;
      unint64_t v253 = v252 | (v2 << 6);
      goto LABEL_254;
    }

    uint64_t v257 = v2 + 1;
    if (!__OFADD__(v2, 1LL))
    {
      if (v257 < v251)
      {
        uint64_t v258 = *(void *)(v345 + 8 * v257);
        if (v258)
        {
LABEL_258:
          uint64_t v250 = (v258 - 1) & v258;
          unint64_t v253 = __clz(__rbit64(v258)) + (v257 << 6);
          uint64_t v2 = v257;
LABEL_254:
          uint64_t v254 = *(void *)(v231 + 56);
          int64_t v255 = (void *)(*(void *)(v231 + 48) + 16 * v253);
          uint64_t v256 = v255[1];
          *(void *)&uint64_t v353 = *v255;
          *((void *)&v353 + 1) = v256;
          outlined init with copy of AttributedString._AttributeValue(v254 + 72 * v253, (uint64_t)&v354);
          swift_bridgeObjectRetain();
LABEL_264:
          outlined init with take of LocalePreferences?( (uint64_t)&v353,  (uint64_t)&v359,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
          unint64_t v259 = v360;
          if (!v360)
          {
            swift_release();
            uint64_t v245 = v348;
            uint64_t v232 = (__int128 *)v336;
            if (v338 <= v348 >> 10) {
              goto LABEL_242;
            }
            continue;
          }

          unint64_t v260 = v359;
          unint64_t v261 = v362;
          unint64_t v262 = v363;
          outlined copy of AttributedString.AttributeRunBoundaries?(v362, v363);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v361);
          if (v262 != 1)
          {
            *(void *)&uint64_t v353 = v261;
            *((void *)&v353 + 1) = v262;
            int64_t v263 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
            outlined consume of AttributedString.AttributeRunBoundaries?(v261, v262);
            if ((v263 & 0x100000000LL) == 0 && v350 != (_DWORD)v263) {
              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( v260,  v259,  v346,  v348,  (uint64_t *)v419);
            }
          }

          swift_bridgeObjectRelease();
          goto LABEL_252;
        }

        if (v2 + 2 >= v251)
        {
          ++v2;
        }

        else
        {
          uint64_t v258 = *(void *)(v345 + 8 * (v2 + 2));
          if (v258)
          {
            uint64_t v257 = v2 + 2;
            goto LABEL_258;
          }

          if (v2 + 3 >= v251)
          {
            v2 += 2LL;
          }

          else
          {
            uint64_t v258 = *(void *)(v345 + 8 * (v2 + 3));
            if (v258)
            {
              uint64_t v257 = v2 + 3;
              goto LABEL_258;
            }

            uint64_t v257 = v2 + 4;
            if (v2 + 4 >= v251)
            {
              v2 += 3LL;
            }

            else
            {
              uint64_t v258 = *(void *)(v345 + 8 * v257);
              if (v258) {
                goto LABEL_258;
              }
              while (v251 - 5 != v2)
              {
                uint64_t v258 = *(void *)(v231 + 104 + 8 * v2++);
                if (v258)
                {
                  uint64_t v257 = v2 + 4;
                  goto LABEL_258;
                }
              }

              uint64_t v2 = v251 - 1;
            }
          }
        }
      }

      uint64_t v250 = 0LL;
      uint64_t v358 = 0LL;
      uint64_t v356 = 0u;
      uint64_t v357 = 0u;
      uint64_t v354 = 0u;
      uint64_t v355 = 0u;
      uint64_t v353 = 0u;
      goto LABEL_264;
    }

    break;
  }

  __break(1u);
LABEL_282:
  uint64_t v264 = *(void *)&v419[0];
LABEL_283:
  uint64_t result = swift_release();
  unint64_t v265 = 0LL;
  unint64_t v266 = v264 + 64;
  uint64_t v267 = 1LL << *(_BYTE *)(v264 + 32);
  uint64_t v268 = -1LL;
  if (v267 < 64) {
    uint64_t v268 = ~(-1LL << v267);
  }
  unint64_t v269 = v268 & *(void *)(v264 + 64);
  uint64_t v352 = (unint64_t)(v267 + 63) >> 6;
  while (2)
  {
    if (v269)
    {
      __int128 v270 = __clz(__rbit64(v269));
      v269 &= v269 - 1;
      __int128 v271 = v270 | (v265 << 6);
LABEL_299:
      unint64_t v274 = (unint64_t *)(*(void *)(v264 + 48) + 16 * v271);
      uint64_t v276 = *v274;
      uint64_t v275 = v274[1];
      uint64_t v2 = *(void *)(*(void *)(v264 + 56) + 8 * v271);
      uint64_t result = specialized Array._getCount()(v2);
      if (result)
      {
        uint64_t v277 = result;
        if (result < 1)
        {
          __break(1u);
          goto LABEL_371;
        }

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v278 = (uint64_t *)(v2 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( v276,  v275,  *(v278 - 1),  *v278,  0);
          v278 += 2;
          --v277;
        }

        while (v277);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }

      continue;
    }

    break;
  }

  BOOL v45 = __OFADD__(v265++, 1LL);
  if (v45) {
    goto LABEL_372;
  }
  if (v265 < v352)
  {
    __int128 v272 = *(void *)(v266 + 8 * v265);
    if (!v272)
    {
      __int128 v273 = v265 + 1;
      if (v265 + 1 >= v352) {
        goto LABEL_308;
      }
      __int128 v272 = *(void *)(v266 + 8 * v273);
      if (!v272)
      {
        __int128 v273 = v265 + 2;
        if (v265 + 2 >= v352) {
          goto LABEL_308;
        }
        __int128 v272 = *(void *)(v266 + 8 * v273);
        if (!v272)
        {
          __int128 v273 = v265 + 3;
          if (v265 + 3 >= v352) {
            goto LABEL_308;
          }
          __int128 v272 = *(void *)(v266 + 8 * v273);
          if (!v272)
          {
            while (1)
            {
              unint64_t v265 = v273 + 1;
              if (__OFADD__(v273, 1LL)) {
                break;
              }
              if (v265 >= v352) {
                goto LABEL_308;
              }
              __int128 v272 = *(void *)(v266 + 8 * v265);
              ++v273;
              if (v272) {
                goto LABEL_298;
              }
            }

              unint64_t v76 = &v48[v61 - a4];
              LODWORD(v9) = 46;
LABEL_243:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)uint64_t v92 = xmmword_1837301C0;
              *(void *)(v92 + 16) = v9;
              *(void *)(v92 + 24) = i;
              *(void *)(v92 + 32) = a3;
              *(void *)(v92 + 40) = v76;
              unint64_t v93 = 1;
LABEL_187:
              *(_BYTE *)(v92 + 48) = v93;
              swift_willThrow();
              return (char *)i;
            }

            uint64_t v58 = 0LL;
            uint64_t v57 = 0;
            uint64_t v60 = 0;
            v48 += v61 + 1;
            uint64_t v59 = 1;
            if ((unint64_t)v48 >= v22)
            {
              __break(1u);
              goto LABEL_115;
            }

            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)v9 != 101)
            {
LABEL_140:
              i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v48[v61],  a4,  i);
              a3 = v74;
              unint64_t v76 = v75;
              goto LABEL_243;
            }

LABEL_187:
    unint64_t v138 = (v143 - 1) & v143;
    unint64_t v141 = __clz(__rbit64(v143)) + (v5 << 6);
LABEL_168:
    uint64_t v142 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v141);
    uint64_t v2 = *v142;
    uint64_t v40 = v142[1];
    swift_bridgeObjectRetain();
    uint64_t v15 = (uint64_t)&v347;
    specialized Set._Variant.insert(_:)((unint64_t *)&v433, v2, v40);
    uint64_t result = swift_bridgeObjectRelease();
  }

  int64_t v144 = v43 + 5;
  if (v144 >= v139) {
    goto LABEL_188;
  }
  unint64_t v143 = *(void *)(v13 + 8 * v144);
  if (v143)
  {
    uint64_t v5 = v144;
    goto LABEL_187;
  }

  while (1)
  {
    uint64_t v5 = v144 + 1;
    if (__OFADD__(v144, 1LL)) {
      break;
    }
    if (v5 >= v139) {
      goto LABEL_188;
    }
    unint64_t v143 = *(void *)(v13 + 8 * v5);
    ++v144;
    if (v143) {
      goto LABEL_187;
    }
  }

    unint64_t v140 = (v144 - 1) & v144;
    uint64_t v142 = __clz(__rbit64(v144)) + (v5 << 6);
LABEL_168:
    unint64_t v143 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v142);
    int64_t v3 = *v143;
    char v42 = v143[1];
    swift_bridgeObjectRetain();
    __int128 v16 = (uint64_t)&v351;
    specialized Set._Variant.insert(_:)((unint64_t *)&v437, v3, v42);
    uint64_t result = swift_bridgeObjectRelease();
  }

  __int128 v145 = v46 + 5;
  if (v145 >= v44) {
    goto LABEL_188;
  }
  int64_t v144 = *(void *)(v139 + 8 * v145);
  if (v144)
  {
    uint64_t v5 = v145;
    goto LABEL_187;
  }

  while (1)
  {
    uint64_t v5 = v145 + 1;
    if (__OFADD__(v145, 1LL)) {
      break;
    }
    if (v5 >= v44) {
      goto LABEL_188;
    }
    int64_t v144 = *(void *)(v139 + 8 * v5);
    ++v145;
    if (v144) {
      goto LABEL_187;
    }
  }

                  swift_bridgeObjectRetain();
                  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v35,  (uint64_t)v172,  v10,  v13,  0LL,  0LL,  0LL,  0LL,  &v179,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
LABEL_196:
                  swift_willThrow();
                  return objc_msgSend((id)v7, sel_resignCurrent);
              }
            }

            uint64_t v171 = v11;
            unint64_t v37 = 4LL;
            uint64_t v34 = v172;
            switch(v36)
            {
              case 1:
              case 13:
                goto LABEL_135;
              case 2:
                goto LABEL_152;
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
              case 16:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 29:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
                goto LABEL_147;
              case 17:
                unint64_t v37 = 516LL;
                goto LABEL_152;
              case 28:
              case 69:
                unint64_t v37 = 640LL;
                goto LABEL_152;
              case 30:
                unint64_t v37 = 642LL;
                goto LABEL_152;
              case 63:
                unint64_t v37 = 514LL;
                goto LABEL_152;
              default:
                uint64_t v34 = v172;
                if (v36 != 102)
                {
LABEL_147:
                  unint64_t v37 = 512LL;
                  goto LABEL_152;
                }

                swift_retain_n();
                uint64_t v112 = v172;
                swift_retain_n();
                uint64_t v113 = v112;
                uint64_t v60 = 0LL;
                uint64_t v176 = 512LL;
                break;
            }

          uint64_t v136 = (v146 - 1) & v146;
          int64_t v139 = __clz(__rbit64(v146)) + (v10 << 6);
        }

        unint64_t v140 = 16 * v139;
        unint64_t v141 = (uint64_t *)(*(void *)(v6 + 48) + v140);
        unint64_t v143 = *v141;
        uint64_t v142 = v141[1];
        int64_t v144 = *(_OWORD *)(*(void *)(v6 + 56) + v140);
        __int128 v145 = (void *)(*(void *)(v197 + 48) + v140);
        *__int128 v145 = v143;
        v145[1] = v142;
        *(_OWORD *)(*(void *)(v197 + 56) + v140) = v144;
        swift_bridgeObjectRetain();
      }
    }

    BOOL v22 = swift_conformsToProtocol2();
    if (v22) {
      unint64_t v23 = v22;
    }
    else {
      unint64_t v23 = 0LL;
    }
    if (v22) {
      unint64_t v24 = v18;
    }
    else {
      unint64_t v24 = 0LL;
    }
    uint64_t v5 = v16 + 1;
    if (!v24) {
      continue;
    }
    break;
  }

  __int128 __src = v16;
  static AttributeScope.scopeDescription.getter(v24, v23);
  swift_bridgeObjectRetain();
  uint64_t v25 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v206 = (void *)v6;
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = specialized LazyMapSequence.Iterator.next()(v26);
  if (v28)
  {
    uint64_t v31 = v27;
    uint64_t v32 = v28;
    unint64_t v33 = v29;
    uint64_t v34 = v30;
    while (1)
    {
      char v42 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
      uint64_t v43 = *(void *)(v6 + 16);
      uint64_t v44 = (v41 & 1) == 0;
      uint64_t v35 = v43 + v44;
      if (__OFADD__(v43, v44)) {
        goto LABEL_252;
      }
      BOOL v45 = v41;
      if (*(void *)(v6 + 24) >= v35)
      {
        if ((v25 & 1) != 0)
        {
          if ((v41 & 1) != 0) {
            goto LABEL_42;
          }
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          char v52 = static _DictionaryStorage.copy(original:)();
          uint64_t v195 = (void *)v52;
          if (*(void *)(v6 + 16))
          {
            uint64_t v53 = v52;
            uint64_t v54 = (void *)(v52 + 64);
            uint64_t v55 = (unint64_t)((1LL << *(_BYTE *)(v53 + 32)) + 63) >> 6;
            __int128 v189 = v6 + 64;
            uint64_t v10 = 0LL;
            v195[2] = *(void *)(v6 + 16);
            uint64_t v56 = 1LL << *(_BYTE *)(v6 + 32);
            if (v56 < 64) {
              uint64_t v57 = ~(-1LL << v56);
            }
            else {
              uint64_t v57 = -1LL;
            }
            uint64_t v58 = v57 & *(void *)(v6 + 64);
            uint64_t v191 = (unint64_t)(v56 + 63) >> 6;
            while (1)
            {
              if (v58)
              {
                uint64_t v59 = __clz(__rbit64(v58));
                v58 &= v58 - 1;
                uint64_t v60 = v59 | (v10 << 6);
              }

              else
              {
                uint64_t v50 = __OFADD__(v10++, 1LL);
                if (v50) {
                  goto LABEL_263;
                }
                if (v10 >= v191) {
                  break;
                }
                unint64_t v67 = *(void *)(v189 + 8 * v10);
                if (!v67)
                {
                  unint64_t v68 = v10 + 1;
                  if (v10 + 1 >= v191) {
                    break;
                  }
                  unint64_t v67 = *(void *)(v189 + 8 * v68);
                  if (!v67)
                  {
                    unint64_t v68 = v10 + 2;
                    if (v10 + 2 >= v191) {
                      break;
                    }
                    unint64_t v67 = *(void *)(v189 + 8 * v68);
                    if (!v67)
                    {
                      unint64_t v68 = v10 + 3;
                      if (v10 + 3 >= v191) {
                        break;
                      }
                      unint64_t v67 = *(void *)(v189 + 8 * v68);
                      if (!v67)
                      {
                        unint64_t v68 = v10 + 4;
                        if (v10 + 4 >= v191) {
                          break;
                        }
                        unint64_t v67 = *(void *)(v189 + 8 * v68);
                        if (!v67)
                        {
                          unint64_t v68 = v10 + 5;
                          if (v10 + 5 >= v191) {
                            break;
                          }
                          unint64_t v67 = *(void *)(v189 + 8 * v68);
                          if (!v67)
                          {
                            while (1)
                            {
                              uint64_t v10 = v68 + 1;
                              if (__OFADD__(v68, 1LL)) {
                                break;
                              }
                              if (v10 >= v191) {
                                goto LABEL_83;
                              }
                              unint64_t v67 = *(void *)(v189 + 8 * v10);
                              ++v68;
                              if (v67) {
                                goto LABEL_78;
                              }
                            }

    if (v92 == ++v94)
    {
      uint64_t v92 = [v90 countByEnumeratingWithState:&v294 objects:v293 count:16];
      if (!v92) {
        goto LABEL_189;
      }
      goto LABEL_178;
    }
  }

  if (!v242) {
    goto LABEL_268;
  }
  if (!*(void *)(v95 + 64))
  {
    uint64_t v96 =  -[NSString initWithBytes:length:encoding:]( [NSString alloc],  "initWithBytes:length:encoding:",  v59,  v254,  [(id)v95 nsEncoding]);
    if (-[NSString length](v96, "length")) {
      goto LABEL_199;
    }
    goto LABEL_187;
  }

  uint64_t v96 = (NSString *)generateStringWithEncoding((void *)v95, (uint64_t)v59, v254, 1, v249, v240, &v267);
LABEL_199:
  *int64_t v242 = v96;
  if (v241) {
    *int64_t v241 = v267;
  }
LABEL_268:
  uint64_t v69 = (void *)v95;
  return [v69 nsEncoding];
}

LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  __break(1u);
LABEL_427:
  if (!v2) {
    __break(1u);
  }
LABEL_429:
  __break(1u);
LABEL_430:
  if (!v2) {
    __break(1u);
  }
LABEL_432:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)( unint64_t *a1, int a2)
{
  uint64_t v5 = v2;
  __int128 v7 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v8 = *(void **)v2;
    __int128 v9 = *(_OWORD *)(*(void *)v2 + 16LL);
    __int128 v10 = *(_OWORD *)(*(void *)v2 + 32LL);
    __int128 v457 = *(_OWORD *)(*(void *)v2 + 48LL);
    __int128 v456 = v10;
    __int128 v455 = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v13 = v8[10];
    uint64_t v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = BigString.isEmpty.getter();
    if (v11)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v455);
      swift_unknownObjectRelease();
      uint64_t v3 = v11;
    }

    else
    {
      outlined retain of Locale((uint64_t)&v455);
      uint64_t v3 = 0LL;
    }

    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v11);
    swift_unknownObjectRelease();
    if (v11)
    {
      swift_unknownObjectRelease();
      if ((((v13 == 0) ^ v16) & 1) == 0)
      {
LABEL_7:
        __int128 v17 = v456;
        *(_OWORD *)(v15 + 16) = v455;
        *(_OWORD *)(v15 + 32) = v17;
        *(_OWORD *)(v15 + 48) = v457;
        *(void *)(v15 + 64) = v11;
        *(void *)(v15 + 72) = v12;
        *(void *)(v15 + 80) = v13;
        *(void *)(v15 + 88) = v14;
        *(void *)uint64_t v5 = v15;
        swift_release();
        __int128 v7 = a1;
        goto LABEL_8;
      }
    }

    else
    {
      swift_unknownObjectRelease();
      if ((v16 & 1) != 0) {
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_40;
  }

LABEL_410:
      __break(1u);
      goto LABEL_411;
    }

    int64_t v44 = v73;
    goto LABEL_102;
  }

  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

LABEL_358:
                  uint64_t v3 = 1LL;
                  uint64_t v211 = v56;
LABEL_371:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  uint64_t v3 = v42 & 0xFFFFFFFFFFFFF0FFLL | (v3 << 8);
                  uint64_t v210 = v346;
                  if (!v16)
                  {
LABEL_372:
                    uint64_t result = swift_release();
                    uint64_t v222 = 0LL;
                    int64_t v223 = v44 - v211;
                    if (!__OFSUB__(v44, v211))
                    {
LABEL_243:
                      *(void *)&__int128 v364 = v325;
                      *((void *)&v364 + 1) = v44;
                      *(void *)&__int128 v365 = v5;
                      *((void *)&v365 + 1) = v11;
                      *(void *)&__int128 v366 = v3;
                      *((void *)&v366 + 1) = v43;
                      uint64_t v367 = v222;
                      int64_t v368 = v223;
                      specialized IndexingIterator.next()();
                      if (v224)
                      {
                        uint64_t v225 = v224;
                        unint64_t v226 = (__int128 *)v328;
                        while (1)
                        {
                          __int128 v228 = v226[1];
                          __int128 v407 = *v226;
                          __int128 v408 = v228;
                          __int128 v409 = v226[2];
                          BigString.utf8.getter();
                          unint64_t v229 = v462;
                          uint64_t v333 = v463;
                          unint64_t v230 = BigString.UTF8View.index(_:offsetBy:)();
                          uint64_t v232 = v231;
                          uint64_t v3 = v233;
                          uint64_t v235 = v234;
                          outlined release of Locale((uint64_t)v395);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          char v236 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v225);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v324 = v3;
                          uint64_t v322 = v232;
                          uint64_t v323 = v235;
                          uint64_t v321 = v230;
                          if ((v236 & 1) != 0)
                          {
                            unint64_t v330 = v230 >> 10;
                            if (v230 >> 10 > v229 >> 10) {
                              break;
                            }
                          }

        uint64_t v192 = v185 / *((double *)v183 + 19);
        if ((v192 > v181 || (v192 == v181 ? (uint64_t v193 = v182 >= v186) : (uint64_t v193 = 0), v193)) && v188 >= 0.85)
        {
          uint64_t v194 = v183[8];
          if (!v194)
          {
            uint64_t v195 = v189;
            uint64_t v196 = generateStringWithEncoding(v183, (uint64_t)v59, v254, 1, 0, 0LL, 0LL);
            uint64_t v189 = v195;
            if (!v196) {
              goto LABEL_372;
            }
          }
        }

        else
        {
          uint64_t v192 = v181;
          uint64_t v186 = v182;
          uint64_t v183 = v180;
        }

        uint64_t v181 = v192;
        unint64_t v182 = v186;
        uint64_t v180 = v183;
LABEL_372:
        __int128 v177 = v189;
        ++v179;
        if (!--v178) {
          goto LABEL_376;
        }
      }
    }

    uint64_t v248 = 1;
LABEL_376:
    uint64_t v197 = v248;
    uint64_t v28 = (NSStringEncoding)v258;
    if (v258) {
      uint64_t v198 = [v258 nsEncoding];
    }
    else {
      uint64_t v198 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v199 = v240;
    __int128 v200 = v246;
    if (v169 >= 0.05
      || (objc_msgSend( v256,  "containsObject:",  +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v198)) & 1) != 0)
    {
      unint64_t v201 = v249;
      uint64_t v202 = (NSStringEncoding)v260;
    }

    else
    {
      unint64_t v201 = v249;
      int64_t v244 = v180;
      if (v239)
      {
        __int128 v271 = 0u;
        unint64_t v272 = 0u;
        unint64_t v269 = 0u;
        uint64_t v270 = 0u;
        uint64_t v214 = [obj countByEnumeratingWithState:&v269 objects:v268 count:16];
        if (v214)
        {
          uint64_t v215 = v214;
          uint64_t v216 = *(void *)v270;
          while (2)
          {
            for (nn = 0LL; nn != v215; ++nn)
            {
              if (*(void *)v270 != v216) {
                objc_enumerationMutation(obj);
              }
              unint64_t v218 = *(void **)(*((void *)&v269 + 1) + 8 * nn);
              uint64_t v219 =  -[NSString initWithData:encoding:]( [NSString alloc],  "initWithData:encoding:",  v252,  [v218 integerValue]);
              if (v219)
              {
                if (v242) {
                  *uint64_t v242 = v219;
                }
                if (v241) {
                  *uint64_t v241 = 0;
                }
                free(v237);
                free(v238);
                return [v218 integerValue];
              }
            }

            uint64_t v215 = [obj countByEnumeratingWithState:&v269 objects:v268 count:16];
            uint64_t v199 = v240;
            uint64_t v28 = (NSStringEncoding)v258;
            if (v215) {
              continue;
            }
            break;
          }
        }
      }

      if (v28) {
        unint64_t v220 = *(void *)(v28 + 64);
      }
      else {
        unint64_t v220 = -1LL;
      }
      unint64_t v221 = v263;
      if (v263)
      {
        uint64_t v222 = 0LL;
        int64_t v223 = 0.0;
        uint64_t v224 = (id *)v237;
        __int128 v200 = v246;
        do
        {
          [*v224 confidence];
          if (v223 < v225 && *((void *)*v224 + 8) <= v220)
          {
            uint64_t v197 = 1;
            int64_t v223 = v225;
            uint64_t v222 = *v224;
          }

          ++v224;
          --v221;
        }

        while (v221);
      }

      else
      {
        uint64_t v222 = 0LL;
        int64_t v223 = 0.0;
        __int128 v200 = v246;
      }

      unint64_t v226 = __nel;
      if (__nel)
      {
        uint64_t v227 = (id *)v238;
        do
        {
          [*v227 confidence];
          if (v223 < v228 && *((void *)*v227 + 8) <= v220)
          {
            uint64_t v197 = 0;
            int64_t v223 = v228;
            uint64_t v222 = *v227;
          }

          ++v227;
          --v226;
        }

        while (v226);
      }

      uint64_t v28 = (NSStringEncoding)v258;
      uint64_t v202 = (NSStringEncoding)v260;
      if (v222) {
        uint64_t v28 = (NSStringEncoding)v222;
      }
      uint64_t v180 = v244;
    }

    if ((v197 & 1) == 0) {
      uint64_t v202 = (NSStringEncoding)v180;
    }
    if (v28 && v202 && v28 != v202)
    {
      uint64_t v203 = *(void *)(v28 + 64);
      if (v203 && v203 > *(void *)(v202 + 64)) {
        uint64_t v28 = v202;
      }
    }

    else if (!v28)
    {
      uint64_t v204 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_393:
      if (v200) {
        uint64_t v205 = v250;
      }
      else {
        uint64_t v205 = 0;
      }
      if (v205 && v204 != objc_msgSend((id)objc_msgSend(v256, "objectAtIndex:", 0), "integerValue")
        || (__int128 v200 = (void *)v28) != 0LL)
      {
        uint64_t v28 = [v200 nsEncoding];
      }

      uint64_t v206 = v201 ^ 1;
      if (v28) {
        uint64_t v206 = 1;
      }
      if (((v206 | !v250) & 1) != 0)
      {
        if (!v242) {
          goto LABEL_415;
        }
        if (!v28) {
          goto LABEL_415;
        }
        *uint64_t v242 = (NSString *)generateStringWithEncoding(v200, (uint64_t)v59, v254, 1, v201, v199, &v267);
        if (!v241) {
          goto LABEL_415;
        }
        __int128 v207 = v267;
        unint64_t v208 = v241;
      }

      else
      {
        if (![v256 count]) {
          goto LABEL_415;
        }
        uint64_t v28 = objc_msgSend((id)objc_msgSend(v256, "objectAtIndex:", 0), "integerValue");
        int64_t v209 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  CFStringConvertNSStringEncodingToEncoding(v28),  1LL);
        if (v209)
        {
          uint64_t v210 = v209;
          uint64_t v211 = -[NSData bytes](v252, "bytes");
          char v212 = -[NSData length](v252, "length");
          [v210 recognizeString:v211 withDataLength:v212 intoBuffer:0];
          uint64_t v213 = generateStringWithEncoding(v210, v211, v212, 1, 1, v199, &v267);
          if (v242)
          {
            if (v213) {
              *uint64_t v242 = (NSString *)v213;
            }
          }
        }

        unint64_t v208 = v241;
        if (!v241) {
          goto LABEL_415;
        }
        __int128 v207 = 1;
      }

      *unint64_t v208 = v207;
LABEL_415:
      free(v237);
      free(v238);
      return v28;
    }

    uint64_t v204 = [(id)v28 nsEncoding];
    goto LABEL_393;
  }

  uint64_t v92 = v91;
  uint64_t v93 = *(void *)v295;
LABEL_178:
  unint64_t v94 = 0LL;
  while (1)
  {
    if (*(void *)v295 != v93) {
      objc_enumerationMutation(v90);
    }
    uint64_t v95 = *(void *)(*((void *)&v294 + 1) + 8 * v94);
    if ([(id)v95 recognizeString:v59 withDataLength:v254 intoBuffer:0])
    {
      if (*(_BYTE *)(v95 + 162) && *(void *)(v95 + 72) <= 1uLL) {
        break;
      }
    }

LABEL_336:
                              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v319 - 1, v319) & 1) != 0)
                              {
                                __int128 v299 = *(_OWORD *)v328;
                                __int128 v300 = *(_OWORD *)(v328 + 16);
                                __int128 v411 = *(_OWORD *)(v328 + 32);
                                v410[1] = v300;
                                v410[0] = v299;
                                __int128 v301 = *(_OWORD *)v328;
                                __int128 v365 = *(_OWORD *)(v328 + 16);
                                __int128 v366 = v411;
                                __int128 v364 = v301;
                                outlined init with take of any PredicateExpression<Self.Output == B1>( &v364,  (uint64_t)v466);
                                outlined retain of Locale((uint64_t)v466);
                                unint64_t v302 = BigString.index(before:)();
                                uint64_t v304 = v303;
                                uint64_t v306 = v305;
                                uint64_t v308 = v307;
                                outlined release of Locale((uint64_t)v410);
                                AttributedString.Guts._paragraphExtending(from:)(v302, v304, v306, v308, (uint64_t)&v357);
                                int64_t v309 = Range<>._utf8OffsetRange.getter();
                                int64_t v311 = v310;
                                int v312 = 1;
                                goto LABEL_340;
                              }
                            }

LABEL_339:
                            int64_t v309 = 0LL;
                            int64_t v311 = 0LL;
                            int v312 = 0;
LABEL_340:
                            if ((v44 & 1) == 0 && v318 < v43)
                            {
                              uint64_t v362 = 0LL;
                              uint64_t v363 = 0LL;
                              AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v362, v11, v318, v43);
                            }

                            if (v319 < v311) {
                              int v313 = v312;
                            }
                            else {
                              int v313 = 0;
                            }
                            if (v313 == 1)
                            {
                              uint64_t v362 = 0LL;
                              uint64_t v363 = 0LL;
                              AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v362, v309, v319, v311);
                            }

                            goto LABEL_240;
                          }

                          unint64_t v265 = *(void *)(v259 + 8 * v258);
                          if (!v265)
                          {
                            int64_t v266 = v258 + 1;
                            if (v258 + 1 >= v350) {
                              goto LABEL_311;
                            }
                            unint64_t v265 = *(void *)(v259 + 8 * v266);
                            if (!v265)
                            {
                              int64_t v266 = v258 + 2;
                              if (v258 + 2 >= v350) {
                                goto LABEL_311;
                              }
                              unint64_t v265 = *(void *)(v259 + 8 * v266);
                              if (!v265)
                              {
                                int64_t v266 = v258 + 3;
                                if (v258 + 3 >= v350) {
                                  goto LABEL_311;
                                }
                                unint64_t v265 = *(void *)(v259 + 8 * v266);
                                if (!v265)
                                {
                                  while (1)
                                  {
                                    int64_t v258 = v266 + 1;
                                    if (__OFADD__(v266, 1LL)) {
                                      goto LABEL_391;
                                    }
                                    if (v258 >= v350) {
                                      goto LABEL_311;
                                    }
                                    unint64_t v265 = *(void *)(v259 + 8 * v258);
                                    ++v266;
                                    if (v265) {
                                      goto LABEL_301;
                                    }
                                  }
                                }
                              }
                            }

                            int64_t v258 = v266;
                          }

LABEL_409:
                  __break(1u);
                  goto LABEL_410;
                }

LABEL_408:
                __break(1u);
                goto LABEL_409;
              }

                  __break(1u);
LABEL_409:
                  __break(1u);
LABEL_410:
                  __break(1u);
LABEL_411:
                  __break(1u);
LABEL_412:
                  __break(1u);
                  goto LABEL_413;
                }

LABEL_407:
              __break(1u);
              goto LABEL_408;
            }

            goto LABEL_396;
          }

                __break(1u);
                goto LABEL_408;
              }

                __break(1u);
LABEL_408:
                __break(1u);
LABEL_409:
                __break(1u);
LABEL_410:
                __break(1u);
LABEL_411:
                __break(1u);
LABEL_412:
                __break(1u);
LABEL_413:
                __break(1u);
LABEL_414:
                __break(1u);
LABEL_415:
                __break(1u);
LABEL_416:
                __break(1u);
LABEL_417:
                __break(1u);
LABEL_418:
                __break(1u);
LABEL_419:
                __break(1u);
LABEL_420:
                __break(1u);
LABEL_421:
                __break(1u);
LABEL_422:
                __break(1u);
LABEL_423:
                if (!v16) {
                  __break(1u);
                }
LABEL_425:
                __break(1u);
LABEL_426:
                if (!v16) {
                  __break(1u);
                }
LABEL_428:
                __break(1u);
                return result;
              }

              a3 = v155;
            }
          }
        }
      }
    }

LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
LABEL_398:
          __break(1u);
LABEL_399:
          __break(1u);
          goto LABEL_400;
        }
      }

      __break(1u);
      goto LABEL_395;
    }

    unint64_t v144 = *(void *)(v139 + 8 * v46);
    ++v5;
    if (!v144)
    {
      uint64_t v5 = v46 + 1;
      if (v46 + 1 >= v44) {
        goto LABEL_188;
      }
      unint64_t v144 = *(void *)(v139 + 8 * v5);
      if (!v144)
      {
        uint64_t v5 = v46 + 2;
        if (v46 + 2 >= v44) {
          goto LABEL_188;
        }
        unint64_t v144 = *(void *)(v139 + 8 * v5);
        if (!v144)
        {
          uint64_t v5 = v46 + 3;
          if (v46 + 3 >= v44) {
            goto LABEL_188;
          }
          unint64_t v144 = *(void *)(v139 + 8 * v5);
          if (!v144)
          {
            uint64_t v5 = v46 + 4;
            if (v46 + 4 >= v44) {
              goto LABEL_188;
            }
            unint64_t v144 = *(void *)(v139 + 8 * v5);
            if (!v144) {
              break;
            }
          }
        }
      }
    }

              __break(1u);
LABEL_396:
              __break(1u);
LABEL_397:
              __break(1u);
LABEL_398:
              __break(1u);
LABEL_399:
              __break(1u);
              goto LABEL_400;
            }

            __break(1u);
            goto LABEL_396;
          }

                __break(1u);
LABEL_396:
                if (!v9) {
                  __break(1u);
                }
LABEL_398:
                __break(1u);
                return result;
              }

              __int128 v9 = v79;
              unsigned __int128 v75 = 1LL;
            }

uint64_t AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)( __int128 *a1, __int128 *a2, uint64_t a3)
{
  if (a3 == MEMORY[0x18960D798])
  {
    __int128 v7 = a2[6];
    __int128 v8 = a2[4];
    v52[5] = a2[5];
    v52[6] = v7;
    __int128 v9 = a2[2];
    v52[3] = a2[3];
    v52[4] = v8;
    __int128 v10 = *a2;
    v52[1] = a2[1];
    v52[2] = v9;
    v52[0] = v10;
    uint64_t v11 = *v3;
    __int128 v12 = *(_OWORD *)(*v3 + 32);
    v52[7] = *(_OWORD *)(*v3 + 16);
    v52[8] = v12;
    __int128 v13 = *(_OWORD *)(v3 + 1);
    v52[9] = *(_OWORD *)(v11 + 48);
    v52[10] = v13;
    __int128 v14 = *(_OWORD *)(v3 + 5);
    v52[11] = *(_OWORD *)(v3 + 3);
    v52[12] = v14;
    v52[13] = *(_OWORD *)(v3 + 7);
    outlined retain of Locale((uint64_t)v52);
    swift_unknownObjectRetain();
    BigSubstring.UnicodeScalarView.subscript.getter();
    swift_unknownObjectRelease();
    BigSubstring.UnicodeScalarView.isIdentical(to:)();
    outlined release of Locale((uint64_t)v52);
    outlined release of Locale((uint64_t)&v50);
  }

  uint64_t v15 = *v3;
  __int128 v16 = *(_OWORD *)(*v3 + 32);
  v51[3] = *(_OWORD *)(*v3 + 16);
  v51[4] = v16;
  v51[5] = *(_OWORD *)(v15 + 48);
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    uint64_t v18 = MEMORY[0x18961AFF0];
LABEL_25:
    MEMORY[0x1895F8858](result);
    AttributedString.UnicodeScalarView._mutateStringContents(in:attributes:with:)( a1,  v18,  MEMORY[0x18961AFF8],  (void (*)(__int128 *, __int128 *))partial apply for closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  unint64_t v19 = *(void *)a1;
  if (*(void *)a1 >= 0x800uLL && (*((void *)a1 + 4) ^ v19) <= 0x3FF)
  {
    BigString.utf8.getter();
    unint64_t v19 = BigString.UTF8View.index(before:)();
    uint64_t result = outlined release of Locale((uint64_t)v51);
  }

  uint64_t v20 = *(void *)(v15 + 64);
  int64_t v21 = v19 >> 11;
  if (v20) {
    uint64_t v22 = *(void *)(v15 + 80);
  }
  else {
    uint64_t v22 = 0LL;
  }
  if (v22 < v21) {
    goto LABEL_66;
  }
  uint64_t v23 = *(void *)(v15 + 72);
  uint64_t v24 = *(void *)(v15 + 88);
  if (!v20 || (v21 < *(void *)(v15 + 80) ? (BOOL v25 = *(unsigned __int16 *)(v20 + 16) == 0) : (BOOL v25 = 1), v25))
  {
    unint64_t v26 = swift_unknownObjectRetain_n();
    unint64_t v27 = specialized Rope._endPath.getter(v26);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v28 = v23;
    uint64_t v29 = 0LL;
    if (!v20)
    {
LABEL_20:
      if (v24 != *(void *)(v15 + 88)) {
        goto LABEL_67;
      }
      if (v29)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v30 = *(void *)(v15 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v27, v30);
        swift_unknownObjectRelease();
      }

      uint64_t v31 = swift_bridgeObjectRetain();
      uint64_t v18 = specialized _NativeDictionary.filter(_:)(v31);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease_n();
      goto LABEL_25;
    }

uint64_t closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = MEMORY[0x1895F8858](a1);
  if (*v10 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7,  a5);
    return BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
  }

  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance AttributedString.UnicodeScalarView( void *a1, __int128 *a2, ValueMetadata *a3)
{
  return (*((uint64_t (**)(__int128 *, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance AttributedString.UnicodeScalarView@<X0>( int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized RangeReplaceableCollection.init(repeating:count:)(*a1, a2, a3);
}

void *protocol witness for RangeReplaceableCollection.append(_:) in conformance AttributedString.UnicodeScalarView( int *a1)
{
  int v2 = *a1;
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  uint64_t v5 = v1[8];
  v7[0] = v1[5];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v7[0];
  _OWORD v7[5] = v3;
  _OWORD v7[6] = v4;
  v7[7] = v5;
  return specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(v7, v2);
}

void *protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance AttributedString.UnicodeScalarView( int *a1, void *a2)
{
  int v2 = *a1;
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  v7[0] = *a2;
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v7[0];
  _OWORD v7[5] = v3;
  _OWORD v7[6] = v4;
  v7[7] = v5;
  return specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(v7, v2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance AttributedString.UnicodeScalarView( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
}

unint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance AttributedString.UnicodeScalarView@<X0>( uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t result = specialized RangeReplaceableCollection.remove(at:)( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

void *protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance AttributedString.UnicodeScalarView( _OWORD *a1)
{
  __int128 v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  __int128 v2 = a1[3];
  v4[2] = a1[2];
  v4[3] = v2;
  return specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(v4);
}

void protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance AttributedString.UnicodeScalarView( uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

void protocol witness for RangeReplaceableCollection.removeFirst() in conformance AttributedString.UnicodeScalarView( _DWORD *a1@<X8>)
{
  *a1 = v2;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance AttributedString.UnicodeScalarView( uint64_t result)
{
  if ((result & 1) != 0)
  {
    unint64_t v2 = *(void *)(v1 + 40);
    if (v2 >> 10 < *(void *)(v1 + 8) >> 10)
    {
      __break(1u);
    }

    else
    {
      uint64_t v3 = *(void *)(v1 + 64);
      uint64_t v4 = *(void *)(v1 + 32);
      uint64_t v5 = *(void *)(v1 + 8);
      __int128 v6 = *(_OWORD *)(v1 + 16);
      uint64_t v7 = v4;
      unint64_t v8 = v2;
      __int128 v9 = *(_OWORD *)(v1 + 48);
      uint64_t v10 = v3;
      return (uint64_t)specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(&v5);
    }
  }

  else
  {
    swift_release();
    return AttributedString.UnicodeScalarView.init()(v1);
  }

  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance AttributedString.UnicodeScalarView( uint64_t (*a1)(uint64_t *))
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1);
}

double protocol witness for AttributedStringProtocol.unicodeScalars.getter in conformance AttributedString@<D0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  __int128 v4 = *(_OWORD *)(*v1 + 32);
  __int128 v28 = *(_OWORD *)(*v1 + 16);
  __int128 v29 = v4;
  __int128 v30 = *(_OWORD *)(v3 + 48);
  uint64_t v20 = BigString.startIndex.getter();
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = BigString.endIndex.getter();
  uint64_t v25 = v8;
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v14);
  outlined release of Locale((uint64_t)v15);
  swift_release();
  *(void *)a1 = v3;
  __int128 v11 = v17;
  *(_OWORD *)(a1 + 8) = v16;
  *(_OWORD *)(a1 + 24) = v11;
  double result = *(double *)&v18;
  __int128 v13 = v19;
  *(_OWORD *)(a1 + 40) = v18;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

uint64_t outlined retain of Slice<AttributedString.UnicodeScalarView>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Slice<AttributedString.UnicodeScalarView>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.UnicodeScalarView,  &type metadata for AttributedString.UnicodeScalarView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.UnicodeScalarView,  &type metadata for AttributedString.UnicodeScalarView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.UnicodeScalarView,  &type metadata for AttributedString.UnicodeScalarView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.UnicodeScalarView,  &type metadata for AttributedString.UnicodeScalarView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance <> DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString.UnicodeScalarView>,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView,  MEMORY[0x189617A18]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type Slice<AttributedString.UnicodeScalarView> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView,  MEMORY[0x18961A5C8]);
}

unint64_t lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Index,  &type metadata for AttributedString.Index);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Index,  &type metadata for AttributedString.Index);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString.UnicodeScalarView>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<AttributedString.UnicodeScalarView> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<AttributedString.UnicodeScalarView> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<AttributedString.UnicodeScalarView>,  MEMORY[0x189619678]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type Slice<AttributedString.UnicodeScalarView> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView,  MEMORY[0x18961A5F0]);
}

uint64_t initializeWithCopy for AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.UnicodeScalarView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.UnicodeScalarView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.UnicodeScalarView()
{
  return &type metadata for AttributedString.UnicodeScalarView;
}

uint64_t outlined init with take of (key: String, value: AttributedString._AttributeValue)?( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(a1, a2, v2[4], v2[5], v2[2]);
}

unint64_t lazy protocol witness table accessor for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView()
{
  unint64_t result = lazy protocol witness table cache variable for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18960D7A0], MEMORY[0x18960D798]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView);
  }

  return result;
}

uint64_t PredicateExpressions.ExpressionEvaluate.expression.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.ExpressionEvaluate.input.getter@<X0>( uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = TupleTypeMetadata;
  unint64_t v5 = *(void *)(TupleTypeMetadata + 16);
  if (v5 == 1)
  {
    uint64_t v6 = *(void *)(*(void *)(TupleTypeMetadata + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](TupleTypeMetadata);
    uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v5)
    {
      unint64_t v9 = 0LL;
      unint64_t v10 = *(void *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_9;
      }
      unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      __int128 v11 = (__int128 *)(v10 + 16);
      __int128 v12 = v8 + 16;
      unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *__int128 v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4LL;
      }

      while (v13);
      if (v5 != v9)
      {
LABEL_9:
        unint64_t v15 = v5 - v9;
        uint64_t v16 = 8 * v9;
        __int128 v17 = &v8[8 * v9];
        __int128 v18 = (uint64_t *)(v10 + v16);
        do
        {
          uint64_t v19 = *v18++;
          *(void *)__int128 v17 = v19;
          v17 += 8;
          --v15;
        }

        while (v15);
      }
    }

    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }

  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16))(v21, v2 + *(int *)(v3 + 68), v6);
  if (v5)
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v25 = (int *)(v6 + 32);
    unint64_t v26 = v5;
    do
    {
      if (v5 == 1) {
        int v27 = 0;
      }
      else {
        int v27 = *v25;
      }
      uint64_t v29 = *v24++;
      uint64_t v28 = v29;
      uint64_t v30 = *a2++;
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)(v28 - 8) + 32LL))(v30, &v21[v27]);
      v25 += 4;
      --v26;
    }

    while (v26);
  }

  return result;
}

void PredicateExpressions.ExpressionEvaluate.init(expression:input:)( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v29[4] = a9;
  v29[5] = a5 & 0xFFFFFFFFFFFFFFFELL;
  v29[6] = a2;
  if (a3 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    __int128 v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (a3)
    {
      unint64_t v19 = 0LL;
      if (a3 < 4) {
        goto LABEL_9;
      }
      unint64_t v19 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v20 = (__int128 *)(v16 + 16);
      uint64_t v21 = v18 + 16;
      unint64_t v22 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v23 = *v20;
        *(v21 - 1) = *(v20 - 1);
        *uint64_t v21 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 4LL;
      }

      while (v22);
      if (v19 != a3)
      {
LABEL_9:
        unint64_t v24 = a3 - v19;
        uint64_t v25 = 8 * v19;
        unint64_t v26 = &v18[8 * v19];
        int v27 = (uint64_t *)(v16 + v25);
        do
        {
          uint64_t v28 = *v27++;
          *(void *)unint64_t v26 = v28;
          v26 += 8;
          --v24;
        }

        while (v24);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  v29[7] = TupleTypeMetadata;
  v29[0] = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata);
  v29[8] = a3;
  v29[9] = a4;
  v29[10] = a5;
  v29[11] = a6;
  v29[12] = a7;
  v29[13] = a8;
  type metadata accessor for PredicateExpressions.ExpressionEvaluate();
}

void type metadata accessor for PredicateExpressions.ExpressionEvaluate()
{
}

uint64_t PredicateExpressions.ExpressionEvaluate.evaluate(_:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = 8 * v4;
  unint64_t v76 = v4;
  uint64_t v62 = a3;
  uint64_t v71 = a1;
  if (v4 == 1)
  {
    uint64_t v65 = &v57;
    uint64_t v69 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v64 = *(void *)(v69 - 8);
    MEMORY[0x1895F8858](a1);
    unsigned __int128 v75 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v8 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    unint64_t v9 = (char *)&v57 - v8;
    if (v4)
    {
      unint64_t v10 = 0LL;
      unint64_t v11 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v4 < 4) {
        goto LABEL_9;
      }
      unint64_t v10 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      __int128 v12 = (__int128 *)(v11 + 16);
      unint64_t v13 = v9 + 16;
      unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4LL;
      }

      while (v14);
      if (v4 != v10)
      {
LABEL_9:
        unint64_t v16 = v4 - v10;
        uint64_t v17 = 8 * v10;
        __int128 v18 = &v9[8 * v10];
        unint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)__int128 v18 = v20;
          v18 += 8;
          --v16;
        }

        while (v16);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v65 = &v57;
    uint64_t v69 = TupleTypeMetadata;
    uint64_t v64 = *(void *)(TupleTypeMetadata - 8);
    uint64_t v22 = MEMORY[0x1895F8858](TupleTypeMetadata);
    unsigned __int128 v75 = (char *)&v57 - v23;
    uint64_t v74 = (char *)&v57;
    MEMORY[0x1895F8858](v22);
    if (v4)
    {
      unint64_t v24 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v25 = *(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v26 = (uint64_t *)((char *)&v57 - v8);
      uint64_t v27 = v76;
      do
      {
        v24 += 8LL;
        v25 += 8LL;
        *v26++ = swift_getAssociatedTypeWitness();
        --v27;
      }

      while (v27);
    }

    unint64_t v4 = v76;
    uint64_t AssociatedTypeWitness = swift_getTupleTypeMetadata();
  }

  uint64_t v67 = &v57;
  uint64_t v68 = AssociatedTypeWitness;
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v74 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = &v57;
  MEMORY[0x1895F8858](v28);
  if (v4)
  {
    unint64_t v30 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v31 = *(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v32 = (uint64_t *)((char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v33 = v76;
    do
    {
      v30 += 8LL;
      v31 += 8LL;
      *v32++ = swift_getAssociatedTypeWitness();
      --v33;
    }

    while (v33);
  }

  uint64_t v34 = v76;
  uint64_t v35 = type metadata accessor for Expression( 0LL,  v76,  (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  *(void *)(a2 + 40));
  uint64_t v36 = *(void *)(v35 - 8);
  MEMORY[0x1895F8858](v35);
  uint64_t v38 = (char *)&v57 - v37;
  unint64_t v39 = v72;
  uint64_t v40 = *v71;
  uint64_t v77 = *v71;
  unint64_t v41 = v73;
  uint64_t result = (*(uint64_t (**)(uint64_t *, void))(*(void *)(a2 + 48) + 16LL))(&v77, *(void *)(a2 + 24));
  if (!v41)
  {
    uint64_t v58 = v38;
    uint64_t v59 = v36;
    uint64_t v60 = v35;
    uint64_t v61 = &v57;
    MEMORY[0x1895F8858](result);
    int64_t v73 = (uint64_t *)((char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v43 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v64 + 16))(v75, v39 + *(int *)(a2 + 68), v69);
    if (v34)
    {
      uint64_t v70 = v40;
      uint64_t v46 = 0LL;
      unint64_t v47 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v71 = (uint64_t *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      unint64_t v72 = v47;
      uint64_t v48 = 32LL;
      do
      {
        if (v34 == 1) {
          uint64_t v49 = (uint64_t)v74;
        }
        else {
          uint64_t v49 = (uint64_t)&v74[*(int *)(v68 + v48)];
        }
        uint64_t v50 = *(void *)(v72 + 8 * v46);
        uint64_t v51 = v71[v46];
        uint64_t v52 = *(void *)(v50 - 8);
        MEMORY[0x1895F8858](v43);
        uint64_t v54 = (char *)&v57 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v52 + 16))(v54);
        uint64_t v77 = v70;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 16))(&v77, v50, v51);
        uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v54, v50);
        v73[v46++] = v49;
        v48 += 16LL;
        uint64_t v34 = v76;
      }

      while (v76 != v46);
    }

    uint64_t v55 = v60;
    uint64_t v56 = v58;
    Expression.evaluate(_:)(v73, v60, v44, v45, v62);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v55);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v74, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v75, v69);
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ExpressionEvaluate.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_evaluate<A, B, C>(_:_:)( uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v12 = TupleTypeMetadata;
  uint64_t v45 = a9;
  unint64_t v13 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v14 = 8 * a3;
  if (a3 == 1)
  {
    uint64_t v15 = *v13;
  }

  else
  {
    MEMORY[0x1895F8858](TupleTypeMetadata);
    unint64_t v16 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (a3)
    {
      unint64_t v17 = 0LL;
      if (a3 < 4) {
        goto LABEL_9;
      }
      unint64_t v17 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      __int128 v18 = (__int128 *)(v13 + 2);
      unint64_t v19 = v16 + 16;
      unint64_t v20 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *unint64_t v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4LL;
      }

      while (v20);
      if (v17 != a3)
      {
LABEL_9:
        unint64_t v22 = a3 - v17;
        uint64_t v23 = v17;
        unint64_t v24 = &v16[8 * v17];
        unint64_t v25 = &v13[v23];
        do
        {
          uint64_t v26 = *v25++;
          *(void *)unint64_t v24 = v26;
          v24 += 8;
          --v22;
        }

        while (v22);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v15 = TupleTypeMetadata;
  }

  uint64_t v27 = MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v29 = (char *)v44 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v44[1] = v44;
  MEMORY[0x1895F8858](v27);
  unint64_t v31 = (char *)v44 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 16);
  uint64_t v46 = a4;
  uint64_t v34 = v33(v31, v12, a4);
  v44[0] = v44;
  MEMORY[0x1895F8858](v34);
  uint64_t v35 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3)
  {
    uint64_t v36 = (int *)(v15 + 32);
    uint64_t v37 = (char **)((char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    unint64_t v38 = a3;
    do
    {
      if (a3 == 1) {
        int v39 = 0;
      }
      else {
        int v39 = *v36;
      }
      uint64_t v41 = *v13++;
      uint64_t v40 = v41;
      uint64_t v42 = &v29[v39];
      uint64_t v43 = *a2++;
      (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 16LL))(v42, v43);
      *v37++ = v42;
      v36 += 4;
      --v38;
    }

    while (v38);
  }

  PredicateExpressions.ExpressionEvaluate.init(expression:input:)( (uint64_t)v31,  (uint64_t)v35,  a3,  v46,  v47,  v48,  v49,  v50,  v45);
}

  ;
}

uint64_t PredicateExpressions.ExpressionEvaluate.description.getter(uint64_t a1)
{
  v21[0] = 0LL;
  v21[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(45LL);
  v2._object = (void *)0x80000001839CC890LL;
  v2._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x3A7475706E69202CLL;
  v3._object = (void *)0xE900000000000020LL;
  String.append(_:)(v3);
  if (*(void *)(a1 + 16) != 1LL)
  {
    MEMORY[0x1895F8858](v4);
    uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v5)
    {
      unint64_t v8 = 0LL;
      unint64_t v9 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_8;
      }
      unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v10 = (__int128 *)(v9 + 16);
      unint64_t v11 = v7 + 16;
      unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *unint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4LL;
      }

      while (v12);
      if (v5 != v8)
      {
LABEL_8:
        unint64_t v14 = v5 - v8;
        uint64_t v15 = 8 * v8;
        unint64_t v16 = &v7[8 * v8];
        unint64_t v17 = (uint64_t *)(v9 + v15);
        do
        {
          uint64_t v18 = *v17++;
          *(void *)unint64_t v16 = v18;
          v16 += 8;
          --v14;
        }

        while (v14);
      }
    }

    swift_getTupleTypeMetadata();
  }

  _print_unlocked<A, B>(_:_:)();
  v19._countAndFlagsBits = 41LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  return v21[0];
}

uint64_t PredicateExpressions.ExpressionEvaluate<>.encode(to:)( uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = a4;
  uint64_t v7 = (void *)TupleTypeMetadata;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v43 = a6;
  uint64_t v44 = v8;
  if (v8 == 1)
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](TupleTypeMetadata);
    unint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v10)
    {
      unint64_t v13 = 0LL;
      unint64_t v14 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v10 < 4) {
        goto LABEL_9;
      }
      unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v15 = (__int128 *)(v14 + 16);
      unint64_t v16 = v12 + 16;
      unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *unint64_t v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4LL;
      }

      while (v17);
      if (v10 != v13)
      {
LABEL_9:
        unint64_t v19 = v10 - v13;
        uint64_t v20 = 8 * v13;
        __int128 v21 = &v12[8 * v13];
        unint64_t v22 = (uint64_t *)(v14 + v20);
        do
        {
          uint64_t v23 = *v22++;
          *(void *)__int128 v21 = v23;
          v21 += 8;
          --v19;
        }

        while (v19);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v9 = TupleTypeMetadata;
  }

  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v26 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  uint64_t v27 = v45;
  uint64_t v28 = v49;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (v28) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  }
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v27 + *(int *)(a2 + 68), v9);
  uint64_t v40 = (uint64_t)&v40;
  uint64_t v41 = v9;
  if (v44)
  {
    unint64_t v31 = (uint64_t *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v32 = v44;
    unint64_t v33 = v43 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v34 = 32LL;
    uint64_t v42 = v26;
    uint64_t v43 = v24;
    while (1)
    {
      uint64_t v45 = v32;
      uint64_t v49 = 0LL;
      uint64_t v46 = &v40;
      uint64_t v35 = *v31;
      uint64_t v36 = *(void *)(*v31 - 8);
      MEMORY[0x1895F8858](v30);
      unint64_t v38 = (char *)&v40 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v36 + 16))(v38);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
      uint64_t v39 = v49;
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v39) {
        break;
      }
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v38, v35);
      v34 += 16LL;
      v33 += 8LL;
      ++v31;
      uint64_t v32 = v45 - 1;
      uint64_t v26 = v42;
      uint64_t v24 = v43;
      if (v45 == 1) {
        goto LABEL_18;
      }
    }

    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v41);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  }

void PredicateExpressions.ExpressionEvaluate<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  v33[7] = a7;
  uint64_t v12 = a3;
  v33[4] = a8;
  v33[13] = a4 & 0xFFFFFFFFFFFFFFFELL;
  v33[23] = a2;
  if (a2 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    __int128 v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v15)
    {
      unint64_t v19 = 0LL;
      if (v15 < 4) {
        goto LABEL_9;
      }
      unint64_t v19 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v20 = (__int128 *)(v16 + 16);
      __int128 v21 = v18 + 16;
      unint64_t v22 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v23 = *v20;
        *(v21 - 1) = *(v20 - 1);
        *__int128 v21 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 4LL;
      }

      while (v22);
      if (v19 != v15)
      {
LABEL_9:
        unint64_t v24 = v15 - v19;
        uint64_t v25 = 8 * v19;
        uint64_t v26 = &v18[8 * v19];
        uint64_t v27 = (uint64_t *)(v16 + v25);
        do
        {
          uint64_t v28 = *v27++;
          *(void *)uint64_t v26 = v28;
          v26 += 8;
          --v24;
        }

        while (v24);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v12 = a3;
  }

  v33[5] = TupleTypeMetadata;
  v33[10] = v33;
  v33[12] = *(void *)(TupleTypeMetadata - 8);
  uint64_t v29 = MEMORY[0x1895F8858](TupleTypeMetadata);
  v33[14] = (char *)v33 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v33[9] = v33;
  MEMORY[0x1895F8858](v29);
  v33[6] = (char *)v33 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v33[15] = v32;
  v33[16] = v12;
  v33[17] = a4;
  v33[18] = a5;
  v33[19] = a6;
  v33[20] = a9;
  type metadata accessor for PredicateExpressions.ExpressionEvaluate();
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = ((uint64_t (*)(void))MEMORY[0x1895F8858])();
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v10)
  {
    for (uint64_t i = 0LL; i != v10; ++i)
      *(void *)&v12[8 * i] = *(void *)(*(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8 * i) + 16LL);
    MEMORY[0x1895F8858](v9);
    uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v18 = 0LL;
    do
    {
      *(void *)&v17[8 * v18] = *(void *)(*(void *)(v15 + 8 * v18) + 24LL);
      ++v18;
    }

    while (v14 != v18);
  }

  else
  {
    MEMORY[0x1895F8858](v9);
    uint64_t v17 = (char *)v21 - v19;
  }

  v22[0] = v7;
  v22[1] = v8;
  v22[2] = v12;
  v22[3] = v17;
  a1[2] = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>,  a2,  v22);
  v21[0] = v7;
  v21[1] = v8;
  void v21[2] = v12;
  v21[3] = v17;
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>,  a2,  v21);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PredicateExpressions.ExpressionEvaluate<>.encode(to:)( a1,  a2,  a3,  *(uint64_t **)(a3 - 16),  a5,  *(void *)(a3 - 32));
}

uint64_t type metadata completion function for PredicateExpressions.ExpressionEvaluate(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    v20[0] = *(void *)(result - 8) + 64LL;
    if (*(void *)(a1 + 16) == 1LL)
    {
      uint64_t result = swift_checkMetadataState();
      if (v4 > 0x3F) {
        return result;
      }
LABEL_14:
      v20[1] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata();
      return 0LL;
    }

    MEMORY[0x1895F8858](result);
    uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v5)
    {
      unint64_t v8 = 0LL;
      unint64_t v9 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_11;
      }
      unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (__int128 *)(v9 + 16);
      uint64_t v11 = v7 + 16;
      unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4LL;
      }

      while (v12);
      if (v5 != v8)
      {
LABEL_11:
        unint64_t v14 = v5 - v8;
        uint64_t v15 = 8 * v8;
        uint64_t v16 = &v7[8 * v8];
        uint64_t v17 = (uint64_t *)(v9 + v15);
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }

        while (v14);
      }
    }

    uint64_t result = swift_getTupleTypeMetadata();
    if (v19 <= 0x3F) {
      goto LABEL_14;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.ExpressionEvaluate( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*(void *)(*(void *)(a3 + 24) - 8LL) + 16LL))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 68);
    unint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    if (*(void *)(a3 + 16) == 1LL)
    {
      uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
    }

    else
    {
      MEMORY[0x1895F8858](v7);
      uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      if (v13)
      {
        unint64_t v16 = 0LL;
        unint64_t v17 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v13 < 4) {
          goto LABEL_11;
        }
        unint64_t v16 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v18 = (__int128 *)(v17 + 16);
        unint64_t v19 = v15 + 16;
        unint64_t v20 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *unint64_t v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 4LL;
        }

        while (v20);
        if (v13 != v16)
        {
LABEL_11:
          unint64_t v22 = v13 - v16;
          uint64_t v23 = 8 * v16;
          unint64_t v24 = &v15[8 * v16];
          uint64_t v25 = (uint64_t *)(v17 + v23);
          do
          {
            uint64_t v26 = *v25++;
            *(void *)unint64_t v24 = v26;
            v24 += 8;
            --v22;
          }

          while (v22);
        }
      }

      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }

    (*(void (**)(char *, char *))(*(void *)(TupleTypeMetadata - 8) + 16LL))(v9, v10);
  }

  return v4;
}

uint64_t destroy for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))();
  uint64_t v5 = *(int *)(a2 + 68);
  if (*(void *)(a2 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v4);
    unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v7)
    {
      unint64_t v10 = 0LL;
      unint64_t v11 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (__int128 *)(v11 + 16);
      unint64_t v13 = v9 + 16;
      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4LL;
      }

      while (v14);
      if (v7 != v10)
      {
LABEL_9:
        unint64_t v16 = v7 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        unint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }

        while (v16);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)(TupleTypeMetadata - 8) + 8LL))(a1 + v5);
}

uint64_t initializeWithCopy for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8LL) + 16LL))();
  uint64_t v7 = *(int *)(a3 + 68);
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8LL) + 24LL))();
  uint64_t v7 = *(int *)(a3 + 68);
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 24LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8LL) + 32LL))();
  uint64_t v7 = *(int *)(a3 + 68);
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8LL) + 40LL))();
  uint64_t v7 = *(int *)(a3 + 68);
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.ExpressionEvaluate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1830C7234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(a1, a2);
  }
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_11;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_11:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48LL))( a1 + *(int *)(a3 + 68),  a2);
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.ExpressionEvaluate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1830C7390(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v7 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, a2, a2);
  }
  if (*(void *)(a4 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a4 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v10)
    {
      unint64_t v13 = 0LL;
      unint64_t v14 = *(void *)(a4 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v10 < 4) {
        goto LABEL_11;
      }
      unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      __int128 v15 = (__int128 *)(v14 + 16);
      unint64_t v16 = v12 + 16;
      unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *unint64_t v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4LL;
      }

      while (v17);
      if (v10 != v13)
      {
LABEL_11:
        unint64_t v19 = v10 - v13;
        uint64_t v20 = 8 * v13;
        __int128 v21 = &v12[8 * v13];
        uint64_t v22 = (uint64_t *)(v14 + v20);
        do
        {
          uint64_t v23 = *v22++;
          *(void *)__int128 v21 = v23;
          v21 += 8;
          --v19;
        }

        while (v19);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56LL))( a1 + *(int *)(a4 + 68),  a2,  a2);
}

void static String.StandardComparator.localizedStandard.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 833LL;
  *(_WORD *)(a1 + 8) = 1;
}

void static String.StandardComparator.localized.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 1;
}

void static String.StandardComparator.lexical.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 0;
}

unint64_t one-time initialization function for validAlgorithms()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183729DE0;
  *(void *)(inited + 32) = 833LL;
  *(_WORD *)(inited + 40) = 1;
  *(void *)(inited + 48) = sel_localizedStandardCompare_;
  *(void *)(inited + 56) = 833LL;
  *(_WORD *)(inited + 64) = 257;
  *(void *)(inited + 72) = sel_localizedStandardCompare_;
  *(void *)(inited + 80) = 0LL;
  *(_WORD *)(inited + 88) = 1;
  *(void *)(inited + 96) = sel_localizedCompare_;
  *(void *)(inited + 104) = 0LL;
  *(_WORD *)(inited + 112) = 257;
  *(void *)(inited + 120) = sel_localizedCompare_;
  *(void *)(inited + 128) = 0LL;
  *(_WORD *)(inited + 136) = 0;
  *(void *)(inited + 144) = sel_compare_;
  *(void *)(inited + 152) = 0LL;
  *(_WORD *)(inited + 160) = 256;
  *(void *)(inited + 168) = sel_compare_;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String.StandardComparator, Selector>);
  uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v2 = *(void *)(inited + 32);
  unsigned int v3 = *(unsigned __int8 *)(inited + 40);
  char v4 = *(_BYTE *)(inited + 41);
  uint64_t v5 = *(void *)(inited + 48);
  if (v4) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 32), v6 | v3);
  if ((v8 & 1) != 0)
  {
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v9 = v1 + 64;
  *(void *)(v1 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  uint64_t v10 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v10 = v2;
  *(_BYTE *)(v10 + 8) = v3;
  *(_BYTE *)(v10 + 9) = v4;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v5;
  uint64_t v11 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  *(void *)(v1 + 16) = v13;
  uint64_t v14 = *(void *)(inited + 56);
  unsigned int v15 = *(unsigned __int8 *)(inited + 64);
  char v16 = *(_BYTE *)(inited + 65);
  uint64_t v17 = *(void *)(inited + 72);
  if (v16) {
    int v18 = 256;
  }
  else {
    int v18 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 56), v18 | v15);
  if ((v19 & 1) != 0) {
    goto LABEL_34;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  uint64_t v20 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v20 = v14;
  *(_BYTE *)(v20 + 8) = v15;
  *(_BYTE *)(v20 + 9) = v16;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v17;
  uint64_t v21 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v21, 1LL);
  uint64_t v22 = v21 + 1;
  if (v12)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  *(void *)(v1 + 16) = v22;
  uint64_t v23 = *(void *)(inited + 80);
  unsigned int v24 = *(unsigned __int8 *)(inited + 88);
  char v25 = *(_BYTE *)(inited + 89);
  uint64_t v26 = *(void *)(inited + 96);
  if (v25) {
    int v27 = 256;
  }
  else {
    int v27 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 80), v27 | v24);
  if ((v28 & 1) != 0) {
    goto LABEL_36;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  uint64_t v29 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v29 = v23;
  *(_BYTE *)(v29 + 8) = v24;
  *(_BYTE *)(v29 + 9) = v25;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v26;
  uint64_t v30 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v30, 1LL);
  uint64_t v31 = v30 + 1;
  if (v12)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  *(void *)(v1 + 16) = v31;
  uint64_t v32 = *(void *)(inited + 104);
  unsigned int v33 = *(unsigned __int8 *)(inited + 112);
  char v34 = *(_BYTE *)(inited + 113);
  uint64_t v35 = *(void *)(inited + 120);
  if (v34) {
    int v36 = 256;
  }
  else {
    int v36 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 104), v36 | v33);
  if ((v37 & 1) != 0) {
    goto LABEL_38;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  uint64_t v38 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v38 = v32;
  *(_BYTE *)(v38 + 8) = v33;
  *(_BYTE *)(v38 + 9) = v34;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v35;
  uint64_t v39 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v39, 1LL);
  uint64_t v40 = v39 + 1;
  if (v12)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  *(void *)(v1 + 16) = v40;
  uint64_t v41 = *(void *)(inited + 128);
  unsigned int v42 = *(unsigned __int8 *)(inited + 136);
  char v43 = *(_BYTE *)(inited + 137);
  uint64_t v44 = *(void *)(inited + 144);
  if (v43) {
    int v45 = 256;
  }
  else {
    int v45 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 128), v45 | v42);
  if ((v46 & 1) != 0) {
    goto LABEL_40;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  uint64_t v47 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v47 = v41;
  *(_BYTE *)(v47 + 8) = v42;
  *(_BYTE *)(v47 + 9) = v43;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v44;
  uint64_t v48 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v48, 1LL);
  uint64_t v49 = v48 + 1;
  if (v12)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  *(void *)(v1 + 16) = v49;
  uint64_t v50 = *(void *)(inited + 152);
  unsigned int v51 = *(unsigned __int8 *)(inited + 160);
  char v52 = *(_BYTE *)(inited + 161);
  uint64_t v53 = *(void *)(inited + 168);
  if (v52) {
    int v54 = 256;
  }
  else {
    int v54 = 0;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(inited + 152), v54 | v51);
  if ((v55 & 1) != 0) {
    goto LABEL_42;
  }
  *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  uint64_t v56 = *(void *)(v1 + 48) + 16 * result;
  *(void *)uint64_t v56 = v50;
  *(_BYTE *)(v56 + 8) = v51;
  *(_BYTE *)(v56 + 9) = v52;
  *(void *)(*(void *)(v1 + 56) + 8 * result) = v53;
  uint64_t v57 = *(void *)(v1 + 16);
  BOOL v12 = __OFADD__(v57, 1LL);
  uint64_t v58 = v57 + 1;
  if (!v12)
  {
    *(void *)(v1 + 16) = v58;
    unint64_t result = swift_bridgeObjectRelease();
    static String.StandardComparator.validAlgorithms = (_UNKNOWN *)v1;
    return result;
  }

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.StandardComparator.CodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.StandardComparator.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance String.StandardComparator.CodingKeys()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.StandardComparator.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance String.StandardComparator.CodingKeys@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of String.StandardComparator.CodingKeys.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance String.StandardComparator.CodingKeys( uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000LL;
  unint64_t v4 = 0xEB0000000064657ALL;
  uint64_t v5 = 0x696C61636F4C7369LL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x726564726FLL;
    unint64_t v4 = 0xE500000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x736E6F6974706FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.StandardComparator.CodingKeys()
{
  uint64_t v1 = 0x696C61636F4C7369LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x726564726FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x736E6F6974706FLL;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.StandardComparator.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of String.StandardComparator.CodingKeys.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.StandardComparator.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.StandardComparator.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t String.StandardComparator.order.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t String.StandardComparator.order.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 9) = result & 1;
  return result;
}

uint64_t (*String.StandardComparator.order.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t String.StandardComparator.init(_:order:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v3 = *(_BYTE *)(result + 8);
  *(void *)a3 = *(void *)result;
  *(_BYTE *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 9) = a2 & 1;
  return result;
}

uint64_t String.StandardComparator.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.StandardComparator.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v25) = 0;
    Swift::UInt v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 1;
    char v10 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v27) = 2;
    lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v11 = v25;
    if (one-time initialization token for validAlgorithms != -1)
    {
      int v22 = v25;
      swift_once();
      int v11 = v22;
    }

    if (*((void *)static String.StandardComparator.validAlgorithms + 2)
      && (!v11 ? (int v12 = 0) : (int v12 = 256),
          LODWORD(v24) = v11,
          specialized __RawDictionaryStorage.find<A>(_:)(v9, v12 & 0xFFFFFFFE | v10 & 1),
          (v13 & 1) != 0))
    {
      uint64_t v14 = v5;
      char v15 = v24;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
      *(void *)a2 = v9;
      *(_BYTE *)(a2 + 8) = v10 & 1;
      *(_BYTE *)(a2 + 9) = v15;
    }

    else
    {
      uint64_t v16 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v18 = v17;
      uint64_t v24 = KeyedDecodingContainer.codingPath.getter();
      unint64_t v25 = 0LL;
      unint64_t v26 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(48LL);
      swift_bridgeObjectRelease();
      unint64_t v25 = 0xD000000000000014LL;
      unint64_t v26 = 0x80000001839CC8B0LL;
      int v27 = &type metadata for String.StandardComparator;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.StandardComparator.Type);
      v19._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 0xD00000000000001ALL;
      v20._object = (void *)0x80000001839CC8D0LL;
      String.append(_:)(v20);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619360],  v16);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.StandardComparator.CodingKeys,  &type metadata for String.StandardComparator.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.StandardComparator.CodingKeys,  &type metadata for String.StandardComparator.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.StandardComparator.CodingKeys,  &type metadata for String.StandardComparator.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.StandardComparator.CodingKeys,  &type metadata for String.StandardComparator.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SortOrder and conformance SortOrder()
{
  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for SortOrder, &type metadata for SortOrder);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for SortOrder, &type metadata for SortOrder);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for SortOrder, &type metadata for SortOrder);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }

  return result;
}

NSComparisonResult __swiftcall String.StandardComparator.compare(_:_:)(Swift::String a1, Swift::String a2)
{
  unint64_t v3 = *v2;
  int v4 = *((unsigned __int8 *)v2 + 9);
  if (*((_BYTE *)v2 + 8) != 1)
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = Substring.init<A>(_:)();
    unint64_t v19 = v18;
    unint64_t v21 = v20;
    unint64_t v23 = v22;
    swift_bridgeObjectRetain();
    unint64_t v24 = Substring.init<A>(_:)();
    unint64_t v28 = v24;
    unint64_t v29 = v25;
    unint64_t v30 = v27;
    if (!v3)
    {
      if (v21 == v26 && v23 == v27 && v17 >> 16 == v24 >> 16 && v19 >> 16 == v25 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        NSComparisonResult v32 = NSOrderedDescending;
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v4) {
            return 1LL;
          }
          else {
            return -1LL;
          }
        }

        char v48 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v48 & 1) != 0)
        {
LABEL_56:
          NSComparisonResult v49 = NSOrderedDescending;
          if (v32 == NSOrderedDescending) {
            uint64_t v50 = -1LL;
          }
          else {
            uint64_t v50 = v32;
          }
          if (v32 != NSOrderedAscending) {
            NSComparisonResult v49 = v50;
          }
          if ((v4 & 1) != 0) {
            return v49;
          }
          else {
            return v32;
          }
        }
      }

      NSComparisonResult v32 = NSOrderedSame;
      goto LABEL_56;
    }

    if ((v3 & 2) != 0)
    {
      unint64_t v36 = v24;
      unint64_t v37 = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v52 = v21;
      unint64_t v31 = v19;
      unint64_t v38 = v37;
      unint64_t v28 = v36;
      NSComparisonResult v32 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v36,  v29,  v38,  v30,  (v3 >> 8) & 1,  (v3 >> 7) & 1,  v3 & 1,  (v3 >> 6) & 1,  (v3 & 0x200) != 0,  v17,  v19,  v52,  v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v32) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v51 = v21;
      unint64_t v31 = v19;
      NSComparisonResult v32 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v24,  v25,  v26,  v27,  (v3 >> 8) & 1,  (v3 >> 7) & 1,  v3 & 1,  (v3 >> 6) & 1,  (v3 & 0x200) != 0,  v17,  v19,  v51,  v23);
      if (v32)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }

    if ((v3 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      NSComparisonResult v32 = NSOrderedSame;
      goto LABEL_56;
    }

    unint64_t v39 = v31 >> 14;
    unint64_t v40 = v17 >> 14;
    if (v17 >> 14 >= v39 || v29 >> 14 <= v28 >> 14)
    {
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v40 == v39)
      {
        if ((v28 ^ v29) >> 14) {
          NSComparisonResult v32 = NSOrderedAscending;
        }
        else {
          NSComparisonResult v32 = NSOrderedSame;
        }
      }

      else
      {
        NSComparisonResult v32 = NSOrderedDescending;
      }

      goto LABEL_56;
    }

    unint64_t v54 = v29 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v41 = Substring.UnicodeScalarView.subscript.getter();
    unsigned int v42 = Substring.UnicodeScalarView.subscript.getter();
    if (v41 == v42)
    {
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v40 = v17 >> 14;
      if (v17 >> 14 >= v39 || v54 <= v28 >> 14)
      {
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }

      unsigned int v43 = Substring.UnicodeScalarView.subscript.getter();
      unsigned int v44 = Substring.UnicodeScalarView.subscript.getter();
      if (v43 == v44)
      {
        while (1)
        {
          Substring.UnicodeScalarView.formIndex(after:)();
          Substring.UnicodeScalarView.formIndex(after:)();
          unint64_t v40 = v17 >> 14;
          if (v17 >> 14 >= v39 || v54 <= v28 >> 14) {
            goto LABEL_50;
          }
          unsigned int v53 = Substring.UnicodeScalarView.subscript.getter();
          unsigned int v45 = Substring.UnicodeScalarView.subscript.getter();
          unsigned int v46 = v53;
          if (v53 != v45)
          {
            unsigned int v47 = v45;
            goto LABEL_47;
          }
        }
      }

      unsigned int v47 = v44;
    }

    else
    {
      unsigned int v47 = v42;
      unsigned int v46 = v41;
LABEL_47:
      unsigned int v43 = v46;
    }

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v43 >= v47) {
      NSComparisonResult v32 = (unint64_t)(v47 < v43);
    }
    else {
      NSComparisonResult v32 = NSOrderedAscending;
    }
    goto LABEL_56;
  }

  int v55 = *((unsigned __int8 *)v2 + 9);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v6 = v5;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  NSComparisonResult result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v11 = v10 - result;
  if (!__OFSUB__(v10, result))
  {
    NSComparisonResult v12 = result;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 488);
    swift_unknownObjectRetain();
    char v15 = (void *)v14(ObjectType, v6);
    swift_unknownObjectRelease();
    id v16 = objc_msgSend(v7, sel_compare_options_range_locale_, v8, v3, v12, v11, v15);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    if (v55)
    {
      if (v16 == (id)-1LL)
      {
        return 1LL;
      }

      else if (v16 == (id)1)
      {
        return -1LL;
      }
    }

    return (NSComparisonResult)v16;
  }

  __break(1u);
  return result;
}

void String.StandardComparator.hash(into:)()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 9);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

uint64_t String.StandardComparator.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.StandardComparator.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v12 = *(unsigned __int8 *)(v1 + 8);
  int v11 = *(unsigned __int8 *)(v1 + 9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v8 = v11;
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = v8;
    char v13 = 2;
    lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

BOOL static String.StandardComparator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return ((*(void *)a1 != *(void *)a2) | ((*(_BYTE *)(a1 + 8) ^ *(_BYTE *)(a2 + 8)) | (*(_BYTE *)(a2 + 9) ^ *(_BYTE *)(a1 + 9))) & 1) == 0;
}

Swift::Int String.StandardComparator.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

NSComparisonResult protocol witness for SortComparator.compare(_:_:) in conformance String.StandardComparator( uint64_t *a1, Swift::String *a2)
{
  Swift::UInt8 v2 = (void *)a1[1];
  Swift::String v3 = *a2;
  v4._countAndFlagsBits = *a1;
  v4._object = v2;
  return String.StandardComparator.compare(_:_:)(v4, v3);
}

uint64_t protocol witness for SortComparator.order.getter in conformance String.StandardComparator()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t protocol witness for SortComparator.order.setter in conformance String.StandardComparator( uint64_t result)
{
  *(_BYTE *)(v1 + 9) = result & 1;
  return result;
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance String.StandardComparator())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.StandardComparator@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.StandardComparator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.StandardComparator(void *a1)
{
  return String.StandardComparator.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.StandardComparator()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance String.StandardComparator()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 9);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.StandardComparator()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance String.StandardComparator( uint64_t a1, uint64_t a2)
{
  return ((*(void *)a1 != *(void *)a2) | ((*(_BYTE *)(a1 + 8) ^ *(_BYTE *)(a2 + 8)) | (*(_BYTE *)(a2 + 9) ^ *(_BYTE *)(a1 + 9))) & 1) == 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.Comparator.CodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.Comparator.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance String.Comparator.CodingKeys()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.Comparator.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance String.Comparator.CodingKeys@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of String.Comparator.CodingKeys.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance String.Comparator.CodingKeys( uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000LL;
  unint64_t v4 = 0xE600000000000000LL;
  uint64_t v5 = 0x656C61636F6CLL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x726564726FLL;
    unint64_t v4 = 0xE500000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x736E6F6974706FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.Comparator.CodingKeys()
{
  uint64_t v1 = 0x656C61636F6CLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x726564726FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x736E6F6974706FLL;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.Comparator.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of String.Comparator.CodingKeys.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.Comparator.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.Comparator.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t String.Comparator.options.getter()
{
  return *(void *)v0;
}

uint64_t String.Comparator.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

uint64_t String.Comparator.order.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t String.Comparator.order.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 24) = result & 1;
  return result;
}

uint64_t (*String.Comparator.order.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 String.Comparator.init(options:locale:order:)@<Q0>( uint64_t a1@<X0>, __n128 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  __n128 result = *a2;
  *(__n128 *)(a4 + 8) = *a2;
  *(_BYTE *)(a4 + 24) = a3 & 1;
  return result;
}

uint64_t String.Comparator.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((_BYTE *)a1 + 9);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t result = LocaleCache.current.getter();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

uint64_t String.Comparator.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.Comparator.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v15) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  char v17 = 1;
  lazy protocol witness table accessor for type Locale? and conformance <A> A?( &lazy protocol witness table cache variable for type Locale? and conformance <A> A?,  (uint64_t (*)(void))lazy protocol witness table accessor for type Locale and conformance Locale,  MEMORY[0x18961AFA8]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v15;
  uint64_t v14 = v16;
  char v17 = 2;
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v11 = v15;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_unknownObjectRelease();
}

NSComparisonResult __swiftcall String.Comparator.compare(_:_:)(Swift::String a1, Swift::String a2)
{
  unint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(v2 + 16);
  char v51 = *(_BYTE *)(v2 + 24);
  if (!*(void *)(v2 + 8))
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = Substring.init<A>(_:)();
    unint64_t v18 = v17;
    unint64_t v20 = v19;
    unint64_t v22 = v21;
    swift_bridgeObjectRetain();
    unint64_t v23 = Substring.init<A>(_:)();
    unint64_t v27 = v23;
    unint64_t v28 = v24;
    unint64_t v29 = v26;
    if (!v3)
    {
      unint64_t v30 = v16 >> 16;
      unint64_t v31 = v18 >> 16;
      if (v20 == v25 && v22 == v26 && v30 == v23 >> 16 && v31 == v24 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        NSComparisonResult v14 = NSOrderedDescending;
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          NSComparisonResult v14 = NSOrderedAscending;
          goto LABEL_4;
        }

        char v43 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v43 & 1) != 0) {
          goto LABEL_4;
        }
      }

      NSComparisonResult v14 = NSOrderedSame;
      goto LABEL_4;
    }

    if ((v3 & 2) != 0)
    {
      unsigned __int8 v44 = (v3 & 0x200) != 0;
      uint64_t v48 = (v3 >> 6) & 1;
      int v47 = v3 & 1;
      uint64_t v45 = (v3 >> 8) & 1;
      uint64_t v35 = (v3 >> 7) & 1;
      __int16 v36 = v3;
      unint64_t v3 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v37 = v3;
      LOWORD(v3) = v36;
      NSComparisonResult v14 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v27,  v28,  v37,  v29,  v45,  v35,  v47,  v48,  v44,  v16,  v18,  v20,  v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_15;
      }
    }

    else
    {
      NSComparisonResult v14 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v23,  v24,  v25,  v26,  (v3 >> 8) & 1,  (v3 >> 7) & 1,  v3 & 1,  (v3 >> 6) & 1,  (v3 & 0x200) != 0,  v16,  v18,  v20,  v22);
      if (v14)
      {
LABEL_15:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }

    if ((v3 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      NSComparisonResult v14 = NSOrderedSame;
      goto LABEL_4;
    }

    unint64_t v38 = v18 >> 14;
    unint64_t v39 = v16 >> 14;
    if (v16 >> 14 >= v18 >> 14 || v28 >> 14 <= v27 >> 14)
    {
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v39 == v38)
      {
        if ((v27 ^ v28) >> 14) {
          NSComparisonResult v14 = NSOrderedAscending;
        }
        else {
          NSComparisonResult v14 = NSOrderedSame;
        }
      }

      else
      {
        NSComparisonResult v14 = NSOrderedDescending;
      }

      goto LABEL_4;
    }

    unint64_t v46 = v28 >> 14;
    unint64_t v49 = v18 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
    unsigned int i = Substring.UnicodeScalarView.subscript.getter();
    if (v40 == i)
    {
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v39 = v16 >> 14;
      if (v16 >> 14 >= v49 || v46 <= v27 >> 14)
      {
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v38 = v18 >> 14;
        goto LABEL_47;
      }

      unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
      for (unsigned int i = Substring.UnicodeScalarView.subscript.getter(); v40 == i; unsigned int i = Substring.UnicodeScalarView.subscript.getter())
      {
        Substring.UnicodeScalarView.formIndex(after:)();
        Substring.UnicodeScalarView.formIndex(after:)();
        unint64_t v39 = v16 >> 14;
        if (v16 >> 14 >= v49 || v46 <= v27 >> 14) {
          goto LABEL_46;
        }
        unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
      }
    }

    unsigned int v42 = i;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v40 >= v42) {
      NSComparisonResult v14 = (unint64_t)(v42 < v40);
    }
    else {
      NSComparisonResult v14 = NSOrderedAscending;
    }
    goto LABEL_4;
  }

  unint64_t v50 = *(void *)v2;
  lazy protocol witness table accessor for type String and conformance String();
  swift_unknownObjectRetain();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  NSComparisonResult result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v9 = v8 - result;
  if (__OFSUB__(v8, result))
  {
    __break(1u);
    return result;
  }

  NSComparisonResult v10 = result;
  uint64_t ObjectType = swift_getObjectType();
  int v12 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 488);
  swift_unknownObjectRetain();
  uint64_t v13 = (void *)v12(ObjectType, v4);
  swift_unknownObjectRelease();
  NSComparisonResult v14 = (NSComparisonResult)objc_msgSend(v5, sel_compare_options_range_locale_, v6, v50, v10, v9, v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

LABEL_4:
  if ((v51 & 1) != 0)
  {
    if (v14 == NSOrderedDescending) {
      NSComparisonResult v15 = NSOrderedAscending;
    }
    else {
      NSComparisonResult v15 = v14;
    }
    if (v14 == NSOrderedAscending) {
      return 1LL;
    }
    else {
      return v15;
    }
  }

  return v14;
}

void String.Comparator.hash(into:)(uint64_t a1)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  void *v42;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  _BYTE v63[144];
  _BYTE v64[152];
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::UInt v5 = *(unsigned __int8 *)(v1 + 24);
  Hasher._combine(_:)(*(void *)v1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
    swift_unknownObjectRetain_n();
    if ((v7(ObjectType, v4) & 1) != 0)
    {
      Swift::UInt8 v8 = 1;
LABEL_7:
      Hasher._combine(_:)(v8);
LABEL_58:
      swift_unknownObjectRelease_n();
      goto LABEL_59;
    }

    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
    swift_unknownObjectRetain();
    v9(v62, ObjectType, v4);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
    {
      Swift::UInt8 v8 = 0;
      goto LABEL_7;
    }

    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
    Hasher._combine(_:)(1u);
    if (v44[0] == 2)
    {
      NSComparisonResult v10 = 0;
    }

    else
    {
      NSComparisonResult v10 = v44[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v10);
    char v11 = v45;
    if (v45)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v11 + 16));
      int v12 = *(void *)(v11 + 16);
      if (v12)
      {
        outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v13 = v11 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16LL;
          --v12;
        }

        while (v12);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v47) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }

uint64_t String.Comparator.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.Comparator.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = v8;
  int v15 = *(unsigned __int8 *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v9 = v15;
    uint64_t v13 = v12;
    uint64_t v14 = v11;
    char v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    lazy protocol witness table accessor for type Locale? and conformance <A> A?( (unint64_t *)&lazy protocol witness table cache variable for type Locale? and conformance <A> A?,  (uint64_t (*)(void))lazy protocol witness table accessor for type Locale and conformance Locale,  MEMORY[0x18961AF98]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = v9;
    char v16 = 2;
    lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int String.Comparator.hashValue.getter()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  _BYTE v42[144];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  void v61[18];
  _BYTE v62[144];
  _BYTE v63[144];
  _BYTE v64[80];
  Swift::UInt v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
    swift_unknownObjectRetain_n();
    if ((v6(ObjectType, v3) & 1) != 0)
    {
      Swift::UInt8 v7 = 1;
LABEL_7:
      Hasher._combine(_:)(v7);
LABEL_58:
      swift_unknownObjectRelease_n();
      goto LABEL_59;
    }

    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v8(v61, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) == 1)
    {
      Swift::UInt8 v7 = 0;
      goto LABEL_7;
    }

    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43);
    Hasher._combine(_:)(1u);
    if (v43[0] == 2)
    {
      char v9 = 0;
    }

    else
    {
      char v9 = v43[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v9);
    NSComparisonResult v10 = v44;
    if (v44)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v10 + 16));
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v12 = v10 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v12 += 16LL;
          --v11;
        }

        while (v11);
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v46) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }

NSComparisonResult protocol witness for SortComparator.compare(_:_:) in conformance String.Comparator( uint64_t *a1, Swift::String *a2)
{
  Swift::UInt v2 = (void *)a1[1];
  Swift::String v3 = *a2;
  v4._countAndFlagsBits = *a1;
  v4._object = v2;
  return String.Comparator.compare(_:_:)(v4, v3);
}

uint64_t protocol witness for SortComparator.order.getter in conformance String.Comparator()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t protocol witness for SortComparator.order.setter in conformance String.Comparator(uint64_t result)
{
  *(_BYTE *)(v1 + 24) = result & 1;
  return result;
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance String.Comparator())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.Comparator@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.Comparator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.Comparator(void *a1)
{
  return String.Comparator.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.Comparator()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  void v59[18];
  _BYTE v60[144];
  _BYTE v61[144];
  _BYTE v62[80];
  Swift::UInt v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
    swift_unknownObjectRetain_n();
    if ((v6(ObjectType, v3) & 1) != 0)
    {
      Swift::UInt8 v7 = 1;
LABEL_7:
      Hasher._combine(_:)(v7);
LABEL_57:
      swift_unknownObjectRelease_n();
      goto LABEL_58;
    }

    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v8(v59, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
    {
      Swift::UInt8 v7 = 0;
      goto LABEL_7;
    }

    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)&v41);
    Hasher._combine(_:)(1u);
    if (v41 == 2)
    {
      char v9 = 0;
    }

    else
    {
      char v9 = v41 & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v9);
    NSComparisonResult v10 = v42;
    if (v42)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v10 + 16));
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v12 = v10 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v12 += 16LL;
          --v11;
        }

        while (v11);
        swift_bridgeObjectRelease();
        if (!v43)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v44) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }

uint64_t static SortComparator<>.localizedStandard.getter@<X0>(uint64_t a1@<X8>)
{
  return static SortComparator<>.localizedStandard.getter(833LL, a1);
}

uint64_t static SortComparator<>.localized.getter@<X0>(uint64_t a1@<X8>)
{
  return static SortComparator<>.localizedStandard.getter(0LL, a1);
}

uint64_t static SortComparator<>.localizedStandard.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t result = LocaleCache.current.getter();
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t specialized _StringCompareOptionsIterable.consumeNumbers(from:initialValue:)( unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v37 = a3;
  uint64_t v11 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = *a1;
  unint64_t v38 = a4;
  unint64_t v36 = a4 >> 14;
  if (a4 >> 14 > v15 >> 14)
  {
    uint64_t v33 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v34 = a6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v16 = (a5 >> 59) & 1;
    if ((a6 & 0x1000000000000000LL) == 0) {
      LOBYTE(v16) = 1;
    }
    uint64_t v17 = 4LL << v16;
    v32[0] = a5 & 0xFFFFFFFFFFFFLL;
    v32[1] = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000LL) != 0) {
      uint64_t v18 = HIBYTE(a6) & 0xF;
    }
    else {
      uint64_t v18 = a5 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v35 = v18;
    while (1)
    {
      _StringGuts.validateScalarIndex(_:in:)(v15, v37, v38, a5, a6);
      if ((a6 & 0x1000000000000000LL) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a6 & 0x2000000000000000LL) != 0)
        {
          unint64_t v39 = a5;
          uint64_t v40 = v34;
        }

        else if ((a5 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        _decodeScalar(_:startingAt:)();
      }

      Unicode.Scalar.properties.getter();
      double v19 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
      char v21 = v20;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      if ((v21 & 1) != 0) {
        return a2;
      }
      if ((~*(void *)&v19 & 0x7FF0000000000000LL) == 0)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        return result;
      }

      if (v19 <= -9.22337204e18) {
        goto LABEL_44;
      }
      if (v19 >= 9.22337204e18) {
        goto LABEL_45;
      }
      uint64_t v23 = 10 * a2;
      uint64_t v24 = v23 + (uint64_t)v19;
      unint64_t v25 = *a1;
      uint64_t v26 = *a1 & 0xC;
      if (v26 != v17 && (v25 & 1) != 0) {
        break;
      }
      if (v26 == v17)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(*a1, a5, a6);
        unint64_t v25 = result;
      }

      if (v35 <= v25 >> 16) {
        goto LABEL_47;
      }
      if ((v25 & 1) != 0) {
        goto LABEL_31;
      }
      unint64_t v25 = v25 & 0xC | _StringGuts.scalarAlignSlow(_:)(v25, a5, a6) & 0xFFFFFFFFFFFFFFF3LL | 1;
      if ((a6 & 0x1000000000000000LL) == 0)
      {
LABEL_32:
        unint64_t v27 = v25 >> 16;
        if ((a6 & 0x2000000000000000LL) != 0)
        {
          unint64_t v39 = a5;
          uint64_t v40 = v34;
          int v29 = *((unsigned __int8 *)&v39 + v27);
        }

        else
        {
          uint64_t v28 = v33;
          if ((a5 & 0x1000000000000000LL) == 0) {
            uint64_t v28 = _StringObject.sharedUTF8.getter();
          }
          int v29 = *(unsigned __int8 *)(v28 + v27);
        }

        int v30 = (char)v29;
        unsigned int v31 = __clz(v29 ^ 0xFF) - 24;
        if (v30 >= 0) {
          LOBYTE(v31) = 1;
        }
        unint64_t v15 = ((v27 + v31) << 16) | 5;
        goto LABEL_9;
      }

unint64_t specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)( unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v4 = 4 * v3;
  if ((unint64_t)(4 * v3) > *(void *)result >> 14)
  {
    uint64_t v5 = (void *)result;
    do
    {
      unint64_t v6 = String.subscript.getter();
      char v8 = Character.isExtendCharacter.getter(v6, v7);
      uint64_t result = swift_bridgeObjectRelease();
      if ((v8 & 1) == 0) {
        break;
      }
      uint64_t result = String.index(after:)();
      *uint64_t v5 = result;
    }

    while (v4 > result >> 14);
  }

  return result;
}

{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v3 = a3 >> 14;
  if (a3 >> 14 > *(void *)result >> 14)
  {
    unint64_t v4 = (void *)result;
    uint64_t v5 = Substring.subscript.getter();
    unint64_t v7 = Character.isExtendCharacter.getter(v5, v6);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
    {
      do
      {
        uint64_t result = Substring.index(after:)();
        char v8 = result;
        if (v3 <= result >> 14) {
          break;
        }
        char v9 = Substring.subscript.getter();
        uint64_t v11 = Character.isExtendCharacter.getter(v9, v10);
        uint64_t result = swift_bridgeObjectRelease();
      }

      while ((v11 & 1) != 0);
      *unint64_t v4 = v8;
    }
  }

  return result;
}

unint64_t specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)( unint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if ((a3 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t result = *a1;
  if (4 * v4 > result >> 14)
  {
    uint64_t v8 = (a2 >> 59) & 1;
    if ((a3 & 0x1000000000000000LL) == 0) {
      LOBYTE(v8) = 1;
    }
    uint64_t v9 = 4LL << v8;
    uint64_t v20 = a3 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v10 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    while (1)
    {
      if ((result & 0xC) == v9 || (result & 1) == 0)
      {
        if ((result & 0xC) == v9) {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
        }
        if (result >> 16 >= v4)
        {
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
        }

        if ((result & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(result, a2, a3);
        }
      }

      else if (result >> 16 >= v4)
      {
        goto LABEL_53;
      }

      if ((a3 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a3 & 0x2000000000000000LL) != 0)
        {
          unint64_t v21 = a2;
          uint64_t v22 = v20;
        }

        else if ((a2 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        unint64_t result = _decodeScalar(_:startingAt:)();
      }

      if (BYTE2(result) > 0xEu) {
        return result;
      }
      uint64_t v12 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_0 + BYTE2(result));
      unint64_t v13 = *a1;
      uint64_t v14 = *a1 & 0xC;
      if (v14 != v9 && (v13 & 1) != 0) {
        break;
      }
      if (v14 == v9)
      {
        unint64_t v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(*a1, a2, a3);
        if (v4 <= v13 >> 16) {
          goto LABEL_55;
        }
      }

      else if (v4 <= v13 >> 16)
      {
        goto LABEL_55;
      }

      if ((v13 & 1) != 0) {
        goto LABEL_37;
      }
      unint64_t v13 = v13 & 0xC | _StringGuts.scalarAlignSlow(_:)(v13, a2, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
      if ((a3 & 0x1000000000000000LL) == 0)
      {
LABEL_38:
        unint64_t v15 = v13 >> 16;
        if ((a3 & 0x2000000000000000LL) != 0)
        {
          unint64_t v21 = a2;
          uint64_t v22 = v20;
          int v17 = *((unsigned __int8 *)&v21 + v15);
        }

        else
        {
          uint64_t v16 = v10;
          if ((a2 & 0x1000000000000000LL) == 0) {
            uint64_t v16 = _StringObject.sharedUTF8.getter();
          }
          int v17 = *(unsigned __int8 *)(v16 + v15);
        }

        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        unint64_t result = ((v15 + v19) << 16) | 5;
        goto LABEL_9;
      }

unint64_t specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)( unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  unint64_t v6 = a3 >> 14;
  unint64_t result = *a1;
  if (a3 >> 14 > result >> 14)
  {
    uint64_t v24 = a5 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v12 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v13 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000LL) == 0) {
      LOBYTE(v13) = 1;
    }
    uint64_t v14 = 4LL << v13;
    if ((a5 & 0x2000000000000000LL) != 0) {
      unint64_t v15 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v15 = a4 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      _StringGuts.validateScalarIndex(_:in:)(result, a2, a3, a4, a5);
      if ((a5 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a5 & 0x2000000000000000LL) != 0)
        {
          unint64_t v25 = a4;
          uint64_t v26 = v24;
        }

        else if ((a4 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        unint64_t result = _decodeScalar(_:startingAt:)();
      }

      if (BYTE2(result) > 0xEu) {
        return result;
      }
      uint64_t v16 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_0 + BYTE2(result));
      unint64_t v17 = *a1;
      uint64_t v18 = *a1 & 0xC;
      if (v18 != v14 && (v17 & 1) != 0) {
        break;
      }
      if (v18 == v14)
      {
        unint64_t v17 = _StringGuts._slowEnsureMatchingEncoding(_:)(*a1, a4, a5);
        if (v15 <= v17 >> 16) {
          goto LABEL_40;
        }
      }

      else if (v15 <= v17 >> 16)
      {
        goto LABEL_40;
      }

      if ((v17 & 1) != 0) {
        goto LABEL_26;
      }
      unint64_t v17 = v17 & 0xC | _StringGuts.scalarAlignSlow(_:)(v17, a4, a5) & 0xFFFFFFFFFFFFFFF3LL | 1;
      if ((a5 & 0x1000000000000000LL) == 0)
      {
LABEL_27:
        unint64_t v19 = v17 >> 16;
        if ((a5 & 0x2000000000000000LL) != 0)
        {
          unint64_t v25 = a4;
          uint64_t v26 = v24;
          int v21 = *((unsigned __int8 *)&v25 + v19);
        }

        else
        {
          uint64_t v20 = v12;
          if ((a4 & 0x1000000000000000LL) == 0) {
            uint64_t v20 = _StringObject.sharedUTF8.getter();
          }
          int v21 = *(unsigned __int8 *)(v20 + v19);
        }

        int v22 = (char)v21;
        unsigned int v23 = __clz(v21 ^ 0xFF) - 24;
        if (v22 >= 0) {
          LOBYTE(v23) = 1;
        }
        unint64_t result = ((v19 + v23) << 16) | 5;
        goto LABEL_8;
      }

uint64_t specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13)
{
  int v137 = a8;
  int v128 = a7;
  int v140 = a6;
  int v127 = a5;
  unint64_t v18 = a12;
  unint64_t v17 = a13;
  uint64_t v119 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v118 = *(void *)(v119 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v119);
  uint64_t v116 = (char *)v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v117 = (char *)v114 - v21;
  unint64_t v149 = a1;
  unint64_t v150 = a10;
  unint64_t v146 = 0LL;
  unint64_t v147 = 0xE000000000000000LL;
  unint64_t v148 = 15LL;
  unint64_t v143 = 0LL;
  unint64_t v144 = 0xE000000000000000LL;
  unint64_t v130 = a11;
  unint64_t v145 = 15LL;
  unint64_t v134 = a10;
  unint64_t v22 = a10;
  unint64_t v136 = a1;
  uint64_t v138 = 0LL;
  unint64_t v139 = a11 >> 14;
  unint64_t v129 = a10 >> 14;
  if (a10 >> 14 < a11 >> 14)
  {
    unint64_t v23 = v136;
    unint64_t v135 = a2 >> 14;
    if (a2 >> 14 > v136 >> 14)
    {
      uint64_t v138 = 0LL;
      v114[4] = HIBYTE(a13) & 0xF;
      int v126 = a9;
      uint64_t v123 = a13 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v122 = (a13 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v114[3] = a12 & 0xFFFFFFFFFFFFLL;
      v114[2] = HIBYTE(a4) & 0xF;
      uint64_t v121 = a4 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v120 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v114[1] = a3 & 0xFFFFFFFFFFFFLL;
      int v125 = v127 | v140 | v128;
      unint64_t v22 = v134;
      unint64_t v115 = a2;
      unint64_t v132 = a13;
      unint64_t v133 = a3;
      unint64_t v131 = a12;
      unint64_t v124 = a4;
      while (1)
      {
        unint64_t v24 = HIBYTE(v147) & 0xF;
        if ((v147 & 0x2000000000000000LL) == 0) {
          unint64_t v24 = v146 & 0xFFFFFFFFFFFFLL;
        }
        if (v24)
        {
          uint64_t v25 = specialized _StringCompareOptionsIterableBuffer.current.getter(v146, v147, v148);
          specialized _StringCompareOptionsIterableBuffer.advance()();
        }

        else
        {
          _StringGuts.validateScalarIndex(_:in:)(v22, v134, v130, v18, v17);
          if ((v17 & 0x1000000000000000LL) != 0)
          {
            uint64_t v26 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }

          else
          {
            if ((v17 & 0x2000000000000000LL) != 0)
            {
              unint64_t v141 = v18;
              uint64_t v142 = v123;
            }

            else if ((v18 & 0x1000000000000000LL) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }

            uint64_t v26 = _decodeScalar(_:startingAt:)();
          }

          uint64_t v25 = v26;
        }

        unint64_t v27 = HIBYTE(v144) & 0xF;
        if ((v144 & 0x2000000000000000LL) == 0) {
          unint64_t v27 = v143 & 0xFFFFFFFFFFFFLL;
        }
        if (v27)
        {
          uint64_t v28 = specialized _StringCompareOptionsIterableBuffer.current.getter(v143, v144, v145);
          specialized _StringCompareOptionsIterableBuffer.advance()();
          if ((v137 & 1) == 0) {
            break;
          }
        }

        else
        {
          _StringGuts.validateScalarIndex(_:in:)(v23, v136, a2, a3, a4);
          if ((a4 & 0x1000000000000000LL) != 0)
          {
            uint64_t v29 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }

          else
          {
            if ((a4 & 0x2000000000000000LL) != 0)
            {
              unint64_t v141 = a3;
              uint64_t v142 = v121;
            }

            else if ((a3 & 0x1000000000000000LL) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }

            uint64_t v29 = _decodeScalar(_:startingAt:)();
          }

          uint64_t v28 = v29;
          if ((v137 & 1) == 0) {
            break;
          }
        }

        unint64_t v30 = v146 & 0xFFFFFFFFFFFFLL;
        if ((v147 & 0x2000000000000000LL) != 0) {
          unint64_t v30 = HIBYTE(v147) & 0xF;
        }
        if (v30) {
          break;
        }
        unint64_t v31 = v143 & 0xFFFFFFFFFFFFLL;
        if ((v144 & 0x2000000000000000LL) != 0) {
          unint64_t v31 = HIBYTE(v144) & 0xF;
        }
        if (v31) {
          break;
        }
        NSComparisonResult v32 = v117;
        Unicode.Scalar.properties.getter();
        double v33 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
        char v35 = v34;
        v114[0] = *(void *)(v118 + 8);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v114[0])(v32, v119);
        if ((v35 & 1) != 0) {
          break;
        }
        if ((~*(void *)&v33 & 0x7FF0000000000000LL) == 0)
        {
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
          return result;
        }

        if (v33 <= -9.22337204e18) {
          goto LABEL_196;
        }
        if (v33 >= 9.22337204e18) {
          goto LABEL_197;
        }
        unint64_t v37 = v116;
        Unicode.Scalar.properties.getter();
        double v38 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
        char v40 = v39;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v114[0])(v37, v119);
        if ((v40 & 1) != 0) {
          break;
        }
        if ((~*(void *)&v38 & 0x7FF0000000000000LL) == 0) {
          goto LABEL_198;
        }
        if (v38 <= -9.22337204e18) {
          goto LABEL_199;
        }
        if (v38 >= 9.22337204e18) {
          goto LABEL_200;
        }
        uint64_t v41 = specialized _StringCompareOptionsIterable.consumeNumbers(from:initialValue:)( &v150,  0LL,  v134,  v130,  v18,  v17);
        uint64_t v42 = specialized _StringCompareOptionsIterable.consumeNumbers(from:initialValue:)(&v149, 0LL, v136, a2, a3, a4);
        if (v41 != v42)
        {
          if (v41 < v42) {
            uint64_t v111 = -1LL;
          }
          else {
            uint64_t v111 = v42 < v41;
          }
          goto LABEL_182;
        }

        if ((v126 & 1) != 0)
        {
          int64_t v43 = String.UnicodeScalarView.distance(from:to:)(v134, v150, v18, v17);
          int64_t v44 = String.UnicodeScalarView.distance(from:to:)(v136, v149, a3, a4);
          if (v43 != v44)
          {
            if (v43 < v44) {
              uint64_t v109 = -1LL;
            }
            else {
              uint64_t v109 = v44 < v43;
            }
            uint64_t v138 = v109;
          }
        }

uint64_t specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  int v226 = a7;
  int v227 = a5;
  unint64_t v19 = a10;
  uint64_t v232 = *MEMORY[0x1895F89C0];
  uint64_t v20 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v223 = *(void *)(v20 - 8);
  uint64_t v224 = v20;
  MEMORY[0x1895F8858](v20);
  uint64_t v222 = (char *)&v188 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v202 = a11;
  unint64_t v211 = a11 >> 14;
  unint64_t v204 = a10 >> 14;
  if (a10 >> 14 >= a11 >> 14)
  {
    if ((a6 & 1) != 0)
    {
      uint64_t v193 = 0LL;
      unint64_t v207 = a2 >> 14;
      unint64_t v212 = 0xE000000000000000LL;
      unint64_t v26 = a10;
      unint64_t v203 = a1;
      goto LABEL_203;
    }

    uint64_t v159 = 0LL;
LABEL_210:
    if ((a1 ^ a2) >> 14) {
      uint64_t v178 = -1LL;
    }
    else {
      uint64_t v178 = 0LL;
    }
    if (v211 != v19 >> 14) {
      uint64_t v178 = 1LL;
    }
    if (v178) {
      return v178;
    }
    else {
      return v159;
    }
  }

  uint64_t v196 = a13;
  uint64_t v195 = a12;
  unint64_t v207 = a2 >> 14;
  if (a2 >> 14 <= a1 >> 14)
  {
    uint64_t v159 = 0LL;
    if ((a6 & 1) != 0)
    {
      uint64_t v193 = 0LL;
      unint64_t v212 = 0xE000000000000000LL;
      unint64_t v203 = a1;
      unint64_t v26 = a10;
LABEL_198:
      uint64_t v213 = a3;
      uint64_t v210 = a4;
      unint64_t v160 = Substring.subscript.getter();
      char v162 = Character.isExtendCharacter.getter(v160, v161);
      swift_bridgeObjectRelease();
      if ((v162 & 1) != 0)
      {
        unint64_t v26 = Substring.index(after:)();
        if (v211 > v26 >> 14)
        {
          unint64_t v163 = Substring.subscript.getter();
          char v165 = Character.isExtendCharacter.getter(v163, v164);
          swift_bridgeObjectRelease();
          if ((v165 & 1) != 0)
          {
            do
            {
              unint64_t v26 = Substring.index(after:)();
              if (v211 <= v26 >> 14) {
                break;
              }
              unint64_t v166 = Substring.subscript.getter();
              char v168 = Character.isExtendCharacter.getter(v166, v167);
              swift_bridgeObjectRelease();
            }

            while ((v168 & 1) != 0);
          }
        }
      }

      goto LABEL_203;
    }

    goto LABEL_210;
  }

  unint64_t v205 = a2;
  int v192 = a8;
  uint64_t v193 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int v191 = a9;
  int v190 = v227 | a6 | v226;
  unint64_t v212 = 0xE000000000000000LL;
  uint64_t v24 = 15LL;
  unint64_t v218 = 15LL;
  unint64_t v25 = 0xE000000000000000LL;
  unint64_t v203 = a1;
  unint64_t v26 = a10;
  unint64_t v27 = v204;
  unint64_t v189 = a10;
  uint64_t v210 = a4;
  uint64_t v213 = a3;
  int v225 = a6;
  while (1)
  {
    uint64_t v216 = v22;
    unint64_t v217 = v24;
    uint64_t v199 = v25 & 0x2000000000000000LL;
    uint64_t v198 = HIBYTE(v25) & 0xF;
    uint64_t v197 = v23 & 0xFFFFFFFFFFFFLL;
    if ((v25 & 0x2000000000000000LL) != 0) {
      uint64_t v28 = HIBYTE(v25) & 0xF;
    }
    else {
      uint64_t v28 = v23 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v214 = a1;
    uint64_t v215 = v26;
    unint64_t v209 = v25;
    uint64_t v208 = v23;
    if (v28)
    {
      unint64_t v29 = String.subscript.getter();
      unint64_t v31 = v30;
      unint64_t v218 = String.index(after:)();
    }

    else
    {
      unint64_t v29 = Substring.subscript.getter();
      unint64_t v31 = v32;
    }

    unint64_t v33 = v212;
    uint64_t v206 = v212 & 0x2000000000000000LL;
    uint64_t v34 = HIBYTE(v212) & 0xF;
    uint64_t v35 = v216 & 0xFFFFFFFFFFFFLL;
    uint64_t v201 = v34;
    if ((v212 & 0x2000000000000000LL) == 0) {
      uint64_t v34 = v216 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v200 = v34;
    if (v34)
    {
      unint64_t v36 = v212;
      unint64_t v37 = v19;
      uint64_t v38 = String.subscript.getter();
      unint64_t v219 = v39;
      unint64_t v33 = v36;
      uint64_t v40 = String.index(after:)();
      unint64_t v41 = v38;
      unint64_t v19 = v37;
      unint64_t v217 = v40;
      goto LABEL_14;
    }

    uint64_t v52 = Substring.subscript.getter();
    unint64_t v41 = v52;
    unint64_t v219 = v53;
    if (v28 || (v192 & 1) == 0) {
      goto LABEL_14;
    }
    unint64_t v54 = v52;
    Character.wholeNumberValue.getter();
    if ((v55 & 1) != 0) {
      break;
    }
    Character.wholeNumberValue.getter();
    if ((v56 & 1) != 0) {
      break;
    }
    uint64_t v57 = 0LL;
    unint64_t v58 = v215;
    while (1)
    {
      Substring.subscript.getter();
      uint64_t v59 = Character.wholeNumberValue.getter();
      if ((v60 & 1) != 0) {
        break;
      }
      uint64_t v61 = 10 * v57;
      BOOL v62 = __OFADD__(v61, v59);
      uint64_t v63 = v61 + v59;
      if (v62) {
        break;
      }
      uint64_t v64 = v63;
      unint64_t v58 = Substring.index(after:)();
      swift_bridgeObjectRelease();
      uint64_t v65 = v64;
      uint64_t v57 = v64;
      if (v211 <= v58 >> 14) {
        goto LABEL_125;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v65 = v57;
LABEL_125:
    uint64_t v221 = v65;
    uint64_t v215 = v58;
    uint64_t v111 = 0LL;
    unint64_t v70 = v214;
    uint64_t v22 = v216;
    unint64_t v112 = v203;
    while (1)
    {
      unint64_t v113 = v112;
      Substring.subscript.getter();
      uint64_t v114 = Character.wholeNumberValue.getter();
      if ((v115 & 1) != 0) {
        break;
      }
      uint64_t v116 = 10 * v111;
      uint64_t v117 = v116 + v114;
      if (__OFADD__(v116, v114)) {
        break;
      }
      unint64_t v70 = Substring.index(after:)();
      swift_bridgeObjectRelease();
      unint64_t v112 = v113;
      uint64_t v111 = v117;
      if (v207 <= v70 >> 14) {
        goto LABEL_132;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v117 = v111;
LABEL_132:
    if (v221 != v117)
    {
      uint64_t v187 = v221;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v187 >= v117) {
        return v117 < v187;
      }
      else {
        return -1LL;
      }
    }

    if ((v191 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v26 = v215;
      unint64_t v19 = v189;
      goto LABEL_139;
    }

    unint64_t v19 = v189;
    uint64_t v118 = Substring.distance(from:to:)();
    uint64_t v119 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v118 == v119)
    {
      unint64_t v26 = v215;
LABEL_139:
      unint64_t v25 = v209;
      uint64_t v23 = v208;
      a4 = v210;
      uint64_t v24 = v217;
      goto LABEL_66;
    }

    uint64_t v23 = v208;
    uint64_t v24 = v217;
    if (v118 < v119) {
      uint64_t v158 = -1LL;
    }
    else {
      uint64_t v158 = v119 < v118;
    }
    uint64_t v193 = v158;
    unint64_t v26 = v215;
    unint64_t v25 = v209;
    a4 = v210;
LABEL_66:
    unint64_t v27 = v26 >> 14;
    if (v26 >> 14 >= v211)
    {
      a2 = v205;
      a1 = v70;
      if ((v225 & 1) == 0) {
        goto LABEL_209;
      }
LABEL_203:
      if (v207 > a1 >> 14)
      {
        unint64_t v169 = Substring.subscript.getter();
        char v171 = Character.isExtendCharacter.getter(v169, v170);
        swift_bridgeObjectRelease();
        if ((v171 & 1) != 0)
        {
          a1 = Substring.index(after:)();
          if (v207 > a1 >> 14)
          {
            unint64_t v172 = Substring.subscript.getter();
            char v174 = Character.isExtendCharacter.getter(v172, v173);
            swift_bridgeObjectRelease();
            if ((v174 & 1) != 0)
            {
              do
              {
                a1 = Substring.index(after:)();
                if (v207 <= a1 >> 14) {
                  break;
                }
                unint64_t v175 = Substring.subscript.getter();
                char v177 = Character.isExtendCharacter.getter(v175, v176);
                swift_bridgeObjectRelease();
              }

              while ((v177 & 1) != 0);
            }
          }
        }
      }

      goto LABEL_209;
    }

    a1 = v70;
    a3 = v213;
    if (v207 <= v70 >> 14)
    {
      a2 = v205;
      if ((v225 & 1) != 0) {
        goto LABEL_198;
      }
LABEL_209:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v19 = v26;
      uint64_t v159 = v193;
      goto LABEL_210;
    }
  }

  unint64_t v41 = v54;
LABEL_14:
  if (v204 >= v27)
  {
    unint64_t v42 = v219;
    uint64_t v43 = v35;
  }

  else
  {
    unint64_t v42 = v219;
    uint64_t v43 = v35;
    if ((v225 & 1) != 0)
    {
      unint64_t v44 = v41;
      unint64_t v45 = v214;
      if (v28 || (v46 = Character.isExtendCharacter.getter(v29, v31), unint64_t v41 = v44, (v46 & 1) == 0))
      {
        int v47 = 0;
        int v49 = 0;
        uint64_t v48 = v43;
      }

      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t v41 = v44;
        int v47 = 1;
        unint64_t v29 = v44;
        unint64_t v31 = v42;
        uint64_t v48 = v43;
        int v49 = 1;
      }

      if (v206)
      {
        uint64_t v48 = v201;
        int v49 = v47;
      }

      if (v48 || (v50 = Character.isExtendCharacter.getter(v41, v219), unint64_t v41 = v44, (v50 & 1) == 0))
      {
        if (v49)
        {
          uint64_t v51 = Substring.index(before:)();
          unint64_t v41 = v44;
          unint64_t v45 = v51;
        }

        unint64_t v42 = v219;
      }

      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v49 & 1) == 0) {
          uint64_t v215 = Substring.index(before:)();
        }
        unint64_t v41 = v29;
        unint64_t v42 = v31;
      }

      goto LABEL_42;
    }
  }

  unint64_t v45 = v214;
LABEL_42:
  unint64_t v219 = v42;
  if (v29 == v41 && v31 == v42 || (unint64_t v194 = v41, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v22 = v216;
    unint64_t v66 = v209;
    uint64_t v67 = v208;
    goto LABEL_46;
  }

  if ((v190 & 1) == 0)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_234;
    }
    goto LABEL_232;
  }

  unint64_t v78 = v194;
  if ((v191 & 1) != 0 && !v193)
  {
    unint64_t v79 = v194;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      uint64_t v80 = -1LL;
    }
    else {
      uint64_t v80 = _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
    }
    uint64_t v193 = v80;
    unint64_t v78 = v79;
  }

  unint64_t v81 = v209;
  if (v28)
  {
    uint64_t v68 = v208;
    goto LABEL_79;
  }

  if ((Character.asciiValue.getter() & 0x100) == 0)
  {
    if ((v226 & 1) != 0)
    {
      Swift::String v85 = String.lowercased()();
      uint64_t countAndFlagsBits = v85._countAndFlagsBits;
      unint64_t object = (unint64_t)v85._object;
    }

    else
    {
      swift_bridgeObjectRetain();
      uint64_t countAndFlagsBits = v29;
      unint64_t object = v31;
    }

LABEL_238:
        if (v29 == v153 && v31 == v145)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return 0LL;
        }

        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_231:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_235;
        }

        char v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_248:
        swift_bridgeObjectRelease();
        return v185 & 1;
      }

      if (v29 == v78 && v31 == v219)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return 0LL;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_234:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_235:
        swift_bridgeObjectRelease();
        return -1LL;
      }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

LABEL_232:
      char v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_248;
    }

    swift_bridgeObjectRelease();
    unint64_t v81 = v209;
    uint64_t v68 = v208;
    unint64_t v33 = v212;
    unint64_t v78 = v194;
LABEL_79:
    uint64_t v82 = v199;
    uint64_t v83 = v198;
    uint64_t v84 = v197;
    goto LABEL_143;
  }

  uint64_t v188 = v43;
  unint64_t v214 = v45;
  unint64_t v88 = 0xE000000000000000LL;
  uint64_t v230 = 0LL;
  unint64_t v231 = 0xE000000000000000LL;
  uint64_t v221 = v29 & 0xFFFFFFFFFFFFLL;
  if ((v31 & 0x2000000000000000LL) != 0) {
    uint64_t v89 = HIBYTE(v31) & 0xF;
  }
  else {
    uint64_t v89 = v29 & 0xFFFFFFFFFFFFLL;
  }
  char v90 = v225;
  if (!v89)
  {
    uint64_t v120 = 0LL;
LABEL_137:
    uint64_t v228 = v120;
    unint64_t v229 = v88;
    uint64_t countAndFlagsBits = String.init<A>(_:)();
    unint64_t object = v121;
    unint64_t v45 = v214;
    unint64_t v19 = v189;
    uint64_t v43 = v188;
    goto LABEL_141;
  }

  uint64_t v220 = v31 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  uint64_t v91 = 0LL;
  while (1)
  {
    if ((v31 & 0x1000000000000000LL) != 0)
    {
      unsigned int v98 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((v31 & 0x2000000000000000LL) != 0)
      {
        uint64_t v228 = v29;
        unint64_t v229 = v220;
      }

      else if ((v29 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      unsigned int v98 = _decodeScalar(_:startingAt:)();
    }

    unsigned int v100 = v98;
    uint64_t v101 = v99;
    if ((v227 & 1) != 0 && v98 >> 8 >= 0xFF && v98 < 0xFFEF) {
      break;
    }
    unsigned int v102 = v98;
    if ((v90 & 1) == 0) {
      goto LABEL_115;
    }
LABEL_106:
    uint64_t v103 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v100), 5);
    if (!v103 || ((*(unsigned __int8 *)(v103 + ((unsigned __int16)v100 >> 3)) >> (v100 & 7)) & 1) == 0)
    {
      uint64_t v104 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v102), 2);
      if (v104 && ((*(unsigned __int8 *)(v104 + ((unsigned __int16)v102 >> 3)) >> (v102 & 7)) & 1) != 0)
      {
        MEMORY[0x1895F8858](v104);
        uint64_t v105 = CFUniCharDecomposeCharacter();
        char v90 = v225;
        if (*((_DWORD *)&v188 - 64) < 0x510u && v105 > 0) {
          unsigned int v102 = *((_DWORD *)&v188 - 64);
        }
      }

            __break(1u);
            goto LABEL_233;
          }

          char v129 = v125;
          outlined retain of Locale((uint64_t)v256);
          swift_bridgeObjectRetain();
          unint64_t v29 = 40LL;
          uint64_t v130 = v128;
          while (*(void *)(v74 + v29))
          {
            swift_bridgeObjectRelease();
            v29 += 16LL;
            if (!--v130)
            {
              swift_bridgeObjectRelease();
              goto LABEL_166;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v235);
          v205[0] = v180;
          v205[1] = v184;
          uint64_t v206 = v185;
          unint64_t v207 = v180;
          uint64_t v208 = v184;
          unint64_t v209 = v185;
          unint64_t v29 = (unint64_t)&v236;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v205, (unint64_t *)&v221);
          uint64_t result = outlined release of Locale((uint64_t)&v236);
          if (*((void *)&v224 + 1) != 2LL)
          {
            uint64_t v9 = v223;
            char v129 = *((void *)&v223 + 1);
            uint64_t v8 = *((void *)&v224 + 1);
            unint64_t v7 = v224;
          }

            __break(1u);
            goto LABEL_233;
          }

          uint64_t v130 = v126;
          outlined retain of Locale((uint64_t)v258);
          swift_bridgeObjectRetain();
          unint64_t v29 = 40LL;
          uint64_t v131 = v129;
          while (*(void *)(v75 + v29))
          {
            swift_bridgeObjectRelease();
            v29 += 16LL;
            if (!--v131)
            {
              swift_bridgeObjectRelease();
              goto LABEL_166;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v237);
          v207[0] = v181;
          v207[1] = v185;
          uint64_t v208 = v186;
          unint64_t v209 = v181;
          uint64_t v210 = v185;
          unint64_t v211 = v186;
          unint64_t v29 = (unint64_t)&v238;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v207, (unint64_t *)&v223);
          uint64_t result = outlined release of Locale((uint64_t)&v238);
          if (*((void *)&v226 + 1) != 2LL)
          {
            uint64_t v9 = v225;
            uint64_t v130 = *((void *)&v225 + 1);
            uint64_t v8 = *((void *)&v226 + 1);
            unint64_t v7 = v226;
          }

            __break(1u);
            goto LABEL_233;
          }

          unint64_t v126 = v122;
          outlined retain of Locale((uint64_t)v253);
          swift_bridgeObjectRetain();
          unint64_t v29 = 40LL;
          uint64_t v127 = v125;
          while (*(void *)(v74 + v29))
          {
            swift_bridgeObjectRelease();
            v29 += 16LL;
            if (!--v127)
            {
              swift_bridgeObjectRelease();
              goto LABEL_166;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v232);
          v202[0] = v176;
          v202[1] = v180;
          unint64_t v203 = v181;
          unint64_t v204 = v176;
          unint64_t v205 = v180;
          uint64_t v206 = v181;
          unint64_t v29 = (unint64_t)&v233;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v202, (unint64_t *)&v218);
          uint64_t result = outlined release of Locale((uint64_t)&v233);
          if (*((void *)&v221 + 1) != 2LL)
          {
            uint64_t v9 = v220;
            unint64_t v126 = *((void *)&v220 + 1);
            uint64_t v8 = *((void *)&v221 + 1);
            unint64_t v7 = v221;
          }

            swift_unknownObjectRelease();
            char v177 = v336;
            swift_unknownObjectRelease();
            uint64_t v178 = v60 & 0xFFFFFFFFFFFFF0FFLL;
            unint64_t v124 = (uint64_t)v177;
            uint64_t v22 = v178 | (v8 << 8);
            goto LABEL_155;
          }

          uint64_t v10 = v349;
          goto LABEL_164;
        }
      }

      else
      {
        uint64_t v10 = v349;
        if (v345 >= 0x800) {
          goto LABEL_438;
        }
      }

      uint64_t v21 = v22;
      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v413);
      swift_unknownObjectRetain();
      uint64_t v22 = specialized Rope._endPath.getter(v58);
      swift_unknownObjectRelease();
      unint64_t v124 = 0LL;
      uint64_t v9 = 0LL;
      if (!v58)
      {
        unint64_t v125 = 0LL;
LABEL_234:
        __int128 v335 = (char *)v351 - v9;
        if (__OFSUB__(v351, v9))
        {
LABEL_388:
          __break(1u);
          goto LABEL_389;
        }

        uint64_t v179 = v330[1];
        v425[0] = *v330;
        v425[1] = v179;
        v425[2] = v330[2];
        uint64_t v8 = (uint64_t)v425;
        BigString.utf8.getter();
        if (__OFSUB__(0LL, v9))
        {
LABEL_389:
          __break(1u);
          goto LABEL_390;
        }

        uint64_t v8 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v181 = v180;
        uint64_t v183 = v182;
        uint64_t v9 = v184;
        outlined release of Locale((uint64_t)&v388);
        if (v125 >= v331)
        {
LABEL_390:
          __break(1u);
          goto LABEL_391;
        }

        v304[1] = v9;
        uint64_t v305 = v183;
        uint64_t v306 = v181;
        uint64_t v307 = v8;
        char v185 = *(void *)(v21 + 64);
        char v186 = *(void *)(v21 + 72);
        uint64_t v187 = *(void *)(v21 + 80);
        uint64_t v188 = *(void *)(v21 + 88);
        swift_unknownObjectRetain();
        __int128 v353 = v125;
        unint64_t v189 = v10;
        int v190 = v337;
        int v191 = v22;
        uint64_t v22 = v21;
        int v192 = v188;
        uint64_t v9 = v191;
        specialized Rope.subscript.getter(v337, v191, v124, v185, v186, v187, v192);
        unint64_t v194 = v193;
        uint64_t v308 = v195;
        swift_unknownObjectRelease();
        uint64_t v21 = v190;
        uint64_t v10 = v189;
        uint64_t v8 = *(void *)(v22 + 64);
        uint64_t v333 = v353 + 1;
        uint64_t v346 = v194;
        int v347 = v373;
        uint64_t v196 = *(void *)(v22 + 88);
        __int128 v352 = (__int128 *)((char *)&v393 + 8);
        uint64_t v323 = v342 + 40;
        uint64_t v197 = v196;
        __int128 v365 = v21;
        __int128 v366 = v9;
        uint64_t v367 = v124;
LABEL_238:
        if (v21 != v197) {
          goto LABEL_374;
        }
        uint64_t v327 = v197;
        if (v124)
        {
          uint64_t v198 = *(void *)(v124 + 24 * ((v9 >> ((4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          uint64_t v198 = specialized Rope._Node.subscript.getter(v9, v8);
        }

        uint64_t v21 = (unint64_t)v347;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (__OFADD__(v335, v198)) {
          goto LABEL_375;
        }
        uint64_t v321 = &v335[v198];
        if (v8)
        {
          uint64_t v199 = ((-15LL << ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v8 + 18) | ((unint64_t)*(unsigned __int16 *)(v8 + 16) << ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C));
          swift_unknownObjectRetain();
        }

        else
        {
          uint64_t v199 = 0LL;
        }

        uint64_t v200 = v346;
        if (v9 >= v199) {
          goto LABEL_376;
        }
        uint64_t v336 = (void *)v124;
        if (v124)
        {
          uint64_t v201 = (4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C;
          unint64_t v202 = ((v9 >> v201) & 0xF) + 1;
          if (v202 < *(unsigned __int16 *)(v124 + 16))
          {
            unint64_t v203 = (v202 << v201) | ((-15LL << v201) - 1) & v9;
            swift_unknownObjectRelease_n();
LABEL_253:
            uint64_t v8 = v367;
LABEL_261:
            if (v333 == v331)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_302:
              uint64_t v8 = *(void *)(v22 + 64);
              __int128 v238 = *(void *)(v22 + 72);
              __int128 v239 = *(void *)(v22 + 80);
              uint64_t v240 = *(void *)(v22 + 88);
              swift_unknownObjectRetain();
              uint64_t v241 = specialized Rope.subscript.getter(v327, v9, v124, v8, v238, v239, v240);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v40 = __OFADD__(v335, v241);
              uint64_t v242 = &v335[v241];
              if (!v40)
              {
                unint64_t v243 = v330;
                int64_t v244 = v330[1];
                v424[0] = *v330;
                v424[1] = v244;
                v424[2] = v330[2];
                uint64_t v8 = (uint64_t)v424;
                BigString.utf8.getter();
                if (!__OFSUB__(v242, v307 >> 11))
                {
                  int64_t v245 = BigString.UTF8View.index(_:offsetBy:)();
                  unint64_t v247 = v246;
                  unint64_t v249 = v248;
                  int64_t v251 = v250;
                  outlined release of Locale((uint64_t)v389);
                  if (v326 >= v245 >> 10) {
                    uint64_t v9 = v245;
                  }
                  else {
                    uint64_t v9 = v318;
                  }
                  if (v326 >= v245 >> 10) {
                    uint64_t v10 = v247;
                  }
                  else {
                    uint64_t v10 = v317;
                  }
                  if (v326 >= v245 >> 10) {
                    uint64_t v21 = v249;
                  }
                  else {
                    uint64_t v21 = v316;
                  }
                  if (v326 >= v245 >> 10) {
                    uint64_t v22 = v251;
                  }
                  else {
                    uint64_t v22 = v315;
                  }
                  unint64_t v252 = *v243;
                  uint64_t v253 = v243[1];
                  v423[2] = v243[2];
                  v423[1] = v253;
                  v423[0] = v252;
                  uint64_t v8 = v9 >> 10;
                  if (v9 >> 10 >= v334)
                  {
                    *(void *)&__int128 v375 = v345;
                    *((void *)&v375 + 1) = v339;
                    __int128 v376 = v340;
                    *(void *)&__int128 v377 = v9;
                    *((void *)&v377 + 1) = v10;
                    *(void *)&__int128 v378 = v21;
                    *((void *)&v378 + 1) = v22;
                    uint64_t v254 = v348;
                    uint64_t v255 = specialized Array._getCount()(v348);
                    if (v255 && v334 != v8)
                    {
                      unint64_t v256 = v255;
                      swift_bridgeObjectRetain();
                      outlined retain of Locale((uint64_t)v423);
                      uint64_t v8 = 0LL;
                      uint64_t v257 = 40LL;
                      while (1)
                      {
                        int64_t v258 = v8 + 1;
                        if (__OFADD__(v8, 1LL)) {
                          goto LABEL_359;
                        }
                        if (!*(void *)(v254 + v257)) {
                          break;
                        }
                        swift_bridgeObjectRelease();
                        v257 += 16LL;
                        ++v8;
                        if (v258 == v256)
                        {
                          swift_bridgeObjectRelease();
                          goto LABEL_327;
                        }
                      }

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      BigString.utf8.getter();
                      BigString.UTF8View.subscript.getter();
                      outlined release of Locale((uint64_t)v390);
                      v359[0] = v345;
                      v359[1] = v339;
                      uint64_t v360 = v340;
                      uint64_t v361 = v345;
                      uint64_t v362 = v339;
                      uint64_t v363 = v340;
                      specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v359, &v365);
                      uint64_t result = outlined release of Locale((uint64_t)&v391);
                      if (v372 != 2)
                      {
                        uint64_t v9 = v369;
                        if (v334 > v369 >> 10) {
                          goto LABEL_454;
                        }
                        uint64_t v10 = v370;
                        uint64_t v21 = v371;
                        uint64_t v22 = v372;
                      }

uint64_t specialized _StringCompareOptionsIterableBuffer.current.getter( unint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
  }
  if ((a2 & 0x2000000000000000LL) == 0 && (a1 & 0x1000000000000000LL) == 0) {
    _StringObject.sharedUTF8.getter();
  }
  return _decodeScalar(_:startingAt:)();
}

uint64_t specialized _StringCompareOptionsIterableBuffer.advance()()
{
  unint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  unint64_t v3 = _StringGuts.validateScalarIndex(_:)(v0[2], *v0, v1);
  if ((v1 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
  }

  else
  {
    unint64_t v4 = v3 >> 16;
    if ((v1 & 0x2000000000000000LL) != 0)
    {
      v10[0] = v2;
      v10[1] = v1 & 0xFFFFFFFFFFFFFFLL;
      int v6 = *((unsigned __int8 *)v10 + v4);
    }

    else
    {
      if ((v2 & 0x1000000000000000LL) != 0) {
        uint64_t v5 = (v1 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v5 = _StringObject.sharedUTF8.getter();
      }
      int v6 = *(unsigned __int8 *)(v5 + v4);
    }

    int v7 = (char)v6;
    unsigned int v8 = __clz(v6 ^ 0xFF) - 24;
    if (v7 >= 0) {
      LOBYTE(v8) = 1;
    }
    uint64_t result = ((v4 + v8) << 16) | 5;
  }

  v0[2] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.Comparator.CodingKeys,  &type metadata for String.Comparator.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.Comparator.CodingKeys,  &type metadata for String.Comparator.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.Comparator.CodingKeys,  &type metadata for String.Comparator.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.Comparator.CodingKeys,  &type metadata for String.Comparator.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type Locale? and conformance <A> A?( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Locale?);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t specialized static String.Comparator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0LL;
  }
  int v2 = *(unsigned __int8 *)(a1 + 24);
  __int128 v3 = *(_OWORD *)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if (!*(void *)(a1 + 8))
  {
    if (!(void)v3) {
      return v2 ^ v4 ^ 1u;
    }
    goto LABEL_9;
  }

  __int128 v8 = *(_OWORD *)(a1 + 8);
  if (!(void)v3)
  {
    swift_unknownObjectRetain();
LABEL_9:
    swift_unknownObjectRelease();
    return 0LL;
  }

  __int128 v7 = v3;
  swift_unknownObjectRetain_n();
  char v5 = specialized static Locale.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v5 & 1) != 0) {
    return v2 ^ v4 ^ 1u;
  }
  return 0LL;
}

unint64_t instantiation function for generic protocol witness table for String.StandardComparator( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.Comparator(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String.Comparator and conformance String.Comparator();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.Comparator and conformance String.Comparator()
{
  unint64_t result = lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator;
  if (!lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.Comparator,  &type metadata for String.Comparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator;
  if (!lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.Comparator,  &type metadata for String.Comparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator);
  }

  return result;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for String.StandardComparator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for String.StandardComparator( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 10) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 10) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for String.StandardComparator()
{
  return &type metadata for String.StandardComparator;
}

uint64_t destroy for String.Comparator()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for String.Comparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for String.Comparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for String.Comparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.Comparator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.Comparator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for String.Comparator()
{
  return &type metadata for String.Comparator;
}

ValueMetadata *type metadata accessor for String.Comparator.CodingKeys()
{
  return &type metadata for String.Comparator.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for String.Comparator.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1830CE1D4 + 4 * byte_1837A1725[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1830CE208 + 4 * byte_1837A1720[v4]))();
}

uint64_t sub_1830CE208(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830CE210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830CE218LL);
  }
  return result;
}

uint64_t sub_1830CE224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830CE22CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1830CE230(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830CE238(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for String.StandardComparator.CodingKeys()
{
  return &type metadata for String.StandardComparator.CodingKeys;
}

unint64_t specialized String.Comparator.CodingKeys.init(rawValue:)( Swift::String string, Swift::OpaquePointer cases)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3LL;
  }
  else {
    return v5;
  }
}

id NSPredicate.init(format:_:)()
{
  uint64_t v0 = getVaList(_:)();
  swift_bridgeObjectRelease();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v2 = objc_msgSend(ObjCClassFromMetadata, sel_predicateWithFormat_arguments_, String._bridgeToObjectiveCImpl()(), v0);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t ICULegacyNumberFormatter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICULegacyNumberFormatter()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for ICULegacyNumberFormatter.Signature( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      __int128 v17 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
      *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
      *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
      unint64_t v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v19 = v18[9];
      uint64_t v20 = (void *)(a1 + v19);
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
      }

      uint64_t v28 = v18[10];
      uint64_t v29 = a1 + v28;
      uint64_t v30 = (uint64_t)a2 + v28;
      *(void *)uint64_t v29 = *(void *)v30;
      *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
      *(_BYTE *)(a1 + v18[11]) = *((_BYTE *)a2 + v18[11]);
      *(_BYTE *)(a1 + v18[12]) = *((_BYTE *)a2 + v18[12]);
      goto LABEL_18;
    }

    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      __int128 v25 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v25;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
      *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
      *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
      *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
      uint64_t v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v26 = v10[9];
      uint64_t v12 = (void *)(a1 + v26);
      uint64_t v13 = (char *)a2 + v26;
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
      {
LABEL_11:
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v27 - 8) + 64LL));
LABEL_17:
        uint64_t v31 = v10[10];
        uint64_t v32 = a1 + v31;
        uint64_t v33 = (uint64_t)a2 + v31;
        *(void *)uint64_t v32 = *(void *)v33;
        *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
        *(_BYTE *)(a1 + v10[11]) = *((_BYTE *)a2 + v10[11]);
LABEL_18:
        swift_storeEnumTagMultiPayload();
        goto LABEL_19;
      }
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy((void *)a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
LABEL_19:
        uint64_t v34 = *(int *)(a3 + 20);
        uint64_t v35 = *(int *)(a3 + 24);
        unint64_t v36 = (void *)(a1 + v34);
        unint64_t v37 = (uint64_t *)((char *)a2 + v34);
        uint64_t v38 = v37[1];
        *unint64_t v36 = *v37;
        v36[1] = v38;
        *(_BYTE *)(a1 + v35) = *((_BYTE *)a2 + v35);
        swift_bridgeObjectRetain();
        return a1;
      }

      *(void *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      __int128 v9 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
      *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
      *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
      *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
      uint64_t v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v11 = v10[9];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
    }

    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
    goto LABEL_17;
  }

  uint64_t v16 = *a2;
  *(void *)a1 = *a2;
  a1 = v16 + ((v5 + 16LL) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t destroy for ICULegacyNumberFormatter.Signature(uint64_t a1)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  }

  else
  {
    if (EnumCaseMultiPayload > 1) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  }

  uint64_t v4 = a1 + *(int *)(v3 + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      __int128 v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      uint64_t v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v17 = v16[9];
      unint64_t v18 = &a1[v17];
      uint64_t v19 = &a2[v17];
      uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
      }

      uint64_t v26 = v16[10];
      uint64_t v27 = &a1[v26];
      uint64_t v28 = &a2[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      a1[v16[11]] = a2[v16[11]];
      a1[v16[12]] = a2[v16[12]];
      goto LABEL_16;
    case 1:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      __int128 v23 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v23;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      __int128 v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v24 = v9[9];
      uint64_t v11 = &a1[v24];
      uint64_t v12 = &a2[v24];
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
      {
LABEL_9:
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v11, v12, *(void *)(*(void *)(v25 - 8) + 64LL));
LABEL_15:
        uint64_t v29 = v9[10];
        uint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        *(void *)uint64_t v30 = *(void *)v31;
        v30[8] = v31[8];
        a1[v9[11]] = a2[v9[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }

char *assignWithCopy for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v19 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v19;
        __int128 v20 = *((_OWORD *)a2 + 1);
        __int128 v21 = *((_OWORD *)a2 + 2);
        __int128 v22 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v21;
        *((_OWORD *)a1 + 3) = v22;
        *((_OWORD *)a1 + 1) = v20;
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        __int128 v23 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v24 = v23[9];
        uint64_t v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
        {
          uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
        }

        uint64_t v35 = v23[10];
        uint64_t v36 = &a1[v35];
        unint64_t v37 = &a2[v35];
        uint64_t v38 = *(void *)v37;
        v36[8] = v37[8];
        *(void *)uint64_t v36 = v38;
        a1[v23[11]] = a2[v23[11]];
        a1[v23[12]] = a2[v23[12]];
        goto LABEL_16;
      case 1:
        uint64_t v30 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v30;
        __int128 v31 = *((_OWORD *)a2 + 1);
        __int128 v32 = *((_OWORD *)a2 + 2);
        __int128 v33 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v32;
        *((_OWORD *)a1 + 3) = v33;
        *((_OWORD *)a1 + 1) = v31;
        a1[73] = a2[73];
        LOWORD(v30) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v30;
        a1[77] = a2[77];
        uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v34 = v12[9];
        uint64_t v14 = &a1[v34];
        __int128 v15 = &a2[v34];
        uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v17 = *(void *)(v16 - 8);
        goto LABEL_14;
      case 0:
        uint64_t v8 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v8;
        __int128 v9 = *((_OWORD *)a2 + 1);
        __int128 v10 = *((_OWORD *)a2 + 2);
        __int128 v11 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v10;
        *((_OWORD *)a1 + 3) = v11;
        *((_OWORD *)a1 + 1) = v9;
        a1[73] = a2[73];
        LOWORD(v8) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v8;
        a1[77] = a2[77];
        uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v13 = v12[9];
        uint64_t v14 = &a1[v13];
        __int128 v15 = &a2[v13];
        uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
        {
LABEL_6:
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
LABEL_15:
          uint64_t v39 = v12[10];
          uint64_t v40 = &a1[v39];
          unint64_t v41 = &a2[v39];
          uint64_t v42 = *(void *)v41;
          v40[8] = v41[8];
          *(void *)uint64_t v40 = v42;
          a1[v12[11]] = a2[v12[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          goto LABEL_17;
        }

char *initializeWithTake for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      __int128 v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      uint64_t v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v17 = v16[9];
      uint64_t v18 = &a1[v17];
      uint64_t v19 = &a2[v17];
      uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
      }

      uint64_t v26 = v16[10];
      uint64_t v27 = &a1[v26];
      uint64_t v28 = &a2[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      a1[v16[11]] = a2[v16[11]];
      a1[v16[12]] = a2[v16[12]];
      goto LABEL_16;
    case 1:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      __int128 v23 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v23;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      __int128 v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v24 = v9[9];
      __int128 v11 = &a1[v24];
      uint64_t v12 = &a2[v24];
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
      {
LABEL_9:
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v11, v12, *(void *)(*(void *)(v25 - 8) + 64LL));
LABEL_15:
        uint64_t v29 = v9[10];
        uint64_t v30 = &a1[v29];
        __int128 v31 = &a2[v29];
        *(void *)uint64_t v30 = *(void *)v31;
        v30[8] = v31[8];
        a1[v9[11]] = a2[v9[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }

char *assignWithTake for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        __int128 v16 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v16;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        uint64_t v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v18 = v17[9];
        uint64_t v19 = &a1[v18];
        uint64_t v20 = &a2[v18];
        uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v22 = *(void *)(v21 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
        {
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
        }

        uint64_t v26 = v17[10];
        uint64_t v27 = &a1[v26];
        uint64_t v28 = &a2[v26];
        *(void *)uint64_t v27 = *(void *)v28;
        v27[8] = v28[8];
        a1[v17[11]] = a2[v17[11]];
        a1[v17[12]] = a2[v17[12]];
        goto LABEL_16;
      case 1:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        __int128 v24 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v24;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        __int128 v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v25 = v9[9];
        __int128 v11 = &a1[v25];
        uint64_t v12 = &a2[v25];
        uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v14 = *(void *)(v13 - 8);
        goto LABEL_14;
      case 0:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        __int128 v8 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v8;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        __int128 v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v10 = v9[9];
        __int128 v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
        {
LABEL_6:
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
LABEL_15:
          uint64_t v29 = v9[10];
          uint64_t v30 = &a1[v29];
          __int128 v31 = &a2[v29];
          *(void *)uint64_t v30 = *(void *)v31;
          v30[8] = v31[8];
          a1[v9[11]] = a2[v9[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          goto LABEL_17;
        }

uint64_t getEnumTagSinglePayload for ICULegacyNumberFormatter.Signature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1830CF9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ICULegacyNumberFormatter.Signature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1830CFA58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ICULegacyNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for ICULegacyNumberFormatter.Signature);
}

uint64_t type metadata completion function for ICULegacyNumberFormatter.Signature()
{
  uint64_t result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

char *initializeBufferWithCopyOfBuffer for ICULegacyNumberFormatter.NumberFormatType( char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v16 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        __int128 v18 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v18;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        uint64_t v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v20 = v19[9];
        uint64_t v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
        }

        uint64_t v31 = v19[10];
        uint64_t v32 = &a1[v31];
        __int128 v33 = &a2[v31];
        *(void *)uint64_t v32 = *(void *)v33;
        v32[8] = v33[8];
        a1[v19[11]] = a2[v19[11]];
        a1[v19[12]] = a2[v19[12]];
        swift_storeEnumTagMultiPayload();
        break;
      case 1:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        __int128 v26 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v26;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v27 = v9[9];
        __int128 v11 = &a1[v27];
        uint64_t v12 = &a2[v27];
        uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v14 = *(void *)(v13 - 8);
        goto LABEL_14;
      case 0:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        __int128 v8 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v8;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v10 = v9[9];
        __int128 v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
        {
LABEL_6:
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
LABEL_15:
          uint64_t v28 = v9[10];
          uint64_t v29 = &a1[v28];
          uint64_t v30 = &a2[v28];
          *(void *)uint64_t v29 = *(void *)v30;
          v29[8] = v30[8];
          a1[v9[11]] = a2[v9[11]];
          swift_storeEnumTagMultiPayload();
          return a1;
        }

uint64_t destroy for ICULegacyNumberFormatter.NumberFormatType(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  }

  else
  {
    uint64_t v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  }

  uint64_t v4 = a1 + *(int *)(v3 + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

char *initializeWithCopy for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      __int128 v14 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v14;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      uint64_t v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v16 = v15[9];
      uint64_t v17 = &a1[v16];
      __int128 v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      }

      uint64_t v25 = v15[10];
      __int128 v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      *(void *)__int128 v26 = *(void *)v27;
      v26[8] = v27[8];
      a1[v15[11]] = a2[v15[11]];
      a1[v15[12]] = a2[v15[12]];
      goto LABEL_16;
    case 1:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      __int128 v22 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v22;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      __int128 v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v23 = v8[9];
      uint64_t v10 = &a1[v23];
      __int128 v11 = &a2[v23];
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
      {
LABEL_9:
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v10, v11, *(void *)(*(void *)(v24 - 8) + 64LL));
LABEL_15:
        uint64_t v28 = v8[10];
        uint64_t v29 = &a1[v28];
        uint64_t v30 = &a2[v28];
        *(void *)uint64_t v29 = *(void *)v30;
        v29[8] = v30[8];
        a1[v8[11]] = a2[v8[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }

char *assignWithCopy for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v18 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v18;
        __int128 v19 = *((_OWORD *)a2 + 1);
        __int128 v20 = *((_OWORD *)a2 + 2);
        __int128 v21 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v20;
        *((_OWORD *)a1 + 3) = v21;
        *((_OWORD *)a1 + 1) = v19;
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        __int128 v22 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v23 = v22[9];
        uint64_t v24 = &a1[v23];
        uint64_t v25 = &a2[v23];
        uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
        }

        uint64_t v34 = v22[10];
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        uint64_t v37 = *(void *)v36;
        v35[8] = v36[8];
        *(void *)uint64_t v35 = v37;
        a1[v22[11]] = a2[v22[11]];
        a1[v22[12]] = a2[v22[12]];
        goto LABEL_16;
      case 1:
        uint64_t v29 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v29;
        __int128 v30 = *((_OWORD *)a2 + 1);
        __int128 v31 = *((_OWORD *)a2 + 2);
        __int128 v32 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v31;
        *((_OWORD *)a1 + 3) = v32;
        *((_OWORD *)a1 + 1) = v30;
        a1[73] = a2[73];
        LOWORD(v29) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v29;
        a1[77] = a2[77];
        __int128 v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v33 = v11[9];
        uint64_t v13 = &a1[v33];
        __int128 v14 = &a2[v33];
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        goto LABEL_14;
      case 0:
        uint64_t v7 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v7;
        __int128 v8 = *((_OWORD *)a2 + 1);
        __int128 v9 = *((_OWORD *)a2 + 2);
        __int128 v10 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v9;
        *((_OWORD *)a1 + 3) = v10;
        *((_OWORD *)a1 + 1) = v8;
        a1[73] = a2[73];
        LOWORD(v7) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v7;
        a1[77] = a2[77];
        __int128 v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v12 = v11[9];
        uint64_t v13 = &a1[v12];
        __int128 v14 = &a2[v12];
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
        {
LABEL_6:
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
LABEL_15:
          uint64_t v38 = v11[10];
          uint64_t v39 = &a1[v38];
          uint64_t v40 = &a2[v38];
          uint64_t v41 = *(void *)v40;
          v39[8] = v40[8];
          *(void *)uint64_t v39 = v41;
          a1[v11[11]] = a2[v11[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          return a1;
        }

char *initializeWithTake for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      __int128 v14 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v14;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      uint64_t v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v16 = v15[9];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      }

      uint64_t v25 = v15[10];
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      a1[v15[11]] = a2[v15[11]];
      a1[v15[12]] = a2[v15[12]];
      goto LABEL_16;
    case 1:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      __int128 v22 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v22;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      __int128 v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v23 = v8[9];
      __int128 v10 = &a1[v23];
      __int128 v11 = &a2[v23];
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
      {
LABEL_9:
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v10, v11, *(void *)(*(void *)(v24 - 8) + 64LL));
LABEL_15:
        uint64_t v28 = v8[10];
        uint64_t v29 = &a1[v28];
        __int128 v30 = &a2[v28];
        *(void *)uint64_t v29 = *(void *)v30;
        v29[8] = v30[8];
        a1[v8[11]] = a2[v8[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }

char *assignWithTake for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        __int128 v15 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v15;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        uint64_t v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v17 = v16[9];
        uint64_t v18 = &a1[v17];
        uint64_t v19 = &a2[v17];
        uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
        }

        uint64_t v25 = v16[10];
        uint64_t v26 = &a1[v25];
        uint64_t v27 = &a2[v25];
        *(void *)uint64_t v26 = *(void *)v27;
        v26[8] = v27[8];
        a1[v16[11]] = a2[v16[11]];
        a1[v16[12]] = a2[v16[12]];
        goto LABEL_16;
      case 1:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        __int128 v23 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v23;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        __int128 v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v24 = v8[9];
        __int128 v10 = &a1[v24];
        __int128 v11 = &a2[v24];
        uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v13 = *(void *)(v12 - 8);
        goto LABEL_14;
      case 0:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        __int128 v7 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v7;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        __int128 v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v9 = v8[9];
        __int128 v10 = &a1[v9];
        __int128 v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v13 = *(void *)(v12 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
        {
LABEL_6:
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
LABEL_15:
          uint64_t v28 = v8[10];
          uint64_t v29 = &a1[v28];
          __int128 v30 = &a2[v28];
          *(void *)uint64_t v29 = *(void *)v30;
          v29[8] = v30[8];
          a1[v8[11]] = a2[v8[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          return a1;
        }

uint64_t type metadata completion function for ICULegacyNumberFormatter.NumberFormatType()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319LL);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319LL);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0LL;
    }
  }

  return result;
}

void ICULegacyNumberFormatter.NumberFormatType.hash(into:)()
{
  uint64_t v11 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v1 - 8);
  uint64_t v15 = v1;
  MEMORY[0x1895F8858](v1);
  uint64_t v12 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  MEMORY[0x1895F8858](v5);
  uint64_t v13 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v13);
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v7);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType( v0,  (uint64_t)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = (char *)sub_1830D110C + 4 * byte_1837A7BA0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_1830D110C()
{
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v4 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = v4;
    }
    else {
      Swift::UInt64 v5 = 0LL;
    }
    Hasher._combine(_:)(v5);
  }

  uint64_t v7 = *(int **)(v3 - 168);
  uint64_t v6 = *(void *)(v3 - 160);
  outlined init with take of NumberFormatStyleConfiguration.Precision?(v2 + 16, v3 - 144);
  specialized Optional<A>.hash(into:)();
  int v8 = *(unsigned __int8 *)(v2 + 73);
  if (v8 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v9 = v8 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }

  int v10 = *(unsigned __int16 *)(v2 + 74);
  unsigned int v11 = v10 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11 & 1);
    Hasher._combine(_:)((v11 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v11) & 1);
  }

  uint64_t v12 = *(void *)(v3 - 152);
  int v13 = *(unsigned __int8 *)(v2 + 77);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }

  outlined init with copy of FloatingPointRoundingRule?(v2 + v7[9], v0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0, 1LL, v12) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v15 = *(void *)(v3 - 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v15, v0, v12);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v12);
  }

  uint64_t v16 = v2 + v7[10];
  int v17 = *(unsigned __int8 *)(v16 + 8);
  if (v17 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v18 = *(void *)v16;
    Hasher._combine(_:)(1u);
    if ((v17 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v18 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v19 = v18;
      }
      else {
        Swift::UInt64 v19 = 0LL;
      }
      Hasher._combine(_:)(v19);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v18);
    }
  }

  Swift::UInt v20 = *(unsigned __int8 *)(v2 + v7[11]);
  if (v20 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
  }

  return outlined destroy of ICUNumberFormatter.Signature( v2,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

void ICULegacyNumberFormatter.NumberFormatType.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys>);
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v22 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys>);
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  MEMORY[0x1895F8858](v4);
  Swift::UInt64 v19 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v17);
  Swift::UInt v18 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys>);
  v16[3] = *(void *)(v7 - 8);
  v16[4] = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v16[2] = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys>);
  v16[0] = *(void *)(v9 - 8);
  v16[1] = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v25 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v25);
  MEMORY[0x1895F8858](v10);
  uint64_t v11 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v11);
  int v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.CodingKeys>);
  uint64_t v26 = *(void *)(v14 - 8);
  uint64_t v27 = v14;
  MEMORY[0x1895F8858](v14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v28, (uint64_t)v13);
  uint64_t v15 = (char *)sub_1830D1B44 + 4 * byte_1837A7BA4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_1830D1B44()
{
  *(_BYTE *)(v4 - 70) = 0;
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys();
  uint64_t v5 = *(void *)(v4 - 104);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
  uint64_t v6 = *(void *)(v4 - 216);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 224) + 8LL))(v2, v6);
  outlined destroy of ICUNumberFormatter.Signature( v3,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 112) + 8LL))(v1, v5);
}

uint64_t ICULegacyNumberFormatter.NumberFormatType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys>);
  uint64_t v41 = *(void *)(v38 - 8);
  MEMORY[0x1895F8858](v38);
  uint64_t v48 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  MEMORY[0x1895F8858](v4);
  uint64_t v43 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys>);
  v37[7] = *(void *)(v7 - 8);
  v37[8] = v7;
  MEMORY[0x1895F8858](v7);
  unint64_t v44 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys>);
  v37[6] = *(void *)(v47 - 8);
  MEMORY[0x1895F8858](v47);
  uint64_t v42 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.CodingKeys>);
  uint64_t v45 = *(void *)(v51 - 8);
  MEMORY[0x1895F8858](v51);
  uint64_t v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v46);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)v37 - v16;
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)v37 - v19;
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  uint64_t v23 = (char *)v37 - v22;
  MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)v37 - v24;
  uint64_t v26 = a1[3];
  uint64_t v52 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v26);
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();
  int v49 = v11;
  uint64_t v27 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v27)
  {
    v37[2] = v23;
    v37[3] = v20;
    v37[1] = v14;
    v37[4] = v17;
    v37[5] = v25;
    uint64_t v53 = 0LL;
    uint64_t v28 = v46;
    uint64_t v29 = v51;
    __int128 v30 = v49;
    uint64_t v31 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v31 + 16) == 1LL) {
      __asm { BR              X10 }
    }

    uint64_t v32 = v29;
    uint64_t v33 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v35 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v35 = v28;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v33 - 8) + 104LL))( v35,  *MEMORY[0x189619358],  v33);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v32);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
}

void sub_1830D23F8()
{
  *(_BYTE *)(v3 - 65) = 3;
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys();
  uint64_t v4 = *(void *)(v3 - 96);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v4)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 160) + 8LL))(v2, v1);
    JUMPOUT(0x1830D23CCLL);
  }

  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection();
  uint64_t v5 = *(void *)(v3 - 216);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = *(void *)(v3 - 160);
  *(void *)(v3 - 96) = 0LL;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 192) + 8LL))(v0, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v1);
  uint64_t v7 = *(_WORD **)(v3 - 280);
  *uint64_t v7 = *(_WORD *)(v3 - 67);
  swift_storeEnumTagMultiPayload();
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v7,  *(void *)(v3 - 248),  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  JUMPOUT(0x1830D261CLL);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1830D266C + 4 * byte_1837A7BAC[*v0]))( 0x7265626D756ELL,  0xE600000000000000LL);
}

uint64_t sub_1830D266C()
{
  return 0x746E6563726570LL;
}

uint64_t sub_1830D2684()
{
  return 0x79636E6572727563LL;
}

uint64_t sub_1830D269C()
{
  return 0x7470697263736564LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized ICULegacyNumberFormatter.NumberFormatType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICULegacyNumberFormatter.NumberFormatType( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))ICULegacyNumberFormatter.NumberFormatType.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyNumberFormatter.NumberFormatType( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))ICULegacyNumberFormatter.NumberFormatType.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance ICULegacyNumberFormatter.NumberFormatType@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return ICULegacyNumberFormatter.NumberFormatType.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ICULegacyNumberFormatter.NumberFormatType( void *a1)
{
}

uint64_t base witness table accessor for Equatable in ICULegacyNumberFormatter.NumberFormatType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType,  (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
}

void ICULegacyNumberFormatter.Signature.createNumberFormatter()()
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v9 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v1 = MEMORY[0x1895F8858](v9);
  MEMORY[0x1895F8858](v1);
  uint64_t v2 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v3 = MEMORY[0x1895F8858](v2);
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  MEMORY[0x1895F8858](v5);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, (uint64_t)&v8 - v6);
  uint64_t v7 = (char *)&loc_1830D2A38 + dword_1830D2FDC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_1830D2A48()
{
  *(_DWORD *)(v7 - 164) = 0;
  type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  String.utf8CString.getter();
  uint64_t v8 = unum_open();
  swift_release();
  if (!v8)
  {
    int v9 = 16;
    goto LABEL_19;
  }

  int v9 = *(_DWORD *)(v7 - 164);
  if (v9 > 0)
  {
LABEL_19:
    lazy protocol witness table accessor for type ICUError and conformance ICUError();
    swift_allocError();
    *uint64_t v17 = v9;
    return swift_willThrow();
  }

  unum_setAttribute();
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v5, (uint64_t)v6);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload < 2)
  {
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v6,  v2,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    if ((*(_BYTE *)(v2 + 8) & 1) != 0) {
      goto LABEL_9;
    }
    if ((~*(void *)v2 & 0x7FF0000000000000LL) != 0)
    {
      if (*(double *)v2 > -2147483650.0)
      {
        if (*(double *)v2 < 2147483650.0)
        {
          unum_setAttribute();
LABEL_9:
          uint64_t v11 = *(void *)(v2 + 64);
          char v12 = *(_BYTE *)(v2 + 72);
          __int128 v13 = *(_OWORD *)(v2 + 32);
          *(_OWORD *)(v7 - 160) = *(_OWORD *)(v2 + 16);
          *(_OWORD *)(v7 - 144) = v13;
          *(_OWORD *)(v7 - 128) = *(_OWORD *)(v2 + 48);
          *(void *)(v7 - 112) = v11;
          *(_BYTE *)(v7 - 104) = v12;
          setPrecision(_:formatter:)(v7 - 160);
          if ((*(_BYTE *)(v2 + 73) & 1) != 0) {
            unum_setAttribute();
          }
          if ((*(_BYTE *)(v2 + 77) & 1) != 0) {
            unum_setAttribute();
          }
          uint64_t v14 = v2 + *(int *)(v4 + 40);
          int v15 = *(unsigned __int8 *)(v14 + 8);
          if (v15 == 255) {
            goto LABEL_43;
          }
          uint64_t v16 = *(void *)v14;
          if ((v15 & 1) != 0)
          {
            unum_setDoubleAttribute();
LABEL_43:
            __int16 v28 = *(_WORD *)(v2 + 74);
            outlined destroy of ICUNumberFormatter.Signature( v2,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
            goto LABEL_51;
          }

          if (v16 >= (uint64_t)0xFFFFFFFF80000000LL)
          {
            if (v16 <= 0x7FFFFFFF)
            {
              unum_setAttribute();
              goto LABEL_43;
            }

            goto LABEL_56;
          }

uint64_t setPrecision(_:formatter:)(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  unint64_t v2 = *(void *)(result + 40);
  unsigned int v3 = *(unsigned __int8 *)(result + 56);
  if (v1 >> 1 != 0xFFFFFFFF || v2 > 1 || v3 >= 2)
  {
    uint64_t v7 = *(void *)result;
    uint64_t v6 = *(void *)(result + 8);
    uint64_t v8 = *(void *)(result + 16);
    if ((v3 & 0x80) != 0)
    {
      uint64_t v9 = *(void *)(result + 32);
      uint64_t v10 = *(void *)(result + 48);
      uint64_t result = unum_setAttribute();
      if ((v6 & 1) == 0)
      {
        if (v7 < (uint64_t)0xFFFFFFFF80000000LL)
        {
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }

        if (v7 > 0x7FFFFFFF)
        {
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }

        uint64_t result = unum_setAttribute();
      }

      if ((v1 & 1) == 0)
      {
        if (v8 < (uint64_t)0xFFFFFFFF80000000LL)
        {
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }

        if (v8 > 0x7FFFFFFF)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }

        uint64_t result = unum_setAttribute();
      }

      if ((v2 & 1) == 0)
      {
        if (v9 < (uint64_t)0xFFFFFFFF80000000LL)
        {
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }

        if (v9 > 0x7FFFFFFF)
        {
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }

        uint64_t result = unum_setAttribute();
      }

      if ((v3 & 1) != 0) {
        return result;
      }
      if (v10 >= (uint64_t)0xFFFFFFFF80000000LL)
      {
        if (v10 <= 0x7FFFFFFF) {
          return unum_setAttribute();
        }
LABEL_44:
        __break(1u);
        return result;
      }

void ICULegacyNumberFormatter.Signature.hash(into:)()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  v14[3] = *(void *)(v1 - 8);
  v14[4] = v1;
  MEMORY[0x1895F8858](v1);
  v14[2] = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  v14[1] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  v14[0] = (char *)v14 - v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v9 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  MEMORY[0x1895F8858](v10);
  uint64_t v11 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = v0;
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType( v0,  (uint64_t)v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __int128 v13 = (char *)sub_1830D339C + 4 * byte_1837A7BB0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

void sub_1830D339C()
{
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v5 = *(void *)v3;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v5;
    }
    else {
      Swift::UInt64 v6 = 0LL;
    }
    Hasher._combine(_:)(v6);
  }

  uint64_t v8 = *(void *)(v4 - 168);
  uint64_t v7 = *(void *)(v4 - 160);
  uint64_t v9 = v2;
  outlined init with take of NumberFormatStyleConfiguration.Precision?(v3 + 16, v4 - 144);
  specialized Optional<A>.hash(into:)();
  int v10 = *(unsigned __int8 *)(v3 + 73);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v11 = v10 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }

  int v12 = *(unsigned __int16 *)(v3 + 74);
  unsigned int v13 = v12 | (*(unsigned __int8 *)(v3 + 76) << 16);
  if (v12 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13 & 1);
    Hasher._combine(_:)((v13 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v13) & 1);
  }

  uint64_t v14 = *(void *)(v4 - 152);
  int v15 = *(unsigned __int8 *)(v3 + 77);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v16 = v15 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }

  outlined init with copy of FloatingPointRoundingRule?(v3 + v9[9], v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v1, 1LL, v7) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v17 = *(void *)(v4 - 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v17, v1, v7);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v17, v7);
  }

  uint64_t v18 = v3 + v9[10];
  int v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v20 = *(void *)v18;
    Hasher._combine(_:)(1u);
    if ((v19 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v21 = v20;
      }
      else {
        Swift::UInt64 v21 = 0LL;
      }
      Hasher._combine(_:)(v21);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v20);
    }
  }

  Swift::UInt v22 = *(unsigned __int8 *)(v3 + v9[11]);
  if (v22 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
  }

  outlined destroy of ICUNumberFormatter.Signature( v3,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v23 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_BYTE *)(v14 + *(int *)(v23 + 24)));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICULegacyNumberFormatter.Signature( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))ICULegacyNumberFormatter.Signature.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyNumberFormatter.Signature( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))ICULegacyNumberFormatter.Signature.hash(into:));
}

uint64_t base witness table accessor for Equatable in ICULegacyNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type ICULegacyNumberFormatter.Signature and conformance ICULegacyNumberFormatter.Signature,  type metadata accessor for ICULegacyNumberFormatter.Signature,  (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.Signature);
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys,  &unk_189C7B290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys,  &unk_189C7B290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys,  &unk_189C7B290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys,  &unk_189C7B290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }

  return result;
}

uint64_t outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys,  &unk_189C7B4D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys,  &unk_189C7B4D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys,  &unk_189C7B4D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys,  &unk_189C7B4D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys,  &unk_189C7B440);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys,  &unk_189C7B440);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys,  &unk_189C7B440);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys,  &unk_189C7B440);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys,  &unk_189C7B3B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys,  &unk_189C7B3B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys,  &unk_189C7B3B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys,  &unk_189C7B3B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys,  &unk_189C7B320);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys,  &unk_189C7B320);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys,  &unk_189C7B320);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys,  &unk_189C7B320);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }

  return result;
}

void implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)()
{
}

uint64_t specialized static ICULegacyNumberFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(a1, a2);
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
    uint64_t v6 = *(int *)(v5 + 20);
    uint64_t v7 = *(void *)(a1 + v6);
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    uint64_t v9 = (void *)(a2 + v6);
    BOOL v10 = v7 == *v9 && v8 == v9[1];
    if (v10 || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v12 = 0, (v11 & 1) != 0)) {
      char v12 = *(_BYTE *)(a1 + *(int *)(v5 + 24)) ^ *(_BYTE *)(a2 + *(int *)(v5 + 24)) ^ 1;
    }
  }

  else
  {
    char v12 = 0;
  }

  return v12 & 1;
}

void specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a2;
  uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v3);
  v16[1] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  MEMORY[0x1895F8858](v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType));
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v16 + *(int *)(v12 + 48) - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType( a1,  (uint64_t)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v17, (uint64_t)v14);
  int v15 = (char *)sub_1830D40BC + 4 * byte_1837A7BB4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_1830D40BC()
{
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ICUNumberFormatter.Signature( v2,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    outlined destroy of (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType)(v0);
    char v4 = 0;
  }

  else
  {
    outlined init with take of ICUNumberFormatter.Signature( v3,  v1,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    char v4 = static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(v2, v1);
    outlined destroy of ICUNumberFormatter.Signature( v1,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    outlined destroy of ICUNumberFormatter.Signature( v2,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    outlined destroy of ICUNumberFormatter.Signature( v0,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  }

  return v4 & 1;
}

uint64_t outlined destroy of (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType)( uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ICUError and conformance ICUError()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUError and conformance ICUError;
  if (!lazy protocol witness table cache variable for type ICUError and conformance ICUError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ICUError, &type metadata for ICUError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICUError and conformance ICUError);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ICULegacyNumberFormatter.NumberFormatType.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1830D4360 + 4 * byte_1837A7BBD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1830D4394 + 4 * byte_1837A7BB8[v4]))();
}

uint64_t sub_1830D4394(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830D439C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830D43A4LL);
  }
  return result;
}

uint64_t sub_1830D43B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830D43B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1830D43BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830D43C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  return &unk_189C7B290;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  return &unk_189C7B320;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  return &unk_189C7B3B0;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  return &unk_189C7B440;
}

uint64_t storeEnumTagSinglePayload for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1830D4454 + 4 * byte_1837A7BC2[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1830D4474 + 4 * byte_1837A7BC7[v4]))();
  }
}

_BYTE *sub_1830D4454(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1830D4474(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1830D447C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1830D4484(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1830D448C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1830D4494(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  return &unk_189C7B4D0;
}

uint64_t specialized ICULegacyNumberFormatter.NumberFormatType.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265626D756ELL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x746E6563726570LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x79636E6572727563LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x7470697263736564LL && a2 == 0xEB00000000657669LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t ICU.FieldPositer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICU.FieldPositer()
{
  return objc_opt_self();
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1)
{
  uint64_t v4 = a1;
  IndexSet.intersection(_:)(&v4, (uint64_t)&v3);
  id v1 = objc_msgSend(*(id *)(v3 + 16), sel_count);
  swift_release();
  return v1 == 0LL;
}

uint64_t *specialized Collection.count.getter(uint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result[8];
  if (v3) {
    uint64_t v4 = result[10];
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 < 0 || v4 < a2) {
    goto LABEL_115;
  }
  uint64_t v6 = a3;
  uint64_t v7 = result;
  uint64_t v8 = result[9];
  uint64_t v9 = result[11];
  if (v3)
  {
    if (result[10] > a2 && *(_WORD *)(v3 + 16) != 0)
    {
      uint64_t v59 = result[9];
      uint64_t v55 = result[11];
      uint64_t v33 = *(unsigned __int8 *)(v3 + 18);
      if (*(_BYTE *)(v3 + 18))
      {
        unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
        uint64_t v14 = a2;
        unint64_t v34 = v3;
        while (1)
        {
          uint64_t v36 = *(unsigned __int16 *)(v34 + 16);
          if (!*(_WORD *)(v34 + 16)) {
            goto LABEL_42;
          }
          uint64_t v37 = *(void *)(v34 + 40);
          BOOL v16 = __OFSUB__(v14, v37);
          uint64_t v38 = v14 - v37;
          if (v16) {
            goto LABEL_110;
          }
          if (__OFADD__(v38, 1LL)) {
            goto LABEL_111;
          }
          if (v38 + 1 < 1)
          {
            uint64_t v36 = 0LL;
            goto LABEL_43;
          }

          if ((_DWORD)v36 == 1) {
            break;
          }
          uint64_t v39 = (uint64_t *)(v34 + 64);
          uint64_t v40 = 1LL;
          while (1)
          {
            uint64_t v41 = *v39;
            v39 += 3;
            uint64_t v14 = v38 - v41;
            if (__OFSUB__(v38, v41))
            {
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }

            if (__OFADD__(v14, 1LL)) {
              goto LABEL_106;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v40;
            uint64_t v38 = v14;
            if (v36 == v40) {
              goto LABEL_42;
            }
          }

          uint64_t v36 = v40;
          uint64_t v14 = v38;
LABEL_43:
          char v35 = (4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C;
          uint64_t v33 = ((-15LL << v35) - 1) & v33 | (v36 << v35);
          uint64_t v13 = *(void *)(v34 + 24 + 24 * v36);
          swift_unknownObjectRetain();
          unint64_t result = (uint64_t *)swift_unknownObjectRelease();
          unint64_t v34 = v13;
          if (!*(_BYTE *)(v13 + 18)) {
            goto LABEL_62;
          }
        }

        uint64_t v14 = v38;
LABEL_42:
        if (!v14) {
          goto LABEL_43;
        }
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }

      unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
      uint64_t v14 = a2;
      uint64_t v13 = v3;
LABEL_62:
      uint64_t v42 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        uint64_t v43 = *(void *)(v13 + 24);
        BOOL v16 = __OFSUB__(v14, v43);
        uint64_t v44 = v14 - v43;
        uint64_t v6 = a3;
        if (v16) {
          goto LABEL_123;
        }
        if (__OFADD__(v44, 1LL))
        {
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
          goto LABEL_126;
        }

        if (v44 + 1 < 1)
        {
          uint64_t v42 = 0LL;
LABEL_88:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v12 = v33 & 0xFFFFFFFFFFFFF0FFLL | (v42 << 8);
          uint64_t v9 = v55;
          goto LABEL_13;
        }

        if ((_DWORD)v42 != 1)
        {
          int v49 = (uint64_t *)(v13 + 48);
          uint64_t v50 = 1LL;
          while (1)
          {
            uint64_t v51 = *v49;
            v49 += 3;
            uint64_t v14 = v44 - v51;
            if (__OFSUB__(v44, v51)) {
              goto LABEL_116;
            }
            if (__OFADD__(v14, 1LL)) {
              goto LABEL_117;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v50;
            uint64_t v44 = v14;
            if (v42 == v50) {
              goto LABEL_87;
            }
          }

          uint64_t v42 = v50;
          uint64_t v14 = v44;
          goto LABEL_88;
        }

        uint64_t v14 = v44;
      }

      else
      {
        uint64_t v6 = a3;
      }

unint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  return String.UnicodeScalarView.distance(from:to:)(0xFuLL, v3 | (v2 << 16), a1, a2);
}

void __swiftcall IndexSet._bridgeToObjectiveC()(NSIndexSet *__return_ptr retstr)
{
}

uint64_t specialized Collection.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  BOOL v3 = a2 < a1;
  if (a2 <= a1)
  {
    uint64_t result = 0LL;
    if (!v3) {
      return result;
    }
    unint64_t v7 = ~a2 + a1;
    unint64_t v8 = a1 ^ 0x8000000000000000LL;
    if (v7 >= v8) {
      unint64_t v7 = v8;
    }
    unint64_t v9 = 0x8000000000000000LL;
    if (v7 < 0x8000000000000000LL) {
      unint64_t v9 = v7;
    }
    while ((v7 & 0x8000000000000000LL) == 0)
    {
      if (v8 == v9) {
        goto LABEL_18;
      }
      if (v4 == --result) {
        return result;
      }
    }
  }

  else
  {
    uint64_t result = 0LL;
    unint64_t v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result) {
        return result;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

BOOL static IndexSet.Index.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL static IndexSet.Index.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL static IndexSet.Index.<= infix(_:_:)(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL static IndexSet.Index.> infix(_:_:)(void *a1, void *a2)
{
  return *a2 < *a1;
}

BOOL static IndexSet.Index.>= infix(_:_:)(void *a1, void *a2)
{
  return *a1 >= *a2;
}

uint64_t IndexSet.RangeView.startIndex.getter()
{
  return *(void *)v0;
}

uint64_t IndexSet.RangeView.endIndex.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t *IndexSet.RangeView.init(indexSet:intersecting:)@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v6 = *result;
  if ((a4 & 1) != 0) {
    goto LABEL_4;
  }
  if (!__OFSUB__(a3, a2))
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndexesInRange_, a2, a3 - a2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v7;
    *(_BYTE *)(inited + 24) = 0;
    v9[0] = inited;
    v9[1] = v6;
    IndexSet.intersection(_:)(v9, (uint64_t)&v10);
    swift_release();
    swift_release();
    uint64_t v6 = v10;
LABEL_4:
    uint64_t result = (uint64_t *)objc_msgSend(*(id *)(v6 + 16), sel_rangeCount);
    *a5 = 0LL;
    a5[1] = result;
    a5[2] = v6;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t IndexSet.init(integersIn:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }

  else
  {
    id v4 = objc_msgSend( objc_allocWithZone((Class)NSIndexSet),  sel_initWithIndexesInRange_,  result,  a2 - result);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(_BYTE *)(result + 24) = 0;
    *a3 = result;
  }

  return result;
}

uint64_t IndexSet.intersection(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  id v6 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 24) = 0;
  v27[0] = v5;
  uint64_t v28 = (void *)v4;
  swift_retain();
  swift_retain();
  IndexSetBoundaryIterator.init(_:_:)(v27, (uint64_t *)&v28, (uint64_t)v29);
  unint64_t v8 = IndexSetBoundaryIterator.next()();
  if ((v9 & 1) != 0)
  {
LABEL_30:
    swift_release();
    uint64_t result = swift_release();
    *(void *)a2 = v7;
    return result;
  }

  uint64_t v10 = v8;
  char v11 = 0;
  unint64_t v12 = 0LL;
  uint64_t v25 = MEMORY[0x18961AFC0] + 8LL;
  uint64_t v26 = a2;
  while (1)
  {
    if ((v11 & 1) == 0)
    {
      if (!objc_msgSend(*(id *)(v5 + 16), sel_containsIndex_, v10)
        || (objc_msgSend(*(id *)(v4 + 16), sel_containsIndex_, v10) & 1) == 0)
      {
        uint64_t v13 = IndexSetBoundaryIterator.next()();
        if ((v14 & 1) != 0) {
          goto LABEL_30;
        }
        uint64_t v10 = v13;
        while (!objc_msgSend(*(id *)(v5 + 16), sel_containsIndex_, v10, v25)
             || (objc_msgSend(*(id *)(v4 + 16), sel_containsIndex_, v10) & 1) == 0)
        {
          uint64_t v10 = IndexSetBoundaryIterator.next()();
          if ((v15 & 1) != 0) {
            goto LABEL_30;
          }
        }
      }

      BOOL v16 = IndexSetBoundaryIterator.next()();
      if ((v17 & 1) != 0) {
        goto LABEL_30;
      }
      unint64_t v12 = v10;
      uint64_t v10 = v16;
    }

    uint64_t result = (uint64_t)objc_msgSend(*(id *)(v5 + 16), sel_containsIndex_, v10, v25);
    if ((_DWORD)result)
    {
      uint64_t result = (uint64_t)objc_msgSend(*(id *)(v4 + 16), sel_containsIndex_, v10);
      if ((result & 1) != 0)
      {
        char v11 = 1;
        goto LABEL_25;
      }
    }

    if ((*(_BYTE *)(v7 + 24) & 1) == 0)
    {
      uint64_t result = *(void *)(v7 + 16);
LABEL_23:
      id v20 = (id)result;
      objc_msgSend(v20, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      uint64_t v21 = v28;
      a2 = swift_allocObject();
      *(void *)(a2 + 16) = v21;
      *(_BYTE *)(a2 + 24) = 1;
      id v22 = v21;
      uint64_t result = swift_release();
      if (__OFSUB__(v10, v12)) {
        goto LABEL_32;
      }
LABEL_24:
      objc_msgSend(v22, sel_addIndexesInRange_, v12);

      char v11 = 0;
      uint64_t v7 = a2;
      a2 = v26;
      goto LABEL_25;
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t result = *(void *)(v7 + 16);
    if ((*(_BYTE *)(v7 + 24) & 1) == 0) {
      goto LABEL_23;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      id v20 = (id)result;
      objc_msgSend(v20, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      uint64_t v24 = v28;
      a2 = swift_allocObject();
      *(void *)(a2 + 16) = v24;
      *(_BYTE *)(a2 + 24) = 1;
      id v22 = v24;
      swift_release();
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
        goto LABEL_30;
      }

      goto LABEL_24;
    }

    if (__OFSUB__(v10, v12)) {
      goto LABEL_33;
    }
    objc_msgSend((id)result, sel_addIndexesInRange_, v12, v10 - v12);
    char v11 = 0;
LABEL_25:
    uint64_t v10 = IndexSetBoundaryIterator.next()();
    if ((v23 & 1) != 0) {
      goto LABEL_30;
    }
  }

  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t IndexSet.RangeView.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 2);
  __int128 v3 = *v1;
  *(_OWORD *)a1 = *v1;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
  return swift_retain();
}

char *IndexSet.RangeView.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  char v3 = *(_BYTE *)(v2 + 24);
  uint64_t result = (char *)objc_msgSend(*(id *)(v2 + 16), sel_rangeAtIndex_, a1);
  BOOL v6 = __OFADD__(result, v5);
  uint64_t v7 = &result[v5];
  char v8 = v6;
  if ((v3 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }

    if ((uint64_t)v7 >= (uint64_t)result)
    {
LABEL_10:
      __break(1u);
      goto LABEL_12;
    }

    __break(1u);
  }

  if ((v8 & 1) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

uint64_t IndexSet.RangeView.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)v3;
  *(void *)(a3 + 32) = v4;
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  return swift_retain();
}

Swift::Int __swiftcall IndexSet.RangeView.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall IndexSet.RangeView.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1LL);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance IndexSet.RangeView( uint64_t *a1, uint64_t *a2)
{
  return specialized Collection.count.getter(*a1, *a2);
}

void protocol witness for Collection.endIndex.getter in conformance IndexSet.RangeView(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IndexSet.RangeView( char **a1, uint64_t *a2))(void, void)
{
  *a1 = IndexSet.RangeView.subscript.getter(*a2);
  a1[1] = v3;
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Collection.subscript.getter in conformance IndexSet.RangeView@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3 = *v2;
  *(void *)(a2 + 32) = *((void *)v2 + 2);
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v3;
  return swift_retain();
}

uint64_t protocol witness for Collection.indices.getter in conformance IndexSet.RangeView@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v2;
  a1[4] = v3;
  return swift_retain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance IndexSet.RangeView()
{
  return *v0 == v0[1];
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance IndexSet.RangeView@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance IndexSet.RangeView@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance IndexSet.RangeView()
{
  return specialized Collection.count.getter(*v0, v0[1]);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IndexSet.RangeView()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
  swift_release();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance IndexSet.RangeView( void *a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance IndexSet.RangeView@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySnySiGqd__Isgyrzo_10Foundation8IndexSetV9RangeViewVABsAG_pAMRszr__lIetMggrzo_Tp5( a1,  a2);
}

void IndexSet.Index.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  _StringGuts.grow(_:)(40LL);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x61722061206E6920LL;
  v3._unint64_t object = (void *)0xEF20666F2065676ELL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 3943982LL;
  v4._unint64_t object = (void *)0xE300000000000000LL;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._uint64_t countAndFlagsBits = 0LL;
  v5._unint64_t object = (void *)0xE000000000000000LL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x2065676E61725B20LL;
  v6._unint64_t object = (void *)0xE900000000000023LL;
  String.append(_:)(v6);
  if (__OFADD__(v1, 1LL))
  {
    __break(1u);
  }

  else
  {
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 47LL;
    v8._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 93LL;
    v10._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
  }

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance IndexSet.Index( void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance IndexSet.Index( void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance IndexSet.Index( void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance IndexSet.Index( void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t IndexSet.init<A>(integersIn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if (__OFSUB__(v10, v9))
  {
    __break(1u);
  }

  else
  {
    id v7 = objc_msgSend( objc_allocWithZone((Class)NSIndexSet),  sel_initWithIndexesInRange_,  v9,  v10 - v9,  0,  0x7FFFFFFFFFFFFFFFLL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    *(_BYTE *)(v8 + 24) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
    *a3 = v8;
  }

  return result;
}

uint64_t IndexSet.init(integer:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndex_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(_BYTE *)(result + 24) = 0;
  *a2 = result;
  return result;
}

uint64_t IndexSet.init()@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(_BYTE *)(result + 24) = 0;
  *a1 = result;
  return result;
}

void IndexSet.hash(into:)()
{
  id v1 = *(id *)(*(void *)v0 + 16LL);
  NSObject.hash(into:)();
}

id IndexSet.count.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count);
}

__n128 IndexSet.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v9 = *v1;
  uint64_t v3 = v9;
  swift_retain();
  IndexSet.startIndex.getter((uint64_t *)v7);
  uint64_t v4 = v8;
  __n128 result = (__n128)v7[0];
  __int128 v6 = v7[1];
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 40) = v4;
  return result;
}

id IndexSet.rangeView.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(v3 + 16);
  swift_retain();
  id result = objc_msgSend(v4, sel_rangeCount);
  *a1 = 0LL;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

uint64_t *IndexSet.rangeView(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *v3;
  swift_retain();
  return IndexSet.RangeView.init(indexSet:intersecting:)(&v8, a1, a2, 0, a3);
}

uint64_t *IndexSet.rangeView<A>(of:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  v5[1] = 0x7FFFFFFFFFFFFFFFLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v5[0] = v3;
  swift_retain();
  return IndexSet.RangeView.init(indexSet:intersecting:)(v5, v5[2], v5[3], 0, a1);
}

uint64_t IndexSet.startIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(*v1 + 16), sel_rangeCount);
  if (result < 1) {
    goto LABEL_9;
  }
  char v5 = *(_BYTE *)(v3 + 24);
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), sel_rangeAtIndex_, 0);
  uint64_t v6 = result;
  uint64_t v8 = result + v7;
  BOOL v9 = __OFADD__(result, v7);
  if ((v5 & 1) != 0)
  {
    if (!v9)
    {
      if (v8 < result)
      {
        __break(1u);
LABEL_9:
        *a1 = 0LL;
        a1[1] = 0LL;
        a1[2] = 0LL;
        a1[3] = -1LL;
LABEL_13:
        a1[4] = result;
        return result;
      }

uint64_t IndexSet.endIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *(_BYTE *)(*v1 + 24);
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(*v1 + 16), sel_rangeCount);
  uint64_t v6 = result;
  uint64_t v7 = result - 1;
  BOOL v8 = __OFSUB__(result, 1LL);
  if ((v4 & 1) != 0)
  {
    if (!v8)
    {
      uint64_t v9 = result - 1;
      if (result < 1) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (v8) {
    goto LABEL_23;
  }
  if (result <= 0) {
    goto LABEL_18;
  }
  uint64_t v9 = result - 1;
LABEL_11:
  uint64_t v10 = *(void **)(v3 + 16);
  char v11 = *(_BYTE *)(v3 + 24);
  uint64_t result = (uint64_t)objc_msgSend(v10, sel_rangeAtIndex_, v9);
  uint64_t v13 = result + v12;
  BOOL v14 = __OFADD__(result, v12);
  if ((v11 & 1) != 0)
  {
    if (!v14)
    {
      if (v13 >= result)
      {
LABEL_21:
        *a1 = v13;
        a1[1] = result;
        a1[2] = v13;
        a1[3] = v7;
        a1[4] = v6;
        return result;
      }

      __break(1u);
LABEL_18:
      uint64_t v13 = 0LL;
      uint64_t result = 0LL;
      goto LABEL_21;
    }

    goto LABEL_24;
  }

  if (v14)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (v13 >= result) {
    goto LABEL_21;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t IndexSet.subscript.getter(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t IndexSet.subscript.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 80) = *v2;
  __int128 v3 = a1[1];
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v3;
  __int128 v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = a1[4];
  return swift_retain();
}

id IndexSet.first.getter()
{
  return IndexSet.first.getter((SEL *)&selRef_firstIndex);
}

id IndexSet.last.getter()
{
  return IndexSet.first.getter((SEL *)&selRef_lastIndex);
}

id IndexSet.first.getter(SEL *a1)
{
  id result = [*(id *)(*(void *)v1 + 16) *a1];
  if (result == (id)0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerGreaterThan(_:)(Swift::Int a1)
{
  id v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexGreaterThanIndex_);
  result.Foundation::Morphology::Definiteness value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerLessThan(_:)(Swift::Int a1)
{
  id v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexLessThanIndex_);
  result.Foundation::Morphology::Definiteness value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerGreaterThanOrEqualTo(_:)(Swift::Int a1)
{
  id v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexGreaterThanOrEqualToIndex_);
  result.Foundation::Morphology::Definiteness value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerLessThanOrEqualTo(_:)(Swift::Int a1)
{
  id v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexLessThanOrEqualToIndex_);
  result.Foundation::Morphology::Definiteness value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

id IndexSet.integerGreaterThan(_:)(uint64_t a1, SEL *a2)
{
  id result = objc_msgSend(*(id *)(*(void *)v2 + 16), *a2, a1);
  if (result == (id)0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  return result;
}

char *IndexSet.indexRange(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  if (a1 == a2) {
    goto LABEL_9;
  }
  id v8 = objc_msgSend(*(id *)(v5 + 16), sel_firstIndex);
  if (v8 == (id)0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_9;
  }
  uint64_t v9 = (uint64_t)v8;
  id result = (char *)objc_msgSend(*(id *)(v5 + 16), sel_lastIndex);
  BOOL v11 = __OFSUB__(a2, 1LL);
  uint64_t v12 = a2 - 1;
  if (v11)
  {
    __break(1u);
  }

  else
  {
    if (v12 < v9
      || (id v13 = objc_msgSend(*(id *)(v5 + 16), sel_indexGreaterThanOrEqualToIndex_, a1), v13 == (id)0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t v14 = (uint64_t)v13,
          id v15 = objc_msgSend(*(id *)(v5 + 16), sel_indexLessThanOrEqualToIndex_, v12),
          v15 == (id)0x7FFFFFFFFFFFFFFFLL))
    {
LABEL_9:
      *(void *)&v25[0] = v5;
      id result = IndexSet._index(ofInteger:)(0LL, (uint64_t *)v28);
      __int128 v16 = *(_OWORD *)v28;
      __int128 v17 = *(_OWORD *)&v28[16];
      uint64_t v18 = *(void *)&v28[32];
      *(_OWORD *)a3 = *(_OWORD *)v28;
      *(_OWORD *)(a3 + 16) = v17;
      *(void *)(a3 + 32) = v18;
      *(_OWORD *)(a3 + 40) = v16;
      *(_OWORD *)(a3 + 56) = v17;
      *(void *)(a3 + 72) = v18;
      return result;
    }

    uint64_t v19 = (uint64_t)v15;
    IndexSet._index(ofInteger:)(v14, (uint64_t *)v28);
    __int128 v20 = *(_OWORD *)v28;
    __int128 v21 = *(_OWORD *)&v28[16];
    uint64_t v22 = *(void *)&v28[32];
    IndexSet._index(ofInteger:)(v19, (uint64_t *)v28);
    uint64_t v26 = *(void *)&v28[32];
    uint64_t v27 = v5;
    v25[0] = *(_OWORD *)v28;
    v25[1] = *(_OWORD *)&v28[16];
    id result = IndexSet.index(after:)(v25, v28);
    uint64_t v23 = *(void *)v28;
    if (*(uint64_t *)v28 >= (uint64_t)v20)
    {
      *(_OWORD *)a3 = v20;
      *(_OWORD *)(a3 + 16) = v21;
      *(void *)(a3 + 32) = v22;
      *(void *)(a3 + 40) = v23;
      __int128 v24 = *(_OWORD *)&v28[24];
      *(_OWORD *)(a3 + 48) = *(_OWORD *)&v28[8];
      *(_OWORD *)(a3 + 64) = v24;
      return result;
    }
  }

  __break(1u);
  return result;
}

char *IndexSet._index(ofInteger:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  id v6 = objc_msgSend(*(id *)(*v2 + 16), sel_rangeCount);
  id result = (char *)objc_msgSend(*(id *)(v5 + 16), sel__indexOfRangeContainingIndex_, a1);
  if (result == (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    *a2 = a1;
    a2[1] = 0LL;
    a2[2] = 0LL;
    a2[3] = 0LL;
LABEL_13:
    a2[4] = (uint64_t)v6;
    return result;
  }

  id v8 = result;
  uint64_t v9 = *(void **)(v5 + 16);
  char v10 = *(_BYTE *)(v5 + 24);
  id result = (char *)objc_msgSend(v9, sel_rangeAtIndex_, v8);
  uint64_t v12 = &result[v11];
  BOOL v13 = __OFADD__(result, v11);
  if ((v10 & 1) != 0)
  {
    if (v13)
    {
      __break(1u);
      goto LABEL_15;
    }

    if ((uint64_t)v12 >= (uint64_t)result)
    {
LABEL_12:
      *a2 = a1;
      a2[1] = (uint64_t)result;
      a2[2] = (uint64_t)v12;
      a2[3] = (uint64_t)v8;
      goto LABEL_13;
    }

    __break(1u);
  }

  if (v13)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

char *IndexSet.index(after:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  BOOL v5 = __OFADD__(*a1, 1LL);
  id result = (char *)(*a1 + 1LL);
  if (v5)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  id v8 = (char *)a1[1];
  uint64_t v7 = (char *)a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  if (result != v7) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (__OFADD__(v9, 1LL)) {
    goto LABEL_16;
  }
  id result = (char *)a1[2];
  if (v11 == v10) {
    goto LABEL_14;
  }
  uint64_t v12 = *(void **)(*(void *)v2 + 16LL);
  char v13 = *(_BYTE *)(*(void *)v2 + 24LL);
  id result = (char *)objc_msgSend(v12, sel_rangeAtIndex_, v9 + 1);
  uint64_t v7 = &result[v14];
  BOOL v15 = __OFADD__(result, v14);
  if ((v13 & 1) != 0)
  {
    if (!v15)
    {
      id v8 = result;
      uint64_t v9 = v11;
      if ((uint64_t)v7 < (uint64_t)result)
      {
        __break(1u);
        goto LABEL_12;
      }

char *IndexSet.indexRange<A>(in:)@<X0>(uint64_t a1@<X8>)
{
  return IndexSet.indexRange(in:)(v3, v4, a1);
}

id IndexSet.count(in:)(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(*(void *)v2 + 16LL);
  BOOL v5 = __OFSUB__(a2, a1);
  if ((*(_BYTE *)(*(void *)v2 + 24LL) & 1) != 0)
  {
    if (!v5) {
      return objc_msgSend(result, sel_countOfIndexesInRange_);
    }
    __break(1u);
  }

  if (!v5) {
    return objc_msgSend(result, sel_countOfIndexesInRange_);
  }
  __break(1u);
  return result;
}

id IndexSet.count<A>(in:)()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  id result = *(id *)(v1 + 16);
  BOOL v3 = __OFSUB__(v5, v4);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    if (!v3) {
      return objc_msgSend(result, sel_countOfIndexesInRange_, v4, v5 - v4, 0, 0x7FFFFFFFFFFFFFFFLL);
    }
    __break(1u);
  }

  if (!v3) {
    return objc_msgSend(result, sel_countOfIndexesInRange_, v4, v5 - v4, 0, 0x7FFFFFFFFFFFFFFFLL);
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall IndexSet.contains(_:)(Swift::Int a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_containsIndex_, a1);
}

id IndexSet.contains(integersIn:)(uint64_t a1, uint64_t a2)
{
  return IndexSet.contains(integersIn:)(a1, a2, (SEL *)&selRef_containsIndexesInRange_);
}

id IndexSet.contains<A>(integersIn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IndexSet.contains<A>(integersIn:)(a1, a2, a3, (SEL *)&selRef_containsIndexesInRange_);
}

id IndexSet.contains(integersIn:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 16LL);
  BOOL v3 = *(void **)(*(void *)a1 + 16LL);
  id v4 = v2;
  objc_msgSend(v3, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  id v5 = objc_msgSend(v2, sel_containsIndexes_, v7);

  return v5;
}

id IndexSet.intersects(integersIn:)(uint64_t a1, uint64_t a2)
{
  return IndexSet.contains(integersIn:)(a1, a2, (SEL *)&selRef_intersectsIndexesInRange_);
}

id IndexSet.contains(integersIn:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  id result = *(id *)(*(void *)v3 + 16LL);
  BOOL v6 = __OFSUB__(a2, a1);
  if ((*(_BYTE *)(*(void *)v3 + 24LL) & 1) != 0)
  {
    if (!v6) {
      return objc_msgSend(result, *a3, a1, a2 - a1);
    }
    __break(1u);
  }

  if (!v6) {
    return objc_msgSend(result, *a3, a1, a2 - a1);
  }
  __break(1u);
  return result;
}

id IndexSet.intersects<A>(integersIn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IndexSet.contains<A>(integersIn:)(a1, a2, a3, (SEL *)&selRef_intersectsIndexesInRange_);
}

id IndexSet.contains<A>(integersIn:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v6 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  id result = *(id *)(v6 + 16);
  BOOL v8 = __OFSUB__(v10, v9);
  if ((*(_BYTE *)(v6 + 24) & 1) != 0)
  {
    if (!v8) {
      return objc_msgSend(result, *a4, v9, v10 - v9, 0, 0x7FFFFFFFFFFFFFFFLL);
    }
    __break(1u);
  }

  if (!v8) {
    return objc_msgSend(result, *a4, v9, v10 - v9, 0, 0x7FFFFFFFFFFFFFFFLL);
  }
  __break(1u);
  return result;
}

char *IndexSet.formIndex(after:)(char **a1)
{
  BOOL v3 = __OFADD__(*a1, 1LL);
  id result = *a1 + 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_17;
  }

  if (result != a1[2])
  {
LABEL_15:
    *a1 = result;
    return result;
  }

  id v5 = a1[3];
  uint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v6 == a1[4]) {
    goto LABEL_15;
  }
  uint64_t v7 = *v1;
  a1[3] = v6;
  char v8 = *(_BYTE *)(v7 + 24);
  id result = (char *)objc_msgSend(*(id *)(v7 + 16), sel_rangeAtIndex_);
  uint64_t v10 = &result[v9];
  BOOL v11 = __OFADD__(result, v9);
  if ((v8 & 1) == 0) {
    goto LABEL_12;
  }
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if ((uint64_t)v10 >= (uint64_t)result)
  {
LABEL_14:
    a1[1] = result;
    a1[2] = v10;
    goto LABEL_15;
  }

  __break(1u);
LABEL_12:
  if (v11)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

char *IndexSet.index(before:)@<X0>(void **a1@<X0>, char **a2@<X8>)
{
  uint64_t v6 = (char *)*a1;
  id result = (char *)a1[1];
  uint64_t v7 = (char *)a1[2];
  char v8 = (char *)a1[3];
  uint64_t v9 = (char *)a1[4];
  if (v6 != result) {
    goto LABEL_11;
  }
  if (!v8)
  {
LABEL_14:
    id result = v6;
LABEL_18:
    *a2 = v6;
    a2[1] = result;
    a2[2] = v7;
    a2[3] = v8;
    a2[4] = v9;
    return result;
  }

  BOOL v10 = __OFSUB__(v8--, 1LL);
  if (v10)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  BOOL v11 = *(void **)(*(void *)v2 + 16LL);
  char v12 = *(_BYTE *)(*(void *)v2 + 24LL);
  id result = (char *)objc_msgSend(v11, sel_rangeAtIndex_, v8);
  uint64_t v7 = &result[v13];
  BOOL v14 = __OFADD__(result, v13);
  if ((v12 & 1) != 0)
  {
    if (v14)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }

    if ((uint64_t)v7 < (uint64_t)result)
    {
      __break(1u);
LABEL_11:
      BOOL v10 = __OFSUB__(v6--, 1LL);
      if (!v10) {
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_14;
    }

    goto LABEL_17;
  }

  if (v14)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if ((uint64_t)v7 >= (uint64_t)result)
  {
LABEL_17:
    uint64_t v6 = v7 - 1;
    if (!__OFSUB__(v7, 1LL)) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }

char **IndexSet.formIndex(before:)(char **result)
{
  uint64_t v2 = result;
  BOOL v3 = *result;
  id v4 = result[1];
  if (*result != v4) {
    goto LABEL_11;
  }
  id v5 = result[3];
  if (!v5) {
    return result;
  }
  uint64_t v6 = v5 - 1;
  if (__OFSUB__(v5, 1LL))
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v7 = *v1;
  result[3] = v6;
  char v8 = *(_BYTE *)(v7 + 24);
  id result = (char **)objc_msgSend(*(id *)(v7 + 16), sel_rangeAtIndex_);
  BOOL v3 = (char *)result + v9;
  LOBYTE(v4) = __OFADD__(result, v9);
  if ((v8 & 1) == 0) {
    goto LABEL_14;
  }
  if ((v4 & 1) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if ((uint64_t)v3 < (uint64_t)result)
  {
    __break(1u);
LABEL_11:
    BOOL v10 = __OFSUB__(v3--, 1LL);
    if (!v10) {
      goto LABEL_17;
    }
    __break(1u);
LABEL_14:
    if ((v4 & 1) != 0)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }

    if ((uint64_t)v3 < (uint64_t)result)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }

  v2[1] = (char *)result;
  v2[2] = v3;
  BOOL v10 = __OFSUB__(v3--, 1LL);
  if (v10)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

uint64_t IndexSet.formUnion(_:)(void *a1)
{
  return IndexSet.formUnion(_:)(a1, (void (*)(uint64_t *__return_ptr, void *))IndexSet.union(_:));
}

char *IndexSet.union(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *v2;
  id v5 = *(void **)(v4 + 16);
  swift_retain();
  uint64_t v6 = specialized Collection.count.getter(0, (uint64_t)objc_msgSend(v5, sel_rangeCount));
  swift_release();
  uint64_t v7 = *(void **)(v3 + 16);
  swift_retain();
  uint64_t v8 = specialized Collection.count.getter(0, (uint64_t)objc_msgSend(v7, sel_rangeCount));
  swift_release();
  if (v8 >= v6) {
    uint64_t v9 = v3;
  }
  else {
    uint64_t v9 = v4;
  }
  if (v8 < v6) {
    uint64_t v4 = v3;
  }
  swift_retain();
  BOOL v10 = *(void **)(v4 + 16);
  swift_retain();
  id v11 = objc_msgSend(v10, sel_rangeCount);
  if (!v11)
  {
    id result = (char *)swift_release();
LABEL_33:
    *a2 = v9;
    return result;
  }

  id v12 = v11;
  swift_retain();
  uint64_t v13 = 0LL;
  while (1)
  {
    char v18 = *(_BYTE *)(v4 + 24);
    id result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeAtIndex_, v13);
    uint64_t v19 = result;
    __int128 v21 = &result[v20];
    BOOL v22 = __OFADD__(result, v20);
    if ((v18 & 1) != 0)
    {
      if (v22) {
        goto LABEL_37;
      }
    }

    else
    {
      if (v22) {
        goto LABEL_39;
      }
    }

    id v23 = (id)(v13 + 1);
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_35;
    }
    if ((*(_BYTE *)(v9 + 24) & 1) == 0)
    {
      id result = *(char **)(v9 + 16);
LABEL_9:
      BOOL v15 = result;
      objc_msgSend(v15, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v26;
      *(_BYTE *)(v16 + 24) = 1;
      id v17 = v26;
      id result = (char *)swift_release();
      if (__OFSUB__(v21, v19)) {
        goto LABEL_36;
      }
LABEL_10:
      objc_msgSend(v17, sel_addIndexesInRange_, v19);

      uint64_t v9 = v16;
      goto LABEL_11;
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id result = *(char **)(v9 + 16);
    if ((*(_BYTE *)(v9 + 24) & 1) == 0) {
      goto LABEL_9;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      BOOL v15 = result;
      objc_msgSend(v15, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v26;
      *(_BYTE *)(v16 + 24) = 1;
      id v17 = v26;
      swift_release();
      if (__OFSUB__(v21, v19))
      {
        __break(1u);
LABEL_31:
        id result = (char *)swift_release_n();
        goto LABEL_33;
      }

      goto LABEL_10;
    }

    if (__OFSUB__(v21, v19)) {
      goto LABEL_41;
    }
    objc_msgSend(result, sel_addIndexesInRange_, v19, v21 - v19);
LABEL_11:
    ++v13;
    if (v23 == v12) {
      goto LABEL_31;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void IndexSet.insert(integersIn:)(uint64_t a1, uint64_t a2)
{
}

char *IndexSet.symmetricDifference(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  id v6 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 24) = 0;
  uint64_t v73 = v7;
  uint64_t v8 = *(void **)(v5 + 16);
  swift_retain();
  swift_retain();
  id v9 = objc_msgSend(v8, sel_rangeCount);
  uint64_t v71 = v4;
  id result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeCount);
  BOOL v72 = v9 == 0LL;
  char v60 = result;
  if (!v9) {
    goto LABEL_9;
  }
  char v11 = *(_BYTE *)(v5 + 24);
  id result = (char *)objc_msgSend(*(id *)(v5 + 16), sel_rangeAtIndex_, 0);
  uint64_t v69 = (uint64_t)result;
  uint64_t v13 = &result[v12];
  BOOL v14 = __OFADD__(result, v12);
  if ((v11 & 1) != 0)
  {
    if (v14) {
      goto LABEL_155;
    }
    BOOL v15 = result;
    if ((uint64_t)v13 < (uint64_t)result)
    {
      __break(1u);
LABEL_9:
      uint64_t v69 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v16 = 0LL;
      goto LABEL_14;
    }
  }

  else
  {
    if (v14) {
      goto LABEL_156;
    }
    BOOL v15 = result;
    if ((uint64_t)v13 < (uint64_t)result)
    {
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
  }

  uint64_t v16 = 1LL;
  id result = v60;
LABEL_14:
  BOOL v17 = result == 0LL;
  unint64_t v58 = a2;
  id v59 = v9;
  uint64_t v62 = v16;
  uint64_t v64 = (uint64_t)v13;
  if (!result)
  {
LABEL_22:
    uint64_t v66 = 0LL;
    BOOL v22 = 0LL;
LABEL_27:
    uint64_t v61 = 0LL;
    LOBYTE(v23) = 0;
    uint64_t v24 = 0LL;
    char v25 = 0;
    uint64_t v26 = 0LL;
    char v27 = 0;
    uint64_t v67 = v22;
    uint64_t v68 = (uint64_t)result;
    uint64_t v63 = (uint64_t)result;
    uint64_t v65 = v22;
    char v70 = v17;
LABEL_31:
    char v29 = v23;
    while (1)
    {
      if (v72)
      {
        uint64_t v30 = v5;
        if ((v70 & 1) != 0)
        {
          swift_release();
          id result = (char *)swift_release();
          *unint64_t v58 = v73;
          return result;
        }

        if ((v26 & 1) != 0)
        {
          uint64_t v31 = (uint64_t)v65;
          if (v65 == (char *)0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v32 = v66;
            uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            if ((v25 & 1) == 0)
            {
              uint64_t v34 = v69;
              goto LABEL_81;
            }

            uint64_t v24 = 1LL;
            uint64_t v33 = v62;
            if ((id)v62 == v59)
            {
              uint64_t v34 = 0LL;
              char v35 = 0LL;
              uint64_t v36 = (uint64_t)v59;
              goto LABEL_110;
            }

            BOOL v17 = 0;
            uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v68 = v63;
            uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_95:
            uint64_t v67 = (char *)v46;
            goto LABEL_96;
          }

          goto LABEL_52;
        }

        uint64_t v31 = v63;
        if (v63 == 0x7FFFFFFFFFFFFFFFLL)
        {
          BOOL v17 = 0;
          if ((v25 & 1) == 0)
          {
            char v70 = 0;
            char v39 = 0;
            uint64_t v38 = 1LL;
            uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v26 = 1LL;
            uint64_t v67 = v65;
            uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
            BOOL v72 = 1;
            goto LABEL_128;
          }

          uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v33 = v62;
          if ((id)v62 == v59)
          {
            uint64_t v38 = 1LL;
            uint64_t v62 = (uint64_t)v59;
            uint64_t v26 = 1LL;
            uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v69 = 0LL;
            uint64_t v67 = v65;
            uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v64 = 0LL;
            char v70 = 0;
            BOOL v72 = 1;
            char v39 = 1;
            goto LABEL_128;
          }

          uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v24 = 0LL;
          uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v46 = (uint64_t)v65;
          goto LABEL_95;
        }

        BOOL v17 = 0;
        char v70 = 0;
        uint64_t v67 = v65;
        uint64_t v68 = v63;
      }

      else
      {
        uint64_t v30 = v5;
        if (v17)
        {
          if ((v27 & 1) != 0)
          {
            uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v33 = v62;
            if ((id)v62 != v59)
            {
              BOOL v17 = 1;
              uint64_t v41 = v64;
              goto LABEL_96;
            }

            uint64_t v34 = 0LL;
            BOOL v72 = 1;
            uint64_t v37 = 0LL;
            uint64_t v36 = (uint64_t)v59;
            BOOL v17 = 1;
            if (v64 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_108;
            }
            uint64_t v31 = v64;
            uint64_t v38 = v24;
            uint64_t v62 = (uint64_t)v59;
            uint64_t v69 = 0LL;
            uint64_t v64 = 0LL;
            char v39 = 1;
            goto LABEL_128;
          }

          uint64_t v31 = v69;
          if (v69 != 0x7FFFFFFFFFFFFFFFLL)
          {
            BOOL v72 = 0;
            char v39 = 0;
            BOOL v17 = 1;
            uint64_t v38 = v24;
            goto LABEL_128;
          }

          if ((v24 & 1) == 0)
          {
            BOOL v72 = 0;
            char v39 = 0;
            uint64_t v38 = 1LL;
            uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v26 = 1LL;
            BOOL v17 = 1;
            uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_128;
          }

          uint64_t v38 = 0LL;
          uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v32 = v66;
          if ((char *)v66 == v60)
          {
            uint64_t v67 = 0LL;
            uint64_t v68 = 0LL;
            uint64_t v63 = 0LL;
            uint64_t v65 = 0LL;
            uint64_t v66 = (uint64_t)v60;
            BOOL v17 = 1;
            uint64_t v26 = 0LL;
            char v70 = 1;
            uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
            BOOL v72 = 0;
            char v39 = 0;
            goto LABEL_128;
          }

          uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
          BOOL v72 = 0;
          goto LABEL_115;
        }

        uint64_t v40 = v64;
        if ((v27 & 1) == 0) {
          uint64_t v40 = v69;
        }
        if ((v26 & 1) != 0) {
          uint64_t v31 = (uint64_t)v67;
        }
        else {
          uint64_t v31 = v68;
        }
        if (v31 >= v40)
        {
          if ((v27 & 1) != 0)
          {
            BOOL v17 = 0;
            uint64_t v33 = v62;
            if ((id)v62 == v59)
            {
              uint64_t v34 = 0LL;
              uint64_t v37 = 0LL;
              BOOL v72 = 1;
              uint64_t v36 = (uint64_t)v59;
              uint64_t v24 = v26;
              uint64_t v41 = v64;
              if (v64 != v31) {
                goto LABEL_65;
              }
LABEL_108:
              if ((v24 & 1) == 0)
              {
                uint64_t v69 = v34;
                uint64_t v62 = v36;
                uint64_t v38 = 1LL;
                uint64_t v26 = 1LL;
                uint64_t v64 = (uint64_t)v37;
                char v39 = 1;
                goto LABEL_128;
              }

              char v35 = v37;
              LOBYTE(v24) = v72;
LABEL_110:
              BOOL v17 = 1;
              uint64_t v62 = v36;
              if ((char *)v66 == v60)
              {
                uint64_t v68 = 0LL;
                uint64_t v69 = v34;
                uint64_t v63 = 0LL;
                uint64_t v64 = (uint64_t)v35;
                uint64_t v38 = 0LL;
                uint64_t v26 = 0LL;
                uint64_t v66 = (uint64_t)v60;
                uint64_t v67 = 0LL;
                uint64_t v65 = 0LL;
                char v70 = 1;
                BOOL v72 = v24;
                char v39 = 1;
                goto LABEL_128;
              }

              BOOL v72 = v24;
              char v39 = 1;
              uint64_t v32 = v66;
LABEL_116:
              char v51 = *(_BYTE *)(v71 + 24);
              id result = (char *)objc_msgSend(*(id *)(v71 + 16), sel_rangeAtIndex_, v32, v58);
              uint64_t v53 = &result[v52];
              BOOL v54 = __OFADD__(result, v52);
              if ((v51 & 1) != 0)
              {
                if (v54) {
                  goto LABEL_145;
                }
              }

              else
              {
                if (v54) {
                  goto LABEL_147;
                }
              }

              BOOL v50 = __OFADD__(v32, 1LL);
              uint64_t v55 = v32 + 1;
              if (v50) {
                goto LABEL_138;
              }
              uint64_t v68 = (uint64_t)result;
              uint64_t v69 = v34;
              uint64_t v66 = v55;
              uint64_t v67 = &result[v52];
              uint64_t v63 = (uint64_t)result;
              uint64_t v64 = (uint64_t)v35;
              uint64_t v38 = 0LL;
              uint64_t v26 = 0LL;
              BOOL v17 = 0;
              char v70 = 0;
              uint64_t v65 = &result[v52];
              goto LABEL_128;
            }

            uint64_t v24 = v26;
            uint64_t v41 = v64;
LABEL_96:
            char v47 = *(_BYTE *)(v30 + 24);
            id result = (char *)objc_msgSend(*(id *)(v30 + 16), sel_rangeAtIndex_, v33, v58);
            uint64_t v34 = (uint64_t)result;
            uint64_t v37 = &result[v48];
            BOOL v49 = __OFADD__(result, v48);
            if ((v47 & 1) != 0)
            {
              if (v49) {
                goto LABEL_141;
              }
            }

            else
            {
              if (v49) {
                goto LABEL_143;
              }
            }

            BOOL v50 = __OFADD__(v33, 1LL);
            uint64_t v36 = v33 + 1;
            if (v50) {
              goto LABEL_136;
            }
            BOOL v72 = 0;
            if (v41 == v31) {
              goto LABEL_108;
            }
LABEL_65:
            uint64_t v69 = v34;
            uint64_t v62 = v36;
            char v39 = 1;
            uint64_t v31 = v41;
            uint64_t v38 = v24;
            uint64_t v64 = (uint64_t)v37;
LABEL_128:
            char v25 = v39 ^ 1;
            uint64_t v24 = v38;
            char v27 = v39 ^ 1;
            goto LABEL_129;
          }

          uint64_t v34 = v69;
          if (v69 != v31)
          {
            BOOL v17 = 0;
            BOOL v72 = 0;
            char v39 = 0;
            uint64_t v31 = v69;
            uint64_t v38 = v26;
            goto LABEL_128;
          }

          uint64_t v31 = v69;
          uint64_t v32 = v66;
          if ((v26 & 1) == 0)
          {
            BOOL v17 = 0;
            BOOL v72 = 0;
            char v39 = 0;
            uint64_t v38 = 1LL;
            uint64_t v31 = v69;
            uint64_t v26 = 1LL;
            goto LABEL_128;
          }

char *IndexSetBoundaryIterator.init(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  id v6 = objc_msgSend(*(id *)(*a1 + 16), sel_rangeCount);
  id v7 = objc_msgSend(*(id *)(v5 + 16), sel_rangeCount);
  if (!v6)
  {
LABEL_9:
    BOOL v10 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
    if (!v7)
    {
LABEL_10:
      id result = 0LL;
      BOOL v15 = 0LL;
      uint64_t v16 = 0LL;
LABEL_26:
      *(void *)a3 = 0LL;
      *(void *)(a3 + 8) = v6;
      *(void *)(a3 + 16) = v4;
      *(void *)(a3 + 24) = v14;
      *(void *)(a3 + 32) = 0LL;
      *(void *)(a3 + 40) = v7;
      *(void *)(a3 + 48) = v5;
      *(void *)(a3 + 56) = v16;
      *(void *)(a3 + 64) = v10;
      *(void *)(a3 + 72) = v12;
      *(_BYTE *)(a3 + 80) = v6 == 0LL;
      *(void *)(a3 + 88) = result;
      *(void *)(a3 + 96) = v15;
      *(_BYTE *)(a3 + 104) = v7 == 0LL;
      *(_WORD *)(a3 + 105) = 0;
      return result;
    }

    goto LABEL_15;
  }

  char v8 = *(_BYTE *)(v4 + 24);
  id result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeAtIndex_, 0);
  BOOL v10 = result;
  uint64_t v12 = &result[v11];
  BOOL v13 = __OFADD__(result, v11);
  if ((v8 & 1) != 0)
  {
    if (v13)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    if ((uint64_t)v12 < (uint64_t)result)
    {
      __break(1u);
      goto LABEL_9;
    }
  }

  else
  {
    if (v13)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }

    if ((uint64_t)v12 < (uint64_t)result)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }

  if ((uint64_t)v12 < (uint64_t)result)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v14 = 1LL;
  if (!v7) {
    goto LABEL_10;
  }
LABEL_15:
  char v17 = *(_BYTE *)(v5 + 24);
  id result = (char *)objc_msgSend(*(id *)(v5 + 16), sel_rangeAtIndex_, 0);
  BOOL v15 = &result[v18];
  BOOL v19 = __OFADD__(result, v18);
  if ((v17 & 1) != 0)
  {
    if (v19)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    __break(1u);
  }

  if (v19)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  if ((uint64_t)v15 >= (uint64_t)result)
  {
LABEL_24:
    if ((uint64_t)v15 >= (uint64_t)result)
    {
      uint64_t v16 = 1LL;
      goto LABEL_26;
    }

    goto LABEL_28;
  }

char *IndexSetBoundaryIterator.next()()
{
  if (*(_BYTE *)(v0 + 80) == 1)
  {
    if ((*(_BYTE *)(v0 + 104) & 1) != 0) {
      return 0LL;
    }
    uint64_t v4 = (BOOL *)(v0 + 104);
    uint64_t v5 = (void *)(v0 + 88);
    id v6 = (char **)(v0 + 96);
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v2 = 64LL;
    if (*(_BYTE *)(v0 + 105)) {
      uint64_t v2 = 72LL;
    }
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = (BOOL *)(v0 + 104);
    uint64_t v5 = (void *)(v0 + 88);
    id v6 = (char **)(v0 + 96);
    if ((*(_BYTE *)(v0 + 104) & 1) != 0)
    {
      uint64_t v1 = 0x7FFFFFFFFFFFFFFFLL;
      if ((*(_BYTE *)(v0 + 105) & 1) != 0) {
        goto LABEL_19;
      }
      if (v3 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v7 = 0LL;
        uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
        if ((*(_BYTE *)(v0 + 106) & 1) != 0) {
          goto LABEL_46;
        }
LABEL_23:
        char v12 = 1;
LABEL_69:
        *(_BYTE *)(v0 + 106) = v12;
        goto LABEL_70;
      }

LABEL_86:
  __break(1u);
  return result;
}

                  if (!v97)
                  {
                    char v12 = (void *)MEMORY[0x18961AFF0];
                    goto LABEL_152;
                  }

                  if (v97 == v12[2])
                  {
                    swift_retain();
                    goto LABEL_152;
                  }

                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  uint64_t v68 = static _DictionaryStorage.allocate(capacity:)();
                  uint64_t v69 = 0LL;
                  char v70 = *v94;
                  uint64_t v71 = v68 + 64;
                  while (1)
                  {
                    if (v70)
                    {
                      uint64_t v75 = __clz(__rbit64(v70));
                      v70 &= v70 - 1;
                      uint64_t v76 = v75 | (v69 << 6);
                    }

                    else
                    {
                      uint64_t v77 = v69 + 1;
                      if (__OFADD__(v69, 1LL)) {
                        goto LABEL_163;
                      }
                      if (v77 >= v93) {
                        goto LABEL_151;
                      }
                      unint64_t v78 = v94[v77];
                      ++v69;
                      if (!v78)
                      {
                        uint64_t v69 = v77 + 1;
                        if (v77 + 1 >= v93) {
                          goto LABEL_151;
                        }
                        unint64_t v78 = v94[v69];
                        if (!v78)
                        {
                          uint64_t v69 = v77 + 2;
                          if (v77 + 2 >= v93) {
                            goto LABEL_151;
                          }
                          unint64_t v78 = v94[v69];
                          if (!v78)
                          {
                            uint64_t v69 = v77 + 3;
                            if (v77 + 3 >= v93) {
                              goto LABEL_151;
                            }
                            unint64_t v78 = v94[v69];
                            if (!v78)
                            {
                              unint64_t v79 = v77 + 4;
                              if (v79 >= v93) {
                                goto LABEL_151;
                              }
                              unint64_t v78 = v94[v79];
                              if (!v78)
                              {
                                while (1)
                                {
                                  uint64_t v69 = v79 + 1;
                                  if (__OFADD__(v79, 1LL)) {
                                    goto LABEL_165;
                                  }
                                  if (v69 >= v93) {
                                    break;
                                  }
                                  unint64_t v78 = v94[v69];
                                  ++v79;
                                  if (v78) {
                                    goto LABEL_141;
                                  }
                                }

                  uint64_t v73 = (v84 - 1) & v84;
                  char v70 = v85;
                  uint64_t v75 = __clz(__rbit64(v84)) + (v85 << 6);
                }

                uint64_t v76 = 8 * v75;
                uint64_t v77 = *(void *)(*(void *)(v231 + 48) + 8 * v75);
                unint64_t v78 = 16 * v75;
                unint64_t v79 = (uint64_t *)(*(void *)(v231 + 56) + v78);
                unint64_t v81 = *v79;
                uint64_t v80 = v79[1];
                *(void *)(*(void *)(v63 + 48) + v76) = v77;
                uint64_t v82 = (void *)(*(void *)(v63 + 56) + v78);
                *uint64_t v82 = v81;
                v82[1] = v80;
                swift_bridgeObjectRetain();
              }
            }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v38 = v106;
        if (!v106)
        {
LABEL_41:
          Hasher._combine(_:)(0);
          char v39 = v107;
          if (!v107)
          {
LABEL_42:
            Hasher._combine(_:)(0);
            goto LABEL_89;
          }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        char v35 = v113;
        if (!v113)
        {
LABEL_41:
          Hasher._combine(_:)(0);
          uint64_t v36 = v114;
          if (!v114)
          {
LABEL_42:
            Hasher._combine(_:)(0);
            goto LABEL_89;
          }

          id result = String.UnicodeScalarView._foreignIndex(after:)();
          uint64_t v26 = result;
LABEL_87:
          char v25 = v26 >> 14;
          if (v26 >> 14 >= v47 || v17 >> 14 >= v45) {
            goto LABEL_89;
          }
        }

        if (v43 <= v17 >> 16)
        {
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
          return result;
        }

                swift_bridgeObjectRelease_n();
                uint64_t v2 = v154;
                if ((v120 & 1) == 0) {
                  goto LABEL_46;
                }
                goto LABEL_47;
              }

              goto LABEL_110;
            }

    __break(1u);
    goto LABEL_87;
  }

  char v18 = __src[v17];
  uint64_t v19 = v14 + 1;
  if (!v18)
  {
    uint64_t v19 = v14 + 2;
    if (v14 + 2 >= v133) {
      goto LABEL_73;
    }
    char v18 = __src[v19];
    if (!v18)
    {
      uint64_t v19 = v14 + 3;
      if (v14 + 3 >= v133) {
        goto LABEL_73;
      }
      char v18 = __src[v19];
      if (!v18)
      {
        uint64_t v20 = v14 + 4;
        if (v14 + 4 < v133)
        {
          char v18 = __src[v20];
          if (v18)
          {
            uint64_t v19 = v14 + 4;
            goto LABEL_22;
          }

          while (1)
          {
            uint64_t v19 = v20 + 1;
            if (__OFADD__(v20, 1LL)) {
              goto LABEL_85;
            }
            if (v19 >= v133) {
              goto LABEL_73;
            }
            char v18 = __src[v19];
            ++v20;
            if (v18) {
              goto LABEL_22;
            }
          }
        }

        goto LABEL_73;
      }
    }
  }

  _ParseInfo.retreat()();
  return 1LL;
}

        char v171 = v93;
LABEL_120:
        v59(v171, a2);
        return 0LL;
      }
    }

    else if (v88 >= 64)
    {
      uint64_t v235 = v86;
      unint64_t v134 = v231;
      BOOL v135 = v206;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v231 + 32))(v206, v232, v56);
      if (v86 < 0)
      {
        (*(void (**)(_BYTE *, uint64_t))(v134 + 8))(v135, v56);
        uint64_t v93 = v234;
        goto LABEL_86;
      }

      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v136 = v135;
      uint64_t v89 = v228;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v90 = v136;
      goto LABEL_54;
    }

    uint64_t v91 = v232;
    unint64_t v92 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(_BYTE *, uint64_t))(v231 + 8))(v91, v56);
    uint64_t v93 = v234;
    if (v236 >= v92) {
      goto LABEL_55;
    }
    goto LABEL_86;
  }

                  BOOL v49 = v102;
                  if (!v102)
                  {
                    uint64_t v3 = MEMORY[0x18961AFF0];
                    goto LABEL_152;
                  }

                  if (v102 == *(uint64_t **)(v3 + 16))
                  {
                    swift_retain();
                    goto LABEL_152;
                  }

                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  uint64_t v75 = static _DictionaryStorage.allocate(capacity:)();
                  uint64_t v76 = 0LL;
                  uint64_t v77 = *v103;
                  unint64_t v78 = v75 + 64;
                  while (1)
                  {
                    if (v77)
                    {
                      uint64_t v82 = v49;
                      uint64_t v83 = __clz(__rbit64(v77));
                      v77 &= v77 - 1;
                      uint64_t v84 = v83 | (v76 << 6);
                    }

                    else
                    {
                      Swift::String v85 = v76 + 1;
                      if (__OFADD__(v76, 1LL)) {
                        goto LABEL_160;
                      }
                      if (v85 >= v104) {
                        goto LABEL_151;
                      }
                      uint64_t v86 = v103[v85];
                      ++v76;
                      if (!v86)
                      {
                        uint64_t v76 = v85 + 1;
                        if (v85 + 1 >= v104) {
                          goto LABEL_151;
                        }
                        uint64_t v86 = v103[v76];
                        if (!v86)
                        {
                          uint64_t v76 = v85 + 2;
                          if (v85 + 2 >= v104) {
                            goto LABEL_151;
                          }
                          uint64_t v86 = v103[v76];
                          if (!v86)
                          {
                            uint64_t v76 = v85 + 3;
                            if (v85 + 3 >= v104) {
                              goto LABEL_151;
                            }
                            uint64_t v86 = v103[v76];
                            if (!v86)
                            {
                              unint64_t v87 = v85 + 4;
                              if (v87 >= v104) {
                                goto LABEL_151;
                              }
                              uint64_t v86 = v103[v87];
                              if (!v86)
                              {
                                while (1)
                                {
                                  uint64_t v76 = v87 + 1;
                                  if (__OFADD__(v87, 1LL)) {
                                    goto LABEL_162;
                                  }
                                  if (v76 >= v104) {
                                    break;
                                  }
                                  uint64_t v86 = v103[v76];
                                  ++v87;
                                  if (v86) {
                                    goto LABEL_141;
                                  }
                                }

                            __break(1u);
LABEL_87:
                            swift_unexpectedError();
                            __break(1u);
LABEL_88:
                            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                            __break(1u);
                            JUMPOUT(0x1834103A0LL);
                          }

                          unsigned int v98 = v86 + 5;
                        }
                      }
                    }
                  }

uint64_t IndexSet.formSymmetricDifference(_:)(void *a1)
{
  return IndexSet.formUnion(_:)( a1,  (void (*)(uint64_t *__return_ptr, void *))IndexSet.symmetricDifference(_:));
}

uint64_t IndexSet.formIntersection(_:)(void *a1)
{
  return IndexSet.formUnion(_:)(a1, (void (*)(uint64_t *__return_ptr, void *))IndexSet.intersection(_:));
}

uint64_t IndexSet.formUnion(_:)(void *a1, void (*a2)(uint64_t *__return_ptr, void *))
{
  uint64_t v3 = *v2;
  v5[0] = *a1;
  v5[1] = v3;
  a2(&v6, v5);
  uint64_t result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  if (*(_BYTE *)(*(void *)v1 + 24LL) != 1)
  {
    uint64_t v4 = *(void **)(*(void *)v1 + 16LL);
LABEL_6:
    id v5 = v4;
    objc_msgSend(v5, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v10;
    *(_BYTE *)(v6 + 24) = 1;
    *(void *)uint64_t v1 = v6;
    id v7 = v10;
    swift_release();
    objc_msgSend(v7, sel_addIndex_, a1);

    goto LABEL_7;
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void **)(*(void *)v1 + 16LL);
  if ((*(_BYTE *)(*(void *)v1 + 24LL) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_6;
  }
  objc_msgSend(v4, sel_addIndex_, a1);
LABEL_7:
  Swift::Bool v8 = 1;
  Swift::Int v9 = a1;
  result.memberAfterInsert = v9;
  result.inserted = v8;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.update(with:)(Swift::Int with)
{
  if (*(_BYTE *)(*(void *)v1 + 24LL) != 1)
  {
    uint64_t v4 = *(void **)(*(void *)v1 + 16LL);
LABEL_6:
    id v5 = v4;
    objc_msgSend(v5, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v10;
    *(_BYTE *)(v6 + 24) = 1;
    *(void *)uint64_t v1 = v6;
    id v7 = v10;
    swift_release();
    objc_msgSend(v7, sel_addIndex_, with);

    goto LABEL_7;
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void **)(*(void *)v1 + 16LL);
  if ((*(_BYTE *)(*(void *)v1 + 24LL) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_6;
  }
  objc_msgSend(v4, sel_addIndex_, with);
LABEL_7:
  Swift::Int v8 = with;
  Swift::Bool v9 = 0;
  result.Foundation::Morphology::Definiteness value = v8;
  result.is_nil = v9;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.remove(_:)(Swift::Int a1)
{
  unsigned int v3 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_containsIndex_, a1);
  if (*(_BYTE *)(*(void *)v1 + 24LL) == 1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v5 = *(void **)(*(void *)v1 + 16LL);
    if ((*(_BYTE *)(*(void *)v1 + 24LL) & 1) != 0 && (isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      objc_msgSend(v5, sel_removeIndex_, a1);
      goto LABEL_7;
    }
  }

  else
  {
    id v5 = *(void **)(*(void *)v1 + 16LL);
  }

  id v6 = v5;
  objc_msgSend(v6, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v11;
  *(_BYTE *)(v7 + 24) = 1;
  *(void *)uint64_t v1 = v7;
  id v8 = v11;
  swift_release();
  objc_msgSend(v8, sel_removeIndex_, a1);

LABEL_7:
  char v9 = v3 ^ 1;
  if (v3) {
    Swift::Int v10 = a1;
  }
  else {
    Swift::Int v10 = 0LL;
  }
  result.Foundation::Morphology::Definiteness value = v10;
  result.is_nil = v9;
  return result;
}

Swift::Void __swiftcall IndexSet.removeAll()()
{
  if (*(_BYTE *)(*(void *)v0 + 24LL) == 1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v2 = *(void **)(*(void *)v0 + 16LL);
    if ((*(_BYTE *)(*(void *)v0 + 24LL) & 1) != 0 && (isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      objc_msgSend(v2, sel_removeAllIndexes);
      return;
    }
  }

  else
  {
    uint64_t v2 = *(void **)(*(void *)v0 + 16LL);
  }

  id v3 = v2;
  objc_msgSend(v3, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = 1;
  *(void *)uint64_t v0 = v4;
  id v5 = v6;
  swift_release();
  objc_msgSend(v5, sel_removeAllIndexes);
}

void IndexSet.insert<A>(integersIn:)()
{
}

void IndexSet.remove(integersIn:)(uint64_t a1, uint64_t a2)
{
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v2 = __OFADD__(a2, 1LL);
  id v3 = a2 + 1;
  if (v2) {
    __break(1u);
  }
  else {
    IndexSet.remove(integersIn:)(a1, v3);
  }
}

void IndexSet.insert(integersIn:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  if (*(_BYTE *)(*(void *)v3 + 24LL) != 1)
  {
    id v8 = *(void **)(*(void *)v3 + 16LL);
LABEL_7:
    id v9 = v8;
    objc_msgSend(v9, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v13;
    *(_BYTE *)(v10 + 24) = 1;
    *(void *)uint64_t v3 = v10;
    id v11 = v13;
    swift_release();
    if (!__OFSUB__(a2, a1)) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v8 = *(void **)(*(void *)v3 + 16LL);
  if ((*(_BYTE *)(*(void *)v3 + 24LL) & 1) == 0) {
    goto LABEL_7;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if (!__OFSUB__(a2, a1))
    {
      objc_msgSend(v8, *a3, a1, a2 - a1);
      return;
    }

    goto LABEL_13;
  }

  id v9 = v8;
  objc_msgSend(v9, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v13;
  *(_BYTE *)(v12 + 24) = 1;
  *(void *)uint64_t v3 = v12;
  id v11 = v13;
  swift_release();
  if (!__OFSUB__(a2, a1))
  {
LABEL_8:
    objc_msgSend(v11, *a3, a1);

    return;
  }

  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
}

BOOL IndexSet.isEmpty.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count) == 0;
}

uint64_t IndexSet.filteredIndexSet(in:includeInteger:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v9 = result;
  uint64_t v10 = *(void **)(*(void *)v5 + 16LL);
  if ((*(_BYTE *)(*(void *)v5 + 24LL) & 1) != 0)
  {
    id v32 = 0LL;
    id v11 = (void *)swift_allocObject();
    void v11[2] = a3;
    v11[3] = a4;
    v11[4] = &v32;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = partial apply for closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:);
    *(void *)(v12 + 24) = v11;
    uint64_t v30 = partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    uint64_t v31 = v12;
    uint64_t aBlock = MEMORY[0x1895F87A8];
    uint64_t v27 = 1107296256LL;
    uint64_t v28 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    char v29 = &block_descriptor_8;
    uint64_t v13 = _Block_copy(&aBlock);
    id v14 = v10;
    swift_retain();
    swift_release();
    id v15 = objc_msgSend(v14, sel_indexesInRange_options_passingTest_, v9, v6, 0, v13);
    _Block_release(v13);
    LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
    Swift::Int_optional result = swift_release();
    if ((v13 & 1) == 0)
    {
      if (v15) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }

    goto LABEL_12;
  }

  id v32 = 0LL;
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = a3;
  v20[3] = a4;
  v20[4] = &v32;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)partial apply;
  *(void *)(v21 + 24) = v20;
  uint64_t v30 = thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)partial apply;
  uint64_t v31 = v21;
  uint64_t aBlock = MEMORY[0x1895F87A8];
  uint64_t v27 = 1107296256LL;
  uint64_t v28 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  char v29 = &block_descriptor_14;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_retain();
  id v14 = v10;
  swift_release();
  id v15 = objc_msgSend(v14, sel_indexesInRange_options_passingTest_, v9, v6, 0, v22);
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  Swift::Int_optional result = swift_release();
  if ((v22 & 1) == 0)
  {
    if (v15)
    {
LABEL_5:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
      uint64_t v16 = swift_allocObject();
      id v17 = v15;
      objc_msgSend(v17, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSIndexSet);
      swift_dynamicCast();
      *(void *)(v16 + 16) = v25;
      *(_BYTE *)(v16 + 24) = 0;

      id v18 = v32;
      if (v32)
      {
LABEL_6:
        id v19 = v18;
        swift_willThrow();
        swift_release();

        return swift_release();
      }

      goto LABEL_10;
    }

{
  BOOL v5;
  uint64_t v6;
  uint64_t v5 = __OFADD__(a2, 1LL);
  uint64_t v6 = a2 + 1;
  if (!v5) {
    return IndexSet.filteredIndexSet(in:includeInteger:)(result, v6, a3, a4, a5);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3) & 1;
}

void static IndexSet._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v4 = swift_allocObject();
    id v5 = a1;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSIndexSet);
    swift_dynamicCast();
    *(void *)(v4 + 16) = v7;
    *(_BYTE *)(v4 + 24) = 0;
  }

  else
  {
    id v6 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v6;
    *(_BYTE *)(v4 + 24) = 0;
  }

  *a2 = v4;
}

uint64_t IndexSet.filteredIndexSet(includeInteger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return IndexSet.filteredIndexSet(in:includeInteger:)(0LL, 0x7FFFFFFFFFFFFFFELL, a1, a2, a3);
}

Swift::Void __swiftcall IndexSet.shift(startingAt:by:)(Swift::Int startingAt, Swift::Int by)
{
  if (*(_BYTE *)(*(void *)v2 + 24LL) == 1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v6 = *(void **)(*(void *)v2 + 16LL);
    if ((*(_BYTE *)(*(void *)v2 + 24LL) & 1) != 0 && (isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      objc_msgSend(v6, sel_shiftIndexesStartingAtIndex_by_, startingAt, by);
      return;
    }
  }

  else
  {
    id v6 = *(void **)(*(void *)v2 + 16LL);
  }

  id v7 = v6;
  objc_msgSend(v7, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v10;
  *(_BYTE *)(v8 + 24) = 1;
  *(void *)uint64_t v2 = v8;
  id v9 = v10;
  swift_release();
  objc_msgSend(v9, sel_shiftIndexesStartingAtIndex_by_, startingAt, by);
}

Swift::Int IndexSet.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

char *protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance IndexSet@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  return specialized BidirectionalCollection.index(_:offsetBy:)((char **)v6, a2, *v3, a3);
}

uint64_t protocol witness for SetAlgebra.init() in conformance IndexSet@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(_BYTE *)(result + 24) = 0;
  *a1 = result;
  return result;
}

id protocol witness for SetAlgebra.contains(_:) in conformance IndexSet(void *a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_containsIndex_, *a1);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance IndexSet( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.union(_:) in conformance IndexSet( a1,  a2,  a3,  (void (*)(void))IndexSet.union(_:));
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance IndexSet@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance IndexSet( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.union(_:) in conformance IndexSet( a1,  a2,  a3,  (void (*)(void))IndexSet.symmetricDifference(_:));
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance IndexSet( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance IndexSet(Swift::Int *a1, Swift::Int *a2)
{
  *a1 = IndexSet.insert(_:)(*a2).memberAfterInsert;
  return 1LL;
}

Swift::Int protocol witness for SetAlgebra.remove(_:) in conformance IndexSet@<X0>( Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int_optional v4 = IndexSet.remove(_:)(*a1);
  *(void *)a2 = v4.value;
  *(_BYTE *)(a2 + 8) = v4.is_nil;
  return v4.value;
}

unint64_t protocol witness for SetAlgebra.update(with:) in conformance IndexSet@<X0>( Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = (unint64_t)IndexSet.update(with:)(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet( void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet( a1,  a2,  a3,  (void (*)(uint64_t *__return_ptr, void *))IndexSet.union(_:));
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance IndexSet(uint64_t *a1)
{
  uint64_t v2 = *v1;
  v4[0] = *a1;
  v4[1] = v2;
  IndexSet.intersection(_:)(v4, (uint64_t)&v5);
  uint64_t result = swift_release();
  *uint64_t v1 = v5;
  return result;
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance IndexSet( void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet( a1,  a2,  a3,  (void (*)(uint64_t *__return_ptr, void *))IndexSet.symmetricDifference(_:));
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet( void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, void *))
{
  uint64_t v5 = *v4;
  v7[0] = *a1;
  v7[1] = v5;
  a4(&v8, v7);
  swift_release();
  uint64_t result = swift_release();
  *Swift::Int_optional v4 = v8;
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance IndexSet@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v8 = *v2;
  v6[0] = v4;
  v6[1] = v8;
  swift_retain();
  IndexSet.symmetricDifference(_:)(v6, &v7);
  IndexSet.intersection(_:)(&v7, a2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance IndexSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v6 = *v1;
  uint64_t v7 = v2;
  IndexSet.intersection(_:)(&v7, (uint64_t)&v5);
  unsigned __int8 v3 = specialized static IndexSet.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v6);
  swift_release();
  return v3 & 1;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance IndexSet(uint64_t *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1);
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance IndexSet(uint64_t *a1)
{
  uint64_t v2 = *v1;
  uint64_t v6 = *a1;
  uint64_t v7 = v2;
  IndexSet.intersection(_:)(&v7, (uint64_t)&v5);
  unsigned __int8 v3 = specialized static IndexSet.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v6);
  swift_release();
  return v3 & 1;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance IndexSet(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

void protocol witness for Hashable.hash(into:) in conformance IndexSet()
{
  id v1 = *(id *)(*(void *)v0 + 16LL);
  NSObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IndexSet()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IndexSet( void *a1, void *a2))()
{
  *a1 = *a2;
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Collection.subscript.getter in conformance IndexSet@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 80) = *v2;
  __int128 v3 = a1[1];
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v3;
  __int128 v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = a1[4];
  return swift_retain();
}

uint64_t protocol witness for Collection.indices.getter in conformance IndexSet@<X0>(void *a1@<X8>)
{
  id v2 = a1 + 1;
  *a1 = *v1;
  __int128 v3 = a1 + 6;
  swift_retain();
  IndexSet.startIndex.getter(v2);
  return IndexSet.endIndex.getter(v3);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance IndexSet()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count) == 0;
}

double protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance IndexSet@<D0>( uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 41) = 1;
  return result;
}

char *protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance IndexSet@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  uint64_t v9 = *(void *)(a1 + 32);
  __int128 v6 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v6;
  uint64_t v11 = *(void *)(a3 + 32);
  return specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)((char **)v8, a2, (void **)v10, *v4, a4);
}

char *protocol witness for BidirectionalCollection.distance(from:to:) in conformance IndexSet( uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  uint64_t v9 = *(void *)(a2 + 32);
  return specialized BidirectionalCollection._distance(from:to:)(v6, (void **)v8, *v2);
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexSet( uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[5];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexSet( void *result, void *a2)
{
  if (*result < *a2 || a2[5] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[5] < result[5]) {
    __break(1u);
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance IndexSet@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v9 = *v1;
  uint64_t v3 = v9;
  IndexSet.startIndex.getter((uint64_t *)v7);
  uint64_t v4 = v8;
  __n128 result = (__n128)v7[0];
  __int128 v6 = v7[1];
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 40) = v4;
  return result;
}

id protocol witness for Sequence.underestimatedCount.getter in conformance IndexSet()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IndexSet()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IndexSet( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance IndexSet@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_10Foundation8IndexSetVABsAG_pAJRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t IndexSet.description.getter()
{
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x73657865646E6920LL;
  v2._unint64_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t IndexSet.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v22[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v0;
  uint64_t v9 = *(void **)(*v0 + 16);
  swift_retain();
  uint64_t v10 = specialized _copyCollectionToContiguousArray<A>(_:)(0, (uint64_t)objc_msgSend(v9, sel_rangeCount), v8);
  swift_release();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Range<Int>]);
  *(void *)&__int128 v23 = v10;
  __int128 v21 = xmmword_1837A8390;
  outlined init with take of Any(&v23, v22);
  uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v13 = v11[2];
  unint64_t v12 = v11[3];
  if (v13 >= v12 >> 1) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v11);
  }
  void v11[2] = v13 + 1;
  id v14 = &v11[6 * v13];
  __int128 v15 = v21;
  __int128 v16 = v22[1];
  v14[3] = v22[0];
  v14[4] = v16;
  v14[2] = v15;
  *(void *)&__int128 v21 = v8;
  *(void *)&__int128 v23 = v11;
  uint64_t v17 = *MEMORY[0x18961A718];
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v7, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v7, 0LL, 1LL, v18);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v1);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A],  &demangling cache variable for type metadata for [(label: String?, value: Any)],  MEMORY[0x189618488]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t static IndexSet._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSIndexSet);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance IndexSet()
{
  return v2;
}

uint64_t NSIndexSet._toCustomAnyHashable()()
{
  uint64_t v1 = swift_allocObject();
  id v2 = v0;
  objc_msgSend(v2, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  *(void *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = 0;

  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSIndexSet()
{
  id v1 = *v0;
  NSIndexSet._toCustomAnyHashable()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexSet.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IndexSet.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IndexSet.RangeCodingKeys()
{
  if (*v0) {
    return 0x6874676E656CLL;
  }
  else {
    return 0x6E6F697461636F6CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IndexSet.RangeCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized IndexSet.RangeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexSet.RangeCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IndexSet.RangeCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t IndexSet.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IndexSet.RangeCodingKeys>);
  uint64_t v4 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IndexSet.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  char v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  uint64_t v24 = v6;
  uint64_t v25 = v4;
  uint64_t v26 = v8;
  unint64_t v12 = v28;
  KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v22 = v10;
  uint64_t v23 = v7;
  id v13 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(_BYTE *)(v14 + 24) = 0;
  uint64_t v33 = v14;
  __swift_project_boxed_opaque_existential_1(v31, v32);
  if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
  {
    uint64_t v15 = v26;
LABEL_4:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    *unint64_t v12 = v14;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }

  uint64_t v15 = v26;
  uint64_t v17 = v27;
  uint64_t v19 = v24;
  uint64_t v18 = v25;
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v31, v32);
    lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();
    dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
    char v30 = 0;
    uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
    char v30 = 1;
    uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v21 = v20 + result;
    if (__OFADD__(v20, result)) {
      break;
    }
    if (v21 < v20) {
      goto LABEL_12;
    }
    IndexSet.insert(integersIn:)(v20, v21);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v17);
    __swift_project_boxed_opaque_existential_1(v31, v32);
    if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
    {
      uint64_t v14 = v33;
      unint64_t v12 = v28;
      goto LABEL_4;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

char *IndexSet.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IndexSet.RangeCodingKeys>);
  uint64_t v26 = *(void *)(v28 - 8);
  MEMORY[0x1895F8858](v28);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IndexSet.CodingKeys>);
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v11 = *(void **)(v10 + 16);
  uint64_t v27 = v10;
  swift_retain();
  id v12 = objc_msgSend(v11, sel_rangeCount);
  uint64_t v24 = v7;
  id v25 = v12;
  uint64_t v22 = v9;
  if (v12)
  {
    uint64_t v13 = 0LL;
    while (1)
    {
      char v14 = *(_BYTE *)(v27 + 24);
      uint64_t result = (char *)objc_msgSend(*(id *)(v27 + 16), sel_rangeAtIndex_, v13, v22);
      __int128 v16 = result;
      uint64_t v18 = &result[v17];
      BOOL v19 = __OFADD__(result, v17);
      if ((v14 & 1) != 0)
      {
        if (v19) {
          goto LABEL_24;
        }
      }

      else
      {
        if (v19) {
          goto LABEL_26;
        }
      }

      id v20 = (id)(v13 + 1);
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_22;
      }
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
      lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();
      dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
      char v31 = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v28);
        goto LABEL_20;
      }

      uint64_t result = (char *)(v18 - v16);
      if (__OFSUB__(v18, v16)) {
        goto LABEL_23;
      }
      char v31 = 1;
      uint64_t v21 = v28;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v21);
      ++v13;
      if (v20 == v25) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

  else
  {
LABEL_20:
    swift_release();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v24);
    return (char *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }

  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance IndexSet@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return IndexSet.init(from:)(a1, a2);
}

char *protocol witness for Encodable.encode(to:) in conformance IndexSet(void *a1)
{
  return IndexSet.encode(to:)(a1);
}

void *IndexSet.init(integersIn:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)v38 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RangeSet<Int>.Ranges);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)v38 - v14;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RangeSet<Int>);
  uint64_t v44 = a1;
  RangeSet.ranges.getter();
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges,  &demangling cache variable for type metadata for RangeSet<Int>.Ranges,  MEMORY[0x18961AEF8]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v47 == (void *)v46[0])
  {
    __int128 v16 = *(void (**)(char *, uint64_t))(v10 + 8);
    v16(v15, v9);
  }

  else
  {
    uint64_t v17 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v19 = *v18;
    v17(v46, 0LL);
    __int128 v16 = *(void (**)(char *, uint64_t))(v10 + 8);
    v16(v15, v9);
    if (v19 < 0)
    {
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v43 - 8) + 8LL))(v44);
      uint64_t v22 = 0LL;
      goto LABEL_6;
    }
  }

  id v20 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v21 = v3;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v20;
  *(_BYTE *)(v22 + 24) = 0;
  RangeSet.ranges.getter();
  BOOL v45 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v45(v6, v13, v9);
  dispatch thunk of Collection.startIndex.getter();
  v16(v13, v9);
  *(void *)&v6[*(int *)(v21 + 36)] = v46[0];
  outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v6, (uint64_t)v8);
  uint64_t v23 = &v8[*(int *)(v21 + 36)];
  uint64_t v24 = *(void *)v23;
  dispatch thunk of Collection.endIndex.getter();
  if (v24 == v46[0])
  {
LABEL_5:
    (*(void (**)(uint64_t))(*(void *)(v43 - 8) + 8LL))(v44);
    uint64_t result = (void *)outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v8);
LABEL_6:
    *uint64_t v41 = v22;
    return result;
  }

  v38[1] = MEMORY[0x18961AFC0] + 8LL;
  char v39 = v16;
  while (1)
  {
    while (1)
    {
      uint64_t v26 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v28 = *v27;
      uint64_t v29 = v27[1];
      v26(v46, 0LL);
      v45(v13, v8, v9);
      dispatch thunk of Collection.formIndex(after:)();
      v16(v13, v9);
      if ((*(_BYTE *)(v22 + 24) & 1) != 0) {
        break;
      }
      uint64_t result = *(void **)(v22 + 16);
LABEL_15:
      id v42 = result;
      objc_msgSend(v42, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      uint64_t v32 = v47;
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v32;
      *(_BYTE *)(v33 + 24) = 1;
      id v34 = v32;
      uint64_t result = (void *)swift_release();
      uint64_t v35 = v29 - v28;
      if (__OFSUB__(v29, v28)) {
        goto LABEL_23;
      }
LABEL_19:
      uint64_t v22 = v33;
      objc_msgSend(v34, sel_addIndexesInRange_, v28, v35);

      uint64_t v37 = *(void *)v23;
      dispatch thunk of Collection.endIndex.getter();
      __int128 v16 = v39;
      if (v37 == v46[0]) {
        goto LABEL_5;
      }
    }

    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t result = *(void **)(v22 + 16);
    if ((*(_BYTE *)(v22 + 24) & 1) == 0) {
      goto LABEL_15;
    }
    if (!isUniquelyReferenced_nonNull_native)
    {
      id v42 = result;
      objc_msgSend(v42, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      uint64_t v36 = v47;
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v36;
      *(_BYTE *)(v33 + 24) = 1;
      id v34 = v36;
      uint64_t result = (void *)swift_release();
      uint64_t v35 = v29 - v28;
      if (__OFSUB__(v29, v28)) {
        goto LABEL_24;
      }
      goto LABEL_19;
    }

    if (__OFSUB__(v29, v28)) {
      break;
    }
    objc_msgSend(result, sel_addIndexesInRange_, v28, v29 - v28);
    uint64_t v31 = *(void *)v23;
    dispatch thunk of Collection.endIndex.getter();
    if (v31 == v46[0]) {
      goto LABEL_5;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t RangeSet<>.init(_:)(uint64_t a1)
{
  return RangeSet.init<A>(_:)();
}

id specialized static IndexSet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(*(void *)a1 + 16LL);
  uint64_t v3 = *(void **)(*(void *)a2 + 16LL);
  id v4 = v2;
  objc_msgSend(v3, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  id v5 = objc_msgSend(v2, sel_isEqualToIndexSet_, v7);

  return v5;
}

uint64_t specialized static IndexSet.RangeView.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    uint64_t v4 = a1[2];
    uint64_t v6 = a2[2];
    uint64_t v7 = v4;
    unsigned __int8 v3 = specialized static IndexSet.== infix(_:_:)((uint64_t)&v7, (uint64_t)&v6);
  }

  else
  {
    unsigned __int8 v3 = 0;
  }

  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    unint64_t v2 = lazy protocol witness table accessor for type Int and conformance Int();
    v3[0] = MEMORY[0x189618780];
    v3[1] = v2;
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618A60], v1, v3);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }

  return result;
}

uint64_t sub_1830DA5BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)( a1,  a2,  *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_1830DA5D8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_1830DA624()
{
  return swift_deallocObject();
}

uint64_t sub_1830DA634()
{
  return swift_deallocObject();
}

uint64_t specialized static IndexSet._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  id v5 = a1;
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSIndexSet);
  uint64_t result = swift_dynamicCast();
  *(void *)(v4 + 16) = v7;
  *(_BYTE *)(v4 + 24) = 0;
  *a2 = v4;
  return result;
}

uint64_t specialized static IndexSet._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  id v5 = a1;
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  *(void *)(v4 + 16) = v7;
  *(_BYTE *)(v4 + 24) = 0;
  *a2 = v4;
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.CodingKeys, &unk_189C7B968);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.CodingKeys, &unk_189C7B968);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.CodingKeys, &unk_189C7B968);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.CodingKeys, &unk_189C7B968);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.RangeCodingKeys, &unk_189C7B9F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.RangeCodingKeys, &unk_189C7B9F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.RangeCodingKeys, &unk_189C7B9F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.RangeCodingKeys, &unk_189C7B9F8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }

  return result;
}

uint64_t outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for IndexSet.RangeView,  &type metadata for IndexSet.RangeView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for IndexSet.RangeView,  &type metadata for IndexSet.RangeView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for IndexSet.RangeView,  &type metadata for IndexSet.RangeView);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type DefaultIndices<IndexSet.RangeView> and conformance <> DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<IndexSet.RangeView>,  (uint64_t (*)(void))lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView,  MEMORY[0x189617A18]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type Slice<IndexSet.RangeView> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<IndexSet.RangeView>,  (uint64_t (*)(void))lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView,  MEMORY[0x18961A5C8]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<IndexSet.RangeView> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<IndexSet.RangeView>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<IndexSet.RangeView> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<IndexSet.RangeView>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<IndexSet.RangeView> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<IndexSet.RangeView>,  MEMORY[0x189619678]);
}

unint64_t lazy protocol witness table accessor for type IndexSet.Index and conformance IndexSet.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index;
  if (!lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.Index, &type metadata for IndexSet.Index);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index;
  if (!lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexSet.Index, &type metadata for IndexSet.Index);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for IndexSet(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  a1[2] = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  a1[3] = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  unint64_t result = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  a1[4] = result;
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in IndexSet()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type DefaultIndices<IndexSet> and conformance <> DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<IndexSet>,  (uint64_t (*)(void))lazy protocol witness table accessor for type IndexSet and conformance IndexSet,  MEMORY[0x189617A18]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in IndexSet()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type Slice<IndexSet> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<IndexSet>,  (uint64_t (*)(void))lazy protocol witness table accessor for type IndexSet and conformance IndexSet,  MEMORY[0x18961A5C8]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IndexSet()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<IndexSet> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<IndexSet>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IndexSet()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<IndexSet> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<IndexSet>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in IndexSet()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<IndexSet> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<IndexSet>,  MEMORY[0x189619678]);
}

ValueMetadata *type metadata accessor for IndexSet()
{
  return &type metadata for IndexSet;
}

uint64_t initializeBufferWithCopyOfBuffer for IndexSet.RangeView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t destroy for IndexSet.RangeView()
{
  return swift_release();
}

void *assignWithCopy for IndexSet.RangeView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for IndexSet.RangeView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexSet.RangeView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexSet.RangeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IndexSet.RangeView()
{
  return &type metadata for IndexSet.RangeView;
}

uint64_t getEnumTagSinglePayload for IndexSet.Index(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for IndexSet.Index(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IndexSet.Index()
{
  return &type metadata for IndexSet.Index;
}

uint64_t type metadata completion function for _MutablePairHandle()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _MutablePairHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MutablePairHandle);
}

uint64_t type metadata completion function for _MutablePair()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _MutablePair(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X15 }
    }

    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }

    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }

  else
  {
    uint64_t v10 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }

  return v3;
}

uint64_t destroy for _MutablePair(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v2 - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  unsigned int v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1) {
      uint64_t v3 = *(void *)(v2 - 8);
    }
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  else
  {
    else {
      uint64_t v7 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_1830DB2EC + 4 * byte_1837A83A5[v7]))();
  }

uint64_t initializeWithCopy for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X16 }
  }

  BOOL v10 = v8 == 1;
  if (v8 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithCopy for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    unsigned int v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1) {
      uint64_t v12 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v12 = *(void *)(v5 - 8);
    }
    if (v10 == 1) {
      uint64_t v13 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 16);
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    unsigned int v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v16 = v14 == 1;
    if (v14 == 1) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v7;
    }
    if (v14 == 1) {
      uint64_t v18 = v6;
    }
    else {
      uint64_t v18 = v5;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }

  return a1;
}

uint64_t initializeWithTake for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X16 }
  }

  BOOL v10 = v8 == 1;
  if (v8 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithTake for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    unsigned int v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1) {
      uint64_t v12 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v12 = *(void *)(v5 - 8);
    }
    if (v10 == 1) {
      uint64_t v13 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 16);
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    unsigned int v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v16 = v14 == 1;
    if (v14 == 1) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v7;
    }
    if (v14 == 1) {
      uint64_t v18 = v6;
    }
    else {
      uint64_t v18 = v5;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for _MutablePair(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_1830DB8A8 + 4 * byte_1837A83C8[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for _MutablePair(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0u;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = 4u;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = 1u;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

uint64_t getEnumTag for _MutablePair(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  }
  else {
    uint64_t v3 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_1830DBAEC + 4 * byte_1837A83D6[v3]))();
}

void destructiveInjectEnumTag for _MutablePair(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL) <= *(void *)(*(void *)(*(void *)(a3 + 16)
                                                                                              - 8LL)
                                                                                  + 64LL))
      size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
    else {
      size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
    }
    unsigned int v6 = a2 - 2;
    if (v5 < 4)
    {
      unsigned int v7 = v6 >> (8 * v5);
      int v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }

      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }

      else
      {
        *a1 = v8;
      }
    }

    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }

  else
  {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
    if (v4 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL)) {
      unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
    }
    a1[v4] = a2;
  }

uint64_t type metadata accessor for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MutablePair);
}

uint64_t storeEnumTagSinglePayload for IndexSet.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1830DBC68 + 4 * byte_1837A83DB[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1830DBC88 + 4 * byte_1837A83E0[v4]))();
  }
}

_BYTE *sub_1830DBC68(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1830DBC88(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1830DBC90(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1830DBC98(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1830DBCA0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1830DBCA8(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void *type metadata accessor for IndexSet.CodingKeys()
{
  return &unk_189C7B968;
}

uint64_t storeEnumTagSinglePayload for IndexSet.RangeCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1830DBD10 + 4 * byte_1837A83EA[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1830DBD44 + 4 * byte_1837A83E5[v4]))();
}

uint64_t sub_1830DBD44(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830DBD4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830DBD54LL);
  }
  return result;
}

uint64_t sub_1830DBD60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830DBD68LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1830DBD6C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830DBD74(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for IndexSet.RangeCodingKeys()
{
  return &unk_189C7B9F8;
}

uint64_t specialized IndexSet.RangeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized CVarArg<>._cVarArgEncoding.getter()
{
  id v0 = (id)String._bridgeToObjectiveCImpl()();
  uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v1 + 16) = 1LL;
  *(void *)(v1 + 32) = v0;
  swift_unknownObjectRelease();
  return v1;
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1.super.isa);
  uint64_t v4 = v3;

  uint64_t v5 = (uint64_t)v2;
  char v6 = v4;
  result._unint64_t object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

id static String._forceBridgeFromObjectiveC(_:result:)(void *a1, void *a2)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance String()
{
  return String._bridgeToObjectiveCImpl()();
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance String( void *a1, void *a2)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance String@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

NSString __swiftcall Substring._bridgeToObjectiveC()()
{
  uint64_t v0 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return (NSString)v0;
}

BOOL static Substring._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  return a2[3] != 0;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Substring()
{
  uint64_t v1 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v1;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Substring( void *a1, uint64_t *a2)
{
  return a2[3] != 0;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Substring@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized static Substring._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t Substring._components(separatedBy:)(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3 >> 14;
  if (a2 >> 14 >= a3 >> 14)
  {
    uint64_t v5 = MEMORY[0x18961AFE8];
    unint64_t v8 = a2;
    if (v4 >= a2 >> 14) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }

  uint64_t v40 = *(void *)result;
  uint64_t v5 = MEMORY[0x18961AFE8];
  unint64_t v6 = a2;
  unint64_t v7 = a2 >> 14;
  unint64_t v36 = a3 >> 14;
  while (2)
  {
    if (v4 >= v7)
    {
      unint64_t v39 = v7;
      swift_bridgeObjectRetain();
      unint64_t v8 = Substring.subscript.getter();
      unint64_t v10 = v9;
      unint64_t v3 = v11;
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      unint64_t v14 = v8 >> 14;
      unint64_t v15 = v10 >> 14;
      if (v8 >> 14 != v10 >> 14)
      {
        uint64_t v37 = (void *)v5;
        unint64_t v38 = v6;
        swift_bridgeObjectRetain();
        uint64_t v16 = v40;
        swift_retain();
        uint64_t v5 = Substring.UnicodeScalarView.index(before:)();
        uint64_t v17 = (v3 >> 59) & 1;
        if ((v13 & 0x1000000000000000LL) == 0) {
          LOBYTE(v17) = 1;
        }
        uint64_t v18 = 4LL << v17;
        for (unint64_t i = v8; ; unint64_t i = Substring.UnicodeScalarView.index(_:offsetBy:)())
        {
          if ((i & 0xC) == v18 || (i & 1) == 0)
          {
            unint64_t v21 = i;
            if ((i & 0xC) == v18) {
              unint64_t v21 = _StringGuts._slowEnsureMatchingEncoding(_:)(i, v3, v13);
            }
            if (v21 >> 14 < v14 || v21 >> 14 >= v15) {
              goto LABEL_50;
            }
            if ((v21 & 1) == 0) {
              _StringGuts.scalarAlignSlow(_:)(v21, v3, v13);
            }
          }

          else if (i >> 14 < v14 || i >> 14 >= v15)
          {
            goto LABEL_51;
          }

          if ((v13 & 0x1000000000000000LL) != 0)
          {
            UTF32Char v22 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }

          else
          {
            if ((v13 & 0x2000000000000000LL) == 0 && (v3 & 0x1000000000000000LL) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            UTF32Char v22 = _decodeScalar(_:startingAt:)();
            uint64_t v16 = v40;
          }

          if (CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(v16 + 16), v22)) {
            break;
          }
          if ((i ^ v5) < 0x4000)
          {
            swift_bridgeObjectRelease_n();
            swift_release();
LABEL_42:
            uint64_t v5 = (uint64_t)v37;
            unint64_t v8 = v38;
            unint64_t v23 = v39;
            unint64_t v4 = v36;
            goto LABEL_43;
          }
        }

        unint64_t v8 = Substring.UnicodeScalarView.index(after:)();
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_release();
        unint64_t v23 = v8 >> 14;
        unint64_t v24 = i >> 14;
        if (v8 >> 14 < i >> 14) {
          goto LABEL_54;
        }
        if (v24 == v23) {
          goto LABEL_42;
        }
        uint64_t result = v38;
        if (v24 < v39) {
          goto LABEL_55;
        }
        uint64_t v25 = Substring.subscript.getter();
        unint64_t v3 = MEMORY[0x186E1B610](v25);
        uint64_t v27 = v26;
        swift_bridgeObjectRelease();
        uint64_t v5 = (uint64_t)v37;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v37[2] + 1LL,  1,  v37);
          uint64_t v5 = result;
        }

        unint64_t v29 = *(void *)(v5 + 16);
        unint64_t v28 = *(void *)(v5 + 24);
        if (v29 >= v28 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v28 > 1),  v29 + 1,  1,  (void *)v5);
          uint64_t v5 = result;
        }

        *(void *)(v5 + 16) = v29 + 1;
        uint64_t v30 = v5 + 16 * v29;
        *(void *)(v30 + 32) = v3;
        *(void *)(v30 + 40) = v27;
        unint64_t v6 = v8;
        unint64_t v7 = v8 >> 14;
        unint64_t v4 = v36;
        if (v23 < v36) {
          continue;
        }
LABEL_43:
        if (v4 < v23) {
          goto LABEL_49;
        }
LABEL_44:
        uint64_t v31 = Substring.subscript.getter();
        unint64_t v8 = MEMORY[0x186E1B610](v31);
        unint64_t v3 = v32;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_45:
          unint64_t v34 = *(void *)(v5 + 16);
          unint64_t v33 = *(void *)(v5 + 24);
          if (v34 >= v33 >> 1) {
            uint64_t v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v33 > 1),  v34 + 1,  1,  (void *)v5);
          }
          *(void *)(v5 + 16) = v34 + 1;
          uint64_t v35 = v5 + 16 * v34;
          *(void *)(v35 + 32) = v8;
          *(void *)(v35 + 40) = v3;
          return v5;
        }

unint64_t String._pathResolveFlags(prefixLength:)( unint64_t *a1, unint64_t a2, unint64_t a3)
{
  if ((specialized Sequence<>.starts<A>(with:)(0x2E2FuLL, 0xE200000000000000LL, a2, a3) & 1) == 0) {
    goto LABEL_23;
  }
  if ((specialized Sequence<>.starts<A>(with:)(0x6C6C6F666F6E2E2FuLL, 0xEB000000002F776FLL, a2, a3) & 1) != 0)
  {
    unsigned __int8 v6 = 0;
    LODWORD(v7) = 1;
    unint64_t result = 10LL;
LABEL_25:
    *a1 = result;
    return v7 | ((unint64_t)v6 << 32);
  }

  if ((specialized Sequence<>.starts<A>(with:)(0x766C6F7365722E2FuLL, 0xEA00000000002F65LL, a2, a3) & 1) == 0)
  {
LABEL_23:
    unint64_t result = 0LL;
    LODWORD(v7) = 0;
    goto LABEL_24;
  }

  BOOL v9 = (a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0;
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = MEMORY[0x186E1B838](15LL, 10LL, a2, a3);
    uint64_t v10 = a3 & 0x2000000000000000LL;
  }

  else
  {
    uint64_t v10 = a3 & 0x2000000000000000LL;
    unint64_t v11 = HIBYTE(a3) & 0xE;
    if ((a3 & 0x2000000000000000LL) == 0) {
      unint64_t v11 = a2 & 0xFFFFFFFFFFFELL;
    }
    if (v11 < 0xA)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    unint64_t v12 = 655364LL;
  }

  if (v10) {
    unint64_t v13 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v13 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v12 >> 14 == 4 * v13) {
    goto LABEL_35;
  }
  char v32 = v9;
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized Collection.suffix(from:)(v12, a2, a3);
  unint64_t v16 = v15;
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  unint64_t v21 = specialized Collection<>.firstIndex(of:)(0x2Fu, v14, v16, v18, v20);
  LOBYTE(v16) = v22;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0) {
    goto LABEL_35;
  }
  if (v12 >> 14 > v21 >> 14) {
    goto LABEL_33;
  }
  unint64_t v23 = String.subscript.getter();
  uint64_t v27 = v26;
  if (!((v23 ^ v24) >> 14))
  {
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }

  uint64_t v28 = v23;
  uint64_t v29 = v24;
  uint64_t v30 = v25;
  uint64_t v31 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5i9VGXEfU_s6L7V_SsTG5SiTf1cn_n( v23,  v24,  v25,  v26,  10LL);
  if ((v31 & 0x10000000000LL) != 0)
  {
    unint64_t v7 = specialized _parseInteger<A, B>(ascii:radix:)(v28, v29, v30, v27, 10LL);
    swift_bridgeObjectRelease();
    if ((v7 & 0x100000000LL) == 0) {
      goto LABEL_27;
    }
LABEL_35:
    unint64_t result = 0LL;
    LODWORD(v7) = 0;
    unsigned __int8 v6 = 1;
    goto LABEL_25;
  }

  unint64_t v7 = v31;
  swift_bridgeObjectRelease();
  if ((v7 & 0x100000000LL) != 0) {
    goto LABEL_35;
  }
LABEL_27:
  if ((v21 & 0xC) != 4LL << v32)
  {
    unint64_t result = v21 >> 16;
    if ((a3 & 0x1000000000000000LL) != 0) {
      goto LABEL_29;
    }
LABEL_24:
    unsigned __int8 v6 = 0;
    goto LABEL_25;
  }

  unint64_t result = (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v21, a2, a3) >> 16;
  if ((a3 & 0x1000000000000000LL) == 0) {
    goto LABEL_24;
  }
LABEL_29:
  if (v13 >= result)
  {
    unint64_t result = String.UTF8View._foreignDistance(from:to:)();
    goto LABEL_24;
  }

  __break(1u);
  return result;
}

uint64_t String._queryResolveFlags()(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  char v107 = 1;
  char v103 = 0;
  unint64_t v4 = (unint64_t)&v77;
  char v102 = 0;
  char v101 = 0;
  char v100 = 0;
  char v99 = 0;
  char v98 = 0;
  char v96 = 0;
  char v94 = 1;
  char v92 = 0;
  char v91 = 0;
  char v104 = 0;
  char v97 = 0;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
LABEL_86:
    *(void *)&v105[0] = v3;
    *((void *)&v105[0] + 1) = v2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    BOOL v45 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v46 = (unsigned __int16 *)objc_msgSend(v45, sel__fastCharacterContents);
    id v47 = v45;
    if (v46)
    {
      *(void *)&v105[0] = v3;
      *((void *)&v105[0] + 1) = v2;
      StringProtocol._ephemeralString.getter();
      uint64_t v48 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v49 = objc_msgSend(v48, sel_length);
      swift_unknownObjectRelease();
      char v50 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v46,  (uint64_t)v49,  0x40u,  0);
    }

    else
    {
      char v50 = specialized Sequence.allSatisfy(_:)(v3, v2, 64);
    }

    char v51 = v50;
    uint64_t v8 = swift_bridgeObjectRelease();
    if ((v51 & 1) != 0) {
      goto LABEL_15;
    }
    goto LABEL_7;
  }

  if ((a2 & 0x2000000000000000LL) != 0)
  {
    uint64_t v6 = HIBYTE(a2) & 0xF;
    *(void *)&v105[0] = a1;
    *((void *)&v105[0] + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = (char *)v105;
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) == 0) {
      goto LABEL_90;
    }
    uint64_t v5 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }

  while (2)
  {
    BOOL v7 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v5, v6, 0x40u, 0);
    uint64_t v8 = swift_bridgeObjectRetain();
    if (!v7)
    {
LABEL_7:
      uint64_t v9 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x2000000000000000LL) == 0) {
        uint64_t v9 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v9)
      {
        *(void *)&v105[0] = v3;
        *((void *)&v105[0] + 1) = v2;
        MEMORY[0x1895F8858](v8);
        v52[2] = v105;
        char v53 = 64;
        swift_bridgeObjectRetain();
        uint64_t v10 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v52,  v3,  v2);
        if (v11)
        {
          uint64_t v3 = (uint64_t)v10;
          unint64_t v12 = v11;
          swift_bridgeObjectRelease_n();
        }

        else
        {
          unint64_t v14 = *((void *)&v105[0] + 1);
          unint64_t v13 = *(void *)&v105[0];
          swift_bridgeObjectRetain();
          uint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v13, v14, 0x40u);
          unint64_t v12 = v15;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }

        unint64_t v2 = v12;
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = 0LL;
        unint64_t v2 = 0xE000000000000000LL;
      }
    }

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1;
  __int128 v3 = *(_OWORD *)(a1 + 144);
  __int128 v4 = *(_OWORD *)(a1 + 176);
  __int128 v313 = *(_OWORD *)(a1 + 160);
  __int128 v314 = v4;
  __int128 v5 = *(_OWORD *)(a1 + 80);
  __int128 v6 = v5;
  __int128 v7 = *(_OWORD *)(a1 + 112);
  __int128 v8 = *(_OWORD *)(a1 + 128);
  __int128 v309 = *(_OWORD *)(a1 + 96);
  __int128 v310 = v7;
  __int128 v10 = *(_OWORD *)(a1 + 112);
  __int128 v9 = *(_OWORD *)(a1 + 128);
  __int128 v312 = *(_OWORD *)(a1 + 144);
  __int128 v311 = v9;
  __int128 v11 = *(_OWORD *)(a1 + 16);
  __int128 v12 = *(_OWORD *)(a1 + 48);
  __int128 v305 = *(_OWORD *)(a1 + 32);
  __int128 v306 = v12;
  __int128 v13 = *(_OWORD *)(a1 + 64);
  __int128 v308 = v5;
  __int128 v307 = v13;
  __int128 v14 = *(_OWORD *)a1;
  __int128 v304 = v11;
  __int128 v303 = v14;
  __int128 v15 = *(_OWORD *)(v1 + 144);
  __int128 v16 = *(_OWORD *)(v1 + 176);
  __int128 v326 = *(_OWORD *)(v1 + 160);
  __int128 v327 = v16;
  __int128 v17 = *(_OWORD *)(v1 + 80);
  __int128 v18 = v17;
  __int128 v19 = *(_OWORD *)(v1 + 112);
  __int128 v20 = *(_OWORD *)(v1 + 128);
  __int128 v322 = *(_OWORD *)(v1 + 96);
  __int128 v323 = v19;
  __int128 v22 = *(_OWORD *)(v1 + 112);
  __int128 v21 = *(_OWORD *)(v1 + 128);
  __int128 v325 = *(_OWORD *)(v1 + 144);
  __int128 v324 = v21;
  __int128 v23 = *(_OWORD *)(v1 + 16);
  __int128 v24 = *(_OWORD *)(v1 + 48);
  __int128 v318 = *(_OWORD *)(v1 + 32);
  __int128 v319 = v24;
  __int128 v25 = *(_OWORD *)(v1 + 64);
  __int128 v321 = v17;
  __int128 v320 = v25;
  __int128 v26 = *(_OWORD *)v1;
  __int128 v317 = v23;
  __int128 v316 = v26;
  __int128 v27 = *(_OWORD *)(v1 + 176);
  __int128 v251 = v326;
  __int128 v252 = v27;
  __int128 v247 = v322;
  __int128 v248 = v22;
  __int128 v250 = v15;
  __int128 v249 = v20;
  __int128 v28 = *(_OWORD *)(v1 + 16);
  __int128 v29 = *(_OWORD *)(v1 + 48);
  __int128 v243 = *(_OWORD *)(v1 + 32);
  __int128 v244 = v29;
  __int128 v30 = *(_OWORD *)(v1 + 64);
  __int128 v246 = v18;
  __int128 v245 = v30;
  __int128 v31 = *(_OWORD *)v1;
  __int128 v242 = v28;
  __int128 v241 = v31;
  __int128 v32 = *(_OWORD *)(a1 + 176);
  __int128 v231 = v313;
  __int128 v232 = v32;
  uint64_t v315 = *(void *)(a1 + 192);
  uint64_t v328 = *(void *)(v1 + 192);
  uint64_t v34 = *(void *)(v1 + 8);
  uint64_t v33 = *(void *)(v1 + 16);
  unint64_t v35 = *(void *)(v1 + 24);
  uint64_t v36 = *(void *)(v1 + 32);
  unint64_t v37 = *(void *)(v1 + 40);
  uint64_t v38 = *(void *)(v1 + 48);
  uint64_t v39 = *(void *)(v1 + 56);
  uint64_t v40 = *(void *)(v1 + 64);
  uint64_t v177 = *(void *)(v1 + 72);
  uint64_t v253 = *(void *)(v1 + 192);
  *(void *)&__int128 v254 = v34;
  uint64_t v174 = v33;
  *((void *)&v254 + 1) = v33;
  unint64_t v165 = v35;
  unint64_t v255 = v35;
  uint64_t v256 = v36;
  unint64_t v164 = v37;
  uint64_t v257 = v37;
  uint64_t v258 = v38;
  uint64_t v259 = v39;
  uint64_t v168 = v40;
  uint64_t v260 = v40;
  uint64_t v42 = *(void *)(a1 + 8);
  uint64_t v41 = *(void *)(a1 + 16);
  unint64_t v43 = *(void *)(a1 + 24);
  uint64_t v44 = *(void *)(a1 + 32);
  uint64_t v46 = *(void *)(a1 + 40);
  uint64_t v45 = *(void *)(a1 + 48);
  uint64_t v47 = *(void *)(a1 + 56);
  uint64_t v48 = *(void *)(a1 + 64);
  uint64_t v176 = *(void *)(a1 + 72);
  uint64_t v49 = *(void *)(a1 + 192);
  __int128 v227 = v309;
  __int128 v228 = v10;
  __int128 v229 = v8;
  __int128 v230 = v3;
  __int128 v50 = *(_OWORD *)(a1 + 16);
  __int128 v51 = *(_OWORD *)(a1 + 48);
  __int128 v223 = *(_OWORD *)(a1 + 32);
  __int128 v224 = v51;
  __int128 v225 = *(_OWORD *)(a1 + 64);
  __int128 v226 = v6;
  __int128 v221 = *(_OWORD *)a1;
  __int128 v222 = v50;
  uint64_t v233 = v49;
  *(void *)&__int128 v234 = v42;
  uint64_t v187 = v41;
  *((void *)&v234 + 1) = v41;
  unint64_t v235 = v43;
  uint64_t v236 = v44;
  uint64_t v237 = v46;
  uint64_t v238 = v45;
  uint64_t v239 = v47;
  uint64_t v240 = v48;
  outlined retain of AttributedString.Runs(v1);
  outlined retain of AttributedString.Runs(v2);
  __int128 v287 = v326;
  __int128 v288 = v327;
  uint64_t v289 = v328;
  __int128 v283 = v322;
  __int128 v284 = v323;
  __int128 v286 = v325;
  __int128 v285 = v324;
  __int128 v279 = v318;
  __int128 v280 = v319;
  __int128 v282 = v321;
  __int128 v281 = v320;
  __int128 v278 = v317;
  __int128 v277 = v316;
  __int128 v300 = v313;
  __int128 v301 = v314;
  uint64_t v302 = v315;
  __int128 v296 = v309;
  __int128 v297 = v310;
  __int128 v299 = v312;
  __int128 v298 = v311;
  __int128 v292 = v305;
  __int128 v293 = v306;
  __int128 v295 = v308;
  __int128 v294 = v307;
  uint64_t v166 = v2;
  uint64_t v167 = v34;
  uint64_t v163 = v34;
  uint64_t v52 = v34;
  uint64_t v53 = v48;
  __int128 v291 = v304;
  __int128 v290 = v303;
  while (1)
  {
    uint64_t v189 = v46;
    uint64_t v179 = v53;
    if (v52 == v177)
    {
      __int128 v218 = v287;
      __int128 v219 = v288;
      uint64_t v220 = v289;
      __int128 v214 = v283;
      __int128 v215 = v284;
      __int128 v216 = v285;
      __int128 v217 = v286;
      __int128 v210 = v279;
      __int128 v211 = v280;
      __int128 v212 = v281;
      __int128 v213 = v282;
      __int128 v208 = v277;
      __int128 v209 = v278;
      uint64_t v54 = v187;
      if (v42 == v176)
      {
        uint64_t v161 = 0LL;
        uint64_t v207 = v302;
        __int128 v205 = v300;
        __int128 v206 = v301;
        __int128 v201 = v296;
        __int128 v202 = v297;
        __int128 v203 = v298;
        __int128 v204 = v299;
        __int128 v197 = v292;
        __int128 v198 = v293;
        __int128 v199 = v294;
        __int128 v200 = v295;
        __int128 v195 = v290;
        __int128 v196 = v291;
        goto LABEL_220;
      }

      uint64_t v173 = 0LL;
      unint64_t v185 = 0LL;
      unint64_t v186 = 0LL;
      uint64_t v175 = 0LL;
      uint64_t v178 = v177;
      goto LABEL_108;
    }

    uint64_t result = (uint64_t)AttributedString.Runs.subscript.getter(&v254, &v195);
    uint64_t v56 = v167;
    if (v167 < v163 || v167 >= v177) {
      goto LABEL_245;
    }
    unint64_t v185 = v196;
    unint64_t v186 = v198;
    uint64_t v57 = *(void *)(*(void *)v169 + 64LL);
    uint64_t v58 = *(void *)(*(void *)v169 + 72LL);
    uint64_t v59 = *(void *)(*(void *)v169 + 88LL);
    uint64_t v171 = *(void *)(*(void *)v169 + 80LL);
    uint64_t v173 = *((void *)&v195 + 1);
    uint64_t v175 = v195;
    uint64_t v183 = *(_OWORD **)v169;
    if (v36 == 1 || v174 != v59)
    {
      if (v57) {
        uint64_t v63 = *(void *)(*(void *)v169 + 72LL);
      }
      else {
        uint64_t v63 = 0LL;
      }
      if (v167 < 0 || v63 < v167) {
        goto LABEL_254;
      }
      if (v57)
      {
        uint64_t v61 = *(void *)(*(void *)v169 + 88LL);
        uint64_t v64 = *(unsigned __int8 *)(v57 + 18);
        if (*(_WORD *)(v57 + 16) && v167 < v58)
        {
          if (*(_BYTE *)(v57 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs(v169);
            uint64_t result = swift_unknownObjectRetain();
            uint64_t v68 = v57;
            while (1)
            {
              uint64_t v70 = *(unsigned __int16 *)(v68 + 16);
              if (!*(_WORD *)(v68 + 16)) {
                break;
              }
              uint64_t v71 = *(void *)(v68 + 32);
              uint64_t v72 = v56 - v71;
              if (__OFSUB__(v56, v71)) {
                goto LABEL_241;
              }
              if (__OFADD__(v72, 1LL)) {
                goto LABEL_242;
              }
              if (v72 + 1 <= 0)
              {
                uint64_t v70 = 0LL;
                goto LABEL_29;
              }

              if ((_DWORD)v70 == 1)
              {
                v56 -= v71;
                break;
              }

              uint64_t v73 = *(void *)(v68 + 56);
              BOOL v74 = __OFSUB__(v72, v73);
              uint64_t v75 = v72 - v73;
              if (v74) {
                goto LABEL_252;
              }
              if (__OFADD__(v75, 1LL)) {
                goto LABEL_253;
              }
              if (v75 + 1 < 1)
              {
                uint64_t v70 = 1LL;
                uint64_t v56 = v72;
                goto LABEL_29;
              }

              if ((_DWORD)v70 == 2)
              {
                uint64_t v56 = v75;
                break;
              }

              char v76 = (void *)(v68 + 80);
              uint64_t v77 = 2LL;
              while (1)
              {
                if (v70 == v77) {
                  goto LABEL_232;
                }
                uint64_t v56 = v75 - *v76;
                if (__OFSUB__(v75, *v76))
                {
LABEL_233:
                  __break(1u);
LABEL_234:
                  __break(1u);
                  goto LABEL_235;
                }

                if (__OFADD__(v56, 1LL)) {
                  goto LABEL_234;
                }
                if (v56 + 1 < 1) {
                  break;
                }
                ++v77;
                v76 += 3;
                uint64_t v75 = v56;
                if (v70 == v77) {
                  goto LABEL_28;
                }
              }

              uint64_t v70 = v77;
              uint64_t v56 = v75;
LABEL_29:
              char v69 = (4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C;
              uint64_t v64 = ((-15LL << v69) - 1) & v64 | (v70 << v69);
              uint64_t v36 = *(void *)(v68 + 24 + 24 * v70);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v68 = v36;
              if (!*(_BYTE *)(v36 + 18)) {
                goto LABEL_52;
              }
            }

LABEL_256:
              __break(1u);
LABEL_257:
              __break(1u);
LABEL_258:
              __break(1u);
LABEL_259:
              __break(1u);
LABEL_260:
              __break(1u);
LABEL_261:
              __break(1u);
LABEL_262:
              __break(1u);
LABEL_263:
              __break(1u);
LABEL_264:
              __break(1u);
LABEL_265:
              __break(1u);
LABEL_266:
              __break(1u);
LABEL_267:
              __break(1u);
LABEL_268:
              __break(1u);
LABEL_269:
              __break(1u);
              return result;
            }

            goto LABEL_173;
          }

          uint64_t v132 = 1LL;
LABEL_178:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v43 = v118 & 0xFFFFFFFFFFFFF0FFLL | (v132 << 8);
          goto LABEL_179;
        }
      }

      else
      {
        unint64_t v133 = v119;
      }

      uint64_t v176 = 11;
      uint64_t v175 = 1;
      v177._time = v6 / 1000.0 + -978307200.0;
      __int128 v206 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  v177);
      Foundation::Morphology::Definiteness value = v206.value;
      if (v206.is_nil) {
        goto LABEL_363;
      }
      if (*(_BYTE *)(v4 + 80) == 1) {
        uint64_t v115 = (int)ucal_getAttribute();
      }
      else {
        uint64_t v115 = *(void *)(v4 + 72);
      }
      if (v8 >= v115 && (uint64_t v52 = __OFSUB__(value, 1LL), --value, v52))
      {
LABEL_517:
        __break(1u);
      }

      else
      {
        uint64_t v176 = 11;
        uint64_t v175 = 1;
        v177._time = v10;
        __int128 v219 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  v114);
        if (v219.is_nil) {
          goto LABEL_394;
        }
        uint64_t v168 = v219.value - value;
        if (!__OFSUB__(v219.value, value))
        {
          Foundation::Morphology::Definiteness value = v168 + 1;
          if (!__OFADD__(v168, 1LL)) {
            goto LABEL_400;
          }
          __break(1u);
LABEL_394:
          LOBYTE(v8) = 1;
          Foundation::Morphology::Definiteness value = v219.value;
          goto LABEL_401;
        }
      }

      __break(1u);
LABEL_519:
      __break(1u);
LABEL_520:
      __break(1u);
LABEL_521:
      __break(1u);
LABEL_522:
      __break(1u);
LABEL_523:
      __break(1u);
LABEL_524:
      __break(1u);
LABEL_525:
      __break(1u);
LABEL_526:
      __break(1u);
LABEL_527:
      __break(1u);
LABEL_528:
      __break(1u);
      goto LABEL_529;
    case 5:
      if (v9 != 13)
      {
        if (v9 != 6) {
          goto LABEL_332;
        }
        goto LABEL_31;
      }

    __break(1u);
    goto LABEL_257;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __int128 v50 = 1LL;
LABEL_92:
  *a1 = v50;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  while (v9 < v7)
  {
    if ((a4 & 0x1000000000000000LL) != 0)
    {
      int v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a4 & 0x2000000000000000LL) == 0 && (a3 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      int v11 = _decodeScalar(_:startingAt:)();
    }

    int v13 = v11;
    if (v10 >= v8)
    {
      uint64_t v17 = 0LL;
      goto LABEL_28;
    }

    uint64_t v14 = v12 + v9;
    if ((a2 & 0x1000000000000000LL) == 0)
    {
LABEL_16:
      if ((a2 & 0x2000000000000000LL) == 0 && (a1 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      int v15 = _decodeScalar(_:startingAt:)();
      goto LABEL_20;
    }

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(void *a1)
{
  unint64_t v3 = v1[1];
  unint64_t v4 = a1[1];
  unint64_t v5 = v1[5] >> 10;
  unint64_t v23 = a1[5] >> 10;
  __int128 v19 = (__int128 *)(*v1 + 16LL);
  __int128 v6 = (__int128 *)(*a1 + 16LL);
  outlined retain of AttributedString.Runs((uint64_t)v1);
  uint64_t v21 = (uint64_t)a1;
  uint64_t v7 = (uint64_t)a1;
  unint64_t v8 = v5;
  uint64_t result = outlined retain of AttributedString.Runs(v7);
  unint64_t v26 = v3;
  unint64_t v22 = v4 >> 10;
  while (1)
  {
    unint64_t v25 = v26 >> 10;
    if (v26 >> 10 == v8)
    {
      unint64_t v10 = v4 >> 10;
      unint64_t v11 = v23;
      if (v4 >> 10 == v23)
      {
        uint64_t v18 = 1LL;
        goto LABEL_17;
      }

      int v24 = 0;
    }

    else
    {
      if (v26 >> 10 < v3 >> 10 || v26 >> 10 >= v8) {
        goto LABEL_21;
      }
      __int128 v12 = v19[1];
      __int128 v40 = *v19;
      __int128 v41 = v12;
      __int128 v42 = v19[2];
      BigString.unicodeScalars.getter();
      int v24 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v27);
      __int128 v13 = v19[1];
      __int128 v37 = *v19;
      __int128 v38 = v13;
      __int128 v39 = v19[2];
      BigString.unicodeScalars.getter();
      outlined retain of AttributedString.Runs(v20);
      unint64_t v14 = BigString.UnicodeScalarView.index(after:)();
      outlined release of Locale((uint64_t)v28);
      uint64_t result = outlined release of AttributedString.Runs(v20);
      unint64_t v26 = v14;
      if (v8 < v14 >> 10) {
        goto LABEL_22;
      }
      unint64_t v10 = v4 >> 10;
      unint64_t v11 = v23;
      if (v4 >> 10 == v23)
      {
LABEL_14:
        swift_release();
        swift_release();
        return 0LL;
      }
    }

    if (v10 < v22 || v10 >= v11) {
      break;
    }
    __int128 v15 = v6[1];
    __int128 v34 = *v6;
    __int128 v35 = v15;
    __int128 v36 = v6[2];
    BigString.unicodeScalars.getter();
    int v16 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v29);
    __int128 v17 = v6[1];
    __int128 v31 = *v6;
    __int128 v32 = v17;
    __int128 v33 = v6[2];
    BigString.unicodeScalars.getter();
    outlined retain of AttributedString.Runs(v21);
    unint64_t v4 = BigString.UnicodeScalarView.index(after:)();
    outlined release of Locale((uint64_t)v30);
    uint64_t result = outlined release of AttributedString.Runs(v21);
    if (v11 < v4 >> 10) {
      goto LABEL_20;
    }
    if (v25 == v8)
    {
      uint64_t v18 = 0LL;
LABEL_17:
      swift_release();
      swift_release();
      return v18;
    }

    if (v24 != v16) {
      goto LABEL_14;
    }
  }

  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4 = a2;
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v33 = v5;
  uint64_t v6 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  uint64_t v8 = 4 * v5;
  uint64_t v35 = 4LL << v6;
  uint64_t v28 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v27 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v31 = v7;
  uint64_t v9 = 4 * v7;
  uint64_t v10 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4LL << v10;
  uint64_t v25 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v26 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v12 = 15LL;
  unint64_t v13 = 15LL;
  uint64_t v30 = 4LL << v10;
  while (1)
  {
    unint64_t v14 = v13 >> 14;
    if (v13 >> 14 == v8)
    {
      char v15 = 0;
      goto LABEL_29;
    }

    unint64_t result = v13;
    if ((v13 & 0xC) == v35)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a3, a4);
      uint64_t v11 = v30;
    }

    unint64_t v17 = result >> 16;
    if (result >> 16 >= v33) {
      break;
    }
    if ((a4 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v11 = v30;
      char v15 = result;
    }

    else if ((a4 & 0x2000000000000000LL) != 0)
    {
      unint64_t v37 = a3;
      uint64_t v38 = v28;
      char v15 = *((_BYTE *)&v37 + v17);
    }

    else
    {
      unint64_t result = v27;
      if ((a3 & 0x1000000000000000LL) == 0)
      {
        unint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v11 = v30;
      }

      char v15 = *(_BYTE *)(result + v17);
    }

    if ((v13 & 0xC) == v35)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a3, a4);
      uint64_t v11 = v30;
      unint64_t v13 = result;
      uint64_t v4 = a2;
      if ((a4 & 0x1000000000000000LL) == 0)
      {
LABEL_24:
        unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t v4 = a2;
      if ((a4 & 0x1000000000000000LL) == 0) {
        goto LABEL_24;
      }
    }

    if (v33 <= v13 >> 16) {
      goto LABEL_54;
    }
    uint64_t v18 = String.UTF8View._foreignIndex(after:)();
    uint64_t v11 = v30;
    uint64_t v4 = a2;
    unint64_t v13 = v18;
LABEL_29:
    unint64_t v19 = v12 >> 14;
    BOOL v20 = v12 >> 14 == v9;
    if (v12 >> 14 == v9)
    {
      char v21 = 0;
      if (v14 == v8) {
        return v20;
      }
      goto LABEL_49;
    }

    unint64_t v22 = v12 & 0xC;
    unint64_t result = v12;
    if (v22 == v11)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a1, v4);
      uint64_t v11 = v30;
      uint64_t v4 = a2;
    }

    unint64_t v23 = result >> 16;
    if (result >> 16 >= v31) {
      goto LABEL_53;
    }
    if ((v4 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v11 = v30;
      uint64_t v4 = a2;
      char v21 = result;
      if (v22 == v30) {
        goto LABEL_46;
      }
    }

    else if ((v4 & 0x2000000000000000LL) != 0)
    {
      unint64_t v37 = a1;
      uint64_t v38 = v26;
      char v21 = *((_BYTE *)&v37 + v23);
      if (v22 == v11) {
        goto LABEL_46;
      }
    }

    else
    {
      unint64_t result = v25;
      if ((a1 & 0x1000000000000000LL) == 0)
      {
        unint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v11 = v30;
        uint64_t v4 = a2;
      }

      char v21 = *(_BYTE *)(result + v23);
      if (v22 == v11)
      {
LABEL_46:
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a1, v4);
        uint64_t v11 = v30;
        uint64_t v4 = a2;
        unint64_t v12 = result;
        if ((a2 & 0x1000000000000000LL) == 0)
        {
LABEL_43:
          unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
          if (v14 == v8) {
            return v20;
          }
          goto LABEL_49;
        }

        goto LABEL_47;
      }
    }

    if ((v4 & 0x1000000000000000LL) == 0) {
      goto LABEL_43;
    }
LABEL_47:
    if (v31 <= v12 >> 16) {
      goto LABEL_55;
    }
    uint64_t v24 = String.UTF8View._foreignIndex(after:)();
    uint64_t v11 = v30;
    uint64_t v4 = a2;
    unint64_t v12 = v24;
    if (v14 == v8) {
      return v20;
    }
LABEL_49:
    BOOL v20 = 0LL;
    if (v19 == v9 || v15 != v21) {
      return v20;
    }
  }

  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)( unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a3) {
    uint64_t v4 = &a3[a4];
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a1) {
    uint64_t v5 = &a1[a2];
  }
  else {
    uint64_t v5 = 0LL;
  }
  do
  {
    if (!a3 || a3 == v4)
    {
      int v7 = 0;
      char v6 = 1;
      if (!a1) {
        goto LABEL_15;
      }
    }

    else
    {
      char v6 = 0;
      int v8 = *a3++;
      int v7 = v8;
      if (!a1) {
        goto LABEL_15;
      }
    }

    if (a1 != v5)
    {
      uint64_t v9 = 0LL;
      int v11 = *a1++;
      int v10 = v11;
      if ((v6 & 1) != 0) {
        return v9;
      }
      goto LABEL_16;
    }

unint64_t String._removingPathResolveFlags()(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if ((specialized Collection.first.getter(a1, a2) & 0x1FF) != 0x2F
    || (v14 = 0LL, unint64_t result = String._pathResolveFlags(prefixLength:)(&v14, v3, a2), (result & 0x100000000LL) != 0))
  {
    swift_bridgeObjectRetain();
    return v3;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    uint64_t v6 = MEMORY[0x186E1B838](15LL, v14, v3, a2);
    goto LABEL_9;
  }

  if ((v14 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      unint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 >= v14)
    {
      uint64_t v6 = (v14 << 16) | 4;
LABEL_9:
      swift_bridgeObjectRetain();
      unint64_t v7 = specialized Collection.suffix(from:)(v6, v3, a2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      swift_bridgeObjectRelease();
      uint64_t v3 = MEMORY[0x186E1B610](v7, v9, v11, v13);
      swift_bridgeObjectRelease();
      return v3;
    }
  }

  __break(1u);
  return result;
}

unint64_t String._insertingQueryResolveFlags(_:)(int a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  char v119 = 1;
  char v113 = 0;
  char v112 = 0;
  char v111 = 0;
  char v110 = 0;
  char v109 = 0;
  char v108 = 0;
  char v106 = 0;
  char v105 = 1;
  unsigned __int8 v104 = 0;
  char v103 = 0;
  char v114 = 0;
  char v107 = 0;
  LODWORD(v83) = a1;
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    *(void *)&v117[0] = a2;
    *((void *)&v117[0] + 1) = a3;
    unint64_t v71 = lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    unint64_t v84 = v71;
    StringProtocol._ephemeralString.getter();
    uint64_t v72 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v73 = (unsigned __int16 *)objc_msgSend(v72, sel__fastCharacterContents);
    id v74 = v72;
    if (v73)
    {
      *(void *)&v117[0] = v4;
      *((void *)&v117[0] + 1) = a3;
      StringProtocol._ephemeralString.getter();
      uint64_t v75 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v76 = objc_msgSend(v75, sel_length);
      swift_unknownObjectRelease();
      char v77 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v73,  (uint64_t)v76,  0x40u,  0);
    }

    else
    {
      char v77 = specialized Sequence.allSatisfy(_:)(v4, a3, 64);
    }

    BOOL v7 = v77;
    uint64_t v8 = swift_bridgeObjectRelease();
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v6 = HIBYTE(a3) & 0xF;
      *(void *)&v117[0] = v4;
      *((void *)&v117[0] + 1) = a3 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v5 = (char *)v117;
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t v5 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v5 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v7 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v5, v6, 0x40u, 0);
    uint64_t v8 = swift_bridgeObjectRetain();
  }

  unint64_t v9 = a3;
  uint64_t v10 = v4;
  if (!v7)
  {
    uint64_t v11 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      *(void *)&v117[0] = v4;
      *((void *)&v117[0] + 1) = a3;
      MEMORY[0x1895F8858](v8);
      uint64_t v79 = (uint64_t)v117;
      LOBYTE(v80) = 64;
      swift_bridgeObjectRetain();
      uint64_t v12 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)&v78,  v4,  a3);
      if (v13)
      {
        uint64_t v10 = (uint64_t)v12;
        unint64_t v9 = v13;
        swift_bridgeObjectRelease_n();
      }

      else
      {
        unint64_t v15 = *((void *)&v117[0] + 1);
        unint64_t v14 = *(void *)&v117[0];
        swift_bridgeObjectRetain();
        uint64_t v10 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v14, v15, 0x40u);
        unint64_t v9 = v16;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = 0LL;
      unint64_t v9 = 0xE000000000000000LL;
    }
  }

  swift_bridgeObjectRelease();
  *(void *)&__int128 v95 = 0LL;
  BYTE8(v95) = v114;
  BYTE9(v95) = v113;
  BYTE10(v95) = v112;
  BYTE11(v95) = v111;
  BYTE12(v95) = v110;
  BYTE13(v95) = v109;
  BYTE14(v95) = v108;
  HIBYTE(v95) = v107;
  v96[0] = v106;
  memset(&v96[8], 0, 64);
  uint64_t v97 = 0LL;
  LOBYTE(v98) = v105;
  uint64_t v99 = 0LL;
  *(void *)&__int128 v100 = 0LL;
  *((void *)&v100 + 1) = v10;
  unint64_t v101 = v9;
  unint64_t v82 = v9;
  v102[0] = 0LL;
  v102[1] = 0LL;
  LOBYTE(v102[2]) = v104;
  BYTE1(v102[2]) = v103;
  v117[0] = v95;
  v117[1] = *(_OWORD *)v96;
  v117[4] = *(_OWORD *)&v96[48];
  v117[5] = 0uLL;
  v117[2] = *(_OWORD *)&v96[16];
  v117[3] = *(_OWORD *)&v96[32];
  *(_OWORD *)((char *)v118 + 10) = *(_OWORD *)((char *)v102 + 2);
  v117[7] = v100;
  v118[0] = v9;
  v117[6] = v98;
  unint64_t v84 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
  if (!v84)
  {
    outlined release of URLComponents((uint64_t)&v95);
    swift_bridgeObjectRetain();
    return v4;
  }

  unint64_t v17 = MEMORY[0x18961AFE8];
  unint64_t v94 = (void *)MEMORY[0x18961AFE8];
  uint64_t v18 = *(void *)(v84 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    int v31 = v83;
    if (!(_DWORD)v83)
    {
      char v21 = (void *)MEMORY[0x18961AFE8];
      int64_t v32 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (v32) {
        goto LABEL_31;
      }
      goto LABEL_70;
    }

unint64_t String._removingQueryResolveFlags()(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = a1;
  char v108 = 1;
  char v102 = 0;
  char v101 = 0;
  char v100 = 0;
  char v99 = 0;
  char v98 = 0;
  char v97 = 0;
  char v95 = 0;
  char v94 = 1;
  unsigned __int8 v93 = 0;
  char v92 = 0;
  char v103 = 0;
  char v96 = 0;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    *(void *)&v106[0] = a1;
    *((void *)&v106[0] + 1) = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    uint64_t v63 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v64 = (unsigned __int16 *)objc_msgSend(v63, sel__fastCharacterContents);
    id v65 = v63;
    if (v64)
    {
      *(void *)&v106[0] = v3;
      *((void *)&v106[0] + 1) = a2;
      StringProtocol._ephemeralString.getter();
      unint64_t v66 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v67 = objc_msgSend(v66, sel_length);
      swift_unknownObjectRelease();
      char v68 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v64,  (uint64_t)v67,  0x40u,  0);
    }

    else
    {
      char v68 = specialized Sequence.allSatisfy(_:)(v3, a2, 64);
    }

    BOOL v6 = v68;
    uint64_t v7 = swift_bridgeObjectRelease();
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v5 = HIBYTE(a2) & 0xF;
      *(void *)&v106[0] = a1;
      *((void *)&v106[0] + 1) = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v4 = (char *)v106;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      unint64_t v4 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v4 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v6 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v5, 0x40u, 0);
    uint64_t v7 = swift_bridgeObjectRetain();
  }

  unint64_t v8 = a2;
  uint64_t v9 = v3;
  if (!v6)
  {
    uint64_t v10 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v10 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      *(void *)&v106[0] = v3;
      *((void *)&v106[0] + 1) = a2;
      MEMORY[0x1895F8858](v7);
      uint64_t v70 = (uint64_t)v106;
      LOBYTE(v71) = 64;
      swift_bridgeObjectRetain();
      uint64_t v11 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (uint64_t)&v69,  v3,  a2);
      if (v12)
      {
        uint64_t v9 = (uint64_t)v11;
        unint64_t v8 = v12;
        swift_bridgeObjectRelease_n();
      }

      else
      {
        unint64_t v14 = *((void *)&v106[0] + 1);
        unint64_t v13 = *(void *)&v106[0];
        swift_bridgeObjectRetain();
        uint64_t v9 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v13, v14, 0x40u);
        unint64_t v8 = v15;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = 0LL;
      unint64_t v8 = 0xE000000000000000LL;
    }
  }

  swift_bridgeObjectRelease();
  *(void *)&__int128 v84 = 0LL;
  BYTE8(v84) = v103;
  BYTE9(v84) = v102;
  BYTE10(v84) = v101;
  BYTE11(v84) = v100;
  BYTE12(v84) = v99;
  BYTE13(v84) = v98;
  BYTE14(v84) = v97;
  HIBYTE(v84) = v96;
  v85[0] = v95;
  uint64_t v86 = 0LL;
  memset(&v85[8], 0, 64);
  LOBYTE(v87) = v94;
  uint64_t v88 = 0LL;
  *(void *)&__int128 v89 = 0LL;
  *((void *)&v89 + 1) = v9;
  unint64_t v90 = v8;
  v91[0] = 0LL;
  v91[1] = 0LL;
  LOBYTE(v91[2]) = v93;
  BYTE1(v91[2]) = v92;
  v106[0] = v84;
  v106[1] = *(_OWORD *)v85;
  v106[4] = *(_OWORD *)&v85[48];
  v106[5] = 0uLL;
  _OWORD v106[2] = *(_OWORD *)&v85[16];
  v106[3] = *(_OWORD *)&v85[32];
  *(_OWORD *)((char *)v107 + 10) = *(_OWORD *)((char *)v91 + 2);
  v106[7] = v89;
  v107[0] = v8;
  v106[6] = v87;
  unint64_t v74 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
  if (!v74)
  {
    outlined release of URLComponents((uint64_t)&v84);
    swift_bridgeObjectRetain();
    return v3;
  }

  unint64_t v73 = v8;
  uint64_t v16 = *(void *)(v74 + 16);
  unint64_t v17 = (void *)MEMORY[0x18961AFE8];
  if (v16)
  {
    uint64_t v18 = (uint64_t *)(v74 + 56);
    do
    {
      unint64_t v20 = *(v18 - 3);
      unint64_t v21 = *(v18 - 2);
      uint64_t v23 = *(v18 - 1);
      uint64_t v22 = *v18;
      if ((specialized Sequence<>.elementsEqual<A>(_:)(0x65766C6F7365722EuLL, 0xE800000000000000LL, v20, v21) & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
        }
        unint64_t v25 = v17[2];
        unint64_t v24 = v17[3];
        if (v25 >= v24 >> 1) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v24 > 1),  v25 + 1,  1,  v17);
        }
        void v17[2] = v25 + 1;
        int v19 = &v17[4 * v25];
        v19[4] = v20;
        v19[5] = v21;
        v19[6] = v23;
        v19[7] = v22;
      }

      v18 += 4;
      --v16;
    }

    while (v16);
  }

  swift_bridgeObjectRelease();
  int64_t v26 = v17[2];
  if (!v26)
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v84);
    return 0LL;
  }

  char v103 = 0;
  char v96 = 0;
  unint64_t v83 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
  unint64_t v27 = v17 + 7;
  while (1)
  {
    unint64_t v29 = *(v27 - 3);
    unint64_t v28 = *(v27 - 2);
    unint64_t v31 = *(v27 - 1);
    unint64_t v30 = *v27;
    if ((v28 & 0x1000000000000000LL) != 0)
    {
      *(void *)&v104[0] = *(v27 - 3);
      *((void *)&v104[0] + 1) = v28;
      unint64_t v74 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      uint64_t v42 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      BOOL v43 = (unsigned __int16 *)objc_msgSend(v42, sel__fastCharacterContents);
      id v44 = v42;
      if (v43)
      {
        *(void *)&v104[0] = v29;
        *((void *)&v104[0] + 1) = v28;
        uint64_t v72 = v43;
        StringProtocol._ephemeralString.getter();
        unint64_t v45 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v46 = objc_msgSend(v45, sel_length);
        swift_unknownObjectRelease();
        char v47 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v72,  (uint64_t)v46,  0x80u,  1);
      }

      else
      {
        char v47 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v29, v28, 0x80u, 1);
      }

      char v55 = v47;
      swift_bridgeObjectRelease_n();
      if ((v55 & 1) == 0) {
        goto LABEL_60;
      }
    }

    else
    {
      if ((v28 & 0x2000000000000000LL) != 0)
      {
        uint64_t v33 = HIBYTE(v28) & 0xF;
        *(void *)&v104[0] = *(v27 - 3);
        *((void *)&v104[0] + 1) = v28 & 0xFFFFFFFFFFFFFFLL;
        int64_t v32 = (char *)v104;
      }

      else if ((v29 & 0x1000000000000000LL) != 0)
      {
        int64_t v32 = (char *)((v28 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v33 = v29 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        int64_t v32 = (char *)_StringObject.sharedUTF8.getter();
      }

      BOOL v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v32, v33, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v34) {
        goto LABEL_60;
      }
    }

    *(void *)&v104[0] = v29;
    *((void *)&v104[0] + 1) = v28;
    if (v30) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_42:
    unint64_t v30 = v83;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v30 + 16) + 1LL,  1);
      unint64_t v30 = v83;
    }

    unint64_t v40 = *(void *)(v30 + 16);
    unint64_t v39 = *(void *)(v30 + 24);
    if (v40 >= v39 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
      unint64_t v30 = v83;
    }

    v27 += 4;
    *(void *)(v30 + 16) = v40 + 1;
    unint64_t v41 = v30 + 16 * v40;
    *(void *)(v41 + 32) = v29;
    *(void *)(v41 + 40) = v28;
    if (!--v26) {
      goto LABEL_61;
    }
  }

  if ((v30 & 0x1000000000000000LL) == 0)
  {
    if ((v30 & 0x2000000000000000LL) != 0)
    {
      uint64_t v36 = HIBYTE(v30) & 0xF;
      v75._uint64_t countAndFlagsBits = v31;
      v75._unint64_t object = (void *)(v30 & 0xFFFFFFFFFFFFFFLL);
      unint64_t v35 = (char *)&v75;
    }

    else if ((v31 & 0x1000000000000000LL) != 0)
    {
      unint64_t v35 = (char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v36 = v31 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v35 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v37 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v35, v36, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v37) {
      goto LABEL_59;
    }
    goto LABEL_41;
  }

  v75._uint64_t countAndFlagsBits = v31;
  v75._unint64_t object = (void *)v30;
  unint64_t v48 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v74 = v48;
  StringProtocol._ephemeralString.getter();
  uint64_t v49 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v50 = (unsigned __int16 *)objc_msgSend(v49, sel__fastCharacterContents);
  id v51 = v49;
  if (v50)
  {
    v75._uint64_t countAndFlagsBits = v31;
    v75._unint64_t object = (void *)v30;
    StringProtocol._ephemeralString.getter();
    id v52 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v53 = objc_msgSend(v52, sel_length);
    swift_unknownObjectRelease();
    char v54 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v50,  (uint64_t)v53,  0x40u,  1);
  }

  else
  {
    char v54 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v30, 0x40u, 1);
  }

  char v56 = v54;
  swift_bridgeObjectRelease_n();
  if ((v56 & 1) != 0)
  {
LABEL_41:
    v75._uint64_t countAndFlagsBits = 61LL;
    v75._unint64_t object = (void *)0xE100000000000000LL;
    v38._uint64_t countAndFlagsBits = v31;
    v38._unint64_t object = (void *)v30;
    String.append(_:)(v38);
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v28 = *((void *)&v104[0] + 1);
    unint64_t v29 = *(void *)&v104[0];
    goto LABEL_42;
  }

Swift::String __swiftcall NSString._urlStringByInsertingPathResolveFlags(_:)(Swift::UInt32 a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  unint64_t v7 = v6;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v5, v7, 1, (uint64_t)v96);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v96, (uint64_t)v134);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v96, (uint64_t)&v97);
  unint64_t v8 = v107;
  uint64_t v72 = v108;
  uint64_t v71 = v109;
  uint64_t v70 = v110;
  uint64_t v69 = v111;
  uint64_t v68 = v112;
  uint64_t v67 = v113;
  uint64_t v66 = v114;
  uint64_t v65 = v115;
  uint64_t v9 = v117;
  unint64_t v10 = v118;
  uint64_t v11 = v119;
  unint64_t v12 = v120;
  uint64_t v63 = v122;
  uint64_t v64 = v121;
  char v95 = v98;
  char v94 = v99;
  char v93 = v100;
  char v92 = v101;
  char v91 = v102;
  char v90 = v103;
  char v89 = v104;
  char v88 = v105;
  char v87 = v106;
  char v86 = v116;
  char v85 = v123;
  char v84 = v124;
  uint64_t v73 = v97;
  if (v118)
  {
    outlined init with take of URLComponents._URLComponents?((uint64_t)v134, (uint64_t)&v125);
    outlined retain of URLComponents((uint64_t)&v125);
    unint64_t v13 = v10;
  }

  else if ((v104 & 1) != 0 && v97)
  {
    unint64_t v58 = v107;
    unint64_t v14 = v119;
    if ((*(_BYTE *)(v97 + 168) & 1) != 0)
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v134, (uint64_t)&v125);
      outlined retain of URLComponents((uint64_t)&v125);
      uint64_t v15 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }

    else
    {
      unint64_t Resolve = *(void *)(v97 + 24);
      outlined init with take of URLComponents._URLComponents?((uint64_t)v134, (uint64_t)&v125);
      outlined retain of URLComponents((uint64_t)&v125);
      uint64_t v15 = String.subscript.getter();
    }

    uint64_t v9 = MEMORY[0x186E1B610](v15);
    unint64_t v13 = v16;
    swift_bridgeObjectRelease();
    uint64_t v11 = v14;
    unint64_t v8 = v58;
  }

  else
  {
    outlined init with take of URLComponents._URLComponents?((uint64_t)v134, (uint64_t)&v125);
    outlined retain of URLComponents((uint64_t)&v125);
    uint64_t v9 = 0LL;
    unint64_t v13 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents?(v96);
  if (!a1) {
    goto LABEL_25;
  }
  if ((specialized Collection.first.getter(v9, v13) & 0x1FF) != 0x2F) {
    goto LABEL_25;
  }
  unint64_t v74 = 0LL;
  unint64_t v17 = String._pathResolveFlags(prefixLength:)(&v74, v9, v13);
  if ((v17 & 0x100000000LL) != 0) {
    goto LABEL_25;
  }
  LODWORD(Resolve) = v17 | a1;
  uint64_t v18 = (void *)v74;
  if ((v13 & 0x1000000000000000LL) != 0) {
    goto LABEL_67;
  }
  if ((v74 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }

  unint64_t v19 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000LL) == 0) {
    unint64_t v19 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v19 < v74) {
    goto LABEL_69;
  }
  for (uint64_t i = (v74 << 16) | 4; ; uint64_t i = MEMORY[0x186E1B838](15LL, v18, v9, v13))
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized Collection.suffix(from:)(i, v9, v13);
    uint64_t v56 = v22;
    uint64_t v59 = v23;
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    if ((_DWORD)Resolve == 1)
    {
      *(void *)&__int128 v75 = 0x6C6C6F666F6E2E2FLL;
      *((void *)&v75 + 1) = 0xEA0000000000776FLL;
    }

    else
    {
      *(void *)&__int128 v125 = 0x766C6F7365722E2FLL;
      *((void *)&v125 + 1) = 0xEA00000000002F65LL;
      LODWORD(v75) = Resolve;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      LODWORD(Resolve) = (_DWORD)v11;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      __int128 v75 = v125;
    }

    *(void *)&__int128 v125 = v21;
    *((void *)&v125 + 1) = v56;
    *(void *)&__int128 v126 = v59;
    *((void *)&v126 + 1) = v25;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v13 = *((void *)&v75 + 1);
    uint64_t v9 = v75;
LABEL_25:
    char v95 = 0;
    char v89 = 0;
    if ((v13 & 0x1000000000000000LL) != 0)
    {
      unint64_t v60 = v11;
      *(void *)&__int128 v125 = v9;
      *((void *)&v125 + 1) = v13;
      int v42 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      LODWORD(Resolve) = v42;
      StringProtocol._ephemeralString.getter();
      BOOL v43 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v44 = (unsigned __int16 *)objc_msgSend(v43, sel__fastCharacterContents);
      id v45 = v43;
      id v57 = v44;
      if (v44)
      {
        *(void *)&__int128 v125 = v9;
        *((void *)&v125 + 1) = v13;
        StringProtocol._ephemeralString.getter();
        id v46 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v47 = objc_msgSend(v46, sel_length);
        swift_unknownObjectRelease();
        char v48 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v57,  (uint64_t)v47,  0x10u,  1);
      }

      else
      {
        char v48 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v13, 0x10u, 1);
      }

      char v53 = v48;
      swift_bridgeObjectRelease_n();
      uint64_t v11 = v60;
      if ((v53 & 1) == 0) {
        goto LABEL_66;
      }
    }

    else
    {
      if ((v13 & 0x2000000000000000LL) != 0)
      {
        uint64_t v28 = HIBYTE(v13) & 0xF;
        *(void *)&__int128 v125 = v9;
        *((void *)&v125 + 1) = v13 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v27 = (char *)&v125;
      }

      else if ((v9 & 0x1000000000000000LL) != 0)
      {
        unint64_t v27 = (char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v28 = v9 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        unint64_t v27 = (char *)_StringObject.sharedUTF8.getter();
      }

      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v27, v28, 0x10u, 1)) {
        goto LABEL_66;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v62 = v5;
    if (v12)
    {
      unint64_t v29 = v12;
    }

    else
    {
      if (v88 != 1 || !v73 || (*(_BYTE *)(v73 + 192) & 1) != 0)
      {
        uint64_t v5 = v8;
        char v34 = 0;
        char v35 = 0;
        unint64_t Resolve = 0LL;
        unint64_t v31 = 0LL;
        char v95 = 0;
        char v88 = 0;
        goto LABEL_47;
      }

      uint64_t v40 = String.subscript.getter();
      uint64_t v11 = (void *)MEMORY[0x186E1B610](v40);
      unint64_t v29 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v12 = 0LL;
    }

    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    unint64_t Resolve = String._removingQueryResolveFlags()((unint64_t)v11, v29);
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    char v95 = 0;
    char v88 = 0;
    if (!v31)
    {
      uint64_t v5 = v8;
      char v34 = 0;
      char v35 = 0;
      goto LABEL_47;
    }

    if ((v31 & 0x1000000000000000LL) == 0) {
      break;
    }
    uint64_t v5 = v8;
    *(void *)&__int128 v125 = Resolve;
    *((void *)&v125 + 1) = v31;
    unint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v49 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents);
    id v50 = v11;
    unint64_t v61 = v49;
    if (v49)
    {
      *(void *)&__int128 v125 = Resolve;
      *((void *)&v125 + 1) = v31;
      StringProtocol._ephemeralString.getter();
      uint64_t v11 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v51 = objc_msgSend(v11, sel_length);
      swift_unknownObjectRelease();
      char v52 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v61,  (uint64_t)v51,  0x40u,  1);
    }

    else
    {
      char v52 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( Resolve,  v31,  0x40u,  1);
    }

    char v54 = v52;
    swift_bridgeObjectRelease();
    if ((v54 & 1) != 0) {
      goto LABEL_46;
    }
LABEL_66:
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_67:
    ;
  }

  if ((v31 & 0x2000000000000000LL) != 0)
  {
    uint64_t v5 = v8;
    uint64_t v33 = HIBYTE(v31) & 0xF;
    *(void *)&__int128 v125 = Resolve;
    *((void *)&v125 + 1) = v31 & 0xFFFFFFFFFFFFFFLL;
    int64_t v32 = (char *)&v125;
  }

  else
  {
    if ((Resolve & 0x1000000000000000LL) != 0)
    {
      int64_t v32 = (char *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v33 = Resolve & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      int64_t v32 = (char *)_StringObject.sharedUTF8.getter();
    }

    uint64_t v5 = v8;
  }

  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v32, v33, 0x40u, 1)) {
    goto LABEL_66;
  }
LABEL_46:
  char v35 = v95;
  char v34 = v88;
LABEL_47:
  swift_bridgeObjectRelease();
  *(void *)&__int128 v75 = v73;
  BYTE8(v75) = v35;
  BYTE9(v75) = v94;
  BYTE10(v75) = v93;
  BYTE11(v75) = v92;
  BYTE12(v75) = v91;
  BYTE13(v75) = v90;
  BYTE14(v75) = v89;
  HIBYTE(v75) = v34;
  LOBYTE(v76) = v87;
  *((void *)&v76 + 1) = v5;
  *(void *)&__int128 v77 = v72;
  *((void *)&v77 + 1) = v71;
  *(void *)&__int128 v78 = v70;
  *((void *)&v78 + 1) = v69;
  *(void *)&__int128 v79 = v68;
  *((void *)&v79 + 1) = v67;
  *(void *)&__int128 v80 = v66;
  *((void *)&v80 + 1) = v65;
  LOBYTE(v81) = v86;
  *((void *)&v81 + 1) = v9;
  *(void *)&__int128 v82 = v13;
  *((void *)&v82 + 1) = Resolve;
  *(void *)unint64_t v83 = v31;
  *(void *)&v83[8] = v64;
  *(void *)&v83[16] = v63;
  v83[24] = v85;
  v83[25] = v84;
  __int128 v125 = v75;
  __int128 v126 = v76;
  __int128 v129 = v79;
  __int128 v130 = v80;
  __int128 v127 = v77;
  __int128 v128 = v78;
  *(_OWORD *)((char *)v133 + 10) = *(_OWORD *)&v83[10];
  __int128 v132 = v82;
  v133[0] = *(_OWORD *)v83;
  __int128 v131 = v81;
  if ((v35 & 1) != 0)
  {
    uint64_t v5 = v62;
    if (v73)
    {
      uint64_t v5 = *(void *)(v73 + 16);
      unint64_t v36 = *(void *)(v73 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v75);
      unint64_t v7 = v36;
      goto LABEL_53;
    }

Swift::String __swiftcall NSString._urlStringByInsertingQueryResolveFlags(_:)(Swift::UInt32 a1)
{
  uint64_t v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  unint64_t v5 = v4;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v3, v5, 1, (uint64_t)v85);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v85, (uint64_t)v116);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v85, (uint64_t)&v86);
  Swift::UInt32 v51 = a1;
  uint64_t v6 = v106;
  unint64_t v7 = v107;
  unint64_t v8 = v108;
  unint64_t v9 = v109;
  uint64_t v53 = v111;
  char v84 = v87;
  char v83 = v88;
  char v82 = v89;
  char v81 = v90;
  char v80 = v91;
  char v79 = v92;
  char v78 = v93;
  char v77 = v94;
  char v76 = v95;
  char v75 = v105;
  char v74 = v112;
  char v73 = v113;
  uint64_t v62 = v97;
  uint64_t v63 = v96;
  uint64_t v60 = v99;
  uint64_t v61 = v98;
  uint64_t v58 = v101;
  uint64_t v59 = v100;
  uint64_t v56 = v103;
  uint64_t v57 = v102;
  uint64_t v54 = v110;
  uint64_t v55 = v104;
  if (v107)
  {
    uint64_t v10 = v86;
    outlined init with take of URLComponents._URLComponents?((uint64_t)v116, (uint64_t)v114);
    outlined retain of URLComponents((uint64_t)v114);
    unint64_t v11 = v7;
  }

  else if ((v93 & 1) != 0 && v86)
  {
    uint64_t v10 = v86;
    if ((*(_BYTE *)(v86 + 168) & 1) != 0)
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v116, (uint64_t)v114);
      outlined retain of URLComponents((uint64_t)v114);
      uint64_t v12 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }

    else
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v116, (uint64_t)v114);
      outlined retain of URLComponents((uint64_t)v114);
      uint64_t v12 = String.subscript.getter();
    }

    uint64_t v6 = MEMORY[0x186E1B610](v12);
    unint64_t v11 = v13;
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = v86;
    outlined init with take of URLComponents._URLComponents?((uint64_t)v116, (uint64_t)v114);
    outlined retain of URLComponents((uint64_t)v114);
    uint64_t v6 = 0LL;
    unint64_t v11 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents?(v85);
  unint64_t v14 = String._removingPathResolveFlags()(v6, v11);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  char v84 = 0;
  char v78 = 0;
  if ((v16 & 0x1000000000000000LL) != 0)
  {
    *(void *)&v114[0] = v14;
    *((void *)&v114[0] + 1) = v16;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v35 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
    id v37 = v35;
    id v50 = v36;
    if (v36)
    {
      *(void *)&v114[0] = v14;
      *((void *)&v114[0] + 1) = v16;
      StringProtocol._ephemeralString.getter();
      unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v39 = objc_msgSend(v38, sel_length);
      swift_unknownObjectRelease();
      char v40 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v50,  (uint64_t)v39,  0x10u,  1);
    }

    else
    {
      char v40 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v14, v16, 0x10u, 1);
    }

    char v47 = v40;
    swift_bridgeObjectRelease_n();
    uint64_t v17 = v10;
    if ((v47 & 1) == 0) {
      goto LABEL_50;
    }
  }

  else if ((v16 & 0x2000000000000000LL) != 0)
  {
    *(void *)&v114[0] = v14;
    *((void *)&v114[0] + 1) = v16 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v17 = v10;
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( (char *)v114,  HIBYTE(v16) & 0xF,  0x10u,  1)) {
      goto LABEL_50;
    }
  }

  else
  {
    uint64_t v17 = v10;
    if ((v14 & 0x1000000000000000LL) != 0)
    {
      uint64_t v18 = (char *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v19 = v14 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v18 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v18, v19, 0x10u, 1)) {
      goto LABEL_50;
    }
  }

  swift_bridgeObjectRelease();
  if (v9)
  {
    unint64_t v20 = v9;
LABEL_20:
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }

  unint64_t v8 = 0LL;
  unint64_t v20 = 0xE000000000000000LL;
  if (v77 == 1 && v17)
  {
    if ((*(_BYTE *)(v17 + 192) & 1) == 0)
    {
      uint64_t v33 = String.subscript.getter();
      unint64_t v8 = MEMORY[0x186E1B610](v33);
      unint64_t v20 = v34;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }

    unint64_t v8 = 0LL;
  }

id @objc NSString._urlStringByInsertingPathResolveFlags(_:)( void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v6 = a1;
  a4(a3);

  unint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v7;
}

Swift::String __swiftcall NSString._urlStringByRemovingResolveFlags()()
{
  uint64_t v1 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v1, v3, 1, (uint64_t)v81);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v81, (uint64_t)v112);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v81, (uint64_t)&v82);
  uint64_t v4 = v82;
  uint64_t v5 = v102;
  unint64_t v6 = v103;
  unint64_t v7 = v104;
  unint64_t v8 = v105;
  uint64_t v49 = v107;
  char v80 = v83;
  char v79 = v84;
  char v78 = v85;
  char v77 = v86;
  char v76 = v87;
  char v75 = v88;
  char v74 = v89;
  char v73 = v90;
  char v72 = v91;
  char v71 = v101;
  char v70 = v108;
  char v69 = v109;
  uint64_t v58 = v93;
  uint64_t v59 = v92;
  uint64_t v56 = v95;
  uint64_t v57 = v94;
  uint64_t v54 = v97;
  uint64_t v55 = v96;
  uint64_t v52 = v99;
  uint64_t v53 = v98;
  uint64_t v50 = v106;
  uint64_t v51 = v100;
  if (v103)
  {
    outlined init with take of URLComponents._URLComponents?((uint64_t)v112, (uint64_t)v110);
    outlined retain of URLComponents((uint64_t)v110);
    unint64_t v9 = v6;
  }

  else if ((v89 & 1) != 0 && v82)
  {
    if ((*(_BYTE *)(v82 + 168) & 1) != 0)
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v112, (uint64_t)v110);
      outlined retain of URLComponents((uint64_t)v110);
      uint64_t v10 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }

    else
    {
      outlined init with take of URLComponents._URLComponents?((uint64_t)v112, (uint64_t)v110);
      outlined retain of URLComponents((uint64_t)v110);
      uint64_t v10 = String.subscript.getter();
    }

    uint64_t v5 = MEMORY[0x186E1B610](v10);
    unint64_t v9 = v11;
    swift_bridgeObjectRelease();
  }

  else
  {
    outlined init with take of URLComponents._URLComponents?((uint64_t)v112, (uint64_t)v110);
    outlined retain of URLComponents((uint64_t)v110);
    uint64_t v5 = 0LL;
    unint64_t v9 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents?(v81);
  unint64_t v12 = String._removingPathResolveFlags()(v5, v9);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  char v80 = 0;
  char v74 = 0;
  if ((v14 & 0x1000000000000000LL) != 0)
  {
    *(void *)&v110[0] = v12;
    *((void *)&v110[0] + 1) = v14;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    int64_t v32 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v33 = (unsigned __int16 *)objc_msgSend(v32, sel__fastCharacterContents);
    id v34 = v32;
    char v47 = v33;
    if (v33)
    {
      *(void *)&v110[0] = v12;
      *((void *)&v110[0] + 1) = v14;
      StringProtocol._ephemeralString.getter();
      char v35 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v36 = objc_msgSend(v35, sel_length);
      swift_unknownObjectRelease();
      char v37 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v47,  (uint64_t)v36,  0x10u,  1);
    }

    else
    {
      char v37 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, v14, 0x10u, 1);
    }

    char v44 = v37;
    swift_bridgeObjectRelease_n();
    if ((v44 & 1) == 0) {
      goto LABEL_48;
    }
  }

  else
  {
    if ((v14 & 0x2000000000000000LL) != 0)
    {
      uint64_t v16 = HIBYTE(v14) & 0xF;
      *(void *)&v110[0] = v12;
      *((void *)&v110[0] + 1) = v14 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v15 = (char *)v110;
    }

    else if ((v12 & 0x1000000000000000LL) != 0)
    {
      unint64_t v15 = (char *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v16 = v12 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v15 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, v16, 0x10u, 1)) {
      goto LABEL_48;
    }
  }

  swift_bridgeObjectRelease();
  if (v8)
  {
    unint64_t v17 = v8;
  }

  else
  {
    if (v73 != 1 || !v4 || (*(_BYTE *)(v4 + 192) & 1) != 0)
    {
      char v23 = 0;
      char v24 = 0;
      unint64_t Resolve = 0LL;
      unint64_t v20 = 0LL;
      char v80 = 0;
      char v73 = 0;
      goto LABEL_32;
    }

    uint64_t v30 = String.subscript.getter();
    unint64_t v7 = MEMORY[0x186E1B610](v30);
    unint64_t v17 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  unint64_t Resolve = String._removingQueryResolveFlags()(v7, v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  char v80 = 0;
  char v73 = 0;
  if (!v20)
  {
    char v23 = 0;
    char v24 = 0;
    goto LABEL_32;
  }

  if ((v20 & 0x1000000000000000LL) != 0)
  {
    *(void *)&v110[0] = Resolve;
    *((void *)&v110[0] + 1) = v20;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v39 = (unsigned __int16 *)objc_msgSend(v38, sel__fastCharacterContents);
    id v40 = v38;
    char v48 = v39;
    if (v39)
    {
      *(void *)&v110[0] = Resolve;
      *((void *)&v110[0] + 1) = v20;
      StringProtocol._ephemeralString.getter();
      unint64_t v41 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v42 = objc_msgSend(v41, sel_length);
      swift_unknownObjectRelease();
      char v43 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v48,  (uint64_t)v42,  0x40u,  1);
    }

    else
    {
      char v43 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( Resolve,  v20,  0x40u,  1);
    }

    char v45 = v43;
    swift_bridgeObjectRelease();
    if ((v45 & 1) != 0) {
      goto LABEL_31;
    }
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v28 = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_49;
  }

  if ((v20 & 0x2000000000000000LL) != 0)
  {
    uint64_t v22 = HIBYTE(v20) & 0xF;
    *(void *)&v110[0] = Resolve;
    *((void *)&v110[0] + 1) = v20 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v21 = (char *)v110;
  }

  else if ((Resolve & 0x1000000000000000LL) != 0)
  {
    unint64_t v21 = (char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v22 = Resolve & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v21 = (char *)_StringObject.sharedUTF8.getter();
  }

  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v22, 0x40u, 1)) {
    goto LABEL_48;
  }
LABEL_31:
  char v24 = v80;
  char v23 = v73;
LABEL_32:
  swift_bridgeObjectRelease();
  *(void *)&__int128 v60 = v4;
  BYTE8(v60) = v24;
  BYTE9(v60) = v79;
  BYTE10(v60) = v78;
  BYTE11(v60) = v77;
  BYTE12(v60) = v76;
  BYTE13(v60) = v75;
  BYTE14(v60) = v74;
  HIBYTE(v60) = v23;
  LOBYTE(v61) = v72;
  *((void *)&v61 + 1) = v59;
  *(void *)&__int128 v62 = v58;
  *((void *)&v62 + 1) = v57;
  *(void *)&__int128 v63 = v56;
  *((void *)&v63 + 1) = v55;
  *(void *)&__int128 v64 = v54;
  *((void *)&v64 + 1) = v53;
  *(void *)&__int128 v65 = v52;
  *((void *)&v65 + 1) = v51;
  LOBYTE(v66) = v71;
  *((void *)&v66 + 1) = v12;
  *(void *)&__int128 v67 = v14;
  *((void *)&v67 + 1) = Resolve;
  *(void *)__int128 v68 = v20;
  *(void *)&v68[8] = v50;
  *(void *)&v68[16] = v49;
  v68[24] = v70;
  v68[25] = v69;
  v110[0] = v60;
  v110[1] = v61;
  v110[4] = v64;
  v110[5] = v65;
  _OWORD v110[2] = v62;
  v110[3] = v63;
  *(_OWORD *)((char *)v111 + 10) = *(_OWORD *)&v68[10];
  v110[7] = v67;
  v111[0] = *(_OWORD *)v68;
  v110[6] = v66;
  outlined retain of URLComponents((uint64_t)&v60);
  uint64_t v25 = URLComponents._URLComponents.computedString.getter();
  unint64_t v27 = v26;
  outlined release of URLComponents((uint64_t)&v60);
  if (v27)
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v60);
    uint64_t v1 = v25;
    unint64_t v3 = v27;
  }

  else
  {
    outlined release of URLComponents((uint64_t)&v60);
  }

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5i9VGXEfU_s6L7V_SsTG5SiTf1cn_n( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    LODWORD(result) = 0;
    unsigned __int8 v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v11 = v13;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }

  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5h9VGXEfU_s6L7V_SsTG5SiTf1nnc_nTf4xnn_n( (uint64_t)v11,  a1,  a2,  a3,  a4,  a5);
  if (!v5)
  {
    unsigned __int8 v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }

  return result;
}

uint64_t specialized static Substring._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = String.subscript.getter();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v10;
  return result;
}

uint64_t specialized static Substring._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  uint64_t v1 = String.subscript.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5h9VGXEfU_s6L7V_SsTG5SiTf1nnc_nTf4xnn_n( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4LL << v12)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }

void __swiftcall CollectionDifference.Change._bridgeToObjectiveC()(NSOrderedCollectionChange *__return_ptr retstr)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)())MEMORY[0x1895F8858])();
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v4);
  uint64_t v9 = (char *)v36 - v8;
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (uint64_t *)((char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v14 = *v11;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  unint64_t v16 = (char *)v11 + *(int *)(TupleTypeMetadata3 + 48);
  unint64_t v17 = (char *)v11 + *(int *)(TupleTypeMetadata3 + 64);
  uint64_t v18 = *(void *)v17;
  int v19 = v17[8];
  int v20 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  if (v19) {
    uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v21 = v18;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v20(v6, v16, v2);
    uint64_t v37 = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
    (*(void (**)(uint64_t *, char *, uint64_t))(v3 + 16))(boxed_opaque_existential_1, v6, v2);
    uint64_t v23 = v37;
    if (v37)
    {
      unsigned int v24 = __swift_project_boxed_opaque_existential_1(v36, v37);
      uint64_t v25 = *(void *)(v23 - 8);
      MEMORY[0x1895F8858](v24);
      unsigned int v27 = (char *)v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v25 + 16))(v27);
      uint64_t v28 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    }

    else
    {
      uint64_t v28 = 0LL;
    }

    objc_msgSend( objc_allocWithZone((Class)NSOrderedCollectionChange),  sel_initWithObject_type_index_associatedIndex_,  v28,  1,  v14,  v21);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  else
  {
    v20(v9, v16, v2);
    uint64_t v37 = v2;
    unsigned int v29 = __swift_allocate_boxed_opaque_existential_1(v36);
    (*(void (**)(uint64_t *, char *, uint64_t))(v3 + 16))(v29, v9, v2);
    uint64_t v30 = v37;
    if (v37)
    {
      unint64_t v31 = __swift_project_boxed_opaque_existential_1(v36, v37);
      uint64_t v32 = *(void *)(v30 - 8);
      MEMORY[0x1895F8858](v31);
      unsigned __int8 v34 = (char *)v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v32 + 16))(v34);
      uint64_t v35 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    }

    else
    {
      uint64_t v35 = 0LL;
    }

    objc_msgSend( objc_allocWithZone((Class)NSOrderedCollectionChange),  sel_initWithObject_type_index_associatedIndex_,  v35,  0,  v14,  v21);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }

uint64_t static CollectionDifference.Change._forceBridgeFromObjectiveC(_:result:)( void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = (void *)MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (objc_msgSend(v7, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v14, 0, sizeof(v14));
  }

  outlined init with take of Any?((uint64_t)v14, (uint64_t)&v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a3);
  uint64_t result = static CollectionDifference.Change._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, a3);
  if ((result & 1) == 0)
  {
    unint64_t v15 = 0LL;
    unint64_t v16 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    unint64_t v15 = 0xD000000000000011LL;
    unint64_t v16 = 0x80000001839CCA20LL;
    type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSOrderedCollectionChange);
    v11._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 544175136LL;
    v12._unint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v12);
    type metadata accessor for CollectionDifference.Change();
    v13._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t static CollectionDifference.Change._conditionallyBridgeFromObjectiveC(_:result:)( void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)v26 - v9;
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v8);
  Swift::String v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (objc_msgSend(a1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v26, v27);
  }

  else
  {
    memset(v27, 0, sizeof(v27));
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v14 = swift_dynamicCast();
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v14)
  {
    v15(v10, 1LL, 1LL, a3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 0LL;
  }

  v15(v10, 0LL, 1LL, a3);
  unint64_t v16 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v16(v13, v10, a3);
  id v17 = objc_msgSend(a1, sel_associatedIndex);
  if (v17 == (id)0x7FFFFFFFFFFFFFFFLL) {
    id v18 = 0LL;
  }
  else {
    id v18 = objc_msgSend(a1, sel_associatedIndex);
  }
  if ((unint64_t)objc_msgSend(a1, sel_changeType) > 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a3);
    return 0LL;
  }

  type metadata accessor for CollectionDifference.Change();
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(void *, uint64_t))(*(void *)(v19 - 8) + 8LL))(a2, v19);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v21 = (char *)a2 + *(int *)(TupleTypeMetadata3 + 48);
  unsigned __int8 v22 = (char *)a2 + *(int *)(TupleTypeMetadata3 + 64);
  *a2 = objc_msgSend(a1, sel_index);
  v16(v21, v13, a3);
  *(void *)unsigned __int8 v22 = v18;
  v22[8] = v17 == (id)0x7FFFFFFFFFFFFFFFLL;
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = type metadata accessor for CollectionDifference.Change();
  uint64_t v24 = 1LL;
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(a2, 0LL, 1LL, v23);
  return v24;
}

uint64_t static CollectionDifference.Change._unconditionallyBridgeFromObjectiveC(_:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CollectionDifference.Change();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  Swift::String v13 = (uint64_t *)((char *)&v16 - v12);
  uint64_t v14 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))((char *)&v16 - v12, 1LL, 1LL, v6);
  if (a1)
  {
    static CollectionDifference.Change._forceBridgeFromObjectiveC(_:result:)(a1, v13, a2);
    (*(void (**)(char *, void *, uint64_t))(v8 + 16))(v11, v13, v7);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1LL, v6);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(void *, uint64_t))(v8 + 8))(v13, v7);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a3, v11, v6);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>.Change( void *a1, void *a2, uint64_t a3)
{
  return static CollectionDifference.Change._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>.Change( void *a1, void *a2, uint64_t a3)
{
  return static CollectionDifference.Change._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CollectionDifference<A>.Change@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static CollectionDifference.Change._unconditionallyBridgeFromObjectiveC(_:)(a1, *(void *)(a2 + 16), a3);
}

void __swiftcall CollectionDifference._bridgeToObjectiveC()(NSOrderedCollectionDifference *__return_ptr retstr)
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for CollectionDifference.Change();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = &v13[-v5];
  MEMORY[0x186E20D4C](MEMORY[0x1896199D8], v2);
  uint64_t v7 = dispatch thunk of Collection.count.getter();
  uint64_t v8 = MEMORY[0x18961AFE8];
  if (v7)
  {
    uint64_t v9 = v7;
    uint64_t v14 = MEMORY[0x18961AFE8];
    specialized ContiguousArray.reserveCapacity(_:)();
    dispatch thunk of Collection.startIndex.getter();
    if (v9 < 0)
    {
      __break(1u);
      return;
    }

    do
    {
      uint64_t v10 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
      (*(void (**)(_BYTE *))(v4 + 16))(v6);
      v10(v13, 0LL);
      CollectionDifference.Change._bridgeToObjectiveC()(v11);
      (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      dispatch thunk of Collection.formIndex(after:)();
      --v9;
    }

    while (v9);
    uint64_t v8 = v14;
  }

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  else
  {
    type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSOrderedCollectionChange);
    uint64_t v12 = _ContiguousArrayBuffer._asCocoaArray()();
  }

  objc_msgSend(objc_allocWithZone((Class)NSOrderedCollectionDifference), sel_initWithChanges_, v12);
  swift_unknownObjectRelease();
}

uint64_t static CollectionDifference._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static CollectionDifference._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, a3);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSOrderedCollectionDifference);
    v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 544175136LL;
    v5._unint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v5);
    type metadata accessor for CollectionDifference();
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

BOOL static CollectionDifference._conditionallyBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a2;
  uint64_t v4 = type metadata accessor for CollectionDifference();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unsigned __int8 v42 = &v35[-v7];
  uint64_t v39 = a3;
  uint64_t v8 = type metadata accessor for CollectionDifference.Change();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = &v35[-v11];
  uint64_t v13 = *(void *)(v8 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v10);
  uint64_t v16 = &v35[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v14);
  id v18 = &v35[-v17];
  unint64_t v40 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v41 = v6;
  v40(v45, v5);
  uint64_t v19 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v19, (uint64_t)v76);
  __int128 v73 = v76[10];
  __int128 v74 = v76[11];
  v75[0] = v77[0];
  *(_OWORD *)((char *)v75 + 9) = *(_OWORD *)((char *)v77 + 9);
  __int128 v69 = v76[6];
  __int128 v70 = v76[7];
  __int128 v71 = v76[8];
  __int128 v72 = v76[9];
  __int128 v65 = v76[2];
  __int128 v66 = v76[3];
  __int128 v67 = v76[4];
  __int128 v68 = v76[5];
  __int128 v63 = v76[0];
  __int128 v64 = v76[1];
  outlined retain of Locale((uint64_t)v76);
  NSFastEnumerationIterator.next()((uint64_t)&v61);
  uint64_t v43 = v5;
  uint64_t v44 = v4;
  uint64_t v20 = MEMORY[0x18961AFE8];
  if (v62)
  {
    uint64_t v46 = MEMORY[0x18961AFC0] + 8LL;
    while (1)
    {
      outlined init with take of Any(&v61, v47);
      outlined init with copy of Any((uint64_t)v47, (uint64_t)&v48);
      int v21 = swift_dynamicCast();
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v13 + 56))(v12, v21 ^ 1u, 1LL, v8);
      unsigned __int8 v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32);
      v22(v18, v12, v8);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v16, v18, v8);
      if (!swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v25 = MEMORY[0x186E1BB20](v20, v8);
        uint64_t v20 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25 + 1, 1, v20, v8);
      }

      unint64_t v24 = *(void *)(v20 + 16);
      unint64_t v23 = *(void *)(v20 + 24);
      if (v24 >= v23 >> 1)
      {
        BOOL v36 = v23 > 1;
        uint64_t v26 = type metadata accessor for Array();
        uint64_t v20 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v36,  v24 + 1,  1,  v20,  *(void *)(v26 + 16));
      }

      *(void *)(v20 + 16) = v24 + 1;
      v22( (_BYTE *)(v20 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
                + *(void *)(v13 + 72) * v24),
        v16,
        v8);
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v18, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
      NSFastEnumerationIterator.next()((uint64_t)&v61);
      if (!v62) {
        goto LABEL_9;
      }
    }

    outlined release of Locale((uint64_t)v76);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    __int128 v58 = v73;
    __int128 v59 = v74;
    v60[0] = v75[0];
    *(_OWORD *)((char *)v60 + 9) = *(_OWORD *)((char *)v75 + 9);
    __int128 v54 = v69;
    __int128 v55 = v70;
    __int128 v56 = v71;
    __int128 v57 = v72;
    __int128 v50 = v65;
    __int128 v51 = v66;
    __int128 v52 = v67;
    __int128 v53 = v68;
    __int128 v48 = v63;
    __int128 v49 = v64;
    outlined release of Locale((uint64_t)&v48);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v12, v38);
    uint64_t v29 = v44;
    uint64_t v28 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v45, 1LL, 1LL, v44);
  }

  else
  {
LABEL_9:
    __int128 v58 = v73;
    __int128 v59 = v74;
    v60[0] = v75[0];
    *(_OWORD *)((char *)v60 + 9) = *(_OWORD *)((char *)v75 + 9);
    __int128 v54 = v69;
    __int128 v55 = v70;
    __int128 v56 = v71;
    __int128 v57 = v72;
    __int128 v50 = v65;
    __int128 v51 = v66;
    __int128 v52 = v67;
    __int128 v53 = v68;
    __int128 v48 = v63;
    __int128 v49 = v64;
    outlined release of Locale((uint64_t)&v48);
    *(void *)&v47[0] = v20;
    uint64_t v27 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618488], v27);
    uint64_t v28 = v45;
    CollectionDifference.init<A>(_:)();
    outlined release of Locale((uint64_t)v76);
    uint64_t v29 = v44;
  }

  uint64_t v30 = v42;
  uint64_t v31 = v28;
  uint64_t v32 = v43;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v41 + 16))(v42, v31, v43);
  BOOL v33 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48LL))(v30, 1LL, v29) != 1;
  v40((uint64_t)v30, v32);
  return v33;
}

uint64_t static CollectionDifference._unconditionallyBridgeFromObjectiveC(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CollectionDifference.Change();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = &v31[-v12];
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = &v31[-v14];
  uint64_t v16 = type metadata accessor for CollectionDifference();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t result = MEMORY[0x1895F8858](v17);
  BOOL v36 = &v31[-v19];
  if (a1)
  {
    uint64_t v34 = v16;
    uint64_t v35 = a2;
    uint64_t v33 = a3;
    uint64_t v20 = swift_unknownObjectRetain();
    NSFastEnumerationIterator.init(_:)(v20, (uint64_t)v56);
    __int128 v53 = v56[10];
    __int128 v54 = v56[11];
    v55[0] = v57[0];
    *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)((char *)v57 + 9);
    __int128 v49 = v56[6];
    __int128 v50 = v56[7];
    __int128 v51 = v56[8];
    __int128 v52 = v56[9];
    __int128 v45 = v56[2];
    __int128 v46 = v56[3];
    __int128 v47 = v56[4];
    __int128 v48 = v56[5];
    __int128 v43 = v56[0];
    __int128 v44 = v56[1];
    outlined retain of Locale((uint64_t)v56);
    NSFastEnumerationIterator.next()((uint64_t)&v41);
    if (v42)
    {
      uint64_t v21 = MEMORY[0x18961AFE8];
      uint64_t v37 = MEMORY[0x18961AFC0] + 8LL;
      do
      {
        outlined init with take of Any(&v41, v39);
        outlined init with copy of Any((uint64_t)v39, (uint64_t)v38);
        swift_dynamicCast();
        unsigned __int8 v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32);
        v22(v15, v13, v6);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v15, v6);
        if (!swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v25 = MEMORY[0x186E1BB20](v21, v6);
          uint64_t v21 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25 + 1, 1, v21, v6);
        }

        unint64_t v24 = *(void *)(v21 + 16);
        unint64_t v23 = *(void *)(v21 + 24);
        if (v24 >= v23 >> 1)
        {
          BOOL v32 = v23 > 1;
          uint64_t v26 = type metadata accessor for Array();
          uint64_t v21 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v32,  v24 + 1,  1,  v21,  *(void *)(v26 + 16));
        }

        *(void *)(v21 + 16) = v24 + 1;
        v22( (_BYTE *)(v21 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                  + *(void *)(v7 + 72) * v24),
          v10,
          v6);
        (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v15, v6);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
        NSFastEnumerationIterator.next()((uint64_t)&v41);
      }

      while (v42);
    }

    else
    {
      uint64_t v21 = MEMORY[0x18961AFE8];
    }

    v39[10] = v53;
    v39[11] = v54;
    v40[0] = v55[0];
    *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v55 + 9);
    v39[6] = v49;
    v39[7] = v50;
    v39[8] = v51;
    v39[9] = v52;
    v39[2] = v45;
    v39[3] = v46;
    v39[4] = v47;
    v39[5] = v48;
    v39[0] = v43;
    v39[1] = v44;
    outlined release of Locale((uint64_t)v39);
    v38[0] = v21;
    uint64_t v27 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618488], v27);
    uint64_t v28 = v36;
    CollectionDifference.init<A>(_:)();
    outlined release of Locale((uint64_t)v56);
    uint64_t v29 = v34;
    uint64_t v30 = *(void *)(v34 - 8);
    uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v34);
    if ((_DWORD)result != 1) {
      return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v30 + 32))(v33, v28, v29);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CollectionDifference._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CollectionDifference._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CollectionDifference<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static CollectionDifference._unconditionallyBridgeFromObjectiveC(_:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  else {
    uint64_t v3 = 0LL;
  }
  if (v3) {
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
  else {
    return type metadata accessor for _ContiguousArrayStorage();
  }
}

Swift::Void __swiftcall Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( Swift::Bool bufferIsUnique, Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  *uint64_t v4 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( bufferIsUnique,  minimumCapacity,  growForAppend,  *v4,  *(void *)(v3 + 16));
}

uint64_t _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = _ArrayBuffer.capacity.getter();
  if ((a3 & 1) != 0)
  {
    uint64_t v11 = v10;
    if (v10 < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_42;
      }

      if (2 * v10 <= a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = 2 * v10;
      }
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (a4 < 0 || (a4 & 0x4000000000000000LL) != 0))
  {
    specialized _ArrayBuffer._nonNative.getter(a4);
    swift_unknownObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_unknownObjectRelease();
  }

  else
  {
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    uint64_t v13 = a4 & 0xFFFFFFFFFFFFF8LL;
    if ((isClassOrObjCExistentialType & 1) == 0) {
      uint64_t v13 = a4;
    }
    uint64_t v14 = *(void *)(v13 + 16);
  }

  if (v11 <= v14) {
    uint64_t v11 = v14;
  }
  if (v11)
  {
    getContiguousArrayStorageType<A>(for:)(a5, a5);
    uint64_t v15 = *(void *)(a5 - 8);
    uint64_t v16 = *(void *)(v15 + 72);
    uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
    id v18 = (void *)swift_allocObject();
    size_t v19 = _swift_stdlib_malloc_size(v18);
    if (v16)
    {
      int64_t v20 = v19 - ((v17 + 32) & ~v17);
      if (v20 != 0x8000000000000000LL || v16 != -1)
      {
        uint64_t v22 = v20 / v16;
        swift_retain();
        char v23 = _swift_isClassOrObjCExistentialType();
        void v18[2] = v14;
        v18[3] = v23 & 1 | (unint64_t)(2 * v22);
        swift_release();
        if ((a1 & 1) != 0) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }
    }

void static ICUListFormatter.formatter<A, B>(for:)()
{
}

Swift::String __swiftcall ICUListFormatter.format(strings:)(Swift::OpaquePointer strings)
{
  int64_t v3 = *((void *)strings._rawValue + 2);
  uint64_t v4 = (char *)MEMORY[0x18961AFE8];
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3,  0,  MEMORY[0x18961AFE8]);
  uint64_t v34 = v5;
  uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v3, 0, v4);
  if (!v3)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v23 = specialized _withResizingUCharBuffer(initialSize:_:)( 32LL,  v1,  (uint64_t)&v34,  (uint64_t)&v33,  (uint64_t)strings._rawValue);
    unint64_t v25 = v24;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v26 = v5[2];
    if (v26)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0LL; i != v26; ++i)
      {
        uint64_t v28 = v5[i + 4];
        if (v28) {
          MEMORY[0x186E20E60](v28, -1LL, -1LL);
        }
      }

      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25) {
      uint64_t v29 = v23;
    }
    else {
      uint64_t v29 = 0LL;
    }
    if (v25) {
      uint64_t v30 = v25;
    }
    else {
      uint64_t v30 = (void *)0xE000000000000000LL;
    }
    goto LABEL_47;
  }

  swift_bridgeObjectRetain();
  uint64_t v6 = (unint64_t *)((char *)strings._rawValue + 40);
  while (1)
  {
    uint64_t v8 = *(v6 - 1);
    unint64_t v7 = *v6;
    if ((*v6 & 0x1000000000000000LL) != 0)
    {
      Swift::Int v9 = String.UTF16View._foreignCount()();
      if (!v9)
      {
LABEL_13:
        uint64_t v10 = (void *)MEMORY[0x18961AFE8];
        goto LABEL_14;
      }
    }

    else
    {
      Swift::Int v9 = String.UTF16View._nativeGetOffset(for:)();
      if (!v9) {
        goto LABEL_13;
      }
    }

    if (v9 < 1)
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      _OWORD v10[2] = v9;
      v10[3] = v12 & 0xFFFFFFFFFFFFFFFELL;
    }

    swift_bridgeObjectRetain_n();
    uint64_t v13 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v32, (uint64_t)(v10 + 4), v9, v8, v7);
    swift_bridgeObjectRelease();
    if (v13 != v9) {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
LABEL_14:
    unint64_t v14 = v10[2];
    uint64_t v15 = (char *)swift_slowAlloc();
    uint64_t v17 = v15;
    memcpy(v15, v10 + 4, 2 * v14);
    uint64_t v5 = v34;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v5[2] + 1LL,  1,  v5);
    }
    unint64_t v19 = v5[2];
    unint64_t v18 = v5[3];
    if (v19 >= v18 >> 1) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v18 > 1),  v19 + 1,  1,  v5);
    }
    void v5[2] = v19 + 1;
    v5[v19 + 4] = v17;
    swift_release();
    uint64_t v34 = v5;
    if (v14 >> 31) {
      goto LABEL_44;
    }
    int64_t v20 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v20 + 2) + 1LL,  1,  v20);
    }
    unint64_t v22 = *((void *)v20 + 2);
    unint64_t v21 = *((void *)v20 + 3);
    if (v22 >= v21 >> 1) {
      int64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v21 > 1),  v22 + 1,  1,  v20);
    }
    v6 += 2;
    *((void *)v20 + 2) = v22 + 1;
    *(_DWORD *)&v20[4 * v22 + 32] = v14;
    uint64_t v33 = v20;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t v29 = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_47:
  result._unint64_t object = v30;
  result._uint64_t countAndFlagsBits = v29;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUListFormatter.Signature()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ICUListFormatter.Signature()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUListFormatter.Signature()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUListFormatter.Signature( void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    if (v2 != v5) {
      return 0LL;
    }
    return v3 == v4;
  }

  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0LL;
  if ((v7 & 1) != 0 && v2 == v5) {
    return v3 == v4;
  }
  return result;
}

uint64_t ICUListFormatter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUListFormatter()
{
  return objc_opt_self();
}

void closure #1 in ICUListFormatter.format(strings:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)(a7 + 16) >> 31) {
    __break(1u);
  }
  else {
    ulistfmt_format();
  }
}

uint64_t initializeWithCopy for ICUListFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ICUListFormatter.Signature(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for ICUListFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ICUListFormatter.Signature()
{
  return &type metadata for ICUListFormatter.Signature;
}

unint64_t lazy protocol witness table accessor for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICUListFormatter.Signature,  &type metadata for ICUListFormatter.Signature);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature);
  }

  return result;
}

id NSURLCache.init(memoryCapacity:diskCapacity:directory:)(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    id v6 = v5;
    outlined consume of URL?(v5);
  }

  else
  {
    id v6 = 0LL;
  }

  id v7 = objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithMemoryCapacity_diskCapacity_directoryURL_,  a1,  a2,  v6);

  return v7;
}

Foundation::Date_optional __swiftcall _TimeZoneAutoupdating.nextDaylightSavingTimeTransition(after:)( Foundation::Date after)
{
  uint64_t v2 = *v1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v4 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in TimeZoneCache.current.getter(v3, v10);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  uint64_t v5 = v10[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = v2;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 80))(&v9, ObjectType, v5);
  char v7 = swift_unknownObjectRelease();
  result.Foundation::Morphology::Definiteness value = *(Foundation::Date *)&v8;
  result.is_nil = v7;
  return result;
}

uint64_t type metadata accessor for _TimeZoneAutoupdating()
{
  return objc_opt_self();
}

void protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneAutoupdating()
{
}

void protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneAutoupdating()
{
}

uint64_t protocol witness for _TimeZoneProtocol.abbreviation(for:) in conformance _TimeZoneAutoupdating( double a1)
{
  return _TimeZoneAutoupdating.abbreviation(for:)(*(Foundation::Date *)&a1).value._countAndFlagsBits;
}

BOOL protocol witness for _TimeZoneProtocol.isDaylightSavingTime(for:) in conformance _TimeZoneAutoupdating( double a1)
{
  return _TimeZoneAutoupdating.isDaylightSavingTime(for:)(*(Foundation::Date *)&a1);
}

Swift::Double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneAutoupdating( double a1)
{
  return _TimeZoneAutoupdating.daylightSavingTimeOffset(for:)(*(Foundation::Date *)&a1);
}

double protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneAutoupdating( double a1)
{
  *(void *)&double result = (unint64_t)_TimeZoneAutoupdating.nextDaylightSavingTimeTransition(after:)(*(Foundation::Date *)&a1);
  return result;
}

uint64_t protocol witness for _TimeZoneProtocol.localizedName(for:locale:) in conformance _TimeZoneAutoupdating()
{
  return _TimeZoneAutoupdating.localizedName(for:locale:)();
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneAutoupdating( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating;
  if (!lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating)
  {
    uint64_t v1 = type metadata accessor for _TimeZoneAutoupdating();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _TimeZoneAutoupdating, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating);
  }

  return result;
}

uint64_t specialized _TimeZoneAutoupdating.identifier.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.current.getter(v0, v6);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  uint64_t v2 = v6[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t specialized _TimeZoneAutoupdating.secondsFromGMT(for:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = v1;
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 40))(&v8, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

double specialized _TimeZoneAutoupdating.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)( uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v11);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v11[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = v1;
  __int16 v9 = 0;
  (*(void (**)(uint64_t *, char *, __int16 *, uint64_t, uint64_t))(v4 + 48))( &v10,  (char *)&v9 + 1,  &v9,  ObjectType,  v4);
  double v7 = v6;
  swift_unknownObjectRelease();
  return v7;
}

uint64_t specialized _TimeZoneAutoupdating.debugDescription.getter()
{
  HIWORD(v10[1]) = -4864;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.current.getter(v0, v9);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  uint64_t v2 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
  double v6 = v5;
  swift_unknownObjectRelease();
  v7._uint64_t countAndFlagsBits = v4;
  v7._unint64_t object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v10[0];
}

uint64_t specialized _TimeZoneAutoupdating.abbreviation(for:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = v1;
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 56))(&v8, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t specialized _TimeZoneAutoupdating.isDaylightSavingTime(for:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v8);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v8[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v1;
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 64))(&v7, ObjectType, v4);
  swift_unknownObjectRelease();
  return v4 & 1;
}

double specialized _TimeZoneAutoupdating.daylightSavingTimeOffset(for:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = v1;
  double v6 = (*(double (**)(uint64_t *, uint64_t, uint64_t))(v4 + 72))(&v8, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t specialized _TimeZoneAutoupdating.localizedName(for:locale:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = (uint64_t *)(static TimeZoneCache.cache + 16);
  double v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.current.getter(v5, v12);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v12[1];
  uint64_t ObjectType = swift_getObjectType();
  v11[0] = v3;
  v11[1] = v4;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v7 + 88))(a1, v11, ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t _FTSSequence.Iterator.next()()
{
  uint64_t v2 = (void *)(v0 + 16);
  uint64_t v1 = *(FTS **)(v0 + 16);
  if (*(_BYTE *)(v0 + 40))
  {
    if (*(_BYTE *)(v0 + 40) == 1)
    {
      *uint64_t v2 = 0LL;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      uint64_t v3 = (FTSENT *)v1;
      *(_BYTE *)(v0 + 40) = 2;
      return (uint64_t)v3;
    }

    return 0LL;
  }

  uint64_t v4 = fts_read(v1);
  if (v4)
  {
    uint64_t v3 = v4;
  }

  else
  {
    if (!MEMORY[0x186E1B0E8]())
    {
      char v9 = *(_BYTE *)(v0 + 40);
      if (!v9)
      {
        fts_close(*(FTS **)(v0 + 16));
        char v9 = *(_BYTE *)(v0 + 40);
      }

      uint64_t v10 = *(void *)(v0 + 16);
      uint64_t v11 = *(void *)(v0 + 24);
      uint64_t v12 = *(void *)(v0 + 32);
      *uint64_t v2 = 0LL;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = 2;
      outlined consume of _FTSSequence.Iterator.State(v10, v11, v12, v9);
      return 0LL;
    }

    LODWORD(v3) = MEMORY[0x186E1B0E8]();
    char v5 = *(_BYTE *)(v0 + 40);
    if (!v5)
    {
      fts_close(*(FTS **)(v0 + 16));
      char v5 = *(_BYTE *)(v0 + 40);
    }

    uint64_t v6 = *(void *)(v0 + 16);
    uint64_t v7 = *(void *)(v0 + 24);
    uint64_t v8 = *(void *)(v0 + 32);
    *uint64_t v2 = 0LL;
    *(void *)(v0 + 24) = 0LL;
    *(void *)(v0 + 32) = 0LL;
    *(_BYTE *)(v0 + 40) = 2;
    outlined consume of _FTSSequence.Iterator.State(v6, v7, v8, v5);
    String.init(cString:)();
    return v3;
  }

  return (uint64_t)v3;
}

uint64_t _FTSSequence.Iterator.init(_:_:)(const char *a1, int a2)
{
  void v13[2] = *(char **)MEMORY[0x1895F89C0];
  *(_DWORD *)(v2 + 56) = 0;
  uint64_t v5 = MEMORY[0x18961AFE8];
  *(void *)(v2 + 64) = MEMORY[0x18961AFE8];
  *(void *)(v2 + 72) = v5;
  *(_BYTE *)(v2 + 80) = 0;
  *(void *)(v2 + 48) = a1;
  memset(&v12, 0, 28);
  memset(&v12.st_atimespec, 0, 112);
  if (lstat(a1, &v12) || (v13[0] = (char *)a1, v13[1] = 0LL, (uint64_t v10 = fts_open(v13, a2, 0LL)) == 0LL))
  {
    unsigned int v6 = MEMORY[0x186E1B0E8]();
    uint64_t v8 = String.init(cString:)();
    char v9 = 1;
    uint64_t v10 = (FTS *)v6;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
    char v9 = 0;
  }

  *(void *)(v2 + 16) = v10;
  *(void *)(v2 + 24) = v8;
  *(void *)(v2 + 32) = v7;
  *(_BYTE *)(v2 + 40) = v9;
  return v2;
}

uint64_t _FTSSequence.Iterator.__deallocating_deinit()
{
  char v1 = *(_BYTE *)(v0 + 40);
  if (!v1)
  {
    fts_close(*(FTS **)(v0 + 16));
    char v1 = *(_BYTE *)(v0 + 40);
  }

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  *(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0LL;
  *(void *)(v0 + 32) = 0LL;
  *(_BYTE *)(v0 + 40) = 2;
  outlined consume of _FTSSequence.Iterator.State(v2, v3, v4, v1);
  outlined consume of _FTSSequence.Iterator.State( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _FTSSequence.Iterator()
{
  return objc_opt_self();
}

BOOL _FTSSequence.Iterator._shouldFilter(_:)(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(const char **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 72);
  int v4 = *(_DWORD *)(a1 + 80);
  int v5 = *(unsigned __int16 *)(a1 + 88);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v7 = v6;
  swift_release();
  if ((v7 & 1) != 0) {
LABEL_44:
  }
    __break(1u);
  static String._fromUTF8Repairing(_:)();
  if (!*(_DWORD *)(v1 + 56))
  {
    v8._uint64_t countAndFlagsBits = 24366LL;
    v8._unint64_t object = (void *)0xE200000000000000LL;
    if (String.hasPrefix(_:)(v8)) {
      goto LABEL_35;
    }
  }

  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    int v11 = *(_DWORD *)(v9 + 4 * v10 + 28);
    if (v5 != 1)
    {
      int v4 = v11;
      if (v5 != 6) {
        goto LABEL_30;
      }
LABEL_11:
      stat v12 = *(char **)(v1 + 72);
      uint64_t v13 = *((void *)v12 + 2);
      if (!v13 || *(void *)&v12[8 * v13 + 24] != v3)
      {
LABEL_30:
        if (v4 == *(_DWORD *)(v1 + 56)) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        uint64_t v14 = *((void *)v12 + 2);
        if (v14) {
          goto LABEL_15;
        }
      }

      else
      {
        stat v12 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        uint64_t v14 = *((void *)v12 + 2);
        if (v14)
        {
LABEL_15:
          *((void *)v12 + 2) = v14 - 1;
          *(void *)(v1 + 72) = v12;
          stat v12 = *(char **)(v1 + 64);
          if (*((void *)v12 + 2))
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              uint64_t v15 = *((void *)v12 + 2);
              if (v15)
              {
LABEL_18:
                *((void *)v12 + 2) = v15 - 1;
LABEL_29:
                *(void *)(v1 + 64) = v12;
                goto LABEL_30;
              }

              goto LABEL_43;
            }

uint64_t protocol witness for IteratorProtocol.next() in conformance _FTSSequence.Iterator@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = _FTSSequence.Iterator.next()();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _FTSSequence@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(const char **)v1;
  int v4 = *(_DWORD *)(v1 + 8);
  type metadata accessor for _FTSSequence.Iterator();
  uint64_t v5 = swift_allocObject();
  uint64_t result = _FTSSequence.Iterator.init(_:_:)(v3, v4);
  *a1 = v5;
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance _FTSSequence()
{
  return specialized _copySequenceToContiguousArray<A>(_:)(*(const char **)v0, *(_DWORD *)(v0 + 8));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _FTSSequence( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(const char **)v3, *(_DWORD *)(v3 + 8));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _FTSSequence@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation12_FTSSequenceVACOqd__Isgyrzo_AjBsAG_pAJRszr__lIetMgyrzo_Tp5( a1,  a2);
}

void _POSIXDirectoryContentsSequence.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v25 = *MEMORY[0x1895F89C0];
  int v4 = *(DIR **)(v1 + 16);
  if (!v4)
  {
    uint64_t v7 = 0LL;
    Swift::String v8 = 0LL;
    uint64_t v9 = 0LL;
    __darwin_ino64_t st_ino = 0LL;
    __uint8_t d_type = 0;
    goto LABEL_21;
  }

  uint64_t v5 = readdir(v4);
  if (!v5)
  {
LABEL_20:
    closedir(v4);
    uint64_t v7 = 0LL;
    Swift::String v8 = 0LL;
    uint64_t v9 = 0LL;
    __darwin_ino64_t st_ino = 0LL;
    __uint8_t d_type = 0;
    *(void *)(v2 + 16) = 0LL;
    goto LABEL_21;
  }

  char v6 = v5;
  while (1)
  {
    if (!v6->d_namlen || !v6->d_ino) {
      goto LABEL_7;
    }
    uint64_t v7 = String.init(cString:)();
    Swift::String v8 = v12;
    if ((v7 != 46 || v12 != (void *)0xE100000000000000LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v7 != 11822 || v8 != (void *)0xE200000000000000LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v7 != 24366 || v8 != (void *)0xE200000000000000LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      break;
    }

    swift_bridgeObjectRelease();
LABEL_7:
    char v6 = readdir(v4);
    if (!v6) {
      goto LABEL_20;
    }
  }

  if (*(_BYTE *)(v2 + 56) != 1) {
    goto LABEL_28;
  }
  if (v6->d_type == 4) {
    goto LABEL_27;
  }
  if (v6->d_type) {
    goto LABEL_28;
  }
  memset(&v24, 0, 28);
  memset(&v24.st_atimespec, 0, 112);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 47LL;
  v13._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v7;
  v14._unint64_t object = v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v16 = stat((const char *)(v15 + 32), &v24);
  swift_release();
  if (v16) {
    goto LABEL_28;
  }
  int st_mode = v24.st_mode;
  int v18 = S_IFMT.getter() & st_mode;
  if (v18 == (unsigned __int16)S_IFDIR.getter())
  {
LABEL_27:
    __darwin_ino64_t v19 = *(void *)(v2 + 48);
    *(void *)&v24.st_dev = *(void *)(v2 + 40);
    v24.__darwin_ino64_t st_ino = v19;
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = v7;
    v20._unint64_t object = v8;
    String.append(_:)(v20);
    swift_bridgeObjectRetain();
    v21._uint64_t countAndFlagsBits = 47LL;
    v21._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
  }

  else
  {
LABEL_28:
    __darwin_ino64_t v22 = *(void *)(v2 + 48);
    *(void *)&v24.st_dev = *(void *)(v2 + 40);
    v24.__darwin_ino64_t st_ino = v22;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v7;
    v23._unint64_t object = v8;
    String.append(_:)(v23);
  }

  uint64_t v9 = *(void *)&v24.st_dev;
  __darwin_ino64_t st_ino = v24.st_ino;
  __uint8_t d_type = v6->d_type;
LABEL_21:
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = st_ino;
  *(_BYTE *)(a1 + 32) = d_type;
}

uint64_t _POSIXDirectoryContentsSequence.Iterator.init(path:appendSlashForDirectory:prefix:)( uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v60 = *MEMORY[0x1895F89C0];
  *(void *)(v5 + 16) = 0LL;
  *(void *)(v5 + 64) = 0LL;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v11 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_54;
  }

  if (v11 < -1)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  uint64_t v12 = v11 + 1;
  if (v11 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    Swift::String v14 = (char *)v56 - v13;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v12, 1, a1, a2);
    char v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0 || (uint64_t v17 = opendir(v14)) == 0LL)
    {
LABEL_35:
      uint64_t v36 = swift_bridgeObjectRelease();
      *(void *)(v5 + 24) = 0LL;
      *(void *)(v5 + 32) = 0xE000000000000000LL;
      *(void *)(v5 + 40) = 0LL;
      *(void *)(v5 + 48) = 0xE000000000000000LL;
      *(_BYTE *)(v5 + 56) = 0;
      int v37 = MEMORY[0x186E1B0E8](v36);
      int v38 = v37;
      uint64_t v39 = 263LL;
      switch(v37)
      {
        case 1:
        case 13:
          uint64_t v39 = 257LL;
          goto LABEL_45;
        case 2:
          uint64_t v39 = 260LL;
          goto LABEL_45;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_40;
        case 27:
          goto LABEL_45;
        default:
          if (v37 == 63)
          {
            uint64_t v39 = 258LL;
          }

          else
          {
            if (v37 == 102)
            {
              id v40 = 0LL;
              uint64_t v39 = 256LL;
LABEL_50:
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v39,  a1,  a2,  v40,  0x7265646C6F46LL,  0xE600000000000000LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v58,  0LL,  0LL);
              __int128 v53 = *(void **)(v5 + 64);
              *(void *)(v5 + 64) = v58;

              return v5;
            }

uint64_t _POSIXDirectoryContentsSequence.Iterator.__deallocating_deinit()
{
  uint64_t v1 = *(DIR **)(v0 + 16);
  if (v1) {
    closedir(v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _POSIXDirectoryContentsSequence.Iterator()
{
  return objc_opt_self();
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for _FTSSequence(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _FTSSequence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 12) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 12) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _FTSSequence()
{
  return &type metadata for _FTSSequence;
}

uint64_t outlined copy of _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for _FTSSequence.Iterator.State(uint64_t a1)
{
  return outlined consume of _FTSSequence.Iterator.State( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(_BYTE *)(a1 + 24));
}

uint64_t outlined consume of _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _FTSSequence.Iterator.State(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _FTSSequence.Iterator.State(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _FTSSequence.Iterator.State(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _FTSSequence.Iterator.State(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _FTSSequence.Iterator.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _FTSSequence.Iterator.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for _FTSSequence.Iterator.State(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for _FTSSequence.Iterator.State(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    LOBYTE(a2) = 2;
    *(void *)uint64_t result = v2;
  }

  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _FTSSequence.Iterator.State()
{
  return &type metadata for _FTSSequence.Iterator.State;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _FTSSequence()
{
  return lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator( &lazy protocol witness table cache variable for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator,  type metadata accessor for _FTSSequence.Iterator,  (uint64_t)&protocol conformance descriptor for _FTSSequence.Iterator);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _POSIXDirectoryContentsSequence.Iterator@<X0>( uint64_t a1@<X8>)
{
  return outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?((uint64_t)v3, a1);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _POSIXDirectoryContentsSequence@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  unint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(_BYTE *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  uint64_t v7 = swift_allocObject();
  uint64_t result = _POSIXDirectoryContentsSequence.Iterator.init(path:appendSlashForDirectory:prefix:)(v3, v4, v5, v6);
  *a1 = v7;
  return result;
}

char *protocol witness for Sequence._copyToContiguousArray() in conformance _POSIXDirectoryContentsSequence()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)( *(void *)v0,  *(void *)(v0 + 8),  *(_BYTE *)(v0 + 16),  *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _POSIXDirectoryContentsSequence( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)( a1,  a2,  a3,  *(void *)v3,  *(void *)(v3 + 8),  *(_BYTE *)(v3 + 16),  *(timespec **)(v3 + 24));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _POSIXDirectoryContentsSequence@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K4RunsVABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t initializeWithCopy for _POSIXDirectoryContentsSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _POSIXDirectoryContentsSequence(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _POSIXDirectoryContentsSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _POSIXDirectoryContentsSequence()
{
  return &type metadata for _POSIXDirectoryContentsSequence;
}

uint64_t initializeWithCopy for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _POSIXDirectoryContentsSequence.Iterator.Element( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _POSIXDirectoryContentsSequence.Iterator.Element()
{
  return &type metadata for _POSIXDirectoryContentsSequence.Iterator.Element;
}

uint64_t outlined copy of _FTSSequence.Element(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for _FTSSequence.Element(uint64_t a1)
{
  return outlined consume of _FTSSequence.Element( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for _FTSSequence.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _FTSSequence.Element(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _FTSSequence.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _FTSSequence.Element(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(_BYTE *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _FTSSequence.Element(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _FTSSequence.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _FTSSequence.Element(v5, v7, v6, v8);
  return a1;
}

ValueMetadata *type metadata accessor for _FTSSequence.Element()
{
  return &type metadata for _FTSSequence.Element;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _POSIXDirectoryContentsSequence()
{
  return lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator( &lazy protocol witness table cache variable for type _POSIXDirectoryContentsSequence.Iterator and conformance _POSIXDirectoryContentsSequence.Iterator,  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator,  (uint64_t)&protocol conformance descriptor for _POSIXDirectoryContentsSequence.Iterator);
}

uint64_t lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2();
    uint64_t result = MEMORY[0x186E20D4C](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for _FTSSequence.Element.SwiftFTSENT(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _FTSSequence.Element.SwiftFTSENT( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _FTSSequence.Element.SwiftFTSENT()
{
  return &type metadata for _FTSSequence.Element.SwiftFTSENT;
}

void static CocoaError.formatting.getter(void *a1@<X8>)
{
  *a1 = 2048LL;
}

id specialized _BridgedStoredNSError.code.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(a1, sel_code);
  *a2 = result;
  return result;
}

void static CocoaError.propertyListReadCorrupt.getter(void *a1@<X8>)
{
  *a1 = 3840LL;
}

void static CocoaError.coderReadCorrupt.getter(void *a1@<X8>)
{
  *a1 = 4864LL;
}

void static CocoaError.fileNoSuchFile.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

void static CocoaError.fileLocking.getter(void *a1@<X8>)
{
  *a1 = 255LL;
}

void static CocoaError.fileReadUnknown.getter(void *a1@<X8>)
{
  *a1 = 256LL;
}

void static CocoaError.fileReadNoPermission.getter(void *a1@<X8>)
{
  *a1 = 257LL;
}

void static CocoaError.fileReadInvalidFileName.getter(void *a1@<X8>)
{
  *a1 = 258LL;
}

void static CocoaError.fileReadCorruptFile.getter(void *a1@<X8>)
{
  *a1 = 259LL;
}

void static CocoaError.fileReadNoSuchFile.getter(void *a1@<X8>)
{
  *a1 = 260LL;
}

void static CocoaError.fileReadInapplicableStringEncoding.getter(void *a1@<X8>)
{
  *a1 = 261LL;
}

void static CocoaError.fileReadUnsupportedScheme.getter(void *a1@<X8>)
{
  *a1 = 262LL;
}

void static CocoaError.fileReadTooLarge.getter(void *a1@<X8>)
{
  *a1 = 263LL;
}

void static CocoaError.fileReadUnknownStringEncoding.getter(void *a1@<X8>)
{
  *a1 = 264LL;
}

void static CocoaError.fileWriteUnknown.getter(void *a1@<X8>)
{
  *a1 = 512LL;
}

void static CocoaError.fileWriteNoPermission.getter(void *a1@<X8>)
{
  *a1 = 513LL;
}

void static CocoaError.fileWriteInvalidFileName.getter(void *a1@<X8>)
{
  *a1 = 514LL;
}

void static CocoaError.fileWriteFileExists.getter(void *a1@<X8>)
{
  *a1 = 516LL;
}

void static CocoaError.fileWriteInapplicableStringEncoding.getter(void *a1@<X8>)
{
  *a1 = 517LL;
}

void static CocoaError.fileWriteUnsupportedScheme.getter(void *a1@<X8>)
{
  *a1 = 518LL;
}

void static CocoaError.fileWriteOutOfSpace.getter(void *a1@<X8>)
{
  *a1 = 640LL;
}

void static CocoaError.fileWriteVolumeReadOnly.getter(void *a1@<X8>)
{
  *a1 = 642LL;
}

void static CocoaError.fileManagerUnmountUnknown.getter(void *a1@<X8>)
{
  *a1 = 768LL;
}

void static CocoaError.fileManagerUnmountBusy.getter(void *a1@<X8>)
{
  *a1 = 769LL;
}

void static CocoaError.keyValueValidation.getter(void *a1@<X8>)
{
  *a1 = 1024LL;
}

void static CocoaError.userCancelled.getter(void *a1@<X8>)
{
  *a1 = 3072LL;
}

void static CocoaError.featureUnsupported.getter(void *a1@<X8>)
{
  *a1 = 3328LL;
}

void static CocoaError.executableNotLoadable.getter(void *a1@<X8>)
{
  *a1 = 3584LL;
}

void static CocoaError.executableArchitectureMismatch.getter(void *a1@<X8>)
{
  *a1 = 3585LL;
}

void static CocoaError.executableRuntimeMismatch.getter(void *a1@<X8>)
{
  *a1 = 3586LL;
}

void static CocoaError.executableLoad.getter(void *a1@<X8>)
{
  *a1 = 3587LL;
}

void static CocoaError.executableLink.getter(void *a1@<X8>)
{
  *a1 = 3588LL;
}

void static CocoaError.propertyListReadUnknownVersion.getter(void *a1@<X8>)
{
  *a1 = 3841LL;
}

void static CocoaError.propertyListReadStream.getter(void *a1@<X8>)
{
  *a1 = 3842LL;
}

void static CocoaError.propertyListWriteStream.getter(void *a1@<X8>)
{
  *a1 = 3851LL;
}

void static CocoaError.propertyListWriteInvalid.getter(void *a1@<X8>)
{
  *a1 = 3852LL;
}

void static CocoaError.xpcConnectionInterrupted.getter(void *a1@<X8>)
{
  *a1 = 4097LL;
}

void static CocoaError.xpcConnectionInvalid.getter(void *a1@<X8>)
{
  *a1 = 4099LL;
}

void static CocoaError.xpcConnectionReplyInvalid.getter(void *a1@<X8>)
{
  *a1 = 4101LL;
}

void static CocoaError.ubiquitousFileUnavailable.getter(void *a1@<X8>)
{
  *a1 = 4353LL;
}

void static CocoaError.ubiquitousFileNotUploadedDueToQuota.getter(void *a1@<X8>)
{
  *a1 = 4354LL;
}

void static CocoaError.ubiquitousFileUbiquityServerNotAvailable.getter(void *a1@<X8>)
{
  *a1 = 4355LL;
}

void static CocoaError.userActivityHandoffFailed.getter(void *a1@<X8>)
{
  *a1 = 4608LL;
}

void static CocoaError.userActivityConnectionUnavailable.getter(void *a1@<X8>)
{
  *a1 = 4609LL;
}

void static CocoaError.userActivityRemoteApplicationTimedOut.getter(void *a1@<X8>)
{
  *a1 = 4610LL;
}

void static CocoaError.userActivityHandoffUserInfoTooLarge.getter(void *a1@<X8>)
{
  *a1 = 4611LL;
}

void static CocoaError.coderValueNotFound.getter(void *a1@<X8>)
{
  *a1 = 4865LL;
}

void static CocoaError.coderInvalidValue.getter(void *a1@<X8>)
{
  *a1 = 4866LL;
}

BOOL CocoaError.isCoderError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4864 && (uint64_t)objc_msgSend(v1, sel_code) < 4992;
}

BOOL CocoaError.isExecutableError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 3584 && (uint64_t)objc_msgSend(v1, sel_code) < 3840;
}

BOOL CocoaError.isFileError.getter()
{
  id v1 = *v0;
  return ((unint64_t)objc_msgSend(*v0, sel_code) & 0x8000000000000000) == 0
      && (uint64_t)objc_msgSend(v1, sel_code) < 1024;
}

BOOL CocoaError.isFormattingError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 2048 && (uint64_t)objc_msgSend(v1, sel_code) < 2560;
}

BOOL CocoaError.isPropertyListError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 3840 && (uint64_t)objc_msgSend(v1, sel_code) < 4096;
}

BOOL CocoaError.isValidationError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 1024 && (uint64_t)objc_msgSend(v1, sel_code) < 2048;
}

BOOL CocoaError.isUbiquitousFileError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4352 && (uint64_t)objc_msgSend(v1, sel_code) < 4608;
}

BOOL CocoaError.isUserActivityError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4608 && (uint64_t)objc_msgSend(v1, sel_code) < 4864;
}

BOOL CocoaError.isXPCConnectionError.getter()
{
  id v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4096 && (uint64_t)objc_msgSend(v1, sel_code) < 4225;
}

uint64_t specialized abs<A>(_:)(uint64_t result)
{
  if (result < 0)
  {
    BOOL v1 = __OFSUB__(0LL, result);
    id result = -result;
    if (v1) {
      __break(1u);
    }
  }

  return result;
}

uint64_t one-time initialization function for log()
{
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Calendar.log = result;
  return result;
}

{
  uint64_t result;
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static _LocaleICU.log = result;
  return result;
}

uint64_t Calendar.validRange(for:)(unsigned __int8 *a1)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  LODWORD(outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, v2) = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  if ((_DWORD)v2 != 12)
  {
    if ((_DWORD)v2 == 8) {
      return 1LL;
    }
    if ((_DWORD)v2 != 1)
    {
LABEL_44:
      uint64_t ObjectType = swift_getObjectType();
      BYTE6(v38) = v2;
      uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))((char *)&v38 + 6, ObjectType, v3);
      uint64_t v29 = v28;
      statfs v31 = v30;
      if ((v30 & 1) != 0) {
        char v32 = 0LL;
      }
      else {
        char v32 = v27;
      }
      BYTE5(v38) = v2;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))((char *)&v38 + 5, ObjectType, v3);
      if ((v34 & 1) == 0)
      {
        unint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v31 & 1) == 0) {
          unint64_t v35 = v29;
        }
        if (v32 < result) {
          uint64_t result = v32;
        }
        if (v35 <= v33) {
          unint64_t v35 = v33;
        }
        if (v35 < result) {
          goto LABEL_66;
        }
        if (result != v35)
        {
LABEL_58:
          if (!__OFSUB__(v35, 1LL)) {
            return result;
          }
          goto LABEL_67;
        }

        __break(1u);
      }

      uint64_t result = v32 & (v32 >> 63);
      unint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_58;
    }
  }

  uint64_t v4 = swift_getObjectType();
  uint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v5((uint64_t *)((char *)&v38 + 2), v4, v3);
  swift_unknownObjectRelease();
  if (BYTE2(v38) != 6)
  {
    swift_unknownObjectRetain();
    v5((uint64_t *)((char *)&v38 + 1), v4, v3);
    swift_unknownObjectRelease();
    if (BYTE1(v38) != 8)
    {
      swift_unknownObjectRetain();
      v5(&v38, v4, v3);
      swift_unknownObjectRelease();
      if (v38 != 12)
      {
        if ((_DWORD)v2 != 12) {
          goto LABEL_44;
        }
        uint64_t v17 = swift_getObjectType();
        BYTE4(v38) = 1;
        int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))((char *)&v38 + 4, v17, v3);
        char v20 = v19;
        __darwin_ino64_t v22 = v21;
        if ((v21 & 1) != 0) {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = v18;
        }
        BYTE3(v38) = 1;
        uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))((char *)&v38 + 3, v17, v3);
        if ((v24 & 1) != 0)
        {
          uint64_t result = v2 & (v2 >> 63);
          unint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
        }

        else
        {
          unint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
          if ((v22 & 1) == 0) {
            unint64_t v25 = v20;
          }
          if (v2 < result) {
            uint64_t result = v2;
          }
          if (v25 <= v23) {
            unint64_t v25 = v23;
          }
          if (v25 < result) {
            goto LABEL_68;
          }
          if (result == v25)
          {
            __break(1u);
            goto LABEL_44;
          }
        }

        if (!__OFSUB__(v25, 1LL)) {
          return result;
        }
        __break(1u);
        goto LABEL_64;
      }
    }
  }

  int v37 = v2;
  uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))(&v37, v4, v3);
  char v8 = v7;
  char v10 = v9;
  if ((v9 & 1) != 0) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = v6;
  }
  uint64_t v36 = v2;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))(&v36, v4, v3);
  if ((v14 & 1) != 0)
  {
    char v16 = v11 & (v11 >> 63);
    char v15 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_24;
  }

  if ((v10 & 1) != 0) {
    char v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    char v15 = v8;
  }
  if (v11 >= result) {
    char v16 = result;
  }
  else {
    char v16 = v11;
  }
  if (v15 <= v13) {
    char v15 = v13;
  }
  if (v15 < v16)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }

  if (v16 == v15)
  {
    __break(1u);
    return 1LL;
  }

BOOL DateComponents._validate(for:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *(_BYTE *)(v1 + 40);
  uint64_t v74 = *(void *)(v1 + 48);
  char v5 = *(_BYTE *)(v1 + 56);
  uint64_t v68 = *(void *)(v1 + 64);
  char v73 = *(_BYTE *)(v1 + 72);
  uint64_t v66 = *(void *)(v1 + 80);
  char v71 = *(_BYTE *)(v1 + 88);
  uint64_t v72 = *(void *)(v1 + 96);
  char v6 = *(_BYTE *)(v1 + 104);
  uint64_t v64 = *(void *)(v1 + 112);
  char v69 = *(_BYTE *)(v1 + 120);
  uint64_t v62 = *(void *)(v1 + 128);
  char v67 = *(_BYTE *)(v1 + 136);
  uint64_t v60 = *(void *)(v1 + 144);
  char v65 = *(_BYTE *)(v1 + 152);
  uint64_t v7 = *(void *)(v1 + 160);
  char v8 = *(_BYTE *)(v1 + 168);
  uint64_t v58 = *(void *)(v1 + 176);
  char v63 = *(_BYTE *)(v1 + 184);
  uint64_t v56 = *(void *)(v1 + 192);
  char v61 = *(_BYTE *)(v1 + 200);
  uint64_t v70 = *(void *)(v1 + 208);
  char v75 = *(_BYTE *)(v1 + 216);
  char v59 = *(_BYTE *)(v1 + 248);
  uint64_t v54 = *(void *)(v1 + 256);
  uint64_t v55 = *(void *)(v1 + 240);
  char v57 = *(_BYTE *)(v1 + 264);
  char v9 = *(_BYTE *)(v1 + 280);
  uint64_t v10 = *(void *)(v1 + 272);
  int v11 = *(unsigned __int8 *)(v1 + 281);
  if ((v4 & 1) != 0) {
    goto LABEL_4;
  }
  char v52 = *(_BYTE *)(v1 + 104);
  char v53 = *(_BYTE *)(v1 + 280);
  uint64_t v12 = *(void *)(v1 + 272);
  int v13 = *(unsigned __int8 *)(v1 + 281);
  char v14 = *(_BYTE *)(v1 + 168);
  uint64_t v15 = *(void *)(v1 + 160);
  uint64_t v16 = *(void *)(v1 + 32);
  uint64_t v77 = *a1;
  uint64_t v78 = v3;
  unsigned __int8 v76 = 0;
  uint64_t v18 = Calendar.validRange(for:)(&v76);
  BOOL result = 0LL;
  if (v16 >= v18)
  {
    BOOL v20 = v17 < v16;
    uint64_t v7 = v15;
    char v8 = v14;
    int v11 = v13;
    uint64_t v10 = v12;
    char v6 = v52;
    char v9 = v53;
    if (!v20)
    {
LABEL_4:
      if ((v5 & 1) != 0)
      {
        char v21 = v4 ^ 1;
      }

      else
      {
        char v22 = v6;
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        char v21 = 1;
        unsigned __int8 v76 = 1;
        uint64_t v24 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v74 < v24) {
          return result;
        }
        char v6 = v22;
        if (v23 < v74) {
          return result;
        }
      }

      if ((v6 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 17;
        uint64_t v26 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v72 < v26 || v25 < v72) {
          return result;
        }
        char v21 = 1;
      }

      if ((v75 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 9;
        uint64_t v28 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v70 < v28 || v27 < v70) {
          return result;
        }
        char v21 = 1;
      }

      if ((v73 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 2;
        uint64_t v30 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v68 < v30 || v29 < v68) {
          return result;
        }
        char v21 = 1;
      }

      if ((v71 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 3;
        uint64_t v32 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v66 < v32 || v31 < v66) {
          return result;
        }
        char v21 = 1;
      }

      if ((v69 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 4;
        uint64_t v34 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v64 < v34 || v33 < v64) {
          return result;
        }
        char v21 = 1;
      }

      if ((v67 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 5;
        uint64_t v36 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v62 < v36 || v35 < v62) {
          return result;
        }
        char v21 = 1;
      }

      if ((v65 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 6;
        uint64_t v38 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v60 < v38 || v37 < v60) {
          return result;
        }
        char v21 = 1;
      }

      if ((v63 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 7;
        uint64_t v40 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v58 < v40 || v39 < v58) {
          return result;
        }
        char v21 = 1;
      }

      if ((v61 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 8;
        uint64_t v42 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v56 < v42 || v41 < v56) {
          return result;
        }
        char v21 = 1;
      }

      if ((v59 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 10;
        uint64_t v44 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v55 < v44 || v43 < v55) {
          return result;
        }
        char v21 = 1;
      }

      if ((v57 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 11;
        uint64_t v46 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v54 < v46 || v45 < v54) {
          return result;
        }
        char v21 = 1;
      }

      if ((v9 & 1) == 0)
      {
        uint64_t v77 = v2;
        uint64_t v78 = v3;
        unsigned __int8 v76 = 12;
        uint64_t v48 = Calendar.validRange(for:)(&v76);
        BOOL result = 0LL;
        if (v10 < v48 || v47 < v10) {
          return result;
        }
        char v21 = 1;
      }

      if ((v8 & 1) != 0)
      {
        if (v11 == 2) {
          char v49 = 1;
        }
        else {
          char v49 = v21;
        }
        return (v49 & 1) != 0 || (v11 & 1) == 0;
      }

      uint64_t v77 = v2;
      uint64_t v78 = v3;
      unsigned __int8 v76 = 13;
      uint64_t v51 = Calendar.validRange(for:)(&v76);
      BOOL result = 0LL;
      if (v7 >= v51 && v50 >= v7) {
        return 1LL;
      }
    }
  }

  return result;
}

void DateComponents.highestSetUnit.getter(char *a1@<X8>)
{
  if (v1[40] == 1)
  {
    int v2 = v1[248];
    if (v1[104]) {
      char v3 = 9;
    }
    else {
      char v3 = 17;
    }
    if (!v1[56]) {
      char v3 = 1;
    }
    unsigned __int8 v4 = v1[56] & v1[104] & v1[216] & v1[72] & v1[88];
    if (v1[72]) {
      char v5 = 3;
    }
    else {
      char v5 = 2;
    }
    else {
      char v6 = v3;
    }
    unsigned __int8 v7 = v4 & v1[120] & v1[136];
    if (v1[120]) {
      char v8 = 5;
    }
    else {
      char v8 = 4;
    }
    if (v1[152]) {
      char v9 = 7;
    }
    else {
      char v9 = 6;
    }
    int v10 = (v7 & v1[152] & v1[184] & v1[200]);
    if (v1[200]) {
      char v11 = 10;
    }
    else {
      char v11 = 8;
    }
    int v12 = v10 & v2;
    if ((v10 & v2) != 0) {
      char v13 = 11;
    }
    else {
      char v13 = v6;
    }
    if (v12) {
      BOOL v14 = v1[264] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      if (v1[168]) {
        char v13 = 18;
      }
      else {
        char v13 = 13;
      }
      if (!v1[280]) {
        char v13 = 12;
      }
    }

    *a1 = v13;
  }

  else
  {
    *a1 = 0;
  }

void DateComponents.lowestSetUnit.getter(char *a1@<X8>)
{
  if (v1[168] == 1)
  {
    if (v1[264]) {
      char v2 = 10;
    }
    else {
      char v2 = 11;
    }
    if (v1[280]) {
      char v3 = v2;
    }
    else {
      char v3 = 12;
    }
    if (v1[200]) {
      char v4 = 7;
    }
    else {
      char v4 = 8;
    }
    if (v1[152]) {
      char v5 = 5;
    }
    else {
      char v5 = 6;
    }
    if (v1[120]) {
      char v6 = 3;
    }
    else {
      char v6 = 4;
    }
    if (v1[72]) {
      char v7 = 9;
    }
    else {
      char v7 = 2;
    }
    if (((v1[280] & v1[264] & v1[248] & v1[200] & v1[184] & v1[152] & v1[136] & v1[120] & v1[88] & v1[72]) & v1[216]) != 0)
    {
      char v3 = 17;
      BOOL v8 = v1[104] == 0;
    }

    else
    {
      BOOL v8 = 1;
    }

    if (!v8)
    {
      if (v1[40]) {
        char v3 = 18;
      }
      else {
        char v3 = 0;
      }
      if (!v1[56]) {
        char v3 = 1;
      }
    }

    *a1 = v3;
  }

  else
  {
    *a1 = 13;
  }

uint64_t DateComponents.setUnits.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = v1[168];
  if (v1[56]) {
    uint64_t v3 = (v1[40] & 1) == 0;
  }
  else {
    uint64_t v3 = ((v1[40] & 1) == 0) | 2LL;
  }
  if (!v1[216]) {
    v3 |= 0x200uLL;
  }
  if (!v1[72]) {
    v3 |= 4uLL;
  }
  if (!v1[88]) {
    v3 |= 8uLL;
  }
  if (!v1[120]) {
    v3 |= 0x10uLL;
  }
  if (!v1[136]) {
    v3 |= 0x20uLL;
  }
  if (!v1[152]) {
    v3 |= 0x40uLL;
  }
  if (!v1[184]) {
    v3 |= 0x80uLL;
  }
  if (!v1[200]) {
    v3 |= 0x100uLL;
  }
  if (!v1[248]) {
    v3 |= 0x400uLL;
  }
  if (!v1[264]) {
    v3 |= 0x800uLL;
  }
  if (v1[280]) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v3 | 0x1000;
  }
  if (!v1[104]) {
    v4 |= 0x40000uLL;
  }
  if (!v1[168]) {
    v4 |= 0x2000uLL;
  }
  *a1 = v4;
  return result;
}

uint64_t DateComponents.mismatchedUnits(comparedTo:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *(_BYTE *)(result + 40);
  if ((*(_BYTE *)(v2 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 40) & 1) == 0)
    {
LABEL_3:
      uint64_t v4 = 1LL;
      goto LABEL_8;
    }
  }

  else
  {
    if (*(void *)(v2 + 32) != *(void *)(result + 32)) {
      char v3 = 1;
    }
    if ((v3 & 1) != 0) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = 0LL;
LABEL_8:
  if ((*(_BYTE *)(v2 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 56) & 1) != 0) {
      goto LABEL_16;
    }
LABEL_15:
    v4 |= 2uLL;
    goto LABEL_16;
  }

  if (*(void *)(v2 + 48) == *(void *)(result + 48)) {
    char v5 = *(_BYTE *)(result + 56);
  }
  else {
    char v5 = 1;
  }
  if ((v5 & 1) != 0) {
    goto LABEL_15;
  }
LABEL_16:
  if ((*(_BYTE *)(v2 + 216) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 216) & 1) != 0) {
      goto LABEL_24;
    }
LABEL_23:
    v4 |= 0x200uLL;
    goto LABEL_24;
  }

  if (*(void *)(v2 + 208) == *(void *)(result + 208)) {
    char v6 = *(_BYTE *)(result + 216);
  }
  else {
    char v6 = 1;
  }
  if ((v6 & 1) != 0) {
    goto LABEL_23;
  }
LABEL_24:
  if ((*(_BYTE *)(v2 + 72) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 72) & 1) != 0) {
      goto LABEL_32;
    }
LABEL_31:
    v4 |= 4uLL;
    goto LABEL_32;
  }

  if (*(void *)(v2 + 64) == *(void *)(result + 64)) {
    char v7 = *(_BYTE *)(result + 72);
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) != 0) {
    goto LABEL_31;
  }
LABEL_32:
  if ((*(_BYTE *)(v2 + 88) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 88) & 1) != 0) {
      goto LABEL_40;
    }
LABEL_39:
    v4 |= 8uLL;
    goto LABEL_40;
  }

  if (*(void *)(v2 + 80) == *(void *)(result + 80)) {
    char v8 = *(_BYTE *)(result + 88);
  }
  else {
    char v8 = 1;
  }
  if ((v8 & 1) != 0) {
    goto LABEL_39;
  }
LABEL_40:
  if ((*(_BYTE *)(v2 + 120) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 120) & 1) != 0) {
      goto LABEL_48;
    }
LABEL_47:
    v4 |= 0x10uLL;
    goto LABEL_48;
  }

  if (*(void *)(v2 + 112) == *(void *)(result + 112)) {
    char v9 = *(_BYTE *)(result + 120);
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) != 0) {
    goto LABEL_47;
  }
LABEL_48:
  if ((*(_BYTE *)(v2 + 136) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 136) & 1) != 0) {
      goto LABEL_56;
    }
LABEL_55:
    v4 |= 0x20uLL;
    goto LABEL_56;
  }

  if (*(void *)(v2 + 128) == *(void *)(result + 128)) {
    char v10 = *(_BYTE *)(result + 136);
  }
  else {
    char v10 = 1;
  }
  if ((v10 & 1) != 0) {
    goto LABEL_55;
  }
LABEL_56:
  if ((*(_BYTE *)(v2 + 152) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 152) & 1) != 0) {
      goto LABEL_64;
    }
LABEL_63:
    v4 |= 0x40uLL;
    goto LABEL_64;
  }

  if (*(void *)(v2 + 144) == *(void *)(result + 144)) {
    char v11 = *(_BYTE *)(result + 152);
  }
  else {
    char v11 = 1;
  }
  if ((v11 & 1) != 0) {
    goto LABEL_63;
  }
LABEL_64:
  if ((*(_BYTE *)(v2 + 184) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 184) & 1) != 0) {
      goto LABEL_72;
    }
LABEL_71:
    v4 |= 0x80uLL;
    goto LABEL_72;
  }

  if (*(void *)(v2 + 176) == *(void *)(result + 176)) {
    char v12 = *(_BYTE *)(result + 184);
  }
  else {
    char v12 = 1;
  }
  if ((v12 & 1) != 0) {
    goto LABEL_71;
  }
LABEL_72:
  if ((*(_BYTE *)(v2 + 200) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 200) & 1) != 0) {
      goto LABEL_80;
    }
LABEL_79:
    v4 |= 0x100uLL;
    goto LABEL_80;
  }

  if (*(void *)(v2 + 192) == *(void *)(result + 192)) {
    char v13 = *(_BYTE *)(result + 200);
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) != 0) {
    goto LABEL_79;
  }
LABEL_80:
  if ((*(_BYTE *)(v2 + 248) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 248) & 1) != 0) {
      goto LABEL_88;
    }
LABEL_87:
    v4 |= 0x400uLL;
    goto LABEL_88;
  }

  if (*(void *)(v2 + 240) == *(void *)(result + 240)) {
    char v14 = *(_BYTE *)(result + 248);
  }
  else {
    char v14 = 1;
  }
  if ((v14 & 1) != 0) {
    goto LABEL_87;
  }
LABEL_88:
  if ((*(_BYTE *)(v2 + 264) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 264) & 1) != 0) {
      goto LABEL_96;
    }
LABEL_95:
    v4 |= 0x800uLL;
    goto LABEL_96;
  }

  if (*(void *)(v2 + 256) == *(void *)(result + 256)) {
    char v15 = *(_BYTE *)(result + 264);
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) != 0) {
    goto LABEL_95;
  }
LABEL_96:
  if ((*(_BYTE *)(v2 + 280) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 280) & 1) != 0) {
      goto LABEL_104;
    }
LABEL_103:
    v4 |= 0x1000uLL;
    goto LABEL_104;
  }

  if (*(void *)(v2 + 272) == *(void *)(result + 272)) {
    char v16 = *(_BYTE *)(result + 280);
  }
  else {
    char v16 = 1;
  }
  if ((v16 & 1) != 0) {
    goto LABEL_103;
  }
LABEL_104:
  int v17 = *(unsigned __int8 *)(v2 + 281);
  if ((*(_BYTE *)(v2 + 168) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 168) & 1) != 0) {
      goto LABEL_112;
    }
LABEL_111:
    v4 |= 0x2000uLL;
    goto LABEL_112;
  }

  if (*(void *)(v2 + 160) == *(void *)(result + 160)) {
    char v18 = *(_BYTE *)(result + 168);
  }
  else {
    char v18 = 1;
  }
  if ((v18 & 1) != 0) {
    goto LABEL_111;
  }
LABEL_112:
  int v19 = *(unsigned __int8 *)(result + 281);
  if (v17 == 2)
  {
    if (v19 == 2) {
      goto LABEL_117;
    }
  }

  else if (v19 != 2 && ((((v19 & 1) == 0) ^ v17) & 1) != 0)
  {
LABEL_117:
    char v20 = *(_BYTE *)(result + 104);
    if ((*(_BYTE *)(v2 + 104) & 1) != 0) {
      goto LABEL_118;
    }
    goto LABEL_121;
  }

  v4 |= 0x10000uLL;
  char v20 = *(_BYTE *)(result + 104);
  if ((*(_BYTE *)(v2 + 104) & 1) != 0)
  {
LABEL_118:
    if ((v20 & 1) != 0) {
      goto LABEL_125;
    }
    goto LABEL_124;
  }

uint64_t _handleCalendarError(_:date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( uint64_t a1, uint64_t *a2, uint64_t *a3, const void *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  void (*v41)(__int128 *__return_ptr, uint64_t, void *);
  Swift::String v42;
  Swift::String v43;
  void (*v44)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v45;
  id v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(__int128 *__return_ptr, uint64_t, void *);
  Swift::String v53;
  Swift::String v54;
  void (*v55)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v56;
  id v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(__int128 *__return_ptr, uint64_t, void *);
  Swift::String v64;
  Swift::String v65;
  void (*v66)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v67;
  uint64_t v68;
  os_unfair_lock_s *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  void (*v77)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v78;
  Swift::String v79;
  Swift::String v80;
  uint64_t (*v81)(uint64_t, void *);
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  uint64_t (*v85)(uint64_t, void *);
  uint64_t v86;
  Swift::String v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  os_unfair_lock_s *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  Swift::String v108;
  Swift::String v109;
  void (*v110)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v111;
  Swift::String v112;
  Swift::String v113;
  uint64_t (*v114)(uint64_t, void *);
  uint64_t v115;
  Swift::String v116;
  Swift::String v117;
  uint64_t (*v118)(uint64_t, void *);
  uint64_t v119;
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  __int128 v124;
  uint64_t v125;
  void *v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  os_unfair_lock_s *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  Swift::String v141;
  Swift::String v142;
  void (*v143)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v144;
  Swift::String v145;
  Swift::String v146;
  uint64_t (*v147)(uint64_t, void *);
  uint64_t v148;
  Swift::String v149;
  Swift::String v150;
  uint64_t (*v151)(uint64_t, void *);
  uint64_t v152;
  Swift::String v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  __int128 v157;
  uint64_t v158;
  void *v159;
  Swift::String v160;
  Swift::String v161;
  Swift::String v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  os_log_s *v173;
  os_log_s *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  _BYTE v185[32];
  Swift::String v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  unint64_t v191;
  _OWORD v192[18];
  uint64_t v193;
  _BYTE v194[296];
  uint64_t v14 = type metadata accessor for Mirror();
  uint64_t v177 = *(void *)(v14 - 8);
  uint64_t v178 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v174 = (os_log_s *)((char *)&v168 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v173 = (os_log_s *)((char *)&v168 - v18);
  MEMORY[0x1895F8858](v17);
  char v20 = (os_log_s *)((char *)&v168 - v19);
  uint64_t v21 = type metadata accessor for Logger();
  unint64_t v182 = *(void *)(v21 - 8);
  uint64_t v183 = v21;
  uint64_t v22 = MEMORY[0x1895F8858](v21);
  uint64_t v181 = (char *)&v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  unint64_t v180 = (char *)&v168 - v25;
  MEMORY[0x1895F8858](v24);
  uint64_t v27 = (char *)&v168 - v26;
  uint64_t v28 = *(char **)a1;
  uint64_t v175 = *(void *)(a1 + 8);
  uint64_t v176 = v28;
  int v29 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v30 = *a2;
  uint64_t v31 = *a3;
  uint64_t v32 = (void *)a3[1];
  memcpy(v194, a4, 0x11AuLL);
  uint64_t v179 = *a5;
  uint64_t v33 = *a6;
  int v34 = *a7;
  if (v29)
  {
    if (v29 == 1)
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      id v35 = (id)static Calendar.log;
      uint64_t v36 = v180;
      Logger.init(_:)();
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v194);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v194);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter();
      int v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, (os_log_type_t)v38))
      {
        uint64_t v170 = v38;
        uint64_t v174 = v37;
        uint64_t v39 = swift_slowAlloc();
        uint64_t v169 = swift_slowAlloc();
        uint64_t v193 = v169;
        *(_DWORD *)uint64_t v39 = 134350850;
        *(void *)&v192[0] = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 12) = 2050;
        *(void *)&v192[0] = v176;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 22) = 2050;
        *(void *)&v192[0] = v175;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v181 = (char *)v39;
        *(_WORD *)(v39 + 32) = 2082;
        *(void *)&v192[0] = 0LL;
        *((void *)&v192[0] + 1) = 0xE000000000000000LL;
        swift_unknownObjectRetain();
        _StringGuts.grow(_:)(72LL);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v41 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v32[3];
        swift_unknownObjectRetain();
        v41(&v187, ObjectType, v32);
        swift_unknownObjectRelease();
        LOBYTE(v184) = v187;
        _print_unlocked<A, B>(_:_:)();
        v42._uint64_t countAndFlagsBits = 10272LL;
        v42._unint64_t object = (void *)0xE200000000000000LL;
        String.append(_:)(v42);
        *(void *)&uint64_t v187 = v31;
        *((void *)&v187 + 1) = v32;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
        _print_unlocked<A, B>(_:_:)();
        v43._uint64_t countAndFlagsBits = 0x656C61636F6C2029LL;
        v43._unint64_t object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v43);
        uint64_t v44 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v32[4];
        swift_unknownObjectRetain();
        v44(&v187, ObjectType, v32);
        uint64_t v172 = v34;
        uint64_t v171 = v33;
        if ((void)v187)
        {
          uint64_t v45 = *((void *)&v187 + 1);
          swift_unknownObjectRelease();
        }

        else
        {
          if (one-time initialization token for cache != -1) {
            swift_once();
          }
          uint64_t v68 = static LocaleCache.cache + 16;
          char v69 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
          swift_retain_n();
          os_unfair_lock_lock(v69);
          closure #1 in LocaleCache.fixed(_:)(v68, 0LL, 0xE000000000000000LL, &v184);
          os_unfair_lock_unlock(v69);
          swift_unknownObjectRelease();
          swift_release_n();
          uint64_t v45 = *((void *)&v184 + 1);
        }

        uint64_t v70 = v181;
        uint64_t v176 = v181 + 34;
        char v71 = swift_getObjectType();
        uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 64))(v71, v45);
        uint64_t v74 = v73;
        swift_unknownObjectRelease();
        v75._uint64_t countAndFlagsBits = v72;
        v75._unint64_t object = v74;
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        v76._uint64_t countAndFlagsBits = 0x6F7A20656D697420LL;
        v76._unint64_t object = (void *)0xEC000000203A656ELL;
        String.append(_:)(v76);
        uint64_t v77 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v32[6];
        swift_unknownObjectRetain();
        v77(&v187, ObjectType, v32);
        swift_unknownObjectRelease();
        uint64_t v78 = v187;
        swift_getObjectType();
        *(void *)&unint64_t v184 = v78;
        v79._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v79);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v80._uint64_t countAndFlagsBits = 0x6557747372696620LL;
        v80._unint64_t object = (void *)0xEF203A7961646B65LL;
        String.append(_:)(v80);
        char v81 = (uint64_t (*)(uint64_t, void *))v32[7];
        swift_unknownObjectRetain();
        uint64_t v82 = v81(ObjectType, v32);
        swift_unknownObjectRelease();
        *(void *)&uint64_t v187 = v82;
        v83._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v83);
        swift_bridgeObjectRelease();
        v84._unint64_t object = (void *)0x80000001839CCCC0LL;
        v84._uint64_t countAndFlagsBits = 0xD000000000000015LL;
        String.append(_:)(v84);
        char v85 = (uint64_t (*)(uint64_t, void *))v32[9];
        swift_unknownObjectRetain();
        char v86 = v85(ObjectType, v32);
        swift_unknownObjectRelease();
        *(void *)&uint64_t v187 = v86;
        v87._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v87);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( *(uint64_t *)&v192[0],  *((unint64_t *)&v192[0] + 1),  &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *((_WORD *)v70 + 21) = 2082;
        memcpy(v192, v194, 0x11AuLL);
        outlined retain of DateComponents((uint64_t)v194);
        char v88 = (uint64_t)v173;
        DateComponents.customMirror.getter((uint64_t)v173);
        char v89 = Mirror.children.getter();
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v88, v178);
        char v90 = 0xE000000000000000LL;
        unint64_t v190 = 0LL;
        uint64_t v191 = 0xE000000000000000LL;
        swift_retain();
        dispatch thunk of _AnySequenceBox._makeIterator()();
        swift_release();
        dispatch thunk of _AnyIteratorBoxBase.next()();
        if (*((void *)&v192[2] + 1))
        {
          uint64_t v178 = v89;
          do
          {
            uint64_t v187 = v192[0];
            uint64_t v188 = v192[1];
            uint64_t v189 = v192[2];
            v186._uint64_t countAndFlagsBits = 0LL;
            v186._unint64_t object = (void *)0xE000000000000000LL;
            char v91 = (void *)*((void *)&v192[0] + 1);
            uint64_t v92 = *(void *)&v192[0];
            unint64_t v184 = v192[0];
            outlined init with copy of Any((uint64_t)&v188, (uint64_t)v185);
            if (v91)
            {
              uint64_t v93 = v91;
            }

            else
            {
              uint64_t v92 = 0LL;
              uint64_t v93 = (void *)0xE000000000000000LL;
            }

            swift_bridgeObjectRetain();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
            v94._uint64_t countAndFlagsBits = v92;
            v94._unint64_t object = v93;
            String.append(_:)(v94);
            swift_bridgeObjectRelease();
            v95._uint64_t countAndFlagsBits = 8250LL;
            v95._unint64_t object = (void *)0xE200000000000000LL;
            String.append(_:)(v95);
            _print_unlocked<A, B>(_:_:)();
            v96._uint64_t countAndFlagsBits = 32LL;
            v96._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v96);
            String.append(_:)(v186);
            swift_bridgeObjectRelease();
            outlined destroy of (label: String?, value: Any)((uint64_t)&v187);
            dispatch thunk of _AnyIteratorBoxBase.next()();
          }

          while (*((void *)&v192[2] + 1));
          uint64_t v97 = v190;
          char v90 = v191;
        }

        else
        {
          uint64_t v97 = 0LL;
        }

        swift_release();
        swift_release();
        uint64_t v98 = v181;
        outlined release of DateComponents((uint64_t)v194);
        *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v90, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of DateComponents((uint64_t)v194);
        outlined release of DateComponents((uint64_t)v194);
        *((_WORD *)v98 + 26) = 2082;
        if (v179) {
          uint64_t v99 = 0x647261776B636162LL;
        }
        else {
          uint64_t v99 = 0x64726177726F66LL;
        }
        if (v179) {
          uint64_t v100 = 0xE800000000000000LL;
        }
        else {
          uint64_t v100 = 0xE700000000000000LL;
        }
        *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *((_WORD *)v98 + 31) = 2082;
        __asm { BR              X9 }
      }
    }

    else
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      char v57 = (id)static Calendar.log;
      uint64_t v36 = v181;
      Logger.init(_:)();
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v194);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v194);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter();
      uint64_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, (os_log_type_t)v58))
      {
        uint64_t v170 = v58;
        uint64_t v171 = v33;
        uint64_t v173 = v37;
        char v59 = swift_slowAlloc();
        uint64_t v169 = swift_slowAlloc();
        uint64_t v193 = v169;
        *(_DWORD *)char v59 = 134350850;
        *(void *)&v192[0] = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v59 + 12) = 2050;
        *(void *)&v192[0] = v175;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v59 + 22) = 2082;
        LOBYTE(v192[0]) = (_BYTE)v176;
        uint64_t v60 = Calendar.Component.debugDescription.getter();
        *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v180 = (char *)v59;
        *(_WORD *)(v59 + 32) = 2082;
        *(void *)&v192[0] = 0LL;
        *((void *)&v192[0] + 1) = 0xE000000000000000LL;
        swift_unknownObjectRetain();
        _StringGuts.grow(_:)(72LL);
        uint64_t v62 = swift_getObjectType();
        char v63 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v32[3];
        swift_unknownObjectRetain();
        v63(&v187, v62, v32);
        swift_unknownObjectRelease();
        LOBYTE(v184) = v187;
        _print_unlocked<A, B>(_:_:)();
        v64._uint64_t countAndFlagsBits = 10272LL;
        v64._unint64_t object = (void *)0xE200000000000000LL;
        String.append(_:)(v64);
        *(void *)&uint64_t v187 = v31;
        *((void *)&v187 + 1) = v32;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
        _print_unlocked<A, B>(_:_:)();
        v65._uint64_t countAndFlagsBits = 0x656C61636F6C2029LL;
        v65._unint64_t object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v65);
        uint64_t v66 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v32[4];
        swift_unknownObjectRetain();
        v66(&v187, v62, v32);
        uint64_t v172 = v34;
        if ((void)v187)
        {
          char v67 = *((void *)&v187 + 1);
          swift_unknownObjectRelease();
        }

        else
        {
          if (one-time initialization token for cache != -1) {
            swift_once();
          }
          uint64_t v134 = static LocaleCache.cache + 16;
          unint64_t v135 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
          swift_retain_n();
          os_unfair_lock_lock(v135);
          closure #1 in LocaleCache.fixed(_:)(v134, 0LL, 0xE000000000000000LL, &v184);
          os_unfair_lock_unlock(v135);
          swift_unknownObjectRelease();
          swift_release_n();
          char v67 = *((void *)&v184 + 1);
        }

        unint64_t v136 = v180;
        uint64_t v137 = swift_getObjectType();
        uint64_t v138 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 64))(v137, v67);
        unint64_t v140 = v139;
        swift_unknownObjectRelease();
        v141._uint64_t countAndFlagsBits = v138;
        v141._unint64_t object = v140;
        String.append(_:)(v141);
        swift_bridgeObjectRelease();
        v142._uint64_t countAndFlagsBits = 0x6F7A20656D697420LL;
        v142._unint64_t object = (void *)0xEC000000203A656ELL;
        String.append(_:)(v142);
        unint64_t v143 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v32[6];
        swift_unknownObjectRetain();
        v143(&v187, v62, v32);
        swift_unknownObjectRelease();
        int v144 = v187;
        swift_getObjectType();
        *(void *)&unint64_t v184 = v144;
        v145._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v145);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v146._uint64_t countAndFlagsBits = 0x6557747372696620LL;
        v146._unint64_t object = (void *)0xEF203A7961646B65LL;
        String.append(_:)(v146);
        unint64_t v147 = (uint64_t (*)(uint64_t, void *))v32[7];
        swift_unknownObjectRetain();
        unint64_t v148 = v147(v62, v32);
        swift_unknownObjectRelease();
        *(void *)&uint64_t v187 = v148;
        v149._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v149);
        swift_bridgeObjectRelease();
        v150._unint64_t object = (void *)0x80000001839CCCC0LL;
        v150._uint64_t countAndFlagsBits = 0xD000000000000015LL;
        String.append(_:)(v150);
        uint64_t v151 = (uint64_t (*)(uint64_t, void *))v32[9];
        swift_unknownObjectRetain();
        __int128 v152 = v151(v62, v32);
        swift_unknownObjectRelease();
        *(void *)&uint64_t v187 = v152;
        v153._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v153);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( *(uint64_t *)&v192[0],  *((unint64_t *)&v192[0] + 1),  &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *((_WORD *)v136 + 21) = 2082;
        memcpy(v192, v194, 0x11AuLL);
        outlined retain of DateComponents((uint64_t)v194);
        __int128 v154 = (uint64_t)v174;
        DateComponents.customMirror.getter((uint64_t)v174);
        uint64_t v155 = Mirror.children.getter();
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v154, v178);
        uint64_t v156 = 0xE000000000000000LL;
        unint64_t v190 = 0LL;
        uint64_t v191 = 0xE000000000000000LL;
        swift_retain();
        dispatch thunk of _AnySequenceBox._makeIterator()();
        swift_release();
        dispatch thunk of _AnyIteratorBoxBase.next()();
        if (*((void *)&v192[2] + 1))
        {
          uint64_t v178 = v155;
          do
          {
            uint64_t v187 = v192[0];
            uint64_t v188 = v192[1];
            uint64_t v189 = v192[2];
            v186._uint64_t countAndFlagsBits = 0LL;
            v186._unint64_t object = (void *)0xE000000000000000LL;
            uint64_t v157 = v192[0];
            unint64_t v184 = v192[0];
            outlined init with copy of Any((uint64_t)&v188, (uint64_t)v185);
            if (*((void *)&v157 + 1)) {
              uint64_t v158 = v157;
            }
            else {
              uint64_t v158 = 0LL;
            }
            if (*((void *)&v157 + 1)) {
              uint64_t v159 = (void *)*((void *)&v157 + 1);
            }
            else {
              uint64_t v159 = (void *)0xE000000000000000LL;
            }
            swift_bridgeObjectRetain();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
            v160._uint64_t countAndFlagsBits = v158;
            v160._unint64_t object = v159;
            String.append(_:)(v160);
            swift_bridgeObjectRelease();
            v161._uint64_t countAndFlagsBits = 8250LL;
            v161._unint64_t object = (void *)0xE200000000000000LL;
            String.append(_:)(v161);
            _print_unlocked<A, B>(_:_:)();
            v162._uint64_t countAndFlagsBits = 32LL;
            v162._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v162);
            String.append(_:)(v186);
            swift_bridgeObjectRelease();
            outlined destroy of (label: String?, value: Any)((uint64_t)&v187);
            dispatch thunk of _AnyIteratorBoxBase.next()();
          }

          while (*((void *)&v192[2] + 1));
          uint64_t v163 = v190;
          uint64_t v156 = v191;
        }

        else
        {
          uint64_t v163 = 0LL;
        }

        swift_release();
        swift_release();
        unint64_t v164 = v180;
        outlined release of DateComponents((uint64_t)v194);
        *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v163, v156, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of DateComponents((uint64_t)v194);
        outlined release of DateComponents((uint64_t)v194);
        *((_WORD *)v164 + 26) = 2082;
        if (v179) {
          unint64_t v165 = 0x647261776B636162LL;
        }
        else {
          unint64_t v165 = 0x64726177726F66LL;
        }
        if (v179) {
          uint64_t v166 = 0xE800000000000000LL;
        }
        else {
          uint64_t v166 = 0xE700000000000000LL;
        }
        *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v166, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *((_WORD *)v164 + 31) = 2082;
        __asm { BR              X9 }
      }
    }
  }

  else
  {
    uint64_t v174 = v20;
    uint64_t v181 = v27;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v46 = (id)static Calendar.log;
    uint64_t v36 = v181;
    Logger.init(_:)();
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v194);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v194);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter();
    uint64_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, (os_log_type_t)v47))
    {
      uint64_t v170 = v47;
      uint64_t v172 = v34;
      uint64_t v173 = v37;
      uint64_t v48 = swift_slowAlloc();
      uint64_t v169 = swift_slowAlloc();
      uint64_t v193 = v169;
      *(_DWORD *)uint64_t v48 = 134350850;
      *(void *)&v192[0] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12) = 2050;
      *(void *)&v192[0] = v175;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 22) = 2082;
      LOBYTE(v192[0]) = (_BYTE)v176;
      char v49 = Calendar.Component.debugDescription.getter();
      *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v180 = (char *)v48;
      *(_WORD *)(v48 + 32) = 2082;
      *(void *)&v192[0] = 0LL;
      *((void *)&v192[0] + 1) = 0xE000000000000000LL;
      swift_unknownObjectRetain();
      _StringGuts.grow(_:)(72LL);
      uint64_t v51 = swift_getObjectType();
      char v52 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v32[3];
      swift_unknownObjectRetain();
      v52(&v187, v51, v32);
      swift_unknownObjectRelease();
      LOBYTE(v184) = v187;
      _print_unlocked<A, B>(_:_:)();
      v53._uint64_t countAndFlagsBits = 10272LL;
      v53._unint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v53);
      *(void *)&uint64_t v187 = v31;
      *((void *)&v187 + 1) = v32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
      _print_unlocked<A, B>(_:_:)();
      v54._uint64_t countAndFlagsBits = 0x656C61636F6C2029LL;
      v54._unint64_t object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v54);
      uint64_t v55 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v32[4];
      swift_unknownObjectRetain();
      v55(&v187, v51, v32);
      uint64_t v171 = v33;
      if ((void)v187)
      {
        uint64_t v56 = *((void *)&v187 + 1);
        swift_unknownObjectRelease();
      }

      else
      {
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        char v101 = static LocaleCache.cache + 16;
        uint64_t v102 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
        swift_retain_n();
        os_unfair_lock_lock(v102);
        closure #1 in LocaleCache.fixed(_:)(v101, 0LL, 0xE000000000000000LL, &v184);
        os_unfair_lock_unlock(v102);
        swift_unknownObjectRelease();
        swift_release_n();
        uint64_t v56 = *((void *)&v184 + 1);
      }

      unint64_t v103 = v180;
      uint64_t v176 = v180 + 34;
      unint64_t v104 = swift_getObjectType();
      unint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 64))(v104, v56);
      uint64_t v107 = v106;
      swift_unknownObjectRelease();
      v108._uint64_t countAndFlagsBits = v105;
      v108._unint64_t object = v107;
      String.append(_:)(v108);
      swift_bridgeObjectRelease();
      v109._uint64_t countAndFlagsBits = 0x6F7A20656D697420LL;
      v109._unint64_t object = (void *)0xEC000000203A656ELL;
      String.append(_:)(v109);
      uint64_t v110 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v32[6];
      swift_unknownObjectRetain();
      v110(&v187, v51, v32);
      swift_unknownObjectRelease();
      uint64_t v111 = v187;
      swift_getObjectType();
      *(void *)&unint64_t v184 = v111;
      v112._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v112);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v113._uint64_t countAndFlagsBits = 0x6557747372696620LL;
      v113._unint64_t object = (void *)0xEF203A7961646B65LL;
      String.append(_:)(v113);
      uint64_t v114 = (uint64_t (*)(uint64_t, void *))v32[7];
      swift_unknownObjectRetain();
      uint64_t v115 = v114(v51, v32);
      swift_unknownObjectRelease();
      *(void *)&uint64_t v187 = v115;
      v116._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      v117._unint64_t object = (void *)0x80000001839CCCC0LL;
      v117._uint64_t countAndFlagsBits = 0xD000000000000015LL;
      String.append(_:)(v117);
      unint64_t v118 = (uint64_t (*)(uint64_t, void *))v32[9];
      swift_unknownObjectRetain();
      char v119 = v118(v51, v32);
      swift_unknownObjectRelease();
      *(void *)&uint64_t v187 = v119;
      v120._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v120);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( *(uint64_t *)&v192[0],  *((unint64_t *)&v192[0] + 1),  &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *((_WORD *)v103 + 21) = 2082;
      memcpy(v192, v194, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)v194);
      uint64_t v121 = (uint64_t)v174;
      DateComponents.customMirror.getter((uint64_t)v174);
      uint64_t v122 = Mirror.children.getter();
      (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v121, v178);
      char v123 = 0xE000000000000000LL;
      unint64_t v190 = 0LL;
      uint64_t v191 = 0xE000000000000000LL;
      swift_retain();
      dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (*((void *)&v192[2] + 1))
      {
        uint64_t v178 = v122;
        do
        {
          uint64_t v187 = v192[0];
          uint64_t v188 = v192[1];
          uint64_t v189 = v192[2];
          v186._uint64_t countAndFlagsBits = 0LL;
          v186._unint64_t object = (void *)0xE000000000000000LL;
          char v124 = v192[0];
          unint64_t v184 = v192[0];
          outlined init with copy of Any((uint64_t)&v188, (uint64_t)v185);
          if (*((void *)&v124 + 1)) {
            __int128 v125 = v124;
          }
          else {
            __int128 v125 = 0LL;
          }
          if (*((void *)&v124 + 1)) {
            __int128 v126 = (void *)*((void *)&v124 + 1);
          }
          else {
            __int128 v126 = (void *)0xE000000000000000LL;
          }
          swift_bridgeObjectRetain();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
          v127._uint64_t countAndFlagsBits = v125;
          v127._unint64_t object = v126;
          String.append(_:)(v127);
          swift_bridgeObjectRelease();
          v128._uint64_t countAndFlagsBits = 8250LL;
          v128._unint64_t object = (void *)0xE200000000000000LL;
          String.append(_:)(v128);
          _print_unlocked<A, B>(_:_:)();
          v129._uint64_t countAndFlagsBits = 32LL;
          v129._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v129);
          String.append(_:)(v186);
          swift_bridgeObjectRelease();
          outlined destroy of (label: String?, value: Any)((uint64_t)&v187);
          dispatch thunk of _AnyIteratorBoxBase.next()();
        }

        while (*((void *)&v192[2] + 1));
        __int128 v130 = v190;
        char v123 = v191;
      }

      else
      {
        __int128 v130 = 0LL;
      }

      swift_release();
      swift_release();
      __int128 v131 = v180;
      outlined release of DateComponents((uint64_t)v194);
      *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v123, &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of DateComponents((uint64_t)v194);
      outlined release of DateComponents((uint64_t)v194);
      *((_WORD *)v131 + 26) = 2082;
      if (v179) {
        __int128 v132 = 0x647261776B636162LL;
      }
      else {
        __int128 v132 = 0x64726177726F66LL;
      }
      if (v179) {
        unint64_t v133 = 0xE800000000000000LL;
      }
      else {
        unint64_t v133 = 0xE700000000000000LL;
      }
      *(void *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *((_WORD *)v131 + 31) = 2082;
      __asm { BR              X9 }
    }
  }

  swift_unknownObjectRelease_n();
  outlined release of DateComponents((uint64_t)v194);
  outlined release of DateComponents((uint64_t)v194);

  return (*(uint64_t (**)(char *, uint64_t))(v182 + 8))(v36, v183);
}

uint64_t _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( uint64_t *a1, uint64_t *a2, const void *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  void (*v28)(__int128 *__return_ptr, uint64_t, void *);
  Swift::String v29;
  Swift::String v30;
  void (*v31)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  void (*v42)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t (*v46)(uint64_t, void *);
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t (*v50)(uint64_t, void *);
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  _BYTE v81[32];
  Swift::String v82;
  __int128 v83;
  _OWORD v84[2];
  uint64_t v85;
  unint64_t v86;
  _OWORD v87[18];
  uint64_t v88;
  _BYTE v89[296];
  uint64_t v12 = type metadata accessor for Mirror();
  char v75 = *(void *)(v12 - 8);
  unsigned __int8 v76 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v74 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Logger();
  char v79 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *a1;
  uint64_t v19 = *a2;
  uint64_t v18 = (void *)a2[1];
  memcpy(v89, a3, 0x11AuLL);
  uint64_t v77 = *a4;
  uint64_t v20 = *a5;
  int v21 = *a6;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  id v22 = (id)static Calendar.log;
  Logger.init(_:)();
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v89);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v89);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter();
  int v24 = static os_log_type_t.debug.getter();
  uint64_t v25 = v16;
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    uint64_t v68 = v20;
    uint64_t v70 = v24;
    char v71 = v21;
    uint64_t v26 = swift_slowAlloc();
    char v69 = swift_slowAlloc();
    char v88 = v69;
    *(_DWORD *)uint64_t v26 = 134350338;
    *(void *)&v87[0] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v78 = v26;
    *(_WORD *)(v26 + 12) = 2082;
    *(void *)&v87[0] = 0LL;
    *((void *)&v87[0] + 1) = 0xE000000000000000LL;
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(72LL);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v28 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v18[3];
    swift_unknownObjectRetain();
    v28(&v83, ObjectType, v18);
    swift_unknownObjectRelease();
    LOBYTE(v80) = v83;
    _print_unlocked<A, B>(_:_:)();
    v29._uint64_t countAndFlagsBits = 10272LL;
    v29._unint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v29);
    *(void *)&char v83 = v19;
    *((void *)&v83 + 1) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
    _print_unlocked<A, B>(_:_:)();
    v30._uint64_t countAndFlagsBits = 0x656C61636F6C2029LL;
    v30._unint64_t object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v30);
    uint64_t v31 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v18[4];
    swift_unknownObjectRetain();
    v31(&v83, ObjectType, v18);
    uint64_t v72 = v25;
    char v73 = v14;
    if ((void)v83)
    {
      uint64_t v32 = *((void *)&v83 + 1);
      swift_unknownObjectRelease();
    }

    else
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v33 = static LocaleCache.cache + 16;
      int v34 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
      swift_retain_n();
      os_unfair_lock_lock(v34);
      closure #1 in LocaleCache.fixed(_:)(v33, 0LL, 0xE000000000000000LL, &v80);
      os_unfair_lock_unlock(v34);
      swift_unknownObjectRelease();
      swift_release_n();
      uint64_t v32 = *((void *)&v80 + 1);
    }

    id v35 = v78;
    char v67 = v78 + 14;
    uint64_t v36 = swift_getObjectType();
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 64))(v36, v32);
    uint64_t v39 = v38;
    swift_unknownObjectRelease();
    v40._uint64_t countAndFlagsBits = v37;
    v40._unint64_t object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = 0x6F7A20656D697420LL;
    v41._unint64_t object = (void *)0xEC000000203A656ELL;
    String.append(_:)(v41);
    uint64_t v42 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v18[6];
    swift_unknownObjectRetain();
    v42(&v83, ObjectType, v18);
    swift_unknownObjectRelease();
    uint64_t v43 = v83;
    swift_getObjectType();
    *(void *)&char v80 = v43;
    v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = 0x6557747372696620LL;
    v45._unint64_t object = (void *)0xEF203A7961646B65LL;
    String.append(_:)(v45);
    uint64_t v46 = (uint64_t (*)(uint64_t, void *))v18[7];
    swift_unknownObjectRetain();
    uint64_t v47 = v46(ObjectType, v18);
    swift_unknownObjectRelease();
    *(void *)&char v83 = v47;
    v48._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._unint64_t object = (void *)0x80000001839CCCC0LL;
    v49._uint64_t countAndFlagsBits = 0xD000000000000015LL;
    String.append(_:)(v49);
    uint64_t v50 = (uint64_t (*)(uint64_t, void *))v18[9];
    swift_unknownObjectRetain();
    uint64_t v51 = v50(ObjectType, v18);
    swift_unknownObjectRelease();
    *(void *)&char v83 = v51;
    v52._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v52);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v87[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( *(uint64_t *)&v87[0],  *((unint64_t *)&v87[0] + 1),  &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 22) = 2082;
    memcpy(v87, v89, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v89);
    char v53 = v74;
    DateComponents.customMirror.getter(v74);
    uint64_t v54 = Mirror.children.getter();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v53, v76);
    uint64_t v55 = 0xE000000000000000LL;
    char v85 = 0LL;
    char v86 = 0xE000000000000000LL;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*((void *)&v87[2] + 1))
    {
      char v75 = v54;
      unsigned __int8 v76 = (uint64_t)v23;
      do
      {
        char v83 = v87[0];
        v84[0] = v87[1];
        v84[1] = v87[2];
        v82._uint64_t countAndFlagsBits = 0LL;
        v82._unint64_t object = (void *)0xE000000000000000LL;
        uint64_t v56 = (void *)*((void *)&v87[0] + 1);
        char v57 = *(void *)&v87[0];
        char v80 = v87[0];
        outlined init with copy of Any((uint64_t)v84, (uint64_t)v81);
        if (v56)
        {
          uint64_t v58 = v56;
        }

        else
        {
          char v57 = 0LL;
          uint64_t v58 = (void *)0xE000000000000000LL;
        }

        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
        v59._uint64_t countAndFlagsBits = v57;
        v59._unint64_t object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 8250LL;
        v60._unint64_t object = (void *)0xE200000000000000LL;
        String.append(_:)(v60);
        _print_unlocked<A, B>(_:_:)();
        v61._uint64_t countAndFlagsBits = 32LL;
        v61._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v61);
        String.append(_:)(v82);
        swift_bridgeObjectRelease();
        outlined destroy of (label: String?, value: Any)((uint64_t)&v83);
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }

      while (*((void *)&v87[2] + 1));
      uint64_t v62 = v85;
      uint64_t v55 = v86;
    }

    else
    {
      uint64_t v62 = 0LL;
    }

    swift_release();
    swift_release();
    char v63 = v78;
    outlined release of DateComponents((uint64_t)v89);
    *(void *)&v87[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v55, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v89);
    outlined release of DateComponents((uint64_t)v89);
    *(_WORD *)(v63 + 32) = 2082;
    if (v77) {
      uint64_t v64 = 0x647261776B636162LL;
    }
    else {
      uint64_t v64 = 0x64726177726F66LL;
    }
    if (v77) {
      char v65 = 0xE800000000000000LL;
    }
    else {
      char v65 = 0xE700000000000000LL;
    }
    *(void *)&v87[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 42) = 2082;
    __asm { BR              X9 }
  }

  swift_unknownObjectRelease_n();
  outlined release of DateComponents((uint64_t)v89);
  outlined release of DateComponents((uint64_t)v89);

  return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v16, v14);
}

Foundation::Date_optional __swiftcall Calendar.DatesByMatching.Iterator.next()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if ((v2[47] & 1) != 0)
  {
    *(void *)uint64_t v0 = 0LL;
    *(_BYTE *)(v0 + 8) = 1;
  }

  else
  {
    uint64_t v4 = *v2;
    uint64_t v5 = v2[8];
    uint64_t v18 = v2[9];
    char v6 = (void *)v2[7];
    memcpy(__dst, v2 + 10, 0x11AuLL);
    uint64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);

      char v14 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }

    else
    {
      unsigned __int8 v8 = *((_BYTE *)v2 + 362);
      uint64_t v9 = v2[1];
      char v10 = *((_BYTE *)v2 + 16);
      unsigned __int8 v11 = *((_BYTE *)v2 + 364);
      unsigned __int8 v12 = *((_BYTE *)v2 + 363);
      double v13 = *((double *)v2 + 3);
      while (1)
      {
        v21[0] = v5;
        v21[1] = v18;
        id v27 = v6;
        memcpy(v26, __dst, 0x11AuLL);
        unsigned __int8 v25 = v8;
        unsigned __int8 v24 = v12;
        unsigned __int8 v23 = v11;
        double v22 = v13;
        uint64_t v19 = v9;
        char v20 = v10;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)( (double *)&v27,  v26,  &v25,  &v24,  &v23,  &v22,  (uint64_t)&v19,  (uint64_t)&v28);
        outlined release of DateComponents((uint64_t)__dst);
        char v14 = swift_unknownObjectRelease();
        double v16 = v28;
        int v17 = v29;
        double v13 = v30;
        *((double *)v2 + 3) = v30;
        if (v17 != 2) {
          break;
        }
        if (v7 >= v2[46])
        {
          *uint64_t v2 = v7;
          v21[0] = (uint64_t)v6;
          double v28 = *(double *)&v5;
          uint64_t v29 = v18;
          memcpy(v26, __dst, 0x11AuLL);
          LOBYTE(v19) = v11;
          LOBYTE(v27) = v8;
          LOBYTE(v22) = v12;
          char v14 = _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( v21,  (uint64_t *)&v28,  v26,  (unsigned __int8 *)&v19,  (unsigned __int8 *)&v27,  (unsigned __int8 *)&v22);
          *((_BYTE *)v2 + 376) = 1;
          goto LABEL_14;
        }

        ++v7;
      }

      *uint64_t v2 = v7;
      if ((v2[6] & 1) != 0 || (Swift::Double v15 = v16, *((double *)v2 + 4) <= v16) && *((double *)v2 + 5) > v16)
      {
        *((double *)v2 + 1) = v16;
        *((_BYTE *)v2 + 16) = 0;
        *(double *)uint64_t v3 = v16;
        *(_BYTE *)(v3 + 8) = 0;
        goto LABEL_16;
      }

      *((_BYTE *)v2 + 376) = 1;
LABEL_14:
      *(void *)uint64_t v3 = 0LL;
      *(_BYTE *)(v3 + 8) = 1;
    }
  }

uint64_t Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)@<X0>( double *a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, double *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  void (*v36)(void *__return_ptr, void, void, void, void);
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  uint64_t v51;
  double v52;
  unsigned __int8 v53;
  __int128 v54[18];
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _BYTE __dst[282];
  _BYTE __src[296];
  double v16 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  int v17 = *a3;
  unsigned __int8 v18 = *a4;
  unsigned int v19 = *a5;
  double v20 = *a6;
  double v21 = *(double *)a7;
  char v22 = *(_BYTE *)(a7 + 8);
  double v24 = *v8;
  uint64_t v23 = *((void *)v8 + 1);
  char v59 = 1;
  uint64_t v58 = 0;
  char v57 = 0;
  *(double *)uint64_t v54 = v24;
  *((void *)&v54[0] + 1) = v23;
  uint64_t v43 = v20;
  LOBYTE(v55) = v19;
  Calendar._adjustedComponents(_:date:direction:)(a2, &v43, (unsigned __int8 *)&v55, (uint64_t)__src);
  uint64_t v43 = v24;
  uint64_t v44 = v23;
  uint64_t v47 = *(void *)&v20;
  memcpy(v54, __src, 0x11AuLL);
  LOBYTE(v52) = v19;
  LOBYTE(v51) = v17;
  char v53 = v18;
  Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( (double *)&v47,  v54,  (unsigned __int8 *)&v52,  (unsigned __int8 *)&v51,  &v53,  (double *)&v55);
  if (v9) {
    return outlined release of DateComponents((uint64_t)__src);
  }
  if ((v56 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v43 = v24;
  uint64_t v44 = v23;
  uint64_t v47 = *(void *)&v16;
  uint64_t v51 = v55;
  char v52 = v20;
  memcpy(v54, __src, 0x11AuLL);
  char v53 = v19;
  uint64_t v50 = v17;
  char v49 = v18;
  Calendar._adjustedDateForMismatches(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isForwardDST:isExactMatch:isLeapDay:)( a2,  (double *)&v47,  &v52,  (double *)&v51,  v54,  (char *)&v53,  &v50,  &v49,  (uint64_t)&v55,  &v57,  &v59,  &v58);
  double v27 = *(double *)&v55;
  if ((v56 & 1) != 0)
  {
    uint64_t v43 = v24;
    uint64_t v44 = v23;
    char v52 = v20;
    memcpy(v54, a2, 0x11AuLL);
    LOBYTE(v51) = v19;
    uint64_t v47 = v55;
    uint64_t v48 = 1;
    Calendar.bumpedDateUpToNextHigherUnitInComponents(_:_:_:_:)( &v52,  (unsigned __int8 *)&v51,  (uint64_t)&v47,  (uint64_t)&v55);
    uint64_t result = outlined release of DateComponents((uint64_t)__src);
    if (!v56) {
      double v20 = *(double *)&v55;
    }
    goto LABEL_5;
  }

  uint64_t v43 = v24;
  uint64_t v44 = v23;
  uint64_t v47 = v55;
  memcpy(v54, a2, 0x11AuLL);
  BOOL v29 = Calendar.date(_:containsMatchingComponents:)(&v55, (double *)&v47, (uint64_t *)v54);
  unint64_t v30 = v55;
  if (v29 && (v59 & 1) == 0) {
    char v59 = 1;
  }
  uint64_t v43 = v24;
  uint64_t v44 = v23;
  char v52 = v20;
  memcpy(v54, __dst, 0x11AuLL);
  LOBYTE(v51) = v19;
  uint64_t v47 = *(void *)&v27;
  uint64_t v48 = 0;
  Calendar.bumpedDateUpToNextHigherUnitInComponents(_:_:_:_:)( &v52,  (unsigned __int8 *)&v51,  (uint64_t)&v47,  (uint64_t)&v55);
  if (!v56) {
    double v20 = *(double *)&v55;
  }
  if (!(v29 | (v30 >> 13) & 1) && (v30 & 0x200) == 0) {
    char v59 = 0;
  }
  __int16 v31 = v30;
  if ((v22 & 1) == 0)
  {
    if (v21 >= v27) {
      goto LABEL_21;
    }
LABEL_28:
    uint64_t v32 = -1LL;
    if ((v19 & 1) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }

  double v21 = v16;
  if (v16 < v27) {
    goto LABEL_28;
  }
LABEL_21:
  if (v21 > v27) {
    uint64_t v32 = v19;
  }
  else {
    uint64_t v32 = 0LL;
  }
  if ((v19 & 1) != 0 || v21 <= v27)
  {
LABEL_30:
    uint64_t result = outlined release of DateComponents((uint64_t)__src);
    if (v57 == 1)
    {
      uint64_t v28 = a8;
      if ((v59 & 1) != 0)
      {
        if (!v32)
        {
LABEL_33:
          char v26 = 2;
LABEL_51:
          double v27 = 0.0;
          goto LABEL_6;
        }

double Calendar.DatesByMatching.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v13 = *(void *)(v1 + 24);
  char v7 = *(_BYTE *)(v1 + 40);
  memcpy(__dst, (const void *)(v1 + 48), 0x11AuLL);
  char v8 = *(_BYTE *)(v1 + 330);
  char v9 = *(_BYTE *)(v1 + 331);
  char v10 = *(_BYTE *)(v1 + 332);
  memcpy(v15, (const void *)(v1 + 48), sizeof(v15));
  v14[0] = v3;
  v14[1] = v4;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  BOOL v11 = DateComponents._validate(for:)(v14);
  v15[0] = 1;
  LOBYTE(v14[0]) = v7;
  memcpy((void *)(a1 + 80), __dst, 0x11AuLL);
  double result = NAN;
  *(_OWORD *)a1 = xmmword_1837A9530;
  *(_BYTE *)(a1 + 16) = v15[0];
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v14[0];
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 362) = v8;
  *(_BYTE *)(a1 + 363) = v9;
  *(_BYTE *)(a1 + 364) = v10;
  *(void *)(a1 + 368) = 100LL;
  *(_BYTE *)(a1 + 376) = !v11;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Calendar.DatesByMatching@<X0>( uint64_t a1@<X8>)
{
  return outlined release of Calendar.DatesByAdding((uint64_t)v3);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Calendar.DatesByMatching()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)__dst);
  outlined release of Calendar.DatesByAdding((uint64_t)__dst);
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Calendar.DatesByMatching( uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Calendar.DatesByMatching@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

Foundation::Date_optional __swiftcall Calendar.DatesByAdding.Iterator.next()()
{
  void (*v11)(double *__return_ptr, _BYTE *, double *, uint64_t, uint64_t, uint64_t);
  char v12;
  double v13;
  double v14;
  double v15;
  char v16;
  _BYTE __dst[288];
  _BYTE __src[288];
  Foundation::Date_optional result;
  uint64_t v3 = v0;
  if ((*(_BYTE *)(v1 + 331) & 1) != 0)
  {
    void *v0 = 0LL;
LABEL_3:
    *((_BYTE *)v3 + 8) = 1;
    goto LABEL_15;
  }

  memcpy(__dst, (const void *)(v1 + 48), 0x11AuLL);
  uint64_t v4 = *(void *)(v1 + 336);
  DateComponents.scaled(by:)(v4, (uint64_t)__src);
  uint64_t v5 = *(void *)(v1 + 8);
  double v6 = *(double *)(v1 + 16);
  uint64_t v7 = *(unsigned __int8 *)(v1 + 330);
  memcpy(__dst, __src, 0x11AuLL);
  double v8 = 1.59271755e13;
  if (v6 <= 1.59271755e13) {
    double v8 = v6;
  }
  double v9 = fmax(v8, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  char v14 = v9;
  BOOL v11 = *(void (**)(double *__return_ptr, _BYTE *, double *, uint64_t, uint64_t, uint64_t))(v5 + 200);
  swift_unknownObjectRetain();
  v11(&v15, __dst, &v14, v7, ObjectType, v5);
  swift_unknownObjectRelease();
  unsigned __int8 v12 = outlined release of DateComponents((uint64_t)__src);
  uint64_t v13 = v15;
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(v1 + 331) = 1;
    *(double *)uint64_t v3 = v13;
    *((_BYTE *)v3 + 8) = 1;
    goto LABEL_15;
  }

  if ((*(_BYTE *)(v1 + 40) & 1) == 0)
  {
    Swift::Double v2 = v15;
    if (*(double *)(v1 + 24) > v15 || *(double *)(v1 + 32) <= v15)
    {
      *(_BYTE *)(v1 + 331) = 1;
      *uint64_t v3 = 0LL;
      goto LABEL_3;
    }
  }

  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v1 + 336) = v4 + 1;
    *(double *)uint64_t v3 = v13;
    *((_BYTE *)v3 + 8) = 0;
  }

uint64_t protocol witness for Sequence.makeIterator() in conformance Calendar.DatesByAdding@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  double v8 = v1 + 6;
  char v9 = *((_BYTE *)v1 + 40);
  memcpy(v12, v1 + 6, 0x11AuLL);
  char v10 = *((_BYTE *)v1 + 330);
  char v14 = v9;
  memcpy(&__src[7], v8, 0x11AuLL);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v14;
  memcpy((void *)(a1 + 41), __src, 0x121uLL);
  *(_BYTE *)(a1 + 330) = v10;
  *(_BYTE *)(a1 + 331) = 0;
  *(void *)(a1 + 336) = 1LL;
  v15[0] = v3;
  v15[1] = v4;
  void v15[2] = v5;
  __int128 v15[3] = v6;
  _OWORD v15[4] = v7;
  char v16 = v9;
  memcpy(v17, v8, 0x11AuLL);
  v17[282] = v10;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v12);
  return outlined release of Calendar.DatesByAdding((uint64_t)v15);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Calendar.DatesByAdding()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(__dst);
  outlined release of Calendar.DatesByAdding((uint64_t)__dst);
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Calendar.DatesByAdding( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Calendar.DatesByAdding@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)( double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t *a6, uint64_t a7)
{
  double v9 = *a1;
  unsigned __int8 v10 = *a3;
  unsigned __int8 v11 = *a4;
  unsigned __int8 v12 = *a5;
  uint64_t v14 = *a6;
  uint64_t v13 = a6[1];
  memcpy(__dst, a2, 0x11AuLL);
  uint64_t v26 = v14;
  uint64_t v27 = v13;
  uint64_t result = DateComponents._validate(for:)(&v26);
  if ((result & 1) != 0 && v9 >= -2.11845067e11 && v9 <= 1.59271755e13)
  {
    uint64_t v16 = 101LL;
    double v17 = v9;
    while (1)
    {
      v20[0] = v14;
      v20[1] = v13;
      id v25 = *(id *)&v9;
      memcpy(__dst, a2, 0x11AuLL);
      unsigned __int8 v24 = v10;
      unsigned __int8 v23 = v11;
      unsigned __int8 v22 = v12;
      double v21 = v17;
      uint64_t v18 = 0LL;
      LOBYTE(v19) = 1;
      uint64_t result = Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)( (double *)&v25,  __dst,  &v24,  &v23,  &v22,  &v21,  (uint64_t)&v18,  (uint64_t)&v26);
      double v17 = v28;
      if (!--v16)
      {
        *(double *)double v20 = v9;
        uint64_t v26 = v14;
        uint64_t v27 = v13;
        memcpy(__dst, a2, 0x11AuLL);
        LOBYTE(v18) = v12;
        LOBYTE(v25) = v10;
        LOBYTE(v21) = v11;
        return _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( v20,  &v26,  __dst,  (unsigned __int8 *)&v18,  (unsigned __int8 *)&v25,  (unsigned __int8 *)&v21);
      }
    }

    *(void *)a7 = v26;
    *(_BYTE *)(a7 + 8) = 0;
  }

  return result;
}

uint64_t Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)( double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t (*a6)(void, void, void))
{
  double v11 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  unsigned __int8 v12 = *a3;
  unsigned __int8 v23 = *a4;
  unsigned __int8 v13 = *a5;
  uint64_t v15 = *v6;
  uint64_t v14 = v6[1];
  memcpy(v35, a2, 0x11AuLL);
  uint64_t v32 = v15;
  uint64_t v33 = v14;
  uint64_t result = DateComponents._validate(for:)(&v32);
  if ((result & 1) != 0 && v11 >= -2.11845067e11 && v11 <= 1.59271755e13)
  {
    unint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    char v19 = 1;
    double v20 = v11;
    do
    {
      v26[0] = v15;
      v26[1] = v14;
      id v31 = *(id *)&v11;
      memcpy(v35, a2, 0x11AuLL);
      unsigned __int8 v30 = v12;
      unsigned __int8 v29 = v23;
      unsigned __int8 v28 = v13;
      double v27 = v20;
      uint64_t v24 = v18;
      LOBYTE(v25) = v19 & 1;
      Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)( (double *)&v31,  v35,  &v30,  &v29,  &v28,  &v27,  (uint64_t)&v24,  (uint64_t)&v32);
      double v20 = v34;
      if (v33 == 2)
      {
        if (v17 >= 0x64)
        {
          *(double *)uint64_t v26 = v11;
          uint64_t v32 = v15;
          uint64_t v33 = v14;
          memcpy(v35, __dst, 0x11AuLL);
          LOBYTE(v24) = v13;
          LOBYTE(v31) = v12;
          LOBYTE(v27) = v23;
          return _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( v26,  &v32,  v35,  (unsigned __int8 *)&v24,  (unsigned __int8 *)&v31,  (unsigned __int8 *)&v27);
        }
      }

      else
      {
        uint64_t v18 = v32;
        LOBYTE(v32) = 0;
        v35[0] = v18;
        LOBYTE(v35[1]) = 0;
        uint64_t result = a6(v35, v33 & 1, &v32);
        char v19 = 0;
        if ((v32 & 1) != 0) {
          return result;
        }
      }
    }

    while (!__OFADD__(v17++, 1LL));
    __break(1u);

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t Calendar._adjustedComponents(_:date:direction:)@<X0>( void *__src@<X0>, double *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v15)(void *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t *__return_ptr, void *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v28;
  int v29;
  double v30;
  double v31;
  uint64_t ObjectType;
  void (*v33)(_OWORD *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t);
  Foundation::Date v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void v75[36];
  uint64_t v76;
  char v77;
  uint64_t v78;
  _OWORD __srca[18];
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  void v91[7];
  char v92;
  uint64_t v93;
  char v94;
  _OWORD __dst[19];
  memcpy(__dst, __src, 0x11AuLL);
  double v9 = *a2;
  int v10 = *a3;
  uint64_t v12 = *v4;
  uint64_t v11 = v4[1];
  DateComponents.highestSetUnit.getter((char *)v91);
  if (LOBYTE(v91[0]) == 3)
  {
    unsigned __int8 v28 = *(void *)&__dst[5];
    unsigned __int8 v29 = BYTE8(__dst[5]);
    if (v9 <= 1.59271755e13) {
      unsigned __int8 v30 = v9;
    }
    else {
      unsigned __int8 v30 = 1.59271755e13;
    }
    id v31 = fmax(v30, -2.11845067e11);
    if (v10)
    {
      unsigned __int8 v76 = 8LL;
      uint64_t ObjectType = swift_getObjectType();
      *(double *)__srca = v31;
      uint64_t v33 = *(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v11 + 192);
      outlined retain of DateComponents((uint64_t)__dst);
      v33(v91, &v76, (uint64_t *)__srca, ObjectType, v11);
      outlined release of DateComponents((uint64_t)v91);
      if ((v29 & 1) != 0 || (!v94 ? (id v35 = v93) : (id v35 = 0LL), v28 >= v35))
      {
        *(void *)&__srca[0] = v12;
        *((void *)&__srca[0] + 1) = v11;
        char v90 = 2;
        uint64_t v78 = *(void *)&v9;
        *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)&v90,  -1LL,  v34,  (Swift::Bool)&v78);
        if ((v75[1] & 1) != 0)
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }

        uint64_t v39 = *(double *)v75;
        v75[0] = 4LL;
        if (v39 > 1.59271755e13) {
          uint64_t v39 = 1.59271755e13;
        }
        uint64_t v78 = fmax(v39, -2.11845067e11);
      }

      else
      {
        v75[0] = 4LL;
        uint64_t v78 = *(void *)&v31;
      }

      uint64_t v40 = v75;
      goto LABEL_47;
    }

    v75[0] = 8LL;
    uint64_t ObjectType = swift_getObjectType();
    *(double *)__srca = v31;
    uint64_t v33 = *(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v11 + 192);
    outlined retain of DateComponents((uint64_t)__dst);
    v33(v91, v75, (uint64_t *)__srca, ObjectType, v11);
    uint64_t result = outlined release of DateComponents((uint64_t)v91);
    if (v94) {
      uint64_t v36 = 0LL;
    }
    else {
      uint64_t v36 = v93;
    }
    uint64_t v37 = *(void *)&__dst[4];
    int v38 = BYTE8(__dst[4]);
    if (v29)
    {
      if (v36 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_51;
      }
    }

    else if (v36 >= v28)
    {
LABEL_51:
      LOBYTE(v91[0]) = BYTE8(__dst[2]);
      LOBYTE(__srca[0]) = BYTE8(__dst[3]);
      LOBYTE(v75[0]) = v38;
      LOBYTE(v76) = v29;
      LOBYTE(v78) = BYTE8(__dst[6]);
      char v90 = BYTE8(__dst[7]);
      char v89 = BYTE8(__dst[8]);
      char v88 = BYTE8(__dst[9]);
      char v87 = BYTE8(__dst[10]);
      char v86 = BYTE8(__dst[11]);
      char v85 = BYTE8(__dst[12]);
      char v84 = BYTE8(__dst[13]);
      char v83 = BYTE8(__dst[14]);
      uint64_t v82 = BYTE8(__dst[15]);
      char v81 = BYTE8(__dst[16]);
      char v80 = BYTE8(__dst[17]);
      uint64_t v41 = __dst[0];
      uint64_t v42 = __dst[1];
      *(void *)(a4 + 32) = *(void *)&__dst[2];
      *(_BYTE *)(a4 + 40) = v91[0];
      *(void *)(a4 + 48) = *(void *)&__dst[3];
      *(_BYTE *)(a4 + 56) = __srca[0];
      *(void *)(a4 + 64) = v37;
      *(_BYTE *)(a4 + 72) = v75[0];
      *(void *)(a4 + 80) = v28;
      *(_BYTE *)(a4 + 88) = v76;
      *(void *)(a4 + 96) = *(void *)&__dst[6];
      *(_BYTE *)(a4 + 104) = v78;
      *(void *)(a4 + 112) = *(void *)&__dst[7];
      *(_BYTE *)(a4 + 120) = v90;
      *(void *)(a4 + 128) = *(void *)&__dst[8];
      *(_BYTE *)(a4 + 136) = v89;
      *(void *)(a4 + 144) = *(void *)&__dst[9];
      *(_BYTE *)(a4 + 152) = v88;
      *(void *)(a4 + 160) = *(void *)&__dst[10];
      *(_BYTE *)(a4 + 168) = v87;
      *(void *)(a4 + 176) = *(void *)&__dst[11];
      *(_BYTE *)(a4 + 184) = v86;
      *(void *)(a4 + 192) = *(void *)&__dst[12];
      *(_BYTE *)(a4 + 200) = v85;
      *(void *)(a4 + 208) = *(void *)&__dst[13];
      *(_BYTE *)(a4 + 216) = v84;
      *(void *)(a4 + 224) = *(void *)&__dst[14];
      *(_BYTE *)(a4 + 232) = v83;
      *(void *)(a4 + 240) = *(void *)&__dst[15];
      *(_BYTE *)(a4 + 248) = v82;
      *(void *)(a4 + 256) = *(void *)&__dst[16];
      *(_BYTE *)(a4 + 264) = v81;
      *(void *)(a4 + 272) = *(void *)&__dst[17];
      *(_BYTE *)(a4 + 280) = v80;
      *(_BYTE *)(a4 + 281) = BYTE9(__dst[17]);
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v42;
      return result;
    }

    unsigned __int8 v76 = 4LL;
    uint64_t v78 = *(void *)&v31;
    uint64_t v40 = &v76;
LABEL_47:
    v33(__srca, v40, &v78, ObjectType, v11);
    uint64_t result = outlined release of DateComponents((uint64_t)__srca);
    uint64_t v37 = *(void *)&__srca[4];
    if (BYTE8(__srca[4])) {
      uint64_t v37 = 0LL;
    }
    int v38 = v37 == 0x7FFFFFFFFFFFFFFFLL;
    if (v37 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v37 = 0LL;
    }
    goto LABEL_51;
  }

  if (LOBYTE(v91[0]) != 2)
  {
    memcpy((void *)a4, __src, 0x11AuLL);
    return outlined retain of DateComponents((uint64_t)__dst);
  }

  uint64_t v44 = v10;
  uint64_t v78 = 2LL;
  double v13 = 1.59271755e13;
  if (v9 <= 1.59271755e13) {
    double v13 = v9;
  }
  double v14 = fmax(v13, -2.11845067e11);
  uint64_t v74 = swift_getObjectType();
  *(double *)__srca = v14;
  uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t))(v11 + 192);
  outlined retain of DateComponents((uint64_t)__dst);
  v15(v91, &v78, __srca, v74, v11);
  outlined release of DateComponents((uint64_t)v91);
  if (v92) {
    uint64_t v16 = 0LL;
  }
  else {
    uint64_t v16 = v91[6];
  }
  uint64_t v43 = v16;
  if (v16 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v17 = 0LL;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = BYTE8(__dst[13]);
  char v19 = BYTE8(__dst[7]);
  uint64_t v72 = v11;
  uint64_t v64 = BYTE8(__dst[16]);
  char v65 = BYTE8(__dst[17]);
  BYTE8(__srca[16]) = BYTE8(__dst[16]);
  WORD4(__srca[17]) = WORD4(__dst[17]);
  uint64_t v45 = __dst[0];
  __srca[0] = __dst[0];
  uint64_t v54 = *((void *)&__dst[1] + 1);
  uint64_t v55 = *(void *)&__dst[1];
  __srca[1] = __dst[1];
  char v57 = *(void *)&__dst[2];
  *(void *)&__srca[2] = *(void *)&__dst[2];
  uint64_t v46 = BYTE8(__dst[2]);
  BYTE8(__srca[2]) = BYTE8(__dst[2]);
  double v20 = v17;
  *(void *)&__srca[3] = v17;
  double v21 = v16 == 0x7FFFFFFFFFFFFFFFLL;
  BYTE8(__srca[3]) = v16 == 0x7FFFFFFFFFFFFFFFLL;
  char v61 = *(void *)&__dst[4];
  *(void *)&__srca[4] = *(void *)&__dst[4];
  uint64_t v50 = BYTE8(__dst[4]);
  uint64_t v51 = BYTE8(__dst[5]);
  BYTE8(__srca[4]) = BYTE8(__dst[4]);
  uint64_t v62 = *(void *)&__dst[5];
  char v63 = *(void *)&__dst[6];
  *(void *)&__srca[5] = *(void *)&__dst[5];
  BYTE8(__srca[5]) = BYTE8(__dst[5]);
  *(void *)&__srca[6] = *(void *)&__dst[6];
  char v52 = BYTE8(__dst[6]);
  BYTE8(__srca[6]) = BYTE8(__dst[6]);
  uint64_t v66 = *(void *)&__dst[7];
  char v67 = *(void *)&__dst[8];
  *(void *)&__srca[7] = *(void *)&__dst[7];
  BYTE8(__srca[7]) = BYTE8(__dst[7]);
  *(void *)&__srca[8] = *(void *)&__dst[8];
  char v53 = BYTE8(__dst[8]);
  BYTE8(__srca[8]) = BYTE8(__dst[8]);
  uint64_t v68 = *(void *)&__dst[9];
  char v69 = *(void *)&__dst[10];
  *(void *)&__srca[9] = *(void *)&__dst[9];
  uint64_t v56 = BYTE8(__dst[9]);
  BYTE8(__srca[9]) = BYTE8(__dst[9]);
  *(void *)&__srca[10] = *(void *)&__dst[10];
  uint64_t v58 = BYTE8(__dst[10]);
  char v59 = BYTE8(__dst[11]);
  BYTE8(__srca[10]) = BYTE8(__dst[10]);
  uint64_t v70 = *(void *)&__dst[11];
  char v71 = *(void *)&__dst[12];
  *(void *)&__srca[11] = *(void *)&__dst[11];
  BYTE8(__srca[11]) = BYTE8(__dst[11]);
  *(void *)&__srca[12] = *(void *)&__dst[12];
  uint64_t v60 = BYTE8(__dst[12]);
  BYTE8(__srca[12]) = BYTE8(__dst[12]);
  char v73 = *(void *)&__dst[13];
  *(void *)&__srca[13] = *(void *)&__dst[13];
  BYTE8(__srca[13]) = BYTE8(__dst[13]);
  uint64_t v47 = *(void *)&__dst[14];
  *(void *)&__srca[14] = *(void *)&__dst[14];
  unsigned __int8 v22 = BYTE8(__dst[14]);
  BYTE8(__srca[14]) = BYTE8(__dst[14]);
  uint64_t v48 = *(void *)&__dst[15];
  *(void *)&__srca[15] = *(void *)&__dst[15];
  unsigned __int8 v23 = BYTE8(__dst[15]);
  BYTE8(__srca[15]) = BYTE8(__dst[15]);
  uint64_t v24 = *(void *)&__dst[17];
  char v49 = *(void *)&__dst[16];
  *(void *)&__srca[16] = *(void *)&__dst[16];
  *(void *)&__srca[17] = *(void *)&__dst[17];
  uint64_t v25 = BYTE9(__dst[17]);
  memcpy(v75, __srca, 0x11AuLL);
  uint64_t v26 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))(v72 + 176);
  outlined retain of DateComponents((uint64_t)__srca);
  v26(&v76, v75, v74, v72);
  uint64_t result = outlined release of DateComponents((uint64_t)__srca);
  if ((v77 & 1) != 0) {
    goto LABEL_12;
  }
  if ((v44 & 1) == 0)
  {
    if (v43 != 0x7FFFFFFFFFFFFFFFLL)
    {
      double v21 = v43 == 0x7FFFFFFFFFFFFFFELL;
      if (v43 == 0x7FFFFFFFFFFFFFFELL) {
        double v20 = 0LL;
      }
      else {
        double v20 = v43 + 1;
      }
      goto LABEL_12;
    }

    goto LABEL_55;
  }

  if (v9 >= *(double *)&v76)
  {
LABEL_12:
    LOBYTE(v75[0]) = v46;
    LOBYTE(v76) = v21;
    char v90 = v50;
    char v89 = v51;
    char v88 = v52;
    char v87 = v19;
    char v86 = v53;
    char v85 = v56;
    char v84 = v58;
    char v83 = v59;
    uint64_t v82 = v60;
    char v81 = v18;
    char v80 = v22;
    *(_OWORD *)a4 = v45;
    *(void *)(a4 + 16) = v55;
    *(void *)(a4 + 24) = v54;
    *(void *)(a4 + 32) = v57;
    *(_BYTE *)(a4 + 40) = v75[0];
    *(void *)(a4 + 48) = v20;
    *(_BYTE *)(a4 + 56) = v76;
    *(void *)(a4 + 64) = v61;
    *(_BYTE *)(a4 + 72) = v90;
    *(void *)(a4 + 80) = v62;
    *(_BYTE *)(a4 + 88) = v89;
    *(void *)(a4 + 96) = v63;
    *(_BYTE *)(a4 + 104) = v88;
    *(void *)(a4 + 112) = v66;
    *(_BYTE *)(a4 + 120) = v87;
    *(void *)(a4 + 128) = v67;
    *(_BYTE *)(a4 + 136) = v86;
    *(void *)(a4 + 144) = v68;
    *(_BYTE *)(a4 + 152) = v85;
    *(void *)(a4 + 160) = v69;
    *(_BYTE *)(a4 + 168) = v84;
    *(void *)(a4 + 176) = v70;
    *(_BYTE *)(a4 + 184) = v83;
    *(void *)(a4 + 192) = v71;
    *(_BYTE *)(a4 + 200) = v82;
    *(void *)(a4 + 208) = v73;
    *(_BYTE *)(a4 + 216) = v81;
    *(void *)(a4 + 224) = v47;
    *(_BYTE *)(a4 + 232) = v80;
    *(void *)(a4 + 240) = v48;
    *(_BYTE *)(a4 + 248) = v23;
    *(void *)(a4 + 256) = v49;
    *(_BYTE *)(a4 + 264) = v64;
    *(void *)(a4 + 272) = v24;
    *(_BYTE *)(a4 + 280) = v65;
    *(_BYTE *)(a4 + 281) = v25;
    return result;
  }

  if (v43 != 0x7FFFFFFFFFFFFFFFLL)
  {
    double v20 = v43 - 1;
    if (!__OFSUB__(v43, 1LL))
    {
      double v21 = 0;
      goto LABEL_12;
    }

    __break(1u);
    goto LABEL_53;
  }

double *Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)@<X0>( double *a1@<X0>, const void *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, double *a6@<X8>)
{
  id v35 = a6;
  double v12 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  unsigned __int8 v13 = *a3;
  int v23 = *a4;
  unsigned __int8 v14 = *a5;
  uint64_t v15 = *v6;
  uint64_t v16 = v6[1];
  char v33 = 1;
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  double v28 = v12;
  memcpy(v27, a2, 0x11AuLL);
  LOBYTE(v26) = v13;
  uint64_t result = Calendar.dateAfterMatchingEra(startingAt:components:direction:matchedEra:)( &v28,  (uint64_t)v27,  (unsigned __int8 *)&v26,  &v33,  (uint64_t)&v31);
  if (v32) {
    double v18 = v12;
  }
  else {
    double v18 = v31;
  }
  double v19 = 0.0;
  char v20 = v33;
  if (v33 == 1)
  {
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    uint64_t result = Calendar.dateAfterMatchingYear(startingAt:components:direction:)( &v28,  v27,  (unsigned __int8 *)&v26,  (uint64_t)&v31);
    if (v7) {
      return result;
    }
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingYearForWeekOfYear(startingAt:components:direction:)( &v28,  (uint64_t)v27,  (unsigned __int8 *)&v26,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingQuarter(startingAt:components:direction:)( &v28,  (uint64_t)v27,  (unsigned __int8 *)&v26,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekOfYear(startingAt:components:direction:)( &v28,  (uint64_t)v27,  (unsigned __int8 *)&v26,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingDayOfYear(startingAt:components:direction:)( &v28,  (uint64_t)v27,  (unsigned __int8 *)&v26,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingMonth(startingAt:components:direction:strictMatching:)( &v28,  (uint64_t)v27,  (unsigned __int8 *)&v26,  v23 == 3,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekOfMonth(startingAt:components:direction:)( &v28,  (uint64_t)v27,  (unsigned __int8 *)&v26,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekdayOrdinal(startingAt:components:direction:)( &v28,  (uint64_t)v27,  (unsigned __int8 *)&v26,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekday(startingAt:components:direction:)( &v28,  (uint64_t)v27,  (unsigned __int8 *)&v26,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    double v26 = v12;
    memcpy(v27, __dst, 0x11AuLL);
    unsigned __int8 v25 = v13;
    Calendar.dateAfterMatchingDay(startingAt:originalStartDate:components:direction:)( &v28,  &v26,  (uint64_t)v27,  &v25,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    double v26 = v12;
    memcpy(v27, __dst, 0x11AuLL);
    unsigned __int8 v25 = v13;
    unsigned __int8 v24 = v23;
    Calendar.dateAfterMatchingHour(startingAt:originalStartDate:components:direction:findLastMatch:isStrictMatching:matchingPolicy:)( &v28,  &v26,  (uint64_t)v27,  &v25,  v14,  v23 == 3,  &v24,  (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    Calendar.dateAfterMatchingMinute(startingAt:components:direction:)(&v28, (uint64_t)v27, (uint64_t)&v31);
    if (!v32) {
      double v18 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v18;
    double v26 = v12;
    memcpy(v27, __dst, 0x11AuLL);
    unsigned __int8 v25 = v13;
    Calendar.dateAfterMatchingSecond(startingAt:originalStartDate:components:direction:)( &v28,  &v26,  (uint64_t)v27,  &v25,  (uint64_t)&v31);
    if (v32) {
      double v21 = v18;
    }
    else {
      double v21 = v31;
    }
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    double v28 = v21;
    memcpy(v27, __dst, 0x11AuLL);
    uint64_t result = Calendar.dateAfterMatchingNanosecond(startingAt:components:direction:)(&v28, (uint64_t)v27, (uint64_t)&v31);
    double v19 = v31;
    if (v32) {
      double v19 = v21;
    }
  }

  unsigned __int8 v22 = v35;
  *id v35 = v19;
  *((_BYTE *)v22 + 8) = v20 ^ 1;
  return result;
}

void Calendar.bumpedDateUpToNextHigherUnitInComponents(_:_:_:_:)( double *a1@<X0>, unsigned __int8 *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v6 = *a1;
  int v7 = *a2;
  double v8 = *(double *)a3;
  char v9 = *(_BYTE *)(a3 + 8);
  double v11 = *v4;
  double v10 = v4[1];
  DateComponents.highestSetUnit.getter((char *)&v27);
  char v12 = LOBYTE(v27);
  if (LOBYTE(v27) < 2u)
  {
    char v12 = 1;
  }

  else if (LOBYTE(v27) == 18 {
         || LOBYTE(v27) != 12
  }
         && (LOBYTE(v25) = LOBYTE(v27),
             Calendar.Component.nextHigherUnit.getter(&v27),
             char v12 = LOBYTE(v27),
             LOBYTE(v27) == 18))
  {
LABEL_10:
    *(void *)a4 = 0LL;
LABEL_11:
    char v16 = 1;
LABEL_29:
    *(_BYTE *)(a4 + 8) = v16;
    return;
  }

  LOBYTE(v23) = v12;
  double v13 = 1.59271755e13;
  if (v6 <= 1.59271755e13) {
    double v13 = v6;
  }
  double v14 = fmax(v13, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v25 = v14;
  (*(void (**)(double *__return_ptr, double *, double *, uint64_t, double))(*(void *)&v10 + 160LL))( &v27,  &v23,  &v25,  ObjectType,  COERCE_DOUBLE(*(void *)&v10));
  if ((v29 & 1) != 0) {
    goto LABEL_10;
  }
  double v17 = v28;
  if (v7) {
    double v17 = -1.0;
  }
  double v18 = v27 + v17;
  if ((v9 & 1) != 0 || (v8 < v18 ? (int v19 = 1) : (int v19 = v7), v19 == 1 && (v18 < v8 || ((v7 ^ 1) & 1) != 0)))
  {
LABEL_28:
    char v16 = 0;
    *(double *)a4 = v18;
    goto LABEL_29;
  }

  DateComponents.lowestSetUnit.getter((char *)&v27);
  char v21 = LOBYTE(v27);
  if (LOBYTE(v27) != 18)
  {
    double v27 = v11;
    double v28 = v10;
    char v24 = v21;
    if (v7) {
      Swift::Int v22 = -1LL;
    }
    else {
      Swift::Int v22 = 1LL;
    }
    double v23 = v8;
    Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)&v24,  v22,  v20,  (Swift::Bool)&v23);
    if ((v26 & 1) != 0)
    {
      *(double *)a4 = v25;
      goto LABEL_11;
    }

    double v18 = v25;
    goto LABEL_28;
  }

  __break(1u);
}

void Calendar._adjustedDateForMismatches(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isForwardDST:isExactMatch:isLeapDay:)( void *__src@<X3>, double *a2@<X0>, double *a3@<X1>, double *a4@<X2>, __int128 *a5@<X4>, char *a6@<X5>, unsigned __int8 *a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10, _BYTE *a11, _BYTE *a12)
{
  void (*v52)(_OWORD *__return_ptr, uint64_t, void);
  int v53;
  char v54;
  int v55;
  uint64_t v56;
  int v57;
  double v58;
  double v59;
  void (*v60)(double *__return_ptr, uint64_t *, double *, uint64_t, void);
  double v61;
  double v62;
  _BYTE *v63;
  double v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned __int8 v70;
  char v71;
  int v73;
  int v75;
  unsigned __int8 v77;
  double v78;
  void v79[36];
  double v80;
  char v81;
  double v82[36];
  double v83[36];
  double v84[36];
  uint64_t v85;
  unsigned __int8 v86;
  _OWORD __srca[18];
  __int128 __dst[18];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101;
  _DWORD v102[2];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE *v107;
  uint64_t v107 = a11;
  double v15 = *a2;
  double v16 = *a3;
  double v17 = *a4;
  memcpy(__dst, __src, 0x11AuLL);
  __int128 v18 = a5[1];
  unint64_t v103 = *a5;
  __int128 v19 = *a5;
  unint64_t v104 = a5[1];
  unint64_t v105 = a5[2];
  __int128 v20 = a5[2];
  uint64_t v106 = a5[3];
  uint64_t v21 = *((void *)a5 + 8);
  int v22 = *((unsigned __int8 *)a5 + 72);
  v102[0] = *(_DWORD *)((char *)a5 + 73);
  *(_DWORD *)((char *)v102 + 3) = *((_DWORD *)a5 + 19);
  uint64_t v23 = *((void *)a5 + 10);
  int v24 = *((unsigned __int8 *)a5 + 88);
  __int128 v25 = *(__int128 *)((char *)a5 + 233);
  __int128 v26 = *(__int128 *)((char *)a5 + 265);
  uint64_t v99 = *(__int128 *)((char *)a5 + 249);
  uint64_t v100 = v26;
  char v101 = *((_BYTE *)a5 + 281);
  __int128 v27 = *(__int128 *)((char *)a5 + 169);
  __int128 v28 = *(__int128 *)((char *)a5 + 201);
  uint64_t v95 = *(__int128 *)((char *)a5 + 185);
  uint64_t v96 = v28;
  uint64_t v97 = *(__int128 *)((char *)a5 + 217);
  uint64_t v98 = v25;
  __int128 v29 = *(__int128 *)((char *)a5 + 105);
  __int128 v30 = *(__int128 *)((char *)a5 + 137);
  char v91 = *(__int128 *)((char *)a5 + 121);
  uint64_t v92 = v30;
  uint64_t v93 = *(__int128 *)((char *)a5 + 153);
  uint64_t v94 = v27;
  char v89 = *(__int128 *)((char *)a5 + 89);
  char v90 = v29;
  char v71 = *a6;
  char v73 = *a7;
  uint64_t v70 = *a8;
  double v31 = *v12;
  double v32 = v12[1];
  *a10 = 0;
  *uint64_t v107 = 1;
  *a12 = 0;
  v84[0] = v31;
  v84[1] = v32;
  v82[0] = v17;
  __srca[0] = v19;
  __srca[1] = v18;
  __int128 v33 = a5[3];
  __srca[2] = v20;
  __srca[3] = v33;
  char v69 = v21;
  *(void *)&__srca[4] = v21;
  BYTE8(__srca[4]) = v22;
  *(_DWORD *)((char *)&__srca[4] + 9) = *(_DWORD *)((char *)a5 + 73);
  HIDWORD(__srca[4]) = *((_DWORD *)a5 + 19);
  *(void *)&__srca[5] = v23;
  BYTE8(__srca[5]) = v24;
  __int128 v34 = *(__int128 *)((char *)a5 + 233);
  __int128 v35 = *(__int128 *)((char *)a5 + 249);
  char v36 = *((_BYTE *)a5 + 281);
  *(_OWORD *)((char *)&__srca[16] + 9) = *(__int128 *)((char *)a5 + 265);
  *(_OWORD *)((char *)&__srca[5] + 9) = *(__int128 *)((char *)a5 + 89);
  __int128 v37 = *(__int128 *)((char *)a5 + 105);
  __int128 v38 = *(__int128 *)((char *)a5 + 121);
  __int128 v39 = *(__int128 *)((char *)a5 + 137);
  *(_OWORD *)((char *)&__srca[9] + 9) = *(__int128 *)((char *)a5 + 153);
  *(_OWORD *)((char *)&__srca[8] + 9) = v39;
  *(_OWORD *)((char *)&__srca[7] + 9) = v38;
  *(_OWORD *)((char *)&__srca[6] + 9) = v37;
  __int128 v40 = *(__int128 *)((char *)a5 + 169);
  __int128 v41 = *(__int128 *)((char *)a5 + 185);
  __int128 v42 = *(__int128 *)((char *)a5 + 201);
  *(_OWORD *)((char *)&__srca[13] + 9) = *(__int128 *)((char *)a5 + 217);
  *(_OWORD *)((char *)&__srca[12] + 9) = v42;
  *(_OWORD *)((char *)&__srca[11] + 9) = v41;
  *(_OWORD *)((char *)&__srca[10] + 9) = v40;
  BYTE9(__srca[17]) = v36;
  *(_OWORD *)((char *)&__srca[15] + 9) = v35;
  *(_OWORD *)((char *)&__srca[14] + 9) = v34;
  BOOL v43 = Calendar.date(_:containsMatchingComponents:)(v83, v82, (uint64_t *)__srca);
  double v44 = v83[0];
  if ((LOWORD(v83[0]) & 0x2200) != 0) {
    goto LABEL_2;
  }
  BOOL v45 = v43;
  char v67 = v23;
  uint64_t v68 = v24;
  uint8x8_t v46 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v83[0]);
  v46.i16[0] = vaddlv_u8(v46);
  uint64_t v47 = v107;
  if (v46.u32[0] == 1LL && (LOBYTE(v83[0]) & 0x10) != 0)
  {
    *(double *)__srca = v31;
    *((double *)__srca + 1) = v32;
    v83[0] = v17;
    LOBYTE(v82[0]) = v73;
    Calendar._adjustedDateForMismatchedHour(matchDate:compsToMatch:matchingPolicy:repeatedTimePolicy:isExactMatch:)( v83,  (unsigned __int8 *)v82,  v107,  (uint64_t)v84);
    if ((LOBYTE(v84[1]) & 1) == 0)
    {
      double v50 = v84[0];
      *a10 = 1;
      *(double *)a9 = v50;
      *(_BYTE *)(a9 + 8) = 0;
      return;
    }
  }

  if (v45) {
    goto LABEL_2;
  }
  *(double *)__srca = v44;
  Calendar.ComponentSet.highestSetUnit.getter((char *)v84);
  int v48 = LOBYTE(v84[0]);
  if (LOBYTE(v84[0]) == 18) {
    goto LABEL_2;
  }
  LOBYTE(__srca[0]) = LOBYTE(v84[0]);
  Calendar.Component.nextHigherUnit.getter(&v86);
  int v49 = v86;
  if ((LODWORD(v44) & 0x10000) == 0 && v86 == 18) {
    goto LABEL_2;
  }
  if (v48)
  {
    if (v48 == 1 || v48 == 12) {
      int v49 = v48;
    }
  }

  else
  {
    int v49 = 1;
  }

  char v75 = v49;
  uint64_t ObjectType = swift_getObjectType();
  char v52 = *(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)&v32 + 24LL);
  swift_unknownObjectRetain();
  v52(__srca, ObjectType, *(void *)&v32);
  swift_unknownObjectRelease();
  uint64_t v66 = LOBYTE(__srca[0]);
  swift_unknownObjectRetain();
  v52(__srca, ObjectType, *(void *)&v32);
  swift_unknownObjectRelease();
  char v53 = LOBYTE(__srca[0]);
  if (v75 == 18)
  {
    uint64_t v54 = v71;
    uint64_t v55 = v68;
    uint64_t v56 = v67;
    char v57 = v22;
    if ((LODWORD(v44) & 0x10000) != 0) {
      goto LABEL_38;
    }
    __break(1u);
  }

  uint64_t v54 = v71;
  uint64_t v55 = v68;
  uint64_t v56 = v67;
  char v57 = v22;
  if ((LODWORD(v44) & 0x10000) != 0 || v75 == 1)
  {
LABEL_38:
    if (((v57 | v55) & 1) == 0)
    {
      if (v53 == 2)
      {
        if ((LODWORD(v44) & 0x10000) != 0)
        {
          v84[0] = v31;
          v84[1] = v32;
          v83[0] = v15;
          v82[0] = v16;
          *(double *)char v79 = v17;
          __srca[0] = v103;
          __srca[1] = v104;
          __srca[2] = v105;
          __srca[3] = v106;
          *(void *)&__srca[4] = v69;
          BYTE8(__srca[4]) = v57;
          *(_DWORD *)((char *)&__srca[4] + 9) = v102[0];
          HIDWORD(__srca[4]) = *(_DWORD *)((char *)v102 + 3);
          *(void *)&__srca[5] = v56;
          BYTE8(__srca[5]) = v55;
          *(_OWORD *)((char *)&__srca[16] + 9) = v100;
          *(_OWORD *)((char *)&__srca[5] + 9) = v89;
          *(_OWORD *)((char *)&__srca[9] + 9) = v93;
          *(_OWORD *)((char *)&__srca[8] + 9) = v92;
          *(_OWORD *)((char *)&__srca[7] + 9) = v91;
          *(_OWORD *)((char *)&__srca[6] + 9) = v90;
          *(_OWORD *)((char *)&__srca[13] + 9) = v97;
          *(_OWORD *)((char *)&__srca[12] + 9) = v96;
          *(_OWORD *)((char *)&__srca[11] + 9) = v95;
          *(_OWORD *)((char *)&__srca[10] + 9) = v94;
          BYTE9(__srca[17]) = v101;
          *(_OWORD *)((char *)&__srca[15] + 9) = v99;
          *(_OWORD *)((char *)&__srca[14] + 9) = v98;
          LOBYTE(v80) = v54;
          LOBYTE(v85) = v73;
          LOBYTE(v78) = v70;
          Calendar._adjustedDateForMismatchedChineseLeapMonth(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)( (uint64_t)v83,  (uint64_t)v82,  (uint64_t)v79,  (uint64_t)__dst,  (uint64_t)__srca,  (uint64_t)&v80,  (uint64_t)&v85,  (uint64_t)&v78,  v47,  a12);
          return;
        }
      }

      else if ((LOBYTE(v44) & 0xC) != 0)
      {
        v84[0] = v31;
        v84[1] = v32;
        v83[0] = v15;
        v82[0] = v16;
        *(double *)char v79 = v17;
        __srca[0] = v103;
        __srca[1] = v104;
        __srca[2] = v105;
        __srca[3] = v106;
        *(void *)&__srca[4] = v69;
        BYTE8(__srca[4]) = v57;
        *(_DWORD *)((char *)&__srca[4] + 9) = v102[0];
        HIDWORD(__srca[4]) = *(_DWORD *)((char *)v102 + 3);
        *(void *)&__srca[5] = v56;
        BYTE8(__srca[5]) = v55;
        *(_OWORD *)((char *)&__srca[16] + 9) = v100;
        *(_OWORD *)((char *)&__srca[5] + 9) = v89;
        *(_OWORD *)((char *)&__srca[9] + 9) = v93;
        *(_OWORD *)((char *)&__srca[8] + 9) = v92;
        *(_OWORD *)((char *)&__srca[7] + 9) = v91;
        *(_OWORD *)((char *)&__srca[6] + 9) = v90;
        *(_OWORD *)((char *)&__srca[13] + 9) = v97;
        *(_OWORD *)((char *)&__srca[12] + 9) = v96;
        *(_OWORD *)((char *)&__srca[11] + 9) = v95;
        *(_OWORD *)((char *)&__srca[10] + 9) = v94;
        BYTE9(__srca[17]) = v101;
        *(_OWORD *)((char *)&__srca[15] + 9) = v99;
        *(_OWORD *)((char *)&__srca[14] + 9) = v98;
        if (v75 == 18)
        {
          __break(1u);
        }

        else
        {
          LOBYTE(v80) = v75;
          LOBYTE(v85) = v54;
          LOBYTE(v78) = v73;
          uint64_t v77 = v70;
          Calendar._adjustedDateForMismatchedLeapMonthOrDay(start:searchingDate:matchDate:matchingComponents:compsToMatch:nextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)( (uint64_t)v83,  (uint64_t)v82,  (uint64_t)v79,  (uint64_t)__dst,  (uint64_t)__srca,  (uint64_t)&v80,  (uint64_t)&v85,  (uint64_t)&v78,  &v77,  v47,  a12);
        }

        return;
      }
    }

BOOL Calendar.date(_:containsMatchingComponents:)(void *a1, double *a2, uint64_t *a3)
{
  __int128 v4 = *((_OWORD *)a3 + 15);
  __int128 v5 = *((_OWORD *)a3 + 13);
  __int128 v92 = *((_OWORD *)a3 + 14);
  __int128 v93 = v4;
  __int128 v6 = *((_OWORD *)a3 + 15);
  v94[0] = *((_OWORD *)a3 + 16);
  __int128 v7 = *((_OWORD *)a3 + 11);
  __int128 v8 = *((_OWORD *)a3 + 9);
  __int128 v88 = *((_OWORD *)a3 + 10);
  __int128 v89 = v7;
  __int128 v9 = *((_OWORD *)a3 + 11);
  __int128 v10 = *((_OWORD *)a3 + 13);
  __int128 v90 = *((_OWORD *)a3 + 12);
  __int128 v91 = v10;
  __int128 v11 = *((_OWORD *)a3 + 7);
  __int128 v12 = *((_OWORD *)a3 + 5);
  __int128 v84 = *((_OWORD *)a3 + 6);
  __int128 v85 = v11;
  __int128 v13 = *((_OWORD *)a3 + 7);
  __int128 v14 = *((_OWORD *)a3 + 9);
  __int128 v86 = *((_OWORD *)a3 + 8);
  __int128 v87 = v14;
  __int128 v15 = *((_OWORD *)a3 + 3);
  __int128 v80 = *((_OWORD *)a3 + 2);
  __int128 v81 = v15;
  __int128 v16 = *((_OWORD *)a3 + 5);
  __int128 v18 = *((_OWORD *)a3 + 2);
  __int128 v17 = *((_OWORD *)a3 + 3);
  __int128 v82 = *((_OWORD *)a3 + 4);
  __int128 v83 = v16;
  *(_OWORD *)((char *)v94 + 9) = *(_OWORD *)((char *)a3 + 265);
  *(_OWORD *)((char *)&__src[16] + 9) = *(_OWORD *)((char *)a3 + 265);
  __src[14] = v92;
  __src[15] = v6;
  __src[16] = *((_OWORD *)a3 + 16);
  __src[10] = v88;
  __src[11] = v9;
  __src[12] = v90;
  __src[13] = v5;
  __src[6] = v84;
  __src[7] = v13;
  __src[8] = v86;
  __src[9] = v8;
  __src[2] = v18;
  __src[3] = v17;
  double v19 = *a2;
  uint64_t v20 = *a3;
  uint64_t v21 = a3[1];
  uint64_t v22 = a3[2];
  uint64_t v23 = a3[3];
  int v24 = *((unsigned __int8 *)a3 + 281);
  uint64_t v25 = *v3;
  uint64_t v26 = v3[1];
  *(void *)&__src[0] = *a3;
  *((void *)&__src[0] + 1) = v21;
  *(void *)&__src[1] = v22;
  *((void *)&__src[1] + 1) = v23;
  __src[4] = v82;
  __src[5] = v12;
  int v37 = v24;
  BYTE9(__src[17]) = v24;
  DateComponents.setUnits.getter(&v78);
  __int16 v27 = v78;
  *(void *)&__src[0] = v78;
  double v28 = 1.59271755e13;
  if (v19 <= 1.59271755e13) {
    double v28 = v19;
  }
  double v29 = fmax(v28, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__dst = v29;
  (*(void (**)(uint64_t *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))(v26 + 192))( &v60,  __src,  __dst,  ObjectType,  v26);
  uint64_t v31 = v60;
  if ((v27 & 0x4000) != 0)
  {
    uint64_t v60 = v25;
    uint64_t v61 = v26;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((void)v62)
    {
      __src[0] = v62;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__src);
      uint64_t v31 = v60;
    }

    else
    {
      uint64_t v31 = v25;
    }
  }

  __int128 v32 = v62;
  *(_OWORD *)((char *)&__src[16] + 10) = *(_OWORD *)((char *)v77 + 10);
  __src[14] = v75;
  __src[15] = v76;
  __src[16] = v77[0];
  __src[10] = v71;
  __src[11] = v72;
  __src[12] = v73;
  __src[13] = v74;
  __src[6] = v67;
  __src[7] = v68;
  __src[8] = v69;
  __src[9] = v70;
  __src[2] = v63;
  __src[3] = v64;
  __src[4] = v65;
  __src[5] = v66;
  *(void *)&__src[0] = v31;
  *((void *)&__src[0] + 1) = v61;
  __src[1] = v62;
  if (v20)
  {
    *(void *)&__src[0] = v20;
    *((void *)&__src[0] + 1) = v21;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((void)v32)
    {
      __dst[0] = v32;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
  }

  if (v22)
  {
    *(void *)&__src[1] = v22;
    *((void *)&__src[1] + 1) = v23;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(void *)&__src[0])
    {
      *(void *)&__dst[0] = v22;
      *((void *)&__dst[0] + 1) = v23;
      Calendar.timeZone.setter((uint64_t *)__dst);
    }

    else
    {
      swift_unknownObjectRelease();
    }
  }

  memcpy(__dst, __src, 0x11AuLL);
  memcpy(v58, __src, 0x11AuLL);
  *(void *)&__int128 v39 = v20;
  *((void *)&v39 + 1) = v21;
  uint64_t v40 = v22;
  uint64_t v41 = v23;
  *(_OWORD *)&v56[9] = *(_OWORD *)((char *)v94 + 9);
  __int128 v54 = v92;
  __int128 v55 = v93;
  *(_OWORD *)uint64_t v56 = v94[0];
  __int128 v50 = v88;
  __int128 v51 = v89;
  __int128 v52 = v90;
  __int128 v53 = v91;
  __int128 v46 = v84;
  __int128 v47 = v85;
  __int128 v48 = v86;
  __int128 v49 = v87;
  __int128 v42 = v80;
  __int128 v43 = v81;
  __int128 v44 = v82;
  __int128 v45 = v83;
  char v57 = v37;
  BOOL v33 = specialized static DateComponents.== infix(_:_:)((uint64_t)v58, &v39);
  if (v33)
  {
    outlined release of DateComponents((uint64_t)__dst);
    *a1 = 0LL;
  }

  else
  {
    *(void *)&v58[0] = v20;
    *((void *)&v58[0] + 1) = v21;
    *(void *)&v58[1] = v22;
    *((void *)&v58[1] + 1) = v23;
    *(_OWORD *)((char *)&v58[16] + 9) = *(_OWORD *)((char *)v94 + 9);
    v58[14] = v92;
    v58[15] = v93;
    v58[16] = v94[0];
    v58[10] = v88;
    v58[11] = v89;
    v58[12] = v90;
    v58[13] = v91;
    v58[6] = v84;
    v58[7] = v85;
    v58[8] = v86;
    v58[9] = v87;
    v58[2] = v80;
    v58[3] = v81;
    v58[4] = v82;
    v58[5] = v83;
    BYTE9(v58[17]) = v37;
    DateComponents.mismatchedUnits(comparedTo:)((uint64_t)v58, (uint64_t *)&v39);
    outlined release of DateComponents((uint64_t)__dst);
    uint64_t v34 = v39;
    if ((v39 & 0x10000) != 0 && v37 == 2) {
      uint64_t v34 = v39 & 0xFFFFFFFFFFFEFFFFLL;
    }
    *a1 = v34;
  }

  return v33;
}

void *Calendar._adjustedDateForMismatchedHour(matchDate:compsToMatch:matchingPolicy:repeatedTimePolicy:isExactMatch:)@<X0>( double *a1@<X0>, unsigned __int8 *a2@<X2>, _BYTE *a3@<X4>, uint64_t a4@<X8>)
{
  void (*v20)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v21;
  double v22;
  double v23;
  Foundation::Date v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  void v29[15];
  char v30;
  uint64_t v31;
  void v32[15];
  char v33;
  uint64_t v34;
  double v35[2];
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v5 = v4;
  double v8 = *a1;
  int v9 = *a2;
  uint64_t v10 = *v4;
  uint64_t v11 = v5[1];
  LOBYTE(v29[0]) = 4;
  if (v8 <= 1.59271755e13) {
    double v12 = v8;
  }
  else {
    double v12 = 1.59271755e13;
  }
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__int128 v32 = v13;
  uint64_t result = (*(void *(**)(double *__return_ptr, void *, void *, uint64_t, uint64_t))(v11 + 160))( v35,  v29,  v32,  ObjectType,  v11);
  if ((v36 & 1) != 0) {
    goto LABEL_21;
  }
  double v16 = v35[0];
  double v17 = v35[1];
  double v18 = v35[0];
  __int128 v39 = 16LL;
  if (v35[0] <= 1.59271755e13) {
    double v19 = v35[0];
  }
  else {
    double v19 = 1.59271755e13;
  }
  v32[0] = fmax(v19, -2.11845067e11);
  uint64_t v20 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v11 + 192);
  v20(v35, &v39, (double *)v32, ObjectType, v11);
  outlined release of DateComponents((uint64_t)v35);
  if (v38) {
    uint64_t v21 = 0LL;
  }
  else {
    uint64_t v21 = v37;
  }
  uint64_t v22 = v17 + v18;
  uint64_t v34 = 16LL;
  if (v22 <= 1.59271755e13) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 1.59271755e13;
  }
  v29[0] = fmax(v23, -2.11845067e11);
  v20((double *)v32, &v34, (double *)v29, ObjectType, v11);
  uint64_t result = (void *)outlined release of DateComponents((uint64_t)v32);
  uint64_t v25 = v32[14];
  if (v33) {
    uint64_t v25 = 0LL;
  }
  if (__OFSUB__(v25, v21))
  {
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }

  if (v25 - v21 <= 1 && (v21 != 23 || v25 <= 0))
  {
    uint64_t v26 = v18 + -1.0;
    uint64_t v31 = 16LL;
    if (v18 + -1.0 > 1.59271755e13) {
      uint64_t v26 = 1.59271755e13;
    }
    double v28 = fmax(v26, -2.11845067e11);
    v20((double *)v29, &v31, &v28, ObjectType, v11);
    uint64_t result = (void *)outlined release of DateComponents((uint64_t)v29);
    __int16 v27 = v29[14];
    if (v30) {
      __int16 v27 = 0LL;
    }
    if (!__OFSUB__(v21, v27))
    {
      if (v21 - v27 <= 1 && (v27 != 23 || v21 <= 0)) {
        goto LABEL_21;
      }
      if (v9 == 3) {
        goto LABEL_21;
      }
      *a3 = 0;
      if (v9 == 2) {
        goto LABEL_21;
      }
      if (!v9)
      {
        *(double *)a4 = v16;
        *(_BYTE *)(a4 + 8) = 0;
        return result;
      }

      goto LABEL_37;
    }

    goto LABEL_40;
  }

  if (v9 == 3)
  {
LABEL_21:
    *(void *)a4 = 0LL;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }

  *a3 = 0;
  if (v9)
  {
    if (v9 == 1)
    {
      v29[0] = v10;
      v29[1] = v11;
      LOBYTE(v28) = 4;
      uint64_t v31 = *(void *)&v8;
      *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)&v28,  1LL,  v24,  (Swift::Bool)&v31);
      return result;
    }

char *Calendar._adjustedDateForMismatchedLeapMonthOrDay(start:searchingDate:matchDate:matchingComponents:compsToMatch:nextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, _BYTE *a10, _BYTE *a11)
{
  void (*v49)(__int128 *__return_ptr, uint64_t, uint64_t);
  Foundation::Date v50;
  uint64_t v51;
  BOOL v52;
  Swift::Int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  double v67;
  BOOL v68;
  uint64_t v69;
  void (*v70)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t);
  Foundation::Date v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(_OWORD *__return_ptr, __int128 *, uint64_t, uint64_t);
  double v76;
  __int128 *v77;
  char v78;
  uint64_t v79;
  void (*v80)(_OWORD *__return_ptr, __int128 *, uint64_t, uint64_t);
  Foundation::Date v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  BOOL v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  __int128 *v108;
  double v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  double v115;
  double v116;
  __int16 v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  double v122;
  uint64_t v123;
  double v124;
  __int16 v125;
  double v126;
  double v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  __int128 v133;
  BOOL v134;
  _BYTE *v135;
  BOOL v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  BOOL v142;
  char v143;
  BOOL v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  char v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  char v194;
  char v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  BOOL v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  uint64_t v210;
  char v211;
  int v212;
  void (*v213)(void *__return_ptr, void *, __int128 *);
  unsigned __int8 v214;
  BOOL v215;
  int v216;
  uint64_t v217;
  int v218;
  BOOL v219;
  uint64_t ObjectType;
  uint64_t v221;
  __int128 v222[18];
  __int128 v223[18];
  _OWORD v224[18];
  _OWORD v225[18];
  uint64_t v226;
  unsigned __int8 v227;
  _OWORD v228[18];
  __int128 v229[18];
  _OWORD v230[18];
  _OWORD v231[18];
  __int128 v232[18];
  __int128 v233[18];
  void __dst[36];
  void __src[36];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  char v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  _OWORD v254[19];
  double v13 = (double *)MEMORY[0x1895F8858](a1);
  __int128 v15 = v14;
  double v17 = v16;
  double v19 = v18;
  __int128 v221 = v20;
  double v21 = *v13;
  double v23 = *v22;
  __int128 v209 = *v24;
  __int128 v26 = *(_OWORD *)(v25 + 16);
  __int128 v250 = *(_OWORD *)v25;
  __int128 v251 = v26;
  __int128 v27 = *(_OWORD *)(v25 + 48);
  __int128 v252 = *(_OWORD *)(v25 + 32);
  uint64_t v253 = v27;
  uint64_t v28 = *(void *)(v25 + 64);
  char v29 = *(_BYTE *)(v25 + 72);
  __int128 v30 = *(_OWORD *)(v25 + 73);
  uint64_t v237 = *(_OWORD *)(v25 + 89);
  uint64_t v236 = v30;
  __int128 v31 = *(_OWORD *)(v25 + 105);
  __int128 v32 = *(_OWORD *)(v25 + 121);
  __int128 v33 = *(_OWORD *)(v25 + 137);
  __int128 v241 = *(_OWORD *)(v25 + 153);
  uint64_t v240 = v33;
  uint64_t v239 = v32;
  uint64_t v238 = v31;
  __int128 v34 = *(_OWORD *)(v25 + 169);
  __int128 v35 = *(_OWORD *)(v25 + 185);
  __int128 v36 = *(_OWORD *)(v25 + 201);
  __int128 v245 = *(_OWORD *)(v25 + 217);
  __int128 v244 = v36;
  __int128 v243 = v35;
  __int128 v242 = v34;
  __int128 v37 = *(_OWORD *)(v25 + 233);
  __int128 v38 = *(_OWORD *)(v25 + 249);
  __int128 v39 = *(_OWORD *)(v25 + 265);
  __int128 v249 = *(_BYTE *)(v25 + 281);
  __int128 v248 = v39;
  __int128 v247 = v38;
  __int128 v246 = v37;
  memcpy(v254, v40, 0x11AuLL);
  __int128 v211 = *v19;
  __int128 v216 = *v17;
  __int128 v218 = *v15;
  __int128 v214 = *a9;
  uint64_t v41 = *v11;
  uint64_t v42 = v11[1];
  __dst[0] = 14LL;
  if (v23 <= 1.59271755e13) {
    double v43 = v23;
  }
  else {
    double v43 = 1.59271755e13;
  }
  *(void *)&v233[0] = fmax(v43, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __int128 v213 = *(void (**)(void *__return_ptr, void *, __int128 *))(v42 + 192);
  v213(__src, __dst, v233);
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t v44 = __dst[8];
  uint64_t v45 = __dst[6];
  if (((BYTE8(v254[5]) & 1) != 0 || (__dst[11] & 1) == 0 && __dst[10] == *(void *)&v254[5])
    && (__dst[8] != *(void *)&v254[4] ? (char v46 = 1) : (char v46 = __dst[9]), (BYTE8(v254[4]) & 1) != 0 || (v46 & 1) == 0)
    || (((LOBYTE(__dst[7]) | LOBYTE(__dst[9])) | (BYTE8(v254[5]) | BYTE8(v254[4]))) & 1) != 0)
  {
    uint64_t result = (char *)outlined release of DateComponents((uint64_t)__dst);
    uint64_t v48 = v221;
    *(void *)__int128 v221 = 0LL;
LABEL_14:
    *(_BYTE *)(v48 + 8) = 1;
    return result;
  }

  __int128 v203 = *(void *)&v254[5];
  __int128 v208 = *(void *)&v254[4];
  uint64_t v207 = v12;
  __int128 v49 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v42 + 24);
  swift_unknownObjectRetain();
  v49(v233, ObjectType, v42);
  swift_unknownObjectRelease();
  if (!LOBYTE(v233[0]) && v208 == 2 && (v29 & 1) == 0 && v28 == 2)
  {
    __int128 v51 = v45 <= 0 ? -(-v45 & 3) : v45 & 3;
    if (v216)
    {
      __int128 v52 = v44 >= 2 && v51 == 0;
      __int128 v53 = v52 ? -4LL : -v51;
    }

    else
    {
      __int128 v53 = 4 - v51;
    }

    *(void *)&v233[0] = v41;
    *((void *)&v233[0] + 1) = v42;
    LOBYTE(v230[0]) = 1;
    *(double *)__int128 v231 = v23;
    Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)v230,  v53,  v50,  (Swift::Bool)v231);
    if ((BYTE8(v232[0]) & 1) == 0)
    {
      __int128 v54 = *(double *)v232;
      LOBYTE(v231[0]) = 1;
      *(void *)&v232[0] = fmax(v54, -2.11845067e11);
      (*(void (**)(__int128 *__return_ptr, _OWORD *, __int128 *, uint64_t, uint64_t))(v42 + 160))( v233,  v231,  v232,  ObjectType,  v42);
      if ((v233[1] & 1) == 0)
      {
        *(void *)&v232[0] = v41;
        *((void *)&v232[0] + 1) = v42;
        *(void *)&v230[0] = *(void *)&v233[0];
        memcpy(v233, v254, 0x11AuLL);
        LOBYTE(v229[0]) = 0;
        LOBYTE(v228[0]) = v218;
        LOBYTE(v225[0]) = v214;
        Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( (double *)v230,  v233,  (unsigned __int8 *)v229,  (unsigned __int8 *)v228,  (unsigned __int8 *)v225,  (double *)v231);
        if (v12)
        {
          uint64_t v77 = (__int128 *)__dst;
          return (char *)outlined release of DateComponents((uint64_t)v77);
        }

        unint64_t v103 = *(void *)&v231[0];
        if ((BYTE8(v231[0]) & 1) != 0)
        {
          uint64_t result = (char *)outlined release of DateComponents((uint64_t)__dst);
          *(void *)__int128 v221 = v103;
          *(_BYTE *)(v221 + 8) = 1;
          return result;
        }

        __int128 v209 = *(double *)v231;
        char v116 = *(double *)v231;
        DateComponents.setUnits.getter((uint64_t *)v228);
        uint64_t v117 = v228[0];
        *(void *)&v231[0] = *(void *)&v228[0];
        if (v116 <= 1.59271755e13) {
          unint64_t v118 = v116;
        }
        else {
          unint64_t v118 = 1.59271755e13;
        }
        *(void *)&v230[0] = fmax(v118, -2.11845067e11);
        ((void (*)(__int128 *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)( v232,  v231,  v230,  ObjectType,  v42);
        char v119 = *(void *)&v232[0];
        if ((v117 & 0x4000) != 0)
        {
          *(void *)&v232[0] = v41;
          *((void *)&v232[0] + 1) = v42;
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if (*(void *)&v232[1])
          {
            v231[0] = v232[1];
            swift_unknownObjectRetain();
            Calendar.timeZone.setter((uint64_t *)v231);
            char v119 = *(void *)&v232[0];
          }

          else
          {
            char v119 = v41;
          }
        }

        __int128 v129 = v232[1];
        *(__int128 *)((char *)&v233[16] + 10) = *(__int128 *)((char *)&v232[16] + 10);
        v233[14] = v232[14];
        v233[15] = v232[15];
        v233[16] = v232[16];
        v233[10] = v232[10];
        v233[11] = v232[11];
        v233[12] = v232[12];
        v233[13] = v232[13];
        v233[6] = v232[6];
        v233[7] = v232[7];
        v233[8] = v232[8];
        v233[9] = v232[9];
        v233[2] = v232[2];
        v233[3] = v232[3];
        v233[4] = v232[4];
        v233[5] = v232[5];
        *(void *)&v233[0] = v119;
        *((void *)&v233[0] + 1) = *((void *)&v232[0] + 1);
        v233[1] = v232[1];
        if (*(void *)&v254[0])
        {
          v233[0] = v254[0];
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if ((void)v129)
          {
            v231[0] = v129;
            swift_unknownObjectRetain();
            Calendar.timeZone.setter((uint64_t *)v231);
          }
        }

        __int128 v130 = *(void *)&v254[1];
        if (*(void *)&v254[1])
        {
          __int128 v131 = *((void *)&v254[1] + 1);
          v233[1] = v254[1];
          swift_unknownObjectRetain_n();
          swift_unknownObjectRelease();
          if (*(void *)&v233[0])
          {
            *(void *)&v231[0] = v130;
            *((void *)&v231[0] + 1) = v131;
            Calendar.timeZone.setter((uint64_t *)v231);
          }

          else
          {
            swift_unknownObjectRelease();
          }
        }

        memcpy(v231, v233, 0x11AuLL);
        memcpy(v230, v233, 0x11AuLL);
        memcpy(v229, v254, 0x11AuLL);
        __int128 v132 = specialized static DateComponents.== infix(_:_:)((uint64_t)v230, v229);
        outlined release of DateComponents((uint64_t)v231);
        if (v132)
        {
          uint64_t result = (char *)outlined release of DateComponents((uint64_t)__dst);
          __int128 v65 = 0;
LABEL_72:
          __int128 v66 = v221;
          __int128 v67 = v209;
LABEL_89:
          *(double *)__int128 v66 = v67;
          *(_BYTE *)(v66 + 8) = v65 & 1;
          return result;
        }
      }
    }
  }

  if (v218 == 3)
  {
    swift_unknownObjectRetain();
    v49(v233, ObjectType, v42);
    swift_unknownObjectRelease();
    if (LOBYTE(v233[0]))
    {
      *(double *)__int128 v230 = v23;
      v233[0] = v250;
      v233[1] = v251;
      v233[2] = v252;
      v233[3] = v253;
      *(__int128 *)((char *)&v233[16] + 9) = v248;
      *(__int128 *)((char *)&v233[14] + 9) = v246;
      *(__int128 *)((char *)&v233[15] + 9) = v247;
      *(__int128 *)((char *)&v233[10] + 9) = v242;
      *(__int128 *)((char *)&v233[11] + 9) = v243;
      *(__int128 *)((char *)&v233[12] + 9) = v244;
      *(__int128 *)((char *)&v233[13] + 9) = v245;
      *(__int128 *)((char *)&v233[6] + 9) = v238;
      *(__int128 *)((char *)&v233[7] + 9) = v239;
      *(__int128 *)((char *)&v233[8] + 9) = v240;
      *(__int128 *)((char *)&v233[9] + 9) = v241;
      *(__int128 *)((char *)&v233[4] + 9) = v236;
      *(void *)&v232[0] = v41;
      *((void *)&v232[0] + 1) = v42;
      *(void *)&v233[4] = v28;
      BYTE8(v233[4]) = v29;
      BYTE9(v233[17]) = v249;
      *(__int128 *)((char *)&v233[5] + 9) = v237;
      LOBYTE(v229[0]) = v211;
      LOBYTE(v228[0]) = v216;
      LOBYTE(v225[0]) = 3;
      LOBYTE(v224[0]) = v214;
      Calendar._matchingDate(after:matching:inNextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:)( (double *)v230,  v233,  v229,  (unsigned __int8 *)v228,  (unsigned __int8 *)v225,  (unsigned __int8 *)v224,  (double *)v231);
      if (v207) {
        return (char *)outlined release of DateComponents((uint64_t)__dst);
      }
      uint64_t result = (char *)outlined release of DateComponents((uint64_t)__dst);
      __int128 v67 = *(double *)v231;
      __int128 v65 = BYTE8(v231[0]);
      __int128 v66 = v221;
      goto LABEL_89;
    }

    uint64_t result = (char *)outlined release of DateComponents((uint64_t)__dst);
    __int128 v65 = 0;
    *a10 = 0;
    goto LABEL_72;
  }

  v232[0] = 0uLL;
  v231[0] = 0uLL;
  outlined retain of DateComponents((uint64_t)v254);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v232,  (uint64_t *)v231,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)v233,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  if (v45 == 0x7FFFFFFFFFFFFFFFLL) {
    __int128 v55 = 0LL;
  }
  else {
    __int128 v55 = v45;
  }
  *(void *)&v233[3] = v55;
  BYTE8(v233[3]) = v45 == 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v177 = BYTE9(v254[17]);
  if (v208 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v56 = 0LL;
  }
  else {
    uint64_t v56 = v208;
  }
  __int128 v198 = *(void *)&v254[17];
  uint64_t v179 = BYTE8(v254[17]);
  __int128 v195 = BYTE8(v254[16]);
  uint64_t v178 = *(void *)&v254[16];
  uint64_t v193 = *(void *)&v254[15];
  unint64_t v194 = BYTE8(v254[15]);
  unint64_t v192 = BYTE8(v254[14]);
  uint64_t v191 = *(void *)&v254[14];
  uint64_t v189 = *(void *)&v254[13];
  unint64_t v190 = BYTE8(v254[13]);
  uint64_t v187 = *(void *)&v254[12];
  uint64_t v188 = BYTE8(v254[12]);
  unint64_t v185 = *(void *)&v254[11];
  unint64_t v186 = BYTE8(v254[11]);
  uint64_t v183 = *(void *)&v254[10];
  unint64_t v184 = BYTE8(v254[10]);
  unint64_t v180 = *(void *)&v254[6];
  uint64_t v181 = BYTE8(v254[6]);
  char v57 = *(void *)&v254[3];
  __int128 v196 = *(void *)&v254[2];
  __int128 v197 = BYTE8(v254[2]);
  uint64_t v58 = v254[1];
  BYTE8(v233[4]) = v208 == 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&v233[5] = 1LL;
  char v59 = v254[0];
  *(void *)&v233[4] = v56;
  BYTE8(v233[5]) = 0;
  uint64_t v60 = *(void *)&v254[9];
  __int128 v212 = BYTE8(v254[9]);
  __int128 v210 = *(void *)&v254[8];
  __int128 v206 = BYTE8(v254[8]);
  __int128 v205 = *(void *)&v254[7];
  __int128 v204 = BYTE8(v254[7]);
  if (!v218)
  {
    unint64_t v182 = *(void *)&v254[9];
    *(void *)&v232[2] = *(void *)&v233[2];
    BYTE8(v232[2]) = BYTE8(v233[2]);
    __int128 v68 = v57 == 0x7FFFFFFFFFFFFFFFLL;
    if (v57 == 0x7FFFFFFFFFFFFFFFLL) {
      char v57 = 0LL;
    }
    *(void *)&v232[3] = v55;
    if (BYTE8(v254[3])) {
      __int128 v69 = v55;
    }
    else {
      __int128 v69 = v57;
    }
    BYTE8(v232[3]) = v45 == 0x7FFFFFFFFFFFFFFFLL;
    if (BYTE8(v254[3])) {
      __int128 v68 = v45 == 0x7FFFFFFFFFFFFFFFLL;
    }
    __int128 v202 = v68;
    *(void *)&v232[4] = v56;
    BYTE8(v232[4]) = v208 == 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&v232[6] = *(void *)&v233[6];
    BYTE8(v232[6]) = BYTE8(v233[6]);
    *(void *)&v232[7] = *(void *)&v233[7];
    BYTE8(v232[7]) = BYTE8(v233[7]);
    *(void *)&v232[8] = *(void *)&v233[8];
    BYTE8(v232[8]) = BYTE8(v233[8]);
    *(void *)&v232[9] = *(void *)&v233[9];
    BYTE8(v232[9]) = BYTE8(v233[9]);
    *(void *)&v232[10] = *(void *)&v233[10];
    BYTE8(v232[10]) = BYTE8(v233[10]);
    *(void *)&v232[11] = *(void *)&v233[11];
    BYTE8(v232[11]) = BYTE8(v233[11]);
    *(void *)&v232[12] = *(void *)&v233[12];
    BYTE8(v232[12]) = BYTE8(v233[12]);
    *(void *)&v232[13] = *(void *)&v233[13];
    BYTE8(v232[13]) = BYTE8(v233[13]);
    *(void *)&v232[14] = *(void *)&v233[14];
    BYTE8(v232[14]) = BYTE8(v233[14]);
    *(void *)&v232[15] = *(void *)&v233[15];
    BYTE8(v232[15]) = BYTE8(v233[15]);
    BYTE8(v232[16]) = BYTE8(v233[16]);
    *(void *)&v232[16] = *(void *)&v233[16];
    *(void *)&v232[17] = *(void *)&v233[17];
    WORD4(v232[17]) = WORD4(v233[17]);
    v232[0] = v233[0];
    v232[1] = v233[1];
    *(void *)&v232[5] = 1LL;
    BYTE8(v232[5]) = 0;
    memcpy(v231, v232, 0x11AuLL);
    __int128 v70 = *(void (**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t))(v42 + 176);
    outlined retain of DateComponents((uint64_t)v232);
    v70(v230, v231, ObjectType, v42);
    outlined release of DateComponents((uint64_t)v232);
    __int128 v72 = *(void *)&v230[0];
    if ((BYTE8(v230[0]) & 1) != 0) {
      goto LABEL_91;
    }
    __int128 v200 = v69;
    *(void *)&v231[0] = v41;
    *((void *)&v231[0] + 1) = v42;
    LOBYTE(v228[0]) = 2;
    *(void *)&v229[0] = *(void *)&v230[0];
    Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)v228,  1LL,  v71,  (Swift::Bool)v229);
    __int128 v72 = *(void *)&v230[0];
    uint64_t v78 = v177;
    char v79 = v198;
    if ((BYTE8(v230[0]) & 1) != 0)
    {
LABEL_91:
      outlined release of DateComponents((uint64_t)v232);
      outlined release of DateComponents((uint64_t)__dst);
      *(void *)__int128 v221 = v72;
      *(_BYTE *)(v221 + 8) = 1;
      v231[0] = v59;
      v231[1] = v58;
      *(void *)&v231[2] = v196;
      BYTE8(v231[2]) = v197;
      *(void *)&v231[3] = v69;
      BYTE8(v231[3]) = v202;
      *(void *)&v231[4] = v208;
      BYTE8(v231[4]) = 0;
      *(void *)&v231[5] = v203;
      BYTE8(v231[5]) = 0;
      *(void *)&v231[6] = v180;
      BYTE8(v231[6]) = v181;
      *(void *)&v231[7] = v205;
      BYTE8(v231[7]) = v204;
      *(void *)&v231[8] = v210;
      BYTE8(v231[8]) = v206;
      *(void *)&v231[9] = v182;
      BYTE8(v231[9]) = v212;
      *(void *)&v231[10] = v183;
      BYTE8(v231[10]) = v184;
      *(void *)&v231[11] = v185;
      BYTE8(v231[11]) = v186;
      *(void *)&v231[12] = v187;
      BYTE8(v231[12]) = v188;
      *(void *)&v231[13] = v189;
      BYTE8(v231[13]) = v190;
      *(void *)&v231[14] = v191;
      BYTE8(v231[14]) = v192;
      *(void *)&v231[15] = v193;
      BYTE8(v231[15]) = v194;
      BYTE8(v231[16]) = v195;
      *(void *)&v231[16] = v178;
      *(void *)&v231[17] = v198;
      BYTE8(v231[17]) = v179;
      BYTE9(v231[17]) = v177;
      return (char *)outlined release of DateComponents((uint64_t)v231);
    }

    unint64_t v104 = *(double *)v230;
    *(void *)&v222[0] = 4LL;
    *(void *)&v230[0] = fmax(v104, -2.11845067e11);
    ((void (*)(_OWORD *__return_ptr, __int128 *, _OWORD *, uint64_t, uint64_t))v213)( v231,  v222,  v230,  ObjectType,  v42);
    outlined release of DateComponents((uint64_t)v231);
    unint64_t v105 = *(void *)&v231[4];
    if (BYTE8(v231[4])) {
      unint64_t v105 = 0LL;
    }
    *(void *)&v230[5] = 1LL;
    BYTE8(v230[16]) = v195;
    BYTE8(v230[17]) = v179;
    uint64_t v106 = v105 == 0x7FFFFFFFFFFFFFFFLL;
    if (v105 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v107 = 0LL;
    }
    else {
      uint64_t v107 = v105;
    }
    *(void *)&v228[0] = v41;
    *((void *)&v228[0] + 1) = v42;
    *(double *)__int128 v224 = v21;
    v230[0] = v59;
    v230[1] = v58;
    *(void *)&v230[2] = v196;
    BYTE8(v230[2]) = v197;
    *(void *)&v230[3] = v69;
    BYTE8(v230[3]) = v202;
    *(void *)&v230[4] = v107;
    BYTE8(v230[4]) = v105 == 0x7FFFFFFFFFFFFFFFLL;
    BYTE8(v230[5]) = 0;
    *(void *)&v230[6] = v180;
    BYTE8(v230[6]) = v181;
    *(void *)&v230[7] = v205;
    BYTE8(v230[7]) = v204;
    *(void *)&v230[8] = v210;
    BYTE8(v230[8]) = v206;
    *(void *)&v230[9] = v182;
    BYTE8(v230[9]) = v212;
    *(void *)&v230[10] = v183;
    BYTE8(v230[10]) = v184;
    *(void *)&v230[11] = v185;
    BYTE8(v230[11]) = v186;
    *(void *)&v230[12] = v187;
    BYTE8(v230[12]) = v188;
    *(void *)&v230[13] = v189;
    BYTE8(v230[13]) = v190;
    *(void *)&v230[14] = v191;
    BYTE8(v230[14]) = v192;
    *(void *)&v230[15] = v193;
    BYTE8(v230[15]) = v194;
    *(void *)&v230[16] = v178;
    *(void *)&v230[17] = v198;
    BYTE9(v230[17]) = v177;
    memcpy(v229, v230, 0x11AuLL);
    LOBYTE(v223[0]) = v216;
    LOBYTE(v226) = 0;
    __int128 v227 = v214;
    outlined retain of DateComponents((uint64_t)v230);
    Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( (double *)v224,  v229,  (unsigned __int8 *)v223,  (unsigned __int8 *)&v226,  &v227,  (double *)v225);
    if (v207)
    {
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v230);
      char v108 = v232;
LABEL_131:
      outlined release of DateComponents((uint64_t)v108);
      return (char *)outlined release of DateComponents((uint64_t)v230);
    }

    __int128 v219 = v106;
    outlined release of DateComponents((uint64_t)v230);
    unint64_t v120 = *(void *)&v225[0];
    if ((BYTE8(v225[0]) & 1) != 0)
    {
      outlined release of DateComponents((uint64_t)v232);
      outlined release of DateComponents((uint64_t)__dst);
      uint64_t result = (char *)outlined release of DateComponents((uint64_t)v230);
      uint64_t v48 = v221;
      *(void *)__int128 v221 = v120;
      goto LABEL_14;
    }

    __int128 v67 = *(double *)v225;
    char v124 = *(double *)v225;
    DateComponents.setUnits.getter(&v226);
    __int128 v125 = v226;
    *(void *)&v225[0] = v226;
    if (v124 <= 1.59271755e13) {
      __int128 v126 = v124;
    }
    else {
      __int128 v126 = 1.59271755e13;
    }
    __int128 v127 = fmax(v126, -2.11845067e11);
    *(double *)__int128 v224 = v127;
    outlined retain of DateComponents((uint64_t)v230);
    ((void (*)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)( v228,  v225,  v224,  ObjectType,  v42);
    __int128 v128 = *(void *)&v228[0];
    if ((v125 & 0x4000) != 0)
    {
      *(void *)&v228[0] = v41;
      *((void *)&v228[0] + 1) = v42;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(void *)&v228[1])
      {
        v225[0] = v228[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v225);
        __int128 v128 = *(void *)&v228[0];
      }

      else
      {
        __int128 v128 = v41;
      }
    }

    unint64_t v140 = v178;
    unint64_t v141 = v228[1];
    *(__int128 *)((char *)&v229[16] + 10) = *(_OWORD *)((char *)&v228[16] + 10);
    v229[14] = v228[14];
    v229[15] = v228[15];
    v229[16] = v228[16];
    v229[10] = v228[10];
    v229[11] = v228[11];
    v229[12] = v228[12];
    v229[13] = v228[13];
    v229[6] = v228[6];
    v229[7] = v228[7];
    v229[8] = v228[8];
    v229[9] = v228[9];
    v229[2] = v228[2];
    v229[3] = v228[3];
    v229[4] = v228[4];
    v229[5] = v228[5];
    *(void *)&v229[0] = v128;
    *((void *)&v229[0] + 1) = *((void *)&v228[0] + 1);
    v229[1] = v228[1];
    if ((void)v59)
    {
      v229[0] = v59;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((void)v141)
      {
        v225[0] = v141;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v225);
      }
    }

    if ((void)v58)
    {
      v229[1] = v58;
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      if (*(void *)&v229[0])
      {
        v225[0] = v58;
        Calendar.timeZone.setter((uint64_t *)v225);
      }

      else
      {
        swift_unknownObjectRelease();
      }
    }

    memcpy(v225, v229, 0x11AuLL);
    memcpy(v224, v229, 0x11AuLL);
    memcpy(v223, v230, 0x11AuLL);
    char v142 = specialized static DateComponents.== infix(_:_:)((uint64_t)v224, v223);
    outlined release of DateComponents((uint64_t)v225);
    outlined release of DateComponents((uint64_t)v230);
    if (v142)
    {
      __int128 v227 = 3;
      *(double *)__int128 v223 = v127;
      (*(void (**)(_OWORD *__return_ptr, unsigned __int8 *, __int128 *, uint64_t, uint64_t))(v42 + 160))( v224,  &v227,  v223,  ObjectType,  v42);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v232);
      __int128 v65 = 0;
      uint64_t v138 = 0;
      if ((v224[1] & 1) == 0) {
        __int128 v67 = *(double *)v224;
      }
    }

    else
    {
      outlined release of DateComponents((uint64_t)v232);
      outlined release of DateComponents((uint64_t)__dst);
      __int128 v67 = 0.0;
      uint64_t v138 = 0;
      __int128 v65 = 1;
    }

    unint64_t v139 = 1LL;
    __int128 v66 = v221;
    unint64_t v135 = a10;
    unint64_t v136 = v219;
    uint64_t v137 = v107;
LABEL_190:
    v232[0] = v59;
    v232[1] = v58;
    *(void *)&v232[2] = v196;
    BYTE8(v232[2]) = v197;
    *(void *)&v232[3] = v200;
    BYTE8(v232[3]) = v202;
    *(void *)&v232[4] = v137;
    BYTE8(v232[4]) = v136;
    *(void *)&v232[5] = v139;
    BYTE8(v232[5]) = v138;
    *(void *)&v232[6] = v180;
    BYTE8(v232[6]) = v181;
    *(void *)&v232[7] = v205;
    BYTE8(v232[7]) = v204;
    *(void *)&v232[8] = v210;
    BYTE8(v232[8]) = v206;
    *(void *)&v232[9] = v182;
    BYTE8(v232[9]) = v212;
    *(void *)&v232[10] = v183;
    BYTE8(v232[10]) = v184;
    *(void *)&v232[11] = v185;
    BYTE8(v232[11]) = v186;
    *(void *)&v232[12] = v187;
    BYTE8(v232[12]) = v188;
    *(void *)&v232[13] = v189;
    BYTE8(v232[13]) = v190;
    *(void *)&v232[14] = v191;
    BYTE8(v232[14]) = v192;
    *(void *)&v232[15] = v193;
    BYTE8(v232[15]) = v194;
    BYTE8(v232[16]) = v195;
    *(void *)&v232[16] = v140;
    *(void *)&v232[17] = v79;
    BYTE8(v232[17]) = v179;
    BYTE9(v232[17]) = v78;
    uint64_t result = (char *)outlined release of DateComponents((uint64_t)v232);
    *unint64_t v135 = 0;
    *a11 = 1;
    goto LABEL_89;
  }

  int v144 = v45 == 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v171 = v55;
  uint64_t v175 = v56;
  __int128 v199 = *(void *)&v254[3];
  __int128 v201 = BYTE8(v254[3]);
  *(void *)&v231[0] = 112LL;
  if (v21 <= 1.59271755e13) {
    uint64_t v61 = v21;
  }
  else {
    uint64_t v61 = 1.59271755e13;
  }
  *(void *)&v230[0] = fmax(v61, -2.11845067e11);
  ((void (*)(__int128 *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)( v232,  v231,  v230,  ObjectType,  v42);
  memcpy(v231, v232, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v231);
  if (v204 && (__int128 v205 = *(void *)&v231[7], (BYTE8(v231[7]) & 1) != 0))
  {
    LOBYTE(v204) = 1;
    if (!v206) {
      goto LABEL_58;
    }
  }

  else
  {
    __int128 v62 = v205;
    LOBYTE(v204) = v205 == 0x7FFFFFFFFFFFFFFFLL;
    if (v205 == 0x7FFFFFFFFFFFFFFFLL) {
      __int128 v62 = 0LL;
    }
    __int128 v205 = v62;
    if (!v206) {
      goto LABEL_58;
    }
  }

  __int128 v210 = *(void *)&v231[8];
  if ((BYTE8(v231[8]) & 1) != 0)
  {
    LOBYTE(v206) = 1;
    if (!v212) {
      goto LABEL_63;
    }
    goto LABEL_61;
  }

double *Calendar._matchingDate(after:matching:inNextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:)@<X0>( double *a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, double *a7@<X8>)
{
  double v9 = *a1;
  uint64_t v36 = *((void *)a2 + 14);
  char v10 = *((_BYTE *)a2 + 120);
  uint64_t v11 = *a3;
  int v37 = *a4;
  unsigned __int8 v12 = *a5;
  unsigned __int8 v13 = *a6;
  double v15 = *v7;
  double v14 = v7[1];
  LOBYTE(v62) = *a3;
  double v16 = 1.59271755e13;
  if (v9 <= 1.59271755e13) {
    double v16 = v9;
  }
  double v17 = fmax(v16, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v63[0] = v17;
  (*(void (**)(__int128 *__return_ptr, double *, double *, uint64_t, double))(*(void *)&v14 + 160LL))( &v42,  &v62,  v63,  ObjectType,  COERCE_DOUBLE(*(void *)&v14));
  if ((v43 & 1) != 0)
  {
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)uint64_t v19 = v11;
    *(double *)(v19 + 8) = v9;
    *(_BYTE *)(v19 + 16) = 0;
    return (double *)swift_willThrow();
  }

  else
  {
    double v21 = *(double *)&v42;
    if (v37)
    {
      uint64_t v22 = a7;
      uint64_t v23 = v36;
      if ((_DWORD)v11 == 3)
      {
        double v21 = *(double *)&v42 + -1.0;
        char v24 = v10 | (v36 != 0);
      }

      else
      {
        char v24 = 1;
      }
    }

    else
    {
      char v24 = 0;
      double v21 = *((double *)&v42 + 1) + *(double *)&v42;
      uint64_t v22 = a7;
      uint64_t v23 = v36;
    }

    v63[0] = v15;
    v63[1] = v14;
    double v62 = v21;
    __int128 v25 = a2[5];
    __int128 v46 = a2[4];
    __int128 v47 = v25;
    __int128 v48 = a2[6];
    __int128 v26 = a2[1];
    __int128 v42 = *a2;
    __int128 v43 = v26;
    __int128 v27 = a2[3];
    __int128 v44 = a2[2];
    __int128 v45 = v27;
    uint64_t v49 = v23;
    char v50 = v10;
    char v28 = *((_BYTE *)a2 + 281);
    __int128 v29 = *(__int128 *)((char *)a2 + 249);
    __int128 v60 = *(__int128 *)((char *)a2 + 265);
    __int128 v30 = *(__int128 *)((char *)a2 + 121);
    __int128 v31 = *(__int128 *)((char *)a2 + 137);
    __int128 v32 = *(__int128 *)((char *)a2 + 169);
    __int128 v53 = *(__int128 *)((char *)a2 + 153);
    __int128 v52 = v31;
    __int128 v51 = v30;
    __int128 v33 = *(__int128 *)((char *)a2 + 185);
    __int128 v34 = *(__int128 *)((char *)a2 + 201);
    __int128 v35 = *(__int128 *)((char *)a2 + 233);
    __int128 v57 = *(__int128 *)((char *)a2 + 217);
    __int128 v56 = v34;
    __int128 v55 = v33;
    __int128 v54 = v32;
    char v61 = v28;
    __int128 v59 = v29;
    __int128 v58 = v35;
    unsigned __int8 v41 = v24 & 1;
    unsigned __int8 v40 = v12;
    unsigned __int8 v39 = v13;
    return Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( &v62,  &v42,  &v41,  &v40,  &v39,  v22);
  }

uint64_t Calendar.preserveSmallerUnits(_:compsToMatch:compsToModify:)(double *a1, uint64_t a2, uint64_t a3)
{
  double v5 = *a1;
  uint64_t v6 = *(void *)(a2 + 112);
  int v7 = *(unsigned __int8 *)(a2 + 120);
  uint64_t v8 = *(void *)(a2 + 128);
  int v9 = *(unsigned __int8 *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 144);
  int v18 = *(unsigned __int8 *)(a2 + 152);
  uint64_t v11 = *(void *)(v3 + 8);
  __dst[0] = 112LL;
  if (v5 > 1.59271755e13) {
    double v5 = 1.59271755e13;
  }
  double v12 = fmax(v5, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v20 = v12;
  (*(void (**)(void *__return_ptr, void *, double *, uint64_t, uint64_t))(v11 + 192))( __src,  __dst,  &v20,  ObjectType,  v11);
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  if (v7 && (uint64_t v6 = __dst[14], (__dst[15] & 1) != 0))
  {
    BOOL v15 = 1;
  }

  else
  {
    BOOL v15 = v6 == 0x7FFFFFFFFFFFFFFFLL;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v6 = 0LL;
    }
  }

  *(void *)(a3 + 112) = v6;
  *(_BYTE *)(a3 + 120) = v15;
  if (v9 && (uint64_t v8 = __dst[16], (__dst[17] & 1) != 0))
  {
    BOOL v16 = 1;
  }

  else
  {
    BOOL v16 = v8 == 0x7FFFFFFFFFFFFFFFLL;
    if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v8 = 0LL;
    }
  }

  *(void *)(a3 + 128) = v8;
  *(_BYTE *)(a3 + 136) = v16;
  if (v18 && (uint64_t v10 = __dst[18], (__dst[19] & 1) != 0))
  {
    BOOL v17 = 1;
  }

  else
  {
    BOOL v17 = v10 == 0x7FFFFFFFFFFFFFFFLL;
    if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v10 = 0LL;
    }
  }

  *(void *)(a3 + 144) = v10;
  *(_BYTE *)(a3 + 152) = v17;
  return result;
}

uint64_t Calendar._adjustedDateForMismatchedChineseLeapMonth(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, _BYTE *a10)
{
  void (*v44)(void *__return_ptr, void, void, void, void);
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  __int16 v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  __int16 v55;
  double v56;
  double v57;
  __int128 v58;
  BOOL v59;
  __int128 v60;
  BOOL v61;
  double v62;
  double v63;
  uint64_t v64;
  BOOL v65;
  char v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  double v76;
  int v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  int v117;
  unsigned __int8 v118;
  void (*v119)(void *__return_ptr, void, void, void, void);
  uint64_t v120;
  double v121[36];
  double v122;
  double v123;
  double v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  __int128 v128[18];
  double v129;
  unsigned __int8 v130;
  uint64_t v131;
  double v132;
  double v133;
  char v134;
  __int128 v135[18];
  _OWORD v136[18];
  _OWORD v137[18];
  __int128 v138[18];
  _OWORD v139[18];
  _OWORD v140[18];
  double v141;
  double v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _OWORD v158[2];
  uint64_t v159;
  _OWORD __src[18];
  _OWORD v161[18];
  void v162[36];
  void __dst[36];
  void v164[36];
  void v165[38];
  uint64_t v166;
  double v12 = (uint64_t *)MEMORY[0x1895F8858](a1);
  double v14 = v13;
  BOOL v16 = v15;
  int v18 = v17;
  uint64_t v20 = v19;
  uint64_t v21 = *v12;
  uint64_t v23 = *v22;
  double v25 = *v24;
  int v27 = *(unsigned __int8 *)(v26 + 281);
  memcpy(v165, v28, 0x11AuLL);
  char v116 = *v18;
  uint64_t v117 = *v16;
  unint64_t v118 = *v14;
  double v30 = *v10;
  double v29 = v10[1];
  __dst[0] = 15LL;
  if (v25 <= 1.59271755e13) {
    double v31 = v25;
  }
  else {
    double v31 = 1.59271755e13;
  }
  double v32 = fmax(v31, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t v162 = v32;
  char v119 = *(void (**)(void *__return_ptr, void, void, void, void))(*(void *)&v29 + 192LL);
  v119(v164, __dst, v162, ObjectType, *(void *)&v29);
  memcpy(__dst, v164, 0x11AuLL);
  if (v27 == 2 || BYTE1(__dst[35]) == 2 || (__dst[35] & 0x100LL) != 0 || (v27 & 1) == 0)
  {
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    *(double *)uint64_t v20 = v25;
    *(_BYTE *)(v20 + 8) = 0;
    return result;
  }

  __int128 v88 = v20;
  uint64_t v115 = v11;
  *a9 = 0;
  uint64_t v114 = v165[35];
  char v112 = v165[32];
  char v113 = v165[34];
  uint64_t v110 = v165[31];
  uint64_t v111 = v165[33];
  char v108 = v165[28];
  char v109 = v165[30];
  uint64_t v106 = v165[27];
  uint64_t v107 = v165[29];
  unint64_t v104 = v165[24];
  unint64_t v105 = v165[26];
  uint64_t v102 = v165[23];
  unint64_t v103 = v165[25];
  uint64_t v100 = v165[20];
  char v101 = v165[22];
  uint64_t v98 = v165[19];
  uint64_t v99 = v165[21];
  uint64_t v96 = v165[16];
  uint64_t v97 = v165[18];
  uint64_t v94 = v165[15];
  uint64_t v95 = v165[17];
  __int128 v92 = v165[12];
  __int128 v93 = v165[14];
  __int128 v91 = v165[11];
  uint64_t v166 = v165[2];
  unint64_t v120 = v165[0];
  memcpy(v161, v165, 0x11AuLL);
  LOBYTE(v162[33]) = v165[33];
  LOWORD(v162[35]) = LOBYTE(v165[35]);
  BYTE9(v161[17]) = 0;
  v162[0] = v165[0];
  __int128 v90 = v165[1];
  v162[1] = v165[1];
  v162[2] = v165[2];
  __int128 v89 = v165[3];
  v162[3] = v165[3];
  __int128 v80 = v165[4];
  v162[4] = v165[4];
  __int128 v81 = v165[5];
  LOBYTE(v162[5]) = v165[5];
  __int128 v82 = v165[6];
  v162[6] = v165[6];
  __int128 v83 = v165[7];
  __int128 v84 = v165[9];
  LOBYTE(v162[7]) = v165[7];
  __int128 v85 = v165[8];
  __int128 v86 = v165[10];
  v162[8] = v165[8];
  LOBYTE(v162[9]) = v165[9];
  v162[10] = v165[10];
  LOBYTE(v162[11]) = v165[11];
  v162[12] = v165[12];
  char v34 = v165[13];
  LOBYTE(v162[13]) = v165[13];
  v162[14] = v165[14];
  LOBYTE(v162[15]) = v165[15];
  v162[16] = v165[16];
  LOBYTE(v162[17]) = v165[17];
  v162[18] = v165[18];
  LOBYTE(v162[19]) = v165[19];
  v162[20] = v165[20];
  LOBYTE(v162[21]) = v165[21];
  v162[22] = v165[22];
  LOBYTE(v162[23]) = v165[23];
  v162[24] = v165[24];
  double v35 = v30;
  LOBYTE(v162[25]) = v165[25];
  v162[26] = v165[26];
  LOBYTE(v162[27]) = v165[27];
  v162[28] = v165[28];
  LOBYTE(v162[29]) = v165[29];
  v162[30] = v165[30];
  LOBYTE(v162[31]) = v165[31];
  v162[32] = v165[32];
  v162[34] = v165[34];
  uint64_t v36 = ObjectType;
  DateComponents.setUnits.getter(&v159);
  __int16 v37 = v159;
  *(void *)&v140[0] = v159;
  *(double *)unint64_t v139 = v32;
  outlined retain of DateComponents((uint64_t)v165);
  outlined retain of DateComponents((uint64_t)v162);
  v119(&v141, v140, v139, ObjectType, *(void *)&v29);
  double v38 = v141;
  if ((v37 & 0x4000) != 0)
  {
    unint64_t v141 = v35;
    char v142 = v29;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((void)v143)
    {
      v140[0] = v143;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)v140);
      double v38 = v141;
    }

    else
    {
      double v38 = v35;
    }
  }

  __int128 v40 = v143;
  *(_OWORD *)((char *)&__src[16] + 10) = *(_OWORD *)((char *)v158 + 10);
  __src[14] = v156;
  __src[15] = v157;
  __src[16] = v158[0];
  __src[10] = v152;
  __src[11] = v153;
  __src[12] = v154;
  __src[13] = v155;
  __src[6] = v148;
  __src[7] = v149;
  __src[8] = v150;
  __src[9] = v151;
  __src[2] = v144;
  __src[3] = v145;
  __src[4] = v146;
  __src[5] = v147;
  *(double *)__int128 __src = v38;
  *((double *)__src + 1) = v142;
  __src[1] = v143;
  if (v120)
  {
    *(void *)&__src[0] = v120;
    *((void *)&__src[0] + 1) = v90;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((void)v40)
    {
      v140[0] = v40;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)v140);
    }
  }

  __int128 v87 = v25;
  unsigned __int8 v41 = v118;
  if (v166)
  {
    *(void *)&__src[1] = v166;
    *((void *)&__src[1] + 1) = v89;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(void *)&__src[0])
    {
      *(void *)&v140[0] = v166;
      *((void *)&v140[0] + 1) = v89;
      Calendar.timeZone.setter((uint64_t *)v140);
    }

    else
    {
      swift_unknownObjectRelease();
    }
  }

  memcpy(v140, __src, 0x11AuLL);
  memcpy(v139, __src, 0x11AuLL);
  memcpy(v138, v162, 0x11AuLL);
  BOOL v42 = specialized static DateComponents.== infix(_:_:)((uint64_t)v139, v138);
  outlined release of DateComponents((uint64_t)v140);
  outlined release of DateComponents((uint64_t)v162);
  if (!v42)
  {
    *(double *)uint64_t v138 = v35;
    *((double *)v138 + 1) = v29;
    *(void *)&v136[0] = v23;
    memcpy(v139, v162, 0x11AuLL);
    LOBYTE(v135[0]) = v116;
    LOBYTE(v128[0]) = v117;
    LOBYTE(v121[0]) = v118;
    outlined retain of DateComponents((uint64_t)v162);
    Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( (double *)v136,  v139,  (unsigned __int8 *)v135,  (unsigned __int8 *)v128,  (unsigned __int8 *)v121,  (double *)v137);
    if (v115)
    {
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v162);
      return outlined release of DateComponents((uint64_t)v162);
    }

    outlined release of DateComponents((uint64_t)v162);
    __int128 v47 = *(void *)&v137[0];
    if ((BYTE8(v137[0]) & 1) != 0)
    {
      outlined release of DateComponents((uint64_t)v162);
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
      *(void *)__int128 v88 = v47;
      *(_BYTE *)(v88 + 8) = 1;
      return result;
    }

    __int128 v87 = *(double *)v137;
    double v25 = *(double *)v137;
    DateComponents.setUnits.getter((uint64_t *)v128);
    char v50 = v128[0];
    *(void *)&v137[0] = *(void *)&v128[0];
    if (v25 <= 1.59271755e13) {
      __int128 v51 = v25;
    }
    else {
      __int128 v51 = 1.59271755e13;
    }
    *(void *)&v136[0] = fmax(v51, -2.11845067e11);
    outlined retain of DateComponents((uint64_t)v162);
    v119(v138, v137, v136, ObjectType, *(void *)&v29);
    __int128 v52 = *(double *)v138;
    uint64_t v115 = 0LL;
    if ((v50 & 0x4000) != 0)
    {
      *(double *)uint64_t v138 = v35;
      *((double *)v138 + 1) = v29;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(void *)&v138[1])
      {
        v137[0] = v138[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v137);
        __int128 v52 = *(double *)v138;
      }

      else
      {
        __int128 v52 = v35;
      }
    }

    unsigned __int8 v41 = v118;
    __int128 v58 = v138[1];
    *(_OWORD *)((char *)&v139[16] + 10) = *(__int128 *)((char *)&v138[16] + 10);
    v139[14] = v138[14];
    v139[15] = v138[15];
    v139[16] = v138[16];
    v139[10] = v138[10];
    v139[11] = v138[11];
    v139[12] = v138[12];
    v139[13] = v138[13];
    v139[6] = v138[6];
    v139[7] = v138[7];
    v139[8] = v138[8];
    v139[9] = v138[9];
    v139[2] = v138[2];
    v139[3] = v138[3];
    v139[4] = v138[4];
    v139[5] = v138[5];
    *(double *)unint64_t v139 = v52;
    *((void *)&v139[0] + 1) = *((void *)&v138[0] + 1);
    v139[1] = v138[1];
    if (v120)
    {
      *(void *)&v139[0] = v120;
      *((void *)&v139[0] + 1) = v90;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((void)v58)
      {
        v137[0] = v58;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v137);
      }
    }

    if (v166)
    {
      *(void *)&v139[1] = v166;
      *((void *)&v139[1] + 1) = v89;
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      if (*(void *)&v139[0])
      {
        *(void *)&v137[0] = v166;
        *((void *)&v137[0] + 1) = v89;
        Calendar.timeZone.setter((uint64_t *)v137);
      }

      else
      {
        swift_unknownObjectRelease();
      }
    }

    memcpy(v137, v139, 0x11AuLL);
    memcpy(v136, v139, 0x11AuLL);
    memcpy(v135, v162, 0x11AuLL);
    __int128 v59 = specialized static DateComponents.== infix(_:_:)((uint64_t)v136, v135);
    outlined release of DateComponents((uint64_t)v137);
    outlined release of DateComponents((uint64_t)v162);
    if (!v59)
    {
      outlined release of DateComponents((uint64_t)v162);
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
      *(void *)__int128 v88 = 0LL;
      *(_BYTE *)(v88 + 8) = 1;
      return result;
    }
  }

  LOBYTE(v138[0]) = 2;
  if (v25 <= 1.59271755e13) {
    double v43 = v25;
  }
  else {
    double v43 = 1.59271755e13;
  }
  *(void *)&v139[0] = fmax(v43, -2.11845067e11);
  __int128 v44 = *(void (**)(void *__return_ptr, void, void, void, void))(*(void *)&v29 + 160LL);
  v44(&v132, v138, v139, ObjectType, *(void *)&v29);
  if ((v134 & 1) != 0)
  {
    outlined release of DateComponents((uint64_t)v162);
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    *(double *)__int128 v88 = v87;
    *(_BYTE *)(v88 + 8) = 0;
    return result;
  }

  *(void *)&v139[2] = v80;
  BYTE8(v139[2]) = v81;
  __int128 v45 = v132;
  *(void *)&v139[3] = v82;
  BYTE9(v161[17]) = 1;
  __int128 v46 = v133 + v132;
  *(double *)uint64_t v137 = v35;
  *((double *)v137 + 1) = v29;
  *(double *)unint64_t v135 = v133 + v132;
  *(void *)&v139[0] = v120;
  *((void *)&v139[0] + 1) = v90;
  *(void *)&v139[1] = v166;
  *((void *)&v139[1] + 1) = v89;
  BYTE8(v139[3]) = v83;
  *(void *)&v139[4] = v85;
  BYTE8(v139[4]) = v84;
  *(void *)&v139[5] = v86;
  BYTE8(v139[5]) = v91;
  *(void *)&v139[6] = v92;
  BYTE8(v139[6]) = v34;
  *(void *)&v139[7] = v93;
  BYTE8(v139[7]) = v94;
  *(void *)&v139[8] = v96;
  BYTE8(v139[8]) = v95;
  *(void *)&v139[9] = v97;
  BYTE8(v139[9]) = v98;
  *(void *)&v139[10] = v100;
  BYTE8(v139[10]) = v99;
  *(void *)&v139[11] = v101;
  BYTE8(v139[11]) = v102;
  *(void *)&v139[12] = v104;
  BYTE8(v139[12]) = v103;
  *(void *)&v139[13] = v105;
  BYTE8(v139[13]) = v106;
  *(void *)&v139[14] = v108;
  BYTE8(v139[14]) = v107;
  *(void *)&v139[15] = v109;
  BYTE8(v139[15]) = v110;
  BYTE8(v139[16]) = v111;
  *(void *)&v139[16] = v112;
  *(void *)&v139[17] = v113;
  BYTE8(v139[17]) = v114;
  BYTE9(v139[17]) = 1;
  memcpy(v138, v139, 0x11AuLL);
  LOBYTE(v128[0]) = v116;
  LOBYTE(v121[0]) = v117;
  LOBYTE(v122) = v41;
  outlined retain of DateComponents((uint64_t)v139);
  Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( (double *)v135,  v138,  (unsigned __int8 *)v128,  (unsigned __int8 *)v121,  (unsigned __int8 *)&v122,  (double *)v136);
  if (v115)
  {
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of DateComponents((uint64_t)v139);
    return outlined release of DateComponents((uint64_t)v139);
  }

  outlined release of DateComponents((uint64_t)v139);
  if ((BYTE8(v136[0]) & 1) != 0)
  {
    __int128 v48 = v35;
    uint64_t v49 = v88;
  }

  else
  {
    __int128 v53 = *(void *)&v136[0];
    __int128 v54 = *(double *)v136;
    DateComponents.setUnits.getter((uint64_t *)v121);
    __int128 v55 = LOWORD(v121[0]);
    *(double *)unint64_t v136 = v121[0];
    if (v54 <= 1.59271755e13) {
      __int128 v56 = v54;
    }
    else {
      __int128 v56 = 1.59271755e13;
    }
    *(void *)&v135[0] = fmax(v56, -2.11845067e11);
    outlined retain of DateComponents((uint64_t)v139);
    v119(v137, v136, v135, v36, *(void *)&v29);
    __int128 v57 = *(double *)v137;
    if ((v55 & 0x4000) != 0)
    {
      *(double *)uint64_t v137 = v35;
      *((double *)v137 + 1) = v29;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(void *)&v137[1])
      {
        v136[0] = v137[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v136);
        __int128 v57 = *(double *)v137;
      }

      else
      {
        __int128 v57 = v35;
      }
    }

    unsigned __int8 v41 = v118;
    __int128 v60 = v137[1];
    *(__int128 *)((char *)&v138[16] + 10) = *(_OWORD *)((char *)&v137[16] + 10);
    v138[14] = v137[14];
    v138[15] = v137[15];
    v138[16] = v137[16];
    v138[10] = v137[10];
    v138[11] = v137[11];
    v138[12] = v137[12];
    v138[13] = v137[13];
    v138[6] = v137[6];
    v138[7] = v137[7];
    v138[8] = v137[8];
    v138[9] = v137[9];
    v138[2] = v137[2];
    v138[3] = v137[3];
    v138[4] = v137[4];
    v138[5] = v137[5];
    *(double *)uint64_t v138 = v57;
    *((void *)&v138[0] + 1) = *((void *)&v137[0] + 1);
    v138[1] = v137[1];
    if (v120)
    {
      *(void *)&v138[0] = v120;
      *((void *)&v138[0] + 1) = v90;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((void)v60)
      {
        v136[0] = v60;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v136);
      }
    }

    uint64_t v49 = v88;
    if (v166)
    {
      *(void *)&v138[1] = v166;
      *((void *)&v138[1] + 1) = v89;
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      if (*(void *)&v138[0])
      {
        *(void *)&v136[0] = v166;
        *((void *)&v136[0] + 1) = v89;
        Calendar.timeZone.setter((uint64_t *)v136);
      }

      else
      {
        swift_unknownObjectRelease();
      }
    }

    memcpy(v136, v138, 0x11AuLL);
    memcpy(v135, v138, 0x11AuLL);
    memcpy(v128, v139, 0x11AuLL);
    char v61 = specialized static DateComponents.== infix(_:_:)((uint64_t)v135, v128);
    outlined release of DateComponents((uint64_t)v136);
    outlined release of DateComponents((uint64_t)v139);
    if (v61)
    {
      outlined release of DateComponents((uint64_t)v139);
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
      *(void *)__int128 v88 = v53;
      *(_BYTE *)(v88 + 8) = 0;
      return result;
    }

    __int128 v48 = v35;
  }

  if (v117 == 3)
  {
    outlined release of DateComponents((uint64_t)v139);
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    *(void *)uint64_t v49 = 0LL;
    *(_BYTE *)(v49 + 8) = 1;
    return result;
  }

  __int128 v131 = 4LL;
  if (v46 <= 1.59271755e13) {
    double v62 = v46;
  }
  else {
    double v62 = 1.59271755e13;
  }
  __int128 v63 = fmax(v62, -2.11845067e11);
  *(double *)unint64_t v136 = v63;
  v119(v138, &v131, v136, v36, *(void *)&v29);
  memcpy(v137, v138, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v137);
  if ((BYTE9(v137[17]) & 1) != 0)
  {
    if (!v117)
    {
      LOBYTE(v128[0]) = 2;
      *(double *)unint64_t v135 = v63;
      v44(v136, v128, v135, v36, *(void *)&v29);
      outlined release of DateComponents((uint64_t)__dst);
      uint64_t result = outlined release of DateComponents((uint64_t)v139);
      __int128 v67 = v87;
      if ((v136[1] & 1) == 0) {
        __int128 v67 = *((double *)v136 + 1) + *(double *)v136;
      }
      goto LABEL_120;
    }

    *(double *)unint64_t v135 = v48;
    *((double *)v135 + 1) = v29;
    *(void *)&v128[0] = v21;
    memcpy(v136, v165, 0x11AuLL);
    Calendar.preserveSmallerUnits(_:compsToMatch:compsToModify:)((double *)v128, (uint64_t)v136, (uint64_t)v161);
    if (v117 == 1)
    {
      BYTE9(v161[17]) = 0;
      LOBYTE(v135[0]) = 3;
      *(double *)unint64_t v136 = v63;
      v44(v128, v135, v136, v36, *(void *)&v29);
      if ((v128[1] & 1) != 0)
      {
        uint64_t v166 = *(void *)&v161[16];
        v136[0] = v161[0];
        v136[1] = v161[1];
        *(void *)&v136[2] = *(void *)&v161[2];
        BYTE8(v136[2]) = BYTE8(v161[2]);
        *(void *)&v136[3] = *(void *)&v161[3];
        BYTE8(v136[3]) = BYTE8(v161[3]);
        *(void *)&v136[4] = *(void *)&v161[4];
        BYTE8(v136[4]) = BYTE8(v161[4]);
        *(void *)&v136[5] = 1LL;
        BYTE8(v136[5]) = 0;
        *(void *)&v136[6] = *(void *)&v161[6];
        BYTE8(v136[6]) = BYTE8(v161[6]);
        *(void *)&v136[7] = *(void *)&v161[7];
        BYTE8(v136[7]) = BYTE8(v161[7]);
        *(void *)&v136[8] = *(void *)&v161[8];
        BYTE8(v136[8]) = BYTE8(v161[8]);
        *(void *)&v136[9] = *(void *)&v161[9];
        BYTE8(v136[9]) = BYTE8(v161[9]);
        *(void *)&v136[10] = *(void *)&v161[10];
        BYTE8(v136[10]) = BYTE8(v161[10]);
        *(void *)&v136[11] = *(void *)&v161[11];
        BYTE8(v136[11]) = BYTE8(v161[11]);
        *(void *)&v136[12] = *(void *)&v161[12];
        BYTE8(v136[12]) = BYTE8(v161[12]);
        *(void *)&v136[13] = *(void *)&v161[13];
        BYTE8(v136[13]) = BYTE8(v161[13]);
        *(void *)&v136[14] = *(void *)&v161[14];
        BYTE8(v136[14]) = BYTE8(v161[14]);
        *(void *)&v136[15] = *(void *)&v161[15];
        BYTE8(v136[15]) = BYTE8(v161[15]);
        BYTE8(v136[16]) = BYTE8(v161[16]);
        *(void *)&v136[16] = *(void *)&v161[16];
        *(void *)&v136[17] = *(void *)&v161[17];
        WORD4(v136[17]) = BYTE8(v161[17]);
        outlined release of DateComponents((uint64_t)v136);
        uint64_t result = outlined release of DateComponents((uint64_t)__dst);
        __int128 v67 = v87;
        uint64_t v49 = v88;
        goto LABEL_120;
      }

      v121[0] = v48;
      v121[1] = v29;
      char v124 = *((double *)v128 + 1) + *(double *)v128;
      uint64_t v166 = *(void *)&v161[16];
      v136[0] = v161[0];
      v136[1] = v161[1];
      *(void *)&v136[2] = *(void *)&v161[2];
      BYTE8(v136[2]) = BYTE8(v161[2]);
      *(void *)&v136[3] = *(void *)&v161[3];
      BYTE8(v136[3]) = BYTE8(v161[3]);
      *(void *)&v136[4] = *(void *)&v161[4];
      BYTE8(v136[4]) = BYTE8(v161[4]);
      *(void *)&v136[5] = 1LL;
      BYTE8(v136[5]) = 0;
      *(void *)&v136[6] = *(void *)&v161[6];
      BYTE8(v136[6]) = BYTE8(v161[6]);
      *(void *)&v136[7] = *(void *)&v161[7];
      BYTE8(v136[7]) = BYTE8(v161[7]);
      *(void *)&v136[8] = *(void *)&v161[8];
      BYTE8(v136[8]) = BYTE8(v161[8]);
      *(void *)&v136[9] = *(void *)&v161[9];
      BYTE8(v136[9]) = BYTE8(v161[9]);
      *(void *)&v136[10] = *(void *)&v161[10];
      BYTE8(v136[10]) = BYTE8(v161[10]);
      *(void *)&v136[11] = *(void *)&v161[11];
      BYTE8(v136[11]) = BYTE8(v161[11]);
      *(void *)&v136[12] = *(void *)&v161[12];
      BYTE8(v136[12]) = BYTE8(v161[12]);
      *(void *)&v136[13] = *(void *)&v161[13];
      BYTE8(v136[13]) = BYTE8(v161[13]);
      *(void *)&v136[14] = *(void *)&v161[14];
      BYTE8(v136[14]) = BYTE8(v161[14]);
      *(void *)&v136[15] = *(void *)&v161[15];
      BYTE8(v136[15]) = BYTE8(v161[15]);
      BYTE8(v136[16]) = BYTE8(v161[16]);
      *(void *)&v136[16] = *(void *)&v161[16];
      *(void *)&v136[17] = *(void *)&v161[17];
      WORD4(v136[17]) = BYTE8(v161[17]);
      memcpy(v135, v136, 0x11AuLL);
      LOBYTE(v129) = 0;
      __int128 v130 = 1;
      __int128 v127 = v118;
      outlined retain of DateComponents((uint64_t)v136);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( &v124,  v135,  (unsigned __int8 *)&v129,  &v130,  &v127,  &v122);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v136);
      uint64_t result = outlined release of DateComponents((uint64_t)v136);
      __int128 v76 = v122;
      char v79 = LOBYTE(v123);
      __int128 v67 = v87;
      uint64_t v49 = v88;
    }

    else
    {
      LOBYTE(v128[0]) = 2;
      *(double *)unint64_t v136 = v63;
      v44(v135, v128, v136, v36, *(void *)&v29);
      if ((v135[1] & 1) != 0)
      {
        memcpy(v136, v161, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v136);
        uint64_t result = outlined release of DateComponents((uint64_t)__dst);
        __int128 v67 = v87;
        goto LABEL_120;
      }

      __int128 v68 = *((double *)v135 + 1) + *(double *)v135 + -1.0;
      *(void *)&v135[0] = 12LL;
      if (v68 <= 1.59271755e13) {
        __int128 v69 = v68;
      }
      else {
        __int128 v69 = 1.59271755e13;
      }
      *(void *)&v128[0] = fmax(v69, -2.11845067e11);
      v119(v136, v135, v128, v36, *(void *)&v29);
      memcpy(v135, v136, 0x11AuLL);
      __int128 v70 = *(void *)&v135[4];
      if (*(void *)&v135[4] == 0x7FFFFFFFFFFFFFFFLL) {
        __int128 v71 = 0LL;
      }
      else {
        __int128 v71 = *(void *)&v135[4];
      }
      if (*(void *)&v135[4] == 0x7FFFFFFFFFFFFFFFLL) {
        __int128 v72 = 1;
      }
      else {
        __int128 v72 = BYTE8(v135[4]);
      }
      __int128 v73 = *(void *)&v135[5];
      if (!BYTE8(v135[4])) {
        __int128 v70 = v71;
      }
      if (*(void *)&v135[5] == 0x7FFFFFFFFFFFFFFFLL) {
        __int128 v74 = 0LL;
      }
      else {
        __int128 v74 = *(void *)&v135[5];
      }
      if (*(void *)&v135[5] == 0x7FFFFFFFFFFFFFFFLL) {
        __int128 v75 = 1;
      }
      else {
        __int128 v75 = BYTE8(v135[5]);
      }
      if (!BYTE8(v135[5])) {
        __int128 v73 = v74;
      }
      uint64_t v122 = v48;
      char v123 = v29;
      *(void *)&v128[2] = *(void *)&v161[2];
      BYTE8(v128[2]) = BYTE8(v161[2]);
      *(void *)&v128[3] = *(void *)&v161[3];
      BYTE8(v128[3]) = BYTE8(v161[3]);
      *(void *)&v161[4] = v70;
      *(void *)&v128[4] = v70;
      BYTE8(v161[4]) = v72;
      BYTE8(v128[4]) = v72;
      *(void *)&v161[5] = v73;
      *(void *)&v128[5] = v73;
      BYTE8(v161[5]) = v75;
      BYTE8(v128[5]) = v75;
      *(void *)&v128[6] = *(void *)&v161[6];
      BYTE8(v128[6]) = BYTE8(v161[6]);
      *(void *)&v128[7] = *(void *)&v161[7];
      BYTE8(v128[7]) = BYTE8(v161[7]);
      *(void *)&v128[8] = *(void *)&v161[8];
      BYTE8(v128[8]) = BYTE8(v161[8]);
      *(void *)&v128[9] = *(void *)&v161[9];
      BYTE8(v128[9]) = BYTE8(v161[9]);
      *(void *)&v128[10] = *(void *)&v161[10];
      BYTE8(v128[10]) = BYTE8(v161[10]);
      *(void *)&v128[11] = *(void *)&v161[11];
      BYTE8(v128[11]) = BYTE8(v161[11]);
      *(void *)&v128[12] = *(void *)&v161[12];
      BYTE8(v128[12]) = BYTE8(v161[12]);
      *(void *)&v128[13] = *(void *)&v161[13];
      BYTE8(v128[13]) = BYTE8(v161[13]);
      *(void *)&v128[14] = *(void *)&v161[14];
      BYTE8(v128[14]) = BYTE8(v161[14]);
      *(void *)&v128[15] = *(void *)&v161[15];
      BYTE8(v128[15]) = BYTE8(v161[15]);
      BYTE8(v128[16]) = BYTE8(v161[16]);
      BYTE8(v128[17]) = BYTE8(v161[17]);
      *(void *)&v128[16] = *(void *)&v161[16];
      __int128 v129 = v68;
      v128[0] = v161[0];
      v128[1] = v161[1];
      *(void *)&v128[17] = *(void *)&v161[17];
      BYTE9(v128[17]) = 1;
      memcpy(v121, v128, 0x11AuLL);
      __int128 v130 = 1;
      __int128 v127 = v117;
      __int128 v126 = v118;
      outlined retain of DateComponents((uint64_t)v128);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( &v129,  v121,  &v130,  &v127,  &v126,  &v124);
      __int128 v67 = v87;
      outlined release of DateComponents((uint64_t)v135);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v128);
      uint64_t result = outlined release of DateComponents((uint64_t)v128);
      __int128 v76 = v124;
      char v79 = v125;
    }

    uint64_t v78 = v79 == 0;
LABEL_117:
    if (v78) {
      __int128 v67 = v76;
    }
    goto LABEL_120;
  }

  if (v117)
  {
    BYTE9(v161[17]) = 0;
    *(double *)unint64_t v135 = v48;
    *((double *)v135 + 1) = v29;
    *(void *)&v128[0] = v21;
    memcpy(v136, v165, 0x11AuLL);
    Calendar.preserveSmallerUnits(_:compsToMatch:compsToModify:)((double *)v128, (uint64_t)v136, (uint64_t)v161);
    if (v117 == 1)
    {
      *(void *)&char v124 = 4LL;
      *(double *)unint64_t v135 = v63;
      v119(v136, &v124, v135, v36, *(void *)&v29);
      outlined release of DateComponents((uint64_t)v136);
      __int128 v64 = *(void *)&v136[4];
      if (BYTE8(v136[4])) {
        __int128 v64 = 0LL;
      }
      __int128 v65 = v64 == 0x7FFFFFFFFFFFFFFFLL;
      v121[0] = v48;
      v121[1] = v29;
      *(void *)&v135[2] = *(void *)&v161[2];
      BYTE8(v135[2]) = BYTE8(v161[2]);
      *(void *)&v135[3] = *(void *)&v161[3];
      BYTE8(v135[3]) = BYTE8(v161[3]);
      if (v64 == 0x7FFFFFFFFFFFFFFFLL) {
        __int128 v64 = 0LL;
      }
      *(void *)&v135[4] = v64;
      __int128 v66 = v65;
      BYTE8(v135[4]) = v66;
      *(void *)&v135[5] = *(void *)&v161[5];
      BYTE8(v135[5]) = BYTE8(v161[5]);
      *(void *)&v135[6] = *(void *)&v161[6];
      BYTE8(v135[6]) = BYTE8(v161[6]);
      *(void *)&v135[7] = *(void *)&v161[7];
      BYTE8(v135[7]) = BYTE8(v161[7]);
      *(void *)&v135[8] = *(void *)&v161[8];
      BYTE8(v135[8]) = BYTE8(v161[8]);
      *(void *)&v135[9] = *(void *)&v161[9];
      BYTE8(v135[9]) = BYTE8(v161[9]);
      *(void *)&v135[10] = *(void *)&v161[10];
      BYTE8(v135[10]) = BYTE8(v161[10]);
      *(void *)&v135[11] = *(void *)&v161[11];
      BYTE8(v135[11]) = BYTE8(v161[11]);
      *(void *)&v135[12] = *(void *)&v161[12];
      BYTE8(v135[12]) = BYTE8(v161[12]);
      *(void *)&v135[13] = *(void *)&v161[13];
      BYTE8(v135[13]) = BYTE8(v161[13]);
      *(void *)&v135[14] = *(void *)&v161[14];
      BYTE8(v135[14]) = BYTE8(v161[14]);
      *(void *)&v135[15] = *(void *)&v161[15];
      BYTE8(v135[15]) = BYTE8(v161[15]);
      BYTE8(v135[16]) = BYTE8(v161[16]);
      WORD4(v135[17]) = WORD4(v161[17]);
      *(void *)&v135[16] = *(void *)&v161[16];
      *(void *)&v135[17] = *(void *)&v161[17];
      __int128 v129 = v46;
      v135[0] = v161[0];
      v135[1] = v161[1];
      memcpy(v128, v135, 0x11AuLL);
      __int128 v130 = 0;
      __int128 v127 = 1;
      __int128 v126 = v41;
      outlined retain of DateComponents((uint64_t)v135);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( &v129,  v128,  &v130,  &v127,  &v126,  &v122);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v135);
      uint64_t result = outlined release of DateComponents((uint64_t)v135);
      __int128 v76 = v122;
      uint64_t v77 = LOBYTE(v123);
    }

    else
    {
      *(double *)__int128 v128 = v48;
      *((double *)v128 + 1) = v29;
      uint64_t v122 = v45;
      memcpy(v136, v161, 0x11AuLL);
      memcpy(v135, v161, 0x11AuLL);
      LOBYTE(v124) = 0;
      LOBYTE(v129) = v117;
      __int128 v130 = v41;
      outlined retain of DateComponents((uint64_t)v136);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( &v122,  v135,  (unsigned __int8 *)&v124,  (unsigned __int8 *)&v129,  &v130,  v121);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v136);
      uint64_t result = outlined release of DateComponents((uint64_t)v136);
      __int128 v76 = v121[0];
      uint64_t v77 = LOBYTE(v121[1]);
    }

    uint64_t v78 = v77 == 0;
    __int128 v67 = v87;
    goto LABEL_117;
  }

  outlined release of DateComponents((uint64_t)v139);
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  __int128 v67 = v46;
LABEL_120:
  *a10 = 1;
  *(double *)uint64_t v49 = v67;
  *(_BYTE *)(v49 + 8) = 0;
  return result;
}

void Calendar.Component.nextHigherUnit.getter(_BYTE *a1@<X8>)
{
  *a1 = byte_1837A9486[*v1];
}

uint64_t initializeWithCopy for Calendar.DatesByMatching(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  __int128 v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  uint64_t v3 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v4 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v4;
  uint64_t v5 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v5;
  uint64_t v6 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v6;
  uint64_t v7 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v7;
  uint64_t v8 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v8;
  uint64_t v9 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v9;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(a2 + 332);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByMatching(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 331;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v19;
  uint64_t v20 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v20;
  uint64_t v21 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v21;
  uint64_t v22 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v22;
  uint64_t v23 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v23;
  uint64_t v24 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v24;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(v4 + 1);
  return a1;
}

void *__swift_memcpy333_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x14DuLL);
}

uint64_t assignWithTake for Calendar.DatesByMatching(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 331;
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v5 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v6 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v6;
  uint64_t v7 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v7;
  uint64_t v8 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v8;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(v4 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByMatching(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 333)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByMatching(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 332) = 0;
    *(_DWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 333) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 333) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByMatching()
{
  return &type metadata for Calendar.DatesByMatching;
}

uint64_t initializeWithCopy for Calendar.DatesByAdding(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  __int128 v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  uint64_t v3 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v4 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v4;
  uint64_t v5 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v5;
  uint64_t v6 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v6;
  uint64_t v7 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v7;
  uint64_t v8 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v8;
  uint64_t v9 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v9;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByAdding(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = v11;
  uint64_t v12 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = v13;
  uint64_t v14 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v14;
  uint64_t v15 = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = v15;
  uint64_t v16 = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = v16;
  uint64_t v17 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v17;
  uint64_t v18 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v18;
  uint64_t v19 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v19;
  uint64_t v20 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v20;
  uint64_t v21 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v21;
  uint64_t v22 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v22;
  uint64_t v23 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v23;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  return a1;
}

void *__swift_memcpy331_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x14BuLL);
}

uint64_t assignWithTake for Calendar.DatesByAdding(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v4 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v4;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v5 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v5;
  uint64_t v6 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v6;
  uint64_t v7 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v7;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByAdding(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 331)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByAdding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 330) = 0;
    *(_WORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 331) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 331) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByAdding()
{
  return &type metadata for Calendar.DatesByAdding;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.DatesByMatching.Iterator,  &type metadata for Calendar.DatesByMatching.Iterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.DatesByAdding.Iterator,  &type metadata for Calendar.DatesByAdding.Iterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator);
  }

  return result;
}

double *Calendar.dateAfterMatchingEra(startingAt:components:direction:matchedEra:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  void (*v14)(uint64_t *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t);
  double v17;
  double v18;
  double v19;
  uint64_t __dst[36];
  uint64_t v21;
  char v22;
  __int128 __src[18];
  _OWORD v24[6];
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int16 v40;
  void v41[4];
  uint64_t v42;
  char v43;
  uint64_t v44[3];
  if ((*(_BYTE *)(a2 + 40) & 1) != 0) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = *a3;
  uint64_t v10 = *(void *)(v5 + 8);
  double v11 = *result;
  v44[0] = 1LL;
  if (v11 > 1.59271755e13) {
    double v11 = 1.59271755e13;
  }
  double v12 = fmax(v11, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t v24 = v12;
  uint64_t v14 = *(void (**)(uint64_t *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v10 + 192);
  v14(v41, v44, (double *)v24, ObjectType, v10);
  unint64_t result = (double *)outlined release of DateComponents((uint64_t)v41);
  if ((v43 & 1) != 0)
  {
    if (!v8)
    {
LABEL_10:
      *(void *)a5 = 0LL;
      *(_BYTE *)(a5 + 8) = 1;
      return result;
    }

    if (v9)
    {
      if (v8 > 0)
      {
LABEL_8:
        *a4 = 0;
        goto LABEL_10;
      }
    }

    else if (v8 < 0)
    {
      goto LABEL_8;
    }
  }

  else
  {
    if (v8 == v42) {
      goto LABEL_10;
    }
    if (v9)
    {
      if (v42 < v8) {
        goto LABEL_8;
      }
    }

    else if (v8 < v42)
    {
      goto LABEL_8;
    }
  }

  __src[0] = 0uLL;
  __dst[0] = 0LL;
  __dst[1] = 0LL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __src,  __dst,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)v24,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v15 = 0LL;
  }
  else {
    uint64_t v15 = v8;
  }
  __src[0] = v24[0];
  __src[1] = v24[1];
  *(void *)&__src[2] = v15;
  BYTE8(__src[2]) = v8 == 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&__src[3] = 1LL;
  BYTE8(__src[3]) = 0;
  *(void *)&__src[4] = 1LL;
  BYTE8(__src[4]) = 0;
  *(void *)&__src[5] = 1LL;
  BYTE8(__src[5]) = 0;
  *(void *)&__src[6] = v25;
  BYTE8(__src[6]) = v26;
  *(void *)&__src[7] = 0LL;
  BYTE8(__src[7]) = 0;
  *(void *)&__src[8] = 0LL;
  BYTE8(__src[8]) = 0;
  *(void *)&__src[9] = 0LL;
  BYTE8(__src[9]) = 0;
  *(void *)&__src[10] = 0LL;
  BYTE8(__src[10]) = 0;
  *(void *)&__src[11] = v27;
  BYTE8(__src[11]) = v28;
  *(void *)&__src[12] = v29;
  BYTE8(__src[12]) = v30;
  *(void *)&__src[13] = v31;
  BYTE8(__src[13]) = v32;
  *(void *)&__src[14] = v33;
  BYTE8(__src[14]) = v34;
  *(void *)&__src[15] = v35;
  BYTE8(__src[15]) = v36;
  BYTE8(__src[16]) = v38;
  *(void *)&__src[16] = v37;
  *(void *)&__src[17] = v39;
  WORD4(__src[17]) = v40;
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v10 + 176);
  outlined retain of DateComponents((uint64_t)__src);
  v16(&v21, __dst, ObjectType, v10);
  outlined release of DateComponents((uint64_t)__src);
  uint64_t v17 = *(double *)&v21;
  if ((v22 & 1) != 0)
  {
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)__src);
    *a4 = 0;
    *(double *)a5 = v17;
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }

  uint64_t v18 = *(double *)&v21;
  uint64_t v21 = 1LL;
  if (v17 > 1.59271755e13) {
    uint64_t v18 = 1.59271755e13;
  }
  uint64_t v19 = fmax(v18, -2.11845067e11);
  v14(__dst, &v21, &v19, ObjectType, v10);
  outlined release of DateComponents((uint64_t)__dst);
  unint64_t result = (double *)outlined release of DateComponents((uint64_t)__src);
  if ((__dst[5] & 1) == 0)
  {
    if (__dst[4] == v8) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  if (v8) {
LABEL_24:
  }
    *a4 = 0;
LABEL_25:
  *(double *)a5 = v17;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

double *Calendar.dateAfterMatchingYear(startingAt:components:direction:)@<X0>( double *result@<X0>, __int128 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = *((_BYTE *)a2 + 56);
  if ((v6 & 1) != 0)
  {
    *(void *)a4 = 0LL;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }

  uint64_t v8 = *((void *)a2 + 6);
  int v28 = *a3;
  uint64_t v10 = *v4;
  uint64_t v9 = v4[1];
  double v11 = *result;
  __dst[0] = 3LL;
  if (v11 > 1.59271755e13) {
    double v11 = 1.59271755e13;
  }
  *(void *)&__int128 v30 = fmax(v11, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *__return_ptr, void *, __int128 *))(v9 + 192))(__src, __dst, &v30);
  memcpy(__dst, __src, 0x11AuLL);
  if ((__dst[7] & 1) != 0 || v8 == __dst[6])
  {
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(void *)a4 = 0LL;
LABEL_7:
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }

  uint64_t v12 = v8;
  *(void *)&__int128 v30 = v10;
  *((void *)&v30 + 1) = v9;
  if (LOBYTE(__dst[5])) {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v13 = __dst[4];
  }
  Calendar.dateIfEraHasYear(era:year:)(v13, v8, (uint64_t)&v50);
  double v14 = v50;
  if ((v51 & 1) != 0)
  {
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v14;
    goto LABEL_7;
  }

  __int128 v15 = a2[1];
  __int128 v30 = *a2;
  __int128 v31 = v15;
  __int128 v32 = a2[2];
  __int128 v16 = *(__int128 *)((char *)a2 + 249);
  __int128 v48 = *(__int128 *)((char *)a2 + 265);
  __int128 v17 = *(__int128 *)((char *)a2 + 217);
  __int128 v46 = *(__int128 *)((char *)a2 + 233);
  __int128 v47 = v16;
  __int128 v18 = *(__int128 *)((char *)a2 + 153);
  __int128 v42 = *(__int128 *)((char *)a2 + 169);
  __int128 v19 = *(__int128 *)((char *)a2 + 201);
  __int128 v43 = *(__int128 *)((char *)a2 + 185);
  __int128 v44 = v19;
  __int128 v45 = v17;
  __int128 v20 = *(__int128 *)((char *)a2 + 89);
  __int128 v38 = *(__int128 *)((char *)a2 + 105);
  __int128 v21 = *(__int128 *)((char *)a2 + 137);
  __int128 v39 = *(__int128 *)((char *)a2 + 121);
  __int128 v40 = v21;
  __int128 v41 = v18;
  __int128 v22 = *(__int128 *)((char *)a2 + 73);
  __int128 v35 = *(__int128 *)((char *)a2 + 57);
  __int128 v36 = v22;
  uint64_t v33 = v12;
  char v34 = v6;
  char v49 = *((_BYTE *)a2 + 281);
  __int128 v37 = v20;
  DateComponents.setUnits.getter((uint64_t *)&v50);
  int v23 = v28;
  if ((*(void *)&v50 & (*(void *)&v50 - 1LL)) == 0) {
    int v23 = 0;
  }
  if (v23 == 1)
  {
    char v29 = 1;
    if (v14 <= 1.59271755e13) {
      double v24 = v14;
    }
    else {
      double v24 = 1.59271755e13;
    }
    double v50 = fmax(v24, -2.11845067e11);
    (*(void (**)(__int128 *__return_ptr, char *, double *, uint64_t, uint64_t))(v9 + 160))( &v30,  &v29,  &v50,  ObjectType,  v9);
    if ((v31 & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(void *)uint64_t v25 = 1LL;
      *(double *)(v25 + 8) = v14;
      *(_BYTE *)(v25 + 16) = 0;
      swift_willThrow();
      return (double *)outlined release of DateComponents((uint64_t)__dst);
    }

    double v26 = *((double *)&v30 + 1);
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v26 + -1.0 + v14;
  }

  else
  {
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v14;
  }

  *(_BYTE *)(a4 + 8) = 0;
  return result;
}

double *Calendar.dateAfterMatchingYearForWeekOfYear(startingAt:components:direction:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  if ((*(_BYTE *)(a2 + 280) & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(a2 + 272);
  int v18 = *a3;
  double v9 = *v4;
  double v8 = v4[1];
  double v10 = *result;
  __dst[0] = 4097LL;
  if (v10 > 1.59271755e13) {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v20 = v11;
  (*(void (**)(void *__return_ptr, void *, double *, uint64_t, double))(*(void *)&v8 + 192LL))( __src,  __dst,  &v20,  ObjectType,  COERCE_DOUBLE(*(void *)&v8));
  memcpy(__dst, __src, 0x11AuLL);
  if (LOBYTE(__dst[35]) == 1)
  {
    if (v7 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  if (__dst[34] == v7)
  {
LABEL_12:
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
LABEL_13:
    *(void *)a4 = 0LL;
LABEL_14:
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }

double *Calendar.dateAfterMatchingQuarter(startingAt:components:direction:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void *(*v13)(void *__return_ptr, void, void, void, void);
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  char v27;
  double v28;
  double v29;
  char v30;
  if ((*(_BYTE *)(a2 + 216) & 1) != 0)
  {
    *(void *)a4 = 0LL;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }

  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 208);
  int v8 = *a3;
  uint64_t v9 = *(void *)(v4 + 8);
  int v27 = 1;
  if (v6 <= 1.59271755e13) {
    double v10 = v6;
  }
  else {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v26 = v11;
  uint64_t v13 = *(void *(**)(void *__return_ptr, void, void, void, void))(v9 + 160);
  unint64_t result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
  if ((v30 & 1) == 0)
  {
    double v6 = v28;
    if (v8)
    {
      double v6 = v28 + v29 + -1.0;
      if (v7 == 4) {
        goto LABEL_31;
      }
      int v27 = 9;
      if (v6 <= 1.59271755e13) {
        uint64_t v16 = v28 + v29 + -1.0;
      }
      else {
        uint64_t v16 = 1.59271755e13;
      }
      double v26 = fmax(v16, -2.11845067e11);
      unint64_t result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) != 0) {
        goto LABEL_54;
      }
      double v6 = v28 - v29;
      if (v7 == 3) {
        goto LABEL_31;
      }
      int v27 = 9;
      if (v6 <= 1.59271755e13) {
        double v17 = v28 - v29;
      }
      else {
        double v17 = 1.59271755e13;
      }
      double v26 = fmax(v17, -2.11845067e11);
      unint64_t result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) != 0) {
        goto LABEL_54;
      }
      double v6 = v28 - v29;
      if (v7 == 2) {
        goto LABEL_31;
      }
      int v27 = 9;
      if (v6 <= 1.59271755e13) {
        int v18 = v28 - v29;
      }
      else {
        int v18 = 1.59271755e13;
      }
      double v26 = fmax(v18, -2.11845067e11);
      unint64_t result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) != 0) {
        goto LABEL_54;
      }
      double v6 = v28 - v29;
      if (v7 == 1)
      {
LABEL_31:
        *(double *)a4 = v6;
        *(_BYTE *)(a4 + 8) = 0;
        return result;
      }

      int v27 = 9;
      if (v6 <= 1.59271755e13) {
        char v19 = v28 - v29;
      }
      else {
        char v19 = 1.59271755e13;
      }
      double v26 = fmax(v19, -2.11845067e11);
      unint64_t result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) == 0)
      {
        double v6 = v28 - v29;
        goto LABEL_31;
      }
    }

    else
    {
      if (v7 == 1) {
        goto LABEL_31;
      }
      else {
        double v20 = v7 - 2;
      }
      int v27 = 9;
      if (v28 <= 1.59271755e13) {
        double v21 = v28;
      }
      else {
        double v21 = 1.59271755e13;
      }
      double v26 = fmax(v21, -2.11845067e11);
      unint64_t result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) == 0)
      {
        double v6 = v29 + v28;
        if (!v20) {
          goto LABEL_31;
        }
        int v27 = 9;
        if (v6 <= 1.59271755e13) {
          char v22 = v29 + v28;
        }
        else {
          char v22 = 1.59271755e13;
        }
        double v26 = fmax(v22, -2.11845067e11);
        unint64_t result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
        if ((v30 & 1) == 0)
        {
          double v23 = v20 + 1;
          double v6 = v29 + v28;
          if (v23 == 2) {
            goto LABEL_31;
          }
          int v27 = 9;
          if (v6 <= 1.59271755e13) {
            char v24 = v29 + v28;
          }
          else {
            char v24 = 1.59271755e13;
          }
          double v26 = fmax(v24, -2.11845067e11);
          unint64_t result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
          if ((v30 & 1) == 0)
          {
            double v6 = v29 + v28;
            if (v23 == 3) {
              goto LABEL_31;
            }
            int v27 = 9;
            if (v6 <= 1.59271755e13) {
              uint64_t v25 = v29 + v28;
            }
            else {
              uint64_t v25 = 1.59271755e13;
            }
            double v26 = fmax(v25, -2.11845067e11);
            unint64_t result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
            if ((v30 & 1) == 0)
            {
              double v6 = v29 + v28;
              goto LABEL_31;
            }
          }
        }
      }
    }

double *Calendar.dateAfterMatchingWeekOfYear(startingAt:components:direction:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v14)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t);
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  double v22;
  void __dst[36];
  uint64_t v24;
  double __src[36];
  void v26[33];
  char v27;
  uint64_t v28;
  if ((*(_BYTE *)(a2 + 264) & 1) != 0) {
    goto LABEL_26;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 256);
  int v8 = *a3;
  uint64_t v9 = *(void *)(v4 + 8);
  int v28 = 2048LL;
  if (v6 <= 1.59271755e13) {
    double v10 = v6;
  }
  else {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v11;
  uint64_t v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)v26, &v28, __src, ObjectType, v9);
  unint64_t result = (double *)outlined release of DateComponents((uint64_t)v26);
  if ((v27 & 1) != 0)
  {
    if (v7) {
      goto LABEL_7;
    }
LABEL_26:
    *(void *)a4 = 0LL;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }

  if (v7 == v26[32]) {
    goto LABEL_26;
  }
LABEL_7:
  double v14 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v9 + 160);
  while (1)
  {
    LOBYTE(v24) = 11;
    if (v6 <= 1.59271755e13) {
      double v15 = v6;
    }
    else {
      double v15 = 1.59271755e13;
    }
    __dst[0] = fmax(v15, -2.11845067e11);
    v14(__src, &v24, __dst, ObjectType, v9);
    if ((LOBYTE(__src[2]) & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      double v21 = 0;
      *(void *)double v20 = 11LL;
      goto LABEL_29;
    }

    if (v8) {
      uint64_t v16 = __src[0] - __src[1];
    }
    else {
      uint64_t v16 = __src[1] + __src[0];
    }
    char v24 = 2048LL;
    if (v16 <= 1.59271755e13) {
      double v17 = v16;
    }
    else {
      double v17 = 1.59271755e13;
    }
    char v22 = fmax(v17, -2.11845067e11);
    v13(__src, &v24, &v22, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    int v18 = __dst[32];
    if (LOBYTE(__dst[33])) {
      int v18 = 0LL;
    }
    char v19 = v6 >= v16;
    if (v8) {
      char v19 = v16 >= v6;
    }
    if (v19) {
      break;
    }
    double v6 = v16;
    if (v7 == v18)
    {
      *(double *)a4 = v16;
      *(_BYTE *)(a4 + 8) = 0;
      return result;
    }
  }

  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(double *)double v20 = v16;
  double v21 = 1;
LABEL_29:
  *(double *)(v20 + 8) = v6;
  *(_BYTE *)(v20 + 16) = v21;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingDayOfYear(startingAt:components:direction:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v14)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t);
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  void __dst[36];
  uint64_t v23;
  double __src[36];
  void v25[13];
  char v26;
  uint64_t v27;
  if ((*(_BYTE *)(a2 + 104) & 1) != 0) {
    goto LABEL_26;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 96);
  int v8 = *a3;
  uint64_t v9 = *(void *)(v4 + 8);
  int v27 = 0x40000LL;
  if (v6 <= 1.59271755e13) {
    double v10 = v6;
  }
  else {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v11;
  uint64_t v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)v25, &v27, __src, ObjectType, v9);
  unint64_t result = (double *)outlined release of DateComponents((uint64_t)v25);
  if ((v26 & 1) != 0)
  {
    if (v7) {
      goto LABEL_7;
    }
LABEL_26:
    *(void *)a4 = 0LL;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }

  if (v7 == v25[12]) {
    goto LABEL_26;
  }
LABEL_7:
  double v14 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v9 + 160);
  while (1)
  {
    LOBYTE(v23) = 17;
    if (v6 <= 1.59271755e13) {
      double v15 = v6;
    }
    else {
      double v15 = 1.59271755e13;
    }
    __dst[0] = fmax(v15, -2.11845067e11);
    v14(__src, &v23, __dst, ObjectType, v9);
    if ((LOBYTE(__src[2]) & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      double v21 = 0;
      *(void *)double v20 = 17LL;
      goto LABEL_29;
    }

    if (v8) {
      uint64_t v16 = __src[0] - __src[1];
    }
    else {
      uint64_t v16 = __src[1] + __src[0];
    }
    double v23 = 0x40000LL;
    if (v16 <= 1.59271755e13) {
      double v17 = v16;
    }
    else {
      double v17 = 1.59271755e13;
    }
    __dst[0] = fmax(v17, -2.11845067e11);
    v13(__src, &v23, (double *)__dst, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    int v18 = __dst[12];
    if (LOBYTE(__dst[13])) {
      int v18 = 0LL;
    }
    char v19 = v6 >= v16;
    if (v8) {
      char v19 = v16 >= v6;
    }
    if (v19) {
      break;
    }
    double v6 = v16;
    if (v7 == v18)
    {
      *(double *)a4 = v16;
      *(_BYTE *)(a4 + 8) = 0;
      return result;
    }
  }

  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(double *)double v20 = v16;
  double v21 = 1;
LABEL_29:
  *(double *)(v20 + 8) = v6;
  *(_BYTE *)(v20 + 16) = v21;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingMonth(startingAt:components:direction:strictMatching:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, void *);
  BOOL v14;
  char v15;
  double v16;
  double v17;
  void (*v18)(double *__return_ptr, uint64_t *, double *, uint64_t, void *);
  void (*v19)(double *__return_ptr, void *, double *, uint64_t, void *);
  uint64_t v20;
  double v21;
  double v22;
  void (*v23)(double *__return_ptr, uint64_t *, void *, uint64_t, void *);
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  BOOL v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  uint64_t v39;
  char v40;
  double v43;
  void v44[36];
  uint64_t v45;
  uint64_t v46;
  double v47[36];
  double v48[36];
  void __dst[36];
  uint64_t v50;
  double __src[37];
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    *(void *)a5 = 0LL;
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }

  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 64);
  int v8 = *a3;
  uint64_t v9 = *(void **)(v5 + 8);
  int v10 = *(unsigned __int8 *)(a2 + 281);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = (void (*)(uint64_t *__return_ptr, uint64_t, void *))v9[3];
  swift_unknownObjectRetain();
  v12((uint64_t *)__src, ObjectType, v9);
  swift_unknownObjectRelease();
  double v14 = LOBYTE(__src[0]) != 2 || v10 == 2;
  double v15 = (v10 & 1) == 0 || v14;
  double v50 = 4LL;
  if (v6 <= 1.59271755e13) {
    uint64_t v16 = v6;
  }
  else {
    uint64_t v16 = 1.59271755e13;
  }
  double v17 = fmax(v16, -2.11845067e11);
  v48[0] = v17;
  int v18 = (void (*)(double *__return_ptr, uint64_t *, double *, uint64_t, void *))v9[24];
  v18(__src, &v50, v48, ObjectType, v9);
  memcpy(__dst, __src, 0x11AuLL);
  unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[9] & 1) != 0)
  {
    if (v7)
    {
LABEL_17:
      __int128 v40 = v15;
      char v19 = (void (*)(double *__return_ptr, void *, double *, uint64_t, void *))v9[20];
      LOBYTE(v44[0]) = 2;
      v47[0] = v17;
      v19(v48, v44, v47, ObjectType, v9);
      if ((LOBYTE(v48[2]) & 1) == 0)
      {
        do
        {
          uint64_t v25 = v6;
          double v26 = v48[1];
          int v27 = v48[0];
          if (v8)
          {
            v44[0] = 4LL;
            if (v48[0] <= 1.59271755e13) {
              int v28 = v48[0];
            }
            else {
              int v28 = 1.59271755e13;
            }
            v47[0] = fmax(v28, -2.11845067e11);
            v18(v48, v44, v47, ObjectType, v9);
            memcpy(v47, v48, 0x11AuLL);
            outlined release of DateComponents((uint64_t)v47);
            if ((LOBYTE(v47[9]) & 1) != 0) {
              goto LABEL_46;
            }
            if (*(void *)&v47[8] != 3LL) {
              goto LABEL_46;
            }
            swift_unknownObjectRetain();
            v12(&v46, ObjectType, v9);
            swift_unknownObjectRelease();
            if (!(_BYTE)v46) {
              goto LABEL_45;
            }
            swift_unknownObjectRetain();
            v12(&v46, ObjectType, v9);
            swift_unknownObjectRelease();
            swift_unknownObjectRetain();
            v12(&v46, ObjectType, v9);
            swift_unknownObjectRelease();
            if (v46 == 11
              || (swift_unknownObjectRetain(),
                  v12(&v46, ObjectType, v9),
                  swift_unknownObjectRelease(),
                  v46 == 7)
              || (swift_unknownObjectRetain(),
                  v12(&v46, ObjectType, v9),
                  swift_unknownObjectRelease(),
                  v46 == 13))
            {
LABEL_45:
              char v29 = -259200.0;
            }

            else
            {
LABEL_46:
              char v29 = -86400.0;
            }

            double v26 = -(v26 + v29);
          }

          double v6 = v27 + v26;
          v44[0] = 4LL;
          if (v6 <= 1.59271755e13) {
            __int128 v30 = v6;
          }
          else {
            __int128 v30 = 1.59271755e13;
          }
          __int128 v31 = fmax(v30, -2.11845067e11);
          __int128 v46 = *(void *)&v31;
          v18(v48, v44, (double *)&v46, ObjectType, v9);
          memcpy(v47, v48, 0x11AuLL);
          unint64_t result = (double *)outlined release of DateComponents((uint64_t)v47);
          if (LOBYTE(v47[9]) == 1)
          {
            if ((v8 & 1) != 0)
            {
              if (v6 >= v25) {
                goto LABEL_62;
              }
            }

            else if (v25 >= v6)
            {
              goto LABEL_62;
            }

            if (!v7) {
              goto LABEL_59;
            }
          }

          else
          {
            __int128 v32 = v25 >= v6;
            if (v8) {
              __int128 v32 = v6 >= v25;
            }
            if (v32)
            {
LABEL_62:
              lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
              swift_allocError();
              *(double *)uint64_t v33 = v6;
              *(double *)(v33 + 8) = v25;
              *(_BYTE *)(v33 + 16) = 1;
              return (double *)swift_willThrow();
            }

            if (v7 == *(void *)&v47[8])
            {
LABEL_59:
              if (v40 & 1 | ((a4 & 1) == 0)) {
                goto LABEL_60;
              }
              goto LABEL_23;
            }
          }

          LOBYTE(v44[0]) = 2;
          v47[0] = v31;
          v19(v48, v44, v47, ObjectType, v9);
        }

        while (LOBYTE(v48[2]) != 1);
      }

      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(void *)double v20 = 2LL;
      *(double *)(v20 + 8) = v6;
LABEL_19:
      *(_BYTE *)(v20 + 16) = 0;
      return (double *)swift_willThrow();
    }
  }

  else if (v7 != __dst[8])
  {
    goto LABEL_17;
  }

  if (v15 & 1 | ((a4 & 1) == 0))
  {
LABEL_60:
    char v24 = v6;
    goto LABEL_61;
  }

double *Calendar.dateAfterMatchingWeekOfMonth(startingAt:components:direction:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v12)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  char v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  uint64_t v26;
  void (*v27)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t);
  int v28;
  double v29;
  _OWORD v30[2];
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  double v80;
  char v81;
  uint64_t v82;
  void v83[36];
  double v84[36];
  void __dst[36];
  uint64_t v86;
  void __src[37];
  if ((*(_BYTE *)(a2 + 248) & 1) != 0) {
    goto LABEL_2;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 240);
  int v28 = *a3;
  uint64_t v8 = *(void *)(v4 + 8);
  __int128 v86 = 1024LL;
  if (v6 <= 1.59271755e13) {
    double v9 = v6;
  }
  else {
    double v9 = 1.59271755e13;
  }
  double v10 = fmax(v9, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v84[0] = v10;
  uint64_t v12 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v8 + 192);
  v12((double *)__src, &v86, v84, ObjectType, v8);
  memcpy(__dst, __src, 0x11AuLL);
  unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[31] & 1) != 0)
  {
    if (v7)
    {
      uint64_t v13 = 0LL;
      goto LABEL_10;
    }

double *Calendar.dateAfterMatchingWeekdayOrdinal(startingAt:components:direction:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double *v38;
  char v39;
  uint64_t v40;
  void (*v41)(double *__return_ptr, double *, void *, uint64_t, uint64_t);
  __int128 v42;
  void v43[36];
  double v44[36];
  uint64_t v45;
  void v46[36];
  double v47[36];
  void __dst[36];
  void __src[37];
  uint64_t v50;
  if ((*(_BYTE *)(a2 + 200) & 1) != 0) {
    goto LABEL_2;
  }
  double v6 = *result;
  __int128 v40 = *(void *)(a2 + 176);
  __int128 v39 = *(_BYTE *)(a2 + 184);
  uint64_t v7 = *(void *)(a2 + 192);
  int v8 = *a3;
  uint64_t v9 = *(void *)(v4 + 8);
  double v50 = 256LL;
  if (v6 <= 1.59271755e13) {
    double v10 = v6;
  }
  else {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v47[0] = v11;
  uint64_t v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)__src, &v50, v47, ObjectType, v9);
  memcpy(__dst, __src, 0x11AuLL);
  unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[25] & 1) != 0)
  {
    if (!v7) {
      goto LABEL_2;
    }
  }

  else if (v7 == __dst[24])
  {
LABEL_2:
    *(void *)a4 = 0LL;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }

  __int128 v38 = (double *)a4;
  __int128 v41 = *(void (**)(double *__return_ptr, double *, void *, uint64_t, uint64_t))(v9 + 160);
  double v14 = v6;
  do
  {
    LOBYTE(v44[0]) = 8;
    if (v14 <= 1.59271755e13) {
      double v15 = v14;
    }
    else {
      double v15 = 1.59271755e13;
    }
    v46[0] = fmax(v15, -2.11845067e11);
    v41(v47, v44, v46, ObjectType, v9);
    if ((LOBYTE(v47[2]) & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(void *)double v21 = 8LL;
      *(double *)(v21 + 8) = v14;
      *(_BYTE *)(v21 + 16) = 0;
      return (double *)swift_willThrow();
    }

    if (v8) {
      uint64_t v16 = v47[0] - v47[1];
    }
    else {
      uint64_t v16 = v47[1] + v47[0];
    }
    *(void *)&v44[0] = 256LL;
    if (v16 <= 1.59271755e13) {
      double v17 = v16;
    }
    else {
      double v17 = 1.59271755e13;
    }
    v46[0] = fmax(v17, -2.11845067e11);
    v13(v47, (uint64_t *)v44, (double *)v46, ObjectType, v9);
    memcpy(v46, v47, 0x11AuLL);
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)v46);
    int v18 = v46[24];
    if (LOBYTE(v46[25])) {
      int v18 = 0LL;
    }
    char v19 = v14 >= v16;
    if (v8) {
      char v19 = v16 >= v14;
    }
    if (v19)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)char v22 = v16;
      *(double *)(v22 + 8) = v14;
      double v23 = 1;
LABEL_37:
      *(_BYTE *)(v22 + 16) = v23;
      return (double *)swift_willThrow();
    }

    double v14 = v16;
  }

  while (v7 != v18);
  if ((v39 & 1) != 0) {
    goto LABEL_40;
  }
  __int128 v45 = 128LL;
  if (v16 <= 1.59271755e13) {
    double v20 = v16;
  }
  else {
    double v20 = 1.59271755e13;
  }
  v44[0] = fmax(v20, -2.11845067e11);
  v13(v47, &v45, v44, ObjectType, v9);
  memcpy(v46, v47, 0x11AuLL);
  unint64_t result = (double *)outlined release of DateComponents((uint64_t)v46);
  if ((v46[23] & 1) != 0)
  {
    if (v40)
    {
      if ((v40 & 0x8000000000000000LL) == 0) {
        goto LABEL_54;
      }
      goto LABEL_44;
    }

double *Calendar.dateAfterMatchingWeekday(startingAt:components:direction:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v14)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t);
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  uint64_t v23;
  double v24;
  void __dst[36];
  uint64_t v26;
  double __src[36];
  void v28[23];
  char v29;
  uint64_t v30;
  if ((*(_BYTE *)(a2 + 184) & 1) != 0) {
    goto LABEL_2;
  }
  double v6 = *result;
  uint64_t v7 = *(void *)(a2 + 176);
  int v8 = *a3;
  uint64_t v9 = *(void *)(v4 + 8);
  __int128 v30 = 128LL;
  if (v6 <= 1.59271755e13) {
    double v10 = v6;
  }
  else {
    double v10 = 1.59271755e13;
  }
  double v11 = fmax(v10, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v11;
  uint64_t v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)v28, &v30, __src, ObjectType, v9);
  unint64_t result = (double *)outlined release of DateComponents((uint64_t)v28);
  if ((v29 & 1) != 0)
  {
    if (!v7) {
      goto LABEL_2;
    }
  }

  else if (v7 == v28[22])
  {
LABEL_2:
    *(void *)a4 = 0LL;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }

  double v14 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v9 + 160);
  LOBYTE(v26) = 7;
  *(double *)__dst = v11;
  v14(__src, &v26, __dst, ObjectType, v9);
  if ((LOBYTE(__src[2]) & 1) != 0)
  {
LABEL_11:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)double v15 = 7LL;
    *(double *)(v15 + 8) = v6;
    *(_BYTE *)(v15 + 16) = 0;
    return (double *)swift_willThrow();
  }

  while (1)
  {
    uint64_t v16 = v6;
    int v18 = __src[0];
    double v17 = __src[1];
    if (v8)
    {
      char v19 = __src[0] + -1.0;
      LOBYTE(v26) = 3;
      if (__src[0] + -1.0 > 1.59271755e13) {
        char v19 = 1.59271755e13;
      }
      __dst[0] = fmax(v19, -2.11845067e11);
      v14(__src, &v26, __dst, ObjectType, v9);
      double v6 = (LOBYTE(__src[2]) & 1) != 0 ? v18 - v17 : __src[0];
    }

    else
    {
      double v6 = __src[1] + __src[0];
    }

    double v26 = 128LL;
    double v20 = v6 <= 1.59271755e13 ? v6 : 1.59271755e13;
    double v21 = fmax(v20, -2.11845067e11);
    char v24 = v21;
    v13(__src, &v26, &v24, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
    if (LOBYTE(__dst[23]) != 1) {
      break;
    }
    if ((v8 & 1) != 0)
    {
      if (v6 >= v16) {
        goto LABEL_35;
      }
    }

    else if (v16 >= v6)
    {
      goto LABEL_35;
    }

    if (!v7) {
      goto LABEL_34;
    }
LABEL_15:
    LOBYTE(v26) = 7;
    *(double *)__dst = v21;
    v14(__src, &v26, __dst, ObjectType, v9);
    if ((LOBYTE(__src[2]) & 1) != 0) {
      goto LABEL_11;
    }
  }

  char v22 = v16 >= v6;
  if (v8) {
    char v22 = v6 >= v16;
  }
  if (!v22)
  {
    if (v7 == __dst[22])
    {
LABEL_34:
      *(double *)a4 = v6;
      *(_BYTE *)(a4 + 8) = 0;
      return result;
    }

    goto LABEL_15;
  }

double *Calendar.dateAfterMatchingDay(startingAt:originalStartDate:components:direction:)@<X0>( double *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  void (*v15)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(double *__return_ptr, void *, double *, uint64_t, uint64_t);
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  void (*v24)(double *__return_ptr, void *, void *, uint64_t, uint64_t);
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  void v38[36];
  uint64_t v39;
  void v40[36];
  void v41[36];
  uint64_t v42;
  double v43[36];
  double v44[2];
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  void __dst[36];
  uint64_t v52;
  void __src[37];
  if ((*(_BYTE *)(a3 + 88) & 1) != 0)
  {
    *(void *)a5 = 0LL;
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }

  double v7 = *result;
  double v8 = *a2;
  __int128 v36 = *(void *)(a3 + 80);
  int v9 = *a4;
  uint64_t v10 = *(void *)(v5 + 8);
  char v11 = *(_BYTE *)(a3 + 72);
  __int128 v52 = 8LL;
  if (v7 <= 1.59271755e13) {
    double v12 = v7;
  }
  else {
    double v12 = 1.59271755e13;
  }
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v44[0] = v13;
  double v15 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v10 + 192);
  v15((double *)__src, &v52, v44, ObjectType, v10);
  memcpy(__dst, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)__dst);
  if (LOBYTE(__dst[11])) {
    uint64_t v16 = 0LL;
  }
  else {
    uint64_t v16 = __dst[10];
  }
  if ((v11 & 1) == 0 && ((v9 ^ 1) & 1) == 0)
  {
    LOBYTE(v41[0]) = 2;
    v43[0] = v13;
    double v17 = *(void (**)(double *__return_ptr, void *, double *, uint64_t, uint64_t))(v10 + 160);
    v17(v44, v41, v43, ObjectType, v10);
    if ((v45 & 1) == 0)
    {
      int v18 = v44[1] + v44[0] + -1.0;
      if (v8 >= v18)
      {
        LOBYTE(v41[0]) = 3;
        if (v18 > 1.59271755e13) {
          int v18 = 1.59271755e13;
        }
        v43[0] = fmax(v18, -2.11845067e11);
        v17(v44, v41, v43, ObjectType, v10);
        if ((v45 & 1) == 0)
        {
          double v7 = v44[0];
          *(void *)&v43[0] = 8LL;
          if (v44[0] <= 1.59271755e13) {
            char v19 = v44[0];
          }
          else {
            char v19 = 1.59271755e13;
          }
          v41[0] = fmax(v19, -2.11845067e11);
          v15(v44, (uint64_t *)v43, (double *)v41, ObjectType, v10);
          outlined release of DateComponents((uint64_t)v44);
          if (v49) {
            uint64_t v16 = 0LL;
          }
          else {
            uint64_t v16 = v48;
          }
        }
      }

      else
      {
        double v7 = v8;
      }
    }
  }

  if (v7 <= 1.59271755e13) {
    double v20 = v7;
  }
  else {
    double v20 = 1.59271755e13;
  }
  double v21 = fmax(v20, -2.11845067e11);
  if (v36 == v16)
  {
    LOBYTE(v41[0]) = 3;
    v43[0] = v21;
    unint64_t result = (double *)(*(void *(**)(double *__return_ptr, void *, double *, uint64_t, uint64_t))(v10 + 160))( v44,  v41,  v43,  ObjectType,  v10);
    if ((v45 & 1) != 0) {
      char v22 = v7;
    }
    else {
      char v22 = v44[0];
    }
LABEL_70:
    *(double *)a5 = v22;
    *(_BYTE *)(a5 + 8) = 0;
    return result;
  }

  double v50 = 4LL;
  v43[0] = v21;
  v15(v44, &v50, v43, ObjectType, v10);
  outlined release of DateComponents((uint64_t)v44);
  if (v47) {
    double v23 = 0LL;
  }
  else {
    double v23 = v46;
  }
  char v24 = *(void (**)(double *__return_ptr, void *, void *, uint64_t, uint64_t))(v10 + 160);
  LOBYTE(v40[0]) = 3;
  *(double *)__int128 v41 = v21;
  v24(v43, v40, v41, ObjectType, v10);
  if ((LOBYTE(v43[2]) & 1) != 0)
  {
    char v22 = v7;
LABEL_34:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)uint64_t v25 = 3LL;
    *(double *)(v25 + 8) = v22;
    *(_BYTE *)(v25 + 16) = 0;
    return (double *)swift_willThrow();
  }

  while (1)
  {
    double v26 = v43[1];
    int v27 = v43[0];
    if (v9)
    {
      int v28 = v43[0] + -1.0;
      LOBYTE(v40[0]) = 3;
      if (v43[0] + -1.0 > 1.59271755e13) {
        int v28 = 1.59271755e13;
      }
      v41[0] = fmax(v28, -2.11845067e11);
      v24(v43, v40, v41, ObjectType, v10);
      char v22 = (LOBYTE(v43[2]) & 1) != 0 ? v27 - v26 : v43[0];
    }

    else
    {
      char v22 = v43[1] + v43[0];
    }

    __int128 v42 = 8LL;
    char v29 = v22 <= 1.59271755e13 ? v22 : 1.59271755e13;
    __int128 v30 = fmax(v29, -2.11845067e11);
    *(double *)__int128 v40 = v30;
    v15(v43, &v42, (double *)v40, ObjectType, v10);
    memcpy(v41, v43, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v41);
    __int128 v31 = LOBYTE(v41[11]) ? 0LL : v41[10];
    __int128 v39 = 4LL;
    __int128 v37 = v30;
    v15((double *)v40, &v39, &v37, ObjectType, v10);
    memcpy(v38, v40, 0x11AuLL);
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)v38);
    if (LOBYTE(v38[9]) == 1) {
      break;
    }
    __int128 v32 = v7 >= v22;
    if (v9) {
      __int128 v32 = v22 >= v7;
    }
    if (v32)
    {
LABEL_68:
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)__int128 v35 = v22;
      *(double *)(v35 + 8) = v7;
      *(_BYTE *)(v35 + 16) = 1;
      return (double *)swift_willThrow();
    }

    uint64_t v33 = v38[8] - v23;
    if (__OFSUB__(v38[8], v23)) {
      goto LABEL_71;
    }
LABEL_62:
    if (v33 < 0)
    {
      char v34 = __OFSUB__(0LL, v33);
      uint64_t v33 = -v33;
      if (v34) {
        goto LABEL_72;
      }
    }

    if (v33 >= 2)
    {
      char v22 = v22 - v26;
      goto LABEL_70;
    }

    if (v36 == v31) {
      goto LABEL_70;
    }
    LOBYTE(v40[0]) = 3;
    *(double *)__int128 v41 = v30;
    v24(v43, v40, v41, ObjectType, v10);
    double v7 = v22;
    if ((LOBYTE(v43[2]) & 1) != 0) {
      goto LABEL_34;
    }
  }

  if ((v9 & 1) != 0)
  {
    if (v22 >= v7) {
      goto LABEL_68;
    }
  }

  else if (v7 >= v22)
  {
    goto LABEL_68;
  }

  uint64_t v33 = -v23;
  if (!__OFSUB__(0LL, v23)) {
    goto LABEL_62;
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

double *Calendar.dateAfterMatchingHour(startingAt:originalStartDate:components:direction:findLastMatch:isStrictMatching:matchingPolicy:)@<X0>( double *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 a5@<W4>, char a6@<W5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X8>)
{
  void (*v19)(double *__return_ptr, uint64_t *, double *, uint64_t, void *);
  uint64_t v20;
  uint64_t v21;
  double *(*v22)(double *__return_ptr, double *, void *, uint64_t, void *);
  double v23;
  double v24;
  uint64_t v25;
  double *(*v26)(double *__return_ptr, double *, void *, uint64_t, void *);
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  Foundation::Date v34;
  uint64_t v35;
  BOOL v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  double v41;
  Foundation::Date v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  void *(*v47)(double *__return_ptr, double *, void *, void, uint64_t, void *);
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  int v52;
  char v55;
  uint64_t v56;
  double v57;
  double v58;
  void *v59;
  double v60;
  char v61;
  double v62[36];
  uint64_t v63;
  void v64[36];
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[36];
  uint64_t v75;
  double v76[36];
  void v77[36];
  uint64_t v78;
  double v79[37];
  void __dst[36];
  uint64_t v81;
  void __src[38];
  if ((*(_BYTE *)(a3 + 120) & 1) != 0)
  {
    *(void *)a8 = 0LL;
    *(_BYTE *)(a8 + 8) = 1;
    return result;
  }

  double v10 = *result;
  double v11 = *a2;
  uint64_t v12 = *(void *)(a3 + 112);
  __int128 v52 = *a4;
  int v13 = *a7;
  double v15 = *v8;
  double v14 = (void *)*((void *)v8 + 1);
  __int128 v81 = 16LL;
  if (v10 <= 1.59271755e13) {
    double v16 = v10;
  }
  else {
    double v16 = 1.59271755e13;
  }
  double v17 = fmax(v16, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v79[0] = v17;
  char v19 = (void (*)(double *__return_ptr, uint64_t *, double *, uint64_t, void *))v14[24];
  v19((double *)__src, &v81, v79, ObjectType, v14);
  memcpy(__dst, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)__dst);
  __int128 v56 = v12;
  if ((__dst[15] & 1) != 0)
  {
    if (v12)
    {
      double v20 = 0LL;
      goto LABEL_34;
    }

    if ((a6 & 1) != 0) {
      goto LABEL_14;
    }
    double v20 = 0LL;
  }

  else
  {
    double v21 = v12;
    double v20 = __dst[14];
    if (v21 || (a6 & 1) != 0)
    {
      if (v56 == __dst[14])
      {
LABEL_14:
        if ((a5 & 1) != 0)
        {
          __int128 v55 = 0;
          char v22 = (double *(*)(double *__return_ptr, double *, void *, uint64_t, void *))v14[20];
          goto LABEL_87;
        }

        goto LABEL_33;
      }

      goto LABEL_34;
    }
  }

  LOBYTE(v76[0]) = 3;
  *(double *)uint64_t v77 = v17;
  char v22 = (double *(*)(double *__return_ptr, double *, void *, uint64_t, void *))v14[20];
  v22(v79, v76, v77, ObjectType, v14);
  if ((LOBYTE(v79[2]) & 1) == 0)
  {
    double v23 = v79[0];
    *(void *)&v76[0] = 16LL;
    char v24 = v79[0] <= 1.59271755e13 ? v79[0] : 1.59271755e13;
    v74[0] = fmax(v24, -2.11845067e11);
    v19(v79, (uint64_t *)v76, (double *)v74, ObjectType, v14);
    memcpy(v77, v79, 0x11AuLL);
    unint64_t result = (double *)outlined release of DateComponents((uint64_t)v77);
    if ((v77[15] & 1) == 0)
    {
      if (v77[14])
      {
        if (v20 == v77[14])
        {
          if (!v13) {
            double v10 = v23;
          }
          if ((a5 & 1) != 0) {
            goto LABEL_86;
          }
LABEL_27:
          uint64_t v25 = a8;
          goto LABEL_110;
        }

        if (v56 != v20) {
          goto LABEL_34;
        }
        if ((a5 & 1) == 0)
        {
LABEL_33:
          uint64_t v25 = a8;
          goto LABEL_105;
        }

double *Calendar.dateAfterMatchingMinute(startingAt:components:direction:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v11)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v12)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t);
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  void __dst[36];
  uint64_t v20;
  double __src[36];
  void v22[17];
  char v23;
  uint64_t v24;
  if ((*(_BYTE *)(a2 + 136) & 1) != 0)
  {
    *(void *)a3 = 0LL;
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }

  double v5 = *result;
  uint64_t v6 = *(void *)(a2 + 128);
  uint64_t v7 = *(void *)(v3 + 8);
  char v24 = 32LL;
  if (v5 <= 1.59271755e13) {
    double v8 = v5;
  }
  else {
    double v8 = 1.59271755e13;
  }
  double v9 = fmax(v8, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v9;
  double v11 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v7 + 192);
  v11((double *)v22, &v24, __src, ObjectType, v7);
  outlined release of DateComponents((uint64_t)v22);
  if ((v23 & 1) == 0)
  {
    if (v6 != v22[16]) {
      goto LABEL_8;
    }
LABEL_12:
    LOBYTE(v20) = 5;
    *(double *)__dst = v9;
    unint64_t result = (double *)(*(void *(**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v7 + 160))( __src,  &v20,  __dst,  ObjectType,  v7);
    if ((LOBYTE(__src[2]) & 1) == 0) {
      double v5 = __src[0];
    }
LABEL_26:
    *(double *)a3 = v5;
    *(_BYTE *)(a3 + 8) = 0;
    return result;
  }

  if (!v6) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v12 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, uint64_t))(v7 + 160);
  LOBYTE(v20) = 5;
  *(double *)__dst = v9;
  v12(__src, &v20, __dst, ObjectType, v7);
  if ((LOBYTE(__src[2]) & 1) == 0)
  {
    while (1)
    {
      int v13 = __src[1] + __src[0];
      double v20 = 32LL;
      if (__src[1] + __src[0] <= 1.59271755e13) {
        double v15 = __src[1] + __src[0];
      }
      else {
        double v15 = 1.59271755e13;
      }
      double v16 = fmax(v15, -2.11845067e11);
      int v18 = v16;
      v11(__src, &v20, &v18, ObjectType, v7);
      memcpy(__dst, __src, 0x11AuLL);
      unint64_t result = (double *)outlined release of DateComponents((uint64_t)__dst);
      if (LOBYTE(__dst[17]) == 1)
      {
        if (v13 == v5) {
          goto LABEL_27;
        }
        if (!v6)
        {
LABEL_25:
          double v5 = v13;
          goto LABEL_26;
        }
      }

      else
      {
        if (v13 == v5)
        {
LABEL_27:
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(double *)double v17 = v13;
          *(double *)(v17 + 8) = v5;
          *(_BYTE *)(v17 + 16) = 1;
          return (double *)swift_willThrow();
        }

        if (v6 == __dst[16]) {
          goto LABEL_25;
        }
      }

      LOBYTE(v20) = 5;
      *(double *)__dst = v16;
      v12(__src, &v20, __dst, ObjectType, v7);
      double v5 = v13;
      if (LOBYTE(__src[2]) == 1) {
        goto LABEL_10;
      }
    }
  }

  int v13 = v5;
LABEL_10:
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(void *)double v14 = 5LL;
  *(double *)(v14 + 8) = v13;
  *(_BYTE *)(v14 + 16) = 0;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingSecond(startingAt:originalStartDate:components:direction:)@<X0>( double *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  void (*v18)(double *__return_ptr, uint64_t *, double *, uint64_t, void);
  void (*v19)(double *__return_ptr, uint64_t *, void *, uint64_t, void);
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  Foundation::Date v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  int v31;
  char v32;
  double v33;
  void v34[36];
  uint64_t v35;
  double v36[36];
  void v37[17];
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void v42[36];
  uint64_t v43;
  double v44[36];
  void __dst[36];
  void __src[37];
  uint64_t v47;
  if ((*(_BYTE *)(a3 + 152) & 1) != 0)
  {
    *(void *)a5 = 0LL;
LABEL_3:
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }

  uint64_t v7 = v5;
  double v8 = *result;
  double v9 = *a2;
  uint64_t v10 = *(void *)(a3 + 128);
  __int128 v32 = *(_BYTE *)(a3 + 136);
  uint64_t v11 = *(void *)(a3 + 144);
  int v12 = *a4;
  double v13 = *v5;
  double v14 = v7[1];
  __int128 v47 = 64LL;
  if (v8 <= 1.59271755e13) {
    double v15 = v8;
  }
  else {
    double v15 = 1.59271755e13;
  }
  double v16 = fmax(v15, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v44[0] = v16;
  int v18 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, void))(*(void *)&v14 + 192LL);
  v18((double *)__src, &v47, v44, ObjectType, *(void *)&v14);
  memcpy(__dst, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[19] & 1) != 0)
  {
    if (v11) {
      goto LABEL_9;
    }
  }

  else if (v11 != __dst[18])
  {
LABEL_9:
    __int128 v31 = v12;
    char v19 = *(void (**)(double *__return_ptr, uint64_t *, void *, uint64_t, void))(*(void *)&v14 + 160LL);
    LOBYTE(v37[0]) = 6;
    *(double *)__int128 v42 = v16;
    v19(v44, v37, v42, ObjectType, *(void *)&v14);
    if ((LOBYTE(v44[2]) & 1) != 0)
    {
      double v20 = v8;
LABEL_11:
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      char v22 = 6LL;
      goto LABEL_12;
    }

    while (1)
    {
      double v20 = v44[1] + v44[0];
      __int128 v43 = 64LL;
      if (v44[1] + v44[0] <= 1.59271755e13) {
        double v23 = v44[1] + v44[0];
      }
      else {
        double v23 = 1.59271755e13;
      }
      char v24 = fmax(v23, -2.11845067e11);
      *(double *)__int128 v37 = v24;
      v18(v44, &v43, (double *)v37, ObjectType, *(void *)&v14);
      memcpy(v42, v44, 0x11AuLL);
      unint64_t result = (double *)outlined release of DateComponents((uint64_t)v42);
      if (LOBYTE(v42[19]) == 1)
      {
        if (v20 == v8) {
          goto LABEL_72;
        }
        if (!v11)
        {
          if (v9 >= v20) {
            goto LABEL_33;
          }
          if ((v31 & 1) != 0)
          {
            uint64_t v11 = 0LL;
            goto LABEL_37;
          }

double *Calendar.dateAfterMatchingNanosecond(startingAt:components:direction:)@<X0>( double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(_BYTE *)(a2 + 168) & 1) != 0)
  {
    *(void *)a3 = 0LL;
    *(_BYTE *)(a3 + 8) = 1;
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 160);
    uint64_t v5 = *(void *)(v3 + 8);
    double v6 = *result;
    __dst[0] = 127LL;
    if (v6 > 1.59271755e13) {
      double v6 = 1.59271755e13;
    }
    double v7 = fmax(v6, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    double v12 = v7;
    (*(void (**)(void *__return_ptr, void *, double *, uint64_t, uint64_t))(v5 + 192))( __src,  __dst,  &v12,  ObjectType,  v5);
    if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v9 = 0LL;
    }
    else {
      uint64_t v9 = v4;
    }
    __src[20] = v9;
    LOBYTE(__src[21]) = v4 == 0x7FFFFFFFFFFFFFFFLL;
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 176);
    outlined retain of DateComponents((uint64_t)__src);
    v10(__dst, ObjectType, v5);
    outlined release of DateComponents((uint64_t)__src);
    return (double *)outlined release of DateComponents((uint64_t)__src);
  }

  return result;
}

uint64_t Calendar.dateIfEraHasYear(era:year:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v89)(__int128 *__return_ptr, __int128 *, uint64_t *, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t v105[36];
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  char v141;
  __int128 __dst[18];
  _BYTE __src[296];
  uint64_t v6 = *(void *)(v3 + 8);
  __dst[0] = 0uLL;
  uint64_t v106 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  (uint64_t *)&v106,  a1,  0,  a2,  0,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t))(v6 + 176))(v105, __dst, ObjectType, v6);
  uint64_t result = outlined release of DateComponents((uint64_t)__src);
  if ((v105[1] & 1) != 0)
  {
    *(void *)a3 = v105[0];
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }

  double v9 = *(double *)v105;
  *(void *)&uint64_t v106 = 3LL;
  else {
    double v10 = 1.59271755e13;
  }
  v105[0] = fmax(v10, -2.11845067e11);
  __int128 v89 = *(void (**)(__int128 *__return_ptr, __int128 *, uint64_t *, uint64_t, uint64_t))(v6 + 192);
  v89(__dst, &v106, v105, ObjectType, v6);
  uint64_t v11 = *(void *)&__dst[0];
  __int128 v91 = ObjectType;
  uint64_t v77 = a2;
  __int128 v90 = v6;
  uint64_t v12 = *((void *)&__dst[0] + 1);
  uint64_t v14 = *((void *)&__dst[1] + 1);
  uint64_t v13 = *(void *)&__dst[1];
  uint64_t v87 = *(void *)&__dst[2];
  int v15 = BYTE8(__dst[2]);
  uint64_t v16 = *(void *)&__dst[3];
  int v17 = BYTE8(__dst[3]);
  uint64_t v18 = *(void *)&__dst[4];
  char v19 = BYTE8(__dst[4]);
  uint64_t v20 = *(void *)&__dst[5];
  char v21 = BYTE8(__dst[5]);
  uint64_t v22 = *(void *)&__dst[6];
  char v23 = BYTE8(__dst[6]);
  uint64_t v24 = *(void *)&__dst[7];
  char v25 = BYTE8(__dst[7]);
  uint64_t v26 = *(void *)&__dst[8];
  char v27 = BYTE8(__dst[8]);
  uint64_t v28 = *(void *)&__dst[9];
  char v29 = BYTE8(__dst[9]);
  uint64_t v88 = *(void *)&__dst[10];
  char v30 = BYTE8(__dst[10]);
  uint64_t v31 = *(void *)&__dst[11];
  char v32 = BYTE8(__dst[11]);
  uint64_t v76 = *(void *)&__dst[12];
  char v75 = BYTE8(__dst[12]);
  uint64_t v33 = *(void *)&__dst[13];
  char v34 = BYTE8(__dst[13]);
  uint64_t v86 = *(void *)&__dst[14];
  char v85 = BYTE8(__dst[14]);
  uint64_t v84 = *(void *)&__dst[15];
  char v82 = BYTE8(__dst[15]);
  char v83 = BYTE8(__dst[16]);
  uint64_t v81 = *(void *)&__dst[16];
  uint64_t v79 = *(void *)&__dst[17];
  uint64_t v74 = a3;
  char v80 = BYTE8(__dst[17]);
  char v78 = BYTE9(__dst[17]);
  if (v77 == 1)
  {
    char v101 = *(void *)&__dst[3];
    uint64_t v106 = 0uLL;
    v105[1] = 0LL;
    v105[0] = 0LL;
    uint64_t v100 = *(void *)&__dst[0];
    char v73 = BYTE8(__dst[5]);
    uint64_t v72 = *(void *)&__dst[6];
    char v71 = BYTE8(__dst[6]);
    uint64_t v70 = *(void *)&__dst[7];
    char v69 = BYTE8(__dst[7]);
    uint64_t v68 = *(void *)&__dst[8];
    char v67 = BYTE8(__dst[8]);
    uint64_t v66 = *(void *)&__dst[9];
    uint64_t v99 = BYTE8(__dst[3]);
    uint64_t v97 = *(void *)&__dst[1];
    uint64_t v98 = *((void *)&__dst[0] + 1);
    uint64_t v95 = *(void *)&__dst[4];
    uint64_t v96 = *((void *)&__dst[1] + 1);
    uint64_t v94 = BYTE8(__dst[4]);
    __int128 v93 = *(void *)&__dst[5];
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( &v106,  v105,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__dst,  1LL,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
    uint64_t v35 = v66;
    char v36 = v67;
    uint64_t v37 = v68;
    char v38 = v69;
    uint64_t v39 = v70;
    char v40 = v71;
    uint64_t v41 = v72;
    char v42 = v73;
    uint64_t v43 = v87;
    uint64_t v44 = v88;
    uint64_t v45 = v76;
    char v46 = v75;
    uint64_t v47 = v86;
    char v48 = v85;
    uint64_t v49 = v84;
    char v50 = v83;
    char v51 = v82;
    uint64_t v52 = v81;
    char v53 = v80;
    uint64_t v54 = v79;
    for (char i = v78; ; char i = BYTE1(v105[35]))
    {
      *(void *)&uint64_t v106 = v100;
      *((void *)&v106 + 1) = v98;
      uint64_t v107 = v97;
      char v108 = v96;
      uint64_t v111 = v101;
      uint64_t v110 = v15 & 1;
      char v109 = v43;
      char v112 = v99 & 1;
      char v113 = v95;
      uint64_t v114 = v94 & 1;
      uint64_t v115 = v93;
      char v116 = v42 & 1;
      uint64_t v117 = v41;
      unint64_t v118 = v40 & 1;
      char v119 = v39;
      unint64_t v120 = v38 & 1;
      uint64_t v121 = v37;
      uint64_t v122 = v36 & 1;
      char v123 = v35;
      char v124 = v29 & 1;
      __int128 v125 = v44;
      __int128 v126 = v30 & 1;
      __int128 v127 = v31;
      __int128 v128 = v32 & 1;
      __int128 v129 = v45;
      __int128 v130 = v46 & 1;
      __int128 v131 = v33;
      __int128 v132 = v34 & 1;
      unint64_t v133 = v47;
      uint64_t v134 = v48 & 1;
      unint64_t v135 = v49;
      unint64_t v136 = v51 & 1;
      uint64_t v138 = v50 & 1;
      uint64_t v137 = v52;
      unint64_t v139 = v54;
      unint64_t v140 = v53 & 1;
      unint64_t v141 = i;
      if ((v15 & 1) != 0 || v43 >= a1) {
        break;
      }
      memcpy(v105, __dst, 0x11AuLL);
      if (v9 <= 1.59271755e13) {
        double v56 = v9;
      }
      else {
        double v56 = 1.59271755e13;
      }
      unint64_t v104 = fmax(v56, -2.11845067e11);
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, double *, void, uint64_t, uint64_t))(v90 + 200))( &v102,  v105,  &v104,  0LL,  v91,  v90);
      double v57 = *(double *)&v102;
      if ((v103 & 1) != 0)
      {
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t result = outlined release of DateComponents((uint64_t)&v106);
        uint64_t v65 = v74;
        *(double *)uint64_t v74 = v57;
        goto LABEL_31;
      }

      double v9 = *(double *)&v102;
      uint64_t v102 = 1LL;
      if (v57 <= 1.59271755e13) {
        double v58 = v57;
      }
      else {
        double v58 = 1.59271755e13;
      }
      unint64_t v104 = fmax(v58, -2.11845067e11);
      v89((__int128 *)v105, (__int128 *)&v102, (uint64_t *)&v104, v91, v90);
      outlined release of DateComponents((uint64_t)&v106);
      uint64_t v97 = v105[2];
      uint64_t v98 = v105[1];
      uint64_t v43 = v105[4];
      LOBYTE(v15) = v105[5];
      uint64_t v100 = v105[0];
      char v101 = v105[6];
      uint64_t v99 = v105[7];
      uint64_t v95 = v105[8];
      uint64_t v96 = v105[3];
      uint64_t v94 = v105[9];
      __int128 v93 = v105[10];
      char v42 = v105[11];
      uint64_t v41 = v105[12];
      char v40 = v105[13];
      uint64_t v39 = v105[14];
      char v38 = v105[15];
      uint64_t v37 = v105[16];
      char v36 = v105[17];
      uint64_t v35 = v105[18];
      char v29 = v105[19];
      uint64_t v44 = v105[20];
      char v30 = v105[21];
      uint64_t v31 = v105[22];
      char v32 = v105[23];
      uint64_t v45 = v105[24];
      char v46 = v105[25];
      uint64_t v33 = v105[26];
      char v34 = v105[27];
      uint64_t v47 = v105[28];
      char v48 = v105[29];
      uint64_t v49 = v105[30];
      char v51 = v105[31];
      char v50 = v105[33];
      uint64_t v52 = v105[32];
      uint64_t v54 = v105[34];
      char v53 = v105[35];
    }

    uint64_t v102 = 3LL;
    if (v9 <= 1.59271755e13) {
      double v62 = v9;
    }
    else {
      double v62 = 1.59271755e13;
    }
    unint64_t v104 = fmax(v62, -2.11845067e11);
    v89((__int128 *)v105, (__int128 *)&v102, (uint64_t *)&v104, v91, v90);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of DateComponents((uint64_t)&v106);
    uint64_t v11 = v105[0];
    uint64_t v12 = v105[1];
    uint64_t v13 = v105[2];
    uint64_t v14 = v105[3];
    uint64_t v87 = v105[4];
    int v15 = LOBYTE(v105[5]);
    uint64_t v16 = v105[6];
    int v17 = LOBYTE(v105[7]);
    uint64_t v18 = v105[8];
    char v19 = v105[9];
    uint64_t v20 = v105[10];
    char v21 = v105[11];
    uint64_t v22 = v105[12];
    char v23 = v105[13];
    uint64_t v24 = v105[14];
    char v25 = v105[15];
    uint64_t v26 = v105[16];
    char v27 = v105[17];
    uint64_t v28 = v105[18];
    char v29 = v105[19];
    uint64_t v88 = v105[20];
    char v30 = v105[21];
    uint64_t v31 = v105[22];
    char v32 = v105[23];
    uint64_t v60 = v105[24];
    char v61 = v105[25];
    uint64_t v33 = v105[26];
    char v59 = v105[27];
    uint64_t v86 = v105[28];
    char v83 = v105[33];
    char v80 = v105[35];
    char v85 = v105[29];
    uint64_t v84 = v105[30];
    char v82 = v105[31];
    uint64_t v81 = v105[32];
    uint64_t v79 = v105[34];
    char v78 = BYTE1(v105[35]);
  }

  else
  {
    char v59 = BYTE8(__dst[13]);
    uint64_t v60 = *(void *)&__dst[12];
    char v61 = BYTE8(__dst[12]);
  }

  *(void *)&__dst[0] = v11;
  *((void *)&__dst[0] + 1) = v12;
  *(void *)&__dst[1] = v13;
  *((void *)&__dst[1] + 1) = v14;
  *(void *)&__dst[2] = v87;
  BYTE8(__dst[2]) = v15;
  uint64_t v63 = v16;
  *(void *)&__dst[3] = v16;
  int v64 = v17;
  BYTE8(__dst[3]) = v17;
  *(void *)&__dst[4] = v18;
  BYTE8(__dst[4]) = v19;
  *(void *)&__dst[5] = v20;
  BYTE8(__dst[5]) = v21;
  *(void *)&__dst[6] = v22;
  BYTE8(__dst[6]) = v23;
  *(void *)&__dst[7] = v24;
  BYTE8(__dst[7]) = v25;
  *(void *)&__dst[8] = v26;
  BYTE8(__dst[8]) = v27;
  *(void *)&__dst[9] = v28;
  BYTE8(__dst[9]) = v29;
  *(void *)&__dst[10] = v88;
  BYTE8(__dst[10]) = v30;
  *(void *)&__dst[11] = v31;
  BYTE8(__dst[11]) = v32;
  *(void *)&__dst[12] = v60;
  BYTE8(__dst[12]) = v61;
  *(void *)&__dst[13] = v33;
  BYTE8(__dst[13]) = v59;
  *(void *)&__dst[14] = v86;
  BYTE8(__dst[14]) = v85;
  *(void *)&__dst[15] = v84;
  BYTE8(__dst[15]) = v82;
  BYTE8(__dst[16]) = v83;
  *(void *)&__dst[16] = v81;
  *(void *)&__dst[17] = v79;
  BYTE8(__dst[17]) = v80;
  BYTE9(__dst[17]) = v78;
  uint64_t result = outlined release of DateComponents((uint64_t)__dst);
  if (!v15)
  {
    if (v87 != a1) {
      goto LABEL_29;
    }
LABEL_27:
    if (v64)
    {
      if (v77 != 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_29;
      }
    }

    else if (v63 != v77)
    {
      goto LABEL_29;
    }

    *(double *)uint64_t v74 = v9;
    *(_BYTE *)(v74 + 8) = 0;
    return result;
  }

  if (a1 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_27;
  }
LABEL_29:
  uint64_t v65 = v74;
  *(void *)uint64_t v74 = 0LL;
LABEL_31:
  *(_BYTE *)(v65 + 8) = 1;
  return result;
}

void *Calendar.dateIfEraHasYearForWeekOfYear(era:yearForWeekOfYear:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v88)(__int128 *__return_ptr, __int128 *, uint64_t *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t v105[36];
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  char v141;
  __int128 __dst[18];
  _BYTE __src[296];
  uint64_t v6 = *(void *)(v3 + 8);
  __dst[0] = 0uLL;
  uint64_t v106 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  (uint64_t *)&v106,  a1,  0,  a2,  0,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t))(v6 + 176))(v105, __dst, ObjectType, v6);
  uint64_t result = (void *)outlined release of DateComponents((uint64_t)__src);
  double v9 = *(double *)v105;
  if ((v105[1] & 1) != 0) {
    goto LABEL_31;
  }
  *(void *)&uint64_t v106 = 3LL;
  else {
    double v10 = 1.59271755e13;
  }
  v105[0] = fmax(v10, -2.11845067e11);
  uint64_t v88 = *(void (**)(__int128 *__return_ptr, __int128 *, uint64_t *, uint64_t, uint64_t))(v6 + 192);
  v88(__dst, &v106, v105, ObjectType, v6);
  uint64_t v11 = *(void *)&__dst[0];
  __int128 v90 = v6;
  __int128 v89 = ObjectType;
  uint64_t v75 = a3;
  uint64_t v76 = a2;
  uint64_t v13 = *((void *)&__dst[1] + 1);
  uint64_t v12 = *(void *)&__dst[1];
  uint64_t v85 = *(void *)&__dst[2];
  int v14 = BYTE8(__dst[2]);
  uint64_t v15 = *(void *)&__dst[3];
  int v16 = BYTE8(__dst[3]);
  uint64_t v17 = *(void *)&__dst[4];
  char v18 = BYTE8(__dst[4]);
  uint64_t v19 = *(void *)&__dst[5];
  char v20 = BYTE8(__dst[5]);
  uint64_t v21 = *(void *)&__dst[6];
  char v22 = BYTE8(__dst[6]);
  uint64_t v23 = *(void *)&__dst[7];
  char v24 = BYTE8(__dst[7]);
  uint64_t v25 = *(void *)&__dst[8];
  char v26 = BYTE8(__dst[8]);
  uint64_t v27 = *(void *)&__dst[9];
  char v28 = BYTE8(__dst[9]);
  uint64_t v87 = *(void *)&__dst[10];
  char v86 = BYTE8(__dst[10]);
  uint64_t v29 = *(void *)&__dst[11];
  char v30 = BYTE8(__dst[11]);
  uint64_t v31 = *(void *)&__dst[12];
  char v32 = BYTE8(__dst[12]);
  uint64_t v33 = *(void *)&__dst[13];
  char v34 = BYTE8(__dst[13]);
  uint64_t v35 = *(void *)&__dst[14];
  char v84 = BYTE8(__dst[14]);
  uint64_t v83 = *(void *)&__dst[15];
  char v81 = BYTE8(__dst[15]);
  char v82 = BYTE8(__dst[16]);
  uint64_t v80 = *(void *)&__dst[16];
  uint64_t v78 = *(void *)&__dst[17];
  char v79 = BYTE8(__dst[17]);
  char v77 = BYTE9(__dst[17]);
  char v101 = *((void *)&__dst[0] + 1);
  if (v76 == 1)
  {
    uint64_t v106 = 0uLL;
    v105[0] = 0LL;
    v105[1] = 0LL;
    char v74 = BYTE8(__dst[5]);
    uint64_t v73 = *(void *)&__dst[6];
    char v72 = BYTE8(__dst[6]);
    uint64_t v71 = *(void *)&__dst[7];
    char v70 = BYTE8(__dst[7]);
    uint64_t v69 = *(void *)&__dst[8];
    char v68 = BYTE8(__dst[8]);
    uint64_t v67 = *(void *)&__dst[9];
    uint64_t v99 = *(void *)&__dst[3];
    uint64_t v98 = BYTE8(__dst[3]);
    uint64_t v96 = *(void *)&__dst[1];
    uint64_t v97 = *(void *)&__dst[0];
    uint64_t v94 = *(void *)&__dst[4];
    uint64_t v95 = *((void *)&__dst[1] + 1);
    __int128 v93 = BYTE8(__dst[4]);
    __int128 v92 = *(void *)&__dst[5];
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( &v106,  v105,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__dst,  1LL,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
    char v36 = v66;
    uint64_t v37 = v67;
    char v38 = v68;
    uint64_t v39 = v69;
    char v40 = v70;
    uint64_t v41 = v71;
    char v42 = v72;
    uint64_t v43 = v73;
    char v44 = v74;
    uint64_t v45 = v87;
    uint64_t v46 = v35;
    char v47 = v86;
    uint64_t v48 = v31;
    uint64_t v49 = v85;
    char v50 = v84;
    uint64_t v51 = v83;
    char v52 = v82;
    char v53 = v81;
    uint64_t v54 = v80;
    char v55 = v79;
    uint64_t v56 = v78;
    for (char i = v77; ; char i = BYTE1(v105[35]))
    {
      *(void *)&uint64_t v106 = v97;
      *((void *)&v106 + 1) = v101;
      uint64_t v107 = v96;
      char v108 = v95;
      uint64_t v111 = v99;
      uint64_t v110 = v14 & 1;
      char v109 = v49;
      char v112 = v98 & 1;
      char v113 = v94;
      uint64_t v114 = v93 & 1;
      uint64_t v115 = v92;
      char v116 = v44 & 1;
      uint64_t v117 = v43;
      unint64_t v118 = v42 & 1;
      char v119 = v41;
      unint64_t v120 = v40 & 1;
      uint64_t v121 = v39;
      uint64_t v122 = v38 & 1;
      char v123 = v37;
      char v124 = v36 & 1;
      __int128 v125 = v45;
      __int128 v126 = v47 & 1;
      __int128 v127 = v29;
      __int128 v128 = v30 & 1;
      __int128 v129 = v48;
      __int128 v130 = v32 & 1;
      __int128 v131 = v33;
      __int128 v132 = v34 & 1;
      unint64_t v133 = v46;
      uint64_t v134 = v50 & 1;
      unint64_t v135 = v51;
      unint64_t v136 = v53 & 1;
      uint64_t v138 = v52 & 1;
      uint64_t v137 = v54;
      unint64_t v139 = v56;
      unint64_t v140 = v55 & 1;
      unint64_t v141 = i;
      if ((v14 & 1) != 0 || v49 >= a1) {
        break;
      }
      memcpy(v105, __dst, 0x11AuLL);
      if (v9 <= 1.59271755e13) {
        double v58 = v9;
      }
      else {
        double v58 = 1.59271755e13;
      }
      unint64_t v104 = fmax(v58, -2.11845067e11);
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, double *, void, uint64_t, uint64_t))(v90 + 200))( &v102,  v105,  &v104,  0LL,  v89,  v90);
      double v9 = *(double *)&v102;
      if ((v103 & 1) != 0)
      {
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t result = (void *)outlined release of DateComponents((uint64_t)&v106);
        a3 = v75;
        goto LABEL_31;
      }

      uint64_t v102 = 1LL;
      if (v9 <= 1.59271755e13) {
        double v59 = v9;
      }
      else {
        double v59 = 1.59271755e13;
      }
      unint64_t v104 = fmax(v59, -2.11845067e11);
      v88((__int128 *)v105, (__int128 *)&v102, (uint64_t *)&v104, v89, v90);
      outlined release of DateComponents((uint64_t)&v106);
      uint64_t v96 = v105[2];
      uint64_t v97 = v105[0];
      uint64_t v49 = v105[4];
      LOBYTE(v14) = v105[5];
      uint64_t v99 = v105[6];
      char v101 = v105[1];
      uint64_t v98 = v105[7];
      uint64_t v94 = v105[8];
      uint64_t v95 = v105[3];
      __int128 v93 = v105[9];
      __int128 v92 = v105[10];
      char v44 = v105[11];
      uint64_t v43 = v105[12];
      char v42 = v105[13];
      uint64_t v41 = v105[14];
      char v40 = v105[15];
      uint64_t v39 = v105[16];
      char v38 = v105[17];
      uint64_t v37 = v105[18];
      char v36 = v105[19];
      uint64_t v45 = v105[20];
      char v47 = v105[21];
      uint64_t v29 = v105[22];
      char v30 = v105[23];
      uint64_t v48 = v105[24];
      char v32 = v105[25];
      uint64_t v33 = v105[26];
      char v34 = v105[27];
      uint64_t v46 = v105[28];
      char v50 = v105[29];
      uint64_t v51 = v105[30];
      char v53 = v105[31];
      char v52 = v105[33];
      uint64_t v54 = v105[32];
      uint64_t v56 = v105[34];
      char v55 = v105[35];
    }

    uint64_t v102 = 3LL;
    if (v9 <= 1.59271755e13) {
      double v61 = v9;
    }
    else {
      double v61 = 1.59271755e13;
    }
    unint64_t v104 = fmax(v61, -2.11845067e11);
    v88((__int128 *)v105, (__int128 *)&v102, (uint64_t *)&v104, v89, v90);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of DateComponents((uint64_t)&v106);
    uint64_t v11 = v105[0];
    char v101 = v105[1];
    uint64_t v12 = v105[2];
    uint64_t v13 = v105[3];
    uint64_t v85 = v105[4];
    int v14 = LOBYTE(v105[5]);
    uint64_t v15 = v105[6];
    int v16 = LOBYTE(v105[7]);
    uint64_t v17 = v105[8];
    char v18 = v105[9];
    uint64_t v19 = v105[10];
    char v20 = v105[11];
    uint64_t v21 = v105[12];
    char v22 = v105[13];
    uint64_t v23 = v105[14];
    char v24 = v105[15];
    uint64_t v25 = v105[16];
    char v26 = v105[17];
    uint64_t v27 = v105[18];
    char v28 = v105[19];
    uint64_t v87 = v105[20];
    char v86 = v105[21];
    uint64_t v29 = v105[22];
    char v30 = v105[23];
    uint64_t v31 = v105[24];
    char v32 = v105[25];
    uint64_t v33 = v105[26];
    char v34 = v105[27];
    uint64_t v60 = v105[28];
    char v82 = v105[33];
    char v79 = v105[35];
    char v84 = v105[29];
    uint64_t v83 = v105[30];
    char v81 = v105[31];
    uint64_t v80 = v105[32];
    uint64_t v78 = v105[34];
    char v77 = BYTE1(v105[35]);
  }

  else
  {
    uint64_t v60 = *(void *)&__dst[14];
  }

  *(void *)&__dst[0] = v11;
  *((void *)&__dst[0] + 1) = v101;
  *(void *)&__dst[1] = v12;
  *((void *)&__dst[1] + 1) = v13;
  *(void *)&__dst[2] = v85;
  BYTE8(__dst[2]) = v14;
  uint64_t v100 = v15;
  *(void *)&__dst[3] = v15;
  int v62 = v16;
  BYTE8(__dst[3]) = v16;
  *(void *)&__dst[4] = v17;
  BYTE8(__dst[4]) = v18;
  *(void *)&__dst[5] = v19;
  BYTE8(__dst[5]) = v20;
  *(void *)&__dst[6] = v21;
  BYTE8(__dst[6]) = v22;
  *(void *)&__dst[7] = v23;
  BYTE8(__dst[7]) = v24;
  *(void *)&__dst[8] = v25;
  BYTE8(__dst[8]) = v26;
  *(void *)&__dst[9] = v27;
  BYTE8(__dst[9]) = v28;
  *(void *)&__dst[10] = v87;
  BYTE8(__dst[10]) = v86;
  *(void *)&__dst[11] = v29;
  BYTE8(__dst[11]) = v30;
  *(void *)&__dst[12] = v31;
  BYTE8(__dst[12]) = v32;
  *(void *)&__dst[13] = v33;
  BYTE8(__dst[13]) = v34;
  *(void *)&__dst[14] = v60;
  BYTE8(__dst[14]) = v84;
  *(void *)&__dst[15] = v83;
  BYTE8(__dst[15]) = v81;
  BYTE8(__dst[16]) = v82;
  *(void *)&__dst[16] = v80;
  *(void *)&__dst[17] = v78;
  BYTE8(__dst[17]) = v79;
  BYTE9(__dst[17]) = v77;
  uint64_t result = (void *)outlined release of DateComponents((uint64_t)__dst);
  if (v14) {
    BOOL v63 = a1 == 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v63 = v85 == a1;
  }
  a3 = v75;
  if (!v63)
  {
LABEL_29:
    double v9 = 0.0;
LABEL_31:
    *(double *)a3 = v9;
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }

  if (v62)
  {
    if (v76 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_29;
    }
  }

  else if (v100 != v76)
  {
    goto LABEL_29;
  }

  LOBYTE(v102) = 12;
  if (v9 <= 1.59271755e13) {
    double v64 = v9;
  }
  else {
    double v64 = 1.59271755e13;
  }
  v105[0] = fmax(v64, -2.11845067e11);
  uint64_t result = (*(void *(**)(__int128 *__return_ptr, uint64_t *, uint64_t *, uint64_t))(v90 + 160))( &v106,  &v102,  v105,  v89);
  if ((v107 & 1) != 0)
  {
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)uint64_t v65 = 12LL;
    *(double *)(v65 + 8) = v9;
    *(_BYTE *)(v65 + 16) = 0;
    return (void *)swift_willThrow();
  }

  else
  {
    *(void *)uint64_t v75 = v106;
    *(_BYTE *)(v75 + 8) = 0;
  }

  return result;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError()
{
  unint64_t result = lazy protocol witness table cache variable for type CalendarEnumerationError and conformance CalendarEnumerationError;
  if (!lazy protocol witness table cache variable for type CalendarEnumerationError and conformance CalendarEnumerationError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CalendarEnumerationError,  &type metadata for CalendarEnumerationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CalendarEnumerationError and conformance CalendarEnumerationError);
  }

  return result;
}

uint64_t outlined release of Calendar.DatesByAdding(uint64_t a1)
{
  return a1;
}

void specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)( double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t *a6, void (**a7)(void, void, void, void))
{
  double v13 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  uint64_t v14 = *a3;
  uint64_t v15 = *a4;
  uint64_t v16 = *a5;
  uint64_t v17 = *a6;
  uint64_t v18 = a6[1];
  __int128 __src = (void *)a2;
  memcpy(v43, a2, 0x11AuLL);
  double v40 = *(double *)&v17;
  uint64_t v41 = v18;
  _Block_copy(a7);
  if (DateComponents._validate(for:)((uint64_t *)&v40) && v13 >= -2.11845067e11 && v13 <= 1.59271755e13)
  {
    unint64_t v19 = 0LL;
    double v20 = 0.0;
    char v21 = 1;
    double v22 = v13;
    do
    {
      v34[0] = v17;
      v34[1] = v18;
      id v39 = *(id *)&v13;
      memcpy(v43, __src, 0x11AuLL);
      unsigned __int8 v38 = v14;
      unsigned __int8 v37 = v15;
      unsigned __int8 v36 = v16;
      double v35 = v22;
      double v32 = v20;
      LOBYTE(v33) = v21 & 1;
      Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)( (double *)&v39,  v43,  &v38,  &v37,  &v36,  &v35,  (uint64_t)&v32,  (uint64_t)&v40);
      double v22 = v42;
      if (v41 == 2)
      {
        if (v19 > 0x63)
        {
          *(double *)char v34 = v13;
          double v40 = *(double *)&v17;
          uint64_t v41 = v18;
          memcpy(v43, __dst, 0x11AuLL);
          LOBYTE(v32) = v16;
          LOBYTE(v39) = v14;
          LOBYTE(v35) = v15;
          _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( v34,  (uint64_t *)&v40,  v43,  (unsigned __int8 *)&v32,  (unsigned __int8 *)&v39,  (unsigned __int8 *)&v35);
          _Block_release(a7);
          return;
        }
      }

      else
      {
        double v20 = v40;
        unsigned int v30 = v41 & 1;
        _Block_copy(a7);
        char v24 = (_BYTE *)swift_slowAlloc();
        *char v24 = 0;
        uint64_t v25 = v18;
        uint64_t v26 = v16;
        uint64_t v27 = v14;
        uint64_t v28 = v15;
        id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v20);
        ((void (**)(void, id, void, _BYTE *))a7)[2](a7, v29, v30, v24);

        uint64_t v15 = v28;
        uint64_t v14 = v27;
        uint64_t v16 = v26;
        uint64_t v18 = v25;
        LOBYTE(v25) = *v24;
        MEMORY[0x186E20E60](v24, -1LL, -1LL);
        _Block_release(a7);
        char v21 = 0;
        if ((v25 & 1) != 0) {
          goto LABEL_4;
        }
      }
    }

    while (!__OFADD__(v19++, 1LL));
    __break(1u);

    _Block_release(a7);
    _Block_release(a7);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
LABEL_4:
    _Block_release(a7);
  }

uint64_t destructiveInjectEnumTag for CalendarEnumerationError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CalendarEnumerationError()
{
  return &type metadata for CalendarEnumerationError;
}

uint64_t destroy for Calendar.DatesByMatching()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByAdding.Iterator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  __int128 v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  uint64_t v3 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v4 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v4;
  uint64_t v5 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v5;
  uint64_t v6 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v6;
  uint64_t v7 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v7;
  uint64_t v8 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v8;
  uint64_t v9 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v9;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByAdding.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 330;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = v17;
  uint64_t v18 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v18;
  uint64_t v19 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v19;
  uint64_t v20 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v20;
  uint64_t v21 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v21;
  uint64_t v22 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v22;
  uint64_t v23 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v23;
  uint64_t v24 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v24;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(v4 + 1);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  return a1;
}

void *__swift_memcpy344_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x158uLL);
}

uint64_t assignWithTake for Calendar.DatesByAdding.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 330;
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v5 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v6 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v6;
  uint64_t v7 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v7;
  uint64_t v8 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v8;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(v4 + 1);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByAdding.Iterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 344)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByAdding.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 344) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 344) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByAdding.Iterator()
{
  return &type metadata for Calendar.DatesByAdding.Iterator;
}

uint64_t destroy for Calendar.DatesByMatching.Iterator()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByMatching.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  __int128 v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v5;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v6 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v6;
  uint64_t v7 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v7;
  uint64_t v8 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v8;
  uint64_t v9 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v9;
  uint64_t v10 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v10;
  uint64_t v11 = *(void *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(void *)(a1 + 336) = v11;
  uint64_t v12 = *(void *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(void *)(a1 + 352) = v12;
  *(_BYTE *)(a1 + 361) = *(_BYTE *)(a2 + 361);
  *(_BYTE *)(a1 + 362) = *(_BYTE *)(a2 + 362);
  *(_BYTE *)(a1 + 363) = *(_BYTE *)(a2 + 363);
  *(_BYTE *)(a1 + 364) = *(_BYTE *)(a2 + 364);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByMatching.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 363;
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = v11;
  uint64_t v12 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = v13;
  uint64_t v14 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v14;
  uint64_t v15 = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = v15;
  uint64_t v16 = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = v16;
  uint64_t v17 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v17;
  uint64_t v18 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v18;
  uint64_t v19 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v19;
  uint64_t v20 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v20;
  uint64_t v21 = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = v21;
  uint64_t v22 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v22;
  uint64_t v23 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v23;
  uint64_t v24 = *(void *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(void *)(a1 + 336) = v24;
  uint64_t v25 = *(void *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(void *)(a1 + 352) = v25;
  *(_BYTE *)(a1 + 361) = *(_BYTE *)(a2 + 361);
  *(_BYTE *)(a1 + 362) = *(_BYTE *)(a2 + 362);
  *(_BYTE *)(a1 + 363) = *(_BYTE *)(a2 + 363);
  *(_BYTE *)(a1 + 364) = *(_BYTE *)(v4 + 1);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(v4 + 13);
  return a1;
}

void *__swift_memcpy377_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x179uLL);
}

uint64_t assignWithTake for Calendar.DatesByMatching.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 363;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  uint64_t v7 = *(void *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(void *)(a1 + 320) = v7;
  uint64_t v8 = *(void *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(void *)(a1 + 336) = v8;
  uint64_t v9 = *(void *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(void *)(a1 + 352) = v9;
  *(_BYTE *)(a1 + 361) = *(_BYTE *)(a2 + 361);
  *(_BYTE *)(a1 + 362) = *(_BYTE *)(a2 + 362);
  *(_BYTE *)(a1 + 363) = *(_BYTE *)(a2 + 363);
  *(_BYTE *)(a1 + 364) = *(_BYTE *)(v4 + 1);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(v4 + 13);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByMatching.Iterator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 377)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByMatching.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 376) = 0;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 377) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 377) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByMatching.Iterator()
{
  return &type metadata for Calendar.DatesByMatching.Iterator;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()()
{
  uint64_t v1 = v0[1];
  if ((v1 & 0x2000000000000000LL) == 0)
  {
    if ((*v0 & 0xFFFFFFFFFFFFLL) != 0)
    {
LABEL_5:
      String.index(before:)();
      return String.remove(at:)();
    }

    __break(1u);
  }

  if ((v1 & 0xF00000000000000LL) != 0) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t URL.FormatStyle.Component.rawValue.getter()
{
  return qword_1837AA388[*v0];
}

void static URL.FormatStyle.ComponentDisplayOption.always.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
}

void static URL.FormatStyle.HostDisplayOption.always.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
}

__n128 URL.FormatStyle.init(scheme:user:password:host:port:path:query:fragment:)@<Q0>( uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  char v9 = *a2;
  char v10 = *a3;
  char v11 = *a4;
  char v12 = a4[24];
  uint64_t v13 = *((void *)a4 + 4);
  char v14 = *a5;
  char v15 = *a6;
  char v16 = *a7;
  char v17 = *a8;
  *(_BYTE *)a9 = *(_BYTE *)a1;
  *(_OWORD *)(a9 + 8) = *(_OWORD *)(a1 + 8);
  *(_BYTE *)(a9 + 24) = v9;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a9 + 48) = v10;
  *(_OWORD *)(a9 + 56) = *(_OWORD *)(a3 + 8);
  *(_BYTE *)(a9 + 72) = v11;
  *(_OWORD *)(a9 + 80) = *(_OWORD *)(a4 + 8);
  *(_BYTE *)(a9 + 96) = v12;
  *(void *)(a9 + 104) = v13;
  *(_BYTE *)(a9 + 112) = v14;
  *(_OWORD *)(a9 + 120) = *(_OWORD *)(a5 + 8);
  *(_BYTE *)(a9 + 136) = v15;
  *(_OWORD *)(a9 + 144) = *(_OWORD *)(a6 + 8);
  *(_BYTE *)(a9 + 160) = v16;
  *(_OWORD *)(a9 + 168) = *(_OWORD *)(a7 + 8);
  *(_BYTE *)(a9 + 184) = v17;
  __n128 result = *(__n128 *)(a8 + 8);
  *(__n128 *)(a9 + 192) = result;
  return result;
}

uint64_t URL.FormatStyle.format(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  int v204 = *v1;
  uint64_t v5 = *((void *)v1 + 2);
  uint64_t v203 = *((void *)v1 + 1);
  int v207 = v1[24];
  uint64_t v6 = *((void *)v1 + 4);
  uint64_t v205 = *((void *)v1 + 5);
  uint64_t v206 = v6;
  LODWORD(v210) = v1[48];
  unint64_t v7 = *((void *)v1 + 7);
  uint64_t v208 = *((void *)v1 + 8);
  unint64_t v209 = v7;
  int v190 = v1[72];
  uint64_t v8 = *((void *)v1 + 10);
  uint64_t v188 = *((void *)v1 + 11);
  uint64_t v189 = v8;
  int v186 = v1[96];
  uint64_t v187 = *((void *)v1 + 13);
  int v193 = v1[112];
  uint64_t v9 = *((void *)v1 + 15);
  uint64_t v191 = *((void *)v1 + 16);
  uint64_t v192 = v9;
  int v196 = v1[136];
  uint64_t v10 = *((void *)v1 + 18);
  uint64_t v194 = *((void *)v1 + 19);
  uint64_t v195 = v10;
  int v199 = v1[160];
  uint64_t v11 = *((void *)v1 + 21);
  uint64_t v197 = *((void *)v1 + 22);
  uint64_t v198 = v11;
  int v12 = v1[184];
  uint64_t v13 = *((void *)v1 + 24);
  uint64_t v14 = *((void *)v1 + 25);
  uint64_t v201 = v13;
  swift_retain();
  id v15 = (id)v2;
  swift_retain();
  uint64_t v211 = v3;
  int v202 = v12;
  uint64_t v200 = v14;
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    if (!v3)
    {
LABEL_208:
      __break(1u);
LABEL_209:

      swift_bridgeObjectRelease();
      LODWORD(v184) = 0;
      uint64_t v183 = 714LL;
      goto LABEL_211;
    }

    id v16 = v15;
    uint64_t v17 = v4;
    id v18 = *(id *)(v3 + 16);
    unint64_t v19 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }

  else
  {
    id v20 = objc_msgSend(v15, sel_relativeString);
    id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v19 = v21;
    uint64_t v17 = v4;
    swift_release();
    swift_release();
    id v16 = v15;
  }

  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)((uint64_t)v18, v19, 1, (uint64_t)v253);
  outlined init with take of LocalePreferences?( (uint64_t)v253,  (uint64_t)v252,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?( (uint64_t)v253,  (uint64_t)&v254,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v254) == 1)
  {
    *(void *)&__int128 v230 = v16;
    *((void *)&v230 + 1) = v211;
    *(void *)&__int128 v231 = v17;
    return URL.absoluteString.getter();
  }

  uint64_t v2 = 0LL;
  v267[2] = v260;
  v267[3] = v261;
  v268[0] = v262[0];
  *(_OWORD *)((char *)v268 + 10) = *(_OWORD *)((char *)v262 + 10);
  __int128 v265 = v256;
  __int128 v266 = v257;
  v267[0] = v258;
  v267[1] = v259;
  __int128 v263 = v254;
  __int128 v264 = v255;
  __int128 v248 = v260;
  __int128 v249 = v261;
  v250[0] = v262[0];
  *(_OWORD *)((char *)v250 + 10) = *(_OWORD *)((char *)v262 + 10);
  __int128 v244 = v256;
  __int128 v245 = v257;
  __int128 v246 = v258;
  __int128 v247 = v259;
  __int128 v242 = v254;
  __int128 v243 = v255;
  char v251 = 1;
  __int128 v239 = 0uLL;
  LOBYTE(v240[0]) = 0;
  *(_OWORD *)((char *)v240 + 8) = 0u;
  *(_OWORD *)((char *)&v240[1] + 8) = 0u;
  *(_OWORD *)((char *)&v240[2] + 8) = 0u;
  *(_OWORD *)((char *)&v240[3] + 8) = 0u;
  *((void *)&v240[4] + 1) = 0LL;
  LOBYTE(v241[0]) = 1;
  *(_OWORD *)((char *)v241 + 8) = 0u;
  *(_OWORD *)((char *)&v241[1] + 8) = 0u;
  *(_OWORD *)((char *)&v241[2] + 8) = 0u;
  WORD4(v241[3]) = 0;
  uint64_t v23 = v211;
  *(void *)&__int128 v221 = v16;
  *((void *)&v221 + 1) = v211;
  *(void *)&__int128 v222 = v17;
  LOBYTE(v212) = v204;
  *((void *)&v212 + 1) = v203;
  *(void *)&__int128 v213 = v5;
  if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) != 0)
  {
    uint64_t v24 = (void *)v265;
    unint64_t v25 = v17;
    if ((void)v265)
    {
      uint64_t v26 = *((void *)&v264 + 1);
      outlined init with take of LocalePreferences?( (uint64_t)v252,  (uint64_t)&v230,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v230);
      uint64_t v27 = v24;
    }

    else if ((BYTE9(v263) & 1) != 0 {
           && (outlined init with take of LocalePreferences?( (uint64_t)&v263,  (uint64_t)v269,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v269,  (uint64_t)v275,  &demangling cache variable for type metadata for URLParseInfo?),  v275[0])
    }
           && (*(_BYTE *)(v275[0] + 48) & 1) == 0)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v252,  (uint64_t)&v230,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v230);
      uint64_t v90 = String.subscript.getter();
      uint64_t v26 = MEMORY[0x186E1B610](v90);
      uint64_t v27 = v91;
      unint64_t v25 = v17;
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined init with take of LocalePreferences?( (uint64_t)v252,  (uint64_t)&v230,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v230);
      uint64_t v26 = 0LL;
      uint64_t v27 = 0LL;
    }

    swift_bridgeObjectRetain();
    outlined release of URLComponents?(v253);
    v28.value._uint64_t countAndFlagsBits = v26;
    v28.value._unint64_t object = v27;
    URLComponents._URLComponents.setScheme(_:)(v28);
    if (v2) {
      goto LABEL_209;
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = v211;
  }

  else
  {
    unint64_t v25 = v17;
  }

  *(void *)&__int128 v221 = v16;
  *((void *)&v221 + 1) = v23;
  *(void *)&__int128 v222 = v25;
  LOBYTE(v212) = v207;
  *((void *)&v212 + 1) = v206;
  *(void *)&__int128 v213 = v205;
  if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) != 0)
  {
    uint64_t v29 = outlined retain of URLComponents((uint64_t)&v242);
    unint64_t v30 = (unint64_t)URLComponents._URLComponents.user.getter(v29);
    unint64_t v32 = v31;
    outlined release of URLComponents?(v253);
    BYTE8(v239) = 0;
    BYTE10(v239) = 0;
    if (v32)
    {
      if ((v32 & 0x1000000000000000LL) != 0)
      {
        *(void *)&__int128 v230 = v30;
        *((void *)&v230 + 1) = v32;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        int v149 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v150 = (unsigned __int16 *)objc_msgSend(v149, sel__fastCharacterContents);
        id v151 = v149;
        if (v150)
        {
          *(void *)&__int128 v230 = v30;
          *((void *)&v230 + 1) = v32;
          StringProtocol._ephemeralString.getter();
          __int128 v152 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v153 = objc_msgSend(v152, sel_length);
          swift_unknownObjectRelease();
          char v154 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v150,  (uint64_t)v153,  2u,  0);
        }

        else
        {
          char v154 = specialized Sequence.allSatisfy(_:)(v30, v32, 2);
        }

        char v175 = v154;
        uint64_t v35 = swift_bridgeObjectRelease();
        uint64_t v23 = v211;
        if ((v175 & 1) == 0) {
          goto LABEL_25;
        }
      }

      else
      {
        if ((v32 & 0x2000000000000000LL) != 0)
        {
          uint64_t v34 = HIBYTE(v32) & 0xF;
          *(void *)&__int128 v230 = v30;
          *((void *)&v230 + 1) = v32 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v33 = (char *)&v230;
        }

        else if ((v30 & 0x1000000000000000LL) != 0)
        {
          uint64_t v33 = (char *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v34 = v30 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v33 = (char *)_StringObject.sharedUTF8.getter();
        }

        uint64_t v35 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v33, v34, 2u, 0);
        if ((v35 & 1) == 0)
        {
LABEL_25:
          uint64_t v36 = HIBYTE(v32) & 0xF;
          if ((v32 & 0x2000000000000000LL) == 0) {
            uint64_t v36 = v30 & 0xFFFFFFFFFFFFLL;
          }
          if (v36)
          {
            *(void *)&__int128 v230 = v30;
            *((void *)&v230 + 1) = v32;
            MEMORY[0x1895F8858](v35);
            uint64_t v183 = (uint64_t)&v230;
            LOBYTE(v184) = 2;
            swift_bridgeObjectRetain();
            unsigned __int8 v37 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v182,  v30,  v32);
            if (v38)
            {
              unint64_t v30 = (unint64_t)v37;
              unint64_t v39 = v38;
              swift_bridgeObjectRelease_n();
            }

            else
            {
              unint64_t v41 = *((void *)&v230 + 1);
              unint64_t v40 = v230;
              swift_bridgeObjectRetain();
              unint64_t v30 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v40, v41, 2u);
              unint64_t v39 = v42;
              swift_bridgeObjectRelease_n();
              uint64_t v23 = v211;
              swift_bridgeObjectRelease();
            }

            unint64_t v32 = v39;
          }

          else
          {
            swift_bridgeObjectRelease();
            unint64_t v30 = 0LL;
            unint64_t v32 = 0xE000000000000000LL;
          }
        }
      }
    }

    swift_bridgeObjectRelease();
    *((void *)&v240[1] + 1) = v30;
    *(void *)&v240[2] = v32;
  }

  *(void *)&__int128 v221 = v16;
  *((void *)&v221 + 1) = v23;
  *(void *)&__int128 v222 = v25;
  LOBYTE(v212) = v210;
  *((void *)&v212 + 1) = v209;
  *(void *)&__int128 v213 = v208;
  uint64_t v43 = outlined retain of URLComponents((uint64_t)&v242);
  unint64_t v44 = (unint64_t)URLComponents._URLComponents.password.getter(v43);
  unint64_t v46 = v45;
  outlined release of URLComponents?(v253);
  BYTE8(v239) = 0;
  BYTE11(v239) = 0;
  if (v46)
  {
    if ((v46 & 0x1000000000000000LL) != 0)
    {
      *(void *)&__int128 v230 = v44;
      *((void *)&v230 + 1) = v46;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      uint64_t v155 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v156 = (unsigned __int16 *)objc_msgSend(v155, sel__fastCharacterContents);
      id v157 = v155;
      if (v156)
      {
        *(void *)&__int128 v230 = v44;
        *((void *)&v230 + 1) = v46;
        StringProtocol._ephemeralString.getter();
        uint64_t v158 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v159 = objc_msgSend(v158, sel_length);
        swift_unknownObjectRelease();
        char v160 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v156,  (uint64_t)v159,  2u,  0);
      }

      else
      {
        char v160 = specialized Sequence.allSatisfy(_:)(v44, v46, 2);
      }

      char v176 = v160;
      uint64_t v49 = swift_bridgeObjectRelease();
      uint64_t v23 = v211;
      if ((v176 & 1) == 0) {
        goto LABEL_42;
      }
    }

    else
    {
      if ((v46 & 0x2000000000000000LL) != 0)
      {
        uint64_t v48 = HIBYTE(v46) & 0xF;
        *(void *)&__int128 v230 = v44;
        *((void *)&v230 + 1) = v46 & 0xFFFFFFFFFFFFFFLL;
        char v47 = (char *)&v230;
      }

      else if ((v44 & 0x1000000000000000LL) != 0)
      {
        char v47 = (char *)((v46 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v48 = v44 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        char v47 = (char *)_StringObject.sharedUTF8.getter();
      }

      uint64_t v49 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, v48, 2u, 0);
      if ((v49 & 1) == 0)
      {
LABEL_42:
        uint64_t v50 = HIBYTE(v46) & 0xF;
        if ((v46 & 0x2000000000000000LL) == 0) {
          uint64_t v50 = v44 & 0xFFFFFFFFFFFFLL;
        }
        if (v50)
        {
          *(void *)&__int128 v230 = v44;
          *((void *)&v230 + 1) = v46;
          MEMORY[0x1895F8858](v49);
          uint64_t v183 = (uint64_t)&v230;
          LOBYTE(v184) = 2;
          swift_bridgeObjectRetain();
          uint64_t v51 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v182,  v44,  v46);
          if (v52)
          {
            unint64_t v44 = (unint64_t)v51;
            unint64_t v53 = v52;
            swift_bridgeObjectRelease_n();
          }

          else
          {
            unint64_t v55 = *((void *)&v230 + 1);
            unint64_t v54 = v230;
            swift_bridgeObjectRetain();
            unint64_t v44 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v54, v55, 2u);
            unint64_t v53 = v56;
            swift_bridgeObjectRelease_n();
            uint64_t v23 = v211;
            swift_bridgeObjectRelease();
          }

          unint64_t v46 = v53;
        }

        else
        {
          swift_bridgeObjectRelease();
          unint64_t v44 = 0LL;
          unint64_t v46 = 0xE000000000000000LL;
        }
      }
    }
  }

  swift_bridgeObjectRelease();
  *((void *)&v240[2] + 1) = v44;
  *(void *)&v240[3] = v46;
LABEL_51:
  outlined init with take of LocalePreferences?( (uint64_t)v267 + 8,  (uint64_t)v270,  &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?( (uint64_t)v270,  (uint64_t)&v273,  &demangling cache variable for type metadata for String?);
  unint64_t v57 = v274;
  if (v274)
  {
    uint64_t v58 = v273;
    outlined init with take of LocalePreferences?( (uint64_t)v252,  (uint64_t)&v230,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    uint64_t v59 = outlined retain of URLComponents((uint64_t)&v230);
  }

  else if ((BYTE12(v263) & 1) != 0 {
         && (outlined init with take of LocalePreferences?( (uint64_t)&v263,  (uint64_t)v271,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v271,  (uint64_t)&v272,  &demangling cache variable for type metadata for URLParseInfo?),  v272)
  }
         && (*(_BYTE *)(v272 + 120) & 1) == 0)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v252,  (uint64_t)&v230,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)&v230);
    uint64_t v82 = String.subscript.getter();
    uint64_t v58 = MEMORY[0x186E1B610](v82);
    unint64_t v57 = v83;
    uint64_t v59 = swift_bridgeObjectRelease();
  }

  else
  {
    outlined init with take of LocalePreferences?( (uint64_t)v252,  (uint64_t)&v230,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)&v230);
    uint64_t v59 = URLComponents._URLComponents.port.getter();
    if ((v60 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v62 = v61;
      uint64_t v59 = swift_bridgeObjectRelease();
      if (!v62)
      {
        outlined release of URLComponents?(v253);
        goto LABEL_104;
      }
    }

    uint64_t v58 = 0LL;
    unint64_t v57 = 0xE000000000000000LL;
  }

  uint64_t v63 = v58 & 0xFFFFFFFFFFFFLL;
  if ((v57 & 0x2000000000000000LL) != 0) {
    uint64_t v64 = HIBYTE(v57) & 0xF;
  }
  else {
    uint64_t v64 = v58 & 0xFFFFFFFFFFFFLL;
  }
  if (!v64)
  {
    outlined retain of String?((uint64_t)v270);
    swift_bridgeObjectRelease();
    outlined release of URLComponents?(v253);
    uint64_t v66 = 0LL;
    unint64_t v68 = 0xE000000000000000LL;
    uint64_t v23 = v211;
LABEL_94:
    uint64_t v92 = HIBYTE(v68) & 0xF;
    if ((v68 & 0x2000000000000000LL) == 0) {
      uint64_t v92 = v66 & 0xFFFFFFFFFFFFLL;
    }
    if (v92)
    {
      *(void *)&__int128 v221 = v16;
      *((void *)&v221 + 1) = v23;
      *(void *)&__int128 v222 = v25;
      *(void *)&__int128 v212 = v189;
      *((void *)&v212 + 1) = v188;
      char v93 = URL.FormatStyle.url(_:satisfies:)((uint64_t)&v221, (unsigned __int8 *)&v212);
      char v94 = URL.FormatStyle.isIPv4(_:)(v66, v68);
      char v95 = URL.FormatStyle.isIPv6(_:)(v66, v68);
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v96 = specialized URL.UnicodeLookalikeTable.allCharactersInIDNScriptAllowList(in:)(v66, v68);
      if ((v96 & 1) != 0)
      {
        if ((v190 & 1) == 0)
        {
          LODWORD(v210) = 0;
          uint64_t v23 = v211;
          if ((v93 & 1) == 0)
          {
LABEL_102:
            URLComponents._URLComponents.host.setter(v66, v68);
            goto LABEL_105;
          }

void static URL.FormatStyle.ComponentDisplayOption.never.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
}

Swift::Int static URL.FormatStyle.ComponentDisplayOption.omitIfHTTPFamily.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = static _SetStorage.allocate(capacity:)();
  char v2 = 0;
  uint64_t v3 = 0LL;
  uint64_t v4 = v1 + 56;
  while (1)
  {
    char v5 = v2;
    uint64_t v6 = (char *)&outlined read-only object #0 of static URL.FormatStyle.ComponentDisplayOption.omitIfHTTPFamily.getter
       + 16 * v3;
    uint64_t v8 = *((void *)v6 + 4);
    uint64_t v7 = *((void *)v6 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v10 = -1LL << *(_BYTE *)(v1 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) == 0) {
      break;
    }
    uint64_t v15 = *(void *)(v1 + 48);
    id v16 = (void *)(v15 + 16 * v11);
    if (*v16 != v8 || v16[1] != v7)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            goto LABEL_18;
          }
          unint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }

          break;
        }
      }
    }

    swift_bridgeObjectRelease();
LABEL_3:
    char v2 = 1;
    uint64_t v3 = 1LL;
    if ((v5 & 1) != 0)
    {
      Swift::Int result = swift_arrayDestroy();
      *(_BYTE *)a1 = 0;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = v1;
      return result;
    }
  }

uint64_t URL.FormatStyle.hash(into:)(uint64_t a1)
{
  char v2 = v1;
  uint64_t v5 = *((void *)v2 + 1);
  uint64_t v4 = *((void *)v2 + 2);
  Swift::UInt v6 = v2[24];
  uint64_t v7 = *((void *)v2 + 5);
  Swift::UInt v20 = v2[48];
  uint64_t v8 = *((void *)v2 + 8);
  uint64_t v13 = *((void *)v2 + 4);
  uint64_t v14 = *((void *)v2 + 7);
  Swift::UInt v21 = v2[72];
  uint64_t v9 = *((void *)v2 + 11);
  Swift::UInt8 v22 = v2[96];
  uint64_t v10 = *((void *)v2 + 13);
  Swift::UInt v23 = v2[112];
  uint64_t v15 = *((void *)v2 + 10);
  uint64_t v16 = *((void *)v2 + 15);
  uint64_t v24 = *((void *)v2 + 16);
  Swift::UInt v25 = v2[136];
  uint64_t v17 = *((void *)v2 + 18);
  uint64_t v26 = *((void *)v2 + 19);
  Swift::UInt v27 = v2[160];
  uint64_t v18 = *((void *)v2 + 21);
  uint64_t v28 = *((void *)v2 + 22);
  Swift::UInt v29 = v2[184];
  uint64_t v11 = *((void *)v2 + 25);
  uint64_t v19 = *((void *)v2 + 24);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v6);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v13]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v7);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v20);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v14]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v8);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v21);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v15]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Set.hash(into:)(a1, v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }

  Hasher._combine(_:)(v22);
  if (v10)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v10);
    swift_bridgeObjectRelease_n();
  }

  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v23);
  if (v24)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v16]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v24);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v25);
  if (v26)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v17]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v26);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v27);
  if (v28)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v18]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v28);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v29);
  if (v11)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v19]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v11);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1830FB720 + 4 * byte_1837A9540[*v0]))( 0x656D65686373LL,  0xE600000000000000LL);
}

uint64_t sub_1830FB720()
{
  return 1919251317LL;
}

uint64_t sub_1830FB730()
{
  return 0x64726F7773736170LL;
}

uint64_t sub_1830FB748()
{
  return 1953722216LL;
}

uint64_t sub_1830FB758()
{
  return 1953656688LL;
}

uint64_t sub_1830FB768()
{
  return 1752457584LL;
}

uint64_t sub_1830FB778()
{
  return 0x7972657571LL;
}

uint64_t sub_1830FB78C()
{
  return 0x746E656D67617266LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t URL.FormatStyle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.CodingKeys>);
  uint64_t v41 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v6 = *v1;
  uint64_t v8 = *((void *)v1 + 1);
  uint64_t v7 = *((void *)v1 + 2);
  int v48 = v1[24];
  uint64_t v9 = *((void *)v1 + 4);
  uint64_t v39 = *((void *)v1 + 5);
  uint64_t v40 = v9;
  int v38 = v1[48];
  uint64_t v10 = *((void *)v1 + 7);
  uint64_t v36 = *((void *)v1 + 8);
  uint64_t v37 = v10;
  int v31 = v1[72];
  uint64_t v11 = *((void *)v1 + 11);
  uint64_t v32 = *((void *)v1 + 10);
  uint64_t v33 = v11;
  int v35 = v1[96];
  uint64_t v34 = *((void *)v1 + 13);
  int v28 = v1[112];
  uint64_t v12 = *((void *)v1 + 16);
  uint64_t v29 = *((void *)v1 + 15);
  uint64_t v30 = v12;
  int v25 = v1[136];
  uint64_t v26 = *((void *)v1 + 18);
  uint64_t v27 = *((void *)v1 + 19);
  int v22 = v1[160];
  uint64_t v23 = *((void *)v1 + 21);
  uint64_t v24 = *((void *)v1 + 22);
  HIDWORD(v19) = v1[184];
  uint64_t v20 = *((void *)v1 + 24);
  uint64_t v21 = *((void *)v1 + 25);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v43 = v6;
  uint64_t v44 = v8;
  uint64_t v45 = v7;
  char v49 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption();
  uint64_t v13 = v42;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v13) {
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v5, v3);
  }
  uint64_t v15 = v36;
  uint64_t v16 = v37;
  char v17 = v38;
  char v43 = v48;
  uint64_t v18 = v41;
  uint64_t v44 = v40;
  uint64_t v45 = v39;
  char v49 = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v43 = v17;
  uint64_t v44 = v16;
  uint64_t v45 = v15;
  char v49 = 2;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v43 = v31;
  uint64_t v44 = v32;
  uint64_t v45 = v33;
  char v46 = v35;
  uint64_t v47 = v34;
  char v49 = 3;
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v43 = v28;
  uint64_t v44 = v29;
  uint64_t v45 = v30;
  char v49 = 4;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v43 = v25;
  uint64_t v44 = v26;
  uint64_t v45 = v27;
  char v49 = 5;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v43 = v22;
  uint64_t v44 = v23;
  uint64_t v45 = v24;
  char v49 = 6;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  char v43 = BYTE4(v19);
  uint64_t v44 = v20;
  uint64_t v45 = v21;
  char v49 = 7;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v5, v3);
}

Swift::Int URL.FormatStyle.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v121 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
  }
  char v60 = a2;
  LOBYTE(v61) = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v59 = v74;
  uint64_t v10 = v76;
  uint64_t v11 = v77;
  LOBYTE(v61) = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v57 = v10;
  uint64_t v58 = v11;
  LODWORD(v10) = v74;
  uint64_t v12 = v77;
  uint64_t v56 = v76;
  LOBYTE(v61) = 2;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v53 = v10;
  uint64_t v55 = v12;
  LODWORD(v12) = v74;
  uint64_t v13 = v77;
  uint64_t v52 = v76;
  LOBYTE(v61) = 3;
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v49 = v12;
  uint64_t v51 = v13;
  int v47 = v74;
  uint64_t v14 = v77;
  uint64_t v48 = v76;
  LODWORD(v13) = v78;
  LOBYTE(v61) = 4;
  uint64_t v54 = v80;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v43 = v13;
  uint64_t v45 = v14;
  LODWORD(v13) = v74;
  uint64_t v15 = v77;
  uint64_t v42 = v76;
  LOBYTE(v61) = 5;
  swift_bridgeObjectRetain();
  uint64_t v44 = 0LL;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v46 = v15;
  int v41 = v13;
  LODWORD(v13) = v74;
  uint64_t v16 = v77;
  uint64_t v40 = v76;
  LOBYTE(v61) = 6;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v50 = v16;
  int v38 = v74;
  int v39 = v13;
  uint64_t v17 = v76;
  uint64_t v18 = v77;
  char v109 = 7;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  int v36 = v110;
  uint64_t v37 = *((void *)&v111 + 1);
  uint64_t v44 = v111;
  LOBYTE(v61) = v59;
  *((void *)&v61 + 1) = v57;
  *(void *)&__int128 v62 = v58;
  uint64_t v19 = v18;
  BYTE8(v62) = v53;
  uint64_t v20 = v55;
  *(void *)&__int128 v63 = v56;
  *((void *)&v63 + 1) = v55;
  LOBYTE(v64) = v49;
  uint64_t v35 = v17;
  uint64_t v21 = v51;
  *((void *)&v64 + 1) = v52;
  *(void *)&__int128 v65 = v51;
  BYTE8(v65) = v47;
  uint64_t v22 = v45;
  uint64_t v23 = v46;
  *(void *)&__int128 v66 = v48;
  *((void *)&v66 + 1) = v45;
  LOBYTE(v67) = v43;
  *((void *)&v67 + 1) = v54;
  LOBYTE(v68) = v41;
  *((void *)&v68 + 1) = v42;
  *(void *)&__int128 v69 = v46;
  BYTE8(v69) = v39;
  *(void *)&__int128 v70 = v40;
  *((void *)&v70 + 1) = v50;
  LOBYTE(v71) = v38;
  *((void *)&v71 + 1) = v17;
  *(void *)&__int128 v72 = v19;
  uint64_t v24 = v19;
  BYTE8(v72) = v110;
  __int128 v73 = v111;
  outlined retain of URL.FormatStyle((uint64_t)&v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = v24;
  swift_bridgeObjectRelease();
  __int128 v27 = v72;
  int v28 = v60;
  v60[10] = v71;
  v28[11] = v27;
  v28[12] = v73;
  __int128 v29 = v68;
  v28[6] = v67;
  v28[7] = v29;
  __int128 v30 = v70;
  v28[8] = v69;
  v28[9] = v30;
  __int128 v31 = v64;
  v28[2] = v63;
  v28[3] = v31;
  __int128 v32 = v66;
  v28[4] = v65;
  v28[5] = v32;
  __int128 v33 = v62;
  *int v28 = v61;
  v28[1] = v33;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
  unsigned __int8 v74 = v59;
  *(_DWORD *)id v75 = v120[0];
  *(_DWORD *)&v75[3] = *(_DWORD *)((char *)v120 + 3);
  uint64_t v76 = v57;
  uint64_t v77 = v58;
  unsigned __int8 v78 = v53;
  *(_DWORD *)uint64_t v79 = *(_DWORD *)v119;
  *(_DWORD *)&v79[3] = *(_DWORD *)&v119[3];
  uint64_t v80 = v56;
  uint64_t v81 = v20;
  char v82 = v49;
  *(_DWORD *)&v83[3] = *(_DWORD *)&v118[3];
  *(_DWORD *)unint64_t v83 = *(_DWORD *)v118;
  uint64_t v84 = v52;
  uint64_t v85 = v21;
  char v86 = v47;
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v117;
  *(_DWORD *)&v87[3] = *(_DWORD *)&v117[3];
  uint64_t v88 = v48;
  uint64_t v89 = v25;
  char v90 = v43;
  *(_DWORD *)__int128 v91 = *(_DWORD *)v116;
  *(_DWORD *)&v91[3] = *(_DWORD *)&v116[3];
  uint64_t v92 = v54;
  char v93 = v41;
  *(_DWORD *)&_OWORD v94[3] = *(_DWORD *)&v115[3];
  *(_DWORD *)char v94 = *(_DWORD *)v115;
  uint64_t v95 = v42;
  uint64_t v96 = v23;
  char v97 = v39;
  *(_DWORD *)&v98[3] = *(_DWORD *)&v114[3];
  *(_DWORD *)char v98 = *(_DWORD *)v114;
  uint64_t v99 = v40;
  uint64_t v100 = v50;
  char v101 = v38;
  *(_DWORD *)uint64_t v102 = *(_DWORD *)v113;
  *(_DWORD *)&v102[3] = *(_DWORD *)&v113[3];
  uint64_t v103 = v35;
  uint64_t v104 = v26;
  char v105 = v36;
  *(_DWORD *)&v106[3] = *(_DWORD *)&v112[3];
  *(_DWORD *)id v106 = *(_DWORD *)v112;
  uint64_t v107 = v44;
  uint64_t v108 = v37;
  return outlined release of URL.FormatStyle((uint64_t)&v74);
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  return URL.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle(void *a1)
{
  return URL.FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle()
{
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.Component.description.getter()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1830FC61C + 4 * byte_1837A9548[*v0]))( 0x656D65686373LL,  0xE600000000000000LL);
}

uint64_t sub_1830FC61C()
{
  return 0x656D616E72657375LL;
}

uint64_t sub_1830FC634()
{
  return 0x64726F7773736170LL;
}

uint64_t sub_1830FC64C()
{
  return 1953722216LL;
}

uint64_t sub_1830FC65C()
{
  return 1953656688LL;
}

uint64_t sub_1830FC66C()
{
  return 1752457584LL;
}

uint64_t sub_1830FC67C()
{
  return 0x7972657571LL;
}

uint64_t sub_1830FC690()
{
  return 0x746E656D67617266LL;
}

uint64_t URL.FormatStyle.Component.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 1;
  switch(result)
  {
    case 1LL:
      char v2 = 0;
      goto LABEL_3;
    case 2LL:
LABEL_3:
      *a2 = v2;
      return result;
    case 3LL:
    case 5LL:
    case 6LL:
    case 7LL:
    case 9LL:
    case 10LL:
    case 11LL:
    case 12LL:
    case 13LL:
    case 14LL:
    case 15LL:
    case 17LL:
    case 18LL:
    case 19LL:
    case 20LL:
    case 21LL:
    case 22LL:
    case 23LL:
    case 24LL:
    case 25LL:
    case 26LL:
    case 27LL:
    case 28LL:
    case 29LL:
    case 30LL:
    case 31LL:
    case 33LL:
    case 34LL:
    case 35LL:
    case 36LL:
    case 37LL:
    case 38LL:
    case 39LL:
    case 40LL:
    case 41LL:
    case 42LL:
    case 43LL:
    case 44LL:
    case 45LL:
    case 46LL:
    case 47LL:
    case 48LL:
    case 49LL:
    case 50LL:
    case 51LL:
    case 52LL:
    case 53LL:
    case 54LL:
    case 55LL:
    case 56LL:
    case 57LL:
    case 58LL:
    case 59LL:
    case 60LL:
    case 61LL:
    case 62LL:
    case 63LL:
      goto LABEL_6;
    case 4LL:
      *a2 = 2;
      return result;
    case 8LL:
      *a2 = 3;
      return result;
    case 16LL:
      *a2 = 4;
      return result;
    case 32LL:
      *a2 = 5;
      return result;
    case 64LL:
      *a2 = 6;
      return result;
    default:
      if (result == 128) {
        *a2 = 7;
      }
      else {
LABEL_6:
      }
        *a2 = 8;
      return result;
  }

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance URL.FormatStyle.Component( char *a1, char *a2)
{
  return qword_1837AA388[*a1] == qword_1837AA388[*a2];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance URL.FormatStyle.Component@<X0>( uint64_t *a1@<X0>, char *a2@<X8>)
{
  return URL.FormatStyle.Component.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance URL.FormatStyle.Component( void *a1@<X8>)
{
  *a1 = qword_1837AA388[*v1];
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.Component()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.Component()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle.Component()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1837AA388[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance URL.FormatStyle.Component()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.Component()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1837AA388[v1]);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.Component()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1830FC918 + 4 * byte_1837A9590[*v0]))( 0x656D65686373LL,  0xE600000000000000LL);
}

uint64_t sub_1830FC918()
{
  return 0x656D616E72657375LL;
}

uint64_t sub_1830FC930()
{
  return 0x64726F7773736170LL;
}

uint64_t sub_1830FC948()
{
  return 1953722216LL;
}

uint64_t sub_1830FC958()
{
  return 1953656688LL;
}

uint64_t sub_1830FC968()
{
  return 1752457584LL;
}

uint64_t sub_1830FC978()
{
  return 0x7972657571LL;
}

uint64_t sub_1830FC98C()
{
  return 0x746E656D67617266LL;
}

void URL.FormatStyle.ComponentDisplayCondition.description.getter()
{
  uint64_t v1 = *v0;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease();
  __asm { BR              X9 }

uint64_t sub_1830FCA14()
{
  v0._uint64_t countAndFlagsBits = 0x656D616E72657375LL;
  v0._unint64_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x7365686374616D20LL;
  v1._unint64_t object = (void *)0xE900000000000020LL;
  String.append(_:)(v1);
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t URL.FormatStyle.ComponentDisplayCondition.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.ComponentDisplayCondition.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  v10[0] = *((void *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = v8;
  char v12 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[1] = v10[0];
    char v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>,  MEMORY[0x189617FB0],  MEMORY[0x1896186F8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t URL.FormatStyle.ComponentDisplayCondition.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.ComponentDisplayCondition.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v14 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    char v13 = 1;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>,  MEMORY[0x189617FD8],  MEMORY[0x189618710]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v10 = v12[1];
    *(_BYTE *)a2 = v9;
    *(void *)(a2 + 8) = v10;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  if (*v0) {
    return 0x6D65726975716572LL;
  }
  else {
    return 0x6E656E6F706D6F63LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.ComponentDisplayCondition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.ComponentDisplayCondition@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.FormatStyle.ComponentDisplayCondition.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.ComponentDisplayCondition( void *a1)
{
  return URL.FormatStyle.ComponentDisplayCondition.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle.ComponentDisplayCondition()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1837AA388[v1]);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance URL.FormatStyle.ComponentDisplayCondition( uint64_t a1)
{
  uint64_t v3 = *((void *)v1 + 1);
  Hasher._combine(_:)(qword_1837AA388[*v1]);
  specialized Set.hash(into:)(a1, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.ComponentDisplayCondition()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1837AA388[v1]);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance URL.FormatStyle.ComponentDisplayCondition( char *a1, char *a2)
{
  if (qword_1837AA388[*a1] == qword_1837AA388[*a2]) {
    return specialized static Set.== infix(_:_:)(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0LL;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.ComponentDisplayOption.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.ComponentDisplayOption.Option()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t URL.FormatStyle.ComponentDisplayOption.description.getter()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  if ((*(_BYTE *)v0 & 1) != 0)
  {
    if (v1)
    {
      _StringGuts.grow(_:)(24LL);
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(16LL);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }

    return 0x737961776C61LL;
  }

  else
  {
    if (v1)
    {
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(16LL);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }

    return 0x726576656ELL;
  }

uint64_t static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)(a1, a2, 1, a3);
}

uint64_t static URL.FormatStyle.ComponentDisplayOption.omitWhen(_:matches:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)(a1, a2, 0, a3);
}

uint64_t static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  *(_BYTE *)a4 = a3;
  *(void *)(a4 + 8) = v4;
  *(void *)(a4 + 16) = a2;
  return swift_bridgeObjectRetain();
}

void URL.FormatStyle.ComponentDisplayOption.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *((void *)v2 + 1);
  uint64_t v4 = *((void *)v2 + 2);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  if (*v0) {
    return 0x6F697469646E6F63LL;
  }
  else {
    return 0x6E6F6974706FLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.ComponentDisplayOption.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t URL.FormatStyle.ComponentDisplayOption.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.ComponentDisplayOption.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  uint64_t v9 = *((void *)v1 + 1);
  uint64_t v11 = *((void *)v1 + 2);
  uint64_t v12 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = v8;
  char v15 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v13 = v12;
    uint64_t v14 = v11;
    char v15 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int URL.FormatStyle.ComponentDisplayOption.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v2 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v3]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v5, v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.ComponentDisplayOption.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.ComponentDisplayOption.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v14 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v13[0];
    char v14 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v12 = v13[0];
    uint64_t v11 = v13[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)a2 = v9;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v11;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t URL.FormatStyle.HostDisplayOption.Option.encode(to:)(void *a1, int a2)
{
  int v17 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys>);
  uint64_t v15 = *(void *)(v3 - 8);
  uint64_t v16 = v3;
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys>);
  uint64_t v6 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.Option.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v17 & 1) != 0)
  {
    char v19 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v16);
  }

  else
  {
    char v18 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.ComponentDisplayOption@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.FormatStyle.ComponentDisplayOption.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.ComponentDisplayOption( void *a1)
{
  return URL.FormatStyle.ComponentDisplayOption.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance URL.FormatStyle.ComponentDisplayOption( uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *((void *)v2 + 1);
  uint64_t v4 = *((void *)v2 + 2);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.ComponentDisplayOption()
{
  Swift::UInt v1 = *v0;
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v2 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v3]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v5, v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  if (*v0) {
    return 0x6579616C70736964LL;
  }
  else {
    return 0x64657474696D6FLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.HostDisplayOption.Option.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.HostDisplayOption.Option@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.HostDisplayOption.Option.init(from:)(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.HostDisplayOption.Option( void *a1)
{
  return URL.FormatStyle.HostDisplayOption.Option.encode(to:)(a1, *v1);
}

uint64_t URL.FormatStyle.HostDisplayOption.description.getter()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  if ((*(_BYTE *)v0 & 1) != 0)
  {
    int v3 = *(unsigned __int8 *)(v0 + 24);
    if (v1)
    {
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(16LL);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }

    _StringGuts.grow(_:)(81LL);
    v5._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    v5._unint64_t object = (void *)0x80000001839CCDC0LL;
    String.append(_:)(v5);
    if (v3) {
      uint64_t v6 = 1702195828LL;
    }
    else {
      uint64_t v6 = 0x65736C6166LL;
    }
    if (v3) {
      unint64_t v7 = 0xE400000000000000LL;
    }
    else {
      unint64_t v7 = 0xE500000000000000LL;
    }
    unint64_t v8 = v7;
    String.append(_:)(*(Swift::String *)&v6);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v9._unint64_t object = (void *)0x80000001839CCDF0LL;
    String.append(_:)(v9);
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = Set.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0x7469646E6F63202CLL;
    v11._unint64_t object = (void *)0xED0000203A6E6F69LL;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0x69646E6F63206F6ELL;
    v12._unint64_t object = (void *)0xEC0000006E6F6974LL;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else
  {
    if (v1)
    {
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(16LL);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }

    return 0x726576656ELL;
  }

void static URL.FormatStyle.HostDisplayOption.never.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
}

uint64_t static URL.FormatStyle.HostDisplayOption.displayWhen(_:matches:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  *(_BYTE *)a3 = 1;
  *(void *)(a3 + 8) = v3;
  *(void *)(a3 + 16) = a2;
  *(_BYTE *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0LL;
  return swift_bridgeObjectRetain();
}

uint64_t static URL.FormatStyle.HostDisplayOption.omitWhen(_:matches:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  *(_BYTE *)a3 = 0;
  *(void *)(a3 + 8) = v3;
  *(void *)(a3 + 16) = a2;
  *(_BYTE *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0LL;
  return swift_bridgeObjectRetain();
}

Swift::Int static URL.FormatStyle.HostDisplayOption.omitIfHTTPFamily.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = static _SetStorage.allocate(capacity:)();
  char v2 = 0;
  uint64_t v3 = 0LL;
  uint64_t v4 = v1 + 56;
  while (1)
  {
    char v5 = v2;
    uint64_t v6 = (char *)&outlined read-only object #0 of static URL.FormatStyle.HostDisplayOption.omitIfHTTPFamily.getter
       + 16 * v3;
    uint64_t v8 = *((void *)v6 + 4);
    uint64_t v7 = *((void *)v6 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v10 = -1LL << *(_BYTE *)(v1 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) == 0) {
      break;
    }
    uint64_t v15 = *(void *)(v1 + 48);
    uint64_t v16 = (void *)(v15 + 16 * v11);
    if (*v16 != v8 || v16[1] != v7)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            goto LABEL_18;
          }
          char v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }

          break;
        }
      }
    }

    swift_bridgeObjectRelease();
LABEL_3:
    char v2 = 1;
    uint64_t v3 = 1LL;
    if ((v5 & 1) != 0)
    {
      Swift::Int result = swift_arrayDestroy();
      *(_BYTE *)a1 = 0;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = v1;
      *(_BYTE *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0LL;
      return result;
    }
  }

uint64_t static URL.FormatStyle.HostDisplayOption.omitSpecificSubdomains(_:includeMultiLevelSubdomains:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = 1;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(_BYTE *)(a3 + 24) = a2;
  *(void *)(a3 + 32) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t static URL.FormatStyle.HostDisplayOption.omitSpecificSubdomains(_:includeMultiLevelSubdomains:when:matches:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a3;
  *(_BYTE *)a5 = 1;
  *(void *)(a5 + 8) = v5;
  *(void *)(a5 + 16) = a4;
  *(_BYTE *)(a5 + 24) = a2;
  *(void *)(a5 + 32) = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void URL.FormatStyle.HostDisplayOption.hash(into:)(uint64_t a1)
{
  char v2 = v1;
  uint64_t v5 = *((void *)v2 + 1);
  uint64_t v4 = *((void *)v2 + 2);
  Swift::UInt8 v6 = v2[24];
  uint64_t v7 = *((void *)v2 + 4);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1837AA388[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(v6);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1830FE588 + 4 * byte_1837A95C0[*v0]))( 0x6E6F6974706FLL,  0xE600000000000000LL);
}

uint64_t sub_1830FE588()
{
  return 0x6F697469646E6F63LL;
}

unint64_t sub_1830FE5A4()
{
  return 0xD000000000000018LL;
}

unint64_t sub_1830FE5C4()
{
  return 0xD000000000000016LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.HostDisplayOption.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized URL.FormatStyle.HostDisplayOption.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t URL.FormatStyle.HostDisplayOption.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  uint64_t v9 = *((void *)v1 + 1);
  uint64_t v14 = *((void *)v1 + 2);
  uint64_t v15 = v9;
  int v18 = v1[24];
  uint64_t v13 = *((void *)v1 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = v8;
  char v19 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = v13;
    uint64_t v16 = v15;
    uint64_t v17 = v14;
    char v19 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v16) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v16 = v10;
    char v19 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>,  MEMORY[0x189617FB0],  MEMORY[0x1896186F8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int URL.FormatStyle.HostDisplayOption.hashValue.getter()
{
  char v1 = *(_BYTE *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  _BYTE v4[72] = *(_BYTE *)v0;
  __int128 v5 = *(_OWORD *)(v0 + 8);
  char v6 = v1;
  uint64_t v7 = v2;
  Hasher.init(_seed:)();
  URL.FormatStyle.HostDisplayOption.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.HostDisplayOption.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v19 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v9 = v16;
    char v19 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v18 = v9;
    uint64_t v12 = v16;
    uint64_t v11 = v17;
    LOBYTE(v16) = 2;
    swift_bridgeObjectRetain();
    HIDWORD(v14) = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    char v19 = 3;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>,  MEMORY[0x189617FD8],  MEMORY[0x189618710]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = BYTE4(v14) & 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v13 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)a2 = v18;
    *(void *)(a2 + 8) = v15;
    *(void *)(a2 + 16) = v11;
    *(_BYTE *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.HostDisplayOption@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.FormatStyle.HostDisplayOption.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.HostDisplayOption( void *a1)
{
  return URL.FormatStyle.HostDisplayOption.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle.HostDisplayOption()
{
  char v1 = *(_BYTE *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  _BYTE v4[72] = *(_BYTE *)v0;
  __int128 v5 = *(_OWORD *)(v0 + 8);
  char v6 = v1;
  uint64_t v7 = v2;
  Hasher.init(_seed:)();
  URL.FormatStyle.HostDisplayOption.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.HostDisplayOption()
{
  char v1 = *(_BYTE *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  _BYTE v4[72] = *(_BYTE *)v0;
  __int128 v5 = *(_OWORD *)(v0 + 8);
  char v6 = v1;
  uint64_t v7 = v2;
  Hasher.init(_seed:)();
  URL.FormatStyle.HostDisplayOption.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.scheme(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  __int128 v5 = v2[11];
  __int128 v45 = v2[10];
  __int128 v46 = v5;
  __int128 v47 = v2[12];
  __int128 v6 = v2[7];
  __int128 v41 = v2[6];
  __int128 v42 = v6;
  __int128 v7 = v2[9];
  __int128 v43 = v2[8];
  __int128 v44 = v7;
  __int128 v8 = v2[3];
  __int128 v37 = v2[2];
  __int128 v38 = v8;
  __int128 v9 = v2[5];
  __int128 v39 = v2[4];
  __int128 v40 = v9;
  __int128 v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = v45;
  uint64_t v28 = v46;
  uint64_t v29 = *((void *)&v45 + 1);
  char v27 = BYTE8(v43);
  uint64_t v25 = *((void *)&v44 + 1);
  uint64_t v26 = v44;
  char v24 = v42;
  uint64_t v22 = v43;
  uint64_t v23 = *((void *)&v42 + 1);
  char v11 = BYTE8(v39);
  uint64_t v20 = *((void *)&v40 + 1);
  uint64_t v21 = v40;
  char v19 = v41;
  uint64_t v18 = *((void *)&v41 + 1);
  char v12 = v8;
  uint64_t v14 = *((void *)&v8 + 1);
  uint64_t v13 = v39;
  char v15 = BYTE8(v10);
  __int128 v16 = v37;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v35;
  *(void *)(a2 + 8) = v34;
  *(void *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 48) = v12;
  *(void *)(a2 + 56) = v14;
  *(void *)(a2 + 64) = v13;
  *(_BYTE *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v21;
  *(void *)(a2 + 88) = v20;
  *(_BYTE *)(a2 + 96) = v19;
  *(void *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 112) = v24;
  *(void *)(a2 + 120) = v23;
  *(void *)(a2 + 128) = v22;
  *(_BYTE *)(a2 + 136) = v27;
  *(void *)(a2 + 144) = v26;
  *(void *)(a2 + 152) = v25;
  *(_BYTE *)(a2 + 160) = v30;
  *(void *)(a2 + 168) = v29;
  *(void *)(a2 + 176) = v28;
  *(_BYTE *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.user(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v36 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v35 = *((void *)a1 + 1);
  __int128 v5 = v2[11];
  __int128 v44 = v2[10];
  __int128 v45 = v5;
  __int128 v46 = v2[12];
  __int128 v6 = v2[7];
  __int128 v40 = v2[6];
  __int128 v41 = v6;
  __int128 v7 = v2[9];
  __int128 v42 = v2[8];
  __int128 v43 = v7;
  __int128 v8 = v2[3];
  v37[2] = v2[2];
  v37[3] = v8;
  __int128 v9 = v2[5];
  __int128 v38 = v2[4];
  __int128 v39 = v9;
  __int128 v10 = v2[1];
  v37[0] = *v2;
  v37[1] = v10;
  char v34 = BYTE8(v45);
  uint64_t v32 = *((void *)&v46 + 1);
  uint64_t v33 = v46;
  char v31 = v44;
  uint64_t v29 = v45;
  uint64_t v30 = *((void *)&v44 + 1);
  char v28 = BYTE8(v42);
  uint64_t v26 = *((void *)&v43 + 1);
  uint64_t v27 = v43;
  char v25 = v41;
  uint64_t v23 = v42;
  uint64_t v24 = *((void *)&v41 + 1);
  char v11 = BYTE8(v38);
  uint64_t v21 = *((void *)&v39 + 1);
  uint64_t v22 = v39;
  char v20 = v40;
  uint64_t v19 = *((void *)&v40 + 1);
  char v12 = v8;
  uint64_t v14 = *((void *)&v8 + 1);
  uint64_t v13 = v38;
  char v15 = v37[0];
  uint64_t v16 = *((void *)&v37[0] + 1);
  uint64_t v17 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v37);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v15;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 24) = v36;
  *(void *)(a2 + 32) = v35;
  *(void *)(a2 + 40) = v4;
  *(_BYTE *)(a2 + 48) = v12;
  *(void *)(a2 + 56) = v14;
  *(void *)(a2 + 64) = v13;
  *(_BYTE *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v21;
  *(_BYTE *)(a2 + 96) = v20;
  *(void *)(a2 + 104) = v19;
  *(_BYTE *)(a2 + 112) = v25;
  *(void *)(a2 + 120) = v24;
  *(void *)(a2 + 128) = v23;
  *(_BYTE *)(a2 + 136) = v28;
  *(void *)(a2 + 144) = v27;
  *(void *)(a2 + 152) = v26;
  *(_BYTE *)(a2 + 160) = v31;
  *(void *)(a2 + 168) = v30;
  *(void *)(a2 + 176) = v29;
  *(_BYTE *)(a2 + 184) = v34;
  *(void *)(a2 + 192) = v33;
  *(void *)(a2 + 200) = v32;
  return result;
}

uint64_t URL.FormatStyle.password(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  __int128 v5 = v2[11];
  __int128 v45 = v2[10];
  __int128 v46 = v5;
  __int128 v47 = v2[12];
  __int128 v6 = v2[7];
  __int128 v41 = v2[6];
  __int128 v42 = v6;
  __int128 v7 = v2[9];
  __int128 v43 = v2[8];
  __int128 v44 = v7;
  __int128 v8 = v2[3];
  __int128 v37 = v2[2];
  __int128 v38 = v8;
  __int128 v9 = v2[5];
  __int128 v39 = v2[4];
  __int128 v40 = v9;
  __int128 v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = v45;
  uint64_t v28 = v46;
  uint64_t v29 = *((void *)&v45 + 1);
  char v27 = BYTE8(v43);
  uint64_t v25 = *((void *)&v44 + 1);
  uint64_t v26 = v44;
  char v24 = v42;
  uint64_t v22 = v43;
  uint64_t v23 = *((void *)&v42 + 1);
  char v11 = BYTE8(v39);
  uint64_t v20 = *((void *)&v40 + 1);
  uint64_t v21 = v40;
  char v19 = v41;
  uint64_t v18 = *((void *)&v41 + 1);
  char v12 = BYTE8(v10);
  __int128 v13 = v37;
  char v14 = v36[0];
  uint64_t v15 = *((void *)&v36[0] + 1);
  uint64_t v16 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v35;
  *(void *)(a2 + 56) = v34;
  *(void *)(a2 + 64) = v4;
  *(_BYTE *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v21;
  *(void *)(a2 + 88) = v20;
  *(_BYTE *)(a2 + 96) = v19;
  *(void *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 112) = v24;
  *(void *)(a2 + 120) = v23;
  *(void *)(a2 + 128) = v22;
  *(_BYTE *)(a2 + 136) = v27;
  *(void *)(a2 + 144) = v26;
  *(void *)(a2 + 152) = v25;
  *(_BYTE *)(a2 + 160) = v30;
  *(void *)(a2 + 168) = v29;
  *(void *)(a2 + 176) = v28;
  *(_BYTE *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.host(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  char v33 = a1[24];
  uint64_t v5 = *((void *)a1 + 4);
  __int128 v6 = v2[11];
  __int128 v45 = v2[10];
  __int128 v46 = v6;
  __int128 v47 = v2[12];
  __int128 v7 = v2[7];
  __int128 v41 = v2[6];
  __int128 v42 = v7;
  __int128 v8 = v2[9];
  __int128 v43 = v2[8];
  __int128 v44 = v8;
  __int128 v9 = v2[3];
  __int128 v37 = v2[2];
  __int128 v38 = v9;
  __int128 v10 = v2[5];
  __int128 v39 = v2[4];
  __int128 v40 = v10;
  __int128 v11 = v2[1];
  v36[0] = *v2;
  v36[1] = v11;
  char v32 = BYTE8(v46);
  uint64_t v30 = *((void *)&v47 + 1);
  uint64_t v31 = v47;
  char v29 = v45;
  uint64_t v27 = v46;
  uint64_t v28 = *((void *)&v45 + 1);
  char v26 = BYTE8(v43);
  uint64_t v24 = *((void *)&v44 + 1);
  uint64_t v25 = v44;
  char v23 = v42;
  uint64_t v21 = v43;
  uint64_t v22 = *((void *)&v42 + 1);
  char v20 = v9;
  uint64_t v18 = v39;
  uint64_t v19 = *((void *)&v9 + 1);
  char v12 = BYTE8(v11);
  __int128 v13 = v37;
  char v14 = v36[0];
  uint64_t v15 = *((void *)&v36[0] + 1);
  uint64_t v16 = v11;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v18;
  *(_BYTE *)(a2 + 72) = v35;
  *(void *)(a2 + 80) = v34;
  *(void *)(a2 + 88) = v4;
  *(_BYTE *)(a2 + 96) = v33;
  *(void *)(a2 + 104) = v5;
  *(_BYTE *)(a2 + 112) = v23;
  *(void *)(a2 + 120) = v22;
  *(void *)(a2 + 128) = v21;
  *(_BYTE *)(a2 + 136) = v26;
  *(void *)(a2 + 144) = v25;
  *(void *)(a2 + 152) = v24;
  *(_BYTE *)(a2 + 160) = v29;
  *(void *)(a2 + 168) = v28;
  *(void *)(a2 + 176) = v27;
  *(_BYTE *)(a2 + 184) = v32;
  *(void *)(a2 + 192) = v31;
  *(void *)(a2 + 200) = v30;
  return result;
}

uint64_t URL.FormatStyle.port(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  __int128 v5 = v2[11];
  __int128 v45 = v2[10];
  __int128 v46 = v5;
  __int128 v47 = v2[12];
  __int128 v6 = v2[7];
  __int128 v41 = v2[6];
  __int128 v42 = v6;
  __int128 v7 = v2[9];
  __int128 v43 = v2[8];
  __int128 v44 = v7;
  __int128 v8 = v2[3];
  __int128 v37 = v2[2];
  __int128 v38 = v8;
  __int128 v9 = v2[5];
  __int128 v39 = v2[4];
  __int128 v40 = v9;
  __int128 v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = v45;
  uint64_t v28 = v46;
  uint64_t v29 = *((void *)&v45 + 1);
  char v27 = BYTE8(v43);
  uint64_t v25 = *((void *)&v44 + 1);
  uint64_t v26 = v44;
  char v24 = BYTE8(v39);
  uint64_t v22 = *((void *)&v40 + 1);
  uint64_t v23 = v40;
  char v20 = v8;
  char v21 = v41;
  uint64_t v18 = v39;
  uint64_t v19 = *((void *)&v8 + 1);
  char v11 = BYTE8(v10);
  __int128 v12 = v37;
  char v13 = v36[0];
  uint64_t v15 = *((void *)&v36[0] + 1);
  uint64_t v14 = v10;
  uint64_t v16 = *((void *)&v41 + 1);
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v13;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v18;
  *(_BYTE *)(a2 + 72) = v24;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v16;
  *(_BYTE *)(a2 + 112) = v35;
  *(void *)(a2 + 120) = v34;
  *(void *)(a2 + 128) = v4;
  *(_BYTE *)(a2 + 136) = v27;
  *(void *)(a2 + 144) = v26;
  *(void *)(a2 + 152) = v25;
  *(_BYTE *)(a2 + 160) = v30;
  *(void *)(a2 + 168) = v29;
  *(void *)(a2 + 176) = v28;
  *(_BYTE *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.path(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  __int128 v5 = v2[11];
  __int128 v45 = v2[10];
  __int128 v46 = v5;
  __int128 v47 = v2[12];
  __int128 v6 = v2[7];
  __int128 v41 = v2[6];
  __int128 v42 = v6;
  __int128 v7 = v2[9];
  __int128 v43 = v2[8];
  __int128 v44 = v7;
  __int128 v8 = v2[3];
  __int128 v37 = v2[2];
  __int128 v38 = v8;
  __int128 v9 = v2[5];
  __int128 v39 = v2[4];
  __int128 v40 = v9;
  __int128 v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = v45;
  uint64_t v28 = v46;
  uint64_t v29 = *((void *)&v45 + 1);
  char v27 = v42;
  uint64_t v25 = v43;
  uint64_t v26 = *((void *)&v42 + 1);
  char v24 = BYTE8(v39);
  uint64_t v22 = *((void *)&v40 + 1);
  uint64_t v23 = v40;
  char v21 = v41;
  uint64_t v20 = *((void *)&v41 + 1);
  char v19 = v8;
  uint64_t v11 = v39;
  uint64_t v18 = *((void *)&v8 + 1);
  char v12 = BYTE8(v10);
  __int128 v13 = v37;
  char v14 = v36[0];
  uint64_t v16 = *((void *)&v36[0] + 1);
  uint64_t v15 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v18;
  *(void *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v24;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v20;
  *(_BYTE *)(a2 + 112) = v27;
  *(void *)(a2 + 120) = v26;
  *(void *)(a2 + 128) = v25;
  *(_BYTE *)(a2 + 136) = v35;
  *(void *)(a2 + 144) = v34;
  *(void *)(a2 + 152) = v4;
  *(_BYTE *)(a2 + 160) = v30;
  *(void *)(a2 + 168) = v29;
  *(void *)(a2 + 176) = v28;
  *(_BYTE *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.query(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  __int128 v5 = v2[11];
  __int128 v45 = v2[10];
  __int128 v46 = v5;
  __int128 v47 = v2[12];
  __int128 v6 = v2[7];
  __int128 v41 = v2[6];
  __int128 v42 = v6;
  __int128 v7 = v2[9];
  __int128 v43 = v2[8];
  __int128 v44 = v7;
  __int128 v8 = v2[3];
  __int128 v37 = v2[2];
  __int128 v38 = v8;
  __int128 v9 = v2[5];
  __int128 v39 = v2[4];
  __int128 v40 = v9;
  __int128 v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = BYTE8(v46);
  uint64_t v31 = *((void *)&v47 + 1);
  uint64_t v32 = v47;
  char v30 = BYTE8(v43);
  uint64_t v28 = *((void *)&v44 + 1);
  uint64_t v29 = v44;
  char v27 = v42;
  uint64_t v25 = v43;
  uint64_t v26 = *((void *)&v42 + 1);
  char v24 = BYTE8(v39);
  uint64_t v22 = *((void *)&v40 + 1);
  uint64_t v23 = v40;
  char v21 = v41;
  uint64_t v20 = *((void *)&v41 + 1);
  char v19 = v8;
  uint64_t v11 = v39;
  uint64_t v18 = *((void *)&v8 + 1);
  char v12 = BYTE8(v10);
  __int128 v13 = v37;
  char v14 = v36[0];
  uint64_t v16 = *((void *)&v36[0] + 1);
  uint64_t v15 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v18;
  *(void *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v24;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v20;
  *(_BYTE *)(a2 + 112) = v27;
  *(void *)(a2 + 120) = v26;
  *(void *)(a2 + 128) = v25;
  *(_BYTE *)(a2 + 136) = v30;
  *(void *)(a2 + 144) = v29;
  *(void *)(a2 + 152) = v28;
  *(_BYTE *)(a2 + 160) = v35;
  *(void *)(a2 + 168) = v34;
  *(void *)(a2 + 176) = v4;
  *(_BYTE *)(a2 + 184) = v33;
  *(void *)(a2 + 192) = v32;
  *(void *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.fragment(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v34 = *((void *)a1 + 1);
  __int128 v5 = v2[11];
  __int128 v45 = v2[10];
  __int128 v46 = v5;
  __int128 v47 = v2[12];
  __int128 v6 = v2[7];
  __int128 v41 = v2[6];
  __int128 v42 = v6;
  __int128 v7 = v2[9];
  __int128 v43 = v2[8];
  __int128 v44 = v7;
  __int128 v8 = v2[3];
  __int128 v37 = v2[2];
  __int128 v38 = v8;
  __int128 v9 = v2[5];
  __int128 v39 = v2[4];
  __int128 v40 = v9;
  __int128 v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  char v33 = v45;
  uint64_t v31 = v46;
  uint64_t v32 = *((void *)&v45 + 1);
  char v30 = BYTE8(v43);
  uint64_t v28 = *((void *)&v44 + 1);
  uint64_t v29 = v44;
  char v27 = v42;
  uint64_t v25 = v43;
  uint64_t v26 = *((void *)&v42 + 1);
  char v24 = BYTE8(v39);
  uint64_t v22 = *((void *)&v40 + 1);
  uint64_t v23 = v40;
  char v21 = v41;
  uint64_t v20 = *((void *)&v41 + 1);
  char v19 = v8;
  uint64_t v11 = v39;
  uint64_t v18 = *((void *)&v8 + 1);
  char v12 = BYTE8(v10);
  __int128 v13 = v37;
  char v14 = v36[0];
  uint64_t v16 = *((void *)&v36[0] + 1);
  uint64_t v15 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v18;
  *(void *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v24;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v20;
  *(_BYTE *)(a2 + 112) = v27;
  *(void *)(a2 + 120) = v26;
  *(void *)(a2 + 128) = v25;
  *(_BYTE *)(a2 + 136) = v30;
  *(void *)(a2 + 144) = v29;
  *(void *)(a2 + 152) = v28;
  *(_BYTE *)(a2 + 160) = v33;
  *(void *)(a2 + 168) = v32;
  *(void *)(a2 + 176) = v31;
  *(_BYTE *)(a2 + 184) = v35;
  *(void *)(a2 + 192) = v34;
  *(void *)(a2 + 200) = v4;
  return result;
}

uint64_t URL.FormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 v3 = v1[9];
  __int128 v4 = v1[11];
  __int128 v26 = v1[10];
  __int128 v27 = v4;
  __int128 v5 = v1[11];
  __int128 v28 = v1[12];
  __int128 v6 = v1[5];
  __int128 v7 = v1[7];
  __int128 v22 = v1[6];
  __int128 v23 = v7;
  __int128 v8 = v1[7];
  __int128 v9 = v1[9];
  __int128 v24 = v1[8];
  __int128 v25 = v9;
  __int128 v10 = v1[1];
  __int128 v11 = v1[3];
  __int128 v18 = v1[2];
  __int128 v19 = v11;
  __int128 v12 = v1[3];
  __int128 v13 = v1[5];
  __int128 v20 = v1[4];
  __int128 v21 = v13;
  __int128 v14 = v1[1];
  v17[0] = *v1;
  v17[1] = v14;
  v16[10] = v26;
  v16[11] = v5;
  v16[12] = v1[12];
  _OWORD v16[6] = v22;
  v16[7] = v8;
  v16[8] = v24;
  v16[9] = v3;
  void v16[2] = v18;
  v16[3] = v12;
  v16[4] = v20;
  void v16[5] = v6;
  v16[0] = v17[0];
  v16[1] = v10;
  outlined retain of URL.FormatStyle((uint64_t)v17);
  return URL.ParseStrategy.init(format:lenient:)(v16, a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance URL.FormatStyle@<X0>( uint64_t a1@<X8>)
{
  __int128 v3 = v1[9];
  __int128 v4 = v1[11];
  __int128 v26 = v1[10];
  __int128 v27 = v4;
  __int128 v5 = v1[11];
  __int128 v28 = v1[12];
  __int128 v6 = v1[5];
  __int128 v7 = v1[7];
  __int128 v22 = v1[6];
  __int128 v23 = v7;
  __int128 v8 = v1[7];
  __int128 v9 = v1[9];
  __int128 v24 = v1[8];
  __int128 v25 = v9;
  __int128 v10 = v1[1];
  __int128 v11 = v1[3];
  __int128 v18 = v1[2];
  __int128 v19 = v11;
  __int128 v12 = v1[3];
  __int128 v13 = v1[5];
  __int128 v20 = v1[4];
  __int128 v21 = v13;
  __int128 v14 = v1[1];
  v17[0] = *v1;
  v17[1] = v14;
  v16[10] = v26;
  v16[11] = v5;
  v16[12] = v1[12];
  _OWORD v16[6] = v22;
  v16[7] = v8;
  v16[8] = v24;
  v16[9] = v3;
  void v16[2] = v18;
  v16[3] = v12;
  v16[4] = v20;
  void v16[5] = v6;
  v16[0] = v17[0];
  v16[1] = v10;
  outlined retain of URL.FormatStyle((uint64_t)v17);
  return URL.ParseStrategy.init(format:lenient:)(v16, a1);
}

uint64_t URL.FormatStyle.url(_:satisfies:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2)
  {
    uint64_t v3 = *a2;
    if ((_DWORD)v3 != 4) {
      __asm { BR              X10 }
    }

    URL.port.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
      char v6 = specialized Set.contains(_:)(v4, v5, v2);
      swift_bridgeObjectRelease();
    }

    else
    {
      char v6 = 0;
    }
  }

  else
  {
    char v6 = 1;
  }

  return v6 & 1;
}

uint64_t URL.FormatStyle.shouldDisplayComponent(from:basedOn:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *((void *)a2 + 2);
  if (v3)
  {
    uint64_t v4 = a2[8];
    if ((_DWORD)v4 != 4) {
      __asm { BR              X10 }
    }

    swift_bridgeObjectRetain();
    URL.port.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
      char v7 = specialized Set.contains(_:)(v5, v6, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0) {
        return v2;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    return v2 ^ 1;
  }

  return v2;
}

uint64_t URL.FormatStyle.isIPv4(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = 46LL;
  uint64_t v22 = 0xE100000000000000LL;
  void v19[2] = &v21;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( 0x7FFFFFFFFFFFFFFFLL,  1,  closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply,  (uint64_t)v19,  a1,  a2);
  uint64_t v5 = v4;
  if (v4[2] == 4LL && (v7 = v4[4], unint64_t v6 = v4[5], (v6 ^ v7) >= 0x4000))
  {
    __int128 v8 = v4 + 7;
    for (unint64_t i = 1LL; ; ++i)
    {
      unint64_t v11 = *(v8 - 1);
      unint64_t v10 = *v8;
      swift_bridgeObjectRetain();
      if ((v10 & 0x1000000000000000LL) != 0)
      {
        unint64_t v13 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v6, v11, v10, 10LL);
        char v15 = v18;
      }

      else
      {
        if ((v10 & 0x2000000000000000LL) != 0)
        {
          uint64_t v21 = v11;
          uint64_t v22 = v10 & 0xFFFFFFFFFFFFFFLL;
          __int128 v12 = &v21;
        }

        else
        {
          __int128 v12 = (uint64_t *)((v11 & 0x1000000000000000LL) != 0
                          ? (v10 & 0xFFFFFFFFFFFFFFFLL) + 32
                          : _StringObject.sharedUTF8.getter());
        }

        unint64_t v13 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n( (uint64_t)v12,  v7,  v6,  v11,  v10,  10LL);
        char v20 = v14 & 1;
        char v15 = v14 & 1;
      }

      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v17 = 0LL;
      if ((v15 & 1) != 0 || (v13 & 0x8000000000000000LL) != 0 || v13 > 0xFF) {
        break;
      }
      if (i == 4)
      {
        uint64_t v17 = 1LL;
        break;
      }

      if (i >= v5[2])
      {
        __break(1u);
        return result;
      }

      unint64_t v7 = v8[1];
      unint64_t v6 = v8[2];
      if ((v6 ^ v7) < 0x4000) {
        goto LABEL_19;
      }
      v8 += 4;
    }
  }

  else
  {
LABEL_19:
    uint64_t v17 = 0LL;
  }

  swift_bridgeObjectRelease();
  return v17;
}

uint64_t URL.FormatStyle.isIPv6(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v47 = a1;
  unint64_t v48 = a2;
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 91LL;
  v4._unint64_t object = (void *)0xE100000000000000LL;
  if (!String.hasPrefix(_:)(v4)
    || (v5._uint64_t countAndFlagsBits = 93LL,
        v5._unint64_t object = (void *)0xE100000000000000LL,
        uint64_t result = String.hasSuffix(_:)(v5),
        (result & 1) == 0))
  {
LABEL_65:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }

  uint64_t result = specialized Collection.first.getter(a1, a2);
  if (!v8)
  {
LABEL_73:
    __break(1u);
    return result;
  }

  specialized RangeReplaceableCollection.removeFirst(_:)(1LL);
  swift_bridgeObjectRelease();
  specialized RangeReplaceableCollection<>.removeLast()();
  uint64_t v9 = swift_bridgeObjectRelease();
  uint64_t v10 = v47;
  unint64_t v11 = v48;
  uint64_t v45 = 58LL;
  uint64_t v46 = 0xE100000000000000LL;
  MEMORY[0x1895F8858](v9);
  v43[2] = &v45;
  swift_bridgeObjectRetain_n();
  uint64_t v12 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( 0x7FFFFFFFFFFFFFFFLL,  1,  closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply,  (uint64_t)v43,  v10,  v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    unint64_t v14 = 0LL;
    __int128 v44 = (char *)&v45 + 1;
    while (v14 < *(void *)(v12 + 16))
    {
      char v15 = (uint64_t *)(v12 + 32 + 32 * v14);
      uint64_t v16 = *v15;
      unint64_t v17 = v15[1];
      if ((v17 ^ *v15) >= 0x4000)
      {
        uint64_t v19 = v15[2];
        uint64_t v18 = v15[3];
        swift_bridgeObjectRetain();
        uint64_t v20 = MEMORY[0x186E1B610](v16, v17, v19, v18);
        unint64_t v22 = v21;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v23 = HIBYTE(v22) & 0xF;
        uint64_t v24 = v20 & 0xFFFFFFFFFFFFLL;
        if ((v22 & 0x2000000000000000LL) != 0) {
          uint64_t v25 = HIBYTE(v22) & 0xF;
        }
        else {
          uint64_t v25 = v20 & 0xFFFFFFFFFFFFLL;
        }
        if (!v25) {
          goto LABEL_69;
        }
        if ((v22 & 0x1000000000000000LL) != 0)
        {
          unint64_t v27 = specialized _parseInteger<A, B>(ascii:radix:)(v20, v22, 16LL);
          char v29 = v42;
        }

        else if ((v22 & 0x2000000000000000LL) != 0)
        {
          uint64_t v45 = v20;
          uint64_t v46 = v22 & 0xFFFFFFFFFFFFFFLL;
          if (v20 == 43)
          {
            if (!v23) {
              goto LABEL_72;
            }
            uint64_t v35 = v23 - 1;
            if (v35)
            {
              unint64_t v27 = 0LL;
              char v36 = (unsigned __int8 *)v44;
              while (1)
              {
                int v37 = *v36;
                unsigned __int8 v38 = v37 - 48;
                if ((v37 - 48) >= 0xA)
                {
                  if ((v37 - 65) < 6)
                  {
                    unsigned __int8 v38 = v37 - 55;
                  }

                  else
                  {
                    unsigned __int8 v38 = v37 - 87;
                  }
                }

                if ((v27 - 0x800000000000000LL) >> 60 != 15) {
                  break;
                }
                BOOL v34 = __OFADD__(16 * v27, v38);
                unint64_t v27 = 16 * v27 + v38;
                if (v34) {
                  break;
                }
                ++v36;
                if (!--v35)
                {
LABEL_57:
                  char v29 = 0;
                  goto LABEL_59;
                }
              }
            }
          }

          else if (v20 == 45)
          {
            if (!v23) {
              goto LABEL_71;
            }
            uint64_t v30 = v23 - 1;
            if (v30)
            {
              unint64_t v27 = 0LL;
              uint64_t v31 = (unsigned __int8 *)v44;
              while (1)
              {
                int v32 = *v31;
                unsigned __int8 v33 = v32 - 48;
                if ((v32 - 48) >= 0xA)
                {
                  if ((v32 - 65) < 6)
                  {
                    unsigned __int8 v33 = v32 - 55;
                  }

                  else
                  {
                    unsigned __int8 v33 = v32 - 87;
                  }
                }

                if ((v27 - 0x800000000000000LL) >> 60 != 15) {
                  break;
                }
                BOOL v34 = __OFSUB__(16 * v27, v33);
                unint64_t v27 = 16 * v27 - v33;
                if (v34) {
                  break;
                }
                ++v31;
                if (!--v30) {
                  goto LABEL_57;
                }
              }
            }
          }

          else if (v23)
          {
            unint64_t v27 = 0LL;
            __int128 v39 = &v45;
            while (1)
            {
              int v40 = *(unsigned __int8 *)v39;
              unsigned __int8 v41 = v40 - 48;
              if ((v40 - 48) >= 0xA)
              {
                if ((v40 - 65) < 6)
                {
                  unsigned __int8 v41 = v40 - 55;
                }

                else
                {
                  unsigned __int8 v41 = v40 - 87;
                }
              }

              if ((v27 - 0x800000000000000LL) >> 60 != 15) {
                break;
              }
              BOOL v34 = __OFADD__(16 * v27, v41);
              unint64_t v27 = 16 * v27 + v41;
              if (v34) {
                break;
              }
              __int128 v39 = (uint64_t *)((char *)v39 + 1);
              if (!--v23) {
                goto LABEL_57;
              }
            }
          }

          unint64_t v27 = 0LL;
          char v29 = 1;
        }

        else
        {
          if ((v20 & 0x1000000000000000LL) != 0) {
            __int128 v26 = (unsigned __int8 *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            __int128 v26 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          }
          unint64_t v27 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v26, v24, 16LL);
          char v29 = v28 & 1;
        }

uint64_t URL.FormatStyle.generateFormattedString(from:useEncodedHost:)(_OWORD *a1, char a2)
{
  Swift::String v3 = (Swift::String)a1[7];
  __int128 v4 = a1[5];
  Swift::String v219 = (Swift::String)a1[6];
  Swift::String v220 = v3;
  __int128 v5 = a1[7];
  *(_OWORD *)__int128 v221 = a1[8];
  *(_OWORD *)&v221[10] = *(_OWORD *)((char *)a1 + 138);
  Swift::String v6 = (Swift::String)a1[3];
  __int128 v7 = a1[1];
  Swift::String v215 = (Swift::String)a1[2];
  Swift::String v216 = v6;
  __int128 v8 = a1[3];
  Swift::String v9 = (Swift::String)a1[5];
  Swift::String v217 = (Swift::String)a1[4];
  Swift::String v218 = v9;
  Swift::String v10 = (Swift::String)a1[1];
  Swift::String v213 = (Swift::String)*a1;
  Swift::String v214 = v10;
  Swift::String v210 = v219;
  __int128 v211 = v5;
  v212[0] = a1[8];
  *(_OWORD *)((char *)v212 + 10) = *(_OWORD *)((char *)a1 + 138);
  Swift::String v206 = v215;
  __int128 v207 = v8;
  Swift::String v208 = v217;
  __int128 v209 = v4;
  uint64_t v202 = 0LL;
  unint64_t v203 = 0xE000000000000000LL;
  Swift::String v204 = v213;
  __int128 v205 = v7;
  uint64_t countAndFlagsBits = v213._countAndFlagsBits;
  if (v215._countAndFlagsBits)
  {
    uint64_t object = (uint64_t)v214._object;
    uint64_t v13 = (void *)v215._countAndFlagsBits;
  }

  else
  {
    if (BYTE1(v213._object) != 1 || !v213._countAndFlagsBits || (*(_BYTE *)(v213._countAndFlagsBits + 48) & 1) != 0) {
      goto LABEL_52;
    }
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v20 = String.subscript.getter();
    uint64_t object = MEMORY[0x186E1B610](v20);
    uint64_t v13 = v21;
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v213);
  }

  v200[0]._uint64_t countAndFlagsBits = object;
  v200[0]._uint64_t object = v13;
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = 58LL;
  v14._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = object;
  v15._uint64_t object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  unint64_t v16 = v218._countAndFlagsBits;
  if (v218._countAndFlagsBits)
  {
    uint64_t v17 = (uint64_t)v217._object;
    uint64_t v18 = outlined retain of URLComponents((uint64_t)&v213);
    unint64_t v19 = v16;
  }

  else if (BYTE4(v213._object) == 1 && countAndFlagsBits && (*(_BYTE *)(countAndFlagsBits + 120) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v25 = String.subscript.getter();
    uint64_t v17 = MEMORY[0x186E1B610](v25);
    unint64_t v19 = v26;
    uint64_t v18 = swift_bridgeObjectRelease();
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v18 = URLComponents._URLComponents.port.getter();
    if ((v22 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v24 = v23;
      uint64_t v18 = swift_bridgeObjectRelease();
      if (!v24)
      {
        outlined release of URLComponents((uint64_t)&v213);
        goto LABEL_52;
      }
    }

    uint64_t v17 = 0LL;
    unint64_t v19 = 0xE000000000000000LL;
  }

  uint64_t v27 = v17 & 0xFFFFFFFFFFFFLL;
  if ((v19 & 0x2000000000000000LL) != 0) {
    uint64_t v28 = HIBYTE(v19) & 0xF;
  }
  else {
    uint64_t v28 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (!v28)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v213);
    goto LABEL_51;
  }

  if ((v221[24] & 1) == 0)
  {
    if ((v19 & 0x1000000000000000LL) != 0)
    {
      uint64_t v195 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      if ((v19 & 0x2000000000000000LL) != 0)
      {
        v200[0]._uint64_t countAndFlagsBits = v17;
        v200[0]._uint64_t object = (void *)(v19 & 0xFFFFFFFFFFFFFFLL);
        uint64_t v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v199 = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)v200,  HIBYTE(v19) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198,  0,  (unsigned __int8 *)v200,  HIBYTE(v19) & 0xF,  &v196);
        uint64_t v35 = v196;
        uint64_t v37 = (uint64_t)v197;
        swift_release();
      }

      else
      {
        if ((v17 & 0x1000000000000000LL) != 0)
        {
          BOOL v34 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          BOOL v34 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v27 = v55;
        }

        v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v200[0]._uint64_t object = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v35 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v34,  v27,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200,  0,  v34,  v27);
        uint64_t v37 = v36;
      }

      swift_bridgeObjectRelease();
      if (v37 != 1)
      {
        swift_bridgeObjectRelease_n();
        outlined release of URLComponents((uint64_t)&v213);
        outlined consume of AttributedString.AttributeRunBoundaries?(v35, v37);
        if (!v37) {
          goto LABEL_52;
        }
LABEL_51:
        v58._uint64_t countAndFlagsBits = 12079LL;
        v58._uint64_t object = (void *)0xE200000000000000LL;
        String.append(_:)(v58);
        goto LABEL_52;
      }

      uint64_t v195 = countAndFlagsBits;
    }

    v200[0]._uint64_t countAndFlagsBits = v17;
    v200[0]._uint64_t object = (void *)v19;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    unsigned __int8 v38 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v39 = objc_msgSend(v38, sel__fastCharacterContents);
    id v40 = v38;
    if (v39)
    {
      v200[0]._uint64_t countAndFlagsBits = v17;
      v200[0]._uint64_t object = (void *)v19;
      StringProtocol._ephemeralString.getter();
      unsigned __int8 v41 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v42 = objc_msgSend(v41, sel_length);
      uint64_t v43 = swift_unknownObjectRelease();
      uint64_t v44 = MEMORY[0x1895F8858](v43);
      LOBYTE(v193) = 0;
      MEMORY[0x1895F8858](v44);
      id v190 = v39;
      id v191 = v42;
      specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v39,  (uint64_t)v42,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v45,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v189);
      uint64_t v47 = v46;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v213);
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v195;
      if (!v47) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }

    v200[0]._uint64_t countAndFlagsBits = v17;
    v200[0]._uint64_t object = (void *)v19;
    swift_bridgeObjectRetain();
    uint64_t v49 = String.init<A>(_:)();
    unint64_t v50 = v48;
    uint64_t countAndFlagsBits = v195;
    if ((v48 & 0x1000000000000000LL) != 0)
    {
      uint64_t v49 = static String._copying(_:)();
      unint64_t v57 = v56;
      swift_bridgeObjectRelease();
      unint64_t v50 = v57;
      if ((v57 & 0x2000000000000000LL) == 0) {
        goto LABEL_42;
      }
    }

    else if ((v48 & 0x2000000000000000LL) == 0)
    {
LABEL_42:
      if ((v49 & 0x1000000000000000LL) != 0)
      {
        uint64_t v51 = (unsigned __int8 *)((v50 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v52 = v49 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v51 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }

      v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v200[0]._uint64_t object = 0LL;
      _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v51,  v52,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200,  0,  v51,  v52);
      uint64_t v54 = v53;
LABEL_50:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v213);
      swift_bridgeObjectRelease();
      if (!v54) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }

    v200[0]._uint64_t countAndFlagsBits = v49;
    v200[0]._uint64_t object = (void *)(v50 & 0xFFFFFFFFFFFFFFLL);
    uint64_t v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v199 = 0LL;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)v200,  HIBYTE(v50) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198,  0,  (unsigned __int8 *)v200,  HIBYTE(v50) & 0xF,  &v196);
    uint64_t v54 = v197;
    swift_release();
    goto LABEL_50;
  }

  v200[0]._uint64_t countAndFlagsBits = v17;
  v200[0]._uint64_t object = (void *)v19;
  MEMORY[0x1895F8858](v18);
  int v193 = v200;
  uint64_t v194 = MEMORY[0x18961AFF8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v192,  v17,  v19);
  if (v29 == 1)
  {
    uint64_t v31 = v200[0]._object;
    Swift::Int v30 = v200[0]._countAndFlagsBits;
    swift_bridgeObjectRetain();
    specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v30,  (unint64_t)v31,  MEMORY[0x18961AFF8]);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v33 = v29;
    swift_bridgeObjectRelease_n();
  }

  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_51;
  }
LABEL_52:
  uint64_t v59 = outlined retain of URLComponents((uint64_t)&v213);
  char v60 = URLComponents._URLComponents.user.getter(v59);
  __int128 v62 = v61;
  outlined release of URLComponents((uint64_t)&v213);
  if (v62)
  {
    v63._uint64_t countAndFlagsBits = (uint64_t)v60;
    v63._uint64_t object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
  }

  uint64_t v64 = outlined retain of URLComponents((uint64_t)&v213);
  __int128 v65 = URLComponents._URLComponents.password.getter(v64);
  __int128 v67 = v66;
  outlined release of URLComponents((uint64_t)&v213);
  if (v67)
  {
    uint64_t v68 = outlined retain of URLComponents((uint64_t)&v213);
    URLComponents._URLComponents.user.getter(v68);
    uint64_t v70 = v69;
    outlined release of URLComponents((uint64_t)&v213);
    swift_bridgeObjectRelease();
    if (v70)
    {
      v71._uint64_t countAndFlagsBits = 58LL;
      v71._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v71);
    }

    v72._uint64_t countAndFlagsBits = (uint64_t)v65;
    v72._uint64_t object = v67;
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
  }

  if ((a2 & 1) != 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v73 = URLComponents._URLComponents.encodedHost.getter();
    id v75 = v74;
LABEL_60:
    outlined release of URLComponents((uint64_t)&v213);
    goto LABEL_61;
  }

  unint64_t v76 = v218._countAndFlagsBits;
  if (v218._countAndFlagsBits)
  {
    uint64_t v77 = (uint64_t)v217._object;
    uint64_t v78 = outlined retain of URLComponents((uint64_t)&v213);
    unint64_t v79 = v76;
  }

  else if (BYTE4(v213._object) == 1 && countAndFlagsBits && (*(_BYTE *)(countAndFlagsBits + 120) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v83 = String.subscript.getter();
    uint64_t v77 = MEMORY[0x186E1B610](v83);
    unint64_t v79 = v84;
    uint64_t v78 = swift_bridgeObjectRelease();
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v78 = URLComponents._URLComponents.port.getter();
    if ((v80 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v82 = v81;
      uint64_t v78 = swift_bridgeObjectRelease();
      if (!v82)
      {
        outlined release of URLComponents((uint64_t)&v213);
        goto LABEL_91;
      }
    }

    uint64_t v77 = 0LL;
    unint64_t v79 = 0xE000000000000000LL;
  }

  uint64_t v85 = v77 & 0xFFFFFFFFFFFFLL;
  if ((v79 & 0x2000000000000000LL) != 0) {
    uint64_t v86 = HIBYTE(v79) & 0xF;
  }
  else {
    uint64_t v86 = v77 & 0xFFFFFFFFFFFFLL;
  }
  if (v86)
  {
    if (v221[24] == 1)
    {
      v200[0]._uint64_t countAndFlagsBits = v77;
      v200[0]._uint64_t object = (void *)v79;
      MEMORY[0x1895F8858](v78);
      int v193 = v200;
      uint64_t v194 = MEMORY[0x18961AFF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v87 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v192,  v77,  v79);
      if (v88 == (void *)1)
      {
        Swift::String v89 = v200[0];
        swift_bridgeObjectRetain();
        uint64_t v73 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v89._countAndFlagsBits,  (unint64_t)v89._object,  MEMORY[0x18961AFF8]);
        id v75 = v90;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v73 = (uint64_t)v87;
        id v75 = v88;
        swift_bridgeObjectRelease_n();
      }

      outlined release of URLComponents((uint64_t)&v213);
      if (!v75) {
        goto LABEL_91;
      }
      goto LABEL_87;
    }

    if ((v79 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      if ((v79 & 0x2000000000000000LL) != 0)
      {
        v200[0]._uint64_t countAndFlagsBits = v77;
        v200[0]._uint64_t object = (void *)(v79 & 0xFFFFFFFFFFFFFFLL);
        uint64_t v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v199 = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)v200,  HIBYTE(v79) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198,  0,  (unsigned __int8 *)v200,  HIBYTE(v79) & 0xF,  &v196);
        uint64_t v73 = v196;
        id v75 = v197;
        swift_release();
      }

      else
      {
        if ((v77 & 0x1000000000000000LL) != 0)
        {
          __int128 v91 = (unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          __int128 v91 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v85 = v156;
        }

        v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v200[0]._uint64_t object = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v73 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v91,  v85,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200,  0,  v91,  v85);
        id v75 = v92;
      }

      swift_bridgeObjectRelease();
      if (v75 != (void *)1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_60;
      }
    }

    v200[0]._uint64_t countAndFlagsBits = v77;
    v200[0]._uint64_t object = (void *)v79;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    __int128 v111 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v112 = objc_msgSend(v111, sel__fastCharacterContents);
    id v113 = v111;
    if (v112)
    {
      v200[0]._uint64_t countAndFlagsBits = v77;
      v200[0]._uint64_t object = (void *)v79;
      StringProtocol._ephemeralString.getter();
      uint64_t v114 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v115 = objc_msgSend(v114, sel_length);
      uint64_t v116 = swift_unknownObjectRelease();
      uint64_t v117 = MEMORY[0x1895F8858](v116);
      LOBYTE(v193) = 0;
      MEMORY[0x1895F8858](v117);
      id v190 = v112;
      id v191 = v115;
      uint64_t v73 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v112,  (uint64_t)v115,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v118,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v189);
      id v75 = v119;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v213);
LABEL_61:
      if (!v75) {
        goto LABEL_91;
      }
      goto LABEL_87;
    }

    v200[0]._uint64_t countAndFlagsBits = v77;
    v200[0]._uint64_t object = (void *)v79;
    swift_bridgeObjectRetain();
    uint64_t v144 = String.init<A>(_:)();
    unint64_t v145 = v143;
    if ((v143 & 0x1000000000000000LL) != 0)
    {
      uint64_t v144 = static String._copying(_:)();
      unint64_t v159 = v158;
      swift_bridgeObjectRelease();
      unint64_t v145 = v159;
      if ((v159 & 0x2000000000000000LL) == 0) {
        goto LABEL_131;
      }
    }

    else if ((v143 & 0x2000000000000000LL) == 0)
    {
LABEL_131:
      if ((v144 & 0x1000000000000000LL) != 0)
      {
        unint64_t v146 = (unsigned __int8 *)((v145 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v147 = v144 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        unint64_t v146 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }

      v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v200[0]._uint64_t object = 0LL;
      uint64_t v73 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v146,  v147,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200,  0,  v146,  v147);
      id v75 = v148;
      goto LABEL_147;
    }

    v200[0]._uint64_t countAndFlagsBits = v144;
    v200[0]._uint64_t object = (void *)(v145 & 0xFFFFFFFFFFFFFFLL);
    uint64_t v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v199 = 0LL;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)v200,  HIBYTE(v145) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198,  0,  (unsigned __int8 *)v200,  HIBYTE(v145) & 0xF,  &v196);
    uint64_t v73 = v196;
    id v75 = v197;
    swift_release();
LABEL_147:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v213);
  uint64_t v73 = 0LL;
  id v75 = (void *)0xE000000000000000LL;
LABEL_87:
  uint64_t v93 = outlined retain of URLComponents((uint64_t)&v213);
  URLComponents._URLComponents.user.getter(v93);
  uint64_t v95 = v94;
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  if (v95
    || (uint64_t v96 = outlined retain of URLComponents((uint64_t)&v213),
        URLComponents._URLComponents.password.getter(v96),
        uint64_t v98 = v97,
        outlined release of URLComponents((uint64_t)&v213),
        swift_bridgeObjectRelease(),
        v98))
  {
    v99._uint64_t countAndFlagsBits = 64LL;
    v99._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v99);
  }

  v100._uint64_t countAndFlagsBits = v73;
  v100._uint64_t object = v75;
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
LABEL_91:
  v200[7] = v220;
  v201[0] = *(_OWORD *)v221;
  *(_OWORD *)((char *)v201 + 10) = *(_OWORD *)&v221[10];
  v200[3] = v216;
  v200[4] = v217;
  v200[5] = v218;
  v200[6] = v219;
  v200[0] = v213;
  v200[1] = v214;
  v200[2] = v215;
  uint64_t v101 = URLComponents.port.getter();
  if ((v102 & 1) != 0) {
    goto LABEL_153;
  }
  uint64_t v103 = v101;
  unint64_t v104 = v218._countAndFlagsBits;
  if (v218._countAndFlagsBits)
  {
    uint64_t v105 = (uint64_t)v217._object;
    uint64_t v106 = outlined retain of URLComponents((uint64_t)&v213);
    unint64_t v107 = v104;
  }

  else if (BYTE4(v213._object) == 1 && countAndFlagsBits && (*(_BYTE *)(countAndFlagsBits + 120) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v120 = String.subscript.getter();
    uint64_t v105 = MEMORY[0x186E1B610](v120);
    unint64_t v107 = v121;
    uint64_t v106 = swift_bridgeObjectRelease();
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v106 = URLComponents._URLComponents.port.getter();
    if ((v108 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v110 = v109;
      uint64_t v106 = swift_bridgeObjectRelease();
      if (!v110)
      {
        outlined release of URLComponents((uint64_t)&v213);
        goto LABEL_152;
      }
    }

    uint64_t v105 = 0LL;
    unint64_t v107 = 0xE000000000000000LL;
  }

  uint64_t v122 = v105 & 0xFFFFFFFFFFFFLL;
  if ((v107 & 0x2000000000000000LL) != 0) {
    uint64_t v123 = HIBYTE(v107) & 0xF;
  }
  else {
    uint64_t v123 = v105 & 0xFFFFFFFFFFFFLL;
  }
  if (!v123)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v213);
LABEL_151:
    v162._uint64_t countAndFlagsBits = 58LL;
    v162._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v162);
    goto LABEL_152;
  }

  if ((v221[24] & 1) != 0)
  {
    v200[0]._uint64_t countAndFlagsBits = v105;
    v200[0]._uint64_t object = (void *)v107;
    MEMORY[0x1895F8858](v106);
    int v193 = v200;
    uint64_t v194 = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v192,  v105,  v107);
    if (v124 == 1)
    {
      uint64_t v126 = v200[0]._object;
      Swift::Int v125 = v200[0]._countAndFlagsBits;
      swift_bridgeObjectRetain();
      specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v125,  (unint64_t)v126,  MEMORY[0x18961AFF8]);
      uint64_t v128 = v127;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v128 = v124;
      swift_bridgeObjectRelease_n();
    }

    outlined release of URLComponents((uint64_t)&v213);
    swift_bridgeObjectRelease();
    if (!v128) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }

  if ((v107 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    if ((v107 & 0x2000000000000000LL) != 0)
    {
      v200[0]._uint64_t countAndFlagsBits = v105;
      v200[0]._uint64_t object = (void *)(v107 & 0xFFFFFFFFFFFFFFLL);
      uint64_t v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v199 = 0LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)v200,  HIBYTE(v107) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198,  0,  (unsigned __int8 *)v200,  HIBYTE(v107) & 0xF,  &v196);
      uint64_t v130 = v196;
      uint64_t v132 = (uint64_t)v197;
      swift_release();
    }

    else
    {
      if ((v105 & 0x1000000000000000LL) != 0)
      {
        uint64_t v129 = (unsigned __int8 *)((v107 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        uint64_t v129 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        uint64_t v122 = v157;
      }

      v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v200[0]._uint64_t object = 0LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      uint64_t v130 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v129,  v122,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200,  0,  v129,  v122);
      uint64_t v132 = v131;
    }

    swift_bridgeObjectRelease();
    if (v132 != 1)
    {
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v213);
      outlined consume of AttributedString.AttributeRunBoundaries?(v130, v132);
      if (!v132) {
        goto LABEL_152;
      }
      goto LABEL_151;
    }
  }

  v200[0]._uint64_t countAndFlagsBits = v105;
  v200[0]._uint64_t object = (void *)v107;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  unint64_t v133 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v134 = objc_msgSend(v133, sel__fastCharacterContents);
  id v135 = v133;
  if (v134)
  {
    v200[0]._uint64_t countAndFlagsBits = v105;
    v200[0]._uint64_t object = (void *)v107;
    StringProtocol._ephemeralString.getter();
    unint64_t v136 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v137 = objc_msgSend(v136, sel_length);
    uint64_t v138 = swift_unknownObjectRelease();
    uint64_t v139 = MEMORY[0x1895F8858](v138);
    LOBYTE(v193) = 0;
    MEMORY[0x1895F8858](v139);
    id v190 = v134;
    id v191 = v137;
    specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v134,  (uint64_t)v137,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v140,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v189);
    uint64_t v142 = v141;
    swift_bridgeObjectRelease_n();
    outlined release of URLComponents((uint64_t)&v213);
    swift_bridgeObjectRelease();
    if (!v142) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }

  v200[0]._uint64_t countAndFlagsBits = v105;
  v200[0]._uint64_t object = (void *)v107;
  swift_bridgeObjectRetain();
  uint64_t v150 = String.init<A>(_:)();
  unint64_t v151 = v149;
  if ((v149 & 0x1000000000000000LL) != 0)
  {
    uint64_t v150 = static String._copying(_:)();
    unint64_t v161 = v160;
    swift_bridgeObjectRelease();
    unint64_t v151 = v161;
    if ((v161 & 0x2000000000000000LL) == 0) {
      goto LABEL_136;
    }
LABEL_149:
    v200[0]._uint64_t countAndFlagsBits = v150;
    v200[0]._uint64_t object = (void *)(v151 & 0xFFFFFFFFFFFFFFLL);
    uint64_t v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v199 = 0LL;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)v200,  HIBYTE(v151) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198,  0,  (unsigned __int8 *)v200,  HIBYTE(v151) & 0xF,  &v196);
    uint64_t v155 = v197;
    swift_release();
    goto LABEL_150;
  }

  if ((v149 & 0x2000000000000000LL) != 0) {
    goto LABEL_149;
  }
LABEL_136:
  if ((v150 & 0x1000000000000000LL) != 0)
  {
    __int128 v152 = (unsigned __int8 *)((v151 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v153 = v150 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    __int128 v152 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }

  v200[0]._uint64_t countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
  v200[0]._uint64_t object = 0LL;
  _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v152,  v153,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200,  0,  v152,  v153);
  uint64_t v155 = v154;
LABEL_150:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  if (v155) {
    goto LABEL_151;
  }
LABEL_152:
  v200[0]._uint64_t countAndFlagsBits = v103;
  v163._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v163);
  swift_bridgeObjectRelease();
LABEL_153:
  outlined retain of URLComponents((uint64_t)&v213);
  id v164 = URLComponents._URLComponents.path.getter();
  unint64_t v166 = v165;
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  uint64_t v167 = HIBYTE(v166) & 0xF;
  if ((v166 & 0x2000000000000000LL) == 0) {
    uint64_t v167 = (unint64_t)v164 & 0xFFFFFFFFFFFFLL;
  }
  if (v167)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    uint64_t v168 = (uint64_t)URLComponents._URLComponents.path.getter();
    id v170 = v169;
    outlined release of URLComponents((uint64_t)&v213);
    v200[0]._uint64_t countAndFlagsBits = v168;
    v200[0]._uint64_t object = v170;
    swift_bridgeObjectRetain();
    v171._uint64_t countAndFlagsBits = 47LL;
    v171._uint64_t object = (void *)0xE100000000000000LL;
    LOBYTE(v168) = String.hasSuffix(_:)(v171);
    swift_bridgeObjectRelease();
    if ((v168 & 1) != 0)
    {
      uint64_t v172 = outlined retain of URLComponents((uint64_t)&v213);
      URLComponents._URLComponents.query.getter(v172);
      uint64_t v174 = v173;
      outlined release of URLComponents((uint64_t)&v213);
      swift_bridgeObjectRelease();
      if (!v174)
      {
        uint64_t v175 = outlined retain of URLComponents((uint64_t)&v213);
        URLComponents._URLComponents.fragment.getter(v175);
        uint64_t v177 = v176;
        outlined release of URLComponents((uint64_t)&v213);
        swift_bridgeObjectRelease();
        if (!v177)
        {
          specialized RangeReplaceableCollection<>.removeLast()();
          swift_bridgeObjectRelease();
        }
      }
    }

    String.append(_:)(v200[0]);
    swift_bridgeObjectRelease();
  }

  uint64_t v178 = outlined retain of URLComponents((uint64_t)&v213);
  unint64_t v179 = URLComponents._URLComponents.query.getter(v178);
  uint64_t v181 = v180;
  outlined release of URLComponents((uint64_t)&v213);
  if (v181)
  {
    v200[0]._uint64_t countAndFlagsBits = 63LL;
    v200[0]._uint64_t object = (void *)0xE100000000000000LL;
    v182._uint64_t countAndFlagsBits = (uint64_t)v179;
    v182._uint64_t object = v181;
    String.append(_:)(v182);
    swift_bridgeObjectRelease();
    String.append(_:)(v200[0]);
    swift_bridgeObjectRelease();
  }

  uint64_t v183 = outlined retain of URLComponents((uint64_t)&v213);
  uint64_t v184 = URLComponents._URLComponents.fragment.getter(v183);
  int v186 = v185;
  outlined release of URLComponents((uint64_t)&v213);
  if (v186)
  {
    v200[0]._uint64_t countAndFlagsBits = 35LL;
    v200[0]._uint64_t object = (void *)0xE100000000000000LL;
    v187._uint64_t countAndFlagsBits = (uint64_t)v184;
    v187._uint64_t object = v186;
    String.append(_:)(v187);
    swift_bridgeObjectRelease();
    String.append(_:)(v200[0]);
    swift_bridgeObjectRelease();
  }

  return v202;
}

uint64_t URL.FormatStyle.formatMultiLevelSubdomains(from:forHost:)(uint64_t a1)
{
  uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
  Swift::String v3 = __NSURLGetTopLevelDomain(v2);
  uint64_t result = swift_unknownObjectRelease();
  if (v3)
  {
    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    v15[0] = 46LL;
    v15[1] = 0xE100000000000000LL;
    MEMORY[0x1895F8858](v8);
    uint64_t v14[2] = v15;
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( 0x7FFFFFFFFFFFFFFFLL,  1,  closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply,  (uint64_t)v14,  (uint64_t)v5,  v7);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v9 + 16);
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v11 = v10 + 2;
    if (__OFADD__(v10, 2LL))
    {
      __break(1u);
    }

    else
    {
      unint64_t v12 = *(void *)(*(void *)a1 + 16LL);
      unint64_t v13 = v12 - v11;
      if (!__OFSUB__(v12, v11))
      {
        if (!v13) {
          return result;
        }
        if ((v13 & 0x8000000000000000LL) == 0)
        {
          if (v12 >= v13) {
            return specialized Array.replaceSubrange<A>(_:with:)(0LL, v13);
          }
LABEL_13:
          __break(1u);
          return result;
        }

uint64_t protocol witness for FormatStyle.format(_:) in conformance URL.FormatStyle@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = URL.FormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t URL.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  __int128 v6 = *(_OWORD *)(v3 + 1);
  return (*(uint64_t (**)(uint64_t *))(a3 + 48))(&v5);
}

Swift::String __swiftcall URL.formatted()()
{
  uint64_t v37 = v0[1];
  uint64_t v38 = *v0;
  uint64_t v36 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v1 = static _SetStorage.allocate(capacity:)();
  char v2 = 0;
  uint64_t v3 = 0LL;
  uint64_t v4 = v1 + 56;
  while (1)
  {
    char v5 = v2;
    __int128 v6 = (char *)&outlined read-only object #0 of URL.formatted() + 16 * v3;
    uint64_t v8 = *((void *)v6 + 4);
    uint64_t v7 = *((void *)v6 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v11 = -1LL << *(_BYTE *)(v1 + 32);
    unint64_t v12 = v9 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
    uint64_t v15 = 1LL << v12;
    if (((1LL << v12) & v14) == 0) {
      break;
    }
    uint64_t v16 = *(void *)(v1 + 48);
    uint64_t v17 = (void *)(v16 + 16 * v12);
    if (*v17 != v8 || v17[1] != v7)
    {
      Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((v9 & 1) == 0)
      {
        uint64_t v19 = ~v11;
        unint64_t v12 = (v12 + 1) & v19;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
        uint64_t v15 = 1LL << v12;
        if ((v14 & (1LL << v12)) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v16 + 16 * v12);
        if (*v20 != v8 || v20[1] != v7)
        {
          Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v9 & 1) == 0)
          {
            unint64_t v12 = (v12 + 1) & v19;
            unint64_t v13 = v12 >> 6;
            uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
            uint64_t v15 = 1LL << v12;
            if ((v14 & (1LL << v12)) == 0) {
              break;
            }
            char v22 = (void *)(v16 + 16 * v12);
            if (*v22 != v8 || v22[1] != v7)
            {
              Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((v9 & 1) == 0)
              {
                unint64_t v12 = (v12 + 1) & v19;
                unint64_t v13 = v12 >> 6;
                uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
                uint64_t v15 = 1LL << v12;
                if ((v14 & (1LL << v12)) == 0) {
                  break;
                }
                uint64_t v24 = (void *)(v16 + 16 * v12);
                if (*v24 != v8 || v24[1] != v7)
                {
                  Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((v9 & 1) == 0)
                  {
                    unint64_t v12 = (v12 + 1) & v19;
                    unint64_t v13 = v12 >> 6;
                    uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
                    uint64_t v15 = 1LL << v12;
                    if ((v14 & (1LL << v12)) == 0) {
                      break;
                    }
                    uint64_t v25 = (void *)(v16 + 16 * v12);
                    if (*v25 != v8 || v25[1] != v7)
                    {
                      do
                      {
                        Swift::Int v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((v9 & 1) != 0) {
                          break;
                        }
                        unint64_t v12 = (v12 + 1) & v19;
                        unint64_t v13 = v12 >> 6;
                        uint64_t v14 = *(void *)(v4 + 8 * (v12 >> 6));
                        uint64_t v15 = 1LL << v12;
                        if ((v14 & (1LL << v12)) == 0) {
                          goto LABEL_37;
                        }
                        unint64_t v26 = (void *)(v16 + 16 * v12);
                      }

                      while (*v26 != v8 || v26[1] != v7);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    swift_bridgeObjectRelease();
LABEL_3:
    char v2 = 1;
    uint64_t v3 = 1LL;
    if ((v5 & 1) != 0)
    {
      swift_arrayDestroy();
      v53[1] = 0LL;
      *(void *)&__int128 v54 = 0LL;
      BYTE8(v54) = 0;
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      LOBYTE(v57) = 0;
      uint64_t v58 = 0LL;
      *(void *)&__int128 v59 = 0LL;
      BYTE8(v59) = 1;
      uint64_t v63 = 0LL;
      LOBYTE(v64) = 0;
      uint64_t v60 = 0LL;
      uint64_t v61 = 0LL;
      LOBYTE(v62) = 0;
      uint64_t v65 = 0LL;
      *(void *)&__int128 v66 = v1;
      BYTE8(v66) = 1;
      uint64_t v67 = 0LL;
      uint64_t v68 = 0LL;
      LOBYTE(v69) = 0;
      uint64_t v70 = 0LL;
      *(void *)&__int128 v71 = 0LL;
      BYTE8(v71) = 0;
      uint64_t v72 = 0LL;
      uint64_t v73 = 0LL;
      __int128 v49 = 0u;
      __int128 v50 = v69;
      __int128 v51 = v71;
      __int128 v52 = 0u;
      LOBYTE(v53[0]) = 1;
      __int128 v47 = v64;
      __int128 v48 = v66;
      __int128 v42 = 0u;
      __int128 v43 = v57;
      __int128 v45 = 0u;
      __int128 v46 = v62;
      __int128 v44 = v59;
      __int128 v40 = v53[0];
      __int128 v41 = v54;
      v39[0] = v38;
      v39[1] = v37;
      v39[2] = v36;
      uint64_t v32 = URL.FormatStyle.format(_:)(v39);
      BOOL v34 = v33;
      outlined release of URL.FormatStyle((uint64_t)v53);
      Swift::Int v9 = v32;
      uint64_t v10 = v34;
      goto LABEL_41;
    }
  }

Swift::Int static FormatStyle<>.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static _SetStorage.allocate(capacity:)();
  char v3 = 0;
  uint64_t v4 = 0LL;
  uint64_t v5 = v2 + 56;
  while (1)
  {
    char v6 = v3;
    uint64_t v7 = (char *)&outlined read-only object #0 of static FormatStyle<>.url.getter + 16 * v4;
    uint64_t v9 = *((void *)v7 + 4);
    uint64_t v8 = *((void *)v7 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v11 = -1LL << *(_BYTE *)(v2 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
    uint64_t v15 = 1LL << v12;
    if (((1LL << v12) & v14) == 0) {
      break;
    }
    uint64_t v16 = *(void *)(v2 + 48);
    uint64_t v17 = (void *)(v16 + 16 * v12);
    if (*v17 != v9 || v17[1] != v8)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        uint64_t v19 = ~v11;
        unint64_t v12 = (v12 + 1) & v19;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
        uint64_t v15 = 1LL << v12;
        if ((v14 & (1LL << v12)) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v16 + 16 * v12);
        if (*v20 != v9 || v20[1] != v8)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
          {
            unint64_t v12 = (v12 + 1) & v19;
            unint64_t v13 = v12 >> 6;
            uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
            uint64_t v15 = 1LL << v12;
            if ((v14 & (1LL << v12)) == 0) {
              break;
            }
            char v22 = (void *)(v16 + 16 * v12);
            if (*v22 != v9 || v22[1] != v8)
            {
              Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0)
              {
                unint64_t v12 = (v12 + 1) & v19;
                unint64_t v13 = v12 >> 6;
                uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
                uint64_t v15 = 1LL << v12;
                if ((v14 & (1LL << v12)) == 0) {
                  break;
                }
                uint64_t v24 = (void *)(v16 + 16 * v12);
                if (*v24 != v9 || v24[1] != v8)
                {
                  do
                  {
                    Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0) {
                      break;
                    }
                    unint64_t v12 = (v12 + 1) & v19;
                    unint64_t v13 = v12 >> 6;
                    uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
                    uint64_t v15 = 1LL << v12;
                    if ((v14 & (1LL << v12)) == 0) {
                      goto LABEL_33;
                    }
                    uint64_t v25 = (void *)(v16 + 16 * v12);
                  }

                  while (*v25 != v9 || v25[1] != v8);
                }
              }
            }
          }
        }
      }
    }

    swift_bridgeObjectRelease();
LABEL_3:
    char v3 = 1;
    uint64_t v4 = 1LL;
    if ((v6 & 1) != 0)
    {
      Swift::Int result = swift_arrayDestroy();
      *(_BYTE *)a1 = 1;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = 0LL;
      *(_BYTE *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0LL;
      *(void *)(a1 + 40) = 0LL;
      *(_BYTE *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0LL;
      *(void *)(a1 + 64) = 0LL;
      *(_BYTE *)(a1 + 72) = 1;
      *(void *)(a1 + 80) = 0LL;
      *(void *)(a1 + 88) = 0LL;
      *(_BYTE *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0LL;
      *(_BYTE *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0LL;
      *(void *)(a1 + 128) = v2;
      *(_BYTE *)(a1 + 136) = 1;
      *(void *)(a1 + 144) = 0LL;
      *(void *)(a1 + 152) = 0LL;
      *(_BYTE *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 0LL;
      *(void *)(a1 + 176) = 0LL;
      *(_BYTE *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0LL;
      *(void *)(a1 + 200) = 0LL;
      return result;
    }
  }

Swift::Int static ParseableFormatStyle<>.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static _SetStorage.allocate(capacity:)();
  char v3 = 0;
  uint64_t v4 = 0LL;
  uint64_t v5 = v2 + 56;
  while (1)
  {
    char v6 = v3;
    uint64_t v7 = (char *)&outlined read-only object #0 of static ParseableFormatStyle<>.url.getter + 16 * v4;
    uint64_t v9 = *((void *)v7 + 4);
    uint64_t v8 = *((void *)v7 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v11 = -1LL << *(_BYTE *)(v2 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
    uint64_t v15 = 1LL << v12;
    if (((1LL << v12) & v14) == 0) {
      break;
    }
    uint64_t v16 = *(void *)(v2 + 48);
    uint64_t v17 = (void *)(v16 + 16 * v12);
    if (*v17 != v9 || v17[1] != v8)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        uint64_t v19 = ~v11;
        unint64_t v12 = (v12 + 1) & v19;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
        uint64_t v15 = 1LL << v12;
        if ((v14 & (1LL << v12)) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v16 + 16 * v12);
        if (*v20 != v9 || v20[1] != v8)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
          {
            unint64_t v12 = (v12 + 1) & v19;
            unint64_t v13 = v12 >> 6;
            uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
            uint64_t v15 = 1LL << v12;
            if ((v14 & (1LL << v12)) == 0) {
              break;
            }
            char v22 = (void *)(v16 + 16 * v12);
            if (*v22 != v9 || v22[1] != v8)
            {
              Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0)
              {
                unint64_t v12 = (v12 + 1) & v19;
                unint64_t v13 = v12 >> 6;
                uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
                uint64_t v15 = 1LL << v12;
                if ((v14 & (1LL << v12)) == 0) {
                  break;
                }
                uint64_t v24 = (void *)(v16 + 16 * v12);
                if (*v24 != v9 || v24[1] != v8)
                {
                  do
                  {
                    Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0) {
                      break;
                    }
                    unint64_t v12 = (v12 + 1) & v19;
                    unint64_t v13 = v12 >> 6;
                    uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
                    uint64_t v15 = 1LL << v12;
                    if ((v14 & (1LL << v12)) == 0) {
                      goto LABEL_33;
                    }
                    uint64_t v25 = (void *)(v16 + 16 * v12);
                  }

                  while (*v25 != v9 || v25[1] != v8);
                }
              }
            }
          }
        }
      }
    }

    swift_bridgeObjectRelease();
LABEL_3:
    char v3 = 1;
    uint64_t v4 = 1LL;
    if ((v6 & 1) != 0)
    {
      Swift::Int result = swift_arrayDestroy();
      *(_BYTE *)a1 = 1;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = 0LL;
      *(_BYTE *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0LL;
      *(void *)(a1 + 40) = 0LL;
      *(_BYTE *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0LL;
      *(void *)(a1 + 64) = 0LL;
      *(_BYTE *)(a1 + 72) = 1;
      *(void *)(a1 + 80) = 0LL;
      *(void *)(a1 + 88) = 0LL;
      *(_BYTE *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0LL;
      *(_BYTE *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0LL;
      *(void *)(a1 + 128) = v2;
      *(_BYTE *)(a1 + 136) = 1;
      *(void *)(a1 + 144) = 0LL;
      *(void *)(a1 + 152) = 0LL;
      *(_BYTE *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 0LL;
      *(void *)(a1 + 176) = 0LL;
      *(_BYTE *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0LL;
      *(void *)(a1 + 200) = 0LL;
      return result;
    }
  }

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)( unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0LL;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v14 = v9 * a3;
              uint64_t v9 = v14 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }

      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }

      if (result)
      {
        uint64_t v26 = 0LL;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0LL;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          uint64_t v29 = v26 * a3;
          uint64_t v26 = v29 + (v27 + v28);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }

  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0LL;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }

      else
      {
        char v21 = -55;
      }
    }

    else
    {
      char v21 = -48;
    }

    uint64_t v22 = v9 * a3;
    uint64_t v9 = v22 + (v20 + v21);
    ++v19;
    --v15;
  }

  while (v15);
  return (unsigned __int8 *)v9;
}

{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;
  uint64_t v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      unsigned __int8 v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          uint64_t v19 = a3 + 48;
        }
        else {
          uint64_t v19 = 58;
        }
        if (result)
        {
          unsigned __int8 v8 = 0;
          unsigned int v20 = result + 1;
          do
          {
            char v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                char v12 = 0;
                uint64_t v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                uint64_t v22 = -87;
              }

              else
              {
                uint64_t v22 = -55;
              }
            }

            else
            {
              uint64_t v22 = -48;
            }

            unsigned __int8 v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned __int8 v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          uint64_t v13 = 0;
          char v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v13 = v9 * a3;
              uint64_t v9 = v13 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_65;
    }

    if (a2)
    {
      uint64_t v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        uint64_t v22 = 58;
      }

      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }

      if (result)
      {
        unsigned __int8 v25 = 0LL;
        do
        {
          uint64_t v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0LL;
              }
              unsigned int v27 = -87;
            }

            else
            {
              unsigned int v27 = -55;
            }
          }

          else
          {
            unsigned int v27 = -48;
          }

          char v28 = v25 * a3;
          unsigned __int8 v25 = v28 + (v26 + v27);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }

  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  uint64_t v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    uint64_t v15 = 58;
  }

  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  unsigned __int8 v18 = result + 1;
  do
  {
    uint64_t v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0LL;
        }
        unsigned int v20 = -87;
      }

      else
      {
        unsigned int v20 = -55;
      }
    }

    else
    {
      unsigned int v20 = -48;
    }

    char v21 = v9 * a3;
    uint64_t v9 = v21 + (v19 + v20);
    ++v18;
    --v14;
  }

  while (v14);
  return (unsigned __int8 *)v9;
}

{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int16 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  char v26;
  uint64_t v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          uint64_t v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unsigned __int8 v18 = result + 1;
          do
          {
            uint64_t v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                char v12 = 0;
                uint64_t v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                unsigned int v20 = -87;
              }

              else
              {
                unsigned int v20 = -55;
              }
            }

            else
            {
              unsigned int v20 = -48;
            }

            unsigned __int8 v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          uint64_t v13 = 0;
          char v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  unsigned __int8 v6 = *(void **)v4;
  int64_t v7 = *(void *)(*(void *)v4 + 16LL);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    unsigned __int8 v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v15,  1,  v6);
  }

  unsigned __int8 v16 = &v6[2 * a1 + 4];
  Swift::Int result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = v6[2];
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000LL) == 0)
  {
    Swift::Int result = (char *)(v16 + 2);
    char v21 = &v6[2 * a2 + 4];
    uint64_t v22 = v6[2];
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      uint64_t v6[2] = v23;
LABEL_20:
      *unsigned __int8 v16 = a3;
      v16[1] = a4;
      *(void *)uint64_t v4 = v6;
      return result;
    }

    goto LABEL_27;
  }

void *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16LL);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  Swift::Int result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    Swift::Int result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v13,  1,  v5);
    uint64_t v5 = result;
  }

  uint64_t v14 = &v5[a1 + 4];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000LL) == 0)
  {
    Swift::Int result = v14 + 1;
    uint64_t v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17]) {
      Swift::Int result = memmove(result, v18, 8 * v17);
    }
    uint64_t v19 = v5[2];
    BOOL v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      void v5[2] = v20;
LABEL_20:
      *uint64_t v14 = a3;
      *(void *)uint64_t v3 = v5;
      return result;
    }

    goto LABEL_27;
  }

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v24 < v5) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_35;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_37;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v7;
  uint64_t v10 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_19;
    }
    uint64_t v10 = 1LL;
  }

  if (v7 >> 62) {
    goto LABEL_38;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v15 = v11;
  }
  else {
    uint64_t v15 = v14;
  }
  unint64_t v7 = MEMORY[0x186E1C378](v10, v15, 1LL, v7);
  *uint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
LABEL_19:
  BOOL v16 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for JSONReference();
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_29:
    *BOOL v16 = v3;
    return specialized Array._endMutation()();
  }

  if (!(v7 >> 62))
  {
    uint64_t v17 = *(void *)(v13 + 16);
    uint64_t v18 = v17 - v5;
    if (!__OFSUB__(v17, v5)) {
      goto LABEL_22;
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = v25 - v5;
  if (__OFSUB__(v25, v5)) {
    goto LABEL_41;
  }
LABEL_22:
  if ((v18 & 0x8000000000000000LL) == 0)
  {
    uint64_t v19 = (char *)(v16 + 1);
    uint64_t v20 = (char *)(v13 + 32 + 8 * v5);
    if (v16 + 1 != (void *)v20 || v19 >= &v20[8 * v18]) {
      memmove(v19, v20, 8 * v18);
    }
    if (!(v7 >> 62))
    {
      uint64_t v21 = *(void *)(v13 + 16);
      uint64_t v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_28:
        *(void *)(v13 + 16) = v22;
        goto LABEL_29;
      }

      goto LABEL_44;
    }

char *specialized Array.replaceSubrange<A>(_:with:)( uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v8 = *(void **)v6;
  int64_t v9 = *(void *)(*(void *)v6 + 16LL);
  if (v9 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1LL, v11))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v13 > v8[3] >> 1)
  {
    if (v9 <= v13) {
      int64_t v17 = v9 + v12;
    }
    else {
      int64_t v17 = v9;
    }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v17,  1,  v8);
  }

  uint64_t v18 = &v8[4 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v12) {
    goto LABEL_20;
  }
  uint64_t v20 = v8[2];
  BOOL v21 = __OFSUB__(v20, a2);
  uint64_t v22 = v20 - a2;
  if (v21) {
    goto LABEL_26;
  }
  if ((v22 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = (char *)(v18 + 4);
    uint64_t v23 = &v8[4 * a2 + 4];
    uint64_t v24 = v8[2];
    BOOL v21 = __OFADD__(v24, v12);
    uint64_t v25 = v24 + v12;
    if (!v21)
    {
      uint64_t v8[2] = v25;
LABEL_20:
      *uint64_t v18 = a3;
      v18[1] = a4;
      void v18[2] = a5;
      v18[3] = a6;
      *(void *)uint64_t v6 = v8;
      return result;
    }

    goto LABEL_27;
  }

char *specialized Array.replaceSubrange<A>(_:with:)( uint64_t a1, int64_t a2, uint64_t a3, unsigned int a4)
{
  if (a1 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v6 = *v4;
  int64_t v7 = *((void *)*v4 + 2);
  if (v7 < a2)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v11 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  int64_t v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v12 > *((void *)v6 + 3) >> 1)
  {
    if (v7 <= v12) {
      int64_t v15 = v7 + v11;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v15,  1,  v6);
    uint64_t v6 = result;
  }

  BOOL v16 = v6 + 32;
  int64_t v17 = &v6[a1 + 32];
  uint64_t v18 = &v17[a3];
  if (!v11)
  {
LABEL_20:
    if (a3 < 1)
    {
LABEL_34:
      *uint64_t v4 = v6;
      return result;
    }

    unint64_t v25 = (unint64_t)&v6[a3 + 32 + a1];
    unint64_t v26 = v25 - (void)&v6[a1] - 33;
    if (v26 >= a3) {
      unint64_t v26 = a3;
    }
    unint64_t v27 = v26 + 1;
    if (v27 > 0x20)
    {
      uint64_t v29 = v27 & 0x1F;
      if ((v27 & 0x1F) == 0) {
        uint64_t v29 = 32LL;
      }
      unint64_t v28 = v27 - v29;
      v17 += v28;
      int8x16_t v30 = vdupq_n_s8(a4);
      uint64_t v31 = (int8x16_t *)&v6[a1 + 48];
      unint64_t v32 = v28;
      do
      {
        v31[-1] = v30;
        *uint64_t v31 = v30;
        v31 += 2;
        v32 -= 32LL;
      }

      while (v32);
    }

    else
    {
      unint64_t v28 = 0LL;
    }

    unint64_t v33 = a3 - v28;
    while (v33)
    {
      *v17++ = a4;
      --v33;
      if (v17 >= v18) {
        goto LABEL_34;
      }
    }

    __break(1u);
    goto LABEL_36;
  }

  uint64_t v19 = *((void *)v6 + 2);
  size_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  if ((v20 & 0x8000000000000000LL) == 0)
  {
    BOOL v21 = &v16[a2];
    if (v18 != &v16[a2] || v18 >= &v21[v20]) {
      uint64_t result = (char *)memmove(&v17[a3], v21, v20);
    }
    uint64_t v22 = *((void *)v6 + 2);
    BOOL v23 = __OFADD__(v22, v11);
    uint64_t v24 = v22 + v11;
    if (v23) {
      goto LABEL_42;
    }
    *((void *)v6 + 2) = v24;
    goto LABEL_20;
  }

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = 0LL;
  int64_t v4 = 0LL;
  uint64_t v5 = a2 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }

    if (__OFADD__(v4++, 1LL)) {
      goto LABEL_19;
    }
    if (v4 >= v9)
    {
LABEL_17:
      Hasher._combine(_:)(v3);
      return;
    }

    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (!v14) {
      break;
    }
LABEL_16:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    Swift::UInt v12 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v11);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }

  int64_t v15 = v4 + 1;
  if (v4 + 1 >= v9) {
    goto LABEL_17;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    ++v4;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_17;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  Swift::Int v10;
  uint64_t v12;
  int64_t v13;
  Hasher._finalize()();
  Swift::UInt v3 = a2 + 56;
  int64_t v4 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  uint64_t v6 = v5 & *(void *)(a2 + 56);
  uint64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v8 = 0LL;
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }

    if (__OFADD__(v9++, 1LL)) {
      goto LABEL_19;
    }
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }

    Swift::UInt v12 = *(void *)(v3 + 8 * v9);
    if (!v12) {
      break;
    }
LABEL_16:
    uint64_t v6 = (v12 - 1) & v12;
LABEL_5:
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    unint64_t v10 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v8 ^= v10;
  }

  int64_t v13 = v9 + 1;
  if (v9 + 1 >= v7) {
    goto LABEL_17;
  }
  Swift::UInt v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    ++v9;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_17;
    }
    Swift::UInt v12 = *(void *)(v3 + 8 * v9);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }

  int64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }

  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v11,  1,  v4);
    int64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }

  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = &v4[4 * a1 + 32];
    int64_t v15 = &v4[4 * a2 + 32];
    if (a1 != a2 || result >= &v15[4 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 4 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }

    goto LABEL_28;
  }

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }

  int64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }

  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v11,  1,  v4);
    int64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }

  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = &v4[2 * a1 + 32];
    int64_t v15 = &v4[2 * a2 + 32];
    if (a1 != a2 || result >= &v15[2 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 2 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }

    goto LABEL_28;
  }

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }

  int64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }

  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v11,  1,  v4);
    int64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }

  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = v12 - a2;
  if (__OFSUB__(v12, a2)) {
    goto LABEL_27;
  }
  if ((v13 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = &v4[a1 + 32];
    uint64_t v14 = &v4[a2 + 32];
    if (a1 != a2 || result >= &v14[v13]) {
      uint64_t result = (char *)memmove(result, v14, v13);
    }
    int64_t v15 = *((void *)v4 + 2);
    uint64_t v16 = __OFADD__(v15, v8);
    uint64_t v17 = v15 + v8;
    if (!v16)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }

    goto LABEL_28;
  }

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4LL << v12)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }

uint64_t specialized static URL.FormatStyle.HostDisplayOption.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v2 = *((void *)a1 + 2);
  int v3 = a1[24];
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v5 = *((void *)a2 + 2);
  int v6 = a2[24];
  uint64_t v7 = *((void *)a2 + 4);
  if (!v2)
  {
    if (!v5)
    {
      if (v3 != v6) {
        return 0LL;
      }
      goto LABEL_15;
    }

uint64_t specialized static URL.FormatStyle.ComponentDisplayOption.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a2 + 2);
  if (v2)
  {
    if (v3)
    {
      if (*(void *)((char *)qword_1837AA388 + ((uint64_t)(*((void *)a1 + 1) << 56) >> 53)) == *(void *)((char *)qword_1837AA388 + ((uint64_t)(*((void *)a2 + 1) << 56) >> 53)))
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        char v4 = specialized static Set.== infix(_:_:)(v2, v3);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v4 & 1;
      }

      return 0LL;
    }

    swift_bridgeObjectRetain();
    goto LABEL_9;
  }

  if (v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return 1LL;
}

uint64_t specialized static URL.FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v2 = *((void *)a1 + 2);
  int v3 = a1[24];
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v5 = *((void *)a1 + 5);
  int v131 = a1[48];
  uint64_t v128 = *((void *)a1 + 7);
  uint64_t v129 = *((void *)a1 + 8);
  int v126 = a1[72];
  uint64_t v6 = *((void *)a1 + 11);
  uint64_t v121 = *((void *)a1 + 10);
  int v119 = a1[96];
  uint64_t v123 = *((void *)a1 + 13);
  int v117 = a1[112];
  uint64_t v114 = *((void *)a1 + 15);
  uint64_t v7 = *((void *)a1 + 19);
  int v8 = a1[160];
  uint64_t v9 = *((void *)a1 + 21);
  uint64_t v10 = *((void *)a1 + 22);
  int v11 = a1[184];
  uint64_t v12 = *((void *)a1 + 24);
  uint64_t v13 = *((void *)a1 + 25);
  uint64_t v14 = *((void *)a2 + 2);
  int v15 = a2[24];
  uint64_t v17 = *((void *)a2 + 4);
  uint64_t v16 = *((void *)a2 + 5);
  int v18 = a2[48];
  uint64_t v127 = *((void *)a2 + 7);
  uint64_t v130 = *((void *)a2 + 8);
  int v125 = a2[72];
  uint64_t v120 = *((void *)a2 + 10);
  uint64_t v124 = *((void *)a2 + 11);
  int v118 = a2[96];
  uint64_t v122 = *((void *)a2 + 13);
  int v116 = a2[112];
  uint64_t v113 = *((void *)a2 + 15);
  uint64_t v115 = *((void *)a2 + 16);
  int v112 = a2[136];
  uint64_t v19 = *((void *)a2 + 19);
  uint64_t v111 = *((void *)a2 + 18);
  int v20 = a2[160];
  uint64_t v21 = *((void *)a2 + 21);
  uint64_t v22 = *((void *)a2 + 22);
  int v23 = a2[184];
  uint64_t v25 = *((void *)a2 + 24);
  uint64_t v24 = *((void *)a2 + 25);
  if (!v2)
  {
    if (v14) {
      goto LABEL_11;
    }
    int v109 = a1[136];
    uint64_t v110 = *((void *)a1 + 16);
    char v108 = *((void *)a1 + 18);
    if (v3 != v15) {
      return 0LL;
    }
    goto LABEL_15;
  }

  if (!v14) {
    goto LABEL_10;
  }
  int v109 = a1[136];
  uint64_t v110 = *((void *)a1 + 16);
  char v108 = *((void *)a1 + 18);
  uint64_t v77 = *((void *)a1 + 11);
  uint64_t v80 = *((void *)a1 + 19);
  int v97 = a2[160];
  int v102 = a1[160];
  uint64_t v88 = *((void *)a2 + 22);
  uint64_t v92 = *((void *)a2 + 21);
  uint64_t v84 = *((void *)a1 + 21);
  int v75 = a2[184];
  uint64_t v69 = *((void *)a1 + 24);
  uint64_t v70 = *((void *)a2 + 24);
  int v67 = a1[184];
  uint64_t v68 = *((void *)a1 + 22);
  uint64_t v72 = *((void *)a2 + 25);
  uint64_t v74 = *((void *)a1 + 25);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v26 = specialized static Set.== infix(_:_:)(v2, v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t result = 0LL;
  if ((v26 & 1) != 0)
  {
    uint64_t v24 = v72;
    uint64_t v13 = v74;
    uint64_t v10 = v68;
    LOBYTE(v12) = v69;
    int v11 = v67;
    LOBYTE(v25) = v70;
    int v23 = v75;
    LOBYTE(v9) = v84;
    uint64_t v22 = v88;
    uint64_t v6 = v77;
    uint64_t v7 = v80;
    int v20 = v97;
    int v8 = v102;
    LOBYTE(v21) = v92;
    if (((v3 ^ v15) & 1) == 0)
    {
LABEL_15:
      if (v5)
      {
        if (!v16) {
          goto LABEL_10;
        }
        uint64_t v78 = v6;
        uint64_t v81 = v7;
        int v98 = v20;
        int v103 = v8;
        uint64_t v89 = v22;
        char v93 = v21;
        char v85 = v9;
        int v76 = v23;
        char v28 = v25;
        int v29 = v11;
        uint64_t v30 = v10;
        char v31 = v12;
        uint64_t v32 = v24;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v33 = specialized static Set.== infix(_:_:)(v5, v16);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t result = 0LL;
        if ((v33 & 1) == 0) {
          return result;
        }
        uint64_t v24 = v32;
        LOBYTE(v12) = v31;
        uint64_t v10 = v30;
        int v11 = v29;
        LOBYTE(v25) = v28;
        int v23 = v76;
        LOBYTE(v9) = v85;
        uint64_t v22 = v89;
        uint64_t v6 = v78;
        uint64_t v7 = v81;
        int v20 = v98;
        int v8 = v103;
        LOBYTE(v21) = v93;
        if (((v131 ^ v18) & 1) != 0) {
          return result;
        }
      }

      else
      {
        if (v16) {
          goto LABEL_11;
        }
        if (v131 != v18) {
          return 0LL;
        }
      }

      if (v129)
      {
        if (!v130) {
          goto LABEL_10;
        }
        uint64_t v79 = v6;
        uint64_t v82 = v7;
        int v99 = v20;
        int v104 = v8;
        uint64_t v90 = v22;
        char v94 = v21;
        char v86 = v9;
        int v34 = v23;
        char v35 = v25;
        int v36 = v11;
        uint64_t v37 = v10;
        char v38 = v12;
        uint64_t v39 = v24;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v40 = specialized static Set.== infix(_:_:)(v129, v130);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t result = 0LL;
        if ((v40 & 1) == 0) {
          return result;
        }
        uint64_t v24 = v39;
        LOBYTE(v12) = v38;
        uint64_t v10 = v37;
        int v11 = v36;
        LOBYTE(v25) = v35;
        int v23 = v34;
        LOBYTE(v9) = v86;
        uint64_t v22 = v90;
        uint64_t v6 = v79;
        uint64_t v7 = v82;
        int v20 = v99;
        int v8 = v104;
        LOBYTE(v21) = v94;
        if (((v126 ^ v125) & 1) != 0) {
          return result;
        }
      }

      else
      {
        if (v130) {
          goto LABEL_11;
        }
        if (v126 != v125) {
          return 0LL;
        }
      }

      if (v6)
      {
        if (v124)
        {
          uint64_t v107 = v19;
          int v100 = v20;
          int v105 = v8;
          uint64_t v91 = v22;
          char v95 = v21;
          uint64_t v83 = v7;
          char v87 = v9;
          int v41 = v23;
          char v42 = v25;
          int v43 = v11;
          uint64_t v44 = v10;
          char v45 = v12;
          uint64_t v46 = v24;
          uint64_t v47 = v6;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          char v48 = specialized static Set.== infix(_:_:)(v47, v124);
          swift_bridgeObjectRelease();
          uint64_t v49 = v122;
          swift_bridgeObjectRelease_n();
          if ((v48 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0LL;
          }

          goto LABEL_42;
        }

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v49 = v122;
        if (!v124)
        {
          uint64_t v107 = v19;
          int v100 = v20;
          int v105 = v8;
          uint64_t v91 = v22;
          char v95 = v21;
          uint64_t v83 = v7;
          char v87 = v9;
          int v41 = v23;
          char v42 = v25;
          int v43 = v11;
          uint64_t v44 = v10;
          char v45 = v12;
          uint64_t v46 = v24;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_42:
          if (v119 != v118)
          {
LABEL_43:
            swift_bridgeObjectRelease();
LABEL_50:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0LL;
          }

          if (v123)
          {
            if (!v49) {
              goto LABEL_43;
            }
            swift_bridgeObjectRetain();
            uint64_t v50 = swift_bridgeObjectRetain();
            char v132 = specialized static Set.== infix(_:_:)(v50, v49);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = 0LL;
            if ((v132 & 1) == 0) {
              return result;
            }
            char v52 = v87;
            uint64_t v51 = v91;
            uint64_t v53 = v83;
            int v55 = v100;
            int v54 = v105;
            char v56 = v95;
            if (((v117 ^ v116) & 1) != 0) {
              return result;
            }
          }

          else
          {
            swift_bridgeObjectRelease();
            if (v49) {
              goto LABEL_50;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v52 = v87;
            uint64_t v51 = v91;
            uint64_t v53 = v83;
            int v55 = v100;
            int v54 = v105;
            char v56 = v95;
            if (v117 != v116) {
              return 0LL;
            }
          }

          char v71 = v42;
          uint64_t v73 = v46;
          int v101 = v55;
          int v106 = v54;
          char v96 = v56;
          int v57 = v43;
          uint64_t v58 = v44;
          char v59 = v45;
          if (v110)
          {
            if (!v115) {
              goto LABEL_10;
            }
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v60 = specialized static Set.== infix(_:_:)(v110, v115);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t result = 0LL;
            if ((v60 & 1) == 0) {
              return result;
            }
            uint64_t v61 = v53;
            if (((v109 ^ v112) & 1) != 0) {
              return result;
            }
          }

          else
          {
            if (v115) {
              goto LABEL_11;
            }
            uint64_t v61 = v53;
            if (v109 != v112) {
              return 0LL;
            }
          }

          if (v61)
          {
            if (!v107) {
              goto LABEL_10;
            }
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v62 = specialized static Set.== infix(_:_:)(v53, v107);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t result = 0LL;
            if ((v62 & 1) == 0) {
              return result;
            }
            uint64_t v63 = v58;
            if (((v106 ^ v101) & 1) != 0) {
              return result;
            }
          }

          else
          {
            if (v107) {
              goto LABEL_11;
            }
            uint64_t v63 = v58;
            if (v106 != v101) {
              return 0LL;
            }
          }

          if (!v63)
          {
            if (v51) {
              goto LABEL_11;
            }
            uint64_t v65 = v13;
            if (v57 != v41) {
              return 0LL;
            }
            goto LABEL_82;
          }

          if (v51)
          {
            if (qword_1837AA388[v52] != qword_1837AA388[v96]) {
              return 0LL;
            }
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v64 = specialized static Set.== infix(_:_:)(v58, v51);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t result = 0LL;
            if ((v64 & 1) == 0) {
              return result;
            }
            uint64_t v65 = v13;
            if (((v57 ^ v41) & 1) != 0) {
              return result;
            }
LABEL_82:
            if (!v65)
            {
              if (!v73) {
                return 1LL;
              }
              goto LABEL_11;
            }

            if (v73)
            {
              if (qword_1837AA388[v59] == qword_1837AA388[v71])
              {
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                char v66 = specialized static Set.== infix(_:_:)(v13, v73);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                return v66 & 1;
              }

              return 0LL;
            }
          }

uint64_t specialized URL.FormatStyle.HostDisplayOption.Option.init(from:)(void *a1)
{
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys>);
  uint64_t v22 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v25 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys>);
  uint64_t v3 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.Option.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();
  uint64_t v10 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10) {
    goto LABEL_7;
  }
  int v11 = v5;
  uint64_t v12 = v25;
  uint64_t v21 = a1;
  uint64_t v26 = v7;
  uint64_t v13 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v14 = v6;
  if (*(void *)(v13 + 16) != 1LL)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v9;
    uint64_t v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v19 = &type metadata for URL.FormatStyle.HostDisplayOption.Option;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v19,  *MEMORY[0x189619358],  v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v6);
    a1 = v21;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v6;
  }

  uint64_t v6 = *(unsigned __int8 *)(v13 + 32);
  if ((v6 & 1) != 0)
  {
    char v28 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v24);
  }

  else
  {
    char v27 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v26;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v23);
  }

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v6;
}

unint64_t lazy protocol witness table accessor for type [Substring] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Substring] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Substring] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Substring]);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618470], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [Substring] and conformance [A]);
  }

  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16LL);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v11,  1,  v4);
  }

  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (void *)&v16[32 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      uint64_t v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16LL);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v11,  1,  v4);
  }

  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (void *)&v16[48 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      uint64_t v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.FormatStyle.CodingKeys, &unk_189C7CBE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.FormatStyle.CodingKeys, &unk_189C7CBE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.FormatStyle.CodingKeys, &unk_189C7CBE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.FormatStyle.CodingKeys, &unk_189C7CBE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption,  &type metadata for URL.FormatStyle.ComponentDisplayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption,  &type metadata for URL.FormatStyle.ComponentDisplayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption,  &type metadata for URL.FormatStyle.ComponentDisplayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption,  &type metadata for URL.FormatStyle.HostDisplayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption,  &type metadata for URL.FormatStyle.HostDisplayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption,  &type metadata for URL.FormatStyle.HostDisplayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption);
  }

  return result;
}

uint64_t outlined retain of URL.FormatStyle(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.CodingKeys,  &unk_189C7CB58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.CodingKeys,  &unk_189C7CB58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.CodingKeys,  &unk_189C7CB58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.CodingKeys,  &unk_189C7CB58);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.Option,  &type metadata for URL.FormatStyle.ComponentDisplayOption.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.Option,  &type metadata for URL.FormatStyle.ComponentDisplayOption.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.Option,  &type metadata for URL.FormatStyle.ComponentDisplayOption.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.Option,  &type metadata for URL.FormatStyle.ComponentDisplayOption.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition,  &type metadata for URL.FormatStyle.ComponentDisplayCondition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition,  &type metadata for URL.FormatStyle.ComponentDisplayCondition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition,  &type metadata for URL.FormatStyle.ComponentDisplayCondition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.CodingKeys,  &unk_189C7C9B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.CodingKeys,  &unk_189C7C9B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.CodingKeys,  &unk_189C7C9B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.CodingKeys,  &unk_189C7C9B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option,  &type metadata for URL.FormatStyle.HostDisplayOption.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option,  &type metadata for URL.FormatStyle.HostDisplayOption.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option,  &type metadata for URL.FormatStyle.HostDisplayOption.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>( unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    uint64_t v8 = a2;
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle,  &type metadata for URL.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle,  &type metadata for URL.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle,  &type metadata for URL.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle,  &type metadata for URL.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle,  &type metadata for URL.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.Component,  &type metadata for URL.FormatStyle.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.Component,  &type metadata for URL.FormatStyle.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.Component,  &type metadata for URL.FormatStyle.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.Component,  &type metadata for URL.FormatStyle.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for URL.FormatStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for URL.FormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  a1[2] = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  unint64_t result = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  a1[3] = result;
  return result;
}

uint64_t destroy for URL.FormatStyle()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for URL.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for URL.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.FormatStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 200) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 208) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 208) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for URL.FormatStyle()
{
  return &type metadata for URL.FormatStyle;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.Component()
{
  return &type metadata for URL.FormatStyle.Component;
}

uint64_t destroy for URL.FormatStyle.ComponentDisplayOption()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.ComponentDisplayOption( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.ComponentDisplayOption()
{
  return &type metadata for URL.FormatStyle.ComponentDisplayOption;
}

uint64_t destroy for URL.FormatStyle.HostDisplayOption()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for URL.FormatStyle.HostDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle.HostDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for URL.FormatStyle.HostDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.HostDisplayOption()
{
  return &type metadata for URL.FormatStyle.HostDisplayOption;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option()
{
  return &type metadata for URL.FormatStyle.HostDisplayOption.Option;
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_183106620 + 4 * byte_1837A95C9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_183106654 + 4 * byte_1837A95C4[v4]))();
}

uint64_t sub_183106654(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18310665C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183106664LL);
  }
  return result;
}

uint64_t sub_183106670(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183106678LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_18310667C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183106684(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  return &unk_189C7C9B8;
}

uint64_t initializeBufferWithCopyOfBuffer for URL.FormatStyle.ComponentDisplayCondition( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle.ComponentDisplayCondition(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for URL.FormatStyle.ComponentDisplayCondition(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.ComponentDisplayCondition()
{
  return &type metadata for URL.FormatStyle.ComponentDisplayCondition;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.ComponentDisplayOption.Option()
{
  return &type metadata for URL.FormatStyle.ComponentDisplayOption.Option;
}

void *type metadata accessor for URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  return &unk_189C7CB58;
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.Component(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1831067C8 + 4 * byte_1837A95D3[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1831067FC + 4 * byte_1837A95CE[v4]))();
}

uint64_t sub_1831067FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183106804(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18310680CLL);
  }
  return result;
}

uint64_t sub_183106818(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183106820LL);
  }
  *(_BYTE *)__n128 result = a2 + 7;
  return result;
}

uint64_t sub_183106824(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18310682C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URL.FormatStyle.CodingKeys()
{
  return &unk_189C7CBE8;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)( a1,  a2,  (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.replaceSubrange<A>(_:with:)( a1,  a2,  (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }

  __int128 v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = v10 - v8;
  if (__OFSUB__(v10, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  int64_t v12 = v6 + v11;
  if (__OFADD__(v6, v11))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  __n128 result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v12 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v12) {
      int64_t v14 = v6 + v11;
    }
    else {
      int64_t v14 = v6;
    }
    __n128 result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v14,  1,  v5);
    __int128 v5 = result;
  }

  uint64_t v15 = &v5[8 * a1 + 32];
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v16 = *((void *)v5 + 2);
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_28;
  }
  if (v18 < 0)
  {
LABEL_30:
    __n128 result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  __n128 result = &v15[8 * v10];
  uint64_t v19 = &v5[8 * a2 + 32];
  if (result != v19 || result >= &v19[8 * v18]) {
    __n128 result = (char *)memmove(result, v19, 8 * v18);
  }
  uint64_t v20 = *((void *)v5 + 2);
  BOOL v17 = __OFADD__(v20, v11);
  uint64_t v21 = v20 + v11;
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  *((void *)v5 + 2) = v21;
LABEL_20:
  if (v10) {
    __n128 result = (char *)memcpy(v15, (const void *)(a3 + 32), 8 * v10);
  }
  *int v3 = v5;
  return result;
}

uint64_t specialized URL.FormatStyle.ComponentDisplayCondition.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656E6F706D6F63LL && a2 == 0xE900000000000074LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6D65726975716572LL && a2 == 0xEC00000073746E65LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized URL.FormatStyle.ComponentDisplayOption.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6F697469646E6F63LL && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys,  &unk_189C7CD48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys,  &unk_189C7CD48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys,  &unk_189C7CD48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys,  &unk_189C7CD48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }

  return result;
}

uint64_t specialized URL.FormatStyle.HostDisplayOption.Option.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64657474696D6FLL && a2 == 0xE700000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6579616C70736964LL && a2 == 0xE900000000000064LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized URL.FormatStyle.HostDisplayOption.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6F697469646E6F63LL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0xD000000000000018LL && a2 == 0x80000001839CCE10LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000016LL && a2 == 0x80000001839CCE30LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys,  &unk_189C7CC78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys,  &unk_189C7CC78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys,  &unk_189C7CC78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys,  &unk_189C7CC78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys,  &unk_189C7CCB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys,  &unk_189C7CCB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys,  &unk_189C7CCB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys,  &unk_189C7CC98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys,  &unk_189C7CC98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys,  &unk_189C7CC98);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys);
  }

  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }

  __int128 v5 = *v3;
  uint64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v9 = a1 - a2;
  if (__OFSUB__(0LL, v8))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v10 = v6 - v8;
  if (__OFADD__(v6, v9))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v10 <= *((void *)v5 + 3) >> 1)
  {
    if (!v9) {
      goto LABEL_18;
    }
  }

  else
  {
    unint64_t result = (char *)a3();
    __int128 v5 = result;
    if (!v9)
    {
LABEL_18:
      *int v3 = v5;
      return result;
    }
  }

  uint64_t v13 = *((void *)v5 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_24;
  }
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    unint64_t result = &v5[8 * a1 + 32];
    uint64_t v16 = &v5[8 * a2 + 32];
    if (a1 != a2 || result >= &v16[8 * v15]) {
      unint64_t result = (char *)memmove(result, v16, 8 * v15);
    }
    uint64_t v17 = *((void *)v5 + 2);
    BOOL v14 = __OFADD__(v17, v9);
    uint64_t v18 = v17 + v9;
    if (!v14)
    {
      *((void *)v5 + 2) = v18;
      goto LABEL_18;
    }

    goto LABEL_25;
  }

char *specialized Array.replaceSubrange<A>(_:with:)( uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v8 = *v6;
  int64_t v9 = *((void *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  int64_t v13 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v14 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  int64_t v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v15 > *((void *)v8 + 3) >> 1)
  {
    if (v9 <= v15) {
      int64_t v18 = v9 + v14;
    }
    else {
      int64_t v18 = v9;
    }
    unint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v18,  1,  v8);
    uint64_t v8 = result;
  }

  uint64_t v19 = v8 + 32;
  uint64_t v20 = &v8[a1 + 32];
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v21 = *((void *)v8 + 2);
  size_t v22 = v21 - a2;
  if (__OFSUB__(v21, a2)) {
    goto LABEL_30;
  }
  if ((v22 & 0x8000000000000000LL) != 0)
  {
LABEL_32:
    unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  unint64_t result = &v20[v13];
  uint64_t v23 = &v19[a2];
  if (&v20[v13] != &v19[a2] || result >= &v23[v22]) {
    unint64_t result = (char *)memmove(result, v23, v22);
  }
  uint64_t v24 = *((void *)v8 + 2);
  BOOL v25 = __OFADD__(v24, v14);
  uint64_t v26 = v24 + v14;
  if (v25)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  *((void *)v8 + 2) = v26;
LABEL_21:
  if (v13 >= 1) {
    unint64_t result = (char *)memcpy(v20, (const void *)(a4 + a5), v13);
  }
  *uint64_t v6 = v8;
  return result;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  return &unk_189C7CC78;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  return &unk_189C7CC98;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  return &unk_189C7CCB8;
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption.Option( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183107A38 + 4 * byte_1837A95DD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183107A6C + 4 * byte_1837A95D8[v4]))();
}

uint64_t sub_183107A6C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183107A74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183107A7CLL);
  }
  return result;
}

uint64_t sub_183107A88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183107A90LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183107A94(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183107A9C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  return &unk_189C7CD48;
}

uint64_t closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply( void *a1)
{
  return partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(a1) & 1;
}

uint64_t Range<>._utf8OffsetRange.getter()
{
  return *v0 >> 11;
}

uint64_t AttributedString.init<A>(_:)@<X0>( uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a2 == &type metadata for AttributedString)
  {
    uint64_t v26 = *(void *)a1;
    swift_retain();
  }

  else
  {
    if (a2 == &type metadata for AttributedSubstring)
    {
      uint64_t v27 = *(void *)a1;
      __int128 v28 = *(_OWORD *)(a1 + 24);
      __int128 v40 = *(_OWORD *)(a1 + 8);
      __int128 v41 = v28;
      __int128 v29 = *(_OWORD *)(a1 + 56);
      __int128 v42 = *(_OWORD *)(a1 + 40);
      __int128 v43 = v29;
      __int128 v30 = *(_OWORD *)(v27 + 32);
      __int128 v53 = *(_OWORD *)(v27 + 16);
      __int128 v54 = v30;
      __int128 v55 = *(_OWORD *)(v27 + 48);
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v57);
      swift_release();
      BigString.init(_:)();
      uint64_t v31 = *(void *)(v27 + 64);
      uint64_t v32 = *(void *)(v27 + 72);
      uint64_t v33 = *(void *)(v27 + 80);
      swift_unknownObjectRetain();
      uint64_t v18 = specialized Rope.extract<A>(from:to:in:)( (unint64_t)v40 >> 11,  (unint64_t)v42 >> 11,  v31,  v32,  v33);
      uint64_t v20 = v34;
      uint64_t v22 = v35;
      uint64_t v24 = v36;
      swift_unknownObjectRelease();
      swift_release();
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      BOOL v25 = (char *)v52;
    }

    else
    {
      uint64_t v8 = AttributedStringProtocol.__guts.getter(a2, a3);
      (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(&v49, a2, a3);
      __int128 v38 = v49;
      uint64_t v9 = v50;
      uint64_t v10 = v51;
      (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(&v40, a2, a3);
      __int128 v53 = v38;
      *(void *)&__int128 v54 = v9;
      *((void *)&v54 + 1) = v10;
      __int128 v55 = v40;
      __int128 v56 = v41;
      __int128 v11 = *(_OWORD *)(v8 + 32);
      v57[0] = *(_OWORD *)(v8 + 16);
      v57[1] = v11;
      v57[2] = *(_OWORD *)(v8 + 48);
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      swift_release();
      outlined release of Locale((uint64_t)v39);
      outlined release of Locale((uint64_t)&v40);
      v52[0] = v43;
      v52[1] = v44;
      v52[2] = v45;
      void v52[3] = v46;
      unint64_t v12 = v43;
      unint64_t v13 = v45;
      __int128 v14 = *(_OWORD *)(v8 + 32);
      v52[4] = *(_OWORD *)(v8 + 16);
      v52[5] = v14;
      v52[6] = *(_OWORD *)(v8 + 48);
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v47);
      swift_release();
      BigString.init(_:)();
      uint64_t v15 = *(void *)(v8 + 64);
      uint64_t v16 = *(void *)(v8 + 72);
      uint64_t v17 = *(void *)(v8 + 80);
      swift_unknownObjectRetain();
      uint64_t v18 = specialized Rope.extract<A>(from:to:in:)(v12 >> 11, v13 >> 11, v15, v16, v17);
      uint64_t v20 = v19;
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      swift_unknownObjectRelease();
      swift_release();
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      BOOL v25 = &v48;
    }

    uint64_t v26 = AttributedString.Guts.init(string:runs:)(v25, v18, v20, v22, v24);
    swift_release();
  }

  uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  *a4 = v26;
  return result;
}

uint64_t AttributedString.setAttributes(_:)(uint64_t *a1)
{
  BOOL v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v5 = (void *)*v1;
    __int128 v6 = *(_OWORD *)(*v1 + 16);
    __int128 v7 = *(_OWORD *)(*v1 + 48);
    v13[1] = *(_OWORD *)(*v1 + 32);
    void v13[2] = v7;
    v13[0] = v6;
    uint64_t v8 = v5[8];
    uint64_t v9 = v5[9];
    uint64_t v10 = v5[10];
    uint64_t v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v13);
    swift_unknownObjectRetain();
    *BOOL v2 = AttributedString.Guts.init(string:runs:)(v13, v8, v9, v10, v11);
    swift_release();
  }

  BigString.startIndex.getter();
  BigString.endIndex.getter();
  return AttributedString.Guts.setAttributes(_:in:)(v3, v4);
}

uint64_t AttributedString.mergeAttributes(_:mergePolicy:)(uint64_t *a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v23 = *a1;
  char v22 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = (void *)*v2;
    __int128 v5 = *(_OWORD *)(*v2 + 16);
    __int128 v6 = *(_OWORD *)(*v2 + 48);
    v32[1] = *(_OWORD *)(*v2 + 32);
    void v32[2] = v6;
    v32[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v32);
    swift_unknownObjectRetain();
    *uint64_t v3 = AttributedString.Guts.init(string:runs:)(v32, v7, v8, v9, v10);
    swift_release();
  }

  uint64_t v11 = (_OWORD *)*v3;
  __int128 v12 = v11[2];
  __int128 v29 = v11[1];
  __int128 v30 = v12;
  __int128 v31 = v11[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  BigString.unicodeScalars.getter();
  unint64_t v13 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v24);
  __int128 v14 = v11[2];
  __int128 v26 = v11[1];
  __int128 v27 = v14;
  __int128 v28 = v11[3];
  BigString.unicodeScalars.getter();
  unint64_t v15 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v25);
  uint64_t v16 = v13 >> 11;
  uint64_t v17 = v15 >> 11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v18, v16, v15 >> 11, v23, v22);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v23);
  if ((result & 1) != 0)
  {
    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v21 = specialized Sequence.compactMap<A>(_:)(v20);
    swift_bridgeObjectRelease();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v16, v17, 0, v21);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t AttributedString.replaceAttributes(_:with:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0
    || (uint64_t result = specialized static Set.== infix(_:_:)(v5, v7), (result & 1) == 0))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = (void *)*v2;
      __int128 v10 = *(_OWORD *)(*v2 + 16);
      __int128 v11 = *(_OWORD *)(*v2 + 48);
      v35[1] = *(_OWORD *)(*v2 + 32);
      v35[2] = v11;
      v35[0] = v10;
      uint64_t v12 = v9[8];
      uint64_t v13 = v9[9];
      uint64_t v14 = v9[10];
      uint64_t v15 = v9[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v35);
      swift_unknownObjectRetain();
      *uint64_t v3 = AttributedString.Guts.init(string:runs:)(v35, v12, v13, v14, v15);
      swift_release();
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v16 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      char v17 = 1;
    }

    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v17 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    uint64_t v30 = MEMORY[0x18961AFE8];
    uint64_t v18 = *v3;
    __int128 v19 = *(_OWORD *)(*v3 + 32);
    __int128 v32 = *(_OWORD *)(*v3 + 16);
    __int128 v33 = v19;
    __int128 v34 = *(_OWORD *)(v18 + 48);
    BigString.utf8.getter();
    uint64_t v20 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v31);
    if (v20 < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v21 = MEMORY[0x1895F8858](result);
      v29[2] = v4;
      v29[3] = v5;
      MEMORY[0x1895F8858](v21);
      uint64_t v26[2] = v4;
      v26[3] = v5;
      v26[4] = v6;
      v26[5] = v22;
      char v27 = v17 & 1;
      __int128 v28 = &v30;
      swift_retain();
      AttributedString._InternalRunsSlice.updateEach(when:with:)( (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in AttributedString.replaceAttributes(_:with:),  (uint64_t)v29,  (void (*)(uint64_t *, uint64_t, uint64_t))partial apply for closure #2 in AttributedString.replaceAttributes(_:with:),  (uint64_t)v26,  (void *)v18,  0LL,  v20);
      swift_release();
      uint64_t v23 = v30;
      uint64_t v24 = *(void *)(v30 + 16);
      if (v24)
      {
        swift_bridgeObjectRetain();
        BOOL v25 = (uint64_t *)(v23 + 40);
        do
        {
          AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)( *(v25 - 1),  *v25,  0,  0LL);
          v25 += 2;
          --v24;
        }

        while (v24);
        swift_bridgeObjectRelease();
      }

      return swift_bridgeObjectRelease();
    }
  }

  return result;
}

uint64_t AttributedString.startIndex.getter@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return AttributedString.startIndex.getter( (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18960D848],  a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t AttributedString.endIndex.getter@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return AttributedString.startIndex.getter( (uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18960D968],  a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t AttributedString.startIndex.getter@<X0>( uint64_t (*a1)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result = a1(a1, a2, a3, a4, a5, a6);
  *a7 = result;
  a7[1] = v9;
  a7[2] = v10;
  a7[3] = v11;
  return result;
}

uint64_t specialized AttributedStringProtocol.description.getter(_OWORD *a1)
{
  __int128 v2 = a1[2];
  __int128 v209 = a1[1];
  __int128 v210 = v2;
  __int128 v211 = a1[3];
  uint64_t v201 = BigString.startIndex.getter();
  uint64_t v202 = v3;
  uint64_t v203 = v4;
  uint64_t v204 = v5;
  uint64_t v205 = BigString.endIndex.getter();
  uint64_t v206 = v6;
  uint64_t v207 = v7;
  uint64_t v208 = v8;
  uint64_t v174 = 0LL;
  unint64_t v175 = 0xE000000000000000LL;
  uint64_t v9 = swift_retain_n();
  AttributedString.Runs.init(_:in:)(v9, &v212);
  uint64_t v10 = v213;
  uint64_t v11 = v212;
  __int128 v131 = v221;
  uint64_t v12 = v221;
  if (v213 == (void *)v221)
  {
    uint64_t v13 = 0LL;
    goto LABEL_165;
  }

  uint64_t v129 = v215;
  uint64_t v130 = v214;
  uint64_t v14 = v216;
  uint64_t v15 = v217;
  uint64_t v16 = v218;
  uint64_t v128 = v219;
  __int128 v122 = v223;
  __int128 v123 = v222;
  __int128 v121 = v224;
  uint64_t v17 = v220;
  unint64_t v18 = v225;
  uint64_t v134 = v227;
  uint64_t v135 = v226;
  uint64_t v133 = v228;
  __int128 v127 = v229;
  __int128 v119 = v230;
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v212);
  uint64_t v136 = v18;
  unint64_t v118 = v18 >> 10;
  char v132 = (__int128 *)(v11 + 16);
  uint64_t v142 = v14;
  uint64_t countAndFlagsBits = v130;
  uint64_t v140 = v16;
  uint64_t v141 = v129;
  uint64_t v125 = v15;
  uint64_t v126 = v14;
  uint64_t v124 = v16;
  uint64_t v139 = v128;
  uint64_t v120 = v17;
  uint64_t v147 = v17;
  uint64_t v20 = (uint64_t)v10;
  uint64_t v150 = (void *)v11;
  uint64_t v116 = v12;
  int v117 = v10;
  while (2)
  {
    if (v20 >= v12) {
      goto LABEL_170;
    }
    v160._uint64_t countAndFlagsBits = v11;
    v160._unint64_t object = v10;
    *(void *)&__int128 v161 = v130;
    *((void *)&v161 + 1) = v129;
    *(void *)&__int128 v162 = v126;
    *((void *)&v162 + 1) = v125;
    *(void *)&__int128 v163 = v124;
    *((void *)&v163 + 1) = v128;
    *(_OWORD *)&v164[8] = v131;
    __int128 v165 = v123;
    __int128 v166 = v122;
    __int128 v167 = v121;
    *(void *)id v164 = v120;
    uint64_t v168 = v136;
    uint64_t v169 = v135;
    uint64_t v170 = v134;
    uint64_t v171 = v133;
    __int128 v172 = v127;
    __int128 v173 = v119;
    v159[0] = v20;
    v159[1] = countAndFlagsBits;
    v159[2] = (uint64_t)v141;
    v159[3] = v142;
    v159[4] = v15;
    v159[5] = v140;
    v159[6] = v139;
    v159[7] = v147;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v159, &v151._countAndFlagsBits);
    if (v151._countAndFlagsBits != *(void *)(v11 + 88))
    {
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }

    unint64_t v145 = v15;
    uint64_t v148 = v20;
    unint64_t object = (unint64_t)v151._object;
    unint64_t v23 = *((void *)&v153 + 1);
    __int128 v25 = v154;
    uint64_t v24 = v155;
    if ((void)v152)
    {
      uint64_t v26 = v152 + 24 * (((unint64_t)v151._object >> ((4 * *(_BYTE *)(v152 + 18) + 8) & 0x3C)) & 0xF);
      unint64_t v27 = *(void *)(v26 + 24);
      uint64_t v28 = *(void *)(v26 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v29 = v150[8];
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v27 = specialized Rope._Node.subscript.getter(object, v29);
      uint64_t v28 = v30;
      uint64_t result = swift_unknownObjectRelease();
    }

    if (v118 >= v23 >> 10) {
      unint64_t v31 = v136;
    }
    else {
      unint64_t v31 = v23;
    }
    if (v118 >= v23 >> 10) {
      uint64_t v32 = v135;
    }
    else {
      uint64_t v32 = v25;
    }
    if (v118 >= v23 >> 10) {
      uint64_t v33 = v134;
    }
    else {
      uint64_t v33 = *((void *)&v25 + 1);
    }
    if (v118 >= v23 >> 10) {
      uint64_t v34 = v133;
    }
    else {
      uint64_t v34 = v24;
    }
    if (__OFADD__(v27, v23 >> 11)) {
      goto LABEL_172;
    }
    else {
      unint64_t v35 = (unint64_t)v127 >> 11;
    }
    __int128 v36 = v132[1];
    __int128 v198 = *v132;
    __int128 v199 = v36;
    __int128 v200 = v132[2];
    uint64_t result = BigString.utf8.getter();
    if (__OFSUB__(v35, v31 >> 11)) {
      goto LABEL_173;
    }
    unint64_t v37 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t result = outlined release of Locale((uint64_t)v176);
    if (v37 >> 10 < v31 >> 10)
    {
LABEL_174:
      __break(1u);
      goto LABEL_175;
    }

    unint64_t v181 = v31;
    uint64_t v182 = v32;
    uint64_t v183 = v33;
    uint64_t v184 = v34;
    unint64_t v185 = v37;
    uint64_t v186 = v39;
    uint64_t v187 = v41;
    uint64_t v188 = v43;
    unint64_t v44 = v150[8];
    uint64_t v45 = v150[10];
    uint64_t v46 = v150[11];
    uint64_t v48 = v142;
    uint64_t v47 = countAndFlagsBits;
    uint64_t v137 = v45;
    uint64_t v138 = v150[9];
    if (v142 == 1 || countAndFlagsBits != v46)
    {
      if (v44) {
        uint64_t v52 = v150[9];
      }
      else {
        uint64_t v52 = 0LL;
      }
      uint64_t v49 = v148;
      if (v148 < 0 || v52 < v148)
      {
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
        goto LABEL_188;
      }

      if (v44 && v148 < v150[9] && *(_WORD *)(v44 + 16))
      {
        uint64_t v144 = v150[11];
        uint64_t v53 = v150[10];
        uint64_t v54 = *(unsigned __int8 *)(v44 + 18);
        if (*(_BYTE *)(v44 + 18))
        {
          swift_unknownObjectRetain_n();
          uint64_t result = swift_retain();
          unint64_t v55 = v44;
          while (1)
          {
            unint64_t v58 = *(unsigned __int16 *)(v55 + 16);
            if (*(_WORD *)(v55 + 16))
            {
              uint64_t v59 = *(void *)(v55 + 32);
              BOOL v60 = __OFSUB__(v49, v59);
              uint64_t v61 = v49 - v59;
              if (v60) {
                goto LABEL_168;
              }
              if (__OFADD__(v61, 1LL)) {
                goto LABEL_169;
              }
              if (v61 + 1 <= 0)
              {
                unint64_t v58 = 0LL;
                goto LABEL_45;
              }

              if ((_DWORD)v58 == 1) {
                goto LABEL_43;
              }
              uint64_t v62 = *(void *)(v55 + 56);
              uint64_t v49 = v61 - v62;
              if (__OFSUB__(v61, v62)) {
                goto LABEL_178;
              }
              if (__OFADD__(v49, 1LL)) {
                goto LABEL_179;
              }
              if (v49 + 1 < 1)
              {
                unint64_t v58 = 1LL;
                uint64_t v49 = v61;
                goto LABEL_45;
              }

              if ((_DWORD)v58 == 2) {
                goto LABEL_44;
              }
              uint64_t v63 = *(void *)(v55 + 80);
              uint64_t v64 = v49 - v63;
              if (__OFSUB__(v49, v63)) {
                goto LABEL_186;
              }
              if (__OFADD__(v64, 1LL)) {
                goto LABEL_187;
              }
              if (v64 + 1 < 1)
              {
                unint64_t v58 = 2LL;
                goto LABEL_45;
              }

              if ((_DWORD)v58 != 3)
              {
                uint64_t v65 = *(void *)(v55 + 104);
                BOOL v60 = __OFSUB__(v64, v65);
                uint64_t v61 = v64 - v65;
                if (v60) {
                  goto LABEL_191;
                }
                if (__OFADD__(v61, 1LL)) {
                  goto LABEL_192;
                }
                if (v61 + 1 < 1)
                {
                  unint64_t v58 = 3LL;
                  uint64_t v49 = v64;
                  goto LABEL_45;
                }

                if ((_DWORD)v58 != 4)
                {
                  uint64_t v66 = 4LL;
                  if (v58 > 4) {
                    uint64_t v66 = *(unsigned __int16 *)(v55 + 16);
                  }
                  int v67 = (void *)(v55 + 128);
                  uint64_t v68 = 4LL;
                  while (1)
                  {
                    if (v66 == v68) {
                      goto LABEL_182;
                    }
                    uint64_t v49 = v61 - *v67;
                    if (__OFSUB__(v61, *v67)) {
                      goto LABEL_183;
                    }
                    if (__OFADD__(v49, 1LL)) {
                      goto LABEL_184;
                    }
                    if (v49 + 1 < 1) {
                      break;
                    }
                    ++v68;
                    v67 += 3;
                    uint64_t v61 = v49;
                    if (v58 == v68) {
                      goto LABEL_44;
                    }
                  }

                  unint64_t v58 = v68;
                  uint64_t v49 = v61;
                  goto LABEL_45;
                }

LABEL_163:
      unint64_t v100 = (v114 - 1) & v114;
      unint64_t v104 = __clz(__rbit64(v114)) + (v102 << 6);
LABEL_142:
      int v105 = (uint64_t *)(*(void *)(v28 + 48) + 16 * v104);
      uint64_t v107 = *v105;
      int v106 = (void *)v105[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v28 + 56) + 72 * v104, (uint64_t)&v161);
      v160._uint64_t countAndFlagsBits = v107;
      v160._unint64_t object = v106;
      __int128 v153 = v162;
      __int128 v154 = v163;
      __int128 v155 = *(_OWORD *)v164;
      uint64_t v156 = *(void *)&v164[16];
      Swift::String v151 = v160;
      __int128 v152 = v161;
      Swift::String v108 = v160;
      swift_bridgeObjectRetain();
      String.append(_:)(v108);
      v109._uint64_t countAndFlagsBits = 2112800LL;
      v109._unint64_t object = (void *)0xE300000000000000LL;
      String.append(_:)(v109);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v152,  (uint64_t)v159);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v110._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v110);
      swift_bridgeObjectRelease();
      v111._uint64_t countAndFlagsBits = 10LL;
      v111._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v111);
      v112._uint64_t countAndFlagsBits = 9LL;
      v112._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of Any?( (uint64_t)&v151,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }

          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_164:
          unint64_t v104 = v43;
          type metadata accessor for NSComparisonResult(0LL);
          *(void *)&uint64_t v135 = v104;
          _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
          __break(1u);
          return;
        }
      }

      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      Swift::String v95 = v60 + *(unsigned __int16 *)(v47 + 46) - *(unsigned __int16 *)(v52 + 46);
      uint64_t v59 = v95 + 0xFFFF;
      *(_WORD *)(v50 + 46) = v95 - 1;
      if (v61 != 7) {
        goto LABEL_161;
      }
      uint64_t v51 = v47;
      LODWORD(v60) = HIWORD(v59);
      uint64_t v61 = 8LL;
LABEL_56:
      uint64_t v62 = v117;
    }

    while (v61 < *(void *)(v50 + 16))
    {
      uint64_t v88 = *(unsigned __int16 *)(v58 + 2 * v61);
      uint64_t v51 = v88 + 0xFFFF;
      v53[v61] = v88 - 1;
      if (v55 - 1 == v61) {
        goto LABEL_97;
      }
      ++v61;
      if (v88) {
        goto LABEL_83;
      }
    }

    goto LABEL_153;
  }

  if (!v112)
  {
    LODWORD(v8) = 0;
    LOWORD(v5) = 0;
    LOWORD(v15) = 0;
    LOWORD(v11) = 0;
    LOWORD(v6) = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v7) = 0;
    LOWORD(v14) = 0;
    goto LABEL_22;
  }

  if (v112 != 1) {
    goto LABEL_164;
  }
  NSDecimal.asVariableLengthInteger()(v111, v110, v109);
  uint64_t v64 = v63;
  NSDecimal.asVariableLengthInteger()(v108, v107, v106);
  uint64_t v66 = v65;
  int v67 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  unint64_t v69 = (unint64_t *)v67;
  *(void *)(v67 + 32) = 0LL;
  unint64_t v70 = (_WORD *)(v67 + 32);
  *(void *)(v67 + 16) = 8LL;
  *(void *)(v67 + 40) = 0LL;
  uint64_t v71 = *(void *)(v64 + 16);
  uint64_t v72 = *(void *)(v66 + 16);
  if (v72 >= v71) {
    unint64_t v73 = *(void *)(v64 + 16);
  }
  else {
    unint64_t v73 = *(void *)(v66 + 16);
  }
  unint64_t v74 = v131;
  uint64_t v75 = v129;
  uint64_t v77 = v125;
  unint64_t v76 = v127;
  if (v73)
  {
    unint64_t v78 = (*(unsigned __int16 *)(v64 + 32) | 0x10000) - *(unsigned __int16 *)(v66 + 32);
    unint64_t v79 = HIWORD(v78);
    *unint64_t v70 = *(_WORD *)(v64 + 32) - *(_WORD *)(v66 + 32);
    uint64_t v80 = v73 - 1;
    __int128 v81 = v116;
    if (v80)
    {
      unint64_t v78 = v79 + *(unsigned __int16 *)(v64 + 34) - *(unsigned __int16 *)(v66 + 34) + 0xFFFF;
      unint64_t v79 = HIWORD(v78);
      *(_WORD *)(v67 + 34) = v78;
      if (v80 == 1)
      {
        uint64_t v82 = 2LL;
      }

      else
      {
        uint64_t v68 = *(unsigned __int16 *)(v66 + 36);
        unint64_t v78 = v79 + *(unsigned __int16 *)(v64 + 36) - v68 + 0xFFFF;
        unint64_t v79 = HIWORD(v78);
        *(_WORD *)(v67 + 36) = v78;
        if (v80 == 2)
        {
          uint64_t v82 = 3LL;
        }

        else
        {
          unint64_t v78 = v79 + *(unsigned __int16 *)(v64 + 38) - *(unsigned __int16 *)(v66 + 38) + 0xFFFF;
          unint64_t v79 = HIWORD(v78);
          *(_WORD *)(v67 + 38) = v78;
          if (v80 == 3)
          {
            uint64_t v82 = 4LL;
          }

          else
          {
            uint64_t v68 = *(unsigned __int16 *)(v66 + 40);
            unint64_t v78 = v79 + *(unsigned __int16 *)(v64 + 40) - v68 + 0xFFFF;
            unint64_t v79 = HIWORD(v78);
            *(_WORD *)(v67 + 40) = v78;
            if (v80 == 4)
            {
              uint64_t v82 = 5LL;
            }

            else
            {
              unint64_t v78 = v79 + *(unsigned __int16 *)(v64 + 42) - *(unsigned __int16 *)(v66 + 42) + 0xFFFF;
              unint64_t v79 = HIWORD(v78);
              *(_WORD *)(v67 + 42) = v78;
              if (v80 == 5)
              {
                uint64_t v82 = 6LL;
              }

              else
              {
                unint64_t v78 = v79 + *(unsigned __int16 *)(v64 + 44) - *(unsigned __int16 *)(v66 + 44) + 0xFFFF;
                unint64_t v79 = HIWORD(v78);
                uint64_t v68 = v67;
                *(_WORD *)(v67 + 44) = v78;
                if (v80 == 6)
                {
                  uint64_t v82 = 7LL;
                }

                else
                {
                  Swift::String v96 = v79 + *(unsigned __int16 *)(v64 + 46) - *(unsigned __int16 *)(v66 + 46);
                  unint64_t v78 = v96 + 0xFFFF;
                  *(_WORD *)(v67 + 46) = v96 - 1;
                  if (v80 != 7) {
                    goto LABEL_162;
                  }
                  unint64_t v79 = HIWORD(v78);
                  uint64_t v82 = 8LL;
                }

                unint64_t v69 = (unint64_t *)v67;
                __int128 v81 = v116;
                unint64_t v74 = v131;
                unint64_t v44 = v133;
                uint64_t v75 = v129;
                uint64_t v77 = v125;
                unint64_t v76 = v127;
              }
            }
          }
        }
      }
    }

    else
    {
      uint64_t v82 = 1LL;
    }

    if (v82 >= v71) {
      goto LABEL_131;
    }
    if (!HIWORD(v78))
    {
      while (v82 < v69[2])
      {
        uint64_t v97 = *(unsigned __int16 *)(v64 + 32 + 2 * v82);
        uint64_t v68 = v97 + 0xFFFF;
        v70[v82] = v97 - 1;
        if (v71 - 1 == v82) {
          goto LABEL_138;
        }
        ++v82;
        if (v97) {
          goto LABEL_124;
        }
      }

      goto LABEL_154;
    }
  }

  else
  {
    __int128 v81 = v116;
    if (!v71)
    {
      if (v72)
      {
        uint64_t v82 = 0LL;
        unint64_t v79 = 1;
        goto LABEL_132;
      }

      uint64_t v87 = 8LL;
LABEL_141:
      if (!v70[v87 - 1])
      {
        do
        {
          v69[2] = v87 - 1;
          if (v87 == 1) {
            break;
          }
        }

        while (!*((unsigned __int16 *)v69 + v87-- + 14));
      }

        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_164:
        type metadata accessor for NSComparisonResult(0LL);
        __int128 v152 = v48;
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }

    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }

  if (!v48)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    LOWORD(v32) = 0;
    LOWORD(v33) = 0;
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    unint64_t v70 = a1;
    uint64_t v20 = v124;
LABEL_148:
    *(_DWORD *)unint64_t v70 = v27;
    *(_WORD *)(v70 + 4) = v28;
    *(_WORD *)(v70 + 6) = v29;
    *(_WORD *)(v70 + 8) = v30;
    *(_WORD *)(v70 + 10) = v31;
    *(_WORD *)(v70 + 12) = v32;
    *(_WORD *)(v70 + 14) = v33;
    *(_WORD *)(v70 + 16) = v34;
    BOOL v60 = v20 & 1;
    *(_WORD *)(v70 + 18) = v35;
    return v60;
  }

  uint64_t v71 = v124;
  if (v48 != 1) {
    goto LABEL_164;
  }
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  uint64_t v48 = v88;
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  uint64_t v75 = v89;
  __int128 v90 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v46._rawValue = (void *)v90;
  *(void *)(v90 + 32) = 0LL;
  unint64_t v78 = (_WORD *)(v90 + 32);
  *(void *)(v90 + 16) = 8LL;
  *(void *)(v90 + 40) = 0LL;
  unint64_t v79 = *(void *)(v48 + 16);
  uint64_t v80 = *(void *)(v75 + 16);
  if (v80 >= v79) {
    uint64_t v91 = *(void *)(v48 + 16);
  }
  else {
    uint64_t v91 = *(void *)(v75 + 16);
  }
  if (v91)
  {
    uint64_t v92 = v48 + 32;
    char v93 = (*(unsigned __int16 *)(v48 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
    LODWORD(v94) = HIWORD(v93);
    *unint64_t v78 = *(_WORD *)(v48 + 32) - *(_WORD *)(v75 + 32);
    uint64_t v87 = v91 - 1;
    Swift::String v95 = v123;
    Swift::String v96 = v127;
    uint64_t v97 = v121;
    if (!v87)
    {
      uint64_t v98 = 1LL;
      uint64_t v20 = v124;
      goto LABEL_116;
    }

    char v93 = v94 + *(unsigned __int16 *)(v48 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 34) = v93;
    uint64_t v20 = v124;
    if (v87 == 1)
    {
      uint64_t v98 = 2LL;
      goto LABEL_116;
    }

    uint64_t v77 = *(unsigned __int16 *)(v75 + 36);
    char v93 = v94 + *(unsigned __int16 *)(v48 + 36) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 36) = v93;
    if (v87 == 2)
    {
      uint64_t v98 = 3LL;
      goto LABEL_116;
    }

    char v93 = v94 + *(unsigned __int16 *)(v48 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 38) = v93;
    if (v87 == 3)
    {
      uint64_t v98 = 4LL;
      goto LABEL_116;
    }

    uint64_t v77 = *(unsigned __int16 *)(v75 + 40);
    char v93 = v94 + *(unsigned __int16 *)(v48 + 40) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 40) = v93;
    if (v87 == 4)
    {
      uint64_t v98 = 5LL;
      goto LABEL_116;
    }

    char v93 = v94 + *(unsigned __int16 *)(v48 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 42) = v93;
    if (v87 == 5)
    {
      uint64_t v98 = 6LL;
      goto LABEL_116;
    }

    uint64_t v77 = *(unsigned __int16 *)(v75 + 44);
    char v93 = v94 + *(unsigned __int16 *)(v48 + 44) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 44) = v93;
    if (v87 == 6)
    {
      uint64_t v98 = 7LL;
LABEL_115:
      uint64_t v20 = v71;
      Swift::String v95 = v123;
      Swift::String v96 = v127;
      uint64_t v97 = v121;
LABEL_116:
      uint64_t v99 = v145;
      if (v98 >= v79) {
        goto LABEL_128;
      }
      if (!HIWORD(v93))
      {
        while (v98 < *((void *)v46._rawValue + 2))
        {
          Swift::String v111 = *(unsigned __int16 *)(v92 + 2 * v98);
          uint64_t v77 = v111 + 0xFFFF;
          v78[v98] = v111 - 1;
          if (v79 - 1 == v98) {
            goto LABEL_135;
          }
          ++v98;
          if (v111) {
            goto LABEL_121;
          }
        }

        goto LABEL_154;
      }

      goto LABEL_121;
    }

        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_164:
        type metadata accessor for NSComparisonResult(0LL);
        __int128 v152 = v48;
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }

    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }

  if (!v48)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    LOWORD(v32) = 0;
    LOWORD(v33) = 0;
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    unint64_t v70 = a1;
    uint64_t v20 = v124;
LABEL_148:
    *(_DWORD *)unint64_t v70 = v27;
    *(_WORD *)(v70 + 4) = v28;
    *(_WORD *)(v70 + 6) = v29;
    *(_WORD *)(v70 + 8) = v30;
    *(_WORD *)(v70 + 10) = v31;
    *(_WORD *)(v70 + 12) = v32;
    *(_WORD *)(v70 + 14) = v33;
    *(_WORD *)(v70 + 16) = v34;
    BOOL v60 = v20 & 1;
    *(_WORD *)(v70 + 18) = v35;
    return v60;
  }

  uint64_t v71 = v124;
  if (v48 != 1) {
    goto LABEL_164;
  }
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  uint64_t v48 = v88;
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  uint64_t v75 = v89;
  __int128 v90 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v46._rawValue = (void *)v90;
  *(void *)(v90 + 32) = 0LL;
  unint64_t v78 = (_WORD *)(v90 + 32);
  *(void *)(v90 + 16) = 8LL;
  *(void *)(v90 + 40) = 0LL;
  unint64_t v79 = *(void *)(v48 + 16);
  uint64_t v80 = *(void *)(v75 + 16);
  if (v80 >= v79) {
    uint64_t v91 = *(void *)(v48 + 16);
  }
  else {
    uint64_t v91 = *(void *)(v75 + 16);
  }
  if (v91)
  {
    uint64_t v92 = v48 + 32;
    char v93 = (*(unsigned __int16 *)(v48 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
    LODWORD(v94) = HIWORD(v93);
    *unint64_t v78 = *(_WORD *)(v48 + 32) - *(_WORD *)(v75 + 32);
    uint64_t v87 = v91 - 1;
    Swift::String v95 = v123;
    Swift::String v96 = v127;
    uint64_t v97 = v121;
    if (!v87)
    {
      uint64_t v98 = 1LL;
      uint64_t v20 = v124;
      goto LABEL_116;
    }

    char v93 = v94 + *(unsigned __int16 *)(v48 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 34) = v93;
    uint64_t v20 = v124;
    if (v87 == 1)
    {
      uint64_t v98 = 2LL;
      goto LABEL_116;
    }

    uint64_t v77 = *(unsigned __int16 *)(v75 + 36);
    char v93 = v94 + *(unsigned __int16 *)(v48 + 36) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 36) = v93;
    if (v87 == 2)
    {
      uint64_t v98 = 3LL;
      goto LABEL_116;
    }

    char v93 = v94 + *(unsigned __int16 *)(v48 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 38) = v93;
    if (v87 == 3)
    {
      uint64_t v98 = 4LL;
      goto LABEL_116;
    }

    uint64_t v77 = *(unsigned __int16 *)(v75 + 40);
    char v93 = v94 + *(unsigned __int16 *)(v48 + 40) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 40) = v93;
    if (v87 == 4)
    {
      uint64_t v98 = 5LL;
      goto LABEL_116;
    }

    char v93 = v94 + *(unsigned __int16 *)(v48 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 42) = v93;
    if (v87 == 5)
    {
      uint64_t v98 = 6LL;
      goto LABEL_116;
    }

    uint64_t v77 = *(unsigned __int16 *)(v75 + 44);
    char v93 = v94 + *(unsigned __int16 *)(v48 + 44) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 44) = v93;
    if (v87 == 6)
    {
      uint64_t v98 = 7LL;
LABEL_115:
      uint64_t v20 = v71;
      Swift::String v95 = v123;
      Swift::String v96 = v127;
      uint64_t v97 = v121;
LABEL_116:
      uint64_t v99 = v145;
      if (v98 >= v79) {
        goto LABEL_128;
      }
      if (!HIWORD(v93))
      {
        while (v98 < *((void *)v46._rawValue + 2))
        {
          Swift::String v111 = *(unsigned __int16 *)(v92 + 2 * v98);
          uint64_t v77 = v111 + 0xFFFF;
          v78[v98] = v111 - 1;
          if (v79 - 1 == v98) {
            goto LABEL_135;
          }
          ++v98;
          if (v111) {
            goto LABEL_121;
          }
        }

        goto LABEL_154;
      }

      goto LABEL_121;
    }

        swift_bridgeObjectRelease();
        __int128 v123 = v218;
        if ((v227 & 1) != 0)
        {
LABEL_129:
          uint64_t v130 = (uint64_t *)(*(void *)(v127 + 56) + 16 * v123);
          swift_bridgeObjectRelease();
          *uint64_t v130 = v115;
          v130[1] = v114;
          goto LABEL_165;
        }
      }
    }

    else
    {
      uint64_t v226 = v122;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v126, v121);
      __int128 v127 = v238[0];
      uint64_t v128 = specialized __RawDictionaryStorage.find<A>(_:)(v120);
      if ((v226 & 1) != (v129 & 1)) {
        goto LABEL_290;
      }
      __int128 v123 = v128;
      if ((v226 & 1) != 0) {
        goto LABEL_129;
      }
    }

    specialized _NativeDictionary._insert(at:key:value:)(v123, v120, v115, v114, (void *)v127);
LABEL_165:
    swift_bridgeObjectRelease();
    __int128 v232 = v127;
    if (v105) {
      goto LABEL_105;
    }
LABEL_108:
    int v117 = v101 + 1;
    if (__OFADD__(v101, 1LL)) {
      goto LABEL_272;
    }
    if (v117 >= v106) {
      break;
    }
    unint64_t v118 = *(void *)(v102 + 8 * v117);
    ++v101;
    if (!v118)
    {
      int64_t v101 = v117 + 1;
      if (v117 + 1 >= v106) {
        break;
      }
      unint64_t v118 = *(void *)(v102 + 8 * v101);
      if (!v118)
      {
        int64_t v101 = v117 + 2;
        if (v117 + 2 >= v106) {
          break;
        }
        unint64_t v118 = *(void *)(v102 + 8 * v101);
        if (!v118)
        {
          __int128 v119 = v117 + 3;
          if (v119 >= v106) {
            break;
          }
          unint64_t v118 = *(void *)(v102 + 8 * v119);
          if (!v118)
          {
            while (1)
            {
              int64_t v101 = v119 + 1;
              if (__OFADD__(v119, 1LL)) {
                break;
              }
              if (v101 >= v106) {
                goto LABEL_167;
              }
              unint64_t v118 = *(void *)(v102 + 8 * v101);
              ++v119;
              if (v118) {
                goto LABEL_121;
              }
            }

                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
              }

              unint64_t v69 = v57 + 6;
            }
          }
        }
      }
    }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v8 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v79 << 8);
        }

        else
        {
          uint64_t v8 = ((-15LL << ((4 * v54 + 8) & 0x3C)) - 1) & v54 | ((unint64_t)*(unsigned __int16 *)(v51 + 16) << ((4 * v54 + 8) & 0x3C));
          swift_unknownObjectRetain();
          uint64_t v7 = 0LL;
          uint64_t v9 = 0LL;
        }

        swift_unknownObjectRetain();
        uint64_t v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v89, v8, v9, v51, v53);
        uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        a2 = v84;
        a4 = v85;
      }

      else
      {
        uint64_t v7 = 0LL;
        uint64_t v9 = 0LL;
        uint64_t v8 = 0LL;
        uint64_t v10 = 0LL;
      }

      uint64_t v49 = a6;
      uint64_t v11 = a6 - v7;
      if (__OFSUB__(a6, v7)) {
        goto LABEL_189;
      }
LABEL_97:
      --v50;
      uint64_t v7 = v89;
      if (v50 <= a2) {
        goto LABEL_166;
      }
    }
  }

  if (!a2)
  {
LABEL_166:
    *a7 = v7;
    a7[1] = v8;
    a7[2] = v9;
    a7[3] = v10;
    a7[4] = v11;
    return result;
  }

  uint64_t v12 = 0LL;
  while (1)
  {
    if (v11 == *(void *)(a3 + 32))
    {
LABEL_165:
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      uint64_t v9 = 1LL;
      goto LABEL_166;
    }

    uint64_t v13 = a4[8];
    uint64_t v14 = a4[11];
    uint64_t v91 = v7;
    uint64_t v92 = v8;
    char v93 = v9;
    uint64_t v15 = __OFADD__(v10++, 1LL);
    if (v15) {
      break;
    }
    if (v7 != v14) {
      goto LABEL_177;
    }
    uint64_t v87 = v7;
    if (v9)
    {
      uint64_t v16 = v9 + 24 * ((v8 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v7 = *(void *)(v16 + 32);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v17 = specialized Rope._Node.subscript.getter(v8, v13);
      uint64_t v7 = v18;
    }

    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    uint64_t v15 = __OFADD__(v11, v17);
    v11 += v17;
    if (v15) {
      goto LABEL_178;
    }
    if (!v13)
    {
      uint64_t v7 = a6;
      goto LABEL_179;
    }

    __int128 v19 = ((-15LL << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v13 + 18) | ((unint64_t)*(unsigned __int16 *)(v13 + 16) << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C));
    uint64_t result = (uint64_t *)swift_unknownObjectRetain();
    uint64_t v7 = a6;
    if (v8 >= v19) {
      goto LABEL_179;
    }
    if (v9)
    {
      uint64_t v20 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
      Swift::String v21 = ((v8 >> v20) & 0xF) + 1;
      if (v21 < *(unsigned __int16 *)(v9 + 16))
      {
        uint64_t v8 = (v21 << v20) | ((-15LL << v20) - 1) & v8;
        uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        goto LABEL_25;
      }
    }

    uint64_t v22 = *(unsigned __int8 *)(v13 + 18);
    unint64_t v23 = (4 * v22 + 8) & 0x3C;
    uint64_t v24 = (v8 >> v23) & 0xF;
    __int128 v90 = v24;
    if (v22)
    {
      swift_unknownObjectRetain();
      __int128 v25 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v13 + 24, &v90, (uint64_t)&v91, v13, v22);
      swift_unknownObjectRelease();
      if ((v25 & 1) != 0)
      {
        uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        uint64_t v8 = v92;
        uint64_t v87 = v91;
        uint64_t v9 = v93;
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v26 = v24 + 1;
      if (v24 + 1 < (unint64_t)*(unsigned __int16 *)(v13 + 16))
      {
        uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        uint64_t v8 = (v26 << v23) | ((-15LL << v23) - 1) & v8;
        uint64_t v9 = v13;
LABEL_25:
        unint64_t v27 = v84;
        a4 = v85;
        if (v11 < a6) {
          goto LABEL_4;
        }
        goto LABEL_28;
      }
    }

    uint64_t v28 = *(unsigned __int8 *)(v13 + 18);
    uint64_t v29 = *(unsigned __int16 *)(v13 + 16);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    uint64_t v8 = ((-15LL << ((4 * v28 + 8) & 0x3C)) - 1) & v28 | (unint64_t)(v29 << ((4 * v28 + 8) & 0x3C));
    unint64_t v27 = v84;
    a4 = v85;
    uint64_t v9 = 0LL;
    uint64_t v91 = v87;
    if (v11 < a6)
    {
LABEL_4:
      uint64_t v7 = v87;
      goto LABEL_5;
    }

                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
                goto LABEL_167;
              }
            }

            unint64_t v69 = v75;
          }

Swift::UInt specialized AttributedStringProtocol.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  __int128 v4 = *(_OWORD *)(v1 + 24);
  __int128 v122 = *(_OWORD *)(v1 + 8);
  __int128 v123 = v4;
  __int128 v5 = *(_OWORD *)(v1 + 56);
  __int128 v124 = *(_OWORD *)(v1 + 40);
  __int128 v125 = v5;
  outlined retain of AttributedString.Runs(v1);
  uint64_t v6 = swift_retain();
  AttributedString.Runs.init(_:in:)(v6, &v137);
  uint64_t v7 = *((void *)&v137 + 1);
  uint64_t v8 = *((void *)&v141 + 1);
  Swift::UInt result = *((void *)&v141 + 1) - *((void *)&v137 + 1);
  if (__OFSUB__(*((void *)&v141 + 1), *((void *)&v137 + 1))) {
    goto LABEL_140;
  }
  uint64_t v78 = v1;
  unint64_t v93 = *((void *)&v138 + 1);
  uint64_t v94 = v138;
  uint64_t v11 = *((void *)&v139 + 1);
  uint64_t v10 = v139;
  uint64_t v13 = *((void *)&v140 + 1);
  uint64_t v12 = v140;
  uint64_t v96 = v141;
  Hasher._combine(_:)(result);
  if (v7 == v8) {
    goto LABEL_116;
  }
  uint64_t v86 = *((void *)&v146 + 1);
  uint64_t v87 = v146;
  unint64_t v84 = *((void *)&v145 + 1);
  uint64_t v85 = v147;
  int64_t v82 = *((void *)&v147 + 1) >> 11;
  unint64_t v83 = *((void *)&v145 + 1) >> 10;
  Swift::String v95 = (void *)v137;
  uint64_t v91 = (_OWORD *)(v137 + 16);
  unint64_t v79 = (__int128 *)(v3 + 16);
  Swift::UInt result = outlined retain of AttributedString.Runs((uint64_t)&v137);
  uint64_t v80 = v8;
  uint64_t v81 = a1;
  do
  {
    if (v7 >= v8)
    {
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }

    __int128 v115 = v147;
    __int128 v116 = v148;
    uint64_t v117 = v149;
    __int128 v111 = v143;
    __int128 v112 = v144;
    __int128 v113 = v145;
    __int128 v114 = v146;
    __int128 v107 = v139;
    __int128 v108 = v140;
    __int128 v109 = v141;
    __int128 v110 = v142;
    __int128 v105 = v137;
    __int128 v106 = v138;
    v104[0] = v7;
    v104[1] = v94;
    v104[2] = v93;
    v104[3] = v10;
    v104[4] = v11;
    v104[5] = v12;
    v104[6] = v13;
    v104[7] = v96;
    Swift::UInt result = (Swift::UInt)AttributedString.Runs._resolve(_:)(v104, &v97);
    if (v97 != v95[11]) {
      goto LABEL_121;
    }
    Swift::UInt v88 = v11;
    uint64_t v22 = v7;
    unint64_t v23 = v98;
    unint64_t v25 = v100;
    uint64_t v24 = v101;
    uint64_t v26 = v102;
    uint64_t v27 = v103;
    if (v99)
    {
      uint64_t v28 = (void *)(v99 + 24 * ((v98 >> ((4 * *(_BYTE *)(v99 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v29 = v28[3];
      uint64_t v30 = v28[4];
      uint64_t v31 = v28[5];
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      uint64_t v90 = v30;
      swift_bridgeObjectRetain();
      uint64_t v89 = v31;
      Swift::UInt result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v32 = v95[8];
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      swift_unknownObjectRetain();
      unint64_t v29 = specialized Rope._Node.subscript.getter(v23, v32);
      uint64_t v89 = v34;
      uint64_t v90 = v33;
      Swift::UInt result = swift_unknownObjectRelease();
    }

    if (v83 >= v25 >> 10) {
      unint64_t v35 = v84;
    }
    else {
      unint64_t v35 = v25;
    }
    if (v83 >= v25 >> 10)
    {
      uint64_t v24 = v87;
      uint64_t v26 = v86;
      uint64_t v27 = v85;
    }

    if (__OFADD__(v29, v25 >> 11)) {
      goto LABEL_122;
    }
    else {
      unint64_t v36 = v82;
    }
    __int128 v37 = v91[1];
    v134[9] = *v91;
    v134[10] = v37;
    v134[11] = v91[2];
    Swift::UInt result = BigString.utf8.getter();
    if (__OFSUB__(v36, v35 >> 11)) {
      goto LABEL_123;
    }
    unint64_t v38 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    Swift::UInt result = outlined release of Locale((uint64_t)v118);
    if (v38 >> 10 < v35 >> 10) {
      goto LABEL_124;
    }
    unint64_t v126 = v35;
    uint64_t v127 = v24;
    uint64_t v128 = v26;
    uint64_t v129 = v27;
    unint64_t v130 = v38;
    uint64_t v131 = v40;
    uint64_t v132 = v42;
    uint64_t v133 = v44;
    uint64_t v45 = v94;
    uint64_t v46 = v95[8];
    uint64_t v47 = v95[9];
    uint64_t v48 = v95[11];
    uint64_t v92 = v95[10];
    if (v10 == 1 || v94 != v48)
    {
      if (v46) {
        uint64_t v52 = v95[9];
      }
      else {
        uint64_t v52 = 0LL;
      }
      if (v22 < 0) {
        goto LABEL_133;
      }
      uint64_t v49 = v22;
      if (v52 < v22) {
        goto LABEL_133;
      }
      if (!v46 || v22 >= v47 || !*(_WORD *)(v46 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        unint64_t v66 = swift_unknownObjectRetain();
        unint64_t v50 = specialized Rope._endPath.getter(v66);
        Swift::UInt result = swift_unknownObjectRelease();
        uint64_t v10 = 0LL;
        if (!v46)
        {
          uint64_t v51 = 0LL;
          goto LABEL_105;
        }

Swift::UInt specialized AttributedStringProtocol.hash(into:)(uint64_t a1, _OWORD *a2)
{
  __int128 v4 = a2[2];
  __int128 v153 = a2[1];
  __int128 v154 = v4;
  __int128 v155 = a2[3];
  uint64_t v145 = BigString.startIndex.getter();
  uint64_t v146 = v5;
  uint64_t v147 = v6;
  uint64_t v148 = v7;
  uint64_t v149 = BigString.endIndex.getter();
  uint64_t v150 = v8;
  uint64_t v151 = v9;
  uint64_t v152 = v10;
  uint64_t v11 = swift_retain_n();
  AttributedString.Runs.init(_:in:)(v11, &v158);
  uint64_t v12 = *((void *)&v158 + 1);
  uint64_t v13 = *((void *)&v162 + 1);
  Swift::UInt result = *((void *)&v162 + 1) - *((void *)&v158 + 1);
  if (__OFSUB__(*((void *)&v162 + 1), *((void *)&v158 + 1))) {
    goto LABEL_141;
  }
  uint64_t v15 = *((void *)&v159 + 1);
  unint64_t v17 = *((void *)&v160 + 1);
  uint64_t v16 = v160;
  uint64_t v19 = *((void *)&v161 + 1);
  uint64_t v18 = v161;
  uint64_t v99 = v159;
  uint64_t v100 = v162;
  Hasher._combine(_:)(result);
  if (v12 == v13) {
    goto LABEL_117;
  }
  unint64_t v96 = v17;
  int64_t v82 = a2 + 1;
  uint64_t v89 = *((void *)&v167 + 1);
  uint64_t v90 = v167;
  __int128 v20 = (void *)v158;
  unint64_t v87 = *((void *)&v166 + 1);
  uint64_t v88 = v168;
  int64_t v85 = *((void *)&v168 + 1) >> 11;
  unint64_t v86 = *((void *)&v166 + 1) >> 10;
  uint64_t v94 = (__int128 *)(v158 + 16);
  Swift::UInt result = outlined retain of AttributedString.Runs((uint64_t)&v158);
  uint64_t v91 = v20;
  uint64_t v83 = v13;
  uint64_t v84 = a1;
  do
  {
    if (v12 >= v13)
    {
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }

    __int128 v119 = v168;
    __int128 v120 = v169;
    uint64_t v121 = v170;
    __int128 v115 = v164;
    __int128 v116 = v165;
    __int128 v117 = v166;
    __int128 v118 = v167;
    __int128 v111 = v160;
    __int128 v112 = v161;
    __int128 v113 = v162;
    __int128 v114 = v163;
    __int128 v109 = v158;
    __int128 v110 = v159;
    v108[0] = v12;
    v108[1] = v99;
    v108[2] = v15;
    v108[3] = v16;
    v108[4] = v96;
    v108[5] = v18;
    v108[6] = v19;
    v108[7] = v100;
    Swift::UInt result = (Swift::UInt)AttributedString.Runs._resolve(_:)(v108, &v101);
    if (v101 != v20[11]) {
      goto LABEL_122;
    }
    unint64_t v97 = v15;
    uint64_t v27 = v12;
    unint64_t v28 = v102;
    unint64_t v30 = v104;
    uint64_t v29 = v105;
    uint64_t v31 = v106;
    uint64_t v32 = v107;
    if (v103)
    {
      uint64_t v33 = (void *)(v103 + 24 * ((v102 >> ((4 * *(_BYTE *)(v103 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v34 = v33[3];
      uint64_t v35 = v33[4];
      uint64_t v36 = v33[5];
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      swift_bridgeObjectRetain();
      uint64_t v93 = v36;
      Swift::UInt result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v37 = v20[8];
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      swift_unknownObjectRetain();
      unint64_t v34 = specialized Rope._Node.subscript.getter(v28, v37);
      uint64_t v35 = v38;
      uint64_t v93 = v39;
      Swift::UInt result = swift_unknownObjectRelease();
    }

    if (v86 >= v30 >> 10) {
      unint64_t v40 = v87;
    }
    else {
      unint64_t v40 = v30;
    }
    if (v86 >= v30 >> 10)
    {
      uint64_t v29 = v90;
      uint64_t v31 = v89;
      uint64_t v32 = v88;
    }

    if (__OFADD__(v34, v30 >> 11)) {
      goto LABEL_123;
    }
    uint64_t v92 = v35;
    else {
      unint64_t v41 = v85;
    }
    __int128 v42 = v94[1];
    __int128 v142 = *v94;
    __int128 v143 = v42;
    __int128 v144 = v94[2];
    Swift::UInt result = BigString.utf8.getter();
    if (__OFSUB__(v41, v40 >> 11)) {
      goto LABEL_124;
    }
    unint64_t v43 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    Swift::UInt result = outlined release of Locale((uint64_t)v122);
    if (v43 >> 10 < v40 >> 10) {
      goto LABEL_125;
    }
    unint64_t v126 = v40;
    uint64_t v127 = v29;
    uint64_t v128 = v31;
    uint64_t v129 = v32;
    unint64_t v130 = v43;
    uint64_t v131 = v45;
    uint64_t v132 = v47;
    uint64_t v133 = v49;
    __int128 v20 = v91;
    uint64_t v50 = v91[8];
    uint64_t v51 = v91[9];
    uint64_t v53 = v91[10];
    uint64_t v52 = v91[11];
    uint64_t v95 = v53;
    if (v16 == 1 || v99 != v52)
    {
      if (v50) {
        uint64_t v58 = v91[9];
      }
      else {
        uint64_t v58 = 0LL;
      }
      if (v27 < 0) {
        goto LABEL_134;
      }
      uint64_t v54 = v27;
      if (v58 < v27) {
        goto LABEL_134;
      }
      if (!v50 || v27 >= v51 || !*(_WORD *)(v50 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v158);
        unint64_t v72 = swift_unknownObjectRetain();
        unint64_t v55 = specialized Rope._endPath.getter(v72);
        Swift::UInt result = swift_unknownObjectRelease();
        uint64_t v16 = 0LL;
        if (!v50)
        {
          uint64_t v56 = 0LL;
          goto LABEL_106;
        }

uint64_t static AttributedString.== infix(_:_:)(_OWORD **a1, _OWORD **a2)
{
  return specialized static AttributedString.Guts.characterwiseIsEqual(_:to:)(*a1, *a2);
}

uint64_t AttributedString.init(_:attributes:)@<X0>(uint64_t *a1@<X2>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  BigString.init(_:)();
  uint64_t result = AttributedString.init(_:attributes:)(v7, v3, v4, &v6);
  *a2 = v6;
  return result;
}

uint64_t AttributedString.init(stringLiteral:)@<X0>(void *a1@<X8>)
{
  uint64_t result = AttributedString.init(_:attributes:)(v4, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], &v3);
  *a1 = v3;
  return result;
}

uint64_t static AttributedString.+ infix(_:_:)@<X0>(void *a1@<X0>, _OWORD **a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (_OWORD *)*a1;
  uint64_t v4 = *a2;
  *a3 = *a1;
  __int128 v5 = v3[2];
  __int128 v17 = v3[1];
  __int128 v18 = v5;
  __int128 v19 = v3[3];
  *(void *)&__int128 v10 = BigString.endIndex.getter();
  *((void *)&v10 + 1) = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v10;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  swift_retain();
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v10, v4);
}

BOOL static AttributedString.Index.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 >> 10 < *a2 >> 10;
}

uint64_t one-time initialization function for currentIdentity()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = 0LL;
  static AttributedString.currentIdentity = result;
  return result;
}

uint64_t *closure #1 in static AttributedString._nextModifyIdentity.getter@<X0>( uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result + 1;
  if (__OFADD__(*result, 1LL))
  {
    __break(1u);
  }

  else
  {
    *uint64_t result = v2;
    *a2 = v2;
  }

  return result;
}

uint64_t AttributedString.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v6 = 0LL;
  MEMORY[0x186E20E78](&v6, 8LL);
  uint64_t v2 = v6;
  type metadata accessor for AttributedString.Guts();
  uint64_t v3 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __int128 v5 = v8;
    *(_OWORD *)(v3 + 16) = v7;
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v9;
    *(void *)(v3 + 64) = 0LL;
    *(void *)(v3 + 72) = 0LL;
    *(void *)(v3 + 80) = 0LL;
    *(void *)(v3 + 88) = v2;
    *a1 = v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t AttributedString.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  __int128 v4 = *(_OWORD *)(a1 + 3);
  __int128 v22 = *(_OWORD *)(a1 + 1);
  unint64_t v19 = v22;
  __int128 v23 = v4;
  __int128 v5 = *(_OWORD *)(a1 + 7);
  __int128 v24 = *(_OWORD *)(a1 + 5);
  unint64_t v18 = v24;
  __int128 v25 = v5;
  __int128 v6 = *(_OWORD *)(v3 + 32);
  __int128 v26 = *(_OWORD *)(v3 + 16);
  __int128 v27 = v6;
  __int128 v28 = *(_OWORD *)(v3 + 48);
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v20);
  swift_release();
  BigString.init(_:)();
  uint64_t v7 = *(void *)(v3 + 64);
  uint64_t v8 = *(void *)(v3 + 72);
  uint64_t v9 = *(void *)(v3 + 80);
  swift_unknownObjectRetain();
  uint64_t v10 = specialized Rope.extract<A>(from:to:in:)(v19 >> 11, v18 >> 11, v7, v8, v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for AttributedString.Guts();
  swift_allocObject();
  uint64_t result = AttributedString.Guts.init(string:runs:)(v21, v10, v12, v14, v16);
  *a2 = result;
  return result;
}

uint64_t AttributedString.init(_:attributes:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if ((BigString.isEmpty.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BigString.init()();
    v16[0] = 0LL;
    MEMORY[0x186E20E78](v16, 8LL);
    uint64_t v8 = v16[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v9 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      __int128 v10 = v19;
      __int128 v11 = v20;
      *(_OWORD *)(v9 + 16) = v18;
      *(_OWORD *)(v9 + 32) = v10;
      *(_OWORD *)(v9 + 48) = v11;
      *(void *)(v9 + 64) = 0LL;
      *(void *)(v9 + 72) = 0LL;
      *(void *)(v9 + 80) = 0LL;
      *(void *)(v9 + 88) = v8;
      uint64_t result = outlined release of Locale((uint64_t)a1);
      *a4 = v9;
      return result;
    }

    __break(1u);
    __break(1u);
  }

  else
  {
    *(void *)&__int128 v18 = 0LL;
    MEMORY[0x186E20E78](&v18, 8LL);
    BigString.utf8.getter();
    uint64_t v13 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.append(_:)(v13, a2, a3);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
  }

  __int128 v14 = a1[1];
  __int128 v18 = *a1;
  __int128 v15 = a1[2];
  __int128 v19 = v14;
  __int128 v20 = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v18, (uint64_t)v17);
  uint64_t result = outlined retain of Locale((uint64_t)v17);
  __break(1u);
  return result;
}

uint64_t AttributedString.init(_:attributes:)@<X0>(uint64_t *a1@<X4>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  BigString.init(_:)();
  uint64_t result = AttributedString.init(_:attributes:)(v7, v3, v4, &v6);
  *a2 = v6;
  return result;
}

uint64_t AttributedString.init<A>(_:attributes:)@<X0>( _OWORD *a1@<X0>, uint64_t *a2@<X1>, ValueMetadata *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  static AttributedString._bstring<A>(from:)(a1, a3, v11);
  AttributedString.init(_:attributes:)(v11, v7, v8, &v10);
  uint64_t result = (*((uint64_t (**)(_OWORD *, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
  *a4 = v10;
  return result;
}

uint64_t static AttributedString._bstring<A>(from:)@<X0>( _OWORD *a1@<X0>, ValueMetadata *a2@<X1>, _OWORD *a3@<X8>)
{
  Description = (void (**)(char *, _OWORD *, ValueMetadata *))a2[-1].Description;
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v9 == MEMORY[0x189617FA8])
  {
    swift_bridgeObjectRetain();
    uint64_t result = BigString.init(_:)();
  }

  else if (a2 == (ValueMetadata *)MEMORY[0x189618C50])
  {
    swift_bridgeObjectRetain();
    uint64_t result = BigString.init(_:)();
  }

  else
  {
    if (a2 == &type metadata for AttributedString.CharacterView)
    {
      uint64_t v14 = *(void *)a1;
      __int128 v15 = *(_OWORD *)(*(void *)a1 + 32LL);
      __int128 v30 = *(_OWORD *)(*(void *)a1 + 16LL);
      __int128 v31 = v15;
      __int128 v16 = *(_OWORD *)((char *)a1 + 8);
      __int128 v32 = *(_OWORD *)(v14 + 48);
      __int128 v33 = v16;
      __int128 v17 = *(_OWORD *)((char *)a1 + 40);
      __int128 v34 = *(_OWORD *)((char *)a1 + 24);
      __int128 v35 = v17;
      __int128 v36 = *(_OWORD *)((char *)a1 + 56);
      swift_unknownObjectRetain();
      uint64_t result = BigString.init(_:)();
      __int128 v11 = v40;
      __int128 v12 = v41;
      __int128 v13 = v42;
      goto LABEL_9;
    }

    if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<AttributedString.CharacterView>) == a2)
    {
      __int128 v18 = a1[3];
      __int128 v32 = a1[2];
      __int128 v33 = v18;
      __int128 v19 = a1[8];
      __int128 v20 = a1[6];
      __int128 v37 = a1[7];
      __int128 v38 = v19;
      __int128 v21 = a1[5];
      __int128 v34 = a1[4];
      __int128 v35 = v21;
      __int128 v36 = v20;
      __int128 v22 = a1[1];
      __int128 v30 = *a1;
      __int128 v31 = v22;
      __int128 v47 = v30;
      __int128 v48 = v22;
      __int128 v49 = v32;
      __int128 v50 = v33;
      __int128 v23 = (_OWORD *)v34;
      __int128 v24 = *(_OWORD *)(v34 + 16);
      __int128 v25 = *(_OWORD *)(v34 + 48);
      v51[1] = *(_OWORD *)(v34 + 32);
      v51[2] = v25;
      v51[0] = v24;
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined retain of Locale((uint64_t)v51);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v51);
      outlined release of Locale((uint64_t)v39);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      __int128 v26 = v23[2];
      __int128 v40 = v23[1];
      __int128 v41 = v26;
      __int128 v42 = v23[3];
      __int128 v43 = v39[3];
      __int128 v44 = v39[4];
      __int128 v45 = v39[5];
      __int128 v46 = v39[6];
      swift_unknownObjectRetain();
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      BigString.init(_:)();
      __int128 v28 = v39[8];
      __int128 v29 = v39[7];
      __int128 v27 = v39[9];
      uint64_t result = outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      __int128 v13 = v27;
      __int128 v12 = v28;
      __int128 v11 = v29;
      goto LABEL_9;
    }

    Description[2](v8, a1, a2);
    uint64_t result = BigString.init<A>(_:)();
  }

  __int128 v11 = v30;
  __int128 v12 = v31;
  __int128 v13 = v32;
LABEL_9:
  *a3 = v11;
  a3[1] = v12;
  a3[2] = v13;
  return result;
}

uint64_t AttributedString.init<A, B>(_:including:)@<X0>( uint64_t a1@<X0>, Swift::UInt a2@<X2>, ValueMetadata *a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  Description = (void (**)(char *, uint64_t, uint64_t))a3[-1].Description;
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Description[2](v14, a1, v15);
  AttributedString.init<A, B>(_:including:)((uint64_t)v14, a2, a3, a4, a5, &v18);
  swift_release();
  uint64_t result = ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a1, a3);
  *a6 = v18;
  return result;
}

{
  __int128 v12;
  _OWORD *v13;
  void *v14;
  __int128 v15;
  int64_t v16;
  uint64_t result;
  __int128 v18;
  _OWORD v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[4];
  AttributedStringProtocol.__guts.getter(a3, a5);
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(&v20, a3, a5);
  uint64_t v18 = v20;
  __int128 v12 = v21;
  (*(void (**)(_OWORD *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(v19, a3, a5);
  v23[0] = v18;
  v23[1] = v12;
  v23[2] = v19[0];
  v23[3] = v19[1];
  uint64_t v13 = AttributedString.Guts.copy(in:)((unint64_t *)v23);
  swift_retain_n();
  uint64_t v14 = static AttributeScope.scopeDescription.getter(a2, a4);
  swift_bridgeObjectRelease();
  uint64_t v15 = v13[2];
  __int128 v20 = v13[1];
  __int128 v21 = v15;
  __int128 v22 = v13[3];
  BigString.utf8.getter();
  __int128 v16 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v19);
  uint64_t result = swift_release();
  if (v16 < 0)
  {
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v13, 0LL, v16, (uint64_t)v14);
    swift_release();
    swift_bridgeObjectRelease();
    (*((void (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
    uint64_t result = swift_bridgeObjectRelease();
    *a6 = v13;
  }

  return result;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance AttributedString@<X0>( void *a1@<X8>)
{
  uint64_t result = AttributedString.init(_:attributes:)(v4, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], &v3);
  *a1 = v3;
  return result;
}

uint64_t closure #2 in AttributedString.replaceAttributes(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v11 = a4 + 64;
  uint64_t v12 = 1LL << *(_BYTE *)(a4 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(a4 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_5;
    }

    int64_t v23 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }

    if (v23 >= v15) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v11 + 8 * v23);
    ++v17;
    if (!v24)
    {
      int64_t v17 = v23 + 1;
      if (v23 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v11 + 8 * v17);
      if (!v24)
      {
        int64_t v17 = v23 + 2;
        if (v23 + 2 >= v15) {
          goto LABEL_23;
        }
        unint64_t v24 = *(void *)(v11 + 8 * v17);
        if (!v24)
        {
          int64_t v17 = v23 + 3;
          if (v23 + 3 >= v15) {
            goto LABEL_23;
          }
          unint64_t v24 = *(void *)(v11 + 8 * v17);
          if (!v24) {
            break;
          }
        }
      }
    }

BOOL static AttributedString.Index.== infix(_:_:)(void *a1, void *a2)
{
  return (*a2 ^ *a1) < 0x400uLL;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AttributedString.Index( void *a1, void *a2)
{
  return *a1 >> 10 < *a2 >> 10;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AttributedString.Index( void *a1, void *a2)
{
  return *a2 >> 10 >= *a1 >> 10;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AttributedString.Index( void *a1, void *a2)
{
  return *a1 >> 10 >= *a2 >> 10;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance AttributedString.Index( void *a1, void *a2)
{
  return *a2 >> 10 < *a1 >> 10;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.Index( void *a1, void *a2)
{
  return (*a2 ^ *a1) < 0x400uLL;
}

uint64_t AttributedString.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = *v3;
  __int128 v8 = *(_OWORD *)(*v3 + 32);
  __int128 v22 = *(_OWORD *)(*v3 + 16);
  __int128 v23 = v8;
  __int128 v24 = *(_OWORD *)(v7 + 48);
  v21[0] = BigString.startIndex.getter();
  v21[1] = v9;
  uint64_t v21[2] = v10;
  _OWORD v21[3] = v11;
  void v21[4] = BigString.endIndex.getter();
  v21[5] = v12;
  v21[6] = v13;
  v21[7] = v14;
  AttributedString.Guts.getUniformValue<A>(in:key:)(v21, a1, a2, (uint64_t)v19);
  if (v20)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v19,  (uint64_t)&v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v19);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( a3,  0LL,  1LL,  AssociatedTypeWitness);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)v19,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v17 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))( a3,  1LL,  1LL,  v17);
  }

uint64_t AttributedString.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v5 = v4;
  uint64_t v57 = a4;
  uint64_t v56 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v53 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v10);
  int64_t v15 = (char *)&v53 - v14;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v58 = a1;
  uint64_t v55 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v17 = (void *)*v5;
    __int128 v18 = *(_OWORD *)(*v5 + 16);
    __int128 v19 = *(_OWORD *)(*v5 + 48);
    v70[1] = *(_OWORD *)(*v5 + 32);
    v70[2] = v19;
    v70[0] = v18;
    uint64_t v20 = v17[8];
    uint64_t v54 = v17[9];
    uint64_t v21 = v17[10];
    uint64_t v22 = v17[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v70);
    swift_unknownObjectRetain();
    uint64_t v23 = v21;
    a1 = v58;
    uint64_t v24 = AttributedString.Guts.init(string:runs:)(v70, v20, v54, v23, v22);
    uint64_t v8 = v55;
    *__int128 v5 = v24;
    swift_release();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, AssociatedTypeWitness) == 1)
  {
    int64_t v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v12, v8);
    uint64_t v26 = *v5;
    __int128 v27 = *(_OWORD *)(*v5 + 32);
    __int128 v67 = *(_OWORD *)(*v5 + 16);
    __int128 v68 = v27;
    __int128 v69 = *(_OWORD *)(v26 + 48);
    uint64_t v28 = BigString.startIndex.getter();
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v35 = BigString.endIndex.getter();
    uint64_t v59 = v28;
    uint64_t v60 = v30;
    uint64_t v61 = v32;
    uint64_t v62 = v34;
    uint64_t v63 = v35;
    uint64_t v64 = v36;
    uint64_t v65 = v37;
    uint64_t v66 = v38;
    AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v56, (uint64_t)&v59, v56, v57);
    return ((uint64_t (*)(uint64_t, uint64_t))v25)(v58, v8);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
    uint64_t v40 = *v5;
    __int128 v41 = *(_OWORD *)(*v5 + 32);
    __int128 v67 = *(_OWORD *)(*v5 + 16);
    __int128 v68 = v41;
    __int128 v69 = *(_OWORD *)(v40 + 48);
    uint64_t v42 = BigString.startIndex.getter();
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v49 = BigString.endIndex.getter();
    uint64_t v59 = v42;
    uint64_t v60 = v44;
    uint64_t v61 = v46;
    uint64_t v62 = v48;
    uint64_t v63 = v49;
    uint64_t v64 = v50;
    uint64_t v65 = v51;
    uint64_t v66 = v52;
    AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)((uint64_t)v15, v56, (uint64_t)&v59, v56, v57);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v58, v55);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  }

void (*AttributedString.subscript.modify( void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  __int128 v5 = v4;
  uint64_t v10 = (char *)malloc(0x120uLL);
  *a1 = v10;
  *((void *)v10 + 30) = a4;
  *((void *)v10 + 31) = v5;
  *((void *)v10 + 28) = a2;
  *((void *)v10 + 29) = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  *((void *)v10 + 32) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *((void *)v10 + 33) = v12;
  size_t v13 = *(void *)(v12 + 64);
  *((void *)v10 + 34) = malloc(v13);
  uint64_t v14 = malloc(v13);
  *((void *)v10 + 35) = v14;
  int64_t v15 = (_OWORD *)*v5;
  __int128 v17 = v15[1];
  __int128 v16 = v15[2];
  *(_OWORD *)(v10 + 168) = v15[3];
  *(_OWORD *)(v10 + 136) = v17;
  *(_OWORD *)(v10 + 152) = v16;
  uint64_t v18 = BigString.startIndex.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v25 = BigString.endIndex.getter();
  *((void *)v10 + 9) = v18;
  *((void *)v10 + 10) = v20;
  *((void *)v10 + 11) = v22;
  *((void *)v10 + 12) = v24;
  *((void *)v10 + 13) = v25;
  *((void *)v10 + 14) = v26;
  *((void *)v10 + 15) = v27;
  *((void *)v10 + 16) = v28;
  AttributedString.Guts.getUniformValue<A>(in:key:)((void *)v10 + 9, a3, a4, (uint64_t)v10);
  if (*((void *)v10 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v10,  (uint64_t)(v10 + 184));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v10);
    uint64_t v29 = 0LL;
  }

  else
  {
    outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v29 = 1LL;
  }

  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))(v14, v29, 1LL);
  return AttributedString.subscript.modify;
}

void AttributedString.subscript.modify(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[34];
  uint64_t v4 = (void *)(*a1)[35];
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[32];
    uint64_t v6 = v2[33];
    uint64_t v7 = v2[30];
    uint64_t v8 = v2[29];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[34], v4, v5);
    AttributedString.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }

  else
  {
    AttributedString.subscript.setter((*a1)[35], a2, v2[29], v2[30]);
  }

  free(v4);
  free(v3);
  free(v2);
}

uint64_t AttributedString.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *v3;
  __int128 v8 = *(_OWORD *)(*v3 + 32);
  __int128 v23 = *(_OWORD *)(*v3 + 16);
  __int128 v24 = v8;
  __int128 v25 = *(_OWORD *)(v7 + 48);
  v22[0] = BigString.startIndex.getter();
  v22[1] = v9;
  _OWORD v22[2] = v10;
  v22[3] = v11;
  void v22[4] = BigString.endIndex.getter();
  v22[5] = v12;
  void v22[6] = v13;
  v22[7] = v14;
  uint64_t v15 = *(void *)(*MEMORY[0x18961A9A8] + v6 + 8);
  swift_retain();
  AttributedString.Guts.getUniformValue<A>(in:key:)(v22, v15, a2, (uint64_t)v20);
  if (v21)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v20,  (uint64_t)&v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v20);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( a3,  0LL,  1LL,  AssociatedTypeWitness);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)v20,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v17 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(a3, 1LL, 1LL, v17);
  }

  return swift_release();
}

uint64_t key path getter for AttributedString.subscript<A>(dynamicMember:) : <A>AttributedStringA@<X0>( uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  uint64_t v5 = *a1;
  swift_retain();
  AttributedString.subscript.getter(v5, v4, a3);
  return swift_release();
}

uint64_t AttributedString.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

void (*AttributedString.subscript.modify( void *a1, void *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v4 = v3;
  __int128 v8 = (char *)malloc(0x120uLL);
  *a1 = v8;
  *((void *)v8 + 28) = a3;
  *((void *)v8 + 29) = v4;
  uint64_t v9 = *(void *)(*MEMORY[0x18961A9A8] + *a2 + 8LL);
  *((void *)v8 + 30) = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  *((void *)v8 + 31) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *((void *)v8 + 32) = v11;
  size_t v12 = *(void *)(v11 + 64);
  *((void *)v8 + 33) = malloc(v12);
  *((void *)v8 + 34) = malloc(v12);
  uint64_t v13 = malloc(v12);
  *((void *)v8 + 35) = v13;
  uint64_t v14 = (_OWORD *)*v4;
  __int128 v16 = v14[1];
  __int128 v15 = v14[2];
  *(_OWORD *)(v8 + 168) = v14[3];
  *(_OWORD *)(v8 + 136) = v16;
  *(_OWORD *)(v8 + 152) = v15;
  uint64_t v17 = BigString.startIndex.getter();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v24 = BigString.endIndex.getter();
  *((void *)v8 + 9) = v17;
  *((void *)v8 + 10) = v19;
  *((void *)v8 + 11) = v21;
  *((void *)v8 + 12) = v23;
  *((void *)v8 + 13) = v24;
  *((void *)v8 + 14) = v25;
  *((void *)v8 + 15) = v26;
  *((void *)v8 + 16) = v27;
  AttributedString.Guts.getUniformValue<A>(in:key:)((void *)v8 + 9, v9, a3, (uint64_t)v8);
  if (*((void *)v8 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v8,  (uint64_t)(v8 + 184));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v8);
    uint64_t v28 = 0LL;
  }

  else
  {
    outlined destroy of Any?( (uint64_t)v8,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v28 = 1LL;
  }

  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))(v13, v28, 1LL);
  return AttributedString.subscript.modify;
}

void AttributedString.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[32] + 16);
  v4((*a1)[34], v3[35], v3[31]);
  uint64_t v6 = (void *)v3[34];
  uint64_t v7 = (void *)v3[35];
  __int128 v8 = (void *)v3[33];
  uint64_t v14 = v3[32];
  uint64_t v10 = v3[30];
  uint64_t v9 = v3[31];
  uint64_t v11 = v3[28];
  if ((a2 & 1) != 0)
  {
    v4((uint64_t)v8, (uint64_t)v6, v3[31]);
    AttributedString.subscript.setter((uint64_t)v8, v12, v10, v11);
    uint64_t v13 = *(void (**)(void *, uint64_t))(v14 + 8);
    v13(v6, v9);
  }

  else
  {
    AttributedString.subscript.setter((uint64_t)v6, v5, v3[30], v3[28]);
    uint64_t v13 = *(void (**)(void *, uint64_t))(v14 + 8);
  }

  v13(v7, v9);
  free(v7);
  free(v6);
  free(v8);
  free(v3);
}

void *AttributedString.subscript.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  __int128 v4 = *(_OWORD *)(*v1 + 32);
  __int128 v14 = *(_OWORD *)(*v1 + 16);
  __int128 v15 = v4;
  __int128 v16 = *(_OWORD *)(v3 + 48);
  v13[0] = BigString.startIndex.getter();
  v13[1] = v5;
  void v13[2] = v6;
  _OWORD v13[3] = v7;
  v13[4] = BigString.endIndex.getter();
  v13[5] = v8;
  _OWORD v13[6] = v9;
  v13[7] = v10;
  uint64_t result = AttributedString.Guts.getUniformValues(in:)(v13);
  *a1 = result;
  a1[1] = v12;
  a1[2] = 0LL;
  a1[3] = 0LL;
  return result;
}

double key path getter for AttributedString.subscript<A>(dynamicMember:) : <A>AttributedStringA@<D0>( _OWORD *a1@<X8>)
{
  double result = *(double *)v4;
  __int128 v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for AttributedString.subscript<A>(dynamicMember:) : <A>AttributedStringA( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = AttributedString.subscript.modify(v14, v10, v4, v5);
  *uint64_t v12 = v6;
  v12[1] = v7;
  void v12[2] = v9;
  v12[3] = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(void *, void))v11)(v14, 0LL);
}

void (*AttributedString.subscript.modify( void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t v5 = v4;
  uint64_t v9 = malloc(0x68uLL);
  *a1 = v9;
  v9[11] = a4;
  v9[12] = v5;
  v9[10] = a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void **)v5;
    __int128 v12 = *(_OWORD *)(*(void *)v5 + 32LL);
    __int128 v11 = *(_OWORD *)(*(void *)v5 + 48LL);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(*(void *)v5 + 16LL);
    *((_OWORD *)v9 + 1) = v12;
    *((_OWORD *)v9 + 2) = v11;
    uint64_t v13 = v10[8];
    uint64_t v14 = v10[9];
    uint64_t v15 = v10[10];
    uint64_t v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v9);
    swift_unknownObjectRetain();
    *(void *)uint64_t v5 = AttributedString.Guts.init(string:runs:)(v9, v13, v14, v15, v16);
    swift_release();
  }

  v9[6] = MEMORY[0x18961AFF0];
  uint64_t v17 = v9 + 6;
  uint64_t v18 = MEMORY[0x18961AFF8];
  _OWORD v17[2] = 0LL;
  _OWORD v17[3] = 0LL;
  v17[1] = v18;
  return AttributedString.subscript.modify;
}

void AttributedString.subscript.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  $defer #1 <A>() in AttributedString.subscript.modify( (uint64_t *)(*(void *)a1 + 48LL),  *(uint64_t **)(*(void *)a1 + 96LL));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t $defer #1 <A>() in AttributedString.subscript.modify(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[3];
  if (v2)
  {
    unint64_t v18 = a1[2];
    __int128 v3 = (_OWORD *)*a2;
    __int128 v4 = *(_OWORD *)(*a2 + 32);
    __int128 v24 = *(_OWORD *)(*a2 + 16);
    __int128 v25 = v4;
    __int128 v26 = v3[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v19);
    __int128 v6 = v3[2];
    __int128 v21 = v3[1];
    __int128 v22 = v6;
    __int128 v23 = v3[3];
    BigString.unicodeScalars.getter();
    unint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v18, v2, v5 >> 11, v7 >> 11, 1);
    swift_bridgeObjectRelease();
    return swift_release();
  }

  else
  {
    uint64_t v9 = *a2;
    uint64_t v10 = *a1;
    __int128 v11 = *(_OWORD *)(*a2 + 32);
    __int128 v24 = *(_OWORD *)(*a2 + 16);
    __int128 v25 = v11;
    __int128 v26 = *(_OWORD *)(v9 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v19);
    __int128 v13 = *(_OWORD *)(v9 + 32);
    __int128 v21 = *(_OWORD *)(v9 + 16);
    __int128 v22 = v13;
    __int128 v23 = *(_OWORD *)(v9 + 48);
    BigString.unicodeScalars.getter();
    unint64_t v14 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    uint64_t v15 = v14 >> 11;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)((void *)v9, v12 >> 11, v14 >> 11, v10, 0);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v10) & 1) != 0)
    {
      uint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v17 = specialized Sequence.compactMap<A>(_:)(v16);
      swift_bridgeObjectRelease();
      AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)( v12 >> 11,  v15,  0,  v17);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }

    return swift_bridgeObjectRelease();
  }

uint64_t AttributedString.subscript.setter(uint64_t *a1)
{
  return swift_release();
}

Swift::Int AttributedString.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))MEMORY[0x18960D848],  a3,  a4,  a5,  a6);
}

uint64_t protocol witness for AttributedStringProtocol.endIndex.getter in conformance AttributedString@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))MEMORY[0x18960D968],  a3,  a4,  a5,  a6);
}

uint64_t protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result = a3(a1, a2, a3, a4, a5, a6);
  *a7 = result;
  a7[1] = v9;
  a7[2] = v10;
  a7[3] = v11;
  return result;
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString( void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  _OWORD v8[4] = AttributedString.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

{
  void *v7;
  uint64_t v8;
  unint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedString.subscript.modify(v7, v8, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

uint64_t protocol witness for AttributedStringProtocol.subscript.getter in conformance AttributedString@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedString.subscript.getter(a1, a2, a3);
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedString( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString( void *a1, void *a2, uint64_t a3, uint64_t a4))()
{
  unint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedString.subscript.modify(v7, a2, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedString( uint64_t *a1)
{
  return swift_release();
}

double AttributedString.subscript.getter@<D0>(uint64_t a1@<X8>)
{
  __int128 v3 = *(_OWORD **)v1;
  __int128 v4 = *(_OWORD *)(*(void *)v1 + 32LL);
  __int128 v24 = *(_OWORD *)(*(void *)v1 + 16LL);
  __int128 v25 = v4;
  __int128 v26 = v3[3];
  v16[0] = v3;
  v16[1] = BigString.startIndex.getter();
  void v16[2] = v5;
  v16[3] = v6;
  v16[4] = v7;
  void v16[5] = BigString.endIndex.getter();
  *(void *)&__int128 v17 = v8;
  *((void *)&v17 + 1) = v9;
  __int128 v18 = v10;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  __int128 v11 = v3[2];
  __int128 v21 = v3[1];
  __int128 v22 = v11;
  __int128 v23 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v15);
  outlined release of Locale((uint64_t)v16);
  *(void *)a1 = v3;
  __int128 v12 = v18;
  *(_OWORD *)(a1 + 8) = v17;
  *(_OWORD *)(a1 + 24) = v12;
  double result = *(double *)&v19;
  __int128 v14 = v20;
  *(_OWORD *)(a1 + 40) = v19;
  *(_OWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

Swift::UInt protocol witness for Hashable.hash(into:) in conformance AttributedString(uint64_t a1)
{
  return specialized AttributedStringProtocol.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString()
{
  return specialized AttributedStringProtocol.description.getter(*v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString( _OWORD **a1, _OWORD **a2)
{
  return specialized static AttributedString.Guts.characterwiseIsEqual(_:to:)(*a1, *a2);
}

uint64_t AttributedString.append<A>(_:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  __int128 v8 = *(_OWORD *)(*v3 + 32);
  __int128 v20 = *(_OWORD *)(*v3 + 16);
  __int128 v21 = v8;
  __int128 v22 = *(_OWORD *)(v7 + 48);
  *(void *)&__int128 v13 = BigString.endIndex.getter();
  *((void *)&v13 + 1) = v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  uint64_t v16 = v13;
  uint64_t v17 = v9;
  uint64_t v18 = v10;
  uint64_t v19 = v11;
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v13, a1, a2, a3);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)( _OWORD *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = (void *)*v4;
    __int128 v11 = *(_OWORD *)(*v4 + 16);
    __int128 v12 = *(_OWORD *)(*v4 + 48);
    v23[1] = *(_OWORD *)(*v4 + 32);
    v23[2] = v12;
    v23[0] = v11;
    uint64_t v13 = v10[8];
    uint64_t v14 = v10[9];
    uint64_t v15 = v10[10];
    uint64_t v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v23);
    swift_unknownObjectRetain();
    *uint64_t v5 = AttributedString.Guts.init(string:runs:)(v23, v13, v14, v15, v16);
    swift_release();
  }

  uint64_t v17 = (_OWORD *)*v5;
  __int128 v18 = v17[2];
  void v22[4] = v17[1];
  v22[5] = v18;
  void v22[6] = v17[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  __int128 v19 = a1[1];
  v22[0] = *a1;
  v22[1] = v19;
  __int128 v20 = a1[3];
  _OWORD v22[2] = a1[2];
  v22[3] = v20;
  return AttributedString.Guts.replaceSubrange<A>(_:with:)(v22, a2, a3, a4);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v6 = (void *)*v2;
    __int128 v7 = *(_OWORD *)(*v2 + 16);
    __int128 v8 = *(_OWORD *)(*v2 + 48);
    v19[1] = *(_OWORD *)(*v2 + 32);
    void v19[2] = v8;
    v19[0] = v7;
    uint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v11 = v6[10];
    uint64_t v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v19);
    swift_unknownObjectRetain();
    *__int128 v3 = AttributedString.Guts.init(string:runs:)(v19, v9, v10, v11, v12);
    swift_release();
  }

  uint64_t v13 = (_OWORD *)*v3;
  __int128 v14 = v13[2];
  v18[4] = v13[1];
  v18[5] = v14;
  _OWORD v18[6] = v13[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  __int128 v15 = a1[1];
  v18[0] = *a1;
  v18[1] = v15;
  __int128 v16 = a1[3];
  void v18[2] = a1[2];
  v18[3] = v16;
  return specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v18, a2);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(uint64_t a1, _OWORD *a2)
{
  __int128 v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v4 = (void *)*v2;
    __int128 v5 = *(_OWORD *)(*v2 + 16);
    __int128 v6 = *(_OWORD *)(*v2 + 48);
    v26[1] = *(_OWORD *)(*v2 + 32);
    uint64_t v26[2] = v6;
    v26[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v26);
    swift_unknownObjectRetain();
    *__int128 v3 = AttributedString.Guts.init(string:runs:)(v26, v7, v8, v9, v10);
    swift_release();
  }

  uint64_t v11 = *v3;
  __int128 v12 = *(_OWORD *)(*v3 + 32);
  __int128 v23 = *(_OWORD *)(*v3 + 16);
  __int128 v24 = v12;
  __int128 v25 = *(_OWORD *)(v11 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  uint64_t v17 = v13;
  uint64_t v18 = 0LL;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v16[0] = v19;
  v16[1] = v20;
  void v16[2] = v21;
  v16[3] = v22;
  return specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v16, a2);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(_OWORD *a1, uint64_t a2)
{
  __int128 v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v6 = (void *)*v2;
    __int128 v7 = *(_OWORD *)(*v2 + 16);
    __int128 v8 = *(_OWORD *)(*v2 + 48);
    v19[1] = *(_OWORD *)(*v2 + 32);
    void v19[2] = v8;
    v19[0] = v7;
    uint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v11 = v6[10];
    uint64_t v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v19);
    swift_unknownObjectRetain();
    *__int128 v3 = AttributedString.Guts.init(string:runs:)(v19, v9, v10, v11, v12);
    swift_release();
  }

  uint64_t v13 = (_OWORD *)*v3;
  __int128 v14 = v13[2];
  v18[4] = v13[1];
  v18[5] = v14;
  _OWORD v18[6] = v13[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  __int128 v15 = a1[1];
  v18[0] = *a1;
  v18[1] = v15;
  __int128 v16 = a1[3];
  void v18[2] = a1[2];
  v18[3] = v16;
  return specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v18, a2);
}

uint64_t AttributedString.replaceSubrange<A, B>(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, uint64_t a5, uint64_t a6)
{
  __int128 v7 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v8 = (void *)*v6;
    __int128 v9 = *(_OWORD *)(*v6 + 16);
    __int128 v10 = *(_OWORD *)(*v6 + 48);
    v32[1] = *(_OWORD *)(*v6 + 32);
    void v32[2] = v10;
    v32[0] = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v14 = v8[10];
    uint64_t v13 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v32);
    swift_unknownObjectRetain();
    *__int128 v7 = AttributedString.Guts.init(string:runs:)(v32, v11, v12, v14, v13);
    swift_release();
  }

  uint64_t v15 = *v7;
  __int128 v16 = *(_OWORD *)(*v7 + 32);
  __int128 v29 = *(_OWORD *)(*v7 + 16);
  __int128 v30 = v16;
  __int128 v31 = *(_OWORD *)(v15 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  uint64_t v23 = v17;
  uint64_t v24 = 0LL;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v22[0] = v25;
  v22[1] = v26;
  _OWORD v22[2] = v27;
  v22[3] = v28;
  return AttributedString.Guts.replaceSubrange<A>(_:with:)(v22, a2, a4, a6);
}

uint64_t AttributedString.insert<A>(_:at:)(uint64_t a1, void *a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  *(void *)&__int128 v8 = *a2;
  *((void *)&v8 + 1) = v4;
  uint64_t v9 = v5;
  uint64_t v10 = v6;
  uint64_t v11 = v8;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v8, a1, a3, a4);
}

uint64_t AttributedString.removeSubrange<A>(_:)(uint64_t a1)
{
  uint64_t v6 = 0LL;
  MEMORY[0x186E20E78](&v6, 8LL);
  uint64_t v2 = v6;
  type metadata accessor for AttributedString.Guts();
  uint64_t inited = swift_initStackObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __int128 v5 = v8;
    *(_OWORD *)(inited + 16) = v7;
    *(_OWORD *)(inited + 32) = v5;
    *(_OWORD *)(inited + 48) = v9;
    *(void *)(inited + 64) = 0LL;
    *(void *)(inited + 72) = 0LL;
    *(void *)(inited + 80) = 0LL;
    *(void *)(inited + 88) = v2;
    specialized AttributedString.replaceSubrange<A, B>(_:with:)(a1, (_OWORD *)inited);
    swift_setDeallocating();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t static AttributedString.+ infix<A>(_:_:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  __int128 v8 = (_OWORD *)*a1;
  *a5 = *a1;
  __int128 v9 = v8[2];
  __int128 v21 = v8[1];
  __int128 v22 = v9;
  __int128 v23 = v8[3];
  *(void *)&__int128 v14 = BigString.endIndex.getter();
  *((void *)&v14 + 1) = v10;
  uint64_t v15 = v11;
  uint64_t v16 = v12;
  uint64_t v17 = v14;
  uint64_t v18 = v10;
  uint64_t v19 = v11;
  uint64_t v20 = v12;
  swift_retain();
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v14, a2, a3, a4);
}

uint64_t static AttributedString.+= infix<A>(_:_:)(uint64_t *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  __int128 v8 = *(_OWORD *)(*a1 + 32);
  __int128 v20 = *(_OWORD *)(*a1 + 16);
  __int128 v21 = v8;
  __int128 v22 = *(_OWORD *)(v7 + 48);
  *(void *)&__int128 v13 = BigString.endIndex.getter();
  *((void *)&v13 + 1) = v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  uint64_t v16 = v13;
  uint64_t v17 = v9;
  uint64_t v18 = v10;
  uint64_t v19 = v11;
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v13, a2, a3, a4);
}

uint64_t static AttributedString.+= infix(_:_:)(uint64_t *a1, _OWORD **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a1;
  __int128 v4 = *(_OWORD *)(*a1 + 32);
  __int128 v16 = *(_OWORD *)(*a1 + 16);
  __int128 v17 = v4;
  __int128 v18 = *(_OWORD *)(v3 + 48);
  *(void *)&__int128 v9 = BigString.endIndex.getter();
  *((void *)&v9 + 1) = v5;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v9;
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v9, v2);
}

double key path getter for AttributedString.subscript<A>(_:) : <A>AttributedStringA@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v9;
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 40) = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(a1 + 56) = v8;
  *(void *)(a1 + 72) = v2;
  return result;
}

uint64_t key path setter for AttributedString.subscript<A>(_:) : <A>AttributedStringA(uint64_t *a1)
{
  uint64_t v1 = a1[9];
  uint64_t v3 = *a1;
  __int128 v4 = *(_OWORD *)(a1 + 1);
  __int128 v5 = *(_OWORD *)(a1 + 3);
  __int128 v6 = *(_OWORD *)(a1 + 5);
  __int128 v7 = *(_OWORD *)(a1 + 7);
  uint64_t v8 = v1;
  swift_retain();
  return specialized AttributedString.subscript.setter((__int128 *)&v3);
}

uint64_t AttributedString.subscript.setter(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
}

void AttributedString.subscript.modify(void *a1)
{
  uint64_t v2 = v1;
  __int128 v4 = (char *)malloc(0x240uLL);
  *a1 = v4;
  *((void *)v4 + 70) = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v5 = (void *)*v2;
    __int128 v7 = *(_OWORD *)(*v2 + 32);
    __int128 v6 = *(_OWORD *)(*v2 + 48);
    *((_OWORD *)v4 + 20) = *(_OWORD *)(*v2 + 16);
    *((_OWORD *)v4 + 21) = v7;
    *((_OWORD *)v4 + 22) = v6;
    uint64_t v8 = v5[8];
    uint64_t v9 = v5[9];
    uint64_t v11 = v5[10];
    uint64_t v10 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)(v4 + 320));
    swift_unknownObjectRetain();
    *uint64_t v2 = AttributedString.Guts.init(string:runs:)((_OWORD *)v4 + 20, v8, v9, v11, v10);
    swift_release();
  }

  uint64_t v12 = *v2;
  __int128 v14 = *(_OWORD *)(*v2 + 32);
  __int128 v13 = *(_OWORD *)(*v2 + 48);
  *((_OWORD *)v4 + 32) = *(_OWORD *)(*v2 + 16);
  *((_OWORD *)v4 + 33) = v14;
  *((_OWORD *)v4 + 34) = v13;
  uint64_t v15 = BigString.startIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = BigString.endIndex.getter();
  *((void *)v4 + 14) = v12;
  *((void *)v4 + 15) = v15;
  *((void *)v4 + 16) = v17;
  *((void *)v4 + 17) = v19;
  *((void *)v4 + 18) = v21;
  *((void *)v4 + 19) = v22;
  *((void *)v4 + 20) = v23;
  *((void *)v4 + 21) = v24;
  *((void *)v4 + 22) = v25;
  *((void *)v4 + 23) = 0LL;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  __int128 v26 = *((_OWORD *)v4 + 17);
  __int128 v27 = *((_OWORD *)v4 + 18);
  __int128 v28 = *((_OWORD *)v4 + 19);
  __int128 v29 = (_OWORD *)*v2;
  *((_OWORD *)v4 + 12) = *((_OWORD *)v4 + 16);
  *((_OWORD *)v4 + 13) = v26;
  *((_OWORD *)v4 + 14) = v27;
  *((_OWORD *)v4 + 15) = v28;
  __int128 v31 = v29[2];
  __int128 v30 = v29[3];
  *((_OWORD *)v4 + 29) = v29[1];
  *((_OWORD *)v4 + 30) = v31;
  *((_OWORD *)v4 + 31) = v30;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)(v4 + 368));
  outlined release of Locale((uint64_t)v4);
  *((void *)v4 + 14) = v29;
  __int128 v32 = *((_OWORD *)v4 + 4);
  *(_OWORD *)(v4 + 120) = *((_OWORD *)v4 + 3);
  *(_OWORD *)(v4 + 136) = v32;
  __int128 v33 = *((_OWORD *)v4 + 6);
  *(_OWORD *)(v4 + 152) = *((_OWORD *)v4 + 5);
  *(_OWORD *)(v4 + 168) = v33;
  if (one-time initialization token for currentIdentity != -1) {
    swift_once();
  }
  uint64_t v34 = static AttributedString.currentIdentity;
  uint64_t v35 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v35);
  uint64_t v36 = *(void *)(v34 + 16);
  uint64_t v37 = v36 + 1;
  if (__OFADD__(v36, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v38 = v4 + 416;
    *((void *)v4 + 71) = v37;
    *(void *)(v34 + 16) = v37;
    os_unfair_lock_unlock(v35);
    swift_release();
    *((void *)v4 + 23) = v37;
    BigString.init()();
    *((void *)v4 + 32) = 0LL;
    MEMORY[0x186E20E78](v4 + 256, 8LL);
    uint64_t v39 = *((void *)v4 + 32);
    type metadata accessor for AttributedString.Guts();
    uint64_t v40 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      __int128 v41 = v38[1];
      *(_OWORD *)(v40 + 16) = *v38;
      *(_OWORD *)(v40 + 32) = v41;
      *(_OWORD *)(v40 + 48) = v38[2];
      *(void *)(v40 + 64) = 0LL;
      *(void *)(v40 + 72) = 0LL;
      *(void *)(v40 + 80) = 0LL;
      *(void *)(v40 + 88) = v39;
      *uint64_t v2 = v40;
      swift_release();
      return;
    }
  }

  __break(1u);
}

void AttributedString.subscript.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*(void *)(*a1 + 184) == *(void *)(*a1 + 568))
  {
    **(void **)(v1 + 560) = *(void *)(v1 + 112);
    swift_retain();
    swift_release();
    swift_release();
    free((void *)v1);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

uint64_t specialized Rope.extract<A>(from:to:in:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = result;
  if (a3)
  {
    uint64_t v44 = (void *)MEMORY[0x18961AFE8];
    __n128 v7 = 0uLL;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    uint64_t v49 = 0LL;
    uint64_t v50 = (void *)MEMORY[0x18961AFE8];
    if ((result & 0x8000000000000000LL) == 0 && a2 >= result && a5 >= a2)
    {
      if (result != a2)
      {
        int v9 = *(unsigned __int8 *)(a3 + 18);
        uint64_t v10 = (void *)(a3 + 24);
        swift_unknownObjectRetain();
        uint64_t v11 = (unsigned __int16 *)(a3 + 16);
        if (v9) {
          specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(v11, v10, v6, a2, (unsigned __int16 *)&v44);
        }
        else {
          specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)((uint64_t)v11, v10, v6, a2, &v44);
        }
        swift_unknownObjectRelease();
      }

      uint64_t v13 = *((void *)&v48 + 1);
      uint64_t v14 = v48;
      uint64_t v15 = v49;
      __int128 v48 = 0uLL;
      uint64_t v49 = 0LL;
      if (v13)
      {
        if (v14)
        {
          uint64_t v16 = *((void *)&v46 + 1);
          __int128 v17 = v47;
          *((void *)&v46 + 1) = 0LL;
          __int128 v47 = 0uLL;
          if ((void)v17)
          {
            specialized Rope.Builder._appendNow(_:)(v16, v17, *((uint64_t *)&v17 + 1));
            outlined consume of Rope<AttributedString._InternalRun>._Item?(*((uint64_t *)&v46 + 1), v47);
          }

          *((void *)&v46 + 1) = 0LL;
          __int128 v47 = 0uLL;
LABEL_19:
          v7.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v14, v13, v15);
LABEL_28:
          uint64_t v24 = v50;
          while (v24[2])
          {
            double result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) != 0)
            {
              uint64_t v18 = v24[2];
              if (!v18) {
                goto LABEL_40;
              }
            }

            else
            {
              double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
              uint64_t v24 = (void *)result;
              uint64_t v18 = *(void *)(result + 16);
              if (!v18)
              {
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
            }

            uint64_t v19 = v18 - 1;
            uint64_t v20 = &v24[4 * v19];
            uint64_t v21 = v20[4];
            uint64_t v22 = v20[5];
            uint64_t v23 = v20[6];
            v24[2] = v19;
            uint64_t v50 = v24;
            if (v21)
            {
              specialized Rope.Builder._insertBeforeTip(_:)(v21, v22, v23);
              goto LABEL_28;
            }
          }

          uint64_t v25 = *((void *)&v46 + 1);
          uint64_t v27 = *((void *)&v47 + 1);
          uint64_t v26 = v47;
          *((void *)&v46 + 1) = 0LL;
          __int128 v47 = 0uLL;
          if (v26) {
            v7.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v25, v26, v27);
          }
          uint64_t v28 = *((void *)&v45 + 1);
          uint64_t v12 = v45;
          uint64_t v29 = v46;
          uint64_t v43 = 0LL;
          MEMORY[0x186E20E78](&v43, 8LL, v27, v7);
          for (i = v44; i[2]; uint64_t v29 = v39)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              uint64_t v31 = i[2];
              if (!v31) {
                goto LABEL_37;
              }
            }

            else
            {
              unint64_t i = specialized _ArrayBuffer._consumeAndCreateNew()(i);
              uint64_t v31 = i[2];
              if (!v31)
              {
LABEL_37:
                __break(1u);
                break;
              }
            }

            uint64_t v32 = v31 - 1;
            __int128 v33 = &i[4 * v32];
            uint64_t v34 = v33[4];
            uint64_t v35 = v33[5];
            uint64_t v36 = v33[6];
            uint64_t v37 = v33[7];
            i[2] = v32;
            uint64_t v12 = specialized static Rope.join(_:_:)(v34, v35, v36, v37, v12, v28, v29);
            uint64_t v28 = v38;
          }

          uint64_t v44 = i;
          uint64_t v40 = *((void *)&v46 + 1);
          uint64_t v41 = v47;
          __int128 v42 = v48;
          swift_bridgeObjectRelease();
          outlined consume of Rope<AttributedString._InternalRun>._Item?(v40, v41);
          outlined consume of Rope<AttributedString._InternalRun>._Item?(v42, *((uint64_t *)&v42 + 1));
          swift_bridgeObjectRelease();
          return v12;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      uint64_t v14 = *((void *)&v46 + 1);
      uint64_t v15 = *((void *)&v47 + 1);
      uint64_t v13 = v47;
      *((void *)&v46 + 1) = 0LL;
      __int128 v47 = 0uLL;
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_19;
    }

unsigned __int16 *specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)( unsigned __int16 *result, void *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v8 = a2;
  int v9 = result;
  uint64_t v10 = *result;
  uint64_t v11 = a3;
  if (!*result) {
    goto LABEL_15;
  }
  uint64_t v12 = a2[2];
  uint64_t v13 = a3 - v12;
  if (__OFSUB__(a3, v12))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (__OFADD__(v13, 1LL))
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

  if (v13 + 1 < 1)
  {
    uint64_t v10 = 0LL;
    uint64_t v13 = a3;
    BOOL v14 = __OFSUB__(a4, a3);
    uint64_t v15 = a4 - a3;
    if (v14) {
      goto LABEL_33;
    }
  }

  else
  {
    if ((_DWORD)v10 == 1)
    {
      uint64_t v11 = a3 - v12;
LABEL_15:
      if (!v11)
      {
        uint64_t v13 = 0LL;
        BOOL v14 = __OFSUB__(a4, a3);
        uint64_t v15 = a4 - a3;
        if (!v14) {
          goto LABEL_17;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }

uint64_t specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)( uint64_t result, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *(unsigned __int16 *)result;
  uint64_t v11 = a3;
  if (!*(_WORD *)result) {
    goto LABEL_15;
  }
  uint64_t v12 = a3 - *a2;
  if (__OFSUB__(a3, *a2))
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  if (__OFADD__(v12, 1LL))
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }

  if (v12 + 1 < 1)
  {
    uint64_t v10 = 0LL;
    uint64_t v12 = a3;
    BOOL v13 = __OFSUB__(a4, a3);
    uint64_t v14 = a4 - a3;
    if (v13) {
      goto LABEL_38;
    }
  }

  else
  {
    if ((_DWORD)v10 == 1)
    {
      uint64_t v11 = a3 - *a2;
LABEL_15:
      if (!v11)
      {
        uint64_t v12 = 0LL;
        BOOL v13 = __OFSUB__(a4, a3);
        uint64_t v14 = a4 - a3;
        if (!v13) {
          goto LABEL_17;
        }
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }

uint64_t partial apply for closure #1 in AttributedString.replaceAttributes(_:with:)(uint64_t a1)
{
  return specialized AttributedString._AttributeStorage.matches(_:)(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #2 in AttributedString.replaceAttributes(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in AttributedString.replaceAttributes(_:with:)( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(_BYTE *)(v3 + 48));
}

uint64_t specialized AttributedString.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v12 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v12 - v7, a1);
  return AttributedString.subscript.setter((uint64_t)v8, v10, a2, a3);
}

uint64_t specialized AttributedString.subscript.setter(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v7 = (void *)*v1;
    __int128 v8 = *(_OWORD *)(*v1 + 16);
    __int128 v9 = *(_OWORD *)(*v1 + 48);
    v16[1] = *(_OWORD *)(*v1 + 32);
    void v16[2] = v9;
    v16[0] = v8;
    uint64_t v10 = v7[8];
    uint64_t v14 = v7[9];
    uint64_t v11 = v7[10];
    uint64_t v12 = v7[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v16);
    swift_unknownObjectRetain();
    *uint64_t v2 = AttributedString.Guts.init(string:runs:)(v16, v10, v14, v11, v12);
    swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15[0] = v3;
  v15[1] = v4;
  void v15[2] = v6;
  __int128 v15[3] = v5;
  $defer #1 <A>() in AttributedString.subscript.modify(v15, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString.subscript.setter(__int128 *a1)
{
  __int128 v2 = a1[4];
  __int128 v3 = a1[2];
  v9[3] = a1[3];
  v9[4] = v2;
  __int128 v4 = *a1;
  v9[1] = a1[1];
  uint64_t v9[2] = v3;
  v9[0] = v4;
  uint64_t v5 = *v1;
  __int128 v6 = *(_OWORD *)(*v1 + 32);
  v9[5] = *(_OWORD *)(*v1 + 16);
  v9[6] = v6;
  v9[7] = *(_OWORD *)(v5 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  specialized AttributedString.replaceSubrange<A, B>(_:with:)(v8, (uint64_t)v9);
  return outlined release of AttributedString.Runs((uint64_t)v9);
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in AttributedString()
{
  return MEMORY[0x189618028];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in AttributedString()
{
  return MEMORY[0x189618038];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in AttributedString()
{
  return MEMORY[0x189618030];
}

unint64_t instantiation function for generic protocol witness table for AttributedString(uint64_t a1)
{
  *(void *)(a1 + 16) = lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
  unint64_t result = lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_18310EEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized AttributedString.subscript.setter(a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_18310EF24()
{
  return 16LL;
}

__n128 sub_18310EF30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18310EF44()
{
  return 16LL;
}

__n128 sub_18310EF50(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18310EF64()
{
  return 16LL;
}

__n128 sub_18310EF70(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString()
{
  return &type metadata for AttributedString;
}

uint64_t getEnumTagSinglePayload for AttributedString.Index(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Index( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 - 2147483646;
    *(void *)(result + 8) = 0LL;
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Index()
{
  return &type metadata for AttributedString.Index;
}

uint64_t outlined consume of Rope<AttributedString._InternalRun>._Item?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t destroy for Calendar.DatesByRecurring()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByRecurring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v8;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByRecurring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v6 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v6;
  return a1;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for Calendar.DatesByRecurring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByRecurring(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 145)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByRecurring(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0LL;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 145) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 145) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByRecurring()
{
  return &type metadata for Calendar.DatesByRecurring;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.DatesByRecurring.Iterator,  &type metadata for Calendar.DatesByRecurring.Iterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator);
  }

  return result;
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation12_FTSSequenceVACOqd__Isgyrzo_AjBsAG_pAJRszr__lIetMgyrzo_Tp5@<X0>( uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))(a2, 1LL, 1LL, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))(a2, 1LL, 1LL, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K4RunsVABsAG_pANRszr__lIetMggrzo_Tp5@<X0>( uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))(a2, 1LL, 1LL, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5@<X0>( uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))(a2, 1LL, 1LL, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_10Foundation8IndexSetVABsAG_pAJRszr__lIetMggrzo_Tp5@<X0>( uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))(a2, 1LL, 1LL);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t result = swift_allocObject();
  unint64_t v9 = 0LL;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x18961AFE8];
  while (1)
  {
    if (v10 == v9)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v11;
    }

    if (v9 >= *(void *)(a1 + 16)) {
      break;
    }
    uint64_t v12 = *(void *)(a1 + 8 * v9++ + 32);
    if (v12 >= a2 && v12 < a3)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = v4;
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v11 + 16) + 1LL,  1);
      }
      unint64_t v14 = *(void *)(v11 + 16);
      unint64_t v13 = *(void *)(v11 + 24);
      if (v14 >= v13 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v13 > 1,  v14 + 1,  1);
      }
      *(void *)(v11 + 16) = v14 + 1;
      *(void *)(v11 + 8 * v14 + 32) = v12;
      uint64_t v4 = v15;
    }
  }

  __break(1u);
  return result;
}

BOOL specialized Range.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 >= a2 && a1 < a3;
}

void Calendar.DatesByRecurring.Iterator.init(start:matching:range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v13)(uint64_t *__return_ptr, _BYTE *, double *, uint64_t, uint64_t);
  uint64_t v14;
  double v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE __src[288];
  uint64_t v21;
  uint64_t v22;
  double __dst[37];
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 72);
  uint64_t v15 = *(double *)a3;
  uint64_t v16 = *(_BYTE *)(a2 + 18);
  uint64_t v17 = *(_BYTE *)(a3 + 16);
  uint64_t v21 = *(void *)a2;
  uint64_t v19 = v3;
  uint64_t v22 = v3;
  unint64_t v14 = one-time initialization token for cache;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = v4;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v5 = static CalendarCache.cache + 16;
  __int128 v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)__dst);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  LOBYTE(v5) = specialized static Calendar.== infix(_:_:)((uint64_t)&v21, (uint64_t)__dst);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v5 & 1) != 0)
  {
    __int128 v7 = (os_unfair_lock_s *)static CalendarCache.cache;
    swift_retain_n();
    os_unfair_lock_lock(v7 + 15);
    closure #1 in CalendarCache.current.getter(&v21);
    os_unfair_lock_unlock(v7 + 15);
    swift_release_n();
    uint64_t v8 = v22;
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v8 = v19;
  }

  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v18 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9) {
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    double v10 = v15;
    __src[0] = 0x1020A030405uLL >> (8 * v16);
    if (v15 > 1.59271755e13) {
      double v10 = 1.59271755e13;
    }
    double v11 = fmax(v10, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    __dst[0] = v11;
    unint64_t v13 = *(void (**)(uint64_t *__return_ptr, _BYTE *, double *, uint64_t, uint64_t))(v8 + 160);
    swift_unknownObjectRetain();
    v13(&v21, __src, __dst, ObjectType, v8);
    swift_unknownObjectRelease();
  }

  __asm { BR              X9 }

Swift::Void __swiftcall Calendar.DatesByRecurring.Iterator.nextGroup()()
{
  if ((*(_BYTE *)(v0 + 576) & 1) == 0)
  {
    uint64_t v1 = v0;
    next #1 () in Calendar.DatesByRecurring.Iterator.nextGroup()(v0, (uint64_t)&v138);
    if ((BYTE8(v138) & 1) != 0)
    {
LABEL_3:
      *(_BYTE *)(v0 + 576) = 1;
      return;
    }

    while (1)
    {
      uint64_t v2 = *(void *)(v0 + 568);
      BOOL v3 = __OFSUB__(v2, 1LL);
      uint64_t v4 = v2 - 1;
      if (v3) {
        break;
      }
      uint64_t v5 = *(void *)(v0 + 32);
      if (!v5) {
        goto LABEL_87;
      }
      if (v4 == 0x8000000000000000LL && v5 == -1) {
        goto LABEL_88;
      }
      if (!(v4 % v5))
      {
        uint64_t v7 = v138;
        if ((*(_BYTE *)(v0 + 160) & 1) != 0 || *(double *)&v138 >= *(double *)(v0 + 152))
        {
          __int128 v115 = (_BYTE *)(v0 + 576);
          uint64_t v8 = (__int128 *)(v0 + 8);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
          uint64_t v9 = swift_allocObject();
          char v10 = 0;
          uint64_t v11 = 0LL;
          *(_OWORD *)(v9 + 16) = xmmword_183720D90;
          *(void *)(v9 + 32) = v7;
          dates._rawValue = (void *)v9;
          uint64_t v12 = *(unsigned __int8 *)(v0 + 176);
          uint64_t v13 = *(unsigned __int8 *)(v0 + 177);
          int v14 = *(unsigned __int8 *)(v0 + 178);
          int v15 = *(unsigned __int8 *)(v0 + 179);
          int v125 = *(unsigned __int8 *)(v0 + 181);
          int v126 = *(unsigned __int8 *)(v0 + 180);
          int v123 = *(unsigned __int8 *)(v0 + 183);
          int v124 = *(unsigned __int8 *)(v0 + 182);
          int v116 = v15;
          int v117 = v14;
          do
          {
            char v127 = v10;
            int v16 = *((unsigned __int8 *)&outlined read-only object #0 of Calendar.DatesByRecurring.Iterator.nextGroup()
                  + v11
                  + 32);
            if ((_DWORD)v12 != 2 && ((v12 & 1) == 0) != v16)
            {
              char v17 = *(_BYTE *)(v1 + 24);
              char v18 = *(_BYTE *)(v1 + 25);
              char v19 = *(_BYTE *)(v1 + 26);
              char v20 = *(_BYTE *)(v1 + 48);
              uint64_t v21 = *(void *)(v1 + 120);
              __int128 v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v17;
              v131[1] = v18;
              v131[2] = v19;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v118 = *(void *)&v131[8];
              v131[24] = v20;
              __int128 v22 = *(_OWORD *)(v1 + 72);
              __int128 v132 = *(_OWORD *)(v1 + 56);
              __int128 v133 = v22;
              __int128 v23 = *(_OWORD *)(v1 + 104);
              __int128 v134 = *(_OWORD *)(v1 + 88);
              __int128 v135 = v23;
              uint64_t v136 = v21;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)( &dates,  (Foundation::Date)v134,  (Foundation::ComponentAction)&v128);
              uint64_t v5 = v118;
            }

            if ((_DWORD)v13 != 2 && (v13 & 1) == 0 && (v16 & 1) == 0)
            {
              char v24 = *(_BYTE *)(v1 + 24);
              char v25 = *(_BYTE *)(v1 + 25);
              char v26 = *(_BYTE *)(v1 + 26);
              char v27 = *(_BYTE *)(v1 + 48);
              uint64_t v28 = *(void *)(v1 + 120);
              __int128 v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v24;
              v131[1] = v25;
              v131[2] = v26;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v119 = *(void *)&v131[8];
              v131[24] = v27;
              __int128 v29 = *(_OWORD *)(v1 + 72);
              __int128 v132 = *(_OWORD *)(v1 + 56);
              __int128 v133 = v29;
              __int128 v30 = *(_OWORD *)(v1 + 104);
              __int128 v134 = *(_OWORD *)(v1 + 88);
              __int128 v135 = v30;
              uint64_t v136 = v28;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandWeeks(dates:anchor:)(&dates, (Foundation::Date)v134);
              uint64_t v5 = v119;
            }

            if (v14 != 2 && ((v14 & 1) == 0) != v16)
            {
              char v31 = *(_BYTE *)(v1 + 24);
              char v32 = *(_BYTE *)(v1 + 25);
              char v33 = *(_BYTE *)(v1 + 26);
              char v34 = *(_BYTE *)(v1 + 48);
              uint64_t v35 = *(void *)(v1 + 120);
              __int128 v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v31;
              v131[1] = v32;
              v131[2] = v33;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v120 = *(void *)&v131[8];
              v131[24] = v34;
              __int128 v36 = *(_OWORD *)(v1 + 72);
              __int128 v132 = *(_OWORD *)(v1 + 56);
              __int128 v133 = v36;
              __int128 v37 = *(_OWORD *)(v1 + 104);
              __int128 v134 = *(_OWORD *)(v1 + 88);
              __int128 v135 = v37;
              uint64_t v136 = v35;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)( &dates,  (Foundation::Date)v134,  (Foundation::ComponentAction)&v128);
              uint64_t v5 = v120;
            }

            if (v15 != 2 && ((v15 & 1) == 0) != v16)
            {
              char v38 = *(_BYTE *)(v1 + 24);
              char v39 = *(_BYTE *)(v1 + 25);
              char v40 = *(_BYTE *)(v1 + 26);
              char v41 = *(_BYTE *)(v1 + 48);
              uint64_t v42 = *(void *)(v1 + 120);
              __int128 v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v38;
              v131[1] = v39;
              v131[2] = v40;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v121 = *(void *)&v131[8];
              v131[24] = v41;
              __int128 v43 = *(_OWORD *)(v1 + 72);
              __int128 v132 = *(_OWORD *)(v1 + 56);
              __int128 v133 = v43;
              __int128 v44 = *(_OWORD *)(v1 + 104);
              __int128 v134 = *(_OWORD *)(v1 + 88);
              __int128 v135 = v44;
              uint64_t v136 = v42;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)( &dates,  (Foundation::Date)v134,  (Foundation::ComponentAction)&v128);
              uint64_t v5 = v121;
            }

            if (v126 != 2 && ((v126 & 1) == 0) != v16)
            {
              __int128 v45 = *(_OWORD *)(v1 + 88);
              __int128 v142 = *(_OWORD *)(v1 + 72);
              __int128 v143 = v45;
              __int128 v144 = *(_OWORD *)(v1 + 104);
              uint64_t v145 = *(void *)(v1 + 120);
              __int128 v46 = *(_OWORD *)(v1 + 24);
              __int128 v138 = *v8;
              __int128 v139 = v46;
              __int128 v47 = *(_OWORD *)(v1 + 56);
              __int128 v140 = *(_OWORD *)(v1 + 40);
              __int128 v141 = v47;
              if (BYTE2(v46) == 5)
              {
                if (*(void *)(v144 + 16)) {
                  char v48 = 2;
                }
                else {
                  char v48 = 1;
                }
              }

              else
              {
                char v48 = 2;
              }

              uint64_t v49 = v13;
              uint64_t v50 = v12;
              uint64_t v5 = *((void *)&v139 + 1);
              if (v16)
              {
                __int128 v51 = *(_OWORD *)(v1 + 88);
                __int128 v133 = *(_OWORD *)(v1 + 72);
                __int128 v134 = v51;
                __int128 v135 = *(_OWORD *)(v1 + 104);
                uint64_t v136 = *(void *)(v1 + 120);
                __int128 v52 = *(_OWORD *)(v1 + 24);
                __int128 v130 = *v8;
                *(_OWORD *)uint64_t v131 = v52;
                __int128 v53 = *(_OWORD *)(v1 + 56);
                *(_OWORD *)&v131[16] = *(_OWORD *)(v1 + 40);
                __int128 v132 = v53;
                v54._rawValue = (void *)*((void *)&v142 + 1);
                char v129 = v48;
                uint64_t v128 = v7;
                outlined retain of Calendar.RecurrenceRule((uint64_t)&v138);
                uint64_t v56 = (unint64_t)Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( v54,  (Foundation::Calendar::Component)&v129,  v55);
                outlined retain of Calendar.RecurrenceRule((uint64_t)&v138);
                Swift::Int v57 = swift_bridgeObjectRetain();
                uint64_t v58 = (void *)specialized _ArrayProtocol.filter(_:)(v57, v56, &v138);
                outlined release of Calendar.RecurrenceRule((uint64_t)&v138);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined release of Calendar.RecurrenceRule((uint64_t)&v138);
                dates._rawValue = v58;
              }

              else
              {
                if ((BYTE2(v46) & 0xFE) == 4) {
                  char v59 = v48;
                }
                else {
                  char v59 = 0xA030405u >> (8 * BYTE2(v46));
                }
                outlined retain of Calendar.RecurrenceRule((uint64_t)&v138);
                uint64_t v60 = swift_bridgeObjectRetain();
                uint64_t v61 = (void *)specialized Sequence.flatMap<A>(_:)(v60, (uint64_t *)&v138, v48, v59);
                swift_bridgeObjectRelease_n();
                outlined release of Calendar.RecurrenceRule((uint64_t)&v138);
                dates._rawValue = v61;
              }

              uint64_t v12 = v50;
              uint64_t v13 = v49;
              int v15 = v116;
              int v14 = v117;
            }

            if (v125 != 2 && ((v125 & 1) == 0) != v16)
            {
              char v62 = *(_BYTE *)(v1 + 24);
              char v63 = *(_BYTE *)(v1 + 25);
              char v64 = *(_BYTE *)(v1 + 26);
              char v65 = *(_BYTE *)(v1 + 48);
              uint64_t v66 = *(void *)(v1 + 120);
              __int128 v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v62;
              v131[1] = v63;
              v131[2] = v64;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              uint64_t v122 = *(void *)&v131[8];
              v131[24] = v65;
              __int128 v67 = *(_OWORD *)(v1 + 72);
              __int128 v132 = *(_OWORD *)(v1 + 56);
              __int128 v133 = v67;
              __int128 v68 = *(_OWORD *)(v1 + 104);
              __int128 v134 = *(_OWORD *)(v1 + 88);
              __int128 v135 = v68;
              uint64_t v136 = v66;
              char v129 = 4;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)( (Foundation::Calendar::Component)&v129,  &dates,  (Foundation::Date)v134,  (Foundation::ComponentAction)&v128);
              uint64_t v5 = v122;
            }

            if (v124 != 2 && ((v124 & 1) == 0) != v16)
            {
              char v69 = *(_BYTE *)(v1 + 24);
              char v70 = *(_BYTE *)(v1 + 25);
              char v71 = *(_BYTE *)(v1 + 26);
              uint64_t v72 = *(void *)(v1 + 40);
              char v73 = *(_BYTE *)(v1 + 48);
              uint64_t v74 = *(void *)(v1 + 120);
              __int128 v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v69;
              v131[1] = v70;
              v131[2] = v71;
              *(void *)&v131[8] = v5;
              *(void *)&v131[16] = v72;
              v131[24] = v73;
              __int128 v75 = *(_OWORD *)(v1 + 72);
              __int128 v132 = *(_OWORD *)(v1 + 56);
              __int128 v133 = v75;
              __int128 v76 = *(_OWORD *)(v1 + 104);
              __int128 v134 = *(_OWORD *)(v1 + 88);
              __int128 v135 = v76;
              uint64_t v136 = v74;
              char v129 = 5;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)( (Foundation::Calendar::Component)&v129,  &dates,  (Foundation::Date)v134,  (Foundation::ComponentAction)&v128);
            }

            if (v123 != 2 && ((((v123 & 1) == 0) ^ v16) & 1) != 0)
            {
              char v77 = *(_BYTE *)(v1 + 24);
              char v78 = *(_BYTE *)(v1 + 25);
              char v79 = *(_BYTE *)(v1 + 26);
              uint64_t v80 = *(void *)(v1 + 40);
              char v81 = *(_BYTE *)(v1 + 48);
              uint64_t v82 = *(void *)(v1 + 120);
              __int128 v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v77;
              v131[1] = v78;
              v131[2] = v79;
              *(void *)&v131[8] = v5;
              *(void *)&v131[16] = v80;
              v131[24] = v81;
              __int128 v83 = *(_OWORD *)(v1 + 72);
              __int128 v132 = *(_OWORD *)(v1 + 56);
              __int128 v133 = v83;
              __int128 v84 = *(_OWORD *)(v1 + 104);
              __int128 v134 = *(_OWORD *)(v1 + 88);
              __int128 v135 = v84;
              uint64_t v136 = v82;
              char v129 = 6;
              uint64_t v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)( (Foundation::Calendar::Component)&v129,  &dates,  (Foundation::Date)v134,  (Foundation::ComponentAction)&v128);
            }

            char v10 = 1;
            uint64_t v11 = 1u;
          }

          while ((v127 & 1) == 0);
          uint64_t v85 = swift_bridgeObjectRetain();
          unint64_t v86 = (void *)specialized _ArrayProtocol.filter(_:)(v85, (double *)v1);
          swift_bridgeObjectRelease_n();
          dates._rawValue = v86;
          if (!*(_BYTE *)(v1 + 48))
          {
            uint64_t v105 = v86[2];
            if (v105)
            {
              double v106 = *(double *)(v1 + 40);
              swift_bridgeObjectRetain();
              uint64_t v107 = 0LL;
              __int128 v108 = (void *)MEMORY[0x18961AFE8];
              do
              {
                double v111 = *(double *)&v86[v107 + 4];
                if (v106 >= v111)
                {
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  *(void *)&__int128 v130 = v108;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v108[2] + 1LL,  1);
                    __int128 v108 = (void *)v130;
                  }

                  unint64_t v110 = v108[2];
                  unint64_t v109 = v108[3];
                  if (v110 >= v109 >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v109 > 1,  v110 + 1,  1);
                    __int128 v108 = (void *)v130;
                  }

                  v108[2] = v110 + 1;
                  *(double *)&v108[v110 + 4] = v111;
                }

                ++v107;
              }

              while (v105 != v107);
              swift_bridgeObjectRelease_n();
              dates._rawValue = v108;
              if (!v108[2])
              {
                swift_release();
                *__int128 v115 = 1;
                return;
              }
            }

            else
            {
              swift_bridgeObjectRelease();
              dates._rawValue = (void *)MEMORY[0x18961AFE8];
            }
          }

          specialized MutableCollection<>.sort(by:)(&dates);
          uint64_t v87 = *(void *)(v1 + 120);
          int64_t v88 = *(void *)(v87 + 16);
          if (v88)
          {
            *(void *)&__int128 v130 = MEMORY[0x18961AFE8];
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88, 0);
            uint64_t v89 = 0LL;
            uint64_t v90 = v130;
            rawValue = dates._rawValue;
            do
            {
              uint64_t v92 = *(void *)(v87 + 8 * v89 + 32);
              if (v92 < 0) {
                uint64_t v93 = rawValue[2] + v92;
              }
              else {
                uint64_t v93 = v92 - 1;
              }
              *(void *)&__int128 v130 = v90;
              unint64_t v95 = *(void *)(v90 + 16);
              unint64_t v94 = *(void *)(v90 + 24);
              if (v95 >= v94 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v94 > 1,  v95 + 1,  1);
                uint64_t v90 = v130;
              }

              ++v89;
              *(void *)(v90 + 16) = v95 + 1;
              *(void *)(v90 + 8 * v95 + 32) = v93;
            }

            while (v88 != v89);
            swift_bridgeObjectRelease();
            unint64_t v96 = dates._rawValue;
            uint64_t v97 = specialized _ArrayProtocol.filter(_:)(v90, 0LL, *((void *)dates._rawValue + 2));
            int64_t v98 = *(void *)(v97 + 16);
            if (v98)
            {
              *(void *)&__int128 v130 = MEMORY[0x18961AFE8];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98, 0);
              uint64_t v99 = 0LL;
              uint64_t v100 = (void *)v130;
              while (1)
              {
                unint64_t v101 = *(void *)(v97 + 8 * v99 + 32);
                if ((v101 & 0x8000000000000000LL) != 0) {
                  goto LABEL_89;
                }
                if (v101 >= v96[2]) {
                  goto LABEL_90;
                }
                uint64_t v102 = v96[v101 + 4];
                *(void *)&__int128 v130 = v100;
                unint64_t v104 = v100[2];
                unint64_t v103 = v100[3];
                if (v104 >= v103 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v103 > 1,  v104 + 1,  1);
                  uint64_t v100 = (void *)v130;
                }

                ++v99;
                void v100[2] = v104 + 1;
                v100[v104 + 4] = v102;
                if (v98 == v99)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_83;
                }
              }
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v100 = (void *)MEMORY[0x18961AFE8];
LABEL_83:
            dates._rawValue = v100;
          }

          uint64_t v113 = swift_bridgeObjectRetain();
          uint64_t v114 = specialized Sequence.reversed()(v113);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v1 + 600) = v114;
          return;
        }
      }

      next #1 () in Calendar.DatesByRecurring.Iterator.nextGroup()(v0, (uint64_t)&v138);
      if ((BYTE8(v138) & 1) != 0) {
        goto LABEL_3;
      }
    }

    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
  }

  __break(1u);
}

uint64_t next #1 () in Calendar.DatesByRecurring.Iterator.nextGroup()@<X0>( uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  if (*(void *)(result + 568))
  {
    uint64_t v4 = (unsigned __int8 *)(result + 547);
    double v5 = 0.0;
    if ((*(_BYTE *)(result + 560) & 1) != 0)
    {
      char v6 = 1;
    }

    else
    {
      uint64_t v7 = *(void *)(result + 184);
      BOOL v8 = __OFADD__(v7, 1LL);
      uint64_t v9 = v7 + 1;
      if (v8) {
        goto LABEL_19;
      }
      double v10 = *(double *)(result + 208);
      while (1)
      {
        *(void *)(v2 + 184) = v9;
        __int128 v19 = *(_OWORD *)(v2 + 248);
        id v25 = *(id *)(v2 + 240);
        memcpy(__dst, (const void *)(v2 + 264), 0x11AuLL);
        memcpy(v24, (const void *)(v2 + 264), 0x11AuLL);
        unsigned __int8 v23 = *(_BYTE *)(v2 + 546);
        unsigned __int8 v22 = *v4;
        unsigned __int8 v21 = *(_BYTE *)(v2 + 548);
        double v20 = v10;
        char v11 = *(_BYTE *)(v2 + 200);
        uint64_t v17 = *(void *)(v2 + 192);
        char v18 = v11;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)( (double *)&v25,  v24,  &v23,  &v22,  &v21,  &v20,  (uint64_t)&v17,  (uint64_t)&v26);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t result = swift_unknownObjectRelease();
        double v12 = *(double *)&v26;
        int v13 = BYTE8(v26);
        double v10 = v27;
        *(double *)(v2 + 208) = v27;
        if (v13 != 2) {
          break;
        }
        uint64_t v14 = *(void *)(v2 + 184);
        if (v14 >= *(void *)(v2 + 552))
        {
          *(void *)&__int128 v19 = *(void *)(v2 + 240);
          __int128 v26 = *(_OWORD *)(v2 + 248);
          memcpy(v24, (const void *)(v2 + 264), 0x11AuLL);
          LOBYTE(v17) = *(_BYTE *)(v2 + 548);
          LOBYTE(v25) = *(_BYTE *)(v2 + 546);
          LOBYTE(v20) = *v4;
          uint64_t result = _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( (uint64_t *)&v19,  (uint64_t *)&v26,  v24,  (unsigned __int8 *)&v17,  (unsigned __int8 *)&v25,  (unsigned __int8 *)&v20);
          char v6 = 1;
          *(_BYTE *)(v2 + 560) = 1;
          goto LABEL_16;
        }

        uint64_t v9 = v14 + 1;
      }

      if ((*(_BYTE *)(v2 + 232) & 1) != 0 || *(double *)(v2 + 216) <= v12 && *(double *)(v2 + 224) > v12)
      {
        char v6 = 0;
        *(double *)(v2 + 192) = v12;
        *(_BYTE *)(v2 + 200) = 0;
        double v5 = v12;
      }

      else
      {
        char v6 = 1;
        *(_BYTE *)(v2 + 560) = 1;
      }
    }
  }

  else
  {
    char v6 = 0;
    double v5 = *(double *)result;
  }

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)( Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  void (*v25)(void *__return_ptr, void *, double *, uint64_t, void);
  void (*v26)(void *__return_ptr, char *, double *, uint64_t, void);
  double v27;
  void *v28;
  uint64_t v29;
  char v30;
  double v31;
  void __src[36];
  void v33[2];
  char v34;
  __int128 v35[6];
  __int128 v36;
  uint64_t v37;
  void __dst[36];
  uint64_t v39;
  char v5 = v3;
  double v7 = *(double *)action;
  __int128 v8 = *(_OWORD *)(v4 + 80);
  _OWORD v35[4] = *(_OWORD *)(v4 + 64);
  v35[5] = v8;
  __int128 v36 = *(_OWORD *)(v4 + 96);
  __int128 v37 = *(void *)(v4 + 112);
  __int128 v9 = *(_OWORD *)(v4 + 16);
  v35[0] = *(_OWORD *)v4;
  v35[1] = v9;
  __int128 v10 = *(_OWORD *)(v4 + 48);
  v35[2] = *(_OWORD *)(v4 + 32);
  v35[3] = v10;
  v33[0] = 0LL;
  v33[1] = 0LL;
  char v34 = 1;
  char v39 = v36;
  int64_t v11 = *(void *)(v36 + 16);
  uint64_t v12 = MEMORY[0x18961AFE8];
  if (v11)
  {
    __dst[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v12 = __dst[0];
    int v13 = (_BYTE *)(v36 + 40);
    while (1)
    {
      uint64_t v14 = *((void *)v13 - 1);
      char v15 = *v13;
      if (v14 <= 0)
      {
        specialized getter of monthRange #1 in Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)( (uint64_t)v33,  v35,  v7);
        BOOL v17 = __OFADD__(v16, v14);
        v14 += v16;
        if (v17) {
          break;
        }
      }

      __dst[0] = v12;
      unint64_t v19 = *(void *)(v12 + 16);
      unint64_t v18 = *(void *)(v12 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v12 = __dst[0];
      }

      v13 += 16;
      *(void *)(v12 + 16) = v19 + 1;
      uint64_t v20 = v12 + 16 * v19;
      *(void *)(v20 + 32) = v14;
      *(_BYTE *)(v20 + 40) = v15;
      if (!--v11)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v39);
        goto LABEL_9;
      }
    }

    __break(1u);
    goto LABEL_17;
  }

Swift::Void __swiftcall Calendar.RecurrenceRule._expandWeeks(dates:anchor:)( Swift::OpaquePointer *dates, Foundation::Date anchor)
{
  void (*v13)(void *__return_ptr, double *, void *, uint64_t, void);
  double v14;
  double v15;
  uint64_t (*v16)(void *, double *, void *, uint64_t, void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  double v22;
  void (*v23)(void *__return_ptr, uint64_t *, double *, uint64_t, void);
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, void);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void v50[23];
  char v51;
  uint64_t v52;
  void v53[2];
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _OWORD v58[6];
  __int128 v59;
  uint64_t v60;
  double v61;
  _OWORD v62[2];
  double v5 = *v2;
  __int128 v6 = v3[5];
  v58[4] = v3[4];
  v58[5] = v6;
  char v59 = v3[6];
  uint64_t v60 = *((void *)v3 + 14);
  __int128 v7 = v3[1];
  __int128 v8 = *v3;
  v58[0] = *v3;
  v58[1] = v7;
  __int128 v9 = v3[3];
  v58[2] = v3[2];
  v58[3] = v9;
  LOBYTE(v61) = 1;
  if (v5 > 1.59271755e13) {
    double v5 = 1.59271755e13;
  }
  double v10 = fmax(v5, -2.11845067e11);
  v62[0] = v8;
  __int128 v11 = v8;
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t v50 = v10;
  int v13 = *(void (**)(void *__return_ptr, double *, void *, uint64_t, void))(*((void *)&v11 + 1) + 160LL);
  outlined retain of Locale((uint64_t)v62);
  v13(v53, &v61, v50, ObjectType, *((void *)&v11 + 1));
  outlined release of Locale((uint64_t)v62);
  if ((v54 & 1) != 0) {
    return;
  }
  char v15 = *(double *)v53;
  uint64_t v14 = *(double *)&v53[1];
  LOBYTE(v50[0]) = 11;
  LOBYTE(v61) = 1;
  *(double *)__int128 v53 = v10;
  uint64_t v16 = *(uint64_t (**)(void *, double *, void *, uint64_t, void))(*((void *)&v11 + 1) + 144LL);
  outlined retain of Locale((uint64_t)v62);
  BOOL v17 = v16(v50, &v61, v53, ObjectType, *((void *)&v11 + 1));
  unint64_t v19 = v18;
  __int128 v21 = v20;
  outlined release of Locale((uint64_t)v62);
  if ((v21 & 1) != 0) {
    return;
  }
  Swift::Int v57 = 128LL;
  if (v15 <= 1.59271755e13) {
    double v22 = v15;
  }
  else {
    double v22 = 1.59271755e13;
  }
  v50[0] = fmax(v22, -2.11845067e11);
  double v23 = *(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, void))(*((void *)&v11 + 1) + 192LL);
  v23(v53, &v57, (double *)v50, ObjectType, *((void *)&v11 + 1));
  outlined release of DateComponents((uint64_t)v53);
  if (v56) {
    char v24 = 0LL;
  }
  else {
    char v24 = v55;
  }
  id v25 = v14 + v15 + -0.01;
  __int128 v52 = 128LL;
  if (v25 > 1.59271755e13) {
    id v25 = 1.59271755e13;
  }
  uint64_t v61 = fmax(v25, -2.11845067e11);
  v23(v50, &v52, &v61, ObjectType, *((void *)&v11 + 1));
  outlined release of DateComponents((uint64_t)v50);
  if (v51) {
    __int128 v26 = 0LL;
  }
  else {
    __int128 v26 = v50[22];
  }
  double v27 = *(uint64_t (**)(uint64_t, void))(*((void *)&v11 + 1) + 72LL);
  outlined retain of Locale((uint64_t)v62);
  uint64_t v28 = v27(ObjectType, *((void *)&v11 + 1));
  outlined release of Locale((uint64_t)v62);
  __int128 v29 = *(uint64_t (**)(uint64_t, void))(*((void *)&v11 + 1) + 56LL);
  outlined retain of Locale((uint64_t)v62);
  __int128 v30 = v29(ObjectType, *((void *)&v11 + 1));
  outlined release of Locale((uint64_t)v62);
  char v31 = 7 - v24;
  if (__OFSUB__(7LL, v24)) {
    goto LABEL_41;
  }
  char v32 = v31 + v30;
  if (__OFADD__(v31, v30))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  char v33 = 7 - v26;
  if (__OFSUB__(7LL, v26))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  char v34 = __OFADD__(v33, v30);
  uint64_t v35 = v33 + v30;
  if (v34)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  if (v32 < v28)
  {
    char v34 = __OFADD__(v17++, 1LL);
    if (v34) {
      goto LABEL_45;
    }
  }

  if (v35 < v28)
  {
    char v34 = __OFSUB__(v19--, 1LL);
    if (!v34) {
      goto LABEL_27;
    }
    __break(1u);
  }

  char v34 = __OFSUB__(v19, 2LL);
  v19 -= 2LL;
  if (v34)
  {
LABEL_46:
    __break(1u);
    return;
  }

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)( Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  void (*v14)(void *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t);
  void (*v15)(_OWORD *__return_ptr, void *, double *, uint64_t, uint64_t);
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  Swift::OpaquePointer *v33;
  _OWORD v34[18];
  double v35;
  char v36;
  void *v37;
  _OWORD __dst[18];
  void __src[36];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void v48[3];
  double v6 = *(double *)action;
  __int128 v7 = *(_OWORD *)(v4 + 80);
  __int128 v44 = *(_OWORD *)(v4 + 64);
  __int128 v45 = v7;
  __int128 v46 = *(_OWORD *)(v4 + 96);
  __int128 v47 = *(void *)(v4 + 112);
  __int128 v8 = *(_OWORD *)(v4 + 16);
  char v40 = *(_OWORD *)v4;
  char v41 = v8;
  __int128 v9 = *(_OWORD *)(v4 + 48);
  uint64_t v42 = *(_OWORD *)(v4 + 32);
  __int128 v43 = v9;
  if ((v3 & 1) != 0)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)&v40);
    __int128 v30 = swift_bridgeObjectRetain();
    char v31 = (void *)specialized _ArrayProtocol.filter(_:)( v30,  (uint64_t)&v40,  (uint64_t (*)(uint64_t *, uint64_t))closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:));
    outlined release of Calendar.RecurrenceRule((uint64_t)&v40);
    swift_bridgeObjectRelease();
LABEL_25:
    dates->_rawValue = v31;
    return;
  }

  uint64_t v10 = *((void *)&v40 + 1);
  *(void *)&__dst[0] = 112LL;
  double v11 = 1.59271755e13;
  if (v6 <= 1.59271755e13) {
    double v11 = v6;
  }
  double v12 = fmax(v11, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)char v34 = v12;
  uint64_t v14 = *(void (**)(void *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))(v10 + 192);
  swift_unknownObjectRetain();
  v14(__src, __dst, v34, ObjectType, v10);
  swift_unknownObjectRelease();
  memcpy(__dst, __src, 0x11AuLL);
  __int128 v37 = (void *)MEMORY[0x18961AFE8];
  LOBYTE(v48[0]) = 0x1020A030405uLL >> (8 * BYTE2(v41));
  uint64_t v35 = v12;
  char v15 = *(void (**)(_OWORD *__return_ptr, void *, double *, uint64_t, uint64_t))(v10 + 160);
  swift_unknownObjectRetain();
  v15(v34, v48, &v35, ObjectType, v10);
  swift_unknownObjectRelease();
  if ((v34[1] & 1) != 0) {
    goto LABEL_28;
  }
  uint64_t v16 = v34[0];
  uint64_t v35 = 0.0;
  __int128 v36 = 1;
  v48[0] = *((void *)&v45 + 1);
  BOOL v17 = *(void *)(*((void *)&v45 + 1) + 16LL);
  if (!v17)
  {
LABEL_24:
    outlined retain of Calendar.RecurrenceRule((uint64_t)&v40);
    char v32 = swift_bridgeObjectRetain();
    char v31 = (void *)specialized Sequence.flatMap<A>(_:)( v32,  (uint64_t *)&v37,  (uint64_t)&v40,  *(double *)&v16,  *((double *)&v16 + 1));
    outlined release of Calendar.RecurrenceRule((uint64_t)&v40);
    outlined release of DateComponents((uint64_t)__dst);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_25;
  }

  char v33 = dates;
  unint64_t v18 = (uint64_t *)(*((void *)&v45 + 1) + 32LL);
  swift_bridgeObjectRetain();
  unint64_t v19 = (void *)MEMORY[0x18961AFE8];
  while (1)
  {
    __int128 v21 = *v18++;
    uint64_t v20 = v21;
    if (v21 >= 1)
    {
      *(void *)&uint64_t v34[2] = *(void *)&__dst[2];
      BYTE8(v34[2]) = BYTE8(__dst[2]);
      *(void *)&v34[3] = *(void *)&__dst[3];
      BYTE8(v34[3]) = BYTE8(__dst[3]);
      *(void *)&v34[4] = *(void *)&__dst[4];
      BYTE8(v34[4]) = BYTE8(__dst[4]);
      *(void *)&v34[5] = *(void *)&__dst[5];
      BYTE8(v34[5]) = BYTE8(__dst[5]);
      if (v20 == 0x7FFFFFFFFFFFFFFFLL) {
        double v22 = 0LL;
      }
      else {
        double v22 = v20;
      }
      *(void *)&v34[6] = v22;
      BYTE8(v34[6]) = v20 == 0x7FFFFFFFFFFFFFFFLL;
      *(void *)&v34[7] = *(void *)&__dst[7];
      BYTE8(v34[7]) = BYTE8(__dst[7]);
      *(void *)&v34[8] = *(void *)&__dst[8];
      BYTE8(v34[8]) = BYTE8(__dst[8]);
      *(void *)&v34[9] = *(void *)&__dst[9];
      BYTE8(v34[9]) = BYTE8(__dst[9]);
      *(void *)&v34[10] = *(void *)&__dst[10];
      BYTE8(v34[10]) = BYTE8(__dst[10]);
      *(void *)&v34[11] = *(void *)&__dst[11];
      BYTE8(v34[11]) = BYTE8(__dst[11]);
      *(void *)&v34[12] = *(void *)&__dst[12];
      BYTE8(v34[12]) = BYTE8(__dst[12]);
      *(void *)&v34[13] = *(void *)&__dst[13];
      BYTE8(v34[13]) = BYTE8(__dst[13]);
      *(void *)&v34[14] = *(void *)&__dst[14];
      BYTE8(v34[14]) = BYTE8(__dst[14]);
      *(void *)&v34[15] = *(void *)&__dst[15];
      BYTE8(v34[15]) = BYTE8(__dst[15]);
      BYTE8(v34[16]) = BYTE8(__dst[16]);
      *(void *)&v34[16] = *(void *)&__dst[16];
      *(void *)&v34[17] = *(void *)&__dst[17];
      WORD4(v34[17]) = WORD4(__dst[17]);
      v34[0] = __dst[0];
      v34[1] = __dst[1];
      outlined retain of DateComponents((uint64_t)__dst);
      goto LABEL_17;
    }

    outlined retain of DateComponents((uint64_t)__dst);
    double v23 = specialized getter of daysInYear #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)( &v35,  &v40,  v6);
    char v24 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    id v25 = __OFADD__(v24, v20);
    __int128 v26 = v24 + v20;
    if (v25) {
      goto LABEL_27;
    }
    *(void *)&uint64_t v34[2] = *(void *)&__dst[2];
    BYTE8(v34[2]) = BYTE8(__dst[2]);
    *(void *)&v34[3] = *(void *)&__dst[3];
    BYTE8(v34[3]) = BYTE8(__dst[3]);
    *(void *)&v34[4] = *(void *)&__dst[4];
    BYTE8(v34[4]) = BYTE8(__dst[4]);
    *(void *)&v34[5] = *(void *)&__dst[5];
    BYTE8(v34[5]) = BYTE8(__dst[5]);
    double v27 = v26 == 0x7FFFFFFFFFFFFFFFLL;
    if (v26 == 0x7FFFFFFFFFFFFFFFLL) {
      __int128 v26 = 0LL;
    }
    *(void *)&v34[6] = v26;
    BYTE8(v34[6]) = v27;
    *(void *)&v34[7] = *(void *)&__dst[7];
    BYTE8(v34[7]) = BYTE8(__dst[7]);
    *(void *)&v34[8] = *(void *)&__dst[8];
    BYTE8(v34[8]) = BYTE8(__dst[8]);
    *(void *)&v34[9] = *(void *)&__dst[9];
    BYTE8(v34[9]) = BYTE8(__dst[9]);
    *(void *)&v34[10] = *(void *)&__dst[10];
    BYTE8(v34[10]) = BYTE8(__dst[10]);
    *(void *)&v34[11] = *(void *)&__dst[11];
    BYTE8(v34[11]) = BYTE8(__dst[11]);
    *(void *)&v34[12] = *(void *)&__dst[12];
    BYTE8(v34[12]) = BYTE8(__dst[12]);
    *(void *)&v34[13] = *(void *)&__dst[13];
    BYTE8(v34[13]) = BYTE8(__dst[13]);
    *(void *)&v34[14] = *(void *)&__dst[14];
    BYTE8(v34[14]) = BYTE8(__dst[14]);
    *(void *)&v34[15] = *(void *)&__dst[15];
    BYTE8(v34[15]) = BYTE8(__dst[15]);
    BYTE8(v34[16]) = BYTE8(__dst[16]);
    *(void *)&v34[16] = *(void *)&__dst[16];
    *(void *)&v34[17] = *(void *)&__dst[17];
    WORD4(v34[17]) = WORD4(__dst[17]);
    v34[0] = __dst[0];
    v34[1] = __dst[1];
LABEL_17:
    outlined retain of DateComponents((uint64_t)v34);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
    }
    __int128 v29 = v19[2];
    uint64_t v28 = v19[3];
    if (v29 >= v28 >> 1) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v28 > 1),  v29 + 1,  1,  v19);
    }
    void v19[2] = v29 + 1;
    memcpy(&v19[36 * v29 + 4], v34, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v34);
    if (!--v17)
    {
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)v48);
      __int128 v37 = v19;
      Swift::OpaquePointer dates = v33;
      goto LABEL_24;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)( Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  void (*v13)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void);
  uint64_t (*v14)(void *, void *, _OWORD *, uint64_t, void);
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  void (*v19)(_OWORD *__return_ptr, void *, void *, uint64_t, void);
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::OpaquePointer *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void *, char *, _OWORD *, uint64_t, void);
  int64_t v78;
  void v79[2];
  _OWORD v80[18];
  char v81;
  void *v82;
  _OWORD __dst[18];
  _OWORD __src[18];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  void v93[2];
  double v6 = *(double *)action;
  __int128 v7 = v4[5];
  uint64_t v89 = v4[4];
  uint64_t v90 = v7;
  uint64_t v91 = v4[6];
  uint64_t v92 = *((void *)v4 + 14);
  __int128 v8 = v4[1];
  uint64_t v85 = *v4;
  unint64_t v86 = v8;
  __int128 v9 = v4[3];
  uint64_t v87 = v4[2];
  int64_t v88 = v9;
  if ((v3 & 1) != 0)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)&v85);
    __int128 v53 = swift_bridgeObjectRetain();
    Swift::OpaquePointer v54 = (void *)specialized _ArrayProtocol.filter(_:)( v53,  (uint64_t)&v85,  (uint64_t (*)(uint64_t *, uint64_t))closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:));
    outlined release of Calendar.RecurrenceRule((uint64_t)&v85);
    swift_bridgeObjectRelease();
    dates->_rawValue = v54;
    return;
  }

  __int128 v10 = v85;
  *(void *)&__dst[0] = 120LL;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v11 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t v80 = v11;
  int v13 = *(void (**)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void))(*((void *)&v85 + 1) + 192LL);
  swift_unknownObjectRetain();
  v13(__src, __dst, v80, ObjectType, *((void *)&v85 + 1));
  char v71 = dates;
  swift_unknownObjectRelease();
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t v82 = (void *)MEMORY[0x18961AFE8];
  if (BYTE2(v86) != 5)
  {
    v93[0] = v90;
    Foundation::Date v55 = *(void *)(v90 + 16);
    if (!v55)
    {
LABEL_79:
      outlined retain of Calendar.RecurrenceRule((uint64_t)&v85);
      char v69 = swift_bridgeObjectRetain();
      char v70 = specialized Sequence.flatMap<A>(_:)(v69, (uint64_t)&v85, (uint64_t *)&v82);
      outlined release of Calendar.RecurrenceRule((uint64_t)&v85);
      outlined release of DateComponents((uint64_t)__dst);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v71->_rawValue = (void *)v70;
      return;
    }

    char v77 = *(void (**)(void *, char *, _OWORD *, uint64_t, void))(*((void *)&v10 + 1) + 144LL);
    uint64_t v56 = (uint64_t *)(v90 + 32);
    swift_bridgeObjectRetain();
    Swift::Int v57 = v55 - 1;
    uint64_t v58 = (void *)MEMORY[0x18961AFE8];
    while (1)
    {
      uint64_t v60 = *v56++;
      char v59 = v60;
      LOBYTE(v79[0]) = 3;
      char v81 = 2;
      *(double *)uint64_t v80 = v11;
      swift_unknownObjectRetain();
      v77(v79, &v81, v80, ObjectType, *((void *)&v10 + 1));
      char v62 = v61;
      char v64 = v63;
      swift_unknownObjectRelease();
      if ((v64 & 1) != 0) {
        break;
      }
      if (__OFSUB__(v62, 1LL)) {
        goto LABEL_84;
      }
      if (v59 < 1)
      {
        if (__OFADD__(v62 - 1, 1LL)) {
          goto LABEL_86;
        }
        uint64_t v66 = v62 + v59;
        if (__OFADD__(v62, v59))
        {
LABEL_87:
          __break(1u);
          break;
        }

        char v65 = v66 == 0x7FFFFFFFFFFFFFFFLL;
        if (v66 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v66 = 0LL;
        }
      }

      else
      {
        char v65 = v59 == 0x7FFFFFFFFFFFFFFFLL;
        if (v59 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v66 = 0LL;
        }
        else {
          uint64_t v66 = v59;
        }
      }

      *(void *)&v80[2] = *(void *)&__dst[2];
      BYTE8(v80[2]) = BYTE8(__dst[2]);
      *(void *)&v80[3] = *(void *)&__dst[3];
      BYTE8(v80[3]) = BYTE8(__dst[3]);
      *(void *)&v80[4] = *(void *)&__dst[4];
      BYTE8(v80[4]) = BYTE8(__dst[4]);
      *(void *)&v80[5] = v66;
      BYTE8(v80[5]) = v65;
      *(void *)&v80[6] = *(void *)&__dst[6];
      BYTE8(v80[6]) = BYTE8(__dst[6]);
      *(void *)&v80[7] = *(void *)&__dst[7];
      BYTE8(v80[7]) = BYTE8(__dst[7]);
      *(void *)&v80[8] = *(void *)&__dst[8];
      BYTE8(v80[8]) = BYTE8(__dst[8]);
      *(void *)&v80[9] = *(void *)&__dst[9];
      BYTE8(v80[9]) = BYTE8(__dst[9]);
      *(void *)&v80[10] = *(void *)&__dst[10];
      BYTE8(v80[10]) = BYTE8(__dst[10]);
      *(void *)&v80[11] = *(void *)&__dst[11];
      BYTE8(v80[11]) = BYTE8(__dst[11]);
      *(void *)&v80[12] = *(void *)&__dst[12];
      BYTE8(v80[12]) = BYTE8(__dst[12]);
      *(void *)&v80[13] = *(void *)&__dst[13];
      BYTE8(v80[13]) = BYTE8(__dst[13]);
      *(void *)&v80[14] = *(void *)&__dst[14];
      BYTE8(v80[14]) = BYTE8(__dst[14]);
      *(void *)&v80[15] = *(void *)&__dst[15];
      BYTE8(v80[15]) = BYTE8(__dst[15]);
      BYTE8(v80[16]) = BYTE8(__dst[16]);
      *(void *)&v80[16] = *(void *)&__dst[16];
      *(void *)&v80[17] = *(void *)&__dst[17];
      WORD4(v80[17]) = WORD4(__dst[17]);
      v80[0] = __dst[0];
      v80[1] = __dst[1];
      outlined retain of DateComponents((uint64_t)__dst);
      outlined retain of DateComponents((uint64_t)v80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v58[2] + 1LL,  1,  v58);
      }
      __int128 v68 = v58[2];
      __int128 v67 = v58[3];
      if (v68 >= v67 >> 1) {
        uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v67 > 1),  v68 + 1,  1,  v58);
      }
      v58[2] = v68 + 1;
      memcpy(&v58[36 * v68 + 4], v80, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v80);
      if (!v57)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v93);
        uint64_t v82 = v58;
        goto LABEL_79;
      }

      --v57;
    }

    __break(1u);
    goto LABEL_89;
  }

  LOBYTE(v93[0]) = 2;
  LOBYTE(v79[0]) = 1;
  *(double *)uint64_t v80 = v11;
  uint64_t v14 = *(uint64_t (**)(void *, void *, _OWORD *, uint64_t, void))(*((void *)&v10 + 1) + 144LL);
  swift_unknownObjectRetain();
  char v15 = v14(v93, v79, v80, ObjectType, *((void *)&v10 + 1));
  __int128 v75 = v16;
  __int128 v76 = v15;
  unint64_t v18 = v17;
  swift_unknownObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  LOBYTE(v79[0]) = 1;
  *(double *)uint64_t v93 = v11;
  unint64_t v19 = *(void (**)(_OWORD *__return_ptr, void *, void *, uint64_t, void))(*((void *)&v10 + 1) + 160LL);
  swift_unknownObjectRetain();
  v19(v80, v79, v93, ObjectType, *((void *)&v10 + 1));
  swift_unknownObjectRelease();
  if ((v80[1] & 1) == 0)
  {
    uint64_t v20 = *(double *)v80;
    v79[0] = 0LL;
    __int128 v21 = v90;
    v93[0] = v90;
    double v22 = *(void *)(v90 + 16);
    if (v22)
    {
      double v23 = v90 + 32;
      swift_bridgeObjectRetain();
      char v24 = 0LL;
      id v25 = (void *)MEMORY[0x18961AFE8];
      char v73 = v22;
      uint64_t v74 = v21;
      uint64_t v72 = v21 + 32;
      do
      {
        if (v24 >= *(void *)(v21 + 16)) {
          goto LABEL_85;
        }
        __int128 v26 = *(void *)(v23 + 8 * v24);
        if (v26 < 1)
        {
          __int128 v30 = specialized getter of monthsToDaysInMonth #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)( v79,  v76,  v75,  (uint64_t *)&v85,  v20);
          char v31 = v30;
          char v32 = 0LL;
          char v33 = v30 + 64;
          char v34 = 1LL << *(_BYTE *)(v30 + 32);
          if (v34 < 64) {
            uint64_t v35 = ~(-1LL << v34);
          }
          else {
            uint64_t v35 = -1LL;
          }
          __int128 v36 = v35 & *(void *)(v30 + 64);
          char v78 = (unint64_t)(v34 + 63) >> 6;
          if (v36)
          {
LABEL_25:
            __int128 v37 = __clz(__rbit64(v36));
            v36 &= v36 - 1;
            char v38 = v37 | (v32 << 6);
            goto LABEL_40;
          }

          while (1)
          {
            char v39 = v32 + 1;
            if (__OFADD__(v32, 1LL)) {
              goto LABEL_82;
            }
            if (v39 >= v78) {
              goto LABEL_9;
            }
            char v40 = *(void *)(v33 + 8 * v39);
            ++v32;
            if (!v40)
            {
              char v32 = v39 + 1;
              if (v39 + 1 >= v78) {
                goto LABEL_9;
              }
              char v40 = *(void *)(v33 + 8 * v32);
              if (!v40)
              {
                char v32 = v39 + 2;
                if (v39 + 2 >= v78) {
                  goto LABEL_9;
                }
                char v40 = *(void *)(v33 + 8 * v32);
                if (!v40)
                {
                  char v41 = v39 + 3;
                  if (v41 >= v78)
                  {
LABEL_9:
                    swift_release();
                    double v22 = v73;
                    __int128 v21 = v74;
                    double v23 = v72;
                    goto LABEL_10;
                  }

                  char v40 = *(void *)(v33 + 8 * v41);
                  if (!v40)
                  {
                    while (1)
                    {
                      char v32 = v41 + 1;
                      if (__OFADD__(v41, 1LL)) {
                        break;
                      }
                      if (v32 >= v78) {
                        goto LABEL_9;
                      }
                      char v40 = *(void *)(v33 + 8 * v32);
                      ++v41;
                      if (v40) {
                        goto LABEL_39;
                      }
                    }

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)( Foundation::Calendar::Component _, Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  void (*v19)(__int128 *__return_ptr, _OWORD *, void *, uint64_t, void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  Swift::Int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  Swift::OpaquePointer *v37;
  char v38;
  _BYTE __dst[282];
  void v40[36];
  _OWORD __src[18];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  _BYTE v52[7];
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  char v75;
  _DWORD v76[2];
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[3];
  __int128 v86;
  _OWORD v87[3];
  uint64_t v88;
  Swift::Int_optional v89;
  char v6 = v4;
  int v8 = *(unsigned __int8 *)_;
  double v9 = *(double *)action;
  __int128 v10 = *(_OWORD *)(v5 + 80);
  v87[0] = *(_OWORD *)(v5 + 64);
  v87[1] = v10;
  v87[2] = *(_OWORD *)(v5 + 96);
  int64_t v88 = *(void *)(v5 + 112);
  __int128 v11 = *(_OWORD *)(v5 + 16);
  v85[0] = *(_OWORD *)v5;
  v85[1] = v11;
  __int128 v12 = *(_OWORD *)(v5 + 48);
  v85[2] = *(_OWORD *)(v5 + 32);
  unint64_t v86 = v12;
  switch(v8)
  {
    case 6:
      int v13 = &v86;
      char v14 = 5;
      break;
    case 5:
      int v13 = (__int128 *)((char *)&v86 + 8);
      char v14 = 4;
      break;
    case 4:
      int v13 = v87;
      char v14 = 3;
      break;
    default:
      return;
  }

  uint64_t v15 = *(void *)v13;
  swift_bridgeObjectRetain();
  if ((v6 & 1) != 0)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)v85);
    swift_bridgeObjectRetain();
    double v22 = swift_bridgeObjectRetain();
    double v23 = (void *)specialized _ArrayProtocol.filter(_:)(v22, (uint64_t *)v85, v8);
    swift_bridgeObjectRelease();
    outlined release of Calendar.RecurrenceRule((uint64_t)v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    dates->_rawValue = v23;
  }

  else
  {
    __int128 v37 = dates;
    *(void *)&__src[0] = 96LL;
    double v16 = 1.59271755e13;
    if (v9 <= 1.59271755e13) {
      double v16 = v9;
    }
    double v17 = fmax(v16, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    *(double *)char v40 = v17;
    swift_unknownObjectRetain();
    v19(&v43, __src, v40, ObjectType, *((void *)&v85[0] + 1));
    swift_unknownObjectRelease();
    uint64_t v82 = v47;
    __int128 v83 = v48;
    __int128 v84 = v49;
    char v78 = v43;
    char v79 = v44;
    char v81 = v46;
    uint64_t v80 = v45;
    uint64_t v20 = v50;
    *(_DWORD *)((char *)v76 + 3) = *(_DWORD *)&v52[3];
    v76[0] = *(_DWORD *)v52;
    __int128 v21 = v53;
    char v71 = v61;
    uint64_t v72 = v62;
    char v73 = v63;
    uint64_t v74 = v64;
    __int128 v67 = v57;
    __int128 v68 = v58;
    char v69 = v59;
    char v70 = v60;
    char v65 = v55;
    uint64_t v66 = v56;
    char v77 = v51;
    __int128 v75 = v54;
    if (v8 == 6)
    {
      __int128 v21 = 0LL;
      uint64_t v20 = 0LL;
      char v77 = 1;
      __int128 v75 = 1;
    }

    else if (v8 == 5)
    {
      uint64_t v20 = 0LL;
      char v77 = 1;
    }

    char v24 = *(void *)(v15 + 16);
    __int128 v36 = v20;
    if (v24)
    {
      uint64_t v42 = MEMORY[0x18961AFE8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
      id v25 = v21;
      __int128 v26 = 0LL;
      __src[4] = v47;
      __src[5] = v48;
      __src[6] = v49;
      __src[0] = v43;
      __src[1] = v44;
      __src[2] = v45;
      __src[3] = v46;
      *(_OWORD *)((char *)&__src[16] + 9) = v63;
      *(_OWORD *)((char *)&__src[14] + 9) = v61;
      *(_OWORD *)((char *)&__src[15] + 9) = v62;
      *(_OWORD *)((char *)&__src[10] + 9) = v57;
      *(_OWORD *)((char *)&__src[11] + 9) = v58;
      *(_OWORD *)((char *)&__src[12] + 9) = v59;
      *(_OWORD *)((char *)&__src[13] + 9) = v60;
      *(_OWORD *)((char *)&__src[8] + 9) = v55;
      BYTE8(__src[7]) = v77;
      *(_DWORD *)((char *)&__src[7] + 9) = *(_DWORD *)v52;
      double v27 = v42;
      *(void *)&__src[7] = v20;
      HIDWORD(__src[7]) = *(_DWORD *)&v52[3];
      uint64_t v35 = v25;
      *(void *)&__src[8] = v25;
      BYTE8(__src[8]) = v75;
      BYTE9(__src[17]) = v64;
      uint64_t v28 = v24 - 1;
      *(_OWORD *)((char *)&__src[9] + 9) = v56;
      while (1)
      {
        __int128 v29 = *(void *)(v15 + 8 * v26 + 32);
        memcpy(__dst, __src, sizeof(__dst));
        char v38 = v8;
        v89.Foundation::Morphology::Definiteness value = v29;
        v89.is_nil = 0;
        DateComponents.setValue(_:for:)(v89, (Foundation::Calendar::Component)&v38);
        memcpy(v40, __dst, 0x11AuLL);
        outlined retain of DateComponents((uint64_t)__src);
        uint64_t v42 = v27;
        char v31 = *(void *)(v27 + 16);
        __int128 v30 = *(void *)(v27 + 24);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v30 > 1,  v31 + 1,  1);
          double v27 = v42;
        }

        *(void *)(v27 + 16) = v31 + 1;
        memcpy((void *)(v27 + 288 * v31 + 32), v40, 0x11AuLL);
        if (v28 == v26) {
          break;
        }
        ++v26;
      }

      swift_bridgeObjectRelease();
      __int128 v21 = v35;
    }

    else
    {
      swift_bridgeObjectRelease();
      double v27 = MEMORY[0x18961AFE8];
    }

    outlined retain of Calendar.RecurrenceRule((uint64_t)v85);
    swift_bridgeObjectRetain();
    char v32 = swift_bridgeObjectRetain();
    char v33 = specialized Sequence.flatMap<A>(_:)(v32, (uint64_t)v85, v14, v27);
    swift_bridgeObjectRelease();
    outlined release of Calendar.RecurrenceRule((uint64_t)v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_OWORD *)((char *)&__src[16] + 9) = v73;
    __src[4] = v82;
    __src[5] = v83;
    __src[6] = v84;
    __src[0] = v78;
    __src[1] = v79;
    __src[2] = v80;
    __src[3] = v81;
    *(_OWORD *)((char *)&__src[14] + 9) = v71;
    *(_OWORD *)((char *)&__src[15] + 9) = v72;
    *(_OWORD *)((char *)&__src[10] + 9) = v67;
    *(_OWORD *)((char *)&__src[11] + 9) = v68;
    *(_OWORD *)((char *)&__src[12] + 9) = v69;
    *(_OWORD *)((char *)&__src[13] + 9) = v70;
    char v34 = v66;
    *(_OWORD *)((char *)&__src[8] + 9) = v65;
    v37->_rawValue = (void *)v33;
    *(void *)&__src[7] = v36;
    BYTE8(__src[7]) = v77;
    *(_DWORD *)((char *)&__src[7] + 9) = v76[0];
    HIDWORD(__src[7]) = *(_DWORD *)((char *)v76 + 3);
    *(void *)&__src[8] = v21;
    BYTE8(__src[8]) = v75;
    BYTE9(__src[17]) = v74;
    *(_OWORD *)((char *)&__src[9] + 9) = v34;
    outlined release of DateComponents((uint64_t)__src);
  }

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  uint64_t v1 = (void *)result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v3 = 0LL;
  unint64_t v4 = v2 >> 1;
  for (unint64_t i = v2 + 3; ; --i)
  {
    if (v3 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v6 = v1[2];
    if (v3 >= v6) {
      break;
    }
    if (i - 4 >= v6) {
      goto LABEL_12;
    }
    uint64_t v7 = v1[v3 + 4];
    uint64_t v8 = v1[i];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      uint64_t v1 = (void *)result;
    }

    v1[v3 + 4] = v8;
    v1[i] = v7;
LABEL_5:
    if (v4 == ++v3) {
      return (uint64_t)v1;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

Foundation::Date_optional __swiftcall Calendar.DatesByRecurring.Iterator.next()()
{
  uint64_t v3 = v0;
  if ((*(_BYTE *)(v1 + 576) & 1) != 0)
  {
LABEL_2:
    *(void *)uint64_t v3 = 0LL;
    char v4 = 1;
LABEL_26:
    *(_BYTE *)(v3 + 8) = v4;
    goto LABEL_29;
  }

  uint64_t v5 = (_BYTE *)(v1 + 576);
  if (*(_BYTE *)(v1 + 48) == 1 && *(void *)(v1 + 168) >= *(void *)(v1 + 40))
  {
LABEL_24:
    char v4 = 1;
    *uint64_t v5 = 1;
    *(void *)uint64_t v3 = 0LL;
    goto LABEL_26;
  }

  unint64_t v6 = *(void **)(v1 + 600);
  while (!v6[2])
  {
    Calendar.DatesByRecurring.Iterator.nextGroup()();
    unint64_t v6 = *(void **)(v1 + 600);
    if (v6[2])
    {
      *(void *)(v1 + 592) = 0LL;
    }

    else
    {
      uint64_t v13 = *(void *)(v1 + 592);
      BOOL v11 = __OFADD__(v13, 1LL);
      uint64_t v14 = v13 + 1;
      if (v11) {
        goto LABEL_28;
      }
      *(void *)(v1 + 592) = v14;
      if (*(void *)(v1 + 584) < v14) {
        goto LABEL_24;
      }
    }

void protocol witness for Sequence.makeIterator() in conformance Calendar.DatesByRecurring()
{
  char v1 = *((_BYTE *)v0 + 24);
  char v2 = *((_BYTE *)v0 + 25);
  char v3 = *((_BYTE *)v0 + 26);
  char v4 = *((_BYTE *)v0 + 48);
  uint64_t v5 = v0[15];
  char v6 = *((_BYTE *)v0 + 144);
  uint64_t v22 = *v0;
  __int128 v11 = *(_OWORD *)(v0 + 1);
  char v12 = v1;
  char v13 = v2;
  char v14 = v3;
  __int128 v15 = *((_OWORD *)v0 + 2);
  char v16 = v4;
  __int128 v7 = *(_OWORD *)(v0 + 9);
  __int128 v17 = *(_OWORD *)(v0 + 7);
  __int128 v18 = v7;
  __int128 v8 = *(_OWORD *)(v0 + 13);
  __int128 v19 = *(_OWORD *)(v0 + 11);
  __int128 v20 = v8;
  uint64_t v21 = v5;
  __int128 v9 = *((_OWORD *)v0 + 8);
  char v10 = v6;
  Calendar.DatesByRecurring.Iterator.init(start:matching:range:)((uint64_t)&v22, (uint64_t)&v11, (uint64_t)&v9);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Calendar.DatesByRecurring()
{
  __int128 v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  char v9 = *(_BYTE *)(v0 + 144);
  __int128 v2 = *(_OWORD *)(v0 + 48);
  uint64_t v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  __int128 v3 = *(_OWORD *)(v0 + 80);
  _OWORD v8[4] = *(_OWORD *)(v0 + 64);
  _OWORD v8[5] = v3;
  __int128 v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v8);
  uint64_t v6 = v5;
  outlined release of Calendar.DatesByRecurring((uint64_t)v8);
  return v6;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance Calendar.DatesByRecurring( char *a1, double *a2, uint64_t a3)
{
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Calendar.DatesByRecurring@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t closure #2 in Calendar.RecurrenceRule._expandWeeks(dates:anchor:)@<X0>( double *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void (*v10)(void *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, _OWORD *, double *, void, uint64_t, uint64_t);
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  _OWORD v30[2];
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  BOOL v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  char v81;
  void v82[33];
  char v83;
  _OWORD v84[2];
  uint64_t v85;
  double v6 = *a1;
  v84[0] = *a2;
  uint64_t v85 = 2048LL;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v7 = fmax(v6, -2.11845067e11);
  uint64_t v8 = *((void *)&v84[0] + 1);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__int128 v30 = v7;
  outlined retain of Locale((uint64_t)v84);
  uint64_t v28 = ObjectType;
  v10(v82, &v85, v30, ObjectType, v8);
  outlined release of DateComponents((uint64_t)v82);
  Foundation::Date_optional result = outlined release of Locale((uint64_t)v84);
  if (v83) {
    char v12 = 0LL;
  }
  else {
    char v12 = v82[32];
  }
  char v13 = *(void *)(a3 + 16);
  if (!v13)
  {
    __int128 v20 = (void *)MEMORY[0x18961AFE8];
LABEL_23:
    *a4 = v20;
    return result;
  }

  __int128 v26 = a4;
  char v14 = *(void (**)(uint64_t *__return_ptr, _OWORD *, double *, void, uint64_t, uint64_t))(v8 + 200);
  Foundation::Date_optional result = swift_bridgeObjectRetain();
  __int128 v15 = *(void *)(a3 + 32);
  char v16 = __OFSUB__(v15, v12);
  __int128 v17 = v15 - v12;
  if (!v16)
  {
    __int128 v18 = v8;
    __int128 v19 = 0LL;
    __int128 v20 = (void *)MEMORY[0x18961AFE8];
    double v27 = a3;
    while (1)
    {
      char v79 = 1;
      uint64_t v21 = v17 == 0x7FFFFFFFFFFFFFFFLL;
      if (v17 == 0x7FFFFFFFFFFFFFFFLL) {
        __int128 v17 = 0LL;
      }
      char v78 = 1;
      char v77 = 1;
      __int128 v76 = 1;
      __int128 v75 = 1;
      uint64_t v74 = 1;
      char v73 = 1;
      uint64_t v72 = 1;
      char v71 = 1;
      char v70 = 1;
      char v69 = 1;
      __int128 v68 = 1;
      __int128 v67 = 1;
      uint64_t v66 = 1;
      char v65 = v21;
      char v64 = 1;
      char v31 = 0LL;
      memset(v30, 0, sizeof(v30));
      char v32 = v79;
      char v33 = 0LL;
      char v34 = 1;
      uint64_t v35 = 0LL;
      __int128 v36 = 1;
      __int128 v37 = 0LL;
      char v38 = 1;
      char v39 = 0LL;
      char v40 = 1;
      char v41 = 0LL;
      uint64_t v42 = 1;
      __int128 v43 = 0LL;
      __int128 v44 = 1;
      __int128 v45 = 0LL;
      __int128 v46 = 1;
      __int128 v47 = 0LL;
      char v48 = 1;
      uint64_t v49 = 0LL;
      uint64_t v50 = 1;
      __int128 v51 = 0LL;
      __int128 v52 = 1;
      __int128 v53 = 0LL;
      Swift::OpaquePointer v54 = 1;
      Foundation::Date v55 = 0LL;
      uint64_t v56 = 1;
      Swift::Int v57 = 0LL;
      uint64_t v58 = 1;
      char v59 = v17;
      uint64_t v60 = v21;
      uint64_t v61 = 0LL;
      char v62 = 1;
      char v63 = 2;
      __int128 v29 = v7;
      outlined retain of Locale((uint64_t)v84);
      v14(&v80, v30, &v29, 0LL, v28, v18);
      Foundation::Date_optional result = outlined release of Locale((uint64_t)v84);
      if ((v81 & 1) == 0)
      {
        uint64_t v22 = v80;
        Foundation::Date_optional result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          Foundation::Date_optional result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v20[2] + 1LL,  1,  v20);
          __int128 v20 = (void *)result;
        }

        char v24 = v20[2];
        double v23 = v20[3];
        if (v24 >= v23 >> 1)
        {
          Foundation::Date_optional result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v23 > 1),  v24 + 1,  1,  v20);
          __int128 v20 = (void *)result;
        }

        uint64_t v20[2] = v24 + 1;
        v20[v24 + 4] = v22;
        __int128 v18 = v8;
        a3 = v27;
      }

      if (v13 - 1 == v19) {
        break;
      }
      id v25 = *(void *)(a3 + 8 * v19++ + 40);
      char v16 = __OFSUB__(v25, v12);
      __int128 v17 = v25 - v12;
      if (v16) {
        goto LABEL_24;
      }
    }

    Foundation::Date_optional result = swift_bridgeObjectRelease();
    a4 = v26;
    goto LABEL_23;
  }

uint64_t specialized getter of monthRange #1 in Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)( uint64_t a1, __int128 *a2, double a3)
{
  if (*(_BYTE *)(a1 + 16) != 1) {
    return *(void *)a1;
  }
  char v15 = 2;
  char v14 = 1;
  if (a3 > 1.59271755e13) {
    a3 = 1.59271755e13;
  }
  double v4 = fmax(a3, -2.11845067e11);
  __int128 v16 = *a2;
  uint64_t v5 = *((void *)&v16 + 1);
  uint64_t ObjectType = swift_getObjectType();
  double v13 = v4;
  double v7 = *(uint64_t (**)(void, void, void, void, void))(*((void *)&v16 + 1) + 144LL);
  outlined retain of Locale((uint64_t)&v16);
  uint64_t v8 = v7(&v15, &v14, &v13, ObjectType, v5);
  uint64_t v10 = v9;
  LOBYTE(ObjectType) = v11;
  uint64_t result = outlined release of Locale((uint64_t)&v16);
  if ((ObjectType & 1) == 0)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 16) = 0;
    return v8;
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)( double *a1, uint64_t a2)
{
  void (*v7)(void *__return_ptr, void, void, void, void);
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void, void, void, void, void);
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  double v22;
  char v23;
  char v24;
  void v25[11];
  char v26;
  uint64_t v27;
  double v28;
  _OWORD v29[2];
  double v3 = *a1;
  v29[0] = *(_OWORD *)a2;
  double v27 = 8LL;
  if (v3 > 1.59271755e13) {
    double v3 = 1.59271755e13;
  }
  double v4 = fmax(v3, -2.11845067e11);
  uint64_t v5 = *((void *)&v29[0] + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v28 = v4;
  double v7 = *(void (**)(void *__return_ptr, void, void, void, void))(*((void *)&v29[0] + 1) + 192LL);
  outlined retain of Locale((uint64_t)v29);
  v7(v25, &v27, &v28, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v25);
  outlined release of Locale((uint64_t)v29);
  if (v26) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = v25[10];
  }
  uint64_t v9 = *(double *)(a2 + 80);
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)(*(void *)&v9 + 16LL);
  if (v10)
  {
    char v11 = (uint64_t *)(*(void *)&v9 + 32LL);
    uint64_t result = swift_bridgeObjectRetain();
    double v13 = 0LL;
    char v14 = 1;
    while (1)
    {
      __int128 v16 = *v11++;
      char v15 = v16;
      if (v16 >= 1)
      {
        if (v15 == v8) {
          goto LABEL_19;
        }
      }

      else
      {
        if ((v14 & 1) == 0) {
          goto LABEL_13;
        }
        char v24 = 3;
        double v23 = 2;
        uint64_t v22 = v4;
        __int128 v17 = *(void (**)(void, void, void, void, void))(v5 + 144);
        outlined retain of Locale((uint64_t)v29);
        v17(&v24, &v23, &v22, ObjectType, v5);
        double v13 = v18;
        __int128 v20 = v19;
        uint64_t result = outlined release of Locale((uint64_t)v29);
        if ((v20 & 1) != 0)
        {
          char v14 = 1;
        }

        else
        {
LABEL_13:
          if (__OFADD__(v13, v15))
          {
            __break(1u);
            return result;
          }

          if (v13 + v15 == v8)
          {
LABEL_19:
            uint64_t v21 = 1LL;
            goto LABEL_20;
          }

          char v14 = 0;
        }
      }

      if (!--v10)
      {
        uint64_t v21 = 0LL;
LABEL_20:
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v28);
        return v21;
      }
    }
  }

  return 0LL;
}

uint64_t specialized getter of monthsToDaysInMonth #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)( void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  void (*v86)(void *__return_ptr, void, void, void, void);
  uint64_t v87;
  uint64_t ObjectType;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  char v94;
  double v95;
  unsigned __int8 v96;
  __int16 v97;
  id v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101[36];
  __int128 v102[18];
  _OWORD v103[18];
  uint64_t __dst[36];
  void __src[37];
  uint64_t v9 = (void *)*a1;
  if (*a1)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v9;
  }

  if (a2 == a3)
  {
    uint64_t v9 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_116;
  }

  __int128 v83 = a1;
  if (a3 < a2) {
    goto LABEL_125;
  }
  double v8 = a5;
  uint64_t v5 = *a4;
  uint64_t v7 = a4[1];
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v86 = *(void (**)(void *__return_ptr, void, void, void, void))(v7 + 192);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  if (a2 >= a3)
  {
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }

  double v6 = 0LL;
  if (v8 <= 1.59271755e13) {
    double v12 = v8;
  }
  else {
    double v12 = 1.59271755e13;
  }
  uint64_t v9 = (void *)MEMORY[0x18961AFF0];
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t v14 = a2;
  uint64_t v84 = a2;
  uint64_t v85 = a3;
  while (2)
  {
    uint64_t v89 = v14;
    uint64_t v90 = v9;
    uint64_t v15 = static _SetStorage.allocate(capacity:)();
    __int128 v16 = (void *)(v15 + 56);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(2uLL);
    Swift::Int v17 = Hasher._finalize()();
    char v18 = *(_BYTE *)(v15 + 32);
    uint64_t v19 = -1LL << v18;
    unint64_t v20 = v17 & ~(-1LL << v18);
    unint64_t v21 = v20 >> 6;
    uint64_t v22 = *(void *)(v15 + 56 + 8 * (v20 >> 6));
    uint64_t v23 = 1LL << v20;
    uint64_t v24 = *(void *)(v15 + 48);
    if (((1LL << v20) & v22) == 0) {
      goto LABEL_17;
    }
    char v25 = v18 & 0x3F;
    if (*(_BYTE *)(v24 + v20) != 2)
    {
      uint64_t v26 = ~v19;
      while (1)
      {
        unint64_t v20 = (v20 + 1) & v26;
        unint64_t v21 = v20 >> 6;
        uint64_t v22 = v16[v20 >> 6];
        uint64_t v23 = 1LL << v20;
        if ((v22 & (1LL << v20)) == 0) {
          break;
        }
        if (*(_BYTE *)(v24 + v20) == 2) {
          goto LABEL_19;
        }
      }

uint64_t closure #3 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)@<X0>( double *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  void (*v12)(_OWORD *__return_ptr, _BYTE *, _OWORD *, uint64_t, void);
  uint64_t result;
  __int128 v14;
  double v15;
  unint64_t v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void (*v36)(_OWORD *__return_ptr, double *, _BYTE *, uint64_t, void);
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  unsigned __int8 v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _OWORD __src[24];
  _OWORD v58[24];
  _BYTE v59[330];
  char v60;
  unsigned __int8 v61;
  char v62;
  __int128 v63[18];
  double v64[36];
  _BYTE v65[282];
  _OWORD __dst[19];
  char v67;
  int v68;
  double v7 = *a1;
  v59[0] = 2;
  if (v7 > 1.59271755e13) {
    double v7 = 1.59271755e13;
  }
  double v8 = fmax(v7, -2.11845067e11);
  double v9 = *(double *)a2;
  double v10 = *(double *)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__int128 __src = v8;
  double v12 = *(void (**)(_OWORD *__return_ptr, _BYTE *, _OWORD *, uint64_t, void))(*(void *)&v10 + 160LL);
  swift_unknownObjectRetain();
  uint64_t v50 = ObjectType;
  v12(v58, v59, __src, ObjectType, *(void *)&v10);
  uint64_t result = swift_unknownObjectRelease();
  if ((v58[1] & 1) != 0) {
    goto LABEL_56;
  }
  BOOL v55 = *a3;
  uint64_t v54 = *(void *)(*a3 + 16);
  if (!v54)
  {
    uint64_t v19 = (void *)MEMORY[0x18961AFE8];
LABEL_51:
    *a4 = v19;
    return result;
  }

  uint64_t v14 = v58[0];
  uint64_t v15 = *(double *)v58;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  char v49 = a4;
  int64_t v68 = *(unsigned __int8 *)(a2 + 16);
  __int128 v51 = *(_BYTE *)(a2 + 17);
  unint64_t v53 = v55 + 32;
  swift_bridgeObjectRetain();
  __int128 v16 = 0LL;
  if (v15 <= 1.59271755e13) {
    Swift::Int v17 = v15;
  }
  else {
    Swift::Int v17 = 1.59271755e13;
  }
  char v18 = fmax(v17, -2.11845067e11);
  uint64_t v19 = (void *)MEMORY[0x18961AFE8];
  char v52 = v9;
  while (2)
  {
    memcpy(__dst, (const void *)(v53 + 288 * v16), 0x11AuLL);
    memcpy(v65, (const void *)(v53 + 288 * v16), sizeof(v65));
    uint64_t v56 = v16 + 1;
    unint64_t v20 = static _SetStorage.allocate(capacity:)();
    unint64_t v21 = 0LL;
    uint64_t v22 = v20 + 56;
    do
    {
      uint64_t v26 = outlined read-only object #0 of closure #3 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)[v21 + 32];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v27 = -1LL << *(_BYTE *)(v20 + 32);
      BOOL v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      int64_t v30 = *(void *)(v22 + 8 * (v28 >> 6));
      uint64_t v31 = 1LL << v28;
      uint64_t v32 = *(void *)(v20 + 48);
      if (((1LL << v28) & v30) != 0)
      {
        uint64_t v33 = ~v27;
        while (1)
        {
          BOOL v28 = (v28 + 1) & v33;
          uint64_t v29 = v28 >> 6;
          int64_t v30 = *(void *)(v22 + 8 * (v28 >> 6));
          uint64_t v31 = 1LL << v28;
          if ((v30 & (1LL << v28)) == 0) {
            break;
          }
        }
      }

      *(void *)(v22 + 8 * v29) = v31 | v30;
      *(_BYTE *)(v32 + v28) = v26;
      uint64_t v23 = *(void *)(v20 + 16);
      uint64_t v24 = __OFADD__(v23, 1LL);
      char v25 = v23 + 1;
      if (v24)
      {
        __break(1u);
        goto LABEL_53;
      }

      *(void *)(v20 + 16) = v25;
LABEL_13:
      ++v21;
    }

    while (v21 != 15);
    outlined retain of DateComponents((uint64_t)__dst);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)__dst);
    specialized _NativeSet.filter(_:)(v20);
    outlined release of DateComponents((uint64_t)__dst);
    *(double *)__int128 __src = v52;
    *((double *)__src + 1) = v10;
    unint64_t v34 = swift_bridgeObjectRetain();
    Calendar.ComponentSet.init(_:)(v34, v59);
    int64_t v35 = BYTE9(__dst[17]);
    v64[0] = v18;
    Calendar._dateComponents(_:from:)((uint64_t *)v59, v64, v58);
    swift_release();
    if (v35 == 2)
    {
      uint64_t result = outlined retain of DateComponents((uint64_t)__dst);
    }

    else
    {
      *(void *)&v64[0] = 4LL;
      *(double *)char v59 = v18;
      unint64_t v36 = *(void (**)(_OWORD *__return_ptr, double *, _BYTE *, uint64_t, void))(*(void *)&v10 + 192LL);
      outlined retain of DateComponents((uint64_t)__dst);
      v36(__src, v64, v59, v50, *(void *)&v10);
      memcpy(v59, __src, 0x11AuLL);
      uint64_t result = outlined release of DateComponents((uint64_t)v59);
      BYTE9(v58[17]) = v59[281];
    }

    unint64_t v37 = *(void *)&__dst[10];
    unint64_t v38 = *(void *)&v58[10];
    int64_t v39 = BYTE8(v58[10]) ^ 1 | BYTE8(__dst[10]);
    if ((BYTE8(v58[10]) & 1) != 0 || (BYTE8(__dst[10]) & 1) != 0)
    {
LABEL_31:
      *(void *)&v59[32] = *(void *)&__dst[2];
      v59[40] = BYTE8(__dst[2]);
      *(void *)&v59[48] = *(void *)&__dst[3];
      v59[56] = BYTE8(__dst[3]);
      *(void *)&v59[64] = *(void *)&__dst[4];
      v59[72] = BYTE8(__dst[4]);
      *(void *)&v59[80] = *(void *)&__dst[5];
      v59[88] = BYTE8(__dst[5]);
      *(void *)&v59[96] = *(void *)&__dst[6];
      v59[104] = BYTE8(__dst[6]);
      *(void *)&v59[112] = *(void *)&__dst[7];
      v59[120] = BYTE8(__dst[7]);
      *(void *)&v59[128] = *(void *)&__dst[8];
      v59[136] = BYTE8(__dst[8]);
      *(void *)&v59[144] = *(void *)&__dst[9];
      v59[152] = BYTE8(__dst[9]);
      *(void *)&v59[160] = v37;
      v59[168] = v39;
      *(void *)&v59[176] = *(void *)&__dst[11];
      v59[184] = BYTE8(__dst[11]);
      *(void *)&v59[192] = *(void *)&__dst[12];
      v59[200] = BYTE8(__dst[12]);
      *(void *)&v59[208] = *(void *)&__dst[13];
      v59[216] = BYTE8(__dst[13]);
      *(void *)&v59[224] = *(void *)&__dst[14];
      v59[232] = BYTE8(__dst[14]);
      *(void *)&v59[240] = *(void *)&__dst[15];
      v59[248] = BYTE8(__dst[15]);
      v59[264] = BYTE8(__dst[16]);
      *(void *)&v59[256] = *(void *)&__dst[16];
      *(void *)&v59[272] = *(void *)&__dst[17];
      v59[280] = BYTE8(__dst[17]);
      v59[281] = v35;
      *(_OWORD *)char v59 = __dst[0];
      *(_OWORD *)&v59[16] = __dst[1];
      memcpy(v64, v59, 0x11AuLL);
      *(void *)&__src[2] = *(void *)&v58[2];
      BYTE8(__src[2]) = BYTE8(v58[2]);
      *(void *)&__src[3] = *(void *)&v58[3];
      BYTE8(__src[3]) = BYTE8(v58[3]);
      *(void *)&__src[4] = *(void *)&v58[4];
      BYTE8(__src[4]) = BYTE8(v58[4]);
      *(void *)&__src[5] = *(void *)&v58[5];
      BYTE8(__src[5]) = BYTE8(v58[5]);
      *(void *)&__src[6] = *(void *)&v58[6];
      BYTE8(__src[6]) = BYTE8(v58[6]);
      *(void *)&__src[7] = *(void *)&v58[7];
      BYTE8(__src[7]) = BYTE8(v58[7]);
      *(void *)&__src[8] = *(void *)&v58[8];
      BYTE8(__src[8]) = BYTE8(v58[8]);
      *(void *)&__src[9] = *(void *)&v58[9];
      BYTE8(__src[9]) = BYTE8(v58[9]);
      *(void *)&__src[10] = v38;
      BYTE8(__src[10]) = BYTE8(v58[10]);
      *(void *)&__src[11] = *(void *)&v58[11];
      BYTE8(__src[11]) = BYTE8(v58[11]);
      *(void *)&__src[12] = *(void *)&v58[12];
      BYTE8(__src[12]) = BYTE8(v58[12]);
      *(void *)&__src[13] = *(void *)&v58[13];
      BYTE8(__src[13]) = BYTE8(v58[13]);
      *(void *)&__src[14] = *(void *)&v58[14];
      BYTE8(__src[14]) = BYTE8(v58[14]);
      *(void *)&__src[15] = *(void *)&v58[15];
      BYTE8(__src[15]) = BYTE8(v58[15]);
      BYTE8(__src[16]) = BYTE8(v58[16]);
      *(void *)&__src[16] = *(void *)&v58[16];
      *(void *)&__src[17] = *(void *)&v58[17];
      WORD4(__src[17]) = WORD4(v58[17]);
      __src[0] = v58[0];
      __src[1] = v58[1];
      memcpy(v63, __src, 0x11AuLL);
      double v41 = specialized static DateComponents.== infix(_:_:)((uint64_t)v64, v63);
      outlined release of DateComponents((uint64_t)v59);
      outlined release of DateComponents((uint64_t)__src);
      swift_unknownObjectRelease();
      if (v41)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
        }
        uint64_t v43 = v19[2];
        uint64_t v42 = v19[3];
        if (v43 >= v42 >> 1) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v42 > 1),  v43 + 1,  1,  v19);
        }
        void v19[2] = v43 + 1;
        v19[v43 + 4] = v14;
      }

      goto LABEL_37;
    }

    unint64_t v40 = *(void *)&v58[10] - *(void *)&__dst[10];
    if (__OFSUB__(*(void *)&v58[10], *(void *)&__dst[10])) {
      goto LABEL_54;
    }
    if (v40 < 0) {
      unint64_t v40 = *(void *)&__dst[10] - *(void *)&v58[10];
    }
    if ((unint64_t)v40 < 0x1F5)
    {
      unint64_t v38 = 0LL;
      unint64_t v37 = 0LL;
      int64_t v39 = 0;
      goto LABEL_31;
    }

    outlined release of DateComponents((uint64_t)__dst);
    *(void *)&__src[2] = *(void *)&v58[2];
    BYTE8(__src[2]) = BYTE8(v58[2]);
    *(void *)&__src[3] = *(void *)&v58[3];
    BYTE8(__src[3]) = BYTE8(v58[3]);
    *(void *)&__src[4] = *(void *)&v58[4];
    BYTE8(__src[4]) = BYTE8(v58[4]);
    *(void *)&__src[5] = *(void *)&v58[5];
    BYTE8(__src[5]) = BYTE8(v58[5]);
    *(void *)&__src[6] = *(void *)&v58[6];
    BYTE8(__src[6]) = BYTE8(v58[6]);
    *(void *)&__src[7] = *(void *)&v58[7];
    BYTE8(__src[7]) = BYTE8(v58[7]);
    *(void *)&__src[8] = *(void *)&v58[8];
    BYTE8(__src[8]) = BYTE8(v58[8]);
    *(void *)&__src[9] = *(void *)&v58[9];
    BYTE8(__src[9]) = BYTE8(v58[9]);
    *(void *)&__src[10] = v38;
    *(void *)&__src[11] = *(void *)&v58[11];
    BYTE8(__src[11]) = BYTE8(v58[11]);
    *(void *)&__src[12] = *(void *)&v58[12];
    BYTE8(__src[12]) = BYTE8(v58[12]);
    *(void *)&__src[13] = *(void *)&v58[13];
    BYTE8(__src[13]) = BYTE8(v58[13]);
    *(void *)&__src[14] = *(void *)&v58[14];
    BYTE8(__src[14]) = BYTE8(v58[14]);
    *(void *)&__src[15] = *(void *)&v58[15];
    BYTE8(__src[15]) = BYTE8(v58[15]);
    BYTE8(__src[16]) = BYTE8(v58[16]);
    *(void *)&__src[16] = *(void *)&v58[16];
    *(void *)&__src[17] = *(void *)&v58[17];
    WORD4(__src[17]) = WORD4(v58[17]);
    __src[0] = v58[0];
    __src[1] = v58[1];
    BYTE8(__src[10]) = 0;
    outlined release of DateComponents((uint64_t)__src);
    swift_unknownObjectRelease();
LABEL_37:
    *(double *)char v59 = v52;
    *(double *)&v59[8] = v10;
    *(void *)&v59[16] = v14;
    *(void *)&v59[24] = v14;
    *(double *)&v59[32] = *((double *)&v14 + 1) + v15;
    v59[40] = 0;
    memcpy(&v59[48], v65, 0x11AuLL);
    double v44 = v68;
    uint64_t v60 = v68;
    uint64_t v61 = v51;
    uint64_t v62 = 0;
    memcpy(__src, __dst, 0x11AuLL);
    v64[0] = v52;
    v64[1] = v10;
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)__dst);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)__dst);
    __int128 v45 = DateComponents._validate(for:)((uint64_t *)v64);
    outlined release of Calendar.DatesByAdding((uint64_t)v59);
    LOBYTE(v63[0]) = 1;
    unint64_t v67 = 0;
    memcpy(&v58[5], v65, 0x11AuLL);
    v58[0] = xmmword_1837A9530;
    LOBYTE(v58[1]) = 1;
    *((void *)&v58[1] + 1) = v14;
    *(void *)&v58[2] = v14;
    *((double *)&v58[2] + 1) = *((double *)&v14 + 1) + v15;
    LOBYTE(v58[3]) = 0;
    *((void *)&v58[3] + 1) = v14;
    *(double *)&v58[4] = v52;
    *((double *)&v58[4] + 1) = v10;
    BYTE10(v58[22]) = v44;
    *(_WORD *)((char *)&v58[22] + 11) = v51;
    *(void *)&v58[23] = 100LL;
    BYTE8(v58[23]) = !v45;
    Calendar.DatesByMatching.Iterator.next()();
    if ((BYTE8(__src[0]) & 1) != 0)
    {
      __int128 v16 = v56;
    }

    else
    {
      uint64_t v46 = *(void *)&__src[0];
      __int128 v16 = v56;
      do
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
        }
        char v48 = v19[2];
        uint64_t v47 = v19[3];
        if (v48 >= v47 >> 1) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v47 > 1),  v48 + 1,  1,  v19);
        }
        void v19[2] = v48 + 1;
        v19[v48 + 4] = v46;
        Calendar.DatesByMatching.Iterator.next()();
        uint64_t v46 = *(void *)&__src[0];
      }

      while ((BYTE8(__src[0]) & 1) == 0);
    }

    memcpy(__src, v58, 0x179uLL);
    outlined release of Calendar.DatesByMatching.Iterator((uint64_t)__src);
    uint64_t result = outlined release of DateComponents((uint64_t)__dst);
    if (v16 == v54)
    {
      uint64_t result = swift_bridgeObjectRelease();
      a4 = v49;
      goto LABEL_51;
    }

    if (v16 < *(void *)(v55 + 16)) {
      continue;
    }
    break;
  }

uint64_t closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)( double *a1, uint64_t a2)
{
  void (*v7)(void *__return_ptr, void, void, void, void);
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void, void, void, void, void);
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  void v26[13];
  char v27;
  uint64_t v28;
  double v29;
  _OWORD v30[2];
  double v3 = *a1;
  v30[0] = *(_OWORD *)a2;
  BOOL v28 = 0x40000LL;
  if (v3 > 1.59271755e13) {
    double v3 = 1.59271755e13;
  }
  double v4 = fmax(v3, -2.11845067e11);
  uint64_t v5 = *((void *)&v30[0] + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v29 = v4;
  double v7 = *(void (**)(void *__return_ptr, void, void, void, void))(*((void *)&v30[0] + 1) + 192LL);
  outlined retain of Locale((uint64_t)v30);
  uint64_t v22 = ObjectType;
  v7(v26, &v28, &v29, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v26);
  outlined release of Locale((uint64_t)v30);
  if (v27) {
    double v8 = 0LL;
  }
  else {
    double v8 = v26[12];
  }
  double v9 = *(double *)(a2 + 88);
  uint64_t v29 = v9;
  double v10 = *(void *)(*(void *)&v9 + 16LL);
  if (v10)
  {
    char v11 = (uint64_t *)(*(void *)&v9 + 32LL);
    uint64_t result = swift_bridgeObjectRetain();
    double v13 = 0LL;
    uint64_t v14 = 1;
    while (1)
    {
      __int128 v16 = *v11++;
      uint64_t v15 = v16;
      if (v16 >= 1)
      {
        if (v15 == v8) {
          goto LABEL_18;
        }
      }

      else
      {
        if ((v14 & 1) == 0) {
          goto LABEL_13;
        }
        char v25 = 17;
        uint64_t v14 = 1;
        uint64_t v24 = 1;
        uint64_t v23 = v4;
        Swift::Int v17 = *(void (**)(void, void, void, void, void))(v5 + 144);
        outlined retain of Locale((uint64_t)v30);
        v17(&v25, &v24, &v23, v22, v5);
        double v13 = v18;
        unint64_t v20 = v19;
        uint64_t result = outlined release of Locale((uint64_t)v30);
        if ((v20 & 1) == 0)
        {
LABEL_13:
          if (__OFADD__(v13, v15))
          {
            __break(1u);
            return result;
          }

          if (v13 + v15 == v8)
          {
LABEL_18:
            unint64_t v21 = 1LL;
            goto LABEL_19;
          }

          uint64_t v14 = 0;
        }
      }

      if (!--v10)
      {
        unint64_t v21 = 0LL;
LABEL_19:
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v29);
        return v21;
      }
    }
  }

  return 0LL;
}

uint64_t specialized getter of daysInYear #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)( _BYTE *a1, __int128 *a2, double a3)
{
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  char v14 = 17;
  char v13 = 1;
  if (a3 > 1.59271755e13) {
    a3 = 1.59271755e13;
  }
  double v4 = fmax(a3, -2.11845067e11);
  __int128 v15 = *a2;
  uint64_t v5 = *((void *)&v15 + 1);
  uint64_t ObjectType = swift_getObjectType();
  double v12 = v4;
  double v7 = *(void (**)(void, void, void, void, void))(*((void *)&v15 + 1) + 144LL);
  outlined retain of Locale((uint64_t)&v15);
  v7(&v14, &v13, &v12, ObjectType, v5);
  uint64_t v9 = v8;
  LOBYTE(v5) = v10;
  uint64_t result = outlined release of Locale((uint64_t)&v15);
  if ((v5 & 1) == 0)
  {
    uint64_t result = v9 - 1;
    if (!__OFSUB__(v9, 1LL))
    {
      *(void *)a1 = result;
      a1[8] = 0;
      return result;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void closure #2 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)( uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v19 = *a1;
  uint64_t v18 = *(void *)(*a1 + 16);
  if (!v18)
  {
    char v10 = (void *)MEMORY[0x18961AFE8];
LABEL_17:
    *a3 = v10;
    return;
  }

  double v6 = a4 + a5;
  if (a4 + a5 >= a4)
  {
    __int128 v15 = a3;
    uint64_t v8 = *(void *)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    char v17 = *(_BYTE *)(a2 + 16);
    unsigned __int8 v16 = *(_BYTE *)(a2 + 17);
    swift_bridgeObjectRetain();
    unint64_t v9 = 0LL;
    char v10 = (void *)MEMORY[0x18961AFE8];
    while (1)
    {
      memcpy(__dst, (const void *)(v19 + 32 + 288 * v9), 0x11AuLL);
      v24[0] = v8;
      v24[1] = v7;
      *(double *)&v24[2] = a4;
      *(double *)&v24[3] = a4;
      *(double *)&v24[4] = v6;
      char v25 = 0;
      memcpy(v26, __dst, 0x11AuLL);
      v26[282] = v17;
      v26[283] = v16;
      v26[284] = 0;
      memcpy(v20, __dst, 0x11AuLL);
      v21[0] = v8;
      v21[1] = v7;
      outlined retain of DateComponents((uint64_t)__dst);
      outlined retain of DateComponents((uint64_t)__dst);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)__dst);
      swift_unknownObjectRetain();
      BOOL v11 = DateComponents._validate(for:)(v21);
      outlined release of Calendar.DatesByAdding((uint64_t)v24);
      char v32 = 1;
      char v30 = 0;
      memcpy(&__src[5], __dst, 0x11AuLL);
      __src[0] = xmmword_1837A9530;
      LOBYTE(__src[1]) = 1;
      *(_DWORD *)((char *)&__src[1] + 1) = *(_DWORD *)v31;
      DWORD1(__src[1]) = *(_DWORD *)&v31[3];
      *((double *)&__src[1] + 1) = a4;
      *(double *)&__src[2] = a4;
      *((double *)&__src[2] + 1) = v6;
      LOBYTE(__src[3]) = 0;
      *(_DWORD *)((char *)&__src[3] + 1) = *(_DWORD *)v29;
      DWORD1(__src[3]) = *(_DWORD *)&v29[3];
      *((double *)&__src[3] + 1) = a4;
      *(void *)&__src[4] = v8;
      *((void *)&__src[4] + 1) = v7;
      BYTE10(__src[22]) = v17;
      *(_WORD *)((char *)&__src[22] + 11) = v16;
      *(_WORD *)((char *)&__src[22] + 13) = v27;
      HIBYTE(__src[22]) = v28;
      *(void *)&__src[23] = 100LL;
      BYTE8(__src[23]) = !v11;
      Calendar.DatesByMatching.Iterator.next()();
      if ((v20[1] & 1) == 0)
      {
        uint64_t v12 = v20[0];
        do
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10[2] + 1LL,  1,  v10);
          }
          unint64_t v14 = v10[2];
          unint64_t v13 = v10[3];
          if (v14 >= v13 >> 1) {
            char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v14 + 1,  1,  v10);
          }
          void v10[2] = v14 + 1;
          v10[v14 + 4] = v12;
          Calendar.DatesByMatching.Iterator.next()();
          uint64_t v12 = v20[0];
        }

        while ((v20[1] & 1) == 0);
      }

      ++v9;
      memcpy(v20, __src, 0x179uLL);
      outlined release of Calendar.DatesByMatching.Iterator((uint64_t)v20);
      outlined release of DateComponents((uint64_t)__dst);
      if (v9 == v18) {
        break;
      }
      if (v9 >= *(void *)(v19 + 16))
      {
        __break(1u);
        goto LABEL_18;
      }
    }

    swift_bridgeObjectRelease();
    a3 = v15;
    goto LABEL_17;
  }

uint64_t closure #3 in Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)@<X0>( double *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  void (*v14)(_OWORD *__return_ptr, _BYTE *, _OWORD *, uint64_t, void);
  uint64_t result;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void (*v37)(_OWORD *__return_ptr, double *, _BYTE *, uint64_t, void);
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  unsigned __int8 v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  _OWORD __dst[24];
  _OWORD __src[24];
  _BYTE v61[330];
  char v62;
  unsigned __int8 v63;
  char v64;
  __int128 v65[18];
  double v66[36];
  _BYTE v67[282];
  _OWORD v68[19];
  char v69;
  int v70;
  double v8 = *a1;
  v61[0] = a3;
  double v9 = 1.59271755e13;
  if (v8 <= 1.59271755e13) {
    double v9 = v8;
  }
  double v10 = fmax(v9, -2.11845067e11);
  double v11 = *(double *)a2;
  double v12 = *(double *)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__dst = v10;
  unint64_t v14 = *(void (**)(_OWORD *__return_ptr, _BYTE *, _OWORD *, uint64_t, void))(*(void *)&v12 + 160LL);
  swift_unknownObjectRetain();
  v14(__src, v61, __dst, ObjectType, *(void *)&v12);
  uint64_t result = swift_unknownObjectRelease();
  if ((__src[1] & 1) != 0) {
    goto LABEL_51;
  }
  uint64_t v56 = *(void *)(a4 + 16);
  if (!v56)
  {
    unint64_t v20 = (void *)MEMORY[0x18961AFE8];
LABEL_47:
    *a5 = v20;
    return result;
  }

  unsigned __int8 v16 = *((double *)__src + 1);
  unint64_t v53 = *(void *)&__src[0];
  char v17 = *(double *)__src;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v18 = v16 + v17;
  if (v18 < v17) {
    goto LABEL_50;
  }
  unint64_t v58 = v12;
  uint64_t v54 = v11;
  __int128 v51 = a5;
  uint64_t v70 = *(unsigned __int8 *)(a2 + 16);
  char v52 = *(_BYTE *)(a2 + 17);
  BOOL v55 = a4 + 32;
  swift_bridgeObjectRetain();
  uint64_t v19 = 0LL;
  unint64_t v20 = (void *)MEMORY[0x18961AFE8];
LABEL_9:
  memcpy(v68, (const void *)(v55 + 288 * v19), 0x11AuLL);
  memcpy(v67, (const void *)(v55 + 288 * v19), sizeof(v67));
  char v57 = v19 + 1;
  unint64_t v21 = static _SetStorage.allocate(capacity:)();
  uint64_t v22 = 0LL;
  uint64_t v23 = v21 + 56;
  while (1)
  {
    uint64_t v24 = outlined read-only object #0 of closure #3 in Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)[v22 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    uint64_t result = Hasher._finalize()();
    char v25 = -1LL << *(_BYTE *)(v21 + 32);
    uint64_t v26 = result & ~v25;
    __int16 v27 = v26 >> 6;
    char v28 = *(void *)(v23 + 8 * (v26 >> 6));
    uint64_t v29 = 1LL << v26;
    char v30 = *(void *)(v21 + 48);
    if (((1LL << v26) & v28) == 0) {
      break;
    }
    if (*(unsigned __int8 *)(v30 + v26) != (_DWORD)v24)
    {
      uint64_t v31 = ~v25;
      do
      {
        uint64_t v26 = (v26 + 1) & v31;
        __int16 v27 = v26 >> 6;
        char v28 = *(void *)(v23 + 8 * (v26 >> 6));
        uint64_t v29 = 1LL << v26;
        if ((v28 & (1LL << v26)) == 0) {
          goto LABEL_17;
        }
      }

      while (*(unsigned __int8 *)(v30 + v26) != (_DWORD)v24);
    }

Swift::OpaquePointer_optional __swiftcall Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( Swift::OpaquePointer a1, Foundation::Calendar::Component in, Foundation::Date anchor)
{
  void (*v107)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void);
  Swift::Bool v108;
  void *v109;
  double v110;
  double v111;
  uint64_t v112;
  void (*v113)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, void);
  char v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int64_t v118;
  unint64_t i;
  int64_t v120;
  unint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  Swift::Int_optional v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  void *v149;
  int64_t v150;
  int64_t v151;
  int64_t v152;
  int64_t v153;
  int64_t v154;
  int64_t v155;
  int64_t v156;
  int64_t v157;
  int64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char v162;
  int v163;
  _OWORD v164[18];
  _OWORD v165[18];
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  _OWORD __dst[18];
  _OWORD __src[18];
  __int128 v176[7];
  uint64_t v177;
  Swift::OpaquePointer_optional result;
  __int128 v163 = *(unsigned __int8 *)in;
  double v5 = *v3;
  __int128 v6 = *(_OWORD *)(v4 + 80);
  v176[4] = *(_OWORD *)(v4 + 64);
  v176[5] = v6;
  v176[6] = *(_OWORD *)(v4 + 96);
  uint64_t v177 = *(void *)(v4 + 112);
  __int128 v7 = *(_OWORD *)(v4 + 16);
  v176[0] = *(_OWORD *)v4;
  v176[1] = v7;
  __int128 v8 = *(_OWORD *)(v4 + 48);
  v176[2] = *(_OWORD *)(v4 + 32);
  v176[3] = v8;
  uint64_t v9 = *((void *)a1._rawValue + 2);
  if (!v9)
  {
    __int128 v154 = MEMORY[0x18961AFF0];
LABEL_152:
    if (v163 == 2) {
      char v102 = 10;
    }
    else {
      char v102 = 11;
    }
    __int128 v162 = v102;
    LOBYTE(v165[0]) = v163;
    double v103 = 1.59271755e13;
    if (v5 <= 1.59271755e13) {
      double v103 = v5;
    }
    double v104 = fmax(v103, -2.11845067e11);
    __int128 v105 = v176[0];
    uint64_t ObjectType = swift_getObjectType();
    *(double *)__dst = v104;
    swift_unknownObjectRetain();
    v107(__src, v165, __dst, ObjectType, *((void *)&v176[0] + 1));
    swift_unknownObjectRelease();
    if ((__src[1] & 1) != 0)
    {
      swift_bridgeObjectRelease();
      unint64_t v109 = 0LL;
LABEL_219:
      uint64_t v149 = v109;
      goto LABEL_240;
    }

    unint64_t v110 = *((double *)__src + 1);
    double v111 = *(double *)__src;
    __int128 v112 = swift_allocObject();
    *(void *)(v112 + 16) = 0LL;
    *(void *)(v112 + 24) = 0LL;
    __int128 v160 = v112;
    *(_BYTE *)(v112 + 32) = 1;
    *(void *)&__dst[0] = 240LL;
    *(double *)__int128 v165 = v104;
    swift_unknownObjectRetain();
    v113(__src, __dst, v165, ObjectType, *((void *)&v105 + 1));
    swift_unknownObjectRelease();
    uint64_t v114 = v162;
    memcpy(__dst, __src, 0x11AuLL);
    __int128 v172 = 0LL;
    __int128 v173 = 1;
    uint64_t v170 = 0LL;
    uint64_t v171 = 1;
    uint64_t v150 = v154 + 64;
    __int128 v115 = 1LL << *(_BYTE *)(v154 + 32);
    int v116 = -1LL;
    if (v115 < 64) {
      int v116 = ~(-1LL << v115);
    }
    int v117 = v116 & *(void *)(v154 + 64);
    uint64_t v151 = (unint64_t)(v115 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v118 = 0LL;
    unint64_t v109 = (void *)MEMORY[0x18961AFE8];
    if (v117) {
      goto LABEL_164;
    }
LABEL_165:
    uint64_t v120 = v118 + 1;
    if (__OFADD__(v118, 1LL)) {
      goto LABEL_228;
    }
    if (v120 < v151)
    {
      uint64_t v121 = *(void *)(v150 + 8 * v120);
      ++v118;
      if (v121) {
        goto LABEL_178;
      }
      uint64_t v118 = v120 + 1;
      if (v120 + 1 >= v151) {
        goto LABEL_218;
      }
      uint64_t v121 = *(void *)(v150 + 8 * v118);
      if (v121) {
        goto LABEL_178;
      }
      uint64_t v118 = v120 + 2;
      if (v120 + 2 >= v151) {
        goto LABEL_218;
      }
      uint64_t v121 = *(void *)(v150 + 8 * v118);
      if (v121)
      {
LABEL_178:
        __int128 v159 = (v121 - 1) & v121;
        for (unint64_t i = __clz(__rbit64(v121)) + (v118 << 6); ; unint64_t i = __clz(__rbit64(v117)) | (v118 << 6))
        {
          int v123 = *(char *)(*(void *)(v154 + 48) + i);
          int v124 = *(void *)(*(void *)(v154 + 56) + 8 * i);
          int v125 = one-time initialization token for weekdays;
          swift_bridgeObjectRetain();
          if (v125 != -1) {
            swift_once();
          }
          int v126 = (char *)static Locale.Weekday.weekdays;
          char v127 = *((void *)static Locale.Weekday.weekdays + 2);
          if (!v127) {
            break;
          }
          __int128 v158 = v118;
          swift_bridgeObjectRetain();
          uint64_t v128 = 0LL;
          char v129 = qword_1837AA780[v123];
          while (qword_1837AA780[v126[v128 + 32]] != v129)
          {
            __int128 v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease_n();
            if ((v130 & 1) != 0) {
              goto LABEL_188;
            }
            if (v127 == ++v128) {
              goto LABEL_232;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_188:
          swift_bridgeObjectRelease();
          uint64_t v131 = v128 + 1;
          if (__OFADD__(v128, 1LL)) {
            goto LABEL_224;
          }
          __int128 v132 = *(void *)(v124 + 16);
          if (v132)
          {
            __int128 v133 = 0LL;
            __int128 v168 = 0LL;
            __int128 v169 = 1;
            __int128 v166 = 0LL;
            __int128 v167 = 1;
            if (v128 == 0x7FFFFFFFFFFFFFFELL) {
              __int128 v134 = 0LL;
            }
            else {
              __int128 v134 = v128 + 1;
            }
            __int128 v135 = v132 - 1;
            while (1)
            {
              uint64_t v136 = *(void *)(v124 + 8 * v133 + 32);
              memcpy(v165, __dst, 0x11AuLL);
              outlined retain of DateComponents((uint64_t)__dst);
              if (v136 < 1)
              {
                v139.Foundation::Morphology::Definiteness value = specialized getter of lastWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( &v166,  v160,  v176,  v114,  v163,  v131,  &v170,  v5,  v111,  v110);
                BOOL v52 = __OFADD__(v139.value, v136);
                v139.value += v136;
                if (v52) {
                  goto LABEL_222;
                }
              }

              else
              {
                __int128 v137 = specialized getter of firstWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( &v168,  v160,  v176,  v114,  v163,  v131,  &v172,  v5,  v111);
                __int128 v138 = v137 - 1;
                if (__OFSUB__(v137, 1LL))
                {
                  __break(1u);
LABEL_221:
                  __break(1u);
LABEL_222:
                  __break(1u);
                  goto LABEL_223;
                }

                v139.Foundation::Morphology::Definiteness value = v138 + v136;
                if (__OFADD__(v138, v136)) {
                  goto LABEL_221;
                }
              }

              LOBYTE(v164[0]) = v114;
              v139.is_nil = 0;
              DateComponents.setValue(_:for:)(v139, (Foundation::Calendar::Component)v164);
              *(void *)&v164[2] = *(void *)&v165[2];
              BYTE8(v164[2]) = BYTE8(v165[2]);
              *(void *)&v164[3] = *(void *)&v165[3];
              BYTE8(v164[3]) = BYTE8(v165[3]);
              *(void *)&v164[4] = *(void *)&v165[4];
              BYTE8(v164[4]) = BYTE8(v165[4]);
              *(void *)&v164[5] = *(void *)&v165[5];
              BYTE8(v164[5]) = BYTE8(v165[5]);
              *(void *)&v164[6] = *(void *)&v165[6];
              BYTE8(v164[6]) = BYTE8(v165[6]);
              *(void *)&v164[7] = *(void *)&v165[7];
              BYTE8(v164[7]) = BYTE8(v165[7]);
              *(void *)&v164[8] = *(void *)&v165[8];
              BYTE8(v164[8]) = BYTE8(v165[8]);
              *(void *)&v164[9] = *(void *)&v165[9];
              BYTE8(v164[9]) = BYTE8(v165[9]);
              *(void *)&v164[10] = *(void *)&v165[10];
              BYTE8(v164[10]) = BYTE8(v165[10]);
              BYTE8(v164[11]) = v131 == 0x7FFFFFFFFFFFFFFFLL;
              *(void *)&v164[12] = *(void *)&v165[12];
              BYTE8(v164[12]) = BYTE8(v165[12]);
              *(void *)&v164[13] = *(void *)&v165[13];
              BYTE8(v164[13]) = BYTE8(v165[13]);
              *(void *)&v164[14] = *(void *)&v165[14];
              BYTE8(v164[14]) = BYTE8(v165[14]);
              *(void *)&v164[15] = *(void *)&v165[15];
              BYTE8(v164[15]) = BYTE8(v165[15]);
              BYTE8(v164[16]) = BYTE8(v165[16]);
              *(void *)&v164[16] = *(void *)&v165[16];
              *(void *)&v164[17] = *(void *)&v165[17];
              WORD4(v164[17]) = WORD4(v165[17]);
              v164[0] = v165[0];
              v164[1] = v165[1];
              *(void *)&v164[11] = v134;
              outlined retain of DateComponents((uint64_t)v164);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v109[2] + 1LL,  1,  v109);
              }
              __int128 v141 = v109[2];
              __int128 v140 = v109[3];
              if (v141 >= v140 >> 1) {
                unint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v140 > 1),  v141 + 1,  1,  v109);
              }
              v109[2] = v141 + 1;
              memcpy(&v109[36 * v141 + 4], v164, 0x11AuLL);
              outlined release of DateComponents((uint64_t)v164);
              if (v135 == v133) {
                break;
              }
              ++v133;
              uint64_t v114 = v162;
            }

            swift_bridgeObjectRelease();
            uint64_t v114 = v162;
            uint64_t v118 = v158;
            int v117 = v159;
            if (!v159) {
              goto LABEL_165;
            }
          }

          else
          {
            swift_bridgeObjectRelease();
            if (v163 == 2)
            {
              __int128 v142 = 0LL;
              __int128 v143 = BYTE8(__dst[16]);
              __int128 v144 = 1;
              uint64_t v145 = *(void *)&__dst[16];
            }

            else
            {
              uint64_t v145 = 0LL;
              __int128 v144 = BYTE8(__dst[15]);
              __int128 v143 = 1;
              __int128 v142 = *(void *)&__dst[15];
            }

            int v117 = v159;
            *(void *)&v165[2] = *(void *)&__dst[2];
            BYTE8(v165[2]) = BYTE8(__dst[2]);
            *(void *)&v165[3] = *(void *)&__dst[3];
            BYTE8(v165[3]) = BYTE8(__dst[3]);
            *(void *)&v165[4] = *(void *)&__dst[4];
            BYTE8(v165[4]) = BYTE8(__dst[4]);
            *(void *)&v165[5] = *(void *)&__dst[5];
            BYTE8(v165[5]) = BYTE8(__dst[5]);
            *(void *)&v165[6] = *(void *)&__dst[6];
            BYTE8(v165[6]) = BYTE8(__dst[6]);
            *(void *)&v165[7] = *(void *)&__dst[7];
            BYTE8(v165[7]) = BYTE8(__dst[7]);
            *(void *)&v165[8] = *(void *)&__dst[8];
            BYTE8(v165[8]) = BYTE8(__dst[8]);
            *(void *)&v165[9] = *(void *)&__dst[9];
            BYTE8(v165[9]) = BYTE8(__dst[9]);
            *(void *)&v165[10] = *(void *)&__dst[10];
            BYTE8(v165[10]) = BYTE8(__dst[10]);
            if (v128 == 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v146 = 0LL;
            }
            else {
              uint64_t v146 = v128 + 1;
            }
            *(void *)&v165[11] = v146;
            BYTE8(v165[11]) = v128 == 0x7FFFFFFFFFFFFFFELL;
            *(void *)&v165[12] = *(void *)&__dst[12];
            BYTE8(v165[12]) = BYTE8(__dst[12]);
            *(void *)&v165[13] = *(void *)&__dst[13];
            BYTE8(v165[13]) = BYTE8(__dst[13]);
            *(void *)&v165[14] = *(void *)&__dst[14];
            BYTE8(v165[14]) = BYTE8(__dst[14]);
            *(void *)&v165[15] = v142;
            BYTE8(v165[15]) = v144;
            BYTE8(v165[16]) = v143;
            *(void *)&v165[16] = v145;
            *(void *)&v165[17] = *(void *)&__dst[17];
            WORD4(v165[17]) = WORD4(__dst[17]);
            v165[0] = __dst[0];
            v165[1] = __dst[1];
            outlined retain of DateComponents((uint64_t)__dst);
            outlined retain of DateComponents((uint64_t)v165);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v109[2] + 1LL,  1,  v109);
            }
            uint64_t v118 = v158;
            uint64_t v148 = v109[2];
            uint64_t v147 = v109[3];
            if (v148 >= v147 >> 1) {
              unint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v147 > 1),  v148 + 1,  1,  v109);
            }
            v109[2] = v148 + 1;
            memcpy(&v109[36 * v148 + 4], v165, 0x11AuLL);
            outlined release of DateComponents((uint64_t)v165);
            if (!v159) {
              goto LABEL_165;
            }
          }

LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }

      uint64_t v122 = v120 + 3;
      if (v122 < v151)
      {
        uint64_t v121 = *(void *)(v150 + 8 * v122);
        if (!v121)
        {
          while (1)
          {
            uint64_t v118 = v122 + 1;
            if (__OFADD__(v122, 1LL)) {
              goto LABEL_231;
            }
            if (v118 >= v151) {
              goto LABEL_218;
            }
            uint64_t v121 = *(void *)(v150 + 8 * v118);
            ++v122;
            if (v121) {
              goto LABEL_178;
            }
          }
        }

        uint64_t v118 = v122;
        goto LABEL_178;
      }
    }

                __break(1u);
                goto LABEL_224;
              }

              __break(1u);
              goto LABEL_224;
            }

LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
      goto LABEL_229;
    }

    uint64_t v29 = *(void *)(*(void *)(v12 + 56) + 8 * v27);
    uint64_t v30 = *(void *)(v29 + 16);
    if (!v30) {
      goto LABEL_75;
    }
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v30 + 1,  1,  (void *)v29);
    }
    unint64_t v32 = *(void *)(v29 + 16);
    unint64_t v31 = *(void *)(v29 + 24);
    if (v32 >= v31 >> 1) {
      uint64_t v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v31 > 1),  v32 + 1,  1,  (void *)v29);
    }
    *(void *)(v29 + 16) = v32 + 1;
    *(void *)(v29 + 8 * v32 + 32) = v14;
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&__src[0] = v12;
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
    uint64_t v36 = *(void *)(v12 + 16);
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      goto LABEL_230;
    }
    char v39 = v34;
    if (*(void *)(v12 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v33);
      uint64_t v23 = *(void *)&__src[0];
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_239;
      }
      unint64_t v35 = v40;
      double v10 = v161;
      if ((v39 & 1) == 0) {
        goto LABEL_147;
      }
      goto LABEL_36;
    }

    if ((v33 & 1) != 0)
    {
      uint64_t v23 = v12;
      double v10 = v161;
      if ((v34 & 1) == 0) {
        goto LABEL_147;
      }
      goto LABEL_36;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
    uint64_t v87 = static _DictionaryStorage.copy(original:)();
    uint64_t v23 = v87;
    int64_t v88 = v12;
    double v10 = v161;
    if (!*(void *)(v12 + 16)) {
      goto LABEL_146;
    }
    uint64_t v89 = (char *)(v87 + 64);
    uint64_t v90 = (char *)(v12 + 64);
    unint64_t v91 = (unint64_t)((1LL << *(_BYTE *)(v23 + 32)) + 63) >> 6;
    __int128 v153 = v12 + 64;
    if (v23 != v12 || v89 >= &v90[8 * v91]) {
      memmove(v89, v90, 8 * v91);
    }
    int64_t v12 = 0LL;
    *(void *)(v23 + 16) = *(void *)(v88 + 16);
    uint64_t v92 = 1LL << *(_BYTE *)(v88 + 32);
    if (v92 < 64) {
      uint64_t v93 = ~(-1LL << v92);
    }
    else {
      uint64_t v93 = -1LL;
    }
    unint64_t v94 = v93 & *(void *)(v88 + 64);
    Swift::String v157 = (unint64_t)(v92 + 63) >> 6;
    while (1)
    {
      if (v94)
      {
        unint64_t v95 = __clz(__rbit64(v94));
        v94 &= v94 - 1;
        unint64_t v96 = v95 | (v12 << 6);
        goto LABEL_122;
      }

      int64_t v98 = v12 + 1;
      if (__OFADD__(v12, 1LL)) {
        goto LABEL_235;
      }
      double v10 = v161;
      if (v98 >= v157) {
        goto LABEL_146;
      }
      unint64_t v99 = *(void *)(v153 + 8 * v98);
      ++v12;
      if (!v99)
      {
        int64_t v12 = v98 + 1;
        if (v98 + 1 >= v157) {
          goto LABEL_146;
        }
        unint64_t v99 = *(void *)(v153 + 8 * v12);
        if (!v99)
        {
          int64_t v12 = v98 + 2;
          if (v98 + 2 >= v157) {
            goto LABEL_146;
          }
          unint64_t v99 = *(void *)(v153 + 8 * v12);
          if (!v99)
          {
            int64_t v12 = v98 + 3;
            if (v98 + 3 >= v157) {
              goto LABEL_146;
            }
            unint64_t v99 = *(void *)(v153 + 8 * v12);
            if (!v99)
            {
              int64_t v12 = v98 + 4;
              if (v98 + 4 >= v157) {
                goto LABEL_146;
              }
              unint64_t v99 = *(void *)(v153 + 8 * v12);
              if (!v99)
              {
                int64_t v12 = v98 + 5;
                if (v98 + 5 >= v157) {
                  goto LABEL_146;
                }
                unint64_t v99 = *(void *)(v153 + 8 * v12);
                if (!v99)
                {
                  int64_t v12 = v98 + 6;
                  if (v98 + 6 >= v157) {
                    goto LABEL_146;
                  }
                  unint64_t v99 = *(void *)(v153 + 8 * v12);
                  if (!v99) {
                    break;
                  }
                }
              }
            }
          }
        }
      }

                                if (v116) {
                                  goto LABEL_357;
                                }
                                goto LABEL_228;
                              }

                              swift_unknownObjectRetain_n();
                              swift_retain();
                              int v125 = specialized Rope._endPath.getter(v49);
                              uint64_t result = swift_unknownObjectRelease();
                              char v26 = 0LL;
                              int v116 = 0LL;
                              if (!v49) {
                                goto LABEL_263;
                              }
LABEL_243:
                              swift_unknownObjectRetain();
                              int v126 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v43, v125, v26, v49, v9);
                              uint64_t result = swift_unknownObjectRelease_n();
                              goto LABEL_264;
                            }

LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  uint64_t v149 = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_240:
  result.value._rawValue = v149;
  result.is_nil = v108;
  return result;
}

            swift_bridgeObjectRelease();
            __int128 v173 = v233;
            if ((v230 & 1) != 0)
            {
LABEL_202:
              *(void *)(*(void *)(v178 + 56) + 8 * v173) = v165;
              goto LABEL_238;
            }
          }
        }

        else
        {
          uint64_t v177 = v172;
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v176, v171);
          uint64_t v178 = v238[0];
          unint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)(v167);
          if ((v177 & 1) != (v180 & 1)) {
            goto LABEL_291;
          }
          __int128 v173 = v179;
          if ((v177 & 1) != 0) {
            goto LABEL_202;
          }
        }

        specialized _NativeDictionary._insert(at:key:value:)(v173, v167, v165, (void *)v178);
LABEL_238:
        swift_bridgeObjectRelease();
        __int128 v159 = v178;
        if (v157) {
          goto LABEL_178;
        }
LABEL_181:
        __int128 v168 = v153 + 1;
        if (__OFADD__(v153, 1LL)) {
          goto LABEL_273;
        }
        if (v168 >= v158)
        {
LABEL_240:
          swift_release();
          if (*(void *)(v159 + 16))
          {
            swift_bridgeObjectRelease();
            v234[6] = v159;
          }

          else
          {
            swift_bridgeObjectRelease();
          }

          __int128 v2 = v235;
          break;
        }

        __int128 v169 = *(void *)(v154 + 8 * v168);
        ++v153;
        if (!v169)
        {
          __int128 v153 = v168 + 1;
          if (v168 + 1 >= v158) {
            goto LABEL_240;
          }
          __int128 v169 = *(void *)(v154 + 8 * v153);
          if (!v169)
          {
            __int128 v153 = v168 + 2;
            if (v168 + 2 >= v158) {
              goto LABEL_240;
            }
            __int128 v169 = *(void *)(v154 + 8 * v153);
            if (!v169)
            {
              uint64_t v170 = v168 + 3;
              if (v170 >= v158) {
                goto LABEL_240;
              }
              __int128 v169 = *(void *)(v154 + 8 * v170);
              if (!v169)
              {
                while (1)
                {
                  __int128 v153 = v170 + 1;
                  if (__OFADD__(v170, 1LL)) {
                    break;
                  }
                  if (v153 >= v158) {
                    goto LABEL_240;
                  }
                  __int128 v169 = *(void *)(v154 + 8 * v153);
                  ++v170;
                  if (v169) {
                    goto LABEL_194;
                  }
                }

Swift::Int closure #1 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)( double *a1, uint64_t a2, __int128 *a3)
{
  void (*v30)(_OWORD *__return_ptr, double *, _OWORD *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34[18];
  double __dst[36];
  _OWORD __src[18];
  _OWORD v37[18];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  __int16 v71;
  __int128 v72;
  _OWORD v73[19];
  if (!a2) {
    return 0LL;
  }
  char v33 = *(void *)(a2 + 16);
  if (!v33) {
    return 0LL;
  }
  double v3 = *a1;
  unint64_t v32 = a2 + 32;
  uint64_t v72 = *a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  double v4 = 1.59271755e13;
  if (v3 <= 1.59271755e13) {
    double v4 = v3;
  }
  double v5 = fmax(v4, -2.11845067e11);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = 0LL;
  while (2)
  {
    memcpy(v73, (const void *)(v32 + 288 * v6++), 0x11AuLL);
    uint64_t v11 = static _SetStorage.allocate(capacity:)();
    uint64_t v12 = 0LL;
    uint64_t v13 = v11 + 56;
    do
    {
      Swift::UInt v17 = outlined read-only object #0 of closure #1 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)[v12 + 32];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v17);
      Swift::Int result = Hasher._finalize()();
      uint64_t v19 = -1LL << *(_BYTE *)(v11 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      uint64_t v22 = *(void *)(v13 + 8 * (v20 >> 6));
      uint64_t v23 = 1LL << v20;
      uint64_t v24 = *(void *)(v11 + 48);
      if (((1LL << v20) & v22) != 0)
      {
        uint64_t v25 = ~v19;
        while (1)
        {
          unint64_t v20 = (v20 + 1) & v25;
          unint64_t v21 = v20 >> 6;
          uint64_t v22 = *(void *)(v13 + 8 * (v20 >> 6));
          uint64_t v23 = 1LL << v20;
          if ((v22 & (1LL << v20)) == 0) {
            break;
          }
        }
      }

      *(void *)(v13 + 8 * v21) = v23 | v22;
      *(_BYTE *)(v24 + v20) = v17;
      uint64_t v14 = *(void *)(v11 + 16);
      BOOL v15 = __OFADD__(v14, 1LL);
      uint64_t v16 = v14 + 1;
      if (v15)
      {
        __break(1u);
        goto LABEL_33;
      }

      *(void *)(v11 + 16) = v16;
LABEL_12:
      ++v12;
    }

    while (v12 != 15);
    outlined retain of DateComponents((uint64_t)v73);
    outlined retain of DateComponents((uint64_t)v73);
    outlined retain of Locale((uint64_t)&v72);
    specialized _NativeSet.filter(_:)(v11);
    outlined release of DateComponents((uint64_t)v73);
    v37[0] = v72;
    uint64_t v26 = swift_bridgeObjectRetain();
    Calendar.ComponentSet.init(_:)(v26, __src);
    __dst[0] = v5;
    Calendar._dateComponents(_:from:)((uint64_t *)__src, __dst, &v38);
    swift_release();
    char v27 = BYTE9(v73[17]);
    if (BYTE9(v73[17]) == 2)
    {
      Swift::Int result = outlined retain of DateComponents((uint64_t)v73);
    }

    else
    {
      *(void *)&__dst[0] = 4LL;
      uint64_t v28 = *((void *)&v72 + 1);
      uint64_t ObjectType = swift_getObjectType();
      *(double *)__int128 __src = v5;
      uint64_t v30 = *(void (**)(_OWORD *__return_ptr, double *, _OWORD *, uint64_t, uint64_t))(v28 + 192);
      outlined retain of DateComponents((uint64_t)v73);
      v30(v37, __dst, __src, ObjectType, v28);
      memcpy(__src, v37, 0x11AuLL);
      Swift::Int result = outlined release of DateComponents((uint64_t)__src);
      HIBYTE(v71) = BYTE9(__src[17]);
    }

    uint64_t v8 = *(void *)&v73[10];
    uint64_t v7 = v56;
    char v9 = v57 ^ 1 | BYTE8(v73[10]);
    if ((v57 & 1) != 0 || (BYTE8(v73[10]) & 1) != 0) {
      goto LABEL_7;
    }
    unint64_t v31 = v56 - *(void *)&v73[10];
    if (__OFSUB__(v56, *(void *)&v73[10]))
    {
LABEL_33:
      __break(1u);
      return result;
    }

    if (v31 < 0) {
      unint64_t v31 = *(void *)&v73[10] - v56;
    }
    if ((unint64_t)v31 >= 0x1F5)
    {
      outlined release of DateComponents((uint64_t)v73);
      *(void *)&v37[2] = v40;
      BYTE8(v37[2]) = v41;
      *(void *)&v37[3] = v42;
      BYTE8(v37[3]) = v43;
      *(void *)&_OWORD v37[4] = v44;
      BYTE8(v37[4]) = v45;
      *(void *)&v37[5] = v46;
      BYTE8(v37[5]) = v47;
      *(void *)&v37[6] = v48;
      BYTE8(v37[6]) = v49;
      *(void *)&v37[7] = v50;
      BYTE8(v37[7]) = v51;
      *(void *)&v37[8] = v52;
      BYTE8(v37[8]) = v53;
      *(void *)&void v37[9] = v54;
      BYTE8(v37[9]) = v55;
      *(void *)&v37[10] = v7;
      *(void *)&v37[11] = v58;
      BYTE8(v37[11]) = v59;
      *(void *)&v37[12] = v60;
      BYTE8(v37[12]) = v61;
      *(void *)&v37[13] = v62;
      BYTE8(v37[13]) = v63;
      *(void *)&v37[14] = v64;
      BYTE8(v37[14]) = v65;
      *(void *)&v37[15] = v66;
      BYTE8(v37[15]) = v67;
      BYTE8(v37[16]) = v69;
      *(void *)&v37[16] = v68;
      *(void *)&v37[17] = v70;
      WORD4(v37[17]) = v71;
      v37[0] = v38;
      v37[1] = v39;
      BYTE8(v37[10]) = 0;
      outlined release of DateComponents((uint64_t)v37);
      outlined release of Locale((uint64_t)&v72);
      outlined release of DateComponents((uint64_t)v73);
      goto LABEL_8;
    }

    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    char v9 = 0;
LABEL_7:
    *(void *)&__src[2] = *(void *)&v73[2];
    BYTE8(__src[2]) = BYTE8(v73[2]);
    *(void *)&__src[3] = *(void *)&v73[3];
    BYTE8(__src[3]) = BYTE8(v73[3]);
    *(void *)&__src[4] = *(void *)&v73[4];
    BYTE8(__src[4]) = BYTE8(v73[4]);
    *(void *)&__src[5] = *(void *)&v73[5];
    BYTE8(__src[5]) = BYTE8(v73[5]);
    *(void *)&__src[6] = *(void *)&v73[6];
    BYTE8(__src[6]) = BYTE8(v73[6]);
    *(void *)&__src[7] = *(void *)&v73[7];
    BYTE8(__src[7]) = BYTE8(v73[7]);
    *(void *)&__src[8] = *(void *)&v73[8];
    BYTE8(__src[8]) = BYTE8(v73[8]);
    *(void *)&__src[9] = *(void *)&v73[9];
    BYTE8(__src[9]) = BYTE8(v73[9]);
    *(void *)&__src[10] = v8;
    BYTE8(__src[10]) = v9;
    *(void *)&__src[11] = *(void *)&v73[11];
    BYTE8(__src[11]) = BYTE8(v73[11]);
    *(void *)&__src[12] = *(void *)&v73[12];
    BYTE8(__src[12]) = BYTE8(v73[12]);
    *(void *)&__src[13] = *(void *)&v73[13];
    BYTE8(__src[13]) = BYTE8(v73[13]);
    *(void *)&__src[14] = *(void *)&v73[14];
    BYTE8(__src[14]) = BYTE8(v73[14]);
    *(void *)&__src[15] = *(void *)&v73[15];
    BYTE8(__src[15]) = BYTE8(v73[15]);
    BYTE8(__src[16]) = BYTE8(v73[16]);
    *(void *)&__src[16] = *(void *)&v73[16];
    *(void *)&__src[17] = *(void *)&v73[17];
    BYTE8(__src[17]) = BYTE8(v73[17]);
    BYTE9(__src[17]) = v27;
    __src[0] = v73[0];
    __src[1] = v73[1];
    memcpy(__dst, __src, 0x11AuLL);
    *(void *)&v37[2] = v40;
    BYTE8(v37[2]) = v41;
    *(void *)&v37[3] = v42;
    BYTE8(v37[3]) = v43;
    *(void *)&_OWORD v37[4] = v44;
    BYTE8(v37[4]) = v45;
    *(void *)&v37[5] = v46;
    BYTE8(v37[5]) = v47;
    *(void *)&v37[6] = v48;
    BYTE8(v37[6]) = v49;
    *(void *)&v37[7] = v50;
    BYTE8(v37[7]) = v51;
    *(void *)&v37[8] = v52;
    BYTE8(v37[8]) = v53;
    *(void *)&void v37[9] = v54;
    BYTE8(v37[9]) = v55;
    *(void *)&v37[10] = v7;
    BYTE8(v37[10]) = v57;
    *(void *)&v37[11] = v58;
    BYTE8(v37[11]) = v59;
    *(void *)&v37[12] = v60;
    BYTE8(v37[12]) = v61;
    *(void *)&v37[13] = v62;
    BYTE8(v37[13]) = v63;
    *(void *)&v37[14] = v64;
    BYTE8(v37[14]) = v65;
    *(void *)&v37[15] = v66;
    BYTE8(v37[15]) = v67;
    BYTE8(v37[16]) = v69;
    *(void *)&v37[16] = v68;
    *(void *)&v37[17] = v70;
    WORD4(v37[17]) = v71;
    v37[0] = v38;
    v37[1] = v39;
    memcpy(v34, v37, 0x11AuLL);
    BOOL v10 = specialized static DateComponents.== infix(_:_:)((uint64_t)__dst, v34);
    outlined release of DateComponents((uint64_t)__src);
    outlined release of DateComponents((uint64_t)v37);
    outlined release of Locale((uint64_t)&v72);
    outlined release of DateComponents((uint64_t)v73);
    if (v10)
    {
      swift_bridgeObjectRelease_n();
      return 1LL;
    }

uint64_t closure #2 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)@<X0>( double *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, void *a5@<X8>, Foundation::Date a6@<D0>)
{
  void (*v18)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t);
  uint64_t v19;
  double v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  char *v37;
  char *v38;
  size_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  int64_t v43;
  uint64_t result;
  void *v45;
  unint64_t v46;
  unsigned __int8 v47;
  char v48;
  int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD __src[18];
  void v54[42];
  _OWORD __dst[18];
  double v56[43];
  double v9 = *a1;
  v10._rawValue = (void *)a2[9];
  LOBYTE(v54[0]) = a3;
  v56[0] = v9;
  unint64_t v11 = (unint64_t)Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( v10,  (Foundation::Calendar::Component)v54,  a6);
  if (!v11) {
    goto LABEL_36;
  }
  unint64_t v12 = v11;
  uint64_t v45 = a5;
  LOBYTE(__dst[0]) = a4;
  double v13 = 1.59271755e13;
  if (v9 <= 1.59271755e13) {
    double v13 = v9;
  }
  double v14 = fmax(v13, -2.11845067e11);
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  uint64_t ObjectType = swift_getObjectType();
  *(double *)uint64_t v54 = v14;
  unint64_t v18 = *(void (**)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t))(v16 + 160);
  swift_unknownObjectRetain();
  uint64_t v51 = v16;
  v18(v56, __dst, v54, ObjectType, v16);
  BOOL v52 = v15;
  swift_unknownObjectRelease();
  if ((LOBYTE(v56[2]) & 1) != 0)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t v19 = *(void *)(v12 + 16);
    if (v19)
    {
      char v50 = v56[0];
      unint64_t v20 = v56[1] + v56[0];
      if (v56[1] + v56[0] < v56[0]) {
        goto LABEL_35;
      }
      char v48 = *((_BYTE *)a2 + 16);
      unint64_t v49 = *((unsigned __int8 *)a2 + 18);
      uint64_t v47 = *((_BYTE *)a2 + 17);
      memcpy(__dst, (const void *)(v12 + 32), 0x11AuLL);
      unint64_t v21 = v19 - 1;
      uint64_t v22 = (void *)MEMORY[0x18961AFE8];
      uint64_t v23 = 320LL;
      BOOL v46 = v12;
      while (1)
      {
        if (v49 == 3)
        {
          uint64_t v24 = 0LL;
          uint64_t v25 = 0LL;
          uint64_t v26 = 0LL;
          char v27 = 1;
          uint64_t v28 = 2;
          uint64_t v29 = 1;
          uint64_t v30 = 1;
        }

        else
        {
          uint64_t v30 = BYTE8(__dst[2]);
          uint64_t v26 = *(void *)&__dst[2];
          uint64_t v29 = BYTE8(__dst[3]);
          uint64_t v25 = *(void *)&__dst[3];
          char v27 = BYTE8(__dst[4]);
          uint64_t v24 = *(void *)&__dst[4];
          uint64_t v28 = BYTE9(__dst[17]);
        }

        *(void *)&__src[2] = v26;
        BYTE8(__src[2]) = v30;
        *(void *)&__src[3] = v25;
        BYTE8(__src[3]) = v29;
        *(void *)&__src[4] = v24;
        BYTE8(__src[4]) = v27;
        *(void *)&__src[5] = *(void *)&__dst[5];
        BYTE8(__src[5]) = BYTE8(__dst[5]);
        *(void *)&__src[6] = *(void *)&__dst[6];
        BYTE8(__src[6]) = BYTE8(__dst[6]);
        *(void *)&__src[7] = *(void *)&__dst[7];
        BYTE8(__src[7]) = BYTE8(__dst[7]);
        *(void *)&__src[8] = *(void *)&__dst[8];
        BYTE8(__src[8]) = BYTE8(__dst[8]);
        *(void *)&__src[9] = *(void *)&__dst[9];
        BYTE8(__src[9]) = BYTE8(__dst[9]);
        *(void *)&__src[10] = *(void *)&__dst[10];
        BYTE8(__src[10]) = BYTE8(__dst[10]);
        *(void *)&__src[11] = *(void *)&__dst[11];
        BYTE8(__src[11]) = BYTE8(__dst[11]);
        *(void *)&__src[12] = *(void *)&__dst[12];
        BYTE8(__src[12]) = BYTE8(__dst[12]);
        *(void *)&__src[13] = *(void *)&__dst[13];
        BYTE8(__src[13]) = BYTE8(__dst[13]);
        *(void *)&__src[14] = *(void *)&__dst[14];
        BYTE8(__src[14]) = BYTE8(__dst[14]);
        *(void *)&__src[15] = *(void *)&__dst[15];
        BYTE8(__src[15]) = BYTE8(__dst[15]);
        BYTE8(__src[16]) = BYTE8(__dst[16]);
        *(void *)&__src[16] = *(void *)&__dst[16];
        *(void *)&__src[17] = *(void *)&__dst[17];
        BYTE8(__src[17]) = BYTE8(__dst[17]);
        BYTE9(__src[17]) = v28;
        __src[0] = __dst[0];
        __src[1] = __dst[1];
        v54[0] = v52;
        v54[1] = v51;
        *(double *)&v54[2] = v50;
        *(double *)&v54[3] = v50;
        *(double *)&v54[4] = v20;
        LOBYTE(v54[5]) = 0;
        memcpy(&v54[6], __src, 0x11AuLL);
        BYTE2(v54[41]) = v48;
        *(_WORD *)((char *)&v54[41] + 3) = v47;
        memcpy(v56, v54, 0x14DuLL);
        outlined retain of DateComponents((uint64_t)__dst);
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        outlined retain of DateComponents((uint64_t)__src);
        unint64_t v31 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v56);
        outlined release of Calendar.DatesByAdding((uint64_t)v54);
        unint64_t v32 = *(void *)(v31 + 16);
        char v33 = v22[2];
        char v34 = v33 + v32;
        if (__OFADD__(v33, v32))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }

        char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
        if ((_DWORD)isUniquelyReferenced_nonNull_native && v34 <= v22[3] >> 1)
        {
          if (*(void *)(v31 + 16)) {
            goto LABEL_15;
          }
        }

        else
        {
          if (v33 <= v34) {
            uint64_t v43 = v33 + v32;
          }
          else {
            uint64_t v43 = v33;
          }
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v43,  1,  v22);
          if (*(void *)(v31 + 16))
          {
LABEL_15:
            uint64_t v36 = v22[2];
            if ((v22[3] >> 1) - v36 < v32) {
              goto LABEL_33;
            }
            BOOL v37 = (char *)&v22[v36 + 4];
            uint64_t v38 = (char *)(v31 + 32);
            char v39 = 8 * v32;
            memcpy(v37, v38, v39);
            if (v32)
            {
              unint64_t v40 = v22[2];
              char v41 = __OFADD__(v40, v32);
              uint64_t v42 = v40 + v32;
              if (v41) {
                goto LABEL_34;
              }
              _OWORD v22[2] = v42;
            }

            goto LABEL_26;
          }
        }

        if (v32) {
          goto LABEL_32;
        }
LABEL_26:
        swift_release();
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)__src);
        if (!v21)
        {
          Swift::Int result = swift_bridgeObjectRelease();
          goto LABEL_30;
        }

        memcpy(__dst, (const void *)(v46 + v23), 0x11AuLL);
        v23 += 288LL;
        --v21;
      }
    }

    Swift::Int result = swift_bridgeObjectRelease();
    uint64_t v22 = (void *)MEMORY[0x18961AFE8];
LABEL_30:
    *uint64_t v45 = v22;
  }

  return result;
}

uint64_t getter of weekRange #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( uint64_t a1, __int128 *a2, char a3, char a4, double a5)
{
  if (*(_BYTE *)(a1 + 32) != 1) {
    return *(void *)(a1 + 16);
  }
  char v17 = a3;
  char v16 = a4;
  if (a5 > 1.59271755e13) {
    a5 = 1.59271755e13;
  }
  double v6 = fmax(a5, -2.11845067e11);
  __int128 v18 = *a2;
  uint64_t v7 = *((void *)&v18 + 1);
  uint64_t ObjectType = swift_getObjectType();
  double v15 = v6;
  double v9 = *(uint64_t (**)(void, void, void, void, void))(*((void *)&v18 + 1) + 144LL);
  outlined retain of Locale((uint64_t)&v18);
  uint64_t v10 = v9(&v17, &v16, &v15, ObjectType, v7);
  uint64_t v12 = v11;
  LOBYTE(ObjectType) = v13;
  uint64_t result = outlined release of Locale((uint64_t)&v18);
  if ((ObjectType & 1) == 0)
  {
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = 0;
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t specialized getter of firstWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( _BYTE *a1, __int128 *a2, double a3)
{
  void (*v7)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t result;
  double v9;
  void v10[23];
  char v11;
  uint64_t v12;
  __int128 v13;
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  char v13 = *a2;
  uint64_t v12 = 128LL;
  if (a3 > 1.59271755e13) {
    a3 = 1.59271755e13;
  }
  double v4 = fmax(a3, -2.11845067e11);
  uint64_t v5 = *((void *)&v13 + 1);
  uint64_t ObjectType = swift_getObjectType();
  double v9 = v4;
  uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(*((void *)&v13 + 1) + 192LL);
  outlined retain of Locale((uint64_t)&v13);
  v7(v10, &v12, &v9, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v10);
  outlined release of Locale((uint64_t)&v13);
  if (v11) {
    uint64_t result = 0LL;
  }
  else {
    uint64_t result = v10[22];
  }
  *(void *)a1 = result;
  a1[8] = 0;
  return result;
}

uint64_t specialized getter of lastWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( _BYTE *a1, uint64_t a2, double a3, double a4)
{
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  double v6 = a3 + a4 + -0.1;
  uint64_t v13 = 128LL;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v7 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v10 = v7;
  (*(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v5 + 192))( v11,  &v13,  &v10,  ObjectType,  v5);
  outlined release of DateComponents((uint64_t)v11);
  if (v12) {
    uint64_t result = 0LL;
  }
  else {
    uint64_t result = v11[22];
  }
  *(void *)a1 = result;
  a1[8] = 0;
  return result;
}

uint64_t specialized getter of firstWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( _BYTE *a1, uint64_t a2, __int128 *a3, char a4, char a5, uint64_t a6, _BYTE *a7, double a8, double a9)
{
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  uint64_t v14 = getter of weekRange #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a2, a3, a4, a5, a8);
  BOOL v15 = specialized getter of firstWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a7, a3, a9) > a6;
  uint64_t result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    *(void *)a1 = result;
    a1[8] = 0;
  }

  return result;
}

uint64_t specialized getter of lastWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( _BYTE *a1, uint64_t a2, __int128 *a3, char a4, char a5, uint64_t a6, _BYTE *a7, double a8, double a9, double a10)
{
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  getter of weekRange #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a2, a3, a4, a5, a8);
  uint64_t v17 = v16;
  BOOL v18 = specialized getter of lastWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)( a7,  (uint64_t)a3,  a9,  a10) < a6;
  uint64_t result = v17 - v18;
  if (__OFSUB__(v17, v18))
  {
    __break(1u);
  }

  else
  {
    *(void *)a1 = result;
    a1[8] = 0;
  }

  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  __int128 v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  void *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];
  __int128 v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v2 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  void *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];
  __int128 v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v2 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v2 <= 0)
  {
    uint64_t v3 = (void *)MEMORY[0x18961AFE8];
    unint64_t v6 = *(void *)(MEMORY[0x18961AFE8] + 24LL);
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 1;
    }
    unint64_t v6 = 2 * (v5 >> 5);
    void v3[2] = v2;
    v3[3] = v6;
  }

  NSFastEnumerationIterator.init(_:)((uint64_t)a1, (uint64_t)v39);
  if (v2 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  unint64_t v7 = v6 >> 1;
  uint64_t v8 = v3 + 4;
  if (v2)
  {
    v7 -= v2;
    do
    {
      NSFastEnumerationIterator.next()((uint64_t)&v23);
      if (!*((void *)&v24 + 1)) {
        goto LABEL_38;
      }
      outlined init with take of Any(&v23, v8);
      v8 += 2;
    }

    while (--v2);
  }

  NSFastEnumerationIterator.next()((uint64_t)&v36);
  if (v37)
  {
    while (1)
    {
      outlined init with take of Any(&v36, v38);
      if (!v7)
      {
        unint64_t v9 = v3[3];
        int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1) {
          uint64_t v11 = 1LL;
        }
        else {
          uint64_t v11 = v10;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        char v12 = (void *)swift_allocObject();
        int64_t v13 = _swift_stdlib_malloc_size(v12);
        uint64_t v14 = v13 - 32;
        if (v13 < 32) {
          uint64_t v14 = v13 - 1;
        }
        uint64_t v15 = v14 >> 5;
        void v12[2] = v11;
        v12[3] = 2 * (v14 >> 5);
        unint64_t v16 = (unint64_t)(v12 + 4);
        uint64_t v17 = v3[3] >> 1;
        if (v3[2])
        {
          void v3[2] = 0LL;
        }

        uint64_t v8 = (_OWORD *)(v16 + 32 * v17);
        unint64_t v7 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        swift_release();
        uint64_t v3 = v12;
      }

      BOOL v19 = __OFSUB__(v7--, 1LL);
      if (v19) {
        break;
      }
      outlined init with take of Any(v38, v8);
      v8 += 2;
      NSFastEnumerationIterator.next()((uint64_t)&v36);
      if (!v37) {
        goto LABEL_30;
      }
    }

    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  char *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  id v30;
  id v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v2 = (uint64_t)objc_msgSend(a1, sel_count);
  uint64_t v3 = v2;
  if (v2 <= 0)
  {
    if (v2 < 0)
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }

    int64_t v4 = (char *)MEMORY[0x18961AFE8];
    uint64_t v17 = *(void *)(MEMORY[0x18961AFE8] + 24LL);
    uint64_t v14 = v17 >> 1;
    BOOL v18 = objc_msgSend(a1, sel_firstIndex);
    if (v18 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v16 = v18;
      if (v17 > 1)
      {
        uint64_t v11 = v4 + 32;
        __int128 v29 = __OFSUB__(v14--, 1LL);
        if (!v29)
        {
LABEL_27:
          *(void *)uint64_t v11 = v16;
          __int128 v30 = objc_msgSend(a1, sel_indexGreaterThanIndex_, v16);
          if (v30 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            __int128 v31 = v30;
            while (1)
            {
              if (v14)
              {
                v11 += 8;
                __int128 v29 = __OFSUB__(v14--, 1LL);
                if (v29) {
                  goto LABEL_55;
                }
              }

              else
              {
                __int128 v32 = *((void *)v4 + 3);
                __int128 v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
                if (v33 <= 1) {
                  __int128 v34 = 1LL;
                }
                else {
                  __int128 v34 = v33;
                }
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
                unint64_t v35 = (char *)swift_allocObject();
                __int128 v36 = _swift_stdlib_malloc_size(v35);
                uint64_t v37 = v36 - 32;
                if (v36 < 32) {
                  uint64_t v37 = v36 - 25;
                }
                uint64_t v38 = v37 >> 3;
                *((void *)v35 + 2) = v34;
                *((void *)v35 + 3) = 2 * (v37 >> 3);
                char v39 = (unint64_t)(v35 + 32);
                unint64_t v40 = *((void *)v4 + 3) >> 1;
                if (*((void *)v4 + 2))
                {
                  *((void *)v4 + 2) = 0LL;
                }

                uint64_t v11 = (char *)(v39 + 8 * v40);
                uint64_t v42 = (v38 & 0x7FFFFFFFFFFFFFFFLL) - v40;
                swift_release();
                int64_t v4 = v35;
                __int128 v29 = __OFSUB__(v42, 1LL);
                uint64_t v14 = v42 - 1;
                if (v29) {
                  goto LABEL_55;
                }
              }

              *(void *)uint64_t v11 = v31;
              __int128 v31 = objc_msgSend(a1, sel_indexGreaterThanIndex_, v31);
              if (v31 == (id)0x7FFFFFFFFFFFFFFFLL) {
                goto LABEL_49;
              }
            }
          }

          goto LABEL_49;
        }

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(void *a1)
{
  __int128 v1 = (void *)MEMORY[0x18961AFE8];
  uint64_t v2 = 0LL;
  if (v22)
  {
    uint64_t v3 = (_OWORD *)(MEMORY[0x18961AFE8] + 32LL);
    while (1)
    {
      uint64_t result = (uint64_t)outlined init with take of Any(&v21, v23);
      if (!v2)
      {
        unint64_t v5 = v1[3];
        int64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        if (v6 <= 1) {
          uint64_t v7 = 1LL;
        }
        else {
          uint64_t v7 = v6;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        uint64_t v8 = (void *)swift_allocObject();
        int64_t v9 = _swift_stdlib_malloc_size(v8);
        uint64_t v10 = v9 - 32;
        if (v9 < 32) {
          uint64_t v10 = v9 - 1;
        }
        uint64_t v11 = v10 >> 5;
        uint64_t v8[2] = v7;
        v8[3] = 2 * (v10 >> 5);
        unint64_t v12 = (unint64_t)(v8 + 4);
        uint64_t v13 = v1[3] >> 1;
        if (v1[2])
        {
          v1[2] = 0LL;
        }

        uint64_t v3 = (_OWORD *)(v12 + 32 * v13);
        uint64_t v2 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - v13;
        uint64_t result = swift_release();
        __int128 v1 = v8;
      }

      BOOL v15 = __OFSUB__(v2--, 1LL);
      if (v15) {
        break;
      }
      outlined init with take of Any(v23, v3);
      v3 += 2;
      NSFastEnumerationIterator.next()((uint64_t)&v21);
      if (!v22) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

{
  uint64_t v2;
  void *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  unint64_t v15;
  char *v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t isClassOrObjCExistentialType;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  BOOL v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char **v58;
  _OWORD *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[12];
  _OWORD v74[2];
  uint64_t v2 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v2 <= 0)
  {
    int64_t v60 = (char *)MEMORY[0x18961AFE8];
    int64_t v6 = *(void *)(MEMORY[0x18961AFE8] + 24LL);
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Any, value: Any)>);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    unint64_t v5 = v4 - 32;
    if (v4 < 32) {
      unint64_t v5 = v4 + 31;
    }
    int64_t v6 = 2 * (v5 >> 6);
    void v3[2] = v2;
    v3[3] = v6;
    int64_t v60 = (char *)v3;
  }

  type metadata accessor for NSDictionary.Iterator();
  uint64_t v7 = (_OWORD *)swift_allocObject();
  NSFastEnumerationIterator.init(_:)((uint64_t)a1, (uint64_t)v73);
  uint64_t v8 = v73[11];
  v7[11] = v73[10];
  v7[12] = v8;
  v7[13] = v74[0];
  *(_OWORD *)((char *)v7 + 217) = *(_OWORD *)((char *)v74 + 9);
  int64_t v9 = v73[7];
  v7[7] = v73[6];
  void v7[8] = v9;
  uint64_t v10 = v73[9];
  v7[9] = v73[8];
  v7[10] = v10;
  uint64_t v11 = v73[3];
  __int128 v7[3] = v73[2];
  v7[4] = v11;
  unint64_t v12 = v73[5];
  _OWORD v7[5] = v73[4];
  _OWORD v7[6] = v12;
  uint64_t v13 = v73[1];
  v7[1] = v73[0];
  _OWORD v7[2] = v13;
  if (v2 < 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    uint64_t result = outlined destroy of Any?((uint64_t)&v67, &demangling cache variable for type metadata for Any?);
    unint64_t v69 = 0u;
    int64_t v70 = 0u;
    uint64_t v71 = 0u;
    uint64_t v72 = 0u;
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  unint64_t v59 = v7;
  uint64_t v14 = v7 + 1;
  BOOL v15 = v6 >> 1;
  unint64_t v16 = v60 + 32;
  if (v2)
  {
    v15 -= v2;
    do
    {
      NSFastEnumerationIterator.next()((uint64_t)&v67);
      if (!v68) {
        goto LABEL_51;
      }
      outlined init with take of Any(&v67, &v63);
      uint64_t result = outlined init with copy of Any((uint64_t)&v63, (uint64_t)&v69);
      if (!*v14) {
        goto LABEL_52;
      }
      objc_opt_self();
      uint64_t v18 = (void *)swift_dynamicCastObjCClassUnconditional();
      BOOL v19 = *((void *)&v64 + 1);
      unint64_t v20 = __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
      swift_unknownObjectRetain();
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      if ((isClassOrObjCExistentialType & 1) != 0)
      {
        if (*(void *)(*(void *)(v19 - 8) + 64LL) != 8LL)
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }

        uint64_t v22 = *v20;
        swift_unknownObjectRetain();
      }

      else
      {
        unint64_t v58 = &v57;
        __int128 v27 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
        char v57 = (char *)&v57 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(__n128))(v29 + 16))(v27);
        uint64_t v22 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }

      __int128 v23 = objc_msgSend(v18, sel_objectForKey_, v22);
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      if (!v23) {
        goto LABEL_53;
      }
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
      outlined init with take of Any(&v67, &v71);
      __int128 v24 = v69;
      __int128 v25 = v70;
      __int128 v26 = v72;
      *((_OWORD *)v16 + 2) = v71;
      *((_OWORD *)v16 + 3) = v26;
      *(_OWORD *)unint64_t v16 = v24;
      *((_OWORD *)v16 + 1) = v25;
      v16 += 64;
    }

    while (--v2);
  }

  NSFastEnumerationIterator.next()((uint64_t)&v61);
  if (!v62)
  {
LABEL_41:
    outlined destroy of Any?((uint64_t)&v61, &demangling cache variable for type metadata for Any?);
    unint64_t v63 = 0u;
    int64_t v64 = 0u;
    unint64_t v65 = 0u;
    unint64_t v66 = 0u;
    swift_release();
    outlined destroy of Any?((uint64_t)&v63, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    uint64_t result = (uint64_t)v60;
    uint64_t v54 = *((void *)v60 + 3);
    if (v54 < 2) {
      return result;
    }
    uint64_t v55 = v54 >> 1;
    uint64_t v47 = __OFSUB__(v55, v15);
    int64_t v56 = v55 - v15;
    if (!v47)
    {
      *((void *)v60 + 2) = v56;
      return result;
    }

    goto LABEL_50;
  }

  while (1)
  {
    outlined init with take of Any(&v61, &v67);
    uint64_t result = outlined init with copy of Any((uint64_t)&v67, (uint64_t)&v63);
    if (!*v14) {
      break;
    }
    objc_opt_self();
    __int128 v30 = (void *)swift_dynamicCastObjCClassUnconditional();
    __int128 v31 = v68;
    __int128 v32 = __swift_project_boxed_opaque_existential_1(&v67, v68);
    swift_unknownObjectRetain();
    __int128 v33 = _swift_isClassOrObjCExistentialType();
    if ((v33 & 1) != 0)
    {
      if (*(void *)(*(void *)(v31 - 8) + 64LL) != 8LL) {
        goto LABEL_46;
      }
      __int128 v34 = *v32;
      swift_unknownObjectRetain();
    }

    else
    {
      unint64_t v58 = &v57;
      uint64_t v51 = MEMORY[0x1895F8858](v33);
      char v57 = (char *)&v57 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(__n128))(v53 + 16))(v51);
      __int128 v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }

    unint64_t v35 = objc_msgSend(v30, sel_objectForKey_, v34);
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    if (!v35) {
      goto LABEL_55;
    }
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
    outlined init with take of Any(&v61, &v65);
    unint64_t v69 = v63;
    int64_t v70 = v64;
    uint64_t v71 = v65;
    uint64_t v72 = v66;
    if (!v15)
    {
      __int128 v36 = *((void *)v60 + 3);
      uint64_t v37 = v36 & 0xFFFFFFFFFFFFFFFELL;
      if (v37 <= 1) {
        uint64_t v38 = 1LL;
      }
      else {
        uint64_t v38 = v37;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Any, value: Any)>);
      char v39 = (char *)swift_allocObject();
      unint64_t v40 = _swift_stdlib_malloc_size(v39);
      char v41 = v40 - 32;
      if (v40 < 32) {
        char v41 = v40 + 31;
      }
      uint64_t v42 = v41 >> 6;
      *((void *)v39 + 2) = v38;
      *((void *)v39 + 3) = 2 * (v41 >> 6);
      uint64_t v43 = v60;
      char v44 = v39 + 32;
      uint64_t v45 = *((void *)v60 + 3) >> 1;
      if (*((void *)v60 + 2))
      {
        BOOL v46 = v60 + 32;
        if (v39 != v60 || v44 >= &v46[64 * v45]) {
          memmove(v39 + 32, v46, v45 << 6);
        }
        *((void *)v43 + 2) = 0LL;
      }

      unint64_t v16 = &v44[64 * v45];
      BOOL v15 = (v42 & 0x7FFFFFFFFFFFFFFFLL) - v45;
      swift_release();
      int64_t v60 = v39;
    }

    uint64_t v47 = __OFSUB__(v15--, 1LL);
    if (v47) {
      goto LABEL_47;
    }
    char v48 = v69;
    unint64_t v49 = v70;
    char v50 = v72;
    *((_OWORD *)v16 + 2) = v71;
    *((_OWORD *)v16 + 3) = v50;
    *(_OWORD *)unint64_t v16 = v48;
    *((_OWORD *)v16 + 1) = v49;
    v16 += 64;
    NSFastEnumerationIterator.next()((uint64_t)&v61);
    if (!v62) {
      goto LABEL_41;
    }
  }

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v32[16] = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&v32[32] = v3;
  *(_OWORD *)&v32[48] = *(_OWORD *)(a1 + 104);
  *(void *)&v32[64] = *(void *)(a1 + 120);
  __int128 v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)__int128 v30 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&v30[16] = v4;
  __int128 v5 = *(_OWORD *)(a1 + 56);
  __int128 v31 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)__int128 v32 = v5;
  outlined init with take of Range<Date>?(a1 + 128, (uint64_t)v68);
  v46[0] = v2;
  outlined init with take of Range<Date>?((uint64_t)v68, (uint64_t)v45);
  outlined retain of Calendar.DatesByRecurring(a1);
  Calendar.DatesByRecurring.Iterator.init(start:matching:range:)((uint64_t)v46, (uint64_t)v30, (uint64_t)v45);
  int64_t v6 = (void *)MEMORY[0x18961AFE8];
  if ((v65 & 1) != 0)
  {
    uint64_t v28 = 0LL;
    __int128 v29 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = (double *)(MEMORY[0x18961AFE8] + 32LL);
LABEL_4:
    if (v51 != 1 || v61 < *((uint64_t *)&v50 + 1))
    {
      int64_t v9 = v67;
      do
      {
        if (v9[2])
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            uint64_t v10 = v9[2];
            if (!v10) {
              goto LABEL_46;
            }
          }

          else
          {
            int64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
            uint64_t v10 = v9[2];
            if (!v10) {
              goto LABEL_46;
            }
          }

          uint64_t v11 = v10 - 1;
          double v12 = *(double *)&v9[v11 + 4];
          uint64_t v9[2] = v11;
          uint64_t v67 = v9;
          if (__OFADD__(v61, 1LL))
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }

          ++v61;
          if ((v58 & 1) != 0) {
            goto LABEL_25;
          }
          if (v12 >= *(double *)&v57)
          {
LABEL_25:
            if (!v7)
            {
              unint64_t v14 = v6[3];
              int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
              if (v15 <= 1) {
                uint64_t v16 = 1LL;
              }
              else {
                uint64_t v16 = v15;
              }
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
              unint64_t v17 = (void *)swift_allocObject();
              int64_t v18 = _swift_stdlib_malloc_size(v17);
              uint64_t v19 = v18 - 32;
              if (v18 < 32) {
                uint64_t v19 = v18 - 25;
              }
              uint64_t v20 = v19 >> 3;
              _OWORD v17[2] = v16;
              _OWORD v17[3] = 2 * (v19 >> 3);
              unint64_t v21 = (unint64_t)(v17 + 4);
              uint64_t v22 = v6[3] >> 1;
              if (v6[2])
              {
                __int128 v23 = v6 + 4;
                uint64_t v6[2] = 0LL;
              }

              uint64_t v8 = (double *)(v21 + 8 * v22);
              uint64_t v7 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
              swift_release();
              int64_t v6 = v17;
            }

            BOOL v24 = __OFSUB__(v7--, 1LL);
            if (!v24)
            {
              *v8++ = v12;
              goto LABEL_4;
            }

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 331;
  uint64_t v3 = *(uint64_t *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  __int128 v5 = *(void **)(a1 + 16);
  double v83 = *(double *)(a1 + 32);
  double v84 = *(double *)(a1 + 24);
  int64_t v6 = (const void *)(a1 + 48);
  char v7 = *(_BYTE *)(a1 + 40);
  memcpy(__dst, (const void *)(a1 + 48), 0x11AuLL);
  unsigned __int8 v87 = *(_BYTE *)(a1 + 330);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 331);
  uint64_t v9 = *(unsigned __int8 *)(v2 + 1);
  memcpy(v107, v6, 0x11AuLL);
  double v93 = *(double *)&v3;
  uint64_t v94 = v4;
  uint64_t v86 = v4;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  BOOL v10 = DateComponents._validate(for:)((uint64_t *)&v93);
  uint64_t v11 = v9;
  char v144 = 1;
  char v63 = v7;
  char v143 = v7;
  uint64_t v73 = __dst[0];
  v139[0] = *(_DWORD *)((char *)&__dst[5] + 1);
  *(_DWORD *)((char *)v139 + 3) = HIDWORD(__dst[5]);
  *(_DWORD *)((char *)v138 + 3) = HIDWORD(__dst[7]);
  v138[0] = *(_DWORD *)((char *)&__dst[7] + 1);
  v137[0] = *(_DWORD *)((char *)&__dst[9] + 1);
  *(_DWORD *)((char *)v137 + 3) = HIDWORD(__dst[9]);
  v136[0] = *(_DWORD *)((char *)&__dst[11] + 1);
  *(_DWORD *)((char *)v136 + 3) = HIDWORD(__dst[11]);
  *(_DWORD *)((char *)v135 + 3) = HIDWORD(__dst[13]);
  v135[0] = *(_DWORD *)((char *)&__dst[13] + 1);
  *(_DWORD *)((char *)v134 + 3) = HIDWORD(__dst[15]);
  v134[0] = *(_DWORD *)((char *)&__dst[15] + 1);
  uint64_t v74 = __dst[14];
  uint64_t v75 = __dst[16];
  *(_DWORD *)((char *)v133 + 3) = HIDWORD(__dst[17]);
  v133[0] = *(_DWORD *)((char *)&__dst[17] + 1);
  uint64_t v76 = __dst[18];
  *(_DWORD *)((char *)v132 + 3) = HIDWORD(__dst[19]);
  v132[0] = *(_DWORD *)((char *)&__dst[19] + 1);
  uint64_t v77 = __dst[20];
  *(_DWORD *)((char *)v131 + 3) = HIDWORD(__dst[21]);
  v131[0] = *(_DWORD *)((char *)&__dst[21] + 1);
  uint64_t v78 = __dst[22];
  *(_DWORD *)((char *)v130 + 3) = HIDWORD(__dst[23]);
  v130[0] = *(_DWORD *)((char *)&__dst[23] + 1);
  uint64_t v79 = __dst[24];
  *(_DWORD *)((char *)v129 + 3) = HIDWORD(__dst[25]);
  v129[0] = *(_DWORD *)((char *)&__dst[25] + 1);
  uint64_t v80 = __dst[26];
  *(_DWORD *)((char *)v128 + 3) = HIDWORD(__dst[27]);
  v128[0] = *(_DWORD *)((char *)&__dst[27] + 1);
  uint64_t v81 = __dst[28];
  *(_DWORD *)((char *)v127 + 3) = HIDWORD(__dst[29]);
  v127[0] = *(_DWORD *)((char *)&__dst[29] + 1);
  *(_DWORD *)((char *)v126 + 3) = HIDWORD(__dst[31]);
  v126[0] = *(_DWORD *)((char *)&__dst[31] + 1);
  *(_DWORD *)((char *)v125 + 3) = HIDWORD(__dst[33]);
  v125[0] = *(_DWORD *)((char *)&__dst[33] + 1);
  char v141 = 1;
  char v140 = v7;
  char v124 = v8;
  char v123 = v9;
  char v82 = BYTE1(__dst[35]);
  if (v10)
  {
    uint64_t v64 = 0LL;
    uint64_t v62 = (void *)MEMORY[0x18961AFE8];
    uint64_t v61 = (double *)(MEMORY[0x18961AFE8] + 32LL);
    uint64_t v12 = -1LL;
    char v13 = 1;
    double v14 = 0.0;
    int64_t v15 = v5;
    while (2)
    {
      uint64_t v60 = v12;
      while (1)
      {
        uint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
          __break(1u);
          goto LABEL_38;
        }

        v90[0] = v3;
        v90[1] = v86;
        id v92 = v5;
        memcpy(v107, __dst, 0x11AuLL);
        v106[0] = v87;
        uint64_t v17 = v8;
        v105[0] = v8;
        uint64_t v18 = v11;
        v104[0] = v11;
        unint64_t v91 = v15;
        double v88 = v14;
        LOBYTE(v89) = v13 & 1;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)( (double *)&v92,  v107,  v106,  v105,  v104,  (double *)&v91,  (uint64_t)&v88,  (uint64_t)&v93);
        outlined release of DateComponents((uint64_t)__dst);
        swift_unknownObjectRelease();
        int64_t v15 = v95;
        ++v12;
        uint64_t v8 = v17;
        if (v16 >= 100)
        {
          v90[0] = (uint64_t)v5;
          if (v60 + 1 > 100) {
            uint64_t v16 = v60 + 1;
          }
          else {
            uint64_t v16 = 100LL;
          }
          uint64_t v54 = v86;
          double v93 = *(double *)&v3;
          uint64_t v94 = v86;
          memcpy(v107, __dst, 0x11AuLL);
          LOBYTE(v88) = v11;
          LOBYTE(v92) = v87;
          LOBYTE(v91) = v17;
          _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( v90,  (uint64_t *)&v93,  v107,  (unsigned __int8 *)&v88,  (unsigned __int8 *)&v92,  (unsigned __int8 *)&v91);
          char v82 = BYTE1(__dst[35]);
          uint64_t v53 = __dst[34];
          char v46 = __dst[35];
          uint64_t v52 = __dst[32];
          char v45 = __dst[33];
          uint64_t v55 = __dst[30];
          char v44 = __dst[31];
          char v43 = __dst[29];
          uint64_t v80 = __dst[26];
          uint64_t v81 = __dst[28];
          char v42 = __dst[27];
          char v40 = __dst[25];
          uint64_t v78 = __dst[22];
          uint64_t v79 = __dst[24];
          char v39 = __dst[23];
          char v38 = __dst[21];
          uint64_t v76 = __dst[18];
          uint64_t v77 = __dst[20];
          unsigned __int8 v37 = __dst[19];
          uint64_t v75 = __dst[16];
          unsigned __int8 v35 = __dst[17];
          uint64_t v74 = __dst[14];
          uint64_t v71 = __dst[10];
          uint64_t v72 = __dst[12];
          uint64_t v70 = __dst[8];
          uint64_t v69 = __dst[6];
          uint64_t v68 = __dst[4];
          uint64_t v66 = __dst[2];
          uint64_t v67 = __dst[3];
          uint64_t v73 = __dst[0];
          uint64_t v85 = __dst[1];
          unsigned __int8 v34 = __dst[15];
          char v36 = __dst[13];
          char v41 = __dst[11];
          char v47 = __dst[9];
          char v48 = __dst[7];
          char v49 = __dst[5];
          double v51 = v83;
          double v20 = v84;
          goto LABEL_31;
        }
      }

      double v19 = v93;
      double v20 = v84;
      uint64_t v21 = v64;
      if ((v63 & 1) == 0 && (v93 < v84 || v93 >= v83))
      {
        char v82 = BYTE1(__dst[35]);
        uint64_t v53 = __dst[34];
        char v46 = __dst[35];
        char v45 = __dst[33];
        uint64_t v55 = __dst[30];
        char v44 = __dst[31];
        char v43 = __dst[29];
        uint64_t v80 = __dst[26];
        uint64_t v81 = __dst[28];
        char v42 = __dst[27];
        char v40 = __dst[25];
        uint64_t v78 = __dst[22];
        uint64_t v79 = __dst[24];
        char v39 = __dst[23];
        char v38 = __dst[21];
        uint64_t v76 = __dst[18];
        uint64_t v77 = __dst[20];
        unsigned __int8 v37 = __dst[19];
        uint64_t v75 = __dst[16];
        unsigned __int8 v35 = __dst[17];
        uint64_t v74 = __dst[14];
        uint64_t v71 = __dst[10];
        uint64_t v72 = __dst[12];
        uint64_t v70 = __dst[8];
        uint64_t v69 = __dst[6];
        uint64_t v68 = __dst[4];
        uint64_t v66 = __dst[2];
        uint64_t v67 = __dst[3];
        uint64_t v73 = __dst[0];
        uint64_t v85 = __dst[1];
        unsigned __int8 v34 = __dst[15];
        char v36 = __dst[13];
        char v41 = __dst[11];
        char v47 = __dst[9];
        char v48 = __dst[7];
        char v49 = __dst[5];
        uint64_t v54 = v86;
        double v51 = v83;
        LOBYTE(v8) = v17;
        uint64_t v52 = __dst[32];
LABEL_31:
        __int128 v50 = v62;
        goto LABEL_32;
      }

      char v141 = 0;
      if (!v64)
      {
        unint64_t v22 = v62[3];
        int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1) {
          uint64_t v24 = 1LL;
        }
        else {
          uint64_t v24 = v23;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
        unint64_t v25 = (void *)swift_allocObject();
        int64_t v26 = _swift_stdlib_malloc_size(v25);
        uint64_t v27 = v26 - 32;
        if (v26 < 32) {
          uint64_t v27 = v26 - 25;
        }
        uint64_t v28 = v27 >> 3;
        _OWORD v25[2] = v24;
        v25[3] = 2 * (v27 >> 3);
        unint64_t v29 = (unint64_t)(v25 + 4);
        uint64_t v30 = v62[3] >> 1;
        if (v62[2])
        {
          __int128 v31 = v62 + 4;
          if (v25 != v62 || v29 >= (unint64_t)v31 + 8 * v30)
          {
            uint64_t v65 = v27 >> 3;
            memmove(v25 + 4, v31, 8 * v30);
            unint64_t v29 = (unint64_t)(v25 + 4);
            uint64_t v28 = v65;
          }

          v62[2] = 0LL;
        }

        uint64_t v61 = (double *)(v29 + 8 * v30);
        uint64_t v21 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
        swift_release();
        uint64_t v62 = v25;
        uint64_t v11 = v18;
      }

      BOOL v32 = __OFSUB__(v21, 1LL);
      uint64_t v33 = v21 - 1;
      if (!v32)
      {
        uint64_t v8 = v17;
        uint64_t v64 = v33;
        char v13 = 0;
        *v61++ = v19;
        double v14 = v19;
        uint64_t v12 = v16;
        continue;
      }

      goto LABEL_39;
    }
  }

  uint64_t v64 = 0LL;
  unsigned __int8 v34 = __dst[15] & 1;
  unsigned __int8 v35 = __dst[17] & 1;
  char v36 = __dst[13];
  unsigned __int8 v37 = __dst[19] & 1;
  char v38 = __dst[21] & 1;
  uint64_t v71 = __dst[10];
  uint64_t v72 = __dst[12];
  char v39 = __dst[23] & 1;
  char v40 = __dst[25] & 1;
  char v41 = __dst[11];
  char v42 = __dst[27] & 1;
  char v43 = __dst[29] & 1;
  char v44 = __dst[31] & 1;
  uint64_t v70 = __dst[8];
  char v45 = __dst[33] & 1;
  char v46 = __dst[35] & 1;
  char v47 = __dst[9];
  uint64_t v69 = __dst[6];
  char v48 = __dst[7];
  char v49 = __dst[5];
  uint64_t v68 = __dst[4];
  uint64_t v67 = __dst[3];
  double v14 = 0.0;
  uint64_t v16 = -1LL;
  int64_t v15 = v5;
  uint64_t v66 = __dst[2];
  uint64_t v85 = __dst[1];
  __int128 v50 = (void *)MEMORY[0x18961AFE8];
  double v51 = v83;
  double v20 = v84;
  uint64_t v53 = __dst[34];
  uint64_t v52 = __dst[32];
  uint64_t v54 = v86;
  uint64_t v55 = __dst[30];
LABEL_32:
  LOBYTE(v93) = v49;
  LOBYTE(v90[0]) = v48;
  LOBYTE(v88) = v47;
  LOBYTE(v92) = v41;
  LOBYTE(v91) = v36;
  v106[0] = v34;
  v105[0] = v35;
  v104[0] = v37;
  char v103 = v38;
  char v102 = v39;
  char v101 = v40;
  char v100 = v42;
  char v99 = v43;
  char v98 = v44;
  char v97 = v45;
  char v96 = v46;
  v107[0] = v16;
  *(double *)&v107[1] = v14;
  LOBYTE(v107[2]) = v141;
  v107[3] = v15;
  *(double *)&v107[4] = v20;
  *(double *)&v107[5] = v51;
  LOBYTE(v107[6]) = v140;
  v107[7] = v5;
  v107[8] = v3;
  v107[9] = v54;
  v107[10] = v73;
  v107[11] = v85;
  v107[12] = v66;
  v107[13] = v67;
  v107[14] = v68;
  LOBYTE(v107[15]) = v49;
  v107[16] = v69;
  LOBYTE(v107[17]) = v48;
  v107[18] = v70;
  LOBYTE(v107[19]) = v47;
  v107[20] = v71;
  LOBYTE(v107[21]) = v41;
  v107[22] = v72;
  LOBYTE(v107[23]) = v36;
  v107[24] = v74;
  LOBYTE(v107[25]) = v34;
  v107[26] = v75;
  LOBYTE(v107[27]) = v35;
  v107[28] = v76;
  LOBYTE(v107[29]) = v37;
  v107[30] = v77;
  LOBYTE(v107[31]) = v38;
  v107[32] = v78;
  LOBYTE(v107[33]) = v39;
  v107[34] = v79;
  LOBYTE(v107[35]) = v40;
  v107[36] = v80;
  char v108 = v42;
  uint64_t v109 = v81;
  char v110 = v43;
  uint64_t v111 = v55;
  char v112 = v44;
  uint64_t v113 = v52;
  char v114 = v45;
  uint64_t v115 = v53;
  char v116 = v46;
  char v117 = v82;
  unsigned __int8 v118 = v87;
  char v119 = v8;
  char v120 = v11;
  uint64_t v121 = 100LL;
  char v122 = 1;
  outlined release of Calendar.DatesByMatching.Iterator((uint64_t)v107);
  unint64_t v56 = v50[3];
  if (v56 < 2) {
    return (uint64_t)v50;
  }
  unint64_t v57 = v56 >> 1;
  BOOL v32 = __OFSUB__(v57, v64);
  uint64_t v58 = v57 - v64;
  if (!v32)
  {
    v50[2] = v58;
    return (uint64_t)v50;
  }

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(double *a1)
{
  void (*v42)(double *__return_ptr, _BYTE *, double *, uint64_t, uint64_t, uint64_t);
  _BYTE __src[330];
  char v44;
  char v45;
  uint64_t v46;
  double v47;
  double v48[36];
  _BYTE v49[288];
  _BYTE __dst[296];
  double v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  double v4 = a1[2];
  double v5 = a1[3];
  double v6 = a1[4];
  uint64_t v7 = *((unsigned __int8 *)a1 + 40);
  memcpy(__dst, a1 + 6, 0x11AuLL);
  uint64_t v8 = *((unsigned __int8 *)a1 + 330);
  uint64_t ObjectType = swift_getObjectType();
  char v42 = *(void (**)(double *__return_ptr, _BYTE *, double *, uint64_t, uint64_t, uint64_t))(v3 + 200);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  uint64_t v10 = 0LL;
  double v11 = 1.59271755e13;
  if (v4 <= 1.59271755e13) {
    double v11 = v4;
  }
  double v12 = fmax(v11, -2.11845067e11);
  double v39 = v5;
  double v13 = v5;
  uint64_t v14 = ObjectType;
  int64_t v15 = (void *)MEMORY[0x18961AFE8];
  uint64_t v16 = (double *)(MEMORY[0x18961AFE8] + 32LL);
  double v38 = v6;
  double v17 = v6;
  uint64_t v18 = 1LL;
  unsigned int v41 = v8;
  uint64_t v40 = ObjectType;
  while (1)
  {
    memcpy(v48, __dst, 0x11AuLL);
    DateComponents.scaled(by:)(v18, (uint64_t)__src);
    memcpy(v49, __src, 0x11AuLL);
    memcpy(__src, v49, 0x11AuLL);
    char v47 = v12;
    swift_unknownObjectRetain();
    v42(v48, __src, &v47, v8, v14, v3);
    swift_unknownObjectRelease();
    uint64_t result = outlined release of DateComponents((uint64_t)v49);
    if ((LOBYTE(v48[1]) & 1) != 0
      || (double v20 = v48[0], (v7 & 1) == 0) && (v48[0] >= v13 ? (v21 = v48[0] < v17) : (v21 = 0), !v21))
    {
      *(double *)__int128 __src = v2;
      *(void *)&__src[8] = v3;
      *(double *)&__src[16] = v4;
      *(double *)&_OWORD __src[24] = v39;
      *(double *)&__src[32] = v38;
      __src[40] = v7;
      memcpy(&__src[48], __dst, 0x11AuLL);
      char v44 = v8;
      char v45 = 1;
      char v46 = v18;
      uint64_t result = outlined release of Calendar.DatesByAdding((uint64_t)__src);
      unint64_t v35 = v15[3];
      if (v35 >= 2)
      {
        unint64_t v36 = v35 >> 1;
        BOOL v34 = __OFSUB__(v36, v10);
        uint64_t v37 = v36 - v10;
        if (v34) {
          goto LABEL_34;
        }
        void v15[2] = v37;
      }

      return (uint64_t)v15;
    }

    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (!v10)
    {
      unint64_t v22 = v15[3];
      uint64_t v23 = v7;
      uint64_t v24 = v3;
      int64_t v25 = v22 & 0xFFFFFFFFFFFFFFFELL;
      if (v25 <= 1) {
        uint64_t v26 = 1LL;
      }
      else {
        uint64_t v26 = v25;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
      uint64_t v27 = (void *)swift_allocObject();
      int64_t v28 = _swift_stdlib_malloc_size(v27);
      uint64_t v29 = v28 - 32;
      if (v28 < 32) {
        uint64_t v29 = v28 - 25;
      }
      uint64_t v30 = v29 >> 3;
      _OWORD v27[2] = v26;
      v27[3] = 2 * (v29 >> 3);
      unint64_t v31 = (unint64_t)(v27 + 4);
      uint64_t v32 = v15[3] >> 1;
      if (v15[2])
      {
        uint64_t v33 = v15 + 4;
        void v15[2] = 0LL;
      }

      uint64_t v16 = (double *)(v31 + 8 * v32);
      uint64_t v10 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v32;
      uint64_t result = swift_release();
      int64_t v15 = v27;
      uint64_t v3 = v24;
      uint64_t v7 = v23;
      uint64_t v8 = v41;
      uint64_t v14 = v40;
    }

    BOOL v34 = __OFSUB__(v10--, 1LL);
    if (v34) {
      goto LABEL_32;
    }
    *v16++ = v20;
    ++v18;
  }

  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

char *specialized _copySequenceToContiguousArray<A>(_:)( uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v102 = *MEMORY[0x1895F89C0];
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = 0LL;
  *(void *)(inited + 64) = 0LL;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v9 = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int v9 = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int v9 = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v10 = 3 * v9;
  if ((unsigned __int128)(v9 * (__int128)3LL) >> 64 != (3 * v9) >> 63)
  {
    __break(1u);
    goto LABEL_99;
  }

  if (v10 < -1)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }

  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v10 >= 1024)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      double v17 = (const char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v17, v10 + 1, 1, a1, a2);
      char v19 = v18;
      swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
      {
        MEMORY[0x186E20E60](v17, -1LL, -1LL);
      }

      else
      {
        uint64_t v16 = opendir(v17);
        MEMORY[0x186E20E60](v17, -1LL, -1LL);
        if (v16) {
          goto LABEL_15;
        }
      }

void *specialized _copySequenceToContiguousArray<A>(_:)()
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t started = sysdir_start_search_path_enumeration_private();
  uint64_t v1 = 0LL;
  uint64_t v37 = (void *)MEMORY[0x18961AFE8];
  double v2 = (void *)(MEMORY[0x18961AFE8] + 32LL);
  uint64_t v3 = &off_189C61000;
  double v4 = &selRef_carats;
  double v5 = &selRef_setAllowsExtendedAttributes_;
  while (1)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
    {
      MEMORY[0x1895F8858](isStackAllocationSafe);
      uint64_t v7 = MEMORY[0x186E20FE0](started, v36);
      if (!(_DWORD)v7) {
        goto LABEL_24;
      }
      uint64_t started = v7;
      id v8 = [(id)objc_opt_self() v4[261]];
      id v9 = objc_msgSend(v8, v5[421], v36, strlen(v36));

      id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      if (v1) {
        goto LABEL_20;
      }
      goto LABEL_8;
    }

    double v13 = (const char *)swift_slowAlloc();
    uint64_t v14 = MEMORY[0x186E20FE0](started, v13);
    if (!(_DWORD)v14) {
      break;
    }
    uint64_t started = v14;
    id v15 = [(id)objc_opt_self() v4[261]];
    id v16 = objc_msgSend(v15, v5[421], v13, strlen(v13));

    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v12 = v17;

    MEMORY[0x186E20E60](v13, -1LL, -1LL);
    if (v1) {
      goto LABEL_20;
    }
LABEL_8:
    char v18 = v37;
    unint64_t v19 = v37[3];
    uint64_t v20 = v4;
    BOOL v21 = v3;
    int64_t v22 = v19 & 0xFFFFFFFFFFFFFFFELL;
    if (v22 <= 1) {
      uint64_t v23 = 1LL;
    }
    else {
      uint64_t v23 = v22;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v24 = (void *)swift_allocObject();
    int64_t v25 = _swift_stdlib_malloc_size(v24);
    uint64_t v26 = v25 - 32;
    if (v25 < 32) {
      uint64_t v26 = v25 - 17;
    }
    uint64_t v27 = v26 >> 4;
    v24[2] = v23;
    v24[3] = 2 * (v26 >> 4);
    unint64_t v28 = (unint64_t)(v24 + 4);
    uint64_t v29 = v18[3] >> 1;
    if (v18[2])
    {
      BOOL v30 = v18 + 4;
      void v18[2] = 0LL;
    }

    double v2 = (void *)(v28 + 16 * v29);
    uint64_t v1 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
    swift_release();
    uint64_t v37 = v24;
    uint64_t v3 = v21;
    double v4 = v20;
    double v5 = &selRef_setAllowsExtendedAttributes_;
LABEL_20:
    BOOL v31 = __OFSUB__(v1--, 1LL);
    if (v31)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }

    *double v2 = v10;
    v2[1] = v12;
    v2 += 2;
  }

  MEMORY[0x186E20E60](v13, -1LL, -1LL);
LABEL_24:
  uint64_t result = v37;
  unint64_t v33 = v37[3];
  if (v33 >= 2)
  {
    unint64_t v34 = v33 >> 1;
    BOOL v31 = __OFSUB__(v34, v1);
    uint64_t v35 = v34 - v1;
    if (v31) {
      goto LABEL_30;
    }
    v37[2] = v35;
  }

  return result;
}

void *specialized _copySequenceToContiguousArray<A>(_:)(const char *a1, int a2)
{
  v44[13] = *(char **)MEMORY[0x1895F89C0];
  type metadata accessor for _FTSSequence.Iterator();
  uint64_t inited = swift_initStackObject();
  *(_DWORD *)(inited + 56) = 0;
  uint64_t v5 = MEMORY[0x18961AFE8];
  *(void *)(inited + 64) = MEMORY[0x18961AFE8];
  *(void *)(inited + 72) = v5;
  *(_BYTE *)(inited + 80) = 0;
  *(void *)(inited + 48) = a1;
  memset(&v43, 0, 28);
  memset(&v43.st_atimespec, 0, 112);
  if (lstat(a1, &v43) || (v44[0] = (char *)a1, v44[1] = 0LL, (id v10 = fts_open(v44, a2, 0LL)) == 0LL))
  {
    unsigned int v6 = MEMORY[0x186E1B0E8]();
    uint64_t v8 = String.init(cString:)();
    char v9 = 1;
    id v10 = (FTS *)v6;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
    char v9 = 0;
  }

  *(void *)(inited + 16) = v10;
  *(void *)(inited + 24) = v8;
  *(void *)(inited + 32) = v7;
  *(_BYTE *)(inited + 40) = v9;
  uint64_t v11 = _FTSSequence.Iterator.next()();
  id v15 = (void *)MEMORY[0x18961AFE8];
  if (v14 != -1)
  {
    uint64_t v16 = v11;
    uint64_t v17 = v12;
    uint64_t v18 = v13;
    char v19 = v14;
    uint64_t v20 = 0LL;
    uint64_t v21 = MEMORY[0x18961AFE8] + 32LL;
    uint64_t v42 = inited;
    while (1)
    {
      if (!v20)
      {
        unint64_t v22 = v15[3];
        int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1) {
          uint64_t v24 = 1LL;
        }
        else {
          uint64_t v24 = v23;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_FTSSequence.Element>);
        int64_t v25 = (void *)swift_allocObject();
        int64_t v26 = _swift_stdlib_malloc_size(v25);
        uint64_t v27 = v26 - 32;
        if (v26 < 32) {
          uint64_t v27 = v26 - 1;
        }
        uint64_t v28 = v27 >> 5;
        _OWORD v25[2] = v24;
        v25[3] = 2 * (v27 >> 5);
        unint64_t v29 = (unint64_t)(v25 + 4);
        uint64_t v30 = v15[3] >> 1;
        size_t v31 = 32 * v30;
        if (v15[2])
        {
          void v15[2] = 0LL;
        }

        uint64_t v21 = v29 + v31;
        uint64_t v20 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
        swift_release();
        id v15 = v25;
        uint64_t inited = v42;
      }

      BOOL v33 = __OFSUB__(v20--, 1LL);
      if (v33) {
        break;
      }
      *(void *)uint64_t v21 = v16;
      *(void *)(v21 + 8) = v17;
      *(void *)(v21 + 16) = v18;
      *(_BYTE *)(v21 + 24) = v19 & 1;
      v21 += 32LL;
      uint64_t v16 = _FTSSequence.Iterator.next()();
      uint64_t v17 = v34;
      uint64_t v18 = v35;
      char v19 = v36;
      if (v36 == -1) {
        goto LABEL_27;
      }
    }

    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }

  uint64_t v20 = 0LL;
LABEL_27:
  swift_setDeallocating();
  uint64_t v37 = *(FTS **)(inited + 16);
  if (*(_BYTE *)(inited + 40)) {
    outlined consume of _FTSSequence.Iterator.State( (uint64_t)v37,  *(void *)(inited + 24),  *(void *)(inited + 32),  *(_BYTE *)(inited + 40));
  }
  else {
    fts_close(v37);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v38 = v15[3];
  if (v38 >= 2)
  {
    unint64_t v39 = v38 >> 1;
    BOOL v33 = __OFSUB__(v39, v20);
    uint64_t v40 = v39 - v20;
    if (v33) {
      goto LABEL_36;
    }
    void v15[2] = v40;
  }

  return v15;
}

void *specialized _copySequenceToContiguousArray<A>(_:)( uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, void *))
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  swift_retain();
  uint64_t started = sysdir_start_search_path_enumeration_private();
  uint64_t v5 = 0LL;
  unsigned int v6 = (void *)MEMORY[0x18961AFE8];
  uint64_t v7 = MEMORY[0x18961AFE8] + 32LL;
  uint64_t v36 = 32LL;
  while (1)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (!(_DWORD)isStackAllocationSafe) {
      break;
    }
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v9 = MEMORY[0x186E20FE0](started, v35);
    if (!(_DWORD)v9) {
      goto LABEL_22;
    }
    uint64_t started = v9;
    id v10 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v11 = objc_msgSend(v10, sel_stringWithFileSystemRepresentation_length_, v35, strlen(v35));

    id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

LABEL_7:
    v38[0] = v12;
    v38[1] = v14;
    a3(&v39, v38);
    swift_bridgeObjectRelease();
    uint64_t v20 = v39;
    __int128 v21 = v40;
    if (!v5)
    {
      unint64_t v22 = v6[3];
      __int128 v37 = v40;
      int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
      if (v23 <= 1) {
        uint64_t v24 = 1LL;
      }
      else {
        uint64_t v24 = v23;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      int64_t v25 = (void *)swift_allocObject();
      uint64_t v26 = (uint64_t)(_swift_stdlib_malloc_size(v25) - 32) / 24;
      _OWORD v25[2] = v24;
      v25[3] = 2 * v26;
      unint64_t v27 = (unint64_t)(v25 + 4);
      uint64_t v28 = v6[3] >> 1;
      if (v6[2])
      {
        unint64_t v29 = v6 + 4;
        uint64_t v6[2] = 0LL;
      }

      uint64_t v7 = v27 + 24 * v28;
      uint64_t v5 = (v26 & 0x7FFFFFFFFFFFFFFFLL) - v28;
      swift_release();
      unsigned int v6 = v25;
      __int128 v21 = v37;
    }

    BOOL v30 = __OFSUB__(v5--, 1LL);
    if (v30)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
    }

    *(void *)uint64_t v7 = v20;
    *(_OWORD *)(v7 + 8) = v21;
    v7 += 24LL;
  }

  id v15 = (const char *)swift_slowAlloc();
  uint64_t v16 = MEMORY[0x186E20FE0](started, v15);
  if ((_DWORD)v16)
  {
    uint64_t started = v16;
    id v17 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v18 = objc_msgSend(v17, sel_stringWithFileSystemRepresentation_length_, v15, strlen(v15));

    id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v14 = v19;

    MEMORY[0x186E20E60](v15, -1LL, -1LL);
    goto LABEL_7;
  }

  MEMORY[0x186E20E60](v15, -1LL, -1LL);
LABEL_22:
  swift_release();
  unint64_t v31 = v6[3];
  if (v31 >= 2)
  {
    unint64_t v32 = v31 >> 1;
    BOOL v30 = __OFSUB__(v32, v5);
    uint64_t v33 = v32 - v5;
    if (v30) {
      goto LABEL_28;
    }
    uint64_t v6[2] = v33;
  }

  return v6;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  double v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v80 = 0LL;
      uint64_t v81 = *v2;
      for (uint64_t i = 1LL; i != v3; ++i)
      {
        double v83 = *(double *)(v81 + 8 * i);
        uint64_t v84 = v80;
        do
        {
          uint64_t v85 = v81 + 8 * v84;
          if (!v81) {
            goto LABEL_140;
          }
          *(void *)(v85 + 8) = *(void *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }

        while (v84 != -1);
        ++v80;
      }
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v97 = result;
  Swift::Int v98 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x18961AFE8];
    __dst = (double *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      id v11 = (char *)MEMORY[0x18961AFE8];
LABEL_102:
      uint64_t v96 = v8;
      if (v12 >= 2)
      {
        uint64_t v86 = *v2;
        do
        {
          unint64_t v87 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_131;
          }
          if (!v86) {
            goto LABEL_144;
          }
          uint64_t v88 = v11;
          uint64_t v89 = v11 + 32;
          uint64_t v90 = *(void *)&v11[16 * v87 + 32];
          uint64_t v91 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)( (double *)(v86 + 8 * v90),  (double *)(v86 + 8LL * *(void *)&v89[16 * v12 - 16]),  v86 + 8 * v91,  __dst);
          if (v1) {
            break;
          }
          if (v91 < v90) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_133;
          }
          uint64_t v92 = &v88[16 * v87 + 32];
          *(void *)uint64_t v92 = v90;
          *((void *)v92 + 1) = v91;
          unint64_t v93 = *((void *)v88 + 2);
          if (v12 > v93) {
            goto LABEL_134;
          }
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          id v11 = v88;
          *((void *)v88 + 2) = v93 - 1;
          unint64_t v12 = v93 - 1;
        }

        while (v93 > 2);
      }

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  Swift::Int v18;
  Swift::Int v19;
  char v20;
  Swift::Int v21;
  _BYTE *v22;
  unsigned int v23;
  Swift::Int v24;
  _BYTE *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  Swift::Int v94;
  Swift::Int v95;
  uint64_t v96;
  unsigned __int8 *__dst;
  double v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      unint64_t v78 = 0LL;
      __darwin_ino64_t v79 = *v2;
      for (uint64_t i = 1LL; i != v3; ++i)
      {
        uint64_t v81 = *(unsigned __int8 *)(v79 + i);
        unint64_t v82 = v78;
        do
        {
          double v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(_BYTE *)(v79 + v82 + 1) = v83;
          *(_BYTE *)(v79 + v82--) = v81;
        }

        while (v82 != -1);
        ++v78;
      }
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  uint64_t v94 = result;
  uint64_t v95 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x18961AFE8];
    __dst = (unsigned __int8 *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      id v11 = (char *)MEMORY[0x18961AFE8];
LABEL_103:
      unint64_t v93 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          uint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          unint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)( (unsigned __int8 *)(v84 + v88),  (unsigned __int8 *)(v84 + *(void *)&v87[16 * v12 - 16]),  v84 + v89,  __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          uint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          id v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }

        while (v91 > 2);
      }

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  Swift::Int v18;
  Swift::Int v19;
  char v20;
  Swift::Int v21;
  _BYTE *v22;
  unsigned int v23;
  Swift::Int v24;
  _BYTE *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  Swift::Int v94;
  Swift::Int v95;
  uint64_t v96;
  unsigned __int8 *__dst;
  double v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      unint64_t v78 = 0LL;
      __darwin_ino64_t v79 = *v2;
      for (uint64_t i = 1LL; i != v3; ++i)
      {
        uint64_t v81 = *(unsigned __int8 *)(v79 + i);
        unint64_t v82 = v78;
        do
        {
          double v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(_BYTE *)(v79 + v82 + 1) = v83;
          *(_BYTE *)(v79 + v82--) = v81;
        }

        while (v82 != -1);
        ++v78;
      }
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  uint64_t v94 = result;
  uint64_t v95 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x18961AFE8];
    __dst = (unsigned __int8 *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      id v11 = (char *)MEMORY[0x18961AFE8];
LABEL_103:
      unint64_t v93 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          uint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          unint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)( (unsigned __int8 *)(v84 + v88),  (unsigned __int8 *)(v84 + *(void *)&v87[16 * v12 - 16]),  v84 + v89,  __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          uint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          id v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }

        while (v91 > 2);
      }

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)( double *__src, double *a2, unint64_t a3, double *__dst)
{
  double v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  uint64_t v13 = v12 >> 3;
  uint64_t v24 = __src;
  Swift::Int v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      double v16 = &v4[v13];
      uint64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        double v17 = (double *)(a3 - 8);
        while (1)
        {
          id v18 = v17 + 1;
          Swift::Int v19 = v6 - 1;
          double v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *double v17 = *(v16 - 1);
            }
            --v16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }

          else
          {
            if (v18 != v6 || v17 >= v6) {
              *double v17 = v20;
            }
            uint64_t v24 = --v6;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }

          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }

      goto LABEL_42;
    }
  }

  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    double v14 = &v4[v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *uint64_t v7 = *v4;
          }
          Swift::Int v23 = ++v4;
          double v15 = v6;
        }

        else
        {
          double v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *uint64_t v7 = *v6;
          }
        }

        ++v7;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }

      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)( void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7]) {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }

  return result;
}

{
  char *v3;
  int64_t v4;
  char *result;
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    if (result != v3 || result >= &v3[v4]) {
      return (char *)memmove(result, v3, v4);
    }
  }

  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -56)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6]) {
      return (char *)memmove(result, v3, 56 * v6);
    }
  }

  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -48)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = 48 * (v4 / 48);
    if (result != v3 || result >= &v3[v6]) {
      return (char *)memmove(result, v3, v6);
    }
  }

  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6]) {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }

  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7]) {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }

  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 3;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -4)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 2;
    if (result != v3 || result >= &v3[4 * v7]) {
      return (char *)memmove(result, v3, 4 * v7);
    }
  }

  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(a1 + 16),  0,  (char *)a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  a1[2],  0,  a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  a1[2],  0,  a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  a1[2],  0,  a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  a1[2],  0,  a1);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  void (*v13)(void *__return_ptr, uint64_t *, __int128 *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  __int128 v25;
  void v26[36];
  void v27[36];
  void __dst[36];
  uint64_t v29;
  void __src[37];
  uint64_t v31;
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return MEMORY[0x18961AFE8];
  }
  unint64_t v5 = 0LL;
  uint64_t v22 = result + 32;
  double v20 = (unsigned __int8 *)(a3 + 40);
  uint64_t v6 = MEMORY[0x18961AFE8];
  __int128 v21 = *(void *)(result + 16);
  do
  {
    if (v5 <= v3) {
      unint64_t v7 = v3;
    }
    else {
      unint64_t v7 = v5;
    }
    uint64_t v24 = v7;
    while (1)
    {
      if (v5 == v24)
      {
        __break(1u);
        return result;
      }

      double v8 = *(double *)(v22 + 8 * v5);
      uint64_t v9 = *(void *)(a2 + 8);
      unint64_t v29 = 4LL;
      double v10 = v8 <= 1.59271755e13 ? v8 : 1.59271755e13;
      double v11 = fmax(v10, -2.11845067e11);
      uint64_t ObjectType = swift_getObjectType();
      *(double *)unint64_t v27 = v11;
      uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t *, __int128 *, uint64_t, uint64_t))(v9 + 192);
      swift_unknownObjectRetain();
      v13(__src, &v29, (__int128 *)v27, ObjectType, v9);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      swift_unknownObjectRelease();
      double v14 = LOBYTE(__dst[9]) ? 0LL : __dst[8];
      v26[0] = 4LL;
      *(double *)&double v25 = v11;
      v13(v27, v26, &v25, ObjectType, v9);
      ++v5;
      memcpy(v26, v27, 0x11AuLL);
      uint64_t result = outlined release of DateComponents((uint64_t)v26);
      double v15 = *(void *)(a3 + 16);
      if (v15) {
        break;
      }
LABEL_7:
      if (v5 == v21) {
        return v6;
      }
    }

    double v16 = v20;
    while (1)
    {
      double v17 = *((void *)v16 - 1) != v14 || BYTE1(v26[35]) == 2;
      if (!v17 && ((((v26[35] & 0x100LL) == 0) ^ *v16) & 1) != 0) {
        break;
      }
      v16 += 16;
      if (!--v15) {
        goto LABEL_7;
      }
    }

    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v31 = v6;
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      uint64_t v6 = v31;
    }

    Swift::Int v19 = *(void *)(v6 + 16);
    id v18 = *(void *)(v6 + 24);
    if (v19 >= v18 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v18 > 1,  v19 + 1,  1);
      uint64_t v6 = v31;
    }

    *(void *)(v6 + 16) = v19 + 1;
    *(double *)(v6 + 8 * v19 + 32) = v8;
    unint64_t v3 = v21;
  }

  while (v5 != v21);
  return v6;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = 0LL;
  unint64_t v7 = (void *)MEMORY[0x18961AFE8];
  while (1)
  {
    uint64_t v24 = *(void *)(a1 + 8 * v6 + 32);
    closure #2 in Calendar.RecurrenceRule._expandWeeks(dates:anchor:)((double *)&v24, a2, a3, &v23);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }

    uint64_t v8 = v23;
    uint64_t v9 = *(void *)(v23 + 16);
    int64_t v10 = v7[2];
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v11 <= v7[3] >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v10 <= v11) {
        int64_t v13 = v10 + v9;
      }
      else {
        int64_t v13 = v10;
      }
      unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)isUniquelyReferenced_nonNull_native,  v13,  1,  v7);
      if (*(void *)(v8 + 16))
      {
LABEL_15:
        uint64_t v14 = v7[2];
        if ((v7[3] >> 1) - v14 < v9) {
          goto LABEL_30;
        }
        double v15 = &v7[v14 + 4];
        memcpy(v15, (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          uint64_t v17 = v7[2];
          BOOL v18 = __OFADD__(v17, v9);
          uint64_t v19 = v17 + v9;
          if (v18) {
            goto LABEL_31;
          }
          _OWORD v7[2] = v19;
        }

        goto LABEL_4;
      }
    }

    if (v9) {
      goto LABEL_29;
    }
LABEL_4:
    ++v6;
    swift_bridgeObjectRelease();
    if (v4 == v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule((uint64_t)a2);
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)( uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t))
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    unint64_t v8 = 0LL;
    uint64_t v9 = MEMORY[0x18961AFE8];
    while (v8 < *(void *)(v4 + 16))
    {
      uint64_t v12 = *(void *)(v4 + 8 * v8 + 32);
      uint64_t v13 = v12;
      uint64_t result = a3(&v13, a2);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }

      if ((result & 1) != 0)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = v9;
        if ((result & 1) == 0)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v9 + 16) + 1LL,  1);
          uint64_t v9 = v14;
        }

        unint64_t v11 = *(void *)(v9 + 16);
        unint64_t v10 = *(void *)(v9 + 24);
        if (v11 >= v10 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v10 > 1,  v11 + 1,  1);
          uint64_t v9 = v14;
        }

        *(void *)(v9 + 16) = v11 + 1;
        *(void *)(v9 + 8 * v11 + 32) = v12;
      }

      if (v5 == ++v8) {
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
LABEL_14:
    swift_bridgeObjectRelease();
    return v9;
  }

  return result;
}

Swift::Int specialized _ArrayProtocol.filter(_:)(Swift::Int result, uint64_t a2, __int128 *a3)
{
  Swift::Int v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    unint64_t v8 = 0LL;
    uint64_t v9 = MEMORY[0x18961AFE8];
    while (v8 < *(void *)(v4 + 16))
    {
      uint64_t v12 = *(void *)(v4 + 8 * v8 + 32);
      uint64_t v13 = v12;
      uint64_t result = closure #1 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)( (double *)&v13,  a2,  a3);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }

      if ((result & 1) != 0)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = v9;
        if ((result & 1) == 0)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v9 + 16) + 1LL,  1);
          uint64_t v9 = v14;
        }

        unint64_t v11 = *(void *)(v9 + 16);
        unint64_t v10 = *(void *)(v9 + 24);
        if (v11 >= v10 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v10 > 1,  v11 + 1,  1);
          uint64_t v9 = v14;
        }

        *(void *)(v9 + 16) = v11 + 1;
        *(void *)(v9 + 8 * v11 + 32) = v12;
      }

      if (v5 == ++v8) {
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
LABEL_14:
    swift_bridgeObjectRelease();
    return v9;
  }

  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t *a2, unsigned __int8 a3)
{
  void (*v10)(void *__return_ptr, void *, double *, uint64_t, uint64_t);
  double v11;
  double v12;
  uint64_t v13;
  void (*v14)(double *__return_ptr, uint64_t, uint64_t);
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  double v22[3];
  void __dst[36];
  void __src[37];
  if (*(void *)(a1 + 16))
  {
    double v20 = a3;
    int v3 = a3;
    double v4 = *(double *)(a1 + 32);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    __dst[0] = qword_1837AA7B8[(char)a3];
    if (v4 <= 1.59271755e13) {
      double v7 = v4;
    }
    else {
      double v7 = 1.59271755e13;
    }
    double v8 = fmax(v7, -2.11845067e11);
    uint64_t ObjectType = swift_getObjectType();
    v22[0] = v8;
    unint64_t v10 = *(void (**)(void *__return_ptr, void *, double *, uint64_t, uint64_t))(v6 + 192);
    swift_unknownObjectRetain();
    v10(__src, __dst, v22, ObjectType, v6);
    if (v3 == 14)
    {
      __src[0] = v5;
      __src[1] = v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      unint64_t v11 = *(double *)&__src[2];
      if (__src[2])
      {
        uint64_t v12 = *(double *)&__src[3];
        __dst[0] = __src[2];
        __dst[1] = __src[3];
        uint64_t v13 = swift_getObjectType();
        uint64_t v14 = *(void (**)(double *__return_ptr, uint64_t, uint64_t))(v6 + 48);
        swift_unknownObjectRetain();
        v14(v22, v13, v6);
        __int128 v21 = *(_OWORD *)v22;
        double v15 = specialized static TimeZone.== infix(_:_:)((uint64_t)__dst, (uint64_t)&v21);
        swift_unknownObjectRelease();
        if ((v15 & 1) != 0)
        {
          swift_unknownObjectRelease();
        }

        else
        {
          __dst[0] = 0LL;
          __dst[1] = 0LL;
          v22[0] = v11;
          v22[1] = v12;
          double v16 = (*(uint64_t (**)(void *, double *, void, uint64_t, void, uint64_t, uint64_t, uint64_t))(v6 + 112))( __dst,  v22,  0LL,  1LL,  0LL,  1LL,  v13,  v6);
          BOOL v18 = v17;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          __src[0] = v16;
          __src[1] = v18;
        }
      }
    }

    memcpy(__dst, __src, 0x11AuLL);
    outlined release of DateComponents((uint64_t)__dst);
    swift_unknownObjectRelease();
    __asm { BR              X11 }
  }

  return MEMORY[0x18961AFE8];
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, double *a2)
{
  unint64_t v3 = 0LL;
  unint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = result + 32;
  uint64_t v6 = MEMORY[0x18961AFE8];
LABEL_2:
  if (v3 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v3;
  }
  while (1)
  {
    if (v4 == v3) {
      return v6;
    }
    if (v7 == v3) {
      break;
    }
    double v8 = *(double *)(v5 + 8 * v3++);
    if (v8 >= *a2)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      }
      unint64_t v10 = *(void *)(v6 + 16);
      unint64_t v9 = *(void *)(v6 + 24);
      if (v10 >= v9 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v9 > 1,  v10 + 1,  1);
      }
      *(void *)(v6 + 16) = v10 + 1;
      *(double *)(v6 + 8 * v10 + 32) = v8;
      goto LABEL_2;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = 0LL;
  double v8 = (void *)MEMORY[0x18961AFE8];
  while (1)
  {
    uint64_t v26 = *(void *)(a1 + 8 * v7 + 32);
    closure #3 in Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)( (double *)&v26,  a2,  a3,  a4,  &v25);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }

    uint64_t v9 = v25;
    uint64_t v10 = *(void *)(v25 + 16);
    int64_t v11 = v8[2];
    int64_t v12 = v11 + v10;
    if (__OFADD__(v11, v10)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v12 <= v8[3] >> 1)
    {
      if (*(void *)(v9 + 16)) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v11 <= v12) {
        int64_t v14 = v11 + v10;
      }
      else {
        int64_t v14 = v11;
      }
      double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)isUniquelyReferenced_nonNull_native,  v14,  1,  v8);
      if (*(void *)(v9 + 16))
      {
LABEL_15:
        uint64_t v15 = v8[2];
        if ((v8[3] >> 1) - v15 < v10) {
          goto LABEL_30;
        }
        double v16 = &v8[v15 + 4];
        memcpy(v16, (const void *)(v9 + 32), 8 * v10);
        if (v10)
        {
          uint64_t v18 = v8[2];
          BOOL v19 = __OFADD__(v18, v10);
          uint64_t v20 = v18 + v10;
          if (v19) {
            goto LABEL_31;
          }
          uint64_t v8[2] = v20;
        }

        goto LABEL_4;
      }
    }

    if (v10) {
      goto LABEL_29;
    }
LABEL_4:
    ++v7;
    swift_bridgeObjectRelease();
    if (v5 == v7)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule(a2);
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = 0LL;
  double v8 = (void *)MEMORY[0x18961AFE8];
  while (1)
  {
    *(Foundation::Date *)&v26._time = *(Foundation::Date *)(a1 + 8 * v7 + 32);
    closure #2 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)( &v26._time,  a2,  a3,  a4,  &v25,  v26);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }

    uint64_t v9 = v25;
    uint64_t v10 = *(void *)(v25 + 16);
    int64_t v11 = v8[2];
    int64_t v12 = v11 + v10;
    if (__OFADD__(v11, v10)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v12 <= v8[3] >> 1)
    {
      if (*(void *)(v9 + 16)) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v11 <= v12) {
        int64_t v14 = v11 + v10;
      }
      else {
        int64_t v14 = v11;
      }
      double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)isUniquelyReferenced_nonNull_native,  v14,  1,  v8);
      if (*(void *)(v9 + 16))
      {
LABEL_15:
        uint64_t v15 = v8[2];
        if ((v8[3] >> 1) - v15 < v10) {
          goto LABEL_30;
        }
        double v16 = &v8[v15 + 4];
        memcpy(v16, (const void *)(v9 + 32), 8 * v10);
        if (v10)
        {
          uint64_t v18 = v8[2];
          BOOL v19 = __OFADD__(v18, v10);
          uint64_t v20 = v18 + v10;
          if (v19) {
            goto LABEL_31;
          }
          uint64_t v8[2] = v20;
        }

        goto LABEL_4;
      }
    }

    if (v10) {
      goto LABEL_29;
    }
LABEL_4:
    ++v7;
    swift_bridgeObjectRelease();
    if (v5 == v7)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule((uint64_t)a2);
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of Calendar.RecurrenceRule(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Calendar.RecurrenceRule(uint64_t a1)
{
  return a1;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = 0LL;
  uint64_t v7 = (void *)MEMORY[0x18961AFE8];
  while (1)
  {
    uint64_t v24 = *(void *)(a1 + 8 * v6 + 32);
    closure #3 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)( (double *)&v24,  a2,  a3,  &v23);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }

    uint64_t v8 = v23;
    uint64_t v9 = *(void *)(v23 + 16);
    int64_t v10 = v7[2];
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v11 <= v7[3] >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v10 <= v11) {
        int64_t v13 = v10 + v9;
      }
      else {
        int64_t v13 = v10;
      }
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)isUniquelyReferenced_nonNull_native,  v13,  1,  v7);
      if (*(void *)(v8 + 16))
      {
LABEL_15:
        uint64_t v14 = v7[2];
        if ((v7[3] >> 1) - v14 < v9) {
          goto LABEL_30;
        }
        uint64_t v15 = &v7[v14 + 4];
        memcpy(v15, (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          uint64_t v17 = v7[2];
          BOOL v18 = __OFADD__(v17, v9);
          uint64_t v19 = v17 + v9;
          if (v18) {
            goto LABEL_31;
          }
          _OWORD v7[2] = v19;
        }

        goto LABEL_4;
      }
    }

    if (v9) {
      goto LABEL_29;
    }
LABEL_4:
    ++v6;
    swift_bridgeObjectRelease();
    if (v4 == v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule(a2);
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  int64_t v11 = (void *)MEMORY[0x18961AFE8];
  while (1)
  {
    closure #2 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(a2, a3, &v25, a4, a5);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v11;
    }

    uint64_t v12 = v25;
    uint64_t v13 = *(void *)(v25 + 16);
    int64_t v14 = v11[2];
    int64_t v15 = v14 + v13;
    if (__OFADD__(v14, v13)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v15 <= v11[3] >> 1)
    {
      if (*(void *)(v12 + 16)) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v14 <= v15) {
        int64_t v17 = v14 + v13;
      }
      else {
        int64_t v17 = v14;
      }
      int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)isUniquelyReferenced_nonNull_native,  v17,  1,  v11);
      if (*(void *)(v12 + 16))
      {
LABEL_15:
        uint64_t v18 = v11[2];
        if ((v11[3] >> 1) - v18 < v13) {
          goto LABEL_30;
        }
        uint64_t v19 = &v11[v18 + 4];
        memcpy(v19, (const void *)(v12 + 32), 8 * v13);
        if (v13)
        {
          uint64_t v21 = v11[2];
          BOOL v22 = __OFADD__(v21, v13);
          uint64_t v23 = v21 + v13;
          if (v22) {
            goto LABEL_31;
          }
          uint64_t v11[2] = v23;
        }

        goto LABEL_4;
      }
    }

    if (v13) {
      goto LABEL_29;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v11;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule(a3);
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, __int128 *a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (void *)MEMORY[0x18961AFE8];
  }
  uint64_t v7 = *(void *)(a2 + 272);
  int v62 = *(unsigned __int8 *)(a2 + 280);
  uint64_t v50 = *(void *)(a2 + 256);
  int v61 = *(unsigned __int8 *)(a2 + 264);
  uint64_t v49 = *(void *)(a2 + 240);
  char v48 = *(_BYTE *)(a2 + 248);
  uint64_t v47 = *(void *)(a2 + 224);
  char v46 = *(_BYTE *)(a2 + 232);
  uint64_t v45 = *(void *)(a2 + 208);
  char v44 = *(_BYTE *)(a2 + 216);
  uint64_t v43 = *(void *)(a2 + 192);
  char v42 = *(_BYTE *)(a2 + 200);
  uint64_t v41 = *(void *)(a2 + 176);
  char v40 = *(_BYTE *)(a2 + 184);
  uint64_t v39 = *(void *)(a2 + 160);
  char v38 = *(_BYTE *)(a2 + 168);
  uint64_t v37 = *(void *)(a2 + 144);
  char v36 = *(_BYTE *)(a2 + 152);
  uint64_t v35 = *(void *)(a2 + 128);
  char v34 = *(_BYTE *)(a2 + 136);
  uint64_t v33 = *(void *)(a2 + 112);
  char v32 = *(_BYTE *)(a2 + 120);
  uint64_t v31 = *(void *)(a2 + 96);
  char v30 = *(_BYTE *)(a2 + 104);
  uint64_t v29 = *(void *)(a2 + 80);
  char v28 = *(_BYTE *)(a2 + 88);
  uint64_t v27 = *(void *)(a2 + 48);
  __int128 v60 = *a3;
  char v25 = *(_BYTE *)(a2 + 56);
  char v26 = *((_BYTE *)a3 + 16);
  uint64_t v24 = *(void *)(a2 + 32);
  char v23 = *(_BYTE *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v21 = *(void *)(a2 + 24);
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v20 = *(void *)a2;
  uint64_t v9 = (_BYTE *)(swift_bridgeObjectRetain() + 40);
  uint64_t v10 = v4 - 1;
  int64_t v11 = (void *)MEMORY[0x18961AFE8];
  uint64_t v19 = v7;
  while (1)
  {
    uint64_t v12 = *((void *)v9 - 1);
    BOOL v13 = v12 == 0x7FFFFFFFFFFFFFFFLL;
    if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v12 = 0LL;
    }
    __src[8] = v12;
    char v14 = v13;
    LOBYTE(__src[9]) = v14;
    BYTE1(__src[35]) = *v9;
    __src[0] = v20;
    __src[1] = v8;
    __src[2] = v22;
    __src[3] = v21;
    __src[4] = v24;
    LOBYTE(__src[5]) = v23;
    __src[6] = v27;
    LOBYTE(__src[7]) = v25;
    __src[10] = v29;
    LOBYTE(__src[11]) = v28;
    __src[12] = v31;
    LOBYTE(__src[13]) = v30;
    __src[14] = v33;
    LOBYTE(__src[15]) = v32;
    __src[16] = v35;
    LOBYTE(__src[17]) = v34;
    _OWORD __src[18] = v37;
    LOBYTE(__src[19]) = v36;
    __src[20] = v39;
    LOBYTE(__src[21]) = v38;
    __src[22] = v41;
    LOBYTE(__src[23]) = v40;
    _OWORD __src[24] = v43;
    LOBYTE(__src[25]) = v42;
    __src[26] = v45;
    LOBYTE(__src[27]) = v44;
    __src[28] = v47;
    LOBYTE(__src[29]) = v46;
    __src[30] = v49;
    LOBYTE(__src[31]) = v48;
    __src[32] = v50;
    LOBYTE(__src[33]) = v61;
    __src[34] = v7;
    LOBYTE(__src[35]) = v62;
    uint64_t v57 = 0LL;
    char v58 = 1;
    __int128 v56 = v60;
    double v55 = a4;
    memcpy(__dst, __src, 0x11AuLL);
    char v53 = v26;
    char v52 = 0;
    char v51 = 0;
    outlined retain of DateComponents(a2);
    specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)( &v55,  __dst,  &v53,  &v52,  &v51,  &v56,  &v57);
    outlined release of DateComponents((uint64_t)__src);
    if ((v58 & 1) == 0)
    {
      uint64_t v15 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v11[2] + 1LL,  1,  v11);
      }
      unint64_t v17 = v11[2];
      unint64_t v16 = v11[3];
      if (v17 >= v16 >> 1) {
        int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v16 > 1),  v17 + 1,  1,  v11);
      }
      uint64_t v11[2] = v17 + 1;
      v11[v17 + 4] = v15;
      uint64_t v7 = v19;
    }

    if (!v10) {
      break;
    }
    v9 += 16;
    --v10;
  }

  swift_bridgeObjectRelease();
  return v11;
}

uint64_t outlined release of Calendar.DatesByMatching.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t sub_18311DD44()
{
  return swift_deallocObject();
}

uint64_t sub_18311DD54()
{
  return swift_deallocObject();
}

uint64_t outlined release of Calendar.DatesByRecurring(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of Range<Date>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Calendar.DatesByRecurring(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Calendar.DatesByRecurring.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t destroy for Calendar.DatesByRecurring.Iterator()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByRecurring.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  uint64_t v28 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v28;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  uint64_t v7 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v7;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  __int128 v8 = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v8;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  uint64_t v9 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v9;
  uint64_t v10 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v10;
  uint64_t v11 = *(void *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 296) = v11;
  uint64_t v12 = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 312) = v12;
  uint64_t v13 = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(void *)(a1 + 328) = v13;
  uint64_t v14 = *(void *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 344) = v14;
  uint64_t v15 = *(void *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(void *)(a1 + 360) = v15;
  uint64_t v16 = *(void *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(void *)(a1 + 376) = v16;
  uint64_t v17 = *(void *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(void *)(a1 + 392) = v17;
  uint64_t v18 = *(void *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(void *)(a1 + 408) = v18;
  uint64_t v19 = *(void *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(void *)(a1 + 424) = v19;
  uint64_t v20 = *(void *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(void *)(a1 + 440) = v20;
  uint64_t v21 = *(void *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(void *)(a1 + 456) = v21;
  uint64_t v22 = *(void *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(void *)(a1 + 472) = v22;
  uint64_t v23 = *(void *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(void *)(a1 + 488) = v23;
  uint64_t v24 = *(void *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(void *)(a1 + 504) = v24;
  uint64_t v25 = *(void *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 520) = v25;
  uint64_t v26 = *(void *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(void *)(a1 + 536) = v26;
  *(_BYTE *)(a1 + 545) = *(_BYTE *)(a2 + 545);
  *(_BYTE *)(a1 + 546) = *(_BYTE *)(a2 + 546);
  *(_BYTE *)(a1 + 547) = *(_BYTE *)(a2 + 547);
  *(_BYTE *)(a1 + 548) = *(_BYTE *)(a2 + 548);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByRecurring.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_BYTE *)(a2 + 547);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v7;
  uint64_t v8 = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(void *)(a1 + 152) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  *(_BYTE *)(a1 + 179) = *(_BYTE *)(a2 + 179);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  *(_BYTE *)(a1 + 183) = *(_BYTE *)(a2 + 183);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v9 = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = v9;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  __int128 v10 = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v11 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 256) = v11;
  uint64_t v12 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 272) = v12;
  uint64_t v13 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 288) = v13;
  uint64_t v14 = *(void *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 296) = v14;
  uint64_t v15 = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 312) = v15;
  uint64_t v16 = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(void *)(a1 + 328) = v16;
  uint64_t v17 = *(void *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 344) = v17;
  uint64_t v18 = *(void *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(void *)(a1 + 360) = v18;
  uint64_t v19 = *(void *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(void *)(a1 + 376) = v19;
  uint64_t v20 = *(void *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(void *)(a1 + 392) = v20;
  uint64_t v21 = *(void *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(void *)(a1 + 408) = v21;
  uint64_t v22 = *(void *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(void *)(a1 + 424) = v22;
  uint64_t v23 = *(void *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(void *)(a1 + 440) = v23;
  uint64_t v24 = *(void *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(void *)(a1 + 456) = v24;
  uint64_t v25 = *(void *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(void *)(a1 + 472) = v25;
  uint64_t v26 = *(void *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(void *)(a1 + 488) = v26;
  uint64_t v27 = *(void *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(void *)(a1 + 504) = v27;
  uint64_t v28 = *(void *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 520) = v28;
  uint64_t v29 = *(void *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(void *)(a1 + 536) = v29;
  *(_BYTE *)(a1 + 545) = *(_BYTE *)(a2 + 545);
  *(_BYTE *)(a1 + 546) = *(_BYTE *)(a2 + 546);
  *(_BYTE *)(a1 + 547) = *(_BYTE *)(a2 + 547);
  *(_BYTE *)(a1 + 548) = v4[1];
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = v4[13];
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = v4[29];
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy608_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x260uLL);
}

uint64_t assignWithTake for Calendar.DatesByRecurring.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_BYTE *)(a2 + 547);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  uint64_t v7 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v7;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v8 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_unknownObjectRelease();
  uint64_t v9 = *(void *)(a2 + 264);
  uint64_t v10 = *(void *)(a2 + 272);
  *(void *)(a1 + 256) = v8;
  *(void *)(a1 + 264) = v9;
  swift_unknownObjectRelease();
  uint64_t v11 = *(void *)(a2 + 280);
  uint64_t v12 = *(void *)(a2 + 288);
  *(void *)(a1 + 272) = v10;
  *(void *)(a1 + 280) = v11;
  swift_unknownObjectRelease();
  uint64_t v13 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = v12;
  *(void *)(a1 + 296) = v13;
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  uint64_t v14 = *(void *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(void *)(a1 + 360) = v14;
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  uint64_t v15 = *(void *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(void *)(a1 + 504) = v15;
  uint64_t v16 = *(void *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 520) = v16;
  uint64_t v17 = *(void *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(void *)(a1 + 536) = v17;
  *(_BYTE *)(a1 + 545) = *(_BYTE *)(a2 + 545);
  *(_BYTE *)(a1 + 546) = *(_BYTE *)(a2 + 546);
  *(_BYTE *)(a1 + 547) = *(_BYTE *)(a2 + 547);
  *(_BYTE *)(a1 + 548) = v4[1];
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = v4[13];
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = v4[29];
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByRecurring.Iterator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 608)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByRecurring.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 600) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 608) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 608) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByRecurring.Iterator()
{
  return &type metadata for Calendar.DatesByRecurring.Iterator;
}

uint64_t storeEnumTagSinglePayload for ComponentAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18311EBA4 + 4 * byte_1837AA607[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18311EBD8 + 4 * byte_1837AA602[v4]))();
}

uint64_t sub_18311EBD8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18311EBE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18311EBE8LL);
  }
  return result;
}

uint64_t sub_18311EBF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18311EBFCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_18311EC00(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18311EC08(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComponentAction()
{
  return &type metadata for ComponentAction;
}

unint64_t lazy protocol witness table accessor for type ComponentAction and conformance ComponentAction()
{
  unint64_t result = lazy protocol witness table cache variable for type ComponentAction and conformance ComponentAction;
  if (!lazy protocol witness table cache variable for type ComponentAction and conformance ComponentAction)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ComponentAction,  &type metadata for ComponentAction);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ComponentAction and conformance ComponentAction);
  }

  return result;
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV5IndexVqd__Isgyrzo_AJ01_k13ConverterFromiJ0VABsAG_pANRszr__lIetMggrzo_Tp5@<X0>( uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K4RunsVABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySnySiGqd__Isgyrzo_10Foundation8IndexSetV9RangeViewVABsAG_pAMRszr__lIetMggrzo_Tp5@<X0>( uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t PredicateExpressions.Conditional.test.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.Conditional.trueBranch.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.Conditional.falseBranch.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 72));
}

void PredicateExpressions.Conditional.init(test:trueBranch:falseBranch:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_18311ED5C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v5 + *(int *)(a1 + 72),  v3,  v1);
}

void type metadata accessor for PredicateExpressions.Conditional()
{
}

void *PredicateExpressions.Conditional.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *a1;
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t *, void))(a2[5] + 16LL))(&v7, &v6, a2[2]);
  if (!v2)
  {
    uint64_t v6 = v4;
    else {
      return (void *)(*(uint64_t (**)(uint64_t *, void))(a2[7] + 16LL))(&v6, a2[4]);
    }
  }

  return result;
}

void *protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Conditional<A, B, C>( uint64_t *a1, void *a2)
{
  return PredicateExpressions.Conditional.evaluate(_:)(a1, a2);
}

void static PredicateExpressions.build_Conditional<A, B, C>(_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_18311EEEC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v5 + *(int *)(a1 + 72),  v3,  v1);
}

uint64_t PredicateExpressions.Conditional.description.getter()
{
  v0._unint64_t object = (void *)0x80000001839CCE50LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x724265757274202CLL;
  v1._unint64_t object = (void *)0xEE00203A68636E61LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0x4265736C6166202CLL;
  v2._unint64_t object = (void *)0xEF203A68636E6172LL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 41LL;
  v3._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0LL;
}

uint64_t PredicateExpressions.Conditional<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.Conditional<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  v17[10] = a3;
  _OWORD v17[3] = a4;
  _OWORD v17[2] = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](a1);
  v17[4] = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[8] = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v4);
  v17[6] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[7] = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v7);
  v17[9] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[11] = v11;
  v17[12] = v12;
  v17[5] = v13;
  v17[13] = v13;
  v17[14] = v14;
  v17[15] = v15;
  v17[16] = v16;
  type metadata accessor for PredicateExpressions.Conditional();
}

uint64_t sub_18311F2B8(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 224) = v6;
  *(void *)(v4 - 216) = v8;
  *(void *)(v4 - 72) = v3;
  uint64_t v10 = *(void *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(void *)(v4 - 112));
  uint64_t v11 = *(void *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v4 - 168) + 32LL))(*(void *)(v4 - 216), v11, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(void *)(v4 - 112));
  uint64_t v12 = *(void *)(v4 - 176);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(void, uint64_t, uint64_t))(v10 + 32))(*(void *)(v4 - 216) + *(int *)(a1 + 68), v12, v2);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(void *)(v4 - 112));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v13 = *(void *)(v4 - 216);
  (*(void (**)(uint64_t, void, void))(*(void *)(v4 - 208) + 32LL))( v13 + *(int *)(a1 + 72),  *(void *)(v4 - 192),  *(void *)(v4 - 184));
  __swift_destroy_boxed_opaque_existential_1(v4 - 136);
  uint64_t v14 = *(void *)(v4 - 224);
  (*(void (**)(void, uint64_t, uint64_t))(v14 + 16))(*(void *)(v4 - 200), v13, a1);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v7 = a3[2];
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Conditional<A, B, C>);
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v11 = *(void *)(v6 + 16);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v13 = *(void *)(v7 + 16);
  uint64_t v12 = *(void *)(v7 + 24);
  v16[0] = v9;
  v16[1] = v8;
  void v16[2] = v11;
  _OWORD v16[3] = v10;
  _OWORD v16[4] = v13;
  void v16[5] = v12;
  a1[2] = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.Conditional<A, B, C>,  a2,  v16);
  v15[0] = v9;
  v15[1] = v8;
  void v15[2] = v11;
  __int128 v15[3] = v10;
  uint64_t v15[4] = v13;
  void v15[5] = v12;
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.Conditional<A, B, C>,  a2,  v15);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Conditional<A, B, C>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Conditional<A, B, C>( void *a1)
{
  return PredicateExpressions.Conditional<>.encode(to:)(a1);
}

uint64_t type metadata completion function for PredicateExpressions.Conditional()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Conditional( uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3[3] - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = a3[4];
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8) {
    unsigned int v8 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v4 + 64) + v11;
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  unsigned int v15 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_25;
  }
  uint64_t v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(void *)(v10 + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)(a1 + v16);
      if (!v18) {
        goto LABEL_25;
      }
      goto LABEL_16;
    }

    if (v19 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16)) {
        goto LABEL_25;
      }
      goto LABEL_16;
    }

    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        uint64_t v22 = (v12 + a1) & ~v11;
        if (v7 == v8) {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        }
        else {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 48))( (v22 + v13 + v14) & ~v14,  *(unsigned int *)(v10 + 84),  v9);
        }
      }

      return 0LL;
    }
  }

  int v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16)) {
    goto LABEL_25;
  }
LABEL_16:
  int v20 = (v18 - 1) << v17;
  if ((_DWORD)v16)
  {
    else {
      int v21 = 4;
    }
    __asm { BR              X11 }
  }

  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Conditional( _WORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = *(void *)(a4[2] - 8LL);
  uint64_t v6 = *(void *)(a4[3] - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(void *)(a4[4] - 8LL);
  if (*(_DWORD *)(v8 + 84) > v7) {
    unsigned int v7 = *(_DWORD *)(v8 + 84);
  }
  size_t v9 = ((*(void *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        unsigned int v10 = 4u;
      }

      else if (v12 >= 0x100)
      {
        unsigned int v10 = 2;
      }

      else
      {
        unsigned int v10 = v12 > 1;
      }
    }

    else
    {
      unsigned int v10 = 1u;
    }
  }

  else
  {
    unsigned int v10 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        int v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }

        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }

        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }

    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X21 }

uint64_t static NSTextCheckingType.allSystemTypes.getter()
{
  return 0xFFFFFFFFLL;
}

unint64_t static NSTextCheckingType.allCustomTypes.getter()
{
  return 0xFFFFFFFF00000000LL;
}

uint64_t static NSTextCheckingType.allTypes.getter()
{
  return -1LL;
}

Swift::Void __swiftcall NSDecimal.add(_:)(NSDecimal *a1)
{
  specialized static NSDecimal.+= infix(_:_:)(v3, (unint64_t)a1, v1, v2);
}

Swift::Void __swiftcall NSDecimal.subtract(_:)(NSDecimal *a1)
{
  __int16 v4 = v2;
  uint64_t v146 = *MEMORY[0x1895F89C0];
  __int16 v132 = *((_WORD *)v3 + 2);
  unint64_t v5 = (unint64_t)a1 >> 32;
  unint64_t v6 = (unint64_t)a1 >> 48;
  __int16 v115 = *((_WORD *)v3 + 3);
  int v7 = (int)a1;
  unint64_t v8 = v1 >> 16;
  int v118 = *v3;
  __int16 v120 = *((_WORD *)v3 + 4);
  unint64_t v9 = HIDWORD(v1);
  unint64_t v10 = HIWORD(v1);
  __int16 v130 = *((_WORD *)v3 + 5);
  LOWORD(v11) = v1;
  unsigned int v12 = HIWORD(v2);
  __int16 v128 = *((_WORD *)v3 + 6);
  __int16 v126 = *((_WORD *)v3 + 7);
  __int16 v124 = *((_WORD *)v3 + 8);
  __int16 v122 = *((_WORD *)v3 + 9);
  int v143 = (int)a1;
  LOWORD(v144) = WORD2(a1);
  WORD1(v144) = HIWORD(a1);
  HIDWORD(v144) = v1;
  LOWORD(v145) = WORD2(v1);
  WORD1(v145) = HIWORD(v1);
  HIDWORD(v145) = v2;
  *(void *)&__int128 v141 = a1;
  *((void *)&v141 + 1) = v1;
  unsigned int v142 = v2;
  if (_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v141) = v7;
    WORD2(v141) = v5;
    WORD3(v141) = v6;
    WORD4(v141) = v11;
    WORD5(v141) = v8;
    WORD6(v141) = v9;
    HIWORD(v141) = v10;
    LOWORD(v142) = v4;
    HIWORD(v142) = v12;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v141);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v143);
    int v7 = v143;
    LOWORD(v5) = v144;
    LOWORD(v6) = WORD1(v144);
    LOWORD(v11) = WORD2(v144);
    LOWORD(v8) = HIWORD(v144);
    LOWORD(v9) = v145;
    LOWORD(v10) = WORD1(v145);
    __int16 v4 = WORD2(v145);
    LOWORD(v14) = HIWORD(v145);
  }

  else
  {
    LOWORD(v14) = v12;
  }

  LODWORD(v141) = v118;
  WORD2(v141) = v132;
  LOWORD(v15) = v115;
  WORD3(v141) = v115;
  WORD4(v141) = v120;
  WORD5(v141) = v130;
  WORD6(v141) = v128;
  HIWORD(v141) = v126;
  LOWORD(v142) = v124;
  HIWORD(v142) = v122;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v141) = v118;
    WORD2(v141) = v132;
    WORD3(v141) = v115;
    WORD4(v141) = v120;
    WORD5(v141) = v130;
    WORD6(v141) = v128;
    HIWORD(v141) = v126;
    LOWORD(v142) = v124;
    HIWORD(v142) = v122;
  }

  LODWORD(v141) = v7;
  WORD2(v141) = v5;
  WORD3(v141) = v6;
  WORD4(v141) = v11;
  WORD5(v141) = v8;
  WORD6(v141) = v9;
  HIWORD(v141) = v10;
  LOWORD(v142) = v4;
  HIWORD(v142) = v14;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v141) = v7;
    WORD2(v141) = v5;
    WORD3(v141) = v6;
    WORD4(v141) = v11;
    WORD5(v141) = v8;
    WORD6(v141) = v9;
    HIWORD(v141) = v10;
    LOWORD(v142) = v4;
    HIWORD(v142) = v14;
  }

  LODWORD(v141) = v118;
  WORD2(v141) = v132;
  WORD3(v141) = v115;
  WORD4(v141) = v120;
  WORD5(v141) = v130;
  WORD6(v141) = v128;
  HIWORD(v141) = v126;
  LOWORD(v142) = v124;
  HIWORD(v142) = v122;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LOWORD(v15) = v6;
    LOWORD(v6) = v8;
    uint64_t v39 = v114;
    LODWORD(v8) = v7;
    LOWORD(v7) = v4;
    goto LABEL_25;
  }

  LODWORD(v141) = v7;
  WORD2(v141) = v5;
  WORD3(v141) = v6;
  WORD4(v141) = v11;
  WORD5(v141) = v8;
  WORD6(v141) = v9;
  HIWORD(v141) = v10;
  LOWORD(v142) = v4;
  HIWORD(v142) = v14;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v8) = v118;
    LOWORD(v11) = v120;
    LOWORD(v7) = v124;
    LOWORD(v14) = v122;
    LOWORD(v6) = v130;
    LOWORD(v5) = v132;
    uint64_t v39 = v114;
    LOWORD(v10) = v126;
    LOWORD(v9) = v128;
    goto LABEL_25;
  }

  LODWORD(v141) = v118;
  WORD2(v141) = v132;
  WORD3(v141) = v115;
  WORD4(v141) = v120;
  WORD5(v141) = v130;
  WORD6(v141) = v128;
  HIWORD(v141) = v126;
  LOWORD(v142) = v124;
  HIWORD(v142) = v122;
  LODWORD(v139) = v7;
  WORD2(v139) = v5;
  WORD3(v139) = v6;
  WORD4(v139) = v11;
  WORD5(v139) = v8;
  WORD6(v139) = v9;
  HIWORD(v139) = v10;
  LOWORD(v140) = v4;
  HIWORD(v140) = v14;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v141, (uint64_t)&v139);
  uint64_t v125 = WORD5(v141);
  uint64_t v127 = v141;
  __int128 v137 = v141;
  uint64_t v116 = WORD2(v141);
  uint64_t v131 = WORD4(v141);
  uint64_t v133 = WORD3(v141);
  uint64_t v121 = HIWORD(v141);
  uint64_t v123 = WORD6(v141);
  int v119 = (unsigned __int16)v142;
  unsigned int v138 = v142;
  int v129 = HIWORD(v142);
  int v16 = _So9NSDecimala__length_getter(&v137);
  unint64_t v8 = v139;
  unint64_t v5 = WORD2(v139);
  uint64_t v15 = WORD3(v139);
  uint64_t v11 = WORD4(v139);
  unint64_t v6 = WORD5(v139);
  unint64_t v9 = WORD6(v139);
  unint64_t v10 = HIWORD(v139);
  int v7 = (unsigned __int16)v140;
  int v14 = HIWORD(v140);
  if (!v16) {
    goto LABEL_22;
  }
  __int128 v137 = v139;
  unsigned int v138 = v140;
  if (!_So9NSDecimala__length_getter(&v137))
  {
    LOWORD(v6) = v125;
    LODWORD(v8) = v127;
    LOWORD(v5) = v116;
    LOWORD(v11) = v131;
    LOWORD(v15) = v133;
    LOWORD(v10) = v121;
    LOWORD(v9) = v123;
    LOWORD(v7) = v119;
    LOWORD(v14) = v129;
    goto LABEL_22;
  }

  LODWORD(v137) = v127;
  WORD2(v137) = v116;
  WORD3(v137) = v133;
  WORD4(v137) = v131;
  WORD5(v137) = v125;
  WORD6(v137) = v123;
  HIWORD(v137) = v121;
  LOWORD(v138) = v119;
  HIWORD(v138) = v129;
  LODWORD(v135) = v127;
  WORD2(v135) = v116;
  *(_DWORD *)((char *)&v135 + 6) = __PAIR32__(v131, v133);
  WORD5(v135) = v125;
  HIDWORD(v135) = __PAIR32__(v121, v123);
  LOWORD(v136) = v119;
  HIWORD(v136) = v129;
  int v113 = _So9NSDecimala__isNegative_getter(&v135);
  LODWORD(v135) = v8;
  WORD2(v135) = v5;
  WORD3(v135) = v15;
  WORD4(v135) = v11;
  WORD5(v135) = v6;
  WORD6(v135) = v9;
  HIWORD(v135) = v10;
  LOWORD(v136) = v7;
  HIWORD(v136) = v14;
  if (v113 == _So9NSDecimala__isNegative_getter(&v135))
  {
    LODWORD(v135) = v127;
    WORD2(v135) = v116;
    WORD3(v135) = v133;
    WORD4(v135) = v131;
    WORD5(v135) = v125;
    WORD6(v135) = v123;
    HIWORD(v135) = v121;
    LOWORD(v136) = v119;
    HIWORD(v136) = v129;
    uint64_t v17 = _So9NSDecimala__isNegative_getter(&v135);
    _So9NSDecimala__isNegative_setter(v17, &v137);
    NSDecimal.asVariableLengthInteger()( v127 | (v116 << 32) | (v133 << 48),  v131 | (v125 << 16) | (v123 << 32) | (v121 << 48),  v119 | (v129 << 16));
    uint64_t v19 = v18;
    NSDecimal.asVariableLengthInteger()( v8 | (v5 << 32) | (v15 << 48),  v11 | (v6 << 16) | (v9 << 32) | (v10 << 48),  v7 | (v14 << 16));
    uint64_t v22 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v19, v20, 9LL, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v23 = *(void *)(v22 + 16);
    if (v23 <= 8)
    {
      v25._rawValue = (void *)v22;
LABEL_31:
      _So9NSDecimala__length_setter(v23, &v137);
      NSDecimal.copyVariableLengthInteger(_:)(v25);
      uint64_t v37 = v45;
      swift_bridgeObjectRelease();
      if (v45) {
        goto LABEL_21;
      }
      goto LABEL_149;
    }

    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v22, 0LL);
    v25._rawValue = v24;
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    int v28 = v137;
    __int16 v29 = WORD2(v137);
    __int16 v30 = WORD3(v137);
    __int16 v31 = WORD4(v137);
    __int16 v32 = WORD5(v137);
    __int16 v33 = WORD6(v137);
    __int16 v34 = HIWORD(v137);
    __int16 v35 = v138;
    __int128 v135 = v137;
    unsigned int v136 = v138;
    __int16 v134 = HIWORD(v138);
    int v36 = _So9NSDecimala__exponent_getter((char *)&v135);
    if (v27 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v27 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v36, (_DWORD)v27))
        {
          if (v36 + (int)v27 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_20:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v37 = (void *)swift_allocError();
            *char v38 = 0;
            swift_willThrow();
            goto LABEL_21;
          }

          LODWORD(v135) = v28;
          WORD2(v135) = v29;
          WORD3(v135) = v30;
          WORD4(v135) = v31;
          WORD5(v135) = v32;
          WORD6(v135) = v33;
          HIWORD(v135) = v34;
          LOWORD(v136) = v35;
          HIWORD(v136) = v134;
          int v83 = _So9NSDecimala__exponent_getter((char *)&v135);
          BOOL v84 = __OFADD__(v83, (_DWORD)v27);
          uint64_t v85 = (v83 + v27);
          if (!v84)
          {
            _So9NSDecimala__exponent_setter(v85, &v137);
            unint64_t v23 = *((void *)v25._rawValue + 2);
            if (HIDWORD(v23)) {
              goto LABEL_163;
            }
            goto LABEL_31;
          }

          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          swift_unexpectedError();
          __break(1u);
          goto LABEL_163;
        }

LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
      }

        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
      }

        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
      }

              uint64_t v150 = (4 * *(_BYTE *)(v149 + 18) + 8) & 0x3C;
              uint64_t v147 = ((-15LL << v150) - 1) & v147 | (v152 << v150);
              uint64_t v151 = *(void *)(v149 + 24 + 24 * v152);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v149 = v151;
              if (!*(_BYTE *)(v151 + 18)) {
                goto LABEL_175;
              }
            }
          }

          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v434);
          uint64_t result = swift_unknownObjectRetain();
          uint64_t v148 = v358;
          uint64_t v151 = v144;
LABEL_175:
          __int128 v162 = *(unsigned __int16 *)(v151 + 16);
          uint64_t v341 = v151;
          if ((_DWORD)v162)
          {
            __int128 v163 = *(void *)(v151 + 24);
            __int16 v33 = __OFSUB__(v148, v163);
            __int128 v164 = (__int128 *)((char *)v148 - v163);
            uint64_t v20 = v348;
            if (v33)
            {
LABEL_415:
              __break(1u);
LABEL_416:
              __break(1u);
LABEL_417:
              __break(1u);
              goto LABEL_418;
            }

            if (__OFADD__(v164, 1LL)) {
              goto LABEL_416;
            }
            if ((uint64_t)v164 + 1 < 1)
            {
              __int128 v158 = v47;
              __int128 v162 = 0LL;
            }

            else
            {
              if ((_DWORD)v162 == 1)
              {
                uint64_t v148 = v164;
LABEL_211:
                if (v148)
                {
LABEL_412:
                  __break(1u);
                  goto LABEL_413;
                }

                __int128 v158 = v47;
                goto LABEL_213;
              }

              unint64_t v180 = (uint64_t *)(v341 + 48);
              unint64_t v181 = 1LL;
              while (1)
              {
                uint64_t v182 = *v180;
                v180 += 3;
                uint64_t v148 = (__int128 *)((char *)v164 - v182);
                if (__OFSUB__(v164, v182)) {
                  goto LABEL_398;
                }
                if (__OFADD__(v148, 1LL)) {
                  goto LABEL_399;
                }
                ++v181;
                __int128 v164 = v148;
                if (v162 == v181) {
                  goto LABEL_211;
                }
              }

              __int128 v158 = v47;
              __int128 v162 = v181;
              uint64_t v148 = v164;
            }

              uint64_t v152 = (4 * *(_BYTE *)(v151 + 18) + 8) & 0x3C;
              uint64_t v149 = ((-15LL << v152) - 1) & v149 | (v154 << v152);
              __int128 v153 = *(void *)(v151 + 24 + 24 * v154);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v151 = v153;
              if (!*(_BYTE *)(v153 + 18)) {
                goto LABEL_175;
              }
            }
          }

          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v445);
          uint64_t result = swift_unknownObjectRetain();
          uint64_t v150 = v369;
          __int128 v153 = v146;
LABEL_175:
          __int128 v164 = *(unsigned __int16 *)(v153 + 16);
          __int128 v352 = (void *)v153;
          if ((_DWORD)v164)
          {
            __int128 v165 = *(void *)(v153 + 24);
            int v36 = __OFSUB__(v150, v165);
            __int128 v166 = (__int128 *)((char *)v150 - v165);
            unint64_t v23 = v364;
            if (v36)
            {
LABEL_428:
              __break(1u);
LABEL_429:
              __break(1u);
LABEL_430:
              __break(1u);
              goto LABEL_431;
            }

            if (__OFADD__(v166, 1LL)) {
              goto LABEL_429;
            }
            if ((uint64_t)v166 + 1 < 1)
            {
              __int128 v164 = 0LL;
            }

            else
            {
              if ((_DWORD)v164 == 1)
              {
                uint64_t v150 = v166;
                goto LABEL_211;
              }

              uint64_t v182 = v352 + 6;
              uint64_t v183 = 1LL;
              while (1)
              {
                uint64_t v184 = *v182;
                v182 += 3;
                uint64_t v150 = (__int128 *)((char *)v166 - v184);
                if (__OFSUB__(v166, v184)) {
                  goto LABEL_411;
                }
                if (__OFADD__(v150, 1LL)) {
                  goto LABEL_412;
                }
                ++v183;
                __int128 v166 = v150;
                if (v164 == v183) {
                  goto LABEL_211;
                }
              }

              __int128 v164 = v183;
              uint64_t v150 = v166;
            }

              uint64_t v148 = (4 * *(_BYTE *)(v147 + 18) + 8) & 0x3C;
              uint64_t v145 = ((-15LL << v148) - 1) & v145 | (v150 << v148);
              uint64_t v149 = *(void *)(v147 + 24 + 24 * v150);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v147 = v149;
              if (!*(_BYTE *)(v149 + 18)) {
                goto LABEL_174;
              }
            }
          }

          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v455);
          uint64_t result = swift_unknownObjectRetain();
          uint64_t v146 = v380;
          uint64_t v149 = v142;
LABEL_174:
          Swift::String v157 = *(unsigned __int16 *)(v149 + 16);
          if (*(_WORD *)(v149 + 16))
          {
            __int128 v158 = *(void *)(v149 + 24);
            __int16 v35 = __OFSUB__(v146, v158);
            __int128 v159 = (__int128 *)((char *)v146 - v158);
            unint64_t v23 = v367;
            if (v35)
            {
LABEL_436:
              __break(1u);
LABEL_437:
              __break(1u);
LABEL_438:
              __break(1u);
              goto LABEL_439;
            }

            if (__OFADD__(v159, 1LL)) {
              goto LABEL_437;
            }
            if ((uint64_t)v159 + 1 < 1)
            {
              Swift::String v157 = 0LL;
            }

            else
            {
              if ((_DWORD)v157 == 1)
              {
                uint64_t v146 = v159;
                goto LABEL_210;
              }

              uint64_t v176 = (uint64_t *)(v149 + 48);
              uint64_t v177 = 1LL;
              while (1)
              {
                uint64_t v178 = *v176;
                v176 += 3;
                uint64_t v146 = (__int128 *)((char *)v159 - v178);
                if (__OFSUB__(v159, v178)) {
                  goto LABEL_419;
                }
                if (__OFADD__(v146, 1LL)) {
                  goto LABEL_420;
                }
                ++v177;
                __int128 v159 = v146;
                if (v157 == v177) {
                  goto LABEL_210;
                }
              }

              Swift::String v157 = v177;
              uint64_t v146 = v159;
            }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v111 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v121 << 8);
LABEL_138:
          swift_unknownObjectRetain();
          unint64_t v110 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v96, v111, v100, v95, v10);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v114 = v97 - v2;
          if (__OFSUB__(v97, v2)) {
            goto LABEL_394;
          }
          goto LABEL_159;
        }
      }

      else
      {
        int v97 = v337 >> 11;
        if (v337 >= 0x800) {
          goto LABEL_407;
        }
      }

      swift_unknownObjectRetain_n();
      unint64_t v111 = specialized Rope._endPath.getter(v95);
      swift_unknownObjectRelease();
      __darwin_ino64_t v100 = 0LL;
      unsigned int v2 = 0LL;
      __int16 v115 = v343;
      if (v95) {
        goto LABEL_138;
      }
      unint64_t v110 = 0LL;
      uint64_t v114 = v97;
LABEL_159:
      *(void *)&__int128 v371 = v96;
      *((void *)&v371 + 1) = v111;
      *(void *)&__int128 v372 = v100;
      *((void *)&v372 + 1) = v110;
      *(void *)&__int128 v373 = v114;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v371,  0LL,  v97,  (void *)v3,  (uint64_t *)&v353,  v341,  v115,  (uint64_t)&v359);
      swift_bridgeObjectRelease();
      swift_release();
      int v79 = v373;
      uint64_t v123 = *(void *)(v3 + 64);
      __int16 v124 = *(void *)(v3 + 72);
      uint64_t v125 = *(void *)(v3 + 80);
      __int16 v126 = *(void *)(v3 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( 0LL,  v349 & 1,  v123,  v124,  v125,  v126,  (uint64_t *)&v439);
      uint64_t v127 = v441;
      swift_unknownObjectRelease();
    }

    while (v127 < v79 && *(void *)(v353 + 16));
  }

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&__int128 v371 = v351;
  __int16 v128 = *(void *)(v3 + 64);
  int v129 = *(void *)(v3 + 72);
  __int16 v130 = *(void *)(v3 + 80);
  uint64_t v131 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v351 - 1,  v349 & 1,  v128,  v129,  v130,  v131,  (uint64_t *)&v439);
  __int128 v342 = v440;
  __int128 v344 = v439;
  __int16 v132 = v441;
  swift_unknownObjectRelease();
  v452[0] = v344;
  v452[1] = v342;
  __int128 v453 = v132;
  uint64_t v133 = *(void *)(v3 + 64);
  __int16 v134 = *(void *)(v3 + 72);
  __int128 v135 = *(void *)(v3 + 80);
  unsigned int v136 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v452, v133, v134, v135, v136);
  unsigned int v138 = v137;
  unsigned int v2 = v139;
  swift_unknownObjectRelease();
  unint64_t v10 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)( (uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:),  0LL,  v138);
  __int128 v141 = v140;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  unsigned int v142 = 0LL;
  *(void *)&__int128 v353 = result;
  int v143 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v46 = -1LL;
  if (v143 < 64) {
    uint64_t v46 = ~(-1LL << v143);
  }
  int v13 = v10 + 64;
  uint64_t v144 = v46 & *(void *)(v10 + 64);
  uint64_t v145 = (unint64_t)(v143 + 63) >> 6;
  while (1)
  {
    if (v144)
    {
      uint64_t v146 = __clz(__rbit64(v144));
      v144 &= v144 - 1;
      uint64_t v147 = v146 | (v142 << 6);
      goto LABEL_165;
    }

    uint64_t v43 = v142 + 1;
    if (__OFADD__(v142, 1LL)) {
      goto LABEL_368;
    }
    if (v43 >= v145) {
      break;
    }
    uint64_t v150 = *(void *)(v13 + 8 * v43);
    ++v142;
    if (!v150)
    {
      unsigned int v142 = v43 + 1;
      if (v43 + 1 >= v145) {
        break;
      }
      uint64_t v150 = *(void *)(v13 + 8 * v142);
      if (!v150)
      {
        unsigned int v142 = v43 + 2;
        if (v43 + 2 >= v145) {
          break;
        }
        uint64_t v150 = *(void *)(v13 + 8 * v142);
        if (!v150)
        {
          unsigned int v142 = v43 + 3;
          if (v43 + 3 >= v145) {
            break;
          }
          uint64_t v150 = *(void *)(v13 + 8 * v142);
          if (!v150)
          {
            unsigned int v142 = v43 + 4;
            if (v43 + 4 >= v145) {
              break;
            }
            uint64_t v150 = *(void *)(v13 + 8 * v142);
            if (!v150)
            {
              uint64_t v151 = v43 + 5;
              if (v151 >= v145) {
                break;
              }
              uint64_t v150 = *(void *)(v13 + 8 * v151);
              if (!v150)
              {
                while (1)
                {
                  unsigned int v142 = v151 + 1;
                  if (__OFADD__(v151, 1LL)) {
                    break;
                  }
                  if (v142 >= v145) {
                    goto LABEL_185;
                  }
                  uint64_t v150 = *(void *)(v13 + 8 * v142);
                  ++v151;
                  if (v150) {
                    goto LABEL_184;
                  }
                }

    __int16 v126 = 0LL;
    v188[0] = v122;
    v188[1] = v123;
    v188[2] = v124;
    v188[3] = v125;
    v188[4] = v95;
    v188[5] = v94;
    uint64_t v127 = (void *)(v111 + 40);
    v188[6] = v96;
    v188[7] = v97;
    uint64_t v182 = v125;
    while (1)
    {
      __int16 v128 = v126 + 1;
      if (__OFADD__(v126, 1LL)) {
        break;
      }
      if (*v127)
      {
        uint64_t v131 = v124;
        __int16 v130 = v123;
        int v129 = v122;
        swift_bridgeObjectRetain();
        __int16 v134 = (unint64_t *)(v111 + 40);
        __int128 v135 = (char *)MEMORY[0x18961AFE8];
        do
        {
          unsigned int v136 = *v134;
          if (*v134)
          {
            __int128 v137 = *(v134 - 1);
            if ((v136 & 0x2000000000000000LL) != 0 ? HIBYTE(v136) & 0xF : v137 & 0xFFFFFFFFFFFFLL)
            {
              if ((v136 & 0x1000000000000000LL) != 0)
              {
                __int128 v139 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
              }

              else
              {
                if ((v136 & 0x2000000000000000LL) != 0)
                {
                  __int128 v189 = *(v134 - 1);
                  __int128 v190 = v136 & 0xFFFFFFFFFFFFFFLL;
                  swift_bridgeObjectRetain();
                }

                else
                {
                  if ((v137 & 0x1000000000000000LL) == 0) {
                    _StringObject.sharedUTF8.getter();
                  }
                  swift_bridgeObjectRetain();
                }

                __int128 v139 = _decodeScalar(_:startingAt:)();
                swift_bridgeObjectRelease();
              }

              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                __int128 v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v135 + 2) + 1LL,  1,  v135);
              }
              __int128 v141 = *((void *)v135 + 2);
              unsigned int v140 = *((void *)v135 + 3);
              if (v141 >= v140 >> 1) {
                __int128 v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v140 > 1),  v141 + 1,  1,  v135);
              }
              *((void *)v135 + 2) = v141 + 1;
              *(_DWORD *)&v135[4 * v141 + 32] = v139;
            }
          }

          v134 += 2;
          --v112;
        }

        while (v112);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v215);
        BigString.unicodeScalars.getter();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)v214);
        unsigned int v142 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v135);
        uint64_t v144 = v143;
        uint64_t v146 = v145;
        uint64_t v148 = v147;
        swift_bridgeObjectRelease();
        outlined release of Locale((uint64_t)&v189);
        outlined release of Locale((uint64_t)v223);
        uint64_t result = outlined release of AttributedString.Runs((uint64_t)v217);
        __int16 v132 = v182;
        if (v148 != 2)
        {
          if (v168 < v142 >> 10) {
            goto LABEL_216;
          }
          int v129 = (__int128 *)v142;
          __int16 v130 = v144;
          uint64_t v131 = v146;
          __int16 v132 = v148;
        }

        goto LABEL_163;
      }

      v127 += 2;
      ++v126;
      if (v128 == v112)
      {
        unint64_t v179 = v124;
        unint64_t v180 = v123;
        unint64_t v181 = v122;
        outlined release of Locale((uint64_t)v223);
        goto LABEL_162;
      }
    }

  __break(1u);
LABEL_158:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

LABEL_124:
  if (v82 <= v71) {
    unint64_t v98 = v71;
  }
  else {
    unint64_t v98 = v82;
  }
  do
  {
    if (v98 == v82)
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }

    if (v82 >= v69[2]) {
      goto LABEL_152;
    }
    v70[v82] = *(_WORD *)(v64 + 32 + 2 * v82);
    ++v82;
  }

  while ((uint64_t)v82 < (uint64_t)v71);
  int v79 = 1;
LABEL_131:
  if ((uint64_t)v82 < (uint64_t)v72)
  {
    while (1)
    {
LABEL_132:
      if (v82 >= v72) {
        goto LABEL_159;
      }
      unint64_t v71 = v69[2];
      if (v82 < v71) {
        break;
      }
LABEL_137:
      __break(1u);
LABEL_138:
      int v79 = HIWORD(v68);
      unint64_t v82 = v71;
    }

    unsigned int v99 = v79 + (*(unsigned __int16 *)(v66 + 32 + 2 * v82) ^ 0xFFFF);
    --v72;
    unint64_t v71 = v66 + 34;
    while (1)
    {
      int v79 = HIWORD(v99);
      v70[v82] = v99;
      if (v72 == v82) {
        break;
      }
      unsigned int v99 = v79 + (*(unsigned __int16 *)(v71 + 2 * v82++) ^ 0xFFFF);
      if (v82 >= v69[2]) {
        goto LABEL_137;
      }
    }
  }

        __break(1u);
      }
    }

    goto LABEL_125;
  }

  unint64_t v23 = 0LL;
  uint64_t v24 = 0;
  uint64_t v19 = 0;
  Swift::OpaquePointer v25 = 1;
  uint64_t inited = v45;
  uint64_t v26 = 1;
  while (1)
  {
    DayOfWeekType = ucal_getDayOfWeekType();
    unint64_t v5 = *(void *)(v6 + 16);
    if (v23 >= v5) {
      goto LABEL_80;
    }
    *(void *)&uint64_t v20 = v6 + 4 * v23;
    *(_DWORD *)(*(void *)&v20 + 32LL) = DayOfWeekType;
    if (DayOfWeekType == 3)
    {
      uint64_t v26 = 0;
      uint64_t v19 = *(_DWORD *)inited;
      goto LABEL_16;
    }

    if (DayOfWeekType == 2) {
      break;
    }
LABEL_16:
    if (v23 == 6)
    {
      uint64_t inited = *v44;
      if ((_DWORD)inited == 1)
      {
        __int16 v31 = 1;
        if ((v25 & 1) != 0) {
          goto LABEL_34;
        }
        goto LABEL_49;
      }

      if ((_DWORD)inited == 3 || (_DWORD)inited == 2)
      {
LABEL_27:
        __int16 v31 = 0;
        if ((v25 & 1) == 0) {
          goto LABEL_49;
        }
LABEL_34:
        unint64_t v21 = 1;
        __int16 v4 = 0.0;
        if ((v26 & 1) != 0)
        {
          uint64_t v20 = 0.0;
          if ((v31 & 1) == 0) {
            goto LABEL_36;
          }
LABEL_55:
          if (v5 >= 7)
          {
            if (*(_DWORD *)(v6 + 56) != 1)
            {
              __int16 v32 = 0LL;
              goto LABEL_87;
            }

            if (*(_DWORD *)(v6 + 52) != 1) {
              goto LABEL_86;
            }
            if (*(_DWORD *)(v6 + 48) != 1) {
              goto LABEL_83;
            }
            if (*(_DWORD *)(v6 + 44) == 1)
            {
              if (*(_DWORD *)(v6 + 40) == 1)
              {
                if (*(_DWORD *)(v6 + 36) == 1)
                {
                  if (*v44 == 1)
                  {
LABEL_98:
                    if (!v21) {
                      goto LABEL_116;
                    }
                    uint64_t v24 = 0;
                    __int16 v35 = 1;
                    int v36 = 1;
                    if ((_DWORD)inited != 1) {
                      goto LABEL_100;
                    }
                    goto LABEL_89;
                  }

                      uint64_t v69 = (v77 - 1) & v77;
                      unint64_t v98 = v78;
                      __int16 v75 = __clz(__rbit64(v77)) + (v78 << 6);
                    }

                    uint64_t v80 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v75);
                    unint64_t v82 = *v80;
                    __int16 v81 = v80[1];
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v1 + 56) + 72 * v75,  (uint64_t)&v105);
                    unint64_t v101 = v107;
                    uint64_t v102 = v108;
                    char v103 = v109;
                    unsigned int v99 = v105;
                    __darwin_ino64_t v100 = v106;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    int v83 = Hasher._finalize()();
                    BOOL v84 = -1LL << *(_BYTE *)(v67 + 32);
                    uint64_t v85 = v83 & ~v84;
                    uint64_t v86 = v85 >> 6;
                    if (((-1LL << v85) & ~*(void *)(v70 + 8 * (v85 >> 6))) != 0)
                    {
                      unint64_t v71 = __clz(__rbit64((-1LL << v85) & ~*(void *)(v70 + 8 * (v85 >> 6)))) | v85 & 0x7FFFFFFFFFFFFFC0LL;
                    }

                    else
                    {
                      uint64_t v87 = 0;
                      int v88 = (unint64_t)(63 - v84) >> 6;
                      do
                      {
                        if (++v86 == v88 && (v87 & 1) != 0) {
                          goto LABEL_138;
                        }
                        unsigned int v89 = v86 == v88;
                        if (v86 == v88) {
                          uint64_t v86 = 0LL;
                        }
                        v87 |= v89;
                        uint64_t v90 = *(void *)(v70 + 8 * v86);
                      }

                      while (v90 == -1);
                      unint64_t v71 = __clz(__rbit64(~v90)) + (v86 << 6);
                    }

                    *(void *)(v70 + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v71;
                    unint64_t v72 = (void *)(*(void *)(v67 + 48) + 16 * v71);
                    unsigned __int16 *v72 = v82;
                    v72[1] = v81;
                    uint64_t v73 = *(void *)(v67 + 56) + 72 * v71;
                    *(_OWORD *)(v73 + 16) = v100;
                    *(_OWORD *)(v73 + 32) = v101;
                    *(_OWORD *)(v73 + 48) = v102;
                    *(void *)(v73 + 64) = v103;
                    *(_OWORD *)uint64_t v73 = v99;
                    ++*(void *)(v67 + 16);
                    --v42;
                    unsigned int v68 = v98;
                    if (!v42) {
                      goto LABEL_134;
                    }
                  }
                }

                uint64_t v24 = v33;
              }
            }
          }

    swift_release();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();

    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t)objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytesNoCopy_length_encoding_freeWhenDone_,  "NSMultipleUnderlyingErrorsKey",  29,  1,  0);
    if (!result) {
      goto LABEL_212;
    }
    __int16 v117 = (void *)result;
    int v118 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, result);

    v182[0] = v118;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v20 + 16)
      && (int v119 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v186), (v120 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v119, (uint64_t)&v197);
    }

    else
    {
      __int128 v197 = 0u;
      __int128 v198 = 0u;
    }

    swift_release();
    outlined destroy of AnyHashable((uint64_t)&v186);
    if (*((void *)&v198 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Error]);
      if ((swift_dynamicCast() & 1) != 0) {
        specialized Array.append<A>(contentsOf:)((uint64_t)v182[0]);
      }
    }

    else
    {
      outlined destroy of Any?((uint64_t)&v197, &demangling cache variable for type metadata for Any?);
    }

    uint64_t v121 = v175;
    unint64_t v175 = v175;
    unint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
    unint64_t v6 = objc_msgSend((id)v21, sel_userInfo);
    swift_unknownObjectRelease();
    if (v6)
    {
      swift_unknownObjectRetain();
      __int16 v122 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v122)
      {
        uint64_t v123 = v122;
        goto LABEL_151;
      }

      __int16 v124 = objc_msgSend(v6, sel_count);
      if (v124)
      {
        uint64_t v125 = (uint64_t)v124;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v123 = static _DictionaryStorage.allocate(capacity:)();
        unint64_t v21 = *(void *)(v123 + 48);
        __int16 v126 = *(void *)(v123 + 56);
        swift_retain();
        uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( (void *)v21,  v126,  v6,  v125);
        if ((result & 0x8000000000000000LL) == 0 && v125 >= result)
        {
          *(void *)(v123 + 16) = result;
          if (!result)
          {
LABEL_150:
            swift_release();
LABEL_151:

            if (!*(void *)(v123 + 16)) {
              goto LABEL_155;
            }
            goto LABEL_152;
          }

          uint64_t v127 = result - 1;
          __int16 v128 = v123 + 64;
          while (1)
          {
LABEL_143:
            uint64_t v133 = (uint64_t *)(*(void *)(v123 + 48) + 16 * v127);
            __int16 v134 = *v133;
            uint64_t v20 = v133[1];
            swift_bridgeObjectRetain();
            unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v20);
            unsigned int v136 = v135;
            swift_bridgeObjectRelease();
            if ((v136 & 1) != 0) {
              break;
            }
            *(void *)(v128 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
            if (v127 < (uint64_t)v21)
            {
              *(_OWORD *)(*(void *)(v123 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v123 + 48) + 16 * v127);
              int v129 = *(void *)(v123 + 56);
              __int16 v130 = (_OWORD *)(v129 + 32 * v21);
              uint64_t v131 = (_OWORD *)(v129 + 32 * v127);
              __int16 v132 = v131[1];
              *__int16 v130 = *v131;
              v130[1] = v132;
              goto LABEL_142;
            }

            if (v21 == v127) {
              goto LABEL_142;
            }
            __int128 v139 = *(void *)(v123 + 48);
            unsigned int v140 = (uint64_t *)(v139 + 16 * v21);
            __int128 v141 = (uint64_t *)(v139 + 16 * v127);
            unsigned int v142 = *v140;
            int v143 = v140[1];
            uint64_t v144 = v141[1];
            *unsigned int v140 = *v141;
            v140[1] = v144;
            *__int128 v141 = v142;
            v141[1] = v143;
            uint64_t v145 = *(void *)(v123 + 56);
            unint64_t v21 = v145 + 32 * v21;
            uint64_t v146 = (_OWORD *)(v145 + 32 * v127);
            outlined init with take of Any((_OWORD *)v21, &v186);
            outlined init with take of Any(v146, (_OWORD *)v21);
            outlined init with take of Any(&v186, v146);
            if (v127 < 0) {
              goto LABEL_150;
            }
          }

          swift_arrayDestroy();
          swift_arrayDestroy();
          __int128 v137 = *(void *)(v123 + 16);
          Swift::OpaquePointer v25 = __OFSUB__(v137, 1LL);
          unsigned int v138 = v137 - 1;
          if (v25) {
            goto LABEL_207;
          }
          *(void *)(v123 + 16) = v138;
LABEL_142:
          if (--v127 < 0) {
            goto LABEL_150;
          }
          goto LABEL_143;
        }

              __break(1u);
              goto LABEL_125;
            }

  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
  return result;
}

      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      swift_once();
      goto LABEL_120;
    }

    goto LABEL_4;
  }

Swift::Void __swiftcall NSDecimal.multiply(by:)(NSDecimal *by)
{
  specialized static NSDecimal.*= infix(_:_:)(v3, (unint64_t)by, v1, v2);
}

Swift::Void __swiftcall NSDecimal.divide(by:)(NSDecimal *by)
{
  *(void *)uint64_t v3 = specialized NSDecimal._divide(by:roundingMode:)( (unint64_t)by,  v1,  v2,  *(void *)v3,  *(void *)(v3 + 8),  *(_DWORD *)(v3 + 16));
  *(_WORD *)(v3 + 8) = v4;
  *(_WORD *)(v3 + 10) = v5;
  *(_WORD *)(v3 + 12) = v6;
  *(_WORD *)(v3 + 14) = v7;
  *(_WORD *)(v3 + 16) = v8;
  *(_WORD *)(v3 + 18) = v9;
}

void __swiftcall NSDecimal._bridgeToObjectiveC()(NSDecimalNumber *__return_ptr retstr)
{
  uint64_t v4 = v1;
  uint64_t v5 = v2;
  int v6 = v3;
  objc_msgSend(objc_allocWithZone((Class)NSDecimalNumber), sel_initWithDecimal_, &v4);
}

id static NSDecimal._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_decimalValue);
  int v4 = v8;
  uint64_t v5 = v7;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 20) = 0;
  return result;
}

uint64_t static NSDecimal._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  int v3 = v8;
  uint64_t v4 = v7;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 20) = 0;
  return 1LL;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSDecimal()
{
  int v1 = *v0;
  id v2 = objc_allocWithZone((Class)&OBJC_CLASS___NSDecimalNumber);
  int v4 = v1;
  __int128 v5 = *(_OWORD *)(v0 + 1);
  return objc_msgSend(v2, sel_initWithDecimal_, &v4);
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSDecimal( void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_decimalValue);
  int v4 = v8;
  uint64_t v5 = v7;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 20) = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSDecimal( void *a1, uint64_t a2)
{
  int v3 = v8;
  uint64_t v4 = v7;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 20) = 0;
  return 1LL;
}

unint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSDecimal@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized static NSDecimal._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)a2 = result;
  *(_WORD *)(a2 + 8) = v4;
  *(_WORD *)(a2 + 10) = v5;
  *(_WORD *)(a2 + 12) = v6;
  *(_WORD *)(a2 + 14) = v7;
  *(_WORD *)(a2 + 16) = v8;
  *(_WORD *)(a2 + 18) = v9;
  return result;
}

void __swiftcall pow(_:_:)(NSDecimal *__return_ptr retstr, NSDecimal *a2, Swift::Int a3)
{
  if (v4)
  {

    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    _So9NSDecimala__exponent_setter(0LL, &v5);
    _So9NSDecimala__length_setter(0LL, &v5);
    _So9NSDecimala__isNegative_setter(1LL, &v5);
    _So9NSDecimala__isCompact_setter(&v5);
    _So9NSDecimala__reserved_setter(&v5);
  }

uint64_t _NSDecimalAdd(_:_:_:_:)(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  v161[3] = *MEMORY[0x1895F89C0];
  __int16 v4 = *((_WORD *)a2 + 2);
  __int16 v5 = *((_WORD *)a2 + 3);
  __int16 v6 = *((_WORD *)a2 + 4);
  __int16 v7 = *((_WORD *)a2 + 5);
  __int16 v8 = *((_WORD *)a2 + 6);
  __int16 v9 = *((_WORD *)a2 + 7);
  __int16 v10 = *((_WORD *)a2 + 8);
  int v11 = *a3;
  __int16 v12 = *((_WORD *)a3 + 2);
  __int16 v13 = *((_WORD *)a3 + 3);
  __int16 v14 = *((_WORD *)a3 + 4);
  __int16 v15 = *((_WORD *)a3 + 5);
  __int16 v16 = *((_WORD *)a3 + 6);
  __int16 v17 = *((_WORD *)a3 + 7);
  __int16 v18 = *((_WORD *)a3 + 8);
  __int16 v19 = *((_WORD *)a3 + 9);
  int v146 = *a2;
  __int16 v149 = *((_WORD *)a2 + 9);
  LODWORD(v161[0]) = *a2;
  __int16 v144 = v4;
  WORD2(v161[0]) = v4;
  __int16 v142 = v5;
  HIWORD(v161[0]) = v5;
  __int16 v140 = v6;
  LOWORD(v161[1]) = v6;
  __int16 v138 = v7;
  WORD1(v161[1]) = v7;
  __int16 v136 = v8;
  WORD2(v161[1]) = v8;
  __int16 v134 = v9;
  HIWORD(v161[1]) = v9;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v146;
    WORD2(v161[0]) = v144;
    HIWORD(v161[0]) = v142;
    LOWORD(v161[1]) = v140;
    WORD1(v161[1]) = v138;
    WORD2(v161[1]) = v136;
    HIWORD(v161[1]) = v134;
    LOWORD(v161[2]) = v10;
    WORD1(v161[2]) = v149;
  }

  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v11;
    WORD2(v161[0]) = v12;
    HIWORD(v161[0]) = v13;
    LOWORD(v161[1]) = v14;
    WORD1(v161[1]) = v15;
    WORD2(v161[1]) = v16;
    HIWORD(v161[1]) = v17;
    LOWORD(v161[2]) = v18;
    WORD1(v161[2]) = v19;
  }

  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    uint64_t v60 = 0LL;
    *(_DWORD *)a1 = v11;
    *(_WORD *)(a1 + 4) = v12;
    *(_WORD *)(a1 + 6) = v13;
    *(_WORD *)(a1 + 8) = v14;
    *(_WORD *)(a1 + 10) = v15;
    *(_WORD *)(a1 + 12) = v16;
    *(_WORD *)(a1 + 14) = v17;
    *(_WORD *)(a1 + 16) = v18;
    *(_WORD *)(a1 + 18) = v19;
    return v60;
  }

  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    *(_DWORD *)a1 = v146;
    *(_WORD *)(a1 + 4) = v144;
    *(_WORD *)(a1 + 6) = v142;
    *(_WORD *)(a1 + 8) = v140;
    *(_WORD *)(a1 + 10) = v138;
    *(_WORD *)(a1 + 12) = v136;
    *(_WORD *)(a1 + 14) = v134;
    *(_WORD *)(a1 + 16) = v10;
    uint64_t v60 = 0LL;
    *(_WORD *)(a1 + 18) = v149;
    return v60;
  }

  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  LODWORD(v158) = v11;
  WORD2(v158) = v12;
  HIWORD(v158) = v13;
  LOWORD(v159) = v14;
  WORD1(v159) = v15;
  WORD2(v159) = v16;
  HIWORD(v159) = v17;
  LOWORD(v160) = v18;
  HIWORD(v160) = v19;
  char v20 = specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)v161, (uint64_t)&v158);
  uint64_t v21 = LODWORD(v161[0]);
  uint64_t v22 = LOWORD(v161[1]);
  uint64_t v23 = WORD1(v161[1]);
  uint64_t v24 = WORD2(v161[1]);
  int v25 = WORD1(v161[2]);
  unint64_t v155 = v161[0];
  uint64_t v143 = HIWORD(v161[0]);
  uint64_t v145 = WORD2(v161[0]);
  uint64_t v156 = v161[1];
  uint64_t v150 = HIWORD(v161[1]);
  int v147 = LOWORD(v161[2]);
  int v157 = v161[2];
  int v26 = _So9NSDecimala__length_getter(&v155);
  int v27 = v158;
  __int16 v28 = WORD2(v158);
  __int16 v29 = HIWORD(v158);
  __int16 v30 = v159;
  __int16 v31 = WORD1(v159);
  uint64_t v32 = WORD2(v159);
  uint64_t v33 = HIWORD(v159);
  __int16 v34 = v160;
  __int16 v35 = HIWORD(v160);
  if (!v26) {
    goto LABEL_147;
  }
  __int16 v127 = v25;
  unint64_t v155 = v158;
  uint64_t v156 = v159;
  int v157 = v160;
  int v129 = HIWORD(v160);
  int v130 = (unsigned __int16)v160;
  uint64_t v128 = v158;
  uint64_t v139 = HIWORD(v158);
  uint64_t v141 = WORD2(v158);
  uint64_t v135 = WORD1(v159);
  uint64_t v137 = (unsigned __int16)v159;
  if (!_So9NSDecimala__length_getter(&v155))
  {
    int v27 = v21;
    __int16 v28 = v145;
    __int16 v29 = v143;
    __int16 v30 = v22;
    __int16 v31 = v23;
    LOWORD(v32) = v24;
    LOWORD(v33) = v150;
    __int16 v34 = v147;
    __int16 v35 = v25;
LABEL_147:
    uint64_t v70 = a1;
    goto LABEL_148;
  }

  char v124 = v20;
  LODWORD(v155) = v21;
  WORD2(v155) = v145;
  HIWORD(v155) = v143;
  LOWORD(v156) = v22;
  WORD1(v156) = v23;
  WORD2(v156) = v24;
  HIWORD(v156) = v150;
  LOWORD(v157) = v147;
  HIWORD(v157) = v25;
  unint64_t v152 = __PAIR64__(__PAIR32__(v143, v145), v21);
  LOWORD(v153) = v22;
  WORD1(v153) = v23;
  __int16 v125 = v24;
  WORD2(v153) = v24;
  HIWORD(v153) = v150;
  LOWORD(v154) = v147;
  HIWORD(v154) = v25;
  uint64_t v36 = v33;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(&v152);
  LODWORD(v152) = v128;
  WORD2(v152) = v141;
  HIWORD(v152) = v139;
  LOWORD(v153) = v137;
  WORD1(v153) = v135;
  WORD2(v153) = v32;
  HIWORD(v153) = v36;
  LOWORD(v154) = v130;
  HIWORD(v154) = v129;
  uint64_t v126 = v32;
  if (isNegative_getter == _So9NSDecimala__isNegative_getter(&v152))
  {
    LODWORD(v152) = v21;
    WORD2(v152) = v145;
    HIWORD(v152) = v143;
    LOWORD(v153) = v22;
    WORD1(v153) = v23;
    WORD2(v153) = v24;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v25;
    uint64_t v38 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v38, &v155);
    NSDecimal.asVariableLengthInteger()( v21 | (v145 << 32) | (v143 << 48),  v22 | (v23 << 16) | (v24 << 32) | (v150 << 48),  v147 | (v25 << 16));
    uint64_t v40 = v39;
    NSDecimal.asVariableLengthInteger()( v128 | (v141 << 32) | (v139 << 48),  v137 | (v135 << 16) | (v126 << 32) | (v36 << 48),  v130 | (v129 << 16));
    uint64_t v43 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v40, v41, 9LL, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v44 = *(void *)(v43 + 16);
    if (v44 <= 8)
    {
      v46._rawValue = (void *)v43;
LABEL_29:
      _So9NSDecimala__length_setter(v44, &v155);
LABEL_144:
      NSDecimal.copyVariableLengthInteger(_:)(v46);
      if (v117)
      {
        uint64_t v57 = v117;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }

      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v155);
      NSDecimal.compact()();
      int v27 = v155;
      __int16 v28 = WORD2(v155);
      __int16 v29 = HIWORD(v155);
      __int16 v30 = v156;
      __int16 v31 = WORD1(v156);
      LOWORD(v32) = WORD2(v156);
      LOWORD(v33) = HIWORD(v156);
      __int16 v34 = v157;
      __int16 v35 = HIWORD(v157);
      goto LABEL_147;
    }

    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v43, a4);
    v46._rawValue = v45;
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    int v49 = v155;
    __int16 v50 = WORD2(v155);
    __int16 v51 = HIWORD(v155);
    __int16 v52 = v156;
    __int16 v53 = WORD1(v156);
    __int16 v54 = WORD2(v156);
    __int16 v55 = HIWORD(v156);
    unint64_t v152 = v155;
    uint64_t v153 = v156;
    __int16 v148 = HIWORD(v157);
    __int16 v151 = v157;
    int v154 = v157;
    int v56 = _So9NSDecimala__exponent_getter((char *)&v152);
    if (v48 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v48 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v56, (_DWORD)v48))
        {
          if (v56 + (int)v48 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_17:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v57 = (void *)swift_allocError();
            *uint64_t v58 = 0;
            swift_willThrow();
            goto LABEL_18;
          }

          LODWORD(v152) = v49;
          WORD2(v152) = v50;
          HIWORD(v152) = v51;
          LOWORD(v153) = v52;
          WORD1(v153) = v53;
          WORD2(v153) = v54;
          HIWORD(v153) = v55;
          LOWORD(v154) = v151;
          HIWORD(v154) = v148;
          int v100 = _So9NSDecimala__exponent_getter((char *)&v152);
          BOOL v101 = __OFADD__(v100, (_DWORD)v48);
          uint64_t v102 = (v100 + v48);
          if (!v101)
          {
            _So9NSDecimala__exponent_setter(v102, &v155);
            unint64_t v44 = *((void *)v46._rawValue + 2);
            char v20 = v124;
            if (HIDWORD(v44)) {
              goto LABEL_163;
            }
            goto LABEL_29;
          }

          __break(1u);
          goto LABEL_161;
        }

LABEL_150:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v57 = (void *)swift_allocError();
  *int v119 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:
  v161[0] = v57;
  id v59 = v57;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  else {
    uint64_t v60 = 0LL;
  }
  *(_OWORD *)((char *)v161 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0LL, v161);
  _So9NSDecimala__length_setter(0LL, v161);
  _So9NSDecimala__isNegative_setter(1LL, v161);
  _So9NSDecimala__isCompact_setter(v161);
  _So9NSDecimala__reserved_setter(v161);
  __int128 v61 = *(_OWORD *)((char *)v161 + 4);
  *(_DWORD *)a1 = v161[0];
  *(_OWORD *)(a1 + 4) = v61;

  return v60;
}

  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v57 = (void *)swift_allocError();
  *int v119 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:
  v161[0] = v57;
  id v59 = v57;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  else {
    uint64_t v60 = 0LL;
  }
  *(_OWORD *)((char *)v161 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0LL, v161);
  _So9NSDecimala__length_setter(0LL, v161);
  _So9NSDecimala__isNegative_setter(1LL, v161);
  _So9NSDecimala__isCompact_setter(v161);
  _So9NSDecimala__reserved_setter(v161);
  __int128 v61 = *(_OWORD *)((char *)v161 + 4);
  *(_DWORD *)a1 = v161[0];
  *(_OWORD *)(a1 + 4) = v61;

  return v60;
}

        uint64_t v33 = 512LL;
LABEL_154:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_282;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v91 = (int)POSIXErrorCode.rawValue.getter();
        uint64_t v92 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        unsigned int v93 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v72 = objc_msgSend(v92, sel_initWithDomain_code_userInfo_, v93, v91, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v94 = objc_msgSend(v72, sel_domain);
        __int16 v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
        __int16 v15 = v96;

        int v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        LODWORD(v23) = v98;
        if (v95 == v97 && v15 == v98)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_159;
        }

        __int16 v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v99 & 1) != 0) {
          goto LABEL_159;
        }
        __break(1u);
LABEL_242:
        if ((_DWORD)v23 == 63)
        {
          __int16 v140 = 258LL;
        }

        else
        {
          if ((_DWORD)v23 == 102)
          {
            uint64_t v23 = 0LL;
            unint64_t v185 = 256LL;
            goto LABEL_275;
          }

        uint64_t v204 = v198;
        uint64_t v205 = v199;
        goto LABEL_151;
      }
    }

    a1 = v302;
    uint64_t v40 = v289;
    uint64_t result = v288;
    Swift::OpaquePointer v46 = v297;
    uint64_t v47 = v298;
LABEL_16:
    unint64_t v44 = v47 + 1;
    if (v46 == v286) {
      goto LABEL_194;
    }
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_194:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v279 & 1) == 0) {
    return v282;
  }
LABEL_221:
  __break(1u);
  return result;
}

                            swift_bridgeObjectRelease();
                            unint64_t v65 = v157;
                            uint64_t v84 = object;
                            if ((v156 & 1) == 0)
                            {
LABEL_151:
                              specialized _NativeDictionary._insert(at:key:value:)( v84,  v163,  v9,  v164,  v81,  (void *)v94);
                              swift_bridgeObjectRetain();
LABEL_152:
                              *(void *)(v65 + 16) = v94;
                              swift_bridgeObjectRelease();
                              os_unfair_lock_unlock(v158);
                              swift_release();
                              swift_bridgeObjectRelease();
                              outlined consume of ICUDateIntervalFormatter??(1LL);
                              uint64_t v74 = v81;
LABEL_153:
                              swift_bridgeObjectRelease();
                              swift_release();
                              if (v74)
                              {
LABEL_154:
                                ICUPatternGenerator.defaultHourCycle.getter((char *)&v165);
                                swift_release();
                                uint64_t result = (uint64_t)outlined release of Locale.Components(v167);
                                __int16 v144 = v165;
                              }

                              else
                              {
                                uint64_t result = (uint64_t)outlined release of Locale.Components(v167);
                                __int16 v144 = 2;
                              }

                              *(_BYTE *)(v8 + 281) = v144;
                              *__int128 v162 = v144;
                              return result;
                            }

  uint64_t v76 = v117;
  if (v117 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v76 = 0LL;
  }
  *(void *)&__src[15] = v76;
  BYTE8(__src[15]) = v117 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v12 & 0x800) == 0)
  {
LABEL_63:
    if ((v12 & 0x1000) == 0) {
      goto LABEL_64;
    }
LABEL_157:
    unsigned int v78 = v119;
    if (v119 == 0x7FFFFFFFFFFFFFFFLL) {
      unsigned int v78 = 0LL;
    }
    *(void *)&__src[17] = v78;
    BYTE8(__src[17]) = v119 == 0x7FFFFFFFFFFFFFFFLL;
    if ((v12 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_65;
  }

                  __break(1u);
LABEL_151:
                  __break(1u);
                }

                __int16 v50 = v60;
              }
            }
          }
        }

                      if (((uint64_t)v337._nsError._domain & 1) != 0)
                      {
                        __int128 v242 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( 2LL,  0,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
                        if (!v7)
                        {
                          DateComponents.hour.setter(v242, 0);
                          __int128 v243 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( 2LL,  0,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
                          DateComponents.minute.setter(v243, 0);
                          __int128 v244 = 2LL;
                          __int128 v245 = 0;
LABEL_153:
                          __int128 v246 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( v244,  v245,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
                          DateComponents.second.setter(v246, 0);
                          if ((BYTE1(v337._nsError._domain) & 1) != 0)
                          {
                            expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)( 46LL,  (unsigned __int8 **)&v337._nsError._reserved,  a1,  a2);
                            __int128 v247 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( 0LL,  1,  1,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
                            __int16 v7 = 0LL;
                            DateComponents.nanosecond.setter(v247, 0);
                          }

      uint64_t v40 = v12;
      goto LABEL_151;
    }

      uint64_t v40 = v12;
      goto LABEL_151;
    }

      uint64_t v40 = v12;
      goto LABEL_151;
    }

      __int16 v31 = v12;
      goto LABEL_151;
    }

              swift_bridgeObjectRelease();
              return 0LL;
            }

uint64_t _NSDecimalSubtract(_:_:_:_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  v152[3] = *MEMORY[0x1895F89C0];
  int v4 = *a2;
  __int16 v112 = *((_WORD *)a2 + 2);
  __int16 v114 = *((_WORD *)a2 + 3);
  unsigned __int16 v116 = *((_WORD *)a2 + 4);
  __int16 v118 = *((_WORD *)a2 + 5);
  __int16 v120 = *((_WORD *)a2 + 6);
  unsigned __int16 v122 = *((_WORD *)a2 + 8);
  unsigned __int16 v124 = *((_WORD *)a2 + 7);
  unsigned __int16 v126 = *((_WORD *)a2 + 9);
  LODWORD(v5) = *(_DWORD *)a3;
  LOWORD(v6) = *(_WORD *)(a3 + 4);
  LOWORD(v7) = *(_WORD *)(a3 + 6);
  unsigned __int16 v8 = *(_WORD *)(a3 + 8);
  LOWORD(v9) = *(_WORD *)(a3 + 10);
  LOWORD(v10) = *(_WORD *)(a3 + 12);
  LOWORD(v11) = *(_WORD *)(a3 + 14);
  LOWORD(v12) = *(_WORD *)(a3 + 16);
  unsigned __int16 v13 = *(_WORD *)(a3 + 18);
  LODWORD(v152[0]) = v5;
  WORD2(v152[0]) = v6;
  HIWORD(v152[0]) = v7;
  LOWORD(v152[1]) = v8;
  WORD1(v152[1]) = v9;
  WORD2(v152[1]) = v10;
  HIWORD(v152[1]) = v11;
  LOWORD(v152[2]) = v12;
  WORD1(v152[2]) = v13;
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    unsigned __int16 v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    unsigned __int16 v149 = v11;
    unsigned __int16 v150 = v12;
    unsigned __int16 v151 = v13;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v146);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v152);
    LODWORD(v5) = v152[0];
    LOWORD(v6) = WORD2(v152[0]);
    LOWORD(v7) = HIWORD(v152[0]);
    unsigned __int16 v8 = v152[1];
    LOWORD(v9) = WORD1(v152[1]);
    LOWORD(v10) = WORD2(v152[1]);
    LOWORD(v11) = HIWORD(v152[1]);
    LOWORD(v12) = v152[2];
    unsigned __int16 v13 = WORD1(v152[2]);
  }

  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v4;
    WORD2(v146) = v112;
    HIWORD(v146) = v114;
    unsigned __int16 v147 = v116;
    LOWORD(v148) = v118;
    HIWORD(v148) = v120;
    unsigned __int16 v149 = v124;
    unsigned __int16 v150 = v122;
    unsigned __int16 v151 = v126;
  }

  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    unsigned __int16 v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    unsigned __int16 v149 = v11;
    unsigned __int16 v150 = v12;
    unsigned __int16 v151 = v13;
  }

  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    uint64_t v45 = a1;
    unsigned __int16 v18 = v8;
    unsigned __int16 v19 = v13;
LABEL_27:
    uint64_t v43 = 0LL;
    *(_DWORD *)uint64_t v45 = v5;
    *(_WORD *)(v45 + 4) = v6;
    *(_WORD *)(v45 + 6) = v7;
    *(_WORD *)(v45 + 8) = v18;
    *(_WORD *)(v45 + 10) = v9;
    *(_WORD *)(v45 + 12) = v10;
    *(_WORD *)(v45 + 14) = v11;
    *(_WORD *)(v45 + 16) = v12;
    *(_WORD *)(v45 + 18) = v19;
    return v43;
  }

  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v5) = v4;
    LOWORD(v6) = v112;
    LOWORD(v7) = v114;
    unsigned __int16 v18 = v116;
    LOWORD(v9) = v118;
    LOWORD(v10) = v120;
    LOWORD(v12) = v122;
    LOWORD(v11) = v124;
    unsigned __int16 v19 = v126;
    goto LABEL_26;
  }

  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  LODWORD(v140) = v5;
  WORD2(v140) = v6;
  HIWORD(v140) = v7;
  unsigned __int16 v141 = v8;
  LOWORD(v142) = v9;
  HIWORD(v142) = v10;
  unsigned __int16 v143 = v11;
  unsigned __int16 v144 = v12;
  unsigned __int16 v145 = v13;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v146, (uint64_t)&v140);
  uint64_t v15 = WORD2(v146);
  uint64_t v16 = HIWORD(v148);
  uint64_t v113 = v146;
  uint64_t v134 = v146;
  uint64_t v125 = v147;
  uint64_t v127 = HIWORD(v146);
  unsigned __int16 v135 = v147;
  uint64_t v119 = v149;
  uint64_t v121 = (unsigned __int16)v148;
  unsigned int v136 = v148;
  unsigned __int16 v137 = v149;
  int v117 = v150;
  unsigned __int16 v138 = v150;
  int v123 = v151;
  unsigned __int16 v139 = v151;
  int v17 = _So9NSDecimala__length_getter(&v134);
  uint64_t v5 = v140;
  uint64_t v6 = WORD2(v140);
  uint64_t v7 = HIWORD(v140);
  unsigned __int16 v18 = v141;
  uint64_t v9 = (unsigned __int16)v142;
  uint64_t v10 = HIWORD(v142);
  uint64_t v11 = v143;
  int v12 = v144;
  unsigned __int16 v19 = v145;
  if (!v17)
  {
LABEL_26:
    uint64_t v45 = a1;
    goto LABEL_27;
  }

  __int16 v115 = v16;
  uint64_t v134 = v140;
  unsigned __int16 v135 = v141;
  unsigned int v136 = v142;
  unsigned __int16 v137 = v143;
  unsigned __int16 v138 = v144;
  unsigned __int16 v139 = v145;
  int v108 = v145;
  uint64_t v107 = v141;
  if (!_So9NSDecimala__length_getter(&v134))
  {
    LODWORD(v5) = v113;
    LOWORD(v10) = v16;
    LOWORD(v6) = v15;
    LOWORD(v7) = v127;
    unsigned __int16 v18 = v125;
    LOWORD(v11) = v119;
    LOWORD(v9) = v121;
    LOWORD(v12) = v117;
    unsigned __int16 v19 = v123;
    goto LABEL_26;
  }

  LODWORD(v134) = v113;
  WORD2(v134) = v15;
  HIWORD(v134) = v127;
  unsigned __int16 v135 = v125;
  LOWORD(v136) = v121;
  HIWORD(v136) = v16;
  unsigned __int16 v137 = v119;
  unsigned __int16 v138 = v117;
  unsigned __int16 v139 = v123;
  *(_DWORD *)int v129 = v113;
  *(_WORD *)&v129[4] = v15;
  *(_DWORD *)&v129[6] = __PAIR32__(v125, v127);
  unsigned int v130 = __PAIR32__(v16, v121);
  unsigned __int16 v131 = v119;
  unsigned __int16 v132 = v117;
  unsigned __int16 v133 = v123;
  int v104 = _So9NSDecimala__isNegative_getter(v129);
  *(_DWORD *)int v129 = v5;
  __int16 v106 = v6;
  *(_WORD *)&v129[4] = v6;
  *(_WORD *)&v129[6] = v7;
  *(_WORD *)&v129[8] = v107;
  LOWORD(v130) = v9;
  HIWORD(v130) = v10;
  unsigned __int16 v131 = v11;
  unsigned __int16 v132 = v12;
  unsigned __int16 v133 = v108;
  if (v104 == _So9NSDecimala__isNegative_getter(v129))
  {
    *(_DWORD *)int v129 = v113;
    *(_WORD *)&v129[4] = v15;
    *(_WORD *)&v129[6] = v127;
    *(_WORD *)&v129[8] = v125;
    LOWORD(v130) = v121;
    HIWORD(v130) = v16;
    unsigned __int16 v131 = v119;
    unsigned __int16 v132 = v117;
    unsigned __int16 v133 = v123;
    uint64_t v20 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v20, &v134);
    NSDecimal.asVariableLengthInteger()( v113 | (v15 << 32) | (v127 << 48),  v125 | (v121 << 16) | (v16 << 32) | (v119 << 48),  v117 | (v123 << 16));
    uint64_t v22 = v21;
    NSDecimal.asVariableLengthInteger()( v5 | (v6 << 32) | (v7 << 48),  v107 | (v9 << 16) | (v10 << 32) | (v11 << 48),  v12 | (v108 << 16));
    uint64_t v25 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v22, v23, 9LL, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v26 = *(void *)(v25 + 16);
    if (v26 <= 8)
    {
LABEL_54:
      _So9NSDecimala__length_setter(v26, &v134);
      v82._rawValue = (void *)v25;
LABEL_146:
      NSDecimal.copyVariableLengthInteger(_:)(v82);
      if (v98)
      {
        uint64_t v40 = v98;
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v134);
      NSDecimal.compact()();
      LODWORD(v5) = v134;
      LOWORD(v6) = WORD2(v134);
      LOWORD(v7) = HIWORD(v134);
      unsigned __int16 v18 = v135;
      LOWORD(v9) = v136;
      LOWORD(v10) = HIWORD(v136);
      LOWORD(v11) = v137;
      LOWORD(v12) = v138;
      unsigned __int16 v19 = v139;
      goto LABEL_26;
    }

    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v25, a4);
    uint64_t v28 = v27;
    uint64_t v128 = v29;
    swift_bridgeObjectRelease();
    int v30 = v134;
    __int16 v31 = WORD2(v134);
    __int16 v32 = HIWORD(v134);
    unsigned __int16 v33 = v135;
    __int16 v34 = v136;
    __int16 v35 = HIWORD(v136);
    unsigned __int16 v36 = v137;
    unsigned __int16 v37 = v138;
    unsigned __int16 v38 = v139;
    *(void *)int v129 = v134;
    *(_WORD *)&v129[8] = v135;
    unsigned int v130 = v136;
    unsigned __int16 v131 = v137;
    unsigned __int16 v132 = v138;
    unsigned __int16 v133 = v139;
    int v39 = _So9NSDecimala__exponent_getter(v129);
    if (v28 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v28 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v39, (_DWORD)v28))
        {
          if (v39 + (int)v28 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_19:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v40 = (void *)swift_allocError();
            *uint64_t v41 = 0;
            swift_willThrow();
            goto LABEL_20;
          }

          *(_DWORD *)int v129 = v30;
          *(_WORD *)&v129[4] = v31;
          *(_WORD *)&v129[6] = v32;
          *(_WORD *)&v129[8] = v33;
          LOWORD(v130) = v34;
          HIWORD(v130) = v35;
          unsigned __int16 v131 = v36;
          unsigned __int16 v132 = v37;
          unsigned __int16 v133 = v38;
          int v79 = _So9NSDecimala__exponent_getter(v129);
          BOOL v80 = __OFADD__(v79, (_DWORD)v28);
          uint64_t v81 = (v79 + v28);
          if (!v80)
          {
            _So9NSDecimala__exponent_setter(v81, &v134);
            uint64_t v25 = v128;
            unint64_t v26 = *(void *)(v128 + 16);
            if (HIDWORD(v26)) {
              goto LABEL_162;
            }
            goto LABEL_54;
          }

          __break(1u);
          goto LABEL_160;
        }

uint64_t __NSDecimalMultiply(_:_:_:_:)(uint64_t a1, unsigned int *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned __int16 *)a2 + 2);
  uint64_t v6 = *((unsigned __int16 *)a2 + 3);
  uint64_t v7 = *((unsigned __int16 *)a2 + 4);
  uint64_t v8 = *((unsigned __int16 *)a2 + 5);
  uint64_t v9 = *((unsigned __int16 *)a2 + 6);
  uint64_t v10 = *((unsigned __int16 *)a2 + 7);
  int v11 = *((unsigned __int16 *)a2 + 8);
  int v12 = *((unsigned __int16 *)a2 + 9);
  uint64_t v13 = *(unsigned int *)a3;
  uint64_t v14 = a3[2];
  uint64_t v15 = a3[3];
  uint64_t v16 = a3[4];
  uint64_t v17 = a3[5];
  uint64_t v18 = a3[6];
  uint64_t v19 = a3[7];
  int v20 = a3[8];
  int v21 = a3[9];
  LODWORD(v96[0]) = *a2;
  uint64_t v82 = v7;
  uint64_t v83 = v5;
  WORD2(v96[0]) = v5;
  uint64_t v79 = v6;
  uint64_t v80 = v9;
  HIWORD(v96[0]) = v6;
  LOWORD(v96[1]) = v7;
  uint64_t v81 = v8;
  WORD1(v96[1]) = v8;
  WORD2(v96[1]) = v9;
  uint64_t v86 = v10;
  HIWORD(v96[1]) = v10;
  int v84 = v12;
  int v85 = v11;
  LOWORD(v96[2]) = v11;
  WORD1(v96[2]) = v12;
  if (!_So9NSDecimala__length_getter(v96))
  {
    LODWORD(v96[0]) = v4;
    WORD2(v96[0]) = v83;
    HIWORD(v96[0]) = v79;
    LOWORD(v96[1]) = v82;
    WORD1(v96[1]) = v81;
    WORD2(v96[1]) = v80;
    HIWORD(v96[1]) = v86;
    LOWORD(v96[2]) = v85;
    WORD1(v96[2]) = v84;
  }

  LODWORD(v96[0]) = v13;
  WORD2(v96[0]) = v14;
  HIWORD(v96[0]) = v15;
  LOWORD(v96[1]) = v16;
  WORD1(v96[1]) = v17;
  WORD2(v96[1]) = v18;
  HIWORD(v96[1]) = v19;
  LOWORD(v96[2]) = v20;
  WORD1(v96[2]) = v21;
  if (!_So9NSDecimala__length_getter(v96))
  {
    LODWORD(v96[0]) = v13;
    WORD2(v96[0]) = v14;
    HIWORD(v96[0]) = v15;
    LOWORD(v96[1]) = v16;
    WORD1(v96[1]) = v17;
    WORD2(v96[1]) = v18;
    HIWORD(v96[1]) = v19;
    LOWORD(v96[2]) = v20;
    WORD1(v96[2]) = v21;
    if (_So9NSDecimala__isNegative_getter(v96))
    {
LABEL_15:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      __int16 v32 = (void *)swift_allocError();
      *unsigned __int16 v33 = 0;
      swift_willThrow();
LABEL_16:
      uint64_t v34 = a1;
      goto LABEL_17;
    }
  }

  __int16 v73 = v21;
  __int16 v74 = v20;
  __int16 v75 = v18;
  uint64_t v76 = v17;
  __int16 v77 = v15;
  LODWORD(v96[0]) = v4;
  WORD2(v96[0]) = v83;
  HIWORD(v96[0]) = v79;
  LOWORD(v96[1]) = v82;
  WORD1(v96[1]) = v81;
  WORD2(v96[1]) = v80;
  HIWORD(v96[1]) = v86;
  LOWORD(v96[2]) = v85;
  WORD1(v96[2]) = v84;
  int v22 = _So9NSDecimala__length_getter(v96);
  __int128 v23 = 0uLL;
  if (!v22)
  {
    int v38 = 0;
    uint64_t v34 = a1;
    goto LABEL_26;
  }

  LODWORD(v96[0]) = v13;
  WORD2(v96[0]) = v14;
  HIWORD(v96[0]) = v15;
  LOWORD(v96[1]) = v16;
  WORD1(v96[1]) = v17;
  WORD2(v96[1]) = v18;
  HIWORD(v96[1]) = v19;
  LOWORD(v96[2]) = v20;
  WORD1(v96[2]) = v21;
  if (!_So9NSDecimala__length_getter(v96))
  {
    int v38 = 0;
    uint64_t v34 = a1;
    __int128 v23 = 0uLL;
    goto LABEL_26;
  }

  int v70 = v4;
  NSDecimal.asVariableLengthInteger()( v4 | (v83 << 32) | (v79 << 48),  v82 | (v81 << 16) | (v80 << 32) | (v86 << 48),  v85 | (v84 << 16));
  uint64_t v25 = v24;
  NSDecimal.asVariableLengthInteger()( v13 | (v14 << 32) | (v15 << 48),  v16 | (v76 << 16) | (v18 << 32) | (v19 << 48),  v20 | (v21 << 16));
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v25 + 16);
  if (v28)
  {
    uint64_t v29 = *(void *)(v26 + 16);
    if (v29)
    {
      uint64_t v30 = v28 + v29;
      if (__OFADD__(v28, v29)) {
        goto LABEL_74;
      }
      if (v30 > 15)
      {
        uint64_t v30 = 16LL;
        goto LABEL_29;
      }

      if ((v30 & 0x8000000000000000LL) == 0)
      {
        if (!v30)
        {
          uint64_t v31 = MEMORY[0x18961AFE8];
          goto LABEL_30;
        }

uint64_t __NSDecimalPower(_:_:_:_:)(uint64_t a1, int a2, Swift::Int exponent, NSDecimal *retstr)
{
  if (v8)
  {
    *(void *)uint64_t v13 = v8;
    id v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    else {
      uint64_t v10 = 0LL;
    }
    *(_OWORD *)&v13[4] = 0uLL;
    _So9NSDecimala__exponent_setter(0LL, v13);
    _So9NSDecimala__length_setter(0LL, v13);
    _So9NSDecimala__isNegative_setter(1LL, v13);
    _So9NSDecimala__isCompact_setter(v13);
    _So9NSDecimala__reserved_setter(v13);
    __int128 v11 = *(_OWORD *)&v13[4];
    *(_DWORD *)a1 = *(_DWORD *)v13;
    *(_OWORD *)(a1 + 4) = v11;
  }

  else
  {
    uint64_t v10 = 0LL;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
  }

  return v10;
}

uint64_t _NSDecimalCompare(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)( *(void *)a1,  *(void *)(a1 + 8),  *(_DWORD *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16));
}

void _NSDecimalRound(uint64_t a1, int a2, Swift::Int scale, NSDecimal *retstr)
{
  if (v8)
  {
  }

  else
  {
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
  }

double _NSDecimalCompact(int *a1)
{
  int v3 = *a1;
  __int128 v4 = *(_OWORD *)(a1 + 1);
  NSDecimal.compact()();
  *a1 = v3;
  double result = *(double *)&v4;
  *(_OWORD *)(a1 + 1) = v4;
  return result;
}

uint64_t __NSDecimalString(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!v64)
  {
    outlined destroy of Any?((uint64_t)&v62);
    goto LABEL_7;
  }

  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    uint64_t v10 = (void *)0xE100000000000000LL;
    uint64_t v7 = 46LL;
    goto LABEL_8;
  }

  uint64_t v4 = *((void *)&v65[0] + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 224);
  swift_unknownObjectRetain();
  uint64_t v7 = v6(ObjectType, v4);
  id v9 = v8;
  swift_unknownObjectRelease_n();
  if (v9)
  {
    uint64_t v10 = v9;
  }

  else
  {
    uint64_t v7 = 46LL;
    uint64_t v10 = (void *)0xE100000000000000LL;
  }

id _NSDecimalString(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v5, 0, sizeof(v5));
  }

  __NSDecimalString(_:_:)(a1, (uint64_t)v5);
  outlined destroy of Any?((uint64_t)v5);
  int v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t _NSStringToDecimal(void *a1, void *a2, uint64_t a3)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (unint64_t)v5,  v6,  0x2EuLL,  0xE100000000000000LL,  0,  (uint64_t)v12);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v12, (uint64_t)v13);
  if (v16 == 1)
  {
    *a2 = 0LL;
  }

  else
  {
    int v7 = v13[0];
    uint64_t v8 = HIWORD(v13[0]);
    uint64_t v9 = HIDWORD(v13[0]);
    int v10 = v14;
    *a2 = v15;
    *(_DWORD *)a3 = v7;
    *(_WORD *)(a3 + 4) = v9;
    *(_WORD *)(a3 + 6) = v8;
    *(void *)(a3 + 8) = v13[1];
    *(_DWORD *)(a3 + 16) = v10;
  }

  return swift_bridgeObjectRelease();
}

uint64_t NSDecimalAdd(_:_:_:_:)(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  v161[3] = *MEMORY[0x1895F89C0];
  __int16 v4 = *((_WORD *)a2 + 2);
  __int16 v5 = *((_WORD *)a2 + 3);
  __int16 v6 = *((_WORD *)a2 + 4);
  __int16 v7 = *((_WORD *)a2 + 5);
  __int16 v8 = *((_WORD *)a2 + 6);
  __int16 v9 = *((_WORD *)a2 + 7);
  __int16 v10 = *((_WORD *)a2 + 8);
  int v11 = *a3;
  __int16 v12 = *((_WORD *)a3 + 2);
  __int16 v13 = *((_WORD *)a3 + 3);
  __int16 v14 = *((_WORD *)a3 + 4);
  __int16 v15 = *((_WORD *)a3 + 5);
  __int16 v16 = *((_WORD *)a3 + 6);
  __int16 v17 = *((_WORD *)a3 + 7);
  __int16 v18 = *((_WORD *)a3 + 8);
  __int16 v19 = *((_WORD *)a3 + 9);
  int v146 = *a2;
  __int16 v149 = *((_WORD *)a2 + 9);
  LODWORD(v161[0]) = *a2;
  __int16 v144 = v4;
  WORD2(v161[0]) = v4;
  __int16 v142 = v5;
  HIWORD(v161[0]) = v5;
  __int16 v140 = v6;
  LOWORD(v161[1]) = v6;
  __int16 v138 = v7;
  WORD1(v161[1]) = v7;
  __int16 v136 = v8;
  WORD2(v161[1]) = v8;
  __int16 v134 = v9;
  HIWORD(v161[1]) = v9;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v146;
    WORD2(v161[0]) = v144;
    HIWORD(v161[0]) = v142;
    LOWORD(v161[1]) = v140;
    WORD1(v161[1]) = v138;
    WORD2(v161[1]) = v136;
    HIWORD(v161[1]) = v134;
    LOWORD(v161[2]) = v10;
    WORD1(v161[2]) = v149;
  }

  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v11;
    WORD2(v161[0]) = v12;
    HIWORD(v161[0]) = v13;
    LOWORD(v161[1]) = v14;
    WORD1(v161[1]) = v15;
    WORD2(v161[1]) = v16;
    HIWORD(v161[1]) = v17;
    LOWORD(v161[2]) = v18;
    WORD1(v161[2]) = v19;
  }

  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    uint64_t v60 = 0LL;
    *(_DWORD *)a1 = v11;
    *(_WORD *)(a1 + 4) = v12;
    *(_WORD *)(a1 + 6) = v13;
    *(_WORD *)(a1 + 8) = v14;
    *(_WORD *)(a1 + 10) = v15;
    *(_WORD *)(a1 + 12) = v16;
    *(_WORD *)(a1 + 14) = v17;
    *(_WORD *)(a1 + 16) = v18;
    *(_WORD *)(a1 + 18) = v19;
    return v60;
  }

  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    *(_DWORD *)a1 = v146;
    *(_WORD *)(a1 + 4) = v144;
    *(_WORD *)(a1 + 6) = v142;
    *(_WORD *)(a1 + 8) = v140;
    *(_WORD *)(a1 + 10) = v138;
    *(_WORD *)(a1 + 12) = v136;
    *(_WORD *)(a1 + 14) = v134;
    *(_WORD *)(a1 + 16) = v10;
    uint64_t v60 = 0LL;
    *(_WORD *)(a1 + 18) = v149;
    return v60;
  }

  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  LODWORD(v158) = v11;
  WORD2(v158) = v12;
  HIWORD(v158) = v13;
  LOWORD(v159) = v14;
  WORD1(v159) = v15;
  WORD2(v159) = v16;
  HIWORD(v159) = v17;
  LOWORD(v160) = v18;
  HIWORD(v160) = v19;
  char v20 = specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)v161, (uint64_t)&v158);
  uint64_t v21 = LODWORD(v161[0]);
  uint64_t v22 = LOWORD(v161[1]);
  uint64_t v23 = WORD1(v161[1]);
  uint64_t v24 = WORD2(v161[1]);
  int v25 = WORD1(v161[2]);
  unint64_t v155 = v161[0];
  uint64_t v143 = HIWORD(v161[0]);
  uint64_t v145 = WORD2(v161[0]);
  uint64_t v156 = v161[1];
  uint64_t v150 = HIWORD(v161[1]);
  int v147 = LOWORD(v161[2]);
  int v157 = v161[2];
  int v26 = _So9NSDecimala__length_getter(&v155);
  int v27 = v158;
  __int16 v28 = WORD2(v158);
  __int16 v29 = HIWORD(v158);
  __int16 v30 = v159;
  __int16 v31 = WORD1(v159);
  uint64_t v32 = WORD2(v159);
  uint64_t v33 = HIWORD(v159);
  __int16 v34 = v160;
  __int16 v35 = HIWORD(v160);
  if (!v26) {
    goto LABEL_147;
  }
  __int16 v127 = v25;
  unint64_t v155 = v158;
  uint64_t v156 = v159;
  int v157 = v160;
  int v129 = HIWORD(v160);
  int v130 = (unsigned __int16)v160;
  uint64_t v128 = v158;
  uint64_t v139 = HIWORD(v158);
  uint64_t v141 = WORD2(v158);
  uint64_t v135 = WORD1(v159);
  uint64_t v137 = (unsigned __int16)v159;
  if (!_So9NSDecimala__length_getter(&v155))
  {
    int v27 = v21;
    __int16 v28 = v145;
    __int16 v29 = v143;
    __int16 v30 = v22;
    __int16 v31 = v23;
    LOWORD(v32) = v24;
    LOWORD(v33) = v150;
    __int16 v34 = v147;
    __int16 v35 = v25;
LABEL_147:
    uint64_t v70 = a1;
    goto LABEL_148;
  }

  char v124 = v20;
  LODWORD(v155) = v21;
  WORD2(v155) = v145;
  HIWORD(v155) = v143;
  LOWORD(v156) = v22;
  WORD1(v156) = v23;
  WORD2(v156) = v24;
  HIWORD(v156) = v150;
  LOWORD(v157) = v147;
  HIWORD(v157) = v25;
  unint64_t v152 = __PAIR64__(__PAIR32__(v143, v145), v21);
  LOWORD(v153) = v22;
  WORD1(v153) = v23;
  __int16 v125 = v24;
  WORD2(v153) = v24;
  HIWORD(v153) = v150;
  LOWORD(v154) = v147;
  HIWORD(v154) = v25;
  uint64_t v36 = v33;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(&v152);
  LODWORD(v152) = v128;
  WORD2(v152) = v141;
  HIWORD(v152) = v139;
  LOWORD(v153) = v137;
  WORD1(v153) = v135;
  WORD2(v153) = v32;
  HIWORD(v153) = v36;
  LOWORD(v154) = v130;
  HIWORD(v154) = v129;
  uint64_t v126 = v32;
  if (isNegative_getter == _So9NSDecimala__isNegative_getter(&v152))
  {
    LODWORD(v152) = v21;
    WORD2(v152) = v145;
    HIWORD(v152) = v143;
    LOWORD(v153) = v22;
    WORD1(v153) = v23;
    WORD2(v153) = v24;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v25;
    uint64_t v38 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v38, &v155);
    NSDecimal.asVariableLengthInteger()( v21 | (v145 << 32) | (v143 << 48),  v22 | (v23 << 16) | (v24 << 32) | (v150 << 48),  v147 | (v25 << 16));
    uint64_t v40 = v39;
    NSDecimal.asVariableLengthInteger()( v128 | (v141 << 32) | (v139 << 48),  v137 | (v135 << 16) | (v126 << 32) | (v36 << 48),  v130 | (v129 << 16));
    uint64_t v43 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v40, v41, 9LL, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v44 = *(void *)(v43 + 16);
    if (v44 <= 8)
    {
      v46._rawValue = (void *)v43;
LABEL_29:
      _So9NSDecimala__length_setter(v44, &v155);
LABEL_144:
      NSDecimal.copyVariableLengthInteger(_:)(v46);
      if (v117)
      {
        __int16 v57 = v117;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }

      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v155);
      NSDecimal.compact()();
      int v27 = v155;
      __int16 v28 = WORD2(v155);
      __int16 v29 = HIWORD(v155);
      __int16 v30 = v156;
      __int16 v31 = WORD1(v156);
      LOWORD(v32) = WORD2(v156);
      LOWORD(v33) = HIWORD(v156);
      __int16 v34 = v157;
      __int16 v35 = HIWORD(v157);
      goto LABEL_147;
    }

    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v43, a4);
    v46._rawValue = v45;
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    int v49 = v155;
    __int16 v50 = WORD2(v155);
    __int16 v51 = HIWORD(v155);
    __int16 v52 = v156;
    __int16 v53 = WORD1(v156);
    __int16 v54 = WORD2(v156);
    __int16 v55 = HIWORD(v156);
    unint64_t v152 = v155;
    uint64_t v153 = v156;
    __int16 v148 = HIWORD(v157);
    __int16 v151 = v157;
    int v154 = v157;
    int v56 = _So9NSDecimala__exponent_getter((char *)&v152);
    if (v48 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v48 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v56, (_DWORD)v48))
        {
          if (v56 + (int)v48 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_17:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            __int16 v57 = (void *)swift_allocError();
            *__int16 v58 = 0;
            swift_willThrow();
            goto LABEL_18;
          }

          LODWORD(v152) = v49;
          WORD2(v152) = v50;
          HIWORD(v152) = v51;
          LOWORD(v153) = v52;
          WORD1(v153) = v53;
          WORD2(v153) = v54;
          HIWORD(v153) = v55;
          LOWORD(v154) = v151;
          HIWORD(v154) = v148;
          int v100 = _So9NSDecimala__exponent_getter((char *)&v152);
          BOOL v101 = __OFADD__(v100, (_DWORD)v48);
          uint64_t v102 = (v100 + v48);
          if (!v101)
          {
            _So9NSDecimala__exponent_setter(v102, &v155);
            unint64_t v44 = *((void *)v46._rawValue + 2);
            char v20 = v124;
            if (HIDWORD(v44)) {
              goto LABEL_163;
            }
            goto LABEL_29;
          }

          __break(1u);
          goto LABEL_161;
        }

uint64_t NSDecimalSubtract(_:_:_:_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  v152[3] = *MEMORY[0x1895F89C0];
  int v4 = *a2;
  __int16 v112 = *((_WORD *)a2 + 2);
  __int16 v114 = *((_WORD *)a2 + 3);
  unsigned __int16 v116 = *((_WORD *)a2 + 4);
  __int16 v118 = *((_WORD *)a2 + 5);
  __int16 v120 = *((_WORD *)a2 + 6);
  unsigned __int16 v122 = *((_WORD *)a2 + 8);
  unsigned __int16 v124 = *((_WORD *)a2 + 7);
  unsigned __int16 v126 = *((_WORD *)a2 + 9);
  LODWORD(v5) = *(_DWORD *)a3;
  LOWORD(v6) = *(_WORD *)(a3 + 4);
  LOWORD(v7) = *(_WORD *)(a3 + 6);
  unsigned __int16 v8 = *(_WORD *)(a3 + 8);
  LOWORD(v9) = *(_WORD *)(a3 + 10);
  LOWORD(v10) = *(_WORD *)(a3 + 12);
  LOWORD(v11) = *(_WORD *)(a3 + 14);
  LOWORD(v12) = *(_WORD *)(a3 + 16);
  unsigned __int16 v13 = *(_WORD *)(a3 + 18);
  LODWORD(v152[0]) = v5;
  WORD2(v152[0]) = v6;
  HIWORD(v152[0]) = v7;
  LOWORD(v152[1]) = v8;
  WORD1(v152[1]) = v9;
  WORD2(v152[1]) = v10;
  HIWORD(v152[1]) = v11;
  LOWORD(v152[2]) = v12;
  WORD1(v152[2]) = v13;
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    unsigned __int16 v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    unsigned __int16 v149 = v11;
    unsigned __int16 v150 = v12;
    unsigned __int16 v151 = v13;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v146);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v152);
    LODWORD(v5) = v152[0];
    LOWORD(v6) = WORD2(v152[0]);
    LOWORD(v7) = HIWORD(v152[0]);
    unsigned __int16 v8 = v152[1];
    LOWORD(v9) = WORD1(v152[1]);
    LOWORD(v10) = WORD2(v152[1]);
    LOWORD(v11) = HIWORD(v152[1]);
    LOWORD(v12) = v152[2];
    unsigned __int16 v13 = WORD1(v152[2]);
  }

  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v4;
    WORD2(v146) = v112;
    HIWORD(v146) = v114;
    unsigned __int16 v147 = v116;
    LOWORD(v148) = v118;
    HIWORD(v148) = v120;
    unsigned __int16 v149 = v124;
    unsigned __int16 v150 = v122;
    unsigned __int16 v151 = v126;
  }

  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    unsigned __int16 v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    unsigned __int16 v149 = v11;
    unsigned __int16 v150 = v12;
    unsigned __int16 v151 = v13;
  }

  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    uint64_t v45 = a1;
    unsigned __int16 v18 = v8;
    unsigned __int16 v19 = v13;
LABEL_27:
    uint64_t v43 = 0LL;
    *(_DWORD *)uint64_t v45 = v5;
    *(_WORD *)(v45 + 4) = v6;
    *(_WORD *)(v45 + 6) = v7;
    *(_WORD *)(v45 + 8) = v18;
    *(_WORD *)(v45 + 10) = v9;
    *(_WORD *)(v45 + 12) = v10;
    *(_WORD *)(v45 + 14) = v11;
    *(_WORD *)(v45 + 16) = v12;
    *(_WORD *)(v45 + 18) = v19;
    return v43;
  }

  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v5) = v4;
    LOWORD(v6) = v112;
    LOWORD(v7) = v114;
    unsigned __int16 v18 = v116;
    LOWORD(v9) = v118;
    LOWORD(v10) = v120;
    LOWORD(v12) = v122;
    LOWORD(v11) = v124;
    unsigned __int16 v19 = v126;
    goto LABEL_26;
  }

  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  LODWORD(v140) = v5;
  WORD2(v140) = v6;
  HIWORD(v140) = v7;
  unsigned __int16 v141 = v8;
  LOWORD(v142) = v9;
  HIWORD(v142) = v10;
  unsigned __int16 v143 = v11;
  unsigned __int16 v144 = v12;
  unsigned __int16 v145 = v13;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v146, (uint64_t)&v140);
  uint64_t v15 = WORD2(v146);
  uint64_t v16 = HIWORD(v148);
  uint64_t v113 = v146;
  uint64_t v134 = v146;
  uint64_t v125 = v147;
  uint64_t v127 = HIWORD(v146);
  unsigned __int16 v135 = v147;
  uint64_t v119 = v149;
  uint64_t v121 = (unsigned __int16)v148;
  unsigned int v136 = v148;
  unsigned __int16 v137 = v149;
  int v117 = v150;
  unsigned __int16 v138 = v150;
  int v123 = v151;
  unsigned __int16 v139 = v151;
  int v17 = _So9NSDecimala__length_getter(&v134);
  uint64_t v5 = v140;
  uint64_t v6 = WORD2(v140);
  uint64_t v7 = HIWORD(v140);
  unsigned __int16 v18 = v141;
  uint64_t v9 = (unsigned __int16)v142;
  uint64_t v10 = HIWORD(v142);
  uint64_t v11 = v143;
  int v12 = v144;
  unsigned __int16 v19 = v145;
  if (!v17)
  {
LABEL_26:
    uint64_t v45 = a1;
    goto LABEL_27;
  }

  __int16 v115 = v16;
  uint64_t v134 = v140;
  unsigned __int16 v135 = v141;
  unsigned int v136 = v142;
  unsigned __int16 v137 = v143;
  unsigned __int16 v138 = v144;
  unsigned __int16 v139 = v145;
  int v108 = v145;
  uint64_t v107 = v141;
  if (!_So9NSDecimala__length_getter(&v134))
  {
    LODWORD(v5) = v113;
    LOWORD(v10) = v16;
    LOWORD(v6) = v15;
    LOWORD(v7) = v127;
    unsigned __int16 v18 = v125;
    LOWORD(v11) = v119;
    LOWORD(v9) = v121;
    LOWORD(v12) = v117;
    unsigned __int16 v19 = v123;
    goto LABEL_26;
  }

  LODWORD(v134) = v113;
  WORD2(v134) = v15;
  HIWORD(v134) = v127;
  unsigned __int16 v135 = v125;
  LOWORD(v136) = v121;
  HIWORD(v136) = v16;
  unsigned __int16 v137 = v119;
  unsigned __int16 v138 = v117;
  unsigned __int16 v139 = v123;
  *(_DWORD *)int v129 = v113;
  *(_WORD *)&v129[4] = v15;
  *(_DWORD *)&v129[6] = __PAIR32__(v125, v127);
  unsigned int v130 = __PAIR32__(v16, v121);
  unsigned __int16 v131 = v119;
  unsigned __int16 v132 = v117;
  unsigned __int16 v133 = v123;
  int v104 = _So9NSDecimala__isNegative_getter(v129);
  *(_DWORD *)int v129 = v5;
  __int16 v106 = v6;
  *(_WORD *)&v129[4] = v6;
  *(_WORD *)&v129[6] = v7;
  *(_WORD *)&v129[8] = v107;
  LOWORD(v130) = v9;
  HIWORD(v130) = v10;
  unsigned __int16 v131 = v11;
  unsigned __int16 v132 = v12;
  unsigned __int16 v133 = v108;
  if (v104 == _So9NSDecimala__isNegative_getter(v129))
  {
    *(_DWORD *)int v129 = v113;
    *(_WORD *)&v129[4] = v15;
    *(_WORD *)&v129[6] = v127;
    *(_WORD *)&v129[8] = v125;
    LOWORD(v130) = v121;
    HIWORD(v130) = v16;
    unsigned __int16 v131 = v119;
    unsigned __int16 v132 = v117;
    unsigned __int16 v133 = v123;
    uint64_t v20 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v20, &v134);
    NSDecimal.asVariableLengthInteger()( v113 | (v15 << 32) | (v127 << 48),  v125 | (v121 << 16) | (v16 << 32) | (v119 << 48),  v117 | (v123 << 16));
    uint64_t v22 = v21;
    NSDecimal.asVariableLengthInteger()( v5 | (v6 << 32) | (v7 << 48),  v107 | (v9 << 16) | (v10 << 32) | (v11 << 48),  v12 | (v108 << 16));
    uint64_t v25 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v22, v23, 9LL, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v26 = *(void *)(v25 + 16);
    if (v26 <= 8)
    {
LABEL_54:
      _So9NSDecimala__length_setter(v26, &v134);
      v82._rawValue = (void *)v25;
LABEL_146:
      NSDecimal.copyVariableLengthInteger(_:)(v82);
      if (v98)
      {
        uint64_t v40 = v98;
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v134);
      NSDecimal.compact()();
      LODWORD(v5) = v134;
      LOWORD(v6) = WORD2(v134);
      LOWORD(v7) = HIWORD(v134);
      unsigned __int16 v18 = v135;
      LOWORD(v9) = v136;
      LOWORD(v10) = HIWORD(v136);
      LOWORD(v11) = v137;
      LOWORD(v12) = v138;
      unsigned __int16 v19 = v139;
      goto LABEL_26;
    }

    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v25, a4);
    uint64_t v28 = v27;
    uint64_t v128 = v29;
    swift_bridgeObjectRelease();
    int v30 = v134;
    __int16 v31 = WORD2(v134);
    __int16 v32 = HIWORD(v134);
    unsigned __int16 v33 = v135;
    __int16 v34 = v136;
    __int16 v35 = HIWORD(v136);
    unsigned __int16 v36 = v137;
    unsigned __int16 v37 = v138;
    unsigned __int16 v38 = v139;
    *(void *)int v129 = v134;
    *(_WORD *)&v129[8] = v135;
    unsigned int v130 = v136;
    unsigned __int16 v131 = v137;
    unsigned __int16 v132 = v138;
    unsigned __int16 v133 = v139;
    int v39 = _So9NSDecimala__exponent_getter(v129);
    if (v28 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v28 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v39, (_DWORD)v28))
        {
          if (v39 + (int)v28 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_19:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v40 = (void *)swift_allocError();
            *uint64_t v41 = 0;
            swift_willThrow();
            goto LABEL_20;
          }

          *(_DWORD *)int v129 = v30;
          *(_WORD *)&v129[4] = v31;
          *(_WORD *)&v129[6] = v32;
          *(_WORD *)&v129[8] = v33;
          LOWORD(v130) = v34;
          HIWORD(v130) = v35;
          unsigned __int16 v131 = v36;
          unsigned __int16 v132 = v37;
          unsigned __int16 v133 = v38;
          int v79 = _So9NSDecimala__exponent_getter(v129);
          BOOL v80 = __OFADD__(v79, (_DWORD)v28);
          uint64_t v81 = (v79 + v28);
          if (!v80)
          {
            _So9NSDecimala__exponent_setter(v81, &v134);
            uint64_t v25 = v128;
            unint64_t v26 = *(void *)(v128 + 16);
            if (HIDWORD(v26)) {
              goto LABEL_162;
            }
            goto LABEL_54;
          }

          __break(1u);
          goto LABEL_160;
        }

unint64_t specialized static NSDecimal._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    objc_msgSend(a1, sel_decimalValue);
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    _So9NSDecimala__exponent_setter(0LL, &v2);
    _So9NSDecimala__length_setter(0LL, &v2);
    _So9NSDecimala__isNegative_setter(0LL, &v2);
    _So9NSDecimala__isCompact_setter(&v2);
    _So9NSDecimala__reserved_setter(&v2);
  }

  return v2 | ((unint64_t)(unsigned __int16)v3 << 32) | ((unint64_t)WORD1(v3) << 48);
}

uint64_t specialized __NSDecimalDivide(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = specialized NSDecimal._divide(by:roundingMode:)( *(void *)a3,  *(void *)(a3 + 8),  *(_DWORD *)(a3 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16));
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = v9;
  return 0LL;
}

uint64_t specialized __NSDecimalMultiplyByPowerOf10(_:_:_:_:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(void *)a1 = specialized NSDecimal._multiplyByPowerOfTen(power:roundingMode:)( a3,  *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16));
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = v9;
  return 0LL;
}

uint64_t specialized __NSDecimalNormalize(_:_:_:)(uint64_t a1, int *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  v8[0] = *(_DWORD *)a1;
  *(_OWORD *)&v8[1] = *(_OWORD *)(a1 + 4);
  int v6 = *a2;
  __int128 v7 = *(_OWORD *)(a2 + 1);
  char v4 = specialized static NSDecimal._normalize(a:b:roundingMode:)(v8, (uint64_t)&v6);
  *(_DWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 4) = *(_OWORD *)&v8[1];
  *a2 = v6;
  *(_OWORD *)(a2 + 1) = v7;
  return v4 & 1;
}

uint64_t one-time initialization function for processInfo()
{
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_ProcessInfo.State>._Buffer);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 24) = 0LL;
  *(void *)(v1 + 32) = 0LL;
  *(void *)(v1 + 16) = 0LL;
  *(_DWORD *)(v1 + 40) = 0;
  *(void *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<String?>._Buffer);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  *(void *)(v0 + 24) = result;
  static _ProcessInfo.processInfo = v0;
  return result;
}

unint64_t closure #1 in _ProcessInfo.arguments.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *a2 = v4;
    return swift_bridgeObjectRetain();
  }

  uint64_t v5 = static CommandLine.arguments.getter();
  if (!_CFProcessPath())
  {
LABEL_28:
    *(void *)(a1 + 16) = v5;
    *a2 = v5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  uint64_t v6 = String.init(cString:)();
  unint64_t v8 = v7;
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized Collection.first.getter(v6, v8);
  if (!v10) {
    goto LABEL_11;
  }
  if (v9 != 126 || v10 != 0xE100000000000000LL)
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_11:
    unint64_t v15 = v8;
    goto LABEL_23;
  }

  swift_bridgeObjectRelease();
LABEL_9:
  unint64_t v12 = specialized Collection<>.firstIndex(of:)(47LL, 0xE100000000000000LL, v6, v8);
  if ((v13 & 1) != 0)
  {
    uint64_t v16 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000LL) == 0) {
      uint64_t v16 = v6;
    }
    uint64_t v17 = v16 << 16;
    if ((v8 & 0x1000000000000000LL) == 0 || (v6 & 0x800000000000000LL) != 0) {
      unint64_t v14 = v17 | 7;
    }
    else {
      unint64_t v14 = v17 | 0xB;
    }
  }

  else
  {
    unint64_t v14 = v12;
  }

  unint64_t result = String.index(after:)();
  if (v14 >> 14 == result >> 14)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
  }

  else
  {
    if (v14 >> 14 < result >> 14) {
      goto LABEL_32;
    }
    uint64_t v21 = String.subscript.getter();
    uint64_t v19 = MEMORY[0x186E1B610](v21);
    uint64_t v20 = v22;
    swift_bridgeObjectRelease();
  }

  unint64_t v28 = static String.homeDirectoryPath(forUser:)(v19, v20);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Collection.suffix(from:)(v14, v6, v8);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v28;
  unint64_t v15 = v24;
LABEL_23:
  uint64_t v25 = String._standardizingPath.getter(v6, v15);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_183720D90;
    *(void *)(v5 + 32) = v25;
    *(void *)(v5 + 40) = v27;
    goto LABEL_28;
  }

  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (*(void *)(v5 + 16))
    {
LABEL_26:
      *(void *)(v5 + 32) = v25;
      *(void *)(v5 + 40) = v27;
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }

  else
  {
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v5);
    uint64_t v5 = result;
    if (*(void *)(result + 16)) {
      goto LABEL_26;
    }
  }

  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t closure #1 in _ProcessInfo.processName.getter@<X0>( unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = a1[1];
  if (v4)
  {
    unint64_t Process = *a1;
    unint64_t v6 = v4;
  }

  else
  {
    unint64_t Process = specialized static _ProcessInfo._getProcessName()();
    unint64_t v6 = v7;
    *a1 = Process;
    a1[1] = v7;
    swift_bridgeObjectRetain();
  }

  *a2 = Process;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in _ProcessInfo.processName.setter(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t _ProcessInfo.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _ProcessInfo()
{
  return objc_opt_self();
}

void *assignWithCopy for _ProcessInfo.State(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ProcessInfo.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ProcessInfo.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _ProcessInfo.State()
{
  return &type metadata for _ProcessInfo.State;
}

id closure #1 in _ProcessInfo.hostName.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    *a2 = *a1;
    a2[1] = v4;
    return (id)swift_bridgeObjectRetain();
  }

  id result = (id)_getCurrentNSHostName();
  if (result)
  {
    unint64_t v6 = result;
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v9 = v8;

    *a1 = v7;
    a1[1] = v9;
    *a2 = v7;
    a2[1] = v9;
    swift_bridgeObjectRetain();
    return (id)swift_bridgeObjectRetain();
  }

  __break(1u);
  return result;
}

uint64_t specialized _ProcessInfo.environment.getter()
{
  environ = _platform_shims_get_environ();
  if (!environ)
  {
    _platform_shims_unlock_environ();
    return MEMORY[0x18961AFF0];
  }

  uint64_t v1 = environ;
  unsigned int v2 = *environ;
  if (v2)
  {
    unint64_t v3 = (const char **)(v1 + 1);
    uint64_t v4 = (void *)MEMORY[0x18961AFE8];
    do
    {
      uint64_t v5 = strdup(v2);
      if (!v5) {
        goto LABEL_78;
      }
      unint64_t v6 = v5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
      }
      unint64_t v8 = v4[2];
      unint64_t v7 = v4[3];
      if (v8 >= v7 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v8 + 1,  1,  v4);
      }
      _OWORD v4[2] = v8 + 1;
      v4[v8 + 4] = v6;
      uint64_t v9 = *v3++;
      unsigned int v2 = v9;
    }

    while (v9);
  }

  else
  {
    uint64_t v4 = (void *)MEMORY[0x18961AFE8];
  }

  _platform_shims_unlock_environ();
  uint64_t v11 = v4[2];
  if (!v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = MEMORY[0x18961AFF0];
LABEL_69:
    swift_bridgeObjectRelease();
    uint64_t v68 = v4[2];
    if (v68)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0LL; i != v68; ++i)
      {
        __int16 v70 = (void *)v4[i + 4];
        free(v70);
      }

      swift_bridgeObjectRelease_n();
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    return v10;
  }

  swift_bridgeObjectRetain_n();
  unint64_t v12 = 0LL;
  uint64_t v10 = MEMORY[0x18961AFF0];
  uint64_t v76 = v11;
  while (v12 < v4[2])
  {
    uint64_t v13 = String.init(cString:)();
    unint64_t v15 = v14;
    specialized Collection<>.firstIndex(of:)(61LL, 0xE100000000000000LL, v13, v14);
    if ((v16 & 1) == 0)
    {
      uint64_t v78 = v10;
      uint64_t v17 = String.subscript.getter();
      uint64_t v18 = MEMORY[0x186E1B610](v17);
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      unint64_t v21 = String.index(after:)();
      uint64_t v22 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000LL) == 0) {
        uint64_t v22 = v13 & 0xFFFFFFFFFFFFLL;
      }
      if (4 * v22 < v21 >> 14) {
        goto LABEL_76;
      }
      uint64_t v23 = String.subscript.getter();
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      uint64_t v30 = MEMORY[0x186E1B610](v23, v25, v27, v29);
      uint64_t v77 = v31;
      swift_bridgeObjectRelease();
      uint64_t v32 = v78;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v34 = v18;
      uint64_t v35 = v18;
      uint64_t v36 = v78;
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v20);
      uint64_t v39 = *(void *)(v78 + 16);
      BOOL v40 = (v37 & 1) == 0;
      uint64_t v41 = v39 + v40;
      if (__OFADD__(v39, v40)) {
        goto LABEL_77;
      }
      char v42 = v37;
      if (*(void *)(v78 + 24) >= v41)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v37 & 1) == 0) {
            goto LABEL_65;
          }
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
          uint64_t v46 = static _DictionaryStorage.copy(original:)();
          uint64_t v32 = v46;
          if (*(void *)(v78 + 16))
          {
            uint64_t v47 = (char *)(v46 + 64);
            uint64_t v48 = (char *)(v78 + 64);
            unint64_t v49 = (unint64_t)((1LL << *(_BYTE *)(v32 + 32)) + 63) >> 6;
            uint64_t v72 = v78 + 64;
            if (v32 != v78 || v47 >= &v48[8 * v49]) {
              memmove(v47, v48, 8 * v49);
            }
            int64_t v50 = 0LL;
            *(void *)(v32 + 16) = *(void *)(v78 + 16);
            uint64_t v51 = 1LL << *(_BYTE *)(v78 + 32);
            if (v51 < 64) {
              uint64_t v52 = ~(-1LL << v51);
            }
            else {
              uint64_t v52 = -1LL;
            }
            unint64_t v53 = v52 & *(void *)(v78 + 64);
            int64_t v73 = (unint64_t)(v51 + 63) >> 6;
            while (1)
            {
              if (v53)
              {
                uint64_t v74 = (v53 - 1) & v53;
                int64_t v75 = v50;
                unint64_t v54 = __clz(__rbit64(v53)) | (v50 << 6);
              }

              else
              {
                int64_t v64 = v50 + 1;
                if (__OFADD__(v50, 1LL)) {
                  goto LABEL_79;
                }
                if (v64 >= v73) {
                  break;
                }
                unint64_t v65 = *(void *)(v72 + 8 * v64);
                int64_t v66 = v50 + 1;
                if (!v65)
                {
                  int64_t v66 = v50 + 2;
                  if (v50 + 2 >= v73) {
                    break;
                  }
                  unint64_t v65 = *(void *)(v72 + 8 * v66);
                  if (!v65)
                  {
                    int64_t v66 = v50 + 3;
                    if (v50 + 3 >= v73) {
                      break;
                    }
                    unint64_t v65 = *(void *)(v72 + 8 * v66);
                    if (!v65)
                    {
                      int64_t v66 = v50 + 4;
                      if (v50 + 4 >= v73) {
                        break;
                      }
                      unint64_t v65 = *(void *)(v72 + 8 * v66);
                      if (!v65)
                      {
                        int64_t v66 = v50 + 5;
                        if (v50 + 5 >= v73) {
                          break;
                        }
                        unint64_t v65 = *(void *)(v72 + 8 * v66);
                        if (!v65)
                        {
                          int64_t v66 = v50 + 6;
                          if (v50 + 6 >= v73) {
                            break;
                          }
                          unint64_t v65 = *(void *)(v72 + 8 * v66);
                          if (!v65)
                          {
                            int64_t v66 = v50 + 7;
                            if (v50 + 7 >= v73) {
                              break;
                            }
                            unint64_t v65 = *(void *)(v72 + 8 * v66);
                            if (!v65)
                            {
                              uint64_t v67 = v50 + 8;
                              if (v50 + 8 >= v73) {
                                break;
                              }
                              unint64_t v65 = *(void *)(v72 + 8 * v67);
                              if (!v65)
                              {
                                uint64_t v36 = v78;
                                while (1)
                                {
                                  int64_t v66 = v67 + 1;
                                  if (__OFADD__(v67, 1LL)) {
                                    goto LABEL_80;
                                  }
                                  if (v66 >= v73) {
                                    goto LABEL_64;
                                  }
                                  unint64_t v65 = *(void *)(v72 + 8 * v66);
                                  ++v67;
                                  if (v65) {
                                    goto LABEL_63;
                                  }
                                }
                              }

                              int64_t v66 = v50 + 8;
                              uint64_t v36 = v78;
                            }
                          }
                        }
                      }
                    }
                  }
                }